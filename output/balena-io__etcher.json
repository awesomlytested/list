{
    "repo": "balena-io/etcher",
    "url": "https://github.com/balena-io/etcher",
    "branch": "master",
    "configs": [
        {
            "package": "balena-etcher",
            "lang": "js",
            "dir": "tests",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "should have no drives by default",
            "suites": [
                "Model: availableDrives",
                "availableDrives"
            ],
            "updatePoint": {
                "line": 24,
                "column": 40
            },
            "line": 24,
            "code": "    it('should have no drives by default', function () {\n      expect(availableDrives.getDrives()).to.deep.equal([]);\n    });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if no drives",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 28,
                "column": 35
            },
            "line": 28,
            "code": "      it('should throw if no drives', function () {\n        expect(function () {\n          // @ts-ignore\n          availableDrives.setDrives();\n        }).to.throw('Missing drives');\n      });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if drives is not an array",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 34,
                "column": 48
            },
            "line": 34,
            "code": "      it('should throw if drives is not an array', function () {\n        expect(function () {\n          // @ts-ignore\n          availableDrives.setDrives(123);\n        }).to.throw('Invalid drives: 123');\n      });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if drives is not an array of objects",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 40,
                "column": 59
            },
            "line": 40,
            "code": "      it('should throw if drives is not an array of objects', function () {\n        expect(function () {\n          // @ts-ignore\n          availableDrives.setDrives([123, 123, 123]);\n        }).to.throw('Invalid drives: 123,123,123');\n      });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".hasAvailableDrives()"
            ],
            "updatePoint": {
                "line": 49,
                "column": 31
            },
            "line": 49,
            "code": "        it('should return false', function () {\n          expect(availableDrives.hasAvailableDrives()).to.be.false;\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to set drives",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 54,
                "column": 40
            },
            "line": 54,
            "code": "        it('should be able to set drives', function () {\n          const drives = [{\n            device: '/dev/sdb',\n            description: 'Foo',\n            size: 14000000000,\n            mountpoints: [{\n              path: '/mnt/foo'\n            }],\n            isSystem: false\n          }];\n          availableDrives.setDrives(drives);\n          expect(availableDrives.getDrives()).to.deep.equal(drives);\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to set drives with extra properties",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 67,
                "column": 62
            },
            "line": 67,
            "code": "        it('should be able to set drives with extra properties', function () {\n          const drives = [{\n            device: '/dev/sdb',\n            description: 'Foo',\n            size: 14000000000,\n            mountpoints: [{\n              path: '/mnt/foo'\n            }],\n            isSystem: false,\n            foo: {\n              bar: 'baz',\n              qux: 5\n            },\n            set: {}\n          }];\n          availableDrives.setDrives(drives);\n          expect(availableDrives.getDrives()).to.deep.equal(drives);\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to set drives with null sizes",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 85,
                "column": 56
            },
            "line": 85,
            "code": "        it('should be able to set drives with null sizes', function () {\n          const drives = [{\n            device: '/dev/sdb',\n            description: 'Foo',\n            size: null,\n            mountpoints: [{\n              path: '/mnt/foo'\n            }],\n            isSystem: false\n          }];\n          availableDrives.setDrives(drives);\n          expect(availableDrives.getDrives()).to.deep.equal(drives);\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should auto-select a single valid available drive",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given no selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 102,
                "column": 63
            },
            "line": 102,
            "code": "          it('should auto-select a single valid available drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 999999999,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.true;\n            expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/sdb');\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not auto-select when there are multiple valid available drives",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given a selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 141,
                "column": 83
            },
            "line": 141,
            "code": "          it('should not auto-select when there are multiple valid available drives', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 999999999,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }, {\n              device: '/dev/sdc',\n              name: 'Bar',\n              size: 999999999,\n              mountpoints: [{\n                path: '/mnt/bar'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should auto-select a single valid available drive",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given a selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 164,
                "column": 63
            },
            "line": 164,
            "code": "          it('should auto-select a single valid available drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 2000000000,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/sdb');\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not auto-select a single too small drive",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given a selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 178,
                "column": 61
            },
            "line": 178,
            "code": "          it('should not auto-select a single too small drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 99999999,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not auto-select a single drive that doesn't meet the recommended size",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given a selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 192,
                "column": 90
            },
            "line": 192,
            "code": "          it(\"should not auto-select a single drive that doesn't meet the recommended size\", function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 1500000000,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not auto-select a single protected drive",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given a selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 206,
                "column": 61
            },
            "line": 206,
            "code": "          it('should not auto-select a single protected drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 2000000000,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: true\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not auto-select a source drive",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given a selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 220,
                "column": 51
            },
            "line": 220,
            "code": "          it('should not auto-select a source drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 2000000000,\n              mountpoints: [{\n                path: path.dirname(this.imagePath)\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not auto-select a single system drive",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given a selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 234,
                "column": 58
            },
            "line": 234,
            "code": "          it('should not auto-select a single system drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 2000000000,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: true,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not auto-select a single large size drive",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given no drives",
                ".setDrives()",
                "given a selected image and no selected drive"
            ],
            "updatePoint": {
                "line": 248,
                "column": 62
            },
            "line": 248,
            "code": "          it('should not auto-select a single large size drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: constraints.LARGE_DRIVE_SIZE + 1,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              system: false,\n              protected: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be deleted if its not contained in the available drives anymore",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given drives",
                "given one of the drives was selected"
            ],
            "updatePoint": {
                "line": 305,
                "column": 82
            },
            "line": 305,
            "code": "        it('should be deleted if its not contained in the available drives anymore', function () {\n          expect(selectionState.hasDrive()).to.be.true; // We have to provide at least two drives, otherwise,\n          // if we only provide one, the single drive will be\n          // auto-selected.\n\n          availableDrives.setDrives([{\n            device: '/dev/sda',\n            name: 'USB Drive',\n            size: 9999999,\n            mountpoints: [{\n              path: '/mnt/bar'\n            }],\n            isSystem: false,\n            isReadOnly: false\n          }, {\n            device: '/dev/sdb',\n            name: 'SD Card',\n            size: 9999999,\n            mountpoints: [{\n              path: '/mnt/foo'\n            }],\n            isSystem: false,\n            isReadOnly: false\n          }]);\n          expect(selectionState.hasDrive()).to.be.false;\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given drives",
                ".hasAvailableDrives()"
            ],
            "updatePoint": {
                "line": 333,
                "column": 30
            },
            "line": 333,
            "code": "        it('should return true', function () {\n          const hasDrives = availableDrives.hasAvailableDrives();\n          expect(hasDrives).to.be.true;\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should keep the same drives if equal",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given drives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 339,
                "column": 48
            },
            "line": 339,
            "code": "        it('should keep the same drives if equal', function () {\n          availableDrives.setDrives(this.drives);\n          expect(availableDrives.getDrives()).to.deep.equal(this.drives);\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return empty array given an empty array",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given drives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 343,
                "column": 58
            },
            "line": 343,
            "code": "        it('should return empty array given an empty array', function () {\n          availableDrives.setDrives([]);\n          expect(availableDrives.getDrives()).to.deep.equal([]);\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should consider drives with different $$hashKey the same",
            "suites": [
                "Model: availableDrives",
                "availableDrives",
                "given drives",
                ".setDrives()"
            ],
            "updatePoint": {
                "line": 347,
                "column": 68
            },
            "line": 347,
            "code": "        it('should consider drives with different $$hashKey the same', function () {\n          this.drives[0].$$haskey = 1234;\n          availableDrives.setDrives(this.drives);\n          expect(availableDrives.getDrives()).to.deep.equal(this.drives);\n        });",
            "file": "gui/models/available-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "getImage() should return undefined",
            "suites": [
                "Model: selectionState",
                "given a clean state"
            ],
            "updatePoint": {
                "line": 28,
                "column": 42
            },
            "line": 28,
            "code": "    it('getImage() should return undefined', function () {\n      expect(selectionState.getImage()).to.be.undefined;\n    });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "hasDrive() should return false",
            "suites": [
                "Model: selectionState",
                "given a clean state"
            ],
            "updatePoint": {
                "line": 31,
                "column": 38
            },
            "line": 31,
            "code": "    it('hasDrive() should return false', function () {\n      const hasDrive = selectionState.hasDrive();\n      expect(hasDrive).to.be.false;\n    });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "hasImage() should return false",
            "suites": [
                "Model: selectionState",
                "given a clean state"
            ],
            "updatePoint": {
                "line": 35,
                "column": 38
            },
            "line": 35,
            "code": "    it('hasImage() should return false', function () {\n      const hasImage = selectionState.hasImage();\n      expect(hasImage).to.be.false;\n    });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": ".getSelectedDrives() should return []",
            "suites": [
                "Model: selectionState",
                "given a clean state"
            ],
            "updatePoint": {
                "line": 39,
                "column": 45
            },
            "line": 39,
            "code": "    it('.getSelectedDrives() should return []', function () {\n      expect(selectionState.getSelectedDrives()).to.deep.equal([]);\n    });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not deselect when warning is attached to image-drive pair",
            "suites": [
                "Model: selectionState",
                "given one available drive",
                ".selectDrive()"
            ],
            "updatePoint": {
                "line": 57,
                "column": 74
            },
            "line": 57,
            "code": "      it('should not deselect when warning is attached to image-drive pair', function () {\n        this.drives[0].size = 64e10;\n        availableDrives.setDrives(this.drives);\n        selectionState.selectDrive('/dev/disk2');\n        availableDrives.setDrives(this.drives);\n        expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/disk2');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true",
            "suites": [
                "Model: selectionState",
                "given a drive",
                ".hasDrive()"
            ],
            "updatePoint": {
                "line": 85,
                "column": 28
            },
            "line": 85,
            "code": "      it('should return true', function () {\n        const hasDrive = selectionState.hasDrive();\n        expect(hasDrive).to.be.true;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should queue the drive",
            "suites": [
                "Model: selectionState",
                "given a drive",
                ".selectDrive()"
            ],
            "updatePoint": {
                "line": 91,
                "column": 32
            },
            "line": 91,
            "code": "      it('should queue the drive', function () {\n        selectionState.selectDrive('/dev/disk5');\n        const drives = selectionState.getSelectedDevices();\n        const lastDriveDevice = drives.pop();\n        const lastDrive = availableDrives.getDrives().find(drive => drive.device === lastDriveDevice);\n        expect(lastDrive).to.deep.equal({\n          device: '/dev/disk5',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: false\n        });\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clear drive",
            "suites": [
                "Model: selectionState",
                "given a drive",
                ".deselectDrive()"
            ],
            "updatePoint": {
                "line": 105,
                "column": 28
            },
            "line": 105,
            "code": "      it('should clear drive', function () {\n        const firstDevice = selectionState.getSelectedDevices()[0];\n        selectionState.deselectDrive(firstDevice);\n        const devices = selectionState.getSelectedDevices();\n        expect(devices.length).to.equal(0);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return that single selected drive",
            "suites": [
                "Model: selectionState",
                "given a drive",
                ".getSelectedDrives()"
            ],
            "updatePoint": {
                "line": 113,
                "column": 50
            },
            "line": 113,
            "code": "      it('should return that single selected drive', function () {\n        expect(selectionState.getSelectedDrives()).to.deep.equal([{\n          device: '/dev/disk2',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: false\n        }]);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to add more drives",
            "suites": [
                "Model: selectionState",
                "given several drives"
            ],
            "updatePoint": {
                "line": 152,
                "column": 41
            },
            "line": 152,
            "code": "    it('should be able to add more drives', function () {\n      selectionState.selectDrive(this.drives[2].device);\n      expect(selectionState.getSelectedDevices()).to.deep.equal(this.drives.map(drive => drive.device));\n    });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to remove drives",
            "suites": [
                "Model: selectionState",
                "given several drives"
            ],
            "updatePoint": {
                "line": 156,
                "column": 39
            },
            "line": 156,
            "code": "    it('should be able to remove drives', function () {\n      selectionState.deselectDrive(this.drives[1].device);\n      expect(selectionState.getSelectedDevices()).to.deep.equal([this.drives[0].device]);\n    });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should keep system drives selected",
            "suites": [
                "Model: selectionState",
                "given several drives"
            ],
            "updatePoint": {
                "line": 160,
                "column": 42
            },
            "line": 160,
            "code": "    it('should keep system drives selected', function () {\n      const systemDrive = {\n        device: '/dev/disk0',\n        name: 'USB Drive 0',\n        size: 999999999,\n        isReadOnly: false,\n        system: true\n      };\n      const newDrives = [...this.drives.slice(0, -1), systemDrive];\n      availableDrives.setDrives(newDrives);\n      selectionState.selectDrive(systemDrive.device);\n      availableDrives.setDrives(newDrives);\n      expect(selectionState.getSelectedDevices()).to.deep.equal(newDrives.map(drive => drive.device));\n    });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to remove a drive",
            "suites": [
                "Model: selectionState",
                "given several drives"
            ],
            "updatePoint": {
                "line": 174,
                "column": 40
            },
            "line": 174,
            "code": "    it('should be able to remove a drive', function () {\n      expect(selectionState.getSelectedDevices().length).to.equal(2);\n      selectionState.toggleDrive(this.drives[0].device);\n      expect(selectionState.getSelectedDevices()).to.deep.equal([this.drives[1].device]);\n    });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should remove all drives",
            "suites": [
                "Model: selectionState",
                "given several drives",
                ".deselectAllDrives()"
            ],
            "updatePoint": {
                "line": 180,
                "column": 34
            },
            "line": 180,
            "code": "      it('should remove all drives', function () {\n        selectionState.deselectAllDrives();\n        expect(selectionState.getSelectedDevices()).to.deep.equal([]);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clear drives",
            "suites": [
                "Model: selectionState",
                "given several drives",
                ".deselectDrive()"
            ],
            "updatePoint": {
                "line": 186,
                "column": 29
            },
            "line": 186,
            "code": "      it('should clear drives', function () {\n        const devices = selectionState.getSelectedDevices();\n        selectionState.deselectDrive(devices[0]);\n        selectionState.deselectDrive(devices[1]);\n        expect(selectionState.getSelectedDevices().length).to.equal(0);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the selected drives",
            "suites": [
                "Model: selectionState",
                "given several drives",
                ".getSelectedDrives()"
            ],
            "updatePoint": {
                "line": 194,
                "column": 43
            },
            "line": 194,
            "code": "      it('should return the selected drives', function () {\n        expect(selectionState.getSelectedDrives()).to.deep.equal([{\n          device: '/dev/disk2',\n          name: 'USB Drive 2',\n          size: 999999999,\n          isReadOnly: false\n        }, {\n          device: '/dev/sdb',\n          description: 'DataTraveler 2.0',\n          size: 999999999,\n          mountpoint: '/media/UNTITLED',\n          name: '/dev/sdb',\n          system: false,\n          isReadOnly: false\n        }]);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to set a drive",
            "suites": [
                "Model: selectionState",
                "given no drive",
                ".selectDrive()"
            ],
            "updatePoint": {
                "line": 214,
                "column": 39
            },
            "line": 214,
            "code": "      it('should be able to set a drive', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk5',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: false\n        }]);\n        selectionState.selectDrive('/dev/disk5');\n        expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/disk5');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if drive is read-only",
            "suites": [
                "Model: selectionState",
                "given no drive",
                ".selectDrive()"
            ],
            "updatePoint": {
                "line": 224,
                "column": 44
            },
            "line": 224,
            "code": "      it('should throw if drive is read-only', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: true\n        }]);\n        expect(function () {\n          selectionState.selectDrive('/dev/disk1');\n        }).to.throw('The drive is write-protected');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if the drive is not available",
            "suites": [
                "Model: selectionState",
                "given no drive",
                ".selectDrive()"
            ],
            "updatePoint": {
                "line": 235,
                "column": 52
            },
            "line": 235,
            "code": "      it('should throw if the drive is not available', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: true\n        }]);\n        expect(function () {\n          selectionState.selectDrive('/dev/disk5');\n        }).to.throw('The drive is not available: /dev/disk5');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if device is not a string",
            "suites": [
                "Model: selectionState",
                "given no drive",
                ".selectDrive()"
            ],
            "updatePoint": {
                "line": 246,
                "column": 48
            },
            "line": 246,
            "code": "      it('should throw if device is not a string', function () {\n        expect(function () {\n          // @ts-ignore\n          selectionState.selectDrive(123);\n        }).to.throw('Invalid drive: 123');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if drive is not large enough",
            "suites": [
                "Model: selectionState",
                "given an image",
                ".selectDrive()"
            ],
            "updatePoint": {
                "line": 269,
                "column": 51
            },
            "line": 269,
            "code": "      it('should throw if drive is not large enough', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk2',\n          name: 'USB Drive',\n          size: 999999998,\n          isReadOnly: false\n        }]);\n        expect(function () {\n          selectionState.selectDrive('/dev/disk2');\n        }).to.throw('The drive is not large enough');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the image",
            "suites": [
                "Model: selectionState",
                "given an image",
                ".getImage()"
            ],
            "updatePoint": {
                "line": 282,
                "column": 33
            },
            "line": 282,
            "code": "      it('should return the image', function () {\n        expect(selectionState.getImage()).to.deep.equal(this.image);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true",
            "suites": [
                "Model: selectionState",
                "given an image",
                ".hasImage()"
            ],
            "updatePoint": {
                "line": 287,
                "column": 28
            },
            "line": 287,
            "code": "      it('should return true', function () {\n        const hasImage = selectionState.hasImage();\n        expect(hasImage).to.be.true;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should override the image",
            "suites": [
                "Model: selectionState",
                "given an image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 293,
                "column": 35
            },
            "line": 293,
            "code": "      it('should override the image', function () {\n        selectionState.selectSource({\n          description: 'bar.img',\n          displayName: 'bar.img',\n          path: 'bar.img',\n          extension: 'img',\n          size: 999999999,\n          isSizeEstimated: false,\n          SourceType: File\n        });\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('bar.img');\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.equal(999999999);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clear the image",
            "suites": [
                "Model: selectionState",
                "given an image",
                ".deselectImage()"
            ],
            "updatePoint": {
                "line": 310,
                "column": 32
            },
            "line": 310,
            "code": "      it('should clear the image', function () {\n        selectionState.deselectImage();\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.be.undefined;\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.be.undefined;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to set an image",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 332,
                "column": 40
            },
            "line": 332,
            "code": "      it('should be able to set an image', function () {\n        selectionState.selectSource(image);\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('foo.img');\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.equal(999999999);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to set an image with an archive extension",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 339,
                "column": 66
            },
            "line": 339,
            "code": "      it('should be able to set an image with an archive extension', function () {\n        selectionState.selectSource({ ...image,\n          path: 'foo.zip',\n          archiveExtension: 'zip'\n        });\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('foo.zip');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should infer a compressed raw image if the penultimate extension is missing",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 347,
                "column": 85
            },
            "line": 347,
            "code": "      it('should infer a compressed raw image if the penultimate extension is missing', function () {\n        selectionState.selectSource({ ...image,\n          path: 'foo.xz',\n          archiveExtension: 'xz'\n        });\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('foo.xz');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should infer a compressed raw image if the penultimate extension is not a file extension",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 355,
                "column": 98
            },
            "line": 355,
            "code": "      it('should infer a compressed raw image if the penultimate extension is not a file extension', function () {\n        selectionState.selectSource({ ...image,\n          path: 'something.linux-x86-64.gz',\n          archiveExtension: 'gz'\n        });\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('something.linux-x86-64.gz');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if the original size is a float number",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 363,
                "column": 61
            },
            "line": 363,
            "code": "      it('should throw if the original size is a float number', function () {\n        expect(function () {\n          selectionState.selectSource({ ...image,\n            path: 'foo.img',\n            extension: 'img',\n            size: 999999999,\n            compressedSize: 999999999.999,\n            isSizeEstimated: false\n          });\n        }).to.throw('Invalid image compressed size: 999999999.999');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if the original size is negative",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 374,
                "column": 55
            },
            "line": 374,
            "code": "      it('should throw if the original size is negative', function () {\n        expect(function () {\n          selectionState.selectSource({ ...image,\n            compressedSize: -1\n          });\n        }).to.throw('Invalid image compressed size: -1');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if the final size is a float number",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 381,
                "column": 58
            },
            "line": 381,
            "code": "      it('should throw if the final size is a float number', function () {\n        expect(function () {\n          selectionState.selectSource({ ...image,\n            size: 999999999.999\n          });\n        }).to.throw('Invalid image size: 999999999.999');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if the final size is negative",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 388,
                "column": 52
            },
            "line": 388,
            "code": "      it('should throw if the final size is negative', function () {\n        expect(function () {\n          selectionState.selectSource({ ...image,\n            size: -1\n          });\n        }).to.throw('Invalid image size: -1');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should de-select a previously selected not-large-enough drive",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 395,
                "column": 71
            },
            "line": 395,
            "code": "      it('should de-select a previously selected not-large-enough drive', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 123456789,\n          isReadOnly: false\n        }]);\n        selectionState.selectDrive('/dev/disk1');\n        expect(selectionState.hasDrive()).to.be.true;\n        selectionState.selectSource({ ...image,\n          size: 1234567890\n        });\n        expect(selectionState.hasDrive()).to.be.false;\n        selectionState.deselectImage();\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should de-select a previously selected not-recommended drive",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 410,
                "column": 70
            },
            "line": 410,
            "code": "      it('should de-select a previously selected not-recommended drive', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 1200000000,\n          isReadOnly: false\n        }]);\n        selectionState.selectDrive('/dev/disk1');\n        expect(selectionState.hasDrive()).to.be.true;\n        selectionState.selectSource({ ...image,\n          recommendedDriveSize: 1500000000\n        });\n        expect(selectionState.hasDrive()).to.be.false;\n        selectionState.deselectImage();\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should de-select a previously selected source drive",
            "suites": [
                "Model: selectionState",
                "given no image",
                ".selectImage()"
            ],
            "updatePoint": {
                "line": 425,
                "column": 61
            },
            "line": 425,
            "code": "      it('should de-select a previously selected source drive', function () {\n        const imagePath = process.platform === 'win32' ? 'E:\\\\bar\\\\foo.img' : '/mnt/bar/foo.img';\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 1200000000,\n          mountpoints: [{\n            path: path.dirname(imagePath)\n          }],\n          isReadOnly: false\n        }]);\n        selectionState.selectDrive('/dev/disk1');\n        expect(selectionState.hasDrive()).to.be.true;\n        selectionState.selectSource({ ...image,\n          path: imagePath,\n          extension: 'img',\n          size: 999999999\n        });\n        expect(selectionState.hasDrive()).to.be.false;\n        selectionState.deselectImage();\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clear all selections",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".clear()"
            ],
            "updatePoint": {
                "line": 469,
                "column": 37
            },
            "line": 469,
            "code": "      it('should clear all selections', function () {\n        expect(selectionState.hasDrive()).to.be.true;\n        expect(selectionState.hasImage()).to.be.true;\n        selectionState.clear();\n        expect(selectionState.hasDrive()).to.be.false;\n        expect(selectionState.hasImage()).to.be.false;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "getImagePath() should return undefined",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".deselectImage()"
            ],
            "updatePoint": {
                "line": 481,
                "column": 48
            },
            "line": 481,
            "code": "      it('getImagePath() should return undefined', function () {\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.be.undefined;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "getImageSize() should return undefined",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".deselectImage()"
            ],
            "updatePoint": {
                "line": 485,
                "column": 48
            },
            "line": 485,
            "code": "      it('getImageSize() should return undefined', function () {\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.be.undefined;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not clear any drives",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".deselectImage()"
            ],
            "updatePoint": {
                "line": 489,
                "column": 37
            },
            "line": 489,
            "code": "      it('should not clear any drives', function () {\n        expect(selectionState.hasDrive()).to.be.true;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "hasImage() should return false",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".deselectImage()"
            ],
            "updatePoint": {
                "line": 492,
                "column": 40
            },
            "line": 492,
            "code": "      it('hasImage() should return false', function () {\n        const hasImage = selectionState.hasImage();\n        expect(hasImage).to.be.false;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "getImagePath() should return the image path",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".deselectAllDrives()"
            ],
            "updatePoint": {
                "line": 501,
                "column": 53
            },
            "line": 501,
            "code": "      it('getImagePath() should return the image path', function () {\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('foo.img');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "getImageSize() should return the image size",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".deselectAllDrives()"
            ],
            "updatePoint": {
                "line": 505,
                "column": 53
            },
            "line": 505,
            "code": "      it('getImageSize() should return the image size', function () {\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.equal(999999999);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "hasDrive() should return false",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".deselectAllDrives()"
            ],
            "updatePoint": {
                "line": 509,
                "column": 40
            },
            "line": 509,
            "code": "      it('hasDrive() should return false', function () {\n        const hasDrive = selectionState.hasDrive();\n        expect(hasDrive).to.be.false;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not clear the image",
            "suites": [
                "Model: selectionState",
                "given a drive and an image",
                ".deselectAllDrives()"
            ],
            "updatePoint": {
                "line": 513,
                "column": 36
            },
            "line": 513,
            "code": "      it('should not clear the image', function () {\n        expect(selectionState.hasImage()).to.be.true;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clear all selections",
            "suites": [
                "Model: selectionState",
                "given several drives",
                ".clear()"
            ],
            "updatePoint": {
                "line": 551,
                "column": 37
            },
            "line": 551,
            "code": "      it('should clear all selections', function () {\n        expect(selectionState.hasDrive()).to.be.true;\n        expect(selectionState.hasImage()).to.be.true;\n        selectionState.clear();\n        expect(selectionState.hasDrive()).to.be.false;\n        expect(selectionState.hasImage()).to.be.false;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be able to remove the drive",
            "suites": [
                "Model: selectionState",
                ".toggleDrive()",
                "given a selected drive"
            ],
            "updatePoint": {
                "line": 586,
                "column": 44
            },
            "line": 586,
            "code": "      it('should be able to remove the drive', function () {\n        expect(selectionState.hasDrive()).to.be.true;\n        selectionState.toggleDrive(this.drive.device);\n        expect(selectionState.hasDrive()).to.be.false;\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not replace a different drive",
            "suites": [
                "Model: selectionState",
                ".toggleDrive()",
                "given a selected drive"
            ],
            "updatePoint": {
                "line": 591,
                "column": 46
            },
            "line": 591,
            "code": "      it('should not replace a different drive', function () {\n        const drive = {\n          device: '/dev/disk2',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: false\n        };\n        expect(selectionState.getSelectedDevices()[0]).to.deep.equal(this.drive.device);\n        selectionState.toggleDrive(drive.device);\n        expect(selectionState.getSelectedDevices()[0]).to.deep.equal(this.drive.device);\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should set the drive",
            "suites": [
                "Model: selectionState",
                ".toggleDrive()",
                "given no selected drive"
            ],
            "updatePoint": {
                "line": 621,
                "column": 30
            },
            "line": 621,
            "code": "      it('should set the drive', function () {\n        const drive = {\n          device: '/dev/disk2',\n          name: 'USB Drive 2',\n          size: 999999999,\n          isReadOnly: false\n        };\n        expect(selectionState.hasDrive()).to.be.false;\n        selectionState.toggleDrive(drive.device);\n        expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/disk2');\n      });",
            "file": "gui/models/selection-state.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should have the ipc config set to silent",
            "suites": [
                "Browser: childWriter"
            ],
            "updatePoint": {
                "line": 20,
                "column": 46
            },
            "line": 20,
            "code": "  it('should have the ipc config set to silent', function () {\n    expect(ipc.config.silent).to.be.true;\n  });",
            "file": "gui/modules/child-writer.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should report 0% if percentage == 0 but speed != 0",
            "suites": [
                "Browser: progressStatus",
                ".titleFromFlashState()"
            ],
            "updatePoint": {
                "line": 30,
                "column": 58
            },
            "line": 30,
            "code": "    it('should report 0% if percentage == 0 but speed != 0', function () {\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('0% Flashing...');\n    });",
            "file": "gui/modules/progress-status.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should handle percentage == 0, flashing",
            "suites": [
                "Browser: progressStatus",
                ".titleFromFlashState()"
            ],
            "updatePoint": {
                "line": 33,
                "column": 47
            },
            "line": 33,
            "code": "    it('should handle percentage == 0, flashing', function () {\n      this.state.speed = 0;\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('0% Flashing...');\n    });",
            "file": "gui/modules/progress-status.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should handle percentage == 0, verifying",
            "suites": [
                "Browser: progressStatus",
                ".titleFromFlashState()"
            ],
            "updatePoint": {
                "line": 37,
                "column": 48
            },
            "line": 37,
            "code": "    it('should handle percentage == 0, verifying', function () {\n      this.state.speed = 0;\n      this.state.type = 'verifying';\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('0% Validating...');\n    });",
            "file": "gui/modules/progress-status.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should handle percentage == 50, flashing",
            "suites": [
                "Browser: progressStatus",
                ".titleFromFlashState()"
            ],
            "updatePoint": {
                "line": 42,
                "column": 48
            },
            "line": 42,
            "code": "    it('should handle percentage == 50, flashing', function () {\n      this.state.percentage = 50;\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('50% Flashing...');\n    });",
            "file": "gui/modules/progress-status.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should handle percentage == 50, verifying",
            "suites": [
                "Browser: progressStatus",
                ".titleFromFlashState()"
            ],
            "updatePoint": {
                "line": 46,
                "column": 49
            },
            "line": 46,
            "code": "    it('should handle percentage == 50, verifying', function () {\n      this.state.percentage = 50;\n      this.state.type = 'verifying';\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('50% Validating...');\n    });",
            "file": "gui/modules/progress-status.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should handle percentage == 100, flashing",
            "suites": [
                "Browser: progressStatus",
                ".titleFromFlashState()"
            ],
            "updatePoint": {
                "line": 51,
                "column": 49
            },
            "line": 51,
            "code": "    it('should handle percentage == 100, flashing', function () {\n      this.state.percentage = 100;\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('Finishing...');\n    });",
            "file": "gui/modules/progress-status.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should handle percentage == 100, verifying",
            "suites": [
                "Browser: progressStatus",
                ".titleFromFlashState()"
            ],
            "updatePoint": {
                "line": 55,
                "column": 50
            },
            "line": 55,
            "code": "    it('should handle percentage == 100, verifying', function () {\n      this.state.percentage = 100;\n      this.state.type = 'verifying';\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('Finishing...');\n    });",
            "file": "gui/modules/progress-status.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should handle percentage == 100, validating",
            "suites": [
                "Browser: progressStatus",
                ".titleFromFlashState()"
            ],
            "updatePoint": {
                "line": 60,
                "column": 51
            },
            "line": 60,
            "code": "    it('should handle percentage == 100, validating', function () {\n      this.state.percentage = 100;\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('Finishing...');\n    });",
            "file": "gui/modules/progress-status.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should translate 0-100 percentages to 0-1 ranges",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 36,
                "column": 60
            },
            "line": 36,
            "code": "        it('should translate 0-100 percentages to 0-1 ranges', function () {\n          windowProgress.set(this.state);\n          assert.calledWith(this.setProgressBarSpy, 0.85);\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should set 0 given 0",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 40,
                "column": 32
            },
            "line": 40,
            "code": "        it('should set 0 given 0', function () {\n          this.state.percentage = 0;\n          windowProgress.set(this.state);\n          assert.calledWith(this.setProgressBarSpy, 0);\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should set 1 given 100",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 45,
                "column": 34
            },
            "line": 45,
            "code": "        it('should set 1 given 100', function () {\n          this.state.percentage = 100;\n          windowProgress.set(this.state);\n          assert.calledWith(this.setProgressBarSpy, 1);\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if given a percentage higher than 100",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 50,
                "column": 62
            },
            "line": 50,
            "code": "        it('should throw if given a percentage higher than 100', function () {\n          this.state.percentage = 101;\n          const state = this.state;\n          expect(function () {\n            windowProgress.set(state);\n          }).to.throw('Invalid percentage: 101');\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if given a percentage less than 0",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 57,
                "column": 58
            },
            "line": 57,
            "code": "        it('should throw if given a percentage less than 0', function () {\n          this.state.percentage = -1;\n          const state = this.state;\n          expect(function () {\n            windowProgress.set(state);\n          }).to.throw('Invalid percentage: -1');\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should set the flashing title",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 64,
                "column": 41
            },
            "line": 64,
            "code": "        it('should set the flashing title', function () {\n          windowProgress.set(this.state);\n          assert.calledWith(this.setTitleSpy, ' – 85% Flashing...');\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should set the verifying title",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 68,
                "column": 42
            },
            "line": 68,
            "code": "        it('should set the verifying title', function () {\n          this.state.type = 'verifying';\n          windowProgress.set(this.state);\n          assert.calledWith(this.setTitleSpy, ' – 85% Validating...');\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should set the starting title",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 73,
                "column": 41
            },
            "line": 73,
            "code": "        it('should set the starting title', function () {\n          this.state.percentage = 0;\n          this.state.speed = 0;\n          windowProgress.set(this.state);\n          assert.calledWith(this.setTitleSpy, ' – 0% Flashing...');\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should set the finishing title",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".set()"
            ],
            "updatePoint": {
                "line": 79,
                "column": 42
            },
            "line": 79,
            "code": "        it('should set the finishing title', function () {\n          this.state.percentage = 100;\n          windowProgress.set(this.state);\n          assert.calledWith(this.setTitleSpy, ' – Finishing...');\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should set -1",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".clear()"
            ],
            "updatePoint": {
                "line": 86,
                "column": 25
            },
            "line": 86,
            "code": "        it('should set -1', function () {\n          windowProgress.clear();\n          assert.calledWith(this.setProgressBarSpy, -1);\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clear the window title",
            "suites": [
                "Browser: WindowProgress",
                "windowProgress",
                "given a stubbed current window",
                ".clear()"
            ],
            "updatePoint": {
                "line": 90,
                "column": 41
            },
            "line": 90,
            "code": "        it('should clear the window title', function () {\n          windowProgress.clear();\n          assert.calledWith(this.setTitleSpy, '');\n        });",
            "file": "gui/os/window-progress.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse network drive mapping on Windows",
            "suites": [
                "Network drives on Windows"
            ],
            "updatePoint": {
                "line": 34,
                "column": 51
            },
            "line": 34,
            "code": "  it('should parse network drive mapping on Windows', async () => {\n    expect(await wnd.replaceWindowsNetworkDriveLetter('Z:\\\\some-folder\\\\some-file', mockGetWmicOutput)).to.equal('\\\\\\\\192.168.1.1\\\\Publicé\\\\some-folder\\\\some-file');\n  });",
            "file": "gui/os/windows-network-drives.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw error if limit < 3",
            "suites": [
                "Browser: MiddleEllipsis",
                ".middleEllipsis()"
            ],
            "updatePoint": {
                "line": 20,
                "column": 39
            },
            "line": 20,
            "code": "    it('should throw error if limit < 3', function () {\n      expect(() => {\n        middleEllipsis('No', 2);\n      }).to.throw('middleEllipsis: Limit should be at least 3');\n    });",
            "file": "gui/utils/middle-ellipsis.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should always truncate input to an odd length",
            "suites": [
                "Browser: MiddleEllipsis",
                ".middleEllipsis()",
                "given the input length is greater than the limit"
            ],
            "updatePoint": {
                "line": 26,
                "column": 55
            },
            "line": 26,
            "code": "      it('should always truncate input to an odd length', function () {\n        const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n        expect(middleEllipsis(alphabet, 3)).to.have.lengthOf(3);\n        expect(middleEllipsis(alphabet, 4)).to.have.lengthOf(3);\n        expect(middleEllipsis(alphabet, 5)).to.have.lengthOf(5);\n        expect(middleEllipsis(alphabet, 6)).to.have.lengthOf(5);\n      });",
            "file": "gui/utils/middle-ellipsis.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the input if it is within the bounds of limit",
            "suites": [
                "Browser: MiddleEllipsis",
                ".middleEllipsis()",
                "given the input length is greater than the limit"
            ],
            "updatePoint": {
                "line": 34,
                "column": 67
            },
            "line": 34,
            "code": "    it('should return the input if it is within the bounds of limit', function () {\n      expect(middleEllipsis('Hello', 10)).to.equal('Hello');\n    });",
            "file": "gui/utils/middle-ellipsis.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be a plain object",
            "suites": [
                "Shared: Errors",
                ".HUMAN_FRIENDLY"
            ],
            "updatePoint": {
                "line": 21,
                "column": 32
            },
            "line": 21,
            "code": "    it('should be a plain object', function () {\n      expect(_.isPlainObject(errors.HUMAN_FRIENDLY)).to.be.true;\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should contain title and description function properties",
            "suites": [
                "Shared: Errors",
                ".HUMAN_FRIENDLY"
            ],
            "updatePoint": {
                "line": 24,
                "column": 64
            },
            "line": 24,
            "code": "    it('should contain title and description function properties', function () {\n      expect(_.every(_.map(errors.HUMAN_FRIENDLY, error => {\n        return _.isFunction(error.title) && _.isFunction(error.description);\n      }))).to.be.true;\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a generic error message if the error is an empty object",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 31,
                "column": 77
            },
            "line": 31,
            "code": "    it('should return a generic error message if the error is an empty object', function () {\n      const error = {}; // @ts-ignore\n\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the error message",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 36,
                "column": 39
            },
            "line": 36,
            "code": "    it('should return the error message', function () {\n      const error = new Error('This is an error');\n      expect(errors.getTitle(error)).to.equal('This is an error');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the error code if there is no message",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 40,
                "column": 59
            },
            "line": 40,
            "code": "    it('should return the error code if there is no message', function () {\n      const error = new Error(); // @ts-ignore\n\n      error.code = 'MYERROR';\n      expect(errors.getTitle(error)).to.equal('Error code: MYERROR');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should prioritize the message over the code",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 46,
                "column": 51
            },
            "line": 46,
            "code": "    it('should prioritize the message over the code', function () {\n      const error = new Error('Foo bar'); // @ts-ignore\n\n      error.code = 'MYERROR';\n      expect(errors.getTitle(error)).to.equal('Foo bar');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should prioritize the code over the message if the message is an empty string",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 52,
                "column": 85
            },
            "line": 52,
            "code": "    it('should prioritize the code over the message if the message is an empty string', function () {\n      const error = new Error(''); // @ts-ignore\n\n      error.code = 'MYERROR';\n      expect(errors.getTitle(error)).to.equal('Error code: MYERROR');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should prioritize the code over the message if the message is a blank string",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 58,
                "column": 84
            },
            "line": 58,
            "code": "    it('should prioritize the code over the message if the message is a blank string', function () {\n      const error = new Error('    '); // @ts-ignore\n\n      error.code = 'MYERROR';\n      expect(errors.getTitle(error)).to.equal('Error code: MYERROR');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should understand an error-like object with a code",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 64,
                "column": 58
            },
            "line": 64,
            "code": "    it('should understand an error-like object with a code', function () {\n      const error = {\n        code: 'MYERROR'\n      }; // @ts-ignore\n\n      expect(errors.getTitle(error)).to.equal('Error code: MYERROR');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should understand an error-like object with a message",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 71,
                "column": 61
            },
            "line": 71,
            "code": "    it('should understand an error-like object with a message', function () {\n      const error = {\n        message: 'Hello world'\n      }; // @ts-ignore\n\n      expect(errors.getTitle(error)).to.equal('Hello world');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should understand an error-like object with a message and a code",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 78,
                "column": 72
            },
            "line": 78,
            "code": "    it('should understand an error-like object with a message and a code', function () {\n      const error = {\n        message: 'Hello world',\n        code: 'MYERROR'\n      }; // @ts-ignore\n\n      expect(errors.getTitle(error)).to.equal('Hello world');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should display an error code 0",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 86,
                "column": 38
            },
            "line": 86,
            "code": "    it('should display an error code 0', function () {\n      const error = new Error(); // @ts-ignore\n\n      error.code = 0;\n      expect(errors.getTitle(error)).to.equal('Error code: 0');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should display an error code 1",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 92,
                "column": 38
            },
            "line": 92,
            "code": "    it('should display an error code 1', function () {\n      const error = new Error(); // @ts-ignore\n\n      error.code = 1;\n      expect(errors.getTitle(error)).to.equal('Error code: 1');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should display an error code -1",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 98,
                "column": 39
            },
            "line": 98,
            "code": "    it('should display an error code -1', function () {\n      const error = new Error(); // @ts-ignore\n\n      error.code = -1;\n      expect(errors.getTitle(error)).to.equal('Error code: -1');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not display an empty string error code",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 104,
                "column": 53
            },
            "line": 104,
            "code": "    it('should not display an empty string error code', function () {\n      const error = new Error(); // @ts-ignore\n\n      error.code = '';\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not display a blank string error code",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 110,
                "column": 52
            },
            "line": 110,
            "code": "    it('should not display a blank string error code', function () {\n      const error = new Error(); // @ts-ignore\n\n      error.code = '   ';\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a generic error message if no information was found",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 116,
                "column": 73
            },
            "line": 116,
            "code": "    it('should return a generic error message if no information was found', function () {\n      const error = new Error();\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a generic error message if no code and the message is empty",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 120,
                "column": 81
            },
            "line": 120,
            "code": "    it('should return a generic error message if no code and the message is empty', function () {\n      const error = new Error('');\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a generic error message if no code and the message is blank",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 124,
                "column": 81
            },
            "line": 124,
            "code": "    it('should return a generic error message if no code and the message is blank', function () {\n      const error = new Error('   ');\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should rephrase an ENOENT error",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 128,
                "column": 39
            },
            "line": 128,
            "code": "    it('should rephrase an ENOENT error', function () {\n      const error = new Error('ENOENT error'); // @ts-ignore\n\n      error.path = '/foo/bar'; // @ts-ignore\n\n      error.code = 'ENOENT';\n      expect(errors.getTitle(error)).to.equal('No such file or directory: /foo/bar');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should rephrase an EPERM error",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 136,
                "column": 38
            },
            "line": 136,
            "code": "    it('should rephrase an EPERM error', function () {\n      const error = new Error('EPERM error'); // @ts-ignore\n\n      error.code = 'EPERM';\n      expect(errors.getTitle(error)).to.equal(\"You're not authorized to perform this operation\");\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should rephrase an EACCES error",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 142,
                "column": 39
            },
            "line": 142,
            "code": "    it('should rephrase an EACCES error', function () {\n      const error = new Error('EACCES error'); // @ts-ignore\n\n      error.code = 'EACCES';\n      expect(errors.getTitle(error)).to.equal(\"You don't have access to this resource\");\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should rephrase an ENOMEM error",
            "suites": [
                "Shared: Errors",
                ".getTitle()"
            ],
            "updatePoint": {
                "line": 148,
                "column": 39
            },
            "line": 148,
            "code": "    it('should rephrase an ENOMEM error', function () {\n      const error = new Error('ENOMEM error'); // @ts-ignore\n\n      error.code = 'ENOMEM';\n      expect(errors.getTitle(error)).to.equal('Your system ran out of memory');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should understand an error-like object with a description",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 156,
                "column": 65
            },
            "line": 156,
            "code": "    it('should understand an error-like object with a description', function () {\n      const error = {\n        description: 'My description'\n      }; // @ts-ignore\n\n      expect(errors.getDescription(error)).to.equal('My description');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should understand an error-like object with a stack",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 163,
                "column": 59
            },
            "line": 163,
            "code": "    it('should understand an error-like object with a stack', function () {\n      const error = {\n        stack: 'My stack'\n      }; // @ts-ignore\n\n      expect(errors.getDescription(error)).to.equal('My stack');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should understand an error-like object with a description and a stack",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 170,
                "column": 77
            },
            "line": 170,
            "code": "    it('should understand an error-like object with a description and a stack', function () {\n      const error = {\n        description: 'My description',\n        stack: 'My stack'\n      }; // @ts-ignore\n\n      expect(errors.getDescription(error)).to.equal('My description');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should stringify and beautify an object without any known property",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 178,
                "column": 74
            },
            "line": 178,
            "code": "    it('should stringify and beautify an object without any known property', function () {\n      const error = {\n        name: 'John Doe',\n        job: 'Developer'\n      }; // @ts-ignore\n\n      expect(errors.getDescription(error)).to.equal(['{', '  \"name\": \"John Doe\",', '  \"job\": \"Developer\"', '}'].join('\\n'));\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the stack for a basic error",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 186,
                "column": 49
            },
            "line": 186,
            "code": "    it('should return the stack for a basic error', function () {\n      const error = new Error('Foo');\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should prefer a description property to a stack",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 190,
                "column": 55
            },
            "line": 190,
            "code": "    it('should prefer a description property to a stack', function () {\n      const error = new Error('Foo'); // @ts-ignore\n\n      error.description = 'My description';\n      expect(errors.getDescription(error)).to.equal('My description');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the stack if the description is an empty string",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 196,
                "column": 69
            },
            "line": 196,
            "code": "    it('should return the stack if the description is an empty string', function () {\n      const error = new Error('Foo'); // @ts-ignore\n\n      error.description = '';\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the stack if the description is a blank string",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 202,
                "column": 68
            },
            "line": 202,
            "code": "    it('should return the stack if the description is a blank string', function () {\n      const error = new Error('Foo'); // @ts-ignore\n\n      error.description = '   ';\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should get a generic description for ENOENT",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 208,
                "column": 51
            },
            "line": 208,
            "code": "    it('should get a generic description for ENOENT', function () {\n      const error = new Error('Foo'); // @ts-ignore\n\n      error.code = 'ENOENT';\n      expect(errors.getDescription(error)).to.equal(\"The file you're trying to access doesn't exist\");\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should get a generic description for EPERM",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 214,
                "column": 50
            },
            "line": 214,
            "code": "    it('should get a generic description for EPERM', function () {\n      const error = new Error('Foo'); // @ts-ignore\n\n      error.code = 'EPERM';\n      expect(errors.getDescription(error)).to.equal('Please ensure you have necessary permissions for this task');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should get a generic description for EACCES",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 220,
                "column": 51
            },
            "line": 220,
            "code": "    it('should get a generic description for EACCES', function () {\n      const error = new Error('Foo'); // @ts-ignore\n\n      error.code = 'EACCES';\n      const message = 'Please ensure you have necessary permissions to access this resource';\n      expect(errors.getDescription(error)).to.equal(message);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should get a generic description for ENOMEM",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 227,
                "column": 51
            },
            "line": 227,
            "code": "    it('should get a generic description for ENOMEM', function () {\n      const error = new Error('Foo'); // @ts-ignore\n\n      error.code = 'ENOMEM';\n      const message = 'Please make sure your system has enough available memory for this task';\n      expect(errors.getDescription(error)).to.equal(message);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should prefer a description property than a code description",
            "suites": [
                "Shared: Errors",
                ".getDescription()"
            ],
            "updatePoint": {
                "line": 234,
                "column": 68
            },
            "line": 234,
            "code": "    it('should prefer a description property than a code description', function () {\n      const error = new Error('Foo'); // @ts-ignore\n\n      error.code = 'ENOMEM'; // @ts-ignore\n\n      error.description = 'Memory error';\n      expect(errors.getDescription(error)).to.equal('Memory error');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the stack for a basic error",
            "suites": [
                "Shared: Errors",
                ".getDescription()",
                "given userFriendlyDescriptionsOnly is false"
            ],
            "updatePoint": {
                "line": 243,
                "column": 51
            },
            "line": 243,
            "code": "      it('should return the stack for a basic error', function () {\n        const error = new Error('Foo');\n        expect(errors.getDescription(error)).to.equal(error.stack);\n      });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the stack if the description is an empty string",
            "suites": [
                "Shared: Errors",
                ".getDescription()",
                "given userFriendlyDescriptionsOnly is false"
            ],
            "updatePoint": {
                "line": 247,
                "column": 71
            },
            "line": 247,
            "code": "      it('should return the stack if the description is an empty string', function () {\n        const error = new Error('Foo'); // @ts-ignore\n\n        error.description = '';\n        expect(errors.getDescription(error)).to.equal(error.stack);\n      });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the stack if the description is a blank string",
            "suites": [
                "Shared: Errors",
                ".getDescription()",
                "given userFriendlyDescriptionsOnly is false"
            ],
            "updatePoint": {
                "line": 253,
                "column": 70
            },
            "line": 253,
            "code": "      it('should return the stack if the description is a blank string', function () {\n        const error = new Error('Foo'); // @ts-ignore\n\n        error.description = '   ';\n        expect(errors.getDescription(error)).to.equal(error.stack);\n      });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be an instance of Error",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 262,
                "column": 38
            },
            "line": 262,
            "code": "    it('should be an instance of Error', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: 'Something happened'\n      });\n      expect(error).to.be.an.instanceof(Error);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should correctly add both a title and a description",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 269,
                "column": 59
            },
            "line": 269,
            "code": "    it('should correctly add both a title and a description', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: 'Something happened'\n      });\n      expect(errors.getTitle(error)).to.equal('Foo');\n      expect(errors.getDescription(error)).to.equal('Something happened');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should correctly add a code",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 277,
                "column": 35
            },
            "line": 277,
            "code": "    it('should correctly add a code', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: 'Something happened',\n        code: 'ENOENT'\n      });\n      expect(error.code).to.equal('ENOENT');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should correctly add only a title",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 285,
                "column": 41
            },
            "line": 285,
            "code": "    it('should correctly add only a title', function () {\n      const error = errors.createError({\n        title: 'Foo'\n      });\n      expect(errors.getTitle(error)).to.equal('Foo');\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should ignore an empty description",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 292,
                "column": 42
            },
            "line": 292,
            "code": "    it('should ignore an empty description', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: ''\n      });\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should ignore a blank description",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 299,
                "column": 41
            },
            "line": 299,
            "code": "    it('should ignore a blank description', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: '     '\n      });\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if no title",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 306,
                "column": 32
            },
            "line": 306,
            "code": "    it('should throw if no title', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createError({});\n      }).to.throw('Invalid error title: undefined');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if there is a description but no title",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 312,
                "column": 59
            },
            "line": 312,
            "code": "    it('should throw if there is a description but no title', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createError({\n          description: 'foo'\n        });\n      }).to.throw('Invalid error title: undefined');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if title is empty",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 320,
                "column": 38
            },
            "line": 320,
            "code": "    it('should throw if title is empty', function () {\n      expect(() => {\n        errors.createError({\n          title: ''\n        });\n      }).to.throw('Invalid error title: ');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if title is blank",
            "suites": [
                "Shared: Errors",
                ".createError()"
            ],
            "updatePoint": {
                "line": 327,
                "column": 38
            },
            "line": 327,
            "code": "    it('should throw if title is blank', function () {\n      expect(() => {\n        errors.createError({\n          title: '    '\n        });\n      }).to.throw('Invalid error title:    ');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be an instance of Error",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 336,
                "column": 38
            },
            "line": 336,
            "code": "    it('should be an instance of Error', function () {\n      const error = errors.createUserError({\n        title: 'Foo',\n        description: 'Something happened'\n      });\n      expect(error).to.be.an.instanceof(Error);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should correctly add both a title and a description",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 343,
                "column": 59
            },
            "line": 343,
            "code": "    it('should correctly add both a title and a description', function () {\n      const error = errors.createUserError({\n        title: 'Foo',\n        description: 'Something happened'\n      });\n      expect(errors.getTitle(error)).to.equal('Foo');\n      expect(errors.getDescription(error)).to.equal('Something happened');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should correctly add only a title",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 351,
                "column": 41
            },
            "line": 351,
            "code": "    it('should correctly add only a title', function () {\n      // @ts-ignore\n      const error = errors.createUserError({\n        title: 'Foo'\n      });\n      expect(errors.getTitle(error)).to.equal('Foo');\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should correctly add a code",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 359,
                "column": 35
            },
            "line": 359,
            "code": "    it('should correctly add a code', function () {\n      // @ts-ignore\n      const error = errors.createUserError({\n        title: 'Foo',\n        code: 'ENOENT'\n      }); // @ts-ignore\n\n      expect(error.code).to.equal('ENOENT');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should ignore an empty description",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 368,
                "column": 42
            },
            "line": 368,
            "code": "    it('should ignore an empty description', function () {\n      const error = errors.createUserError({\n        title: 'Foo',\n        description: ''\n      });\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should ignore a blank description",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 375,
                "column": 41
            },
            "line": 375,
            "code": "    it('should ignore a blank description', function () {\n      const error = errors.createUserError({\n        title: 'Foo',\n        description: '     '\n      });\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if no title",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 382,
                "column": 32
            },
            "line": 382,
            "code": "    it('should throw if no title', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createUserError({});\n      }).to.throw('Invalid error title: undefined');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if title is empty",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 388,
                "column": 38
            },
            "line": 388,
            "code": "    it('should throw if title is empty', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createUserError({\n          title: ''\n        });\n      }).to.throw('Invalid error title: ');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if there is a description but no title",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 396,
                "column": 59
            },
            "line": 396,
            "code": "    it('should throw if there is a description but no title', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createUserError({\n          description: 'foo'\n        });\n      }).to.throw('Invalid error title: undefined');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw if title is blank",
            "suites": [
                "Shared: Errors",
                ".createUserError()"
            ],
            "updatePoint": {
                "line": 404,
                "column": 38
            },
            "line": 404,
            "code": "    it('should throw if title is blank', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createUserError({\n          title: '   '\n        });\n      }).to.throw('Invalid error title:    ');\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert a simple error",
            "suites": [
                "Shared: Errors",
                ".toJSON()"
            ],
            "updatePoint": {
                "line": 414,
                "column": 37
            },
            "line": 414,
            "code": "    it('should convert a simple error', function () {\n      const error = new Error('My error');\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: undefined,\n        description: undefined,\n        message: 'My error',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert an error with a description",
            "suites": [
                "Shared: Errors",
                ".toJSON()"
            ],
            "updatePoint": {
                "line": 430,
                "column": 50
            },
            "line": 430,
            "code": "    it('should convert an error with a description', function () {\n      const error = new Error('My error'); // @ts-ignore\n\n      error.description = 'My description';\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: undefined,\n        description: 'My description',\n        message: 'My error',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert an error with a code",
            "suites": [
                "Shared: Errors",
                ".toJSON()"
            ],
            "updatePoint": {
                "line": 448,
                "column": 43
            },
            "line": 448,
            "code": "    it('should convert an error with a code', function () {\n      const error = new Error('My error'); // @ts-ignore\n\n      error.code = 'ENOENT';\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: 'ENOENT',\n        description: undefined,\n        message: 'My error',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert an error with a description and a code",
            "suites": [
                "Shared: Errors",
                ".toJSON()"
            ],
            "updatePoint": {
                "line": 466,
                "column": 61
            },
            "line": 466,
            "code": "    it('should convert an error with a description and a code', function () {\n      const error = new Error('My error'); // @ts-ignore\n\n      error.description = 'My description'; // @ts-ignore\n\n      error.code = 'ENOENT';\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: 'ENOENT',\n        description: 'My description',\n        message: 'My error',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert an error with a report value",
            "suites": [
                "Shared: Errors",
                ".toJSON()"
            ],
            "updatePoint": {
                "line": 486,
                "column": 51
            },
            "line": 486,
            "code": "    it('should convert an error with a report value', function () {\n      const error = new Error('My error'); // @ts-ignore\n\n      error.report = true;\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: undefined,\n        description: undefined,\n        message: 'My error',\n        stack: error.stack,\n        report: true,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert an error without a message",
            "suites": [
                "Shared: Errors",
                ".toJSON()"
            ],
            "updatePoint": {
                "line": 504,
                "column": 49
            },
            "line": 504,
            "code": "    it('should convert an error without a message', function () {\n      const error = new Error();\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: undefined,\n        description: undefined,\n        message: '',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return an Error object",
            "suites": [
                "Shared: Errors",
                ".fromJSON()"
            ],
            "updatePoint": {
                "line": 522,
                "column": 37
            },
            "line": 522,
            "code": "    it('should return an Error object', function () {\n      const error = new Error('My error');\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result).to.be.an.instanceof(Error);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert a simple JSON error",
            "suites": [
                "Shared: Errors",
                ".fromJSON()"
            ],
            "updatePoint": {
                "line": 527,
                "column": 42
            },
            "line": 527,
            "code": "    it('should convert a simple JSON error', function () {\n      const error = new Error('My error');\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result.message).to.equal(error.message); // @ts-ignore\n\n      expect(result.description).to.equal(error.description); // @ts-ignore\n\n      expect(result.code).to.equal(error.code);\n      expect(result.stack).to.equal(error.stack); // @ts-ignore\n\n      expect(result.report).to.equal(error.report);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert a JSON error with a description",
            "suites": [
                "Shared: Errors",
                ".fromJSON()"
            ],
            "updatePoint": {
                "line": 539,
                "column": 54
            },
            "line": 539,
            "code": "    it('should convert a JSON error with a description', function () {\n      const error = new Error('My error'); // @ts-ignore\n\n      error.description = 'My description';\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result.message).to.equal(error.message); // @ts-ignore\n\n      expect(result.description).to.equal(error.description); // @ts-ignore\n\n      expect(result.code).to.equal(error.code);\n      expect(result.stack).to.equal(error.stack); // @ts-ignore\n\n      expect(result.report).to.equal(error.report);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert a JSON error with a code",
            "suites": [
                "Shared: Errors",
                ".fromJSON()"
            ],
            "updatePoint": {
                "line": 553,
                "column": 47
            },
            "line": 553,
            "code": "    it('should convert a JSON error with a code', function () {\n      const error = new Error('My error'); // @ts-ignore\n\n      error.code = 'ENOENT';\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result.message).to.equal(error.message); // @ts-ignore\n\n      expect(result.description).to.equal(error.description); // @ts-ignore\n\n      expect(result.code).to.equal(error.code);\n      expect(result.stack).to.equal(error.stack); // @ts-ignore\n\n      expect(result.report).to.equal(error.report);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert a JSON error with a report value",
            "suites": [
                "Shared: Errors",
                ".fromJSON()"
            ],
            "updatePoint": {
                "line": 567,
                "column": 55
            },
            "line": 567,
            "code": "    it('should convert a JSON error with a report value', function () {\n      const error = new Error('My error'); // @ts-ignore\n\n      error.report = false;\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result.message).to.equal(error.message); // @ts-ignore\n\n      expect(result.description).to.equal(error.description); // @ts-ignore\n\n      expect(result.code).to.equal(error.code);\n      expect(result.stack).to.equal(error.stack); // @ts-ignore\n\n      expect(result.report).to.equal(error.report);\n    });",
            "file": "shared/errors.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should contain object properties",
            "suites": [
                "Shared: Messages"
            ],
            "updatePoint": {
                "line": 29,
                "column": 38
            },
            "line": 29,
            "code": "  it('should contain object properties', function () {\n    expect(_.every(_.map(messages, _.isPlainObject))).to.be.true;\n  });",
            "file": "shared/messages.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should contain function properties in each category",
            "suites": [
                "Shared: Messages"
            ],
            "updatePoint": {
                "line": 32,
                "column": 57
            },
            "line": 32,
            "code": "  it('should contain function properties in each category', function () {\n    _.each(messages, category => {\n      expect(_.every(_.map(category, _.isFunction))).to.be.true;\n    });\n  });",
            "file": "shared/messages.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should use singular when there are single results",
            "suites": [
                "Shared: Messages",
                ".info",
                ".flashComplete()"
            ],
            "updatePoint": {
                "line": 39,
                "column": 59
            },
            "line": 39,
            "code": "      it('should use singular when there are single results', function () {\n        const msg = messages.info.flashComplete('image.img', this.drives, {\n          failed: 1,\n          successful: 1\n        });\n        expect(msg).to.equal('image.img was successfully flashed to 1 target and failed to be flashed to 1 target');\n      });",
            "file": "shared/messages.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should use plural when there are multiple results",
            "suites": [
                "Shared: Messages",
                ".info",
                ".flashComplete()"
            ],
            "updatePoint": {
                "line": 46,
                "column": 59
            },
            "line": 46,
            "code": "      it('should use plural when there are multiple results', function () {\n        const msg = messages.info.flashComplete('image.img', this.drives, {\n          failed: 2,\n          successful: 2\n        });\n        expect(msg).to.equal('image.img was successfully flashed to 2 targets and failed to be flashed to 2 targets');\n      });",
            "file": "shared/messages.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not contain failed target part when there are none",
            "suites": [
                "Shared: Messages",
                ".info",
                ".flashComplete()"
            ],
            "updatePoint": {
                "line": 53,
                "column": 67
            },
            "line": 53,
            "code": "      it('should not contain failed target part when there are none', function () {\n        const msg = messages.info.flashComplete('image.img', this.drives, {\n          failed: 0,\n          successful: 2\n        });\n        expect(msg).to.equal('image.img was successfully flashed to 2 targets');\n      });",
            "file": "shared/messages.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show drive name and description when only target",
            "suites": [
                "Shared: Messages",
                ".info",
                ".flashComplete()"
            ],
            "updatePoint": {
                "line": 60,
                "column": 65
            },
            "line": 60,
            "code": "      it('should show drive name and description when only target', function () {\n        const msg = messages.info.flashComplete('image.img', this.drives, {\n          failed: 0,\n          successful: 1\n        });\n        expect(msg).to.equal('image.img was successfully flashed to My Drive (/dev/disk1)');\n      });",
            "file": "shared/messages.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should use plural when there are multiple drives",
            "suites": [
                "Shared: Messages",
                ".error",
                ".flashFailure()"
            ],
            "updatePoint": {
                "line": 71,
                "column": 58
            },
            "line": 71,
            "code": "      it('should use plural when there are multiple drives', function () {\n        const msg = messages.error.flashFailure('image.img', this.drives);\n        expect(msg).to.equal('Something went wrong while writing image.img to 2 targets.');\n      });",
            "file": "shared/messages.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should use singular when there is one drive",
            "suites": [
                "Shared: Messages",
                ".error",
                ".flashFailure()"
            ],
            "updatePoint": {
                "line": 75,
                "column": 53
            },
            "line": 75,
            "code": "      it('should use singular when there is one drive', function () {\n        const msg = messages.error.flashFailure('image.img', [this.drives[0]]);\n        expect(msg).to.equal('Something went wrong while writing image.img to My Drive (/dev/disk1).');\n      });",
            "file": "shared/messages.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should escape environment variables and arguments",
            "suites": [
                "Shared: permissions",
                ".createLaunchScript()",
                "given windows"
            ],
            "updatePoint": {
                "line": 30,
                "column": 59
            },
            "line": 30,
            "code": "      it('should escape environment variables and arguments', function () {\n        expect(permissions.createLaunchScript('C:\\\\Users\\\\Alice & Bob\\'s Laptop\\\\\"what\"\\\\balenaEtcher', ['\"a Laser\"', 'arg1', \"'&/ ^ \\\\\", '\" $ % *'], {\n          key: 'value',\n          key2: ' \" \\' ^ & = + $ % / \\\\',\n          key3: '8'\n        })).to.equal(`chcp 65001${os.EOL}` + `set \"key=value\"${os.EOL}` + `set \"key2= \" ' ^ & = + $ % / \\\\\"${os.EOL}` + `set \"key3=8\"${os.EOL}` + `\"C:\\\\Users\\\\Alice & Bob's Laptop\\\\\\\\\"what\\\\\"\\\\balenaEtcher\" \"\\\\\"a Laser\\\\\"\" \"arg1\" \"'&/ ^ \\\\\" \"\\\\\" $ % *\"`);\n      });",
            "file": "shared/permissions.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should escape environment variables and arguments",
            "suites": [
                "Shared: permissions",
                ".createLaunchScript()",
                "given "
            ],
            "updatePoint": {
                "line": 48,
                "column": 61
            },
            "line": 48,
            "code": "        it('should escape environment variables and arguments', function () {\n          expect(permissions.createLaunchScript('/home/Alice & Bob\\'s Laptop/\"what\"/balenaEtcher', ['arg1', \"'&/ ^ \\\\\", '\" $ % *'], {\n            key: 'value',\n            key2: ' \" \\' ^ & = + $ % / \\\\',\n            key3: '8'\n          })).to.equal(`export key='value'${os.EOL}` + `export key2=' \" '\\\\'' ^ & = + $ % / \\\\'${os.EOL}` + `export key3='8'${os.EOL}` + `'/home/Alice & Bob'\\\\''s Laptop/\"what\"/balenaEtcher' 'arg1' ''\\\\''&/ ^ \\\\' '\" $ % *'`);\n        });",
            "file": "shared/permissions.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true if filename is ",
            "suites": [
                "Shared: SupportedFormats",
                ".looksLikeWindowsImage()"
            ],
            "updatePoint": {
                "line": 22,
                "column": 56
            },
            "line": 22,
            "code": "      it(`should return true if filename is ${imagePath}`, function () {\n        const looksLikeWindowsImage = supportedFormats.looksLikeWindowsImage(imagePath);\n        expect(looksLikeWindowsImage).to.be.true;\n      });",
            "file": "shared/supported-formats.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false if filename is ",
            "suites": [
                "Shared: SupportedFormats",
                ".looksLikeWindowsImage()"
            ],
            "updatePoint": {
                "line": 29,
                "column": 57
            },
            "line": 29,
            "code": "      it(`should return false if filename is ${imagePath}`, function () {\n        const looksLikeWindowsImage = supportedFormats.looksLikeWindowsImage(imagePath);\n        expect(looksLikeWindowsImage).to.be.false;\n      });",
            "file": "shared/supported-formats.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert bytes to megabytes",
            "suites": [
                "Shared: Units",
                ".bytesToMegabytes()"
            ],
            "updatePoint": {
                "line": 20,
                "column": 41
            },
            "line": 20,
            "code": "    it('should convert bytes to megabytes', function () {\n      expect(bytesToMegabytes(1.2e7)).to.equal(12);\n      expect(bytesToMegabytes(332000)).to.equal(0.332);\n    });",
            "file": "shared/units.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false if percentage is not a number",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 20,
                "column": 57
            },
            "line": 20,
            "code": "    it('should return false if percentage is not a number', function () {\n      expect(utils.isValidPercentage('50')).to.be.false;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false if percentage is null",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 23,
                "column": 49
            },
            "line": 23,
            "code": "    it('should return false if percentage is null', function () {\n      expect(utils.isValidPercentage(null)).to.be.false;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false if percentage is undefined",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 26,
                "column": 54
            },
            "line": 26,
            "code": "    it('should return false if percentage is undefined', function () {\n      expect(utils.isValidPercentage(undefined)).to.be.false;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false if percentage is an integer less than 0",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 29,
                "column": 67
            },
            "line": 29,
            "code": "    it('should return false if percentage is an integer less than 0', function () {\n      expect(utils.isValidPercentage(-1)).to.be.false;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false if percentage is a float less than 0",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 32,
                "column": 64
            },
            "line": 32,
            "code": "    it('should return false if percentage is a float less than 0', function () {\n      expect(utils.isValidPercentage(-0.1)).to.be.false;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true if percentage is 0",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 35,
                "column": 45
            },
            "line": 35,
            "code": "    it('should return true if percentage is 0', function () {\n      expect(utils.isValidPercentage(0)).to.be.true;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true if percentage is an integer greater than 0, but less than 100",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 38,
                "column": 88
            },
            "line": 38,
            "code": "    it('should return true if percentage is an integer greater than 0, but less than 100', function () {\n      expect(utils.isValidPercentage(50)).to.be.true;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true if percentage is a float greater than 0, but less than 100",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 41,
                "column": 85
            },
            "line": 41,
            "code": "    it('should return true if percentage is a float greater than 0, but less than 100', function () {\n      expect(utils.isValidPercentage(49.55)).to.be.true;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true if percentage is 100",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 44,
                "column": 47
            },
            "line": 44,
            "code": "    it('should return true if percentage is 100', function () {\n      expect(utils.isValidPercentage(100)).to.be.true;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false if percentage is an integer greater than 100",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 47,
                "column": 72
            },
            "line": 47,
            "code": "    it('should return false if percentage is an integer greater than 100', function () {\n      expect(utils.isValidPercentage(101)).to.be.false;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false if percentage is a float greater than 100",
            "suites": [
                "Shared: Utils",
                ".isValidPercentage()"
            ],
            "updatePoint": {
                "line": 50,
                "column": 69
            },
            "line": 50,
            "code": "    it('should return false if percentage is a float greater than 100', function () {\n      expect(utils.isValidPercentage(100.001)).to.be.false;\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw an error if given a string percentage",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 55,
                "column": 58
            },
            "line": 55,
            "code": "    it('should throw an error if given a string percentage', function () {\n      expect(function () {\n        utils.percentageToFloat('50');\n      }).to.throw('Invalid percentage: 50');\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw an error if given a null percentage",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 60,
                "column": 56
            },
            "line": 60,
            "code": "    it('should throw an error if given a null percentage', function () {\n      expect(function () {\n        utils.percentageToFloat(null);\n      }).to.throw('Invalid percentage: null');\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw an error if given an undefined percentage",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 65,
                "column": 62
            },
            "line": 65,
            "code": "    it('should throw an error if given an undefined percentage', function () {\n      expect(function () {\n        utils.percentageToFloat(undefined);\n      }).to.throw('Invalid percentage: undefined');\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw an error if given an integer percentage < 0",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 70,
                "column": 64
            },
            "line": 70,
            "code": "    it('should throw an error if given an integer percentage < 0', function () {\n      expect(function () {\n        utils.percentageToFloat(-1);\n      }).to.throw('Invalid percentage: -1');\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw an error if given a float percentage < 0",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 75,
                "column": 61
            },
            "line": 75,
            "code": "    it('should throw an error if given a float percentage < 0', function () {\n      expect(function () {\n        utils.percentageToFloat(-0.1);\n      }).to.throw('Invalid percentage: -0.1');\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should covert a 0 percentage to 0",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 80,
                "column": 41
            },
            "line": 80,
            "code": "    it('should covert a 0 percentage to 0', function () {\n      expect(utils.percentageToFloat(0)).to.equal(0);\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should covert an integer percentage to a float",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 83,
                "column": 54
            },
            "line": 83,
            "code": "    it('should covert an integer percentage to a float', function () {\n      expect(utils.percentageToFloat(50)).to.equal(0.5);\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should covert an float percentage to a float",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 86,
                "column": 52
            },
            "line": 86,
            "code": "    it('should covert an float percentage to a float', function () {\n      expect(utils.percentageToFloat(46.54)).to.equal(0.4654);\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should covert a 100 percentage to 1",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 89,
                "column": 43
            },
            "line": 89,
            "code": "    it('should covert a 100 percentage to 1', function () {\n      expect(utils.percentageToFloat(100)).to.equal(1);\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw an error if given an integer percentage > 100",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 92,
                "column": 66
            },
            "line": 92,
            "code": "    it('should throw an error if given an integer percentage > 100', function () {\n      expect(function () {\n        utils.percentageToFloat(101);\n      }).to.throw('Invalid percentage: 101');\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should throw an error if given a float percentage > 100",
            "suites": [
                "Shared: Utils",
                ".percentageToFloat()"
            ],
            "updatePoint": {
                "line": 97,
                "column": 63
            },
            "line": 97,
            "code": "    it('should throw an error if given a float percentage > 100', function () {\n      expect(function () {\n        utils.percentageToFloat(100.01);\n      }).to.throw('Invalid percentage: 100.01');\n    });",
            "file": "shared/utils.spec.ts",
            "skipped": false,
            "dir": "tests"
        }
    ],
    "badge": "balena-io__etcher.svg"
}