{"repo":"react-grid-layout/react-grid-layout","url":"https://github.com/react-grid-layout/react-grid-layout","branch":"master","configs":[{"package":"react-grid-layout","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Basic Render","suites":["Lifecycle tests","<GridItem >"],"updatePoint":{"line":51,"column":20,"index":1851},"line":51,"code":"    it(\"Basic Render\", () => {\n      const wrapper = mount( /*#__PURE__*/React.createElement(GridItem, mockProps));\n      expect(wrapper).toMatchSnapshot();\n    });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"2x when string, not number","suites":["Lifecycle tests","<GridItem >","optional min/max dimension props log err","minW"],"updatePoint":{"line":61,"column":38,"index":2256},"line":61,"code":"        it(\"2x when string, not number\", () => {\n          // $FlowIgnore\n          mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n            minW: \"apple\"\n          })));\n          expect(mockError).toHaveBeenCalledTimes(2);\n        });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"1 err when larger than w prop","suites":["Lifecycle tests","<GridItem >","optional min/max dimension props log err","minW"],"updatePoint":{"line":68,"column":41,"index":2527},"line":68,"code":"        it(\"1 err when larger than w prop\", () => {\n          mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n            minW: 400\n          })));\n          expect(mockError).toHaveBeenCalledTimes(1);\n        });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"1x when string, not number","suites":["Lifecycle tests","<GridItem >","optional min/max dimension props log err","maxW"],"updatePoint":{"line":80,"column":38,"index":2933},"line":80,"code":"        it(\"1x when string, not number\", () => {\n          // $FlowIgnore\n          mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n            maxW: \"apple\"\n          })));\n          expect(mockError).toHaveBeenCalledTimes(1);\n        });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"1x err when smaller than w prop","suites":["Lifecycle tests","<GridItem >","optional min/max dimension props log err","maxW"],"updatePoint":{"line":87,"column":43,"index":3206},"line":87,"code":"        it(\"1x err when smaller than w prop\", () => {\n          mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n            w: 4,\n            maxW: 2\n          })));\n          expect(mockError).toHaveBeenCalledTimes(1);\n        });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"2x when string, not number","suites":["Lifecycle tests","<GridItem >","optional min/max dimension props log err","minH"],"updatePoint":{"line":100,"column":38,"index":3628},"line":100,"code":"        it(\"2x when string, not number\", () => {\n          // $FlowIgnore\n          mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n            minH: \"apple\"\n          })));\n          expect(mockError).toHaveBeenCalledTimes(2);\n        });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"1x when larger than h prop","suites":["Lifecycle tests","<GridItem >","optional min/max dimension props log err","minH"],"updatePoint":{"line":107,"column":38,"index":3896},"line":107,"code":"        it(\"1x when larger than h prop\", () => {\n          mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n            minH: 200\n          })));\n          expect(mockError).toHaveBeenCalledTimes(1);\n        });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"1x when string, not number","suites":["Lifecycle tests","<GridItem >","optional min/max dimension props log err","maxH"],"updatePoint":{"line":119,"column":38,"index":4302},"line":119,"code":"        it(\"1x when string, not number\", () => {\n          // $FlowIgnore\n          mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n            maxH: \"apple\"\n          })));\n          expect(mockError).toHaveBeenCalledTimes(1);\n        });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"1x when smaller than h prop","suites":["Lifecycle tests","<GridItem >","optional min/max dimension props log err","maxH"],"updatePoint":{"line":126,"column":39,"index":4571},"line":126,"code":"        it(\"1x when smaller than h prop\", () => {\n          mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n            h: 3,\n            maxH: 2\n          })));\n          expect(mockError).toHaveBeenCalledTimes(1);\n        });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"calls onDragStart prop when droppingPosition prop has expected content","suites":["Lifecycle tests","<GridItem >","onDrag"],"updatePoint":{"line":136,"column":80,"index":4917},"line":136,"code":"      it(\"calls onDragStart prop when droppingPosition prop has expected content\", () => {\n        const mockFn = jest.fn();\n        mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n          // $FlowIgnore\n          droppingPosition: {\n            left: 1,\n            top: 1,\n            e: {}\n          },\n          onDragStart: mockFn\n        })));\n        expect(mockFn).toHaveBeenCalledTimes(1);\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"throws err when calling onDrag without state set to dragging ","suites":["Lifecycle tests","<GridItem >","onDrag"],"updatePoint":{"line":149,"column":71,"index":5347},"line":149,"code":"      it(\"throws err when calling onDrag without state set to dragging \", () => {\n        const componentInstance = mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n          onDrag: () => {}\n        }))).instance();\n        expect(() => {\n          // $FlowIgnore\n          componentInstance.onDrag({}, {});\n        }).toThrow(\"onDrag called before onDragStart.\");\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"calls onDragStart prop callback fn","suites":["Lifecycle tests","<GridItem >","onDrag"],"updatePoint":{"line":158,"column":44,"index":5723},"line":158,"code":"      it(\"calls onDragStart prop callback fn\", () => {\n        const mockFn = jest.fn();\n        const componentInstance = mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n          // $FlowIgnore\n          droppingPosition: {\n            left: 1,\n            top: 1,\n            e: {}\n          },\n          onDragStart: mockFn\n        }))).instance();\n        // $FlowIgnore\n        componentInstance.onDrag({}, () => {});\n        expect(mockFn).toHaveBeenCalledTimes(1);\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"calls onDrag prop callback fn","suites":["Lifecycle tests","<GridItem >","onDrag"],"updatePoint":{"line":173,"column":39,"index":6229},"line":173,"code":"      it(\"calls onDrag prop callback fn\", () => {\n        const mockOnDragStartCallback = jest.fn();\n        const mockOnDrag = jest.fn();\n        const renderedItem = mount( /*#__PURE__*/React.createElement(GridItem, _extends({}, mockProps, {\n          // $FlowIgnore\n          isDraggable: true,\n          isBounded: true,\n          onDragStart: mockOnDragStartCallback,\n          onDrag: mockOnDrag\n        })));\n        TestUtils.act(() => {\n          renderedItem.setState({\n            dragging: true\n          });\n          renderedItem.setProps({\n            droppingPosition: {\n              left: 700,\n              top: 300,\n              e: {}\n            }\n          });\n        });\n        expect(mockOnDrag).toHaveBeenCalledTimes(1);\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Basic Render","suites":["Lifecycle tests","<ReactGridLayout>"],"updatePoint":{"line":200,"column":20,"index":7029},"line":200,"code":"    it(\"Basic Render\", async function () {\n      const wrapper = mount( /*#__PURE__*/React.createElement(BasicLayout, null));\n      expect(wrapper).toMatchSnapshot();\n    });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Creates layout based on properties","suites":["Lifecycle tests","<ReactGridLayout>","data-grid"],"updatePoint":{"line":205,"column":44,"index":7262},"line":205,"code":"      it(\"Creates layout based on properties\", async function () {\n        const wrapper = mount( /*#__PURE__*/React.createElement(ReactGridLayout, {\n          className: \"layout\",\n          cols: 12,\n          rowHeight: 30,\n          width: 1200\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          key: \"a\",\n          \"data-grid\": {\n            x: 0,\n            y: 0,\n            w: 1,\n            h: 2,\n            static: true\n          }\n        }, \"a\"), /*#__PURE__*/React.createElement(\"div\", {\n          key: \"b\",\n          \"data-grid\": {\n            x: 1,\n            y: 0,\n            w: 3,\n            h: 2,\n            minW: 2,\n            maxW: 4\n          }\n        }, \"b\"), /*#__PURE__*/React.createElement(\"div\", {\n          key: \"c\",\n          \"data-grid\": {\n            x: 4,\n            y: 0,\n            w: 1,\n            h: 2\n          }\n        }, \"c\")));\n        expect(wrapper).toMatchSnapshot();\n        expect(wrapper.state().layout).toMatchObject([{\n          h: 2,\n          i: \"a\",\n          static: true,\n          w: 1,\n          x: 0,\n          y: 0\n        }, {\n          h: 2,\n          i: \"b\",\n          static: false,\n          w: 3,\n          x: 1,\n          y: 0\n        }, {\n          h: 2,\n          i: \"c\",\n          static: false,\n          w: 1,\n          x: 4,\n          y: 0\n        }]);\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Null items in list","suites":["Lifecycle tests","<ReactGridLayout>","data-grid"],"updatePoint":{"line":263,"column":28,"index":8601},"line":263,"code":"      it(\"Null items in list\", async function () {\n        const wrapper = mount( /*#__PURE__*/React.createElement(ReactGridLayout, {\n          className: \"layout\",\n          cols: 12,\n          rowHeight: 30,\n          width: 1200\n          // $FlowIgnore\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          key: \"a\",\n          \"data-grid\": {\n            x: 0,\n            y: 0,\n            w: 1,\n            h: 2,\n            static: true\n          }\n        }, \"a\"), false, null, /*#__PURE__*/React.createElement(\"div\", {\n          key: \"c\",\n          \"data-grid\": {\n            x: 4,\n            y: 0,\n            w: 1,\n            h: 2\n          }\n        }, \"c\")));\n        expect(wrapper).toMatchSnapshot();\n        expect(wrapper.state().layout).toHaveLength(2); // Only two truthy items\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Renders with WidthProvider","suites":["Lifecycle tests","<ReactGridLayout>","WidthProvider"],"updatePoint":{"line":294,"column":36,"index":9473},"line":294,"code":"      it(\"Renders with WidthProvider\", async function () {\n        const wrapper = mount( /*#__PURE__*/React.createElement(BasicLayout, {\n          measureBeforeMount: false\n        }));\n        expect(wrapper).toMatchSnapshot();\n        const widthProviderWrapper = wrapper.childAt(0);\n        expect(widthProviderWrapper.name()).toEqual(\"WidthProvider\");\n        expect(widthProviderWrapper.childAt(0).name()).toEqual(\"ReactGridLayout\");\n        expect(widthProviderWrapper.state().width).toEqual(1280); // default\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Renders with WidthProvider measureBeforeMount","suites":["Lifecycle tests","<ReactGridLayout>","WidthProvider"],"updatePoint":{"line":305,"column":55,"index":10020},"line":305,"code":"      it(\"Renders with WidthProvider measureBeforeMount\", async function () {\n        const wrapper = mount( /*#__PURE__*/React.createElement(BasicLayout, {\n          measureBeforeMount: true\n        }));\n        expect(wrapper).toMatchSnapshot();\n        const widthProviderWrapper = wrapper.childAt(0);\n        expect(widthProviderWrapper.name()).toEqual(\"WidthProvider\");\n        // Renders a div first\n        expect(widthProviderWrapper.childAt(0).name()).toEqual(\"div\");\n\n        // Mock offsetWidth to return 500 and fire a resize\n        const node = wrapper.getDOMNode();\n        Object.defineProperty(node, \"offsetWidth\", {\n          get: jest.fn(() => 500)\n        });\n        global.dispatchEvent(new Event(\"resize\"));\n        wrapper.setProps({}); // force a rerender synchronously\n\n        // Should have removed the div, now has the RGL\n        expect(wrapper.childAt(0).childAt(0).name()).toEqual(\"ReactGridLayout\");\n        expect(wrapper.childAt(0).state().width).toEqual(500);\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"WidthProvider responds to window resize events","suites":["Lifecycle tests","<ReactGridLayout>","WidthProvider"],"updatePoint":{"line":327,"column":56,"index":11027},"line":327,"code":"      it(\"WidthProvider responds to window resize events\", async function () {\n        const wrapper = mount( /*#__PURE__*/React.createElement(BasicLayout, null));\n        const widthProviderWrapper = wrapper.childAt(0);\n\n        // Original width\n        expect(widthProviderWrapper.state().width).toEqual(1280);\n\n        // Mock offsetWidth to return 500\n        const node = wrapper.getDOMNode();\n        Object.defineProperty(node, \"offsetWidth\", {\n          get: jest.fn(() => 500)\n        });\n\n        // Trigger the window resize event.\n        global.dispatchEvent(new Event(\"resize\"));\n\n        // State should now be 500\n        expect(widthProviderWrapper.state().width).toEqual(500);\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Updates when an item is dropped in","suites":["Lifecycle tests","<ReactGridLayout>","Droppability"],"updatePoint":{"line":359,"column":44,"index":12151},"line":359,"code":"      it(\"Updates when an item is dropped in\", function () {\n        const wrapper = mount( /*#__PURE__*/React.createElement(DroppableLayout, {\n          containerPadding: [0, 0]\n        }));\n        const gridLayout = wrapper.find(\"ReactGridLayout\");\n        expect(gridLayout).toHaveLength(1);\n\n        // Start: no dropping node.\n        expect(gridLayout.state(\"droppingDOMNode\")).toEqual(null);\n\n        // Drag the droppable over the grid layout.\n        dragDroppableTo(wrapper, 200, 150);\n\n        // We should have the position in our state.\n        expect(gridLayout.state(\"droppingPosition\")).toHaveProperty(\"left\", 200);\n        expect(gridLayout.state(\"droppingPosition\")).toHaveProperty(\"top\", 150);\n        // We should now have the placeholder element in our state.\n        expect(gridLayout.state(\"droppingDOMNode\")).toHaveProperty(\"type\", \"div\");\n        expect(gridLayout.state(\"droppingDOMNode\")).toHaveProperty(\"key\", \"__dropping-elem__\");\n\n        // It should also have a layout item assigned to it.\n        let layoutItem = gridLayout.state(\"layout\").find(item => item.i === \"__dropping-elem__\");\n        expect(layoutItem).toEqual({\n          i: \"__dropping-elem__\",\n          h: 1,\n          w: 1,\n          x: 2,\n          y: 4,\n          static: false,\n          isDraggable: true\n        });\n\n        // Let's move it some more.\n        dragDroppableTo(wrapper, 0, 300);\n\n        // State should change.\n        expect(gridLayout.state(\"droppingPosition\")).toHaveProperty(\"left\", 0);\n        expect(gridLayout.state(\"droppingPosition\")).toHaveProperty(\"top\", 300);\n        layoutItem = gridLayout.state(\"layout\").find(item => item.i === \"__dropping-elem__\");\n        // Using toMatchObject() here as this will inherit some undefined properties from the cloning\n        expect(layoutItem).toMatchObject({\n          i: \"__dropping-elem__\",\n          h: 1,\n          w: 1,\n          x: 0,\n          y: 10,\n          static: false,\n          isDraggable: true\n        });\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Allows customizing the droppable placeholder","suites":["Lifecycle tests","<ReactGridLayout>","Droppability"],"updatePoint":{"line":409,"column":54,"index":14168},"line":409,"code":"      it(\"Allows customizing the droppable placeholder\", function () {\n        const wrapper = mount( /*#__PURE__*/React.createElement(DroppableLayout, {\n          onDropDragOver: () => ({\n            w: 2,\n            h: 2\n          })\n        }));\n        const gridLayout = wrapper.find(\"ReactGridLayout\");\n\n        // Find the droppable element and drag it over the grid layout.\n        dragDroppableTo(wrapper, 200, 150);\n\n        // It should also have a layout item assigned to it.\n        const layoutItem = gridLayout.state(\"layout\").find(item => item.i === \"__dropping-elem__\");\n        expect(layoutItem).toEqual({\n          i: \"__dropping-elem__\",\n          h: 2,\n          w: 2,\n          x: 2,\n          y: 4,\n          static: false,\n          isDraggable: true\n        });\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Allows short-circuiting the drag","suites":["Lifecycle tests","<ReactGridLayout>","Droppability"],"updatePoint":{"line":433,"column":42,"index":14955},"line":433,"code":"      it(\"Allows short-circuiting the drag\", function () {\n        const wrapper = mount( /*#__PURE__*/React.createElement(DroppableLayout, {\n          onDropDragOver: () => false\n        }));\n        const gridLayout = wrapper.find(\"ReactGridLayout\");\n\n        // Find the droppable element and drag it over the grid layout.\n        dragDroppableTo(wrapper, 200, 150);\n\n        // It should also have a layout item assigned to it.\n        const layoutItem = gridLayout.state(\"layout\").find(item => item.i === \"__dropping-elem__\");\n        expect(layoutItem).toBeUndefined();\n      });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Basic Render","suites":["Lifecycle tests","<ResponsiveReactGridLayout>"],"updatePoint":{"line":449,"column":20,"index":15589},"line":449,"code":"    it(\"Basic Render\", async function () {\n      const wrapper = mount( /*#__PURE__*/React.createElement(ShowcaseLayout, null));\n      expect(wrapper).toMatchSnapshot();\n    });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Does not modify layout on movement","suites":["Lifecycle tests","<ResponsiveReactGridLayout>"],"updatePoint":{"line":453,"column":42,"index":15789},"line":453,"code":"    it(\"Does not modify layout on movement\", async function () {\n      const layouts = {\n        lg: [..._.times(3, i => ({\n          i: String(i),\n          x: i,\n          y: 0,\n          w: 1,\n          h: 1\n        }))]\n      };\n      const frozenLayouts = deepFreeze(layouts, {\n        set: true,\n        get: false /* don't crash on unknown gets */\n      });\n      // Render the basic Responsive layout.\n      const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveReactGridLayout, {\n        layouts: frozenLayouts,\n        width: 1280,\n        breakpoint: \"lg\"\n      }, _.times(3, i => /*#__PURE__*/React.createElement(\"div\", {\n        key: i\n      }))));\n\n      // Set that layout as state and ensure it doesn't change.\n      wrapper.setState({\n        layouts: frozenLayouts\n      });\n      wrapper.setProps({\n        width: 800,\n        breakpoint: \"md\"\n      }); // will generate new layout\n      wrapper.render();\n      expect(frozenLayouts).not.toContain(\"md\");\n    });","file":"spec/lifecycle-test.js","skipped":false,"dir":"test"},{"name":"Handles an empty layout as input","suites":["bottom"],"updatePoint":{"line":9,"column":38,"index":421},"line":9,"code":"  it(\"Handles an empty layout as input\", () => {\n    expect(bottom([])).toEqual(0);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Returns the bottom coordinate of the layout","suites":["bottom"],"updatePoint":{"line":12,"column":49,"index":522},"line":12,"code":"  it(\"Returns the bottom coordinate of the layout\", () => {\n    expect(bottom([{\n      i: \"1\",\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1\n    }, {\n      i: \"2\",\n      x: 1,\n      y: 2,\n      w: 1,\n      h: 1\n    }])).toEqual(3);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"should sort by top to bottom right","suites":["sortLayoutItemsByRowCol"],"updatePoint":{"line":29,"column":40,"index":800},"line":29,"code":"  it(\"should sort by top to bottom right\", () => {\n    const layout = [{\n      x: 1,\n      y: 1,\n      w: 1,\n      h: 1,\n      i: \"2\"\n    }, {\n      x: 1,\n      y: 0,\n      w: 1,\n      h: 1,\n      i: \"1\"\n    }, {\n      x: 0,\n      y: 1,\n      w: 2,\n      h: 2,\n      i: \"3\"\n    }];\n    expect(sortLayoutItemsByRowCol(layout)).toEqual([{\n      x: 1,\n      y: 0,\n      w: 1,\n      h: 1,\n      i: \"1\"\n    }, {\n      x: 0,\n      y: 1,\n      w: 2,\n      h: 2,\n      i: \"3\"\n    }, {\n      x: 1,\n      y: 1,\n      w: 1,\n      h: 1,\n      i: \"2\"\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Returns whether the layout items collide","suites":["collides"],"updatePoint":{"line":71,"column":46,"index":1392},"line":71,"code":"  it(\"Returns whether the layout items collide\", () => {\n    expect(collides({\n      i: \"1\",\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1\n    }, {\n      i: \"2\",\n      x: 1,\n      y: 2,\n      w: 1,\n      h: 1\n    })).toEqual(false);\n    expect(collides({\n      i: \"1\",\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1\n    }, {\n      i: \"2\",\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1\n    })).toEqual(true);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Validates an empty layout","suites":["validateLayout"],"updatePoint":{"line":101,"column":31,"index":1832},"line":101,"code":"  it(\"Validates an empty layout\", () => {\n    validateLayout([]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Validates a populated layout","suites":["validateLayout"],"updatePoint":{"line":104,"column":34,"index":1907},"line":104,"code":"  it(\"Validates a populated layout\", () => {\n    validateLayout([{\n      i: \"1\",\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1\n    }, {\n      i: \"2\",\n      x: 1,\n      y: 2,\n      w: 1,\n      h: 1\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Throws errors on h not as a number","suites":["validateLayout"],"updatePoint":{"line":119,"column":40,"index":2126},"line":119,"code":"  it(\"Throws errors on h not as a number\", () => {\n    expect(() => {\n      validateLayout([{\n        i: \"1\",\n        x: 0,\n        y: 1,\n        w: 1,\n        h: 1\n      },\n      // $FlowFixMe: dynamic check\n      {\n        i: \"2\",\n        x: 1,\n        y: 2,\n        w: 1\n      }]);\n    }).toThrowError(/layout\\[1]\\.h must be a number!/i);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Does not change layout when colliding on no rearrangement mode","suites":["moveElement"],"updatePoint":{"line":142,"column":68,"index":2776},"line":142,"code":"  it(\"Does not change layout when colliding on no rearrangement mode\", () => {\n    const layout = [{\n      i: \"1\",\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1,\n      moved: false\n    }, {\n      i: \"2\",\n      x: 1,\n      y: 2,\n      w: 1,\n      h: 1,\n      moved: false\n    }];\n    const layoutItem = layout[0];\n    expect(moveElement(layout, layoutItem, 1, 2,\n    // x, y\n    true,\n    // isUserAction\n    true,\n    // preventCollision\n    null, 2 // compactType, cols\n    )).toEqual([{\n      i: \"1\",\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1,\n      moved: false\n    }, {\n      i: \"2\",\n      x: 1,\n      y: 2,\n      w: 1,\n      h: 1,\n      moved: false\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Does change layout when colliding in rearrangement mode","suites":["moveElement"],"updatePoint":{"line":182,"column":61,"index":3445},"line":182,"code":"  it(\"Does change layout when colliding in rearrangement mode\", () => {\n    const layout = [{\n      i: \"1\",\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 1,\n      moved: false\n    }, {\n      i: \"2\",\n      x: 1,\n      y: 0,\n      w: 1,\n      h: 1,\n      moved: false\n    }];\n    const layoutItem = layout[0];\n    expect(moveElement(layout, layoutItem, 1, 0,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    //  preventCollision\n    \"vertical\", 2 // compactType, cols\n    )).toEqual([{\n      i: \"1\",\n      x: 1,\n      y: 0,\n      w: 1,\n      h: 1,\n      moved: true\n    }, {\n      i: \"2\",\n      x: 1,\n      y: 1,\n      w: 1,\n      h: 1,\n      moved: true\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Moves elements out of the way without causing panel jumps when compaction is vertical","suites":["moveElement"],"updatePoint":{"line":222,"column":91,"index":4150},"line":222,"code":"  it(\"Moves elements out of the way without causing panel jumps when compaction is vertical\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }, {\n      x: 0,\n      y: 10,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }, {\n      x: 0,\n      y: 11,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    }];\n    // move A down slightly so it collides with C; can cause C to jump above B.\n    // We instead want B to jump above A (it has the room)\n    const itemA = layout[0];\n    expect(compactAndMove(layout, itemA, 0, 1,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    //  preventCollision\n    \"vertical\", 10 // compactType, cols\n    )).toEqual([expect.objectContaining({\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 11,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    })]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Calculates the correct collision when moving large object far","suites":["moveElement"],"updatePoint":{"line":272,"column":67,"index":5106},"line":272,"code":"  it(\"Calculates the correct collision when moving large object far\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }, {\n      x: 0,\n      y: 10,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }, {\n      x: 0,\n      y: 11,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    }];\n    // Move A down by 2. This should move B above, but since we don't compact in between,\n    // C should move below.\n    const itemA = layout[0];\n    expect(moveElement(layout, itemA, 0, 2,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    //  preventCollision\n    \"vertical\", 10 // compactType, cols\n    )).toEqual([expect.objectContaining({\n      x: 0,\n      y: 2,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 12,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    })]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Moves elements out of the way without causing panel jumps when compaction is vertical (example case 13)","suites":["moveElement"],"updatePoint":{"line":322,"column":109,"index":6080},"line":322,"code":"  it(\"Moves elements out of the way without causing panel jumps when compaction is vertical (example case 13)\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 1,\n      i: \"A\"\n    }, {\n      x: 1,\n      y: 0,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }, {\n      x: 0,\n      y: 1,\n      w: 2,\n      h: 2,\n      i: \"C\"\n    }];\n    // move A over slightly so it collides with B; can cause C to jump above B\n    // this test will check that that does not happen\n    const itemA = layout[0];\n    expect(moveElement(layout, itemA, 1, 0,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    //  preventCollision\n    \"vertical\", 2 // compactType, cols\n    )).toEqual([{\n      x: 1,\n      y: 0,\n      w: 1,\n      h: 1,\n      i: \"A\",\n      moved: true\n    }, {\n      x: 1,\n      y: 1,\n      w: 1,\n      h: 1,\n      i: \"B\",\n      moved: true\n    }, {\n      x: 0,\n      y: 2,\n      w: 2,\n      h: 2,\n      i: \"C\",\n      moved: true\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Moves elements out of the way without causing panel jumps when compaction is horizontal","suites":["moveElement"],"updatePoint":{"line":375,"column":93,"index":7029},"line":375,"code":"  it(\"Moves elements out of the way without causing panel jumps when compaction is horizontal\", () => {\n    const layout = [{\n      y: 0,\n      x: 0,\n      h: 1,\n      w: 10,\n      i: \"A\"\n    }, {\n      y: 0,\n      x: 11,\n      h: 1,\n      w: 1,\n      i: \"B\"\n    }, {\n      y: 0,\n      x: 12,\n      h: 1,\n      w: 1,\n      i: \"C\"\n    }];\n    // move A over slightly so it collides with C; can cause C to jump left of B\n    // this test will check that that does not happen\n    const itemA = layout[0];\n    expect(moveElement(layout, itemA, 2, 0,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    //  preventCollision\n    \"horizontal\", 10 // compactType, cols\n    )).toEqual([{\n      y: 0,\n      x: 2,\n      h: 1,\n      w: 10,\n      moved: true,\n      i: \"A\"\n    }, {\n      y: 0,\n      x: 1,\n      h: 1,\n      w: 1,\n      moved: true,\n      i: \"B\"\n    }, {\n      y: 0,\n      x: 12,\n      h: 1,\n      w: 1,\n      i: \"C\"\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Moves one element to another should cause moving down panels, vert compact, example 1","suites":["moveElement"],"updatePoint":{"line":427,"column":91,"index":7967},"line":427,"code":"  it(\"Moves one element to another should cause moving down panels, vert compact, example 1\", () => {\n    // | A | B |\n    // |C|  D  |\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 1,\n      i: \"A\"\n    }, {\n      x: 2,\n      y: 0,\n      w: 2,\n      h: 1,\n      i: \"B\"\n    }, {\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    }, {\n      x: 1,\n      y: 1,\n      w: 3,\n      h: 1,\n      i: \"D\"\n    }];\n    // move B left slightly so it collides with A; can cause C to jump above A\n    // this test will check that that does not happen\n    const itemB = layout[1];\n    expect(compactAndMove(layout, itemB, 1, 0,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    //  preventCollision\n    \"vertical\", 4 // compactType, cols\n    )).toEqual([expect.objectContaining({\n      x: 0,\n      y: 1,\n      w: 2,\n      h: 1,\n      i: \"A\"\n    }), expect.objectContaining({\n      x: 1,\n      y: 0,\n      w: 2,\n      h: 1,\n      i: \"B\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 2,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    }), expect.objectContaining({\n      x: 1,\n      y: 2,\n      w: 3,\n      h: 1,\n      i: \"D\"\n    })]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Moves one element to another should cause moving down panels, vert compact, example 2","suites":["moveElement"],"updatePoint":{"line":491,"column":91,"index":9134},"line":491,"code":"  it(\"Moves one element to another should cause moving down panels, vert compact, example 2\", () => {\n    // | A |\n    // |B|C|\n    //   | |\n    //\n    // Moving C above A should not move B above A\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 1,\n      i: \"A\"\n    }, {\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }, {\n      x: 1,\n      y: 1,\n      w: 1,\n      h: 2,\n      i: \"C\"\n    }];\n    // Move C up.\n    const itemB = layout[2];\n    expect(compactAndMove(layout, itemB, 1, 0,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    //  preventCollision\n    \"vertical\", 4 // compactType, cols\n    )).toEqual([expect.objectContaining({\n      x: 0,\n      y: 2,\n      w: 2,\n      h: 1,\n      i: \"A\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 3,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }), expect.objectContaining({\n      x: 1,\n      y: 0,\n      w: 1,\n      h: 2,\n      i: \"C\"\n    })]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Prevent collision","suites":["moveElement"],"updatePoint":{"line":545,"column":23,"index":10015},"line":545,"code":"  it(\"Prevent collision\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }, {\n      x: 0,\n      y: 10,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }, {\n      x: 0,\n      y: 11,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    }];\n    // Move A down by 2. This will collide with B and C so\n    // the layout should be unchanged\n    const itemA = layout[0];\n    const modifiedLayout = moveElement(layout, itemA, 0,\n    // x\n    2,\n    // y\n    true,\n    // isUserAction\n    true,\n    // preventCollision\n    null,\n    // compactType\n    10 // cols\n    );\n\n    expect(Object.is(layout, modifiedLayout)).toBe(true);\n    expect(layout).toEqual([expect.objectContaining({\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 10,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 11,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    })]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Allow overlapping the grid items","suites":["moveElement"],"updatePoint":{"line":602,"column":38,"index":11004},"line":602,"code":"  it(\"Allow overlapping the grid items\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }, {\n      x: 0,\n      y: 10,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }, {\n      x: 0,\n      y: 11,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    }];\n    // Move A down by 2. Both B and C should remain in same position\n    const itemA = layout[0];\n    expect(moveElement(layout, itemA, 0, 2,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    // preventCollision\n    null, 10,\n    // compactType, cols\n    true // allowOverlap\n    )).toEqual([expect.objectContaining({\n      x: 0,\n      y: 2,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 10,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }), expect.objectContaining({\n      x: 0,\n      y: 11,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    })]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Layout is cloned when using allowOverlap (#1606)","suites":["moveElement"],"updatePoint":{"line":653,"column":54,"index":11898},"line":653,"code":"  it(\"Layout is cloned when using allowOverlap (#1606)\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 10,\n      i: \"A\"\n    }, {\n      x: 0,\n      y: 10,\n      w: 1,\n      h: 1,\n      i: \"B\"\n    }, {\n      x: 0,\n      y: 11,\n      w: 1,\n      h: 1,\n      i: \"C\"\n    }];\n    // Move A down by 2. Both B and C should remain in same position\n    const itemA = layout[0];\n    const modifiedLayout = moveElement(layout, itemA, 0, 2,\n    // x, y\n    true,\n    // isUserAction\n    false,\n    // preventCollision\n    null, 10,\n    // compactType, cols\n    true // allowOverlap\n    );\n\n    expect(Object.is(layout, modifiedLayout)).toBe(false);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Removes empty vertical space above item","suites":["compact vertical"],"updatePoint":{"line":690,"column":45,"index":12601},"line":690,"code":"  it(\"Removes empty vertical space above item\", () => {\n    const layout = [{\n      i: \"1\",\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1\n    }];\n    expect(compact(layout, \"vertical\", 10)).toEqual([{\n      i: \"1\",\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 1,\n      moved: false,\n      static: false\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Resolve collision by moving item further down in array","suites":["compact vertical"],"updatePoint":{"line":708,"column":60,"index":12935},"line":708,"code":"  it(\"Resolve collision by moving item further down in array\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 5,\n      i: \"1\"\n    }, {\n      x: 0,\n      y: 1,\n      w: 1,\n      h: 1,\n      i: \"2\"\n    }];\n    expect(compact(layout, \"vertical\", 10)).toEqual([{\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 5,\n      i: \"1\",\n      moved: false,\n      static: false\n    }, {\n      x: 0,\n      y: 5,\n      w: 1,\n      h: 1,\n      i: \"2\",\n      moved: false,\n      static: false\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Handles recursive collision by moving new collisions out of the way before moving item down","suites":["compact vertical"],"updatePoint":{"line":740,"column":97,"index":13487},"line":740,"code":"  it(\"Handles recursive collision by moving new collisions out of the way before moving item down\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 5,\n      i: \"1\"\n    }, {\n      x: 0,\n      y: 0,\n      w: 10,\n      h: 1,\n      i: \"2\"\n    }, {\n      x: 5,\n      y: 1,\n      w: 1,\n      h: 1,\n      i: \"3\"\n    }, {\n      x: 5,\n      y: 2,\n      w: 1,\n      h: 1,\n      i: \"4\"\n    }, {\n      x: 5,\n      y: 3,\n      w: 1,\n      h: 1,\n      i: \"5\",\n      static: true\n    }];\n    expect(compact(layout, \"vertical\", 10)).toEqual([{\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 5,\n      i: \"1\",\n      moved: false,\n      static: false\n    }, {\n      x: 0,\n      y: 5,\n      w: 10,\n      h: 1,\n      i: \"2\",\n      moved: false,\n      static: false\n    }, {\n      x: 5,\n      y: 6,\n      w: 1,\n      h: 1,\n      i: \"3\",\n      moved: false,\n      static: false\n    }, {\n      x: 5,\n      y: 7,\n      w: 1,\n      h: 1,\n      i: \"4\",\n      moved: false,\n      static: false\n    }, {\n      x: 5,\n      y: 3,\n      w: 1,\n      h: 1,\n      i: \"5\",\n      moved: false,\n      static: true\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Clones layout items (does not modify input)","suites":["compact vertical"],"updatePoint":{"line":815,"column":49,"index":14555},"line":815,"code":"  it(\"Clones layout items (does not modify input)\", () => {\n    const layout = [{\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 5,\n      i: \"1\"\n    }, {\n      x: 0,\n      y: 0,\n      w: 10,\n      h: 1,\n      i: \"2\"\n    }];\n    const out = compact(layout, \"vertical\", 10);\n    layout.forEach(item => {\n      expect(out.includes(item)).toEqual(false);\n    });\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"compact horizontal should remove empty horizontal space to left of item","suites":["compact horizontal"],"updatePoint":{"line":836,"column":77,"index":14989},"line":836,"code":"  it(\"compact horizontal should remove empty horizontal space to left of item\", () => {\n    const layout = [{\n      x: 5,\n      y: 5,\n      w: 1,\n      h: 1,\n      i: \"1\"\n    }];\n    expect(compact(layout, \"horizontal\", 10)).toEqual([{\n      x: 0,\n      y: 5,\n      w: 1,\n      h: 1,\n      i: \"1\",\n      moved: false,\n      static: false\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Resolve collision by moving item further to the right in array","suites":["compact horizontal"],"updatePoint":{"line":854,"column":68,"index":15333},"line":854,"code":"  it(\"Resolve collision by moving item further to the right in array\", () => {\n    const layout = [{\n      y: 0,\n      x: 0,\n      h: 1,\n      w: 5,\n      i: \"1\"\n    }, {\n      y: 0,\n      x: 1,\n      h: 1,\n      w: 1,\n      i: \"2\"\n    }];\n    expect(compact(layout, \"horizontal\", 10)).toEqual([{\n      y: 0,\n      x: 0,\n      h: 1,\n      w: 5,\n      i: \"1\",\n      moved: false,\n      static: false\n    }, {\n      y: 0,\n      x: 5,\n      h: 1,\n      w: 1,\n      i: \"2\",\n      moved: false,\n      static: false\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"Handles recursive collision by moving new collisions out of the way before moving item to the right","suites":["compact horizontal"],"updatePoint":{"line":886,"column":105,"index":15895},"line":886,"code":"  it(\"Handles recursive collision by moving new collisions out of the way before moving item to the right\", () => {\n    const layout = [{\n      y: 0,\n      x: 0,\n      h: 2,\n      w: 5,\n      i: \"1\"\n    }, {\n      y: 1,\n      x: 0,\n      h: 10,\n      w: 1,\n      i: \"2\"\n    }, {\n      y: 5,\n      x: 1,\n      h: 1,\n      w: 1,\n      i: \"3\"\n    }, {\n      y: 5,\n      x: 2,\n      h: 1,\n      w: 1,\n      i: \"4\"\n    }, {\n      y: 5,\n      x: 2,\n      h: 1,\n      w: 1,\n      i: \"5\",\n      static: true\n    }];\n    expect(compact(layout, \"horizontal\", 10)).toEqual([{\n      y: 0,\n      x: 0,\n      h: 2,\n      w: 5,\n      i: \"1\",\n      moved: false,\n      static: false\n    }, {\n      y: 1,\n      x: 5,\n      h: 10,\n      w: 1,\n      i: \"2\",\n      moved: false,\n      static: false\n    }, {\n      y: 5,\n      x: 6,\n      h: 1,\n      w: 1,\n      i: \"3\",\n      moved: false,\n      static: false\n    }, {\n      y: 5,\n      x: 7,\n      h: 1,\n      w: 1,\n      i: \"4\",\n      moved: false,\n      static: false\n    }, {\n      y: 5,\n      x: 2,\n      h: 1,\n      w: 1,\n      i: \"5\",\n      moved: false,\n      static: true\n    }]);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"should complete basic calculation","suites":["calcGridColWidth"],"updatePoint":{"line":971,"column":39,"index":17139},"line":971,"code":"  it(\"should complete basic calculation\", () => {\n    expect(calcGridColWidth(basePositionParams)).toEqual(100);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"should consider margin","suites":["calcGridColWidth"],"updatePoint":{"line":974,"column":28,"index":17247},"line":974,"code":"  it(\"should consider margin\", () => {\n    const positionParams = {\n      ...basePositionParams,\n      margin: [10, 10]\n    };\n    // 70 px of margin in total (one between each of 8 items)\n    expect(calcGridColWidth(positionParams)).toEqual(91.25);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"should consider container padding","suites":["calcGridColWidth"],"updatePoint":{"line":982,"column":39,"index":17514},"line":982,"code":"  it(\"should consider container padding\", () => {\n    const positionParams = {\n      ...basePositionParams,\n      containerPadding: [100, 0]\n    };\n    // (800 - 100 - 100) / 8\n    expect(calcGridColWidth(positionParams)).toEqual(75);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"should consider margin and padding","suites":["calcGridColWidth"],"updatePoint":{"line":990,"column":40,"index":17756},"line":990,"code":"  it(\"should consider margin and padding\", () => {\n    const positionParams = {\n      ...basePositionParams,\n      margin: [10, 0],\n      containerPadding: [100, 0]\n    };\n    // (800 - 100 - 100 - 70) / 8\n    expect(calcGridColWidth(positionParams)).toEqual(66.25);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"should complete basic calculation","suites":["calcGridItemPosition"],"updatePoint":{"line":1001,"column":39,"index":18073},"line":1001,"code":"  it(\"should complete basic calculation\", () => {\n    const x = 1;\n    const y = 1;\n    const w = 2;\n    const h = 2;\n    const resizing = null;\n    const dragging = null;\n    const positionParams = {\n      ...basePositionParams,\n      margin: [10, 10],\n      containerPadding: [100, 100]\n    };\n    expect(calcGridItemPosition(positionParams, x, y, w, h, {\n      resizing,\n      dragging\n    })).toEqual({\n      height: 110,\n      // 50 * 2 + margin of 10\n      left: 176,\n      // 100 + colWidth (66.25) + margin. Rounded to complete pixel\n      top: 160,\n      // 100 + height + margin\n      width: 143 // 2x colWidth + margin, rounded\n    });\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"should tell us if props are equal, including arrays and objects","suites":["fastRGLPropsEqual"],"updatePoint":{"line":1029,"column":69,"index":18799},"line":1029,"code":"  it(\"should tell us if props are equal, including arrays and objects\", () => {\n    const props1 = {\n      className: \"foo\",\n      margin: [10, 10],\n      style: {\n        background: \"red\"\n      }\n    };\n    const props2 = {\n      className: \"foo\",\n      margin: [10, 10],\n      style: {\n        background: \"red\"\n      }\n    };\n    expect(fastRGLPropsEqual(props1, props2, isEqual)).toEqual(true);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"catches changed arrays","suites":["fastRGLPropsEqual"],"updatePoint":{"line":1046,"column":28,"index":19164},"line":1046,"code":"  it(\"catches changed arrays\", () => {\n    const props1 = {\n      margin: [10, 10]\n    };\n    const props2 = {\n      margin: [10, 11]\n    };\n    expect(fastRGLPropsEqual(props1, props2, isEqual)).toEqual(false);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"ignores children","suites":["fastRGLPropsEqual"],"updatePoint":{"line":1055,"column":22,"index":19376},"line":1055,"code":"  it(\"ignores children\", () => {\n    const props1 = {\n      children: [\"foo\", \"bar\"]\n    };\n    const props2 = {\n      children: [\"biff\", \"bar\"]\n    };\n    expect(fastRGLPropsEqual(props1, props2, isEqual)).toEqual(true);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"fails added props","suites":["fastRGLPropsEqual"],"updatePoint":{"line":1064,"column":23,"index":19605},"line":1064,"code":"  it(\"fails added props\", () => {\n    const props1 = {};\n    const props2 = {\n      droppingItem: {\n        w: 1,\n        h: 2,\n        i: 3\n      }\n    };\n    expect(fastRGLPropsEqual(props1, props2, isEqual)).toEqual(false);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"ignores invalid props","suites":["fastRGLPropsEqual"],"updatePoint":{"line":1075,"column":27,"index":19842},"line":1075,"code":"  it(\"ignores invalid props\", () => {\n    const props1 = {};\n    const props2 = {\n      somethingElse: {\n        w: 1,\n        h: 2,\n        i: 3\n      }\n    };\n    expect(fastRGLPropsEqual(props1, props2, isEqual)).toEqual(true);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"return { w: 1, h: 1 }","suites":["calcWH"],"updatePoint":{"line":1096,"column":27,"index":20269},"line":1096,"code":"  it(\"return { w: 1, h: 1 }\", () => {\n    const res = calcWH(mockPositionParams, 100, 200, 1, 1);\n    expect(JSON.stringify(res)).toBe(JSON.stringify({\n      w: 1,\n      h: 1\n    }));\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"return { w: 2, h: 1 }","suites":["calcWH"],"updatePoint":{"line":1103,"column":27,"index":20459},"line":1103,"code":"  it(\"return { w: 2, h: 1 }\", () => {\n    const res = calcWH(mockPositionParams, 200, 200, 1, 1);\n    expect(JSON.stringify(res)).toBe(JSON.stringify({\n      w: 2,\n      h: 1\n    }));\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"return { w: 1, h: 2 }","suites":["calcWH"],"updatePoint":{"line":1110,"column":27,"index":20649},"line":1110,"code":"  it(\"return { w: 1, h: 2 }\", () => {\n    const res = calcWH(mockPositionParams, 100, 400, 1, 1);\n    expect(JSON.stringify(res)).toBe(JSON.stringify({\n      w: 1,\n      h: 2\n    }));\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"return {x:0, y:0}","suites":["calcXY"],"updatePoint":{"line":1127,"column":23,"index":21025},"line":1127,"code":"  it(\"return {x:0, y:0}\", () => {\n    const TOP = 10;\n    const LEFT = 10;\n    const W = 300;\n    const H = 100;\n    const res = calcXY(mockPositionParams, TOP, LEFT, W, H);\n    expect(JSON.stringify(res)).toBe(JSON.stringify({\n      x: 0,\n      y: 0\n    }));\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"return {x:1, y:0}","suites":["calcXY"],"updatePoint":{"line":1138,"column":23,"index":21291},"line":1138,"code":"  it(\"return {x:1, y:0}\", () => {\n    const TOP = 0;\n    const LEFT = 100;\n    const W = 0;\n    const H = 0;\n    const res = calcXY(mockPositionParams, TOP, LEFT, W, H);\n    expect(JSON.stringify(res)).toBe(JSON.stringify({\n      x: 1,\n      y: 0\n    }));\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"return {x:0, y:1}","suites":["calcXY"],"updatePoint":{"line":1149,"column":23,"index":21553},"line":1149,"code":"  it(\"return {x:0, y:1}\", () => {\n    const TOP = 110;\n    const LEFT = 0;\n    const W = 0;\n    const H = 0;\n    const res = calcXY(mockPositionParams, TOP, LEFT, W, H);\n    expect(JSON.stringify(res)).toBe(JSON.stringify({\n      x: 0,\n      y: 1\n    }));\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"returns null when verticalCompact is false","suites":["compactType"],"updatePoint":{"line":1166,"column":48,"index":21961},"line":1166,"code":"  it(\"returns null when verticalCompact is false\", () => {\n    expect(compactType(mockProps)).toBe(null);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"returns compactType value when verticalCompact is true","suites":["compactType"],"updatePoint":{"line":1169,"column":60,"index":22085},"line":1169,"code":"  it(\"returns compactType value when verticalCompact is true\", () => {\n    expect(compactType({\n      ...mockProps,\n      verticalCompact: true\n    })).toBe(\"horizontal\");\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"smoke test","suites":["deepFreeze"],"updatePoint":{"line":1177,"column":16,"index":22254},"line":1177,"code":"  it(\"smoke test\", () => {\n    const deepFreezeResult = deepFreeze({\n      a: \"a\",\n      b: {\n        b: \"c\"\n      }\n    }, {\n      get: true,\n      set: true\n    });\n    expect(JSON.stringify(deepFreezeResult)).toBe('{\"a\":\"a\",\"b\":{\"b\":\"c\"}}');\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"gets nested key value","suites":["deepFreeze"],"updatePoint":{"line":1189,"column":27,"index":22516},"line":1189,"code":"  it('gets nested key value', () => {\n    const res = deepFreeze({\n      one: \"a\",\n      two: {\n        b: \"c\"\n      }\n    }, {\n      set: true,\n      get: true\n    });\n    const val = res.two.b;\n    expect(val).toBe('c');\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"defaults option prop to get: true","suites":["deepFreeze"],"updatePoint":{"line":1202,"column":39,"index":22757},"line":1202,"code":"  it('defaults option prop to get: true', () => {\n    const res = deepFreeze({\n      one: \"a\",\n      two: {\n        b: \"c\"\n      }\n    });\n    expect(res.two.b).toBe('c');\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"does not pass check `if(options.set)` ","suites":["deepFreeze"],"updatePoint":{"line":1211,"column":44,"index":22940},"line":1211,"code":"  it(\"does not pass check `if(options.set)` \", () => {\n    const res = deepFreeze({\n      one: \"a\"\n    }, {\n      set: false,\n      get: false\n    });\n    expect(res.one).toBe(\"a\");\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"returns `toJSON`","suites":["deepFreeze"],"updatePoint":{"line":1220,"column":22,"index":23106},"line":1220,"code":"  it('returns `toJSON`', () => {\n    const res = deepFreeze({\n      a: 'toJSON'\n    });\n    expect(res.a.toString()).toBe(`toJSON`);\n  });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"when setting bad key","suites":["deepFreeze","throws \"unknown prop\" error"],"updatePoint":{"line":1227,"column":28,"index":23301},"line":1227,"code":"    it('when setting bad key', () => {\n      try {\n        const res = deepFreeze({\n          one: \"a\",\n          two: {\n            b: \"c\"\n          }\n        }, {\n          set: true,\n          get: false\n        });\n        // $FlowIgnore to test the error throw\n        res.badProp = \"dog\";\n      } catch (e) {\n        expect(e.message).toBe('Can not set unknown prop \"badProp\" on frozen object.');\n      }\n    });","file":"spec/utils-test.js","skipped":false,"dir":"test"},{"name":"when getting bad key","suites":["deepFreeze","throws \"unknown prop\" error"],"updatePoint":{"line":1244,"column":28,"index":23720},"line":1244,"code":"    it(\"when getting bad key\", () => {\n      try {\n        const res = deepFreeze({\n          one: \"a\",\n          two: {\n            b: \"c\"\n          }\n        }, {\n          set: true,\n          get: true\n        });\n        // $FlowIgnore to test the error throws\n        res.badProp;\n      } catch (e) {\n        expect(e.message).toBe('Can not get unknown prop \"badProp\" on frozen object.');\n      }\n    });","file":"spec/utils-test.js","skipped":false,"dir":"test"}]}