{"repo":"JedWatson/classnames","url":"https://github.com/JedWatson/classnames","branch":"master","configs":[{"package":"classnames","lang":"ts","dir":"tests","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"keeps object keys with truthy values","suites":["bind","classNames"],"updatePoint":{"line":19,"column":42},"line":19,"code":"\t\tit('keeps object keys with truthy values', function () {\n\t\t\tassert.equal(classNames({\n\t\t\t\ta: true,\n\t\t\t\tb: false,\n\t\t\t\tc: 0,\n\t\t\t\td: null,\n\t\t\t\te: undefined,\n\t\t\t\tf: 1\n\t\t\t}), 'a f');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"joins arrays of class names and ignore falsy values","suites":["bind","classNames"],"updatePoint":{"line":30,"column":57},"line":30,"code":"\t\tit('joins arrays of class names and ignore falsy values', function () {\n\t\t\tassert.equal(classNames('a', 0, null, undefined, true, 1, 'b'), 'a 1 b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"supports heterogenous arguments","suites":["bind","classNames"],"updatePoint":{"line":34,"column":37},"line":34,"code":"\t\tit('supports heterogenous arguments', function () {\n\t\t\tassert.equal(classNames({a: true}, 'b', 0), 'a b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"should be trimmed","suites":["bind","classNames"],"updatePoint":{"line":38,"column":23},"line":38,"code":"\t\tit('should be trimmed', function () {\n\t\t\tassert.equal(classNames('', 'b', {}, ''), 'b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"returns an empty string for an empty configuration","suites":["bind","classNames"],"updatePoint":{"line":42,"column":56},"line":42,"code":"\t\tit('returns an empty string for an empty configuration', function () {\n\t\t\tassert.equal(classNames({}), '');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"supports an array of class names","suites":["bind","classNames"],"updatePoint":{"line":46,"column":38},"line":46,"code":"\t\tit('supports an array of class names', function () {\n\t\t\tassert.equal(classNames(['a', 'b']), 'a b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"joins array arguments with string arguments","suites":["bind","classNames"],"updatePoint":{"line":50,"column":49},"line":50,"code":"\t\tit('joins array arguments with string arguments', function () {\n\t\t\tassert.equal(classNames(['a', 'b'], 'c'), 'a b c');\n\t\t\tassert.equal(classNames('c', ['a', 'b']), 'c a b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles multiple array arguments","suites":["bind","classNames"],"updatePoint":{"line":55,"column":38},"line":55,"code":"\t\tit('handles multiple array arguments', function () {\n\t\t\tassert.equal(classNames(['a', 'b'], ['c', 'd']), 'a b c d');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include falsy and true values","suites":["bind","classNames"],"updatePoint":{"line":59,"column":55},"line":59,"code":"\t\tit('handles arrays that include falsy and true values', function () {\n\t\t\tassert.equal(classNames(['a', 0, null, undefined, false, true, 'b']), 'a b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include arrays","suites":["bind","classNames"],"updatePoint":{"line":63,"column":40},"line":63,"code":"\t\tit('handles arrays that include arrays', function () {\n\t\t\tassert.equal(classNames(['a', ['b', 'c']]), 'a b c');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include objects","suites":["bind","classNames"],"updatePoint":{"line":67,"column":41},"line":67,"code":"\t\tit('handles arrays that include objects', function () {\n\t\t\tassert.equal(classNames(['a', {b: true, c: false}]), 'a b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles deep array recursion","suites":["bind","classNames"],"updatePoint":{"line":71,"column":34},"line":71,"code":"\t\tit('handles deep array recursion', function () {\n\t\t\tassert.equal(classNames(['a', ['b', ['c', {d: true}]]]), 'a b c d');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles own toString() method defined on object","suites":["bind","classNames"],"updatePoint":{"line":75,"column":53},"line":75,"code":"\t\tit('handles own toString() method defined on object', function () {\n\t\t\tassert.equal(classNames({\n\t\t\t\ttoString: function () { return 'classFromMethod'; }\n\t\t\t}), 'classFromMethod');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"keeps object keys with truthy values","suites":["bind","classNamesBound"],"updatePoint":{"line":83,"column":42},"line":83,"code":"\t\tit('keeps object keys with truthy values', function () {\n\t\t\tassert.equal(classNamesBound({\n\t\t\t\ta: true,\n\t\t\t\tb: false,\n\t\t\t\tc: 0,\n\t\t\t\td: null,\n\t\t\t\te: undefined,\n\t\t\t\tf: 1\n\t\t\t}), '#a #f');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"keeps class names undefined in bound hash","suites":["bind","classNamesBound"],"updatePoint":{"line":93,"column":47},"line":93,"code":"\t\tit('keeps class names undefined in bound hash', function () {\n\t\t\tassert.equal(classNamesBound({\n\t\t\t\ta: true,\n\t\t\t\tb: false,\n\t\t\t\tc: 0,\n\t\t\t\td: null,\n\t\t\t\te: undefined,\n\t\t\t\tf: 1,\n\t\t\t\tx: true,\n\t\t\t\ty: null,\n\t\t\t\tz: 1\n\t\t\t}), '#a #f x z');\n\t\t})","file":"bind.js","skipped":false,"dir":"tests"},{"name":"joins arrays of class names and ignore falsy values","suites":["bind","classNamesBound"],"updatePoint":{"line":106,"column":57},"line":106,"code":"\t\tit('joins arrays of class names and ignore falsy values', function () {\n\t\t\tassert.equal(classNamesBound('a', 0, null, undefined, true, 1, 'b'), '#a 1 #b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"supports heterogenous arguments","suites":["bind","classNamesBound"],"updatePoint":{"line":110,"column":37},"line":110,"code":"\t\tit('supports heterogenous arguments', function () {\n\t\t\tassert.equal(classNamesBound({a: true}, 'b', 0), '#a #b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"should be trimmed","suites":["bind","classNamesBound"],"updatePoint":{"line":114,"column":23},"line":114,"code":"\t\tit('should be trimmed', function () {\n\t\t\tassert.equal(classNamesBound('', 'b', {}, ''), '#b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"returns an empty string for an empty configuration","suites":["bind","classNamesBound"],"updatePoint":{"line":118,"column":56},"line":118,"code":"\t\tit('returns an empty string for an empty configuration', function () {\n\t\t\tassert.equal(classNamesBound({}), '');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"supports an array of class names","suites":["bind","classNamesBound"],"updatePoint":{"line":122,"column":38},"line":122,"code":"\t\tit('supports an array of class names', function () {\n\t\t\tassert.equal(classNamesBound(['a', 'b']), '#a #b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"joins array arguments with string arguments","suites":["bind","classNamesBound"],"updatePoint":{"line":126,"column":49},"line":126,"code":"\t\tit('joins array arguments with string arguments', function () {\n\t\t\tassert.equal(classNamesBound(['a', 'b'], 'c'), '#a #b #c');\n\t\t\tassert.equal(classNamesBound('c', ['a', 'b']), '#c #a #b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles multiple array arguments","suites":["bind","classNamesBound"],"updatePoint":{"line":131,"column":38},"line":131,"code":"\t\tit('handles multiple array arguments', function () {\n\t\t\tassert.equal(classNamesBound(['a', 'b'], ['c', 'd']), '#a #b #c #d');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include falsy and true values","suites":["bind","classNamesBound"],"updatePoint":{"line":135,"column":55},"line":135,"code":"\t\tit('handles arrays that include falsy and true values', function () {\n\t\t\tassert.equal(classNamesBound(['a', 0, null, undefined, false, true, 'b']), '#a #b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include arrays","suites":["bind","classNamesBound"],"updatePoint":{"line":139,"column":40},"line":139,"code":"\t\tit('handles arrays that include arrays', function () {\n\t\t\tassert.equal(classNamesBound(['a', ['b', 'c']]), '#a #b #c');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include objects","suites":["bind","classNamesBound"],"updatePoint":{"line":143,"column":41},"line":143,"code":"\t\tit('handles arrays that include objects', function () {\n\t\t\tassert.equal(classNamesBound(['a', {b: true, c: false}]), '#a #b');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles deep array recursion","suites":["bind","classNamesBound"],"updatePoint":{"line":147,"column":34},"line":147,"code":"\t\tit('handles deep array recursion', function () {\n\t\t\tassert.equal(classNamesBound(['a', ['b', ['c', {d: true}]]]), '#a #b #c #d');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles own toString() method defined on object","suites":["bind","classNamesBound"],"updatePoint":{"line":151,"column":53},"line":151,"code":"\t\tit('handles own toString() method defined on object', function () {\n\t\t\tassert.equal(classNamesBound({\n\t\t\t\ttoString: function () { return 'classFromMethod'; }\n\t\t\t}), 'classFromMethod');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"handles toString() method defined inherited in object","suites":["bind","classNamesBound"],"updatePoint":{"line":157,"column":59},"line":157,"code":"\t\tit('handles toString() method defined inherited in object', function () {\n\t\t\tvar Class1 = function() {};\n\t\t\tvar Class2 = function() {};\n\t\t\tClass1.prototype.toString = function() { return 'classFromMethod'; }\n\t\t\tClass2.prototype = Object.create(Class1.prototype);\n\n\t\t\tassert.equal(classNamesBound(new Class2()), 'classFromMethod');\n\t\t});","file":"bind.js","skipped":false,"dir":"tests"},{"name":"keeps object keys with truthy values","suites":["dedupe"],"updatePoint":{"line":7,"column":41},"line":7,"code":"\tit('keeps object keys with truthy values', function () {\n\t\tassert.equal(dedupe({\n\t\t\ta: true,\n\t\t\tb: false,\n\t\t\tc: 0,\n\t\t\td: null,\n\t\t\te: undefined,\n\t\t\tf: 1\n\t\t}), 'a f');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"should dedupe dedupe","suites":["dedupe"],"updatePoint":{"line":18,"column":25},"line":18,"code":"\tit('should dedupe dedupe', function () {\n\t\tassert.equal(dedupe('foo', 'bar', 'foo', 'bar', { foo: true }), 'foo bar');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"should make sure subsequent objects can remove/add classes","suites":["dedupe"],"updatePoint":{"line":22,"column":63},"line":22,"code":"\tit('should make sure subsequent objects can remove/add classes', function () {\n\t\tassert.equal(dedupe('foo', { foo: false }, { foo: true, bar: true }), 'foo bar');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"should make sure object with falsy value wipe out previous classes","suites":["dedupe"],"updatePoint":{"line":26,"column":71},"line":26,"code":"\tit('should make sure object with falsy value wipe out previous classes', function () {\n\t\tassert.equal(dedupe('foo foo', 0, null, undefined, true, 1, 'b', { 'foo': false }), '1 b');\n\t\tassert.equal(dedupe('foo', 'foobar', 'bar', { foo: false }), 'foobar bar');\n\t\tassert.equal(dedupe('foo', 'foo-bar', 'bar', { foo: false }), 'foo-bar bar');\n\t\tassert.equal(dedupe('foo', '-moz-foo-bar', 'bar', { foo: false }), '-moz-foo-bar bar');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"joins arrays of class names and ignore falsy values","suites":["dedupe"],"updatePoint":{"line":33,"column":56},"line":33,"code":"\tit('joins arrays of class names and ignore falsy values', function () {\n\t\tassert.equal(dedupe('a', 0, null, undefined, true, 1, 'b'), '1 a b');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"supports heterogenous arguments","suites":["dedupe"],"updatePoint":{"line":37,"column":36},"line":37,"code":"\tit('supports heterogenous arguments', function () {\n\t\tassert.equal(dedupe({a: true}, 'b', 0), 'a b');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"should be trimmed","suites":["dedupe"],"updatePoint":{"line":41,"column":22},"line":41,"code":"\tit('should be trimmed', function () {\n\t\tassert.equal(dedupe('', 'b', {}, ''), 'b');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"returns an empty string for an empty configuration","suites":["dedupe"],"updatePoint":{"line":45,"column":55},"line":45,"code":"\tit('returns an empty string for an empty configuration', function () {\n\t\tassert.equal(dedupe({}), '');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"supports an array of class names","suites":["dedupe"],"updatePoint":{"line":49,"column":37},"line":49,"code":"\tit('supports an array of class names', function () {\n\t\tassert.equal(dedupe(['a', 'b']), 'a b');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"joins array arguments with string arguments","suites":["dedupe"],"updatePoint":{"line":53,"column":48},"line":53,"code":"\tit('joins array arguments with string arguments', function () {\n\t\tassert.equal(dedupe(['a', 'b'], 'c'), 'a b c');\n\t\tassert.equal(dedupe('c', ['a', 'b']), 'c a b');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"handles multiple array arguments","suites":["dedupe"],"updatePoint":{"line":58,"column":37},"line":58,"code":"\tit('handles multiple array arguments', function () {\n\t\tassert.equal(dedupe(['a', 'b'], ['c', 'd']), 'a b c d');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include falsy and true values","suites":["dedupe"],"updatePoint":{"line":62,"column":54},"line":62,"code":"\tit('handles arrays that include falsy and true values', function () {\n\t\tassert.equal(dedupe(['a', 0, null, undefined, false, true, 'b']), 'a b');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include arrays","suites":["dedupe"],"updatePoint":{"line":66,"column":39},"line":66,"code":"\tit('handles arrays that include arrays', function () {\n\t\tassert.equal(dedupe(['a', ['b', 'c']]), 'a b c');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include objects","suites":["dedupe"],"updatePoint":{"line":70,"column":40},"line":70,"code":"\tit('handles arrays that include objects', function () {\n\t\tassert.equal(dedupe(['a', {b: true, c: false}]), 'a b');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"handles deep array recursion","suites":["dedupe"],"updatePoint":{"line":74,"column":33},"line":74,"code":"\tit('handles deep array recursion', function () {\n\t\tassert.equal(dedupe(['a', ['b', ['c', {d: true}]]]), 'a b c d');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"handles own toString() method defined on object","suites":["dedupe"],"updatePoint":{"line":78,"column":52},"line":78,"code":"\tit('handles own toString() method defined on object', function () {\n\t\tassert.equal(dedupe({\n\t\t\ttoString: function () { return 'classFromMethod'; }\n\t\t}), 'classFromMethod');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"handles toString() method defined inherited in object","suites":["dedupe"],"updatePoint":{"line":84,"column":58},"line":84,"code":"\tit('handles toString() method defined inherited in object', function () {\n\t\tvar Class1 = function() {};\n\t\tvar Class2 = function() {};\n\t\tClass1.prototype.toString = function() { return 'classFromMethod'; }\n\t\tClass2.prototype = Object.create(Class1.prototype);\n\n\t\tassert.equal(dedupe(new Class2()), 'classFromMethod');\n\t});","file":"dedupe.js","skipped":false,"dir":"tests"},{"name":"keeps object keys with truthy values","suites":["classNames"],"updatePoint":{"line":7,"column":41},"line":7,"code":"\tit('keeps object keys with truthy values', function () {\n\t\tassert.equal(classNames({\n\t\t\ta: true,\n\t\t\tb: false,\n\t\t\tc: 0,\n\t\t\td: null,\n\t\t\te: undefined,\n\t\t\tf: 1\n\t\t}), 'a f');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"joins arrays of class names and ignore falsy values","suites":["classNames"],"updatePoint":{"line":18,"column":56},"line":18,"code":"\tit('joins arrays of class names and ignore falsy values', function () {\n\t\tassert.equal(classNames('a', 0, null, undefined, true, 1, 'b'), 'a 1 b');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"supports heterogenous arguments","suites":["classNames"],"updatePoint":{"line":22,"column":36},"line":22,"code":"\tit('supports heterogenous arguments', function () {\n\t\tassert.equal(classNames({a: true}, 'b', 0), 'a b');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"should be trimmed","suites":["classNames"],"updatePoint":{"line":26,"column":22},"line":26,"code":"\tit('should be trimmed', function () {\n\t\tassert.equal(classNames('', 'b', {}, ''), 'b');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"returns an empty string for an empty configuration","suites":["classNames"],"updatePoint":{"line":30,"column":55},"line":30,"code":"\tit('returns an empty string for an empty configuration', function () {\n\t\tassert.equal(classNames({}), '');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"supports an array of class names","suites":["classNames"],"updatePoint":{"line":34,"column":37},"line":34,"code":"\tit('supports an array of class names', function () {\n\t\tassert.equal(classNames(['a', 'b']), 'a b');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"joins array arguments with string arguments","suites":["classNames"],"updatePoint":{"line":38,"column":48},"line":38,"code":"\tit('joins array arguments with string arguments', function () {\n\t\tassert.equal(classNames(['a', 'b'], 'c'), 'a b c');\n\t\tassert.equal(classNames('c', ['a', 'b']), 'c a b');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles multiple array arguments","suites":["classNames"],"updatePoint":{"line":43,"column":37},"line":43,"code":"\tit('handles multiple array arguments', function () {\n\t\tassert.equal(classNames(['a', 'b'], ['c', 'd']), 'a b c d');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include falsy and true values","suites":["classNames"],"updatePoint":{"line":47,"column":54},"line":47,"code":"\tit('handles arrays that include falsy and true values', function () {\n\t\tassert.equal(classNames(['a', 0, null, undefined, false, true, 'b']), 'a b');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include arrays","suites":["classNames"],"updatePoint":{"line":51,"column":39},"line":51,"code":"\tit('handles arrays that include arrays', function () {\n\t\tassert.equal(classNames(['a', ['b', 'c']]), 'a b c');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles arrays that include objects","suites":["classNames"],"updatePoint":{"line":55,"column":40},"line":55,"code":"\tit('handles arrays that include objects', function () {\n\t\tassert.equal(classNames(['a', {b: true, c: false}]), 'a b');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles deep array recursion","suites":["classNames"],"updatePoint":{"line":59,"column":33},"line":59,"code":"\tit('handles deep array recursion', function () {\n\t\tassert.equal(classNames(['a', ['b', ['c', {d: true}]]]), 'a b c d');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles arrays that are empty","suites":["classNames"],"updatePoint":{"line":63,"column":34},"line":63,"code":"\tit('handles arrays that are empty', function () {\n\t\tassert.equal(classNames('a', []), 'a');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles nested arrays that have empty nested arrays","suites":["classNames"],"updatePoint":{"line":67,"column":56},"line":67,"code":"\tit('handles nested arrays that have empty nested arrays', function () {\n\t\tassert.equal(classNames('a', [[]]), 'a');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles all types of truthy and falsy property values as expected","suites":["classNames"],"updatePoint":{"line":71,"column":70},"line":71,"code":"\tit('handles all types of truthy and falsy property values as expected', function () {\n\t\tassert.equal(classNames({\n\t\t\t// falsy:\n\t\t\tnull: null,\n\t\t\temptyString: \"\",\n\t\t\tnoNumber: NaN,\n\t\t\tzero: 0,\n\t\t\tnegativeZero: -0,\n\t\t\tfalse: false,\n\t\t\tundefined: undefined,\n\n\t\t\t// truthy (literally anything else):\n\t\t\tnonEmptyString: \"foobar\",\n\t\t\twhitespace: ' ',\n\t\t\tfunction: Object.prototype.toString,\n\t\t\temptyObject: {},\n\t\t\tnonEmptyObject: {a: 1, b: 2},\n\t\t\temptyList: [],\n\t\t\tnonEmptyList: [1, 2, 3],\n\t\t\tgreaterZero: 1\n\t\t}), 'nonEmptyString whitespace function emptyObject nonEmptyObject emptyList nonEmptyList greaterZero');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles toString() method defined on object","suites":["classNames"],"updatePoint":{"line":94,"column":48},"line":94,"code":"\tit('handles toString() method defined on object', function () {\n\t\tassert.equal(classNames({\n\t\t\ttoString: function () { return 'classFromMethod'; }\n\t\t}), 'classFromMethod');\n\t});","file":"index.js","skipped":false,"dir":"tests"},{"name":"handles toString() method defined inherited in object","suites":["classNames"],"updatePoint":{"line":100,"column":58},"line":100,"code":"\tit('handles toString() method defined inherited in object', function () {\n\t\tvar Class1 = function() {};\n\t\tvar Class2 = function() {};\n\t\tClass1.prototype.toString = function() { return 'classFromMethod'; }\n\t\tClass2.prototype = Object.create(Class1.prototype);\n\n\t\tassert.equal(classNames(new Class2()), 'classFromMethod');\n\t});","file":"index.js","skipped":false,"dir":"tests"}]}