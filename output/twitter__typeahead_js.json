{"repo":"twitter/typeahead.js","url":"https://github.com/twitter/typeahead.js","branch":"master","configs":[{"package":"typeahead.js","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should not initialize if intialize option is false","suites":["Bloodhound","#initialize"],"updatePoint":{"line":24,"column":58,"index":684},"line":24,"code":"    it('should not initialize if intialize option is false', function () {\n      expect(this.bloodhound._initialize).not.toHaveBeenCalled();\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should not support reinitialization by default","suites":["Bloodhound","#initialize"],"updatePoint":{"line":27,"column":54,"index":829},"line":27,"code":"    it('should not support reinitialization by default', function () {\n      var p1, p2;\n      p1 = this.bloodhound.initialize();\n      p2 = this.bloodhound.initialize();\n      expect(p1).toBe(p2);\n      expect(this.bloodhound._initialize.callCount).toBe(1);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should reinitialize if reintialize flag is true","suites":["Bloodhound","#initialize"],"updatePoint":{"line":34,"column":55,"index":1097},"line":34,"code":"    it('should reinitialize if reintialize flag is true', function () {\n      var p1, p2;\n      p1 = this.bloodhound.initialize();\n      p2 = this.bloodhound.initialize(true);\n      expect(p1).not.toBe(p2);\n      expect(this.bloodhound._initialize.callCount).toBe(2);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should clear the index","suites":["Bloodhound","#initialize"],"updatePoint":{"line":41,"column":30,"index":1348},"line":41,"code":"    it('should clear the index', function () {\n      this.bloodhound = build({\n        initialize: false,\n        prefetch: '/prefetch'\n      });\n      spyOn(this.bloodhound, 'clear');\n      this.bloodhound.initialize();\n      expect(this.bloodhound.clear).toHaveBeenCalled();\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should load data from prefetch cache if available","suites":["Bloodhound","#initialize"],"updatePoint":{"line":50,"column":57,"index":1660},"line":50,"code":"    it('should load data from prefetch cache if available', function () {\n      this.bloodhound = build({\n        initialize: false,\n        prefetch: '/prefetch'\n      });\n      this.bloodhound.prefetch.fromCache.andReturn(fixtures.serialized.simple);\n      this.bloodhound.initialize();\n      expect(this.bloodhound.all()).toEqual(fixtures.data.simple);\n      expect(this.bloodhound.prefetch.fromNetwork).not.toHaveBeenCalled();\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should load data from prefetch network as fallback","suites":["Bloodhound","#initialize"],"updatePoint":{"line":60,"column":58,"index":2100},"line":60,"code":"    it('should load data from prefetch network as fallback', function () {\n      this.bloodhound = build({\n        initialize: false,\n        prefetch: '/prefetch'\n      });\n      this.bloodhound.prefetch.fromCache.andReturn(null);\n      this.bloodhound.prefetch.fromNetwork.andCallFake(fakeFromNetwork);\n      this.bloodhound.initialize();\n      expect(this.bloodhound.all()).toEqual(fixtures.data.simple);\n      function fakeFromNetwork(cb) {\n        cb(null, fixtures.data.simple);\n      }\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should store prefetch network data in the prefetch cache","suites":["Bloodhound","#initialize"],"updatePoint":{"line":73,"column":64,"index":2607},"line":73,"code":"    it('should store prefetch network data in the prefetch cache', function () {\n      this.bloodhound = build({\n        initialize: false,\n        prefetch: '/prefetch'\n      });\n      this.bloodhound.prefetch.fromCache.andReturn(null);\n      this.bloodhound.prefetch.fromNetwork.andCallFake(fakeFromNetwork);\n      this.bloodhound.initialize();\n      expect(this.bloodhound.prefetch.store).toHaveBeenCalledWith(fixtures.serialized.simple);\n      function fakeFromNetwork(cb) {\n        cb(null, fixtures.data.simple);\n      }\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should add local after prefetch is loaded","suites":["Bloodhound","#initialize"],"updatePoint":{"line":86,"column":49,"index":3127},"line":86,"code":"    it('should add local after prefetch is loaded', function () {\n      this.bloodhound = build({\n        initialize: false,\n        local: [{\n          foo: 'bar'\n        }],\n        prefetch: '/prefetch'\n      });\n      this.bloodhound.prefetch.fromNetwork.andCallFake(fakeFromNetwork);\n      expect(this.bloodhound.all()).toEqual([]);\n      this.bloodhound.initialize();\n      expect(this.bloodhound.all()).toEqual([{\n        foo: 'bar'\n      }]);\n      function fakeFromNetwork(cb) {\n        cb(null, []);\n      }\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should add datums to search index","suites":["Bloodhound","#add"],"updatePoint":{"line":106,"column":41,"index":3684},"line":106,"code":"    it('should add datums to search index', function () {\n      var spy = jasmine.createSpy();\n      this.bloodhound = build().add(fixtures.data.simple);\n      this.bloodhound.search('big', spy);\n      expect(spy).toHaveBeenCalledWith([{\n        value: 'big'\n      }, {\n        value: 'bigger'\n      }, {\n        value: 'biggest'\n      }]);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should support array signature","suites":["Bloodhound","#get"],"updatePoint":{"line":128,"column":38,"index":4254},"line":128,"code":"    it('should support array signature', function () {\n      expect(this.bloodhound.get(['big', 'bigger'])).toEqual([{\n        value: 'big'\n      }, {\n        value: 'bigger'\n      }]);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should support splat signature","suites":["Bloodhound","#get"],"updatePoint":{"line":135,"column":38,"index":4448},"line":135,"code":"    it('should support splat signature', function () {\n      expect(this.bloodhound.get('big', 'bigger')).toEqual([{\n        value: 'big'\n      }, {\n        value: 'bigger'\n      }]);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should return nothing for unknown ids","suites":["Bloodhound","#get"],"updatePoint":{"line":142,"column":45,"index":4647},"line":142,"code":"    it('should return nothing for unknown ids', function () {\n      expect(this.bloodhound.get('big', 'foo', 'bigger')).toEqual([{\n        value: 'big'\n      }, {\n        value: 'bigger'\n      }]);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should remove all datums to search index","suites":["Bloodhound","#clear"],"updatePoint":{"line":151,"column":48,"index":4897},"line":151,"code":"    it('should remove all datums to search index', function () {\n      var spy = jasmine.createSpy();\n      this.bloodhound = build({\n        local: fixtures.data.simple\n      }).clear();\n      this.bloodhound.search('big', spy);\n      expect(spy).toHaveBeenCalledWith([]);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should clear persistent storage","suites":["Bloodhound","#clearPrefetchCache"],"updatePoint":{"line":161,"column":39,"index":5224},"line":161,"code":"    it('should clear persistent storage', function () {\n      this.bloodhound = build({\n        prefetch: '/prefetch'\n      }).clearPrefetchCache();\n      expect(this.bloodhound.prefetch.clear).toHaveBeenCalled();\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should clear remote request cache","suites":["Bloodhound","#clearRemoteCache"],"updatePoint":{"line":169,"column":41,"index":5500},"line":169,"code":"    it('should clear remote request cache', function () {\n      spyOn(Transport, 'resetCache');\n      this.bloodhound = build({\n        remote: '/remote'\n      }).clearRemoteCache();\n      expect(Transport.resetCache).toHaveBeenCalled();\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should return all local results","suites":["Bloodhound","#all"],"updatePoint":{"line":178,"column":39,"index":5783},"line":178,"code":"    it('should return all local results', function () {\n      this.bloodhound = build({\n        local: fixtures.data.simple\n      });\n      expect(this.bloodhound.all()).toEqual(fixtures.data.simple);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should return sync matches","suites":["Bloodhound","#search – local"],"updatePoint":{"line":186,"column":34,"index":6037},"line":186,"code":"    it('should return sync matches', function () {\n      var spy = jasmine.createSpy();\n      this.bloodhound = build({\n        local: fixtures.data.simple\n      });\n      this.bloodhound.search('big', spy);\n      expect(spy).toHaveBeenCalledWith([{\n        value: 'big'\n      }, {\n        value: 'bigger'\n      }, {\n        value: 'biggest'\n      }]);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should return sync matches","suites":["Bloodhound","#search – prefetch"],"updatePoint":{"line":202,"column":34,"index":6451},"line":202,"code":"    it('should return sync matches', function () {\n      var spy = jasmine.createSpy();\n      this.bloodhound = build({\n        initialize: false,\n        prefetch: '/prefetch'\n      });\n      this.bloodhound.prefetch.fromCache.andReturn(fixtures.serialized.simple);\n      this.bloodhound.initialize();\n      this.bloodhound.search('big', spy);\n      expect(spy).toHaveBeenCalledWith([{\n        value: 'big'\n      }, {\n        value: 'bigger'\n      }, {\n        value: 'biggest'\n      }]);\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should return async matches","suites":["Bloodhound","#search – remote"],"updatePoint":{"line":221,"column":35,"index":7001},"line":221,"code":"    it('should return async matches', function () {\n      var spy = jasmine.createSpy();\n      this.bloodhound = build({\n        remote: '/remote'\n      });\n      this.bloodhound.remote.get.andCallFake(fakeGet);\n      this.bloodhound.search('dog', $.noop, spy);\n      expect(spy.callCount).toBe(1);\n      function fakeGet(o, cb) {\n        cb(fixtures.data.animals);\n      }\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should backfill when local/prefetch is not sufficient","suites":["Bloodhound","#search – integration"],"updatePoint":{"line":235,"column":61,"index":7465},"line":235,"code":"    it('should backfill when local/prefetch is not sufficient', function () {\n      var syncSpy, asyncSpy;\n      syncSpy = jasmine.createSpy();\n      asyncSpy = jasmine.createSpy();\n      this.bloodhound = build({\n        sufficient: 3,\n        local: fixtures.data.simple,\n        remote: '/remote'\n      });\n      this.bloodhound.remote.get.andCallFake(fakeGet);\n      this.bloodhound.search('big', syncSpy, asyncSpy);\n      expect(syncSpy).toHaveBeenCalledWith([{\n        value: 'big'\n      }, {\n        value: 'bigger'\n      }, {\n        value: 'biggest'\n      }]);\n      expect(asyncSpy).not.toHaveBeenCalled();\n      this.bloodhound.search('bigg', syncSpy, asyncSpy);\n      expect(syncSpy).toHaveBeenCalledWith([{\n        value: 'bigger'\n      }, {\n        value: 'biggest'\n      }]);\n      expect(asyncSpy).toHaveBeenCalledWith(fixtures.data.animals);\n      function fakeGet(o, cb) {\n        cb(fixtures.data.animals);\n      }\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should remove duplicates from backfill","suites":["Bloodhound","#search – integration"],"updatePoint":{"line":265,"column":46,"index":8392},"line":265,"code":"    it('should remove duplicates from backfill', function () {\n      var syncSpy, asyncSpy;\n      syncSpy = jasmine.createSpy();\n      asyncSpy = jasmine.createSpy();\n      this.bloodhound = build({\n        identify: function (d) {\n          return d.value;\n        },\n        local: fixtures.data.animals,\n        remote: '/remote'\n      });\n      this.bloodhound.remote.get.andCallFake(fakeGet);\n      this.bloodhound.search('dog', syncSpy, asyncSpy);\n      expect(syncSpy).toHaveBeenCalledWith([{\n        value: 'dog'\n      }]);\n      expect(asyncSpy).toHaveBeenCalledWith([{\n        value: 'cat'\n      }, {\n        value: 'moose'\n      }]);\n      function fakeGet(o, cb) {\n        cb(fixtures.data.animals);\n      }\n    });","file":"bloodhound/bloodhound_spec.js","skipped":false,"dir":"test"},{"name":"should make entries retrievable by their keys","suites":["LruCache"],"updatePoint":{"line":5,"column":51,"index":154},"line":5,"code":"  it('should make entries retrievable by their keys', function () {\n    var key = 'key',\n      val = 42;\n    this.cache.set(key, val);\n    expect(this.cache.get(key)).toBe(val);\n  });","file":"bloodhound/lru_cache_spec.js","skipped":false,"dir":"test"},{"name":"should return undefined if key has not been set","suites":["LruCache"],"updatePoint":{"line":11,"column":53,"index":340},"line":11,"code":"  it('should return undefined if key has not been set', function () {\n    expect(this.cache.get('wat?')).toBeUndefined();\n  });","file":"bloodhound/lru_cache_spec.js","skipped":false,"dir":"test"},{"name":"should hold up to maxSize entries","suites":["LruCache"],"updatePoint":{"line":14,"column":39,"index":454},"line":14,"code":"  it('should hold up to maxSize entries', function () {\n    this.cache.set('one', 1);\n    this.cache.set('two', 2);\n    this.cache.set('three', 3);\n    this.cache.set('four', 4);\n    expect(this.cache.get('one')).toBeUndefined();\n    expect(this.cache.get('two')).toBe(2);\n    expect(this.cache.get('three')).toBe(3);\n    expect(this.cache.get('four')).toBe(4);\n  });","file":"bloodhound/lru_cache_spec.js","skipped":false,"dir":"test"},{"name":"should evict lru entry if cache is full","suites":["LruCache"],"updatePoint":{"line":24,"column":45,"index":828},"line":24,"code":"  it('should evict lru entry if cache is full', function () {\n    this.cache.set('one', 1);\n    this.cache.set('two', 2);\n    this.cache.set('three', 3);\n    this.cache.get('one');\n    this.cache.set('four', 4);\n    expect(this.cache.get('one')).toBe(1);\n    expect(this.cache.get('two')).toBeUndefined();\n    expect(this.cache.get('three')).toBe(3);\n    expect(this.cache.get('four')).toBe(4);\n    expect(this.cache.size).toBe(3);\n  });","file":"bloodhound/lru_cache_spec.js","skipped":false,"dir":"test"},{"name":"should throw exception if datumTokenizer is not set","suites":["options parser"],"updatePoint":{"line":26,"column":57,"index":599},"line":26,"code":"  it('should throw exception if datumTokenizer is not set', function () {\n    expect(parse).toThrow();\n    function parse() {\n      build({\n        datumTokenizer: null\n      });\n    }\n  });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should throw exception if queryTokenizer is not set","suites":["options parser"],"updatePoint":{"line":34,"column":57,"index":790},"line":34,"code":"  it('should throw exception if queryTokenizer is not set', function () {\n    expect(parse).toThrow();\n    function parse() {\n      build({\n        queryTokenizer: null\n      });\n    }\n  });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should wrap sorter","suites":["options parser"],"updatePoint":{"line":42,"column":24,"index":948},"line":42,"code":"  it('should wrap sorter', function () {\n    var o = build({\n      sorter: function (a, b) {\n        return a - b;\n      }\n    });\n    expect(o.sorter([2, 1, 3])).toEqual([1, 2, 3]);\n  });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default sorter to identity function","suites":["options parser"],"updatePoint":{"line":50,"column":48,"index":1161},"line":50,"code":"  it('should default sorter to identity function', function () {\n    var o = build();\n    expect(o.sorter([2, 1, 3])).toEqual([2, 1, 3]);\n  });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default to empty array","suites":["options parser","local"],"updatePoint":{"line":55,"column":37,"index":1328},"line":55,"code":"    it('should default to empty array', function () {\n      var o = build();\n      expect(o.local).toEqual([]);\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should support function","suites":["options parser","local"],"updatePoint":{"line":59,"column":31,"index":1442},"line":59,"code":"    it('should support function', function () {\n      var o = build({\n        local: function () {\n          return [1];\n        }\n      });\n      expect(o.local).toEqual([1]);\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should support arrays","suites":["options parser","local"],"updatePoint":{"line":67,"column":29,"index":1625},"line":67,"code":"    it('should support arrays', function () {\n      var o = build({\n        local: [1]\n      });\n      expect(o.local).toEqual([1]);\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should throw exception if url is not set","suites":["options parser","prefetch"],"updatePoint":{"line":75,"column":48,"index":1828},"line":75,"code":"    it('should throw exception if url is not set', function () {\n      expect(parse).toThrow();\n      function parse() {\n        prefetch({\n          url: null\n        });\n      }\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should support simple string format","suites":["options parser","prefetch"],"updatePoint":{"line":83,"column":43,"index":2011},"line":83,"code":"    it('should support simple string format', function () {\n      expect(build({\n        prefetch: '/prefetch'\n      }).prefetch).toBeDefined();\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default ttl to 1 day","suites":["options parser","prefetch"],"updatePoint":{"line":88,"column":35,"index":2156},"line":88,"code":"    it('should default ttl to 1 day', function () {\n      var o = prefetch();\n      expect(o.prefetch.ttl).toBe(86400000);\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default cache to true","suites":["options parser","prefetch"],"updatePoint":{"line":92,"column":36,"index":2288},"line":92,"code":"    it('should default cache to true', function () {\n      var o = prefetch();\n      expect(o.prefetch.cache).toBe(true);\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default transform to identiy function","suites":["options parser","prefetch"],"updatePoint":{"line":96,"column":52,"index":2434},"line":96,"code":"    it('should default transform to identiy function', function () {\n      var o = prefetch();\n      expect(o.prefetch.transform('foo')).toBe('foo');\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default cacheKey to url","suites":["options parser","prefetch"],"updatePoint":{"line":100,"column":38,"index":2578},"line":100,"code":"    it('should default cacheKey to url', function () {\n      var o = prefetch();\n      expect(o.prefetch.cacheKey).toBe(o.prefetch.url);\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default transport to jQuery.ajax","suites":["options parser","prefetch"],"updatePoint":{"line":104,"column":47,"index":2732},"line":104,"code":"    it('should default transport to jQuery.ajax', function () {\n      var o = prefetch();\n      expect(o.prefetch.transport).toBe($.ajax);\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should prepend verison to thumbprint","suites":["options parser","prefetch"],"updatePoint":{"line":108,"column":44,"index":2876},"line":108,"code":"    it('should prepend verison to thumbprint', function () {\n      var o = prefetch();\n      expect(o.prefetch.thumbprint).toBe('%VERSION%');\n      o = prefetch({\n        thumbprint: 'foo'\n      });\n      expect(o.prefetch.thumbprint).toBe('%VERSION%foo');\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should wrap custom transport to be deferred compatible","suites":["options parser","prefetch"],"updatePoint":{"line":116,"column":62,"index":3159},"line":116,"code":"    it('should wrap custom transport to be deferred compatible', function () {\n      var o, errDeferred, successDeferred;\n      o = prefetch({\n        transport: errTransport\n      });\n      errDeferred = o.prefetch.transport('q');\n      o = prefetch({\n        transport: successTransport\n      });\n      successDeferred = o.prefetch.transport('q');\n      waits(0);\n      runs(function () {\n        expect(errDeferred.isRejected()).toBe(true);\n        expect(successDeferred.isResolved()).toBe(true);\n      });\n      function errTransport(q, success, error) {\n        error();\n      }\n      function successTransport(q, success, error) {\n        success();\n      }\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should throw exception if url is not set","suites":["options parser","remote"],"updatePoint":{"line":140,"column":48,"index":3859},"line":140,"code":"    it('should throw exception if url is not set', function () {\n      expect(parse).toThrow();\n      function parse() {\n        remote({\n          url: null\n        });\n      }\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should support simple string format","suites":["options parser","remote"],"updatePoint":{"line":148,"column":43,"index":4040},"line":148,"code":"    it('should support simple string format', function () {\n      expect(build({\n        remote: '/remote'\n      }).remote).toBeDefined();\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default transform to identiy function","suites":["options parser","remote"],"updatePoint":{"line":153,"column":52,"index":4196},"line":153,"code":"    it('should default transform to identiy function', function () {\n      var o = remote();\n      expect(o.remote.transform('foo')).toBe('foo');\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default transport to jQuery.ajax","suites":["options parser","remote"],"updatePoint":{"line":157,"column":47,"index":4345},"line":157,"code":"    it('should default transport to jQuery.ajax', function () {\n      var o = remote();\n      expect(o.remote.transport).toBe($.ajax);\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default limiter to debouce","suites":["options parser","remote"],"updatePoint":{"line":161,"column":41,"index":4482},"line":161,"code":"    it('should default limiter to debouce', function () {\n      var o = remote();\n      expect(o.remote.limiter.name).toBe('debounce');\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should default prepare to identity function","suites":["options parser","remote"],"updatePoint":{"line":165,"column":51,"index":4636},"line":165,"code":"    it('should default prepare to identity function', function () {\n      var o = remote();\n      expect(o.remote.prepare('q', {\n        url: '/foo'\n      })).toEqual({\n        url: '/foo'\n      });\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should support wildcard for prepare","suites":["options parser","remote"],"updatePoint":{"line":173,"column":43,"index":4835},"line":173,"code":"    it('should support wildcard for prepare', function () {\n      var o = remote({\n        wildcard: '%FOO'\n      });\n      expect(o.remote.prepare('=', {\n        url: '/%FOO'\n      })).toEqual({\n        url: '/%3D'\n      });\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should support replace for prepare","suites":["options parser","remote"],"updatePoint":{"line":183,"column":42,"index":5068},"line":183,"code":"    it('should support replace for prepare', function () {\n      var o = remote({\n        replace: function () {\n          return '/bar';\n        }\n      });\n      expect(o.remote.prepare('q', {\n        url: '/foo'\n      })).toEqual({\n        url: '/bar'\n      });\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should should rateLimitBy for limiter","suites":["options parser","remote"],"updatePoint":{"line":195,"column":45,"index":5344},"line":195,"code":"    it('should should rateLimitBy for limiter', function () {\n      var o = remote({\n        rateLimitBy: 'throttle'\n      });\n      expect(o.remote.limiter.name).toBe('throttle');\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should wrap custom transport to be deferred compatible","suites":["options parser","remote"],"updatePoint":{"line":201,"column":62,"index":5550},"line":201,"code":"    it('should wrap custom transport to be deferred compatible', function () {\n      var o, errDeferred, successDeferred;\n      o = remote({\n        transport: errTransport\n      });\n      errDeferred = o.remote.transport('q');\n      o = remote({\n        transport: successTransport\n      });\n      successDeferred = o.remote.transport('q');\n      waits(0);\n      runs(function () {\n        expect(errDeferred.isRejected()).toBe(true);\n        expect(successDeferred.isResolved()).toBe(true);\n      });\n      function errTransport(q, success, error) {\n        error();\n      }\n      function successTransport(q, success, error) {\n        success();\n      }\n    });","file":"bloodhound/options_parser_spec.js","skipped":false,"dir":"test"},{"name":"should access localStorage with prefixed key","suites":["PersistentStorage","#get"],"updatePoint":{"line":34,"column":52,"index":881},"line":34,"code":"    it('should access localStorage with prefixed key', function () {\n      engine.get('key');\n      expect(ls.getItem).toHaveBeenCalledWith('__ns__key');\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should return undefined when key does not exist","suites":["PersistentStorage","#get"],"updatePoint":{"line":38,"column":55,"index":1046},"line":38,"code":"    it('should return undefined when key does not exist', function () {\n      expect(engine.get('does not exist')).toEqual(undefined);\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should return value as correct type","suites":["PersistentStorage","#get"],"updatePoint":{"line":41,"column":43,"index":1177},"line":41,"code":"    it('should return value as correct type', function () {\n      engine.set('string', 'i am a string');\n      engine.set('number', 42);\n      engine.set('boolean', true);\n      engine.set('null', null);\n      engine.set('object', {\n        obj: true\n      });\n      expect(engine.get('string')).toEqual('i am a string');\n      expect(engine.get('number')).toEqual(42);\n      expect(engine.get('boolean')).toEqual(true);\n      expect(engine.get('null')).toBeNull();\n      expect(engine.get('object')).toEqual({\n        obj: true\n      });\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should expire stale keys","suites":["PersistentStorage","#get"],"updatePoint":{"line":57,"column":32,"index":1713},"line":57,"code":"    it('should expire stale keys', function () {\n      engine.set('key', 'value', -1);\n      expect(engine.get('key')).toBeNull();\n      expect(ls.getItem('__ns__key__ttl')).toBeNull();\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should access localStorage with prefixed key","suites":["PersistentStorage","#set"],"updatePoint":{"line":64,"column":52,"index":1966},"line":64,"code":"    it('should access localStorage with prefixed key', function () {\n      engine.set('key', 'val');\n      expect(ls.setItem.mostRecentCall.args[0]).toEqual('__ns__key');\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should JSON.stringify value before storing","suites":["PersistentStorage","#set"],"updatePoint":{"line":68,"column":50,"index":2143},"line":68,"code":"    it('should JSON.stringify value before storing', function () {\n      engine.set('key', 'val');\n      expect(ls.setItem.mostRecentCall.args[1]).toEqual(JSON.stringify('val'));\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should store ttl if provided","suites":["PersistentStorage","#set"],"updatePoint":{"line":72,"column":36,"index":2316},"line":72,"code":"    it('should store ttl if provided', function () {\n      var ttl = 1;\n      engine.set('key', 'value', ttl);\n      expect(ls.setItem.argsForCall[0]).toEqual(['__ns__key__ttl__', ttl.toString()]);\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should call clear if the localStorage limit has been reached","suites":["PersistentStorage","#set"],"updatePoint":{"line":77,"column":68,"index":2554},"line":77,"code":"    it('should call clear if the localStorage limit has been reached', function () {\n      var spy;\n      ls.setItem.andCallFake(function () {\n        var err = new Error();\n        err.name = 'QuotaExceededError';\n        throw err;\n      });\n      engine.clear = spy = jasmine.createSpy();\n      engine.set('key', 'value', 1);\n      expect(spy).toHaveBeenCalled();\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should noop if the localStorage limit has been reached","suites":["PersistentStorage","#set"],"updatePoint":{"line":88,"column":62,"index":2923},"line":88,"code":"    it('should noop if the localStorage limit has been reached', function () {\n      var get, set, remove, clear, isExpired;\n      ls.setItem.andCallFake(function () {\n        var err = new Error();\n        err.name = 'QuotaExceededError';\n        throw err;\n      });\n      get = engine.get;\n      set = engine.set;\n      remove = engine.remove;\n      clear = engine.clear;\n      isExpired = engine.isExpired;\n      engine.set('key', 'value', 1);\n      expect(engine.get).not.toBe(get);\n      expect(engine.set).not.toBe(set);\n      expect(engine.remove).not.toBe(remove);\n      expect(engine.clear).not.toBe(clear);\n      expect(engine.isExpired).not.toBe(isExpired);\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should remove key from storage","suites":["PersistentStorage","#remove"],"updatePoint":{"line":109,"column":38,"index":3619},"line":109,"code":"    it('should remove key from storage', function () {\n      engine.set('key', 'val');\n      engine.remove('key');\n      expect(engine.get('key')).toBeNull();\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should work with namespaces that contain regex characters","suites":["PersistentStorage","#clear"],"updatePoint":{"line":116,"column":65,"index":3854},"line":116,"code":"    it('should work with namespaces that contain regex characters', function () {\n      engine = new PersistentStorage('ns?()');\n      engine.set('key1', 'val1');\n      engine.set('key2', 'val2');\n      engine.clear();\n      expect(engine.get('key1')).toEqual(undefined);\n      expect(engine.get('key2')).toEqual(undefined);\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should remove all keys that exist in namespace of engine","suites":["PersistentStorage","#clear"],"updatePoint":{"line":124,"column":64,"index":4186},"line":124,"code":"    it('should remove all keys that exist in namespace of engine', function () {\n      engine.set('key1', 'val1');\n      engine.set('key2', 'val2');\n      engine.set('key3', 'val3');\n      engine.set('key4', 'val4', 0);\n      engine.clear();\n      expect(engine.get('key1')).toEqual(undefined);\n      expect(engine.get('key2')).toEqual(undefined);\n      expect(engine.get('key3')).toEqual(undefined);\n      expect(engine.get('key4')).toEqual(undefined);\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should not affect keys with different namespace","suites":["PersistentStorage","#clear"],"updatePoint":{"line":135,"column":55,"index":4639},"line":135,"code":"    it('should not affect keys with different namespace', function () {\n      ls.setItem('diff_namespace', 'val');\n      engine.clear();\n      expect(ls.getItem('diff_namespace')).toEqual('val');\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should be false for keys without ttl","suites":["PersistentStorage","#isExpired"],"updatePoint":{"line":142,"column":44,"index":4877},"line":142,"code":"    it('should be false for keys without ttl', function () {\n      engine.set('key', 'value');\n      expect(engine.isExpired('key')).toBe(false);\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should be false for fresh keys","suites":["PersistentStorage","#isExpired"],"updatePoint":{"line":146,"column":38,"index":5025},"line":146,"code":"    it('should be false for fresh keys', function () {\n      engine.set('key', 'value', 1);\n      expect(engine.isExpired('key')).toBe(false);\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should be true for stale keys","suites":["PersistentStorage","#isExpired"],"updatePoint":{"line":150,"column":37,"index":5175},"line":150,"code":"    it('should be true for stale keys', function () {\n      engine.set('key', 'value', -1);\n      expect(engine.isExpired('key')).toBe(true);\n    });","file":"bloodhound/persistent_storage_spec.js","skipped":false,"dir":"test"},{"name":"should clear cache storage","suites":["Prefetch","#clear"],"updatePoint":{"line":25,"column":34,"index":626},"line":25,"code":"    it('should clear cache storage', function () {\n      this.prefetch.clear();\n      expect(this.storage.clear).toHaveBeenCalled();\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should store data in the storage cache","suites":["Prefetch","#store"],"updatePoint":{"line":31,"column":46,"index":820},"line":31,"code":"    it('should store data in the storage cache', function () {\n      this.prefetch.store({\n        foo: 'bar'\n      });\n      expect(this.storage.set).toHaveBeenCalledWith('data', {\n        foo: 'bar'\n      }, 3600);\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should store thumbprint in the storage cache","suites":["Prefetch","#store"],"updatePoint":{"line":39,"column":52,"index":1051},"line":39,"code":"    it('should store thumbprint in the storage cache', function () {\n      this.prefetch.store({\n        foo: 'bar'\n      });\n      expect(this.storage.set).toHaveBeenCalledWith('thumbprint', jasmine.any(String), 3600);\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should store protocol in the storage cache","suites":["Prefetch","#store"],"updatePoint":{"line":45,"column":50,"index":1277},"line":45,"code":"    it('should store protocol in the storage cache', function () {\n      this.prefetch.store({\n        foo: 'bar'\n      });\n      expect(this.storage.set).toHaveBeenCalledWith('protocol', location.protocol, 3600);\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should be noop if cache option is false","suites":["Prefetch","#store"],"updatePoint":{"line":51,"column":47,"index":1496},"line":51,"code":"    it('should be noop if cache option is false', function () {\n      this.prefetch = build({\n        cache: false\n      });\n      this.prefetch.store({\n        foo: 'bar'\n      });\n      expect(this.storage.set).not.toHaveBeenCalled();\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should return data if available","suites":["Prefetch","#fromCache"],"updatePoint":{"line":62,"column":39,"index":1778},"line":62,"code":"    it('should return data if available', function () {\n      this.storage.get.andCallFake(fakeStorageGet({\n        foo: 'bar'\n      }, this.thumbprint));\n      expect(this.prefetch.fromCache()).toEqual({\n        foo: 'bar'\n      });\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should return null if data is expired","suites":["Prefetch","#fromCache"],"updatePoint":{"line":70,"column":45,"index":2026},"line":70,"code":"    it('should return null if data is expired', function () {\n      this.storage.get.andCallFake(fakeStorageGet({\n        foo: 'bar'\n      }, 'foo'));\n      expect(this.prefetch.fromCache()).toBeNull();\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should return null if data does not exist","suites":["Prefetch","#fromCache"],"updatePoint":{"line":76,"column":49,"index":2241},"line":76,"code":"    it('should return null if data does not exist', function () {\n      this.storage.get.andCallFake(fakeStorageGet(null, this.thumbprint));\n      expect(this.prefetch.fromCache()).toBeNull();\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should return null if cache option is false","suites":["Prefetch","#fromCache"],"updatePoint":{"line":80,"column":51,"index":2444},"line":80,"code":"    it('should return null if cache option is false', function () {\n      this.prefetch = build({\n        cache: false\n      });\n      this.storage.get.andCallFake(fakeStorageGet({\n        foo: 'bar'\n      }, this.thumbprint));\n      expect(this.prefetch.fromCache()).toBeNull();\n      expect(this.storage.get).not.toHaveBeenCalled();\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should have sensible default request settings","suites":["Prefetch","#fromNetwork"],"updatePoint":{"line":92,"column":53,"index":2836},"line":92,"code":"    it('should have sensible default request settings', function () {\n      var spy;\n      spy = jasmine.createSpy();\n      spyOn(this.prefetch, 'transport').andReturn($.Deferred());\n      this.prefetch.fromNetwork(spy);\n      expect(this.prefetch.transport).toHaveBeenCalledWith({\n        url: '/prefetch',\n        type: 'GET',\n        dataType: 'json'\n      });\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should transform request settings with prepare","suites":["Prefetch","#fromNetwork"],"updatePoint":{"line":103,"column":54,"index":3209},"line":103,"code":"    it('should transform request settings with prepare', function () {\n      var spy;\n      spy = jasmine.createSpy();\n      spyOn(this.prefetch, 'prepare').andReturn({\n        foo: 'bar'\n      });\n      spyOn(this.prefetch, 'transport').andReturn($.Deferred());\n      this.prefetch.fromNetwork(spy);\n      expect(this.prefetch.transport).toHaveBeenCalledWith({\n        foo: 'bar'\n      });\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should transform the response using transform","suites":["Prefetch","#fromNetwork"],"updatePoint":{"line":115,"column":53,"index":3607},"line":115,"code":"    it('should transform the response using transform', function () {\n      var spy;\n      this.prefetch = build({\n        transform: function () {\n          return {\n            bar: 'foo'\n          };\n        }\n      });\n      spy = jasmine.createSpy();\n      spyOn(this.prefetch, 'transport').andReturn($.Deferred().resolve({\n        foo: 'bar'\n      }));\n      this.prefetch.fromNetwork(spy);\n      expect(spy).toHaveBeenCalledWith(null, {\n        bar: 'foo'\n      });\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should invoke callback with data if success","suites":["Prefetch","#fromNetwork"],"updatePoint":{"line":133,"column":51,"index":4086},"line":133,"code":"    it('should invoke callback with data if success', function () {\n      var spy;\n      spy = jasmine.createSpy();\n      spyOn(this.prefetch, 'transport').andReturn($.Deferred().resolve({\n        foo: 'bar'\n      }));\n      this.prefetch.fromNetwork(spy);\n      expect(spy).toHaveBeenCalledWith(null, {\n        foo: 'bar'\n      });\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should invoke callback with err argument true if failure","suites":["Prefetch","#fromNetwork"],"updatePoint":{"line":144,"column":64,"index":4440},"line":144,"code":"    it('should invoke callback with err argument true if failure', function () {\n      var spy;\n      spy = jasmine.createSpy();\n      spyOn(this.prefetch, 'transport').andReturn($.Deferred().reject());\n      this.prefetch.fromNetwork(spy);\n      expect(spy).toHaveBeenCalledWith(true);\n    });","file":"bloodhound/prefetch_spec.js","skipped":false,"dir":"test"},{"name":"should cancel last request","suites":["Remote","#cancelLastRequest"],"updatePoint":{"line":16,"column":34,"index":408},"line":16,"code":"    it('should cancel last request', function () {\n      this.remote.cancelLastRequest();\n      expect(this.transport.cancel).toHaveBeenCalled();\n    });","file":"bloodhound/remote_spec.js","skipped":false,"dir":"test"},{"name":"should have sensible default request settings","suites":["Remote","#get"],"updatePoint":{"line":22,"column":53,"index":620},"line":22,"code":"    it('should have sensible default request settings', function () {\n      var spy;\n      spy = jasmine.createSpy();\n      spyOn(this.remote, 'prepare');\n      this.remote.get('foo', spy);\n      expect(this.remote.prepare).toHaveBeenCalledWith('foo', {\n        url: '/test?q=%QUERY',\n        type: 'GET',\n        dataType: 'json'\n      });\n    });","file":"bloodhound/remote_spec.js","skipped":false,"dir":"test"},{"name":"should transform request settings with prepare","suites":["Remote","#get"],"updatePoint":{"line":33,"column":54,"index":970},"line":33,"code":"    it('should transform request settings with prepare', function () {\n      var spy;\n      spy = jasmine.createSpy();\n      spyOn(this.remote, 'prepare').andReturn([{\n        foo: 'bar'\n      }]);\n      this.remote.get('foo', spy);\n      expect(this.transport.get).toHaveBeenCalledWith([{\n        foo: 'bar'\n      }], jasmine.any(Function));\n    });","file":"bloodhound/remote_spec.js","skipped":false,"dir":"test"},{"name":"should transform response with transform","suites":["Remote","#get"],"updatePoint":{"line":44,"column":48,"index":1315},"line":44,"code":"    it('should transform response with transform', function () {\n      var spy;\n      spy = jasmine.createSpy();\n      spyOn(this.remote, 'transform').andReturn([{\n        foo: 'bar'\n      }]);\n      this.transport.get.andCallFake(function (_, cb) {\n        cb(null, {});\n      });\n      this.remote.get('foo', spy);\n      expect(spy).toHaveBeenCalledWith([{\n        foo: 'bar'\n      }]);\n    });","file":"bloodhound/remote_spec.js","skipped":false,"dir":"test"},{"name":"should return empty array on error","suites":["Remote","#get"],"updatePoint":{"line":58,"column":42,"index":1706},"line":58,"code":"    it('should return empty array on error', function () {\n      var spy;\n      spy = jasmine.createSpy();\n      this.transport.get.andCallFake(function (_, cb) {\n        cb(true);\n      });\n      this.remote.get('foo', spy);\n      expect(spy).toHaveBeenCalledWith([]);\n    });","file":"bloodhound/remote_spec.js","skipped":false,"dir":"test"},{"name":"should support serialization/deserialization","suites":["SearchIndex"],"updatePoint":{"line":12,"column":50,"index":395},"line":12,"code":"  it('should support serialization/deserialization', function () {\n    var serialized = this.index.serialize();\n    this.index.bootstrap(serialized);\n    expect(this.index.search('smaller')).toEqual([{\n      value: 'smaller'\n    }]);\n  });","file":"bloodhound/search_index_spec.js","skipped":false,"dir":"test"},{"name":"should be able to add data on the fly","suites":["SearchIndex"],"updatePoint":{"line":19,"column":43,"index":628},"line":19,"code":"  it('should be able to add data on the fly', function () {\n    this.index.add({\n      value: 'new'\n    });\n    expect(this.index.search('new')).toEqual([{\n      value: 'new'\n    }]);\n  });","file":"bloodhound/search_index_spec.js","skipped":false,"dir":"test"},{"name":"#get should return datums by id","suites":["SearchIndex"],"updatePoint":{"line":27,"column":37,"index":812},"line":27,"code":"  it('#get should return datums by id', function () {\n    this.index = build({\n      identify: function (d) {\n        return d.value;\n      }\n    });\n    this.index.add(fixtures.data.simple);\n    expect(this.index.get(['big', 'bigger'])).toEqual([{\n      value: 'big'\n    }, {\n      value: 'bigger'\n    }]);\n  });","file":"bloodhound/search_index_spec.js","skipped":false,"dir":"test"},{"name":"#search should return datums that match the given query","suites":["SearchIndex"],"updatePoint":{"line":40,"column":61,"index":1150},"line":40,"code":"  it('#search should return datums that match the given query', function () {\n    expect(this.index.search('big')).toEqual([{\n      value: 'big'\n    }, {\n      value: 'bigger'\n    }, {\n      value: 'biggest'\n    }]);\n    expect(this.index.search('small')).toEqual([{\n      value: 'small'\n    }, {\n      value: 'smaller'\n    }, {\n      value: 'smallest'\n    }]);\n  });","file":"bloodhound/search_index_spec.js","skipped":false,"dir":"test"},{"name":"#search should return an empty array of there are no matches","suites":["SearchIndex"],"updatePoint":{"line":56,"column":66,"index":1523},"line":56,"code":"  it('#search should return an empty array of there are no matches', function () {\n    expect(this.index.search('wtf')).toEqual([]);\n  });","file":"bloodhound/search_index_spec.js","skipped":false,"dir":"test"},{"name":"#serach should handle multi-token queries","suites":["SearchIndex"],"updatePoint":{"line":59,"column":47,"index":1643},"line":59,"code":"  it('#serach should handle multi-token queries', function () {\n    this.index.add({\n      value: 'foo bar'\n    });\n    expect(this.index.search('foo b')).toEqual([{\n      value: 'foo bar'\n    }]);\n  });","file":"bloodhound/search_index_spec.js","skipped":false,"dir":"test"},{"name":"#all should return all datums","suites":["SearchIndex"],"updatePoint":{"line":67,"column":35,"index":1835},"line":67,"code":"  it('#all should return all datums', function () {\n    expect(this.index.all()).toEqual(fixtures.data.simple);\n  });","file":"bloodhound/search_index_spec.js","skipped":false,"dir":"test"},{"name":"#reset should empty the search index","suites":["SearchIndex"],"updatePoint":{"line":70,"column":42,"index":1960},"line":70,"code":"  it('#reset should empty the search index', function () {\n    this.index.reset();\n    expect(this.index.datums).toEqual([]);\n    expect(this.index.trie.i).toEqual([]);\n    expect(this.index.trie.c).toEqual({});\n  });","file":"bloodhound/search_index_spec.js","skipped":false,"dir":"test"},{"name":".whitespace should tokenize on whitespace","suites":["tokenizers"],"updatePoint":{"line":2,"column":47,"index":85},"line":2,"code":"  it('.whitespace should tokenize on whitespace', function () {\n    var tokens = tokenizers.whitespace('big-deal ok');\n    expect(tokens).toEqual(['big-deal', 'ok']);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".whitespace should treat null as empty string","suites":["tokenizers"],"updatePoint":{"line":6,"column":51,"index":262},"line":6,"code":"  it('.whitespace should treat null as empty string', function () {\n    var tokens = tokenizers.whitespace(null);\n    expect(tokens).toEqual([]);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".whitespace should treat undefined as empty string","suites":["tokenizers"],"updatePoint":{"line":10,"column":56,"index":419},"line":10,"code":"  it('.whitespace should treat undefined as empty string', function () {\n    var tokens = tokenizers.whitespace(undefined);\n    expect(tokens).toEqual([]);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".nonword should tokenize on non-word characters","suites":["tokenizers"],"updatePoint":{"line":14,"column":53,"index":578},"line":14,"code":"  it('.nonword should tokenize on non-word characters', function () {\n    var tokens = tokenizers.nonword('big-deal ok');\n    expect(tokens).toEqual(['big', 'deal', 'ok']);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".nonword should treat null as empty string","suites":["tokenizers"],"updatePoint":{"line":18,"column":48,"index":752},"line":18,"code":"  it('.nonword should treat null as empty string', function () {\n    var tokens = tokenizers.nonword(null);\n    expect(tokens).toEqual([]);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".nonword should treat undefined as empty string","suites":["tokenizers"],"updatePoint":{"line":22,"column":53,"index":903},"line":22,"code":"  it('.nonword should treat undefined as empty string', function () {\n    var tokens = tokenizers.nonword(undefined);\n    expect(tokens).toEqual([]);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".obj.whitespace should tokenize on whitespace","suites":["tokenizers"],"updatePoint":{"line":26,"column":51,"index":1057},"line":26,"code":"  it('.obj.whitespace should tokenize on whitespace', function () {\n    var t = tokenizers.obj.whitespace('val');\n    var tokens = t({\n      val: 'big-deal ok'\n    });\n    expect(tokens).toEqual(['big-deal', 'ok']);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".obj.whitespace should accept multiple properties","suites":["tokenizers"],"updatePoint":{"line":33,"column":55,"index":1283},"line":33,"code":"  it('.obj.whitespace should accept multiple properties', function () {\n    var t = tokenizers.obj.whitespace('one', 'two');\n    var tokens = t({\n      one: 'big-deal ok',\n      two: 'buzz'\n    });\n    expect(tokens).toEqual(['big-deal', 'ok', 'buzz']);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".obj.whitespace should accept array","suites":["tokenizers"],"updatePoint":{"line":41,"column":41,"index":1529},"line":41,"code":"  it('.obj.whitespace should accept array', function () {\n    var t = tokenizers.obj.whitespace(['one', 'two']);\n    var tokens = t({\n      one: 'big-deal ok',\n      two: 'buzz'\n    });\n    expect(tokens).toEqual(['big-deal', 'ok', 'buzz']);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".obj.nonword should tokenize on non-word characters","suites":["tokenizers"],"updatePoint":{"line":49,"column":57,"index":1793},"line":49,"code":"  it('.obj.nonword should tokenize on non-word characters', function () {\n    var t = tokenizers.obj.nonword('val');\n    var tokens = t({\n      val: 'big-deal ok'\n    });\n    expect(tokens).toEqual(['big', 'deal', 'ok']);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".obj.nonword should accept multiple properties","suites":["tokenizers"],"updatePoint":{"line":56,"column":52,"index":2016},"line":56,"code":"  it('.obj.nonword should accept multiple properties', function () {\n    var t = tokenizers.obj.nonword('one', 'two');\n    var tokens = t({\n      one: 'big-deal ok',\n      two: 'buzz'\n    });\n    expect(tokens).toEqual(['big', 'deal', 'ok', 'buzz']);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":".obj.nonword should accept array","suites":["tokenizers"],"updatePoint":{"line":64,"column":38,"index":2259},"line":64,"code":"  it('.obj.nonword should accept array', function () {\n    var t = tokenizers.obj.nonword(['one', 'two']);\n    var tokens = t({\n      one: 'big-deal ok',\n      two: 'buzz'\n    });\n    expect(tokens).toEqual(['big', 'deal', 'ok', 'buzz']);\n  });","file":"bloodhound/tokenizers_spec.js","skipped":false,"dir":"test"},{"name":"should use jQuery.ajax as the default transport mechanism","suites":["Transport"],"updatePoint":{"line":19,"column":63,"index":557},"line":19,"code":"  it('should use jQuery.ajax as the default transport mechanism', function () {\n    var req,\n      resp = fixtures.ajaxResps.ok,\n      spy = jasmine.createSpy();\n    this.transport.get('/test', spy);\n    req = mostRecentAjaxRequest();\n    req.response(resp);\n    expect(req.url).toBe('/test');\n    expect(spy).toHaveBeenCalledWith(null, resp.parsed);\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should respect maxPendingRequests configuration","suites":["Transport"],"updatePoint":{"line":29,"column":53,"index":904},"line":29,"code":"  it('should respect maxPendingRequests configuration', function () {\n    for (var i = 0; i < 10; i++) {\n      this.transport.get('/test' + i, $.noop);\n    }\n    expect(ajaxRequests.length).toBe(6);\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should support rate limiting","suites":["Transport"],"updatePoint":{"line":35,"column":34,"index":1090},"line":35,"code":"  it('should support rate limiting', function () {\n    this.transport = new Transport({\n      transport: $.ajax,\n      limiter: limiter\n    });\n    for (var i = 0; i < 5; i++) {\n      this.transport.get('/test' + i, $.noop);\n    }\n    jasmine.Clock.tick(100);\n    expect(ajaxRequests.length).toBe(1);\n    function limiter(fn) {\n      return _.debounce(fn, 20);\n    }\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should cache most recent requests","suites":["Transport"],"updatePoint":{"line":49,"column":39,"index":1468},"line":49,"code":"  it('should cache most recent requests', function () {\n    var spy1 = jasmine.createSpy(),\n      spy2 = jasmine.createSpy();\n    this.transport.get('/test1', $.noop);\n    mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);\n    this.transport.get('/test2', $.noop);\n    mostRecentAjaxRequest().response(fixtures.ajaxResps.ok1);\n    expect(ajaxRequests.length).toBe(2);\n    this.transport.get('/test1', spy1);\n    this.transport.get('/test2', spy2);\n    jasmine.Clock.tick(0);\n\n    // no ajax requests were made on subsequent requests\n    expect(ajaxRequests.length).toBe(2);\n    expect(spy1).toHaveBeenCalledWith(null, fixtures.ajaxResps.ok.parsed);\n    expect(spy2).toHaveBeenCalledWith(null, fixtures.ajaxResps.ok1.parsed);\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should not cache requests if cache option is false","suites":["Transport"],"updatePoint":{"line":66,"column":56,"index":2222},"line":66,"code":"  it('should not cache requests if cache option is false', function () {\n    this.transport = new Transport({\n      transport: $.ajax,\n      cache: false\n    });\n    this.transport.get('/test1', $.noop);\n    mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);\n    this.transport.get('/test1', $.noop);\n    mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);\n    expect(ajaxRequests.length).toBe(2);\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should prevent dog pile","suites":["Transport"],"updatePoint":{"line":77,"column":29,"index":2610},"line":77,"code":"  it('should prevent dog pile', function () {\n    var spy1 = jasmine.createSpy(),\n      spy2 = jasmine.createSpy();\n    this.transport.get('/test1', spy1);\n    this.transport.get('/test1', spy2);\n    mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);\n    expect(ajaxRequests.length).toBe(1);\n    waitsFor(function () {\n      return spy1.callCount && spy2.callCount;\n    });\n    runs(function () {\n      expect(spy1).toHaveBeenCalledWith(null, fixtures.ajaxResps.ok.parsed);\n      expect(spy2).toHaveBeenCalledWith(null, fixtures.ajaxResps.ok.parsed);\n    });\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should always make a request for the last call to #get","suites":["Transport"],"updatePoint":{"line":92,"column":60,"index":3212},"line":92,"code":"  it('should always make a request for the last call to #get', function () {\n    var spy = jasmine.createSpy();\n    for (var i = 0; i < 6; i++) {\n      this.transport.get('/test' + i, $.noop);\n    }\n    this.transport.get('/test' + i, spy);\n    expect(ajaxRequests.length).toBe(6);\n    _.each(ajaxRequests, function (req) {\n      req.response(fixtures.ajaxResps.ok);\n    });\n    expect(ajaxRequests.length).toBe(7);\n    mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);\n    expect(spy).toHaveBeenCalled();\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should invoke the callback with err set to true on failure","suites":["Transport"],"updatePoint":{"line":106,"column":64,"index":3735},"line":106,"code":"  it('should invoke the callback with err set to true on failure', function () {\n    var req,\n      resp = fixtures.ajaxResps.err,\n      spy = jasmine.createSpy();\n    this.transport.get('/test', spy);\n    req = mostRecentAjaxRequest();\n    req.response(resp);\n    expect(req.url).toBe('/test');\n    expect(spy).toHaveBeenCalledWith(true);\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should not send cancelled requests","suites":["Transport"],"updatePoint":{"line":116,"column":40,"index":4057},"line":116,"code":"  it('should not send cancelled requests', function () {\n    this.transport = new Transport({\n      transport: $.ajax,\n      limiter: limiter\n    });\n    this.transport.get('/test', $.noop);\n    this.transport.cancel();\n    jasmine.Clock.tick(100);\n    expect(ajaxRequests.length).toBe(0);\n    function limiter(fn) {\n      return _.debounce(fn, 20);\n    }\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should not send outdated requests","suites":["Transport"],"updatePoint":{"line":129,"column":39,"index":4418},"line":129,"code":"  it('should not send outdated requests', function () {\n    this.transport = new Transport({\n      transport: $.ajax,\n      limiter: limiter\n    });\n\n    // warm cache\n    this.transport.get('/test1', $.noop);\n    jasmine.Clock.tick(100);\n    mostRecentAjaxRequest().response(fixtures.ajaxResps.ok);\n    expect(mostRecentAjaxRequest().url).toBe('/test1');\n    expect(ajaxRequests.length).toBe(1);\n\n    // within the same rate-limit cycle, request test2 and test1. test2 becomes\n    // outdated after test1 is requested and no request is sent for test1\n    // because it's a cache hit\n    this.transport.get('/test2', $.noop);\n    this.transport.get('/test1', $.noop);\n    jasmine.Clock.tick(100);\n    expect(ajaxRequests.length).toBe(1);\n    function limiter(fn) {\n      return _.debounce(fn, 20);\n    }\n  });","file":"bloodhound/transport_spec.js","skipped":false,"dir":"test"},{"name":"should throw an error if source is missing","suites":["Dataset"],"updatePoint":{"line":35,"column":48,"index":649},"line":35,"code":"  it('should throw an error if source is missing', function () {\n    expect(noSource).toThrow();\n    function noSource() {\n      new Dataset({}, www);\n    }\n  });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should throw an error if the name is not a valid class name","suites":["Dataset"],"updatePoint":{"line":41,"column":65,"index":829},"line":41,"code":"  it('should throw an error if the name is not a valid class name', function () {\n    expect(fn).toThrow();\n    function fn() {\n      var d = new Dataset({\n        name: 'a space',\n        node: $('<div>'),\n        source: $.noop\n      }, www);\n    }\n  });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should return the root element","suites":["Dataset","#getRoot"],"updatePoint":{"line":52,"column":38,"index":1096},"line":52,"code":"    it('should return the root element', function () {\n      var sel = 'div' + www.selectors.dataset + www.selectors.dataset + '-test';\n      expect(this.dataset.$el).toBe(sel);\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should render suggestions","suites":["Dataset","#update"],"updatePoint":{"line":58,"column":33,"index":1319},"line":58,"code":"    it('should render suggestions', function () {\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).toContainText('one');\n      expect(this.dataset.$el).toContainText('two');\n      expect(this.dataset.$el).toContainText('html');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should escape html chars from display value when using default template","suites":["Dataset","#update"],"updatePoint":{"line":65,"column":79,"index":1670},"line":65,"code":"    it('should escape html chars from display value when using default template', function () {\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).toContainText('<b>html</b>');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should respect limit option","suites":["Dataset","#update"],"updatePoint":{"line":70,"column":35,"index":1878},"line":70,"code":"    it('should respect limit option', function () {\n      this.dataset.limit = 2;\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).toContainText('one');\n      expect(this.dataset.$el).toContainText('two');\n      expect(this.dataset.$el).not.toContainText('three');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should allow custom display functions","suites":["Dataset","#update"],"updatePoint":{"line":78,"column":45,"index":2230},"line":78,"code":"    it('should allow custom display functions', function () {\n      this.dataset = new Dataset({\n        name: 'test',\n        node: $('<div>'),\n        display: function (o) {\n          return o.display;\n        },\n        source: this.source = jasmine.createSpy('source')\n      }, www);\n      this.source.andCallFake(syncMockSuggestionsDisplayFn);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).toContainText('4');\n      expect(this.dataset.$el).toContainText('5');\n      expect(this.dataset.$el).toContainText('6');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should ignore async invocations of sync","suites":["Dataset","#update"],"updatePoint":{"line":93,"column":47,"index":2778},"line":93,"code":"    it('should ignore async invocations of sync', function () {\n      this.source.andCallFake(asyncSync);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).not.toContainText('one');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should ignore subesequent invocations of sync","suites":["Dataset","#update"],"updatePoint":{"line":98,"column":53,"index":2990},"line":98,"code":"    it('should ignore subesequent invocations of sync', function () {\n      this.source.andCallFake(multipleSync);\n      this.dataset.update('woah');\n      expect(this.dataset.$el.find('.tt-suggestion')).toHaveLength(3);\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should trigger asyncRequested when needing/expecting backfill","suites":["Dataset","#update"],"updatePoint":{"line":103,"column":69,"index":3235},"line":103,"code":"    it('should trigger asyncRequested when needing/expecting backfill', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.async = true;\n      this.dataset.onSync('asyncRequested', spy);\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should not trigger asyncRequested when not expecting backfill","suites":["Dataset","#update"],"updatePoint":{"line":111,"column":69,"index":3582},"line":111,"code":"    it('should not trigger asyncRequested when not expecting backfill', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.async = false;\n      this.dataset.onSync('asyncRequested', spy);\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should not trigger asyncRequested when not expecting backfill","suites":["Dataset","#update"],"updatePoint":{"line":119,"column":69,"index":3934},"line":119,"code":"    it('should not trigger asyncRequested when not expecting backfill', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.limit = 2;\n      this.dataset.async = true;\n      this.dataset.onSync('asyncRequested', spy);\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should trigger asyncCanceled when pending aysnc is canceled","suites":["Dataset","#update"],"updatePoint":{"line":128,"column":67,"index":4313},"line":128,"code":"    it('should trigger asyncCanceled when pending aysnc is canceled', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.async = true;\n      this.dataset.onSync('asyncCanceled', spy);\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      this.dataset.cancel();\n      waits(100);\n      runs(function () {\n        expect(spy).toHaveBeenCalled();\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should not trigger asyncCanceled when cancel happens after update","suites":["Dataset","#update"],"updatePoint":{"line":140,"column":73,"index":4747},"line":140,"code":"    it('should not trigger asyncCanceled when cancel happens after update', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.async = true;\n      this.dataset.onSync('asyncCanceled', spy);\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      waits(100);\n      runs(function () {\n        this.dataset.cancel();\n        expect(spy).not.toHaveBeenCalled();\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should trigger asyncReceived when aysnc is received","suites":["Dataset","#update"],"updatePoint":{"line":152,"column":59,"index":5173},"line":152,"code":"    it('should trigger asyncReceived when aysnc is received', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.async = true;\n      this.dataset.onSync('asyncReceived', spy);\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      waits(100);\n      runs(function () {\n        expect(spy).toHaveBeenCalled();\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should not trigger asyncReceived if canceled","suites":["Dataset","#update"],"updatePoint":{"line":163,"column":52,"index":5557},"line":163,"code":"    it('should not trigger asyncReceived if canceled', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.async = true;\n      this.dataset.onSync('asyncReceived', spy);\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      this.dataset.cancel();\n      waits(100);\n      runs(function () {\n        expect(spy).not.toHaveBeenCalled();\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should not modify sync when async is added","suites":["Dataset","#update"],"updatePoint":{"line":175,"column":50,"index":5972},"line":175,"code":"    it('should not modify sync when async is added', function () {\n      var $test;\n      this.dataset.async = true;\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      $test = this.dataset.$el.find('.tt-suggestion').first();\n      $test.addClass('test');\n      waits(100);\n      runs(function () {\n        expect($test).toHaveClass('test');\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should respect limit option in regard to async","suites":["Dataset","#update"],"updatePoint":{"line":187,"column":54,"index":6385},"line":187,"code":"    it('should respect limit option in regard to async', function () {\n      this.dataset.async = true;\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      waits(100);\n      runs(function () {\n        expect(this.dataset.$el.find('.tt-suggestion')).toHaveLength(5);\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should cancel pending async","suites":["Dataset","#update"],"updatePoint":{"line":196,"column":35,"index":6699},"line":196,"code":"    it('should cancel pending async', function () {\n      var spy1 = jasmine.createSpy(),\n        spy2 = jasmine.createSpy();\n      this.dataset.async = true;\n      this.dataset.onSync('asyncCanceled', spy1);\n      this.dataset.onSync('asyncReceived', spy2);\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      this.dataset.update('woah again');\n      waits(100);\n      runs(function () {\n        expect(spy1.callCount).toBe(1);\n        expect(spy2.callCount).toBe(1);\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should render notFound when no suggestions are available","suites":["Dataset","#update"],"updatePoint":{"line":211,"column":64,"index":7264},"line":211,"code":"    it('should render notFound when no suggestions are available', function () {\n      this.dataset = new Dataset({\n        source: this.source,\n        node: $('<div>'),\n        templates: {\n          notFound: '<h2>empty</h2>'\n        }\n      }, www);\n      this.source.andCallFake(syncEmptySuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).toContainText('empty');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should render pending when no suggestions are available but async is pending","suites":["Dataset","#update"],"updatePoint":{"line":223,"column":84,"index":7689},"line":223,"code":"    it('should render pending when no suggestions are available but async is pending', function () {\n      this.dataset = new Dataset({\n        source: this.source,\n        node: $('<div>'),\n        async: true,\n        templates: {\n          pending: '<h2>pending</h2>'\n        }\n      }, www);\n      this.source.andCallFake(syncEmptySuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).toContainText('pending');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should render header when suggestions are rendered","suites":["Dataset","#update"],"updatePoint":{"line":236,"column":58,"index":8112},"line":236,"code":"    it('should render header when suggestions are rendered', function () {\n      this.dataset = new Dataset({\n        source: this.source,\n        node: $('<div>'),\n        templates: {\n          header: '<h2>header</h2>'\n        }\n      }, www);\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).toContainText('header');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should render footer when suggestions are rendered","suites":["Dataset","#update"],"updatePoint":{"line":248,"column":58,"index":8510},"line":248,"code":"    it('should render footer when suggestions are rendered', function () {\n      this.dataset = new Dataset({\n        source: this.source,\n        node: $('<div>'),\n        templates: {\n          footer: function (c) {\n            return '<p>' + c.query + '</p>';\n          }\n        }\n      }, www);\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).toContainText('woah');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should not render header/footer if there is no content","suites":["Dataset","#update"],"updatePoint":{"line":262,"column":62,"index":8964},"line":262,"code":"    it('should not render header/footer if there is no content', function () {\n      this.dataset = new Dataset({\n        source: this.source,\n        node: $('<div>'),\n        templates: {\n          header: '<h2>header</h2>',\n          footer: '<h2>footer</h2>'\n        }\n      }, www);\n      this.source.andCallFake(syncEmptySuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.$el).not.toContainText('header');\n      expect(this.dataset.$el).not.toContainText('footer');\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should not render stale suggestions","suites":["Dataset","#update"],"updatePoint":{"line":276,"column":43,"index":9449},"line":276,"code":"    it('should not render stale suggestions', function () {\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('nelly');\n      waits(100);\n      runs(function () {\n        expect(this.dataset.$el).toContainText('one');\n        expect(this.dataset.$el).toContainText('two');\n        expect(this.dataset.$el).toContainText('html');\n        expect(this.dataset.$el).not.toContainText('four');\n        expect(this.dataset.$el).not.toContainText('five');\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should not render async suggestions if update was canceled","suites":["Dataset","#update"],"updatePoint":{"line":290,"column":66,"index":10062},"line":290,"code":"    it('should not render async suggestions if update was canceled', function () {\n      this.source.andCallFake(fakeGetWithAsyncSuggestions);\n      this.dataset.update('woah');\n      this.dataset.cancel();\n      waits(100);\n      runs(function () {\n        var rendered = this.dataset.$el.find('.tt-suggestion');\n        expect(rendered).toHaveLength(3);\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should trigger rendered after suggestions are rendered","suites":["Dataset","#update"],"updatePoint":{"line":300,"column":62,"index":10432},"line":300,"code":"    it('should trigger rendered after suggestions are rendered', function () {\n      var spy;\n      this.dataset.onSync('rendered', spy = jasmine.createSpy());\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      waitsFor(function () {\n        return spy.callCount;\n      });\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should clear suggestions","suites":["Dataset","#clear"],"updatePoint":{"line":311,"column":32,"index":10767},"line":311,"code":"    it('should clear suggestions', function () {\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      this.dataset.clear();\n      expect(this.dataset.$el).toBeEmpty();\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should cancel pending updates","suites":["Dataset","#clear"],"updatePoint":{"line":317,"column":37,"index":10988},"line":317,"code":"    it('should cancel pending updates', function () {\n      var spy;\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      spy = spyOn(this.dataset, 'cancel');\n      this.dataset.clear();\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should trigger cleared","suites":["Dataset","#clear"],"updatePoint":{"line":325,"column":30,"index":11254},"line":325,"code":"    it('should trigger cleared', function () {\n      var spy;\n      this.dataset.onSync('cleared', spy = jasmine.createSpy());\n      this.dataset.clear();\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should return true when empty","suites":["Dataset","#isEmpty"],"updatePoint":{"line":333,"column":37,"index":11505},"line":333,"code":"    it('should return true when empty', function () {\n      expect(this.dataset.isEmpty()).toBe(true);\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should return false when not empty","suites":["Dataset","#isEmpty"],"updatePoint":{"line":336,"column":42,"index":11621},"line":336,"code":"    it('should return false when not empty', function () {\n      this.source.andCallFake(syncMockSuggestions);\n      this.dataset.update('woah');\n      expect(this.dataset.isEmpty()).toBe(false);\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should set dataset element to dummy element","suites":["Dataset","#destroy"],"updatePoint":{"line":343,"column":51,"index":11877},"line":343,"code":"    it('should set dataset element to dummy element', function () {\n      var $prevEl = this.dataset.$el;\n      this.dataset.destroy();\n      expect(this.dataset.$el).not.toBe($prevEl);\n    });","file":"typeahead/dataset_spec.js","skipped":false,"dir":"test"},{"name":"should hide menu if empty","suites":["DefaultMenu","when rendered is triggered on a dataset"],"updatePoint":{"line":17,"column":33,"index":564},"line":17,"code":"    it('should hide menu if empty', function () {\n      this.dataset.isEmpty.andReturn(true);\n      this.view._show();\n      this.dataset.trigger('rendered');\n      expect(this.$node).not.toBeVisible();\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"should not show menu if not open","suites":["DefaultMenu","when rendered is triggered on a dataset"],"updatePoint":{"line":23,"column":40,"index":782},"line":23,"code":"    it('should not show menu if not open', function () {\n      this.dataset.isEmpty.andReturn(false);\n      this.view._hide();\n      this.dataset.trigger('rendered');\n      expect(this.$node).not.toBeVisible();\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"should show menu if not empty and open","suites":["DefaultMenu","when rendered is triggered on a dataset"],"updatePoint":{"line":29,"column":46,"index":1007},"line":29,"code":"    it('should show menu if not empty and open', function () {\n      this.dataset.isEmpty.andReturn(false);\n      this.view._hide();\n      this.view.open();\n      this.dataset.trigger('rendered');\n      expect(this.$node).toBeVisible();\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"should hide menu if empty","suites":["DefaultMenu","when cleared is triggered on a dataset"],"updatePoint":{"line":38,"column":33,"index":1312},"line":38,"code":"    it('should hide menu if empty', function () {\n      this.dataset.isEmpty.andReturn(true);\n      this.view._show();\n      this.dataset.trigger('cleared');\n      expect(this.$node).not.toBeVisible();\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"should not show menu if not open","suites":["DefaultMenu","when cleared is triggered on a dataset"],"updatePoint":{"line":44,"column":40,"index":1529},"line":44,"code":"    it('should not show menu if not open', function () {\n      this.dataset.isEmpty.andReturn(false);\n      this.view._hide();\n      this.dataset.trigger('cleared');\n      expect(this.$node).not.toBeVisible();\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"should show menu if not empty and open","suites":["DefaultMenu","when cleared is triggered on a dataset"],"updatePoint":{"line":50,"column":46,"index":1753},"line":50,"code":"    it('should show menu if not empty and open', function () {\n      this.dataset.isEmpty.andReturn(false);\n      this.view._hide();\n      this.view.open();\n      this.dataset.trigger('cleared');\n      expect(this.$node).toBeVisible();\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"should show menu if not empty","suites":["DefaultMenu","#open"],"updatePoint":{"line":59,"column":37,"index":2028},"line":59,"code":"    it('should show menu if not empty', function () {\n      spyOn(this.view, '_allDatasetsEmpty').andReturn(false);\n      this.view.open();\n      expect(this.$node[0].getAttribute('style')).toMatch(/display: block/);\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"should not show menu if empty","suites":["DefaultMenu","#open"],"updatePoint":{"line":64,"column":37,"index":2253},"line":64,"code":"    it('should not show menu if empty', function () {\n      spyOn(this.view, '_allDatasetsEmpty').andReturn(true);\n      this.view.open();\n      expect(this.$node).not.toHaveAttr('style', 'display: block;');\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"should hide menu","suites":["DefaultMenu","#close"],"updatePoint":{"line":71,"column":24,"index":2497},"line":71,"code":"    it('should hide menu', function () {\n      this.view._show();\n      this.view.close();\n      expect(this.$node).not.toBeVisible();\n    });","file":"typeahead/default_results_spec.js","skipped":false,"dir":"test"},{"name":"#trigger should trigger event","suites":["EventBus"],"updatePoint":{"line":11,"column":35,"index":304},"line":11,"code":"  it('#trigger should trigger event', function () {\n    var spy = jasmine.createSpy();\n    this.$el.on('typeahead:fiz', spy);\n    this.eventBus.trigger('fiz');\n    expect(spy).toHaveBeenCalled();\n  });","file":"typeahead/event_bus_spec.js","skipped":false,"dir":"test"},{"name":"#before should return false if default was not prevented","suites":["EventBus"],"updatePoint":{"line":17,"column":62,"index":533},"line":17,"code":"  it('#before should return false if default was not prevented', function () {\n    var spy = jasmine.createSpy();\n    this.$el.on('typeahead:beforefiz', spy);\n    expect(this.eventBus.before('fiz')).toBe(false);\n    expect(spy).toHaveBeenCalled();\n  });","file":"typeahead/event_bus_spec.js","skipped":false,"dir":"test"},{"name":"#before should return true if default was prevented","suites":["EventBus"],"updatePoint":{"line":23,"column":57,"index":782},"line":23,"code":"  it('#before should return true if default was prevented', function () {\n    var spy = jasmine.createSpy().andCallFake(prevent);\n    this.$el.on('typeahead:beforefiz', spy);\n    expect(this.eventBus.before('fiz')).toBe(true);\n    expect(spy).toHaveBeenCalled();\n    function prevent($e) {\n      $e.preventDefault();\n    }\n  });","file":"typeahead/event_bus_spec.js","skipped":false,"dir":"test"},{"name":"methods should be chainable","suites":["EventEmitter"],"updatePoint":{"line":6,"column":33,"index":187},"line":6,"code":"  it('methods should be chainable', function () {\n    expect(this.target.onSync()).toEqual(this.target);\n    expect(this.target.onAsync()).toEqual(this.target);\n    expect(this.target.off()).toEqual(this.target);\n    expect(this.target.trigger()).toEqual(this.target);\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"#on should take the context a callback should be called in","suites":["EventEmitter"],"updatePoint":{"line":12,"column":64,"index":493},"line":12,"code":"  it('#on should take the context a callback should be called in', function () {\n    var context = {\n        val: 3\n      },\n      cbContext;\n    this.target.onSync('xevent', setCbContext, context).trigger('xevent');\n    waitsFor(assertCbContext, 'callback was called in the wrong context');\n    function setCbContext() {\n      cbContext = this;\n    }\n    function assertCbContext() {\n      return cbContext === context;\n    }\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"#onAsync callbacks should be invoked asynchronously","suites":["EventEmitter","xevent"],"updatePoint":{"line":26,"column":57,"index":919},"line":26,"code":"  it('#onAsync callbacks should be invoked asynchronously', function () {\n    this.target.onAsync('event', this.spy).trigger('event');\n    expect(this.spy.callCount).toBe(0);\n    waitsFor(assertCallCount(this.spy, 1), 'the callback was not invoked');\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"#onSync callbacks should be invoked synchronously","suites":["EventEmitter","xevent"],"updatePoint":{"line":31,"column":55,"index":1174},"line":31,"code":"  it('#onSync callbacks should be invoked synchronously', function () {\n    this.target.onSync('event', this.spy).trigger('event');\n    expect(this.spy.callCount).toBe(1);\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"#off should remove callbacks","suites":["EventEmitter","xevent"],"updatePoint":{"line":35,"column":34,"index":1331},"line":35,"code":"  it('#off should remove callbacks', function () {\n    this.target.onSync('event1 event2', this.spy).onAsync('event1 event2', this.spy).off('event1 event2').trigger('event1 event2');\n    waits(100);\n    runs(assertCallCount(this.spy, 0));\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"methods should accept multiple event types","suites":["EventEmitter","xevent"],"updatePoint":{"line":40,"column":48,"index":1590},"line":40,"code":"  it('methods should accept multiple event types', function () {\n    this.target.onSync('event1 event2', this.spy).onAsync('event1 event2', this.spy).trigger('event1 event2');\n    expect(this.spy.callCount).toBe(2);\n    waitsFor(assertCallCount(this.spy, 4), 'the callback was not invoked');\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"the event type should be passed to the callback","suites":["EventEmitter","xevent"],"updatePoint":{"line":45,"column":53,"index":1893},"line":45,"code":"  it('the event type should be passed to the callback', function () {\n    this.target.onSync('sync', this.spy).onAsync('async', this.spy).trigger('sync async');\n    waitsFor(assertArgs(this.spy, 0, ['sync']), 'bad args');\n    waitsFor(assertArgs(this.spy, 1, ['async']), 'bad args');\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"arbitrary args should be passed to the callback","suites":["EventEmitter","xevent"],"updatePoint":{"line":50,"column":53,"index":2183},"line":50,"code":"  it('arbitrary args should be passed to the callback', function () {\n    this.target.onSync('event', this.spy).onAsync('event', this.spy).trigger('event', 1, 2);\n    waitsFor(assertArgs(this.spy, 0, ['event', 1, 2]), 'bad args');\n    waitsFor(assertArgs(this.spy, 1, ['event', 1, 2]), 'bad args');\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"callback execution should be cancellable","suites":["EventEmitter","xevent"],"updatePoint":{"line":55,"column":46,"index":2481},"line":55,"code":"  it('callback execution should be cancellable', function () {\n    var cancelSpy = jasmine.createSpy().andCallFake(cancel);\n    this.target.onSync('one', cancelSpy).onSync('one', this.spy).onAsync('two', cancelSpy).onAsync('two', this.spy).onSync('three', cancelSpy).onAsync('three', this.spy).trigger('one two three');\n    waitsFor(assertCallCount(cancelSpy, 3));\n    waitsFor(assertCallCount(this.spy, 0));\n    function cancel() {\n      return false;\n    }\n  });","file":"typeahead/event_emitter_spec.js","skipped":false,"dir":"test"},{"name":"should allow tagName to be specified","suites":["highlight"],"updatePoint":{"line":2,"column":42,"index":79},"line":2,"code":"  it('should allow tagName to be specified', function () {\n    var before = 'abcde',\n      after = 'a<span>bcd</span>e',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: 'bcd',\n      tagName: 'span'\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should allow className to be specified","suites":["highlight"],"updatePoint":{"line":13,"column":44,"index":385},"line":13,"code":"  it('should allow className to be specified', function () {\n    var before = 'abcde',\n      after = 'a<strong class=\"one two\">bcd</strong>e',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: 'bcd',\n      className: 'one two'\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should be case insensitive by default","suites":["highlight"],"updatePoint":{"line":24,"column":43,"index":715},"line":24,"code":"  it('should be case insensitive by default', function () {\n    var before = 'ABCDE',\n      after = 'A<strong>BCD</strong>E',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: 'bcd'\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should support case sensitivity","suites":["highlight"],"updatePoint":{"line":34,"column":37,"index":995},"line":34,"code":"  it('should support case sensitivity', function () {\n    var before = 'ABCDE',\n      after = 'ABCDE',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: 'bcd',\n      caseSensitive: true\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should support words only matching","suites":["highlight"],"updatePoint":{"line":45,"column":40,"index":1288},"line":45,"code":"  it('should support words only matching', function () {\n    var before = 'tone one phone',\n      after = 'tone <strong>one</strong> phone',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: 'one',\n      wordsOnly: true\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should support matching multiple patterns","suites":["highlight"],"updatePoint":{"line":56,"column":47,"index":1619},"line":56,"code":"  it('should support matching multiple patterns', function () {\n    var before = 'tone one phone',\n      after = '<strong>tone</strong> one <strong>phone</strong>',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: ['tone', 'phone']\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should support regex chars in the pattern","suites":["highlight"],"updatePoint":{"line":66,"column":47,"index":1956},"line":66,"code":"  it('should support regex chars in the pattern', function () {\n    var before = '*.js when?',\n      after = '<strong>*.</strong>js when<strong>?</strong>',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: ['*.', '?']\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should work on complex html structures","suites":["highlight"],"updatePoint":{"line":76,"column":44,"index":2276},"line":76,"code":"  it('should work on complex html structures', function () {\n    var before = ['<div>abcde', '<span>abcde</span>', '<div><p>abcde</p></div>', '</div>'].join(''),\n      after = ['<div><strong>abc</strong>de', '<span><strong>abc</strong>de</span>', '<div><p><strong>abc</strong>de</p></div>', '</div>'].join(''),\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: 'abc'\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should ignore html tags and attributes","suites":["highlight"],"updatePoint":{"line":86,"column":44,"index":2747},"line":86,"code":"  it('should ignore html tags and attributes', function () {\n    var before = '<span class=\"class\"></span>',\n      after = '<span class=\"class\"></span>',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: ['span', 'class']\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should not match across tags","suites":["highlight"],"updatePoint":{"line":96,"column":34,"index":3063},"line":96,"code":"  it('should not match across tags', function () {\n    var before = 'a<span>b</span>c',\n      after = 'a<span>b</span>c',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: 'abc'\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should ignore html comments","suites":["highlight"],"updatePoint":{"line":106,"column":33,"index":3344},"line":106,"code":"  it('should ignore html comments', function () {\n    var before = '<!-- abc -->',\n      after = '<!-- abc -->',\n      testNode = buildTestNode(before);\n    highlight({\n      node: testNode,\n      pattern: 'abc'\n    });\n    expect(testNode.innerHTML).toEqual(after);\n  });","file":"typeahead/highlight_spec.js","skipped":false,"dir":"test"},{"name":"should throw an error if no input is provided","suites":["Input"],"updatePoint":{"line":26,"column":51,"index":590},"line":26,"code":"  it('should throw an error if no input is provided', function () {\n    expect(noInput).toThrow();\n    function noInput() {\n      new Input({}, www);\n    }\n  });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should reset the input value","suites":["Input","when the blur DOM event is triggered"],"updatePoint":{"line":33,"column":36,"index":802},"line":33,"code":"    it('should reset the input value', function () {\n      this.view.setQuery('wine');\n      this.view.setInputValue('cheese');\n      this.$input.blur();\n      expect(this.$input.val()).toBe('wine');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger blurred","suites":["Input","when the blur DOM event is triggered"],"updatePoint":{"line":39,"column":30,"index":1004},"line":39,"code":"    it('should trigger blurred', function () {\n      var spy;\n      this.view.onSync('blurred', spy = jasmine.createSpy());\n      this.$input.blur();\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should update queryWhenFocused","suites":["Input","when the focus DOM event is triggered"],"updatePoint":{"line":47,"column":38,"index":1280},"line":47,"code":"    it('should update queryWhenFocused', function () {\n      this.view.setQuery('hi');\n      this.$input.focus();\n      expect(this.view.hasQueryChangedSinceLastFocus()).toBe(false);\n      this.view.setQuery('bye');\n      expect(this.view.hasQueryChangedSinceLastFocus()).toBe(true);\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger focused","suites":["Input","when the focus DOM event is triggered"],"updatePoint":{"line":54,"column":30,"index":1564},"line":54,"code":"    it('should trigger focused', function () {\n      var spy;\n      this.view.onSync('focused', spy = jasmine.createSpy());\n      this.$input.focus();\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger tabKeyed if no modifiers were pressed","suites":["Input","when the keydown DOM event is triggered by tab"],"updatePoint":{"line":62,"column":60,"index":1872},"line":62,"code":"    it('should trigger tabKeyed if no modifiers were pressed', function () {\n      var spy;\n      this.view.onSync('tabKeyed', spy = jasmine.createSpy());\n      simulateKeyEvent(this.$input, 'keydown', KEYS.tab);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should not trigger tabKeyed if modifiers were pressed","suites":["Input","when the keydown DOM event is triggered by tab"],"updatePoint":{"line":68,"column":61,"index":2132},"line":68,"code":"    it('should not trigger tabKeyed if modifiers were pressed', function () {\n      var spy;\n      this.view.onSync('tabKeyed', spy = jasmine.createSpy());\n      simulateKeyEvent(this.$input, 'keydown', KEYS.tab, true);\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger escKeyed","suites":["Input","when the keydown DOM event is triggered by esc"],"updatePoint":{"line":76,"column":31,"index":2453},"line":76,"code":"    it('should trigger escKeyed', function () {\n      var spy;\n      this.view.onSync('escKeyed', spy = jasmine.createSpy());\n      simulateKeyEvent(this.$input, 'keydown', KEYS.esc);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger leftKeyed","suites":["Input","when the keydown DOM event is triggered by left"],"updatePoint":{"line":84,"column":32,"index":2766},"line":84,"code":"    it('should trigger leftKeyed', function () {\n      var spy;\n      this.view.onSync('leftKeyed', spy = jasmine.createSpy());\n      simulateKeyEvent(this.$input, 'keydown', KEYS.left);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger rightKeyed","suites":["Input","when the keydown DOM event is triggered by right"],"updatePoint":{"line":92,"column":33,"index":3083},"line":92,"code":"    it('should trigger rightKeyed', function () {\n      var spy;\n      this.view.onSync('rightKeyed', spy = jasmine.createSpy());\n      simulateKeyEvent(this.$input, 'keydown', KEYS.right);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger enterKeyed","suites":["Input","when the keydown DOM event is triggered by enter"],"updatePoint":{"line":100,"column":33,"index":3402},"line":100,"code":"    it('should trigger enterKeyed', function () {\n      var spy;\n      this.view.onSync('enterKeyed', spy = jasmine.createSpy());\n      simulateKeyEvent(this.$input, 'keydown', KEYS.enter);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger upKeyed","suites":["Input","when the keydown DOM event is triggered by up"],"updatePoint":{"line":108,"column":30,"index":3715},"line":108,"code":"    it('should trigger upKeyed', function () {\n      var spy;\n      this.view.onSync('upKeyed', spy = jasmine.createSpy());\n      simulateKeyEvent(this.$input, 'keydown', KEYS.up);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should prevent default if no modifers were pressed","suites":["Input","when the keydown DOM event is triggered by up"],"updatePoint":{"line":114,"column":58,"index":3970},"line":114,"code":"    it('should prevent default if no modifers were pressed', function () {\n      var $e = simulateKeyEvent(this.$input, 'keydown', KEYS.up);\n      expect($e.preventDefault).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should not prevent default if modifers were pressed","suites":["Input","when the keydown DOM event is triggered by up"],"updatePoint":{"line":118,"column":59,"index":4172},"line":118,"code":"    it('should not prevent default if modifers were pressed', function () {\n      var $e = simulateKeyEvent(this.$input, 'keydown', KEYS.up, true);\n      expect($e.preventDefault).not.toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger downKeyed","suites":["Input","when the keydown DOM event is triggered by down"],"updatePoint":{"line":124,"column":32,"index":4439},"line":124,"code":"    it('should trigger downKeyed', function () {\n      var spy;\n      this.view.onSync('downKeyed', spy = jasmine.createSpy());\n      simulateKeyEvent(this.$input, 'keydown', KEYS.down);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should prevent default if no modifers were pressed","suites":["Input","when the keydown DOM event is triggered by down"],"updatePoint":{"line":130,"column":58,"index":4698},"line":130,"code":"    it('should prevent default if no modifers were pressed', function () {\n      var $e = simulateKeyEvent(this.$input, 'keydown', KEYS.down);\n      expect($e.preventDefault).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should not prevent default if modifers were pressed","suites":["Input","when the keydown DOM event is triggered by down"],"updatePoint":{"line":134,"column":59,"index":4902},"line":134,"code":"    it('should not prevent default if modifers were pressed', function () {\n      var $e = simulateKeyEvent(this.$input, 'keydown', KEYS.down, true);\n      expect($e.preventDefault).not.toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should update query","suites":["Input","when the input DOM event is triggered"],"updatePoint":{"line":143,"column":27,"index":5249},"line":143,"code":"    it('should update query', function () {\n      this.view.setQuery('wine');\n      this.view.setInputValue('cheese');\n      simulateInputEvent(this.$input);\n      waitsFor(function () {\n        return this.view.getQuery() === 'cheese';\n      });\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger queryChanged if the query changed","suites":["Input","when the input DOM event is triggered"],"updatePoint":{"line":151,"column":56,"index":5533},"line":151,"code":"    it('should trigger queryChanged if the query changed', function () {\n      var spy;\n      this.view.setQuery('wine');\n      this.view.setInputValue('cheese');\n      this.view.onSync('queryChanged', spy = jasmine.createSpy());\n      simulateInputEvent(this.$input);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger whitespaceChanged if whitespace changed","suites":["Input","when the input DOM event is triggered"],"updatePoint":{"line":159,"column":62,"index":5854},"line":159,"code":"    it('should trigger whitespaceChanged if whitespace changed', function () {\n      var spy;\n      this.view.setQuery('wine  bar');\n      this.view.setInputValue('wine bar');\n      this.view.onSync('whitespaceChanged', spy = jasmine.createSpy());\n      simulateInputEvent(this.$input);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should clear hint if invalid","suites":["Input","when the input DOM event is triggered"],"updatePoint":{"line":167,"column":36,"index":6161},"line":167,"code":"    it('should clear hint if invalid', function () {\n      spyOn(this.view, 'clearHintIfInvalid');\n      simulateInputEvent(this.$input);\n      expect(this.view.clearHintIfInvalid).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should check lang direction","suites":["Input","when the input DOM event is triggered"],"updatePoint":{"line":172,"column":35,"index":6369},"line":172,"code":"    it('should check lang direction', function () {\n      var spy;\n      this.$input.css('direction', 'rtl');\n      this.view.onSync('langDirChanged', spy = jasmine.createSpy());\n      simulateInputEvent(this.$input);\n      expect(this.view.dir).toBe('rtl');\n      expect(this.$hint).toHaveAttr('dir', 'rtl');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should strip leading whitespace","suites":["Input",".normalizeQuery"],"updatePoint":{"line":183,"column":39,"index":6779},"line":183,"code":"    it('should strip leading whitespace', function () {\n      expect(Input.normalizeQuery('  foo')).toBe('foo');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should condense whitespace","suites":["Input",".normalizeQuery"],"updatePoint":{"line":186,"column":34,"index":6895},"line":186,"code":"    it('should condense whitespace', function () {\n      expect(Input.normalizeQuery('foo   bar')).toBe('foo bar');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should play nice with non-string values","suites":["Input",".normalizeQuery"],"updatePoint":{"line":189,"column":47,"index":7032},"line":189,"code":"    it('should play nice with non-string values', function () {\n      expect(Input.normalizeQuery(2)).toBe('2');\n      expect(Input.normalizeQuery([])).toBe('');\n      expect(Input.normalizeQuery(null)).toBe('');\n      expect(Input.normalizeQuery(undefined)).toBe('');\n      expect(Input.normalizeQuery(false)).toBe('false');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should focus the input","suites":["Input","#focus"],"updatePoint":{"line":198,"column":30,"index":7390},"line":198,"code":"    it('should focus the input', function () {\n      this.$input.blur();\n      this.view.focus();\n      expect(this.$input).toBeFocused();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should blur the input","suites":["Input","#blur"],"updatePoint":{"line":205,"column":29,"index":7576},"line":205,"code":"    it('should blur the input', function () {\n      this.$input.focus();\n      this.view.blur();\n      expect(this.$input).not.toBeFocused();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should act as getter to the query property","suites":["Input","#getQuery"],"updatePoint":{"line":212,"column":50,"index":7791},"line":212,"code":"    it('should act as getter to the query property', function () {\n      this.view.setQuery('mouse');\n      expect(this.view.getQuery()).toBe('mouse');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should act as setter to the query property","suites":["Input","#setQuery"],"updatePoint":{"line":218,"column":50,"index":7995},"line":218,"code":"    it('should act as setter to the query property', function () {\n      this.view.setQuery('mouse');\n      expect(this.view.getQuery()).toBe('mouse');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should update input value","suites":["Input","#setQuery"],"updatePoint":{"line":222,"column":33,"index":8138},"line":222,"code":"    it('should update input value', function () {\n      this.view.setQuery('mouse');\n      expect(this.view.getInputValue()).toBe('mouse');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger queryChanged if the query changed","suites":["Input","#setQuery"],"updatePoint":{"line":226,"column":56,"index":8309},"line":226,"code":"    it('should trigger queryChanged if the query changed', function () {\n      var spy;\n      this.view.setQuery('wine');\n      this.view.onSync('queryChanged', spy = jasmine.createSpy());\n      this.view.setQuery('cheese');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should trigger whitespaceChanged if whitespace changed","suites":["Input","#setQuery"],"updatePoint":{"line":233,"column":62,"index":8586},"line":233,"code":"    it('should trigger whitespaceChanged if whitespace changed', function () {\n      var spy;\n      this.view.setQuery('wine   bar');\n      this.view.onSync('whitespaceChanged', spy = jasmine.createSpy());\n      this.view.setQuery('wine bar');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should clear hint if invalid","suites":["Input","#setQuery"],"updatePoint":{"line":240,"column":36,"index":8850},"line":240,"code":"    it('should clear hint if invalid', function () {\n      spyOn(this.view, 'clearHintIfInvalid');\n      simulateInputEvent(this.$input);\n      expect(this.view.clearHintIfInvalid).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should return true if the query has changed since focus","suites":["Input","#hasQueryChangedSinceLastFocus"],"updatePoint":{"line":247,"column":63,"index":9151},"line":247,"code":"    it('should return true if the query has changed since focus', function () {\n      this.view.setQuery('hi');\n      this.$input.focus();\n      this.view.setQuery('bye');\n      expect(this.view.hasQueryChangedSinceLastFocus()).toBe(true);\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should return false if the query has not changed since focus","suites":["Input","#hasQueryChangedSinceLastFocus"],"updatePoint":{"line":253,"column":68,"index":9404},"line":253,"code":"    it('should return false if the query has not changed since focus', function () {\n      this.view.setQuery('hi');\n      this.$input.focus();\n      expect(this.view.hasQueryChangedSinceLastFocus()).toBe(false);\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should act as getter to the input value","suites":["Input","#getInputValue"],"updatePoint":{"line":260,"column":47,"index":9653},"line":260,"code":"    it('should act as getter to the input value', function () {\n      this.$input.val('cheese');\n      expect(this.view.getInputValue()).toBe('cheese');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should act as setter to the input value","suites":["Input","#setInputValue"],"updatePoint":{"line":266,"column":47,"index":9863},"line":266,"code":"    it('should act as setter to the input value', function () {\n      this.view.setInputValue('cheese');\n      expect(this.view.getInputValue()).toBe('cheese');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should clear hint if invalid","suites":["Input","#setInputValue"],"updatePoint":{"line":270,"column":36,"index":10021},"line":270,"code":"    it('should clear hint if invalid', function () {\n      spyOn(this.view, 'clearHintIfInvalid');\n      this.view.setInputValue('cheese head');\n      expect(this.view.clearHintIfInvalid).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should check lang direction","suites":["Input","#setInputValue"],"updatePoint":{"line":275,"column":35,"index":10236},"line":275,"code":"    it('should check lang direction', function () {\n      var spy;\n      this.$input.css('direction', 'rtl');\n      this.view.onSync('langDirChanged', spy = jasmine.createSpy());\n      simulateInputEvent(this.$input);\n      expect(this.view.dir).toBe('rtl');\n      expect(this.$hint).toHaveAttr('dir', 'rtl');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should act as getter/setter to value of hint","suites":["Input","#getHint/#setHint"],"updatePoint":{"line":286,"column":52,"index":10661},"line":286,"code":"    it('should act as getter/setter to value of hint', function () {\n      this.view.setHint('mountain');\n      expect(this.view.getHint()).toBe('mountain');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should reset input value to last query","suites":["Input","#resetInputValue"],"updatePoint":{"line":292,"column":46,"index":10872},"line":292,"code":"    it('should reset input value to last query', function () {\n      this.view.setQuery('cheese');\n      this.view.setInputValue('wine');\n      this.view.resetInputValue();\n      expect(this.view.getInputValue()).toBe('cheese');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should set the hint value to the empty string","suites":["Input","#clearHint"],"updatePoint":{"line":300,"column":53,"index":11161},"line":300,"code":"    it('should set the hint value to the empty string', function () {\n      this.view.setHint('cheese');\n      this.view.clearHint();\n      expect(this.view.getHint()).toBe('');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should clear hint if input value is empty string","suites":["Input","#clearHintIfInvalid"],"updatePoint":{"line":307,"column":56,"index":11404},"line":307,"code":"    it('should clear hint if input value is empty string', function () {\n      this.view.setInputValue('');\n      this.view.setHint('cheese');\n      this.view.clearHintIfInvalid();\n      expect(this.view.getHint()).toBe('');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should clear hint if input value is not prefix of input","suites":["Input","#clearHintIfInvalid"],"updatePoint":{"line":313,"column":63,"index":11644},"line":313,"code":"    it('should clear hint if input value is not prefix of input', function () {\n      this.view.setInputValue('milk');\n      this.view.setHint('cheese');\n      this.view.clearHintIfInvalid();\n      expect(this.view.getHint()).toBe('');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should clear hint if overflow exists","suites":["Input","#clearHintIfInvalid"],"updatePoint":{"line":319,"column":44,"index":11869},"line":319,"code":"    it('should clear hint if overflow exists', function () {\n      spyOn(this.view, 'hasOverflow').andReturn(true);\n      this.view.setInputValue('che');\n      this.view.setHint('cheese');\n      this.view.clearHintIfInvalid();\n      expect(this.view.getHint()).toBe('');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should not clear hint if input value is prefix of input","suites":["Input","#clearHintIfInvalid"],"updatePoint":{"line":326,"column":63,"index":12167},"line":326,"code":"    it('should not clear hint if input value is prefix of input', function () {\n      this.view.setInputValue('che');\n      this.view.setHint('cheese');\n      this.view.clearHintIfInvalid();\n      expect(this.view.getHint()).toBe('cheese');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should return true if the input has overflow text","suites":["Input","#hasOverflow"],"updatePoint":{"line":334,"column":57,"index":12457},"line":334,"code":"    it('should return true if the input has overflow text', function () {\n      var longStr = new Array(1000).join('a');\n      this.view.setInputValue(longStr);\n      expect(this.view.hasOverflow()).toBe(true);\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should return false if the input has no overflow text","suites":["Input","#hasOverflow"],"updatePoint":{"line":339,"column":61,"index":12680},"line":339,"code":"    it('should return false if the input has no overflow text', function () {\n      var shortStr = 'aah';\n      this.view.setInputValue(shortStr);\n      expect(this.view.hasOverflow()).toBe(false);\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should return true if the text cursor is at the end","suites":["Input","#isCursorAtEnd"],"updatePoint":{"line":346,"column":59,"index":12933},"line":346,"code":"    it('should return true if the text cursor is at the end', function () {\n      this.view.setInputValue('boo');\n      setCursorPosition(this.$input, 3);\n      expect(this.view.isCursorAtEnd()).toBe(true);\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should return false if the text cursor is not at the end","suites":["Input","#isCursorAtEnd"],"updatePoint":{"line":351,"column":64,"index":13153},"line":351,"code":"    it('should return false if the text cursor is not at the end', function () {\n      this.view.setInputValue('boo');\n      setCursorPosition(this.$input, 1);\n      expect(this.view.isCursorAtEnd()).toBe(false);\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should remove event handlers","suites":["Input","#destroy"],"updatePoint":{"line":358,"column":36,"index":13389},"line":358,"code":"    it('should remove event handlers', function () {\n      var $input, $hint;\n      $hint = this.view.$hint;\n      $input = this.view.$input;\n      spyOn($hint, 'off');\n      spyOn($input, 'off');\n      this.view.destroy();\n      expect($hint.off).toHaveBeenCalledWith('.tt');\n      expect($input.off).toHaveBeenCalledWith('.tt');\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"should set references to DOM elements to dummy element","suites":["Input","#destroy"],"updatePoint":{"line":368,"column":62,"index":13754},"line":368,"code":"    it('should set references to DOM elements to dummy element', function () {\n      var $hint, $input, $overflowHelper;\n      $hint = this.view.$hint;\n      $input = this.view.$input;\n      $overflowHelper = this.view.$overflowHelper;\n      this.view.destroy();\n      expect(this.view.$hint).not.toBe($hint);\n      expect(this.view.$input).not.toBe($input);\n      expect(this.view.$overflowHelper).not.toBe($overflowHelper);\n    });","file":"typeahead/input_spec.js","skipped":false,"dir":"test"},{"name":"#enable should enable the typaahead","suites":["$plugin"],"updatePoint":{"line":20,"column":41,"index":505},"line":20,"code":"  it('#enable should enable the typaahead', function () {\n    this.$input.typeahead('disable');\n    expect(this.$input.typeahead('isEnabled')).toBe(false);\n    this.$input.typeahead('enable');\n    expect(this.$input.typeahead('isEnabled')).toBe(true);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#disable should disable the typaahead","suites":["$plugin"],"updatePoint":{"line":26,"column":43,"index":765},"line":26,"code":"  it('#disable should disable the typaahead', function () {\n    this.$input.typeahead('enable');\n    expect(this.$input.typeahead('isEnabled')).toBe(true);\n    this.$input.typeahead('disable');\n    expect(this.$input.typeahead('isEnabled')).toBe(false);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#activate should activate the typaahead","suites":["$plugin"],"updatePoint":{"line":32,"column":45,"index":1027},"line":32,"code":"  it('#activate should activate the typaahead', function () {\n    this.$input.typeahead('deactivate');\n    expect(this.$input.typeahead('isActive')).toBe(false);\n    this.$input.typeahead('activate');\n    expect(this.$input.typeahead('isActive')).toBe(true);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#activate should fail to activate the typaahead if disabled","suites":["$plugin"],"updatePoint":{"line":38,"column":65,"index":1312},"line":38,"code":"  it('#activate should fail to activate the typaahead if disabled', function () {\n    this.$input.typeahead('deactivate');\n    expect(this.$input.typeahead('isActive')).toBe(false);\n    this.$input.typeahead('disable');\n    this.$input.typeahead('activate');\n    expect(this.$input.typeahead('isActive')).toBe(false);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#deactivate should deactivate the typaahead","suites":["$plugin"],"updatePoint":{"line":45,"column":49,"index":1620},"line":45,"code":"  it('#deactivate should deactivate the typaahead', function () {\n    this.$input.typeahead('activate');\n    expect(this.$input.typeahead('isActive')).toBe(true);\n    this.$input.typeahead('deactivate');\n    expect(this.$input.typeahead('isActive')).toBe(false);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#open should open the menu","suites":["$plugin"],"updatePoint":{"line":51,"column":32,"index":1872},"line":51,"code":"  it('#open should open the menu', function () {\n    this.$input.typeahead('close');\n    expect(this.$input.typeahead('isOpen')).toBe(false);\n    this.$input.typeahead('open');\n    expect(this.$input.typeahead('isOpen')).toBe(true);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#close should close the menu","suites":["$plugin"],"updatePoint":{"line":57,"column":34,"index":2113},"line":57,"code":"  it('#close should close the menu', function () {\n    this.$input.typeahead('open');\n    expect(this.$input.typeahead('isOpen')).toBe(true);\n    this.$input.typeahead('close');\n    expect(this.$input.typeahead('isOpen')).toBe(false);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#select should select selectable","suites":["$plugin"],"updatePoint":{"line":63,"column":38,"index":2358},"line":63,"code":"  it('#select should select selectable', function () {\n    var $el;\n\n    // activate and set val to render some selectables\n    this.$input.typeahead('activate');\n    this.$input.typeahead('val', 'o');\n    $el = $('.tt-selectable').first();\n    expect(this.$input.typeahead('select', $el)).toBe(true);\n    expect(this.$input.typeahead('val')).toBe('1');\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#select should return false if not valid selectable","suites":["$plugin"],"updatePoint":{"line":73,"column":57,"index":2737},"line":73,"code":"  it('#select should return false if not valid selectable', function () {\n    var body;\n\n    // activate and set val to render some selectables\n    this.$input.typeahead('activate');\n    this.$input.typeahead('val', 'o');\n    body = document.body;\n    expect(this.$input.typeahead('select', body)).toBe(false);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#autocomplete should autocomplete to selectable","suites":["$plugin"],"updatePoint":{"line":82,"column":53,"index":3050},"line":82,"code":"  it('#autocomplete should autocomplete to selectable', function () {\n    var $el;\n\n    // activate and set val to render some selectables\n    this.$input.typeahead('activate');\n    this.$input.typeahead('val', 'o');\n    $el = $('.tt-selectable').first();\n    expect(this.$input.typeahead('autocomplete', $el)).toBe(true);\n    expect(this.$input.typeahead('val')).toBe('1');\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#autocomplete should return false if not valid selectable","suites":["$plugin"],"updatePoint":{"line":92,"column":63,"index":3441},"line":92,"code":"  it('#autocomplete should return false if not valid selectable', function () {\n    var body;\n\n    // activate and set val to render some selectables\n    this.$input.typeahead('activate');\n    this.$input.typeahead('val', 'o');\n    body = document.body;\n    expect(this.$input.typeahead('autocomplete', body)).toBe(false);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#moveCursor should move cursor","suites":["$plugin"],"updatePoint":{"line":101,"column":36,"index":3743},"line":101,"code":"  it('#moveCursor should move cursor', function () {\n    var $el;\n\n    // activate and set val to render some selectables\n    this.$input.typeahead('activate');\n    this.$input.typeahead('val', 'o');\n    $el = $('.tt-selectable').first();\n    expect($el).not.toHaveClass('tt-cursor');\n    expect(this.$input.typeahead('moveCursor', 1)).toBe(true);\n    expect($el).toHaveClass('tt-cursor');\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#select should return false if not valid selectable","suites":["$plugin"],"updatePoint":{"line":112,"column":57,"index":4160},"line":112,"code":"  it('#select should return false if not valid selectable', function () {\n    var body;\n\n    // activate and set val to render some selectables\n    this.$input.typeahead('activate');\n    this.$input.typeahead('val', 'o');\n    body = document.body;\n    expect(this.$input.typeahead('select', body)).toBe(false);\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#val() should typeahead value of element","suites":["$plugin"],"updatePoint":{"line":121,"column":46,"index":4466},"line":121,"code":"  it('#val() should typeahead value of element', function () {\n    var $els;\n    this.$input.typeahead('val', 'foo');\n    $els = this.$input.add('<div>');\n    expect($els.typeahead('val')).toBe('foo');\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#val(q) should set query","suites":["$plugin"],"updatePoint":{"line":127,"column":30,"index":4658},"line":127,"code":"  it('#val(q) should set query', function () {\n    this.$input.typeahead('val', 'foo');\n    expect(this.$input.typeahead('val')).toBe('foo');\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#destroy should revert modified attributes","suites":["$plugin"],"updatePoint":{"line":131,"column":48,"index":4824},"line":131,"code":"  it('#destroy should revert modified attributes', function () {\n    expect(this.$input).toHaveAttr('autocomplete', 'off');\n    expect(this.$input).toHaveAttr('dir');\n    expect(this.$input).toHaveAttr('spellcheck');\n    expect(this.$input).toHaveAttr('style');\n    this.$input.typeahead('destroy');\n    expect(this.$input).toHaveAttr('autocomplete', 'on');\n    expect(this.$input).not.toHaveAttr('dir');\n    expect(this.$input).not.toHaveAttr('spellcheck');\n    expect(this.$input).not.toHaveAttr('style');\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#destroy should remove data","suites":["$plugin"],"updatePoint":{"line":142,"column":33,"index":5323},"line":142,"code":"  it('#destroy should remove data', function () {\n    expect(this.$input.data('tt-www')).toBeTruthy();\n    expect(this.$input.data('tt-attrs')).toBeTruthy();\n    expect(this.$input.data('tt-typeahead')).toBeTruthy();\n    this.$input.typeahead('destroy');\n    expect(this.$input.data('tt-www')).toBeFalsy();\n    expect(this.$input.data('tt-attrs')).toBeFalsy();\n    expect(this.$input.data('tt-typeahead')).toBeFalsy();\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#destroy should remove add classes","suites":["$plugin"],"updatePoint":{"line":151,"column":40,"index":5755},"line":151,"code":"  it('#destroy should remove add classes', function () {\n    expect(this.$input).toHaveClass('tt-input');\n    this.$input.typeahead('destroy');\n    expect(this.$input).not.toHaveClass('tt-input');\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"#destroy should revert DOM changes","suites":["$plugin"],"updatePoint":{"line":156,"column":40,"index":5958},"line":156,"code":"  it('#destroy should revert DOM changes', function () {\n    expect($('.twitter-typeahead')).toExist();\n    this.$input.typeahead('destroy');\n    expect($('.twitter-typeahead')).not.toExist();\n  });","file":"typeahead/plugin_spec.js","skipped":false,"dir":"test"},{"name":"should throw an error if node is missing","suites":["Menu"],"updatePoint":{"line":16,"column":46,"index":495},"line":16,"code":"  it('should throw an error if node is missing', function () {\n    expect(noNode).toThrow();\n    function noNode() {\n      new Menu({\n        datasets: [{}]\n      }, www);\n    }\n  });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should trigger selectableClicked","suites":["Menu","when click event is triggered on a selectable"],"updatePoint":{"line":25,"column":40,"index":747},"line":25,"code":"    it('should trigger selectableClicked', function () {\n      var spy;\n      this.view.onSync('selectableClicked', spy = jasmine.createSpy());\n      this.$node.find(www.selectors.selectable).first().click();\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should add empty class to node if empty","suites":["Menu","when rendered is triggered on a dataset"],"updatePoint":{"line":33,"column":47,"index":1083},"line":33,"code":"    it('should add empty class to node if empty', function () {\n      this.dataset.isEmpty.andReturn(true);\n      this.$node.removeClass(www.classes.empty);\n      this.dataset.trigger('rendered');\n      expect(this.$node).toHaveClass(www.classes.empty);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should remove empty class from node if not empty","suites":["Menu","when rendered is triggered on a dataset"],"updatePoint":{"line":39,"column":56,"index":1354},"line":39,"code":"    it('should remove empty class from node if not empty', function () {\n      this.dataset.isEmpty.andReturn(false);\n      this.$node.addClass(www.classes.empty);\n      this.dataset.trigger('rendered');\n      expect(this.$node).not.toHaveClass(www.classes.empty);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should trigger datasetRendered","suites":["Menu","when rendered is triggered on a dataset"],"updatePoint":{"line":45,"column":38,"index":1609},"line":45,"code":"    it('should trigger datasetRendered', function () {\n      var spy;\n      this.view.onSync('datasetRendered', spy = jasmine.createSpy());\n      this.dataset.trigger('rendered');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should add empty class to node if empty","suites":["Menu","when cleared is triggered on a dataset"],"updatePoint":{"line":53,"column":47,"index":1917},"line":53,"code":"    it('should add empty class to node if empty', function () {\n      this.dataset.isEmpty.andReturn(true);\n      this.$node.removeClass(www.classes.empty);\n      this.dataset.trigger('cleared');\n      expect(this.$node).toHaveClass(www.classes.empty);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should remove empty class from node if not empty","suites":["Menu","when cleared is triggered on a dataset"],"updatePoint":{"line":59,"column":56,"index":2187},"line":59,"code":"    it('should remove empty class from node if not empty', function () {\n      this.dataset.isEmpty.andReturn(false);\n      this.$node.addClass(www.classes.empty);\n      this.dataset.trigger('cleared');\n      expect(this.$node).not.toHaveClass(www.classes.empty);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should trigger datasetCleared","suites":["Menu","when cleared is triggered on a dataset"],"updatePoint":{"line":65,"column":37,"index":2440},"line":65,"code":"    it('should trigger datasetCleared', function () {\n      var spy;\n      this.view.onSync('datasetCleared', spy = jasmine.createSpy());\n      this.dataset.trigger('cleared');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should propagate event","suites":["Menu","when asyncRequested is triggered on a dataset"],"updatePoint":{"line":73,"column":30,"index":2736},"line":73,"code":"    it('should propagate event', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.onSync('asyncRequested', spy);\n      this.dataset.trigger('asyncRequested');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should propagate event","suites":["Menu","when asyncCanceled is triggered on a dataset"],"updatePoint":{"line":81,"column":30,"index":3041},"line":81,"code":"    it('should propagate event', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.onSync('asyncCanceled', spy);\n      this.dataset.trigger('asyncCanceled');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should propagate event","suites":["Menu","when asyncReceieved is triggered on a dataset"],"updatePoint":{"line":89,"column":30,"index":3345},"line":89,"code":"    it('should propagate event', function () {\n      var spy = jasmine.createSpy();\n      this.dataset.onSync('asyncReceived', spy);\n      this.dataset.trigger('asyncReceived');\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should add open class to node","suites":["Menu","#open"],"updatePoint":{"line":97,"column":37,"index":3616},"line":97,"code":"    it('should add open class to node', function () {\n      this.$node.removeClass(www.classes.open);\n      this.view.open();\n      expect(this.$node).toHaveClass(www.classes.open);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should remove open class to node","suites":["Menu","#close"],"updatePoint":{"line":104,"column":40,"index":3850},"line":104,"code":"    it('should remove open class to node', function () {\n      this.$node.addClass(www.classes.open);\n      this.view.close();\n      expect(this.$node).not.toHaveClass(www.classes.open);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should remove cursor","suites":["Menu","#close"],"updatePoint":{"line":109,"column":28,"index":4033},"line":109,"code":"    it('should remove cursor', function () {\n      var $selectable;\n      $selectable = this.view._getSelectables().first();\n      this.view.setCursor($selectable);\n      expect($selectable).toHaveClass(www.classes.cursor);\n      this.view.close();\n      expect($selectable).not.toHaveClass(www.classes.cursor);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should update css for given language direction","suites":["Menu","#setLanguageDirection"],"updatePoint":{"line":119,"column":54,"index":4435},"line":119,"code":"    it('should update css for given language direction', function () {\n      this.view.setLanguageDirection('rtl');\n      expect(this.$node).toHaveAttr('dir', 'rtl');\n      this.view.setLanguageDirection('ltr');\n      expect(this.$node).toHaveAttr('dir', 'ltr');\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should return selectable delta spots away from cursor","suites":["Menu","#selectableRelativeToCursor"],"updatePoint":{"line":127,"column":61,"index":4775},"line":127,"code":"    it('should return selectable delta spots away from cursor', function () {\n      var $first, $second;\n      $first = this.view._getSelectables().eq(0);\n      $second = this.view._getSelectables().eq(1);\n      this.view.setCursor($first);\n      expect(this.view.selectableRelativeToCursor(+1)).toBe($second);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should support negative deltas","suites":["Menu","#selectableRelativeToCursor"],"updatePoint":{"line":134,"column":38,"index":5071},"line":134,"code":"    it('should support negative deltas', function () {\n      var $first, $second;\n      $first = this.view._getSelectables().eq(0);\n      $second = this.view._getSelectables().eq(1);\n      this.view.setCursor($second);\n      expect(this.view.selectableRelativeToCursor(-1)).toBe($first);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should wrap","suites":["Menu","#selectableRelativeToCursor"],"updatePoint":{"line":141,"column":19,"index":5348},"line":141,"code":"    it('should wrap', function () {\n      var $expected, $actual;\n      $expected = this.view._getSelectables().eq(-1);\n      $actual = this.view.selectableRelativeToCursor(-1);\n      expect($actual).toBe($expected);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should return null if delta lands on input","suites":["Menu","#selectableRelativeToCursor"],"updatePoint":{"line":147,"column":50,"index":5604},"line":147,"code":"    it('should return null if delta lands on input', function () {\n      var $first;\n      $first = this.view._getSelectables().eq(0);\n      this.view.setCursor($first);\n      expect(this.view.selectableRelativeToCursor(-1)).toBeNull();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should remove cursor if null is passed in","suites":["Menu","#setCursor"],"updatePoint":{"line":155,"column":49,"index":5893},"line":155,"code":"    it('should remove cursor if null is passed in', function () {\n      var $selectable;\n      $selectable = this.view._getSelectables().eq(0);\n      this.view.setCursor($selectable);\n      expect(this.view.getActiveSelectable()).toBe($selectable);\n      this.view.setCursor(null);\n      expect(this.view.getActiveSelectable()).toBeNull();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should move cursor to passed in selectable","suites":["Menu","#setCursor"],"updatePoint":{"line":163,"column":50,"index":6242},"line":163,"code":"    it('should move cursor to passed in selectable', function () {\n      var $selectable;\n      $selectable = this.view._getSelectables().eq(0);\n      expect(this.view.getActiveSelectable()).toBeNull();\n      this.view.setCursor($selectable);\n      expect(this.view.getActiveSelectable()).toBe($selectable);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should extract the data from the selectable element","suites":["Menu","#getSelectableData"],"updatePoint":{"line":172,"column":59,"index":6620},"line":172,"code":"    it('should extract the data from the selectable element', function () {\n      var $selectable, datum;\n      $selectable = $('<div>').data({\n        'tt-selectable-display': 'one',\n        'tt-selectable-object': 'two'\n      });\n      data = this.view.getSelectableData($selectable);\n      expect(data).toEqual({\n        val: 'one',\n        obj: 'two'\n      });\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should return null if no element is given","suites":["Menu","#getSelectableData"],"updatePoint":{"line":184,"column":49,"index":6983},"line":184,"code":"    it('should return null if no element is given', function () {\n      expect(this.view.getSelectableData($('notreal'))).toBeNull();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should return the selectable the cursor is on","suites":["Menu","#getActiveSelectable"],"updatePoint":{"line":189,"column":53,"index":7184},"line":189,"code":"    it('should return the selectable the cursor is on', function () {\n      var $first;\n      $first = this.view._getSelectables().eq(0);\n      this.view.setCursor($first);\n      expect(this.view.getActiveSelectable()).toBe($first);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should return null if the cursor is off","suites":["Menu","#getActiveSelectable"],"updatePoint":{"line":195,"column":47,"index":7419},"line":195,"code":"    it('should return null if the cursor is off', function () {\n      expect(this.view.getActiveSelectable()).toBeNull();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should return the selectable at the top of the menu","suites":["Menu","#getTopSelectable"],"updatePoint":{"line":200,"column":59,"index":7613},"line":200,"code":"    it('should return the selectable at the top of the menu', function () {\n      var $first;\n      $first = this.view._getSelectables().eq(0);\n      expect(this.view.getTopSelectable()).toBe($first);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should invoke update on each dataset if valid update","suites":["Menu","#update"],"updatePoint":{"line":207,"column":60,"index":7865},"line":207,"code":"    it('should invoke update on each dataset if valid update', function () {\n      this.view.update('fiz');\n      expect(this.dataset.update).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should return true when valid update","suites":["Menu","#update"],"updatePoint":{"line":211,"column":44,"index":8019},"line":211,"code":"    it('should return true when valid update', function () {\n      expect(this.view.update('fiz')).toBe(true);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should return false when invalid update","suites":["Menu","#update"],"updatePoint":{"line":214,"column":47,"index":8141},"line":214,"code":"    it('should return false when invalid update', function () {\n      this.view.update('fiz');\n      expect(this.view.update('fiz')).toBe(false);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should set query to null","suites":["Menu","#empty"],"updatePoint":{"line":220,"column":32,"index":8321},"line":220,"code":"    it('should set query to null', function () {\n      this.view.query = 'fiz';\n      this.view.empty();\n      expect(this.view.query).toBeNull();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should add empty class to node","suites":["Menu","#empty"],"updatePoint":{"line":225,"column":38,"index":8482},"line":225,"code":"    it('should add empty class to node', function () {\n      this.$node.removeClass(www.classes.empty);\n      this.view.empty();\n      expect(this.$node).toHaveClass(www.classes.empty);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should invoke clear on each dataset","suites":["Menu","#empty"],"updatePoint":{"line":230,"column":43,"index":8681},"line":230,"code":"    it('should invoke clear on each dataset', function () {\n      this.view.empty();\n      expect(this.dataset.clear).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should remove event handlers","suites":["Menu","#destroy"],"updatePoint":{"line":236,"column":36,"index":8863},"line":236,"code":"    it('should remove event handlers', function () {\n      var $node = this.view.$node;\n      spyOn($node, 'off');\n      this.view.destroy();\n      expect($node.off).toHaveBeenCalledWith('.tt');\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should destroy its datasets","suites":["Menu","#destroy"],"updatePoint":{"line":242,"column":35,"index":9065},"line":242,"code":"    it('should destroy its datasets', function () {\n      this.view.destroy();\n      expect(this.dataset.destroy).toHaveBeenCalled();\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should set node element to dummy element","suites":["Menu","#destroy"],"updatePoint":{"line":246,"column":48,"index":9220},"line":246,"code":"    it('should set node element to dummy element', function () {\n      var $node = this.view.$node;\n      this.view.destroy();\n      expect(this.view.$node).not.toBe($node);\n    });","file":"typeahead/results_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on selectableClicked","when idle"],"updatePoint":{"line":36,"column":27,"index":950},"line":36,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onSelectableClicked');\n        this.menu.trigger(eventName, payload);\n        expect(this.view._onSelectableClicked).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should select the selectable","suites":["Typeahead","on selectableClicked","when active"],"updatePoint":{"line":46,"column":38,"index":1304},"line":46,"code":"      it('should select the selectable', function () {\n        spyOn(this.view, 'select');\n        this.menu.trigger(eventName, payload);\n        expect(this.view.select).toHaveBeenCalledWith(payload);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:asyncrequest","suites":["Typeahead","on asyncRequested"],"updatePoint":{"line":58,"column":45,"index":1675},"line":58,"code":"    it('should trigger typeahead:asyncrequest', function () {\n      var spy = jasmine.createSpy();\n      this.$input.on('typeahead:asyncrequest', spy);\n      this.menu.trigger(eventName);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:asynccancel","suites":["Typeahead","on asyncCanceled"],"updatePoint":{"line":70,"column":44,"index":2050},"line":70,"code":"    it('should trigger typeahead:asynccancel', function () {\n      var spy = jasmine.createSpy();\n      this.$input.on('typeahead:asynccancel', spy);\n      this.menu.trigger(eventName);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:asyncreceive","suites":["Typeahead","on asyncReceived"],"updatePoint":{"line":82,"column":45,"index":2425},"line":82,"code":"    it('should trigger typeahead:asyncreceive', function () {\n      var spy = jasmine.createSpy();\n      this.$input.on('typeahead:asyncreceive', spy);\n      this.menu.trigger(eventName);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on datasetRendered","when idle"],"updatePoint":{"line":98,"column":27,"index":2900},"line":98,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onDatasetRendered');\n        this.menu.trigger(eventName);\n        expect(this.view._onDatasetRendered).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update the hint","suites":["Typeahead","on datasetRendered","when active"],"updatePoint":{"line":108,"column":32,"index":3235},"line":108,"code":"      it('should update the hint', function () {\n        this.input.hasOverflow.andReturn(false);\n        this.menu.getTopSelectable.andReturn($('<fiz>'));\n        this.menu.getSelectableData.andReturn(testData);\n        this.input.getInputValue.andReturn(testData.val.slice(0, 2));\n        this.menu.trigger(eventName);\n        expect(this.input.setHint).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:render","suites":["Typeahead","on datasetRendered","when active"],"updatePoint":{"line":116,"column":41,"index":3630},"line":116,"code":"      it('should trigger typeahead:render', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:render', spy);\n        this.menu.trigger(eventName);\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on datasetCleared","when idle"],"updatePoint":{"line":133,"column":27,"index":4115},"line":133,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onDatasetCleared');\n        this.menu.trigger(eventName);\n        expect(this.view._onDatasetCleared).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update the hint","suites":["Typeahead","on datasetCleared","when active"],"updatePoint":{"line":143,"column":32,"index":4448},"line":143,"code":"      it('should update the hint', function () {\n        this.input.hasOverflow.andReturn(false);\n        this.menu.getTopSelectable.andReturn($('<fiz>'));\n        this.menu.getSelectableData.andReturn(testData);\n        this.input.getInputValue.andReturn(testData.val.slice(0, 2));\n        this.menu.trigger(eventName);\n        expect(this.input.setHint).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should activate typeahead","suites":["Typeahead","on focused","when idle"],"updatePoint":{"line":162,"column":35,"index":5088},"line":162,"code":"      it('should activate typeahead', function () {\n        this.input.trigger(eventName);\n        expect(this.view.isActive()).toBe(true);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should open menu","suites":["Typeahead","on focused","when idle"],"updatePoint":{"line":166,"column":26,"index":5229},"line":166,"code":"      it('should open menu', function () {\n        this.input.trigger(eventName);\n        expect(this.menu.open).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should open menu","suites":["Typeahead","on focused","when active"],"updatePoint":{"line":175,"column":26,"index":5493},"line":175,"code":"      it('should open menu', function () {\n        this.input.trigger(eventName);\n        expect(this.menu.open).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update menu for query if minLength met","suites":["Typeahead","on focused","when active"],"updatePoint":{"line":179,"column":55,"index":5665},"line":179,"code":"      it('should update menu for query if minLength met', function () {\n        this.input.getQuery.andReturn('bar');\n        this.input.trigger(eventName);\n        expect(this.menu.update).toHaveBeenCalledWith('bar');\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not update menu for query if minLength not met","suites":["Typeahead","on focused","when active"],"updatePoint":{"line":184,"column":63,"index":5902},"line":184,"code":"      it('should not update menu for query if minLength not met', function () {\n        this.view.minLength = 1;\n        this.input.getQuery.andReturn('');\n        this.input.trigger(eventName);\n        expect(this.menu.update).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:change if query changed since focus","suites":["Typeahead","on blurred"],"updatePoint":{"line":197,"column":68,"index":6307},"line":197,"code":"    it('should trigger typeahead:change if query changed since focus', function () {\n      var spy = jasmine.createSpy();\n      this.input.hasQueryChangedSinceLastFocus.andReturn(true);\n      this.$input.on('typeahead:change', spy);\n      this.input.trigger(eventName);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not trigger typeahead:change if query has not changed since focus","suites":["Typeahead","on blurred"],"updatePoint":{"line":204,"column":80,"index":6635},"line":204,"code":"    it('should not trigger typeahead:change if query has not changed since focus', function () {\n      var spy = jasmine.createSpy();\n      this.input.hasQueryChangedSinceLastFocus.andReturn(false);\n      this.$input.on('typeahead:change', spy);\n      this.input.trigger(eventName);\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should deactivate typeahead","suites":["Typeahead","on blurred","when active"],"updatePoint":{"line":215,"column":37,"index":7038},"line":215,"code":"      it('should deactivate typeahead', function () {\n        this.input.trigger(eventName);\n        expect(this.view.isActive()).toBe(false);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on enterKeyed","when idle"],"updatePoint":{"line":231,"column":27,"index":7514},"line":231,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onEnterKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onEnterKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on enterKeyed","when active and menu is closed"],"updatePoint":{"line":242,"column":27,"index":7906},"line":242,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onEnterKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onEnterKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should select selectable if there is an active one","suites":["Typeahead","on enterKeyed","when active and menu is open"],"updatePoint":{"line":253,"column":60,"index":8328},"line":253,"code":"      it('should select selectable if there is an active one', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select');\n        this.menu.getActiveSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(this.view.select).toHaveBeenCalledWith($el);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should prevent default if active selectale ","suites":["Typeahead","on enterKeyed","when active and menu is open"],"updatePoint":{"line":261,"column":53,"index":8649},"line":261,"code":"      it('should prevent default if active selectale ', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select').andReturn(true);\n        this.menu.getActiveSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(payload.preventDefault).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not select selectable if there is no active one","suites":["Typeahead","on enterKeyed","when active and menu is open"],"updatePoint":{"line":269,"column":64,"index":8996},"line":269,"code":"      it('should not select selectable if there is no active one', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select');\n        this.input.trigger(eventName, payload);\n        expect(this.view.select).not.toHaveBeenCalledWith($el);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not prevent default if no active selectale","suites":["Typeahead","on enterKeyed","when active and menu is open"],"updatePoint":{"line":276,"column":59,"index":9273},"line":276,"code":"      it('should not prevent default if no active selectale', function () {\n        var $el;\n        spyOn(this.view, 'select').andReturn(true);\n        $el = $('<bah>');\n        this.input.trigger(eventName, payload);\n        expect(payload.preventDefault).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not prevent default if selection of active selectable fails","suites":["Typeahead","on enterKeyed","when active and menu is open"],"updatePoint":{"line":283,"column":76,"index":9582},"line":283,"code":"      it('should not prevent default if selection of active selectable fails', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select').andReturn(false);\n        this.menu.getActiveSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(payload.preventDefault).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on tabKeyed","when idle"],"updatePoint":{"line":303,"column":27,"index":10226},"line":303,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onTabKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onTabKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on tabKeyed","when active and menu is closed"],"updatePoint":{"line":314,"column":27,"index":10614},"line":314,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onTabKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onTabKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should select selectable if there is an active one","suites":["Typeahead","on tabKeyed","when active and menu is open"],"updatePoint":{"line":325,"column":60,"index":11032},"line":325,"code":"      it('should select selectable if there is an active one', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select');\n        this.menu.getActiveSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(this.view.select).toHaveBeenCalledWith($el);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should prevent default if active selectale","suites":["Typeahead","on tabKeyed","when active and menu is open"],"updatePoint":{"line":333,"column":52,"index":11352},"line":333,"code":"      it('should prevent default if active selectale', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select').andReturn(true);\n        this.menu.getActiveSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(payload.preventDefault).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not select selectable if there is no active one","suites":["Typeahead","on tabKeyed","when active and menu is open"],"updatePoint":{"line":341,"column":64,"index":11699},"line":341,"code":"      it('should not select selectable if there is no active one', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select');\n        this.input.trigger(eventName, payload);\n        expect(this.view.select).not.toHaveBeenCalledWith($el);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not prevent default if no active selectale","suites":["Typeahead","on tabKeyed","when active and menu is open"],"updatePoint":{"line":348,"column":59,"index":11976},"line":348,"code":"      it('should not prevent default if no active selectale', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select');\n        this.input.trigger(eventName, payload);\n        expect(payload.preventDefault).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not prevent default if selection of active selectable fails","suites":["Typeahead","on tabKeyed","when active and menu is open"],"updatePoint":{"line":355,"column":76,"index":12269},"line":355,"code":"      it('should not prevent default if selection of active selectable fails', function () {\n        var $el;\n        $el = $('<bah>');\n        spyOn(this.view, 'select').andReturn(false);\n        this.menu.getActiveSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(payload.preventDefault).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should autocomplete to top suggestion","suites":["Typeahead","on tabKeyed","when active and menu is open"],"updatePoint":{"line":363,"column":47,"index":12604},"line":363,"code":"      it('should autocomplete to top suggestion', function () {\n        var $el;\n        $el = $('<foo>');\n        spyOn(this.view, 'autocomplete');\n        this.menu.getTopSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(this.view.autocomplete).toHaveBeenCalledWith($el);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should prevent default behavior of DOM event if autocompletion succeeds","suites":["Typeahead","on tabKeyed","when active and menu is open"],"updatePoint":{"line":371,"column":81,"index":12962},"line":371,"code":"      it('should prevent default behavior of DOM event if autocompletion succeeds', function () {\n        var $el;\n        $el = $('<foo>');\n        spyOn(this.view, 'autocomplete').andReturn(true);\n        this.menu.getTopSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(payload.preventDefault).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not prevent default behavior of DOM event if autocompletion fails","suites":["Typeahead","on tabKeyed","when active and menu is open"],"updatePoint":{"line":379,"column":82,"index":13330},"line":379,"code":"      it('should not prevent default behavior of DOM event if autocompletion fails', function () {\n        var $el;\n        $el = $('<foo>');\n        spyOn(this.view, 'autocomplete').andReturn(false);\n        this.menu.getTopSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(payload.preventDefault).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on escKeyed","when idle"],"updatePoint":{"line":399,"column":27,"index":13977},"line":399,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onEscKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onEscKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should close","suites":["Typeahead","on escKeyed","when active"],"updatePoint":{"line":409,"column":22,"index":14298},"line":409,"code":"      it('should close', function () {\n        spyOn(this.view, 'close');\n        this.input.trigger(eventName, payload);\n        expect(this.view.close).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on upKeyed","when idle"],"updatePoint":{"line":426,"column":27,"index":14814},"line":426,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onUpKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onUpKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should open menu","suites":["Typeahead","on upKeyed","when active"],"updatePoint":{"line":437,"column":26,"index":15177},"line":437,"code":"      it('should open menu', function () {\n        this.input.trigger(eventName, payload);\n        expect(this.menu.open).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should move cursor -1","suites":["Typeahead","on upKeyed","when active"],"updatePoint":{"line":441,"column":31,"index":15334},"line":441,"code":"      it('should move cursor -1', function () {\n        this.input.trigger(eventName, payload);\n        expect(this.view.moveCursor).toHaveBeenCalledWith(-1);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on downKeyed","when idle"],"updatePoint":{"line":457,"column":27,"index":15830},"line":457,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onDownKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onDownKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should open menu","suites":["Typeahead","on downKeyed","when active"],"updatePoint":{"line":468,"column":26,"index":16197},"line":468,"code":"      it('should open menu', function () {\n        this.input.trigger(eventName, payload);\n        expect(this.menu.open).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should move cursor +1","suites":["Typeahead","on downKeyed","when active"],"updatePoint":{"line":472,"column":31,"index":16354},"line":472,"code":"      it('should move cursor +1', function () {\n        this.input.trigger(eventName, payload);\n        expect(this.view.moveCursor).toHaveBeenCalledWith(1);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on leftKeyed","when idle"],"updatePoint":{"line":488,"column":27,"index":16849},"line":488,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onLeftKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onLeftKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on leftKeyed","when active and menu is closed"],"updatePoint":{"line":499,"column":27,"index":17239},"line":499,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onLeftKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onLeftKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should autocomplete if language is rtl and text cursor is at end","suites":["Typeahead","on leftKeyed","when active and menu is open"],"updatePoint":{"line":510,"column":74,"index":17673},"line":510,"code":"      it('should autocomplete if language is rtl and text cursor is at end', function () {\n        var $el = $('<foo>');\n        spyOn(this.view, 'autocomplete');\n        this.view.dir = 'rtl';\n        this.input.isCursorAtEnd.andReturn(true);\n        this.menu.getTopSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(this.view.autocomplete).toHaveBeenCalledWith($el);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on rightKeyed","when idle"],"updatePoint":{"line":531,"column":27,"index":18378},"line":531,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onRightKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onRightKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","on rightKeyed","when active and menu is closed"],"updatePoint":{"line":542,"column":27,"index":18770},"line":542,"code":"      it('should do nothing', function () {\n        spyOn(this.view, '_onRightKeyed');\n        this.input.trigger(eventName, payload);\n        expect(this.view._onRightKeyed).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should autocomplete if language is rtl and text cursor is at end","suites":["Typeahead","on rightKeyed","when active and menu is open"],"updatePoint":{"line":553,"column":74,"index":19206},"line":553,"code":"      it('should autocomplete if language is rtl and text cursor is at end', function () {\n        var $el = $('<foo>');\n        spyOn(this.view, 'autocomplete');\n        this.view.dir = 'ltr';\n        this.input.isCursorAtEnd.andReturn(true);\n        this.menu.getTopSelectable.andReturn($el);\n        this.input.trigger(eventName, payload);\n        expect(this.view.autocomplete).toHaveBeenCalledWith($el);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not open menu","suites":["Typeahead","on queryChanged","when idle"],"updatePoint":{"line":574,"column":30,"index":19871},"line":574,"code":"      it('should not open menu', function () {\n        this.input.trigger(eventName, payload);\n        expect(this.menu.open).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should open menu","suites":["Typeahead","on queryChanged","when active"],"updatePoint":{"line":584,"column":26,"index":20174},"line":584,"code":"      it('should open menu', function () {\n        this.input.trigger(eventName, payload);\n        expect(this.menu.open).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should empty menu if minLength is not satisfied","suites":["Typeahead","on queryChanged","when active"],"updatePoint":{"line":588,"column":57,"index":20357},"line":588,"code":"      it('should empty menu if minLength is not satisfied', function () {\n        this.view.minLength = 100;\n        this.input.trigger(eventName, payload);\n        expect(this.menu.empty).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update menu if minLength is satisfied","suites":["Typeahead","on queryChanged","when active"],"updatePoint":{"line":593,"column":54,"index":20573},"line":593,"code":"      it('should update menu if minLength is satisfied', function () {\n        this.input.trigger(eventName, 'fiz');\n        expect(this.menu.update).toHaveBeenCalledWith('fiz');\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not open menu","suites":["Typeahead","on whitespaceChanged","when idle"],"updatePoint":{"line":609,"column":30,"index":21038},"line":609,"code":"      it('should not open menu', function () {\n        this.input.trigger(eventName, payload);\n        expect(this.menu.open).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should open menu","suites":["Typeahead","on whitespaceChanged","when active"],"updatePoint":{"line":618,"column":26,"index":21315},"line":618,"code":"      it('should open menu', function () {\n        this.input.trigger(eventName, payload);\n        expect(this.menu.open).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update the hint","suites":["Typeahead","on whitespaceChanged","when active"],"updatePoint":{"line":622,"column":32,"index":21473},"line":622,"code":"      it('should update the hint', function () {\n        this.input.hasFocus.andReturn(true);\n        this.input.hasOverflow.andReturn(false);\n        this.menu.getTopSelectable.andReturn($('<fiz>'));\n        this.menu.getSelectableData.andReturn(testData);\n        this.input.getInputValue.andReturn(testData.val.slice(0, 2));\n        this.input.trigger(eventName, payload);\n        expect(this.input.setHint).toHaveBeenCalledWith(testData.val);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should set direction of menu if direction changed","suites":["Typeahead","on langDirChanged"],"updatePoint":{"line":639,"column":57,"index":22139},"line":639,"code":"    it('should set direction of menu if direction changed', function () {\n      this.view.dir = 'ltr';\n      this.input.trigger(eventName, payload);\n      expect(this.view.dir).toBe(payload);\n      expect(this.menu.setLanguageDirection).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if direction did not changed","suites":["Typeahead","on langDirChanged"],"updatePoint":{"line":645,"column":54,"index":22401},"line":645,"code":"    it('should do nothing if direction did not changed', function () {\n      this.view.dir = payload;\n      this.input.trigger(eventName, payload);\n      expect(this.view.dir).toBe(payload);\n      expect(this.menu.setLanguageDirection).not.toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should return true if active","suites":["Typeahead","#isActive"],"updatePoint":{"line":653,"column":36,"index":22695},"line":653,"code":"    it('should return true if active', function () {\n      this.view.activate();\n      expect(this.view.isActive()).toBe(true);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should return false if active","suites":["Typeahead","#isActive"],"updatePoint":{"line":657,"column":37,"index":22832},"line":657,"code":"    it('should return false if active', function () {\n      this.view.deactivate();\n      expect(this.view.isActive()).toBe(false);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should returned enabled status","suites":["Typeahead","#isEnabled"],"updatePoint":{"line":663,"column":38,"index":23018},"line":663,"code":"    it('should returned enabled status', function () {\n      this.view.enable();\n      expect(this.view.isEnabled()).toBe(true);\n      this.view.disable();\n      expect(this.view.isEnabled()).toBe(false);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should set enabled to true","suites":["Typeahead","#enable"],"updatePoint":{"line":671,"column":34,"index":23269},"line":671,"code":"    it('should set enabled to true', function () {\n      this.view.enable();\n      expect(this.view.isEnabled()).toBe(true);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should set enabled to false","suites":["Typeahead","#disable"],"updatePoint":{"line":677,"column":35,"index":23446},"line":677,"code":"    it('should set enabled to false', function () {\n      this.view.disable();\n      expect(this.view.isEnabled()).toBe(false);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","#activate","when active"],"updatePoint":{"line":687,"column":27,"index":23731},"line":687,"code":"      it('should do nothing', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeactive', spy);\n        this.view.activate();\n        expect(spy).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","#activate","when idle and disabled"],"updatePoint":{"line":699,"column":27,"index":24114},"line":699,"code":"      it('should do nothing', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeactive', spy);\n        this.view.activate();\n        expect(spy).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:beforeactive","suites":["Typeahead","#activate","when idle and enabled"],"updatePoint":{"line":711,"column":47,"index":24517},"line":711,"code":"      it('should trigger typeahead:beforeactive', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeactive', spy);\n        this.view.activate();\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should support cancellation","suites":["Typeahead","#activate","when idle and enabled"],"updatePoint":{"line":717,"column":37,"index":24745},"line":717,"code":"      it('should support cancellation', function () {\n        var spy1, spy2;\n        spy1 = jasmine.createSpy().andCallFake(prevent);\n        spy2 = jasmine.createSpy();\n        this.$input.on('typeahead:beforeactive', spy1);\n        this.$input.on('typeahead:active', spy2);\n        this.view.activate();\n        expect(spy1).toHaveBeenCalled();\n        expect(spy2).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should change state to active","suites":["Typeahead","#activate","when idle and enabled"],"updatePoint":{"line":727,"column":39,"index":25150},"line":727,"code":"      it('should change state to active', function () {\n        expect(this.view.isActive()).toBe(false);\n        this.view.activate();\n        expect(this.view.isActive()).toBe(true);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:active if not canceled","suites":["Typeahead","#activate","when idle and enabled"],"updatePoint":{"line":732,"column":57,"index":25363},"line":732,"code":"      it('should trigger typeahead:active if not canceled', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:active', spy);\n        this.view.activate();\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","#deactivate","when idle"],"updatePoint":{"line":745,"column":27,"index":25742},"line":745,"code":"      it('should do nothing', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeidle', spy);\n        this.view.deactivate();\n        expect(spy).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:beforeidle","suites":["Typeahead","#deactivate","when active"],"updatePoint":{"line":756,"column":45,"index":26103},"line":756,"code":"      it('should trigger typeahead:beforeidle', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeidle', spy);\n        this.view.deactivate();\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should support cancellation","suites":["Typeahead","#deactivate","when active"],"updatePoint":{"line":762,"column":37,"index":26331},"line":762,"code":"      it('should support cancellation', function () {\n        var spy1, spy2;\n        spy1 = jasmine.createSpy().andCallFake(prevent);\n        spy2 = jasmine.createSpy();\n        this.$input.on('typeahead:beforeidle', spy1);\n        this.$input.on('typeahead:idle', spy2);\n        this.view.deactivate();\n        expect(spy1).toHaveBeenCalled();\n        expect(spy2).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should close","suites":["Typeahead","#deactivate","when active"],"updatePoint":{"line":772,"column":22,"index":26717},"line":772,"code":"      it('should close', function () {\n        spyOn(this.view, 'close');\n        this.view.deactivate();\n        expect(this.view.close).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should change state to idle","suites":["Typeahead","#deactivate","when active"],"updatePoint":{"line":777,"column":37,"index":26900},"line":777,"code":"      it('should change state to idle', function () {\n        expect(this.view.isActive()).toBe(true);\n        this.view.deactivate();\n        expect(this.view.isActive()).toBe(false);\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:idle if not canceled","suites":["Typeahead","#deactivate","when active"],"updatePoint":{"line":782,"column":55,"index":27113},"line":782,"code":"      it('should trigger typeahead:idle if not canceled', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:idle', spy);\n        this.view.deactivate();\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should return true if open","suites":["Typeahead","#isOpen"],"updatePoint":{"line":791,"column":34,"index":27382},"line":791,"code":"    it('should return true if open', function () {\n      this.menu.isOpen.andReturn(true);\n      expect(this.view.isOpen()).toBe(true);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should return false if closed","suites":["Typeahead","#isOpen"],"updatePoint":{"line":795,"column":37,"index":27529},"line":795,"code":"    it('should return false if closed', function () {\n      this.menu.isOpen.andReturn(false);\n      expect(this.view.isOpen()).toBe(false);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","#open","when open"],"updatePoint":{"line":805,"column":27,"index":27841},"line":805,"code":"      it('should do nothing', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeopen', spy);\n        this.view.open();\n        expect(spy).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:beforeopen","suites":["Typeahead","#open","when closed"],"updatePoint":{"line":816,"column":45,"index":28219},"line":816,"code":"      it('should trigger typeahead:beforeopen', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeopen', spy);\n        this.view.open();\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should support cancellation","suites":["Typeahead","#open","when closed"],"updatePoint":{"line":822,"column":37,"index":28441},"line":822,"code":"      it('should support cancellation', function () {\n        var spy1, spy2;\n        spy1 = jasmine.createSpy().andCallFake(prevent);\n        spy2 = jasmine.createSpy();\n        this.$input.on('typeahead:beforeopen', spy1);\n        this.$input.on('typeahead:open', spy2);\n        this.view.open();\n        expect(spy1).toHaveBeenCalled();\n        expect(spy2).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should open menu","suites":["Typeahead","#open","when closed"],"updatePoint":{"line":832,"column":26,"index":28825},"line":832,"code":"      it('should open menu', function () {\n        this.view.open();\n        expect(this.menu.open).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update hint if active","suites":["Typeahead","#open","when closed"],"updatePoint":{"line":836,"column":38,"index":28967},"line":836,"code":"      it('should update hint if active', function () {\n        spyOn(this.view, 'isActive').andReturn(true);\n        this.input.hasOverflow.andReturn(false);\n        this.menu.getTopSelectable.andReturn($('<fiz>'));\n        this.menu.getSelectableData.andReturn(testData);\n        this.input.getInputValue.andReturn(testData.val.slice(0, 2));\n        this.view.open();\n        expect(this.input.setHint).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:open if not canceled","suites":["Typeahead","#open","when closed"],"updatePoint":{"line":845,"column":55,"index":29418},"line":845,"code":"      it('should trigger typeahead:open if not canceled', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:open', spy);\n        this.view.open();\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing","suites":["Typeahead","#close","when closed"],"updatePoint":{"line":858,"column":27,"index":29809},"line":858,"code":"      it('should do nothing', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeclose', spy);\n        this.view.open();\n        expect(spy).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:beforeclose","suites":["Typeahead","#close","when open"],"updatePoint":{"line":869,"column":46,"index":30186},"line":869,"code":"      it('should trigger typeahead:beforeclose', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:beforeclose', spy);\n        this.view.close();\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should support cancellation","suites":["Typeahead","#close","when open"],"updatePoint":{"line":875,"column":37,"index":30410},"line":875,"code":"      it('should support cancellation', function () {\n        var spy1, spy2;\n        spy1 = jasmine.createSpy().andCallFake(prevent);\n        spy2 = jasmine.createSpy();\n        this.$input.on('typeahead:beforeclose', spy1);\n        this.$input.on('typeahead:close', spy2);\n        this.view.close();\n        expect(spy1).toHaveBeenCalled();\n        expect(spy2).not.toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should close menu","suites":["Typeahead","#close","when open"],"updatePoint":{"line":885,"column":27,"index":30798},"line":885,"code":"      it('should close menu', function () {\n        this.view.close();\n        expect(this.menu.close).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should clear hint","suites":["Typeahead","#close","when open"],"updatePoint":{"line":889,"column":27,"index":30931},"line":889,"code":"      it('should clear hint', function () {\n        this.view.close();\n        expect(this.input.clearHint).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:close if not canceled","suites":["Typeahead","#close","when open"],"updatePoint":{"line":893,"column":56,"index":31098},"line":893,"code":"      it('should trigger typeahead:close if not canceled', function () {\n        var spy = jasmine.createSpy();\n        this.$input.on('typeahead:close', spy);\n        this.view.close();\n        expect(spy).toHaveBeenCalled();\n      });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should return the current query","suites":["Typeahead","#getVal"],"updatePoint":{"line":902,"column":39,"index":31368},"line":902,"code":"    it('should return the current query', function () {\n      this.input.getQuery.andReturn('woah');\n      expect(this.view.getVal()).toBe('woah');\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update query","suites":["Typeahead","#setVal"],"updatePoint":{"line":908,"column":27,"index":31554},"line":908,"code":"    it('should update query', function () {\n      this.input.hasFocus.andReturn(true);\n      this.view.setVal('woah');\n      expect(this.input.setQuery).toHaveBeenCalledWith('woah');\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should do nothing if element is not a selectable","suites":["Typeahead","#select"],"updatePoint":{"line":915,"column":56,"index":31816},"line":915,"code":"    it('should do nothing if element is not a selectable', function () {\n      var spy;\n      this.menu.getSelectableData.andReturn(null);\n      this.$input.on('typeahead:beforeselect', spy = jasmine.createSpy());\n      this.view.select($('<bah>'));\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:beforeselect","suites":["Typeahead","#select"],"updatePoint":{"line":922,"column":45,"index":32105},"line":922,"code":"    it('should trigger typeahead:beforeselect', function () {\n      var spy;\n      this.menu.getSelectableData.andReturn(testData);\n      this.$input.on('typeahead:beforeselect', spy = jasmine.createSpy());\n      this.view.select($('<bah>'));\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should support cancellation","suites":["Typeahead","#select"],"updatePoint":{"line":929,"column":35,"index":32384},"line":929,"code":"    it('should support cancellation', function () {\n      var spy1, spy2;\n      spy1 = jasmine.createSpy().andCallFake(prevent);\n      spy2 = jasmine.createSpy();\n      this.menu.getSelectableData.andReturn(testData);\n      this.$input.on('typeahead:beforeselect', spy1).on('typeahead:select', spy2);\n      this.view.select($('<bah>'));\n      expect(spy1).toHaveBeenCalled();\n      expect(spy2).not.toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update query","suites":["Typeahead","#select"],"updatePoint":{"line":939,"column":27,"index":32803},"line":939,"code":"    it('should update query', function () {\n      this.menu.getSelectableData.andReturn(testData);\n      this.view.select($('<bah>'));\n      expect(this.input.setQuery).toHaveBeenCalledWith(testData.val, true);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:select","suites":["Typeahead","#select"],"updatePoint":{"line":944,"column":39,"index":33034},"line":944,"code":"    it('should trigger typeahead:select', function () {\n      var spy;\n      this.menu.getSelectableData.andReturn(testData);\n      this.$input.on('typeahead:select', spy = jasmine.createSpy());\n      this.view.select($('<bah>'));\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should close","suites":["Typeahead","#select"],"updatePoint":{"line":951,"column":20,"index":33292},"line":951,"code":"    it('should close', function () {\n      spyOn(this.view, 'close');\n      this.menu.getSelectableData.andReturn(testData);\n      this.view.select($('<bah>'));\n      expect(this.view.close).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should abort if the query matches the top suggestion","suites":["Typeahead","#autocomplete"],"updatePoint":{"line":959,"column":60,"index":33599},"line":959,"code":"    it('should abort if the query matches the top suggestion', function () {\n      var spy;\n      this.input.getQuery.andReturn(testData.val);\n      this.menu.getSelectableData.andReturn(testData);\n      this.$input.on('typeahead:beforeautocomplete', spy = jasmine.createSpy());\n      this.view.autocomplete($('<bah>'));\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:beforeautocomplete","suites":["Typeahead","#autocomplete"],"updatePoint":{"line":967,"column":51,"index":33961},"line":967,"code":"    it('should trigger typeahead:beforeautocomplete', function () {\n      var spy;\n      this.menu.getSelectableData.andReturn(testData);\n      this.$input.on('typeahead:beforeautocomplete', spy = jasmine.createSpy());\n      this.view.autocomplete($('<bah>'));\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should support cancellation","suites":["Typeahead","#autocomplete"],"updatePoint":{"line":974,"column":35,"index":34252},"line":974,"code":"    it('should support cancellation', function () {\n      var spy1, spy2;\n      spy1 = jasmine.createSpy().andCallFake(prevent);\n      spy2 = jasmine.createSpy();\n      this.$input.on('typeahead:beforeautocomplete', spy1);\n      this.$input.on('typeahead:autocomplete', spy2);\n      this.menu.getSelectableData.andReturn(testData);\n      this.view.autocomplete($('<bah>'));\n      expect(spy1).toHaveBeenCalled();\n      expect(spy2).not.toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update the query","suites":["Typeahead","#autocomplete"],"updatePoint":{"line":985,"column":31,"index":34712},"line":985,"code":"    it('should update the query', function () {\n      this.menu.getSelectableData.andReturn(testData);\n      this.view.autocomplete($('<bah>'));\n      expect(this.input.setQuery).toHaveBeenCalledWith(testData.val);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:autocomplete","suites":["Typeahead","#autocomplete"],"updatePoint":{"line":990,"column":45,"index":34949},"line":990,"code":"    it('should trigger typeahead:autocomplete', function () {\n      var spy;\n      this.menu.getSelectableData.andReturn(testData);\n      this.$input.on('typeahead:autocomplete', spy = jasmine.createSpy());\n      this.view.autocomplete($('<bah>'));\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should move cursor if minLength is not satisfied","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1002,"column":56,"index":35382},"line":1002,"code":"    it('should move cursor if minLength is not satisfied', function () {\n      var spy = jasmine.createSpy();\n      this.view.minLength = 100;\n      this.menu.update.andReturn(true);\n      this.$input.on('typeahead:beforecursorchange', spy);\n      this.view.moveCursor(1);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should move cursor if invalid update","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1010,"column":44,"index":35689},"line":1010,"code":"    it('should move cursor if invalid update', function () {\n      var spy = jasmine.createSpy();\n      this.menu.update.andReturn(false);\n      this.$input.on('typeahead:beforecursorchange', spy);\n      this.view.moveCursor(1);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should not move cursor if valid update","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1017,"column":46,"index":35966},"line":1017,"code":"    it('should not move cursor if valid update', function () {\n      var spy = jasmine.createSpy();\n      this.menu.update.andReturn(true);\n      this.$input.on('typeahead:beforecursorchange', spy);\n      this.view.moveCursor(1);\n      expect(spy).not.toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger typeahead:beforecursorchange","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1024,"column":51,"index":36251},"line":1024,"code":"    it('should trigger typeahead:beforecursorchange', function () {\n      var spy = jasmine.createSpy();\n      this.$input.on('typeahead:beforecursorchange', spy);\n      this.view.moveCursor(1);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should support cancellation","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1030,"column":35,"index":36476},"line":1030,"code":"    it('should support cancellation', function () {\n      var spy = jasmine.createSpy().andCallFake(prevent);\n      this.$input.on('typeahead:beforecursorchange', spy);\n      this.view.moveCursor(1);\n      expect(this.menu.setCursor).not.toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update the input value if moved to selectable","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1036,"column":60,"index":36767},"line":1036,"code":"    it('should update the input value if moved to selectable', function () {\n      this.menu.getSelectableData.andReturn(testData);\n      this.view.moveCursor(1);\n      expect(this.input.setInputValue).toHaveBeenCalledWith(testData.val);\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should reset the input value if moved to input","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1041,"column":54,"index":37007},"line":1041,"code":"    it('should reset the input value if moved to input', function () {\n      this.view.moveCursor(1);\n      expect(this.input.resetInputValue).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should update the hint","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1045,"column":30,"index":37154},"line":1045,"code":"    it('should update the hint', function () {\n      this.input.hasOverflow.andReturn(false);\n      this.menu.getTopSelectable.andReturn($('<fiz>'));\n      this.menu.getSelectableData.andCallFake(fake);\n      this.input.getInputValue.andReturn(testData.val.slice(0, 1));\n      this.view.moveCursor(1);\n      expect(this.input.setHint).toHaveBeenCalledWith(testData.val);\n      function fake($el) {\n        return $el && $el.prop('tagName') === 'FIZ' ? testData : null;\n      }\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should trigger cursorchange after setting cursor","suites":["Typeahead","#moveCursor"],"updatePoint":{"line":1056,"column":56,"index":37665},"line":1056,"code":"    it('should trigger cursorchange after setting cursor', function () {\n      var spy = jasmine.createSpy();\n      this.$input.on('typeahead:cursorchange', spy);\n      this.view.moveCursor(1);\n      expect(spy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should destroy input","suites":["Typeahead","#destroy"],"updatePoint":{"line":1064,"column":28,"index":37920},"line":1064,"code":"    it('should destroy input', function () {\n      this.view.destroy();\n      expect(this.input.destroy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"},{"name":"should destroy menu","suites":["Typeahead","#destroy"],"updatePoint":{"line":1068,"column":27,"index":38052},"line":1068,"code":"    it('should destroy menu', function () {\n      this.view.destroy();\n      expect(this.menu.destroy).toHaveBeenCalled();\n    });","file":"typeahead/typeahead_spec.js","skipped":false,"dir":"test"}]}