{
    "repo": "MichMich/MagicMirror",
    "url": "https://github.com/MichMich/MagicMirror",
    "branch": "master",
    "configs": [
        {
            "package": "magicmirror",
            "lang": "js",
            "dir": "tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "get request from http://localhost:8080 should return 200",
            "suites": [
                "Electron app environment"
            ],
            "updatePoint": {
                "line": 13,
                "column": 62
            },
            "line": 13,
            "code": "  it(\"get request from http://localhost:8080 should return 200\", function (done) {\n    fetch(\"http://localhost:8080\").then(res => {\n      expect(res.status).toBe(200);\n      done();\n    });\n  });",
            "file": "e2e/env_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "get request from http://localhost:8080/nothing should return 404",
            "suites": [
                "Electron app environment"
            ],
            "updatePoint": {
                "line": 19,
                "column": 70
            },
            "line": 19,
            "code": "  it(\"get request from http://localhost:8080/nothing should return 404\", function (done) {\n    fetch(\"http://localhost:8080/nothing\").then(res => {\n      expect(res.status).toBe(404);\n      done();\n    });\n  });",
            "file": "e2e/env_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the title MagicMirror²",
            "suites": [
                "Electron app environment"
            ],
            "updatePoint": {
                "line": 25,
                "column": 40
            },
            "line": 25,
            "code": "  it(\"should show the title MagicMirror²\", function () {\n    const elem = document.querySelector(\"title\");\n    expect(elem).not.toBe(null);\n    expect(elem.textContent).toBe(\"MagicMirror²\");\n  });",
            "file": "e2e/env_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return 403",
            "suites": [
                "ipWhitelist directive configuration",
                "Set ipWhitelist without access"
            ],
            "updatePoint": {
                "line": 13,
                "column": 25
            },
            "line": 13,
            "code": "    it(\"should return 403\", function (done) {\n      fetch(\"http://localhost:8080\").then(res => {\n        expect(res.status).toBe(403);\n        done();\n      });\n    });",
            "file": "e2e/ipWhitelist_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return 200",
            "suites": [
                "ipWhitelist directive configuration",
                "Set ipWhitelist []"
            ],
            "updatePoint": {
                "line": 27,
                "column": 25
            },
            "line": 27,
            "code": "    it(\"should return 200\", function (done) {\n      fetch(\"http://localhost:8080\").then(res => {\n        expect(res.status).toBe(200);\n        done();\n      });\n    });",
            "file": "e2e/ipWhitelist_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the test header",
            "suites": [
                "Display of modules"
            ],
            "updatePoint": {
                "line": 11,
                "column": 33
            },
            "line": 11,
            "code": "  it(\"should show the test header\", function () {\n    const elem = document.querySelector(\"#module_0_helloworld .module-header\");\n    expect(elem).not.toBe(null); // textContent gibt hier lowercase zurück, das uppercase wird durch css realisiert, was daher nicht in textContent landet\n\n    expect(elem.textContent).toBe(\"test_header\");\n  });",
            "file": "e2e/modules_display_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show no header if no header text is specified",
            "suites": [
                "Display of modules"
            ],
            "updatePoint": {
                "line": 17,
                "column": 58
            },
            "line": 17,
            "code": "  it(\"should show no header if no header text is specified\", function () {\n    const elem = document.querySelector(\"#module_1_helloworld .module-header\");\n    expect(elem).not.toBe(null);\n    expect(elem.textContent).toBe(\"undefined\");\n  });",
            "file": "e2e/modules_display_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the welcome message",
            "suites": [
                "Alert module"
            ],
            "updatePoint": {
                "line": 11,
                "column": 37
            },
            "line": 11,
            "code": "  it(\"should show the welcome message\", function () {\n    const elem = document.querySelector(\".ns-box .ns-box-inner .light.bright.small\");\n    expect(elem).not.toBe(null);\n    expect(elem.textContent).toContain(\"Welcome, start was successful!\");\n  });",
            "file": "e2e/modules/alert_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows date with correct format",
            "suites": [
                "Clock set to spanish language module",
                "with default 24hr clock config"
            ],
            "updatePoint": {
                "line": 19,
                "column": 38
            },
            "line": 19,
            "code": "    it(\"shows date with correct format\", function () {\n      const dateRegex = /^(?:lunes|martes|miércoles|jueves|viernes|sábado|domingo), \\d{1,2} de (?:enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre) de \\d{4}$/;\n      testMatch(\".clock .date\", dateRegex);\n    });",
            "file": "e2e/modules/clock_es_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows time in 24hr format",
            "suites": [
                "Clock set to spanish language module",
                "with default 24hr clock config"
            ],
            "updatePoint": {
                "line": 23,
                "column": 33
            },
            "line": 23,
            "code": "    it(\"shows time in 24hr format\", function () {\n      const timeRegex = /^(?:2[0-3]|[01]\\d):[0-5]\\d[0-5]\\d$/;\n      testMatch(\".clock .time\", timeRegex);\n    });",
            "file": "e2e/modules/clock_es_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows date with correct format",
            "suites": [
                "Clock set to spanish language module",
                "with default 12hr clock config"
            ],
            "updatePoint": {
                "line": 33,
                "column": 38
            },
            "line": 33,
            "code": "    it(\"shows date with correct format\", function () {\n      const dateRegex = /^(?:lunes|martes|miércoles|jueves|viernes|sábado|domingo), \\d{1,2} de (?:enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre) de \\d{4}$/;\n      testMatch(\".clock .date\", dateRegex);\n    });",
            "file": "e2e/modules/clock_es_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows time in 12hr format",
            "suites": [
                "Clock set to spanish language module",
                "with default 12hr clock config"
            ],
            "updatePoint": {
                "line": 37,
                "column": 33
            },
            "line": 37,
            "code": "    it(\"shows time in 12hr format\", function () {\n      const timeRegex = /^(?:1[0-2]|[1-9]):[0-5]\\d[0-5]\\d[ap]m$/;\n      testMatch(\".clock .time\", timeRegex);\n    });",
            "file": "e2e/modules/clock_es_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows 12hr time with upper case AM/PM",
            "suites": [
                "Clock set to spanish language module",
                "with showPeriodUpper config enabled"
            ],
            "updatePoint": {
                "line": 47,
                "column": 45
            },
            "line": 47,
            "code": "    it(\"shows 12hr time with upper case AM/PM\", function () {\n      const timeRegex = /^(?:1[0-2]|[1-9]):[0-5]\\d[0-5]\\d[AP]M$/;\n      testMatch(\".clock .time\", timeRegex);\n    });",
            "file": "e2e/modules/clock_es_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows week with correct format",
            "suites": [
                "Clock set to spanish language module",
                "with showWeek config enabled"
            ],
            "updatePoint": {
                "line": 57,
                "column": 38
            },
            "line": 57,
            "code": "    it(\"shows week with correct format\", function () {\n      const weekRegex = /^Semana [0-9]{1,2}$/;\n      testMatch(\".clock .week\", weekRegex);\n    });",
            "file": "e2e/modules/clock_es_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the date in the correct format",
            "suites": [
                "Clock module",
                "with default 24hr clock config"
            ],
            "updatePoint": {
                "line": 21,
                "column": 50
            },
            "line": 21,
            "code": "    it(\"should show the date in the correct format\", function () {\n      const dateRegex = /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (?:January|February|March|April|May|June|July|August|September|October|November|December) \\d{1,2}, \\d{4}$/;\n      testMatch(\".clock .date\", dateRegex);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the time in 24hr format",
            "suites": [
                "Clock module",
                "with default 24hr clock config"
            ],
            "updatePoint": {
                "line": 25,
                "column": 43
            },
            "line": 25,
            "code": "    it(\"should show the time in 24hr format\", function () {\n      const timeRegex = /^(?:2[0-3]|[01]\\d):[0-5]\\d[0-5]\\d$/;\n      testMatch(\".clock .time\", timeRegex);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the date in the correct format",
            "suites": [
                "Clock module",
                "with default 12hr clock config"
            ],
            "updatePoint": {
                "line": 35,
                "column": 50
            },
            "line": 35,
            "code": "    it(\"should show the date in the correct format\", function () {\n      const dateRegex = /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (?:January|February|March|April|May|June|July|August|September|October|November|December) \\d{1,2}, \\d{4}$/;\n      testMatch(\".clock .date\", dateRegex);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the time in 12hr format",
            "suites": [
                "Clock module",
                "with default 12hr clock config"
            ],
            "updatePoint": {
                "line": 39,
                "column": 43
            },
            "line": 39,
            "code": "    it(\"should show the time in 12hr format\", function () {\n      const timeRegex = /^(?:1[0-2]|[1-9]):[0-5]\\d[0-5]\\d[ap]m$/;\n      testMatch(\".clock .time\", timeRegex);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show 12hr time with upper case AM/PM",
            "suites": [
                "Clock module",
                "with showPeriodUpper config enabled"
            ],
            "updatePoint": {
                "line": 49,
                "column": 51
            },
            "line": 49,
            "code": "    it(\"should show 12hr time with upper case AM/PM\", function () {\n      const timeRegex = /^(?:1[0-2]|[1-9]):[0-5]\\d[0-5]\\d[AP]M$/;\n      testMatch(\".clock .time\", timeRegex);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show 12hr time without seconds am/pm",
            "suites": [
                "Clock module",
                "with displaySeconds config disabled"
            ],
            "updatePoint": {
                "line": 59,
                "column": 51
            },
            "line": 59,
            "code": "    it(\"should show 12hr time without seconds am/pm\", function () {\n      const timeRegex = /^(?:1[0-2]|[1-9]):[0-5]\\d[ap]m$/;\n      testMatch(\".clock .time\", timeRegex);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show not show the time when digital clock is shown",
            "suites": [
                "Clock module",
                "with showTime config disabled"
            ],
            "updatePoint": {
                "line": 69,
                "column": 65
            },
            "line": 69,
            "code": "    it(\"should show not show the time when digital clock is shown\", function () {\n      const elem = document.querySelector(\".clock .digital .time\");\n      expect(elem).toBe(null);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the week in the correct format",
            "suites": [
                "Clock module",
                "with showWeek config enabled"
            ],
            "updatePoint": {
                "line": 79,
                "column": 50
            },
            "line": 79,
            "code": "    it(\"should show the week in the correct format\", function () {\n      const weekRegex = /^Week [0-9]{1,2}$/;\n      testMatch(\".clock .week\", weekRegex);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the week with the correct number of week of year",
            "suites": [
                "Clock module",
                "with showWeek config enabled"
            ],
            "updatePoint": {
                "line": 83,
                "column": 68
            },
            "line": 83,
            "code": "    it(\"should show the week with the correct number of week of year\", function () {\n      const currentWeekNumber = moment().week();\n      const weekToShow = \"Week \" + currentWeekNumber;\n      const elem = document.querySelector(\".clock .week\");\n      expect(elem).not.toBe(null);\n      expect(elem.textContent).toBe(weekToShow);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the analog clock face",
            "suites": [
                "Clock module",
                "with analog clock face enabled"
            ],
            "updatePoint": {
                "line": 96,
                "column": 41
            },
            "line": 96,
            "code": "    it(\"should show the analog clock face\", () => {\n      const elem = document.querySelector(\".clockCircle\");\n      expect(elem).not.toBe(null);\n    });",
            "file": "e2e/modules/clock_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "if Morning compliments for that part of day",
            "suites": [
                "Compliments module",
                "parts of days"
            ],
            "updatePoint": {
                "line": 26,
                "column": 51
            },
            "line": 26,
            "code": "    it(\"if Morning compliments for that part of day\", function () {\n      const hour = new Date().getHours();\n\n      if (hour >= 3 && hour < 12) {\n        // if morning check\n        doTest([\"Hi\", \"Good Morning\", \"Morning test\"]);\n      }\n    });",
            "file": "e2e/modules/compliments_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "if Afternoon show Compliments for that part of day",
            "suites": [
                "Compliments module",
                "parts of days"
            ],
            "updatePoint": {
                "line": 34,
                "column": 58
            },
            "line": 34,
            "code": "    it(\"if Afternoon show Compliments for that part of day\", function () {\n      const hour = new Date().getHours();\n\n      if (hour >= 12 && hour < 17) {\n        // if afternoon check\n        doTest([\"Hello\", \"Good Afternoon\", \"Afternoon test\"]);\n      }\n    });",
            "file": "e2e/modules/compliments_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "if Evening show Compliments for that part of day",
            "suites": [
                "Compliments module",
                "parts of days"
            ],
            "updatePoint": {
                "line": 42,
                "column": 56
            },
            "line": 42,
            "code": "    it(\"if Evening show Compliments for that part of day\", function () {\n      const hour = new Date().getHours();\n\n      if (!(hour >= 3 && hour < 12) && !(hour >= 12 && hour < 17)) {\n        // if evening check\n        doTest([\"Hello There\", \"Good Evening\", \"Evening test\"]);\n      }\n    });",
            "file": "e2e/modules/compliments_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Show anytime because if configure empty parts of day compliments and set anytime compliments",
            "suites": [
                "Compliments module",
                "Feature anytime in compliments module",
                "Set anytime and empty compliments for morning, evening and afternoon "
            ],
            "updatePoint": {
                "line": 57,
                "column": 102
            },
            "line": 57,
            "code": "      it(\"Show anytime because if configure empty parts of day compliments and set anytime compliments\", function () {\n        doTest([\"Anytime here\"]);\n      });",
            "file": "e2e/modules/compliments_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Show anytime compliments",
            "suites": [
                "Compliments module",
                "Feature anytime in compliments module",
                "Only anytime present in configuration compliments"
            ],
            "updatePoint": {
                "line": 66,
                "column": 34
            },
            "line": 66,
            "code": "      it(\"Show anytime compliments\", function () {\n        doTest([\"Anytime here\"]);\n      });",
            "file": "e2e/modules/compliments_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Show happy new year compliment on new years day",
            "suites": [
                "Compliments module",
                "Feature date in compliments module",
                "Set date and empty compliments for anytime, morning, evening and afternoon"
            ],
            "updatePoint": {
                "line": 77,
                "column": 57
            },
            "line": 77,
            "code": "      it(\"Show happy new year compliment on new years day\", function () {\n        doTest([\"Happy new year!\"]);\n      });",
            "file": "e2e/modules/compliments_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Test message helloworld module",
            "suites": [
                "Test helloworld module",
                "helloworld set config text"
            ],
            "updatePoint": {
                "line": 12,
                "column": 38
            },
            "line": 12,
            "code": "    it(\"Test message helloworld module\", function () {\n      const elem = document.querySelector(\".helloworld\");\n      expect(elem).not.toBe(null);\n      expect(elem.textContent).toContain(\"Test HelloWorld Module\");\n    });",
            "file": "e2e/modules/helloworld_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Test message helloworld module",
            "suites": [
                "Test helloworld module",
                "helloworld default config text"
            ],
            "updatePoint": {
                "line": 23,
                "column": 38
            },
            "line": 23,
            "code": "    it(\"Test message helloworld module\", function () {\n      const elem = document.querySelector(\".helloworld\");\n      expect(elem).not.toBe(null);\n      expect(elem.textContent).toContain(\"Hello World!\");\n    });",
            "file": "e2e/modules/helloworld_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the newsfeed title",
            "suites": [
                "Newsfeed module",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 12,
                "column": 38
            },
            "line": 12,
            "code": "    it(\"should show the newsfeed title\", function () {\n      const elem = document.querySelector(\".newsfeed .newsfeed-source\");\n      expect(elem).not.toBe(null);\n      expect(elem.textContent).toContain(\"Rodrigo Ramirez Blog\");\n    });",
            "file": "e2e/modules/newsfeed_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the newsfeed article",
            "suites": [
                "Newsfeed module",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 17,
                "column": 40
            },
            "line": 17,
            "code": "    it(\"should show the newsfeed article\", function () {\n      const elem = document.querySelector(\".newsfeed .newsfeed-title\");\n      expect(elem).not.toBe(null);\n      expect(elem.textContent).toContain(\"QPanel\");\n    });",
            "file": "e2e/modules/newsfeed_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should NOT show the newsfeed description",
            "suites": [
                "Newsfeed module",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 22,
                "column": 48
            },
            "line": 22,
            "code": "    it(\"should NOT show the newsfeed description\", () => {\n      const elem = document.querySelector(\".newsfeed .newsfeed-desc\");\n      expect(elem).toBe(null);\n    });",
            "file": "e2e/modules/newsfeed_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not show articles with prohibited words",
            "suites": [
                "Newsfeed module",
                "Custom configuration"
            ],
            "updatePoint": {
                "line": 32,
                "column": 54
            },
            "line": 32,
            "code": "    it(\"should not show articles with prohibited words\", function () {\n      const elem = document.querySelector(\".newsfeed .newsfeed-title\");\n      expect(elem).not.toBe(null);\n      expect(elem.textContent).toContain(\"Problema VirtualBox\");\n    });",
            "file": "e2e/modules/newsfeed_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the newsfeed description",
            "suites": [
                "Newsfeed module",
                "Custom configuration"
            ],
            "updatePoint": {
                "line": 37,
                "column": 44
            },
            "line": 37,
            "code": "    it(\"should show the newsfeed description\", () => {\n      const elem = document.querySelector(\".newsfeed .newsfeed-desc\");\n      expect(elem).not.toBe(null);\n      expect(elem.textContent.length).not.toBe(0);\n    });",
            "file": "e2e/modules/newsfeed_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show malformed url warning",
            "suites": [
                "Newsfeed module",
                "Invalid configuration"
            ],
            "updatePoint": {
                "line": 48,
                "column": 41
            },
            "line": 48,
            "code": "    it(\"should show malformed url warning\", function () {\n      const elem = document.querySelector(\".newsfeed .small\");\n      expect(elem).not.toBe(null);\n      expect(elem.textContent).toContain(\"Error in the Newsfeed module. Malformed url.\");\n    });",
            "file": "e2e/modules/newsfeed_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should have a translation file in the specified path",
            "suites": [
                "Translations"
            ],
            "updatePoint": {
                "line": 32,
                "column": 58
            },
            "line": 32,
            "code": "  it(\"should have a translation file in the specified path\", function () {\n    for (let language in translations) {\n      const file = fs.statSync(translations[language]);\n      expect(file.isFile()).toBe(true);\n    }\n  });",
            "file": "e2e/translations_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load translation file",
            "suites": [
                "Translations",
                "loadTranslations"
            ],
            "updatePoint": {
                "line": 48,
                "column": 36
            },
            "line": 48,
            "code": "    it(\"should load translation file\", done => {\n      dom.window.onload = async function () {\n        const {\n          Translator,\n          Module,\n          config\n        } = dom.window;\n        config.language = \"en\";\n        Translator.load = sinon.stub().callsFake((_m, _f, _fb, callback) => callback());\n        Module.register(\"name\", {\n          getTranslations: () => translations\n        });\n        const MMM = Module.create(\"name\");\n        const loaded = sinon.stub();\n        MMM.loadTranslations(loaded);\n        expect(loaded.callCount).toBe(1);\n        expect(Translator.load.args.length).toBe(1);\n        expect(Translator.load.calledWith(MMM, \"translations/en.json\", false, sinon.match.func)).toBe(true);\n        done();\n      };\n    });",
            "file": "e2e/translations_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load translation + fallback file",
            "suites": [
                "Translations",
                "loadTranslations"
            ],
            "updatePoint": {
                "line": 69,
                "column": 47
            },
            "line": 69,
            "code": "    it(\"should load translation + fallback file\", done => {\n      dom.window.onload = async function () {\n        const {\n          Translator,\n          Module\n        } = dom.window;\n        Translator.load = sinon.stub().callsFake((_m, _f, _fb, callback) => callback());\n        Module.register(\"name\", {\n          getTranslations: () => translations\n        });\n        const MMM = Module.create(\"name\");\n        const loaded = sinon.stub();\n        MMM.loadTranslations(loaded);\n        expect(loaded.callCount).toBe(1);\n        expect(Translator.load.args.length).toBe(2);\n        expect(Translator.load.calledWith(MMM, \"translations/de.json\", false, sinon.match.func)).toBe(true);\n        expect(Translator.load.calledWith(MMM, \"translations/en.json\", true, sinon.match.func)).toBe(true);\n        done();\n      };\n    });",
            "file": "e2e/translations_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load translation fallback file",
            "suites": [
                "Translations",
                "loadTranslations"
            ],
            "updatePoint": {
                "line": 89,
                "column": 45
            },
            "line": 89,
            "code": "    it(\"should load translation fallback file\", done => {\n      dom.window.onload = async function () {\n        const {\n          Translator,\n          Module,\n          config\n        } = dom.window;\n        config.language = \"--\";\n        Translator.load = sinon.stub().callsFake((_m, _f, _fb, callback) => callback());\n        Module.register(\"name\", {\n          getTranslations: () => translations\n        });\n        const MMM = Module.create(\"name\");\n        const loaded = sinon.stub();\n        MMM.loadTranslations(loaded);\n        expect(loaded.callCount).toBe(1);\n        expect(Translator.load.args.length).toBe(1);\n        expect(Translator.load.calledWith(MMM, \"translations/en.json\", true, sinon.match.func)).toBe(true);\n        done();\n      };\n    });",
            "file": "e2e/translations_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load no file",
            "suites": [
                "Translations",
                "loadTranslations"
            ],
            "updatePoint": {
                "line": 110,
                "column": 27
            },
            "line": 110,
            "code": "    it(\"should load no file\", done => {\n      dom.window.onload = async function () {\n        const {\n          Translator,\n          Module\n        } = dom.window;\n        Translator.load = sinon.stub();\n        Module.register(\"name\", {});\n        const MMM = Module.create(\"name\");\n        const loaded = sinon.stub();\n        MMM.loadTranslations(loaded);\n        expect(loaded.callCount).toBe(1);\n        expect(Translator.load.callCount).toBe(0);\n        done();\n      };\n    });",
            "file": "e2e/translations_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse ",
            "suites": [
                "Translations",
                "Parsing language files through the Translator class"
            ],
            "updatePoint": {
                "line": 137,
                "column": 34
            },
            "line": 137,
            "code": "      it(`should parse ${language}`, function (done) {\n        const dom = new JSDOM(`<script>var translations = ${JSON.stringify(translations)}; var Log = {log: function(){}};</script>\\\n\t\t\t\t\t<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n          runScripts: \"dangerously\",\n          resources: \"usable\"\n        });\n\n        dom.window.onload = function () {\n          const {\n            Translator\n          } = dom.window;\n          Translator.load(mmm, translations[language], false, function () {\n            expect(typeof Translator.translations[mmm.name]).toBe(\"object\");\n            expect(Object.keys(Translator.translations[mmm.name]).length).toBeGreaterThanOrEqual(1);\n            done();\n          });\n        };\n      });",
            "file": "e2e/translations_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": " keys should be in base",
            "suites": [
                "Translations",
                "Same keys",
                "Translation keys of "
            ],
            "updatePoint": {
                "line": 205,
                "column": 46
            },
            "line": 205,
            "code": "        it(`${language} keys should be in base`, function () {\n          keys.forEach(function (key) {\n            expect(base.indexOf(key)).toBeGreaterThanOrEqual(0);\n          });\n        });",
            "file": "e2e/translations_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": " should contain all base keys",
            "suites": [
                "Translations",
                "Same keys",
                "Translation keys of "
            ],
            "updatePoint": {
                "line": 210,
                "column": 52
            },
            "line": 210,
            "code": "        it(`${language} should contain all base keys`, function () {\n          // TODO: when all translations are fixed, use\n          // expect(keys).toEqual(base);\n          // instead of the try-catch-block\n          try {\n            expect(keys).toEqual(base);\n          } catch (e) {\n            if (e.message.match(/expect.*toEqual/)) {\n              const diff = base.filter(key => !keys.includes(key));\n              missing.push(`Missing Translations for language ${language}: ${diff}`);\n            } else {\n              throw e;\n            }\n          }\n        });",
            "file": "e2e/translations_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return 200 HTTP code for vendor \"\"",
            "suites": [
                "Vendors",
                "Get list vendors"
            ],
            "updatePoint": {
                "line": 16,
                "column": 60
            },
            "line": 16,
            "code": "      it(`should return 200 HTTP code for vendor \"${vendor}\"`, function (done) {\n        const urlVendor = \"http://localhost:8080/vendor/\" + vendors[vendor];\n        fetch(urlVendor).then(res => {\n          expect(res.status).toBe(200);\n          done();\n        });\n      });",
            "file": "e2e/vendor_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return 404 HTTP code for vendor https://localhost/\"\"",
            "suites": [
                "Vendors",
                "Get list vendors"
            ],
            "updatePoint": {
                "line": 25,
                "column": 78
            },
            "line": 25,
            "code": "      it(`should return 404 HTTP code for vendor https://localhost/\"${vendor}\"`, function (done) {\n        const urlVendor = \"http://localhost:8080/\" + vendors[vendor];\n        fetch(urlVendor).then(res => {\n          expect(res.status).toBe(404);\n          done();\n        });\n      });",
            "file": "e2e/vendor_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should open a browserwindow",
            "suites": [
                "Electron app environment"
            ],
            "updatePoint": {
                "line": 20,
                "column": 33
            },
            "line": 20,
            "code": "  it(\"should open a browserwindow\", async function () {\n    await app.client.waitUntilWindowLoaded();\n    app.browserWindow.focus();\n    expect(await app.client.getWindowCount()).toBe(1);\n    expect(await app.browserWindow.isMinimized()).toBe(false);\n    expect(await app.browserWindow.isDevToolsOpened()).toBe(false);\n    expect(await app.browserWindow.isVisible()).toBe(true);\n    expect(await app.browserWindow.isFocused()).toBe(true);\n    const bounds = await app.browserWindow.getBounds();\n    expect(bounds.width).toBeGreaterThan(0);\n    expect(bounds.height).toBeGreaterThan(0);\n    expect(await app.browserWindow.getTitle()).toBe(\"MagicMirror²\");\n  });",
            "file": "electron/env_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the default maximumEntries of 10",
            "suites": [
                "Calendar module",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 23,
                "column": 52
            },
            "line": 23,
            "code": "    it(\"should show the default maximumEntries of 10\", async () => {\n      await app.client.waitUntilTextExists(\".calendar\", \"TestEvent\", 10000);\n      const events = await app.client.$$(\".calendar .event\");\n      return expect(events.length).toBe(10);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the default calendar symbol in each event",
            "suites": [
                "Calendar module",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 28,
                "column": 61
            },
            "line": 28,
            "code": "    it(\"should show the default calendar symbol in each event\", async () => {\n      await app.client.waitUntilTextExists(\".calendar\", \"TestEvent\", 10000);\n      const icons = await app.client.$$(\".calendar .event .fa-calendar\");\n      return expect(icons.length).not.toBe(0);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the custom maximumEntries of 4",
            "suites": [
                "Calendar module",
                "Custom configuration"
            ],
            "updatePoint": {
                "line": 39,
                "column": 50
            },
            "line": 39,
            "code": "    it(\"should show the custom maximumEntries of 4\", async () => {\n      await app.client.waitUntilTextExists(\".calendar\", \"TestEvent\", 10000);\n      const events = await app.client.$$(\".calendar .event\");\n      return expect(events.length).toBe(4);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the custom calendar symbol in each event",
            "suites": [
                "Calendar module",
                "Custom configuration"
            ],
            "updatePoint": {
                "line": 44,
                "column": 60
            },
            "line": 44,
            "code": "    it(\"should show the custom calendar symbol in each event\", async () => {\n      await app.client.waitUntilTextExists(\".calendar\", \"TestEvent\", 10000);\n      const icons = await app.client.$$(\".calendar .event .fa-birthday-cake\");\n      return expect(icons.length).toBe(4);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show two custom icons for repeating events",
            "suites": [
                "Calendar module",
                "Custom configuration"
            ],
            "updatePoint": {
                "line": 49,
                "column": 57
            },
            "line": 49,
            "code": "    it(\"should show two custom icons for repeating events\", async () => {\n      await app.client.waitUntilTextExists(\".calendar\", \"TestEventRepeat\", 10000);\n      const icons = await app.client.$$(\".calendar .event .fa-undo\");\n      return expect(icons.length).toBe(2);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show two custom icons for day events",
            "suites": [
                "Calendar module",
                "Custom configuration"
            ],
            "updatePoint": {
                "line": 54,
                "column": 51
            },
            "line": 54,
            "code": "    it(\"should show two custom icons for day events\", async () => {\n      await app.client.waitUntilTextExists(\".calendar\", \"TestEventDay\", 10000);\n      const icons = await app.client.$$(\".calendar .event .fa-calendar-day\");\n      return expect(icons.length).toBe(2);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show the recurring birthday event 6 times",
            "suites": [
                "Calendar module",
                "Recurring event"
            ],
            "updatePoint": {
                "line": 65,
                "column": 56
            },
            "line": 65,
            "code": "    it(\"should show the recurring birthday event 6 times\", async () => {\n      await app.client.waitUntilTextExists(\".calendar\", \"Mar 25th\", 10000);\n      const events = await app.client.$$(\".calendar .event\");\n      return expect(events.length).toBe(6);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return TestEvents",
            "suites": [
                "Calendar module",
                "Changed port"
            ],
            "updatePoint": {
                "line": 80,
                "column": 32
            },
            "line": 80,
            "code": "    it(\"should return TestEvents\", function () {\n      return app.client.waitUntilTextExists(\".calendar\", \"TestEvent\", 10000);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return TestEvents",
            "suites": [
                "Calendar module",
                "Basic auth"
            ],
            "updatePoint": {
                "line": 89,
                "column": 32
            },
            "line": 89,
            "code": "    it(\"should return TestEvents\", function () {\n      return app.client.waitUntilTextExists(\".calendar\", \"TestEvent\", 10000);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return TestEvents",
            "suites": [
                "Calendar module",
                "Basic auth by default"
            ],
            "updatePoint": {
                "line": 98,
                "column": 32
            },
            "line": 98,
            "code": "    it(\"should return TestEvents\", function () {\n      return app.client.waitUntilTextExists(\".calendar\", \"TestEvent\", 10000);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return TestEvents",
            "suites": [
                "Calendar module",
                "Basic auth backward compatibility configuration: DEPRECATED"
            ],
            "updatePoint": {
                "line": 107,
                "column": 32
            },
            "line": 107,
            "code": "    it(\"should return TestEvents\", function () {\n      return app.client.waitUntilTextExists(\".calendar\", \"TestEvent\", 10000);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should show Unauthorized error",
            "suites": [
                "Calendar module",
                "Fail Basic auth"
            ],
            "updatePoint": {
                "line": 120,
                "column": 38
            },
            "line": 120,
            "code": "    it(\"should show Unauthorized error\", function () {\n      return app.client.waitUntilTextExists(\".calendar\", \"Error in the calendar module. Authorization failed\", 10000);\n    });",
            "file": "electron/modules/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render wind speed and wind direction",
            "suites": [
                "Weather module",
                "Current weather",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 69,
                "column": 53
            },
            "line": 69,
            "code": "      it(\"should render wind speed and wind direction\", async function () {\n        const weather = generateWeather();\n        await setup({\n          template,\n          data: weather\n        });\n        return getText(\".weather .normal.medium span:nth-child(2)\", \"6 WSW\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render sunrise",
            "suites": [
                "Weather module",
                "Current weather",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 77,
                "column": 31
            },
            "line": 77,
            "code": "      it(\"should render sunrise\", async function () {\n        const sunrise = moment().startOf(\"day\").unix();\n        const sunset = moment().startOf(\"day\").unix();\n        const weather = generateWeather({\n          sys: {\n            sunrise,\n            sunset\n          }\n        });\n        await setup({\n          template,\n          data: weather\n        });\n        return getText(\".weather .normal.medium span:nth-child(4)\", \"12:00 am\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render sunset",
            "suites": [
                "Weather module",
                "Current weather",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 92,
                "column": 30
            },
            "line": 92,
            "code": "      it(\"should render sunset\", async function () {\n        const sunrise = moment().startOf(\"day\").unix();\n        const sunset = moment().endOf(\"day\").unix();\n        const weather = generateWeather({\n          sys: {\n            sunrise,\n            sunset\n          }\n        });\n        await setup({\n          template,\n          data: weather\n        });\n        return getText(\".weather .normal.medium span:nth-child(4)\", \"11:59 pm\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render temperature with icon",
            "suites": [
                "Weather module",
                "Current weather",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 107,
                "column": 45
            },
            "line": 107,
            "code": "      it(\"should render temperature with icon\", async function () {\n        const weather = generateWeather();\n        await setup({\n          template,\n          data: weather\n        });\n        return getText(\".weather .large.light span.bright\", \"1.5°\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render feels like temperature",
            "suites": [
                "Weather module",
                "Current weather",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 115,
                "column": 46
            },
            "line": 115,
            "code": "      it(\"should render feels like temperature\", async function () {\n        const weather = generateWeather();\n        await setup({\n          template,\n          data: weather\n        });\n        return getText(\".weather .normal.medium.feelslike span.dimmed\", \"Feels like -5.6°\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render a compliment based on the current weather",
            "suites": [
                "Weather module",
                "Current weather",
                "Compliments Integration"
            ],
            "updatePoint": {
                "line": 128,
                "column": 65
            },
            "line": 128,
            "code": "      it(\"should render a compliment based on the current weather\", async function () {\n        const weather = generateWeather();\n        await setup({\n          template,\n          data: weather\n        });\n        return app.client.waitUntilTextExists(\".compliments .module-content span\", \"snow\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render useBeaufort = false",
            "suites": [
                "Weather module",
                "Current weather",
                "Configuration Options"
            ],
            "updatePoint": {
                "line": 141,
                "column": 43
            },
            "line": 141,
            "code": "      it(\"should render useBeaufort = false\", async function () {\n        const weather = generateWeather();\n        await setup({\n          template,\n          data: weather\n        });\n        return getText(\".weather .normal.medium span:nth-child(2)\", \"12\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render showWindDirectionAsArrow = true",
            "suites": [
                "Weather module",
                "Current weather",
                "Configuration Options"
            ],
            "updatePoint": {
                "line": 149,
                "column": 55
            },
            "line": 149,
            "code": "      it(\"should render showWindDirectionAsArrow = true\", async function () {\n        const weather = generateWeather();\n        await setup({\n          template,\n          data: weather\n        });\n        const elem = await getElement(\".weather .normal.medium sup i.fa-long-arrow-up\");\n        return elem.getHTML(\".weather .normal.medium sup i.fa-long-arrow-up\").then(function (text) {\n          expect(text).toContain(\"transform:rotate(250deg);\");\n        });\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render showHumidity = true",
            "suites": [
                "Weather module",
                "Current weather",
                "Configuration Options"
            ],
            "updatePoint": {
                "line": 160,
                "column": 43
            },
            "line": 160,
            "code": "      it(\"should render showHumidity = true\", async function () {\n        const weather = generateWeather();\n        await setup({\n          template,\n          data: weather\n        });\n        return getText(\".weather .normal.medium span:nth-child(3)\", \"93.7\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render degreeLabel = true",
            "suites": [
                "Weather module",
                "Current weather",
                "Configuration Options"
            ],
            "updatePoint": {
                "line": 168,
                "column": 42
            },
            "line": 168,
            "code": "      it(\"should render degreeLabel = true\", async function () {\n        const weather = generateWeather();\n        await setup({\n          template,\n          data: weather\n        });\n        return (await getText(\".weather .large.light span.bright\", \"1°C\")) && (await getText(\".weather .normal.medium.feelslike span.dimmed\", \"Feels like -6°C\"));\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render imperial units",
            "suites": [
                "Weather module",
                "Current weather",
                "Current weather units"
            ],
            "updatePoint": {
                "line": 181,
                "column": 38
            },
            "line": 181,
            "code": "      it(\"should render imperial units\", async function () {\n        const weather = generateWeather({\n          main: {\n            temp: 1.49 * 9 / 5 + 32,\n            temp_min: 1 * 9 / 5 + 32,\n            temp_max: 2 * 9 / 5 + 32\n          },\n          wind: {\n            speed: 11.8 * 2.23694\n          }\n        });\n        await setup({\n          template,\n          data: weather\n        });\n        return (await getText(\".weather .normal.medium span:nth-child(2)\", \"6 WSW\")) && (await getText(\".weather .large.light span.bright\", \"34,7°\")) && getText(\".weather .normal.medium.feelslike span.dimmed\", \"Feels like 22,0°\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render custom decimalSymbol = ','",
            "suites": [
                "Weather module",
                "Current weather",
                "Current weather units"
            ],
            "updatePoint": {
                "line": 198,
                "column": 50
            },
            "line": 198,
            "code": "      it(\"should render custom decimalSymbol = ','\", async function () {\n        const weather = generateWeather({\n          main: {\n            temp: 1.49 * 9 / 5 + 32,\n            temp_min: 1 * 9 / 5 + 32,\n            temp_max: 2 * 9 / 5 + 32\n          },\n          wind: {\n            speed: 11.8 * 2.23694\n          }\n        });\n        await setup({\n          template,\n          data: weather\n        });\n        return (await getText(\".weather .normal.medium span:nth-child(3)\", \"93,7\")) && (await getText(\".weather .large.light span.bright\", \"34,7°\")) && getText(\".weather .normal.medium.feelslike span.dimmed\", \"Feels like 22,0°\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render days",
            "suites": [
                "Weather module",
                "Weather Forecast",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 226,
                "column": 28
            },
            "line": 226,
            "code": "      it(\"should render days\", async function () {\n        const weather = generateWeatherForecast();\n        await setup({\n          template,\n          data: weather\n        });\n        const days = [\"Today\", \"Tomorrow\", \"Sun\", \"Mon\", \"Tue\"];\n\n        for (const [index, day] of days.entries()) {\n          await getText(`.weather table.small tr:nth-child(${index + 1}) td:nth-child(1)`, day);\n        }\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render icons",
            "suites": [
                "Weather module",
                "Weather Forecast",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 238,
                "column": 29
            },
            "line": 238,
            "code": "      it(\"should render icons\", async function () {\n        const weather = generateWeatherForecast();\n        await setup({\n          template,\n          data: weather\n        });\n        const icons = [\"day-cloudy\", \"rain\", \"day-sunny\", \"day-sunny\", \"day-sunny\"];\n\n        for (const [index, icon] of icons.entries()) {\n          await getElement(`.weather table.small tr:nth-child(${index + 1}) td:nth-child(2) span.wi-${icon}`);\n        }\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render max temperatures",
            "suites": [
                "Weather module",
                "Weather Forecast",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 250,
                "column": 40
            },
            "line": 250,
            "code": "      it(\"should render max temperatures\", async function () {\n        const weather = generateWeatherForecast();\n        await setup({\n          template,\n          data: weather\n        });\n        const temperatures = [\"24.4°\", \"21.0°\", \"22.9°\", \"23.4°\", \"20.6°\"];\n\n        for (const [index, temp] of temperatures.entries()) {\n          await getText(`.weather table.small tr:nth-child(${index + 1}) td:nth-child(3)`, temp);\n        }\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render min temperatures",
            "suites": [
                "Weather module",
                "Weather Forecast",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 262,
                "column": 40
            },
            "line": 262,
            "code": "      it(\"should render min temperatures\", async function () {\n        const weather = generateWeatherForecast();\n        await setup({\n          template,\n          data: weather\n        });\n        const temperatures = [\"15.3°\", \"13.6°\", \"13.8°\", \"13.9°\", \"10.9°\"];\n\n        for (const [index, temp] of temperatures.entries()) {\n          await getText(`.weather table.small tr:nth-child(${index + 1}) td:nth-child(4)`, temp);\n        }\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render fading of rows",
            "suites": [
                "Weather module",
                "Weather Forecast",
                "Default configuration"
            ],
            "updatePoint": {
                "line": 274,
                "column": 38
            },
            "line": 274,
            "code": "      it(\"should render fading of rows\", async function () {\n        const weather = generateWeatherForecast();\n        await setup({\n          template,\n          data: weather\n        });\n        const opacities = [1, 1, 0.8, 0.5333333333333333, 0.2666666666666667];\n        const elem = await getElement(\".weather table.small\");\n\n        for (const [index, opacity] of opacities.entries()) {\n          const html = await elem.getHTML(`.weather table.small tr:nth-child(${index + 1})`);\n          expect(html).toContain(`<tr style=\"opacity: ${opacity};\">`);\n        }\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render custom table class",
            "suites": [
                "Weather module",
                "Weather Forecast",
                "Configuration Options"
            ],
            "updatePoint": {
                "line": 293,
                "column": 42
            },
            "line": 293,
            "code": "      it(\"should render custom table class\", async function () {\n        const weather = generateWeatherForecast();\n        await setup({\n          template,\n          data: weather\n        });\n        await getElement(\".weather table.myTableClass\");\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render colored rows",
            "suites": [
                "Weather module",
                "Weather Forecast",
                "Configuration Options"
            ],
            "updatePoint": {
                "line": 301,
                "column": 36
            },
            "line": 301,
            "code": "      it(\"should render colored rows\", async function () {\n        const weather = generateWeatherForecast();\n        await setup({\n          template,\n          data: weather\n        });\n        const rows = await app.client.$$(\".weather table.myTableClass tr.colored\");\n        expect(rows.length).toBe(5);\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should render custom decimalSymbol = '_'",
            "suites": [
                "Weather module",
                "Weather Forecast",
                "Forecast weather units"
            ],
            "updatePoint": {
                "line": 315,
                "column": 50
            },
            "line": 315,
            "code": "      it(\"should render custom decimalSymbol = '_'\", async function () {\n        const weather = generateWeatherForecast();\n        await setup({\n          template,\n          data: weather\n        });\n        const temperatures = [\"24_4°\", \"21_0°\", \"22_9°\", \"23_4°\", \"20_6°\"];\n\n        for (const [index, temp] of temperatures.entries()) {\n          await getText(`.weather table.small tr:nth-child(${index + 1}) td:nth-child(3)`, temp);\n        }\n      });",
            "file": "electron/modules/weather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clone object",
            "suites": [
                "File js/class",
                "Test function cloneObject"
            ],
            "updatePoint": {
                "line": 26,
                "column": 27
            },
            "line": 26,
            "code": "    it(\"should clone object\", function () {\n      const expected = {\n        name: \"Rodrigo\",\n        web: \"https://rodrigoramirez.com\",\n        project: \"MagicMirror\"\n      };\n      const obj = clone(expected);\n      expect(obj).toEqual(expected);\n      expect(expected === obj).toBe(false);\n    });",
            "file": "unit/classes/class_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clone array",
            "suites": [
                "File js/class",
                "Test function cloneObject"
            ],
            "updatePoint": {
                "line": 36,
                "column": 26
            },
            "line": 36,
            "code": "    it(\"should clone array\", function () {\n      const expected = [1, null, undefined, \"TEST\"];\n      const obj = clone(expected);\n      expect(obj).toEqual(expected);\n      expect(expected === obj).toBe(false);\n    });",
            "file": "unit/classes/class_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clone number",
            "suites": [
                "File js/class",
                "Test function cloneObject"
            ],
            "updatePoint": {
                "line": 42,
                "column": 27
            },
            "line": 42,
            "code": "    it(\"should clone number\", function () {\n      let expected = 1;\n      let obj = clone(expected);\n      expect(obj).toBe(expected);\n      expected = 1.23;\n      obj = clone(expected);\n      expect(obj).toBe(expected);\n    });",
            "file": "unit/classes/class_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clone string",
            "suites": [
                "File js/class",
                "Test function cloneObject"
            ],
            "updatePoint": {
                "line": 50,
                "column": 27
            },
            "line": 50,
            "code": "    it(\"should clone string\", function () {\n      const expected = \"Perfect stranger\";\n      const obj = clone(expected);\n      expect(obj).toBe(expected);\n    });",
            "file": "unit/classes/class_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clone undefined",
            "suites": [
                "File js/class",
                "Test function cloneObject"
            ],
            "updatePoint": {
                "line": 55,
                "column": 30
            },
            "line": 55,
            "code": "    it(\"should clone undefined\", function () {\n      const expected = undefined;\n      const obj = clone(expected);\n      expect(obj).toBe(expected);\n    });",
            "file": "unit/classes/class_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clone null",
            "suites": [
                "File js/class",
                "Test function cloneObject"
            ],
            "updatePoint": {
                "line": 60,
                "column": 25
            },
            "line": 60,
            "code": "    it(\"should clone null\", function () {\n      const expected = null;\n      const obj = clone(expected);\n      expect(obj).toBe(expected);\n    });",
            "file": "unit/classes/class_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clone nested object",
            "suites": [
                "File js/class",
                "Test function cloneObject"
            ],
            "updatePoint": {
                "line": 65,
                "column": 34
            },
            "line": 65,
            "code": "    it(\"should clone nested object\", function () {\n      const expected = {\n        name: \"fewieden\",\n        link: \"https://github.com/fewieden\",\n        versions: [\"2.0\", \"2.1\", \"2.2\"],\n        answerForAllQuestions: 42,\n        properties: {\n          items: [{\n            foo: \"bar\"\n          }, {\n            lorem: \"ipsum\"\n          }],\n          invalid: undefined,\n          nothing: null\n        }\n      };\n      const obj = clone(expected);\n      expect(obj).toEqual(expected);\n      expect(expected === obj).toBe(false);\n      expect(expected.versions === obj.versions).toBe(false);\n      expect(expected.properties === obj.properties).toBe(false);\n      expect(expected.properties.items === obj.properties.items).toBe(false);\n      expect(expected.properties.items[0] === obj.properties.items[0]).toBe(false);\n      expect(expected.properties.items[1] === obj.properties.items[1]).toBe(false);\n    });",
            "file": "unit/classes/class_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should clone object and log lockStrings",
            "suites": [
                "File js/class",
                "Test function cloneObject",
                "Test lockstring code"
            ],
            "updatePoint": {
                "line": 102,
                "column": 49
            },
            "line": 102,
            "code": "      it(\"should clone object and log lockStrings\", function () {\n        const expected = {\n          name: \"Module\",\n          lockStrings: \"stringLock\"\n        };\n        const obj = clone(expected);\n        expect(obj).toEqual(expected);\n        expect(expected === obj).toBe(false);\n      });",
            "file": "unit/classes/class_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be an object",
            "suites": [
                "Deprecated"
            ],
            "updatePoint": {
                "line": 4,
                "column": 25
            },
            "line": 4,
            "code": "  it(\"should be an object\", function () {\n    expect(typeof deprecated).toBe(\"object\");\n  });",
            "file": "unit/classes/deprecated_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should contain configs array with deprecated options as strings",
            "suites": [
                "Deprecated"
            ],
            "updatePoint": {
                "line": 7,
                "column": 69
            },
            "line": 7,
            "code": "  it(\"should contain configs array with deprecated options as strings\", function () {\n    expect(Array.isArray([\"deprecated.configs\"])).toBe(true);\n\n    for (let option of deprecated.configs) {\n      expect(typeof option).toBe(\"string\");\n    }\n\n    expect(deprecated.configs).toEqual(expect.arrayContaining([\"kioskmode\"]));\n  });",
            "file": "unit/classes/deprecated_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return custom module translation",
            "suites": [
                "Translator",
                "translate"
            ],
            "updatePoint": {
                "line": 76,
                "column": 47
            },
            "line": 76,
            "code": "    it(\"should return custom module translation\", function (done) {\n      const dom = new JSDOM(`<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        setTranslations(Translator);\n        let translation = Translator.translate({\n          name: \"MMM-Module\"\n        }, \"Hello\");\n        expect(translation).toBe(\"Hallo\");\n        translation = Translator.translate({\n          name: \"MMM-Module\"\n        }, \"Hello {username}\", {\n          username: \"fewieden\"\n        });\n        expect(translation).toBe(\"Hallo fewieden\");\n        done();\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return core translation",
            "suites": [
                "Translator",
                "translate"
            ],
            "updatePoint": {
                "line": 100,
                "column": 38
            },
            "line": 100,
            "code": "    it(\"should return core translation\", function (done) {\n      const dom = new JSDOM(`<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        setTranslations(Translator);\n        let translation = Translator.translate({\n          name: \"MMM-Module\"\n        }, \"FOO\");\n        expect(translation).toBe(\"Foo\");\n        translation = Translator.translate({\n          name: \"MMM-Module\"\n        }, \"BAR {something}\", {\n          something: \"Lorem Ipsum\"\n        });\n        expect(translation).toBe(\"Bar Lorem Ipsum\");\n        done();\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return custom module translation fallback",
            "suites": [
                "Translator",
                "translate"
            ],
            "updatePoint": {
                "line": 124,
                "column": 56
            },
            "line": 124,
            "code": "    it(\"should return custom module translation fallback\", function (done) {\n      const dom = new JSDOM(`<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        setTranslations(Translator);\n        const translation = Translator.translate({\n          name: \"MMM-Module\"\n        }, \"A key\");\n        expect(translation).toBe(\"A translation\");\n        done();\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return core translation fallback",
            "suites": [
                "Translator",
                "translate"
            ],
            "updatePoint": {
                "line": 142,
                "column": 47
            },
            "line": 142,
            "code": "    it(\"should return core translation fallback\", function (done) {\n      const dom = new JSDOM(`<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        setTranslations(Translator);\n        const translation = Translator.translate({\n          name: \"MMM-Module\"\n        }, \"Fallback\");\n        expect(translation).toBe(\"core fallback\");\n        done();\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return translation with placeholder for missing variables",
            "suites": [
                "Translator",
                "translate"
            ],
            "updatePoint": {
                "line": 160,
                "column": 72
            },
            "line": 160,
            "code": "    it(\"should return translation with placeholder for missing variables\", function (done) {\n      const dom = new JSDOM(`<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        setTranslations(Translator);\n        const translation = Translator.translate({\n          name: \"MMM-Module\"\n        }, \"Hello {username}\");\n        expect(translation).toBe(\"Hallo {username}\");\n        done();\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return key if no translation was found",
            "suites": [
                "Translator",
                "translate"
            ],
            "updatePoint": {
                "line": 178,
                "column": 53
            },
            "line": 178,
            "code": "    it(\"should return key if no translation was found\", function (done) {\n      const dom = new JSDOM(`<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        setTranslations(Translator);\n        const translation = Translator.translate({\n          name: \"MMM-Module\"\n        }, \"MISSING\");\n        expect(translation).toBe(\"MISSING\");\n        done();\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load translations",
            "suites": [
                "Translator",
                "load"
            ],
            "updatePoint": {
                "line": 206,
                "column": 32
            },
            "line": 206,
            "code": "    it(\"should load translations\", function (done) {\n      const dom = new JSDOM(`<script>var Log = {log: function(){}};</script><script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        const file = \"TranslationTest.json\";\n        Translator.load(mmm, file, false, function () {\n          const json = require(path.join(__dirname, \"..\", \"..\", \"..\", \"tests\", \"configs\", \"data\", file));\n\n          expect(Translator.translations[mmm.name]).toEqual(json);\n          done();\n        });\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load translation fallbacks",
            "suites": [
                "Translator",
                "load"
            ],
            "updatePoint": {
                "line": 225,
                "column": 41
            },
            "line": 225,
            "code": "    it(\"should load translation fallbacks\", function (done) {\n      const dom = new JSDOM(`<script>var Log = {log: function(){}};</script><script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        const file = \"TranslationTest.json\";\n        Translator.load(mmm, file, true, function () {\n          const json = require(path.join(__dirname, \"..\", \"..\", \"..\", \"tests\", \"configs\", \"data\", file));\n\n          expect(Translator.translationsFallback[mmm.name]).toEqual(json);\n          done();\n        });\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not load translations, if module fallback exists",
            "suites": [
                "Translator",
                "load"
            ],
            "updatePoint": {
                "line": 244,
                "column": 63
            },
            "line": 244,
            "code": "    it(\"should not load translations, if module fallback exists\", function (done) {\n      const dom = new JSDOM(`<script>var Log = {log: function(){}};</script><script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator,\n          XMLHttpRequest\n        } = dom.window;\n        const file = \"TranslationTest.json\";\n\n        XMLHttpRequest.prototype.send = function () {\n          throw \"Shouldn't load files\";\n        };\n\n        Translator.translationsFallback[mmm.name] = {\n          Hello: \"Hallo\"\n        };\n        Translator.load(mmm, file, false, function () {\n          expect(Translator.translations[mmm.name]).toBe(undefined);\n          expect(Translator.translationsFallback[mmm.name]).toEqual({\n            Hello: \"Hallo\"\n          });\n          done();\n        });\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load core translations and fallback",
            "suites": [
                "Translator",
                "loadCoreTranslations"
            ],
            "updatePoint": {
                "line": 275,
                "column": 50
            },
            "line": 275,
            "code": "    it(\"should load core translations and fallback\", function (done) {\n      const dom = new JSDOM(`<script>var translations = {en: \"http://localhost:3000/translations/en.json\"}; var Log = {log: function(){}};</script>\\\n\t\t\t\t\t<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        Translator.loadCoreTranslations(\"en\");\n\n        const en = require(path.join(__dirname, \"..\", \"..\", \"..\", \"tests\", \"configs\", \"data\", \"en.json\"));\n\n        setTimeout(function () {\n          expect(Translator.coreTranslations).toEqual(en);\n          expect(Translator.coreTranslationsFallback).toEqual(en);\n          done();\n        }, 500);\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load core fallback if language cannot be found",
            "suites": [
                "Translator",
                "loadCoreTranslations"
            ],
            "updatePoint": {
                "line": 297,
                "column": 61
            },
            "line": 297,
            "code": "    it(\"should load core fallback if language cannot be found\", function (done) {\n      const dom = new JSDOM(`<script>var translations = {en: \"http://localhost:3000/translations/en.json\"}; var Log = {log: function(){}};</script>\\\n\t\t\t\t\t<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        Translator.loadCoreTranslations(\"MISSINGLANG\");\n\n        const en = require(path.join(__dirname, \"..\", \"..\", \"..\", \"tests\", \"configs\", \"data\", \"en.json\"));\n\n        setTimeout(function () {\n          expect(Translator.coreTranslations).toEqual({});\n          expect(Translator.coreTranslationsFallback).toEqual(en);\n          done();\n        }, 500);\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load core translations fallback",
            "suites": [
                "Translator",
                "loadCoreTranslationsFallback"
            ],
            "updatePoint": {
                "line": 321,
                "column": 46
            },
            "line": 321,
            "code": "    it(\"should load core translations fallback\", function (done) {\n      const dom = new JSDOM(`<script>var translations = {en: \"http://localhost:3000/translations/en.json\"}; var Log = {log: function(){}};</script>\\\n\t\t\t\t\t<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        Translator.loadCoreTranslationsFallback();\n\n        const en = require(path.join(__dirname, \"..\", \"..\", \"..\", \"tests\", \"configs\", \"data\", \"en.json\"));\n\n        setTimeout(function () {\n          expect(Translator.coreTranslationsFallback).toEqual(en);\n          done();\n        }, 500);\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should load core fallback if language cannot be found",
            "suites": [
                "Translator",
                "loadCoreTranslationsFallback"
            ],
            "updatePoint": {
                "line": 342,
                "column": 61
            },
            "line": 342,
            "code": "    it(\"should load core fallback if language cannot be found\", function (done) {\n      const dom = new JSDOM(`<script>var translations = {}; var Log = {log: function(){}};</script>\\\n\t\t\t\t\t<script src=\"file://${path.join(__dirname, \"..\", \"..\", \"..\", \"js\", \"translator.js\")}\">`, {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      });\n\n      dom.window.onload = function () {\n        const {\n          Translator\n        } = dom.window;\n        Translator.loadCoreTranslations();\n        setTimeout(function () {\n          expect(Translator.coreTranslationsFallback).toEqual({});\n          done();\n        }, 500);\n      };\n    });",
            "file": "unit/classes/translator_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should have info, warn and error properties",
            "suites": [
                "Utils",
                "colors"
            ],
            "updatePoint": {
                "line": 11,
                "column": 51
            },
            "line": 11,
            "code": "    it(\"should have info, warn and error properties\", function () {\n      expect(Utils.colors).toHaveProperty(\"info\");\n      expect(Utils.colors).toHaveProperty(\"warn\");\n      expect(Utils.colors).toHaveProperty(\"error\");\n    });",
            "file": "unit/classes/utils_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "properties should be functions",
            "suites": [
                "Utils",
                "colors"
            ],
            "updatePoint": {
                "line": 16,
                "column": 38
            },
            "line": 16,
            "code": "    it(\"properties should be functions\", function () {\n      expect(typeof Utils.colors.info).toBe(\"function\");\n      expect(typeof Utils.colors.warn).toBe(\"function\");\n      expect(typeof Utils.colors.error).toBe(\"function\");\n    });",
            "file": "unit/classes/utils_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should print colored message in supported consoles",
            "suites": [
                "Utils",
                "colors"
            ],
            "updatePoint": {
                "line": 21,
                "column": 58
            },
            "line": 21,
            "code": "    it(\"should print colored message in supported consoles\", function () {\n      colors.enabled = true;\n      expect(Utils.colors.info(\"some informations\")).toBe(\"\\u001b[34msome informations\\u001b[39m\");\n      expect(Utils.colors.warn(\"a warning\")).toBe(\"\\u001b[33ma warning\\u001b[39m\");\n      expect(Utils.colors.error(\"ERROR!\")).toBe(\"\\u001b[31mERROR!\\u001b[39m\");\n    });",
            "file": "unit/classes/utils_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should print message in unsupported consoles",
            "suites": [
                "Utils",
                "colors"
            ],
            "updatePoint": {
                "line": 27,
                "column": 52
            },
            "line": 27,
            "code": "    it(\"should print message in unsupported consoles\", function () {\n      colors.enabled = false;\n      expect(Utils.colors.info(\"some informations\")).toBe(\"some informations\");\n      expect(Utils.colors.warn(\"a warning\")).toBe(\"a warning\");\n      expect(Utils.colors.error(\"ERROR!\")).toBe(\"ERROR!\");\n    });",
            "file": "unit/classes/utils_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "for '' should return ''",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "capFirst"
            ],
            "updatePoint": {
                "line": 24,
                "column": 54
            },
            "line": 24,
            "code": "      it(`for '${word}' should return '${words[word]}'`, function () {\n        expect(Module.definitions.calendar.capFirst(word)).toBe(words[word]);\n      });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a valid moment.LocaleSpecification for a 12-hour format",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 30,
                "column": 77
            },
            "line": 30,
            "code": "    it(\"should return a valid moment.LocaleSpecification for a 12-hour format\", function () {\n      expect(Module.definitions.calendar.getLocaleSpecification(12)).toEqual({\n        longDateFormat: {\n          LT: \"h:mm A\"\n        }\n      });\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a valid moment.LocaleSpecification for a 24-hour format",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 37,
                "column": 77
            },
            "line": 37,
            "code": "    it(\"should return a valid moment.LocaleSpecification for a 24-hour format\", function () {\n      expect(Module.definitions.calendar.getLocaleSpecification(24)).toEqual({\n        longDateFormat: {\n          LT: \"HH:mm\"\n        }\n      });\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return the current system locale when called without timeFormat number",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 44,
                "column": 85
            },
            "line": 44,
            "code": "    it(\"should return the current system locale when called without timeFormat number\", function () {\n      expect(Module.definitions.calendar.getLocaleSpecification()).toEqual({\n        longDateFormat: {\n          LT: moment.localeData().longDateFormat(\"LT\")\n        }\n      });\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a 12-hour longDateFormat when using the 'en' locale",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 51,
                "column": 73
            },
            "line": 51,
            "code": "    it(\"should return a 12-hour longDateFormat when using the 'en' locale\", function () {\n      const localeBackup = moment.locale();\n      moment.locale(\"en\");\n      expect(Module.definitions.calendar.getLocaleSpecification()).toEqual({\n        longDateFormat: {\n          LT: \"h:mm A\"\n        }\n      });\n      moment.locale(localeBackup);\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a 12-hour longDateFormat when using the 'au' locale",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 61,
                "column": 73
            },
            "line": 61,
            "code": "    it(\"should return a 12-hour longDateFormat when using the 'au' locale\", function () {\n      const localeBackup = moment.locale();\n      moment.locale(\"au\");\n      expect(Module.definitions.calendar.getLocaleSpecification()).toEqual({\n        longDateFormat: {\n          LT: \"h:mm A\"\n        }\n      });\n      moment.locale(localeBackup);\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a 12-hour longDateFormat when using the 'eg' locale",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 71,
                "column": 73
            },
            "line": 71,
            "code": "    it(\"should return a 12-hour longDateFormat when using the 'eg' locale\", function () {\n      const localeBackup = moment.locale();\n      moment.locale(\"eg\");\n      expect(Module.definitions.calendar.getLocaleSpecification()).toEqual({\n        longDateFormat: {\n          LT: \"h:mm A\"\n        }\n      });\n      moment.locale(localeBackup);\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a 24-hour longDateFormat when using the 'nl' locale",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 81,
                "column": 73
            },
            "line": 81,
            "code": "    it(\"should return a 24-hour longDateFormat when using the 'nl' locale\", function () {\n      const localeBackup = moment.locale();\n      moment.locale(\"nl\");\n      expect(Module.definitions.calendar.getLocaleSpecification()).toEqual({\n        longDateFormat: {\n          LT: \"HH:mm\"\n        }\n      });\n      moment.locale(localeBackup);\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a 24-hour longDateFormat when using the 'fr' locale",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 91,
                "column": 73
            },
            "line": 91,
            "code": "    it(\"should return a 24-hour longDateFormat when using the 'fr' locale\", function () {\n      const localeBackup = moment.locale();\n      moment.locale(\"fr\");\n      expect(Module.definitions.calendar.getLocaleSpecification()).toEqual({\n        longDateFormat: {\n          LT: \"HH:mm\"\n        }\n      });\n      moment.locale(localeBackup);\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return a 24-hour longDateFormat when using the 'uk' locale",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "getLocaleSpecification"
            ],
            "updatePoint": {
                "line": 101,
                "column": 73
            },
            "line": 101,
            "code": "    it(\"should return a 24-hour longDateFormat when using the 'uk' locale\", function () {\n      const localeBackup = moment.locale();\n      moment.locale(\"uk\");\n      expect(Module.definitions.calendar.getLocaleSpecification()).toEqual({\n        longDateFormat: {\n          LT: \"HH:mm\"\n        }\n      });\n      moment.locale(localeBackup);\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "for '' should return ''",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "shorten"
            ],
            "updatePoint": {
                "line": 131,
                "column": 67
            },
            "line": 131,
            "code": "      it(`for '${string}' should return '${strings[string].return}'`, function () {\n        expect(Module.definitions.calendar.shorten(string, strings[string].length)).toBe(strings[string].return);\n      });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return an empty string if shorten is called with a non-string",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "shorten"
            ],
            "updatePoint": {
                "line": 135,
                "column": 76
            },
            "line": 135,
            "code": "    it(\"should return an empty string if shorten is called with a non-string\", function () {\n      expect(Module.definitions.calendar.shorten(100)).toBe(\"\");\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not shorten the string if shorten is called with a non-number maxLength",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "shorten"
            ],
            "updatePoint": {
                "line": 138,
                "column": 86
            },
            "line": 138,
            "code": "    it(\"should not shorten the string if shorten is called with a non-number maxLength\", function () {\n      expect(Module.definitions.calendar.shorten(\"This is a test string\", \"This is not a number\")).toBe(\"This is a test string\");\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should wrap the string instead of shorten it if shorten is called with wrapEvents = true (with maxLength defined as 20)",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "shorten"
            ],
            "updatePoint": {
                "line": 141,
                "column": 127
            },
            "line": 141,
            "code": "    it(\"should wrap the string instead of shorten it if shorten is called with wrapEvents = true (with maxLength defined as 20)\", function () {\n      expect(Module.definitions.calendar.shorten(\"This is a wrapEvent test. Should wrap the string instead of shorten it if called with wrapEvent = true\", 20, true)).toBe(\"This is a <br>wrapEvent test. Should wrap <br>the string instead of <br>shorten it if called with <br>wrapEvent = true\");\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should wrap the string instead of shorten it if shorten is called with wrapEvents = true (without maxLength defined, default 25)",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "shorten"
            ],
            "updatePoint": {
                "line": 144,
                "column": 136
            },
            "line": 144,
            "code": "    it(\"should wrap the string instead of shorten it if shorten is called with wrapEvents = true (without maxLength defined, default 25)\", function () {\n      expect(Module.definitions.calendar.shorten(\"This is a wrapEvent test. Should wrap the string instead of shorten it if called with wrapEvent = true\", undefined, true)).toBe(\"This is a wrapEvent <br>test. Should wrap the string <br>instead of shorten it if called <br>with wrapEvent = true\");\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should wrap and shorten the string in the second line if called with wrapEvents = true and maxTitleLines = 2",
            "suites": [
                "Functions into modules/default/calendar/calendar.js",
                "shorten"
            ],
            "updatePoint": {
                "line": 147,
                "column": 116
            },
            "line": 147,
            "code": "    it(\"should wrap and shorten the string in the second line if called with wrapEvents = true and maxTitleLines = 2\", function () {\n      expect(Module.definitions.calendar.shorten(\"This is a wrapEvent and maxTitleLines test. Should wrap and shorten the string in the second line if called with wrapEvents = true and maxTitleLines = 2\", undefined, true, 2)).toBe(\"This is a wrapEvent and <br>maxTitleLines test. Should wrap and &hellip;\");\n    });",
            "file": "unit/functions/calendar_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return -1 when comparing 2.1 to 2.2",
            "suites": [
                "Test function cmpVersions in js/module.js"
            ],
            "updatePoint": {
                "line": 24,
                "column": 48
            },
            "line": 24,
            "code": "  it(\"should return -1 when comparing 2.1 to 2.2\", function () {\n    expect(cmp(\"2.1\", \"2.2\")).toBe(-1);\n  });",
            "file": "unit/functions/cmp_versions_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be return 0 when comparing 2.2 to 2.2",
            "suites": [
                "Test function cmpVersions in js/module.js"
            ],
            "updatePoint": {
                "line": 27,
                "column": 50
            },
            "line": 27,
            "code": "  it(\"should be return 0 when comparing 2.2 to 2.2\", function () {\n    expect(cmp(\"2.2\", \"2.2\")).toBe(0);\n  });",
            "file": "unit/functions/cmp_versions_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should be return 1 when comparing 1.1 to 1.0",
            "suites": [
                "Test function cmpVersions in js/module.js"
            ],
            "updatePoint": {
                "line": 30,
                "column": 50
            },
            "line": 30,
            "code": "  it(\"should be return 1 when comparing 1.1 to 1.0\", function () {\n    expect(cmp(\"1.1\", \"1.0\")).toBe(1);\n  });",
            "file": "unit/functions/cmp_versions_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "for  should be return ",
            "suites": [
                "Functions module currentweather",
                "roundValue",
                "this.config.roundTemp is true"
            ],
            "updatePoint": {
                "line": 26,
                "column": 56
            },
            "line": 26,
            "code": "        it(`for ${value[0]} should be return ${value[1]}`, function () {\n          expect(Module.definitions.currentweather.roundValue(value[0])).toBe(value[1]);\n        });",
            "file": "unit/functions/currentweather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "for  should be return ",
            "suites": [
                "Functions module currentweather",
                "roundValue",
                "this.config.roundTemp is false"
            ],
            "updatePoint": {
                "line": 39,
                "column": 56
            },
            "line": 39,
            "code": "        it(`for ${value[0]} should be return ${value[1]}`, function () {\n          expect(Module.definitions.currentweather.roundValue(value[0])).toBe(value[1]);\n        });",
            "file": "unit/functions/currentweather_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "skip",
            "suites": [
                "Functions into modules/default/newsfeed/newsfeed.js"
            ],
            "line": 14,
            "code": "  test.skip(\"skip\", () => {});",
            "file": "unit/functions/newsfeed_spec.js",
            "skipped": true,
            "dir": "tests"
        },
        {
            "name": "should return valid output for git status",
            "suites": [
                "Updatenotification"
            ],
            "updatePoint": {
                "line": 76,
                "column": 47
            },
            "line": 76,
            "code": "  it(\"should return valid output for git status\", async function () {\n    const arr = await gitHelper.getStatus();\n    expect(arr.length).toBe(1);\n    const gitInfo = arr[0];\n    expect(gitInfo.current).not.toBe(\"\");\n    expect(gitInfo.hash).not.toBe(\"\");\n  }, 15000);",
            "file": "unit/functions/updatenotification_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return behind=8 for test1",
            "suites": [
                "Updatenotification"
            ],
            "updatePoint": {
                "line": 83,
                "column": 38
            },
            "line": 83,
            "code": "  it(\"should return behind=8 for test1\", async function () {\n    const gitInfo = await gitHelper.getStatusInfo(test1);\n    expect(gitInfo.behind).toBe(8);\n    expect(gitInfo.isBehindInStatus).toBe(true);\n  });",
            "file": "unit/functions/updatenotification_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return behind=0 for test2",
            "suites": [
                "Updatenotification"
            ],
            "updatePoint": {
                "line": 88,
                "column": 38
            },
            "line": 88,
            "code": "  it(\"should return behind=0 for test2\", async function () {\n    const gitInfo = await gitHelper.getStatusInfo(test2);\n    expect(gitInfo.behind).toBe(0);\n    expect(gitInfo.isBehindInStatus).toBe(false);\n  });",
            "file": "unit/functions/updatenotification_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return empty status object for test3",
            "suites": [
                "Updatenotification"
            ],
            "updatePoint": {
                "line": 93,
                "column": 49
            },
            "line": 93,
            "code": "  it(\"should return empty status object for test3\", async function () {\n    const gitInfo = await gitHelper.getStatusInfo(test3);\n    expect(gitInfo).toBe(undefined);\n  });",
            "file": "unit/functions/updatenotification_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return empty repo object for test2",
            "suites": [
                "Updatenotification"
            ],
            "updatePoint": {
                "line": 97,
                "column": 47
            },
            "line": 97,
            "code": "  it(\"should return empty repo object for test2\", async function () {\n    // no gitInfo provided in res, so returns undefined\n    const gitInfo = await gitHelper.getRepoInfo(test2);\n    expect(gitInfo).toBe(undefined);\n  });",
            "file": "unit/functions/updatenotification_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return empty repo object for test1",
            "suites": [
                "Updatenotification"
            ],
            "updatePoint": {
                "line": 102,
                "column": 47
            },
            "line": 102,
            "code": "  it(\"should return empty repo object for test1\", async function () {\n    // no regex match for refs in empty string, so returns undefined\n    const gitInfo = await gitHelper.getRepoInfo(test1);\n    expect(gitInfo).toBe(undefined);\n  });",
            "file": "unit/functions/updatenotification_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return empty repo object for test4",
            "suites": [
                "Updatenotification"
            ],
            "updatePoint": {
                "line": 107,
                "column": 47
            },
            "line": 107,
            "code": "  it(\"should return empty repo object for test4\", async function () {\n    // git ref list throws error, so returns undefined\n    const gitInfo = await gitHelper.getRepoInfo(test4);\n    expect(gitInfo).toBe(undefined);\n  });",
            "file": "unit/functions/updatenotification_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return behind=2 for test3",
            "suites": [
                "Updatenotification"
            ],
            "updatePoint": {
                "line": 112,
                "column": 38
            },
            "line": 112,
            "code": "  it(\"should return behind=2 for test3\", async function () {\n    const gitInfo = await gitHelper.getRepoInfo(test3);\n    expect(gitInfo.behind).toBe(2);\n  });",
            "file": "unit/functions/updatenotification_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return true for daytime at noon",
            "suites": [
                "WeatherObject"
            ],
            "updatePoint": {
                "line": 13,
                "column": 44
            },
            "line": 13,
            "code": "  it(\"should return true for daytime at noon\", function () {\n    weatherobject.date = moment(12, \"HH\");\n    weatherobject.updateSunTime(-6.774877582342688, 37.63345667023327);\n    expect(weatherobject.isDayTime()).toBe(true);\n  });",
            "file": "unit/functions/weather_object_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should return false for daytime at midnight",
            "suites": [
                "WeatherObject"
            ],
            "updatePoint": {
                "line": 18,
                "column": 49
            },
            "line": 18,
            "code": "  it(\"should return false for daytime at midnight\", function () {\n    weatherobject.date = moment(0, \"HH\");\n    weatherobject.updateSunTime(-6.774877582342688, 37.63345667023327);\n    expect(weatherobject.isDayTime()).toBe(false);\n  });",
            "file": "unit/functions/weather_object_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "for  should be return ",
            "suites": [
                "Functions module weatherforecast",
                "roundValue",
                "this.config.roundTemp is true"
            ],
            "updatePoint": {
                "line": 29,
                "column": 56
            },
            "line": 29,
            "code": "        it(`for ${value[0]} should be return ${value[1]}`, function () {\n          expect(Module.definitions.weatherforecast.roundValue(value[0])).toBe(value[1]);\n        });",
            "file": "unit/functions/weatherforecast_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "for  should be return ",
            "suites": [
                "Functions module weatherforecast",
                "roundValue",
                "this.config.roundTemp is false"
            ],
            "updatePoint": {
                "line": 42,
                "column": 56
            },
            "line": 42,
            "code": "        it(`for ${value[0]} should be return ${value[1]}`, function () {\n          expect(Module.definitions.weatherforecast.roundValue(value[0])).toBe(value[1]);\n        });",
            "file": "unit/functions/weatherforecast_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "returns correct icons with sunset time",
            "suites": [
                "Functions module weatherforecast",
                "forecastIcons",
                "forecastIcons sunset specified"
            ],
            "updatePoint": {
                "line": 69,
                "column": 48
            },
            "line": 69,
            "code": "      it(`returns correct icons with sunset time`, function () {\n        Module.definitions.weatherforecast.processWeather(data.withSunset, moment);\n        let forecastData = Module.definitions.weatherforecast.forecast;\n        expect(forecastData.length).toBe(4);\n        expect(forecastData[2].icon).toBe(\"wi-rain\");\n      });",
            "file": "unit/functions/weatherforecast_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "returns correct icons with out sunset time",
            "suites": [
                "Functions module weatherforecast",
                "forecastIcons",
                "forecastIcons sunset not specified"
            ],
            "updatePoint": {
                "line": 80,
                "column": 52
            },
            "line": 80,
            "code": "      it(`returns correct icons with out sunset time`, function () {\n        Module.definitions.weatherforecast.processWeather(data.withoutSunset, moment);\n        let forecastData = Module.definitions.weatherforecast.forecast;\n        expect(forecastData.length).toBe(4);\n        expect(forecastData[2].icon).toBe(\"wi-rain\");\n      });",
            "file": "unit/functions/weatherforecast_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "contains a folder for modules/default/\"",
            "suites": [
                "Default modules set in modules/default/defaultmodules.js"
            ],
            "updatePoint": {
                "line": 10,
                "column": 63
            },
            "line": 10,
            "code": "    it(`contains a folder for modules/default/${defaultModule}\"`, function () {\n      expect(fs.existsSync(path.join(root_path, \"modules/default\", defaultModule))).toBe(true);\n    });",
            "file": "unit/global_vars/defaults_modules_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "contains a file/folder \"\"",
            "suites": [
                "'global.root_path' set in js/app.js"
            ],
            "updatePoint": {
                "line": 12,
                "column": 43
            },
            "line": 12,
            "code": "    it(`contains a file/folder \"${subpath}\"`, function () {\n      expect(fs.existsSync(path.join(root_path, subpath))).toBe(true);\n    });",
            "file": "unit/global_vars/root_path_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not modify global.root_path for testing",
            "suites": [
                "'global.root_path' set in js/app.js"
            ],
            "updatePoint": {
                "line": 16,
                "column": 52
            },
            "line": 16,
            "code": "  it(\"should not modify global.root_path for testing\", function () {\n    expect(global.root_path).toBe(undefined);\n  });",
            "file": "unit/global_vars/root_path_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not modify global.version for testing",
            "suites": [
                "'global.root_path' set in js/app.js"
            ],
            "updatePoint": {
                "line": 19,
                "column": 50
            },
            "line": 19,
            "code": "  it(\"should not modify global.version for testing\", function () {\n    expect(global.version).toBe(undefined);\n  });",
            "file": "unit/global_vars/root_path_spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should expect the global.version equals package.json file",
            "suites": [
                "'global.root_path' set in js/app.js"
            ],
            "updatePoint": {
                "line": 22,
                "column": 63
            },
            "line": 22,
            "code": "  it(\"should expect the global.version equals package.json file\", function () {\n    const versionPackage = JSON.parse(fs.readFileSync(\"package.json\", \"utf8\")).version;\n    expect(version).toBe(versionPackage);\n  });",
            "file": "unit/global_vars/root_path_spec.js",
            "skipped": false,
            "dir": "tests"
        }
    ],
    "badge": "MichMich__MagicMirror.svg"
}