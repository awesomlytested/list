{"repo":"testomatio/reporter","url":"https://github.com/testomatio/reporter","branch":"master","configs":[{"package":"@testomatio/reporter","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Test addition","suites":["Suite 1"],"updatePoint":{"line":4,"column":19,"index":79},"line":4,"code":"  it('Test addition', () => {\n    expect(1 + 2).toBe(4);\n  });","file":"adapter/examples/jasmine/index.test.js","skipped":false,"dir":"tests"},{"name":"Test some more addition","suites":["Suite 1"],"updatePoint":{"line":7,"column":29,"index":152},"line":7,"code":"  it('Test some more addition', () => {\n    expect(1 + 2).toBe(3);\n  });","file":"adapter/examples/jasmine/index.test.js","skipped":false,"dir":"tests"},{"name":"Sample mocha test","suites":["Sample mocha suite"],"updatePoint":{"line":3,"column":23,"index":97},"line":3,"code":"  it('Sample mocha test', () => {\n    assert.equal([1, 2, 3].indexOf(4), 0);\n  });","file":"adapter/examples/mocha/index.test.js","skipped":false,"dir":"tests"},{"name":"Sample mocha test 2","suites":["Sample mocha suite 2"],"updatePoint":{"line":8,"column":25,"index":227},"line":8,"code":"  it('Sample mocha test 2', () => {\n    assert.equal(1, 1);\n  });","file":"adapter/examples/mocha/index.test.js","skipped":false,"dir":"tests"},{"name":"POST :: /api/reporter :: should create a report if api_key has been provided","suites":["Adapters","positive tests"],"updatePoint":{"line":84,"column":88,"index":2861},"line":84,"code":"        it('POST :: /api/reporter :: should create a report if api_key has been provided', () => {\n          const [req] = server.requests({\n            method: 'POST',\n            path: '/api/reporter'\n          });\n          const expectedResult = {\n            api_key: TESTOMATIO\n          };\n          assert.isObject(req.body);\n          expect(req.body).to.include(expectedResult);\n        });","file":"adapter/index.test.js","skipped":false,"dir":"tests"},{"name":"PUT :: /api/reporter/:runId :: should update run status","suites":["Adapters","positive tests"],"updatePoint":{"line":95,"column":67,"index":3241},"line":95,"code":"        it('PUT :: /api/reporter/:runId :: should update run status', () => {\n          const [req] = server.requests({\n            method: 'PUT',\n            path: `/api/reporter/${RUN_ID}`\n          });\n          const expectedResult = {\n            api_key: TESTOMATIO,\n            status_event: 'fail'\n          };\n          assert.isObject(req.body);\n          expect(req.body).to.include(expectedResult);\n        });","file":"adapter/index.test.js","skipped":false,"dir":"tests"},{"name":"POST :: /api/reporter/:runId/testrun :: should add a new test to run instance","suites":["Adapters","positive tests"],"updatePoint":{"line":107,"column":89,"index":3686},"line":107,"code":"        it('POST :: /api/reporter/:runId/testrun :: should add a new test to run instance', () => {\n          const reqs = server.requests({\n            method: 'POST',\n            path: `/api/reporter/${RUN_ID}/testrun`\n          });\n          const expectedRequiredBodyKeys = ['api_key', 'files',\n          // 'steps',\n          'status', 'stack', 'example', 'title', 'message', 'run_time', 'artifacts'];\n          for (const req of reqs) {\n            assert.isObject(req.body);\n            assert.includeMembers(Object.keys(req.body), expectedRequiredBodyKeys);\n            assert.strictEqual(req.body.api_key, TESTOMATIO);\n            assert.isString(req.body.status);\n            assert.isString(req.body.title);\n            assert.isNumber(req.body.run_time);\n          }\n        });","file":"adapter/index.test.js","skipped":false,"dir":"tests"},{"name":"should ignore reporter if api_key has not been provided","suites":["Adapters","negative tests"],"updatePoint":{"line":134,"column":67,"index":4729},"line":134,"code":"        it('should ignore reporter if api_key has not been provided', () => {\n          const requests = server.requests();\n          assert.isArray(requests);\n          assert.isEmpty(requests);\n        });","file":"adapter/index.test.js","skipped":false,"dir":"tests"},{"name":"saveAsCsv function should save data to CSV file with default report.csv name","suites":["csv pipe confirmation tests"],"updatePoint":{"line":38,"column":82,"index":794},"line":38,"code":"  it('saveAsCsv function should save data to CSV file with default report.csv name', async () => {\n    process.env.TESTOMATIO_CSV_FILENAME = \"report.csv\";\n    const filepath = path.resolve(dir, \"report.csv\");\n    const csvPipe = new CsvPipe({}, {});\n\n    // call the saveToCsv function with the sample data\n    await csvPipe.saveToCsv(DATA, HEADERS);\n\n    // get list of files\n    const files = fs.readdirSync(dir);\n\n    // read the saved CSV file    \n    const savedData = fs.readFileSync(filepath, 'utf-8');\n\n    // check that file with test suffix was created\n    expect(files[0]).equal('report.csv');\n    // check that the saved data matches the input data\n    expect(savedData).equal('Suite_title,Title,Status\\nTest suite @TEST-1,Sample title,pass\\n');\n  });","file":"pipes/csv_pipe_test.js","skipped":false,"dir":"tests"},{"name":"saveAsCsv function should save data to CSV file with name based on the current date","suites":["csv pipe confirmation tests"],"updatePoint":{"line":57,"column":89,"index":1565},"line":57,"code":"  it('saveAsCsv function should save data to CSV file with name based on the current date', async () => {\n    let filepath;\n    process.env.TESTOMATIO_CSV_FILENAME = \"test.csv\";\n    const csvPipe = new CsvPipe({}, {});\n\n    // call the saveToCsv function with the sample data\n    await csvPipe.saveToCsv(DATA, HEADERS);\n\n    // get list of files\n    const files = fs.readdirSync(dir);\n    filepath = path.resolve(dir, files[0]);\n\n    // read the saved CSV file    \n    const savedData = fs.readFileSync(filepath, 'utf-8');\n\n    // check that file with test suffix was created\n    expect(files[0]).to.include('_test.csv');\n    // check that the saved data matches the input data\n    expect(savedData).equal('Suite_title,Title,Status\\nTest suite @TEST-1,Sample title,pass\\n');\n  });","file":"pipes/csv_pipe_test.js","skipped":false,"dir":"tests"},{"name":"#fetchFilesFromStackTrace | should match images from stack trace","suites":["Utils"],"updatePoint":{"line":9,"column":70,"index":231},"line":9,"code":"  it('#fetchFilesFromStackTrace | should match images from stack trace', () => {\n    const file1 = `${process.cwd()}/tests/data/artifacts/failed_test.png`;\n    const file2 = `${process.cwd()}/tests/data/artifacts/screenshot1.png`;\n    const stack = `\nPayrollPBTest:everyPayrollIsPositive =\n                              |-------------------jqwik-------------------\ntries = 1000                  | # of calls to property\nchecks = 1000                 | # of not rejected calls\n  file:/${file1}\ngeneration = RANDOMIZED       | parameters are randomly generated\nafter-failure = PREVIOUS_SEED | use the previous seed\nedge-cases# file:/${file2}\nedge-cases#total = 12         | # of all combined edge cases\nedge-cases#tried = 12         | # of edge cases tried in current run\nseed = 7004898156813507962    | random seed to reproduce generated values\n    `;\n    const files = fetchFilesFromStackTrace(stack);\n    expect(files).to.include(file1);\n    expect(files).to.include(file2);\n  });","file":"util_test.js","skipped":false,"dir":"tests"},{"name":"#fetchSourceCodeFromStackTrace | prefixed with at ","suites":["Utils"],"updatePoint":{"line":29,"column":56,"index":1199},"line":29,"code":"  it('#fetchSourceCodeFromStackTrace | prefixed with at ', () => {\n    const stack = `\nExpected: <4.0>\n     but: was <6.0>\n  at ${process.cwd()}/tests/data/cli/RunCest.php:24\n    `;\n    const source = fetchSourceCodeFromStackTrace(stack);\n    expect(source).to.include(`$I->executeCommand('run --colors tests/dummy/FileExistsCept.php');`);\n    expect(source).to.include(`24 >`);\n  });","file":"util_test.js","skipped":false,"dir":"tests"},{"name":"#fetchSourceCodeFromStackTrace | without prefix","suites":["Utils"],"updatePoint":{"line":39,"column":53,"index":1581},"line":39,"code":"  it('#fetchSourceCodeFromStackTrace | without prefix', () => {\n    const stack = `\nExpected: <4.0>\n     but: was <6.0>\n${process.cwd()}/tests/data/cli/RunCest.php:24\n    `;\n    const source = fetchSourceCodeFromStackTrace(stack);\n    expect(source).to.include(`$I->executeCommand('run --colors tests/dummy/FileExistsCept.php');`);\n    expect(source).to.include(`24 >`);\n  });","file":"util_test.js","skipped":false,"dir":"tests"},{"name":"should parse Jest XML","suites":["XML Reader"],"updatePoint":{"line":35,"column":27,"index":725},"line":35,"code":"  it('should parse Jest XML', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/junit1.xml'));\n    expect(jsonData.status).to.eql('failed');\n    expect(jsonData.tests_count).to.eql(13);\n    expect(jsonData.tests.length).to.eql(jsonData.tests_count);\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'title', 'run_time', 'suite_title']);\n    });\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse minitest XML","suites":["XML Reader"],"updatePoint":{"line":45,"column":31,"index":1182},"line":45,"code":"  it('should parse minitest XML', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/minitest.xml'));\n    expect(jsonData.status).to.eql('passed');\n    const stats = reader.calculateStats();\n    expect(stats.status).to.eql('passed');\n    expect(stats.tests_count).to.eql(10);\n    expect(jsonData.tests.length).to.eql(stats.tests_count);\n    reader.fetchSourceCode();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'file', 'title', 'run_time', 'suite_title']);\n    });\n    expect(jsonData.tests[0].code).to.be.ok;\n    expect(jsonData.tests[0].code).to.include(\"test 'should \");\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse Pytest XML","suites":["XML Reader"],"updatePoint":{"line":60,"column":29,"index":1866},"line":60,"code":"  it('should parse Pytest XML', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/pytest.xml'));\n    expect(jsonData.status).to.eql('failed');\n    const stats = reader.calculateStats();\n    expect(stats.status).to.eql('failed');\n    expect(stats.tests_count).to.eql(7);\n    expect(jsonData.tests.length).to.eql(stats.tests_count);\n    reader.fetchSourceCode();\n    reader.formatErrors();\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'file', 'title', 'run_time', 'suite_title']);\n    });\n    expect(jsonData.tests[0].title).to.eql(\"Login With Valid Credentials\");\n    const failedTests = jsonData.tests.filter(t => t.status === 'failed');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse Codeception XML","suites":["XML Reader"],"updatePoint":{"line":77,"column":34,"index":2647},"line":77,"code":"  it('should parse Codeception XML', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/codecept.xml'));\n    expect(jsonData.status).to.eql('failed');\n    const stats = reader.calculateStats();\n    expect(stats.status).to.eql('failed');\n    expect(stats.tests_count).to.eql(89);\n    expect(jsonData.tests.length).to.eql(stats.tests_count);\n    reader.fetchSourceCode();\n    reader.formatErrors();\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'file', 'title', 'run_time', 'suite_title']);\n    });\n    expect(jsonData.tests[0].code).to.be.ok;\n    expect(jsonData.tests[0].code).to.include(\"public function runCestWithTwoFailedTest(\");\n    expect(jsonData.tests[0].title).to.eql(\"Run Cest With Two Failed Test\");\n    const failedTests = jsonData.tests.filter(t => t.status === 'failed');\n    const failedTest = failedTests[0];\n    expect(failedTest.stack).to.include('public function');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse JUnit XML","suites":["XML Reader"],"updatePoint":{"line":98,"column":28,"index":3662},"line":98,"code":"  it('should parse JUnit XML', () => {\n    const reader = new XmlReader({\n      lang: 'java'\n    });\n    const jsonData = reader.parse(path.join(__dirname, 'data/java.xml'));\n    expect(jsonData.status).to.eql('failed');\n    const stats = reader.calculateStats();\n    expect(stats.status).to.eql('failed');\n    expect(stats.tests_count).to.eql(6);\n    expect(jsonData.tests.length).to.eql(stats.tests_count);\n    reader.fetchSourceCode();\n    reader.formatErrors();\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'file', 'title', 'run_time', 'suite_title']);\n    });\n\n    // expect(jsonData.tests[0].code).to.be.ok;\n    // expect(jsonData.tests[0].code).to.include(\"public function runCestWithTwoFailedTest(\")\n    // expect(jsonData.tests[0].title).to.eql(\"Run cest with two failed test\")\n\n    const failedTests = jsonData.tests.filter(t => t.status === 'failed');\n    const failedTest = failedTests[0];\n    console.log(failedTest.stack);\n    expect(failedTest.stack).to.include('(CalculatorTest.java:43');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse JUnit XML and skipped tests","suites":["XML Reader"],"updatePoint":{"line":124,"column":46,"index":4768},"line":124,"code":"  it('should parse JUnit XML and skipped tests', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/junit_skipped.xml'));\n    expect(jsonData.status).to.eql('failed');\n    const stats = reader.calculateStats();\n    expect(stats.status).to.eql('failed');\n    expect(stats.tests_count).to.eql(2);\n    reader.fetchSourceCode();\n    reader.formatErrors();\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'file', 'title', 'run_time', 'suite_title']);\n    });\n    const skippedTests = jsonData.tests.filter(t => t.status === 'skipped');\n    expect(skippedTests.length).to.eql(1);\n    const skippedTest = skippedTests[0];\n    expect(skippedTest.title).to.eql('Check Dashboard');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse JUnit params","suites":["XML Reader"],"updatePoint":{"line":142,"column":31,"index":5559},"line":142,"code":"  it('should parse JUnit params', () => {\n    const reader = new XmlReader({\n      lang: 'java'\n    });\n    const jsonData = reader.parse(path.join(__dirname, 'data/junit2.xml'));\n    expect(jsonData.status).to.eql('passed');\n    const stats = reader.calculateStats();\n    expect(stats.status).to.eql('passed');\n    expect(stats.tests_count).to.eql(4);\n    reader.connectAdapter();\n    reader.fetchSourceCode();\n    reader.formatErrors();\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t.title).to.eql('Can Create API Key ${param}');\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'file', 'title', 'run_time', 'suite_title']);\n    });\n    expect(jsonData.tests[0].example.param).to.eql('Master');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse JUnit C#","suites":["XML Reader"],"updatePoint":{"line":161,"column":27,"index":6299},"line":161,"code":"  it('should parse JUnit C#', () => {\n    const reader = new XmlReader({\n      lang: 'c#'\n    });\n    reader.connectAdapter();\n    const jsonData = reader.parse(path.join(__dirname, 'data/csharp.xml'));\n    expect(jsonData.status).to.eql('failed');\n    const stats = reader.calculateStats();\n    expect(stats.status).to.eql('failed');\n    expect(stats.tests_count).to.eql(3);\n    expect(jsonData.tests.length).to.eql(stats.tests_count);\n    reader.fetchSourceCode();\n    reader.formatErrors();\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'title', 'run_time', 'suite_title']);\n    });\n    const tests = jsonData.tests;\n    expect(tests[0].title).to.include('Create a Web Lead');\n    expect(tests[0].suite_title).to.include('User');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse NUnit TRX XML","suites":["XML Reader"],"updatePoint":{"line":182,"column":32,"index":7119},"line":182,"code":"  it('should parse NUnit TRX XML', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/nunit.xml'));\n    expect(jsonData.status).to.eql('passed');\n    expect(jsonData.tests_count).to.eql(2);\n    expect(jsonData.tests.length).to.eql(2);\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'title', 'run_time', 'suite_title']);\n    });\n    const tests = jsonData.tests;\n    expect(tests[0].title).to.include('Create User Login');\n    expect(tests[0].suite_title).to.include('User');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse NUnit3 XML","suites":["XML Reader"],"updatePoint":{"line":196,"column":29,"index":7726},"line":196,"code":"  it('should parse NUnit3 XML', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/nunit3.xml'));\n    expect(jsonData.status).to.eql('failed');\n    expect(jsonData.tests_count).to.eql(3);\n    expect(jsonData.tests.length).to.eql(3);\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'title', 'run_time', 'suite_title']);\n    });\n    const tests = jsonData.tests;\n    expect(tests[0].title).to.include('Update User');\n    expect(tests[0].suite_title).to.include('User');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse XUnit XML","suites":["XML Reader"],"updatePoint":{"line":210,"column":28,"index":8327},"line":210,"code":"  it('should parse XUnit XML', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/xunit.xml'));\n    expect(jsonData.status).to.eql('failed');\n    expect(jsonData.tests_count).to.eql(6);\n    expect(jsonData.tests.length).to.eql(6);\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'title', 'run_time', 'suite_title']);\n    });\n    const tests = jsonData.tests;\n    expect(tests[0].title).to.include('Method1');\n    expect(tests[0].suite_title).to.include('TestClass1');\n    expect(tests[0].file).to.eql('Sample/Tests');\n    expect(tests[0].status).to.eql('passed');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should parse XUnit2 client XML","suites":["XML Reader"],"updatePoint":{"line":226,"column":36,"index":9033},"line":226,"code":"  it('should parse XUnit2 client XML', () => {\n    const reader = new XmlReader();\n    const jsonData = reader.parse(path.join(__dirname, 'data/xunit2.xml'));\n    expect(jsonData.status).to.eql('passed');\n    expect(jsonData.tests_count).to.eql(1);\n    expect(jsonData.tests.length).to.eql(1);\n    reader.formatTests();\n    jsonData.tests.forEach(t => {\n      expect(t).to.contain.keys(['stack', 'create', 'status', 'title', 'run_time', 'suite_title']);\n    });\n    const tests = jsonData.tests;\n    expect(tests[0].title).to.include('Test');\n    expect(tests[0].suite_title).to.include('Class1');\n    expect(tests[0].file).to.eql('ConsoleApp2');\n  });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should create a new run Id","suites":["XML Reader","#request"],"updatePoint":{"line":248,"column":34,"index":9845},"line":248,"code":"    it('should create a new run Id', async () => {\n      const reader = new XmlReader({\n        testomatioUrl: TESTOMATIO_URL,\n        apiKey: TESTOMATIO\n      });\n      reader.parse(path.join(__dirname, 'data/junit1.xml'));\n      await reader.createRun();\n      const [req] = server.requests({\n        method: 'POST',\n        path: '/api/reporter'\n      });\n      const expectedResult = {\n        api_key: TESTOMATIO\n      };\n      assert.isObject(req.body);\n      expect(req.body).to.include(expectedResult);\n    });","file":"xmlReader_test.js","skipped":false,"dir":"tests"},{"name":"should publish updates","suites":["XML Reader","#request"],"updatePoint":{"line":265,"column":30,"index":10360},"line":265,"code":"    it('should publish updates', async () => {\n      const reader = new XmlReader({\n        testomatioUrl: TESTOMATIO_URL,\n        apiKey: TESTOMATIO,\n        runId: RUN_ID\n      });\n      reader.parse(path.join(__dirname, 'data/junit1.xml'));\n      await reader.createRun();\n      const [req] = server.requests({\n        method: 'PUT',\n        path: '/api/reporter/' + RUN_ID\n      });\n      assert.isObject(req.body);\n    });","file":"xmlReader_test.js","skipped":false,"dir":"tests"}]}