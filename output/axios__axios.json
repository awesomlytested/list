{"repo":"axios/axios","url":"https://github.com/axios/axios","branch":"master","configs":[{"package":"axios","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should support custom adapter","suites":["adapter"],"updatePoint":{"line":10,"column":35,"index":230},"line":10,"code":"  it('should support custom adapter', function (done) {\n    axios('/foo', {\n      adapter: function barAdapter(config) {\n        return new Promise(function dispatchXhrRequest(resolve) {\n          var request = new XMLHttpRequest();\n          request.open('GET', '/bar');\n\n          request.onreadystatechange = function () {\n            resolve({\n              config: config,\n              request: request\n            });\n          };\n\n          request.send(null);\n        });\n      }\n    }).catch(console.log);\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/bar');\n      done();\n    });\n  });","file":"specs/adapter.spec.js","skipped":false,"dir":"test"},{"name":"should execute adapter code synchronously","suites":["adapter"],"updatePoint":{"line":33,"column":47,"index":873},"line":33,"code":"  it('should execute adapter code synchronously', function (done) {\n    var asyncFlag = false;\n    axios('/foo', {\n      adapter: function barAdapter(config) {\n        return new Promise(function dispatchXhrRequest(resolve) {\n          var request = new XMLHttpRequest();\n          request.open('GET', '/bar');\n\n          request.onreadystatechange = function () {\n            resolve({\n              config: config,\n              request: request\n            });\n          };\n\n          expect(asyncFlag).toBe(false);\n          request.send(null);\n        });\n      }\n    }).catch(console.log);\n    asyncFlag = true;\n    getAjaxRequest().then(function () {\n      done();\n    });\n  });","file":"specs/adapter.spec.js","skipped":false,"dir":"test"},{"name":"should execute adapter code asynchronously when interceptor is present","suites":["adapter"],"updatePoint":{"line":58,"column":76,"index":1588},"line":58,"code":"  it('should execute adapter code asynchronously when interceptor is present', function (done) {\n    var asyncFlag = false;\n    axios.interceptors.request.use(function (config) {\n      config.headers.async = 'async it!';\n      return config;\n    });\n    axios('/foo', {\n      adapter: function barAdapter(config) {\n        return new Promise(function dispatchXhrRequest(resolve) {\n          var request = new XMLHttpRequest();\n          request.open('GET', '/bar');\n\n          request.onreadystatechange = function () {\n            resolve({\n              config: config,\n              request: request\n            });\n          };\n\n          expect(asyncFlag).toBe(true);\n          request.send(null);\n        });\n      }\n    }).catch(console.log);\n    asyncFlag = true;\n    getAjaxRequest().then(function () {\n      done();\n    });\n  });","file":"specs/adapter.spec.js","skipped":false,"dir":"test"},{"name":"should have request method helpers","suites":["static api"],"updatePoint":{"line":2,"column":40,"index":78},"line":2,"code":"  it('should have request method helpers', function () {\n    expect(typeof axios.request).toEqual('function');\n    expect(typeof axios.get).toEqual('function');\n    expect(typeof axios.head).toEqual('function');\n    expect(typeof axios.options).toEqual('function');\n    expect(typeof axios.delete).toEqual('function');\n    expect(typeof axios.post).toEqual('function');\n    expect(typeof axios.put).toEqual('function');\n    expect(typeof axios.patch).toEqual('function');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have promise method helpers","suites":["static api"],"updatePoint":{"line":12,"column":40,"index":556},"line":12,"code":"  it('should have promise method helpers', function () {\n    var promise = axios('/test');\n    expect(typeof promise.then).toEqual('function');\n    expect(typeof promise.catch).toEqual('function');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have defaults","suites":["static api"],"updatePoint":{"line":17,"column":26,"index":746},"line":17,"code":"  it('should have defaults', function () {\n    expect(typeof axios.defaults).toEqual('object');\n    expect(typeof axios.defaults.headers).toEqual('object');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have interceptors","suites":["static api"],"updatePoint":{"line":21,"column":30,"index":913},"line":21,"code":"  it('should have interceptors', function () {\n    expect(typeof axios.interceptors.request).toEqual('object');\n    expect(typeof axios.interceptors.response).toEqual('object');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have all/spread helpers","suites":["static api"],"updatePoint":{"line":25,"column":36,"index":1103},"line":25,"code":"  it('should have all/spread helpers', function () {\n    expect(typeof axios.all).toEqual('function');\n    expect(typeof axios.spread).toEqual('function');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have factory method","suites":["static api"],"updatePoint":{"line":29,"column":32,"index":1261},"line":29,"code":"  it('should have factory method', function () {\n    expect(typeof axios.create).toEqual('function');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have CanceledError, CancelToken, and isCancel properties","suites":["static api"],"updatePoint":{"line":32,"column":69,"index":1406},"line":32,"code":"  it('should have CanceledError, CancelToken, and isCancel properties', function () {\n    expect(typeof axios.Cancel).toEqual('function');\n    expect(typeof axios.CancelToken).toEqual('function');\n    expect(typeof axios.isCancel).toEqual('function');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have getUri method","suites":["static api"],"updatePoint":{"line":37,"column":31,"index":1626},"line":37,"code":"  it('should have getUri method', function () {\n    expect(typeof axios.getUri).toEqual('function');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have isAxiosError properties","suites":["static api"],"updatePoint":{"line":40,"column":41,"index":1743},"line":40,"code":"  it('should have isAxiosError properties', function () {\n    expect(typeof axios.isAxiosError).toEqual('function');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have request methods","suites":["instance api"],"updatePoint":{"line":46,"column":33,"index":1934},"line":46,"code":"  it('should have request methods', function () {\n    expect(typeof instance.request).toEqual('function');\n    expect(typeof instance.get).toEqual('function');\n    expect(typeof instance.options).toEqual('function');\n    expect(typeof instance.head).toEqual('function');\n    expect(typeof instance.delete).toEqual('function');\n    expect(typeof instance.post).toEqual('function');\n    expect(typeof instance.put).toEqual('function');\n    expect(typeof instance.patch).toEqual('function');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have interceptors","suites":["instance api"],"updatePoint":{"line":56,"column":30,"index":2426},"line":56,"code":"  it('should have interceptors', function () {\n    expect(typeof instance.interceptors.request).toEqual('object');\n    expect(typeof instance.interceptors.response).toEqual('object');\n  });","file":"specs/api.spec.js","skipped":false,"dir":"test"},{"name":"rejects Promise with a CanceledError object","suites":["cancel","when called before sending request"],"updatePoint":{"line":15,"column":51,"index":532},"line":15,"code":"    it('rejects Promise with a CanceledError object', function (done) {\n      var source = CancelToken.source();\n      source.cancel('Operation has been canceled.');\n      axios.get('/foo', {\n        cancelToken: source.token\n      }).catch(function (thrown) {\n        expect(thrown).toEqual(jasmine.any(Cancel));\n        expect(thrown.message).toBe('Operation has been canceled.');\n        done();\n      });\n    });","file":"specs/cancel.spec.js","skipped":false,"dir":"test"},{"name":"rejects Promise with a CanceledError object","suites":["cancel","when called after request has been sent"],"updatePoint":{"line":28,"column":51,"index":1023},"line":28,"code":"    it('rejects Promise with a CanceledError object', function (done) {\n      var source = CancelToken.source();\n      axios.get('/foo/bar', {\n        cancelToken: source.token\n      }).catch(function (thrown) {\n        expect(thrown).toEqual(jasmine.any(Cancel));\n        expect(thrown.message).toBe('Operation has been canceled.');\n        done();\n      });\n      getAjaxRequest().then(function (request) {\n        // call cancel() when the request has been sent, but a response has not been received\n        source.cancel('Operation has been canceled.');\n        request.respondWith({\n          status: 200,\n          responseText: 'OK'\n        });\n      });\n    });","file":"specs/cancel.spec.js","skipped":false,"dir":"test"},{"name":"calls abort on request object","suites":["cancel","when called after request has been sent"],"updatePoint":{"line":46,"column":37,"index":1679},"line":46,"code":"    it('calls abort on request object', function (done) {\n      var source = CancelToken.source();\n      var request;\n      axios.get('/foo/bar', {\n        cancelToken: source.token\n      }).catch(function () {\n        // jasmine-ajax sets statusText to 'abort' when request.abort() is called\n        expect(request.statusText).toBe('abort');\n        done();\n      });\n      getAjaxRequest().then(function (req) {\n        // call cancel() when the request has been sent, but a response has not been received\n        source.cancel();\n        request = req;\n      });\n    });","file":"specs/cancel.spec.js","skipped":false,"dir":"test"},{"name":"it should support cancellation using AbortController signal","suites":["cancel","when called after request has been sent"],"updatePoint":{"line":84,"column":65,"index":3016},"line":84,"code":"  it('it should support cancellation using AbortController signal', function (done) {\n    var controller = new AbortController();\n    axios.get('/foo/bar', {\n      signal: controller.signal\n    }).then(function () {\n      done.fail('Has not been canceled');\n    }, function (thrown) {\n      expect(thrown).toEqual(jasmine.any(Cancel));\n      done();\n    });\n    getAjaxRequest().then(function (request) {\n      // call cancel() when the request has been sent, but a response has not been received\n      controller.abort();\n      setTimeout(function () {\n        request.respondWith({\n          status: 200,\n          responseText: 'OK'\n        });\n      }, 0);\n    });\n  });","file":"specs/cancel.spec.js","skipped":false,"dir":"test"},{"name":"returns correct result when message is not specified","suites":["Cancel","toString"],"updatePoint":{"line":5,"column":60,"index":198},"line":5,"code":"    it('returns correct result when message is not specified', function () {\n      var cancel = new CanceledError();\n      expect(cancel.toString()).toBe('CanceledError: canceled');\n    });","file":"specs/cancel/CanceledError.spec.js","skipped":false,"dir":"test"},{"name":"returns correct result when message is specified","suites":["Cancel","toString"],"updatePoint":{"line":9,"column":56,"index":384},"line":9,"code":"    it('returns correct result when message is specified', function () {\n      var cancel = new CanceledError('Operation has been canceled.');\n      expect(cancel.toString()).toBe('CanceledError: Operation has been canceled.');\n    });","file":"specs/cancel/CanceledError.spec.js","skipped":false,"dir":"test"},{"name":"throws when executor is not specified","suites":["CancelToken","constructor"],"updatePoint":{"line":7,"column":45,"index":254},"line":7,"code":"    it('throws when executor is not specified', function () {\n      expect(function () {\n        new CancelToken();\n      }).toThrowError(TypeError, 'executor must be a function.');\n    });","file":"specs/cancel/CancelToken.spec.js","skipped":false,"dir":"test"},{"name":"throws when executor is not a function","suites":["CancelToken","constructor"],"updatePoint":{"line":12,"column":46,"index":445},"line":12,"code":"    it('throws when executor is not a function', function () {\n      expect(function () {\n        new CancelToken(123);\n      }).toThrowError(TypeError, 'executor must be a function.');\n    });","file":"specs/cancel/CancelToken.spec.js","skipped":false,"dir":"test"},{"name":"returns a CanceledError if cancellation has been requested","suites":["CancelToken","reason"],"updatePoint":{"line":19,"column":66,"index":700},"line":19,"code":"    it('returns a CanceledError if cancellation has been requested', function () {\n      var cancel;\n      var token = new CancelToken(function (c) {\n        cancel = c;\n      });\n      cancel('Operation has been canceled.');\n      expect(token.reason).toEqual(jasmine.any(CanceledError));\n      expect(token.reason.message).toBe('Operation has been canceled.');\n    });","file":"specs/cancel/CancelToken.spec.js","skipped":false,"dir":"test"},{"name":"returns undefined if cancellation has not been requested","suites":["CancelToken","reason"],"updatePoint":{"line":28,"column":64,"index":1069},"line":28,"code":"    it('returns undefined if cancellation has not been requested', function () {\n      var token = new CancelToken(function () {});\n      expect(token.reason).toBeUndefined();\n    });","file":"specs/cancel/CancelToken.spec.js","skipped":false,"dir":"test"},{"name":"returns a Promise that resolves when cancellation is requested","suites":["CancelToken","promise"],"updatePoint":{"line":34,"column":70,"index":1301},"line":34,"code":"    it('returns a Promise that resolves when cancellation is requested', function (done) {\n      var cancel;\n      var token = new CancelToken(function (c) {\n        cancel = c;\n      });\n      token.promise.then(function onFulfilled(value) {\n        expect(value).toEqual(jasmine.any(CanceledError));\n        expect(value.message).toBe('Operation has been canceled.');\n        done();\n      });\n      cancel('Operation has been canceled.');\n    });","file":"specs/cancel/CancelToken.spec.js","skipped":false,"dir":"test"},{"name":"throws if cancellation has been requested","suites":["CancelToken","throwIfRequested"],"updatePoint":{"line":48,"column":49,"index":1781},"line":48,"code":"    it('throws if cancellation has been requested', function () {\n      // Note: we cannot use expect.toThrowError here as CanceledError does not inherit from Error\n      var cancel;\n      var token = new CancelToken(function (c) {\n        cancel = c;\n      });\n      cancel('Operation has been canceled.');\n\n      try {\n        token.throwIfRequested();\n        fail('Expected throwIfRequested to throw.');\n      } catch (thrown) {\n        if (!(thrown instanceof CanceledError)) {\n          fail('Expected throwIfRequested to throw a CanceledError, but it threw ' + thrown + '.');\n        }\n\n        expect(thrown.message).toBe('Operation has been canceled.');\n      }\n    });","file":"specs/cancel/CancelToken.spec.js","skipped":false,"dir":"test"},{"name":"does not throw if cancellation has not been requested","suites":["CancelToken","throwIfRequested"],"updatePoint":{"line":67,"column":61,"index":2472},"line":67,"code":"    it('does not throw if cancellation has not been requested', function () {\n      var token = new CancelToken(function () {});\n      token.throwIfRequested();\n    });","file":"specs/cancel/CancelToken.spec.js","skipped":false,"dir":"test"},{"name":"returns an object containing token and cancel function","suites":["CancelToken","source"],"updatePoint":{"line":73,"column":62,"index":2683},"line":73,"code":"    it('returns an object containing token and cancel function', function () {\n      var source = CancelToken.source();\n      expect(source.token).toEqual(jasmine.any(CancelToken));\n      expect(source.cancel).toEqual(jasmine.any(Function));\n      expect(source.token.reason).toBeUndefined();\n      source.cancel('Operation has been canceled.');\n      expect(source.token.reason).toEqual(jasmine.any(CanceledError));\n      expect(source.token.reason.message).toBe('Operation has been canceled.');\n    });","file":"specs/cancel/CancelToken.spec.js","skipped":false,"dir":"test"},{"name":"returns true if value is a CanceledError","suites":["isCancel"],"updatePoint":{"line":6,"column":46,"index":206},"line":6,"code":"  it('returns true if value is a CanceledError', function () {\n    expect(isCancel(new CanceledError())).toBe(true);\n  });","file":"specs/cancel/isCancel.spec.js","skipped":false,"dir":"test"},{"name":"returns false if value is not a CanceledError","suites":["isCancel"],"updatePoint":{"line":9,"column":51,"index":334},"line":9,"code":"  it('returns false if value is not a CanceledError', function () {\n    expect(isCancel({\n      foo: 'bar'\n    })).toBe(false);\n  });","file":"specs/cancel/isCancel.spec.js","skipped":false,"dir":"test"},{"name":"should create an Error with message, config, code, request, response and isAxiosError","suites":["core::AxiosError"],"updatePoint":{"line":4,"column":91,"index":194},"line":4,"code":"  it('should create an Error with message, config, code, request, response and isAxiosError', function () {\n    var request = {\n      path: '/foo'\n    };\n    var response = {\n      status: 200,\n      data: {\n        foo: 'bar'\n      }\n    };\n    var error = new AxiosError('Boom!', 'ESOMETHING', {\n      foo: 'bar'\n    }, request, response);\n    expect(error instanceof Error).toBe(true);\n    expect(error.message).toBe('Boom!');\n    expect(error.config).toEqual({\n      foo: 'bar'\n    });\n    expect(error.code).toBe('ESOMETHING');\n    expect(error.request).toBe(request);\n    expect(error.response).toBe(response);\n    expect(error.isAxiosError).toBe(true);\n  });","file":"specs/core/AxiosError.spec.js","skipped":false,"dir":"test"},{"name":"should create an Error that can be serialized to JSON","suites":["core::AxiosError"],"updatePoint":{"line":27,"column":59,"index":828},"line":27,"code":"  it('should create an Error that can be serialized to JSON', function () {\n    // Attempting to serialize request and response results in\n    //    TypeError: Converting circular structure to JSON\n    var request = {\n      path: '/foo'\n    };\n    var response = {\n      status: 200,\n      data: {\n        foo: 'bar'\n      }\n    };\n    var error = new AxiosError('Boom!', 'ESOMETHING', {\n      foo: 'bar'\n    }, request, response);\n    var json = error.toJSON();\n    expect(json.message).toBe('Boom!');\n    expect(json.config).toEqual({\n      foo: 'bar'\n    });\n    expect(json.code).toBe('ESOMETHING');\n    expect(json.status).toBe(200);\n    expect(json.request).toBe(undefined);\n    expect(json.response).toBe(undefined);\n  });","file":"specs/core/AxiosError.spec.js","skipped":false,"dir":"test"},{"name":"should add config, config, request and response to error","suites":["core::AxiosError","core::createError.from"],"updatePoint":{"line":53,"column":64,"index":1614},"line":53,"code":"    it('should add config, config, request and response to error', function () {\n      var error = new Error('Boom!');\n      var request = {\n        path: '/foo'\n      };\n      var response = {\n        status: 200,\n        data: {\n          foo: 'bar'\n        }\n      };\n      var axiosError = AxiosError.from(error, 'ESOMETHING', {\n        foo: 'bar'\n      }, request, response);\n      expect(axiosError.config).toEqual({\n        foo: 'bar'\n      });\n      expect(axiosError.code).toBe('ESOMETHING');\n      expect(axiosError.request).toBe(request);\n      expect(axiosError.response).toBe(response);\n      expect(axiosError.isAxiosError).toBe(true);\n    });","file":"specs/core/AxiosError.spec.js","skipped":false,"dir":"test"},{"name":"should return error","suites":["core::AxiosError","core::createError.from"],"updatePoint":{"line":75,"column":27,"index":2235},"line":75,"code":"    it('should return error', function () {\n      var error = new Error('Boom!');\n      expect(AxiosError.from(error, 'ESOMETHING', {\n        foo: 'bar'\n      }) instanceof AxiosError).toBeTruthy();\n    });","file":"specs/core/AxiosError.spec.js","skipped":false,"dir":"test"},{"name":"should combine URLs when the requestedURL is relative","suites":["helpers::buildFullPath"],"updatePoint":{"line":4,"column":59,"index":174},"line":4,"code":"  it('should combine URLs when the requestedURL is relative', function () {\n    expect(buildFullPath('https://api.github.com', '/users')).toBe('https://api.github.com/users');\n  });","file":"specs/core/buildFullPath.spec.js","skipped":false,"dir":"test"},{"name":"should return the requestedURL when it is absolute","suites":["helpers::buildFullPath"],"updatePoint":{"line":7,"column":56,"index":353},"line":7,"code":"  it('should return the requestedURL when it is absolute', function () {\n    expect(buildFullPath('https://api.github.com', 'https://api.example.com/users')).toBe('https://api.example.com/users');\n  });","file":"specs/core/buildFullPath.spec.js","skipped":false,"dir":"test"},{"name":"should not combine URLs when the baseURL is not configured","suites":["helpers::buildFullPath"],"updatePoint":{"line":10,"column":64,"index":564},"line":10,"code":"  it('should not combine URLs when the baseURL is not configured', function () {\n    expect(buildFullPath(undefined, '/users')).toBe('/users');\n  });","file":"specs/core/buildFullPath.spec.js","skipped":false,"dir":"test"},{"name":"should combine URLs when the baseURL and requestedURL are relative","suites":["helpers::buildFullPath"],"updatePoint":{"line":13,"column":72,"index":722},"line":13,"code":"  it('should combine URLs when the baseURL and requestedURL are relative', function () {\n    expect(buildFullPath('/api', '/users')).toBe('/api/users');\n  });","file":"specs/core/buildFullPath.spec.js","skipped":false,"dir":"test"},{"name":"should accept undefined for second argument","suites":["core::mergeConfig"],"updatePoint":{"line":6,"column":49,"index":205},"line":6,"code":"  it('should accept undefined for second argument', function () {\n    expect(mergeConfig(defaults, undefined)).toEqual(defaults);\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should accept an object for second argument","suites":["core::mergeConfig"],"updatePoint":{"line":9,"column":49,"index":341},"line":9,"code":"  it('should accept an object for second argument', function () {\n    expect(mergeConfig(defaults, {})).toEqual(defaults);\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should not leave references","suites":["core::mergeConfig"],"updatePoint":{"line":12,"column":33,"index":454},"line":12,"code":"  it('should not leave references', function () {\n    var merged = mergeConfig(defaults, {});\n    expect(merged).not.toBe(defaults);\n    expect(merged.headers).not.toBe(defaults.headers);\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should allow setting request options","suites":["core::mergeConfig"],"updatePoint":{"line":17,"column":42,"index":657},"line":17,"code":"  it('should allow setting request options', function () {\n    var config = {\n      url: '__sample url__',\n      method: '__sample method__',\n      params: '__sample params__',\n      data: {\n        foo: true\n      }\n    };\n    var merged = mergeConfig(defaults, config);\n    expect(merged.url).toEqual(config.url);\n    expect(merged.method).toEqual(config.method);\n    expect(merged.params).toEqual(config.params);\n    expect(merged.data).toEqual(config.data);\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should not inherit request options","suites":["core::mergeConfig"],"updatePoint":{"line":32,"column":40,"index":1123},"line":32,"code":"  it('should not inherit request options', function () {\n    var localDefaults = {\n      method: '__sample method__',\n      data: {\n        foo: true\n      }\n    };\n    var merged = mergeConfig(localDefaults, {});\n    expect(merged.method).toEqual(undefined);\n    expect(merged.data).toEqual(undefined);\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should allow setting other options","suites":["core::mergeConfig"],"updatePoint":{"line":91,"column":40,"index":2586},"line":91,"code":"  it('should allow setting other options', function () {\n    var merged = mergeConfig(defaults, {\n      timeout: 123\n    });\n    expect(merged.timeout).toEqual(123);\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should allow setting custom options","suites":["core::mergeConfig"],"updatePoint":{"line":97,"column":41,"index":2759},"line":97,"code":"  it('should allow setting custom options', function () {\n    var merged = mergeConfig(defaults, {\n      foo: 'bar'\n    });\n    expect(merged.foo).toEqual('bar');\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should allow setting custom default options","suites":["core::mergeConfig"],"updatePoint":{"line":103,"column":49,"index":2936},"line":103,"code":"  it('should allow setting custom default options', function () {\n    var merged = mergeConfig({\n      foo: 'bar'\n    }, {});\n    expect(merged.foo).toEqual('bar');\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should allow merging custom objects in the config","suites":["core::mergeConfig"],"updatePoint":{"line":109,"column":55,"index":3113},"line":109,"code":"  it('should allow merging custom objects in the config', function () {\n    var merged = mergeConfig({\n      nestedConfig: {\n        propertyOnDefaultConfig: true\n      }\n    }, {\n      nestedConfig: {\n        propertyOnRequestConfig: true\n      }\n    });\n    expect(merged.nestedConfig.propertyOnDefaultConfig).toEqual(true);\n    expect(merged.nestedConfig.propertyOnRequestConfig).toEqual(true);\n  });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should skip if config2 is undefined","suites":["core::mergeConfig","valueFromConfig2Keys"],"updatePoint":{"line":130,"column":43,"index":3657},"line":130,"code":"    it('should skip if config2 is undefined', function () {\n      expect(mergeConfig(config1, {})).toEqual({});\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config2 if is plain object","suites":["core::mergeConfig","valueFromConfig2Keys"],"updatePoint":{"line":133,"column":47,"index":3781},"line":133,"code":"    it('should clone config2 if is plain object', function () {\n      var data = {\n        a: 1,\n        b: 2\n      };\n      var merged = mergeConfig(config1, {\n        data: data\n      });\n      expect(merged.data).toEqual(data);\n      expect(merged.data).not.toBe(data);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config2 if is array","suites":["core::mergeConfig","valueFromConfig2Keys"],"updatePoint":{"line":144,"column":40,"index":4055},"line":144,"code":"    it('should clone config2 if is array', function () {\n      var data = [1, 2, 3];\n      var merged = mergeConfig(config1, {\n        data: data\n      });\n      expect(merged.data).toEqual(data);\n      expect(merged.data).not.toBe(data);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should set as config2 in other cases","suites":["core::mergeConfig","valueFromConfig2Keys"],"updatePoint":{"line":152,"column":44,"index":4306},"line":152,"code":"    it('should set as config2 in other cases', function () {\n      var obj = Object.create({});\n      expect(mergeConfig(config1, {\n        data: 1\n      }).data).toBe(1);\n      expect(mergeConfig(config1, {\n        data: 'str'\n      }).data).toBe('str');\n      expect(mergeConfig(config1, {\n        data: obj\n      }).data).toBe(obj);\n      expect(mergeConfig(config1, {\n        data: null\n      }).data).toBe(null);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should skip if both config1 and config2 are undefined","suites":["core::mergeConfig","mergeDeepPropertiesKeys"],"updatePoint":{"line":169,"column":61,"index":4807},"line":169,"code":"    it('should skip if both config1 and config2 are undefined', function () {\n      expect(mergeConfig({\n        headers: undefined\n      }, {\n        headers: undefined\n      })).toEqual({});\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should merge if both config1 and config2 are plain object","suites":["core::mergeConfig","mergeDeepPropertiesKeys"],"updatePoint":{"line":176,"column":65,"index":5012},"line":176,"code":"    it('should merge if both config1 and config2 are plain object', function () {\n      expect(mergeConfig({\n        headers: {\n          a: 1,\n          b: 1\n        }\n      }, {\n        headers: {\n          b: 2,\n          c: 2\n        }\n      })).toEqual({\n        headers: {\n          a: 1,\n          b: 2,\n          c: 2\n        }\n      });\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config2 if is plain object","suites":["core::mergeConfig","mergeDeepPropertiesKeys"],"updatePoint":{"line":195,"column":47,"index":5348},"line":195,"code":"    it('should clone config2 if is plain object', function () {\n      var config1 = {\n        headers: [1, 2, 3]\n      };\n      var config2 = {\n        headers: {\n          a: 1,\n          b: 2\n        }\n      };\n      var merged = mergeConfig(config1, config2);\n      expect(merged.headers).toEqual(config2.headers);\n      expect(merged.headers).not.toBe(config2.headers);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config2 if is array","suites":["core::mergeConfig","mergeDeepPropertiesKeys"],"updatePoint":{"line":209,"column":40,"index":5723},"line":209,"code":"    it('should clone config2 if is array', function () {\n      var config1 = {\n        headers: {\n          a: 1,\n          b: 1\n        }\n      };\n      var config2 = {\n        headers: [1, 2, 3]\n      };\n      var merged = mergeConfig(config1, config2);\n      expect(merged.headers).toEqual(config2.headers);\n      expect(merged.headers).not.toBe(config2.headers);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should set as config2 in other cases","suites":["core::mergeConfig","mergeDeepPropertiesKeys"],"updatePoint":{"line":223,"column":44,"index":6102},"line":223,"code":"    it('should set as config2 in other cases', function () {\n      var config1 = {\n        headers: {\n          a: 1,\n          b: 1\n        }\n      };\n      var obj = Object.create({});\n      expect(mergeConfig(config1, {\n        headers: 1\n      }).headers).toBe(1);\n      expect(mergeConfig(config1, {\n        headers: 'str'\n      }).headers).toBe('str');\n      expect(mergeConfig(config1, {\n        headers: obj\n      }).headers).toBe(obj);\n      expect(mergeConfig(config1, {\n        headers: null\n      }).headers).toBe(null);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config1 if is plain object","suites":["core::mergeConfig","mergeDeepPropertiesKeys"],"updatePoint":{"line":244,"column":47,"index":6646},"line":244,"code":"    it('should clone config1 if is plain object', function () {\n      var config1 = {\n        headers: {\n          a: 1,\n          b: 2\n        }\n      };\n      var config2 = {};\n      var merged = mergeConfig(config1, config2);\n      expect(merged.headers).toEqual(config1.headers);\n      expect(merged.headers).not.toBe(config1.headers);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config1 if is array","suites":["core::mergeConfig","mergeDeepPropertiesKeys"],"updatePoint":{"line":256,"column":40,"index":6987},"line":256,"code":"    it('should clone config1 if is array', function () {\n      var config1 = {\n        headers: [1, 2, 3]\n      };\n      var config2 = {};\n      var merged = mergeConfig(config1, config2);\n      expect(merged.headers).toEqual(config1.headers);\n      expect(merged.headers).not.toBe(config1.headers);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should set as config1 in other cases","suites":["core::mergeConfig","mergeDeepPropertiesKeys"],"updatePoint":{"line":265,"column":44,"index":7299},"line":265,"code":"    it('should set as config1 in other cases', function () {\n      var config2 = {};\n      var obj = Object.create({});\n      expect(mergeConfig({\n        headers: 1\n      }, config2).headers).toBe(1);\n      expect(mergeConfig({\n        headers: 'str'\n      }, config2).headers).toBe('str');\n      expect(mergeConfig({\n        headers: obj\n      }, config2).headers).toBe(obj);\n      expect(mergeConfig({\n        headers: null\n      }, config2).headers).toBe(null);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should skip if both config1 and config2 are undefined","suites":["core::mergeConfig","defaultToConfig2Keys"],"updatePoint":{"line":283,"column":61,"index":7845},"line":283,"code":"    it('should skip if both config1 and config2 are undefined', function () {\n      expect(mergeConfig({\n        transformRequest: undefined\n      }, {\n        transformRequest: undefined\n      })).toEqual({});\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config2 if both config1 and config2 are plain object","suites":["core::mergeConfig","defaultToConfig2Keys"],"updatePoint":{"line":290,"column":73,"index":8076},"line":290,"code":"    it('should clone config2 if both config1 and config2 are plain object', function () {\n      var config1 = {\n        transformRequest: {\n          a: 1,\n          b: 1\n        }\n      };\n      var config2 = {\n        transformRequest: {\n          b: 2,\n          c: 2\n        }\n      };\n      var merged = mergeConfig(config1, config2);\n      expect(merged.transformRequest).toEqual(config2.transformRequest);\n      expect(merged.transformRequest).not.toBe(config2.transformRequest);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config2 if is array","suites":["core::mergeConfig","defaultToConfig2Keys"],"updatePoint":{"line":307,"column":40,"index":8538},"line":307,"code":"    it('should clone config2 if is array', function () {\n      var config1 = {\n        transformRequest: {\n          a: 1,\n          b: 1\n        }\n      };\n      var config2 = {\n        transformRequest: [1, 2, 3]\n      };\n      var merged = mergeConfig(config1, config2);\n      expect(merged.transformRequest).toEqual(config2.transformRequest);\n      expect(merged.transformRequest).not.toBe(config2.transformRequest);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should set as config2 in other cases","suites":["core::mergeConfig","defaultToConfig2Keys"],"updatePoint":{"line":321,"column":44,"index":8971},"line":321,"code":"    it('should set as config2 in other cases', function () {\n      var config1 = {\n        transformRequest: {\n          a: 1,\n          b: 1\n        }\n      };\n      var obj = Object.create({});\n      expect(mergeConfig(config1, {\n        transformRequest: 1\n      }).transformRequest).toBe(1);\n      expect(mergeConfig(config1, {\n        transformRequest: 'str'\n      }).transformRequest).toBe('str');\n      expect(mergeConfig(config1, {\n        transformRequest: obj\n      }).transformRequest).toBe(obj);\n      expect(mergeConfig(config1, {\n        transformRequest: null\n      }).transformRequest).toBe(null);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config1 if is plain object","suites":["core::mergeConfig","defaultToConfig2Keys"],"updatePoint":{"line":342,"column":47,"index":9596},"line":342,"code":"    it('should clone config1 if is plain object', function () {\n      var config1 = {\n        transformRequest: {\n          a: 1,\n          b: 2\n        }\n      };\n      var config2 = {};\n      var merged = mergeConfig(config1, config2);\n      expect(merged.transformRequest).toEqual(config1.transformRequest);\n      expect(merged.transformRequest).not.toBe(config1.transformRequest);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config1 if is array","suites":["core::mergeConfig","defaultToConfig2Keys"],"updatePoint":{"line":354,"column":40,"index":9982},"line":354,"code":"    it('should clone config1 if is array', function () {\n      var config1 = {\n        transformRequest: [1, 2, 3]\n      };\n      var config2 = {};\n      var merged = mergeConfig(config1, config2);\n      expect(merged.transformRequest).toEqual(config1.transformRequest);\n      expect(merged.transformRequest).not.toBe(config1.transformRequest);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should set as config1 in other cases","suites":["core::mergeConfig","defaultToConfig2Keys"],"updatePoint":{"line":363,"column":44,"index":10339},"line":363,"code":"    it('should set as config1 in other cases', function () {\n      var config2 = {};\n      var obj = Object.create({});\n      expect(mergeConfig({\n        transformRequest: 1\n      }, config2).transformRequest).toBe(1);\n      expect(mergeConfig({\n        transformRequest: 'str'\n      }, config2).transformRequest).toBe('str');\n      expect(mergeConfig({\n        transformRequest: obj\n      }, config2).transformRequest).toBe(obj);\n      expect(mergeConfig({\n        transformRequest: null\n      }, config2).transformRequest).toBe(null);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should merge if config2 in keys","suites":["core::mergeConfig","directMergeKeys"],"updatePoint":{"line":381,"column":39,"index":10930},"line":381,"code":"    it('should merge if config2 in keys', function () {\n      expect(mergeConfig({}, {\n        validateStatus: undefined\n      })).toEqual({\n        validateStatus: undefined\n      });\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should merge if both config1 and config2 are plain object","suites":["core::mergeConfig","directMergeKeys"],"updatePoint":{"line":388,"column":65,"index":11149},"line":388,"code":"    it('should merge if both config1 and config2 are plain object', function () {\n      expect(mergeConfig({\n        validateStatus: {\n          a: 1,\n          b: 1\n        }\n      }, {\n        validateStatus: {\n          b: 2,\n          c: 2\n        }\n      })).toEqual({\n        validateStatus: {\n          a: 1,\n          b: 2,\n          c: 2\n        }\n      });\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config2 if is plain object","suites":["core::mergeConfig","directMergeKeys"],"updatePoint":{"line":407,"column":47,"index":11506},"line":407,"code":"    it('should clone config2 if is plain object', function () {\n      var config1 = {\n        validateStatus: [1, 2, 3]\n      };\n      var config2 = {\n        validateStatus: {\n          a: 1,\n          b: 2\n        }\n      };\n      var merged = mergeConfig(config1, config2);\n      expect(merged.validateStatus).toEqual(config2.validateStatus);\n      expect(merged.validateStatus).not.toBe(config2.validateStatus);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config2 if is array","suites":["core::mergeConfig","directMergeKeys"],"updatePoint":{"line":421,"column":40,"index":11923},"line":421,"code":"    it('should clone config2 if is array', function () {\n      var config1 = {\n        validateStatus: {\n          a: 1,\n          b: 2\n        }\n      };\n      var config2 = {\n        validateStatus: [1, 2, 3]\n      };\n      var merged = mergeConfig(config1, config2);\n      expect(merged.validateStatus).toEqual(config2.validateStatus);\n      expect(merged.validateStatus).not.toBe(config2.validateStatus);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should set as config2 in other cases","suites":["core::mergeConfig","directMergeKeys"],"updatePoint":{"line":435,"column":44,"index":12344},"line":435,"code":"    it('should set as config2 in other cases', function () {\n      var config1 = {\n        validateStatus: {\n          a: 1,\n          b: 2\n        }\n      };\n      var obj = Object.create({});\n      expect(mergeConfig(config1, {\n        validateStatus: 1\n      }).validateStatus).toBe(1);\n      expect(mergeConfig(config1, {\n        validateStatus: 'str'\n      }).validateStatus).toBe('str');\n      expect(mergeConfig(config1, {\n        validateStatus: obj\n      }).validateStatus).toBe(obj);\n      expect(mergeConfig(config1, {\n        validateStatus: null\n      }).validateStatus).toBe(null);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config1 if is plain object","suites":["core::mergeConfig","directMergeKeys"],"updatePoint":{"line":456,"column":47,"index":12951},"line":456,"code":"    it('should clone config1 if is plain object', function () {\n      var config1 = {\n        validateStatus: {\n          a: 1,\n          b: 2\n        }\n      };\n      var config2 = {};\n      var merged = mergeConfig(config1, config2);\n      expect(merged.validateStatus).toEqual(config1.validateStatus);\n      expect(merged.validateStatus).not.toBe(config1.validateStatus);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should clone config1 if is array","suites":["core::mergeConfig","directMergeKeys"],"updatePoint":{"line":468,"column":40,"index":13327},"line":468,"code":"    it('should clone config1 if is array', function () {\n      var config1 = {\n        validateStatus: [1, 2, 3]\n      };\n      var config2 = {};\n      var merged = mergeConfig(config1, config2);\n      expect(merged.validateStatus).toEqual(config1.validateStatus);\n      expect(merged.validateStatus).not.toBe(config1.validateStatus);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should set as config1 in other cases","suites":["core::mergeConfig","directMergeKeys"],"updatePoint":{"line":477,"column":44,"index":13674},"line":477,"code":"    it('should set as config1 in other cases', function () {\n      var config2 = {};\n      var obj = Object.create({});\n      expect(mergeConfig({\n        validateStatus: 1\n      }, config2).validateStatus).toBe(1);\n      expect(mergeConfig({\n        validateStatus: 'str'\n      }, config2).validateStatus).toBe('str');\n      expect(mergeConfig({\n        validateStatus: obj\n      }, config2).validateStatus).toBe(obj);\n      expect(mergeConfig({\n        validateStatus: null\n      }, config2).validateStatus).toBe(null);\n    });","file":"specs/core/mergeConfig.spec.js","skipped":false,"dir":"test"},{"name":"should resolve promise if status is not set","suites":["core::settle"],"updatePoint":{"line":10,"column":49,"index":288},"line":10,"code":"  it('should resolve promise if status is not set', function () {\n    var response = {\n      config: {\n        validateStatus: function () {\n          return true;\n        }\n      }\n    };\n    settle(resolve, reject, response);\n    expect(resolve).toHaveBeenCalledWith(response);\n    expect(reject).not.toHaveBeenCalled();\n  });","file":"specs/core/settle.spec.js","skipped":false,"dir":"test"},{"name":"should resolve promise if validateStatus is not set","suites":["core::settle"],"updatePoint":{"line":22,"column":57,"index":625},"line":22,"code":"  it('should resolve promise if validateStatus is not set', function () {\n    var response = {\n      status: 500,\n      config: {}\n    };\n    settle(resolve, reject, response);\n    expect(resolve).toHaveBeenCalledWith(response);\n    expect(reject).not.toHaveBeenCalled();\n  });","file":"specs/core/settle.spec.js","skipped":false,"dir":"test"},{"name":"should resolve promise if validateStatus returns true","suites":["core::settle"],"updatePoint":{"line":31,"column":59,"index":905},"line":31,"code":"  it('should resolve promise if validateStatus returns true', function () {\n    var response = {\n      status: 500,\n      config: {\n        validateStatus: function () {\n          return true;\n        }\n      }\n    };\n    settle(resolve, reject, response);\n    expect(resolve).toHaveBeenCalledWith(response);\n    expect(reject).not.toHaveBeenCalled();\n  });","file":"specs/core/settle.spec.js","skipped":false,"dir":"test"},{"name":"should reject promise if validateStatus returns false","suites":["core::settle"],"updatePoint":{"line":44,"column":59,"index":1263},"line":44,"code":"  it('should reject promise if validateStatus returns false', function () {\n    var req = {\n      path: '/foo'\n    };\n    var response = {\n      status: 500,\n      config: {\n        validateStatus: function () {\n          return false;\n        }\n      },\n      request: req\n    };\n    settle(resolve, reject, response);\n    expect(resolve).not.toHaveBeenCalled();\n    expect(reject).toHaveBeenCalled();\n    var reason = reject.calls.first().args[0];\n    expect(reason instanceof Error).toBe(true);\n    expect(reason.message).toBe('Request failed with status code 500');\n    expect(reason.config).toBe(response.config);\n    expect(reason.request).toBe(req);\n    expect(reason.response).toBe(response);\n  });","file":"specs/core/settle.spec.js","skipped":false,"dir":"test"},{"name":"should pass status to validateStatus","suites":["core::settle"],"updatePoint":{"line":67,"column":42,"index":1953},"line":67,"code":"  it('should pass status to validateStatus', function () {\n    var validateStatus = jasmine.createSpy('validateStatus');\n    var response = {\n      status: 500,\n      config: {\n        validateStatus: validateStatus\n      }\n    };\n    settle(resolve, reject, response);\n    expect(validateStatus).toHaveBeenCalledWith(500);\n  });","file":"specs/core/settle.spec.js","skipped":false,"dir":"test"},{"name":"should support a single transformer","suites":["core::transformData"],"updatePoint":{"line":4,"column":41,"index":153},"line":4,"code":"  it('should support a single transformer', function () {\n    var data;\n    data = transformData(data, null, function (data) {\n      data = 'foo';\n      return data;\n    });\n    expect(data).toEqual('foo');\n  });","file":"specs/core/transformData.spec.js","skipped":false,"dir":"test"},{"name":"should support an array of transformers","suites":["core::transformData"],"updatePoint":{"line":12,"column":45,"index":370},"line":12,"code":"  it('should support an array of transformers', function () {\n    var data = '';\n    data = transformData(data, null, [function (data) {\n      data += 'f';\n      return data;\n    }, function (data) {\n      data += 'o';\n      return data;\n    }, function (data) {\n      data += 'o';\n      return data;\n    }]);\n    expect(data).toEqual('foo');\n  });","file":"specs/core/transformData.spec.js","skipped":false,"dir":"test"},{"name":"should transform request json","suites":["defaults"],"updatePoint":{"line":17,"column":35,"index":583},"line":17,"code":"  it('should transform request json', function () {\n    expect(defaults.transformRequest[0]({\n      foo: 'bar'\n    })).toEqual('{\"foo\":\"bar\"}');\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should also transform request json when 'Content-Type' is 'application/json'","suites":["defaults"],"updatePoint":{"line":22,"column":82,"index":781},"line":22,"code":"  it(\"should also transform request json when 'Content-Type' is 'application/json'\", function () {\n    var headers = {\n      'Content-Type': 'application/json'\n    };\n    expect(defaults.transformRequest[0](JSON.stringify({\n      foo: 'bar'\n    }), headers)).toEqual('{\"foo\":\"bar\"}');\n    expect(defaults.transformRequest[0]([42, 43], headers)).toEqual('[42,43]');\n    expect(defaults.transformRequest[0]('foo', headers)).toEqual('\"foo\"');\n    expect(defaults.transformRequest[0](42, headers)).toEqual('42');\n    expect(defaults.transformRequest[0](true, headers)).toEqual('true');\n    expect(defaults.transformRequest[0](false, headers)).toEqual('false');\n    expect(defaults.transformRequest[0](null, headers)).toEqual('null');\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should transform the plain data object to a FormData instance 'Content-Type' if header is 'multipart/form-data'","suites":["defaults"],"updatePoint":{"line":36,"column":117,"index":1552},"line":36,"code":"  it(\"should transform the plain data object to a FormData instance 'Content-Type' if header is 'multipart/form-data'\", function () {\n    var headers = {\n      'Content-Type': 'multipart/form-data'\n    };\n    var payload = {\n      x: 1\n    };\n    var transformed = defaults.transformRequest[0](payload, headers);\n    expect(transformed).toEqual(jasmine.any(FormData));\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing to request string","suites":["defaults"],"updatePoint":{"line":46,"column":41,"index":1851},"line":46,"code":"  it('should do nothing to request string', function () {\n    expect(defaults.transformRequest[0]('foo=bar')).toEqual('foo=bar');\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should transform response json","suites":["defaults"],"updatePoint":{"line":49,"column":36,"index":1982},"line":49,"code":"  it('should transform response json', function () {\n    var data = defaults.transformResponse[0].call(defaults, '{\"foo\":\"bar\"}');\n    expect(typeof data).toEqual('object');\n    expect(data.foo).toEqual('bar');\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should do nothing to response string","suites":["defaults"],"updatePoint":{"line":54,"column":42,"index":2205},"line":54,"code":"  it('should do nothing to response string', function () {\n    expect(defaults.transformResponse[0]('foo=bar')).toEqual('foo=bar');\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should use global defaults config","suites":["defaults"],"updatePoint":{"line":57,"column":39,"index":2340},"line":57,"code":"  it('should use global defaults config', function (done) {\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo');\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should use modified defaults config","suites":["defaults"],"updatePoint":{"line":64,"column":41,"index":2536},"line":64,"code":"  it('should use modified defaults config', function (done) {\n    axios.defaults.baseURL = 'http://example.com/';\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('http://example.com/foo');\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should use request config","suites":["defaults"],"updatePoint":{"line":72,"column":31,"index":2792},"line":72,"code":"  it('should use request config', function (done) {\n    axios('/foo', {\n      baseURL: 'http://www.example.com'\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('http://www.example.com/foo');\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should use default config for custom instance","suites":["defaults"],"updatePoint":{"line":81,"column":51,"index":3069},"line":81,"code":"  it('should use default config for custom instance', function (done) {\n    var instance = axios.create({\n      xsrfCookieName: XSRF_COOKIE_NAME,\n      xsrfHeaderName: 'X-CUSTOM-XSRF-TOKEN'\n    });\n    document.cookie = instance.defaults.xsrfCookieName + '=foobarbaz';\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders[instance.defaults.xsrfHeaderName]).toEqual('foobarbaz');\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should use GET headers","suites":["defaults"],"updatePoint":{"line":93,"column":28,"index":3509},"line":93,"code":"  it('should use GET headers', function (done) {\n    axios.defaults.headers.get['X-CUSTOM-HEADER'] = 'foo';\n    axios.get('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders['X-CUSTOM-HEADER']).toBe('foo');\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should use POST headers","suites":["defaults"],"updatePoint":{"line":101,"column":29,"index":3785},"line":101,"code":"  it('should use POST headers', function (done) {\n    axios.defaults.headers.post['X-CUSTOM-HEADER'] = 'foo';\n    axios.post('/foo', {});\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders['X-CUSTOM-HEADER']).toBe('foo');\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should use header config","suites":["defaults"],"updatePoint":{"line":109,"column":30,"index":4068},"line":109,"code":"  it('should use header config', function (done) {\n    var instance = axios.create({\n      headers: {\n        common: {\n          'X-COMMON-HEADER': 'commonHeaderValue'\n        },\n        get: {\n          'X-GET-HEADER': 'getHeaderValue'\n        },\n        post: {\n          'X-POST-HEADER': 'postHeaderValue'\n        }\n      }\n    });\n    instance.get('/foo', {\n      headers: {\n        'X-FOO-HEADER': 'fooHeaderValue',\n        'X-BAR-HEADER': 'barHeaderValue'\n      }\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders).toEqual(utils.merge(defaults.headers.common, defaults.headers.get, {\n        'X-COMMON-HEADER': 'commonHeaderValue',\n        'X-GET-HEADER': 'getHeaderValue',\n        'X-FOO-HEADER': 'fooHeaderValue',\n        'X-BAR-HEADER': 'barHeaderValue'\n      }));\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should be used by custom instance if set before instance created","suites":["defaults"],"updatePoint":{"line":139,"column":70,"index":4952},"line":139,"code":"  it('should be used by custom instance if set before instance created', function (done) {\n    axios.defaults.baseURL = 'http://example.org/';\n    var instance = axios.create();\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('http://example.org/foo');\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should not be used by custom instance if set after instance created","suites":["defaults"],"updatePoint":{"line":148,"column":73,"index":5292},"line":148,"code":"  it('should not be used by custom instance if set after instance created', function (done) {\n    var instance = axios.create();\n    axios.defaults.baseURL = 'http://example.org/';\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo');\n      done();\n    });\n  });","file":"specs/defaults.spec.js","skipped":false,"dir":"test"},{"name":"should default common headers","suites":["headers"],"updatePoint":{"line":28,"column":35,"index":616},"line":28,"code":"  it('should default common headers', function (done) {\n    var headers = axios.defaults.headers.common;\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          expect(request.requestHeaders[key]).toEqual(headers[key]);\n        }\n      }\n\n      done();\n    });\n  });","file":"specs/headers.spec.js","skipped":false,"dir":"test"},{"name":"should add extra headers for post","suites":["headers"],"updatePoint":{"line":41,"column":39,"index":983},"line":41,"code":"  it('should add extra headers for post', function (done) {\n    var headers = axios.defaults.headers.common;\n    axios.post('/foo', 'fizz=buzz');\n    getAjaxRequest().then(function (request) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          expect(request.requestHeaders[key]).toEqual(headers[key]);\n        }\n      }\n\n      done();\n    });\n  });","file":"specs/headers.spec.js","skipped":false,"dir":"test"},{"name":"should reset headers by null or explicit undefined","suites":["headers"],"updatePoint":{"line":54,"column":56,"index":1385},"line":54,"code":"  it('should reset headers by null or explicit undefined', function (done) {\n    axios.create({\n      headers: {\n        common: {\n          'x-header-a': 'a',\n          'x-header-b': 'b',\n          'x-header-c': 'c'\n        }\n      }\n    }).post('/foo', {\n      fizz: 'buzz'\n    }, {\n      headers: {\n        'Content-Type': null,\n        'x-header-a': null,\n        'x-header-b': undefined\n      }\n    });\n    getAjaxRequest().then(function (request) {\n      testHeaderValue(request.requestHeaders, 'Content-Type', null);\n      testHeaderValue(request.requestHeaders, 'x-header-a', null);\n      testHeaderValue(request.requestHeaders, 'x-header-b', undefined);\n      testHeaderValue(request.requestHeaders, 'x-header-c', 'c');\n      done();\n    });\n  });","file":"specs/headers.spec.js","skipped":false,"dir":"test"},{"name":"should use application/json when posting an object","suites":["headers"],"updatePoint":{"line":80,"column":56,"index":2142},"line":80,"code":"  it('should use application/json when posting an object', function (done) {\n    axios.post('/foo/bar', {\n      firstName: 'foo',\n      lastName: 'bar'\n    });\n    getAjaxRequest().then(function (request) {\n      testHeaderValue(request.requestHeaders, 'Content-Type', 'application/json');\n      done();\n    });\n  });","file":"specs/headers.spec.js","skipped":false,"dir":"test"},{"name":"should remove content-type if data is empty","suites":["headers"],"updatePoint":{"line":90,"column":49,"index":2453},"line":90,"code":"  it('should remove content-type if data is empty', function (done) {\n    axios.post('/foo');\n    getAjaxRequest().then(function (request) {\n      testHeaderValue(request.requestHeaders, 'Content-Type', undefined);\n      done();\n    });\n  });","file":"specs/headers.spec.js","skipped":false,"dir":"test"},{"name":"should preserve content-type if data is false","suites":["headers"],"updatePoint":{"line":97,"column":51,"index":2698},"line":97,"code":"  it('should preserve content-type if data is false', function (done) {\n    axios.post('/foo', false);\n    getAjaxRequest().then(function (request) {\n      testHeaderValue(request.requestHeaders, 'Content-Type', 'application/x-www-form-urlencoded');\n      done();\n    });\n  });","file":"specs/headers.spec.js","skipped":false,"dir":"test"},{"name":"should bind an object to a function","suites":["bind"],"updatePoint":{"line":4,"column":41,"index":123},"line":4,"code":"  it('should bind an object to a function', function () {\n    var o = {\n      val: 123\n    };\n    var f = bind(function (num) {\n      return this.val * num;\n    }, o);\n    expect(f(2)).toEqual(246);\n  });","file":"specs/helpers/bind.spec.js","skipped":false,"dir":"test"},{"name":"should support null params","suites":["helpers::buildURL"],"updatePoint":{"line":6,"column":32,"index":188},"line":6,"code":"  it('should support null params', function () {\n    expect(buildURL('/foo')).toEqual('/foo');\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should support params","suites":["helpers::buildURL"],"updatePoint":{"line":9,"column":27,"index":284},"line":9,"code":"  it('should support params', function () {\n    expect(buildURL('/foo', {\n      foo: 'bar'\n    })).toEqual('/foo?foo=bar');\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should support object params","suites":["helpers::buildURL"],"updatePoint":{"line":14,"column":34,"index":421},"line":14,"code":"  it('should support object params', function () {\n    expect(buildURL('/foo', {\n      foo: {\n        bar: 'baz'\n      }\n    })).toEqual('/foo?foo=' + encodeURI('{\"bar\":\"baz\"}'));\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should support date params","suites":["helpers::buildURL"],"updatePoint":{"line":21,"column":32,"index":605},"line":21,"code":"  it('should support date params', function () {\n    var date = new Date();\n    expect(buildURL('/foo', {\n      date: date\n    })).toEqual('/foo?date=' + date.toISOString());\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should support array params","suites":["helpers::buildURL"],"updatePoint":{"line":27,"column":33,"index":787},"line":27,"code":"  it('should support array params', function () {\n    expect(buildURL('/foo', {\n      foo: ['bar', 'baz']\n    })).toEqual('/foo?foo[]=bar&foo[]=baz');\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should support special char params","suites":["helpers::buildURL"],"updatePoint":{"line":32,"column":40,"index":951},"line":32,"code":"  it('should support special char params', function () {\n    expect(buildURL('/foo', {\n      foo: ':$, '\n    })).toEqual('/foo?foo=:$,+');\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should support existing params","suites":["helpers::buildURL"],"updatePoint":{"line":37,"column":36,"index":1092},"line":37,"code":"  it('should support existing params', function () {\n    expect(buildURL('/foo?foo=bar', {\n      bar: 'baz'\n    })).toEqual('/foo?foo=bar&bar=baz');\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should support \"length\" parameter","suites":["helpers::buildURL"],"updatePoint":{"line":42,"column":39,"index":1250},"line":42,"code":"  it('should support \"length\" parameter', function () {\n    expect(buildURL('/foo', {\n      query: 'bar',\n      start: 0,\n      length: 5\n    })).toEqual('/foo?query=bar&start=0&length=5');\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should correct discard url hash mark","suites":["helpers::buildURL"],"updatePoint":{"line":49,"column":42,"index":1449},"line":49,"code":"  it('should correct discard url hash mark', function () {\n    expect(buildURL('/foo?foo=bar#hash', {\n      query: 'baz'\n    })).toEqual('/foo?foo=bar&query=baz');\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should use serializer if provided","suites":["helpers::buildURL"],"updatePoint":{"line":54,"column":39,"index":1616},"line":54,"code":"  it('should use serializer if provided', function () {\n    serializer = sinon.stub();\n    params = {\n      foo: 'bar'\n    };\n    serializer.returns('foo=bar');\n    expect(buildURL('/foo', params, serializer)).toEqual('/foo?foo=bar');\n    expect(serializer.calledOnce).toBe(true);\n    expect(serializer.calledWith(params)).toBe(true);\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should support URLSearchParams","suites":["helpers::buildURL"],"updatePoint":{"line":64,"column":36,"index":1954},"line":64,"code":"  it('should support URLSearchParams', function () {\n    expect(buildURL('/foo', new URLSearchParams('bar=baz'))).toEqual('/foo?bar=baz');\n  });","file":"specs/helpers/buildURL.spec.js","skipped":false,"dir":"test"},{"name":"should combine URLs","suites":["helpers::combineURLs"],"updatePoint":{"line":4,"column":25,"index":137},"line":4,"code":"  it('should combine URLs', function () {\n    expect(combineURLs('https://api.github.com', '/users')).toBe('https://api.github.com/users');\n  });","file":"specs/helpers/combineURLs.spec.js","skipped":false,"dir":"test"},{"name":"should remove duplicate slashes","suites":["helpers::combineURLs"],"updatePoint":{"line":7,"column":37,"index":295},"line":7,"code":"  it('should remove duplicate slashes', function () {\n    expect(combineURLs('https://api.github.com/', '/users')).toBe('https://api.github.com/users');\n  });","file":"specs/helpers/combineURLs.spec.js","skipped":false,"dir":"test"},{"name":"should insert missing slash","suites":["helpers::combineURLs"],"updatePoint":{"line":10,"column":33,"index":450},"line":10,"code":"  it('should insert missing slash', function () {\n    expect(combineURLs('https://api.github.com', 'users')).toBe('https://api.github.com/users');\n  });","file":"specs/helpers/combineURLs.spec.js","skipped":false,"dir":"test"},{"name":"should not insert slash when relative url missing/empty","suites":["helpers::combineURLs"],"updatePoint":{"line":13,"column":61,"index":631},"line":13,"code":"  it('should not insert slash when relative url missing/empty', function () {\n    expect(combineURLs('https://api.github.com/users', '')).toBe('https://api.github.com/users');\n  });","file":"specs/helpers/combineURLs.spec.js","skipped":false,"dir":"test"},{"name":"should allow a single slash for relative url","suites":["helpers::combineURLs"],"updatePoint":{"line":16,"column":50,"index":802},"line":16,"code":"  it('should allow a single slash for relative url', function () {\n    expect(combineURLs('https://api.github.com/users', '/')).toBe('https://api.github.com/users/');\n  });","file":"specs/helpers/combineURLs.spec.js","skipped":false,"dir":"test"},{"name":"should write cookies","suites":["helpers::cookies"],"updatePoint":{"line":13,"column":26,"index":448},"line":13,"code":"  it('should write cookies', function () {\n    cookies.write('foo', 'baz');\n    expect(document.cookie).toEqual('foo=baz');\n  });","file":"specs/helpers/cookies.spec.js","skipped":false,"dir":"test"},{"name":"should read cookies","suites":["helpers::cookies"],"updatePoint":{"line":17,"column":25,"index":577},"line":17,"code":"  it('should read cookies', function () {\n    cookies.write('foo', 'abc');\n    cookies.write('bar', 'def');\n    expect(cookies.read('foo')).toEqual('abc');\n    expect(cookies.read('bar')).toEqual('def');\n  });","file":"specs/helpers/cookies.spec.js","skipped":false,"dir":"test"},{"name":"should remove cookies","suites":["helpers::cookies"],"updatePoint":{"line":23,"column":27,"index":789},"line":23,"code":"  it('should remove cookies', function () {\n    cookies.write('foo', 'bar');\n    cookies.remove('foo');\n    expect(cookies.read('foo')).toEqual(null);\n  });","file":"specs/helpers/cookies.spec.js","skipped":false,"dir":"test"},{"name":"should uri encode values","suites":["helpers::cookies"],"updatePoint":{"line":28,"column":30,"index":949},"line":28,"code":"  it('should uri encode values', function () {\n    cookies.write('foo', 'bar baz%');\n    expect(document.cookie).toEqual('foo=bar%20baz%25');\n  });","file":"specs/helpers/cookies.spec.js","skipped":false,"dir":"test"},{"name":"should return true if URL begins with valid scheme name","suites":["helpers::isAbsoluteURL"],"updatePoint":{"line":4,"column":61,"index":179},"line":4,"code":"  it('should return true if URL begins with valid scheme name', function () {\n    expect(isAbsoluteURL('https://api.github.com/users')).toBe(true);\n    expect(isAbsoluteURL('custom-scheme-v1.0://example.com/')).toBe(true);\n    expect(isAbsoluteURL('HTTP://example.com/')).toBe(true);\n  });","file":"specs/helpers/isAbsoluteURL.spec.js","skipped":false,"dir":"test"},{"name":"should return false if URL begins with invalid scheme name","suites":["helpers::isAbsoluteURL"],"updatePoint":{"line":9,"column":64,"index":472},"line":9,"code":"  it('should return false if URL begins with invalid scheme name', function () {\n    expect(isAbsoluteURL('123://example.com/')).toBe(false);\n    expect(isAbsoluteURL('!valid://example.com/')).toBe(false);\n  });","file":"specs/helpers/isAbsoluteURL.spec.js","skipped":false,"dir":"test"},{"name":"should return true if URL is protocol-relative","suites":["helpers::isAbsoluteURL"],"updatePoint":{"line":13,"column":52,"index":672},"line":13,"code":"  it('should return true if URL is protocol-relative', function () {\n    expect(isAbsoluteURL('//example.com/')).toBe(true);\n  });","file":"specs/helpers/isAbsoluteURL.spec.js","skipped":false,"dir":"test"},{"name":"should return false if URL is relative","suites":["helpers::isAbsoluteURL"],"updatePoint":{"line":16,"column":44,"index":795},"line":16,"code":"  it('should return false if URL is relative', function () {\n    expect(isAbsoluteURL('/foo')).toBe(false);\n    expect(isAbsoluteURL('foo')).toBe(false);\n  });","file":"specs/helpers/isAbsoluteURL.spec.js","skipped":false,"dir":"test"},{"name":"should return true if the error is created by core::createError","suites":["helpers::isAxiosError"],"updatePoint":{"line":6,"column":69,"index":243},"line":6,"code":"  it('should return true if the error is created by core::createError', function () {\n    expect(isAxiosError(new AxiosError('Boom!', null, {\n      foo: 'bar'\n    }))).toBe(true);\n  });","file":"specs/helpers/isAxiosError.spec.js","skipped":false,"dir":"test"},{"name":"should return true if the error is enhanced by core::enhanceError","suites":["helpers::isAxiosError"],"updatePoint":{"line":11,"column":71,"index":431},"line":11,"code":"  it('should return true if the error is enhanced by core::enhanceError', function () {\n    expect(isAxiosError(AxiosError.from(new Error('Boom!'), null, {\n      foo: 'bar'\n    }))).toBe(true);\n  });","file":"specs/helpers/isAxiosError.spec.js","skipped":false,"dir":"test"},{"name":"should return false if the error is a normal Error instance","suites":["helpers::isAxiosError"],"updatePoint":{"line":16,"column":65,"index":625},"line":16,"code":"  it('should return false if the error is a normal Error instance', function () {\n    expect(isAxiosError(new Error('Boom!'))).toBe(false);\n  });","file":"specs/helpers/isAxiosError.spec.js","skipped":false,"dir":"test"},{"name":"should return false if the error is null","suites":["helpers::isAxiosError"],"updatePoint":{"line":19,"column":46,"index":752},"line":19,"code":"  it('should return false if the error is null', function () {\n    expect(isAxiosError(null)).toBe(false);\n  });","file":"specs/helpers/isAxiosError.spec.js","skipped":false,"dir":"test"},{"name":"should detect same origin","suites":["helpers::isURLSameOrigin"],"updatePoint":{"line":4,"column":31,"index":155},"line":4,"code":"  it('should detect same origin', function () {\n    expect(isURLSameOrigin(window.location.href)).toEqual(true);\n  });","file":"specs/helpers/isURLSameOrigin.spec.js","skipped":false,"dir":"test"},{"name":"should detect different origin","suites":["helpers::isURLSameOrigin"],"updatePoint":{"line":7,"column":36,"index":279},"line":7,"code":"  it('should detect different origin', function () {\n    expect(isURLSameOrigin('https://github.com/axios/axios')).toEqual(false);\n  });","file":"specs/helpers/isURLSameOrigin.spec.js","skipped":false,"dir":"test"},{"name":"should normalize matching header name","suites":["helpers::normalizeHeaderName"],"updatePoint":{"line":4,"column":43,"index":179},"line":4,"code":"  it('should normalize matching header name', function () {\n    var headers = {\n      'conTenT-Type': 'foo/bar'\n    };\n    normalizeHeaderName(headers, 'Content-Type');\n    expect(headers['Content-Type']).toBe('foo/bar');\n    expect(headers['conTenT-Type']).toBeUndefined();\n  });","file":"specs/helpers/normalizeHeaderName.spec.js","skipped":false,"dir":"test"},{"name":"should not change non-matching header name","suites":["helpers::normalizeHeaderName"],"updatePoint":{"line":12,"column":48,"index":465},"line":12,"code":"  it('should not change non-matching header name', function () {\n    var headers = {\n      'content-type': 'foo/bar'\n    };\n    normalizeHeaderName(headers, 'Content-Length');\n    expect(headers['content-type']).toBe('foo/bar');\n    expect(headers['Content-Length']).toBeUndefined();\n  });","file":"specs/helpers/normalizeHeaderName.spec.js","skipped":false,"dir":"test"},{"name":"should parse headers","suites":["helpers::parseHeaders"],"updatePoint":{"line":4,"column":26,"index":141},"line":4,"code":"  it('should parse headers', function () {\n    var date = new Date();\n    var parsed = parseHeaders('Date: ' + date.toISOString() + '\\n' + 'Content-Type: application/json\\n' + 'Connection: keep-alive\\n' + 'Transfer-Encoding: chunked');\n    expect(parsed['date']).toEqual(date.toISOString());\n    expect(parsed['content-type']).toEqual('application/json');\n    expect(parsed['connection']).toEqual('keep-alive');\n    expect(parsed['transfer-encoding']).toEqual('chunked');\n  });","file":"specs/helpers/parseHeaders.spec.js","skipped":false,"dir":"test"},{"name":"should use array for set-cookie","suites":["helpers::parseHeaders"],"updatePoint":{"line":12,"column":37,"index":630},"line":12,"code":"  it('should use array for set-cookie', function () {\n    var parsedZero = parseHeaders('');\n    var parsedSingle = parseHeaders('Set-Cookie: key=val;');\n    var parsedMulti = parseHeaders('Set-Cookie: key=val;\\n' + 'Set-Cookie: key2=val2;\\n');\n    expect(parsedZero['set-cookie']).toBeUndefined();\n    expect(parsedSingle['set-cookie']).toEqual(['key=val;']);\n    expect(parsedMulti['set-cookie']).toEqual(['key=val;', 'key2=val2;']);\n  });","file":"specs/helpers/parseHeaders.spec.js","skipped":false,"dir":"test"},{"name":"should handle duplicates","suites":["helpers::parseHeaders"],"updatePoint":{"line":20,"column":30,"index":1065},"line":20,"code":"  it('should handle duplicates', function () {\n    var parsed = parseHeaders('Age: age-a\\n' + // age is in ignore duplicates blocklist\n    'Age: age-b\\n' + 'Foo: foo-a\\n' + 'Foo: foo-b\\n');\n    expect(parsed['age']).toEqual('age-a');\n    expect(parsed['foo']).toEqual('foo-a, foo-b');\n  });","file":"specs/helpers/parseHeaders.spec.js","skipped":false,"dir":"test"},{"name":"should spread array to arguments","suites":["helpers::spread"],"updatePoint":{"line":4,"column":38,"index":135},"line":4,"code":"  it('should spread array to arguments', function () {\n    var value = 0;\n    spread(function (a, b) {\n      value = a * b;\n    })([5, 10]);\n    expect(value).toEqual(50);\n  });","file":"specs/helpers/spread.spec.js","skipped":false,"dir":"test"},{"name":"should return callback result","suites":["helpers::spread"],"updatePoint":{"line":11,"column":35,"index":310},"line":11,"code":"  it('should return callback result', function () {\n    var value = spread(function (a, b) {\n      return a * b;\n    })([5, 10]);\n    expect(value).toEqual(50);\n  });","file":"specs/helpers/spread.spec.js","skipped":false,"dir":"test"},{"name":"should convert nested data object to FormData","suites":["toFormData"],"updatePoint":{"line":4,"column":51,"index":151},"line":4,"code":"  it('should convert nested data object to FormData', function () {\n    var o = {\n      val: 123,\n      nested: {\n        arr: ['hello', 'world']\n      }\n    };\n    var form = toFormData(o);\n    expect(form instanceof FormData).toEqual(true);\n    expect(Array.from(form.keys()).length).toEqual(3);\n    expect(form.get('val')).toEqual('123');\n    expect(form.get('nested.arr.0')).toEqual('hello');\n  });","file":"specs/helpers/toFormData.spec.js","skipped":false,"dir":"test"},{"name":"should append value whose key ends with [] as separate values with the same key","suites":["toFormData"],"updatePoint":{"line":17,"column":85,"index":588},"line":17,"code":"  it('should append value whose key ends with [] as separate values with the same key', function () {\n    var data = {\n      'arr[]': [1, 2, 3]\n    };\n    var form = toFormData(data);\n    expect(Array.from(form.keys()).length).toEqual(3);\n    expect(form.getAll('arr[]')).toEqual(['1', '2', '3']);\n  });","file":"specs/helpers/toFormData.spec.js","skipped":false,"dir":"test"},{"name":"should append value whose key ends with {} as a JSON string","suites":["toFormData"],"updatePoint":{"line":25,"column":65,"index":872},"line":25,"code":"  it('should append value whose key ends with {} as a JSON string', function () {\n    var data = {\n      'obj{}': {\n        x: 1,\n        y: 2\n      }\n    };\n    var str = JSON.stringify(data['obj{}']);\n    var form = toFormData(data);\n    expect(Array.from(form.keys()).length).toEqual(1);\n    expect(form.getAll('obj{}')).toEqual([str]);\n  });","file":"specs/helpers/toFormData.spec.js","skipped":false,"dir":"test"},{"name":"should throw only if unknown an option was passed","suites":["validator::assertOptions"],"updatePoint":{"line":6,"column":55,"index":182},"line":6,"code":"  it('should throw only if unknown an option was passed', function () {\n    expect(function () {\n      validator.assertOptions({\n        x: true\n      }, {\n        y: validator.validators.boolean\n      });\n    }).toThrow(new Error('Unknown option x'));\n    expect(function () {\n      validator.assertOptions({\n        x: true\n      }, {\n        x: validator.validators.boolean,\n        y: validator.validators.boolean\n      });\n    }).not.toThrow(new Error('Unknown option x'));\n  });","file":"specs/helpers/validator.spec.js","skipped":false,"dir":"test"},{"name":"should throw TypeError only if option type doesn't match","suites":["validator::assertOptions"],"updatePoint":{"line":23,"column":63,"index":675},"line":23,"code":"  it('should throw TypeError only if option type doesn\\'t match', function () {\n    expect(function () {\n      validator.assertOptions({\n        x: 123\n      }, {\n        x: validator.validators.boolean\n      });\n    }).toThrow(new TypeError('option x must be a boolean'));\n    expect(function () {\n      validator.assertOptions({\n        x: true\n      }, {\n        x: validator.validators.boolean,\n        y: validator.validators.boolean\n      });\n    }).not.toThrow();\n  });","file":"specs/helpers/validator.spec.js","skipped":false,"dir":"test"},{"name":"should have the same methods as default instance","suites":["instance"],"updatePoint":{"line":8,"column":54,"index":213},"line":8,"code":"  it('should have the same methods as default instance', function () {\n    var instance = axios.create();\n\n    for (var prop in axios) {\n      if (['Axios', 'AxiosError', 'create', 'Cancel', 'CanceledError', 'CancelToken', 'isCancel', 'all', 'spread', 'getUri', 'isAxiosError', 'VERSION', 'default', 'toFormData'].indexOf(prop) > -1) {\n        continue;\n      }\n\n      expect(typeof instance[prop]).toBe(typeof axios[prop]);\n    }\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should make an http request without verb helper","suites":["instance"],"updatePoint":{"line":19,"column":53,"index":649},"line":19,"code":"  it('should make an http request without verb helper', function (done) {\n    var instance = axios.create();\n    instance('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo');\n      done();\n    });\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should make an http request with url instead of baseURL","suites":["instance"],"updatePoint":{"line":27,"column":61,"index":903},"line":27,"code":"  it('should make an http request with url instead of baseURL', function (done) {\n    var instance = axios.create({\n      url: 'https://api.example.com'\n    });\n    instance('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo');\n      done();\n    });\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should make an http request","suites":["instance"],"updatePoint":{"line":37,"column":33,"index":1173},"line":37,"code":"  it('should make an http request', function (done) {\n    var instance = axios.create();\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo');\n      done();\n    });\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should use instance options","suites":["instance"],"updatePoint":{"line":45,"column":33,"index":1403},"line":45,"code":"  it('should use instance options', function (done) {\n    var instance = axios.create({\n      timeout: 1000\n    });\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.timeout).toBe(1000);\n      done();\n    });\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should have defaults.headers","suites":["instance"],"updatePoint":{"line":55,"column":34,"index":1663},"line":55,"code":"  it('should have defaults.headers', function () {\n    var instance = axios.create({\n      baseURL: 'https://api.example.com'\n    });\n    expect(typeof instance.defaults.headers, 'object');\n    expect(typeof instance.defaults.headers.common, 'object');\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should have interceptors on the instance","suites":["instance"],"updatePoint":{"line":62,"column":46,"index":1934},"line":62,"code":"  it('should have interceptors on the instance', function (done) {\n    axios.interceptors.request.use(function (config) {\n      config.foo = true;\n      return config;\n    });\n    var instance = axios.create();\n    instance.interceptors.request.use(function (config) {\n      config.bar = true;\n      return config;\n    });\n    var response;\n    instance.get('/foo').then(function (res) {\n      response = res;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200\n      });\n      setTimeout(function () {\n        expect(response.config.foo).toEqual(undefined);\n        expect(response.config.bar).toEqual(true);\n        done();\n      }, 100);\n    });\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should have getUri on the instance","suites":["instance"],"updatePoint":{"line":87,"column":40,"index":2634},"line":87,"code":"  it('should have getUri on the instance', function () {\n    var instance = axios.create({\n      baseURL: 'https://api.example.com'\n    });\n    var options = {\n      url: 'foo/bar',\n      params: {\n        name: 'axios'\n      }\n    };\n    expect(instance.getUri(options)).toBe('https://api.example.com/foo/bar?name=axios');\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should correctly build url without baseURL","suites":["instance"],"updatePoint":{"line":99,"column":48,"index":2972},"line":99,"code":"  it('should correctly build url without baseURL', function () {\n    var instance = axios.create();\n    var options = {\n      url: 'foo/bar?foo=bar',\n      params: {\n        name: 'axios'\n      }\n    };\n    expect(instance.getUri(options)).toBe('foo/bar?foo=bar&name=axios');\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should correctly discard url hash mark","suites":["instance"],"updatePoint":{"line":109,"column":44,"index":3250},"line":109,"code":"  it('should correctly discard url hash mark', function () {\n    var instance = axios.create();\n    var options = {\n      baseURL: 'https://api.example.com',\n      url: 'foo/bar?foo=bar#hash',\n      params: {\n        name: 'axios'\n      }\n    };\n    expect(instance.getUri(options)).toBe('https://api.example.com/foo/bar?foo=bar&name=axios');\n  });","file":"specs/instance.spec.js","skipped":false,"dir":"test"},{"name":"should add a request interceptor (asynchronous by default)","suites":["interceptors"],"updatePoint":{"line":10,"column":64,"index":320},"line":10,"code":"  it('should add a request interceptor (asynchronous by default)', function (done) {\n    var asyncFlag = false;\n    axios.interceptors.request.use(function (config) {\n      config.headers.test = 'added by interceptor';\n      expect(asyncFlag).toBe(true);\n      return config;\n    });\n    axios('/foo');\n    asyncFlag = true;\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.test).toBe('added by interceptor');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a request interceptor (explicitly flagged as asynchronous)","suites":["interceptors"],"updatePoint":{"line":24,"column":75,"index":803},"line":24,"code":"  it('should add a request interceptor (explicitly flagged as asynchronous)', function (done) {\n    var asyncFlag = false;\n    axios.interceptors.request.use(function (config) {\n      config.headers.test = 'added by interceptor';\n      expect(asyncFlag).toBe(true);\n      return config;\n    }, null, {\n      synchronous: false\n    });\n    axios('/foo');\n    asyncFlag = true;\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.test).toBe('added by interceptor');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a request interceptor that is executed synchronously when flag is provided","suites":["interceptors"],"updatePoint":{"line":40,"column":91,"index":1342},"line":40,"code":"  it('should add a request interceptor that is executed synchronously when flag is provided', function (done) {\n    var asyncFlag = false;\n    axios.interceptors.request.use(function (config) {\n      config.headers.test = 'added by synchronous interceptor';\n      expect(asyncFlag).toBe(false);\n      return config;\n    }, null, {\n      synchronous: true\n    });\n    axios('/foo');\n    asyncFlag = true;\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.test).toBe('added by synchronous interceptor');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should execute asynchronously when not all interceptors are explicitly flagged as synchronous","suites":["interceptors"],"updatePoint":{"line":56,"column":99,"index":1913},"line":56,"code":"  it('should execute asynchronously when not all interceptors are explicitly flagged as synchronous', function (done) {\n    var asyncFlag = false;\n    axios.interceptors.request.use(function (config) {\n      config.headers.foo = 'uh oh, async';\n      expect(asyncFlag).toBe(true);\n      return config;\n    });\n    axios.interceptors.request.use(function (config) {\n      config.headers.test = 'added by synchronous interceptor';\n      expect(asyncFlag).toBe(true);\n      return config;\n    }, null, {\n      synchronous: true\n    });\n    axios.interceptors.request.use(function (config) {\n      config.headers.test = 'added by the async interceptor';\n      expect(asyncFlag).toBe(true);\n      return config;\n    });\n    axios('/foo');\n    asyncFlag = true;\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.foo).toBe('uh oh, async');\n      /* request interceptors have a reversed execution order */\n\n      expect(request.requestHeaders.test).toBe('added by synchronous interceptor');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"runs the interceptor if runWhen function is provided and resolves to true","suites":["interceptors"],"updatePoint":{"line":85,"column":79,"index":2937},"line":85,"code":"  it('runs the interceptor if runWhen function is provided and resolves to true', function (done) {\n    function onGetCall(config) {\n      return config.method === 'get';\n    }\n\n    axios.interceptors.request.use(function (config) {\n      config.headers.test = 'special get headers';\n      return config;\n    }, null, {\n      runWhen: onGetCall\n    });\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.test).toBe('special get headers');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"does not run the interceptor if runWhen function is provided and resolves to false","suites":["interceptors"],"updatePoint":{"line":102,"column":88,"index":3464},"line":102,"code":"  it('does not run the interceptor if runWhen function is provided and resolves to false', function (done) {\n    function onPostCall(config) {\n      return config.method === 'post';\n    }\n\n    axios.interceptors.request.use(function (config) {\n      config.headers.test = 'special get headers';\n      return config;\n    }, null, {\n      runWhen: onPostCall\n    });\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.test).toBeUndefined();\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"does not run async interceptor if runWhen function is provided and resolves to false (and run synchronously)","suites":["interceptors"],"updatePoint":{"line":119,"column":114,"index":4008},"line":119,"code":"  it('does not run async interceptor if runWhen function is provided and resolves to false (and run synchronously)', function (done) {\n    var asyncFlag = false;\n\n    function onPostCall(config) {\n      return config.method === 'post';\n    }\n\n    axios.interceptors.request.use(function (config) {\n      config.headers.test = 'special get headers';\n      return config;\n    }, null, {\n      synchronous: false,\n      runWhen: onPostCall\n    });\n    axios.interceptors.request.use(function (config) {\n      config.headers.sync = 'hello world';\n      expect(asyncFlag).toBe(false);\n      return config;\n    }, null, {\n      synchronous: true\n    });\n    axios('/foo');\n    asyncFlag = true;\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.test).toBeUndefined();\n      expect(request.requestHeaders.sync).toBe('hello world');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a request interceptor with an onRejected block that is called if interceptor code fails","suites":["interceptors"],"updatePoint":{"line":148,"column":104,"index":4884},"line":148,"code":"  it('should add a request interceptor with an onRejected block that is called if interceptor code fails', function (done) {\n    var rejectedSpy = jasmine.createSpy('rejectedSpy');\n    var error = new Error('deadly error');\n    axios.interceptors.request.use(function () {\n      throw error;\n    }, rejectedSpy, {\n      synchronous: true\n    });\n    axios('/foo');\n    getAjaxRequest().then(function () {\n      expect(rejectedSpy).toHaveBeenCalledWith(error);\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a request interceptor that returns a new config object","suites":["interceptors"],"updatePoint":{"line":162,"column":71,"index":5339},"line":162,"code":"  it('should add a request interceptor that returns a new config object', function (done) {\n    axios.interceptors.request.use(function () {\n      return {\n        url: '/bar',\n        method: 'post'\n      };\n    });\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.method).toBe('POST');\n      expect(request.url).toBe('/bar');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a request interceptor that returns a promise","suites":["interceptors"],"updatePoint":{"line":176,"column":61,"index":5723},"line":176,"code":"  it('should add a request interceptor that returns a promise', function (done) {\n    axios.interceptors.request.use(function (config) {\n      return new Promise(function (resolve) {\n        // do something async\n        setTimeout(function () {\n          config.headers.async = 'promise';\n          resolve(config);\n        }, 100);\n      });\n    });\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.async).toBe('promise');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add multiple request interceptors","suites":["interceptors"],"updatePoint":{"line":192,"column":46,"index":6214},"line":192,"code":"  it('should add multiple request interceptors', function (done) {\n    axios.interceptors.request.use(function (config) {\n      config.headers.test1 = '1';\n      return config;\n    });\n    axios.interceptors.request.use(function (config) {\n      config.headers.test2 = '2';\n      return config;\n    });\n    axios.interceptors.request.use(function (config) {\n      config.headers.test3 = '3';\n      return config;\n    });\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.test1).toBe('1');\n      expect(request.requestHeaders.test2).toBe('2');\n      expect(request.requestHeaders.test3).toBe('3');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a response interceptor","suites":["interceptors"],"updatePoint":{"line":213,"column":39,"index":6884},"line":213,"code":"  it('should add a response interceptor', function (done) {\n    var response;\n    axios.interceptors.response.use(function (data) {\n      data.data = data.data + ' - modified by interceptor';\n      return data;\n    });\n    axios('/foo').then(function (data) {\n      response = data;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: 'OK'\n      });\n      setTimeout(function () {\n        expect(response.data).toBe('OK - modified by interceptor');\n        done();\n      }, 100);\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a response interceptor when request interceptor is defined","suites":["interceptors"],"updatePoint":{"line":233,"column":75,"index":7488},"line":233,"code":"  it('should add a response interceptor when request interceptor is defined', function (done) {\n    var response;\n    axios.interceptors.request.use(function (data) {\n      return data;\n    });\n    axios.interceptors.response.use(function (data) {\n      data.data = data.data + ' - modified by interceptor';\n      return data;\n    });\n    axios('/foo').then(function (data) {\n      response = data;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: 'OK'\n      });\n      setTimeout(function () {\n        expect(response.data).toBe('OK - modified by interceptor');\n        done();\n      }, 100);\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a response interceptor that returns a new data object","suites":["interceptors"],"updatePoint":{"line":256,"column":70,"index":8167},"line":256,"code":"  it('should add a response interceptor that returns a new data object', function (done) {\n    var response;\n    axios.interceptors.response.use(function () {\n      return {\n        data: 'stuff'\n      };\n    });\n    axios('/foo').then(function (data) {\n      response = data;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: 'OK'\n      });\n      setTimeout(function () {\n        expect(response.data).toBe('stuff');\n        done();\n      }, 100);\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should add a response interceptor that returns a promise","suites":["interceptors"],"updatePoint":{"line":277,"column":62,"index":8698},"line":277,"code":"  it('should add a response interceptor that returns a promise', function (done) {\n    var response;\n    axios.interceptors.response.use(function (data) {\n      return new Promise(function (resolve) {\n        // do something async\n        setTimeout(function () {\n          data.data = 'you have been promised!';\n          resolve(data);\n        }, 10);\n      });\n    });\n    axios('/foo').then(function (data) {\n      response = data;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: 'OK'\n      });\n      setTimeout(function () {\n        expect(response.data).toBe('you have been promised!');\n        done();\n      }, 100);\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"then each interceptor is executed","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled"],"updatePoint":{"line":320,"column":43,"index":9954},"line":320,"code":"      it('then each interceptor is executed', function (done) {\n        var interceptor1 = jasmine.createSpy('interceptor1');\n        var interceptor2 = jasmine.createSpy('interceptor2');\n        axios.interceptors.response.use(interceptor1);\n        axios.interceptors.response.use(interceptor2);\n        fireRequestAndExpect(function () {\n          expect(interceptor1).toHaveBeenCalled();\n          expect(interceptor2).toHaveBeenCalled();\n          done();\n        });\n      });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"then they are executed in the order they were added","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled"],"updatePoint":{"line":331,"column":61,"index":10455},"line":331,"code":"      it('then they are executed in the order they were added', function (done) {\n        var interceptor1 = jasmine.createSpy('interceptor1');\n        var interceptor2 = jasmine.createSpy('interceptor2');\n        axios.interceptors.response.use(interceptor1);\n        axios.interceptors.response.use(interceptor2);\n        fireRequestAndExpect(function () {\n          expect(interceptor1).toHaveBeenCalledBefore(interceptor2);\n          done();\n        });\n      });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"then only the last interceptor's result is returned","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled"],"updatePoint":{"line":341,"column":62,"index":10924},"line":341,"code":"      it('then only the last interceptor\\'s result is returned', function (done) {\n        axios.interceptors.response.use(function () {\n          return 'response 1';\n        });\n        axios.interceptors.response.use(function () {\n          return 'response 2';\n        });\n        fireRequestAndExpect(function (response) {\n          expect(response).toBe('response 2');\n          done();\n        });\n      });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"then every interceptor receives the result of it's predecessor","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled"],"updatePoint":{"line":353,"column":73,"index":11350},"line":353,"code":"      it('then every interceptor receives the result of it\\'s predecessor', function (done) {\n        axios.interceptors.response.use(function () {\n          return 'response 1';\n        });\n        axios.interceptors.response.use(function (response) {\n          return [response, 'response 2'];\n        });\n        fireRequestAndExpect(function (response) {\n          expect(response).toEqual(['response 1', 'response 2']);\n          done();\n        });\n      });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"then the following fulfillment-interceptor is not called","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled","and when the fulfillment-interceptor throws"],"updatePoint":{"line":380,"column":68,"index":12302},"line":380,"code":"        it('then the following fulfillment-interceptor is not called', function (done) {\n          axios.interceptors.response.use(function () {\n            throw Error('throwing interceptor');\n          });\n          var interceptor2 = jasmine.createSpy('interceptor2');\n          axios.interceptors.response.use(interceptor2);\n          fireRequestCatchAndExpect(function () {\n            expect(interceptor2).not.toHaveBeenCalled();\n            done();\n          });\n        });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"then the following rejection-interceptor is called","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled","and when the fulfillment-interceptor throws"],"updatePoint":{"line":391,"column":62,"index":12778},"line":391,"code":"        it('then the following rejection-interceptor is called', function (done) {\n          axios.interceptors.response.use(function () {\n            throw Error('throwing interceptor');\n          });\n\n          var unusedFulfillInterceptor = function () {};\n\n          var rejectIntercept = jasmine.createSpy('rejectIntercept');\n          axios.interceptors.response.use(unusedFulfillInterceptor, rejectIntercept);\n          fireRequestCatchAndExpect(function () {\n            expect(rejectIntercept).toHaveBeenCalled();\n            done();\n          });\n        });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"once caught, another following fulfill-interceptor is called again (just like in a promise chain)","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled","and when the fulfillment-interceptor throws"],"updatePoint":{"line":405,"column":109,"index":13394},"line":405,"code":"        it('once caught, another following fulfill-interceptor is called again (just like in a promise chain)', function (done) {\n          axios.interceptors.response.use(function () {\n            throw Error('throwing interceptor');\n          });\n\n          var unusedFulfillInterceptor = function () {};\n\n          var catchingThrowingInterceptor = function () {};\n\n          axios.interceptors.response.use(unusedFulfillInterceptor, catchingThrowingInterceptor);\n          var interceptor3 = jasmine.createSpy('interceptor3');\n          axios.interceptors.response.use(interceptor3);\n          fireRequestCatchAndExpect(function () {\n            expect(interceptor3).toHaveBeenCalled();\n            done();\n          });\n        });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should allow removing interceptors","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled","and when the fulfillment-interceptor throws"],"updatePoint":{"line":425,"column":40,"index":14086},"line":425,"code":"  it('should allow removing interceptors', function (done) {\n    var response, intercept;\n    axios.interceptors.response.use(function (data) {\n      data.data = data.data + '1';\n      return data;\n    });\n    intercept = axios.interceptors.response.use(function (data) {\n      data.data = data.data + '2';\n      return data;\n    });\n    axios.interceptors.response.use(function (data) {\n      data.data = data.data + '3';\n      return data;\n    });\n    axios.interceptors.response.eject(intercept);\n    axios('/foo').then(function (data) {\n      response = data;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: 'OK'\n      });\n      setTimeout(function () {\n        expect(response.data).toBe('OK13');\n        done();\n      }, 100);\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should remove async interceptor before making request and execute synchronously","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled","and when the fulfillment-interceptor throws"],"updatePoint":{"line":454,"column":85,"index":14956},"line":454,"code":"  it('should remove async interceptor before making request and execute synchronously', function (done) {\n    var asyncFlag = false;\n    var asyncIntercept = axios.interceptors.request.use(function (config) {\n      config.headers.async = 'async it!';\n      return config;\n    }, null, {\n      synchronous: false\n    });\n    var syncIntercept = axios.interceptors.request.use(function (config) {\n      config.headers.sync = 'hello world';\n      expect(asyncFlag).toBe(false);\n      return config;\n    }, null, {\n      synchronous: true\n    });\n    axios.interceptors.request.eject(asyncIntercept);\n    axios('/foo');\n    asyncFlag = true;\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders.async).toBeUndefined();\n      expect(request.requestHeaders.sync).toBe('hello world');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should execute interceptors before transformers","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled","and when the fulfillment-interceptor throws"],"updatePoint":{"line":478,"column":53,"index":15760},"line":478,"code":"  it('should execute interceptors before transformers', function (done) {\n    axios.interceptors.request.use(function (config) {\n      config.data.baz = 'qux';\n      return config;\n    });\n    axios.post('/foo', {\n      foo: 'bar'\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.params).toEqual('{\"foo\":\"bar\",\"baz\":\"qux\"}');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should modify base URL in request interceptor","suites":["interceptors","given you add multiple response interceptors","and when the response was fulfilled","and when the fulfillment-interceptor throws"],"updatePoint":{"line":491,"column":51,"index":16139},"line":491,"code":"  it('should modify base URL in request interceptor', function (done) {\n    var instance = axios.create({\n      baseURL: 'http://test.com/'\n    });\n    instance.interceptors.request.use(function (config) {\n      config.baseURL = 'http://rebase.com/';\n      return config;\n    });\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('http://rebase.com/foo');\n      done();\n    });\n  });","file":"specs/interceptors.spec.js","skipped":false,"dir":"test"},{"name":"should default method to get","suites":["options"],"updatePoint":{"line":8,"column":34,"index":192},"line":8,"code":"  it('should default method to get', function (done) {\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.method).toBe('GET');\n      done();\n    });\n  });","file":"specs/options.spec.js","skipped":false,"dir":"test"},{"name":"should accept headers","suites":["options"],"updatePoint":{"line":15,"column":27,"index":376},"line":15,"code":"  it('should accept headers', function (done) {\n    axios('/foo', {\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders['X-Requested-With']).toEqual('XMLHttpRequest');\n      done();\n    });\n  });","file":"specs/options.spec.js","skipped":false,"dir":"test"},{"name":"should accept params","suites":["options"],"updatePoint":{"line":26,"column":26,"index":680},"line":26,"code":"  it('should accept params', function (done) {\n    axios('/foo', {\n      params: {\n        foo: 123,\n        bar: 456\n      }\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo?foo=123&bar=456');\n      done();\n    });\n  });","file":"specs/options.spec.js","skipped":false,"dir":"test"},{"name":"should allow overriding default headers","suites":["options"],"updatePoint":{"line":38,"column":45,"index":964},"line":38,"code":"  it('should allow overriding default headers', function (done) {\n    axios('/foo', {\n      headers: {\n        'Accept': 'foo/bar'\n      }\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders['Accept']).toEqual('foo/bar');\n      done();\n    });\n  });","file":"specs/options.spec.js","skipped":false,"dir":"test"},{"name":"should accept base URL","suites":["options"],"updatePoint":{"line":49,"column":28,"index":1236},"line":49,"code":"  it('should accept base URL', function (done) {\n    var instance = axios.create({\n      baseURL: 'http://test.com/'\n    });\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('http://test.com/foo');\n      done();\n    });\n  });","file":"specs/options.spec.js","skipped":false,"dir":"test"},{"name":"should ignore base URL if request URL is absolute","suites":["options"],"updatePoint":{"line":59,"column":55,"index":1544},"line":59,"code":"  it('should ignore base URL if request URL is absolute', function (done) {\n    var instance = axios.create({\n      baseURL: 'http://someurl.com/'\n    });\n    instance.get('http://someotherurl.com/');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('http://someotherurl.com/');\n      done();\n    });\n  });","file":"specs/options.spec.js","skipped":false,"dir":"test"},{"name":"should change only the baseURL of the specified instance","suites":["options"],"updatePoint":{"line":69,"column":62,"index":1887},"line":69,"code":"  it('should change only the baseURL of the specified instance', function () {\n    var instance1 = axios.create();\n    var instance2 = axios.create();\n    instance1.defaults.baseURL = 'http://instance1.example.com/';\n    expect(instance2.defaults.baseURL).not.toBe('http://instance1.example.com/');\n  });","file":"specs/options.spec.js","skipped":false,"dir":"test"},{"name":"should change only the headers of the specified instance","suites":["options"],"updatePoint":{"line":75,"column":62,"index":2192},"line":75,"code":"  it('should change only the headers of the specified instance', function () {\n    var instance1 = axios.create();\n    var instance2 = axios.create();\n    instance1.defaults.headers.common.Authorization = 'faketoken';\n    instance2.defaults.headers.common.Authorization = 'differentfaketoken';\n    instance1.defaults.headers.common['Content-Type'] = 'application/xml';\n    instance2.defaults.headers.common['Content-Type'] = 'application/x-www-form-urlencoded';\n    expect(axios.defaults.headers.common.Authorization).toBe(undefined);\n    expect(instance1.defaults.headers.common.Authorization).toBe('faketoken');\n    expect(instance2.defaults.headers.common.Authorization).toBe('differentfaketoken');\n    expect(axios.defaults.headers.common['Content-Type']).toBe(undefined);\n    expect(instance1.defaults.headers.common['Content-Type']).toBe('application/xml');\n    expect(instance2.defaults.headers.common['Content-Type']).toBe('application/x-www-form-urlencoded');\n  });","file":"specs/options.spec.js","skipped":false,"dir":"test"},{"name":"should add a download progress handler","suites":["progress events"],"updatePoint":{"line":8,"column":44,"index":210},"line":8,"code":"  it('should add a download progress handler', function (done) {\n    var progressSpy = jasmine.createSpy('progress');\n    axios('/foo', {\n      onDownloadProgress: progressSpy\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: '{\"foo\": \"bar\"}'\n      });\n      expect(progressSpy).toHaveBeenCalled();\n      done();\n    });\n  });","file":"specs/progress.spec.js","skipped":false,"dir":"test"},{"name":"should add a upload progress handler","suites":["progress events"],"updatePoint":{"line":22,"column":42,"index":611},"line":22,"code":"  it('should add a upload progress handler', function (done) {\n    var progressSpy = jasmine.createSpy('progress');\n    axios('/foo', {\n      onUploadProgress: progressSpy\n    });\n    getAjaxRequest().then(function (request) {\n      // Jasmine AJAX doesn't trigger upload events. Waiting for upstream fix\n      // expect(progressSpy).toHaveBeenCalled();\n      done();\n    });\n  });","file":"specs/progress.spec.js","skipped":false,"dir":"test"},{"name":"should add both upload and download progress handlers","suites":["progress events"],"updatePoint":{"line":33,"column":59,"index":1010},"line":33,"code":"  it('should add both upload and download progress handlers', function (done) {\n    var downloadProgressSpy = jasmine.createSpy('downloadProgress');\n    var uploadProgressSpy = jasmine.createSpy('uploadProgress');\n    axios('/foo', {\n      onDownloadProgress: downloadProgressSpy,\n      onUploadProgress: uploadProgressSpy\n    });\n    getAjaxRequest().then(function (request) {\n      // expect(uploadProgressSpy).toHaveBeenCalled();\n      expect(downloadProgressSpy).not.toHaveBeenCalled();\n      request.respondWith({\n        status: 200,\n        responseText: '{\"foo\": \"bar\"}'\n      });\n      expect(downloadProgressSpy).toHaveBeenCalled();\n      done();\n    });\n  });","file":"specs/progress.spec.js","skipped":false,"dir":"test"},{"name":"should add a download progress handler from instance config","suites":["progress events"],"updatePoint":{"line":51,"column":65,"index":1687},"line":51,"code":"  it('should add a download progress handler from instance config', function (done) {\n    var progressSpy = jasmine.createSpy('progress');\n    var instance = axios.create({\n      onDownloadProgress: progressSpy\n    });\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: '{\"foo\": \"bar\"}'\n      });\n      expect(progressSpy).toHaveBeenCalled();\n      done();\n    });\n  });","file":"specs/progress.spec.js","skipped":false,"dir":"test"},{"name":"should add a upload progress handler from instance config","suites":["progress events"],"updatePoint":{"line":66,"column":63,"index":2149},"line":66,"code":"  it('should add a upload progress handler from instance config', function (done) {\n    var progressSpy = jasmine.createSpy('progress');\n    var instance = axios.create({\n      onUploadProgress: progressSpy\n    });\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      // expect(progressSpy).toHaveBeenCalled();\n      done();\n    });\n  });","file":"specs/progress.spec.js","skipped":false,"dir":"test"},{"name":"should add upload and download progress handlers from instance config","suites":["progress events"],"updatePoint":{"line":77,"column":75,"index":2526},"line":77,"code":"  it('should add upload and download progress handlers from instance config', function (done) {\n    var downloadProgressSpy = jasmine.createSpy('downloadProgress');\n    var uploadProgressSpy = jasmine.createSpy('uploadProgress');\n    var instance = axios.create({\n      onDownloadProgress: downloadProgressSpy,\n      onUploadProgress: uploadProgressSpy\n    });\n    instance.get('/foo');\n    getAjaxRequest().then(function (request) {\n      // expect(uploadProgressSpy).toHaveBeenCalled();\n      expect(downloadProgressSpy).not.toHaveBeenCalled();\n      request.respondWith({\n        status: 200,\n        responseText: '{\"foo\": \"bar\"}'\n      });\n      expect(downloadProgressSpy).toHaveBeenCalled();\n      done();\n    });\n  });","file":"specs/progress.spec.js","skipped":false,"dir":"test"},{"name":"should provide succinct object to then","suites":["promise"],"updatePoint":{"line":8,"column":44,"index":202},"line":8,"code":"  it('should provide succinct object to then', function (done) {\n    var response;\n    axios('/foo').then(function (r) {\n      response = r;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: '{\"hello\":\"world\"}'\n      });\n      setTimeout(function () {\n        expect(typeof response).toEqual('object');\n        expect(response.data.hello).toEqual('world');\n        expect(response.status).toEqual(200);\n        expect(response.headers['content-type']).toEqual('application/json');\n        expect(response.config.url).toEqual('/foo');\n        done();\n      }, 100);\n    });\n  });","file":"specs/promise.spec.js","skipped":false,"dir":"test"},{"name":"should support all","suites":["promise"],"updatePoint":{"line":28,"column":24,"index":837},"line":28,"code":"  it('should support all', function (done) {\n    var fulfilled = false;\n    axios.all([true, 123]).then(function () {\n      fulfilled = true;\n    });\n    setTimeout(function () {\n      expect(fulfilled).toEqual(true);\n      done();\n    }, 100);\n  });","file":"specs/promise.spec.js","skipped":false,"dir":"test"},{"name":"should support spread","suites":["promise"],"updatePoint":{"line":38,"column":27,"index":1091},"line":38,"code":"  it('should support spread', function (done) {\n    var sum = 0;\n    var fulfilled = false;\n    var result;\n    axios.all([123, 456]).then(axios.spread(function (a, b) {\n      sum = a + b;\n      fulfilled = true;\n      return 'hello world';\n    })).then(function (res) {\n      result = res;\n    });\n    setTimeout(function () {\n      expect(fulfilled).toEqual(true);\n      expect(sum).toEqual(123 + 456);\n      expect(result).toEqual('hello world');\n      done();\n    }, 100);\n  });","file":"specs/promise.spec.js","skipped":false,"dir":"test"},{"name":"should treat single string arg as url","suites":["requests"],"updatePoint":{"line":8,"column":43,"index":202},"line":8,"code":"  it('should treat single string arg as url', function (done) {\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo');\n      expect(request.method).toBe('GET');\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should treat method value as lowercase string","suites":["requests"],"updatePoint":{"line":16,"column":51,"index":450},"line":16,"code":"  it('should treat method value as lowercase string', function (done) {\n    axios({\n      url: '/foo',\n      method: 'POST'\n    }).then(function (response) {\n      expect(response.config.method).toBe('post');\n      done();\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200\n      });\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should allow string arg as url, and config arg","suites":["requests"],"updatePoint":{"line":30,"column":52,"index":801},"line":30,"code":"  it('should allow string arg as url, and config arg', function (done) {\n    axios.post('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo');\n      expect(request.method).toBe('POST');\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should allow data","suites":["requests"],"updatePoint":{"line":38,"column":23,"index":1027},"line":38,"code":"  it('should allow data', function (done) {\n    axios.delete('/foo', {\n      data: {\n        foo: 'bar'\n      }\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.params).toBe(JSON.stringify({\n        foo: 'bar'\n      }));\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should make an http request","suites":["requests"],"updatePoint":{"line":51,"column":33,"index":1313},"line":51,"code":"  it('should make an http request', function (done) {\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.url).toBe('/foo');\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should handle timeouts","suites":["requests","timeouts"],"updatePoint":{"line":65,"column":30,"index":1676},"line":65,"code":"    it('should handle timeouts', function (done) {\n      axios({\n        url: '/foo',\n        timeout: 100\n      }).then(function () {\n        fail(new Error('timeout error not caught'));\n      }, function (err) {\n        expect(err instanceof Error).toBe(true);\n        expect(err.code).toEqual('ECONNABORTED');\n        done();\n      });\n      jasmine.Ajax.requests.mostRecent().responseTimeout();\n    });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should activate throwing ETIMEDOUT instead of ECONNABORTED on request timeouts","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":79,"column":88,"index":2204},"line":79,"code":"      it('should activate throwing ETIMEDOUT instead of ECONNABORTED on request timeouts', function (done) {\n        axios({\n          url: '/foo',\n          timeout: 100,\n          transitional: {\n            clarifyTimeoutError: true\n          }\n        }).then(function () {\n          fail(new Error('timeout error not caught'));\n        }, function (err) {\n          expect(err instanceof Error).toBe(true);\n          expect(err.code).toEqual('ETIMEDOUT');\n          done();\n        });\n        jasmine.Ajax.requests.mostRecent().responseTimeout();\n      });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should reject on network errors","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":97,"column":37,"index":2730},"line":97,"code":"  it('should reject on network errors', function (done) {\n    // disable jasmine.Ajax since we're hitting a non-existent server anyway\n    jasmine.Ajax.uninstall();\n    var resolveSpy = jasmine.createSpy('resolve');\n    var rejectSpy = jasmine.createSpy('reject');\n\n    var finish = function () {\n      expect(resolveSpy).not.toHaveBeenCalled();\n      expect(rejectSpy).toHaveBeenCalled();\n      var reason = rejectSpy.calls.first().args[0];\n      expect(reason instanceof Error).toBe(true);\n      expect(reason.config.method).toBe('get');\n      expect(reason.config.url).toBe('http://thisisnotaserver/foo');\n      expect(reason.request).toEqual(jasmine.any(XMLHttpRequest)); // re-enable jasmine.Ajax\n\n      jasmine.Ajax.install();\n      done();\n    };\n\n    axios('http://thisisnotaserver/foo').then(resolveSpy, rejectSpy).then(finish, finish);\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should reject on abort","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":118,"column":28,"index":3573},"line":118,"code":"  it('should reject on abort', function (done) {\n    var resolveSpy = jasmine.createSpy('resolve');\n    var rejectSpy = jasmine.createSpy('reject');\n\n    var finish = function () {\n      expect(resolveSpy).not.toHaveBeenCalled();\n      expect(rejectSpy).toHaveBeenCalled();\n      var reason = rejectSpy.calls.first().args[0];\n      expect(reason instanceof Error).toBe(true);\n      expect(reason.config.method).toBe('get');\n      expect(reason.config.url).toBe('/foo');\n      expect(reason.request).toEqual(jasmine.any(XMLHttpRequest));\n      done();\n    };\n\n    axios('/foo').then(resolveSpy, rejectSpy).then(finish, finish);\n    getAjaxRequest().then(function (request) {\n      request.abort();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should reject when validateStatus returns false","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":138,"column":53,"index":4309},"line":138,"code":"  it('should reject when validateStatus returns false', function (done) {\n    var resolveSpy = jasmine.createSpy('resolve');\n    var rejectSpy = jasmine.createSpy('reject');\n    axios('/foo', {\n      validateStatus: function (status) {\n        return status !== 500;\n      }\n    }).then(resolveSpy).catch(rejectSpy).then(function () {\n      expect(resolveSpy).not.toHaveBeenCalled();\n      expect(rejectSpy).toHaveBeenCalled();\n      var reason = rejectSpy.calls.first().args[0];\n      expect(reason instanceof Error).toBe(true);\n      expect(reason.message).toBe('Request failed with status code 500');\n      expect(reason.config.method).toBe('get');\n      expect(reason.config.url).toBe('/foo');\n      expect(reason.response.status).toBe(500);\n      done();\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 500\n      });\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should resolve when validateStatus returns true","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":162,"column":53,"index":5196},"line":162,"code":"  it('should resolve when validateStatus returns true', function (done) {\n    var resolveSpy = jasmine.createSpy('resolve');\n    var rejectSpy = jasmine.createSpy('reject');\n    axios('/foo', {\n      validateStatus: function (status) {\n        return status === 500;\n      }\n    }).then(resolveSpy).catch(rejectSpy).then(function () {\n      expect(resolveSpy).toHaveBeenCalled();\n      expect(rejectSpy).not.toHaveBeenCalled();\n      done();\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 500\n      });\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should resolve when the response status is 0 (i.e. requesting with file protocol)","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":180,"column":87,"index":5799},"line":180,"code":"  it('should resolve when the response status is 0 (i.e. requesting with file protocol)', function (done) {\n    var resolveSpy = jasmine.createSpy('resolve');\n    var rejectSpy = jasmine.createSpy('reject');\n    axios('file:///xxx').then(resolveSpy).catch(rejectSpy).then(function () {\n      expect(resolveSpy).toHaveBeenCalled();\n      expect(rejectSpy).not.toHaveBeenCalled();\n      done();\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 0,\n        responseURL: 'file:///xxx'\n      });\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should resolve when validateStatus is null","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":195,"column":48,"index":6314},"line":195,"code":"  it('should resolve when validateStatus is null', function (done) {\n    var resolveSpy = jasmine.createSpy('resolve');\n    var rejectSpy = jasmine.createSpy('reject');\n    axios('/foo', {\n      validateStatus: null\n    }).then(resolveSpy).catch(rejectSpy).then(function () {\n      expect(resolveSpy).toHaveBeenCalled();\n      expect(rejectSpy).not.toHaveBeenCalled();\n      done();\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 500\n      });\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should resolve when validateStatus is undefined","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":211,"column":53,"index":6829},"line":211,"code":"  it('should resolve when validateStatus is undefined', function (done) {\n    var resolveSpy = jasmine.createSpy('resolve');\n    var rejectSpy = jasmine.createSpy('reject');\n    axios('/foo', {\n      validateStatus: undefined\n    }).then(resolveSpy).catch(rejectSpy).then(function () {\n      expect(resolveSpy).toHaveBeenCalled();\n      expect(rejectSpy).not.toHaveBeenCalled();\n      done();\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 500\n      });\n    });\n  }); // https://github.com/axios/axios/issues/378","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should return JSON when rejecting","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":228,"column":39,"index":7381},"line":228,"code":"  it('should return JSON when rejecting', function (done) {\n    var response;\n    axios('/api/account/signup', {\n      username: null,\n      password: null\n    }, {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).catch(function (error) {\n      response = error.response;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 400,\n        statusText: 'Bad Request',\n        responseText: '{\"error\": \"BAD USERNAME\", \"code\": 1}'\n      });\n      setTimeout(function () {\n        expect(typeof response.data).toEqual('object');\n        expect(response.data.error).toEqual('BAD USERNAME');\n        expect(response.data.code).toEqual(1);\n        done();\n      }, 100);\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should make cross domain http request","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":255,"column":43,"index":8149},"line":255,"code":"  it('should make cross domain http request', function (done) {\n    var response;\n    axios.post('www.someurl.com/foo').then(function (res) {\n      response = res;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        statusText: 'OK',\n        responseText: '{\"foo\": \"bar\"}',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTimeout(function () {\n        expect(response.data.foo).toEqual('bar');\n        expect(response.status).toEqual(200);\n        expect(response.statusText).toEqual('OK');\n        expect(response.headers['content-type']).toEqual('application/json');\n        done();\n      }, 100);\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should supply correct response","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":278,"column":36,"index":8861},"line":278,"code":"  it('should supply correct response', function (done) {\n    var response;\n    axios.post('/foo').then(function (res) {\n      response = res;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        statusText: 'OK',\n        responseText: '{\"foo\": \"bar\"}',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTimeout(function () {\n        expect(response.data.foo).toEqual('bar');\n        expect(response.status).toEqual(200);\n        expect(response.statusText).toEqual('OK');\n        expect(response.headers['content-type']).toEqual('application/json');\n        done();\n      }, 100);\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should not modify the config url with relative baseURL","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":301,"column":60,"index":9582},"line":301,"code":"  it('should not modify the config url with relative baseURL', function (done) {\n    var config;\n    axios.get('/foo', {\n      baseURL: '/api'\n    }).catch(function (error) {\n      config = error.config;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 404,\n        statusText: 'NOT FOUND',\n        responseText: 'Resource not found'\n      });\n      setTimeout(function () {\n        expect(config.baseURL).toEqual('/api');\n        expect(config.url).toEqual('/foo');\n        done();\n      }, 100);\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should allow overriding Content-Type header case-insensitive","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":321,"column":66,"index":10150},"line":321,"code":"  it('should allow overriding Content-Type header case-insensitive', function (done) {\n    var response;\n    var contentType = 'application/vnd.myapp.type+json';\n    axios.post('/foo', {\n      prop: 'value'\n    }, {\n      headers: {\n        'content-type': contentType\n      }\n    }).then(function (res) {\n      response = res;\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders['Content-Type']).toEqual(contentType);\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should support binary data as array buffer","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":338,"column":48,"index":10618},"line":338,"code":"  it('should support binary data as array buffer', function (done) {\n    var input = new Int8Array(2);\n    input[0] = 1;\n    input[1] = 2;\n    axios.post('/foo', input.buffer);\n    getAjaxRequest().then(function (request) {\n      var output = new Int8Array(request.params);\n      expect(output.length).toEqual(2);\n      expect(output[0]).toEqual(1);\n      expect(output[1]).toEqual(2);\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should support binary data as array buffer view","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":351,"column":53,"index":11037},"line":351,"code":"  it('should support binary data as array buffer view', function (done) {\n    var input = new Int8Array(2);\n    input[0] = 1;\n    input[1] = 2;\n    axios.post('/foo', input);\n    getAjaxRequest().then(function (request) {\n      var output = new Int8Array(request.params);\n      expect(output.length).toEqual(2);\n      expect(output[0]).toEqual(1);\n      expect(output[1]).toEqual(2);\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should support array buffer response","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":364,"column":42,"index":11438},"line":364,"code":"  it('should support array buffer response', function (done) {\n    var response;\n\n    function str2ab(str) {\n      var buff = new ArrayBuffer(str.length * 2);\n      var view = new Uint16Array(buff);\n\n      for (var i = 0, l = str.length; i < l; i++) {\n        view[i] = str.charCodeAt(i);\n      }\n\n      return buff;\n    }\n\n    axios('/foo', {\n      responseType: 'arraybuffer'\n    }).then(function (data) {\n      response = data;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        response: str2ab('Hello world')\n      });\n      setTimeout(function () {\n        expect(response.data.byteLength).toBe(22);\n        done();\n      }, 100);\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should support URLSearchParams","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":394,"column":36,"index":12144},"line":394,"code":"  it('should support URLSearchParams', function (done) {\n    var params = new URLSearchParams();\n    params.append('param1', 'value1');\n    params.append('param2', 'value2');\n    axios.post('/foo', params);\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders['Content-Type']).toBe('application/x-www-form-urlencoded;charset=utf-8');\n      expect(request.params).toBe('param1=value1&param2=value2');\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should support HTTP protocol","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":405,"column":34,"index":12600},"line":405,"code":"  it('should support HTTP protocol', function (done) {\n    var response;\n    axios.get('/foo').then(function (res) {\n      response = res;\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.method).toBe('GET');\n      request.respondWith({\n        status: 200\n      });\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should support HTTPS protocol","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":418,"column":35,"index":12923},"line":418,"code":"  it('should support HTTPS protocol', function (done) {\n    var response;\n    axios.get('https://www.google.com').then(function (res) {\n      response = res;\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.method).toBe('GET');\n      request.respondWith({\n        status: 200\n      });\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should return malformed url error message","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":431,"column":47,"index":13276},"line":431,"code":"  it('should return malformed url error message', function (done) {\n    axios.get('tel:484-695-3408').catch(function (error) {\n      expect(error.message).toEqual('Malformed URL tel:484-695-3408');\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should return unsupported protocol error message","suites":["requests","timeouts","transitional.clarifyTimeoutError"],"updatePoint":{"line":437,"column":54,"index":13509},"line":437,"code":"  it('should return unsupported protocol error message', function (done) {\n    axios.get('ftp:google.com').catch(function (error) {\n      expect(error.message).toEqual('Unsupported protocol ftp:');\n      done();\n    });\n  });","file":"specs/requests.spec.js","skipped":false,"dir":"test"},{"name":"should transform JSON to string","suites":["transform"],"updatePoint":{"line":10,"column":37,"index":253},"line":10,"code":"  it('should transform JSON to string', function (done) {\n    var data = {\n      foo: 'bar'\n    };\n    axios.post('/foo', data);\n    getAjaxRequest().then(function (request) {\n      expect(request.params).toEqual('{\"foo\":\"bar\"}');\n      done();\n    });\n  });","file":"specs/transform.spec.js","skipped":false,"dir":"test"},{"name":"should transform string to JSON","suites":["transform"],"updatePoint":{"line":20,"column":37,"index":512},"line":20,"code":"  it('should transform string to JSON', function (done) {\n    var response;\n    axios('/foo').then(function (data) {\n      response = data;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: '{\"foo\": \"bar\"}'\n      });\n      setTimeout(function () {\n        expect(typeof response.data).toEqual('object');\n        expect(response.data.foo).toEqual('bar');\n        done();\n      }, 100);\n    });\n  });","file":"specs/transform.spec.js","skipped":false,"dir":"test"},{"name":"should throw a SyntaxError if JSON parsing failed and responseType is \"json\" if silentJSONParsing is false","suites":["transform"],"updatePoint":{"line":37,"column":112,"index":1062},"line":37,"code":"  it('should throw a SyntaxError if JSON parsing failed and responseType is \"json\" if silentJSONParsing is false', function (done) {\n    var thrown;\n    axios({\n      url: '/foo',\n      responseType: 'json',\n      transitional: {\n        silentJSONParsing: false\n      }\n    }).then(function () {\n      done(new Error('should fail'));\n    }, function (err) {\n      thrown = err;\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: '{foo\": \"bar\"}' // JSON SyntaxError\n\n      });\n      setTimeout(function () {\n        expect(thrown).toBeTruthy();\n        expect(thrown.name).toContain('SyntaxError');\n        expect(thrown.code).toEqual(AxiosError.ERR_BAD_RESPONSE);\n        done();\n      }, 100);\n    });\n  });","file":"specs/transform.spec.js","skipped":false,"dir":"test"},{"name":"should send data as JSON if request content-type is application/json","suites":["transform"],"updatePoint":{"line":64,"column":74,"index":1809},"line":64,"code":"  it('should send data as JSON if request content-type is application/json', function (done) {\n    var response;\n    axios.post('/foo', 123, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (_response) {\n      response = _response;\n    }, function (err) {\n      done(err);\n    });\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: ''\n      });\n      setTimeout(function () {\n        expect(response).toBeTruthy();\n        expect(request.requestHeaders['Content-Type']).toBe('application/json');\n        expect(JSON.parse(request.params)).toBe(123);\n        done();\n      }, 100);\n    });\n  });","file":"specs/transform.spec.js","skipped":false,"dir":"test"},{"name":"should not assume JSON if responseType is not `json`","suites":["transform"],"updatePoint":{"line":88,"column":58,"index":2497},"line":88,"code":"  it('should not assume JSON if responseType is not `json`', function (done) {\n    var response;\n    axios.get('/foo', {\n      responseType: 'text',\n      transitional: {\n        forcedJSONParsing: false\n      }\n    }).then(function (_response) {\n      response = _response;\n    }, function (err) {\n      done(err);\n    });\n    var rawData = '{\"x\":1}';\n    getAjaxRequest().then(function (request) {\n      request.respondWith({\n        status: 200,\n        responseText: rawData\n      });\n      setTimeout(function () {\n        expect(response).toBeTruthy();\n        expect(response.data).toBe(rawData);\n        done();\n      }, 100);\n    });\n  });","file":"specs/transform.spec.js","skipped":false,"dir":"test"},{"name":"should override default transform","suites":["transform"],"updatePoint":{"line":113,"column":39,"index":3127},"line":113,"code":"  it('should override default transform', function (done) {\n    var data = {\n      foo: 'bar'\n    };\n    axios.post('/foo', data, {\n      transformRequest: function (data) {\n        return data;\n      }\n    });\n    getAjaxRequest().then(function (request) {\n      expect(typeof request.params).toEqual('object');\n      done();\n    });\n  });","file":"specs/transform.spec.js","skipped":false,"dir":"test"},{"name":"should allow an Array of transformers","suites":["transform"],"updatePoint":{"line":127,"column":43,"index":3472},"line":127,"code":"  it('should allow an Array of transformers', function (done) {\n    var data = {\n      foo: 'bar'\n    };\n    axios.post('/foo', data, {\n      transformRequest: axios.defaults.transformRequest.concat(function (data) {\n        return data.replace('bar', 'baz');\n      })\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.params).toEqual('{\"foo\":\"baz\"}');\n      done();\n    });\n  });","file":"specs/transform.spec.js","skipped":false,"dir":"test"},{"name":"should allowing mutating headers","suites":["transform"],"updatePoint":{"line":141,"column":38,"index":3874},"line":141,"code":"  it('should allowing mutating headers', function (done) {\n    var token = Math.floor(Math.random() * Math.pow(2, 64)).toString(36);\n    axios('/foo', {\n      transformRequest: function (data, headers) {\n        headers['X-Authorization'] = token;\n      }\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders['X-Authorization']).toEqual(token);\n      done();\n    });\n  });","file":"specs/transform.spec.js","skipped":false,"dir":"test"},{"name":"should be mutable","suites":["utils::extend"],"updatePoint":{"line":4,"column":23,"index":116},"line":4,"code":"  it('should be mutable', function () {\n    var a = {};\n    var b = {\n      foo: 123\n    };\n    extend(a, b);\n    expect(a.foo).toEqual(b.foo);\n  });","file":"specs/utils/extend.spec.js","skipped":false,"dir":"test"},{"name":"should extend properties","suites":["utils::extend"],"updatePoint":{"line":12,"column":30,"index":273},"line":12,"code":"  it('should extend properties', function () {\n    var a = {\n      foo: 123,\n      bar: 456\n    };\n    var b = {\n      bar: 789\n    };\n    a = extend(a, b);\n    expect(a.foo).toEqual(123);\n    expect(a.bar).toEqual(789);\n  });","file":"specs/utils/extend.spec.js","skipped":false,"dir":"test"},{"name":"should bind to thisArg","suites":["utils::extend"],"updatePoint":{"line":24,"column":28,"index":498},"line":24,"code":"  it('should bind to thisArg', function () {\n    var a = {};\n    var b = {\n      getFoo: function getFoo() {\n        return this.foo;\n      }\n    };\n    var thisArg = {\n      foo: 'barbaz'\n    };\n    extend(a, b, thisArg);\n    expect(typeof a.getFoo).toEqual('function');\n    expect(a.getFoo()).toEqual(thisArg.foo);\n  });","file":"specs/utils/extend.spec.js","skipped":false,"dir":"test"},{"name":"should loop over an array","suites":["utils::forEach"],"updatePoint":{"line":4,"column":31,"index":127},"line":4,"code":"  it('should loop over an array', function () {\n    var sum = 0;\n    forEach([1, 2, 3, 4, 5], function (val) {\n      sum += val;\n    });\n    expect(sum).toEqual(15);\n  });","file":"specs/utils/forEach.spec.js","skipped":false,"dir":"test"},{"name":"should loop over object keys","suites":["utils::forEach"],"updatePoint":{"line":11,"column":34,"index":302},"line":11,"code":"  it('should loop over object keys', function () {\n    var keys = '';\n    var vals = 0;\n    var obj = {\n      b: 1,\n      a: 2,\n      r: 3\n    };\n    forEach(obj, function (v, k) {\n      keys += k;\n      vals += v;\n    });\n    expect(keys).toEqual('bar');\n    expect(vals).toEqual(6);\n  });","file":"specs/utils/forEach.spec.js","skipped":false,"dir":"test"},{"name":"should handle undefined gracefully","suites":["utils::forEach"],"updatePoint":{"line":26,"column":40,"index":599},"line":26,"code":"  it('should handle undefined gracefully', function () {\n    var count = 0;\n    forEach(undefined, function () {\n      count++;\n    });\n    expect(count).toEqual(0);\n  });","file":"specs/utils/forEach.spec.js","skipped":false,"dir":"test"},{"name":"should make an array out of non-array argument","suites":["utils::forEach"],"updatePoint":{"line":33,"column":52,"index":783},"line":33,"code":"  it('should make an array out of non-array argument', function () {\n    var count = 0;\n    forEach(function () {}, function () {\n      count++;\n    });\n    expect(count).toEqual(1);\n  });","file":"specs/utils/forEach.spec.js","skipped":false,"dir":"test"},{"name":"should handle non object prototype gracefully","suites":["utils::forEach"],"updatePoint":{"line":40,"column":51,"index":971},"line":40,"code":"  it('should handle non object prototype gracefully', function () {\n    var count = 0;\n    var data = Object.create(null);\n    data.foo = 'bar';\n    forEach(data, function () {\n      count++;\n    });\n    expect(count).toEqual(1);\n  });","file":"specs/utils/forEach.spec.js","skipped":false,"dir":"test"},{"name":"should validate Array","suites":["utils::isX"],"updatePoint":{"line":6,"column":27,"index":142},"line":6,"code":"  it('should validate Array', function () {\n    expect(utils.isArray([])).toEqual(true);\n    expect(utils.isArray({\n      length: 5\n    })).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate Buffer","suites":["utils::isX"],"updatePoint":{"line":12,"column":28,"index":305},"line":12,"code":"  it('should validate Buffer', function () {\n    expect(utils.isBuffer(Buffer.from('a'))).toEqual(true);\n    expect(utils.isBuffer(null)).toEqual(false);\n    expect(utils.isBuffer(undefined)).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate ArrayBuffer","suites":["utils::isX"],"updatePoint":{"line":17,"column":33,"index":524},"line":17,"code":"  it('should validate ArrayBuffer', function () {\n    expect(utils.isArrayBuffer(new ArrayBuffer(2))).toEqual(true);\n    expect(utils.isArrayBuffer({})).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate ArrayBufferView","suites":["utils::isX"],"updatePoint":{"line":21,"column":37,"index":703},"line":21,"code":"  it('should validate ArrayBufferView', function () {\n    expect(utils.isArrayBufferView(new DataView(new ArrayBuffer(2)))).toEqual(true);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate FormData","suites":["utils::isX"],"updatePoint":{"line":24,"column":30,"index":841},"line":24,"code":"  it('should validate FormData', function () {\n    expect(utils.isFormData(new FormData())).toEqual(true);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate Blob","suites":["utils::isX"],"updatePoint":{"line":27,"column":26,"index":950},"line":27,"code":"  it('should validate Blob', function () {\n    expect(utils.isBlob(new Blob())).toEqual(true);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate String","suites":["utils::isX"],"updatePoint":{"line":30,"column":28,"index":1053},"line":30,"code":"  it('should validate String', function () {\n    expect(utils.isString('')).toEqual(true);\n    expect(utils.isString({\n      toString: function () {\n        return '';\n      }\n    })).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate Number","suites":["utils::isX"],"updatePoint":{"line":38,"column":28,"index":1259},"line":38,"code":"  it('should validate Number', function () {\n    expect(utils.isNumber(123)).toEqual(true);\n    expect(utils.isNumber('123')).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate Undefined","suites":["utils::isX"],"updatePoint":{"line":42,"column":31,"index":1410},"line":42,"code":"  it('should validate Undefined', function () {\n    expect(utils.isUndefined()).toEqual(true);\n    expect(utils.isUndefined(null)).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate Object","suites":["utils::isX"],"updatePoint":{"line":46,"column":28,"index":1560},"line":46,"code":"  it('should validate Object', function () {\n    expect(utils.isObject({})).toEqual(true);\n    expect(utils.isObject([])).toEqual(true);\n    expect(utils.isObject(null)).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate plain Object","suites":["utils::isX"],"updatePoint":{"line":51,"column":34,"index":1758},"line":51,"code":"  it('should validate plain Object', function () {\n    expect(utils.isPlainObject({})).toEqual(true);\n    expect(utils.isPlainObject([])).toEqual(false);\n    expect(utils.isPlainObject(null)).toEqual(false);\n    expect(utils.isPlainObject(Object.create({}))).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate Date","suites":["utils::isX"],"updatePoint":{"line":57,"column":26,"index":2031},"line":57,"code":"  it('should validate Date', function () {\n    expect(utils.isDate(new Date())).toEqual(true);\n    expect(utils.isDate(Date.now())).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate Function","suites":["utils::isX"],"updatePoint":{"line":61,"column":30,"index":2189},"line":61,"code":"  it('should validate Function', function () {\n    expect(utils.isFunction(function () {})).toEqual(true);\n    expect(utils.isFunction('function')).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate Stream","suites":["utils::isX"],"updatePoint":{"line":65,"column":28,"index":2357},"line":65,"code":"  it('should validate Stream', function () {\n    expect(utils.isStream(new Stream.Readable())).toEqual(true);\n    expect(utils.isStream({\n      foo: 'bar'\n    })).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate URLSearchParams","suites":["utils::isX"],"updatePoint":{"line":71,"column":37,"index":2551},"line":71,"code":"  it('should validate URLSearchParams', function () {\n    expect(utils.isURLSearchParams(new URLSearchParams())).toEqual(true);\n    expect(utils.isURLSearchParams('foo=1&bar=2')).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should validate TypedArray instance","suites":["utils::isX"],"updatePoint":{"line":75,"column":41,"index":2756},"line":75,"code":"  it('should validate TypedArray instance', function () {\n    expect(utils.isTypedArray(new Uint8Array([1, 2, 3]))).toEqual(true);\n    expect(utils.isTypedArray([1, 2, 3])).toEqual(false);\n  });","file":"specs/utils/isX.spec.js","skipped":false,"dir":"test"},{"name":"should be immutable","suites":["utils::merge"],"updatePoint":{"line":4,"column":25,"index":115},"line":4,"code":"  it('should be immutable', function () {\n    var a = {};\n    var b = {\n      foo: 123\n    };\n    var c = {\n      bar: 456\n    };\n    merge(a, b, c);\n    expect(typeof a.foo).toEqual('undefined');\n    expect(typeof a.bar).toEqual('undefined');\n    expect(typeof b.bar).toEqual('undefined');\n    expect(typeof c.foo).toEqual('undefined');\n  });","file":"specs/utils/merge.spec.js","skipped":false,"dir":"test"},{"name":"should merge properties","suites":["utils::merge"],"updatePoint":{"line":18,"column":29,"index":463},"line":18,"code":"  it('should merge properties', function () {\n    var a = {\n      foo: 123\n    };\n    var b = {\n      bar: 456\n    };\n    var c = {\n      foo: 789\n    };\n    var d = merge(a, b, c);\n    expect(d.foo).toEqual(789);\n    expect(d.bar).toEqual(456);\n  });","file":"specs/utils/merge.spec.js","skipped":false,"dir":"test"},{"name":"should merge recursively","suites":["utils::merge"],"updatePoint":{"line":32,"column":30,"index":716},"line":32,"code":"  it('should merge recursively', function () {\n    var a = {\n      foo: {\n        bar: 123\n      }\n    };\n    var b = {\n      foo: {\n        baz: 456\n      },\n      bar: {\n        qux: 789\n      }\n    };\n    expect(merge(a, b)).toEqual({\n      foo: {\n        bar: 123,\n        baz: 456\n      },\n      bar: {\n        qux: 789\n      }\n    });\n  });","file":"specs/utils/merge.spec.js","skipped":false,"dir":"test"},{"name":"should remove all references from nested objects","suites":["utils::merge"],"updatePoint":{"line":56,"column":54,"index":1087},"line":56,"code":"  it('should remove all references from nested objects', function () {\n    var a = {\n      foo: {\n        bar: 123\n      }\n    };\n    var b = {};\n    var d = merge(a, b);\n    expect(d).toEqual({\n      foo: {\n        bar: 123\n      }\n    });\n    expect(d.foo).not.toBe(a.foo);\n  });","file":"specs/utils/merge.spec.js","skipped":false,"dir":"test"},{"name":"handles null and undefined arguments","suites":["utils::merge"],"updatePoint":{"line":71,"column":42,"index":1357},"line":71,"code":"  it('handles null and undefined arguments', function () {\n    expect(merge(undefined, undefined)).toEqual({});\n    expect(merge(undefined, {\n      foo: 123\n    })).toEqual({\n      foo: 123\n    });\n    expect(merge({\n      foo: 123\n    }, undefined)).toEqual({\n      foo: 123\n    });\n    expect(merge(null, null)).toEqual({});\n    expect(merge(null, {\n      foo: 123\n    })).toEqual({\n      foo: 123\n    });\n    expect(merge({\n      foo: 123\n    }, null)).toEqual({\n      foo: 123\n    });\n  });","file":"specs/utils/merge.spec.js","skipped":false,"dir":"test"},{"name":"should replace properties with null","suites":["utils::merge"],"updatePoint":{"line":95,"column":41,"index":1851},"line":95,"code":"  it('should replace properties with null', function () {\n    expect(merge({}, {\n      a: null\n    })).toEqual({\n      a: null\n    });\n    expect(merge({\n      a: null\n    }, {})).toEqual({\n      a: null\n    });\n  });","file":"specs/utils/merge.spec.js","skipped":false,"dir":"test"},{"name":"should replace properties with arrays","suites":["utils::merge"],"updatePoint":{"line":107,"column":43,"index":2071},"line":107,"code":"  it('should replace properties with arrays', function () {\n    expect(merge({}, {\n      a: [1, 2, 3]\n    })).toEqual({\n      a: [1, 2, 3]\n    });\n    expect(merge({\n      a: 2\n    }, {\n      a: [1, 2, 3]\n    })).toEqual({\n      a: [1, 2, 3]\n    });\n    expect(merge({\n      a: {\n        b: 2\n      }\n    }, {\n      a: [1, 2, 3]\n    })).toEqual({\n      a: [1, 2, 3]\n    });\n  });","file":"specs/utils/merge.spec.js","skipped":false,"dir":"test"},{"name":"should replace properties with cloned arrays","suites":["utils::merge"],"updatePoint":{"line":130,"column":50,"index":2458},"line":130,"code":"  it('should replace properties with cloned arrays', function () {\n    var a = [1, 2, 3];\n    var d = merge({}, {\n      a: a\n    });\n    expect(d).toEqual({\n      a: [1, 2, 3]\n    });\n    expect(d.a).not.toBe(a);\n  });","file":"specs/utils/merge.spec.js","skipped":false,"dir":"test"},{"name":"should trim spaces","suites":["utils::trim"],"updatePoint":{"line":4,"column":24,"index":111},"line":4,"code":"  it('should trim spaces', function () {\n    expect(trim('  foo  ')).toEqual('foo');\n  });","file":"specs/utils/trim.spec.js","skipped":false,"dir":"test"},{"name":"should trim tabs","suites":["utils::trim"],"updatePoint":{"line":7,"column":22,"index":200},"line":7,"code":"  it('should trim tabs', function () {\n    expect(trim('\\tfoo\\t')).toEqual('foo');\n  });","file":"specs/utils/trim.spec.js","skipped":false,"dir":"test"},{"name":"should not set xsrf header if cookie is null","suites":["xsrf"],"updatePoint":{"line":11,"column":50,"index":374},"line":11,"code":"  it('should not set xsrf header if cookie is null', function (done) {\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders[axios.defaults.xsrfHeaderName]).toEqual(undefined);\n      done();\n    });\n  });","file":"specs/xsrf.spec.js","skipped":false,"dir":"test"},{"name":"should set xsrf header if cookie is set","suites":["xsrf"],"updatePoint":{"line":18,"column":45,"index":622},"line":18,"code":"  it('should set xsrf header if cookie is set', function (done) {\n    document.cookie = axios.defaults.xsrfCookieName + '=12345';\n    axios('/foo');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders[axios.defaults.xsrfHeaderName]).toEqual('12345');\n      done();\n    });\n  });","file":"specs/xsrf.spec.js","skipped":false,"dir":"test"},{"name":"should not set xsrf header if xsrfCookieName is null","suites":["xsrf"],"updatePoint":{"line":26,"column":58,"index":945},"line":26,"code":"  it('should not set xsrf header if xsrfCookieName is null', function (done) {\n    document.cookie = axios.defaults.xsrfCookieName + '=12345';\n    axios('/foo', {\n      xsrfCookieName: null\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders[axios.defaults.xsrfHeaderName]).toEqual(undefined);\n      done();\n    });\n  });","file":"specs/xsrf.spec.js","skipped":false,"dir":"test"},{"name":"should not read cookies at all if xsrfCookieName is null","suites":["xsrf"],"updatePoint":{"line":36,"column":62,"index":1310},"line":36,"code":"  it('should not read cookies at all if xsrfCookieName is null', function (done) {\n    spyOn(cookies, \"read\");\n    axios('/foo', {\n      xsrfCookieName: null\n    });\n    getAjaxRequest().then(function (request) {\n      expect(cookies.read).not.toHaveBeenCalled();\n      done();\n    });\n  });","file":"specs/xsrf.spec.js","skipped":false,"dir":"test"},{"name":"should not set xsrf header for cross origin","suites":["xsrf"],"updatePoint":{"line":46,"column":49,"index":1589},"line":46,"code":"  it('should not set xsrf header for cross origin', function (done) {\n    document.cookie = axios.defaults.xsrfCookieName + '=12345';\n    axios('http://example.com/');\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders[axios.defaults.xsrfHeaderName]).toEqual(undefined);\n      done();\n    });\n  });","file":"specs/xsrf.spec.js","skipped":false,"dir":"test"},{"name":"should set xsrf header for cross origin when using withCredentials","suites":["xsrf"],"updatePoint":{"line":54,"column":72,"index":1943},"line":54,"code":"  it('should set xsrf header for cross origin when using withCredentials', function (done) {\n    document.cookie = axios.defaults.xsrfCookieName + '=12345';\n    axios('http://example.com/', {\n      withCredentials: true\n    });\n    getAjaxRequest().then(function (request) {\n      expect(request.requestHeaders[axios.defaults.xsrfHeaderName]).toEqual('12345');\n      done();\n    });\n  });","file":"specs/xsrf.spec.js","skipped":false,"dir":"test"}]}