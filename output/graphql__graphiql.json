{"repo":"graphql/graphiql","url":"https://github.com/graphql/graphiql","branch":"main","configs":[{"package":"codemirror-graphql","lang":"ts","dir":"packages/codemirror-graphql/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphiql-2-rfc-context","lang":"js","dir":"packages/graphiql-2-rfc-context/cypress","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphiql","lang":"js","dir":"packages/graphiql/cypress","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-cli","lang":"ts","dir":"packages/graphql-language-service-cli/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-interface","lang":"ts","dir":"packages/graphql-language-service-interface/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-parser","lang":"ts","dir":"packages/graphql-language-service-parser/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-server","lang":"ts","dir":"packages/graphql-language-service-server/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-utils","lang":"ts","dir":"packages/graphql-language-service-utils/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"attaches a GraphQL hint function with correct mode/hint options","suites":["graphql-hint"],"updatePoint":{"line":80,"column":69},"line":80,"code":"  it('attaches a GraphQL hint function with correct mode/hint options', () => {\n    const editor = createEditorWithHint();\n    expect(editor.getHelpers(editor.getCursor(), 'hint')).not.toHaveLength(0);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct initial keywords","suites":["graphql-hint"],"updatePoint":{"line":85,"column":39},"line":85,"code":"  it('provides correct initial keywords', async () => {\n    const suggestions = await getHintSuggestions('', { line: 0, ch: 0 });\n    const list = [\n      { text: 'query' },\n      { text: 'mutation' },\n      { text: 'subscription' },\n      { text: 'fragment' },\n      { text: '{' },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct initial keywords after filtered","suites":["graphql-hint"],"updatePoint":{"line":98,"column":54},"line":98,"code":"  it('provides correct initial keywords after filtered', async () => {\n    const suggestions = await getHintSuggestions('q', { line: 0, ch: 1 });\n    const list = [{ text: '{' }, { text: 'query' }];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestions","suites":["graphql-hint"],"updatePoint":{"line":105,"column":45},"line":105,"code":"  it('provides correct field name suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ ', { line: 0, ch: 2 });\n    const list = [\n      {\n        text: 'test',\n        type: TestType,\n        isDeprecated: false,\n      },\n      {\n        text: 'union',\n        type: TestUnion,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: UnionFirst,\n        isDeprecated: false,\n      },\n      {\n        text: 'id',\n        type: GraphQLInt,\n        isDeprecated: false,\n      },\n      {\n        text: 'isTest',\n        type: GraphQLBoolean,\n        isDeprecated: false,\n      },\n      {\n        text: 'hasArgs',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n      },\n      {\n        text: '__schema',\n        type: new GraphQLNonNull(__Schema),\n        description: 'Access the current type schema of this server.',\n        isDeprecated: false,\n      },\n      {\n        text: '__type',\n        type: __Type,\n        description: 'Request the type information of a single type.',\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestions after filtered","suites":["graphql-hint"],"updatePoint":{"line":161,"column":60},"line":161,"code":"  it('provides correct field name suggestions after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ i', { line: 0, ch: 3 });\n    const list = [\n      {\n        text: 'id',\n        type: GraphQLInt,\n        isDeprecated: false,\n      },\n      {\n        text: 'isTest',\n        type: GraphQLBoolean,\n        isDeprecated: false,\n      },\n      {\n        text: 'union',\n        type: TestUnion,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: UnionFirst,\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestions when using aliases","suites":["graphql-hint"],"updatePoint":{"line":189,"column":64},"line":189,"code":"  it('provides correct field name suggestions when using aliases', async () => {\n    const suggestions = await getHintSuggestions('{ aliasTest: first { ', {\n      line: 0,\n      ch: 21,\n    });\n    const list = [\n      {\n        text: 'scalar',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: TestType,\n        isDeprecated: false,\n      },\n      {\n        text: 'example',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestion indentation","suites":["graphql-hint"],"updatePoint":{"line":221,"column":56},"line":221,"code":"  it('provides correct field name suggestion indentation', async () => {\n    const suggestions = await getHintSuggestions('{\\n  ', { line: 1, ch: 2 });\n    expect(suggestions?.from).toEqual({ line: 1, ch: 2, sticky: null });\n    expect(suggestions?.to).toEqual({ line: 1, ch: 2, sticky: null });\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct argument suggestions","suites":["graphql-hint"],"updatePoint":{"line":227,"column":43},"line":227,"code":"  it('provides correct argument suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs ( ', {\n      line: 0,\n      ch: 12,\n    });\n    const list = [\n      {\n        text: 'string',\n        type: GraphQLString,\n      },\n      {\n        text: 'int',\n        type: GraphQLInt,\n      },\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'boolean',\n        type: GraphQLBoolean,\n      },\n      {\n        text: 'id',\n        type: GraphQLID,\n      },\n      {\n        text: 'enum',\n        type: TestEnum,\n      },\n      {\n        text: 'object',\n        type: TestInputObject,\n      },\n      {\n        text: 'listString',\n        type: new GraphQLList(GraphQLString),\n      },\n      {\n        text: 'listInt',\n        type: new GraphQLList(GraphQLInt),\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n      {\n        text: 'listBoolean',\n        type: new GraphQLList(GraphQLBoolean),\n      },\n      {\n        text: 'listID',\n        type: new GraphQLList(GraphQLID),\n      },\n      {\n        text: 'listEnum',\n        type: new GraphQLList(TestEnum),\n      },\n      {\n        text: 'listObject',\n        type: new GraphQLList(TestInputObject),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct argument suggestions after filtered","suites":["graphql-hint"],"updatePoint":{"line":294,"column":58},"line":294,"code":"  it('provides correct argument suggestions after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs ( f', {\n      line: 0,\n      ch: 13,\n    });\n    const list = [\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct argument suggestions when using aliases","suites":["graphql-hint"],"updatePoint":{"line":313,"column":62},"line":313,"code":"  it('provides correct argument suggestions when using aliases', async () => {\n    const suggestions = await getHintSuggestions('{ aliasTest: hasArgs ( ', {\n      line: 0,\n      ch: 23,\n    });\n    const list = [\n      {\n        text: 'string',\n        type: GraphQLString,\n      },\n      {\n        text: 'int',\n        type: GraphQLInt,\n      },\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'boolean',\n        type: GraphQLBoolean,\n      },\n      {\n        text: 'id',\n        type: GraphQLID,\n      },\n      {\n        text: 'enum',\n        type: TestEnum,\n      },\n      {\n        text: 'object',\n        type: TestInputObject,\n      },\n      {\n        text: 'listString',\n        type: new GraphQLList(GraphQLString),\n      },\n      {\n        text: 'listInt',\n        type: new GraphQLList(GraphQLInt),\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n      {\n        text: 'listBoolean',\n        type: new GraphQLList(GraphQLBoolean),\n      },\n      {\n        text: 'listID',\n        type: new GraphQLList(GraphQLID),\n      },\n      {\n        text: 'listEnum',\n        type: new GraphQLList(TestEnum),\n      },\n      {\n        text: 'listObject',\n        type: new GraphQLList(TestInputObject),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestions","suites":["graphql-hint"],"updatePoint":{"line":380,"column":44},"line":380,"code":"  it('provides correct directive suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ test (@', {\n      line: 0,\n      ch: 9,\n    });\n    const list = [\n      {\n        text: 'include',\n        description:\n          'Directs the executor to include this field or fragment only when the `if` argument is true.',\n      },\n      {\n        text: 'skip',\n        description:\n          'Directs the executor to skip this field or fragment when the `if` argument is true.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestion after filtered","suites":["graphql-hint"],"updatePoint":{"line":401,"column":58},"line":401,"code":"  it('provides correct directive suggestion after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ test (@s', {\n      line: 0,\n      ch: 10,\n    });\n    const list = [\n      {\n        text: 'skip',\n        description:\n          'Directs the executor to skip this field or fragment when the `if` argument is true.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestions when using aliases","suites":["graphql-hint"],"updatePoint":{"line":417,"column":63},"line":417,"code":"  it('provides correct directive suggestions when using aliases', async () => {\n    const suggestions = await getHintSuggestions('{ aliasTest: test (@', {\n      line: 0,\n      ch: 20,\n    });\n    const list = [\n      {\n        text: 'include',\n        description:\n          'Directs the executor to include this field or fragment only when the `if` argument is true.',\n      },\n      {\n        text: 'skip',\n        description:\n          'Directs the executor to skip this field or fragment when the `if` argument is true.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestions on definitions","suites":["graphql-hint"],"updatePoint":{"line":438,"column":59},"line":438,"code":"  it('provides correct directive suggestions on definitions', async () => {\n    const suggestions = await getHintSuggestions('type Type @', {\n      line: 0,\n      ch: 11,\n    });\n    const list = [\n      {\n        text: 'onAllDefs',\n        description: '',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestions on args definitions","suites":["graphql-hint"],"updatePoint":{"line":453,"column":64},"line":453,"code":"  it('provides correct directive suggestions on args definitions', async () => {\n    const suggestions = await getHintSuggestions(\n      'type Type { field(arg: String @',\n      { line: 0, ch: 31 },\n    );\n    const list = [\n      {\n        text: 'deprecated',\n        description:\n          'Marks an element of a GraphQL schema as no longer supported.',\n      },\n      {\n        text: 'onArg',\n        description: '',\n      },\n      {\n        text: 'onAllDefs',\n        description: '',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides interface suggestions for type when using implements keyword","suites":["graphql-hint"],"updatePoint":{"line":477,"column":75},"line":477,"code":"  it('provides interface suggestions for type when using implements keyword', async () => {\n    const suggestions = await getHintSuggestions('type Type implements ', {\n      line: 0,\n      ch: 21,\n    });\n    const list = [\n      {\n        text: 'TestInterface',\n        type: TestSchema.getType('TestInterface'),\n      },\n      {\n        text: 'AnotherTestInterface',\n        type: TestSchema.getType('AnotherTestInterface'),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides interface suggestions for interface when using implements keyword","suites":["graphql-hint"],"updatePoint":{"line":496,"column":80},"line":496,"code":"  it('provides interface suggestions for interface when using implements keyword', async () => {\n    const suggestions = await getHintSuggestions(\n      'interface MyInt implements An',\n      { line: 0, ch: 29 },\n    );\n    const list = [\n      {\n        text: 'AnotherTestInterface',\n        type: TestSchema.getType('AnotherTestInterface'),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides interface suggestions for interface when using implements keyword and multiple interfaces","suites":["graphql-hint"],"updatePoint":{"line":511,"column":104},"line":511,"code":"  it('provides interface suggestions for interface when using implements keyword and multiple interfaces', async () => {\n    const suggestions = await getHintSuggestions(\n      'interface MyInt implements AnotherTestInterface & T',\n      { line: 0, ch: 51 },\n    );\n    const list = [\n      {\n        text: 'TestInterface',\n        type: TestSchema.getType('TestInterface'),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct typeCondition suggestions","suites":["graphql-hint"],"updatePoint":{"line":526,"column":48},"line":526,"code":"  it('provides correct typeCondition suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ union { ... on ', {\n      line: 0,\n      ch: 17,\n    });\n    const list = [\n      {\n        text: 'First',\n        description: '',\n      },\n      {\n        text: 'Second',\n        description: '',\n      },\n      {\n        text: 'TestInterface',\n        description: '',\n      },\n      {\n        text: 'AnotherTestInterface',\n        description: '',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct typeCondition suggestions after filtered","suites":["graphql-hint"],"updatePoint":{"line":553,"column":63},"line":553,"code":"  it('provides correct typeCondition suggestions after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ union { ... on F', {\n      line: 0,\n      ch: 18,\n    });\n    const list = [\n      {\n        text: 'First',\n        description: '',\n      },\n      {\n        text: 'TestInterface',\n        description: '',\n      },\n      {\n        text: 'AnotherTestInterface',\n        description: '',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct typeCondition suggestions on fragment","suites":["graphql-hint"],"updatePoint":{"line":576,"column":60},"line":576,"code":"  it('provides correct typeCondition suggestions on fragment', async () => {\n    const suggestions = await getHintSuggestions('fragment Foo on ', {\n      line: 0,\n      ch: 16,\n    });\n    const list = [\n      {\n        text: 'Test',\n        description: '',\n      },\n      {\n        text: 'TestUnion',\n        description: '',\n      },\n      {\n        text: 'First',\n        description: '',\n      },\n      {\n        text: 'TestInterface',\n        description: '',\n      },\n      {\n        text: 'AnotherTestInterface',\n        description: '',\n      },\n      {\n        text: 'Second',\n        description: '',\n      },\n      {\n        text: 'MutationType',\n        description: 'This is a simple mutation type',\n      },\n      {\n        text: 'SubscriptionType',\n        description: 'This is a simple subscription type',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct ENUM suggestions","suites":["graphql-hint"],"updatePoint":{"line":619,"column":39},"line":619,"code":"  it('provides correct ENUM suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs (enum: ', {\n      line: 0,\n      ch: 17,\n    });\n    const list = [\n      {\n        text: 'RED',\n        type: TestEnum,\n        isDeprecated: false,\n      },\n      {\n        text: 'GREEN',\n        type: TestEnum,\n        isDeprecated: false,\n      },\n      {\n        text: 'BLUE',\n        type: TestEnum,\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct testInput suggestions","suites":["graphql-hint"],"updatePoint":{"line":645,"column":44},"line":645,"code":"  it('provides correct testInput suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs (object: { ', {\n      line: 0,\n      ch: 21,\n    });\n    const list = [\n      {\n        text: 'string',\n        type: GraphQLString,\n      },\n      {\n        text: 'int',\n        type: GraphQLInt,\n      },\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'boolean',\n        type: GraphQLBoolean,\n      },\n      {\n        text: 'id',\n        type: GraphQLID,\n      },\n      {\n        text: 'enum',\n        type: TestEnum,\n      },\n      {\n        text: 'object',\n        type: TestInputObject,\n      },\n      {\n        text: 'listString',\n        type: new GraphQLList(GraphQLString),\n      },\n      {\n        text: 'listInt',\n        type: new GraphQLList(GraphQLInt),\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n      {\n        text: 'listBoolean',\n        type: new GraphQLList(GraphQLBoolean),\n      },\n      {\n        text: 'listID',\n        type: new GraphQLList(GraphQLID),\n      },\n      {\n        text: 'listEnum',\n        type: new GraphQLList(TestEnum),\n      },\n      {\n        text: 'listObject',\n        type: new GraphQLList(TestInputObject),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct object field suggestions after filtered","suites":["graphql-hint"],"updatePoint":{"line":712,"column":62},"line":712,"code":"  it('provides correct object field suggestions after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs (object: { f', {\n      line: 0,\n      ch: 22,\n    });\n    const list = [\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides fragment name suggestion","suites":["graphql-hint"],"updatePoint":{"line":731,"column":39},"line":731,"code":"  it('provides fragment name suggestion', async () => {\n    const suggestions = await getHintSuggestions(\n      'fragment Foo on Test { id }  query { ...',\n      { line: 0, ch: 40 },\n    );\n    const list = [\n      {\n        text: 'Foo',\n        type: TestType,\n        description: 'fragment Foo on Test',\n      },\n      {\n        text: 'Example',\n        type: TestType,\n        description: 'fragment Example on Test',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides fragment names for fragments defined lower","suites":["graphql-hint"],"updatePoint":{"line":752,"column":57},"line":752,"code":"  it('provides fragment names for fragments defined lower', async () => {\n    const suggestions = await getHintSuggestions(\n      'query { ... }\\nfragment Foo on Test { id }',\n      { line: 0, ch: 11 },\n    );\n    const list = [\n      {\n        text: 'Foo',\n        type: TestType,\n        description: 'fragment Foo on Test',\n      },\n      {\n        text: 'Example',\n        type: TestType,\n        description: 'fragment Example on Test',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides only appropriate fragment names","suites":["graphql-hint"],"updatePoint":{"line":773,"column":46},"line":773,"code":"  it('provides only appropriate fragment names', async () => {\n    const suggestions = await getHintSuggestions(\n      'fragment Foo on TestUnion { ... } ' +\n        'fragment Bar on First { name } ' +\n        'fragment Baz on Second { name } ' +\n        'fragment Qux on TestUnion { name } ' +\n        'fragment Nrf on Test { id } ' +\n        'fragment Quux on TestInputObject { string } ' +\n        'fragment Abc on Xyz { abcdef }',\n      { line: 0, ch: 31 },\n    );\n    const list = [\n      {\n        text: 'Bar',\n        type: UnionFirst,\n        description: 'fragment Bar on First',\n      },\n      {\n        text: 'Baz',\n        type: UnionSecond,\n        description: 'fragment Baz on Second',\n      },\n      {\n        text: 'Qux',\n        type: TestUnion,\n        description: 'fragment Qux on TestUnion',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestion inside inline fragment","suites":["graphql-hint"],"updatePoint":{"line":805,"column":67},"line":805,"code":"  it('provides correct field name suggestion inside inline fragment', async () => {\n    const suggestions = await getHintSuggestions(\n      'fragment Foo on TestUnion { ... on First { ',\n      { line: 0, ch: 43 },\n    );\n    const list = [\n      {\n        text: 'scalar',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: TestType,\n        isDeprecated: false,\n      },\n      {\n        text: 'example',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestion inside type-less inline fragment","suites":["graphql-hint"],"updatePoint":{"line":837,"column":77},"line":837,"code":"  it('provides correct field name suggestion inside type-less inline fragment', async () => {\n    const suggestions = await getHintSuggestions(\n      'fragment Foo on First { ... { ',\n      { line: 0, ch: 30 },\n    );\n    const list = [\n      {\n        text: 'scalar',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: TestType,\n        isDeprecated: false,\n      },\n      {\n        text: 'example',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n      },\n    ];\n\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct boolean suggestions","suites":["graphql-hint"],"updatePoint":{"line":870,"column":42},"line":870,"code":"  it('provides correct boolean suggestions', async () => {\n    const suggestions1 = await getHintSuggestions('{ hasArgs(listBoolean: [ ', {\n      line: 0,\n      ch: 27,\n    });\n    const list1 = [\n      {\n        text: 'true',\n        type: GraphQLBoolean,\n        description: 'Not false.',\n      },\n      {\n        text: 'false',\n        type: GraphQLBoolean,\n        description: 'Not true.',\n      },\n    ];\n    const expectedSuggestions1 = getExpectedSuggestions(list1);\n    expect(suggestions1?.list).toEqual(expectedSuggestions1);\n\n    const suggestions2 = await getHintSuggestions(\n      '{ hasArgs(object: { boolean: t',\n      { line: 0, ch: 30 },\n    );\n    const list2 = [\n      {\n        text: 'true',\n        type: GraphQLBoolean,\n        description: 'Not false.',\n      },\n    ];\n    const expectedSuggestions2 = getExpectedSuggestions(list2);\n    expect(suggestions2?.list).toEqual(expectedSuggestions2);\n\n    const suggestions3 = await getHintSuggestions('{ hasArgs(boolean: f', {\n      line: 0,\n      ch: 20,\n    });\n    const list3 = [\n      {\n        text: 'false',\n        type: GraphQLBoolean,\n        description: 'Not true.',\n      },\n    ];\n    const expectedSuggestions3 = getExpectedSuggestions(list3);\n    expect(suggestions3?.list).toEqual(expectedSuggestions3);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct variable type suggestions","suites":["graphql-hint"],"updatePoint":{"line":919,"column":48},"line":919,"code":"  it('provides correct variable type suggestions', async () => {\n    const suggestions = await getHintSuggestions('query($foo: ', {\n      line: 0,\n      ch: 12,\n    });\n    const list = [\n      {\n        text: 'String',\n        description:\n          'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n      },\n      {\n        text: 'Int',\n        description:\n          'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n      },\n      {\n        text: 'Boolean',\n        description: 'The `Boolean` scalar type represents `true` or `false`.',\n      },\n      {\n        text: 'Float',\n        description:\n          'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n      },\n      {\n        text: 'ID',\n        description:\n          'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n      },\n      { text: 'TestEnum' },\n      { text: 'TestInput' },\n      {\n        text: '__TypeKind',\n        description:\n          'An enum describing what kind of type a given `__Type` is.',\n      },\n      {\n        text: '__DirectiveLocation',\n        description:\n          'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct variable type suggestions inside list type","suites":["graphql-hint"],"updatePoint":{"line":966,"column":65},"line":966,"code":"  it('provides correct variable type suggestions inside list type', async () => {\n    const suggestions = await getHintSuggestions('query($foo: [ ', {\n      line: 0,\n      ch: 14,\n    });\n    const list = [\n      {\n        text: 'String',\n        description:\n          'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n      },\n      {\n        text: 'Int',\n        description:\n          'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n      },\n      {\n        text: 'Boolean',\n        description: 'The `Boolean` scalar type represents `true` or `false`.',\n      },\n      {\n        text: 'Float',\n        description:\n          'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n      },\n      {\n        text: 'ID',\n        description:\n          'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n      },\n      { text: 'TestEnum' },\n      { text: 'TestInput' },\n      {\n        text: '__TypeKind',\n        description:\n          'An enum describing what kind of type a given `__Type` is.',\n      },\n      {\n        text: '__DirectiveLocation',\n        description:\n          'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides no suggestions","suites":["graphql-hint"],"updatePoint":{"line":1012,"column":29},"line":1012,"code":"  it('provides no suggestions', async () => {\n    const list: IHint[] = [];\n    const expectedSuggestions = getExpectedSuggestions(list);\n\n    // kind is FragmentSpread, step is 2\n    const suggestions1 = await getHintSuggestions(\n      'fragment Foo on Test { id }  query { ...Foo ',\n      { line: 0, ch: 45 },\n    );\n    expect(suggestions1?.list).toEqual(expectedSuggestions);\n\n    // kind is ListType, step is 3\n    const suggestions2 = await getHintSuggestions('query($foo: [string] ', {\n      line: 0,\n      ch: 21,\n    });\n    expect(suggestions2?.list).toEqual(expectedSuggestions);\n\n    // kind is ListValue, step is 1\n    const suggestions3 = await getHintSuggestions(\n      '{ hasArgs(listString: [\"foo\" ',\n      {\n        line: 0,\n        ch: 29,\n      },\n    );\n    expect(suggestions3?.list).toEqual(expectedSuggestions);\n\n    // kind is VariableDefinition, step is 1\n    const suggestions4 = await getHintSuggestions('query($foo ', {\n      line: 0,\n      ch: 11,\n    });\n    expect(suggestions4?.list).toEqual(expectedSuggestions);\n\n    // kind is Argument, step is 1\n    const suggestions5 = await getHintSuggestions('{ hasArgs(string ', {\n      line: 0,\n      ch: 17,\n    });\n    expect(suggestions5?.list).toEqual(expectedSuggestions);\n\n    // kind is Argument, step is 2, and input type isn't GraphQLEnumType or GraphQLBoolean\n    const suggestions6 = await getHintSuggestions('{ hasArgs(string: ', {\n      line: 0,\n      ch: 18,\n    });\n    expect(suggestions6?.list).toEqual(expectedSuggestions);\n\n    const suggestions7 = await getHintSuggestions(\n      '{ hasArgs(object: { string ',\n      { line: 0, ch: 27 },\n    );\n    expect(suggestions7?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides variable completion for arguments","suites":["graphql-hint"],"updatePoint":{"line":1067,"column":48},"line":1067,"code":"  it('provides variable completion for arguments', async () => {\n    const expectedSuggestions = getExpectedSuggestions([\n      { text: 'string', type: GraphQLString },\n      { text: 'listString', type: new GraphQLList(GraphQLString) },\n    ]);\n    // kind is Argument, step is 2, and input type isn't GraphQLEnumType or GraphQLBoolean\n    const suggestions9 = await getHintSuggestions(\n      'query myQuery($arg: String){ hasArgs(string: ',\n      {\n        line: 0,\n        ch: 42,\n      },\n    );\n    expect(suggestions9?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides variable completion for arguments with $","suites":["graphql-hint"],"updatePoint":{"line":1082,"column":55},"line":1082,"code":"  it('provides variable completion for arguments with $', async () => {\n    const expectedSuggestions = getExpectedSuggestions([\n      { text: 'string', type: GraphQLString },\n      { text: 'listString', type: new GraphQLList(GraphQLString) },\n    ]);\n    // kind is Argument, step is 2, and input type isn't GraphQLEnumType or GraphQLBoolean\n    const suggestions9 = await getHintSuggestions(\n      'query myQuery($arg: String){ hasArgs(string: $',\n      {\n        line: 0,\n        ch: 42,\n      },\n    );\n    expect(suggestions9?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestions for an interface type","suites":["graphql-hint"],"updatePoint":{"line":1097,"column":67},"line":1097,"code":"  it('provides correct field name suggestions for an interface type', async () => {\n    const suggestions = await getHintSuggestions(\n      '{ first { ... on TestInterface { ',\n      {\n        line: 0,\n        ch: 33,\n      },\n    );\n    const list = [\n      {\n        text: 'scalar',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        deprecationReason: undefined,\n      },\n    ];\n\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"attaches a GraphQL lint function with correct mode/lint options","suites":["graphql-lint"],"updatePoint":{"line":45,"column":69},"line":45,"code":"  it('attaches a GraphQL lint function with correct mode/lint options', () => {\n    const editor = createEditorWithLint();\n    expect(editor.getHelpers(editor.getCursor(), 'lint')).not.toHaveLength(0);\n  });","file":"lint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"returns no syntactic/validation errors after parsing kitchen-sink query","suites":["graphql-lint"],"updatePoint":{"line":55,"column":77},"line":55,"code":"  it('returns no syntactic/validation errors after parsing kitchen-sink query', async () => {\n    const errors = await printLintErrors(kitchenSink);\n    expect(errors).toHaveLength(0);\n  });","file":"lint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"returns a validation error for a invalid query","suites":["graphql-lint"],"updatePoint":{"line":60,"column":52},"line":60,"code":"  it('returns a validation error for a invalid query', async () => {\n    const noMutationOperationRule = (context: any) => ({\n      OperationDefinition(node: OperationDefinitionNode) {\n        if (node.operation === 'mutation') {\n          context.reportError(new GraphQLError('I like turtles.', node));\n        }\n        return false;\n      },\n    });\n    const errors = await printLintErrors(kitchenSink, {\n      validationRules: [noMutationOperationRule],\n    });\n    expect(errors.length).toBe(1);\n    expect(errors[0].message).toBe('I like turtles.');\n  });","file":"lint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct tokens and styles after parsing","suites":["graphql-mode"],"updatePoint":{"line":17,"column":54},"line":17,"code":"  it('provides correct tokens and styles after parsing', () => {\n    const queryStr = 'query name { }';\n    const tokens: string[] = [];\n    const styles: string[] = [];\n\n    CodeMirror.runMode(queryStr, 'graphql', (token, style) => {\n      if (style && style !== 'ws') {\n        tokens.push(token);\n        styles.push(style);\n      }\n    });\n\n    expect(tokens).toEqual(['query', 'name', '{', '}']);\n    expect(styles).toEqual(['keyword', 'def', 'punctuation', 'punctuation']);\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses Relay-style anonymous FragmentDefinitions","suites":["graphql-mode"],"updatePoint":{"line":33,"column":54},"line":33,"code":"  it('parses Relay-style anonymous FragmentDefinitions', () => {\n    CodeMirror.runMode('fragment on Test { id }', 'graphql', (_token, style) =>\n      expect(style).not.toBe('invalidchar'),\n    );\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses inline fragments with optional syntax correctly","suites":["graphql-mode"],"updatePoint":{"line":39,"column":60},"line":39,"code":"  it('parses inline fragments with optional syntax correctly', () => {\n    CodeMirror.runMode(\n      '{ ... on OptionalType { name } }',\n      'graphql',\n      (_token, style) => expect(style).not.toBe('invalidchar'),\n    );\n\n    CodeMirror.runMode('{ ... { name } }', 'graphql', (_token, style) =>\n      expect(style).not.toBe('invalidchar'),\n    );\n\n    CodeMirror.runMode(\n      '{ ... @optionalDirective { name } }',\n      'graphql',\n      (_token, style) => expect(style).not.toBe('invalidchar'),\n    );\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"returns \"invalidchar\" message when there is no matching token","suites":["graphql-mode"],"updatePoint":{"line":57,"column":67},"line":57,"code":"  it('returns \"invalidchar\" message when there is no matching token', () => {\n    CodeMirror.runMode('invalidKeyword name', 'graphql', (token, style) => {\n      if (token.trim()) {\n        expect(style).toBe('invalidchar');\n      }\n    });\n\n    CodeMirror.runMode('query %', 'graphql', (token, style) => {\n      if (token === '%') {\n        expect(style).toBe('invalidchar');\n      }\n    });\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses kitchen-sink query without invalidchar","suites":["graphql-mode"],"updatePoint":{"line":71,"column":51},"line":71,"code":"  it('parses kitchen-sink query without invalidchar', () => {\n    const kitchenSink = readFileSync(\n      join(__dirname, '/kitchen-sink.graphql'),\n      'utf8',\n    );\n\n    CodeMirror.runMode(kitchenSink, 'graphql', (_token, style) => {\n      expect(style).not.toBe('invalidchar');\n    });\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses schema-kitchen-sink query without invalidchar","suites":["graphql-mode"],"updatePoint":{"line":82,"column":58},"line":82,"code":"  it('parses schema-kitchen-sink query without invalidchar', () => {\n    const schemaKitchenSink = readFileSync(\n      join(__dirname, '/schema-kitchen-sink.graphql'),\n      'utf8',\n    );\n\n    CodeMirror.runMode(schemaKitchenSink, 'graphql', (_token, style) => {\n      expect(style).not.toBe('invalidchar');\n    });\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses anonymous operations without invalidchar","suites":["graphql-mode"],"updatePoint":{"line":93,"column":53},"line":93,"code":"  it('parses anonymous operations without invalidchar', () => {\n    CodeMirror.runMode('{ id }', 'graphql', (_token, style) => {\n      expect(style).not.toBe('invalidchar');\n    });\n\n    CodeMirror.runMode(\n      `\n      mutation {\n        setString(value: \"newString\")\n      }\n    `,\n      'graphql',\n      (_token, style) => {\n        expect(style).not.toBe('invalidchar');\n      },\n    );\n\n    CodeMirror.runMode(\n      `\n      subscription {\n        subscribeToTest(id: \"anId\") {\n          id\n        }\n      }\n    `,\n      'graphql',\n      (_token, style) => {\n        expect(style).not.toBe('invalidchar');\n      },\n    );\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"is passed information on error of string type","suites":["process.stderr.write"],"updatePoint":{"line":16,"column":51},"line":16,"code":"  it('is passed information on error of string type', () => {\n    const argv = {\n      schemaPath: '...',\n      text: 'foo',\n    };\n    const mockStdErrWrite = jest\n      .spyOn(process.stderr, 'write')\n      .mockImplementation();\n    jest.spyOn(process, 'exit').mockImplementation();\n    const undefinedWithNewLine = /^undefined\\n$/;\n\n    main('autocomplete', argv);\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(expect.any(String));\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(\n      expect.not.stringMatching(undefinedWithNewLine),\n    );\n\n    main('outline', argv);\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(expect.any(String));\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(\n      expect.not.stringMatching(undefinedWithNewLine),\n    );\n\n    main('validate', argv);\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(expect.any(String));\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(\n      expect.not.stringMatching(undefinedWithNewLine),\n    );\n  });","file":"client-test.ts","skipped":false,"dir":"packages/graphql-language-service-cli/src/__tests__"},{"name":"runs","suites":["blinking light demo"],"updatePoint":{"line":10,"column":10},"line":10,"code":"  it('runs', () => {\n    // This is just a place holder for now as all the existing tests have moved\n    // down into the respective package directories. In the future, this will be\n    // the home of the integration tests.\n    expect(true).toEqual(true);\n  });","file":"index-test.ts","skipped":false,"dir":"packages/graphql-language-service-cli/src/__tests__"},{"name":"finds queries in tagged templates","suites":["findGraphQLTags"],"updatePoint":{"line":21,"column":39},"line":21,"code":"  it('finds queries in tagged templates', async () => {\n    const text = `\n// @flow\nimport {gql} from 'react-apollo';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = gql\\`\nquery Test {\n    test {\n    value\n    ...FragmentsComment\n    }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = findGraphQLTags(text, '.js');\n    expect(contents[0].template).toEqual(`\nquery Test {\n    test {\n    value\n    ...FragmentsComment\n    }\n}\n`);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in call expressions with template literals","suites":["findGraphQLTags"],"updatePoint":{"line":51,"column":62},"line":51,"code":"  it('finds queries in call expressions with template literals', async () => {\n    const text = `\n    // @flow\n    import {gql} from 'react-apollo';\n    import type {B} from 'B';\n    import A from './A';\n    \n    const QUERY = gql(\\`\n    query Test {\n      test {\n        value\n        ...FragmentsComment\n      }\n    }\n    \\${A.fragments.test}\n    \\`);\n    \n    export function Example(arg: string) {}`;\n\n    const contents = findGraphQLTags(text, '.js');\n    expect(contents[0].template).toEqual(`\n    query Test {\n      test {\n        value\n        ...FragmentsComment\n      }\n    }\n    `);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in #graphql-annotated templates","suites":["findGraphQLTags"],"updatePoint":{"line":81,"column":51},"line":81,"code":"  it('finds queries in #graphql-annotated templates', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = \\`#graphql\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = findGraphQLTags(text, '.ts');\n    expect(contents[0].template).toEqual(`#graphql\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in /* GraphQL */ prefixed templates","suites":["findGraphQLTags"],"updatePoint":{"line":110,"column":55},"line":110,"code":"  it('finds queries in /* GraphQL */ prefixed templates', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\n\nconst QUERY: string = \n/* GraphQL */ \n\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = findGraphQLTags(text, '.ts');\n    expect(contents[0].template).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries with nested graphql.experimental template tag expression","suites":["findGraphQLTags"],"updatePoint":{"line":142,"column":76},"line":142,"code":"  it('finds queries with nested graphql.experimental template tag expression', async () => {\n    const text = `const query = graphql.experimental\\` query {} \\``;\n\n    const contents = findGraphQLTags(text, '.ts');\n    expect(contents[0].template).toEqual(` query {} `);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries with spec decorators","suites":["findGraphQLTags"],"updatePoint":{"line":149,"column":40},"line":149,"code":"  it('finds queries with spec decorators', async () => {\n    const text = `\n    \n      @a class A {}\n      const query = graphql\\` query {} \\` \n    \n    `;\n    const contents = findGraphQLTags(text, '.ts');\n\n    expect(contents[0].template).toEqual(` query {} `);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries with es7 decorators","suites":["findGraphQLTags"],"updatePoint":{"line":161,"column":39},"line":161,"code":"  it('finds queries with es7 decorators', async () => {\n    const text = `\n   \n    class C {\n      state = {isLoading: true}\n      @enumerable(false)\n      method() {}\n      @something\n      onChange() {}\n    }\n\n    // 'legacy-decorators' does'nt like this this. thus why the modes are incompatible\n    class MyClass1 extends Component {\n      state = {isLoading: true}\n      \n      @something\n      onChange() {}\n      \n      @something()\n      handleSubmit() {}\n    }\n    \n    @isTestable(true)\n    class MyClass {}\n    \n    @Module({\n      imports: [\n        GraphQLModule.forRoot({\n          debug: false,\n          playground: false,\n        }),\n      ],\n    })\n\n    class A {}\n    \n@Decorator.a.b()\nclass Todo {}\n\n@Decorator.d().e\nclass Todo2{}\n\n    @a\n   class AppModule {}\n      const query = graphql\\` query {} \\` \n    `;\n    const contents = findGraphQLTags(text, '.ts');\n\n    expect(contents[0].template).toEqual(` query {} `);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries with nested template tag expressions","suites":["findGraphQLTags"],"updatePoint":{"line":212,"column":56},"line":212,"code":"  it('finds queries with nested template tag expressions', async () => {\n    const text = `export default {\n  else: () => gql\\` query {} \\`\n}`;\n\n    const contents = findGraphQLTags(text, '.ts');\n    expect(contents[0].template).toEqual(` query {} `);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries with template tags inside call expressions","suites":["findGraphQLTags"],"updatePoint":{"line":221,"column":62},"line":221,"code":"  it('finds queries with template tags inside call expressions', async () => {\n    const text = `something({\n  else: () => graphql\\` query {} \\`\n})`;\n\n    const contents = findGraphQLTags(text, '.ts');\n    expect(contents[0].template).toEqual(` query {} `);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in tagged templates in Vue SFC using <script setup>","suites":["findGraphQLTags"],"updatePoint":{"line":230,"column":71},"line":230,"code":"  it('finds queries in tagged templates in Vue SFC using <script setup>', async () => {\n    const text = `\n<script setup lang=\"ts\">\ngql\\`\nquery {id}\n\\`;\n</script>\n`;\n    const contents = findGraphQLTags(text, '.vue');\n    expect(contents[0].template).toEqual(`\nquery {id}`);\n    expect(contents[0].range.start.line).toEqual(2);\n    expect(contents[0].range.end.line).toEqual(4);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in tagged templates in Vue SFC using <script setup> and template above","suites":["findGraphQLTags"],"updatePoint":{"line":245,"column":90},"line":245,"code":"  it('finds queries in tagged templates in Vue SFC using <script setup> and template above', async () => {\n    const text = `<template>\n      <div/>\n    </template>\n<script setup lang=\"ts\">\ngql\\`\nquery {id}\n\\`;\n</script>\n`;\n    const contents = findGraphQLTags(text, '.vue');\n    expect(contents[0].template).toEqual(`\nquery {id}`);\n    expect(contents[0].range.start.line).toEqual(4);\n    expect(contents[0].range.end.line).toEqual(6);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in tagged templates in Vue SFC using normal <script>","suites":["findGraphQLTags"],"updatePoint":{"line":262,"column":72},"line":262,"code":"  it('finds queries in tagged templates in Vue SFC using normal <script>', async () => {\n    const text = `\n<script lang=\"ts\">\ngql\\`\nquery {id}\n\\`;\n</script>\n`;\n    const contents = findGraphQLTags(text, '.vue');\n    expect(contents[0].template).toEqual(`\nquery {id}`);\n    expect(contents[0].range.start.line).toEqual(2);\n    expect(contents[0].range.end.line).toEqual(4);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in tagged templates in Vue SFC using normal <script> and template above","suites":["findGraphQLTags"],"updatePoint":{"line":277,"column":91},"line":277,"code":"  it('finds queries in tagged templates in Vue SFC using normal <script> and template above', async () => {\n    const text = `<template>\n    <div/>\n  </template>\n<script lang=\"ts\">\ngql\\`\nquery {id}\n\\`;\n</script>\n`;\n    const contents = findGraphQLTags(text, '.vue');\n    expect(contents[0].template).toEqual(`\nquery {id}`);\n    expect(contents[0].range.start.line).toEqual(4);\n    expect(contents[0].range.end.line).toEqual(6);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in tagged templates in Vue SFC using <script lang=\"tsx\">","suites":["findGraphQLTags"],"updatePoint":{"line":294,"column":76},"line":294,"code":"  it('finds queries in tagged templates in Vue SFC using <script lang=\"tsx\">', async () => {\n    const text = `\n<script lang=\"tsx\">\nimport { defineComponent } from 'vue';\n\ngql\\`\nquery {id}\n\\`;\n\nexport default defineComponent({\n  setup() {\n    return () => <div>Hello</div>\n  }\n});\n</script>\n`;\n\n    const contents = findGraphQLTags(text, '.vue');\n    expect(contents[0].template).toEqual(`\nquery {id}`);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds queries in tagged templates in Svelte using normal <script>","suites":["findGraphQLTags"],"updatePoint":{"line":316,"column":71},"line":316,"code":"  it('finds queries in tagged templates in Svelte using normal <script>', async () => {\n    const text = `\n<script>\ngql\\`\nquery {id}\n\\`;\n</script>\n`;\n    const contents = findGraphQLTags(text, '.svelte');\n    expect(contents[0].template).toEqual(`\nquery {id}`);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"no crash in Svelte files without <script>","suites":["findGraphQLTags"],"updatePoint":{"line":329,"column":47},"line":329,"code":"  it('no crash in Svelte files without <script>', async () => {\n    const text = ``;\n\n    const consoleErrorSpy = jest\n      .spyOn(process.stderr, 'write')\n      .mockImplementation(() => true);\n\n    const contents = baseFindGraphQLTags(text, '.svelte', '', new NoopLogger());\n    // We should have no contents\n    expect(contents).toMatchObject([]);\n\n    // Nothing should be logged as it's a managed error\n    expect(consoleErrorSpy.mock.calls.length).toBe(0);\n\n    consoleErrorSpy.mockRestore();\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"no crash in Svelte files with empty <script>","suites":["findGraphQLTags"],"updatePoint":{"line":346,"column":50},"line":346,"code":"  it('no crash in Svelte files with empty <script>', async () => {\n    const text = `<script></script>`;\n\n    const consoleErrorSpy = jest\n      .spyOn(process.stderr, 'write')\n      .mockImplementation(() => true);\n\n    const contents = baseFindGraphQLTags(text, '.svelte', '', new NoopLogger());\n    // We should have no contents\n    expect(contents).toMatchObject([]);\n\n    // Nothing should be logged as it's a managed error\n    expect(consoleErrorSpy.mock.calls.length).toBe(0);\n\n    consoleErrorSpy.mockRestore();\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"no crash in Svelte files with empty <script> (typescript)","suites":["findGraphQLTags"],"updatePoint":{"line":363,"column":63},"line":363,"code":"  it('no crash in Svelte files with empty <script> (typescript)', async () => {\n    const text = `<script lang=\"ts\"></script>`;\n\n    const consoleErrorSpy = jest\n      .spyOn(process.stderr, 'write')\n      .mockImplementation(() => true);\n\n    const contents = baseFindGraphQLTags(text, '.svelte', '', new NoopLogger());\n    // We should have no contents\n    expect(contents).toMatchObject([]);\n\n    // Nothing should be logged as it's a managed error\n    expect(consoleErrorSpy.mock.calls.length).toBe(0);\n\n    consoleErrorSpy.mockRestore();\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds multiple queries in a single file","suites":["findGraphQLTags"],"updatePoint":{"line":380,"column":45},"line":380,"code":"  it('finds multiple queries in a single file', async () => {\n    const text = `something({\n  else: () => gql\\` query {} \\`\n})\nconst query = graphql\\`query myQuery {}\\``;\n\n    const contents = findGraphQLTags(text, '.ts');\n\n    expect(contents.length).toEqual(2);\n\n    // let's double check that we're properly\n    // extracting the positions of each embedded string\n    expect(contents[0].range.start.line).toEqual(1);\n    expect(contents[0].range.start.character).toEqual(18);\n    expect(contents[0].range.end.line).toEqual(1);\n    expect(contents[0].range.end.character).toEqual(28);\n    expect(contents[0].template).toEqual(` query {} `);\n\n    // and the second string, with correct positional information!\n    expect(contents[1].range.start.line).toEqual(3);\n    expect(contents[1].range.start.character).toEqual(22);\n    expect(contents[1].range.end.line).toEqual(3);\n    expect(contents[1].range.end.character).toEqual(38);\n    expect(contents[1].template).toEqual(`query myQuery {}`);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"ignores non gql tagged templates","suites":["findGraphQLTags"],"updatePoint":{"line":406,"column":38},"line":406,"code":"  it('ignores non gql tagged templates', async () => {\n    const text = `\n// @flow\nimport randomthing from 'package';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = randomthing\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = findGraphQLTags(text, '.js');\n    expect(contents.length).toEqual(0);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"ignores non gql call expressions with template literals","suites":["findGraphQLTags"],"updatePoint":{"line":429,"column":61},"line":429,"code":"  it('ignores non gql call expressions with template literals', async () => {\n    const text = `\n// @flow\nimport randomthing from 'package';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = randomthing(\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`);\n\nexport function Example(arg: string) {}`;\n\n    const contents = findGraphQLTags(text, '.js');\n    expect(contents.length).toEqual(0);\n  });","file":"findGraphQLTags-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"should apply extensions","suites":["GraphQLCache","getGraphQLCache"],"updatePoint":{"line":65,"column":31},"line":65,"code":"    it('should apply extensions', async () => {\n      const extension: GraphQLExtensionDeclaration = _config => {\n        return {\n          name: 'extension-used', // Just adding a key to the config to demo extension usage\n        };\n      };\n      const extensions = [extension];\n      const cacheWithExtensions = await getGraphQLCache({\n        loadConfigOptions: { rootDir: configDir, extensions },\n        parser: parseDocument,\n      });\n      const config = cacheWithExtensions.getGraphQLConfig();\n      expect('extensions' in config).toBe(true);\n      expect(config.extensions.has('extension-used')).toBeTruthy();\n      expect(config.extensions.get('extension-used')).toEqual({\n        name: 'extension-used',\n      });\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"generates the schema correctly for the test app config","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":86,"column":62},"line":86,"code":"    it('generates the schema correctly for the test app config', async () => {\n      const schema = await cache.getSchema('testWithSchema');\n      expect(schema instanceof GraphQLSchema).toEqual(true);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"generates the schema correctly from endpoint","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":91,"column":52},"line":91,"code":"    it('generates the schema correctly from endpoint', async () => {\n      const introspectionResult = {\n        data: introspectionFromSchema(\n          await graphQLRC.getProject('testWithSchema').getSchema(),\n          { descriptions: true },\n        ),\n      };\n      fetchMock.mock({\n        matcher: '*',\n        response: {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: introspectionResult,\n        },\n      });\n\n      const schema = await cache.getSchema('testWithEndpoint');\n      expect(fetchMock.called('*')).toEqual(true);\n      expect(schema instanceof GraphQLSchema).toEqual(true);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"does not generate a schema without a schema path or endpoint","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":113,"column":68},"line":113,"code":"    it('does not generate a schema without a schema path or endpoint', async () => {\n      const schema = await cache.getSchema('testWithoutSchema');\n      expect(schema instanceof GraphQLSchema).toEqual(false);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"extend the schema with appropriate custom directive","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":118,"column":59},"line":118,"code":"    it('extend the schema with appropriate custom directive', async () => {\n      const schema = await cache.getSchema('testWithCustomDirectives');\n      expect(withoutASTNode(schema.getDirective('customDirective'))).toEqual(\n        // objectContaining is used to pass this test without changing the code if more properties are added in GraphQLDirective class in the new version of graphql module.\n        expect.objectContaining({\n          args: [],\n          description: undefined,\n          isRepeatable: false,\n          locations: ['FIELD'],\n          name: 'customDirective',\n        }),\n      );\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"extend the schema with appropriate custom directive 2","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":132,"column":61},"line":132,"code":"    it('extend the schema with appropriate custom directive 2', async () => {\n      const schema = await cache.getSchema('testWithSchema');\n      expect(withoutASTNode(schema.getDirective('customDirective'))).toEqual(\n        // objectContaining is used to pass this test without changing the code if more properties are added in GraphQLDirective class in the new version of graphql module.\n        expect.objectContaining({\n          args: [],\n          description: undefined,\n          isRepeatable: false,\n          locations: ['FRAGMENT_SPREAD'],\n          name: 'customDirective',\n        }),\n      );\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds fragments referenced in Relay queries","suites":["GraphQLCache","getFragmentDependencies"],"updatePoint":{"line":171,"column":51},"line":171,"code":"    it('finds fragments referenced in Relay queries', async () => {\n      const text =\n        'module.exports = Relay.createContainer(' +\n        'DispatchResumeCard, {\\n' +\n        '  fragments: {\\n' +\n        '    candidate: () => graphql`\\n' +\n        '      query A { ...Duck ...Cat }\\n' +\n        '    `,\\n' +\n        '  },\\n' +\n        '});';\n      const contents = parseDocument(text, 'test.js');\n      const result = await cache.getFragmentDependenciesForAST(\n        parse(contents[0].query),\n        fragmentDefinitions,\n      );\n      expect(result.length).toEqual(2);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds fragments referenced from the query","suites":["GraphQLCache","getFragmentDependencies"],"updatePoint":{"line":189,"column":49},"line":189,"code":"    it('finds fragments referenced from the query', async () => {\n      const ast = parse('query A { ...Duck }');\n\n      const result = await cache.getFragmentDependenciesForAST(\n        ast,\n        fragmentDefinitions,\n      );\n      expect(result.length).toEqual(1);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"caches fragments found through single glob in `documents`","suites":["GraphQLCache","getFragmentDefinitions"],"updatePoint":{"line":201,"column":65},"line":201,"code":"    it('caches fragments found through single glob in `documents`', async () => {\n      const config = graphQLRC.getProject('testSingularIncludesGlob');\n      const fragmentDefinitions = await cache.getFragmentDefinitions(config);\n      expect(fragmentDefinitions.get('testFragment')).not.toBeUndefined();\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"caches fragments found through multiple globs in `documents`","suites":["GraphQLCache","getFragmentDefinitions"],"updatePoint":{"line":207,"column":68},"line":207,"code":"    it('caches fragments found through multiple globs in `documents`', async () => {\n      const config = graphQLRC.getProject('testMultipleIncludes');\n      const fragmentDefinitions = await cache.getFragmentDefinitions(config);\n      expect(fragmentDefinitions.get('testFragment')).not.toBeUndefined();\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"handles empty documents","suites":["GraphQLCache","getFragmentDefinitions"],"updatePoint":{"line":213,"column":31},"line":213,"code":"    it('handles empty documents', async () => {\n      const config = graphQLRC.getProject('testNoIncludes');\n      const fragmentDefinitions = await cache.getFragmentDefinitions(config);\n      expect(fragmentDefinitions.get('testFragment')).toBeUndefined();\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"handles non-existent documents","suites":["GraphQLCache","getFragmentDefinitions"],"updatePoint":{"line":219,"column":38},"line":219,"code":"    it('handles non-existent documents', async () => {\n      const config = graphQLRC.getProject('testBadIncludes');\n      const fragmentDefinitions = await cache.getFragmentDefinitions(config);\n      expect(fragmentDefinitions.get('testFragment')).toBeUndefined();\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds named types referenced from the SDL","suites":["GraphQLCache","getNamedTypeDependencies"],"updatePoint":{"line":254,"column":49},"line":254,"code":"    it('finds named types referenced from the SDL', async () => {\n      const result = await cache.getObjectTypeDependenciesForAST(\n        parsedQuery,\n        namedTypeDefinitions,\n      );\n      expect(result.length).toEqual(1);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs diagnostic service as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":129,"column":41},"line":129,"code":"  it('runs diagnostic service as expected', async () => {\n    const diagnostics = await languageService.getDiagnostics(\n      'invalidKeyword',\n      './queries/testQuery.graphql',\n    );\n    expect(diagnostics.length).toEqual(1);\n    const diagnostic = diagnostics[0];\n    expect(diagnostic.message).toEqual(\n      'Syntax Error: Unexpected Name \"invalidKeyword\".',\n    );\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"avoids reporting validation errors when not enough characters are present","suites":["GraphQLLanguageService"],"updatePoint":{"line":141,"column":79},"line":141,"code":"  it('avoids reporting validation errors when not enough characters are present', async () => {\n    const diagnostics = await languageService.getDiagnostics(\n      ' \\n   \\n  \\n\\n',\n      './queries/testQuery.graphql',\n    );\n    expect(diagnostics.length).toEqual(0);\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"still reports errors on empty anonymous op","suites":["GraphQLLanguageService"],"updatePoint":{"line":149,"column":48},"line":149,"code":"  it('still reports errors on empty anonymous op', async () => {\n    const diagnostics = await languageService.getDiagnostics(\n      ' \\n   {\\n  \\n}\\n\\n',\n      './queries/testQuery.graphql',\n    );\n    expect(diagnostics.length).toEqual(1);\n    expect(diagnostics[0].message).toEqual(\n      'Syntax Error: Expected Name, found \"}\".',\n    );\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs definition service as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":160,"column":41},"line":160,"code":"  it('runs definition service as expected', async () => {\n    const definitionQueryResult = await languageService.getDefinition(\n      'type Query { hero(episode: Episode): Character }',\n      { line: 0, character: 28 } as Position,\n      './queries/definitionQuery.graphql',\n    );\n    expect(definitionQueryResult?.definitions.length).toEqual(1);\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs definition service on field as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":169,"column":50},"line":169,"code":"  it('runs definition service on field as expected', async () => {\n    const definitionQueryResult = await languageService.getDefinition(\n      'query XXX { human { name } }',\n      { line: 0, character: 21 } as Position,\n      './queries/definitionQuery.graphql',\n    );\n    expect(definitionQueryResult?.definitions.length).toEqual(1);\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"can find a definition for a union","suites":["GraphQLLanguageService"],"updatePoint":{"line":178,"column":39},"line":178,"code":"  it('can find a definition for a union', async () => {\n    const query =\n      'union X = A | B\\ntype A { x: String }\\ntype B { x: String }\\ntype Query { a: X }';\n    const definitionQueryResult = await languageService.getDefinition(\n      query,\n      { line: 3, character: 16 } as Position,\n      './queries/definitionQuery.graphql',\n    );\n    expect(definitionQueryResult?.definitions.length).toEqual(1);\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs hover service as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":189,"column":36},"line":189,"code":"  it('runs hover service as expected', async () => {\n    const hoverInformation = await languageService.getHoverInformation(\n      'type Query { hero(episode: String): String }',\n      { line: 0, character: 28 } as Position,\n      './queries/definitionQuery.graphql',\n    );\n    expect(hoverInformation).toEqual(\n      'String\\n\\nThe `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n    );\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs document symbol requests as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":200,"column":47},"line":200,"code":"  it('runs document symbol requests as expected', async () => {\n    const validQuery = `\n  query OperationExample {\n    item(episode: EMPIRE){\n      ...testFragment\n    }\n  }\n  `;\n\n    const result = await languageService.getDocumentSymbols(\n      validQuery,\n      'file://file.graphql',\n    );\n\n    expect(result).not.toBeUndefined();\n    expect(result.length).toEqual(3);\n    // expect(result[0].name).toEqual('item');\n    expect(result[1].name).toEqual('item');\n    expect(result[1].kind).toEqual(SymbolKind.Field);\n    expect(result[1].location.range.start.line).toEqual(2);\n    expect(result[1].location.range.start.character).toEqual(4);\n    expect(result[1].location.range.end.line).toEqual(4);\n    expect(result[1].location.range.end.character).toEqual(5);\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"initializes properly and opens a file","suites":["MessageProcessor"],"updatePoint":{"line":138,"column":43},"line":138,"code":"  it('initializes properly and opens a file', async () => {\n    const { capabilities } = await messageProcessor.handleInitializeRequest(\n      // @ts-ignore\n      {\n        rootPath: __dirname,\n      },\n      null,\n      __dirname,\n    );\n    expect(capabilities.definitionProvider).toEqual(true);\n    expect(capabilities.workspaceSymbolProvider).toEqual(true);\n    expect(capabilities.completionProvider.resolveProvider).toEqual(true);\n    expect(capabilities.textDocumentSync).toEqual(1);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs completion requests properly","suites":["MessageProcessor"],"updatePoint":{"line":153,"column":39},"line":153,"code":"  it('runs completion requests properly', async () => {\n    const uri = `${queryPathUri}/test2.graphql`;\n    const query = 'test';\n    messageProcessor._textDocumentCache.set(uri, {\n      version: 0,\n      contents: [\n        {\n          query,\n          range: new Range(new Position(0, 0), new Position(0, 0)),\n        },\n      ],\n    });\n\n    const test = {\n      position: new Position(0, 0),\n      textDocument: { uri },\n    };\n    const result = await messageProcessor.handleCompletionRequest(test);\n    expect(result).toEqual({\n      items: [{ label: `${query} at ${uri}` }],\n      isIncomplete: false,\n    });\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs document symbol requests","suites":["MessageProcessor"],"updatePoint":{"line":177,"column":35},"line":177,"code":"  it('runs document symbol requests', async () => {\n    const uri = `${queryPathUri}/test3.graphql`;\n    const validQuery = `\n  {\n    hero(episode: EMPIRE){\n      ...testFragment\n    }\n  }\n  `;\n\n    const newDocument = {\n      textDocument: {\n        text: validQuery,\n        uri,\n        version: 0,\n      },\n    };\n\n    messageProcessor._textDocumentCache.set(uri, {\n      version: 0,\n      contents: [\n        {\n          query: validQuery,\n          range: new Range(new Position(0, 0), new Position(0, 0)),\n        },\n      ],\n    });\n\n    const test = {\n      textDocument: newDocument.textDocument,\n    };\n\n    const result = await messageProcessor.handleDocumentSymbolRequest(test);\n\n    expect(result).not.toBeUndefined();\n    expect(result.length).toEqual(1);\n    expect(result[0].name).toEqual('item');\n    expect(result[0].kind).toEqual(SymbolKind.Field);\n    expect(result[0].location.range).toEqual({\n      start: { line: 1, character: 2 },\n      end: { line: 1, character: 4 },\n    });\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"properly changes the file cache with the didChange handler","suites":["MessageProcessor"],"updatePoint":{"line":221,"column":64},"line":221,"code":"  it('properly changes the file cache with the didChange handler', async () => {\n    const uri = `${queryPathUri}/test.graphql`;\n    messageProcessor._textDocumentCache.set(uri, {\n      version: 1,\n      contents: [\n        {\n          query: '',\n          range: new Range(new Position(0, 0), new Position(0, 0)),\n        },\n      ],\n    });\n    const textDocumentChangedString = `\n      {\n        hero(episode: NEWHOPE){\n          name\n        }\n      }\n      `;\n\n    const result = await messageProcessor.handleDidChangeNotification({\n      textDocument: {\n        // @ts-ignore\n        text: textDocumentTestString,\n        uri,\n        version: 1,\n      },\n      contentChanges: [\n        { text: textDocumentTestString },\n        { text: textDocumentChangedString },\n      ],\n    });\n    // Query fixed, no more errors\n    expect(result.diagnostics.length).toEqual(0);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"does not crash on null value returned in response to workspace configuration","suites":["MessageProcessor"],"updatePoint":{"line":256,"column":82},"line":256,"code":"  it('does not crash on null value returned in response to workspace configuration', async () => {\n    const previousConfigurationValue = getConfigurationReturnValue;\n    getConfigurationReturnValue = null;\n    await expect(\n      messageProcessor.handleDidChangeConfiguration(),\n    ).resolves.toStrictEqual({});\n    getConfigurationReturnValue = previousConfigurationValue;\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"properly removes from the file cache with the didClose handler","suites":["MessageProcessor"],"updatePoint":{"line":265,"column":68},"line":265,"code":"  it('properly removes from the file cache with the didClose handler', async () => {\n    await messageProcessor.handleDidCloseNotification(initialDocument);\n\n    const position = { line: 4, character: 5 };\n    const params = { textDocument: initialDocument.textDocument, position };\n\n    // Should throw because file has been deleted from cache\n    try {\n      const result = await messageProcessor.handleCompletionRequest(params);\n      expect(result).toEqual(null);\n    } catch {}\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs definition requests","suites":["MessageProcessor"],"updatePoint":{"line":279,"column":30},"line":279,"code":"  it('runs definition requests', async () => {\n    jest.setTimeout(10000);\n    const validQuery = `\n  {\n    hero(episode: EMPIRE){\n      ...testFragment\n    }\n  }\n  `;\n\n    const newDocument = {\n      textDocument: {\n        text: validQuery,\n        uri: `${queryPathUri}/test3.graphql`,\n        version: 1,\n      },\n    };\n    messageProcessor._getCachedDocument = (_uri: string) => ({\n      version: 1,\n      contents: [\n        {\n          query: validQuery,\n          range: new Range(new Position(0, 0), new Position(20, 4)),\n        },\n      ],\n    });\n\n    await messageProcessor.handleDidOpenOrSaveNotification(newDocument);\n\n    const test = {\n      position: new Position(3, 15),\n      textDocument: newDocument.textDocument,\n    };\n\n    const result = await messageProcessor.handleDefinitionRequest(test);\n    await expect(result[0].uri).toEqual(`${queryPathUri}/test3.graphql`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"updates config for standard config filename changes","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":325,"column":59},"line":325,"code":"    it('updates config for standard config filename changes', async () => {\n      await messageProcessor.handleDidOpenOrSaveNotification({\n        textDocument: {\n          uri: `${pathToFileURL('.')}/.graphql.config.js`,\n          languageId: 'js',\n          version: 0,\n          text: '',\n        },\n      });\n\n      expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"updates config for custom config filename changes","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":338,"column":57},"line":338,"code":"    it('updates config for custom config filename changes', async () => {\n      const customConfigName = 'custom-config-name.yml';\n      messageProcessor._settings = { load: { fileName: customConfigName } };\n\n      await messageProcessor.handleDidOpenOrSaveNotification({\n        textDocument: {\n          uri: `${pathToFileURL('.')}/${customConfigName}`,\n          languageId: 'js',\n          version: 0,\n          text: '',\n        },\n      });\n\n      expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"handles config requests with no config","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":354,"column":46},"line":354,"code":"    it('handles config requests with no config', async () => {\n      messageProcessor._settings = {};\n\n      await messageProcessor.handleDidChangeConfiguration({\n        settings: [],\n      });\n\n      expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();\n\n      await messageProcessor.handleDidOpenOrSaveNotification({\n        textDocument: {\n          uri: `${pathToFileURL('.')}/.graphql.config.js`,\n          languageId: 'js',\n          version: 0,\n          text: '',\n        },\n      });\n\n      expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in tagged templates","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":376,"column":53},"line":376,"code":"  it('parseDocument finds queries in tagged templates', async () => {\n    const text = `\n// @flow\nimport {gql} from 'react-apollo';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = gql\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.js');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in tagged templates using typescript","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":406,"column":70},"line":406,"code":"  it('parseDocument finds queries in tagged templates using typescript', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = gql\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.ts');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in tagged templates using tsx","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":435,"column":63},"line":435,"code":"  it('parseDocument finds queries in tagged templates using tsx', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = gql\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {\n  return <div>{QUERY}</div>\n}`;\n\n    const contents = parseDocument(text, 'test.tsx');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in multi-expression tagged templates using tsx","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":466,"column":80},"line":466,"code":"  it('parseDocument finds queries in multi-expression tagged templates using tsx', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\nconst someValue = 'value'\nconst QUERY: string = gql\\`\nquery Test {\n  test {\n    value\n    $\\{someValue}\n    ...FragmentsComment\n  }\n  $\\{someValue}\n}\\`\n\nexport function Example(arg: string) {\n  return <div>{QUERY}</div>\n}`;\n\n    const contents = parseDocument(text, 'test.tsx');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    \n    ...FragmentsComment\n  }\n  \n}`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in multi-expression tagged template with declarations with using tsx","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":498,"column":102},"line":498,"code":"  it('parseDocument finds queries in multi-expression tagged template with declarations with using tsx', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\nconst someValue = 'value'\ntype SomeType = { test: any }\nconst QUERY: string = gql<SomeType>\\`\nquery Test {\n  test {\n    value\n    $\\{someValue}\n    ...FragmentsComment\n  }\n  $\\{someValue}\n}\\`\n\nexport function Example(arg: string) {\n  return <div>{QUERY}</div>\n}`;\n\n    const contents = parseDocument(text, 'test.tsx');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    \n    ...FragmentsComment\n  }\n  \n}`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in multi-expression template strings using tsx","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":531,"column":80},"line":531,"code":"  it('parseDocument finds queries in multi-expression template strings using tsx', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\nconst someValue = 'value'\nconst QUERY: string =\n/* GraphQL */\n\\`\nquery Test {\n  test {\n    value\n    \\${someValue}\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {\n  return <div>{QUERY}</div>\n}`;\n\n    const contents = parseDocument(text, 'test.tsx');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    \n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in call expressions with template literals","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":566,"column":76},"line":566,"code":"  it('parseDocument finds queries in call expressions with template literals', async () => {\n    const text = `\n// @flow\nimport {gql} from 'react-apollo';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = gql(\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`);\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.js');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in #graphql-annotated templates","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":596,"column":65},"line":596,"code":"  it('parseDocument finds queries in #graphql-annotated templates', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = \\`#graphql\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.ts');\n    expect(contents[0].query).toEqual(`#graphql\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in /*GraphQL*/-annotated templates","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":625,"column":68},"line":625,"code":"  it('parseDocument finds queries in /*GraphQL*/-annotated templates', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = /* GraphQL */ \\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.ts');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument ignores non gql tagged templates","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":654,"column":52},"line":654,"code":"  it('parseDocument ignores non gql tagged templates', async () => {\n    const text = `\n// @flow\nimport randomThing from 'package';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = randomThing\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.js');\n    expect(contents.length).toEqual(0);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument ignores non gql call expressions with template literals","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":677,"column":75},"line":677,"code":"  it('parseDocument ignores non gql call expressions with template literals', async () => {\n    const text = `\n// @flow\nimport randomthing from 'package';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = randomthing(\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`);\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.js');\n    expect(contents.length).toEqual(0);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"an unparsable JS/TS file does not throw and bring down the server","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":700,"column":71},"line":700,"code":"  it('an unparsable JS/TS file does not throw and bring down the server', async () => {\n    const text = `\n// @flow\nimport type randomThing fro 'package';\nimport type {B} from 'B';\nim port A from './A';\n\ncon  QUERY = randomThing\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.frag`;\n\n    const contents = parseDocument(text, 'test.js');\n    expect(contents.length).toEqual(0);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"skips config updates for normal file changes","suites":["MessageProcessor","handleWatchedFilesChangedNotification"],"updatePoint":{"line":729,"column":52},"line":729,"code":"    it('skips config updates for normal file changes', async () => {\n      await messageProcessor.handleWatchedFilesChangedNotification({\n        changes: [\n          {\n            uri: `${pathToFileURL('.')}/foo.graphql`,\n            type: FileChangeType.Changed,\n          },\n        ],\n      });\n\n      expect(messageProcessor._updateGraphQLConfig).not.toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"skips config updates for normal file changes","suites":["MessageProcessor","handleWatchedFilesChangedNotification without graphql config"],"updatePoint":{"line":754,"column":52},"line":754,"code":"    it('skips config updates for normal file changes', async () => {\n      await messageProcessor.handleWatchedFilesChangedNotification({\n        changes: [\n          {\n            uri: `${pathToFileURL('.')}/foo.js`,\n            type: FileChangeType.Changed,\n          },\n        ],\n      });\n      expect(messageProcessor._parser).not.toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"skips config updates for normal file changes","suites":["MessageProcessor","handleDidChangedNotification without graphql config"],"updatePoint":{"line":778,"column":52},"line":778,"code":"    it('skips config updates for normal file changes', async () => {\n      await messageProcessor.handleDidChangeNotification({\n        textDocument: {\n          uri: `${pathToFileURL('.')}/foo.js`,\n          version: 1,\n        },\n        contentChanges: [{ text: 'var something' }],\n      });\n      expect(messageProcessor._parser).not.toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"}]}