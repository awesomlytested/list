{"repo":"baidu/amis","url":"https://github.com/baidu/amis","branch":"master","configs":[{"package":"amis","lang":"js","dir":"__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"store:index","suites":[],"updatePoint":{"line":4,"column":17,"index":184},"line":4,"code":"test('store:index', () => {\n  const store = RendererStore.create({});\n  expect(getSnapshot(store)).toMatchSnapshot();\n  const serviceStore = ServiceStore.create({\n    path: '/xxx',\n    storeType: ServiceStore.name,\n    id: '1'\n  });\n  store.addStore(serviceStore);\n  expect(getSnapshot(store)).toMatchSnapshot();\n  const serviceStore2 = ServiceStore.create({\n    path: '/yyy',\n    storeType: ServiceStore.name,\n    id: '2',\n    parentId: '1'\n  });\n  store.addStore(serviceStore2);\n  expect(getSnapshot(store)).toMatchSnapshot();\n  expect(serviceStore2.parentStore).toEqual(serviceStore);\n  store.removeStore(serviceStore2);\n  expect(getSnapshot(store)).toMatchSnapshot();\n});","file":"stores/index.test.ts","skipped":false,"dir":"__tests__"},{"name":"store:index env","suites":[],"updatePoint":{"line":26,"column":21,"index":864},"line":26,"code":"test('store:index env', () => {\n  const fetcher = jest.fn();\n  const notify = jest.fn();\n  const isCancel = jest.fn(() => false);\n  const store = RendererStore.create({}, {\n    fetcher,\n    notify,\n    isCancel\n  });\n  expect(store.fetcher).toBe(fetcher);\n  expect(store.notify).toBe(notify);\n  expect(store.isCancel).toBe(isCancel);\n});","file":"stores/index.test.ts","skipped":false,"dir":"__tests__"},{"name":"api:buildApi","suites":[],"updatePoint":{"line":5,"column":18,"index":250},"line":5,"code":"test('api:buildApi', () => {\n  expect(buildApi('/api/xxx')).toMatchObject({\n    method: 'get',\n    url: '/api/xxx'\n  });\n  expect(buildApi('get:/api/xxx')).toMatchObject({\n    method: 'get',\n    url: '/api/xxx'\n  });\n  expect(buildApi('delete:/api/xxx')).toMatchObject({\n    method: 'delete',\n    url: '/api/xxx'\n  });\n  expect(buildApi('/api/xxx?a=${a}&b=${b}', {\n    a: 1,\n    b: 2\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx?a=1&b=2'\n  });\n  expect(buildApi({\n    method: 'get',\n    url: '/api/xxx?a=${a}&b=${b}'\n  }, {\n    a: 1,\n    b: 2\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx?a=1&b=2'\n  });\n  expect(buildApi('/api/xxx?a=${a}', {\n    a: '&'\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx?a=' + encodeURIComponent('&')\n  });\n  expect(buildApi('/api/xxx?a=${a}', {\n    a: [1, 2, 3]\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx?a[0]=1&a[1]=2&a[2]=3'\n  });\n  expect(buildApi('/api/xxx/${x === \"a\" ? \"A\" : \"B\"}?a=${a}', {\n    x: 'a',\n    a: [1, 2, 3]\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx/A?a[0]=1&a[1]=2&a[2]=3'\n  });\n  expect(buildApi('/api/xxx/${x === \"a\" ? \"A\" : \"B\"}?a=${a}', {\n    x: 'b',\n    a: [1, 2, 3]\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx/B?a[0]=1&a[1]=2&a[2]=3'\n  });\n  expect(buildApi('/api/xxx/${x === \"a\" ? \"A\" : \"B\"}?a=${a}#a=1&b=2', {\n    x: 'b',\n    a: [1, 2, 3]\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx/B?a[0]=1&a[1]=2&a[2]=3#a=1&b=2'\n  });\n  expect(buildApi('/api/xxx/${x === \"a\" ? \"A\" : \"B\"}?a=${a}&b=${x == \"a\" ? \"A\" : \"B\"}', {\n    x: 'b',\n    a: [1, 2, 3]\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx/B?a[0]=1&a[1]=2&a[2]=3&b=B'\n  });\n  expect(buildApi('/api/xxx/${x === \"a\" ? \"A\" : \"B\"}', {\n    x: 'b',\n    a: [1, 2, 3]\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx/B'\n  });\n});","file":"utils/api.test.ts","skipped":false,"dir":"__tests__"},{"name":"api:buildApi2","suites":[],"updatePoint":{"line":83,"column":19,"index":2111},"line":83,"code":"test('api:buildApi2', () => {\n  expect(buildApi('http://domain.com/#/subpath?a=1&b=2', {\n    a: 1\n  }).url).toBe('http://domain.com/#/subpath?a=1&b=2');\n  expect(buildApi('http://domain.com/subpath?a=1&b=2#233', {\n    a: 1\n  }).url).toBe('http://domain.com/subpath?a=1&b=2#233');\n  expect(buildApi('http://domain.com/subpath?a=1&b=${a}#233', {\n    a: 1\n  }).url).toBe('http://domain.com/subpath?a=1&b=1#233');\n});","file":"utils/api.test.ts","skipped":false,"dir":"__tests__"},{"name":"api:buildApi:dataMapping","suites":[],"updatePoint":{"line":94,"column":30,"index":2536},"line":94,"code":"test('api:buildApi:dataMapping', () => {\n  expect(buildApi({\n    method: 'post',\n    url: '/api/xxx',\n    data: {\n      a: 1,\n      b: '${b}'\n    }\n  }, {\n    b: 2\n  })).toMatchObject({\n    method: 'post',\n    url: '/api/xxx',\n    data: {\n      a: 1,\n      b: 2\n    }\n  });\n  expect(buildApi({\n    method: 'post',\n    url: '/api/xxx',\n    headers: {\n      a: 1,\n      b: '${b}'\n    }\n  }, {\n    b: 2\n  })).toMatchObject({\n    method: 'post',\n    url: '/api/xxx',\n    headers: {\n      a: 1,\n      b: 2\n    }\n  });\n});","file":"utils/api.test.ts","skipped":false,"dir":"__tests__"},{"name":"api:buildApi:autoAppend","suites":[],"updatePoint":{"line":130,"column":29,"index":3052},"line":130,"code":"test('api:buildApi:autoAppend', () => {\n  expect(buildApi({\n    method: 'get',\n    url: '/api/xxx'\n  }, {\n    a: 1,\n    b: 2\n  }, {\n    autoAppend: true\n  })).toMatchObject({\n    method: 'get',\n    url: '/api/xxx?a=1&b=2'\n  });\n});","file":"utils/api.test.ts","skipped":false,"dir":"__tests__"},{"name":"api:isApiOutdated","suites":[],"updatePoint":{"line":144,"column":23,"index":3278},"line":144,"code":"test('api:isApiOutdated', () => {\n  expect(isApiOutdated('/api/xxx?a=${a}', '/api/xxx?a=${a}', {\n    a: 1,\n    b: 0\n  }, {\n    a: 1,\n    b: 2\n  })).toBeFalsy();\n  expect(isApiOutdated('/api/xxx?a=${a}', '/api/xxx?a=${a}', {\n    a: 1,\n    b: 0\n  }, {\n    a: 2,\n    b: 2\n  })).toBeTruthy();\n  expect(isApiOutdated('/api/xxx', '/api/xxx', {\n    a: 1,\n    b: 0\n  }, {\n    a: 2,\n    b: 2\n  })).toBeFalsy();\n  expect(isApiOutdated({\n    method: 'get',\n    url: '/api/xxx?a=${a}'\n  }, {\n    method: 'get',\n    url: '/api/xxx?a=${a}',\n    sendOn: 'this.b === 0'\n  }, {\n    a: 1,\n    b: 0\n  }, {\n    a: 2,\n    b: 2\n  })).toBeFalsy();\n});","file":"utils/api.test.ts","skipped":false,"dir":"__tests__"},{"name":"api:cache","suites":[],"updatePoint":{"line":181,"column":15,"index":3899},"line":181,"code":"test('api:cache', async () => {\n  let count = 1;\n  const fetcher = jest.fn().mockImplementation(() => Promise.resolve({\n    data: {\n      status: 0,\n      msg: 'ok',\n      data: {\n        a: count++\n      }\n    }\n  }));\n  const {\n    container,\n    getByText\n  } = render(amisRender({\n    type: 'page',\n    name: 'thepage',\n    initApi: {\n      method: 'get',\n      url: '/api/xxx?id=${id}',\n      cache: 2000\n    },\n    toolbar: {\n      type: 'button',\n      label: 'Reload',\n      actionType: 'reload',\n      target: 'thepage'\n    },\n    body: 'The variable value is ${a}'\n  }, {}, makeEnv({\n    fetcher\n  })));\n  await wait(300);\n  expect(container).toMatchSnapshot();\n  fireEvent.click(getByText(/Reload/));\n  await wait(300);\n  expect(fetcher).toHaveBeenCalledTimes(1); // 只请求一次，第二次请求从缓存中取\n\n  expect(container).toMatchSnapshot();\n});","file":"utils/api.test.ts","skipped":false,"dir":"__tests__"},{"name":"filter:customFilter","suites":[],"updatePoint":{"line":2,"column":25,"index":96},"line":2,"code":"test('filter:customFilter', () => {\n  registerFilter('customFilter', input => `233`);\n  expect(resolveVariableAndFilter('${a | customFilter}', {\n    a: 'abc'\n  })).toEqual('233');\n});","file":"utils/filter.test.ts","skipped":false,"dir":"__tests__"},{"name":"style var background","suites":[],"updatePoint":{"line":5,"column":26,"index":187},"line":5,"code":"test('style var background', () => {\n  expect(buildStyle('${style}', {\n    style: {\n      backgroundImage: 'http://www.example.com/a.png'\n    }\n  })).toEqual({\n    backgroundImage: 'url(\"http://www.example.com/a.png\")'\n  });\n  expect(buildStyle({\n    backgroundImage: 'http://www.example.com/a.png'\n  }, {})).toEqual({\n    backgroundImage: 'url(\"http://www.example.com/a.png\")'\n  });\n});","file":"utils/style.test.ts","skipped":false,"dir":"__tests__"},{"name":"style case","suites":[],"updatePoint":{"line":19,"column":16,"index":565},"line":19,"code":"test('style case', () => {\n  expect(buildStyle({\n    'font-size': '10'\n  }, {})).toEqual({\n    fontSize: '10'\n  });\n});","file":"utils/style.test.ts","skipped":false,"dir":"__tests__"},{"name":"tpl-builtin:resolveVariableAndFilter:","suites":[],"updatePoint":{"line":408,"column":54,"index":6538},"line":408,"code":"  test(`tpl-builtin:resolveVariableAndFilter:${f.type}`, () => {\n    expect(resolveVariableAndFilter(f.path, f.data, f.filter)).toEqual(f.expectValue);\n  });","file":"utils/tpl-builtin.test.ts","skipped":false,"dir":"__tests__"},{"name":"tpl-builtin:dataMapping","suites":[],"updatePoint":{"line":412,"column":29,"index":6675},"line":412,"code":"test('tpl-builtin:dataMapping', () => {\n  const data = {\n    a: 1,\n    b: '2',\n    c: {\n      '1': 'first',\n      '2': 'second'\n    }\n  };\n  expect(dataMapping({\n    '&': '$$'\n  }, data)).toEqual({\n    a: 1,\n    b: '2',\n    c: {\n      '1': 'first',\n      '2': 'second'\n    }\n  });\n  expect(dataMapping({\n    '&': '${b}'\n  }, data)).toEqual('2');\n  expect(dataMapping({\n    '&': data => ({\n      b: data.b\n    })\n  }, data)).toEqual({\n    b: '2'\n  });\n  expect(dataMapping({\n    all: '$$'\n  }, data)).toEqual({\n    all: {\n      a: 1,\n      b: '2',\n      c: {\n        '1': 'first',\n        '2': 'second'\n      }\n    }\n  });\n  expect(dataMapping({\n    a: '${a}',\n    b: '__undefined'\n  }, data)).toEqual({\n    a: 1\n  });\n  expect(dataMapping({\n    value: {\n      a: '${a}',\n      d: 'd'\n    }\n  }, data)).toEqual({\n    value: {\n      a: 1,\n      d: 'd'\n    }\n  });\n  expect(dataMapping({\n    value: [{\n      a: '${a}',\n      d: 'd'\n    }, {\n      b: '${b}',\n      d: 'd'\n    }]\n  }, data)).toEqual({\n    value: [{\n      a: 1,\n      d: 'd'\n    }, {\n      b: '2',\n      d: 'd'\n    }]\n  });\n  expect(dataMapping({\n    value: '${a}'\n  }, data)).toEqual({\n    value: 1\n  });\n  expect(dataMapping({\n    value: data => data.a\n  }, data)).toEqual({\n    value: 1\n  });\n  const data2 = {\n    rows: [{\n      label: 'A',\n      value: 'a',\n      size: 'sm'\n    }, {\n      label: 'B',\n      value: 'b',\n      size: 'md'\n    }, {\n      label: 'C',\n      value: 'c',\n      size: 'sm'\n    }]\n  };\n  expect(dataMapping({\n    items: {\n      $rows: {\n        label: '$label',\n        value: '$value'\n      }\n    }\n  }, data2)).toEqual({\n    items: [{\n      label: 'A',\n      value: 'a'\n    }, {\n      label: 'B',\n      value: 'b'\n    }, {\n      label: 'C',\n      value: 'c'\n    }]\n  });\n});","file":"utils/tpl-builtin.test.ts","skipped":false,"dir":"__tests__"},{"name":"filter","suites":[],"updatePoint":{"line":4,"column":12,"index":134},"line":4,"code":"test('filter', () => {\n  expect(filter('xxx_a=${a}&b=${b}', {\n    a: 1,\n    b: 2\n  })).toEqual('xxx_a=1&b=2');\n  expect(filter('xxx_a=<%= data.a%>&b=<%= data.b%>', {\n    a: 1,\n    b: 2\n  })).toEqual('xxx_a=1&b=2');\n});","file":"utils/tpl.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isRequired valid","suites":[],"updatePoint":{"line":2,"column":33,"index":101},"line":2,"code":"test('validation:isRequired valid', () => {\n  expect(validate('somestring', {}, {\n    isRequired: true\n  }, {\n    isRequired: 'This is required!'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isRequired invalid","suites":[],"updatePoint":{"line":9,"column":35,"index":278},"line":9,"code":"test('validation:isRequired invalid', () => {\n  expect(validate('', {}, {\n    isRequired: true\n  }, {\n    isRequired: 'This is required!'\n  })).toMatchObject([{\n    msg: 'This is required!',\n    rule: 'isRequired'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isEmail valid","suites":[],"updatePoint":{"line":19,"column":30,"index":498},"line":19,"code":"test('validation:isEmail valid', () => {\n  expect(validate('abc@gmail.com', {}, {\n    isEmail: true\n  }, {\n    isEmail: 'Email 格式不正确'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isEmail invalid","suites":[],"updatePoint":{"line":26,"column":32,"index":663},"line":26,"code":"test('validation:isEmail invalid', () => {\n  expect(validate('somestring', {}, {\n    isEmail: true\n  }, {\n    isEmail: 'Email 格式不正确'\n  })).toMatchObject([{\n    msg: 'Email 格式不正确',\n    rule: 'isEmail'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isUrl valid","suites":[],"updatePoint":{"line":36,"column":28,"index":870},"line":36,"code":"test('validation:isUrl valid', () => {\n  expect(validate('http://www.baidu.com', {}, {\n    isUrl: true\n  }, {\n    isUrl: 'Url 格式不正确'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isUrl invalid","suites":[],"updatePoint":{"line":43,"column":30,"index":1034},"line":43,"code":"test('validation:isUrl invalid', () => {\n  expect(validate('somestring', {}, {\n    isUrl: true\n  }, {\n    isUrl: 'Url 格式不正确'\n  })).toMatchObject([{\n    msg: 'Url 格式不正确',\n    rule: 'isUrl'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isInt valid","suites":[],"updatePoint":{"line":53,"column":28,"index":1231},"line":53,"code":"test('validation:isInt valid', () => {\n  expect(validate(1, {}, {\n    isInt: true\n  }, {\n    isInt: '请输入整型数字'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isInt invalid","suites":[],"updatePoint":{"line":60,"column":30,"index":1372},"line":60,"code":"test('validation:isInt invalid', () => {\n  expect(validate(1.1, {}, {\n    isInt: true\n  }, {\n    isInt: '请输入整型数字'\n  })).toMatchObject([{\n    rule: 'isInt',\n    msg: '请输入整型数字'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isAlpha valid","suites":[],"updatePoint":{"line":70,"column":30,"index":1558},"line":70,"code":"test('validation:isAlpha valid', () => {\n  expect(validate('a', {}, {\n    isAlpha: true\n  }, {\n    isAlpha: '请输入字母'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isAlpha invalid","suites":[],"updatePoint":{"line":77,"column":32,"index":1705},"line":77,"code":"test('validation:isAlpha invalid', () => {\n  expect(validate('%', {}, {\n    isAlpha: true\n  }, {\n    isAlpha: '请输入字母'\n  })).toMatchObject([{\n    rule: 'isAlpha',\n    msg: '请输入字母'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isNumeric valid","suites":[],"updatePoint":{"line":87,"column":32,"index":1895},"line":87,"code":"test('validation:isNumeric valid', () => {\n  expect(validate(1.1, {}, {\n    isNumeric: true\n  }, {\n    isNumeric: '请输入数字'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isNumeric invalid","suites":[],"updatePoint":{"line":94,"column":34,"index":2048},"line":94,"code":"test('validation:isNumeric invalid', () => {\n  expect(validate('a', {}, {\n    isNumeric: true\n  }, {\n    isNumeric: '请输入数字'\n  })).toMatchObject([{\n    rule: 'isNumeric',\n    msg: '请输入数字'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isAlphanumeric Alpha valid","suites":[],"updatePoint":{"line":104,"column":43,"index":2255},"line":104,"code":"test('validation:isAlphanumeric Alpha valid', () => {\n  expect(validate('a', {}, {\n    isAlphanumeric: true\n  }, {\n    isAlphanumeric: '请输入数字'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isAlphanumeric numeric valid","suites":[],"updatePoint":{"line":111,"column":45,"index":2429},"line":111,"code":"test('validation:isAlphanumeric numeric valid', () => {\n  expect(validate(1, {}, {\n    isAlphanumeric: true\n  }, {\n    isAlphanumeric: '请输入字母或者数字'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isAlphanumeric invalid","suites":[],"updatePoint":{"line":118,"column":39,"index":2599},"line":118,"code":"test('validation:isAlphanumeric invalid', () => {\n  expect(validate('%', {}, {\n    isAlphanumeric: true\n  }, {\n    isAlphanumeric: '请输入字母或者数字'\n  })).toMatchObject([{\n    rule: 'isAlphanumeric',\n    msg: '请输入字母或者数字'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isFloat valid","suites":[],"updatePoint":{"line":128,"column":30,"index":2816},"line":128,"code":"test('validation:isFloat valid', () => {\n  expect(validate(1.1, {}, {\n    isFloat: true\n  }, {\n    isFloat: '请输入浮点型数值'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isFloat invalid","suites":[],"updatePoint":{"line":135,"column":32,"index":2966},"line":135,"code":"test('validation:isFloat invalid', () => {\n  expect(validate('a', {}, {\n    isFloat: true\n  }, {\n    isFloat: '请输入浮点型数值'\n  })).toMatchObject([{\n    rule: 'isFloat',\n    msg: '请输入浮点型数值'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isWords valid","suites":[],"updatePoint":{"line":145,"column":30,"index":3160},"line":145,"code":"test('validation:isWords valid', () => {\n  expect(validate('baidu', {}, {\n    isWords: true\n  }, {\n    isWords: '请输入字母'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isWords invalid","suites":[],"updatePoint":{"line":152,"column":32,"index":3311},"line":152,"code":"test('validation:isWords invalid', () => {\n  expect(validate('%', {}, {\n    isWords: true\n  }, {\n    isWords: '请输入字母'\n  })).toMatchObject([{\n    rule: 'isWords',\n    msg: '请输入字母'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isUrlPath valid","suites":[],"updatePoint":{"line":162,"column":32,"index":3501},"line":162,"code":"test('validation:isUrlPath valid', () => {\n  expect(validate('baidu-fex_team', {}, {\n    isUrlPath: true\n  }, {\n    isUrlPath: '只能输入字母、数字、`-` 和 `_`'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isUrlPath invalid","suites":[],"updatePoint":{"line":169,"column":34,"index":3681},"line":169,"code":"test('validation:isUrlPath invalid', () => {\n  expect(validate('baidu&fex%team', {}, {\n    isUrlPath: true\n  }, {\n    isUrlPath: '只能输入字母、数字、`-` 和 `_`'\n  })).toMatchObject([{\n    rule: 'isUrlPath',\n    msg: '只能输入字母、数字、`-` 和 `_`'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:minLength valid","suites":[],"updatePoint":{"line":179,"column":32,"index":3918},"line":179,"code":"test('validation:minLength valid', () => {\n  expect(validate('abcdef', {}, {\n    minLength: 5\n  }, {\n    minLength: '请至少输入 5 个字符。'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:minLength invalid","suites":[],"updatePoint":{"line":186,"column":34,"index":4080},"line":186,"code":"test('validation:minLength invalid', () => {\n  expect(validate('abcd', {}, {\n    minLength: 5\n  }, {\n    minLength: '至少输入 5 个字符。'\n  })).toMatchObject([{\n    rule: 'minLength',\n    msg: '至少输入 5 个字符。'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:maxLength valid","suites":[],"updatePoint":{"line":196,"column":32,"index":4288},"line":196,"code":"test('validation:maxLength valid', () => {\n  expect(validate('abcde', {}, {\n    maxLength: 5\n  }, {\n    maxLength: '请不要输入 5 个字符以上'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:maxLength invalid","suites":[],"updatePoint":{"line":203,"column":34,"index":4450},"line":203,"code":"test('validation:maxLength invalid', () => {\n  expect(validate('abcded', {}, {\n    maxLength: 5\n  }, {\n    maxLength: '请不要输入 5 个字符以上'\n  })).toMatchObject([{\n    rule: 'maxLength',\n    msg: '请不要输入 5 个字符以上'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:minimum valid","suites":[],"updatePoint":{"line":213,"column":30,"index":4662},"line":213,"code":"test('validation:minimum valid', () => {\n  expect(validate(6, {}, {\n    minimum: 5\n  }, {\n    minimum: '当前输入值低于最小值 5，请检查'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:minimum invalid","suites":[],"updatePoint":{"line":220,"column":32,"index":4815},"line":220,"code":"test('validation:minimum invalid', () => {\n  expect(validate(4, {}, {\n    minimum: 5\n  }, {\n    minimum: '当前输入值低于最小值 5，请检查'\n  })).toMatchObject([{\n    rule: 'minimum',\n    msg: '当前输入值低于最小值 5，请检查'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:maximum valid","suites":[],"updatePoint":{"line":230,"column":30,"index":5020},"line":230,"code":"test('validation:maximum valid', () => {\n  expect(validate(5, {}, {\n    maximum: 5\n  }, {\n    maximum: '当前输入值超出最大值 5，请检查'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:maximum invalid","suites":[],"updatePoint":{"line":237,"column":32,"index":5173},"line":237,"code":"test('validation:maximum invalid', () => {\n  expect(validate(6, {}, {\n    maximum: 5\n  }, {\n    maximum: '当前输入值超出最大值 5，请检查'\n  })).toMatchObject([{\n    rule: 'maximum',\n    msg: '当前输入值超出最大值 5，请检查'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isJson valid","suites":[],"updatePoint":{"line":247,"column":29,"index":5377},"line":247,"code":"test('validation:isJson valid', () => {\n  expect(validate('{ \"type\": \"select\", \"options\": [ { \"label\": \"A\", \"value\": \"a\" } ] }', {}, {\n    isJson: true\n  }, {\n    isJson: '请检查 Json 格式'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isJson invalid","suites":[],"updatePoint":{"line":254,"column":31,"index":5593},"line":254,"code":"test('validation:isJson invalid', () => {\n  expect(validate('string', {}, {\n    isJson: true\n  }, {\n    isJson: '请检查 Json 格式'\n  })).toMatchObject([{\n    rule: 'isJson',\n    msg: '请检查 Json 格式'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isJson invalid","suites":[],"updatePoint":{"line":264,"column":31,"index":5796},"line":264,"code":"test('validation:isJson invalid', () => {\n  expect(validate('12345', {}, {\n    isJson: true\n  }, {\n    isJson: '请检查 Json 格式'\n  })).toMatchObject([{\n    rule: 'isJson',\n    msg: '请检查 Json 格式'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isLength valid","suites":[],"updatePoint":{"line":274,"column":31,"index":5998},"line":274,"code":"test('validation:isLength valid', () => {\n  expect(validate('abcde', {}, {\n    isLength: 5\n  }, {\n    isLength: '请输入长度为 5 的内容'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:isLength invalid","suites":[],"updatePoint":{"line":281,"column":33,"index":6156},"line":281,"code":"test('validation:isLength invalid', () => {\n  expect(validate('abc', {}, {\n    isLength: 5\n  }, {\n    isLength: '请输入长度为 5 的内容'\n  })).toMatchObject([{\n    rule: 'isLength',\n    msg: '请输入长度为 5 的内容'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:notEmptyString valid","suites":[],"updatePoint":{"line":291,"column":37,"index":6367},"line":291,"code":"test('validation:notEmptyString valid', () => {\n  expect(validate('abc', {}, {\n    notEmptyString: true\n  }, {\n    notEmptyString: '请不要全输入空白字符'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:notEmptyString invalid","suites":[],"updatePoint":{"line":298,"column":39,"index":6542},"line":298,"code":"test('validation:notEmptyString invalid', () => {\n  expect(validate('  ', {}, {\n    notEmptyString: true\n  }, {\n    notEmptyString: '请不要全输入空白字符'\n  })).toMatchObject([{\n    rule: 'notEmptyString',\n    msg: '请不要全输入空白字符'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:equalsField valid","suites":[],"updatePoint":{"line":308,"column":34,"index":6766},"line":308,"code":"test('validation:equalsField valid', () => {\n  expect(validate('a', {\n    a: 'a'\n  }, {\n    equalsField: 'a'\n  }, {\n    equalsField: '输入的数据与 a 值不一致'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:equalsField invalid","suites":[],"updatePoint":{"line":317,"column":36,"index":6946},"line":317,"code":"test('validation:equalsField invalid', () => {\n  expect(validate('b', {\n    a: 'a'\n  }, {\n    equalsField: 'a'\n  }, {\n    equalsField: '输入的数据与 a 值不一致'\n  })).toMatchObject([{\n    rule: 'equalsField',\n    msg: '输入的数据与 a 值不一致'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:equals valid","suites":[],"updatePoint":{"line":329,"column":29,"index":7174},"line":329,"code":"test('validation:equals valid', () => {\n  expect(validate('a', {}, {\n    equals: 'a'\n  }, {\n    equals: '输入的数据与 a 不一致'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:equals invalid","suites":[],"updatePoint":{"line":336,"column":31,"index":7324},"line":336,"code":"test('validation:equals invalid', () => {\n  expect(validate('b', {}, {\n    equals: 'a'\n  }, {\n    equals: '输入的数据与 a 不一致'\n  })).toMatchObject([{\n    rule: 'equals',\n    msg: '输入的数据与 a 不一致'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:multipleRules invalid","suites":[],"updatePoint":{"line":346,"column":38,"index":7530},"line":346,"code":"test('validation:multipleRules invalid', () => {\n  expect(validate('abc', {}, {\n    isUrl: true,\n    isInt: true\n  })).toMatchObject([{\n    rule: 'isUrl',\n    msg: 'validate.isUrl'\n  }, {\n    rule: 'isInt',\n    msg: 'validate.isInt'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:matchRegexp valid","suites":[],"updatePoint":{"line":358,"column":34,"index":7770},"line":358,"code":"test('validation:matchRegexp valid', () => {\n  expect(validate('abcd', {}, {\n    matchRegexp: '/^abc/'\n  }, {\n    matchRegexp: '请输入abc开头的好么'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:matchRegexp invalid","suites":[],"updatePoint":{"line":365,"column":36,"index":7942},"line":365,"code":"test('validation:matchRegexp invalid', () => {\n  expect(validate('cba', {}, {\n    matchRegexp: '/^abc/'\n  }, {\n    matchRegexp: '请输入abc开头的好么'\n  })).toMatchObject([{\n    rule: 'matchRegexp',\n    msg: '请输入abc开头的好么'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:matchRegexp:noSlash valid","suites":[],"updatePoint":{"line":375,"column":42,"index":8172},"line":375,"code":"test('validation:matchRegexp:noSlash valid', () => {\n  expect(validate('abcd', {}, {\n    matchRegexp: '^abc'\n  }, {\n    matchRegexp: '请输入abc开头的好么'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:matchRegexp:noSlash invalid","suites":[],"updatePoint":{"line":382,"column":44,"index":8350},"line":382,"code":"test('validation:matchRegexp:noSlash invalid', () => {\n  expect(validate('cba', {}, {\n    matchRegexp: '^abc'\n  }, {\n    matchRegexp: '请输入abc开头的好么'\n  })).toMatchObject([{\n    rule: 'matchRegexp',\n    msg: '请输入abc开头的好么'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:multipleMatchRegexp valid","suites":[],"updatePoint":{"line":392,"column":42,"index":8578},"line":392,"code":"test('validation:multipleMatchRegexp valid', () => {\n  expect(validate('abcd123', {}, {\n    matchRegexp1: '/^abc/',\n    matchRegexp2: '/123$/'\n  }, {\n    matchRegexp1: '请输入abc开头的好么',\n    matchRegexp2: '请输入123结尾的好么'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:multipleMatchRegexp invalid","suites":[],"updatePoint":{"line":401,"column":44,"index":8824},"line":401,"code":"test('validation:multipleMatchRegexp invalid', () => {\n  expect(validate('cba', {}, {\n    matchRegexp1: '/^abc/',\n    matchRegexp2: '/123$/'\n  }, {\n    matchRegexp1: '请输入abc开头的好么',\n    matchRegexp2: '请输入123结尾的好么'\n  })).toMatchObject([{\n    rule: 'matchRegexp1',\n    msg: '请输入abc开头的好么'\n  }, {\n    rule: 'matchRegexp2',\n    msg: '请输入123结尾的好么'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:multipleMatchRegexp:noSlash valid","suites":[],"updatePoint":{"line":416,"column":50,"index":9182},"line":416,"code":"test('validation:multipleMatchRegexp:noSlash valid', () => {\n  expect(validate('abcd123', {}, {\n    matchRegexp1: '^abc',\n    matchRegexp2: '123$'\n  }, {\n    matchRegexp1: '请输入abc开头的好么',\n    matchRegexp2: '请输入123结尾的好么'\n  })).toMatchObject([]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:multipleMatchRegexp:noSlash invalid","suites":[],"updatePoint":{"line":425,"column":52,"index":9432},"line":425,"code":"test('validation:multipleMatchRegexp:noSlash invalid', () => {\n  expect(validate('cba', {}, {\n    matchRegexp1: '^abc',\n    matchRegexp2: '123$'\n  }, {\n    matchRegexp1: '请输入abc开头的好么',\n    matchRegexp2: '请输入123结尾的好么'\n  })).toMatchObject([{\n    rule: 'matchRegexp1',\n    msg: '请输入abc开头的好么'\n  }, {\n    rule: 'matchRegexp2',\n    msg: '请输入123结尾的好么'\n  }]);\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:str2rules","suites":[],"updatePoint":{"line":440,"column":26,"index":9762},"line":440,"code":"test('validation:str2rules', () => {\n  expect(str2rules('matchRegexp:/^abc/')).toMatchObject({\n    matchRegexp: ['/^abc/']\n  });\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:multiplestr2rules","suites":[],"updatePoint":{"line":445,"column":34,"index":9903},"line":445,"code":"test('validation:multiplestr2rules', () => {\n  expect(str2rules('matchRegexp1:/^abc/,matchRegexp2:/123$/')).toMatchObject({\n    matchRegexp1: ['/^abc/'],\n    matchRegexp2: ['/123$/']\n  });\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:str2rules:noSlash","suites":[],"updatePoint":{"line":451,"column":34,"index":10096},"line":451,"code":"test('validation:str2rules:noSlash', () => {\n  expect(str2rules('matchRegexp:^abc')).toMatchObject({\n    matchRegexp: ['^abc']\n  });\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"},{"name":"validation:multiplestr2rules:noSlash","suites":[],"updatePoint":{"line":456,"column":42,"index":10241},"line":456,"code":"test('validation:multiplestr2rules:noSlash', () => {\n  expect(str2rules('matchRegexp1:^abc,matchRegexp2:123$')).toMatchObject({\n    matchRegexp1: ['^abc'],\n    matchRegexp2: ['123$']\n  });\n});","file":"utils/validations.test.ts","skipped":false,"dir":"__tests__"}]}