{
    "repo": "facebook/react",
    "url": "https://github.com/facebook/react",
    "branch": "main",
    "configs": [
        {
            "package": "create-subscription",
            "lang": "js",
            "dir": "packages/create-subscription/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "dom-event-testing-library",
            "lang": "js",
            "dir": "packages/dom-event-testing-library/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "eslint-plugin-react-hooks",
            "lang": "js",
            "dir": "packages/eslint-plugin-react-hooks/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-art",
            "lang": "js",
            "dir": "packages/react-art/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-cache",
            "lang": "js",
            "dir": "packages/react-cache/src/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "react-client",
            "lang": "js",
            "dir": "packages/react-client/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-debug-tools",
            "lang": "js",
            "dir": "packages/react-debug-tools/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-devtools-inline",
            "lang": "js",
            "dir": "packages/react-devtools-inline/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-devtools-shared",
            "lang": "js",
            "dir": "packages/react-devtools-shared/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-dom",
            "lang": "js",
            "dir": "packages/react-dom/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-fetch",
            "lang": "js",
            "dir": "packages/react-fetch/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-is",
            "lang": "js",
            "dir": "packages/react-is/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-native-renderer",
            "lang": "js",
            "dir": "packages/react-native-renderer/src/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "react-reconciler",
            "lang": "js",
            "dir": "packages/react-reconciler/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-refresh",
            "lang": "js",
            "dir": "packages/react-refresh/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-server-dom-relay",
            "lang": "js",
            "dir": "packages/react-server-dom-relay/src/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "react-server-dom-webpack",
            "lang": "js",
            "dir": "packages/react-server-dom-webpack/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-server-native-relay",
            "lang": "js",
            "dir": "packages/react-server-native-relay/src/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "react-server",
            "lang": "js",
            "dir": "packages/react-server/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-test-renderer",
            "lang": "js",
            "dir": "packages/react-test-renderer/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react",
            "lang": "ts",
            "dir": "packages/react/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "scheduler",
            "lang": "js",
            "dir": "packages/scheduler/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "shared",
            "lang": "js",
            "dir": "packages/shared/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "use-subscription",
            "lang": "js",
            "dir": "packages/use-subscription/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "use-sync-external-store",
            "lang": "js",
            "dir": "packages/use-sync-external-store/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "eslint-plugin-react-internal",
            "lang": "js",
            "dir": "scripts/eslint-rules/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "provides boolean to tests",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 33,
                "index": 538
            },
            "line": 19,
            "code": "  test('provides boolean to tests', () => {\n    expect(pointerEvent).toMatchSnapshot();\n  });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "returns expected API",
            "suites": [
                "createEventTarget"
            ],
            "updatePoint": {
                "line": 39,
                "column": 28,
                "index": 961
            },
            "line": 39,
            "code": "  test('returns expected API', () => {\n    const target = createEventTarget(node);\n    expect(target.node).toEqual(node);\n    expect(Object.keys(target)).toMatchInlineSnapshot(`\n      [\n        \"node\",\n        \"blur\",\n        \"click\",\n        \"focus\",\n        \"keydown\",\n        \"keyup\",\n        \"scroll\",\n        \"virtualclick\",\n        \"contextmenu\",\n        \"pointercancel\",\n        \"pointerdown\",\n        \"pointerhover\",\n        \"pointermove\",\n        \"pointerenter\",\n        \"pointerexit\",\n        \"pointerup\",\n        \"tap\",\n        \"setBoundingClientRect\",\n      ]\n    `);\n  });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "default",
            "suites": [
                "createEventTarget",
                ".blur()"
            ],
            "updatePoint": {
                "line": 71,
                "column": 17,
                "index": 1599
            },
            "line": 71,
            "code": "    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('blur', e => {\n        expect(e.relatedTarget).toMatchInlineSnapshot(`null`);\n      });\n      target.blur();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "custom payload",
            "suites": [
                "createEventTarget",
                ".blur()"
            ],
            "updatePoint": {
                "line": 78,
                "column": 24,
                "index": 1825
            },
            "line": 78,
            "code": "    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('blur', e => {\n        expect(e.relatedTarget).toMatchInlineSnapshot(`null`);\n      });\n      target.blur();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "default",
            "suites": [
                "createEventTarget",
                ".click()"
            ],
            "updatePoint": {
                "line": 87,
                "column": 17,
                "index": 2081
            },
            "line": 87,
            "code": "    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('click', e => {\n        expect(e.altKey).toEqual(false);\n        expect(e.button).toEqual(0);\n        expect(e.buttons).toEqual(0);\n        expect(e.clientX).toEqual(0);\n        expect(e.clientY).toEqual(0);\n        expect(e.ctrlKey).toEqual(false);\n        expect(e.detail).toEqual(1);\n        expect(typeof e.getModifierState).toEqual('function');\n        expect(e.metaKey).toEqual(false);\n        expect(e.movementX).toEqual(0);\n        expect(e.movementY).toEqual(0);\n        expect(e.offsetX).toEqual(0);\n        expect(e.offsetY).toEqual(0);\n        expect(e.pageX).toEqual(0);\n        expect(e.pageY).toEqual(0);\n        expect(typeof e.preventDefault).toEqual('function');\n        expect(e.screenX).toEqual(0);\n        expect(e.screenY).toEqual(defaultBrowserChromeSize);\n        expect(e.shiftKey).toEqual(false);\n        expect(typeof e.timeStamp).toEqual('number');\n      });\n      target.click();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "custom payload",
            "suites": [
                "createEventTarget",
                ".click()"
            ],
            "updatePoint": {
                "line": 113,
                "column": 24,
                "index": 3107
            },
            "line": 113,
            "code": "    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('click', e => {\n        expect(e.altKey).toEqual(true);\n        expect(e.button).toEqual(1);\n        expect(e.buttons).toEqual(4);\n        expect(e.clientX).toEqual(10);\n        expect(e.clientY).toEqual(20);\n        expect(e.ctrlKey).toEqual(true);\n        expect(e.metaKey).toEqual(true);\n        expect(e.movementX).toEqual(1);\n        expect(e.movementY).toEqual(2);\n        expect(e.offsetX).toEqual(5);\n        expect(e.offsetY).toEqual(5);\n        expect(e.pageX).toEqual(50);\n        expect(e.pageY).toEqual(50);\n        expect(e.screenX).toEqual(10);\n        expect(e.screenY).toEqual(20 + defaultBrowserChromeSize);\n        expect(e.shiftKey).toEqual(true);\n      });\n      target.click({\n        altKey: true,\n        button: 1,\n        buttons: 4,\n        x: 10,\n        y: 20,\n        ctrlKey: true,\n        metaKey: true,\n        movementX: 1,\n        movementY: 2,\n        offsetX: 5,\n        offsetY: 5,\n        pageX: 50,\n        pageY: 50,\n        shiftKey: true\n      });\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "default",
            "suites": [
                "createEventTarget",
                ".focus()"
            ],
            "updatePoint": {
                "line": 152,
                "column": 17,
                "index": 4245
            },
            "line": 152,
            "code": "    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('focus', e => {\n        expect(e.relatedTarget).toMatchInlineSnapshot(`null`);\n      });\n      target.blur();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "custom payload",
            "suites": [
                "createEventTarget",
                ".focus()"
            ],
            "updatePoint": {
                "line": 159,
                "column": 24,
                "index": 4472
            },
            "line": 159,
            "code": "    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('focus', e => {\n        expect(e.relatedTarget).toMatchInlineSnapshot(`null`);\n      });\n      target.blur();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "default",
            "suites": [
                "createEventTarget",
                ".keydown()"
            ],
            "updatePoint": {
                "line": 168,
                "column": 17,
                "index": 4731
            },
            "line": 168,
            "code": "    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('keydown', e => {\n        expect(e.altKey).toEqual(false);\n        expect(e.ctrlKey).toEqual(false);\n        expect(typeof e.getModifierState).toEqual('function');\n        expect(e.key).toEqual('');\n        expect(e.metaKey).toEqual(false);\n        expect(typeof e.preventDefault).toEqual('function');\n        expect(e.shiftKey).toEqual(false);\n        expect(typeof e.timeStamp).toEqual('number');\n      });\n      target.keydown();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "custom payload",
            "suites": [
                "createEventTarget",
                ".keydown()"
            ],
            "updatePoint": {
                "line": 182,
                "column": 24,
                "index": 5281
            },
            "line": 182,
            "code": "    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('keydown', e => {\n        expect(e.altKey).toEqual(true);\n        expect(e.ctrlKey).toEqual(true);\n        expect(e.isComposing).toEqual(true);\n        expect(e.key).toEqual('Enter');\n        expect(e.metaKey).toEqual(true);\n        expect(e.shiftKey).toEqual(true);\n      });\n      target.keydown({\n        altKey: true,\n        ctrlKey: true,\n        isComposing: true,\n        key: 'Enter',\n        metaKey: true,\n        shiftKey: true\n      });\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "default",
            "suites": [
                "createEventTarget",
                ".keyup()"
            ],
            "updatePoint": {
                "line": 203,
                "column": 17,
                "index": 5878
            },
            "line": 203,
            "code": "    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('keyup', e => {\n        expect(e.altKey).toEqual(false);\n        expect(e.ctrlKey).toEqual(false);\n        expect(typeof e.getModifierState).toEqual('function');\n        expect(e.key).toEqual('');\n        expect(e.metaKey).toEqual(false);\n        expect(typeof e.preventDefault).toEqual('function');\n        expect(e.shiftKey).toEqual(false);\n        expect(typeof e.timeStamp).toEqual('number');\n      });\n      target.keydown();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "custom payload",
            "suites": [
                "createEventTarget",
                ".keyup()"
            ],
            "updatePoint": {
                "line": 217,
                "column": 24,
                "index": 6426
            },
            "line": 217,
            "code": "    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('keyup', e => {\n        expect(e.altKey).toEqual(true);\n        expect(e.ctrlKey).toEqual(true);\n        expect(e.isComposing).toEqual(true);\n        expect(e.key).toEqual('Enter');\n        expect(e.metaKey).toEqual(true);\n        expect(e.shiftKey).toEqual(true);\n      });\n      target.keyup({\n        altKey: true,\n        ctrlKey: true,\n        isComposing: true,\n        key: 'Enter',\n        metaKey: true,\n        shiftKey: true\n      });\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "default",
            "suites": [
                "createEventTarget",
                ".scroll()"
            ],
            "updatePoint": {
                "line": 238,
                "column": 17,
                "index": 7020
            },
            "line": 238,
            "code": "    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('scroll', e => {\n        expect(e.type).toEqual('scroll');\n      });\n      target.scroll();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "default",
            "suites": [
                "createEventTarget",
                ".virtualclick()"
            ],
            "updatePoint": {
                "line": 247,
                "column": 17,
                "index": 7266
            },
            "line": 247,
            "code": "    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('click', e => {\n        expect(e.altKey).toEqual(false);\n        expect(e.button).toEqual(0);\n        expect(e.buttons).toEqual(0);\n        expect(e.clientX).toEqual(0);\n        expect(e.clientY).toEqual(0);\n        expect(e.ctrlKey).toEqual(false);\n        expect(e.detail).toEqual(0);\n        expect(typeof e.getModifierState).toEqual('function');\n        expect(e.metaKey).toEqual(false);\n        expect(e.movementX).toEqual(0);\n        expect(e.movementY).toEqual(0);\n        expect(e.offsetX).toEqual(0);\n        expect(e.offsetY).toEqual(0);\n        expect(e.pageX).toEqual(0);\n        expect(e.pageY).toEqual(0);\n        expect(typeof e.preventDefault).toEqual('function');\n        expect(e.screenX).toEqual(0);\n        expect(e.screenY).toEqual(0);\n        expect(e.shiftKey).toEqual(false);\n        expect(typeof e.timeStamp).toEqual('number');\n      });\n      target.virtualclick();\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "custom payload",
            "suites": [
                "createEventTarget",
                ".virtualclick()"
            ],
            "updatePoint": {
                "line": 273,
                "column": 24,
                "index": 8276
            },
            "line": 273,
            "code": "    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('click', e => {\n        // expect most of the custom payload to be ignored\n        expect(e.altKey).toEqual(true);\n        expect(e.button).toEqual(1);\n        expect(e.buttons).toEqual(0);\n        expect(e.clientX).toEqual(0);\n        expect(e.clientY).toEqual(0);\n        expect(e.ctrlKey).toEqual(true);\n        expect(e.detail).toEqual(0);\n        expect(e.metaKey).toEqual(true);\n        expect(e.pageX).toEqual(0);\n        expect(e.pageY).toEqual(0);\n        expect(e.screenX).toEqual(0);\n        expect(e.screenY).toEqual(0);\n        expect(e.shiftKey).toEqual(true);\n      });\n      target.virtualclick({\n        altKey: true,\n        button: 1,\n        buttons: 4,\n        x: 10,\n        y: 20,\n        ctrlKey: true,\n        metaKey: true,\n        pageX: 50,\n        pageY: 50,\n        shiftKey: true\n      });\n    });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": ".setBoundingClientRect()",
            "suites": [
                "createEventTarget",
                ".virtualclick()"
            ],
            "updatePoint": {
                "line": 316,
                "column": 32,
                "index": 9325
            },
            "line": 316,
            "code": "  test('.setBoundingClientRect()', () => {\n    const target = createEventTarget(node);\n    expect(node.getBoundingClientRect()).toMatchInlineSnapshot(`\n      {\n        \"bottom\": 0,\n        \"height\": 0,\n        \"left\": 0,\n        \"right\": 0,\n        \"top\": 0,\n        \"width\": 0,\n        \"x\": 0,\n        \"y\": 0,\n      }\n    `);\n    target.setBoundingClientRect({\n      x: 10,\n      y: 20,\n      width: 100,\n      height: 200\n    });\n    expect(node.getBoundingClientRect()).toMatchInlineSnapshot(`\n      {\n        \"bottom\": 220,\n        \"height\": 200,\n        \"left\": 10,\n        \"right\": 110,\n        \"top\": 20,\n        \"width\": 100,\n      }\n    `);\n  });",
            "file": "index-test.internal.js",
            "skipped": false,
            "dir": "packages/dom-event-testing-library/__tests__"
        },
        {
            "name": "should have the correct lifecycle state",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 110,
                "column": 45,
                "index": 3459
            },
            "line": 110,
            "code": "  it('should have the correct lifecycle state', () => {\n    let instance = /*#__PURE__*/React.createElement(TestComponent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    const group = instance.group.current;\n    // Duck type test for an ART group\n    expect(typeof group.indicate).toBe('function');\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should render a reasonable SVG structure in SVG mode",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 117,
                "column": 58,
                "index": 3801
            },
            "line": 117,
            "code": "  it('should render a reasonable SVG structure in SVG mode', () => {\n    let instance = /*#__PURE__*/React.createElement(TestComponent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    const expectedStructure = {\n      nodeName: 'svg',\n      width: '150',\n      height: '200',\n      children: [{\n        nodeName: 'defs'\n      }, {\n        nodeName: 'g',\n        children: [{\n          nodeName: 'defs',\n          children: [{\n            nodeName: 'linearGradient'\n          }]\n        }, {\n          nodeName: 'path'\n        }, {\n          nodeName: 'path'\n        }, {\n          nodeName: 'g'\n        }]\n      }]\n    };\n    const realNode = ReactDOM.findDOMNode(instance);\n    testDOMNodeStructure(realNode, expectedStructure);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should be able to reorder components",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 145,
                "column": 42,
                "index": 4544
            },
            "line": 145,
            "code": "  it('should be able to reorder components', () => {\n    const instance = ReactDOM.render( /*#__PURE__*/React.createElement(TestComponent, {\n      flipped: false\n    }), container);\n    const expectedStructure = {\n      nodeName: 'svg',\n      children: [{\n        nodeName: 'defs'\n      }, {\n        nodeName: 'g',\n        children: [{\n          nodeName: 'defs'\n        }, {\n          nodeName: 'path',\n          opacity: '0.1'\n        }, {\n          nodeName: 'path',\n          opacity: Missing\n        }, {\n          nodeName: 'g'\n        }]\n      }]\n    };\n    const realNode = ReactDOM.findDOMNode(instance);\n    testDOMNodeStructure(realNode, expectedStructure);\n    ReactDOM.render( /*#__PURE__*/React.createElement(TestComponent, {\n      flipped: true\n    }), container);\n    const expectedNewStructure = {\n      nodeName: 'svg',\n      children: [{\n        nodeName: 'defs'\n      }, {\n        nodeName: 'g',\n        children: [{\n          nodeName: 'defs'\n        }, {\n          nodeName: 'path',\n          opacity: Missing\n        }, {\n          nodeName: 'path',\n          opacity: '0.1'\n        }, {\n          nodeName: 'g'\n        }]\n      }]\n    };\n    testDOMNodeStructure(realNode, expectedNewStructure);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should be able to reorder many components",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 194,
                "column": 47,
                "index": 5775
            },
            "line": 194,
            "code": "  it('should be able to reorder many components', () => {\n    class Component extends React.Component {\n      render() {\n        const chars = this.props.chars.split('');\n        return /*#__PURE__*/React.createElement(Surface, null, chars.map(text => /*#__PURE__*/React.createElement(Shape, {\n          key: text,\n          title: text\n        })));\n      }\n    }\n\n    // Mini multi-child stress test: lots of reorders, some adds, some removes.\n    const before = 'abcdefghijklmnopqrst';\n    const after = 'mxhpgwfralkeoivcstzy';\n    let instance = ReactDOM.render( /*#__PURE__*/React.createElement(Component, {\n      chars: before\n    }), container);\n    const realNode = ReactDOM.findDOMNode(instance);\n    expect(realNode.textContent).toBe(before);\n    instance = ReactDOM.render( /*#__PURE__*/React.createElement(Component, {\n      chars: after\n    }), container);\n    expect(realNode.textContent).toBe(after);\n    ReactDOM.unmountComponentAtNode(container);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "renders composite with lifecycle inside group",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 219,
                "column": 51,
                "index": 6749
            },
            "line": 219,
            "code": "  it('renders composite with lifecycle inside group', () => {\n    let mounted = false;\n    class CustomShape extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(Shape, null);\n      }\n      componentDidMount() {\n        mounted = true;\n      }\n    }\n    ReactTestUtils.renderIntoDocument( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Group, null, /*#__PURE__*/React.createElement(CustomShape, null))));\n    expect(mounted).toBe(true);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "resolves refs before componentDidMount",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 232,
                "column": 44,
                "index": 7257
            },
            "line": 232,
            "code": "  it('resolves refs before componentDidMount', () => {\n    class CustomShape extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(Shape, null);\n      }\n    }\n    let ref = null;\n    class Outer extends React.Component {\n      test = /*#__PURE__*/React.createRef();\n      componentDidMount() {\n        ref = this.test.current;\n      }\n      render() {\n        return /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Group, null, /*#__PURE__*/React.createElement(CustomShape, {\n          ref: this.test\n        })));\n      }\n    }\n    ReactTestUtils.renderIntoDocument( /*#__PURE__*/React.createElement(Outer, null));\n    expect(ref.constructor).toBe(CustomShape);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "resolves refs before componentDidUpdate",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 253,
                "column": 45,
                "index": 7997
            },
            "line": 253,
            "code": "  it('resolves refs before componentDidUpdate', () => {\n    class CustomShape extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(Shape, null);\n      }\n    }\n    let ref = {};\n    class Outer extends React.Component {\n      test = /*#__PURE__*/React.createRef();\n      componentDidMount() {\n        ref = this.test.current;\n      }\n      componentDidUpdate() {\n        ref = this.test.current;\n      }\n      render() {\n        return /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Group, null, this.props.mountCustomShape && /*#__PURE__*/React.createElement(CustomShape, {\n          ref: this.test\n        })));\n      }\n    }\n    ReactDOM.render( /*#__PURE__*/React.createElement(Outer, null), container);\n    expect(ref).toBe(null);\n    ReactDOM.render( /*#__PURE__*/React.createElement(Outer, {\n      mountCustomShape: true\n    }), container);\n    expect(ref.constructor).toBe(CustomShape);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "adds and updates event handlers",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 281,
                "column": 37,
                "index": 8961
            },
            "line": 281,
            "code": "  it('adds and updates event handlers', () => {\n    function render(onClick) {\n      return ReactDOM.render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Shape, {\n        onClick: onClick\n      })), container);\n    }\n    function doClick(instance) {\n      const path = ReactDOM.findDOMNode(instance).querySelector('path');\n      path.dispatchEvent(new MouseEvent('click', {\n        bubbles: true\n      }));\n    }\n    const onClick1 = jest.fn();\n    let instance = render(onClick1);\n    doClick(instance);\n    expect(onClick1).toBeCalled();\n    const onClick2 = jest.fn();\n    instance = render(onClick2);\n    doClick(instance);\n    expect(onClick2).toBeCalled();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "can concurrently render with a \"primary\" renderer while sharing context",
            "suites": [
                "ReactART"
            ],
            "updatePoint": {
                "line": 304,
                "column": 77,
                "index": 9744
            },
            "line": 304,
            "code": "  it('can concurrently render with a \"primary\" renderer while sharing context', () => {\n    const CurrentRendererContext = /*#__PURE__*/React.createContext(null);\n    function Yield(props) {\n      Scheduler.unstable_yieldValue(props.value);\n      return null;\n    }\n    let ops = [];\n    function LogCurrentRenderer() {\n      return /*#__PURE__*/React.createElement(CurrentRendererContext.Consumer, null, currentRenderer => {\n        ops.push(currentRenderer);\n        return null;\n      });\n    }\n\n    // Using test renderer instead of the DOM renderer here because async\n    // testing APIs for the DOM renderer don't exist.\n    ReactNoop.render( /*#__PURE__*/React.createElement(CurrentRendererContext.Provider, {\n      value: \"Test\"\n    }, /*#__PURE__*/React.createElement(Yield, {\n      value: \"A\"\n    }), /*#__PURE__*/React.createElement(Yield, {\n      value: \"B\"\n    }), /*#__PURE__*/React.createElement(LogCurrentRenderer, null), /*#__PURE__*/React.createElement(Yield, {\n      value: \"C\"\n    })));\n    expect(Scheduler).toFlushAndYieldThrough(['A']);\n    ReactDOM.render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(LogCurrentRenderer, null), /*#__PURE__*/React.createElement(CurrentRendererContext.Provider, {\n      value: \"ART\"\n    }, /*#__PURE__*/React.createElement(LogCurrentRenderer, null))), container);\n    expect(ops).toEqual([null, 'ART']);\n    ops = [];\n    expect(Scheduler).toFlushAndYield(['B', 'C']);\n    expect(ops).toEqual(['Test']);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with props for drawing the Circle",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 340,
                "column": 65,
                "index": 11278
            },
            "line": 340,
            "code": "  it('should generate a <Shape> with props for drawing the Circle', () => {\n    const circle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Circle, {\n      radius: 10,\n      stroke: \"green\",\n      strokeWidth: 3,\n      fill: \"blue\"\n    }));\n    expect(circle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should warn if radius is missing on a Circle component",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 349,
                "column": 60,
                "index": 11581
            },
            "line": 349,
            "code": "  it('should warn if radius is missing on a Circle component', () => {\n    expect(() => ReactTestRenderer.create( /*#__PURE__*/React.createElement(Circle, {\n      stroke: \"green\",\n      strokeWidth: 3,\n      fill: \"blue\"\n    }))).toErrorDev('Warning: Failed prop type: The prop `radius` is marked as required in `Circle`, ' + 'but its value is `undefined`.' + '\\n    in Circle (at **)');\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with props for drawing the Rectangle",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 356,
                "column": 68,
                "index": 11983
            },
            "line": 356,
            "code": "  it('should generate a <Shape> with props for drawing the Rectangle', () => {\n    const rectangle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      width: 50,\n      height: 50,\n      stroke: \"green\",\n      fill: \"blue\"\n    }));\n    expect(rectangle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with positive width when width prop is negative",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 365,
                "column": 79,
                "index": 12309
            },
            "line": 365,
            "code": "  it('should generate a <Shape> with positive width when width prop is negative', () => {\n    const rectangle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      width: -50,\n      height: 50\n    }));\n    expect(rectangle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with positive height when height prop is negative",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 372,
                "column": 81,
                "index": 12595
            },
            "line": 372,
            "code": "  it('should generate a <Shape> with positive height when height prop is negative', () => {\n    const rectangle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      height: -50,\n      width: 50\n    }));\n    expect(rectangle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with a radius property of 0 when top left radius prop is negative",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 379,
                "column": 97,
                "index": 12897
            },
            "line": 379,
            "code": "  it('should generate a <Shape> with a radius property of 0 when top left radius prop is negative', () => {\n    const rectangle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      radiusTopLeft: -25,\n      width: 50,\n      height: 50\n    }));\n    expect(rectangle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with a radius property of 0 when top right radius prop is negative",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 387,
                "column": 98,
                "index": 13225
            },
            "line": 387,
            "code": "  it('should generate a <Shape> with a radius property of 0 when top right radius prop is negative', () => {\n    const rectangle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      radiusTopRight: -25,\n      width: 50,\n      height: 50\n    }));\n    expect(rectangle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with a radius property of 0 when bottom right radius prop is negative",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 395,
                "column": 101,
                "index": 13557
            },
            "line": 395,
            "code": "  it('should generate a <Shape> with a radius property of 0 when bottom right radius prop is negative', () => {\n    const rectangle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      radiusBottomRight: -30,\n      width: 50,\n      height: 50\n    }));\n    expect(rectangle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with a radius property of 0 when bottom left radius prop is negative",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 403,
                "column": 100,
                "index": 13891
            },
            "line": 403,
            "code": "  it('should generate a <Shape> with a radius property of 0 when bottom left radius prop is negative', () => {\n    const rectangle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      radiusBottomLeft: -25,\n      width: 50,\n      height: 50\n    }));\n    expect(rectangle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> where top radius is 0 if the sum of the top radius is greater than width",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 411,
                "column": 104,
                "index": 14228
            },
            "line": 411,
            "code": "  it('should generate a <Shape> where top radius is 0 if the sum of the top radius is greater than width', () => {\n    const rectangle = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      radiusTopRight: 25,\n      radiusTopLeft: 26,\n      width: 50,\n      height: 40\n    }));\n    expect(rectangle.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should warn if width/height is missing on a Rectangle component",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 420,
                "column": 69,
                "index": 14552
            },
            "line": 420,
            "code": "  it('should warn if width/height is missing on a Rectangle component', () => {\n    expect(() => ReactTestRenderer.create( /*#__PURE__*/React.createElement(Rectangle, {\n      stroke: \"green\",\n      fill: \"blue\"\n    }))).toErrorDev(['Warning: Failed prop type: The prop `width` is marked as required in `Rectangle`, ' + 'but its value is `undefined`.' + '\\n    in Rectangle (at **)', 'Warning: Failed prop type: The prop `height` is marked as required in `Rectangle`, ' + 'but its value is `undefined`.' + '\\n    in Rectangle (at **)']);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should generate a <Shape> with props for drawing the Wedge",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 426,
                "column": 64,
                "index": 15090
            },
            "line": 426,
            "code": "  it('should generate a <Shape> with props for drawing the Wedge', () => {\n    const wedge = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Wedge, {\n      outerRadius: 50,\n      startAngle: 0,\n      endAngle: 360,\n      fill: \"blue\"\n    }));\n    expect(wedge.toJSON()).toMatchSnapshot();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should return null if startAngle equals to endAngle on Wedge",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 435,
                "column": 66,
                "index": 15398
            },
            "line": 435,
            "code": "  it('should return null if startAngle equals to endAngle on Wedge', () => {\n    const wedge = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Wedge, {\n      outerRadius: 50,\n      startAngle: 0,\n      endAngle: 0,\n      fill: \"blue\"\n    }));\n    expect(wedge.toJSON()).toBeNull();\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "should warn if outerRadius/startAngle/endAngle is missing on a Wedge component",
            "suites": [
                "ReactARTComponents"
            ],
            "updatePoint": {
                "line": 444,
                "column": 84,
                "index": 15715
            },
            "line": 444,
            "code": "  it('should warn if outerRadius/startAngle/endAngle is missing on a Wedge component', () => {\n    expect(() => ReactTestRenderer.create( /*#__PURE__*/React.createElement(Wedge, {\n      fill: \"blue\"\n    }))).toErrorDev(['Warning: Failed prop type: The prop `outerRadius` is marked as required in `Wedge`, ' + 'but its value is `undefined`.' + '\\n    in Wedge (at **)', 'Warning: Failed prop type: The prop `startAngle` is marked as required in `Wedge`, ' + 'but its value is `undefined`.' + '\\n    in Wedge (at **)', 'Warning: Failed prop type: The prop `endAngle` is marked as required in `Wedge`, ' + 'but its value is `undefined`.' + '\\n    in Wedge (at **)']);\n  });",
            "file": "ReactART-test.js",
            "skipped": false,
            "dir": "packages/react-art/src/__tests__"
        },
        {
            "name": "throws a promise if the requested value is not in the cache",
            "suites": [
                "ReactCache"
            ],
            "updatePoint": {
                "line": 102,
                "column": 65,
                "index": 3075
            },
            "line": 102,
            "code": "  it('throws a promise if the requested value is not in the cache', () => {\n    function App() {\n      return /*#__PURE__*/React.createElement(Suspense, {\n        fallback: /*#__PURE__*/React.createElement(Text, {\n          text: \"Loading...\"\n        })\n      }, /*#__PURE__*/React.createElement(AsyncText, {\n        ms: 100,\n        text: \"Hi\"\n      }));\n    }\n    ReactTestRenderer.create( /*#__PURE__*/React.createElement(App, null), {\n      unstable_isConcurrent: true\n    });\n    expect(Scheduler).toFlushAndYield(['Suspend! [Hi]', 'Loading...']);\n    jest.advanceTimersByTime(100);\n    expect(Scheduler).toHaveYielded(['Promise resolved [Hi]']);\n    expect(Scheduler).toFlushAndYield(['Hi']);\n  });",
            "file": "ReactCacheOld-test.internal.js",
            "skipped": false,
            "dir": "packages/react-cache/src/__tests__"
        },
        {
            "name": "throws an error on the subsequent read if the promise is rejected",
            "suites": [
                "ReactCache"
            ],
            "updatePoint": {
                "line": 121,
                "column": 71,
                "index": 3786
            },
            "line": 121,
            "code": "  it('throws an error on the subsequent read if the promise is rejected', async () => {\n    function App() {\n      return /*#__PURE__*/React.createElement(Suspense, {\n        fallback: /*#__PURE__*/React.createElement(Text, {\n          text: \"Loading...\"\n        })\n      }, /*#__PURE__*/React.createElement(AsyncText, {\n        ms: 100,\n        text: \"Hi\"\n      }));\n    }\n    const root = ReactTestRenderer.create( /*#__PURE__*/React.createElement(App, null), {\n      unstable_isConcurrent: true\n    });\n    expect(Scheduler).toFlushAndYield(['Suspend! [Hi]', 'Loading...']);\n    textResourceShouldFail = true;\n    jest.advanceTimersByTime(100);\n    expect(Scheduler).toHaveYielded(['Promise rejected [Hi]']);\n    expect(Scheduler).toFlushAndThrow('Failed to load: Hi');\n    expect(Scheduler).toHaveYielded(['Error! [Hi]', 'Error! [Hi]']);\n\n    // Should throw again on a subsequent read\n    root.update( /*#__PURE__*/React.createElement(App, null));\n    expect(Scheduler).toFlushAndThrow('Failed to load: Hi');\n    expect(Scheduler).toHaveYielded(['Error! [Hi]', 'Error! [Hi]']);\n  });",
            "file": "ReactCacheOld-test.internal.js",
            "skipped": false,
            "dir": "packages/react-cache/src/__tests__"
        },
        {
            "name": "warns if non-primitive key is passed to a resource without a hash function",
            "suites": [
                "ReactCache"
            ],
            "updatePoint": {
                "line": 147,
                "column": 80,
                "index": 4884
            },
            "line": 147,
            "code": "  it('warns if non-primitive key is passed to a resource without a hash function', () => {\n    const BadTextResource = createResource(([text, ms = 0]) => {\n      return new Promise((resolve, reject) => setTimeout(() => {\n        resolve(text);\n      }, ms));\n    });\n    function App() {\n      Scheduler.unstable_yieldValue('App');\n      return BadTextResource.read(['Hi', 100]);\n    }\n    ReactTestRenderer.create( /*#__PURE__*/React.createElement(Suspense, {\n      fallback: /*#__PURE__*/React.createElement(Text, {\n        text: \"Loading...\"\n      })\n    }, /*#__PURE__*/React.createElement(App, null)), {\n      unstable_isConcurrent: true\n    });\n    if (__DEV__) {\n      expect(() => {\n        expect(Scheduler).toFlushAndYield(['App', 'Loading...']);\n      }).toErrorDev(['Invalid key type. Expected a string, number, symbol, or ' + 'boolean, but instead received: Hi,100\\n\\n' + 'To use non-primitive values as keys, you must pass a hash ' + 'function as the second argument to createResource().']);\n    } else {\n      expect(Scheduler).toFlushAndYield(['App', 'Loading...']);\n    }\n  });",
            "file": "ReactCacheOld-test.internal.js",
            "skipped": false,
            "dir": "packages/react-cache/src/__tests__"
        },
        {
            "name": "evicts least recently used values",
            "suites": [
                "ReactCache"
            ],
            "updatePoint": {
                "line": 172,
                "column": 39,
                "index": 5938
            },
            "line": 172,
            "code": "  it('evicts least recently used values', async () => {\n    ReactCache.unstable_setGlobalCacheLimit(3);\n\n    // Render 1, 2, and 3\n    const root = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Suspense, {\n      fallback: /*#__PURE__*/React.createElement(Text, {\n        text: \"Loading...\"\n      })\n    }, /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 1\n    }), /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 2\n    }), /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 3\n    })), {\n      unstable_isConcurrent: true\n    });\n    expect(Scheduler).toFlushAndYield(['Suspend! [1]', 'Suspend! [2]', 'Suspend! [3]', 'Loading...']);\n    jest.advanceTimersByTime(100);\n    expect(Scheduler).toHaveYielded(['Promise resolved [1]', 'Promise resolved [2]', 'Promise resolved [3]']);\n    expect(Scheduler).toFlushAndYield([1, 2, 3]);\n    expect(root).toMatchRenderedOutput('123');\n\n    // Render 1, 4, 5\n    root.update( /*#__PURE__*/React.createElement(Suspense, {\n      fallback: /*#__PURE__*/React.createElement(Text, {\n        text: \"Loading...\"\n      })\n    }, /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 1\n    }), /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 4\n    }), /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 5\n    })));\n    expect(Scheduler).toFlushAndYield([1, 'Suspend! [4]', 'Suspend! [5]', 'Loading...']);\n    jest.advanceTimersByTime(100);\n    expect(Scheduler).toHaveYielded(['Promise resolved [4]', 'Promise resolved [5]']);\n    expect(Scheduler).toFlushAndYield([1, 4, 5]);\n    expect(root).toMatchRenderedOutput('145');\n\n    // We've now rendered values 1, 2, 3, 4, 5, over our limit of 3. The least\n    // recently used values are 2 and 3. They should have been evicted.\n\n    root.update( /*#__PURE__*/React.createElement(Suspense, {\n      fallback: /*#__PURE__*/React.createElement(Text, {\n        text: \"Loading...\"\n      })\n    }, /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 1\n    }), /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 2\n    }), /*#__PURE__*/React.createElement(AsyncText, {\n      ms: 100,\n      text: 3\n    })));\n    expect(Scheduler).toFlushAndYield([\n    // 1 is still cached\n    1,\n    // 2 and 3 suspend because they were evicted from the cache\n    'Suspend! [2]', 'Suspend! [3]', 'Loading...']);\n    jest.advanceTimersByTime(100);\n    expect(Scheduler).toHaveYielded(['Promise resolved [2]', 'Promise resolved [3]']);\n    expect(Scheduler).toFlushAndYield([1, 2, 3]);\n    expect(root).toMatchRenderedOutput('123');\n  });",
            "file": "ReactCacheOld-test.internal.js",
            "skipped": false,
            "dir": "packages/react-cache/src/__tests__"
        },
        {
            "name": "preloads during the render phase",
            "suites": [
                "ReactCache"
            ],
            "updatePoint": {
                "line": 246,
                "column": 38,
                "index": 8620
            },
            "line": 246,
            "code": "  it('preloads during the render phase', async () => {\n    function App() {\n      TextResource.preload(['B', 1000]);\n      TextResource.read(['A', 1000]);\n      TextResource.read(['B', 1000]);\n      return /*#__PURE__*/React.createElement(Text, {\n        text: \"Result\"\n      });\n    }\n    const root = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Suspense, {\n      fallback: /*#__PURE__*/React.createElement(Text, {\n        text: \"Loading...\"\n      })\n    }, /*#__PURE__*/React.createElement(App, null)), {\n      unstable_isConcurrent: true\n    });\n    expect(Scheduler).toFlushAndYield(['Loading...']);\n    jest.advanceTimersByTime(1000);\n    expect(Scheduler).toHaveYielded(['Promise resolved [B]', 'Promise resolved [A]']);\n    expect(Scheduler).toFlushAndYield(['Result']);\n    expect(root).toMatchRenderedOutput('Result');\n  });",
            "file": "ReactCacheOld-test.internal.js",
            "skipped": false,
            "dir": "packages/react-cache/src/__tests__"
        },
        {
            "name": "if a thenable resolves multiple times, does not update the first cached value",
            "suites": [
                "ReactCache"
            ],
            "updatePoint": {
                "line": 268,
                "column": 83,
                "index": 9514
            },
            "line": 268,
            "code": "  it('if a thenable resolves multiple times, does not update the first cached value', () => {\n    let resolveThenable;\n    const BadTextResource = createResource(([text, ms = 0]) => {\n      let listeners = null;\n      const value = null;\n      return {\n        then(resolve, reject) {\n          if (value !== null) {\n            resolve(value);\n          } else {\n            if (listeners === null) {\n              listeners = [resolve];\n              resolveThenable = v => {\n                listeners.forEach(listener => listener(v));\n              };\n            } else {\n              listeners.push(resolve);\n            }\n          }\n        }\n      };\n    }, ([text, ms]) => text);\n    function BadAsyncText(props) {\n      const text = props.text;\n      try {\n        const actualText = BadTextResource.read([props.text, props.ms]);\n        Scheduler.unstable_yieldValue(actualText);\n        return actualText;\n      } catch (promise) {\n        if (typeof promise.then === 'function') {\n          Scheduler.unstable_yieldValue(`Suspend! [${text}]`);\n        } else {\n          Scheduler.unstable_yieldValue(`Error! [${text}]`);\n        }\n        throw promise;\n      }\n    }\n    const root = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Suspense, {\n      fallback: /*#__PURE__*/React.createElement(Text, {\n        text: \"Loading...\"\n      })\n    }, /*#__PURE__*/React.createElement(BadAsyncText, {\n      text: \"Hi\"\n    })), {\n      unstable_isConcurrent: true\n    });\n    expect(Scheduler).toFlushAndYield(['Suspend! [Hi]', 'Loading...']);\n    resolveThenable('Hi');\n    // This thenable improperly resolves twice. We should not update the\n    // cached value.\n    resolveThenable('Hi muahahaha I am different');\n    root.update( /*#__PURE__*/React.createElement(Suspense, {\n      fallback: /*#__PURE__*/React.createElement(Text, {\n        text: \"Loading...\"\n      })\n    }, /*#__PURE__*/React.createElement(BadAsyncText, {\n      text: \"Hi\"\n    })), {\n      unstable_isConcurrent: true\n    });\n    expect(Scheduler).toHaveYielded([]);\n    expect(Scheduler).toFlushAndYield(['Hi']);\n    expect(root).toMatchRenderedOutput('Hi');\n  });",
            "file": "ReactCacheOld-test.internal.js",
            "skipped": false,
            "dir": "packages/react-cache/src/__tests__"
        },
        {
            "name": "throws if read is called outside render",
            "suites": [
                "ReactCache"
            ],
            "updatePoint": {
                "line": 332,
                "column": 45,
                "index": 11632
            },
            "line": 332,
            "code": "  it('throws if read is called outside render', () => {\n    expect(() => TextResource.read(['A', 1000])).toThrow(\"read and preload may only be called from within a component's render\");\n  });",
            "file": "ReactCacheOld-test.internal.js",
            "skipped": false,
            "dir": "packages/react-cache/src/__tests__"
        },
        {
            "name": "throws if preload is called outside render",
            "suites": [
                "ReactCache"
            ],
            "updatePoint": {
                "line": 335,
                "column": 48,
                "index": 11827
            },
            "line": 335,
            "code": "  it('throws if preload is called outside render', () => {\n    expect(() => TextResource.preload(['A', 1000])).toThrow(\"read and preload may only be called from within a component's render\");\n  });",
            "file": "ReactCacheOld-test.internal.js",
            "skipped": false,
            "dir": "packages/react-cache/src/__tests__"
        },
        {
            "name": "can render a Server Component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 102,
                "column": 35,
                "index": 3029
            },
            "line": 102,
            "code": "  it('can render a Server Component', async () => {\n    function Bar({\n      text\n    }) {\n      return text.toUpperCase();\n    }\n    function Foo() {\n      return {\n        bar: /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Bar, {\n          text: \"a\"\n        }), \", \", /*#__PURE__*/React.createElement(Bar, {\n          text: \"b\"\n        }))\n      };\n    }\n    const transport = ReactNoopFlightServer.render({\n      foo: /*#__PURE__*/React.createElement(Foo, null)\n    });\n    const model = await ReactNoopFlightClient.read(transport);\n    expect(model).toEqual({\n      foo: {\n        bar: /*#__PURE__*/React.createElement(\"div\", null, 'A', ', ', 'B')\n      }\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "can render a Client Component using a module reference and render there",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 127,
                "column": 77,
                "index": 3778
            },
            "line": 127,
            "code": "  it('can render a Client Component using a module reference and render there', async () => {\n    function UserClient(props) {\n      return /*#__PURE__*/React.createElement(\"span\", null, props.greeting, \", \", props.name);\n    }\n    const User = clientReference(UserClient);\n    function Greeting({\n      firstName,\n      lastName\n    }) {\n      return /*#__PURE__*/React.createElement(User, {\n        greeting: \"Hello\",\n        name: firstName + ' ' + lastName\n      });\n    }\n    const model = {\n      greeting: /*#__PURE__*/React.createElement(Greeting, {\n        firstName: \"Seb\",\n        lastName: \"Smith\"\n      })\n    };\n    const transport = ReactNoopFlightServer.render(model);\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      const greeting = rootModel.greeting;\n      ReactNoop.render(greeting);\n    });\n    expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"span\", null, \"Hello, Seb Smith\"));\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "can render a lazy component as a shared component on the server",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 155,
                "column": 69,
                "index": 4757
            },
            "line": 155,
            "code": "  it('can render a lazy component as a shared component on the server', async () => {\n    function SharedComponent({\n      text\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, \"shared\", /*#__PURE__*/React.createElement(\"span\", null, text));\n    }\n    let load = null;\n    const loadSharedComponent = () => {\n      return new Promise(res => {\n        load = () => res({\n          default: SharedComponent\n        });\n      });\n    };\n    const LazySharedComponent = React.lazy(loadSharedComponent);\n    function ServerComponent() {\n      return /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: 'Loading...'\n      }, /*#__PURE__*/React.createElement(LazySharedComponent, {\n        text: 'a'\n      }));\n    }\n    const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(ServerComponent, null));\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      ReactNoop.render(rootModel);\n    });\n    expect(ReactNoop).toMatchRenderedOutput('Loading...');\n    await load();\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      ReactNoop.render(rootModel);\n    });\n    expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"div\", null, \"shared\", /*#__PURE__*/React.createElement(\"span\", null, \"a\")));\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "errors on a Lazy element being used in Component position",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 190,
                "column": 63,
                "index": 6126
            },
            "line": 190,
            "code": "  it('errors on a Lazy element being used in Component position', async () => {\n    function SharedComponent({\n      text\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, \"shared\", /*#__PURE__*/React.createElement(\"span\", null, text));\n    }\n    let load = null;\n    const LazyElementDisguisedAsComponent = React.lazy(() => {\n      return new Promise(res => {\n        load = () => res({\n          default: /*#__PURE__*/React.createElement(SharedComponent, {\n            text: 'a'\n          })\n        });\n      });\n    });\n    function ServerComponent() {\n      return /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: 'Loading...'\n      }, /*#__PURE__*/React.createElement(LazyElementDisguisedAsComponent, {\n        text: 'b'\n      }));\n    }\n    const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(ServerComponent, null));\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      ReactNoop.render(rootModel);\n    });\n    expect(ReactNoop).toMatchRenderedOutput('Loading...');\n    spyOnDevAndProd(console, 'error').mockImplementation(() => {});\n    await load();\n    expect(console.error).toHaveBeenCalledTimes(1);\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "can render a lazy element",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 223,
                "column": 31,
                "index": 7329
            },
            "line": 223,
            "code": "  it('can render a lazy element', async () => {\n    function SharedComponent({\n      text\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, \"shared\", /*#__PURE__*/React.createElement(\"span\", null, text));\n    }\n    let load = null;\n    const lazySharedElement = React.lazy(() => {\n      return new Promise(res => {\n        load = () => res({\n          default: /*#__PURE__*/React.createElement(SharedComponent, {\n            text: 'a'\n          })\n        });\n      });\n    });\n    function ServerComponent() {\n      return /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: 'Loading...'\n      }, lazySharedElement);\n    }\n    const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(ServerComponent, null));\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      ReactNoop.render(rootModel);\n    });\n    expect(ReactNoop).toMatchRenderedOutput('Loading...');\n    await load();\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      ReactNoop.render(rootModel);\n    });\n    expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"div\", null, \"shared\", /*#__PURE__*/React.createElement(\"span\", null, \"a\")));\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "errors with lazy value in element position that resolves to Component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 257,
                "column": 75,
                "index": 8661
            },
            "line": 257,
            "code": "  it('errors with lazy value in element position that resolves to Component', async () => {\n    function SharedComponent({\n      text\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, \"shared\", /*#__PURE__*/React.createElement(\"span\", null, text));\n    }\n    let load = null;\n    const componentDisguisedAsElement = React.lazy(() => {\n      return new Promise(res => {\n        load = () => res({\n          default: SharedComponent\n        });\n      });\n    });\n    function ServerComponent() {\n      return /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: 'Loading...'\n      }, componentDisguisedAsElement);\n    }\n    const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(ServerComponent, null));\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      ReactNoop.render(rootModel);\n    });\n    expect(ReactNoop).toMatchRenderedOutput('Loading...');\n    spyOnDevAndProd(console, 'error').mockImplementation(() => {});\n    await load();\n    expect(console.error).toHaveBeenCalledTimes(1);\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "can render a lazy module reference",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 286,
                "column": 40,
                "index": 9731
            },
            "line": 286,
            "code": "  it('can render a lazy module reference', async () => {\n    function ClientComponent() {\n      return /*#__PURE__*/React.createElement(\"div\", null, \"I am client\");\n    }\n    const ClientComponentReference = clientReference(ClientComponent);\n    let load = null;\n    const loadClientComponentReference = () => {\n      return new Promise(res => {\n        load = () => res({\n          default: ClientComponentReference\n        });\n      });\n    };\n    const LazyClientComponentReference = React.lazy(loadClientComponentReference);\n    function ServerComponent() {\n      return /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: 'Loading...'\n      }, /*#__PURE__*/React.createElement(LazyClientComponentReference, null));\n    }\n    const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(ServerComponent, null));\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      ReactNoop.render(rootModel);\n    });\n    expect(ReactNoop).toMatchRenderedOutput('Loading...');\n    await load();\n    await act(async () => {\n      const rootModel = await ReactNoopFlightClient.read(transport);\n      ReactNoop.render(rootModel);\n    });\n    expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"div\", null, \"I am client\"));\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should error if a non-serializable value is passed to a host component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 320,
                "column": 76,
                "index": 11117
            },
            "line": 320,
            "code": "  it('should error if a non-serializable value is passed to a host component', async () => {\n    function ClientImpl({\n      children\n    }) {\n      return children;\n    }\n    const Client = clientReference(ClientImpl);\n    function EventHandlerProp() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"foo\",\n        onClick: function () {}\n      }, \"Test\");\n    }\n    function FunctionProp() {\n      return /*#__PURE__*/React.createElement(\"div\", null, () => {});\n    }\n    function SymbolProp() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        foo: Symbol('foo')\n      });\n    }\n    const ref = React.createRef();\n    function RefProp() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref\n      });\n    }\n    function EventHandlerPropClient() {\n      return /*#__PURE__*/React.createElement(Client, {\n        className: \"foo\",\n        onClick: function () {}\n      }, \"Test\");\n    }\n    function FunctionPropClient() {\n      return /*#__PURE__*/React.createElement(Client, null, () => {});\n    }\n    function SymbolPropClient() {\n      return /*#__PURE__*/React.createElement(Client, {\n        foo: Symbol('foo')\n      });\n    }\n    function RefPropClient() {\n      return /*#__PURE__*/React.createElement(Client, {\n        ref: ref\n      });\n    }\n    const options = {\n      onError(x) {\n        return __DEV__ ? 'a dev digest' : `digest(\"${x.message}\")`;\n      }\n    };\n    const event = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(EventHandlerProp, null), options);\n    const fn = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(FunctionProp, null), options);\n    const symbol = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(SymbolProp, null), options);\n    const refs = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(RefProp, null), options);\n    const eventClient = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(EventHandlerPropClient, null), options);\n    const fnClient = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(FunctionPropClient, null), options);\n    const symbolClient = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(SymbolPropClient, null), options);\n    const refsClient = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(RefPropClient, null), options);\n    function Render({\n      promise\n    }) {\n      return use(promise);\n    }\n    await act(async () => {\n      startTransition(() => {\n        ReactNoop.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ErrorBoundary, {\n          expectedMessage: \"Event handlers cannot be passed to Client Component props.\"\n        }, /*#__PURE__*/React.createElement(Render, {\n          promise: ReactNoopFlightClient.read(event)\n        })), /*#__PURE__*/React.createElement(ErrorBoundary, {\n          expectedMessage: 'Functions cannot be passed directly to Client Components unless you explicitly expose it by marking it with \"use server\".'\n        }, /*#__PURE__*/React.createElement(Render, {\n          promise: ReactNoopFlightClient.read(fn)\n        })), /*#__PURE__*/React.createElement(ErrorBoundary, {\n          expectedMessage: \"Only global symbols received from Symbol.for(...) can be passed to Client Components.\"\n        }, /*#__PURE__*/React.createElement(Render, {\n          promise: ReactNoopFlightClient.read(symbol)\n        })), /*#__PURE__*/React.createElement(ErrorBoundary, {\n          expectedMessage: \"Refs cannot be used in Server Components, nor passed to Client Components.\"\n        }, /*#__PURE__*/React.createElement(Render, {\n          promise: ReactNoopFlightClient.read(refs)\n        })), /*#__PURE__*/React.createElement(ErrorBoundary, {\n          expectedMessage: \"Event handlers cannot be passed to Client Component props.\"\n        }, /*#__PURE__*/React.createElement(Render, {\n          promise: ReactNoopFlightClient.read(eventClient)\n        })), /*#__PURE__*/React.createElement(ErrorBoundary, {\n          expectedMessage: 'Functions cannot be passed directly to Client Components unless you explicitly expose it by marking it with \"use server\".'\n        }, /*#__PURE__*/React.createElement(Render, {\n          promise: ReactNoopFlightClient.read(fnClient)\n        })), /*#__PURE__*/React.createElement(ErrorBoundary, {\n          expectedMessage: \"Only global symbols received from Symbol.for(...) can be passed to Client Components.\"\n        }, /*#__PURE__*/React.createElement(Render, {\n          promise: ReactNoopFlightClient.read(symbolClient)\n        })), /*#__PURE__*/React.createElement(ErrorBoundary, {\n          expectedMessage: \"Refs cannot be used in Server Components, nor passed to Client Components.\"\n        }, /*#__PURE__*/React.createElement(Render, {\n          promise: ReactNoopFlightClient.read(refsClient)\n        }))));\n      });\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should trigger the inner most error boundary inside a Client Component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 424,
                "column": 76,
                "index": 16051
            },
            "line": 424,
            "code": "  it('should trigger the inner most error boundary inside a Client Component', async () => {\n    function ServerComponent() {\n      throw new Error('This was thrown in the Server Component.');\n    }\n    function ClientComponent({\n      children\n    }) {\n      // This should catch the error thrown by the Server Component, even though it has already happened.\n      // We currently need to wrap it in a div because as it's set up right now, a lazy reference will\n      // throw during reconciliation which will trigger the parent of the error boundary.\n      // This is similar to how these will suspend the parent if it's a direct child of a Suspense boundary.\n      // That's a bug.\n      return /*#__PURE__*/React.createElement(ErrorBoundary, {\n        expectedMessage: \"This was thrown in the Server Component.\"\n      }, /*#__PURE__*/React.createElement(\"div\", null, children));\n    }\n    const ClientComponentReference = clientReference(ClientComponent);\n    function Server() {\n      return /*#__PURE__*/React.createElement(ClientComponentReference, null, /*#__PURE__*/React.createElement(ServerComponent, null));\n    }\n    const data = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Server, null), {\n      onError(x) {\n        // ignore\n      }\n    });\n    function Client({\n      promise\n    }) {\n      return use(promise);\n    }\n    await act(async () => {\n      startTransition(() => {\n        ReactNoop.render( /*#__PURE__*/React.createElement(NoErrorExpected, null, /*#__PURE__*/React.createElement(Client, {\n          promise: ReactNoopFlightClient.read(data)\n        })));\n      });\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a toJSON instance is passed to a host component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 462,
                "column": 75,
                "index": 17677
            },
            "line": 462,
            "code": "  it('should warn in DEV if a toJSON instance is passed to a host component', () => {\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(\"input\", {\n        value: new Date()\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Date objects are not supported.', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a toJSON instance is passed to a host component child",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 472,
                "column": 81,
                "index": 18145
            },
            "line": 472,
            "code": "  it('should warn in DEV if a toJSON instance is passed to a host component child', () => {\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(\"div\", null, \"Current date: \", new Date()));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Date objects cannot be rendered as text children. Try formatting it using toString().\\n' + '  <div>Current date: {Date}</div>\\n' + '                     ^^^^^^', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a special object is passed to a host component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 480,
                "column": 74,
                "index": 18648
            },
            "line": 480,
            "code": "  it('should warn in DEV if a special object is passed to a host component', () => {\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(\"input\", {\n        value: Math\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Math objects are not supported.\\n' + '  <input value={Math}>\\n' + '               ^^^^^^', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if an object with symbols is passed to a host component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 490,
                "column": 80,
                "index": 19166
            },
            "line": 490,
            "code": "  it('should warn in DEV if an object with symbols is passed to a host component', () => {\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(\"input\", {\n        value: {\n          [Symbol.iterator]: {}\n        }\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Objects with symbol properties like Symbol.iterator are not supported.', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a toJSON instance is passed to a Client Component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 502,
                "column": 77,
                "index": 19702
            },
            "line": 502,
            "code": "  it('should warn in DEV if a toJSON instance is passed to a Client Component', () => {\n    function ClientImpl({\n      value\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const Client = clientReference(ClientImpl);\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Client, {\n        value: new Date()\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Date objects are not supported.', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a toJSON instance is passed to a Client Component child",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 518,
                "column": 83,
                "index": 20339
            },
            "line": 518,
            "code": "  it('should warn in DEV if a toJSON instance is passed to a Client Component child', () => {\n    function ClientImpl({\n      children\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, children);\n    }\n    const Client = clientReference(ClientImpl);\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Client, null, \"Current date: \", new Date()));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Date objects are not supported.\\n' + '  <>Current date: {Date}</>\\n' + '                  ^^^^^^', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a special object is passed to a Client Component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 532,
                "column": 76,
                "index": 21039
            },
            "line": 532,
            "code": "  it('should warn in DEV if a special object is passed to a Client Component', () => {\n    function ClientImpl({\n      value\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const Client = clientReference(ClientImpl);\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Client, {\n        value: Math\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Math objects are not supported.\\n' + '  <... value={Math}>\\n' + '             ^^^^^^', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if an object with symbols is passed to a Client Component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 548,
                "column": 82,
                "index": 21722
            },
            "line": 548,
            "code": "  it('should warn in DEV if an object with symbols is passed to a Client Component', () => {\n    function ClientImpl({\n      value\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const Client = clientReference(ClientImpl);\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Client, {\n        value: {\n          [Symbol.iterator]: {}\n        }\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Objects with symbol properties like Symbol.iterator are not supported.', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a special object is passed to a nested object in Client Component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 566,
                "column": 93,
                "index": 22441
            },
            "line": 566,
            "code": "  it('should warn in DEV if a special object is passed to a nested object in Client Component', () => {\n    function ClientImpl({\n      value\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const Client = clientReference(ClientImpl);\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Client, {\n        value: {\n          hello: Math,\n          title: /*#__PURE__*/React.createElement(\"h1\", null, \"hi\")\n        }\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Math objects are not supported.\\n' + '  {hello: Math, title: <h1/>}\\n' + '          ^^^^', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a special object is passed to a nested array in Client Component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 585,
                "column": 92,
                "index": 23236
            },
            "line": 585,
            "code": "  it('should warn in DEV if a special object is passed to a nested array in Client Component', () => {\n    function ClientImpl({\n      value\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const Client = clientReference(ClientImpl);\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Client, {\n        value: ['looooong string takes up noise', Math, /*#__PURE__*/React.createElement(\"h1\", null, \"hi\")]\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ' + 'Math objects are not supported.\\n' + '  [..., Math, <h1/>]\\n' + '        ^^^^', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should NOT warn in DEV for key getters",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 601,
                "column": 44,
                "index": 23962
            },
            "line": 601,
            "code": "  it('should NOT warn in DEV for key getters', () => {\n    const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(\"div\", {\n      key: \"a\"\n    }));\n    ReactNoopFlightClient.read(transport);\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a class instance is passed to a host component",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 607,
                "column": 74,
                "index": 24214
            },
            "line": 607,
            "code": "  it('should warn in DEV if a class instance is passed to a host component', () => {\n    class Foo {\n      method() {}\n    }\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(\"input\", {\n        value: new Foo()\n      }));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Only plain objects can be passed to Client Components from Server Components. ', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should warn in DEV if a a client reference is passed to useContext()",
            "suites": [
                "ReactFlight"
            ],
            "updatePoint": {
                "line": 620,
                "column": 74,
                "index": 24678
            },
            "line": 620,
            "code": "  it('should warn in DEV if a a client reference is passed to useContext()', () => {\n    const Context = React.createContext();\n    const ClientContext = clientReference(Context);\n    function ServerComponent() {\n      return React.useContext(ClientContext);\n    }\n    expect(() => {\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(ServerComponent, null));\n      ReactNoopFlightClient.read(transport);\n    }).toErrorDev('Cannot read a Client Context from a Server Component.', {\n      withoutStack: true\n    });\n  });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should support useId",
            "suites": [
                "ReactFlight",
                "Hooks"
            ],
            "updatePoint": {
                "line": 642,
                "column": 28,
                "index": 25396
            },
            "line": 642,
            "code": "    it('should support useId', async () => {\n      function App() {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DivWithId, null), /*#__PURE__*/React.createElement(DivWithId, null));\n      }\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(App, null));\n      await act(async () => {\n        ReactNoop.render(await ReactNoopFlightClient.read(transport));\n      });\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        prop: \":S1:\"\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        prop: \":S2:\"\n      })));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "accepts an identifier prefix that prefixes generated ids",
            "suites": [
                "ReactFlight",
                "Hooks"
            ],
            "updatePoint": {
                "line": 656,
                "column": 64,
                "index": 26150
            },
            "line": 656,
            "code": "    it('accepts an identifier prefix that prefixes generated ids', async () => {\n      function App() {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DivWithId, null), /*#__PURE__*/React.createElement(DivWithId, null));\n      }\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(App, null), {\n        identifierPrefix: 'foo'\n      });\n      await act(async () => {\n        ReactNoop.render(await ReactNoopFlightClient.read(transport));\n      });\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        prop: \":fooS1:\"\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        prop: \":fooS2:\"\n      })));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "[TODO] it does not warn if you render a server element passed to a client module reference twice on the client when using useId",
            "suites": [
                "ReactFlight",
                "Hooks"
            ],
            "updatePoint": {
                "line": 672,
                "column": 135,
                "index": 27024
            },
            "line": 672,
            "code": "    it('[TODO] it does not warn if you render a server element passed to a client module reference twice on the client when using useId', async () => {\n      // @TODO Today if you render a Server Component with useId and pass it to a Client Component and that Client Component renders the element in two or more\n      // places the id used on the server will be duplicated in the client. This is a deviation from the guarantees useId makes for Fizz/Client and is a consequence\n      // of the fact that the Server Component is actually rendered on the server and is reduced to a set of host elements before being passed to the Client component\n      // so the output passed to the Client has no knowledge of the useId use. In the future we would like to add a DEV warning when this happens. For now\n      // we just accept that it is a nuance of useId in Flight\n      function App() {\n        const id = React.useId();\n        const div = /*#__PURE__*/React.createElement(\"div\", {\n          prop: id\n        }, id);\n        return /*#__PURE__*/React.createElement(ClientDoublerModuleRef, {\n          el: div\n        });\n      }\n      function ClientDoubler({\n        el\n      }) {\n        Scheduler.unstable_yieldValue('ClientDoubler');\n        return /*#__PURE__*/React.createElement(React.Fragment, null, el, el);\n      }\n      const ClientDoublerModuleRef = clientReference(ClientDoubler);\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(App, null));\n      expect(Scheduler).toHaveYielded([]);\n      await act(async () => {\n        ReactNoop.render(await ReactNoopFlightClient.read(transport));\n      });\n      expect(Scheduler).toHaveYielded(['ClientDoubler']);\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        prop: \":S1:\"\n      }, \":S1:\"), /*#__PURE__*/React.createElement(\"div\", {\n        prop: \":S1:\"\n      }, \":S1:\")));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "supports basic createServerContext usage",
            "suites": [
                "ReactFlight",
                "ServerContext"
            ],
            "updatePoint": {
                "line": 709,
                "column": 48,
                "index": 28991
            },
            "line": 709,
            "code": "    it('supports basic createServerContext usage', async () => {\n      const ServerContext = React.createServerContext('ServerContext', 'hello from server');\n      function Foo() {\n        const context = React.useContext(ServerContext);\n        return /*#__PURE__*/React.createElement(\"div\", null, context);\n      }\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Foo, null));\n      await act(async () => {\n        ServerContext._currentRenderer = null;\n        ServerContext._currentRenderer2 = null;\n        ReactNoop.render(await ReactNoopFlightClient.read(transport));\n      });\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"div\", null, \"hello from server\"));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "propagates ServerContext providers in flight",
            "suites": [
                "ReactFlight",
                "ServerContext"
            ],
            "updatePoint": {
                "line": 725,
                "column": 52,
                "index": 29776
            },
            "line": 725,
            "code": "    it('propagates ServerContext providers in flight', async () => {\n      const ServerContext = React.createServerContext('ServerContext', 'default');\n      function Foo() {\n        return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ServerContext.Provider, {\n          value: \"hi this is server\"\n        }, /*#__PURE__*/React.createElement(Bar, null)));\n      }\n      function Bar() {\n        const context = React.useContext(ServerContext);\n        return context;\n      }\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Foo, null));\n      await act(async () => {\n        ServerContext._currentRenderer = null;\n        ServerContext._currentRenderer2 = null;\n        ReactNoop.render(await ReactNoopFlightClient.read(transport));\n      });\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"div\", null, \"hi this is server\"));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "errors if you try passing JSX through ServerContext value",
            "suites": [
                "ReactFlight",
                "ServerContext"
            ],
            "updatePoint": {
                "line": 746,
                "column": 65,
                "index": 30763
            },
            "line": 746,
            "code": "    it('errors if you try passing JSX through ServerContext value', () => {\n      const ServerContext = React.createServerContext('ServerContext', {\n        foo: {\n          bar: /*#__PURE__*/React.createElement(\"span\", null, \"hi this is default\")\n        }\n      });\n      function Foo() {\n        return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ServerContext.Provider, {\n          value: {\n            foo: {\n              bar: /*#__PURE__*/React.createElement(\"span\", null, \"hi this is server\")\n            }\n          }\n        }, /*#__PURE__*/React.createElement(Bar, null)));\n      }\n      function Bar() {\n        const context = React.useContext(ServerContext);\n        return context.foo.bar;\n      }\n      expect(() => {\n        ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Foo, null));\n      }).toErrorDev('React elements are not allowed in ServerContext', {\n        withoutStack: true\n      });\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "propagates ServerContext and cleans up the providers in flight",
            "suites": [
                "ReactFlight",
                "ServerContext"
            ],
            "updatePoint": {
                "line": 773,
                "column": 70,
                "index": 31773
            },
            "line": 773,
            "code": "    it('propagates ServerContext and cleans up the providers in flight', async () => {\n      const ServerContext = React.createServerContext('ServerContext', 'default');\n      function Foo() {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ServerContext.Provider, {\n          value: \"hi this is server outer\"\n        }, /*#__PURE__*/React.createElement(ServerContext.Provider, {\n          value: \"hi this is server\"\n        }, /*#__PURE__*/React.createElement(Bar, null)), /*#__PURE__*/React.createElement(ServerContext.Provider, {\n          value: \"hi this is server2\"\n        }, /*#__PURE__*/React.createElement(Bar, null)), /*#__PURE__*/React.createElement(Bar, null)), /*#__PURE__*/React.createElement(ServerContext.Provider, {\n          value: \"hi this is server outer2\"\n        }, /*#__PURE__*/React.createElement(Bar, null)), /*#__PURE__*/React.createElement(Bar, null));\n      }\n      function Bar() {\n        const context = React.useContext(ServerContext);\n        return /*#__PURE__*/React.createElement(\"span\", null, context);\n      }\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Foo, null));\n      await act(async () => {\n        ReactNoop.render(await ReactNoopFlightClient.read(transport));\n      });\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", null, \"hi this is server\"), /*#__PURE__*/React.createElement(\"span\", null, \"hi this is server2\"), /*#__PURE__*/React.createElement(\"span\", null, \"hi this is server outer\"), /*#__PURE__*/React.createElement(\"span\", null, \"hi this is server outer2\"), /*#__PURE__*/React.createElement(\"span\", null, \"default\")));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "propagates ServerContext providers in flight after suspending",
            "suites": [
                "ReactFlight",
                "ServerContext"
            ],
            "updatePoint": {
                "line": 798,
                "column": 69,
                "index": 33581
            },
            "line": 798,
            "code": "    it('propagates ServerContext providers in flight after suspending', async () => {\n      const ServerContext = React.createServerContext('ServerContext', 'default');\n      function Foo() {\n        return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ServerContext.Provider, {\n          value: \"hi this is server\"\n        }, /*#__PURE__*/React.createElement(React.Suspense, {\n          fallback: 'Loading'\n        }, /*#__PURE__*/React.createElement(Bar, null))));\n      }\n      let resolve;\n      const promise = new Promise(res => {\n        resolve = () => {\n          promise.unsuspend = true;\n          res();\n        };\n      });\n      function Bar() {\n        if (!promise.unsuspend) {\n          Scheduler.unstable_yieldValue('suspended');\n          throw promise;\n        }\n        Scheduler.unstable_yieldValue('rendered');\n        const context = React.useContext(ServerContext);\n        return context;\n      }\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Foo, null));\n      expect(Scheduler).toHaveYielded(['suspended']);\n      await act(async () => {\n        resolve();\n        await promise;\n        jest.runAllImmediates();\n      });\n      expect(Scheduler).toHaveYielded(['rendered']);\n      await act(async () => {\n        ServerContext._currentRenderer = null;\n        ServerContext._currentRenderer2 = null;\n        ReactNoop.render(await ReactNoopFlightClient.read(transport));\n      });\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"div\", null, \"hi this is server\"));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "serializes ServerContext to client",
            "suites": [
                "ReactFlight",
                "ServerContext"
            ],
            "updatePoint": {
                "line": 840,
                "column": 42,
                "index": 35196
            },
            "line": 840,
            "code": "    it('serializes ServerContext to client', async () => {\n      const ServerContext = React.createServerContext('ServerContext', 'default');\n      function ClientBar() {\n        Scheduler.unstable_yieldValue('ClientBar');\n        const context = React.useContext(ServerContext);\n        return /*#__PURE__*/React.createElement(\"span\", null, context);\n      }\n      const Bar = clientReference(ClientBar);\n      function Foo() {\n        return /*#__PURE__*/React.createElement(ServerContext.Provider, {\n          value: \"hi this is server\"\n        }, /*#__PURE__*/React.createElement(Bar, null));\n      }\n      const model = {\n        foo: /*#__PURE__*/React.createElement(Foo, null)\n      };\n      const transport = ReactNoopFlightServer.render(model);\n      expect(Scheduler).toHaveYielded([]);\n      await act(async () => {\n        ServerContext._currentRenderer = null;\n        ServerContext._currentRenderer2 = null;\n        const flightModel = await ReactNoopFlightClient.read(transport);\n        ReactNoop.render(flightModel.foo);\n      });\n      expect(Scheduler).toHaveYielded(['ClientBar']);\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"span\", null, \"hi this is server\"));\n      expect(() => {\n        React.createServerContext('ServerContext', 'default');\n      }).toThrow('ServerContext: ServerContext already defined');\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "takes ServerContext from the client for refetching use cases",
            "suites": [
                "ReactFlight",
                "ServerContext"
            ],
            "updatePoint": {
                "line": 872,
                "column": 68,
                "index": 36633
            },
            "line": 872,
            "code": "    it('takes ServerContext from the client for refetching use cases', async () => {\n      const ServerContext = React.createServerContext('ServerContext', 'default');\n      function Bar() {\n        return /*#__PURE__*/React.createElement(\"span\", null, React.useContext(ServerContext));\n      }\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(Bar, null), {\n        context: [['ServerContext', 'Override']]\n      });\n      await act(async () => {\n        const flightModel = await ReactNoopFlightClient.read(transport);\n        ReactNoop.render(flightModel);\n      });\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(\"span\", null, \"Override\"));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "sets default initial value when defined lazily on server or client",
            "suites": [
                "ReactFlight",
                "ServerContext"
            ],
            "updatePoint": {
                "line": 888,
                "column": 74,
                "index": 37396
            },
            "line": 888,
            "code": "    it('sets default initial value when defined lazily on server or client', async () => {\n      let ServerContext;\n      function inlineLazyServerContextInitialization() {\n        if (!ServerContext) {\n          ServerContext = React.createServerContext('ServerContext', 'default');\n        }\n        return ServerContext;\n      }\n      let ClientContext;\n      function inlineContextInitialization() {\n        if (!ClientContext) {\n          ClientContext = React.createServerContext('ServerContext', 'default');\n        }\n        return ClientContext;\n      }\n      function ClientBaz() {\n        const context = inlineContextInitialization();\n        const value = React.useContext(context);\n        return /*#__PURE__*/React.createElement(\"div\", null, value);\n      }\n      const Baz = clientReference(ClientBaz);\n      function Bar() {\n        return /*#__PURE__*/React.createElement(\"article\", null, /*#__PURE__*/React.createElement(\"div\", null, React.useContext(inlineLazyServerContextInitialization())), /*#__PURE__*/React.createElement(Baz, null));\n      }\n      function ServerApp() {\n        const Context = inlineLazyServerContextInitialization();\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Context.Provider, {\n          value: \"test\"\n        }, /*#__PURE__*/React.createElement(Bar, null)), /*#__PURE__*/React.createElement(Bar, null));\n      }\n      function ClientApp({\n        serverModel\n      }) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, serverModel, /*#__PURE__*/React.createElement(ClientBaz, null));\n      }\n      const transport = ReactNoopFlightServer.render( /*#__PURE__*/React.createElement(ServerApp, null));\n      expect(ClientContext).toBe(undefined);\n\n      // Reset all modules, except flight-modules which keeps the registry of Client Components\n      const flightModules = require('react-noop-renderer/flight-modules');\n      jest.resetModules();\n      jest.mock('react-noop-renderer/flight-modules', () => flightModules);\n      React = require('react');\n      ReactNoop = require('react-noop-renderer');\n      ReactNoopFlightServer = require('react-noop-renderer/flight-server');\n      ReactNoopFlightClient = require('react-noop-renderer/flight-client');\n      act = require('jest-react').act;\n      Scheduler = require('scheduler');\n      await act(async () => {\n        const serverModel = await ReactNoopFlightClient.read(transport);\n        ReactNoop.render( /*#__PURE__*/React.createElement(ClientApp, {\n          serverModel: serverModel\n        }));\n      });\n      expect(ClientContext).not.toBe(ServerContext);\n      expect(ReactNoop).toMatchRenderedOutput( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"article\", null, /*#__PURE__*/React.createElement(\"div\", null, \"test\"), /*#__PURE__*/React.createElement(\"div\", null, \"test\")), /*#__PURE__*/React.createElement(\"article\", null, /*#__PURE__*/React.createElement(\"div\", null, \"default\"), /*#__PURE__*/React.createElement(\"div\", null, \"default\")), /*#__PURE__*/React.createElement(\"div\", null, \"default\")));\n    });",
            "file": "ReactFlight-test.js",
            "skipped": false,
            "dir": "packages/react-client/src/__tests__"
        },
        {
            "name": "should support editing useState hooks",
            "suites": [
                "React hooks DevTools integration"
            ],
            "updatePoint": {
                "line": 41,
                "column": 43,
                "index": 1173
            },
            "line": 41,
            "code": "  it('should support editing useState hooks', () => {\n    let setCountFn;\n    function MyComponent() {\n      const [count, setCount] = React.useState(0);\n      setCountFn = setCount;\n      return /*#__PURE__*/React.createElement(\"div\", null, \"count:\", count);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(MyComponent, null));\n    expect(renderer.toJSON()).toEqual({\n      type: 'div',\n      props: {},\n      children: ['count:', '0']\n    });\n    const fiber = renderer.root.findByType(MyComponent)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(fiber);\n    const stateHook = tree[0];\n    expect(stateHook.isStateEditable).toBe(true);\n    if (__DEV__) {\n      act(() => overrideHookState(fiber, stateHook.id, [], 10));\n      expect(renderer.toJSON()).toEqual({\n        type: 'div',\n        props: {},\n        children: ['count:', '10']\n      });\n      act(() => setCountFn(count => count + 1));\n      expect(renderer.toJSON()).toEqual({\n        type: 'div',\n        props: {},\n        children: ['count:', '11']\n      });\n    }\n  });",
            "file": "ReactDevToolsHooksIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support editable useReducer hooks",
            "suites": [
                "React hooks DevTools integration"
            ],
            "updatePoint": {
                "line": 73,
                "column": 46,
                "index": 2273
            },
            "line": 73,
            "code": "  it('should support editable useReducer hooks', () => {\n    const initialData = {\n      foo: 'abc',\n      bar: 123\n    };\n    function reducer(state, action) {\n      switch (action.type) {\n        case 'swap':\n          return {\n            foo: state.bar,\n            bar: state.foo\n          };\n        default:\n          throw new Error();\n      }\n    }\n    let dispatchFn;\n    function MyComponent() {\n      const [state, dispatch] = React.useReducer(reducer, initialData);\n      dispatchFn = dispatch;\n      return /*#__PURE__*/React.createElement(\"div\", null, \"foo:\", state.foo, \", bar:\", state.bar);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(MyComponent, null));\n    expect(renderer.toJSON()).toEqual({\n      type: 'div',\n      props: {},\n      children: ['foo:', 'abc', ', bar:', '123']\n    });\n    const fiber = renderer.root.findByType(MyComponent)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(fiber);\n    const reducerHook = tree[0];\n    expect(reducerHook.isStateEditable).toBe(true);\n    if (__DEV__) {\n      act(() => overrideHookState(fiber, reducerHook.id, ['foo'], 'def'));\n      expect(renderer.toJSON()).toEqual({\n        type: 'div',\n        props: {},\n        children: ['foo:', 'def', ', bar:', '123']\n      });\n      act(() => dispatchFn({\n        type: 'swap'\n      }));\n      expect(renderer.toJSON()).toEqual({\n        type: 'div',\n        props: {},\n        children: ['foo:', '123', ', bar:', 'def']\n      });\n    }\n  });",
            "file": "ReactDevToolsHooksIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should handle interleaved stateful hooks (e.g. useState) and non-stateful hooks (e.g. useContext)",
            "suites": [
                "React hooks DevTools integration"
            ],
            "updatePoint": {
                "line": 125,
                "column": 103,
                "index": 4002
            },
            "line": 125,
            "code": "  it('should handle interleaved stateful hooks (e.g. useState) and non-stateful hooks (e.g. useContext)', () => {\n    const MyContext = React.createContext(1);\n    let setStateFn;\n    function useCustomHook() {\n      const context = React.useContext(MyContext);\n      const [state, setState] = React.useState({\n        count: context\n      });\n      React.useDebugValue(state.count);\n      setStateFn = setState;\n      return state.count;\n    }\n    function MyComponent() {\n      const count = useCustomHook();\n      return /*#__PURE__*/React.createElement(\"div\", null, \"count:\", count);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(MyComponent, null));\n    expect(renderer.toJSON()).toEqual({\n      type: 'div',\n      props: {},\n      children: ['count:', '1']\n    });\n    const fiber = renderer.root.findByType(MyComponent)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(fiber);\n    const stateHook = tree[0].subHooks[1];\n    expect(stateHook.isStateEditable).toBe(true);\n    if (__DEV__) {\n      act(() => overrideHookState(fiber, stateHook.id, ['count'], 10));\n      expect(renderer.toJSON()).toEqual({\n        type: 'div',\n        props: {},\n        children: ['count:', '10']\n      });\n      act(() => setStateFn(state => ({\n        count: state.count + 1\n      })));\n      expect(renderer.toJSON()).toEqual({\n        type: 'div',\n        props: {},\n        children: ['count:', '11']\n      });\n    }\n  });",
            "file": "ReactDevToolsHooksIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support overriding suspense in legacy mode",
            "suites": [
                "React hooks DevTools integration"
            ],
            "updatePoint": {
                "line": 168,
                "column": 55,
                "index": 5431
            },
            "line": 168,
            "code": "  it('should support overriding suspense in legacy mode', () => {\n    if (__DEV__) {\n      // Lock the first render\n      setSuspenseHandler(() => true);\n    }\n    function MyComponent() {\n      return 'Done';\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(React.Suspense, {\n      fallback: 'Loading'\n    }, /*#__PURE__*/React.createElement(MyComponent, null))));\n    const fiber = renderer.root._currentFiber().child;\n    if (__DEV__) {\n      // First render was locked\n      expect(renderer.toJSON().children).toEqual(['Loading']);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Loading']);\n\n      // Release the lock\n      setSuspenseHandler(() => false);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Done']);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Done']);\n\n      // Lock again\n      setSuspenseHandler(() => true);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Loading']);\n\n      // Release the lock again\n      setSuspenseHandler(() => false);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Done']);\n\n      // Ensure it checks specific fibers.\n      setSuspenseHandler(f => f === fiber || f === fiber.alternate);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Loading']);\n      setSuspenseHandler(f => f !== fiber && f !== fiber.alternate);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Done']);\n    } else {\n      expect(renderer.toJSON().children).toEqual(['Done']);\n    }\n  });",
            "file": "ReactDevToolsHooksIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support overriding suspense in concurrent mode",
            "suites": [
                "React hooks DevTools integration"
            ],
            "updatePoint": {
                "line": 216,
                "column": 59,
                "index": 7338
            },
            "line": 216,
            "code": "  it('should support overriding suspense in concurrent mode', async () => {\n    if (__DEV__) {\n      // Lock the first render\n      setSuspenseHandler(() => true);\n    }\n    function MyComponent() {\n      return 'Done';\n    }\n    const renderer = await act(() => ReactTestRenderer.create( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(React.Suspense, {\n      fallback: 'Loading'\n    }, /*#__PURE__*/React.createElement(MyComponent, null))), {\n      unstable_isConcurrent: true\n    }));\n    expect(Scheduler).toFlushAndYield([]);\n    // Ensure we timeout any suspense time.\n    jest.advanceTimersByTime(1000);\n    const fiber = renderer.root._currentFiber().child;\n    if (__DEV__) {\n      // First render was locked\n      expect(renderer.toJSON().children).toEqual(['Loading']);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Loading']);\n\n      // Release the lock\n      setSuspenseHandler(() => false);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      Scheduler.unstable_flushAll();\n      expect(renderer.toJSON().children).toEqual(['Done']);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Done']);\n\n      // Lock again\n      setSuspenseHandler(() => true);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Loading']);\n\n      // Release the lock again\n      setSuspenseHandler(() => false);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Done']);\n\n      // Ensure it checks specific fibers.\n      setSuspenseHandler(f => f === fiber || f === fiber.alternate);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Loading']);\n      setSuspenseHandler(f => f !== fiber && f !== fiber.alternate);\n      act(() => scheduleUpdate(fiber)); // Re-render\n      expect(renderer.toJSON().children).toEqual(['Done']);\n    } else {\n      expect(renderer.toJSON().children).toEqual(['Done']);\n    }\n  });",
            "file": "ReactDevToolsHooksIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect a simple useState hook",
            "suites": [
                "ReactHooksInspection"
            ],
            "updatePoint": {
                "line": 21,
                "column": 43,
                "index": 509
            },
            "line": 21,
            "code": "  it('should inspect a simple useState hook', () => {\n    function Foo(props) {\n      const [state] = React.useState('hello world');\n      return /*#__PURE__*/React.createElement(\"div\", null, state);\n    }\n    const tree = ReactDebugTools.inspectHooks(Foo, {});\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'hello world',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspection-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect a simple custom hook",
            "suites": [
                "ReactHooksInspection"
            ],
            "updatePoint": {
                "line": 35,
                "column": 41,
                "index": 922
            },
            "line": 35,
            "code": "  it('should inspect a simple custom hook', () => {\n    function useCustom(value) {\n      const [state] = React.useState(value);\n      React.useDebugValue('custom hook label');\n      return state;\n    }\n    function Foo(props) {\n      const value = useCustom('hello world');\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const tree = ReactDebugTools.inspectHooks(Foo, {});\n    expect(tree).toEqual([{\n      isStateEditable: false,\n      id: null,\n      name: 'Custom',\n      value: __DEV__ ? 'custom hook label' : undefined,\n      subHooks: [{\n        isStateEditable: true,\n        id: 0,\n        name: 'State',\n        value: 'hello world',\n        subHooks: []\n      }]\n    }]);\n  });",
            "file": "ReactHooksInspection-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect a tree of multiple hooks",
            "suites": [
                "ReactHooksInspection"
            ],
            "updatePoint": {
                "line": 60,
                "column": 45,
                "index": 1645
            },
            "line": 60,
            "code": "  it('should inspect a tree of multiple hooks', () => {\n    function effect() {}\n    function useCustom(value) {\n      const [state] = React.useState(value);\n      React.useEffect(effect);\n      return state;\n    }\n    function Foo(props) {\n      const value1 = useCustom('hello');\n      const value2 = useCustom('world');\n      return /*#__PURE__*/React.createElement(\"div\", null, value1, \" \", value2);\n    }\n    const tree = ReactDebugTools.inspectHooks(Foo, {});\n    expect(tree).toEqual([{\n      isStateEditable: false,\n      id: null,\n      name: 'Custom',\n      value: undefined,\n      subHooks: [{\n        isStateEditable: true,\n        id: 0,\n        name: 'State',\n        subHooks: [],\n        value: 'hello'\n      }, {\n        isStateEditable: false,\n        id: 1,\n        name: 'Effect',\n        subHooks: [],\n        value: effect\n      }]\n    }, {\n      isStateEditable: false,\n      id: null,\n      name: 'Custom',\n      value: undefined,\n      subHooks: [{\n        isStateEditable: true,\n        id: 2,\n        name: 'State',\n        value: 'world',\n        subHooks: []\n      }, {\n        isStateEditable: false,\n        id: 3,\n        name: 'Effect',\n        value: effect,\n        subHooks: []\n      }]\n    }]);\n  });",
            "file": "ReactHooksInspection-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect a tree of multiple levels of hooks",
            "suites": [
                "ReactHooksInspection"
            ],
            "updatePoint": {
                "line": 111,
                "column": 55,
                "index": 2893
            },
            "line": 111,
            "code": "  it('should inspect a tree of multiple levels of hooks', () => {\n    function effect() {}\n    function useCustom(value) {\n      const [state] = React.useReducer((s, a) => s, value);\n      React.useEffect(effect);\n      return state;\n    }\n    function useBar(value) {\n      const result = useCustom(value);\n      React.useLayoutEffect(effect);\n      return result;\n    }\n    function useBaz(value) {\n      React.useLayoutEffect(effect);\n      const result = useCustom(value);\n      return result;\n    }\n    function Foo(props) {\n      const value1 = useBar('hello');\n      const value2 = useBaz('world');\n      return /*#__PURE__*/React.createElement(\"div\", null, value1, \" \", value2);\n    }\n    const tree = ReactDebugTools.inspectHooks(Foo, {});\n    expect(tree).toEqual([{\n      isStateEditable: false,\n      id: null,\n      name: 'Bar',\n      value: undefined,\n      subHooks: [{\n        isStateEditable: false,\n        id: null,\n        name: 'Custom',\n        value: undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 0,\n          name: 'Reducer',\n          value: 'hello',\n          subHooks: []\n        }, {\n          isStateEditable: false,\n          id: 1,\n          name: 'Effect',\n          value: effect,\n          subHooks: []\n        }]\n      }, {\n        isStateEditable: false,\n        id: 2,\n        name: 'LayoutEffect',\n        value: effect,\n        subHooks: []\n      }]\n    }, {\n      isStateEditable: false,\n      id: null,\n      name: 'Baz',\n      value: undefined,\n      subHooks: [{\n        isStateEditable: false,\n        id: 3,\n        name: 'LayoutEffect',\n        value: effect,\n        subHooks: []\n      }, {\n        isStateEditable: false,\n        id: null,\n        name: 'Custom',\n        subHooks: [{\n          isStateEditable: true,\n          id: 4,\n          name: 'Reducer',\n          subHooks: [],\n          value: 'world'\n        }, {\n          isStateEditable: false,\n          id: 5,\n          name: 'Effect',\n          subHooks: [],\n          value: effect\n        }],\n        value: undefined\n      }]\n    }]);\n  });",
            "file": "ReactHooksInspection-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect the default value using the useContext hook",
            "suites": [
                "ReactHooksInspection"
            ],
            "updatePoint": {
                "line": 196,
                "column": 64,
                "index": 4993
            },
            "line": 196,
            "code": "  it('should inspect the default value using the useContext hook', () => {\n    const MyContext = React.createContext('default');\n    function Foo(props) {\n      const value = React.useContext(MyContext);\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const tree = ReactDebugTools.inspectHooks(Foo, {});\n    expect(tree).toEqual([{\n      isStateEditable: false,\n      id: null,\n      name: 'Context',\n      value: 'default',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspection-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support an injected dispatcher",
            "suites": [
                "ReactHooksInspection"
            ],
            "updatePoint": {
                "line": 211,
                "column": 43,
                "index": 5460
            },
            "line": 211,
            "code": "  it('should support an injected dispatcher', () => {\n    const initial = {\n      useState() {\n        throw new Error(\"Should've been proxied\");\n      }\n    };\n    let current = initial;\n    let getterCalls = 0;\n    const setterCalls = [];\n    const FakeDispatcherRef = {\n      get current() {\n        getterCalls++;\n        return current;\n      },\n      set current(value) {\n        setterCalls.push(value);\n        current = value;\n      }\n    };\n    function Foo(props) {\n      const [state] = FakeDispatcherRef.current.useState('hello world');\n      return /*#__PURE__*/React.createElement(\"div\", null, state);\n    }\n    ReactDebugTools.inspectHooks(Foo, {}, FakeDispatcherRef);\n    expect(getterCalls).toBe(2);\n    expect(setterCalls).toHaveLength(2);\n    expect(setterCalls[0]).not.toBe(initial);\n    expect(setterCalls[1]).toBe(initial);\n  });",
            "file": "ReactHooksInspection-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should be ignored when called outside of a custom hook",
            "suites": [
                "ReactHooksInspection",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 241,
                "column": 62,
                "index": 6368
            },
            "line": 241,
            "code": "    it('should be ignored when called outside of a custom hook', () => {\n      function Foo(props) {\n        React.useDebugValue('this is invalid');\n        return null;\n      }\n      const tree = ReactDebugTools.inspectHooks(Foo, {});\n      expect(tree).toHaveLength(0);\n    });",
            "file": "ReactHooksInspection-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support an optional formatter function param",
            "suites": [
                "ReactHooksInspection",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 249,
                "column": 59,
                "index": 6645
            },
            "line": 249,
            "code": "    it('should support an optional formatter function param', () => {\n      function useCustom() {\n        React.useDebugValue({\n          bar: 123\n        }, object => `bar:${object.bar}`);\n        React.useState(0);\n      }\n      function Foo(props) {\n        useCustom();\n        return null;\n      }\n      const tree = ReactDebugTools.inspectHooks(Foo, {});\n      expect(tree).toEqual([{\n        isStateEditable: false,\n        id: null,\n        name: 'Custom',\n        value: __DEV__ ? 'bar:123' : undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 0,\n          name: 'State',\n          subHooks: [],\n          value: 0\n        }]\n      }]);\n    });",
            "file": "ReactHooksInspection-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect the current state of useState hooks",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 27,
                "column": 56,
                "index": 711
            },
            "line": 27,
            "code": "  it('should inspect the current state of useState hooks', () => {\n    const useState = React.useState;\n    function Foo(props) {\n      const [state1, setState1] = useState('hello');\n      const [state2, setState2] = useState('world');\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onMouseDown: setState1,\n        onMouseUp: setState2\n      }, state1, \" \", state2);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, {\n      prop: \"prop\"\n    }));\n    let childFiber = renderer.root.findByType(Foo)._currentFiber();\n    let tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'hello',\n      subHooks: []\n    }, {\n      isStateEditable: true,\n      id: 1,\n      name: 'State',\n      value: 'world',\n      subHooks: []\n    }]);\n    const {\n      onMouseDown: setStateA,\n      onMouseUp: setStateB\n    } = renderer.root.findByType('div').props;\n    act(() => setStateA('Hi'));\n    childFiber = renderer.root.findByType(Foo)._currentFiber();\n    tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'Hi',\n      subHooks: []\n    }, {\n      isStateEditable: true,\n      id: 1,\n      name: 'State',\n      value: 'world',\n      subHooks: []\n    }]);\n    act(() => setStateB('world!'));\n    childFiber = renderer.root.findByType(Foo)._currentFiber();\n    tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'Hi',\n      subHooks: []\n    }, {\n      isStateEditable: true,\n      id: 1,\n      name: 'State',\n      value: 'world!',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect the current state of all stateful hooks",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 92,
                "column": 60,
                "index": 2546
            },
            "line": 92,
            "code": "  it('should inspect the current state of all stateful hooks', () => {\n    const outsideRef = React.createRef();\n    function effect() {}\n    function Foo(props) {\n      const [state1, setState] = React.useState('a');\n      const [state2, dispatch] = React.useReducer((s, a) => a.value, 'b');\n      const ref = React.useRef('c');\n      React.useLayoutEffect(effect);\n      React.useEffect(effect);\n      React.useImperativeHandle(outsideRef, () => {\n        // Return a function so that jest treats them as non-equal.\n        return function Instance() {};\n      }, []);\n      React.useMemo(() => state1 + state2, [state1]);\n      function update() {\n        act(() => {\n          setState('A');\n        });\n        act(() => {\n          dispatch({\n            value: 'B'\n          });\n        });\n        ref.current = 'C';\n      }\n      const memoizedUpdate = React.useCallback(update, []);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: memoizedUpdate\n      }, state1, \" \", state2);\n    }\n    let renderer;\n    act(() => {\n      renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, {\n        prop: \"prop\"\n      }));\n    });\n    let childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const {\n      onClick: updateStates\n    } = renderer.root.findByType('div').props;\n    let tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'a',\n      subHooks: []\n    }, {\n      isStateEditable: true,\n      id: 1,\n      name: 'Reducer',\n      value: 'b',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 2,\n      name: 'Ref',\n      value: 'c',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 3,\n      name: 'LayoutEffect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 4,\n      name: 'Effect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 5,\n      name: 'ImperativeHandle',\n      value: outsideRef.current,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 6,\n      name: 'Memo',\n      value: 'ab',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 7,\n      name: 'Callback',\n      value: updateStates,\n      subHooks: []\n    }]);\n    updateStates();\n    childFiber = renderer.root.findByType(Foo)._currentFiber();\n    tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'A',\n      subHooks: []\n    }, {\n      isStateEditable: true,\n      id: 1,\n      name: 'Reducer',\n      value: 'B',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 2,\n      name: 'Ref',\n      value: 'C',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 3,\n      name: 'LayoutEffect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 4,\n      name: 'Effect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 5,\n      name: 'ImperativeHandle',\n      value: outsideRef.current,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 6,\n      name: 'Memo',\n      value: 'Ab',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 7,\n      name: 'Callback',\n      value: updateStates,\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect the current state of all stateful hooks, including useInsertionEffect",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 235,
                "column": 90,
                "index": 6035
            },
            "line": 235,
            "code": "  it('should inspect the current state of all stateful hooks, including useInsertionEffect', () => {\n    const useInsertionEffect = React.useInsertionEffect;\n    const outsideRef = React.createRef();\n    function effect() {}\n    function Foo(props) {\n      const [state1, setState] = React.useState('a');\n      const [state2, dispatch] = React.useReducer((s, a) => a.value, 'b');\n      const ref = React.useRef('c');\n      useInsertionEffect(effect);\n      React.useLayoutEffect(effect);\n      React.useEffect(effect);\n      React.useImperativeHandle(outsideRef, () => {\n        // Return a function so that jest treats them as non-equal.\n        return function Instance() {};\n      }, []);\n      React.useMemo(() => state1 + state2, [state1]);\n      function update() {\n        act(() => {\n          setState('A');\n        });\n        act(() => {\n          dispatch({\n            value: 'B'\n          });\n        });\n        ref.current = 'C';\n      }\n      const memoizedUpdate = React.useCallback(update, []);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: memoizedUpdate\n      }, state1, \" \", state2);\n    }\n    let renderer;\n    act(() => {\n      renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, {\n        prop: \"prop\"\n      }));\n    });\n    let childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const {\n      onClick: updateStates\n    } = renderer.root.findByType('div').props;\n    let tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'a',\n      subHooks: []\n    }, {\n      isStateEditable: true,\n      id: 1,\n      name: 'Reducer',\n      value: 'b',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 2,\n      name: 'Ref',\n      value: 'c',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 3,\n      name: 'InsertionEffect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 4,\n      name: 'LayoutEffect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 5,\n      name: 'Effect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 6,\n      name: 'ImperativeHandle',\n      value: outsideRef.current,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 7,\n      name: 'Memo',\n      value: 'ab',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 8,\n      name: 'Callback',\n      value: updateStates,\n      subHooks: []\n    }]);\n    updateStates();\n    childFiber = renderer.root.findByType(Foo)._currentFiber();\n    tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'A',\n      subHooks: []\n    }, {\n      isStateEditable: true,\n      id: 1,\n      name: 'Reducer',\n      value: 'B',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 2,\n      name: 'Ref',\n      value: 'C',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 3,\n      name: 'InsertionEffect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 4,\n      name: 'LayoutEffect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 5,\n      name: 'Effect',\n      value: effect,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 6,\n      name: 'ImperativeHandle',\n      value: outsideRef.current,\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 7,\n      name: 'Memo',\n      value: 'Ab',\n      subHooks: []\n    }, {\n      isStateEditable: false,\n      id: 8,\n      name: 'Callback',\n      value: updateStates,\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect the value of the current provider in useContext",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 392,
                "column": 68,
                "index": 9839
            },
            "line": 392,
            "code": "  it('should inspect the value of the current provider in useContext', () => {\n    const MyContext = React.createContext('default');\n    function Foo(props) {\n      const value = React.useContext(MyContext);\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(MyContext.Provider, {\n      value: \"contextual\"\n    }, /*#__PURE__*/React.createElement(Foo, {\n      prop: \"prop\"\n    })));\n    const childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: false,\n      id: null,\n      name: 'Context',\n      value: 'contextual',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect forwardRef",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 413,
                "column": 31,
                "index": 10581
            },
            "line": 413,
            "code": "  it('should inspect forwardRef', () => {\n    const obj = function () {};\n    const Foo = React.forwardRef(function (props, ref) {\n      React.useImperativeHandle(ref, () => obj);\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    });\n    const ref = React.createRef();\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, {\n      ref: ref\n    }));\n    const childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: false,\n      id: 0,\n      name: 'ImperativeHandle',\n      value: obj,\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect memo",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 433,
                "column": 25,
                "index": 11260
            },
            "line": 433,
            "code": "  it('should inspect memo', () => {\n    function InnerFoo(props) {\n      const [value] = React.useState('hello');\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const Foo = React.memo(InnerFoo);\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    // TODO: Test renderer findByType is broken for memo. Have to search for the inner.\n    const childFiber = renderer.root.findByType(InnerFoo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'hello',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should inspect custom hooks",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 451,
                "column": 33,
                "index": 11962
            },
            "line": 451,
            "code": "  it('should inspect custom hooks', () => {\n    function useCustom() {\n      const [value] = React.useState('hello');\n      return value;\n    }\n    function Foo(props) {\n      const value = useCustom();\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    const childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: false,\n      id: null,\n      name: 'Custom',\n      value: undefined,\n      subHooks: [{\n        isStateEditable: true,\n        id: 0,\n        name: 'State',\n        value: 'hello',\n        subHooks: []\n      }]\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support composite useTransition hook",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 477,
                "column": 49,
                "index": 12760
            },
            "line": 477,
            "code": "  it('should support composite useTransition hook', () => {\n    function Foo(props) {\n      React.useTransition();\n      const memoizedValue = React.useMemo(() => 'hello', []);\n      React.useMemo(() => 'not used', []);\n      return /*#__PURE__*/React.createElement(\"div\", null, memoizedValue);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    const childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      id: 0,\n      isStateEditable: false,\n      name: 'Transition',\n      value: undefined,\n      subHooks: []\n    }, {\n      id: 1,\n      isStateEditable: false,\n      name: 'Memo',\n      value: 'hello',\n      subHooks: []\n    }, {\n      id: 2,\n      isStateEditable: false,\n      name: 'Memo',\n      value: 'not used',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support useDeferredValue hook",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 507,
                "column": 42,
                "index": 13667
            },
            "line": 507,
            "code": "  it('should support useDeferredValue hook', () => {\n    function Foo(props) {\n      React.useDeferredValue('abc', {\n        timeoutMs: 500\n      });\n      const memoizedValue = React.useMemo(() => 1, []);\n      React.useMemo(() => 2, []);\n      return /*#__PURE__*/React.createElement(\"div\", null, memoizedValue);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    const childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      id: 0,\n      isStateEditable: false,\n      name: 'DeferredValue',\n      value: 'abc',\n      subHooks: []\n    }, {\n      id: 1,\n      isStateEditable: false,\n      name: 'Memo',\n      value: 1,\n      subHooks: []\n    }, {\n      id: 2,\n      isStateEditable: false,\n      name: 'Memo',\n      value: 2,\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support useId hook",
            "suites": [
                "ReactHooksInspectionIntegration"
            ],
            "updatePoint": {
                "line": 539,
                "column": 31,
                "index": 14574
            },
            "line": 539,
            "code": "  it('should support useId hook', () => {\n    function Foo(props) {\n      const id = React.useId();\n      const [state] = React.useState('hello');\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: id\n      }, state);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    const childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree.length).toEqual(2);\n    expect(tree[0].id).toEqual(0);\n    expect(tree[0].isStateEditable).toEqual(false);\n    expect(tree[0].name).toEqual('Id');\n    expect(String(tree[0].value).startsWith(':r')).toBe(true);\n    expect(tree[1]).toEqual({\n      id: 1,\n      isStateEditable: true,\n      name: 'State',\n      value: 'hello',\n      subHooks: []\n    });\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support inspectable values for multiple custom hooks",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 564,
                "column": 67,
                "index": 15489
            },
            "line": 564,
            "code": "    it('should support inspectable values for multiple custom hooks', () => {\n      function useLabeledValue(label) {\n        const [value] = React.useState(label);\n        React.useDebugValue(`custom label ${label}`);\n        return value;\n      }\n      function useAnonymous(label) {\n        const [value] = React.useState(label);\n        return value;\n      }\n      function Example() {\n        useLabeledValue('a');\n        React.useState('b');\n        useAnonymous('c');\n        useLabeledValue('d');\n        return null;\n      }\n      const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Example, null));\n      const childFiber = renderer.root.findByType(Example)._currentFiber();\n      const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n      expect(tree).toEqual([{\n        isStateEditable: false,\n        id: null,\n        name: 'LabeledValue',\n        value: __DEV__ ? 'custom label a' : undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 0,\n          name: 'State',\n          value: 'a',\n          subHooks: []\n        }]\n      }, {\n        isStateEditable: true,\n        id: 1,\n        name: 'State',\n        value: 'b',\n        subHooks: []\n      }, {\n        isStateEditable: false,\n        id: null,\n        name: 'Anonymous',\n        value: undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 2,\n          name: 'State',\n          value: 'c',\n          subHooks: []\n        }]\n      }, {\n        isStateEditable: false,\n        id: null,\n        name: 'LabeledValue',\n        value: __DEV__ ? 'custom label d' : undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 3,\n          name: 'State',\n          value: 'd',\n          subHooks: []\n        }]\n      }]);\n    });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support inspectable values for nested custom hooks",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 628,
                "column": 65,
                "index": 17286
            },
            "line": 628,
            "code": "    it('should support inspectable values for nested custom hooks', () => {\n      function useInner() {\n        React.useDebugValue('inner');\n        React.useState(0);\n      }\n      function useOuter() {\n        React.useDebugValue('outer');\n        useInner();\n      }\n      function Example() {\n        useOuter();\n        return null;\n      }\n      const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Example, null));\n      const childFiber = renderer.root.findByType(Example)._currentFiber();\n      const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n      expect(tree).toEqual([{\n        isStateEditable: false,\n        id: null,\n        name: 'Outer',\n        value: __DEV__ ? 'outer' : undefined,\n        subHooks: [{\n          isStateEditable: false,\n          id: null,\n          name: 'Inner',\n          value: __DEV__ ? 'inner' : undefined,\n          subHooks: [{\n            isStateEditable: true,\n            id: 0,\n            name: 'State',\n            value: 0,\n            subHooks: []\n          }]\n        }]\n      }]);\n    });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support multiple inspectable values per custom hooks",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 664,
                "column": 67,
                "index": 18369
            },
            "line": 664,
            "code": "    it('should support multiple inspectable values per custom hooks', () => {\n      function useMultiLabelCustom() {\n        React.useDebugValue('one');\n        React.useDebugValue('two');\n        React.useDebugValue('three');\n        React.useState(0);\n      }\n      function useSingleLabelCustom(value) {\n        React.useDebugValue(`single ${value}`);\n        React.useState(0);\n      }\n      function Example() {\n        useSingleLabelCustom('one');\n        useMultiLabelCustom();\n        useSingleLabelCustom('two');\n        return null;\n      }\n      const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Example, null));\n      const childFiber = renderer.root.findByType(Example)._currentFiber();\n      const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n      expect(tree).toEqual([{\n        isStateEditable: false,\n        id: null,\n        name: 'SingleLabelCustom',\n        value: __DEV__ ? 'single one' : undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 0,\n          name: 'State',\n          value: 0,\n          subHooks: []\n        }]\n      }, {\n        isStateEditable: false,\n        id: null,\n        name: 'MultiLabelCustom',\n        value: __DEV__ ? ['one', 'two', 'three'] : undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 1,\n          name: 'State',\n          value: 0,\n          subHooks: []\n        }]\n      }, {\n        isStateEditable: false,\n        id: null,\n        name: 'SingleLabelCustom',\n        value: __DEV__ ? 'single two' : undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 2,\n          name: 'State',\n          value: 0,\n          subHooks: []\n        }]\n      }]);\n    });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should ignore useDebugValue() made outside of a custom hook",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 722,
                "column": 67,
                "index": 20102
            },
            "line": 722,
            "code": "    it('should ignore useDebugValue() made outside of a custom hook', () => {\n      function Example() {\n        React.useDebugValue('this is invalid');\n        return null;\n      }\n      const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Example, null));\n      const childFiber = renderer.root.findByType(Example)._currentFiber();\n      const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n      expect(tree).toHaveLength(0);\n    });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support an optional formatter function param",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 732,
                "column": 59,
                "index": 20563
            },
            "line": 732,
            "code": "    it('should support an optional formatter function param', () => {\n      function useCustom() {\n        React.useDebugValue({\n          bar: 123\n        }, object => `bar:${object.bar}`);\n        React.useState(0);\n      }\n      function Example() {\n        useCustom();\n        return null;\n      }\n      const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Example, null));\n      const childFiber = renderer.root.findByType(Example)._currentFiber();\n      const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n      expect(tree).toEqual([{\n        isStateEditable: false,\n        id: null,\n        name: 'Custom',\n        value: __DEV__ ? 'bar:123' : undefined,\n        subHooks: [{\n          isStateEditable: true,\n          id: 0,\n          name: 'State',\n          subHooks: [],\n          value: 0\n        }]\n      }]);\n    });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support defaultProps and lazy",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 761,
                "column": 42,
                "index": 21419
            },
            "line": 761,
            "code": "  it('should support defaultProps and lazy', async () => {\n    const Suspense = React.Suspense;\n    function Foo(props) {\n      const [value] = React.useState(props.defaultValue.substr(0, 3));\n      return /*#__PURE__*/React.createElement(\"div\", null, value);\n    }\n    Foo.defaultProps = {\n      defaultValue: 'default'\n    };\n    async function fakeImport(result) {\n      return {\n        default: result\n      };\n    }\n    const LazyFoo = React.lazy(() => fakeImport(Foo));\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Suspense, {\n      fallback: \"Loading...\"\n    }, /*#__PURE__*/React.createElement(LazyFoo, null)));\n    await LazyFoo;\n    expect(() => {\n      Scheduler.unstable_flushAll();\n    }).toErrorDev(['Foo: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.']);\n    const childFiber = renderer.root._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: 'def',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support an injected dispatcher",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 793,
                "column": 43,
                "index": 22581
            },
            "line": 793,
            "code": "  it('should support an injected dispatcher', () => {\n    function Foo(props) {\n      const [state] = React.useState('hello world');\n      return /*#__PURE__*/React.createElement(\"div\", null, state);\n    }\n    const initial = {};\n    let current = initial;\n    let getterCalls = 0;\n    const setterCalls = [];\n    const FakeDispatcherRef = {\n      get current() {\n        getterCalls++;\n        return current;\n      },\n      set current(value) {\n        setterCalls.push(value);\n        current = value;\n      }\n    };\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    const childFiber = renderer.root._currentFiber();\n    let didCatch = false;\n    try {\n      ReactDebugTools.inspectHooksOfFiber(childFiber, FakeDispatcherRef);\n    } catch (error) {\n      expect(error.message).toBe('Error rendering inspected component');\n      expect(error.cause).toBeInstanceOf(Error);\n      expect(error.cause.message).toBe('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n      didCatch = true;\n    }\n    // avoid false positive if no error was thrown at all\n    expect(didCatch).toBe(true);\n    expect(getterCalls).toBe(1);\n    expect(setterCalls).toHaveLength(2);\n    expect(setterCalls[0]).not.toBe(initial);\n    expect(setterCalls[1]).toBe(initial);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should properly advance the current hook for useContext",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 833,
                "column": 61,
                "index": 24460
            },
            "line": 833,
            "code": "  it('should properly advance the current hook for useContext', () => {\n    const MyContext = React.createContext(1);\n    let incrementCount;\n    function Foo(props) {\n      const context = React.useContext(MyContext);\n      const [data, setData] = React.useState({\n        count: context\n      });\n      incrementCount = () => setData(({\n        count\n      }) => ({\n        count: count + 1\n      }));\n      return /*#__PURE__*/React.createElement(\"div\", null, \"count: \", data.count);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    expect(renderer.toJSON()).toEqual({\n      type: 'div',\n      props: {},\n      children: ['count: ', '1']\n    });\n    act(incrementCount);\n    expect(renderer.toJSON()).toEqual({\n      type: 'div',\n      props: {},\n      children: ['count: ', '2']\n    });\n    const childFiber = renderer.root._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      isStateEditable: false,\n      id: null,\n      name: 'Context',\n      value: 1,\n      subHooks: []\n    }, {\n      isStateEditable: true,\n      id: 0,\n      name: 'State',\n      value: {\n        count: 2\n      },\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support composite useMutableSource hook",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 880,
                "column": 52,
                "index": 25730
            },
            "line": 880,
            "code": "  it('should support composite useMutableSource hook', () => {\n    const createMutableSource = React.createMutableSource || React.unstable_createMutableSource;\n    const useMutableSource = React.useMutableSource || React.unstable_useMutableSource;\n    const mutableSource = createMutableSource({}, () => 1);\n    function Foo(props) {\n      useMutableSource(mutableSource, () => 'snapshot', () => {});\n      React.useMemo(() => 'memo', []);\n      React.useMemo(() => 'not used', []);\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    const childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      id: 0,\n      isStateEditable: false,\n      name: 'MutableSource',\n      value: 'snapshot',\n      subHooks: []\n    }, {\n      id: 1,\n      isStateEditable: false,\n      name: 'Memo',\n      value: 'memo',\n      subHooks: []\n    }, {\n      id: 2,\n      isStateEditable: false,\n      name: 'Memo',\n      value: 'not used',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "should support composite useSyncExternalStore hook",
            "suites": [
                "ReactHooksInspectionIntegration",
                "useDebugValue"
            ],
            "updatePoint": {
                "line": 913,
                "column": 56,
                "index": 26899
            },
            "line": 913,
            "code": "  it('should support composite useSyncExternalStore hook', () => {\n    const useSyncExternalStore = React.useSyncExternalStore;\n    function Foo() {\n      const value = useSyncExternalStore(() => () => {}, () => 'snapshot');\n      React.useMemo(() => 'memo', []);\n      React.useMemo(() => 'not used', []);\n      return value;\n    }\n    const renderer = ReactTestRenderer.create( /*#__PURE__*/React.createElement(Foo, null));\n    const childFiber = renderer.root.findByType(Foo)._currentFiber();\n    const tree = ReactDebugTools.inspectHooksOfFiber(childFiber);\n    expect(tree).toEqual([{\n      id: 0,\n      isStateEditable: false,\n      name: 'SyncExternalStore',\n      value: 'snapshot',\n      subHooks: []\n    }, {\n      id: 1,\n      isStateEditable: false,\n      name: 'Memo',\n      value: 'memo',\n      subHooks: []\n    }, {\n      id: 2,\n      isStateEditable: false,\n      name: 'Memo',\n      value: 'not used',\n      subHooks: []\n    }]);\n  });",
            "file": "ReactHooksInspectionIntegration-test.js",
            "skipped": false,
            "dir": "packages/react-debug-tools/src/__tests__"
        },
        {
            "name": "Should display initial React components",
            "suites": [],
            "updatePoint": {
                "line": 27,
                "column": 47,
                "index": 714
            },
            "line": 27,
            "code": "  test('Should display initial React components', async () => {\n    const appRowCount = await page.evaluate(() => {\n      const {\n        createTestNameSelector,\n        findAllNodes\n      } = window.REACT_DOM_APP;\n      const container = document.getElementById('iframe').contentDocument;\n      const rows = findAllNodes(container, [createTestNameSelector('ListItem')]);\n      return rows.length;\n    });\n    expect(appRowCount).toBe(3);\n    const devToolsRowCount = await devToolsUtils.getElementCount(page, 'ListItem');\n    expect(devToolsRowCount).toBe(3);\n  });",
            "file": "__e2e__/components.test.js",
            "skipped": false,
            "dir": "packages/react-devtools-inline/__tests__"
        },
        {
            "name": "Should display newly added React components",
            "suites": [],
            "updatePoint": {
                "line": 41,
                "column": 51,
                "index": 1285
            },
            "line": 41,
            "code": "  test('Should display newly added React components', async () => {\n    await listAppUtils.addItem(page, 'four');\n    const count = await devToolsUtils.getElementCount(page, 'ListItem');\n    expect(count).toBe(4);\n  });",
            "file": "__e2e__/components.test.js",
            "skipped": false,
            "dir": "packages/react-devtools-inline/__tests__"
        },
        {
            "name": "Should allow elements to be inspected",
            "suites": [],
            "updatePoint": {
                "line": 46,
                "column": 45,
                "index": 1499
            },
            "line": 46,
            "code": "  test('Should allow elements to be inspected', async () => {\n    // Select the first list item in DevTools.\n    await devToolsUtils.selectElement(page, 'ListItem', 'List\\nApp');\n\n    // Prop names/values may not be editable based on the React version.\n    // If they're not editable, make sure they degrade gracefully\n    const isEditableName = semver.gte(config.use.react_version, '17.0.0');\n    const isEditableValue = semver.gte(config.use.react_version, '16.8.0');\n\n    // Then read the inspected values.\n    const [propName, propValue, sourceText] = await page.evaluate(isEditable => {\n      const {\n        createTestNameSelector,\n        findAllNodes\n      } = window.REACT_DOM_DEVTOOLS;\n      const container = document.getElementById('devtools');\n\n      // Get name of first prop\n      const selectorName = isEditable.name ? 'EditableName' : 'NonEditableName';\n      const nameElement = findAllNodes(container, [createTestNameSelector('InspectedElementPropsTree'), createTestNameSelector(selectorName)])[0];\n      const name = isEditable.name ? nameElement.value : nameElement.innerText;\n\n      // Get value of first prop\n      const selectorValue = isEditable.value ? 'EditableValue' : 'NonEditableValue';\n      const valueElement = findAllNodes(container, [createTestNameSelector('InspectedElementPropsTree'), createTestNameSelector(selectorValue)])[0];\n      const source = findAllNodes(container, [createTestNameSelector('InspectedElementView-Source')])[0];\n      const value = isEditable.value ? valueElement.value : valueElement.innerText;\n      return [name, value, source.innerText];\n    }, {\n      name: isEditableName,\n      value: isEditableValue\n    });\n    expect(propName).toBe('label');\n    expect(propValue).toBe('\"one\"');\n    expect(sourceText).toMatch(/ListApp[a-zA-Z]*\\.js/);\n  });",
            "file": "__e2e__/components.test.js",
            "skipped": false,
            "dir": "packages/react-devtools-inline/__tests__"
        },
        {
            "name": "should allow props to be edited",
            "suites": [],
            "updatePoint": {
                "line": 82,
                "column": 39,
                "index": 3304
            },
            "line": 82,
            "code": "  test('should allow props to be edited', async () => {\n    runOnlyForReactRange('>=16.8');\n\n    // Select the first list item in DevTools.\n    await devToolsUtils.selectElement(page, 'ListItem', 'List\\nApp');\n\n    // Then edit the label prop.\n    await page.evaluate(() => {\n      const {\n        createTestNameSelector,\n        focusWithin\n      } = window.REACT_DOM_DEVTOOLS;\n      const container = document.getElementById('devtools');\n      focusWithin(container, [createTestNameSelector('InspectedElementPropsTree'), createTestNameSelector('EditableValue')]);\n    });\n    page.keyboard.press('Backspace'); // \"\n    page.keyboard.press('Backspace'); // e\n    page.keyboard.press('Backspace'); // n\n    page.keyboard.press('Backspace'); // o\n    page.keyboard.insertText('new\"');\n    page.keyboard.press('Enter');\n    await page.waitForFunction(() => {\n      const {\n        createTestNameSelector,\n        findAllNodes\n      } = window.REACT_DOM_APP;\n      const container = document.getElementById('iframe').contentDocument;\n      const rows = findAllNodes(container, [createTestNameSelector('ListItem')])[0];\n      return rows.innerText === 'new';\n    });\n  });",
            "file": "__e2e__/components.test.js",
            "skipped": false,
            "dir": "packages/react-devtools-inline/__tests__"
        },
        {
            "name": "should load and parse hook names for the inspected element",
            "suites": [],
            "updatePoint": {
                "line": 113,
                "column": 66,
                "index": 4500
            },
            "line": 113,
            "code": "  test('should load and parse hook names for the inspected element', async () => {\n    runOnlyForReactRange('>=16.8');\n\n    // Select the List component DevTools.\n    await devToolsUtils.selectElement(page, 'List', 'App');\n\n    // Then click to load and parse hook names.\n    await devToolsUtils.clickButton(page, 'LoadHookNamesButton');\n\n    // Make sure the expected hook names are parsed and displayed eventually.\n    await page.waitForFunction(hookNames => {\n      const {\n        createTestNameSelector,\n        findAllNodes\n      } = window.REACT_DOM_DEVTOOLS;\n      const container = document.getElementById('devtools');\n      const hooksTree = findAllNodes(container, [createTestNameSelector('InspectedElementHooksTree')])[0];\n      if (!hooksTree) {\n        return false;\n      }\n      const hooksTreeText = hooksTree.innerText;\n      for (let i = 0; i < hookNames.length; i++) {\n        if (!hooksTreeText.includes(hookNames[i])) {\n          return false;\n        }\n      }\n      return true;\n    }, ['State(items)', 'Ref(inputRef)']);\n  });",
            "file": "__e2e__/components.test.js",
            "skipped": false,
            "dir": "packages/react-devtools-inline/__tests__"
        },
        {
            "name": "should allow searching for component by name",
            "suites": [],
            "updatePoint": {
                "line": 142,
                "column": 52,
                "index": 5538
            },
            "line": 142,
            "code": "  test('should allow searching for component by name', async () => {\n    async function getComponentSearchResultsCount() {\n      return await page.evaluate(() => {\n        const {\n          createTestNameSelector,\n          findAllNodes\n        } = window.REACT_DOM_DEVTOOLS;\n        const container = document.getElementById('devtools');\n        const element = findAllNodes(container, [createTestNameSelector('ComponentSearchInput-ResultsCount')])[0];\n        return element.innerText;\n      });\n    }\n    async function focusComponentSearch() {\n      await page.evaluate(() => {\n        const {\n          createTestNameSelector,\n          focusWithin\n        } = window.REACT_DOM_DEVTOOLS;\n        const container = document.getElementById('devtools');\n        focusWithin(container, [createTestNameSelector('ComponentSearchInput-Input')]);\n      });\n    }\n    await focusComponentSearch();\n    page.keyboard.insertText('List');\n    let count = await getComponentSearchResultsCount();\n    expect(count).toBe('1 | 4');\n    page.keyboard.insertText('Item');\n    count = await getComponentSearchResultsCount();\n    expect(count).toBe('1 | 3');\n    page.keyboard.press('Enter');\n    count = await getComponentSearchResultsCount();\n    expect(count).toBe('2 | 3');\n    page.keyboard.press('Enter');\n    count = await getComponentSearchResultsCount();\n    expect(count).toBe('3 | 3');\n    page.keyboard.press('Enter');\n    count = await getComponentSearchResultsCount();\n    expect(count).toBe('1 | 3');\n    page.keyboard.press('Shift+Enter');\n    count = await getComponentSearchResultsCount();\n    expect(count).toBe('3 | 3');\n    page.keyboard.press('Shift+Enter');\n    count = await getComponentSearchResultsCount();\n    expect(count).toBe('2 | 3');\n    page.keyboard.press('Shift+Enter');\n    count = await getComponentSearchResultsCount();\n    expect(count).toBe('1 | 3');\n  });",
            "file": "__e2e__/components.test.js",
            "skipped": false,
            "dir": "packages/react-devtools-inline/__tests__"
        },
        {
            "name": "should record renders and commits when active",
            "suites": [],
            "updatePoint": {
                "line": 26,
                "column": 53,
                "index": 682
            },
            "line": 26,
            "code": "  test('should record renders and commits when active', async () => {\n    // Profiling is only available in 16.5 and over\n    runOnlyForReactRange('>=16.5');\n    async function getSnapshotSelectorText() {\n      return await page.evaluate(() => {\n        const {\n          createTestNameSelector,\n          findAllNodes\n        } = window.REACT_DOM_DEVTOOLS;\n        const container = document.getElementById('devtools');\n        const input = findAllNodes(container, [createTestNameSelector('SnapshotSelector-Input')])[0];\n        const label = findAllNodes(container, [createTestNameSelector('SnapshotSelector-Label')])[0];\n        return `${input.value}${label.innerText}`;\n      });\n    }\n    async function clickButtonAndVerifySnapshotSelectorText(buttonTagName, expectedText) {\n      await devToolsUtils.clickButton(page, buttonTagName);\n      const text = await getSnapshotSelectorText();\n      expect(text).toBe(expectedText);\n    }\n    await devToolsUtils.clickButton(page, 'ProfilerToggleButton');\n    await listAppUtils.addItem(page, 'four');\n    await listAppUtils.addItem(page, 'five');\n    await listAppUtils.addItem(page, 'six');\n    await devToolsUtils.clickButton(page, 'ProfilerToggleButton');\n    await page.waitForFunction(() => {\n      const {\n        createTestNameSelector,\n        findAllNodes\n      } = window.REACT_DOM_DEVTOOLS;\n      const container = document.getElementById('devtools');\n      const input = findAllNodes(container, [createTestNameSelector('SnapshotSelector-Input')]);\n      return input.length === 1;\n    });\n    const text = await getSnapshotSelectorText();\n    expect(text).toBe('1 / 3');\n    await clickButtonAndVerifySnapshotSelectorText('SnapshotSelector-NextButton', '2 / 3');\n    await clickButtonAndVerifySnapshotSelectorText('SnapshotSelector-NextButton', '3 / 3');\n    await clickButtonAndVerifySnapshotSelectorText('SnapshotSelector-NextButton', '1 / 3');\n    await clickButtonAndVerifySnapshotSelectorText('SnapshotSelector-PreviousButton', '3 / 3');\n    await clickButtonAndVerifySnapshotSelectorText('SnapshotSelector-PreviousButton', '2 / 3');\n    await clickButtonAndVerifySnapshotSelectorText('SnapshotSelector-PreviousButton', '1 / 3');\n    await clickButtonAndVerifySnapshotSelectorText('SnapshotSelector-PreviousButton', '3 / 3');\n  });",
            "file": "__e2e__/profiler.test.js",
            "skipped": false,
            "dir": "packages/react-devtools-inline/__tests__"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in transform-react-version-pragma-test.js:106\nRemove `.only` to restore test checks"
}