{"repo":"quilljs/quill","url":"https://github.com/quilljs/quill","branch":"develop","configs":[{"package":"quill","lang":"js","dir":"test","framework":"jasmine","pattern":"**/*.{js,ts}"}],"tests":[{"name":"insert","suites":["Block Embed"],"line":3,"updatePoint":{"line":3,"column":12,"index":95},"code":"  it('insert', function () {\n    const scroll = this.initialize(Scroll, '<p>0123</p>');\n    scroll.insertAt(2, 'video', '#');\n    expect(scroll.domNode).toEqualHTML(`\n      <p>01</p>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n      <p>23</p>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"split newline","suites":["Block Embed"],"line":12,"updatePoint":{"line":12,"column":19,"index":403},"code":"  it('split newline', function () {\n    const scroll = this.initialize(Scroll, '<p>0123</p>');\n    scroll.insertAt(4, 'video', '#');\n    expect(scroll.domNode).toEqualHTML(`\n      <p>0123</p>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n      <p><br></p>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert end of document","suites":["Block Embed"],"line":21,"updatePoint":{"line":21,"column":28,"index":724},"code":"  it('insert end of document', function () {\n    const scroll = this.initialize(Scroll, '<p>0123</p>');\n    scroll.insertAt(5, 'video', '#');\n    expect(scroll.domNode).toEqualHTML(`\n      <p>0123</p>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert text before","suites":["Block Embed"],"line":29,"updatePoint":{"line":29,"column":24,"index":1023},"code":"  it('insert text before', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(0, 'Test');\n    expect(scroll.domNode).toEqualHTML(`\n      <p>Test</p>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert text after","suites":["Block Embed"],"line":37,"updatePoint":{"line":37,"column":23,"index":1385},"code":"  it('insert text after', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(1, 'Test');\n    expect(scroll.domNode).toEqualHTML(`\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n      <p>Test</p>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert inline embed before","suites":["Block Embed"],"line":45,"updatePoint":{"line":45,"column":32,"index":1756},"code":"  it('insert inline embed before', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(0, 'image', '/assets/favicon.png');\n    expect(scroll.domNode).toEqualHTML(`\n      <p><img src=\"/assets/favicon.png\"></p>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert inline embed after","suites":["Block Embed"],"line":53,"updatePoint":{"line":53,"column":31,"index":2177},"code":"  it('insert inline embed after', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(1, 'image', '/assets/favicon.png');\n    expect(scroll.domNode).toEqualHTML(`\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n      <p><img src=\"/assets/favicon.png\"></p>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert block embed before","suites":["Block Embed"],"line":61,"updatePoint":{"line":61,"column":31,"index":2598},"code":"  it('insert block embed before', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(0, 'video', '#1');\n    expect(scroll.domNode).toEqualHTML(`\n      <iframe src=\"#1\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert block embed after","suites":["Block Embed"],"line":69,"updatePoint":{"line":69,"column":30,"index":3045},"code":"  it('insert block embed after', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(1, 'video', '#1');\n    expect(scroll.domNode).toEqualHTML(`\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n      <iframe src=\"#1\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert newline before","suites":["Block Embed"],"line":77,"updatePoint":{"line":77,"column":27,"index":3489},"code":"  it('insert newline before', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(0, '\\n');\n    scroll.optimize();\n    expect(scroll.domNode).toEqualHTML(`\n      <p><br></p>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert multiple newlines before","suites":["Block Embed"],"line":86,"updatePoint":{"line":86,"column":37,"index":3886},"code":"  it('insert multiple newlines before', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(0, '\\n\\n\\n');\n    scroll.optimize();\n    expect(scroll.domNode).toEqualHTML(`\n      <p><br></p>\n      <p><br></p>\n      <p><br></p>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"insert newline after","suites":["Block Embed"],"line":97,"updatePoint":{"line":97,"column":26,"index":4312},"code":"  it('insert newline after', function () {\n    const scroll = this.initialize(Scroll, '<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.insertAt(1, '\\n');\n    scroll.optimize();\n    expect(scroll.domNode).toEqualHTML(`\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n      <p><br></p>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"delete preceding newline","suites":["Block Embed"],"line":106,"updatePoint":{"line":106,"column":30,"index":4702},"code":"  it('delete preceding newline', function () {\n    const scroll = this.initialize(Scroll, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    scroll.deleteAt(4, 1);\n    expect(scroll.domNode).toEqualHTML(`\n      <p>0123</p>\n      <iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n    `);\n  });","file":"unit/blots/block-embed.js","skipped":false,"dir":"test"},{"name":"childless","suites":["Block"],"line":3,"updatePoint":{"line":3,"column":15,"index":92},"code":"  it('childless', function () {\n    const scroll = this.initialize(Scroll, '');\n    const block = scroll.create('block');\n    block.optimize();\n    expect(block.domNode).toEqualHTML('<br>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"insert into empty","suites":["Block"],"line":9,"updatePoint":{"line":9,"column":23,"index":297},"code":"  it('insert into empty', function () {\n    const scroll = this.initialize(Scroll, '');\n    const block = scroll.create('block');\n    block.insertAt(0, 'Test');\n    expect(block.domNode).toEqualHTML('Test');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"insert newlines","suites":["Block"],"line":15,"updatePoint":{"line":15,"column":21,"index":509},"code":"  it('insert newlines', function () {\n    const scroll = this.initialize(Scroll, '<p><br></p>');\n    scroll.insertAt(0, '\\n\\n\\n');\n    expect(scroll.domNode).toEqualHTML('<p><br></p><p><br></p><p><br></p><p><br></p>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"insert multiline","suites":["Block"],"line":20,"updatePoint":{"line":20,"column":22,"index":735},"code":"  it('insert multiline', function () {\n    const scroll = this.initialize(Scroll, '<p>Hello World!</p>');\n    scroll.insertAt(6, 'pardon\\nthis\\n\\ninterruption\\n');\n    expect(scroll.domNode).toEqualHTML(`\n      <p>Hello pardon</p>\n      <p>this</p>\n      <p><br></p>\n      <p>interruption</p>\n      <p>World!</p>\n    `);\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"insert into formatted","suites":["Block"],"line":31,"updatePoint":{"line":31,"column":27,"index":1067},"code":"  it('insert into formatted', function () {\n    const scroll = this.initialize(Scroll, '<h1>Welcome</h1>');\n    scroll.insertAt(3, 'l\\n');\n    expect(scroll.domNode.firstChild.outerHTML).toEqualHTML('<h1>Well</h1>');\n    expect(scroll.domNode.childNodes[1].outerHTML).toEqualHTML('<h1>come</h1>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"delete line contents","suites":["Block"],"line":37,"updatePoint":{"line":37,"column":26,"index":1370},"code":"  it('delete line contents', function () {\n    const scroll = this.initialize(Scroll, '<p>Hello</p><p>World!</p>');\n    scroll.deleteAt(0, 5);\n    expect(scroll.domNode).toEqualHTML('<p><br></p><p>World!</p>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"join lines","suites":["Block"],"line":42,"updatePoint":{"line":42,"column":16,"index":1577},"code":"  it('join lines', function () {\n    const scroll = this.initialize(Scroll, '<h1>Hello</h1><h2>World!</h2>');\n    scroll.deleteAt(5, 1);\n    expect(scroll.domNode).toEqualHTML('<h2>HelloWorld!</h2>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"join line with empty","suites":["Block"],"line":47,"updatePoint":{"line":47,"column":26,"index":1794},"code":"  it('join line with empty', function () {\n    const scroll = this.initialize(Scroll, '<p>Hello<strong>World</strong></p><p><br></p>');\n    scroll.deleteAt(10, 1);\n    expect(scroll.domNode).toEqualHTML('<p>Hello<strong>World</strong></p>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"join empty lines","suites":["Block"],"line":52,"updatePoint":{"line":52,"column":22,"index":2038},"code":"  it('join empty lines', function () {\n    const scroll = this.initialize(Scroll, '<h1><br></h1><p><br></p>');\n    scroll.deleteAt(1, 1);\n    expect(scroll.domNode).toEqualHTML('<h1><br></h1>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"format empty","suites":["Block"],"line":57,"updatePoint":{"line":57,"column":18,"index":2235},"code":"  it('format empty', function () {\n    const scroll = this.initialize(Scroll, '<p><br></p>');\n    scroll.formatAt(0, 1, 'header', 1);\n    expect(scroll.domNode).toEqualHTML('<h1><br></h1>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"format newline","suites":["Block"],"line":62,"updatePoint":{"line":62,"column":20,"index":2434},"code":"  it('format newline', function () {\n    const scroll = this.initialize(Scroll, '<h1>Hello</h1>');\n    scroll.formatAt(5, 1, 'header', 2);\n    expect(scroll.domNode).toEqualHTML('<h2>Hello</h2>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"remove unnecessary break","suites":["Block"],"line":67,"updatePoint":{"line":67,"column":30,"index":2647},"code":"  it('remove unnecessary break', function () {\n    const scroll = this.initialize(Scroll, '<p>Test</p>');\n    scroll.children.head.domNode.appendChild(document.createElement('br'));\n    scroll.update();\n    expect(scroll.domNode).toEqualHTML('<p>Test</p>');\n  });","file":"unit/blots/block.js","skipped":false,"dir":"test"},{"name":"format order","suites":["Inline"],"line":3,"updatePoint":{"line":3,"column":18,"index":96},"code":"  it('format order', function () {\n    const scroll = this.initialize(Scroll, '<p>Hello World!</p>');\n    scroll.formatAt(0, 1, 'bold', true);\n    scroll.formatAt(0, 1, 'italic', true);\n    scroll.formatAt(2, 1, 'italic', true);\n    scroll.formatAt(2, 1, 'bold', true);\n    expect(scroll.domNode).toEqualHTML('<p><strong><em>H</em></strong>e<strong><em>l</em></strong>lo World!</p>');\n  });","file":"unit/blots/inline.js","skipped":false,"dir":"test"},{"name":"reorder","suites":["Inline"],"line":11,"updatePoint":{"line":11,"column":13,"index":482},"code":"  it('reorder', function () {\n    const scroll = this.initialize(Scroll, '<p>0<strong>12</strong>3</p>');\n    const p = scroll.domNode.firstChild;\n    const em = document.createElement('em');\n    Array.from(p.childNodes).forEach(function (node) {\n      em.appendChild(node);\n    });\n    p.appendChild(em);\n    expect(scroll.domNode).toEqualHTML('<p><em>0<strong>12</strong>3</em></p>');\n    scroll.update();\n    expect(scroll.domNode).toEqualHTML('<p><em>0</em><strong><em>12</em></strong><em>3</em></p>');\n  });","file":"unit/blots/inline.js","skipped":false,"dir":"test"},{"name":"initialize empty document","suites":["Scroll"],"line":7,"updatePoint":{"line":7,"column":31,"index":291},"code":"  it('initialize empty document', function () {\n    const scroll = this.initialize(Scroll, '');\n    expect(scroll.domNode).toEqualHTML('<p><br></p>');\n  });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"api change","suites":["Scroll"],"line":11,"updatePoint":{"line":11,"column":16,"index":433},"code":"  it('api change', function () {\n    const scroll = this.initialize(Scroll, '<p>Hello World!</p>');\n    spyOn(scroll.emitter, 'emit').and.callThrough();\n    scroll.insertAt(5, '!');\n    expect(scroll.emitter.emit).toHaveBeenCalledWith(Emitter.events.SCROLL_OPTIMIZE, jasmine.any(Array), jasmine.any(Object));\n  });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"user change","suites":["Scroll"],"line":17,"updatePoint":{"line":17,"column":17,"index":749},"code":"  it('user change', function (done) {\n    const scroll = this.initialize(Scroll, '<p>Hello World!</p>');\n    spyOn(scroll.emitter, 'emit').and.callThrough();\n    scroll.domNode.firstChild.appendChild(document.createTextNode('!'));\n    setTimeout(function () {\n      expect(scroll.emitter.emit).toHaveBeenCalledWith(Emitter.events.SCROLL_OPTIMIZE, jasmine.any(Array), jasmine.any(Object));\n      expect(scroll.emitter.emit).toHaveBeenCalledWith(Emitter.events.SCROLL_UPDATE, Emitter.sources.USER, jasmine.any(Array));\n      done();\n    }, 1);\n  });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"prevent dragstart","suites":["Scroll"],"line":27,"updatePoint":{"line":27,"column":23,"index":1303},"code":"  it('prevent dragstart', function () {\n    const scroll = this.initialize(Scroll, '<p>Hello World!</p>');\n    const dragstart = new Event('dragstart');\n    spyOn(dragstart, 'preventDefault');\n    scroll.domNode.dispatchEvent(dragstart);\n    expect(dragstart.preventDefault).toHaveBeenCalled();\n  });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"text","suites":["Scroll","leaf()"],"line":35,"updatePoint":{"line":35,"column":12,"index":1628},"code":"    it('text', function () {\n      const scroll = this.initialize(Scroll, '<p>Tests</p>');\n      const [leaf, offset] = scroll.leaf(2);\n      expect(leaf.value()).toEqual('Tests');\n      expect(offset).toEqual(2);\n    });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"precise","suites":["Scroll","leaf()"],"line":41,"updatePoint":{"line":41,"column":15,"index":1853},"code":"    it('precise', function () {\n      const scroll = this.initialize(Scroll, '<p><u>0</u><s>1</s><u>2</u><s>3</s><u>4</u></p>');\n      const [leaf, offset] = scroll.leaf(3);\n      expect(leaf.value()).toEqual('2');\n      expect(offset).toEqual(1);\n    });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"newline","suites":["Scroll","leaf()"],"line":47,"updatePoint":{"line":47,"column":15,"index":2109},"code":"    it('newline', function () {\n      const scroll = this.initialize(Scroll, '<p>0123</p><p>5678</p>');\n      const [leaf, offset] = scroll.leaf(4);\n      expect(leaf.value()).toEqual('0123');\n      expect(offset).toEqual(4);\n    });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"cursor","suites":["Scroll","leaf()"],"line":53,"updatePoint":{"line":53,"column":14,"index":2342},"code":"    it('cursor', function () {\n      const selection = this.initialize(Selection, '<p><u>0</u>1<u>2</u></p>');\n      selection.setRange(new Range(2));\n      selection.format('strike', true);\n      const [leaf, offset] = selection.scroll.leaf(2);\n      expect(leaf instanceof Cursor).toBe(true);\n      expect(offset).toEqual(0);\n    });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"beyond document","suites":["Scroll","leaf()"],"line":61,"updatePoint":{"line":61,"column":23,"index":2687},"code":"    it('beyond document', function () {\n      const scroll = this.initialize(Scroll, '<p>Test</p>');\n      const [leaf, offset] = scroll.leaf(10);\n      expect(leaf).toEqual(null);\n      expect(offset).toEqual(-1);\n    });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"does not mutate the input","suites":["Scroll","insertContents()"],"line":69,"updatePoint":{"line":69,"column":33,"index":2971},"code":"    it('does not mutate the input', function () {\n      const scroll = this.initialize(Scroll, '<p>Test</p>');\n      const delta = new Delta().insert('\\n');\n      const clonedDelta = new Delta(structuredClone(delta.ops));\n      scroll.insertContents(0, delta);\n      expect(delta.ops).toEqual(clonedDelta.ops);\n    });","file":"unit/blots/scroll.js","skipped":false,"dir":"test"},{"name":"triggers events on compositionstart","suites":["Selection"],"line":5,"updatePoint":{"line":5,"column":41,"index":220},"code":"  it('triggers events on compositionstart', function (done) {\n    const scroll = this.initialize(Scroll, '<p></p>');\n    const emitter = new Emitter();\n    new Composition(scroll, emitter);\n    emitter.on(Emitter.events.COMPOSITION_BEFORE_START, () => {\n      done();\n    });\n    scroll.domNode.dispatchEvent(new CompositionEvent('compositionstart'));\n  });","file":"unit/core/composition.js","skipped":false,"dir":"test"},{"name":"text","suites":["Editor","insert"],"line":6,"updatePoint":{"line":6,"column":12,"index":217},"code":"    it('text', function () {\n      const editor = this.initialize(Editor, '<p><strong>0123</strong></p>');\n      editor.insertText(2, '!!');\n      expect(editor.getDelta()).toEqual(new Delta().insert('01!!23', {\n        bold: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML('<p><strong>01!!23</strong></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"embed","suites":["Editor","insert"],"line":14,"updatePoint":{"line":14,"column":13,"index":557},"code":"    it('embed', function () {\n      const editor = this.initialize(Editor, '<p><strong>0123</strong></p>');\n      editor.insertEmbed(2, 'image', '/assets/favicon.png');\n      expect(editor.getDelta()).toEqual(new Delta().insert('01', {\n        bold: true\n      }).insert({\n        image: '/assets/favicon.png'\n      }, {\n        bold: true\n      }).insert('23', {\n        bold: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML('<p><strong>01<img src=\"/assets/favicon.png\">23</strong></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"on empty line","suites":["Editor","insert"],"line":28,"updatePoint":{"line":28,"column":21,"index":1085},"code":"    it('on empty line', function () {\n      const editor = this.initialize(Editor, '<p>0</p><p><br></p><p>3</p>');\n      editor.insertText(2, '!');\n      expect(editor.getDelta()).toEqual(new Delta().insert('0\\n!\\n3\\n'));\n      expect(this.container).toEqualHTML('<p>0</p><p>!</p><p>3</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"end of document","suites":["Editor","insert"],"line":34,"updatePoint":{"line":34,"column":23,"index":1387},"code":"    it('end of document', function () {\n      const editor = this.initialize(Editor, '<p>Hello</p>');\n      editor.insertText(6, 'World!');\n      expect(editor.getDelta()).toEqual(new Delta().insert('Hello\\nWorld!\\n'));\n      expect(this.container).toEqualHTML('<p>Hello</p><p>World!</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"end of document with newline","suites":["Editor","insert"],"line":40,"updatePoint":{"line":40,"column":36,"index":1699},"code":"    it('end of document with newline', function () {\n      const editor = this.initialize(Editor, '<p>Hello</p>');\n      editor.insertText(6, 'World!\\n');\n      expect(editor.getDelta()).toEqual(new Delta().insert('Hello\\nWorld!\\n'));\n      expect(this.container).toEqualHTML('<p>Hello</p><p>World!</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"embed at end of document with newline","suites":["Editor","insert"],"line":46,"updatePoint":{"line":46,"column":45,"index":2022},"code":"    it('embed at end of document with newline', function () {\n      const editor = this.initialize(Editor, '<p>Hello</p>');\n      editor.insertEmbed(6, 'image', '/assets/favicon.png');\n      expect(editor.getDelta()).toEqual(new Delta().insert('Hello\\n').insert({\n        image: '/assets/favicon.png'\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML('<p>Hello</p><p><img src=\"/assets/favicon.png\"></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"newline splitting","suites":["Editor","insert"],"line":54,"updatePoint":{"line":54,"column":25,"index":2431},"code":"    it('newline splitting', function () {\n      const editor = this.initialize(Editor, '<p><strong>0123</strong></p>');\n      editor.insertText(2, '\\n');\n      expect(editor.getDelta()).toEqual(new Delta().insert('01', {\n        bold: true\n      }).insert('\\n').insert('23', {\n        bold: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML(`\n        <p><strong>01</strong></p>\n        <p><strong>23</strong></p>`);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"prepend newline","suites":["Editor","insert"],"line":66,"updatePoint":{"line":66,"column":23,"index":2873},"code":"    it('prepend newline', function () {\n      const editor = this.initialize(Editor, '<p><strong>0123</strong></p>');\n      editor.insertText(0, '\\n');\n      expect(editor.getDelta()).toEqual(new Delta().insert('\\n').insert('0123', {\n        bold: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML(`\n        <p><br></p>\n        <p><strong>0123</strong></p>`);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"append newline","suites":["Editor","insert"],"line":76,"updatePoint":{"line":76,"column":22,"index":3260},"code":"    it('append newline', function () {\n      const editor = this.initialize(Editor, '<p><strong>0123</strong></p>');\n      editor.insertText(4, '\\n');\n      expect(editor.getDelta()).toEqual(new Delta().insert('0123', {\n        bold: true\n      }).insert('\\n\\n'));\n      expect(this.container).toEqualHTML(`\n        <p><strong>0123</strong></p>\n        <p><br></p>`);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"multiline text","suites":["Editor","insert"],"line":86,"updatePoint":{"line":86,"column":22,"index":3636},"code":"    it('multiline text', function () {\n      const editor = this.initialize(Editor, '<p><strong>0123</strong></p>');\n      editor.insertText(2, '\\n!!\\n!!\\n');\n      expect(editor.getDelta()).toEqual(new Delta().insert('01', {\n        bold: true\n      }).insert('\\n').insert('!!', {\n        bold: true\n      }).insert('\\n').insert('!!', {\n        bold: true\n      }).insert('\\n').insert('23', {\n        bold: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML(`\n        <p><strong>01</strong></p>\n        <p><strong>!!</strong></p>\n        <p><strong>!!</strong></p>\n        <p><strong>23</strong></p>`);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"multiple newlines","suites":["Editor","insert"],"line":104,"updatePoint":{"line":104,"column":25,"index":4270},"code":"    it('multiple newlines', function () {\n      const editor = this.initialize(Editor, '<p><strong>0123</strong></p>');\n      editor.insertText(2, '\\n\\n');\n      expect(editor.getDelta()).toEqual(new Delta().insert('01', {\n        bold: true\n      }).insert('\\n\\n').insert('23', {\n        bold: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML(`\n        <p><strong>01</strong></p>\n        <p><br></p>\n        <p><strong>23</strong></p>`);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"text removing formatting","suites":["Editor","insert"],"line":117,"updatePoint":{"line":117,"column":32,"index":4745},"code":"    it('text removing formatting', function () {\n      const editor = this.initialize(Editor, '<p><s>01</s></p>');\n      editor.insertText(2, '23', {\n        bold: false,\n        strike: false\n      });\n      expect(editor.getDelta()).toEqual(new Delta().insert('01', {\n        strike: true\n      }).insert('23\\n'));\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"inner node","suites":["Editor","delete"],"line":129,"updatePoint":{"line":129,"column":18,"index":5097},"code":"    it('inner node', function () {\n      const editor = this.initialize(Editor, '<p><strong><em>0123</em></strong></p>');\n      editor.deleteText(1, 2);\n      expect(editor.getDelta()).toEqual(new Delta().insert('03', {\n        bold: true,\n        italic: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML('<p><strong><em>03</em></strong></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"parts of multiple lines","suites":["Editor","delete"],"line":138,"updatePoint":{"line":138,"column":31,"index":5484},"code":"    it('parts of multiple lines', function () {\n      const editor = this.initialize(Editor, '<p><em>0123</em></p><p><em>5678</em></p>');\n      editor.deleteText(2, 5);\n      expect(editor.getDelta()).toEqual(new Delta().insert('0178', {\n        italic: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML('<p><em>0178</em></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"entire line keeping newline","suites":["Editor","delete"],"line":146,"updatePoint":{"line":146,"column":35,"index":5845},"code":"    it('entire line keeping newline', function () {\n      const editor = this.initialize(Editor, '<p><strong><em>0123</em></strong></p>');\n      editor.deleteText(0, 4);\n      expect(editor.getDelta()).toEqual(new Delta().insert('\\n'));\n      expect(this.container).toEqualHTML('<p><br></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"newline","suites":["Editor","delete"],"line":152,"updatePoint":{"line":152,"column":15,"index":6127},"code":"    it('newline', function () {\n      const editor = this.initialize(Editor, '<p><em>0123</em></p><p><em>5678</em></p>');\n      editor.deleteText(4, 1);\n      expect(editor.getDelta()).toEqual(new Delta().insert('01235678', {\n        italic: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML('<p><em>01235678</em></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"entire document","suites":["Editor","delete"],"line":160,"updatePoint":{"line":160,"column":23,"index":6484},"code":"    it('entire document', function () {\n      const editor = this.initialize(Editor, '<p><strong><em>0123</em></strong></p>');\n      editor.deleteText(0, 5);\n      expect(editor.getDelta()).toEqual(new Delta().insert('\\n'));\n      expect(this.container).toEqualHTML('<p><br></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"multiple complete lines","suites":["Editor","delete"],"line":166,"updatePoint":{"line":166,"column":31,"index":6782},"code":"    it('multiple complete lines', function () {\n      const editor = this.initialize(Editor, '<p><em>012</em></p><p><em>456</em></p><p><em>890</em></p>');\n      editor.deleteText(0, 8);\n      expect(editor.getDelta()).toEqual(new Delta().insert('890', {\n        italic: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML('<p><em>890</em></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"line","suites":["Editor","format"],"line":176,"updatePoint":{"line":176,"column":12,"index":7176},"code":"    it('line', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.formatLine(1, 1, {\n        header: 1\n      });\n      expect(editor.scroll.domNode).toEqualHTML('<h1>0123</h1>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"unwrap","suites":["Editor","removeFormat"],"line":185,"updatePoint":{"line":185,"column":14,"index":7449},"code":"    it('unwrap', function () {\n      const editor = this.initialize(Editor, '<p>0<em>12</em>3</p>');\n      editor.removeFormat(1, 2);\n      expect(this.container).toEqualHTML('<p>0123</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"split inline","suites":["Editor","removeFormat"],"line":190,"updatePoint":{"line":190,"column":20,"index":7654},"code":"    it('split inline', function () {\n      const editor = this.initialize(Editor, '<p>0<strong><em>12</em></strong>3</p>');\n      editor.removeFormat(1, 1);\n      expect(this.container).toEqualHTML('<p>01<strong><em>2</em></strong>3</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"partial line","suites":["Editor","removeFormat"],"line":195,"updatePoint":{"line":195,"column":20,"index":7902},"code":"    it('partial line', function () {\n      const editor = this.initialize(Editor, '<h1>01</h1><ol><li data-list=\"ordered\">34</li></ol>');\n      editor.removeFormat(1, 3);\n      expect(this.container).toEqualHTML('<p>01</p><p>34</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"remove embed","suites":["Editor","removeFormat"],"line":200,"updatePoint":{"line":200,"column":20,"index":8145},"code":"    it('remove embed', function () {\n      const editor = this.initialize(Editor, '<p>0<img src=\"/assets/favicon.png\">2</p>');\n      editor.removeFormat(1, 1);\n      expect(this.container).toEqualHTML('<p>02</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"combined","suites":["Editor","removeFormat"],"line":205,"updatePoint":{"line":205,"column":16,"index":8364},"code":"    it('combined', function () {\n      const editor = this.initialize(Editor, `\n        <h1>01<img src=\"/assets/favicon.png\">3</h1>\n        <ol>\n          <li data-list=\"ordered\">5<strong>6<em>78</em>9</strong>0</li>\n        </ol>\n      `);\n      editor.removeFormat(1, 7);\n      expect(this.container).toEqualHTML(`\n        <p>013</p>\n        <p>567<strong><em>8</em>9</strong>0</p>\n      `);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"end of document","suites":["Editor","removeFormat"],"line":218,"updatePoint":{"line":218,"column":23,"index":8773},"code":"    it('end of document', function () {\n      const editor = this.initialize(Editor, `\n        <ol>\n          <li data-list=\"ordered\">0123</li>\n          <li data-list=\"ordered\">5678</li>\n        </ol>\n      `);\n      editor.removeFormat(0, 12);\n      expect(this.container).toEqualHTML(`\n        <p>0123</p>\n        <p>5678</p>\n      `);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert","suites":["Editor","applyDelta"],"line":233,"updatePoint":{"line":233,"column":14,"index":9156},"code":"    it('insert', function () {\n      const editor = this.initialize(Editor, '<p></p>');\n      editor.applyDelta(new Delta().insert('01'));\n      expect(this.container).toEqualHTML('<p>01</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"attributed insert","suites":["Editor","applyDelta"],"line":238,"updatePoint":{"line":238,"column":25,"index":9369},"code":"    it('attributed insert', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(2).insert('|', {\n        bold: true\n      }));\n      expect(this.container).toEqualHTML('<p>01<strong>|</strong>23</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"format","suites":["Editor","applyDelta"],"line":245,"updatePoint":{"line":245,"column":14,"index":9634},"code":"    it('format', function () {\n      const editor = this.initialize(Editor, '<p>01</p>');\n      editor.applyDelta(new Delta().retain(2, {\n        bold: true\n      }));\n      expect(this.container).toEqualHTML('<p><strong>01</strong></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"discontinuous formats","suites":["Editor","applyDelta"],"line":252,"updatePoint":{"line":252,"column":29,"index":9897},"code":"    it('discontinuous formats', function () {\n      const editor = this.initialize(Editor, '');\n      const delta = new Delta().insert('ab', {\n        bold: true\n      }).insert('23\\n45').insert('cd', {\n        bold: true\n      });\n      editor.applyDelta(delta);\n      expect(this.container).toEqualHTML('<p><strong>ab</strong>23</p><p>45<strong>cd</strong></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"unformatted insert","suites":["Editor","applyDelta"],"line":262,"updatePoint":{"line":262,"column":26,"index":10268},"code":"    it('unformatted insert', function () {\n      const editor = this.initialize(Editor, '<p><em>01</em></p>');\n      editor.applyDelta(new Delta().retain(1).insert('|'));\n      expect(this.container).toEqualHTML('<p><em>0</em>|<em>1</em></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert at format boundary","suites":["Editor","applyDelta"],"line":267,"updatePoint":{"line":267,"column":33,"index":10528},"code":"    it('insert at format boundary', function () {\n      const editor = this.initialize(Editor, '<p><em>0</em><u>1</u></p>');\n      editor.applyDelta(new Delta().retain(1).insert('|', {\n        strike: true\n      }));\n      expect(this.container).toEqualHTML('<p><em>0</em><s>|</s><u>1</u></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"unformatted newline","suites":["Editor","applyDelta"],"line":274,"updatePoint":{"line":274,"column":27,"index":10826},"code":"    it('unformatted newline', function () {\n      const editor = this.initialize(Editor, '<h1>01</h1>');\n      editor.applyDelta(new Delta().retain(2).insert('\\n'));\n      expect(this.container).toEqualHTML('<p>01</p><h1><br></h1>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"formatted embed","suites":["Editor","applyDelta"],"line":279,"updatePoint":{"line":279,"column":23,"index":11064},"code":"    it('formatted embed', function () {\n      const editor = this.initialize(Editor, '');\n      editor.applyDelta(new Delta().insert({\n        image: '/assets/favicon.png'\n      }, {\n        italic: true\n      }));\n      expect(this.container).toEqualHTML('<p><em><img src=\"/assets/favicon.png\"></em></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert text before block embed","suites":["Editor","applyDelta"],"line":288,"updatePoint":{"line":288,"column":38,"index":11395},"code":"    it('insert text before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).insert('5678'));\n      expect(this.container).toEqualHTML('<p>0123</p><p>5678</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert attributed text before block embed","suites":["Editor","applyDelta"],"line":293,"updatePoint":{"line":293,"column":49,"index":11823},"code":"    it('insert attributed text before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).insert('5678', {\n        bold: true\n      }));\n      expect(this.container).toEqualHTML('<p>0123</p><p><strong>5678</strong></p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert text with newline before block embed","suites":["Editor","applyDelta"],"line":300,"updatePoint":{"line":300,"column":51,"index":12300},"code":"    it('insert text with newline before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).insert('5678\\n'));\n      expect(this.container).toEqualHTML('<p>0123</p><p>5678</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert formatted lines before block embed","suites":["Editor","applyDelta"],"line":305,"updatePoint":{"line":305,"column":49,"index":12730},"code":"    it('insert formatted lines before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).insert('a\\nb').insert('\\n', {\n        header: 1\n      }));\n      expect(this.container).toEqualHTML('<p>0123</p><p>a</p><h1>b</h1><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert attributed text with newline before block embed","suites":["Editor","applyDelta"],"line":312,"updatePoint":{"line":312,"column":62,"index":13220},"code":"    it('insert attributed text with newline before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).insert('5678', {\n        bold: true\n      }).insert('\\n'));\n      expect(this.container).toEqualHTML('<p>0123</p><p><strong>5678</strong></p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"multiple inserts and deletes","suites":["Editor","applyDelta"],"line":319,"updatePoint":{"line":319,"column":36,"index":13695},"code":"    it('multiple inserts and deletes', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(1).insert('a').delete(2).insert('cd').delete(1).insert('efg'));\n      expect(this.container).toEqualHTML('<p>0acdefg</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert text with delete in existing block","suites":["Editor","applyDelta"],"line":324,"updatePoint":{"line":324,"column":49,"index":13997},"code":"    it('insert text with delete in existing block', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(4).insert('abc')\n      // Retain newline at end of block being inserted into.\n      .retain(1).delete(1));\n      expect(this.container).toEqualHTML('<p>0123abc</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert text with delete before block embed","suites":["Editor","applyDelta"],"line":331,"updatePoint":{"line":331,"column":50,"index":14424},"code":"    it('insert text with delete before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5)\n      // Explicit newline required to maintain correct index calculation for the delete.\n      .insert('abc\\n').delete(1));\n      expect(this.container).toEqualHTML('<p>0123</p><p>abc</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert inline embed with delete in existing block","suites":["Editor","applyDelta"],"line":338,"updatePoint":{"line":338,"column":57,"index":14885},"code":"    it('insert inline embed with delete in existing block', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(4).insert({\n        image: '/assets/favicon.png'\n      })\n      // Retain newline at end of block being inserted into.\n      .retain(1).delete(1));\n      expect(this.container).toEqualHTML('<p>0123<img src=\"/assets/favicon.png\"></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert inline embed with delete before block embed","suites":["Editor","applyDelta"],"line":347,"updatePoint":{"line":347,"column":58,"index":15389},"code":"    it('insert inline embed with delete before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).insert({\n        image: '/assets/favicon.png'\n      })\n      // Explicit newline required to maintain correct index calculation for the delete.\n      .insert('\\n').delete(1));\n      expect(this.container).toEqualHTML('<p>0123</p><p><img src=\"/assets/favicon.png\"></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert inline embed with delete before block embed using delete op first","suites":["Editor","applyDelta"],"line":356,"updatePoint":{"line":356,"column":80,"index":15953},"code":"    it('insert inline embed with delete before block embed using delete op first', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).delete(1).insert({\n        image: '/assets/favicon.png'\n      })\n      // Explicit newline required to maintain correct index calculation for the delete.\n      .insert('\\n'));\n      expect(this.container).toEqualHTML('<p>0123</p><p><img src=\"/assets/favicon.png\"></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert inline embed and text with delete before block embed","suites":["Editor","applyDelta"],"line":365,"updatePoint":{"line":365,"column":67,"index":16504},"code":"    it('insert inline embed and text with delete before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).insert({\n        image: '/assets/favicon.png'\n      })\n      // Explicit newline required to maintain correct index calculation for the delete.\n      .insert('abc\\n').delete(1));\n      expect(this.container).toEqualHTML('<p>0123</p><p><img src=\"/assets/favicon.png\">abc</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert inline embed to the middle of formatted content","suites":["Editor","applyDelta"],"line":374,"updatePoint":{"line":374,"column":62,"index":17056},"code":"    it('insert inline embed to the middle of formatted content', function () {\n      const editor = this.initialize(Editor, '<p><strong>0123</strong></p>');\n      editor.applyDelta(new Delta().retain(2).insert({\n        image: '/assets/favicon.png'\n      }));\n      expect(this.container).toEqualHTML('<p><strong>01</strong><img src=\"/assets/favicon.png\"><strong>23</strong></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert inline embed between plain text and formatted content","suites":["Editor","applyDelta"],"line":381,"updatePoint":{"line":381,"column":68,"index":17452},"code":"    it('insert inline embed between plain text and formatted content', function () {\n      const editor = this.initialize(Editor, '<p>a<strong>b</strong></p>');\n      editor.applyDelta(new Delta().retain(1).insert({\n        image: '#'\n      }));\n      expect(this.container).toEqualHTML('<p>a<img src=\"#\"><strong>b</strong></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"prepend inline embed to another inline embed with same attributes","suites":["Editor","applyDelta"],"line":388,"updatePoint":{"line":388,"column":73,"index":17796},"code":"    it('prepend inline embed to another inline embed with same attributes', function () {\n      const editor = this.initialize(Editor, '<p><img src=\"#\" alt=\"hi\"/></p>');\n      editor.applyDelta(new Delta().insert({\n        image: '#'\n      }, {\n        alt: 'hi'\n      }));\n      expect(this.container).toEqualHTML('<p><img src=\"#\" alt=\"hi\"><img src=\"#\" alt=\"hi\"></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert block embed with delete before block embed","suites":["Editor","applyDelta"],"line":397,"updatePoint":{"line":397,"column":57,"index":18159},"code":"    it('insert block embed with delete before block embed', function () {\n      const editor = this.initialize(Editor, '<p>0123</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n      editor.applyDelta(new Delta().retain(5).insert({\n        video: '#changed'\n      }).delete(1));\n      expect(this.container).toEqualHTML('<p>0123</p><iframe src=\"#changed\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"deletes block embed and appends text","suites":["Editor","applyDelta"],"line":404,"updatePoint":{"line":404,"column":44,"index":18617},"code":"    it('deletes block embed and appends text', function () {\n      const editor = this.initialize(Editor, `<p><br></p><iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><p>b</p>`);\n      editor.applyDelta(new Delta().retain(1).insert('a').delete(1));\n      expect(this.container).toEqualHTML('<p><br></p><p>ab</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"multiple delete block embed and append texts","suites":["Editor","applyDelta"],"line":409,"updatePoint":{"line":409,"column":52,"index":18980},"code":"    it('multiple delete block embed and append texts', function () {\n      const editor = this.initialize(Editor, `<p><br></p><iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><p>b</p>`);\n      editor.applyDelta(new Delta().retain(1).insert('a').delete(1).insert('!').delete(1));\n      expect(this.container).toEqualHTML('<p><br></p><p>a!b</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"multiple nonconsecutive delete block embed and append texts","suites":["Editor","applyDelta"],"line":414,"updatePoint":{"line":414,"column":67,"index":19462},"code":"    it('multiple nonconsecutive delete block embed and append texts', function () {\n      const editor = this.initialize(Editor, `<p><br></p>\n         <iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe>\n         <p>a</p>\n         <iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe>\n         <p>bb</p>\n         <iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe>\n         <p>ccc</p>\n         <iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe>\n         <p>dddd</p>`);\n      const old = editor.getDelta();\n      const delta = new Delta().retain(1).insert('1').delete(1).retain(2).insert('2').delete(1).retain(3).insert('3').delete(1).retain(4).insert('4').delete(1);\n      editor.applyDelta(delta);\n      expect(editor.getDelta()).toEqual(old.compose(delta));\n      expect(this.container).toEqualHTML('<p><br></p><p>1a</p><p>2bb</p><p>3ccc</p><p>4dddd</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"improper block embed insert","suites":["Editor","applyDelta","block embed"],"line":431,"updatePoint":{"line":431,"column":37,"index":20459},"code":"      it('improper block embed insert', function () {\n        const editor = this.initialize(Editor, '<p>0123</p>');\n        editor.applyDelta(new Delta().retain(2).insert({\n          video: '#'\n        }));\n        expect(this.container).toEqualHTML('<p>01</p><iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe><p>23</p>');\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"prepend","suites":["Editor","applyDelta","block embed","insert and delete"],"line":439,"updatePoint":{"line":439,"column":19,"index":20856},"code":"        it('prepend', function () {\n          const editor = this.initialize(Editor, '<p>0123</p>');\n          editor.applyDelta(new Delta().insert({\n            video: '#'\n          }).delete(2));\n          expect(this.container).toEqualHTML('<iframe src=\"#\" class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\"></iframe><p>23</p>');\n        });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert to the middle of text","suites":["Editor","applyDelta","block embed","insert and delete"],"line":446,"updatePoint":{"line":446,"column":40,"index":21227},"code":"        it('insert to the middle of text', function () {\n          const editor = this.initialize(Editor, `<p>abc</p>`);\n          editor.applyDelta(new Delta().retain(1).insert({\n            video: '#'\n          }).delete(2));\n          expect(this.container).toEqualHTML('<p>a</p><iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><p><br></p>');\n        });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert after \\n","suites":["Editor","applyDelta","block embed","insert and delete"],"line":453,"updatePoint":{"line":453,"column":28,"index":21605},"code":"        it('insert after \\\\n', function () {\n          const editor = this.initialize(Editor, `<p>a</p><p>cda</p>`);\n          editor.applyDelta(new Delta().retain(2).insert({\n            video: '#'\n          }).delete(2));\n          expect(this.container).toEqualHTML('<p>a</p><iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><p>a</p>');\n        });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert after an inline embed","suites":["Editor","applyDelta","block embed","insert and delete"],"line":460,"updatePoint":{"line":460,"column":40,"index":22000},"code":"        it('insert after an inline embed', function () {\n          const editor = this.initialize(Editor, `<p><img src=\"/assets/favicon.png\"></p><p>abc</p>`);\n          editor.applyDelta(new Delta().retain(1).insert({\n            video: '#'\n          }).delete(2));\n          expect(this.container).toEqualHTML('<p><img src=\"/assets/favicon.png\"></p><iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><p>bc</p>');\n        });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"insert after a block embed","suites":["Editor","applyDelta","block embed","insert and delete"],"line":467,"updatePoint":{"line":467,"column":38,"index":22454},"code":"        it('insert after a block embed', function () {\n          const editor = this.initialize(Editor, `<iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><p>abc</p>`);\n          editor.applyDelta(new Delta().retain(1).insert({\n            video: '#'\n          }).delete(2));\n          expect(this.container).toEqualHTML('<iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"#\"></iframe><p>c</p>');\n        });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"append formatted block embed","suites":["Editor","applyDelta","block embed","insert and delete"],"line":475,"updatePoint":{"line":475,"column":38,"index":23003},"code":"      it('append formatted block embed', function () {\n        const editor = this.initialize(Editor, '<p>0123</p><p><br></p>');\n        editor.applyDelta(new Delta().retain(5).insert({\n          video: '#'\n        }, {\n          align: 'right'\n        }));\n        expect(this.container).toEqualHTML('<p>0123</p><iframe src=\"#\" class=\"ql-video ql-align-right\" frameborder=\"0\" allowfullscreen=\"true\"></iframe><p><br></p>');\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"append","suites":["Editor","applyDelta","block embed","insert and delete"],"line":485,"updatePoint":{"line":485,"column":14,"index":23421},"code":"    it('append', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(5).insert('5678'));\n      expect(this.container).toEqualHTML('<p>0123</p><p>5678</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"append newline","suites":["Editor","applyDelta","block embed","insert and delete"],"line":490,"updatePoint":{"line":490,"column":22,"index":23660},"code":"    it('append newline', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(5).insert('\\n', {\n        header: 2\n      }));\n      expect(this.container).toEqualHTML('<p>0123</p><h2><br></h2>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"append text with newline","suites":["Editor","applyDelta","block embed","insert and delete"],"line":497,"updatePoint":{"line":497,"column":32,"index":23938},"code":"    it('append text with newline', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(5).insert('5678').insert('\\n', {\n        header: 2\n      }));\n      expect(this.container).toEqualHTML('<p>0123</p><h2>5678</h2>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"append non-isolated newline","suites":["Editor","applyDelta","block embed","insert and delete"],"line":504,"updatePoint":{"line":504,"column":35,"index":24234},"code":"    it('append non-isolated newline', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(5).insert('5678\\n', {\n        header: 2\n      }));\n      expect(this.container).toEqualHTML('<p>0123</p><h2>5678</h2>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"eventual append","suites":["Editor","applyDelta","block embed","insert and delete"],"line":511,"updatePoint":{"line":511,"column":23,"index":24507},"code":"    it('eventual append', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(2).insert('ab\\n', {\n        header: 1\n      }).retain(3).insert('cd\\n', {\n        header: 2\n      }));\n      expect(this.container).toEqualHTML('<h1>01ab</h1><p>23</p><h2>cd</h2>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"append text, embed and newline","suites":["Editor","applyDelta","block embed","insert and delete"],"line":520,"updatePoint":{"line":520,"column":38,"index":24856},"code":"    it('append text, embed and newline', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(5).insert('5678').insert({\n        image: '/assets/favicon.png'\n      }).insert('\\n', {\n        header: 2\n      }));\n      expect(this.container).toEqualHTML('<p>0123</p><h2>5678<img src=\"/assets/favicon.png\"></h2>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"append multiple lines","suites":["Editor","applyDelta","block embed","insert and delete"],"line":529,"updatePoint":{"line":529,"column":29,"index":25232},"code":"    it('append multiple lines', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      editor.applyDelta(new Delta().retain(5).insert('56').insert('\\n', {\n        header: 1\n      }).insert('89').insert('\\n', {\n        header: 2\n      }));\n      expect(this.container).toEqualHTML('<p>0123</p><h1>56</h1><h2>89</h2>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"code block","suites":["Editor","applyDelta","block embed","insert and delete"],"line":538,"updatePoint":{"line":538,"column":18,"index":25573},"code":"    it('code block', function () {\n      const editor = this.initialize(Editor, {\n        html: '<p>0</p><div class=\"ql-code-block-container\"><div class=\"ql-code-block\">1</div><div class=\"ql-code-block\">23</div></div><p><br></p>'\n      });\n      editor.applyDelta(new Delta().delete(4).retain(1).delete(2));\n      expect(editor.scroll.domNode.innerHTML).toEqual('<p>2</p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"prepending bold with a newline and unformatted text","suites":["Editor","applyDelta","block embed","insert and delete"],"line":545,"updatePoint":{"line":545,"column":59,"index":25997},"code":"    it('prepending bold with a newline and unformatted text', function () {\n      const editor = this.initialize(Editor, '<p><strong>a</strong></p>');\n      editor.applyDelta(new Delta().insert('\\n1'));\n      expect(this.container).toEqualHTML('<p><br></p><p>1<strong>a</strong></p>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"ignores empty delta","suites":["Editor","insertContents"],"line":553,"updatePoint":{"line":553,"column":27,"index":26411},"code":"    it('ignores empty delta', function () {\n      const editor = this.initialize(Editor, '<p>1</p>');\n      editor.insertContents(0, new Delta());\n      expect(editor.getDelta().ops).toEqual([{\n        insert: '1\\n'\n      }]);\n      editor.insertContents(0, new Delta().retain(100));\n      expect(editor.getDelta().ops).toEqual([{\n        insert: '1\\n'\n      }]);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"prepend to paragraph","suites":["Editor","insertContents"],"line":564,"updatePoint":{"line":564,"column":28,"index":26784},"code":"    it('prepend to paragraph', function () {\n      const editor = this.initialize(Editor, '<p>2</p>');\n      editor.insertContents(0, new Delta().insert('1'));\n      expect(editor.getDelta().ops).toEqual([{\n        insert: '12\\n'\n      }]);\n      editor.insertContents(0, new Delta().insert('a', {\n        bold: true\n      }).insert('\\n', {\n        header: 1\n      }).insert('b', {\n        bold: true\n      }));\n      expect(editor.getDelta().ops).toEqual([{\n        insert: 'a',\n        attributes: {\n          bold: true\n        }\n      }, {\n        insert: '\\n',\n        attributes: {\n          header: 1\n        }\n      }, {\n        insert: 'b',\n        attributes: {\n          bold: true\n        }\n      }, {\n        insert: '12\\n'\n      }]);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"prepend to list item","suites":["Editor","insertContents"],"line":596,"updatePoint":{"line":596,"column":28,"index":27540},"code":"    it('prepend to list item', function () {\n      const editor = this.initialize(Editor, '<ol><li data-list=\"bullet\">2</li></ol>');\n      editor.insertContents(0, new Delta().insert('1'));\n      expect(editor.getDelta().ops).toEqual([{\n        insert: '12'\n      }, {\n        insert: '\\n',\n        attributes: {\n          list: 'bullet'\n        }\n      }]);\n      editor.insertContents(0, new Delta().insert('a', {\n        bold: true\n      }).insert('\\n', {\n        header: 1\n      }).insert('b', {\n        bold: true\n      }));\n      expect(editor.getDelta().ops).toEqual([{\n        insert: 'a',\n        attributes: {\n          bold: true\n        }\n      }, {\n        insert: '\\n',\n        attributes: {\n          header: 1\n        }\n      }, {\n        insert: 'b',\n        attributes: {\n          bold: true\n        }\n      }, {\n        insert: '12'\n      }, {\n        insert: '\\n',\n        attributes: {\n          list: 'bullet'\n        }\n      }]);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"without ending with \\n","suites":["Editor","insertContents","prepend to block embed"],"line":639,"updatePoint":{"line":639,"column":33,"index":28560},"code":"      it('without ending with \\\\n', function () {\n        const editor = this.initialize(Editor, `${video}`);\n        editor.insertContents(0, new Delta().insert('a'));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: 'a\\n'\n        }, {\n          insert: {\n            video: '#'\n          }\n        }]);\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"empty first line","suites":["Editor","insertContents","prepend to block embed"],"line":650,"updatePoint":{"line":650,"column":26,"index":28886},"code":"      it('empty first line', function () {\n        const editor = this.initialize(Editor, `<p></p>${video}`);\n        editor.insertContents(1, new Delta().insert('\\nworld\\n'));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: '\\n\\nworld\\n'\n        }, {\n          insert: {\n            video: '#'\n          }\n        }]);\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"multiple lines","suites":["Editor","insertContents","prepend to block embed"],"line":661,"updatePoint":{"line":661,"column":24,"index":29233},"code":"      it('multiple lines', function () {\n        const editor = this.initialize(Editor, `${video}`);\n        editor.insertContents(0, new Delta().insert('a').insert('\\n', {\n          header: 1\n        }));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: 'a'\n        }, {\n          insert: '\\n',\n          attributes: {\n            header: 1\n          }\n        }, {\n          insert: {\n            video: '#'\n          }\n        }]);\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"appends to editor","suites":["Editor","insertContents","append"],"line":681,"updatePoint":{"line":681,"column":27,"index":29744},"code":"      it('appends to editor', function () {\n        const editor = this.initialize(Editor, '<p>1</p>');\n        editor.insertContents(2, new Delta().insert('a'));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: '1\\na\\n'\n        }]);\n        editor.insertContents(4, new Delta().insert('b').insert('\\n', {\n          header: 1\n        }));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: '1\\na\\nb'\n        }, {\n          insert: '\\n',\n          attributes: {\n            header: 1\n          }\n        }]);\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"appends to paragraph","suites":["Editor","insertContents","append"],"line":699,"updatePoint":{"line":699,"column":30,"index":30299},"code":"      it('appends to paragraph', function () {\n        const editor = this.initialize(Editor, '<p>1</p><p>2</p>');\n        editor.insertContents(2, new Delta().insert('a'));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: '1\\na2\\n'\n        }]);\n        editor.insertContents(2, new Delta().insert('b').insert('\\n', {\n          header: 1\n        }));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: '1\\nb'\n        }, {\n          insert: '\\n',\n          attributes: {\n            header: 1\n          }\n        }, {\n          insert: 'a2\\n'\n        }]);\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"appends to block embed","suites":["Editor","insertContents","append"],"line":719,"updatePoint":{"line":719,"column":32,"index":30900},"code":"      it('appends to block embed', function () {\n        const editor = this.initialize(Editor, `${video}<p>2</p>`);\n        editor.insertContents(1, new Delta().insert('1'));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: {\n            video: '#'\n          }\n        }, {\n          insert: '12\\n'\n        }]);\n        editor.insertContents(1, new Delta().insert('b').insert('\\n', {\n          header: 1\n        }));\n        expect(editor.getDelta().ops).toEqual([{\n          insert: {\n            video: '#'\n          }\n        }, {\n          insert: 'b'\n        }, {\n          insert: '\\n',\n          attributes: {\n            header: 1\n          }\n        }, {\n          insert: '12\\n'\n        }]);\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"inserts formatted block embeds","suites":["Editor","insertContents","append"],"line":748,"updatePoint":{"line":748,"column":38,"index":31645},"code":"    it('inserts formatted block embeds', function () {\n      const editor = this.initialize(Editor, `<p></p>`);\n      editor.insertContents(0, new Delta().insert('a\\n').insert({\n        video: '#'\n      }, {\n        width: '300'\n      }).insert({\n        video: '#'\n      }, {\n        width: '300'\n      }).insert('\\nd'));\n      expect(editor.getDelta().ops).toEqual([{\n        insert: 'a\\n'\n      }, {\n        insert: {\n          video: '#'\n        },\n        attributes: {\n          width: '300'\n        }\n      }, {\n        insert: {\n          video: '#'\n        },\n        attributes: {\n          width: '300'\n        }\n      }, {\n        insert: '\\nd\\n'\n      }]);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"inserts inline embeds to bold text","suites":["Editor","insertContents","append"],"line":779,"updatePoint":{"line":779,"column":42,"index":32327},"code":"    it('inserts inline embeds to bold text', function () {\n      const editor = this.initialize(Editor, `<p><strong>ab</strong></p>`);\n      editor.insertContents(1, new Delta().insert({\n        image: '#'\n      }));\n      expect(editor.getDelta().ops).toEqual([{\n        insert: 'a',\n        attributes: {\n          bold: true\n        }\n      }, {\n        insert: {\n          image: '#'\n        }\n      }, {\n        insert: 'b',\n        attributes: {\n          bold: true\n        }\n      }, {\n        insert: '\\n'\n      }]);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"inserts multiple lines to a container","suites":["Editor","insertContents","append"],"line":802,"updatePoint":{"line":802,"column":45,"index":32864},"code":"    it('inserts multiple lines to a container', function () {\n      const editor = this.initialize(Editor, `<ol><li data-list=\"ordered\"></li></ol>`);\n      editor.insertContents(0, new Delta().insert('world', {\n        font: 'monospace'\n      }).insert('\\n', {\n        list: 'bullet'\n      }).insert('\\n'));\n      expect(editor.getDelta().ops).toEqual([{\n        insert: 'world',\n        attributes: {\n          font: 'monospace'\n        }\n      }, {\n        insert: '\\n',\n        attributes: {\n          list: 'bullet'\n        }\n      }, {\n        insert: '\\n'\n      }, {\n        insert: '\\n',\n        attributes: {\n          list: 'ordered'\n        }\n      }]);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"conflict block formats","suites":["Editor","insertContents","invalid delta"],"line":834,"updatePoint":{"line":834,"column":32,"index":33752},"code":"      it('conflict block formats', function () {\n        const change = new Delta().insert('a').insert('\\n', {\n          header: 1,\n          list: 'bullet'\n        }).insert('b').insert('\\n', {\n          header: 1,\n          list: 'bullet'\n        });\n        expect(getEditorDelta(this, editor => editor.insertContents(0, change))).toEqual(getEditorDelta(this, editor => editor.applyDelta(change)));\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"block embeds with line formats","suites":["Editor","insertContents","invalid delta"],"line":844,"updatePoint":{"line":844,"column":40,"index":34172},"code":"      it('block embeds with line formats', function () {\n        const change = new Delta().insert('a\\n').insert({\n          video: '#'\n        }, {\n          header: 1\n        }).insert({\n          video: '#'\n        }, {\n          header: 1\n        }).insert('\\n', {\n          header: 1\n        });\n        expect(getEditorDelta(this, editor => editor.insertContents(0, change))).toEqual(getEditorDelta(this, editor => editor.applyDelta(change)));\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"missing \\n before block embeds","suites":["Editor","insertContents","invalid delta"],"line":858,"updatePoint":{"line":858,"column":41,"index":34633},"code":"      it('missing \\\\n before block embeds', function () {\n        const change = new Delta().insert('a').insert({\n          video: '#'\n        }).insert('b\\n');\n        expect(getEditorDelta(this, editor => editor.insertContents(0, change))).toEqual(getEditorDelta(this, editor => editor.applyDelta(change)));\n      });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"unformatted","suites":["Editor","getFormat()"],"line":867,"updatePoint":{"line":867,"column":19,"index":34985},"code":"    it('unformatted', function () {\n      const editor = this.initialize(Editor, '<p>0123</p>');\n      expect(editor.getFormat(1)).toEqual({});\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"formatted","suites":["Editor","getFormat()"],"line":871,"updatePoint":{"line":871,"column":17,"index":35135},"code":"    it('formatted', function () {\n      const editor = this.initialize(Editor, '<h1><em>0123</em></h1>');\n      expect(editor.getFormat(1)).toEqual({\n        header: 1,\n        italic: true\n      });\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"cursor","suites":["Editor","getFormat()"],"line":878,"updatePoint":{"line":878,"column":14,"index":35340},"code":"    it('cursor', function () {\n      const editor = this.initialize(Editor, '<h1><strong><em>0123</em></strong></h1><h2><u>5678</u></h2>');\n      expect(editor.getFormat(2)).toEqual({\n        bold: true,\n        italic: true,\n        header: 1\n      });\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"cursor with preformat","suites":["Editor","getFormat()"],"line":886,"updatePoint":{"line":886,"column":29,"index":35617},"code":"    it('cursor with preformat', function () {\n      const [editor, selection] = this.initialize([Editor, Selection], '<h1><strong><em>0123</em></strong></h1>');\n      selection.setRange(new Range(2));\n      selection.format('underline', true);\n      selection.format('color', 'red');\n      expect(editor.getFormat(2)).toEqual({\n        bold: true,\n        italic: true,\n        header: 1,\n        color: 'red',\n        underline: true\n      });\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"across leaves","suites":["Editor","getFormat()"],"line":899,"updatePoint":{"line":899,"column":21,"index":36062},"code":"    it('across leaves', function () {\n      const editor = this.initialize(Editor, `\n        <h1>\n          <strong class=\"ql-size-small\"><em>01</em></strong>\n          <em class=\"ql-size-large\"><u>23</u></em>\n          <em class=\"ql-size-huge\"><u>45</u></em>\n        </h1>\n      `);\n      expect(editor.getFormat(1, 4)).toEqual({\n        italic: true,\n        header: 1,\n        size: ['small', 'large', 'huge']\n      });\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"across leaves repeated","suites":["Editor","getFormat()"],"line":913,"updatePoint":{"line":913,"column":30,"index":36502},"code":"    it('across leaves repeated', function () {\n      const editor = this.initialize(Editor, `\n        <h1>\n          <strong class=\"ql-size-small\"><em>01</em></strong>\n          <em class=\"ql-size-large\"><u>23</u></em>\n          <em class=\"ql-size-huge\"><u>45</u></em>\n          <em class=\"ql-size-small\"><u>45</u></em>\n        </h1>\n      `);\n      expect(editor.getFormat(1, 4)).toEqual({\n        italic: true,\n        header: 1,\n        size: ['small', 'large', 'huge']\n      });\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"across lines repeated","suites":["Editor","getFormat()"],"line":928,"updatePoint":{"line":928,"column":29,"index":36992},"code":"    it('across lines repeated', function () {\n      const editor = this.initialize(Editor, `\n        <h1 class=\"ql-align-right\"><em>01</em></h1>\n        <h1 class=\"ql-align-center\"><em>34</em></h1>\n        <h1 class=\"ql-align-right\"><em>36</em></h1>\n        <h1 class=\"ql-align-center\"><em>33</em></h1>\n      `);\n      expect(editor.getFormat(1, 3)).toEqual({\n        italic: true,\n        header: 1,\n        align: ['right', 'center']\n      });\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"across lines","suites":["Editor","getFormat()"],"line":941,"updatePoint":{"line":941,"column":20,"index":37437},"code":"    it('across lines', function () {\n      const editor = this.initialize(Editor, `\n        <h1 class=\"ql-align-right\"><em>01</em></h1>\n        <h1 class=\"ql-align-center\"><em>34</em></h1>\n      `);\n      expect(editor.getFormat(1, 3)).toEqual({\n        italic: true,\n        header: 1,\n        align: ['right', 'center']\n      });\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"inline","suites":["Editor","getHTML"],"line":954,"updatePoint":{"line":954,"column":14,"index":37813},"code":"    it('inline', function () {\n      const editor = this.initialize(Editor, '<blockquote>Test</blockquote>');\n      expect(editor.getHTML(1, 2)).toEqual('es');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"across lines","suites":["Editor","getHTML"],"line":958,"updatePoint":{"line":958,"column":20,"index":37987},"code":"    it('across lines', function () {\n      const editor = this.initialize(Editor, '<h1 class=\"ql-align-center\">Header</h1><p>Text</p><blockquote>Quote</blockquote>');\n      expect(editor.getHTML(1, 14)).toEqual('<h1 class=\"ql-align-center\">eader</h1><p>Text</p><blockquote>Quo</blockquote>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"mixed list","suites":["Editor","getHTML"],"line":962,"updatePoint":{"line":962,"column":18,"index":38286},"code":"    it('mixed list', function () {\n      const editor = this.initialize(Editor, `\n          <ol>\n            <li data-list=\"ordered\">One</li>\n            <li data-list=\"ordered\">Two</li>\n            <li data-list=\"bullet\">Foo</li>\n            <li data-list=\"bullet\">Bar</li>\n          </ol>\n        `);\n      expect(editor.getHTML(2, 12)).toEqualHTML(`\n        <ol>\n          <li>e</li>\n          <li>Two</li>\n        </ol>\n        <ul>\n          <li>Foo</li>\n          <li>Ba</li>\n        </ul>\n      `);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"nested list","suites":["Editor","getHTML"],"line":982,"updatePoint":{"line":982,"column":19,"index":38801},"code":"    it('nested list', function () {\n      const editor = this.initialize(Editor, `\n          <ol>\n            <li data-list=\"ordered\">One</li>\n            <li data-list=\"ordered\">Two</li>\n            <li data-list=\"bullet\" class=\"ql-indent-1\">Alpha</li>\n            <li data-list=\"ordered\" class=\"ql-indent-2\">I</li>\n            <li data-list=\"ordered\" class=\"ql-indent-2\">II</li>\n            <li data-list=\"ordered\">Three</li>\n          </ol>\n        `);\n      expect(editor.getHTML(2, 20)).toEqualHTML(`\n        <ol>\n          <li>e</li>\n          <li>Two\n            <ul>\n              <li>Alpha\n                <ol>\n                  <li>I</li>\n                  <li>II</li>\n                </ol>\n              </li>\n            </ul>\n          </li>\n          <li>Thr</li>\n        </ol>\n      `);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"nested checklist","suites":["Editor","getHTML"],"line":1010,"updatePoint":{"line":1010,"column":24,"index":39616},"code":"    it('nested checklist', function () {\n      const editor = this.initialize(Editor, `\n          <ol>\n            <li data-list=\"checked\">One</li>\n            <li data-list=\"checked\">Two</li>\n            <li data-list=\"unchecked\" class=\"ql-indent-1\">Alpha</li>\n            <li data-list=\"checked\" class=\"ql-indent-2\">I</li>\n            <li data-list=\"checked\" class=\"ql-indent-2\">II</li>\n            <li data-list=\"checked\">Three</li>\n          </ol>\n        `);\n      expect(editor.getHTML(2, 20)).toEqualHTML(`\n        <ul>\n          <li data-list=\"checked\">e</li>\n          <li data-list=\"checked\">Two\n            <ul>\n              <li data-list=\"unchecked\">Alpha\n                <ul>\n                  <li data-list=\"checked\">I</li>\n                  <li data-list=\"checked\">II</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n          <li data-list=\"checked\">Thr</li>\n        </ul>\n      `);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"partial list","suites":["Editor","getHTML"],"line":1038,"updatePoint":{"line":1038,"column":20,"index":40552},"code":"    it('partial list', function () {\n      const editor = this.initialize(Editor, `\n        <ol>\n          <li data-list=\"ordered\">1111</li>\n          <li data-list=\"ordered\" class=\"ql-indent-1\">AAAA</li>\n          <li data-list=\"ordered\" class=\"ql-indent-2\">IIII</li>\n          <li data-list=\"ordered\" class=\"ql-indent-1\">BBBB</li>\n          <li data-list=\"ordered\">2222</li>\n        </ol>\n        `);\n      expect(editor.getHTML(12, 12)).toEqualHTML(`\n        <ol>\n          <li>\n            <ol>\n              <li>\n                <ol>\n                  <li>II</li>\n                </ol>\n              </li>\n              <li>BBBB</li>\n            </ol>\n          </li>\n          <li>2222</li>\n        </ol>\n      `);\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"text within tag","suites":["Editor","getHTML"],"line":1064,"updatePoint":{"line":1064,"column":23,"index":41284},"code":"    it('text within tag', function () {\n      const editor = this.initialize(Editor, '<p><a>a</a></p>');\n      expect(editor.getHTML(0, 1)).toEqual('<a>a</a>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"escape html","suites":["Editor","getHTML"],"line":1068,"updatePoint":{"line":1068,"column":19,"index":41449},"code":"    it('escape html', function () {\n      const editor = this.initialize(Editor, '<p><br></p>');\n      editor.insertText(0, '<b>Test</b>');\n      expect(editor.getHTML(0, 11)).toEqual('&lt;b&gt;Test&lt;/b&gt;');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"multiline code","suites":["Editor","getHTML"],"line":1073,"updatePoint":{"line":1073,"column":22,"index":41672},"code":"    it('multiline code', function () {\n      const editor = this.initialize(Editor, '<p><br></p><p>0123</p><p><br></p><p><br></p><p>4567</p><p><br></p>');\n      const length = editor.scroll.length();\n      editor.formatLine(0, length, {\n        'code-block': 'javascript'\n      });\n      expect(editor.getHTML(0, length)).toEqual('<pre>\\n\\n0123\\n\\n\\n4567\\n\\n</pre>');\n      expect(editor.getHTML(1, 7)).toEqual('<pre>\\n0123\\n\\n\\n\\n</pre>');\n      expect(editor.getHTML(2, 7)).toEqual('<pre>\\n123\\n\\n\\n4\\n</pre>');\n      expect(editor.getHTML(5, 7)).toEqual('<pre>\\n\\n\\n\\n4567\\n</pre>');\n    });","file":"unit/core/editor.js","skipped":false,"dir":"test"},{"name":"imports","suites":["Quill"],"line":9,"updatePoint":{"line":9,"column":13,"index":372},"code":"  it('imports', function () {\n    Object.keys(Quill.imports).forEach(function (path) {\n      expect(Quill.import(path)).toBeTruthy();\n    });\n  });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"empty","suites":["Quill","construction"],"line":15,"updatePoint":{"line":15,"column":13,"index":561},"code":"    it('empty', function () {\n      const quill = this.initialize(Quill, '');\n      expect(quill.getContents()).toEqual(new Delta().insert('\\n'));\n      expect(quill.root).toEqualHTML('<p><br></p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"text","suites":["Quill","construction"],"line":20,"updatePoint":{"line":20,"column":12,"index":768},"code":"    it('text', function () {\n      const quill = this.initialize(Quill, '0123');\n      expect(quill.getContents()).toEqual(new Delta().insert('0123\\n'));\n      expect(quill.root).toEqualHTML('<p>0123</p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"newlines","suites":["Quill","construction"],"line":25,"updatePoint":{"line":25,"column":16,"index":987},"code":"    it('newlines', function () {\n      const quill = this.initialize(Quill, '<p><br></p><p><br></p><p><br></p>');\n      expect(quill.getContents()).toEqual(new Delta().insert('\\n\\n\\n'));\n      expect(quill.root).toEqualHTML('<p><br></p><p><br></p><p><br></p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"formatted ending","suites":["Quill","construction"],"line":30,"updatePoint":{"line":30,"column":24,"index":1265},"code":"    it('formatted ending', function () {\n      const quill = this.initialize(Quill, '<p class=\"ql-align-center\">Test</p>');\n      expect(quill.getContents()).toEqual(new Delta().insert('Test').insert('\\n', {\n        align: 'center'\n      }));\n      expect(quill.root).toEqualHTML('<p class=\"ql-align-center\">Test</p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"deleteText()","suites":["Quill","api"],"line":44,"updatePoint":{"line":44,"column":20,"index":1842},"code":"    it('deleteText()', function () {\n      this.quill.deleteText(3, 2);\n      const change = new Delta().retain(3).delete(2);\n      expect(this.quill.root).toEqualHTML('<p>012<em>5</em>67</p>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, change, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"format()","suites":["Quill","api"],"line":50,"updatePoint":{"line":50,"column":16,"index":2173},"code":"    it('format()', function () {\n      this.quill.setSelection(3, 2);\n      this.quill.format('bold', true);\n      const change = new Delta().retain(3).retain(2, {\n        bold: true\n      });\n      expect(this.quill.root).toEqualHTML('<p>012<strong>3<em>4</em></strong><em>5</em>67</p>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, change, this.oldDelta, Emitter.sources.API);\n      expect(this.quill.getSelection()).toEqual(new Range(3, 2));\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"formatLine()","suites":["Quill","api"],"line":60,"updatePoint":{"line":60,"column":20,"index":2673},"code":"    it('formatLine()', function () {\n      this.quill.formatLine(1, 1, 'header', 2);\n      const change = new Delta().retain(8).retain(1, {\n        header: 2\n      });\n      expect(this.quill.root).toEqualHTML('<h2>0123<em>45</em>67</h2>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, change, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"formatText()","suites":["Quill","api"],"line":68,"updatePoint":{"line":68,"column":20,"index":3054},"code":"    it('formatText()', function () {\n      this.quill.formatText(3, 2, 'bold', true);\n      const change = new Delta().retain(3).retain(2, {\n        bold: true\n      });\n      expect(this.quill.root).toEqualHTML('<p>012<strong>3<em>4</em></strong><em>5</em>67</p>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, change, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"insertEmbed()","suites":["Quill","api"],"line":76,"updatePoint":{"line":76,"column":21,"index":3462},"code":"    it('insertEmbed()', function () {\n      this.quill.insertEmbed(5, 'image', '/assets/favicon.png');\n      const change = new Delta().retain(5).insert({\n        image: '/assets/favicon.png'\n      }, {\n        italic: true\n      });\n      expect(this.quill.root).toEqualHTML('<p>0123<em>4<img src=\"/assets/favicon.png\">5</em>67</p>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, change, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"insertText()","suites":["Quill","api"],"line":86,"updatePoint":{"line":86,"column":20,"index":3937},"code":"    it('insertText()', function () {\n      this.quill.insertText(5, '|', 'bold', true);\n      const change = new Delta().retain(5).insert('|', {\n        bold: true,\n        italic: true\n      });\n      expect(this.quill.root).toEqualHTML('<p>0123<em>4</em><strong><em>|</em></strong><em>5</em>67</p>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, change, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"enable/disable","suites":["Quill","api"],"line":95,"updatePoint":{"line":95,"column":22,"index":4382},"code":"    it('enable/disable', function () {\n      this.quill.disable();\n      expect(this.quill.root.getAttribute('contenteditable')).toEqual('false');\n      this.quill.enable();\n      expect(this.quill.root.getAttribute('contenteditable')).toBeTruthy();\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"getBounds() index","suites":["Quill","api"],"line":101,"updatePoint":{"line":101,"column":25,"index":4643},"code":"    it('getBounds() index', function () {\n      expect(this.quill.getBounds(1)).toBeTruthy();\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"getBounds() range","suites":["Quill","api"],"line":104,"updatePoint":{"line":104,"column":25,"index":4745},"code":"    it('getBounds() range', function () {\n      expect(this.quill.getBounds(new Range(3, 4))).toBeTruthy();\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"getFormat()","suites":["Quill","api"],"line":107,"updatePoint":{"line":107,"column":19,"index":4855},"code":"    it('getFormat()', function () {\n      const formats = this.quill.getFormat(5);\n      expect(formats).toEqual({\n        italic: true\n      });\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"getSelection()","suites":["Quill","api"],"line":113,"updatePoint":{"line":113,"column":22,"index":5012},"code":"    it('getSelection()', function () {\n      expect(this.quill.getSelection()).toEqual(null);\n      const range = new Range(1, 2);\n      this.quill.setSelection(range);\n      expect(this.quill.getSelection()).toEqual(range);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"removeFormat()","suites":["Quill","api"],"line":119,"updatePoint":{"line":119,"column":22,"index":5245},"code":"    it('removeFormat()', function () {\n      this.quill.removeFormat(5, 1);\n      const change = new Delta().retain(5).retain(1, {\n        italic: null\n      });\n      expect(this.quill.root).toEqualHTML('<p>0123<em>4</em>567</p>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, change, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"updateContents() delta","suites":["Quill","api"],"line":127,"updatePoint":{"line":127,"column":30,"index":5626},"code":"    it('updateContents() delta', function () {\n      const delta = new Delta().retain(5).insert('|');\n      this.quill.updateContents(delta);\n      expect(this.quill.root).toEqualHTML('<p>0123<em>4</em>|<em>5</em>67</p>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, delta, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"updateContents() ops array","suites":["Quill","api"],"line":133,"updatePoint":{"line":133,"column":34,"index":5992},"code":"    it('updateContents() ops array', function () {\n      const delta = new Delta().retain(5).insert('|');\n      this.quill.updateContents(delta.ops);\n      expect(this.quill.root).toEqualHTML('<p>0123<em>4</em>|<em>5</em>67</p>');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, delta, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"api text insert","suites":["Quill","events"],"line":147,"updatePoint":{"line":147,"column":23,"index":6621},"code":"    it('api text insert', function () {\n      this.quill.insertText(2, '!');\n      const delta = new Delta().retain(2).insert('!');\n      expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, delta, this.oldDelta, Emitter.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"user text insert","suites":["Quill","events"],"line":152,"updatePoint":{"line":152,"column":24,"index":6893},"code":"    it('user text insert', function (done) {\n      this.container.firstChild.firstChild.firstChild.data = '01!23';\n      const delta = new Delta().retain(2).insert('!');\n      setTimeout(() => {\n        expect(this.quill.emitter.emit).toHaveBeenCalledWith(Emitter.events.TEXT_CHANGE, delta, this.oldDelta, Emitter.sources.USER);\n        done();\n      }, 1);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 0","suites":["Quill","events","insert a in aaaa"],"line":187,"updatePoint":{"line":187,"column":20,"index":8425},"code":"      it('at index 0', editTest('aaaa', 0, 'aaaaa', 1, new Delta().insert('a')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 1","suites":["Quill","events","insert a in aaaa"],"line":188,"updatePoint":{"line":188,"column":20,"index":8507},"code":"      it('at index 1', editTest('aaaa', 1, 'aaaaa', 2, new Delta().retain(1).insert('a')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 2","suites":["Quill","events","insert a in aaaa"],"line":189,"updatePoint":{"line":189,"column":20,"index":8599},"code":"      it('at index 2', editTest('aaaa', 2, 'aaaaa', 3, new Delta().retain(2).insert('a')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 3","suites":["Quill","events","insert a in aaaa"],"line":190,"updatePoint":{"line":190,"column":20,"index":8691},"code":"      it('at index 3', editTest('aaaa', 3, 'aaaaa', 4, new Delta().retain(3).insert('a')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 1","suites":["Quill","events","insert a in xaa"],"line":193,"updatePoint":{"line":193,"column":20,"index":8837},"code":"      it('at index 1', editTest('xaa', 1, 'xaaa', 2, new Delta().retain(1).insert('a')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 2","suites":["Quill","events","insert a in xaa"],"line":194,"updatePoint":{"line":194,"column":20,"index":8927},"code":"      it('at index 2', editTest('xaa', 2, 'xaaa', 3, new Delta().retain(2).insert('a')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 3","suites":["Quill","events","insert a in xaa"],"line":195,"updatePoint":{"line":195,"column":20,"index":9017},"code":"      it('at index 3', editTest('xaa', 3, 'xaaa', 4, new Delta().retain(3).insert('a')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 0","suites":["Quill","events","insert aa in ax"],"line":198,"updatePoint":{"line":198,"column":20,"index":9161},"code":"      it('at index 0', editTest('ax', 0, 'aaax', 2, new Delta().insert('aa')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 1","suites":["Quill","events","insert aa in ax"],"line":199,"updatePoint":{"line":199,"column":20,"index":9241},"code":"      it('at index 1', editTest('ax', 1, 'aaax', 3, new Delta().retain(1).insert('aa')));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 1","suites":["Quill","events","delete a in xaa"],"line":202,"updatePoint":{"line":202,"column":20,"index":9385},"code":"      it('at index 1', editTest('xaa', 2, 'xa', 1, new Delta().retain(1).delete(1)));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 2","suites":["Quill","events","delete a in xaa"],"line":203,"updatePoint":{"line":203,"column":20,"index":9471},"code":"      it('at index 2', editTest('xaa', 3, 'xa', 2, new Delta().retain(2).delete(1)));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 1","suites":["Quill","events","forward-delete a in xaa"],"line":206,"updatePoint":{"line":206,"column":20,"index":9619},"code":"      it('at index 1', editTest('xaa', 1, 'xa', 1, new Delta().retain(1).delete(1)));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"at index 2","suites":["Quill","events","forward-delete a in xaa"],"line":207,"updatePoint":{"line":207,"column":20,"index":9705},"code":"      it('at index 2', editTest('xaa', 2, 'xa', 2, new Delta().retain(2).delete(1)));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"replace yay with y","suites":["Quill","events","forward-delete a in xaa"],"line":209,"updatePoint":{"line":209,"column":26,"index":9805},"code":"    it('replace yay with y', editTest('yay', new Range(0, 3), 'y', 1, new Delta().insert('y').delete(3)));","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"empty","suites":["Quill","setContents()"],"line":212,"updatePoint":{"line":212,"column":13,"index":9947},"code":"    it('empty', function () {\n      const quill = this.initialize(Quill, '');\n      const delta = new Delta().insert('\\n');\n      quill.setContents(delta);\n      expect(quill.getContents()).toEqual(delta);\n      expect(quill.root).toEqualHTML('<p><br></p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"single line","suites":["Quill","setContents()"],"line":219,"updatePoint":{"line":219,"column":19,"index":10220},"code":"    it('single line', function () {\n      const quill = this.initialize(Quill, '');\n      const delta = new Delta().insert('Hello World!\\n');\n      quill.setContents(delta);\n      expect(quill.getContents()).toEqual(delta);\n      expect(quill.root).toEqualHTML('<p>Hello World!</p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"multiple lines","suites":["Quill","setContents()"],"line":226,"updatePoint":{"line":226,"column":22,"index":10516},"code":"    it('multiple lines', function () {\n      const quill = this.initialize(Quill, '');\n      const delta = new Delta().insert('Hello\\n\\nWorld!\\n');\n      quill.setContents(delta);\n      expect(quill.getContents()).toEqual(delta);\n      expect(quill.root).toEqualHTML('<p>Hello</p><p><br></p><p>World!</p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"basic formats","suites":["Quill","setContents()"],"line":233,"updatePoint":{"line":233,"column":21,"index":10831},"code":"    it('basic formats', function () {\n      const quill = this.initialize(Quill, '');\n      const delta = new Delta().insert('Welcome').insert('\\n', {\n        header: 1\n      }).insert('Hello\\n').insert('World').insert('!', {\n        bold: true\n      }).insert('\\n');\n      quill.setContents(delta);\n      expect(quill.getContents()).toEqual(delta);\n      expect(quill.root).toEqualHTML(`\n        <h1>Welcome</h1>\n        <p>Hello</p>\n        <p>World<strong>!</strong></p>\n      `);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"array of operations","suites":["Quill","setContents()"],"line":248,"updatePoint":{"line":248,"column":27,"index":11329},"code":"    it('array of operations', function () {\n      const quill = this.initialize(Quill, '');\n      const delta = new Delta().insert('test').insert('123', {\n        bold: true\n      }).insert('\\n');\n      quill.setContents(delta.ops);\n      expect(quill.getContents()).toEqual(delta);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"json","suites":["Quill","setContents()"],"line":256,"updatePoint":{"line":256,"column":12,"index":11605},"code":"    it('json', function () {\n      const quill = this.initialize(Quill, '');\n      const delta = {\n        ops: [{\n          insert: 'test\\n'\n        }]\n      };\n      quill.setContents(delta);\n      expect(quill.getContents()).toEqual(new Delta(delta));\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"no trailing newline","suites":["Quill","setContents()"],"line":266,"updatePoint":{"line":266,"column":27,"index":11883},"code":"    it('no trailing newline', function () {\n      const quill = this.initialize(Quill, '<h1>Welcome</h1>');\n      quill.setContents(new Delta().insert('0123'));\n      expect(quill.getContents()).toEqual(new Delta().insert('0123\\n'));\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"inline formatting","suites":["Quill","setContents()"],"line":271,"updatePoint":{"line":271,"column":25,"index":12123},"code":"    it('inline formatting', function () {\n      const quill = this.initialize(Quill, '<p><strong>Bold</strong></p><p>Not bold</p>');\n      const contents = quill.getContents();\n      const delta = quill.setContents(contents);\n      expect(quill.getContents()).toEqual(contents);\n      expect(delta).toEqual(contents.delete(contents.length()));\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"block embed","suites":["Quill","setContents()"],"line":278,"updatePoint":{"line":278,"column":19,"index":12469},"code":"    it('block embed', function () {\n      const quill = this.initialize(Quill, '<p>Hello World!</p>');\n      const contents = new Delta().insert({\n        video: '#'\n      });\n      quill.setContents(contents);\n      expect(quill.getContents()).toEqual(contents);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"return all text by default","suites":["Quill","getText()"],"line":288,"updatePoint":{"line":288,"column":34,"index":12800},"code":"    it('return all text by default', function () {\n      const quill = this.initialize(Quill, '<h1>Welcome</h1>');\n      expect(quill.getText()).toEqualHTML('Welcome');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"works when only provide index","suites":["Quill","getText()"],"line":292,"updatePoint":{"line":292,"column":37,"index":12980},"code":"    it('works when only provide index', function () {\n      const quill = this.initialize(Quill, '<h1>Welcome</h1>');\n      expect(quill.getText(2)).toEqualHTML('lcome');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"works with range","suites":["Quill","getText()"],"line":296,"updatePoint":{"line":296,"column":24,"index":13146},"code":"    it('works with range', function () {\n      const quill = this.initialize(Quill, '<h1>Welcome</h1>');\n      expect(quill.getText({\n        index: 1,\n        length: 2\n      })).toEqualHTML('el');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"overwrite","suites":["Quill","setText()"],"line":305,"updatePoint":{"line":305,"column":17,"index":13390},"code":"    it('overwrite', function () {\n      const quill = this.initialize(Quill, '<h1>Welcome</h1>');\n      quill.setText('abc');\n      expect(quill.root).toEqualHTML('<p>abc</p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"set to newline","suites":["Quill","setText()"],"line":310,"updatePoint":{"line":310,"column":22,"index":13581},"code":"    it('set to newline', function () {\n      const quill = this.initialize(Quill, '<h1>Welcome</h1>');\n      quill.setText('\\n');\n      expect(quill.root).toEqualHTML('<p><br></p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"multiple newlines","suites":["Quill","setText()"],"line":315,"updatePoint":{"line":315,"column":25,"index":13775},"code":"    it('multiple newlines', function () {\n      const quill = this.initialize(Quill, '<h1>Welcome</h1>');\n      quill.setText('\\n\\n');\n      expect(quill.root).toEqualHTML('<p><br></p><p><br></p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"content with trailing newline","suites":["Quill","setText()"],"line":320,"updatePoint":{"line":320,"column":37,"index":13994},"code":"    it('content with trailing newline', function () {\n      const quill = this.initialize(Quill, '<h1>Welcome</h1>');\n      quill.setText('abc\\n');\n      expect(quill.root).toEqualHTML('<p>abc</p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"return carriage","suites":["Quill","setText()"],"line":325,"updatePoint":{"line":325,"column":23,"index":14188},"code":"    it('return carriage', function () {\n      const quill = this.initialize(Quill, '<p>Test</p>');\n      quill.setText('\\r');\n      expect(quill.root).toEqualHTML('<p><br></p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"return carriage newline","suites":["Quill","setText()"],"line":330,"updatePoint":{"line":330,"column":31,"index":14383},"code":"    it('return carriage newline', function () {\n      const quill = this.initialize(Quill, '<p>Test</p>');\n      quill.setText('\\r\\n');\n      expect(quill.root).toEqualHTML('<p><br></p>');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"user overwrite quill","suites":["Quill","expandConfig"],"line":337,"updatePoint":{"line":337,"column":28,"index":14624},"code":"    it('user overwrite quill', function () {\n      const config = expandConfig('#test-container', {\n        placeholder: 'Test',\n        readOnly: true\n      });\n      expect(config.placeholder).toEqual('Test');\n      expect(config.readOnly).toEqual(true);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"convert css selectors","suites":["Quill","expandConfig"],"line":345,"updatePoint":{"line":345,"column":29,"index":14890},"code":"    it('convert css selectors', function () {\n      const config = expandConfig('#test-container', {\n        bounds: '#test-container'\n      });\n      expect(config.bounds).toEqual(document.querySelector('#test-container'));\n      expect(config.container).toEqual(document.querySelector('#test-container'));\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"convert module true to {}","suites":["Quill","expandConfig"],"line":352,"updatePoint":{"line":352,"column":34,"index":15211},"skipped":true,"code":"    xit('convert module true to {}', function () {\n      Quill.debug(0);\n      const oldModules = Theme.DEFAULTS.modules;\n      Theme.DEFAULTS.modules = {\n        formula: true\n      };\n      const config = expandConfig('#test-container', {\n        modules: {\n          syntax: true\n        }\n      });\n      Quill.debug('error');\n      expect(config.modules.formula).toEqual({});\n      expect(config.modules.syntax).toEqual({\n        highlight: null,\n        interval: 1000\n      });\n      Theme.DEFAULTS.modules = oldModules;\n    });","file":"unit/core/quill.js","dir":"test"},{"name":"for Snow","suites":["Quill","expandConfig","theme defaults"],"line":372,"updatePoint":{"line":372,"column":18,"index":15776},"code":"      it('for Snow', function () {\n        const config = expandConfig('#test-container', {\n          modules: {\n            toolbar: true\n          },\n          theme: 'snow'\n        });\n        expect(config.theme).toEqual(Snow);\n        expect(config.modules.toolbar.handlers.image).toEqual(Snow.DEFAULTS.modules.toolbar.handlers.image);\n      });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"for false","suites":["Quill","expandConfig","theme defaults"],"line":382,"updatePoint":{"line":382,"column":19,"index":16128},"code":"      it('for false', function () {\n        const config = expandConfig('#test-container', {\n          theme: false\n        });\n        expect(config.theme).toEqual(Theme);\n      });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"for undefined","suites":["Quill","expandConfig","theme defaults"],"line":388,"updatePoint":{"line":388,"column":23,"index":16315},"code":"      it('for undefined', function () {\n        const config = expandConfig('#test-container', {\n          theme: undefined\n        });\n        expect(config.theme).toEqual(Theme);\n      });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"for null","suites":["Quill","expandConfig","theme defaults"],"line":394,"updatePoint":{"line":394,"column":18,"index":16501},"code":"      it('for null', function () {\n        const config = expandConfig('#test-container', {\n          theme: null\n        });\n        expect(config.theme).toEqual(Theme);\n      });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"quill < module < theme < user","suites":["Quill","expandConfig","theme defaults"],"line":401,"updatePoint":{"line":401,"column":37,"index":16709},"code":"    it('quill < module < theme < user', function () {\n      const oldTheme = Theme.DEFAULTS.modules;\n      const oldToolbar = Toolbar.DEFAULTS;\n      Toolbar.DEFAULTS = {\n        option: 2,\n        module: true\n      };\n      Theme.DEFAULTS.modules = {\n        toolbar: {\n          option: 1,\n          theme: true\n        }\n      };\n      const config = expandConfig('#test-container', {\n        modules: {\n          toolbar: {\n            option: 0,\n            user: true\n          }\n        }\n      });\n      expect(config.modules.toolbar).toEqual({\n        option: 0,\n        module: true,\n        theme: true,\n        user: true\n      });\n      Theme.DEFAULTS.modules = oldTheme;\n      Toolbar.DEFAULTS = oldToolbar;\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"toolbar default","suites":["Quill","expandConfig","theme defaults"],"line":431,"updatePoint":{"line":431,"column":23,"index":17426},"code":"    it('toolbar default', function () {\n      const config = expandConfig('#test-container', {\n        modules: {\n          toolbar: true\n        }\n      });\n      expect(config.modules.toolbar).toEqual(Toolbar.DEFAULTS);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"toolbar disabled","suites":["Quill","expandConfig","theme defaults"],"line":439,"updatePoint":{"line":439,"column":24,"index":17657},"code":"    it('toolbar disabled', function () {\n      const config = expandConfig('#test-container', {\n        modules: {\n          toolbar: false\n        },\n        theme: 'snow'\n      });\n      expect(config.modules.toolbar).toBe(undefined);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"toolbar selector","suites":["Quill","expandConfig","theme defaults"],"line":448,"updatePoint":{"line":448,"column":24,"index":17902},"code":"    it('toolbar selector', function () {\n      const config = expandConfig('#test-container', {\n        modules: {\n          toolbar: {\n            container: '#test-container'\n          }\n        }\n      });\n      expect(config.modules.toolbar).toEqual({\n        container: '#test-container',\n        handlers: Toolbar.DEFAULTS.handlers\n      });\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"toolbar container shorthand","suites":["Quill","expandConfig","theme defaults"],"line":461,"updatePoint":{"line":461,"column":35,"index":18269},"code":"    it('toolbar container shorthand', function () {\n      const config = expandConfig('#test-container', {\n        modules: {\n          toolbar: document.querySelector('#test-container')\n        }\n      });\n      expect(config.modules.toolbar).toEqual({\n        container: document.querySelector('#test-container'),\n        handlers: Toolbar.DEFAULTS.handlers\n      });\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"toolbar format array","suites":["Quill","expandConfig","theme defaults"],"line":472,"updatePoint":{"line":472,"column":28,"index":18640},"code":"    it('toolbar format array', function () {\n      const config = expandConfig('#test-container', {\n        modules: {\n          toolbar: ['bold']\n        }\n      });\n      expect(config.modules.toolbar).toEqual({\n        container: ['bold'],\n        handlers: Toolbar.DEFAULTS.handlers\n      });\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"toolbar custom handler, default container","suites":["Quill","expandConfig","theme defaults"],"line":483,"updatePoint":{"line":483,"column":49,"index":18966},"code":"    it('toolbar custom handler, default container', function () {\n      const handler = function () {}; // eslint-disable-line func-style\n      const config = expandConfig('#test-container', {\n        modules: {\n          toolbar: {\n            handlers: {\n              bold: handler\n            }\n          }\n        }\n      });\n      expect(config.modules.toolbar.container).toEqual(null);\n      expect(config.modules.toolbar.handlers.bold).toEqual(handler);\n      expect(config.modules.toolbar.handlers.clean).toEqual(Toolbar.DEFAULTS.handlers.clean);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(index:number, length:number)","suites":["Quill","overload"],"line":500,"updatePoint":{"line":500,"column":37,"index":19561},"code":"    it('(index:number, length:number)', function () {\n      const [index, length, formats, source] = overload(0, 1);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({});\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(index:number, length:number, format:string, value:boolean, source:string)","suites":["Quill","overload"],"line":507,"updatePoint":{"line":507,"column":82,"index":19871},"code":"    it('(index:number, length:number, format:string, value:boolean, source:string)', function () {\n      const [index, length, formats, source] = overload(0, 1, 'bold', true, Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        bold: true\n      });\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(index:number, length:number, format:string, value:string, source:string)","suites":["Quill","overload"],"line":516,"updatePoint":{"line":516,"column":81,"index":20241},"code":"    it('(index:number, length:number, format:string, value:string, source:string)', function () {\n      const [index, length, formats, source] = overload(0, 1, 'color', Quill.sources.USER, Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        color: Quill.sources.USER\n      });\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(index:number, length:number, format:string, value:string)","suites":["Quill","overload"],"line":525,"updatePoint":{"line":525,"column":66,"index":20626},"code":"    it('(index:number, length:number, format:string, value:string)', function () {\n      const [index, length, formats, source] = overload(0, 1, 'color', Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        color: Quill.sources.USER\n      });\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(index:number, length:number, format:object)","suites":["Quill","overload"],"line":534,"updatePoint":{"line":534,"column":52,"index":20976},"code":"    it('(index:number, length:number, format:object)', function () {\n      const [index, length, formats, source] = overload(0, 1, {\n        bold: true\n      });\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        bold: true\n      });\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(index:number, length:number, format:object, source:string)","suites":["Quill","overload"],"line":545,"updatePoint":{"line":545,"column":67,"index":21327},"code":"    it('(index:number, length:number, format:object, source:string)', function () {\n      const [index, length, formats, source] = overload(0, 1, {\n        bold: true\n      }, Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        bold: true\n      });\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(index:number, length:number, source:string)","suites":["Quill","overload"],"line":556,"updatePoint":{"line":556,"column":52,"index":21684},"code":"    it('(index:number, length:number, source:string)', function () {\n      const [index, length, formats, source] = overload(0, 1, Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({});\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(index:number, source:string)","suites":["Quill","overload"],"line":563,"updatePoint":{"line":563,"column":37,"index":21970},"code":"    it('(index:number, source:string)', function () {\n      const [index, length, formats, source] = overload(0, Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(0);\n      expect(formats).toEqual({});\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range)","suites":["Quill","overload"],"line":570,"updatePoint":{"line":570,"column":21,"index":22237},"code":"    it('(range:range)', function () {\n      const [index, length, formats, source] = overload(new Range(0, 1));\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({});\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, format:string, value:boolean, source:string)","suites":["Quill","overload"],"line":577,"updatePoint":{"line":577,"column":66,"index":22542},"code":"    it('(range:range, format:string, value:boolean, source:string)', function () {\n      const [index, length, formats, source] = overload(new Range(0, 1), 'bold', true, Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        bold: true\n      });\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, format:string, value:string, source:string)","suites":["Quill","overload"],"line":586,"updatePoint":{"line":586,"column":65,"index":22907},"code":"    it('(range:range, format:string, value:string, source:string)', function () {\n      const [index, length, formats, source] = overload(new Range(0, 1), 'color', Quill.sources.API, Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        color: Quill.sources.API\n      });\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, format:string, value:string)","suites":["Quill","overload"],"line":595,"updatePoint":{"line":595,"column":50,"index":23285},"code":"    it('(range:range, format:string, value:string)', function () {\n      const [index, length, formats, source] = overload(new Range(0, 1), 'color', Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        color: Quill.sources.USER\n      });\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, format:object)","suites":["Quill","overload"],"line":604,"updatePoint":{"line":604,"column":36,"index":23630},"code":"    it('(range:range, format:object)', function () {\n      const [index, length, formats, source] = overload(new Range(0, 1), {\n        bold: true\n      });\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        bold: true\n      });\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, format:object, source:string)","suites":["Quill","overload"],"line":615,"updatePoint":{"line":615,"column":51,"index":23976},"code":"    it('(range:range, format:object, source:string)', function () {\n      const [index, length, formats, source] = overload(new Range(0, 1), {\n        bold: true\n      }, Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        bold: true\n      });\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, source:string)","suites":["Quill","overload"],"line":626,"updatePoint":{"line":626,"column":36,"index":24328},"code":"    it('(range:range, source:string)', function () {\n      const [index, length, formats, source] = overload(new Range(0, 1), Quill.sources.USER);\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({});\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range)","suites":["Quill","overload"],"line":633,"updatePoint":{"line":633,"column":21,"index":24609},"code":"    it('(range:range)', function () {\n      const [index, length, formats, source] = overload(new Range(0, 1));\n      expect(index).toBe(0);\n      expect(length).toBe(1);\n      expect(formats).toEqual({});\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, dummy:number)","suites":["Quill","overload"],"line":640,"updatePoint":{"line":640,"column":35,"index":24883},"code":"    it('(range:range, dummy:number)', function () {\n      const [index, length, formats, source] = overload(new Range(10, 1), 0);\n      expect(index).toBe(10);\n      expect(length).toBe(1);\n      expect(formats).toEqual({});\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, dummy:number, format:string, value:boolean)","suites":["Quill","overload"],"line":647,"updatePoint":{"line":647,"column":65,"index":25192},"code":"    it('(range:range, dummy:number, format:string, value:boolean)', function () {\n      const [index, length, formats, source] = overload(new Range(10, 1), 0, 'bold', true);\n      expect(index).toBe(10);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        bold: true\n      });\n      expect(source).toBe(Quill.sources.API);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"(range:range, dummy:number, format:object, source:string)","suites":["Quill","overload"],"line":656,"updatePoint":{"line":656,"column":65,"index":25541},"code":"    it('(range:range, dummy:number, format:object, source:string)', function () {\n      const [index, length, formats, source] = overload(new Range(10, 1), 0, {\n        bold: true\n      }, Quill.sources.USER);\n      expect(index).toBe(10);\n      expect(length).toBe(1);\n      expect(formats).toEqual({\n        bold: true\n      });\n      expect(source).toBe(Quill.sources.USER);\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"blank editor","suites":["Quill","placeholder"],"line":676,"updatePoint":{"line":676,"column":20,"index":26194},"code":"    it('blank editor', function () {\n      expect(this.quill.root.dataset.placeholder).toEqual('a great day to be a placeholder');\n      expect(this.quill.root.classList).toContain('ql-blank');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"with text","suites":["Quill","placeholder"],"line":680,"updatePoint":{"line":680,"column":17,"index":26393},"code":"    it('with text', function () {\n      this.quill.setText('test');\n      expect(this.quill.root.classList).not.toContain('ql-blank');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"formatted line","suites":["Quill","placeholder"],"line":684,"updatePoint":{"line":684,"column":22,"index":26541},"code":"    it('formatted line', function () {\n      this.quill.formatLine(0, 1, 'list', 'ordered');\n      expect(this.quill.root.classList).not.toContain('ql-blank');\n    });","file":"unit/core/quill.js","skipped":false,"dir":"test"},{"name":"initial focus","suites":["Selection","focus()"],"line":19,"updatePoint":{"line":19,"column":21,"index":753},"code":"    it('initial focus', function () {\n      expect(this.selection.hasFocus()).toBe(false);\n      this.selection.focus();\n      expect(this.selection.hasFocus()).toBe(true);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"restore last range","suites":["Selection","focus()"],"line":24,"updatePoint":{"line":24,"column":26,"index":939},"code":"    it('restore last range', function () {\n      const range = new Range(1, 2);\n      this.selection.setRange(range);\n      this.textarea.focus();\n      this.textarea.select();\n      expect(this.selection.hasFocus()).toBe(false);\n      this.selection.focus();\n      expect(this.selection.hasFocus()).toBe(true);\n      expect(this.selection.getRange()[0]).toEqual(range);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"empty document","suites":["Selection","getRange()"],"line":36,"updatePoint":{"line":36,"column":22,"index":1359},"code":"    it('empty document', function () {\n      const selection = this.initialize(Selection, '');\n      selection.setNativeRange(this.container.querySelector('br'), 0);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(0);\n      expect(range.length).toEqual(0);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"empty line","suites":["Selection","getRange()"],"line":43,"updatePoint":{"line":43,"column":18,"index":1650},"code":"    it('empty line', function () {\n      const selection = this.initialize(Selection, '<p>0</p><p><br></p><p>3</p>');\n      selection.setNativeRange(this.container.querySelector('br'), 0);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(2);\n      expect(range.length).toEqual(0);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"end of line","suites":["Selection","getRange()"],"line":50,"updatePoint":{"line":50,"column":19,"index":1969},"code":"    it('end of line', function () {\n      const selection = this.initialize(Selection, '<p>0</p>');\n      selection.setNativeRange(this.container.firstChild.firstChild, 1);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(1);\n      expect(range.length).toEqual(0);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"text node","suites":["Selection","getRange()"],"line":57,"updatePoint":{"line":57,"column":17,"index":2269},"code":"    it('text node', function () {\n      const selection = this.initialize(Selection, '<p>0123</p>');\n      selection.setNativeRange(this.container.firstChild.firstChild, 1);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(1);\n      expect(range.length).toEqual(0);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"line boundaries","suites":["Selection","getRange()"],"line":64,"updatePoint":{"line":64,"column":23,"index":2578},"code":"    it('line boundaries', function () {\n      const selection = this.initialize(Selection, '<p><br></p><p>12</p>');\n      selection.setNativeRange(this.container.firstChild, 0, this.container.lastChild.lastChild, 2);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(0);\n      expect(range.length).toEqual(3);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"nested text node","suites":["Selection","getRange()"],"line":71,"updatePoint":{"line":71,"column":24,"index":2925},"code":"    it('nested text node', function () {\n      const selection = this.initialize(Selection, `\n        <p><strong><em>01</em></strong></p>\n        <ol>\n          <li data-list=\"bullet\"><em><u>34</u></em></li>\n        </ol>`);\n      selection.setNativeRange(this.container.querySelector('em').firstChild, 1, this.container.querySelector('u').firstChild, 1);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(1);\n      expect(range.length).toEqual(3);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"between embed across lines","suites":["Selection","getRange()"],"line":82,"updatePoint":{"line":82,"column":34,"index":3420},"code":"    it('between embed across lines', function () {\n      const selection = this.initialize(Selection, `\n        <p>\n          <img src=\"/assets/favicon.png\">\n          <img src=\"/assets/favicon.png\">\n        </p>\n        <p>\n          <img src=\"/assets/favicon.png\">\n          <img src=\"/assets/favicon.png\">\n        </p>`);\n      selection.setNativeRange(this.container.firstChild, 1, this.container.lastChild, 1);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(1);\n      expect(range.length).toEqual(3);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"between embed across list","suites":["Selection","getRange()"],"line":97,"updatePoint":{"line":97,"column":33,"index":3964},"code":"    it('between embed across list', function () {\n      const selection = this.initialize(Selection, `\n        <p>\n          <img src=\"/assets/favicon.png\">\n          <img src=\"/assets/favicon.png\">\n        </p>\n        <ol>\n          <li data-list=\"bullet\">\n            <img src=\"/assets/favicon.png\">\n            <img src=\"/assets/favicon.png\">\n          </li>\n        </ol>`);\n      selection.setNativeRange(this.container.firstChild, 1, this.container.lastChild.firstChild, 2);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(1);\n      expect(range.length).toEqual(3);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"between inlines","suites":["Selection","getRange()"],"line":114,"updatePoint":{"line":114,"column":23,"index":4565},"code":"    it('between inlines', function () {\n      const selection = this.initialize(Selection, '<p><em>01</em><s>23</s><u>45</u></p>');\n      selection.setNativeRange(this.container.firstChild, 1, this.container.firstChild, 2);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(2);\n      expect(range.length).toEqual(2);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"between blocks","suites":["Selection","getRange()"],"line":121,"updatePoint":{"line":121,"column":22,"index":4917},"code":"    it('between blocks', function () {\n      const selection = this.initialize(Selection, `\n        <p>01</p>\n        <p><br></p>\n        <ol>\n          <li data-list=\"bullet\">45</li>\n          <li data-list=\"bullet\">78</li>\n        </ol>`);\n      selection.setNativeRange(this.container, 1, this.container.lastChild, 1);\n      const [range] = selection.getRange();\n      expect(range.index).toEqual(3);\n      expect(range.length).toEqual(4);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"wrong input","suites":["Selection","getRange()"],"line":134,"updatePoint":{"line":134,"column":19,"index":5365},"code":"    it('wrong input', function () {\n      const container = this.initialize(HTMLElement, `\n        <textarea>Test</textarea>\n        <div></div>`);\n      const selection = this.initialize(Selection, '<p>0123</p>', container.lastChild);\n      container.firstChild.select();\n      const [range] = selection.getRange();\n      expect(range).toEqual(null);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"empty document","suites":["Selection","setRange()"],"line":145,"updatePoint":{"line":145,"column":22,"index":5773},"code":"    it('empty document', function () {\n      const selection = this.initialize(Selection, '');\n      const expected = new Range(0);\n      selection.setRange(expected);\n      const [range] = selection.getRange();\n      expect(range).toEqual(expected);\n      expect(selection.hasFocus()).toBe(true);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"empty lines","suites":["Selection","setRange()"],"line":153,"updatePoint":{"line":153,"column":19,"index":6076},"code":"    it('empty lines', function () {\n      const selection = this.initialize(Selection, `\n        <p><br></p>\n        <ol>\n          <li data-list=\"bullet\"><br></li>\n        </ol>`);\n      const expected = new Range(0, 1);\n      selection.setRange(expected);\n      const [range] = selection.getRange();\n      expect(range).toEqual(range);\n      expect(selection.hasFocus()).toBe(true);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"nested text node","suites":["Selection","setRange()"],"line":165,"updatePoint":{"line":165,"column":24,"index":6474},"code":"    it('nested text node', function () {\n      const selection = this.initialize(Selection, `\n        <p><strong><em>01</em></strong></p>\n        <ol>\n          <li data-list=\"bullet\"><em><u>34</u></em></li>\n        </ol>`);\n      const expected = new Range(1, 3);\n      selection.setRange(expected);\n      const [range] = selection.getRange();\n      expect(range).toEqual(expected);\n      expect(selection.hasFocus()).toBe(true);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"between inlines","suites":["Selection","setRange()"],"line":177,"updatePoint":{"line":177,"column":23,"index":6912},"code":"    it('between inlines', function () {\n      const selection = this.initialize(Selection, '<p><em>01</em><s>23</s><u>45</u></p>');\n      const expected = new Range(2, 2);\n      selection.setRange(expected);\n      const [range] = selection.getRange();\n      expect(range).toEqual(expected);\n      expect(selection.hasFocus()).toBe(true);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"single embed","suites":["Selection","setRange()"],"line":185,"updatePoint":{"line":185,"column":20,"index":7255},"code":"    it('single embed', function () {\n      const selection = this.initialize(Selection, `<p><img src=\"/assets/favicon.png\"></p>`);\n      const expected = new Range(1, 0);\n      selection.setRange(expected);\n      const [range] = selection.getRange();\n      expect(range).toEqual(expected);\n      expect(selection.hasFocus()).toBe(true);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"between embeds","suites":["Selection","setRange()"],"line":193,"updatePoint":{"line":193,"column":22,"index":7602},"code":"    it('between embeds', function () {\n      const selection = this.initialize(Selection, `\n        <p>\n          <img src=\"/assets/favicon.png\">\n          <img src=\"/assets/favicon.png\">\n        </p>\n        <ol>\n          <li data-list=\"bullet\">\n            <img src=\"/assets/favicon.png\">\n            <img src=\"/assets/favicon.png\">\n          </li>\n        </ol>`);\n      const expected = new Range(1, 3);\n      selection.setRange(expected);\n      const [range] = selection.getRange();\n      expect(range).toEqual(expected);\n      expect(selection.hasFocus()).toBe(true);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"null","suites":["Selection","setRange()"],"line":211,"updatePoint":{"line":211,"column":12,"index":8175},"code":"    it('null', function () {\n      const selection = this.initialize(Selection, '<p>0123</p>');\n      selection.setRange(new Range(1));\n      let [range] = selection.getRange();\n      expect(range).not.toEqual(null);\n      selection.setRange(null);\n      [range] = selection.getRange();\n      expect(range).toEqual(null);\n      expect(selection.hasFocus()).toBe(false);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"after format","suites":["Selection","setRange()"],"line":221,"updatePoint":{"line":221,"column":20,"index":8561},"code":"    it('after format', function (done) {\n      const selection = this.initialize(Selection, '<p>0123 567 9012</p>');\n      selection.setRange(new Range(5));\n      selection.format('bold', true);\n      selection.format('bold', false);\n      selection.setRange(new Range(8));\n      selection.emitter.once(Emitter.events.SCROLL_OPTIMIZE, () => {\n        const [range] = selection.getRange();\n        expect(range.index).toEqual(8);\n        done();\n      });\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"trailing","suites":["Selection","format()"],"line":235,"updatePoint":{"line":235,"column":16,"index":9063},"code":"    it('trailing', function () {\n      this.setup(`<p>0123</p>`, 4);\n      this.selection.format('bold', true);\n      expect(this.selection.getRange()[0].index).toEqual(4);\n      expect(this.container).toEqualHTML(`\n        <p>0123<strong><span class=\"ql-cursor\">${Cursor.CONTENTS}</span></strong></p>\n      `);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"split nodes","suites":["Selection","format()"],"line":243,"updatePoint":{"line":243,"column":19,"index":9386},"code":"    it('split nodes', function () {\n      this.setup(`<p><em>0123</em></p>`, 2);\n      this.selection.format('bold', true);\n      expect(this.selection.getRange()[0].index).toEqual(2);\n      expect(this.container).toEqualHTML(`\n        <p>\n          <em>01</em>\n          <strong><em><span class=\"ql-cursor\">${Cursor.CONTENTS}</span></em></strong>\n          <em>23</em>\n        </p>\n      `);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"between characters","suites":["Selection","format()"],"line":255,"updatePoint":{"line":255,"column":26,"index":9794},"code":"    it('between characters', function () {\n      this.setup(`<p><em>0</em><strong>1</strong></p>`, 1);\n      this.selection.format('underline', true);\n      expect(this.selection.getRange()[0].index).toEqual(1);\n      expect(this.container).toEqualHTML(`\n        <p><em>0<u><span class=\"ql-cursor\">${Cursor.CONTENTS}</span></u></em><strong>1</strong></p>\n      `);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"empty line","suites":["Selection","format()"],"line":263,"updatePoint":{"line":263,"column":18,"index":10159},"code":"    it('empty line', function () {\n      this.setup(`<p><br></p>`, 0);\n      this.selection.format('bold', true);\n      expect(this.selection.getRange()[0].index).toEqual(0);\n      expect(this.container).toEqualHTML(`\n        <p><strong><span class=\"ql-cursor\">${Cursor.CONTENTS}</span></strong></p>\n      `);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"cursor interference","suites":["Selection","format()"],"line":271,"updatePoint":{"line":271,"column":27,"index":10486},"code":"    it('cursor interference', function () {\n      this.setup(`<p>0123</p>`, 2);\n      this.selection.format('underline', true);\n      this.selection.scroll.update();\n      const native = this.selection.getNativeRange();\n      expect(native.start.node).toEqual(this.selection.cursor.textNode);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"multiple","suites":["Selection","format()"],"line":278,"updatePoint":{"line":278,"column":16,"index":10776},"code":"    it('multiple', function () {\n      this.setup(`<p>0123</p>`, 2);\n      this.selection.format('color', 'red');\n      this.selection.format('italic', true);\n      this.selection.format('underline', true);\n      this.selection.format('background', 'blue');\n      expect(this.selection.getRange()[0].index).toEqual(2);\n      expect(this.container).toEqualHTML(`\n        <p>\n          01\n          <em style=\"color: red; background-color: blue;\"><u>\n            <span class=\"ql-cursor\">${Cursor.CONTENTS}</span>\n          </u></em>\n          23\n        </p>\n      `);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"remove format","suites":["Selection","format()"],"line":295,"updatePoint":{"line":295,"column":21,"index":11356},"code":"    it('remove format', function () {\n      this.setup(`<p><strong>0123</strong></p>`, 2);\n      this.selection.format('italic', true);\n      this.selection.format('underline', true);\n      this.selection.format('italic', false);\n      expect(this.selection.getRange()[0].index).toEqual(2);\n      expect(this.container).toEqualHTML(`\n        <p>\n          <strong>\n            01<u><span class=\"ql-cursor\">${Cursor.CONTENTS}</span></u>23\n          </strong>\n        </p>\n      `);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"selection change cleanup","suites":["Selection","format()"],"line":309,"updatePoint":{"line":309,"column":32,"index":11856},"code":"    it('selection change cleanup', function () {\n      this.setup(`<p>0123</p>`, 2);\n      this.selection.format('italic', true);\n      this.selection.setRange(new Range(0, 0));\n      this.selection.scroll.update();\n      expect(this.container).toEqualHTML('<p>0123</p>');\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"text change cleanup","suites":["Selection","format()"],"line":316,"updatePoint":{"line":316,"column":27,"index":12132},"code":"    it('text change cleanup', function () {\n      this.setup(`<p>0123</p>`, 2);\n      this.selection.format('italic', true);\n      this.selection.cursor.textNode.data = `${Cursor.CONTENTS}|`;\n      this.selection.setNativeRange(this.selection.cursor.textNode, 2);\n      this.selection.scroll.update();\n      expect(this.container).toEqualHTML('<p>01<em>|</em>23</p>');\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"no cleanup","suites":["Selection","format()"],"line":324,"updatePoint":{"line":324,"column":18,"index":12500},"code":"    it('no cleanup', function () {\n      this.setup('<p>0123</p><p><br></p>', 2);\n      this.selection.format('italic', true);\n      this.container.removeChild(this.container.lastChild);\n      this.selection.scroll.update();\n      expect(this.selection.getRange()[0].index).toEqual(2);\n      expect(this.container).toEqualHTML(`\n        <p>01<em><span class=\"ql-cursor\">${Cursor.CONTENTS}</span></em>23</p>\n      `);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"one level","suites":["Selection","format()","unlink cursor"],"line":336,"updatePoint":{"line":336,"column":19,"index":13048},"code":"      it('one level', function () {\n        this.setup('<p><strong><a href=\"https://example.com\">link</a></strong></p><p><br></p>', 4);\n        this.selection.format('bold', false);\n        expect(this.container).toEqualHTML(`\n          <p><strong><a href=\"https://example.com\">link</a></strong>${cursorHTML}</p><p><br></p>\n        `);\n      });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"nested formats","suites":["Selection","format()","unlink cursor"],"line":343,"updatePoint":{"line":343,"column":24,"index":13399},"code":"      it('nested formats', function () {\n        this.setup('<p><strong><em><a href=\"https://example.com\">bold</a></em></strong></p><p><br></p>', 4);\n        this.selection.format('italic', false);\n        expect(this.container).toEqualHTML(`\n          <p><strong><em><a href=\"https://example.com\">bold</a></em>${cursorHTML}</strong></p><p><br></p>\n        `);\n      });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"ignore link format","suites":["Selection","format()","unlink cursor"],"line":350,"updatePoint":{"line":350,"column":28,"index":13774},"code":"      it('ignore link format', function () {\n        this.setup('<p><strong>bold</strong></p><p><br></p>', 4);\n        this.selection.format('link', 'https://example.com');\n        expect(this.container).toEqualHTML(`\n          <p><strong>bold${cursorHTML}</strong></p><p><br></p>\n        `);\n      });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"empty document","suites":["Selection","getBounds()"],"line":390,"updatePoint":{"line":390,"column":22,"index":15436},"code":"    it('empty document', function () {\n      const selection = this.initialize(Selection, '<p><br></p>', this.div);\n      this.bounds = selection.getBounds(0);\n      if (/Android/i.test(navigator.userAgent)) return; // false positive on emulators atm\n      expect(this.bounds.left).toBeApproximately(this.reference.left, 1);\n      expect(this.bounds.height).toBeApproximately(this.reference.height, 1);\n      expect(this.bounds.top).toBeApproximately(this.reference.top, 1);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"empty line","suites":["Selection","getBounds()"],"line":398,"updatePoint":{"line":398,"column":18,"index":15915},"code":"    it('empty line', function () {\n      const selection = this.initialize(Selection, `\n        <p>0000</p>\n        <p><br></p>\n        <p>0000</p>`, this.div);\n      this.bounds = selection.getBounds(5);\n      if (/Android/i.test(navigator.userAgent)) return; // false positive on emulators atm\n      expect(this.bounds.left).toBeApproximately(this.reference.left, 1);\n      expect(this.bounds.height).toBeApproximately(this.reference.height, 1);\n      expect(this.bounds.top).toBeApproximately(this.reference.top + this.reference.lineHeight, 2);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"plain text","suites":["Selection","getBounds()"],"line":409,"updatePoint":{"line":409,"column":18,"index":16471},"code":"    it('plain text', function () {\n      const selection = this.initialize(Selection, '<p>0123</p>', this.div);\n      this.bounds = selection.getBounds(2);\n      expect(this.bounds.left).toBeApproximately(this.reference.left + this.reference.width * 2, 2);\n      expect(this.bounds.height).toBeApproximately(this.reference.height, 1);\n      expect(this.bounds.top).toBeApproximately(this.reference.top, 1);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"multiple characters","suites":["Selection","getBounds()"],"line":416,"updatePoint":{"line":416,"column":27,"index":16895},"code":"    it('multiple characters', function () {\n      const selection = this.initialize(Selection, '<p>0123</p>', this.div);\n      this.bounds = selection.getBounds(1, 2);\n      expect(this.bounds.left).toBeApproximately(this.reference.left + this.reference.width, 2);\n      expect(this.bounds.height).toBeApproximately(this.reference.height, 1);\n      expect(this.bounds.top).toBeApproximately(this.reference.top, 1);\n      expect(this.bounds.width).toBeApproximately(this.reference.width * 2, 2);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"start of line","suites":["Selection","getBounds()"],"line":424,"updatePoint":{"line":424,"column":21,"index":17392},"code":"    it('start of line', function () {\n      const selection = this.initialize(Selection, `\n        <p>0000</p>\n        <p>0000</p>`, this.div);\n      this.bounds = selection.getBounds(5);\n      expect(this.bounds.left).toBeApproximately(this.reference.left, 1);\n      expect(this.bounds.height).toBeApproximately(this.reference.height, 1);\n      expect(this.bounds.top).toBeApproximately(this.reference.top + this.reference.lineHeight, 1);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"end of line","suites":["Selection","getBounds()"],"line":433,"updatePoint":{"line":433,"column":19,"index":17838},"code":"    it('end of line', function () {\n      const selection = this.initialize(Selection, `\n        <p>0000</p>\n        <p>0000</p>\n        <p>0000</p>`, this.div);\n      this.bounds = selection.getBounds(9);\n      expect(this.bounds.left).toBeApproximately(this.reference.left + this.reference.width * 4, 4);\n      expect(this.bounds.height).toBeApproximately(this.reference.height, 1);\n      expect(this.bounds.top).toBeApproximately(this.reference.top + this.reference.lineHeight, 1);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"multiple lines","suites":["Selection","getBounds()"],"line":443,"updatePoint":{"line":443,"column":22,"index":18334},"code":"    it('multiple lines', function () {\n      const selection = this.initialize(Selection, `\n        <p>0000</p>\n        <p>0000</p>\n        <p>0000</p>`, this.div);\n      this.bounds = selection.getBounds(2, 4);\n      expect(this.bounds.left).toBeApproximately(this.reference.left, 1);\n      expect(this.bounds.height).toBeApproximately(this.reference.height * 2, 2);\n      expect(this.bounds.top).toBeApproximately(this.reference.top, 1);\n      expect(this.bounds.width).toBeGreaterThan(3 * this.reference.width);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"large text","suites":["Selection","getBounds()"],"line":454,"updatePoint":{"line":454,"column":18,"index":18853},"code":"    it('large text', function () {\n      const selection = this.initialize(Selection, '<p><span class=\"ql-size-large\">0000</span></p>', this.div);\n      const span = this.div.querySelector('span');\n      if (/Trident/i.test(navigator.userAgent)) {\n        span.style.lineHeight = '27px';\n      }\n      this.bounds = selection.getBounds(2);\n      expect(this.bounds.left).toBeApproximately(this.reference.left + span.offsetWidth / 2, 1);\n      expect(this.bounds.height).toBeApproximately(span.offsetHeight, 1);\n      expect(this.bounds.top).toBeApproximately(this.reference.top, 1);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"image","suites":["Selection","getBounds()"],"line":465,"updatePoint":{"line":465,"column":13,"index":19439},"code":"    it('image', function () {\n      const selection = this.initialize(Selection, `\n        <p>\n          <img src=\"/assets/favicon.png\" width=\"32px\" height=\"32px\">\n          <img src=\"/assets/favicon.png\" width=\"32px\" height=\"32px\">\n        </p>`, this.div);\n      this.bounds = selection.getBounds(1);\n      expect(this.bounds.left).toBeApproximately(this.reference.left + 32, 1);\n      expect(this.bounds.height).toBeApproximately(32, 1);\n      expect(this.bounds.top).toBeApproximately(this.reference.top, 1);\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"beyond document","suites":["Selection","getBounds()"],"line":476,"updatePoint":{"line":476,"column":23,"index":19970},"code":"    it('beyond document', function () {\n      const selection = this.initialize(Selection, '<p>0123</p>');\n      expect(() => {\n        this.bounds = selection.getBounds(10, 0);\n      }).not.toThrow();\n      expect(() => {\n        this.bounds = selection.getBounds(0, 10);\n      }).not.toThrow();\n    });","file":"unit/core/selection.js","skipped":false,"dir":"test"},{"name":"add","suites":["Align"],"line":4,"updatePoint":{"line":4,"column":9,"index":118},"code":"  it('add', function () {\n    const editor = this.initialize(Editor, '<p>0123</p>');\n    editor.formatText(4, 1, {\n      align: 'center'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      align: 'center'\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<p class=\"ql-align-center\">0123</p>');\n  });","file":"unit/formats/align.js","skipped":false,"dir":"test"},{"name":"remove","suites":["Align"],"line":14,"updatePoint":{"line":14,"column":12,"index":469},"code":"  it('remove', function () {\n    const editor = this.initialize(Editor, '<p class=\"ql-align-center\">0123</p>');\n    editor.formatText(4, 1, {\n      align: false\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<p>0123</p>');\n  });","file":"unit/formats/align.js","skipped":false,"dir":"test"},{"name":"whitelist","suites":["Align"],"line":22,"updatePoint":{"line":22,"column":15,"index":778},"code":"  it('whitelist', function () {\n    const editor = this.initialize(Editor, '<p class=\"ql-align-center\">0123</p>');\n    const initial = editor.scroll.domNode.innerHTML;\n    editor.formatText(4, 1, {\n      align: 'middle'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      align: 'center'\n    }));\n    expect(editor.scroll.domNode).toEqualHTML(initial);\n  });","file":"unit/formats/align.js","skipped":false,"dir":"test"},{"name":"invalid scope","suites":["Align"],"line":33,"updatePoint":{"line":33,"column":19,"index":1183},"code":"  it('invalid scope', function () {\n    const editor = this.initialize(Editor, '<p>0123</p>');\n    const initial = editor.scroll.domNode.innerHTML;\n    editor.formatText(1, 2, {\n      align: 'center'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123\\n'));\n    expect(editor.scroll.domNode).toEqualHTML(initial);\n  });","file":"unit/formats/align.js","skipped":false,"dir":"test"},{"name":"optimize and merge","suites":["Bold"],"line":3,"updatePoint":{"line":3,"column":24,"index":100},"code":"  it('optimize and merge', function () {\n    const scroll = this.initialize(Scroll, '<p><strong>a</strong>b<strong>c</strong></p>');\n    const bold = document.createElement('b');\n    bold.appendChild(scroll.domNode.firstChild.childNodes[1]);\n    scroll.domNode.firstChild.insertBefore(bold, scroll.domNode.firstChild.lastChild);\n    scroll.update();\n    expect(scroll.domNode).toEqualHTML('<p><strong>abc</strong></p>');\n  });","file":"unit/formats/bold.js","skipped":false,"dir":"test"},{"name":"format newline","suites":["Code"],"line":4,"updatePoint":{"line":4,"column":20,"index":128},"code":"  it('format newline', function () {\n    const editor = this.initialize(Editor, '<p><br></p>');\n    editor.formatLine(0, 1, {\n      'code-block': true\n    });\n    expect(editor.scroll.domNode).toEqualHTML(`<div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\"><br></div>\n      </div>`);\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"format lines","suites":["Code"],"line":13,"updatePoint":{"line":13,"column":18,"index":457},"code":"  it('format lines', function () {\n    const editor = this.initialize(Editor, '<p><em>0123</em></p><p>5678</p>');\n    editor.formatLine(2, 5, {\n      'code-block': true\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      'code-block': true\n    }).insert('5678').insert('\\n', {\n      'code-block': true\n    }));\n    expect(editor.scroll.domNode).toEqualHTML(`<div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">0123</div>\n        <div class=\"ql-code-block\">5678</div>\n      </div>`);\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"remove format","suites":["Code"],"line":28,"updatePoint":{"line":28,"column":19,"index":1029},"code":"  it('remove format', function () {\n    const editor = this.initialize(Editor, '<div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">0123</div></div>');\n    editor.formatText(4, 1, {\n      'code-block': false\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<p>0123</p>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"delete last","suites":["Code"],"line":36,"updatePoint":{"line":36,"column":17,"index":1411},"code":"  it('delete last', function () {\n    const editor = this.initialize(Editor, '<p>0123</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"><br></div></div><p>5678</p>');\n    editor.deleteText(4, 1);\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      'code-block': true\n    }).insert('5678\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">0123</div></div><p>5678</p>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"delete merge before","suites":["Code"],"line":44,"updatePoint":{"line":44,"column":25,"index":1949},"code":"  it('delete merge before', function () {\n    const editor = this.initialize(Editor, '<h1>0123</h1><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">4567</div></div>');\n    editor.deleteText(4, 1);\n    expect(editor.getDelta()).toEqual(new Delta().insert('01234567').insert('\\n', {\n      'code-block': true\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">01234567</div></div>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"delete merge after","suites":["Code"],"line":52,"updatePoint":{"line":52,"column":24,"index":2457},"code":"  it('delete merge after', function () {\n    const editor = this.initialize(Editor, '<div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">0123</div></div><h1>4567</h1>');\n    editor.deleteText(4, 1);\n    expect(editor.getDelta()).toEqual(new Delta().insert('01234567').insert('\\n', {\n      header: 1\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<h1>01234567</h1>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"delete across before partial merge","suites":["Code"],"line":60,"updatePoint":{"line":60,"column":40,"index":2886},"code":"  it('delete across before partial merge', function () {\n    const editor = this.initialize(Editor, `<div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n        <div class=\"ql-code-block\">34</div>\n        <div class=\"ql-code-block\">67</div>\n      </div>\n      <h1>90</h1>`);\n    editor.deleteText(7, 3);\n    expect(editor.getDelta()).toEqual(new Delta().insert('01').insert('\\n', {\n      'code-block': true\n    }).insert('34').insert('\\n', {\n      'code-block': true\n    }).insert('60').insert('\\n', {\n      header: 1\n    }));\n    expect(editor.scroll.domNode.innerHTML).toEqualHTML(`<div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n        <div class=\"ql-code-block\">34</div>\n      </div>\n      <h1>60</h1>`);\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"delete across before no merge","suites":["Code"],"line":81,"updatePoint":{"line":81,"column":35,"index":3699},"code":"  it('delete across before no merge', function () {\n    const editor = this.initialize(Editor, `<div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n        <div class=\"ql-code-block\">34</div>\n      </div>\n      <h1>6789</h1>`);\n    editor.deleteText(3, 5);\n    expect(editor.getDelta()).toEqual(new Delta().insert('01').insert('\\n', {\n      'code-block': true\n    }).insert('89').insert('\\n', {\n      header: 1\n    }));\n    expect(editor.scroll.domNode.innerHTML).toEqualHTML('<div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">01</div></div><h1>89</h1>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"delete across after","suites":["Code"],"line":95,"updatePoint":{"line":95,"column":25,"index":4333},"code":"  it('delete across after', function () {\n    const editor = this.initialize(Editor, `<h1>0123</h1>\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">56</div>\n        <div class=\"ql-code-block\">89</div>\n      </div>`);\n    editor.deleteText(2, 4);\n    expect(editor.getDelta()).toEqual(new Delta().insert('016').insert('\\n', {\n      'code-block': true\n    }).insert('89').insert('\\n', {\n      'code-block': true\n    }));\n    expect(editor.scroll.domNode.innerHTML).toEqualHTML(`\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">016</div>\n        <div class=\"ql-code-block\">89</div>\n      </div>\n    `);\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"replace","suites":["Code"],"line":114,"updatePoint":{"line":114,"column":13,"index":5027},"code":"  it('replace', function () {\n    const editor = this.initialize(Editor, '<div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">0123</div></div>');\n    editor.formatText(4, 1, {\n      header: 1\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      header: 1\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<h1>0123</h1>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"replace multiple","suites":["Code"],"line":124,"updatePoint":{"line":124,"column":22,"index":5442},"code":"  it('replace multiple', function () {\n    const editor = this.initialize(Editor, `\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n        <div class=\"ql-code-block\">23</div>\n      </div>\n    `);\n    editor.formatText(0, 6, {\n      header: 1\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('01').insert('\\n', {\n      header: 1\n    }).insert('23').insert('\\n', {\n      header: 1\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<h1>01</h1><h1>23</h1>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"format imprecise bounds","suites":["Code"],"line":141,"updatePoint":{"line":141,"column":29,"index":5992},"code":"  it('format imprecise bounds', function () {\n    const editor = this.initialize(Editor, `\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n        <div class=\"ql-code-block\">23</div>\n        <div class=\"ql-code-block\">45</div>\n      </div>\n    `);\n    editor.formatText(1, 6, {\n      header: 1\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('01').insert('\\n', {\n      header: 1\n    }).insert('23').insert('\\n', {\n      header: 1\n    }).insert('45').insert('\\n', {\n      'code-block': true\n    }));\n    expect(editor.scroll.domNode.innerHTML).toEqualHTML('<h1>01</h1><h1>23</h1><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">45</div></div>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"format without newline","suites":["Code"],"line":161,"updatePoint":{"line":161,"column":28,"index":6752},"code":"  it('format without newline', function () {\n    const editor = this.initialize(Editor, `\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n        <div class=\"ql-code-block\">23</div>\n        <div class=\"ql-code-block\">45</div>\n      </div>\n    `);\n    editor.formatText(3, 1, {\n      header: 1\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('01').insert('\\n', {\n      'code-block': true\n    }).insert('23').insert('\\n', {\n      'code-block': true\n    }).insert('45').insert('\\n', {\n      'code-block': true\n    }));\n    expect(editor.scroll.domNode.innerHTML).toEqualHTML(`\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n        <div class=\"ql-code-block\">23</div>\n        <div class=\"ql-code-block\">45</div>\n      </div>\n    `);\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"format line","suites":["Code"],"line":187,"updatePoint":{"line":187,"column":17,"index":7613},"code":"  it('format line', function () {\n    const editor = this.initialize(Editor, `\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n        <div class=\"ql-code-block\">23</div>\n        <div class=\"ql-code-block\">45</div>\n      </div>\n    `);\n    editor.formatLine(3, 1, {\n      header: 1\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('01').insert('\\n', {\n      'code-block': true\n    }).insert('23').insert('\\n', {\n      header: 1\n    }).insert('45').insert('\\n', {\n      'code-block': true\n    }));\n    expect(editor.scroll.domNode.innerHTML).toEqualHTML(`\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">01</div>\n      </div>\n      <h1>23</h1>\n      <div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">45</div>\n      </div>\n    `);\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"ignore formatAt","suites":["Code"],"line":215,"updatePoint":{"line":215,"column":21,"index":8519},"code":"  it('ignore formatAt', function () {\n    const editor = this.initialize(Editor, '<div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">0123</div></div>');\n    editor.formatText(1, 1, {\n      bold: true\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      'code-block': true\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">0123</div></div>');\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"partial block modification applyDelta","suites":["Code"],"line":225,"updatePoint":{"line":225,"column":43,"index":9051},"code":"  it('partial block modification applyDelta', function () {\n    const editor = this.initialize(Editor, `<div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">a</div>\n        <div class=\"ql-code-block\">b</div>\n        <div class=\"ql-code-block\"><br></div>\n      </div>`);\n    const delta = new Delta().retain(3).insert('\\n', {\n      'code-block': true\n    }).delete(1).retain(1, {\n      'code-block': null\n    });\n    editor.applyDelta(delta);\n    expect(editor.scroll.domNode.innerHTML).toEqualHTML(`<div class=\"ql-code-block-container\" spellcheck=\"false\">\n        <div class=\"ql-code-block\">a</div>\n        <div class=\"ql-code-block\">b</div>\n      </div>\n      <p><br></p>`);\n  });","file":"unit/formats/code.js","skipped":false,"dir":"test"},{"name":"add","suites":["Color"],"line":4,"updatePoint":{"line":4,"column":9,"index":118},"code":"  it('add', function () {\n    const editor = this.initialize(Editor, '<p>0123</p>');\n    editor.formatText(1, 2, {\n      color: 'red'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0').insert('12', {\n      color: 'red'\n    }).insert('3\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<p>0<span style=\"color: red;\">12</span>3</p>');\n  });","file":"unit/formats/color.js","skipped":false,"dir":"test"},{"name":"remove","suites":["Color"],"line":14,"updatePoint":{"line":14,"column":12,"index":483},"code":"  it('remove', function () {\n    const editor = this.initialize(Editor, '<p>0<strong style=\"color: red;\">12</strong>3</p>');\n    editor.formatText(1, 2, {\n      color: false\n    });\n    const delta = new Delta().insert('0').insert('12', {\n      bold: true\n    }).insert('3\\n');\n    expect(editor.getDelta()).toEqual(delta);\n    expect(editor.scroll.domNode).toEqualHTML('<p>0<strong>12</strong>3</p>');\n  });","file":"unit/formats/color.js","skipped":false,"dir":"test"},{"name":"remove unwrap","suites":["Color"],"line":25,"updatePoint":{"line":25,"column":19,"index":899},"code":"  it('remove unwrap', function () {\n    const editor = this.initialize(Editor, '<p>0<span style=\"color: red;\">12</span>3</p>');\n    editor.formatText(1, 2, {\n      color: false\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<p>0123</p>');\n  });","file":"unit/formats/color.js","skipped":false,"dir":"test"},{"name":"invalid scope","suites":["Color"],"line":33,"updatePoint":{"line":33,"column":19,"index":1221},"code":"  it('invalid scope', function () {\n    const editor = this.initialize(Editor, '<p>0123</p>');\n    const initial = editor.scroll.domNode.innerHTML;\n    editor.formatText(4, 1, {\n      color: 'red'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123\\n'));\n    expect(editor.scroll.domNode).toEqualHTML(initial);\n  });","file":"unit/formats/color.js","skipped":false,"dir":"test"},{"name":"add","suites":["Header"],"line":4,"updatePoint":{"line":4,"column":9,"index":119},"code":"  it('add', function () {\n    const editor = this.initialize(Editor, '<p><em>0123</em></p>');\n    editor.formatText(4, 1, {\n      header: 1\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123', {\n      italic: true\n    }).insert('\\n', {\n      header: 1\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<h1><em>0123</em></h1>');\n  });","file":"unit/formats/header.js","skipped":false,"dir":"test"},{"name":"remove","suites":["Header"],"line":16,"updatePoint":{"line":16,"column":12,"index":482},"code":"  it('remove', function () {\n    const editor = this.initialize(Editor, '<h1><em>0123</em></h1>');\n    editor.formatText(4, 1, {\n      header: false\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123', {\n      italic: true\n    }).insert('\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<p><em>0123</em></p>');\n  });","file":"unit/formats/header.js","skipped":false,"dir":"test"},{"name":"change","suites":["Header"],"line":26,"updatePoint":{"line":26,"column":12,"index":824},"code":"  it('change', function () {\n    const editor = this.initialize(Editor, '<h1><em>0123</em></h1>');\n    editor.formatText(4, 1, {\n      header: 2\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123', {\n      italic: true\n    }).insert('\\n', {\n      header: 2\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<h2><em>0123</em></h2>');\n  });","file":"unit/formats/header.js","skipped":false,"dir":"test"},{"name":"+1","suites":["Indent"],"line":4,"updatePoint":{"line":4,"column":8,"index":118},"code":"  it('+1', function () {\n    const editor = this.initialize(Editor, '<ol><li data-list=\"bullet\">0123</li></ol>');\n    editor.formatText(4, 1, {\n      indent: '+1'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      list: 'bullet',\n      indent: 1\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<ol><li data-list=\"bullet\" class=\"ql-indent-1\">0123</li></ol>');\n  });","file":"unit/formats/indent.js","skipped":false,"dir":"test"},{"name":"-1","suites":["Indent"],"line":15,"updatePoint":{"line":15,"column":8,"index":534},"code":"  it('-1', function () {\n    const editor = this.initialize(Editor, '<ol><li data-list=\"bullet\" class=\"ql-indent-1\">0123</li></ol>');\n    editor.formatText(4, 1, {\n      indent: '-1'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      list: 'bullet'\n    }));\n    expect(editor.scroll.domNode).toEqualHTML('<ol><li data-list=\"bullet\">0123</li></ol>');\n  });","file":"unit/formats/indent.js","skipped":false,"dir":"test"},{"name":"add","suites":["Link"],"line":5,"updatePoint":{"line":5,"column":9,"index":159},"code":"  it('add', function () {\n    const editor = this.initialize(Editor, '<p>0123</p>');\n    editor.formatText(1, 2, {\n      link: 'https://quilljs.com'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0').insert('12', {\n      link: 'https://quilljs.com'\n    }).insert('3\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<p>0<a href=\"https://quilljs.com\" target=\"_blank\" rel=\"noopener noreferrer\">12</a>3</p>');\n  });","file":"unit/formats/link.js","skipped":false,"dir":"test"},{"name":"add invalid","suites":["Link"],"line":15,"updatePoint":{"line":15,"column":17,"index":602},"code":"  it('add invalid', function () {\n    const editor = this.initialize(Editor, '<p>0123</p>');\n    editor.formatText(1, 2, {\n      link: 'javascript:alert(0);'\n    }); // eslint-disable-line no-script-url\n    expect(editor.getDelta()).toEqual(new Delta().insert('0').insert('12', {\n      link: Link.SANITIZED_URL\n    }).insert('3\\n'));\n  });","file":"unit/formats/link.js","skipped":false,"dir":"test"},{"name":"add non-whitelisted protocol","suites":["Link"],"line":24,"updatePoint":{"line":24,"column":34,"index":959},"code":"  it('add non-whitelisted protocol', function () {\n    const editor = this.initialize(Editor, '<p>0123</p>');\n    editor.formatText(1, 2, {\n      link: 'gopher://quilljs.com'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0').insert('12', {\n      link: Link.SANITIZED_URL\n    }).insert('3\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<p>0<a href=\"about:blank\" target=\"_blank\" rel=\"noopener noreferrer\">12</a>3</p>');\n  });","file":"unit/formats/link.js","skipped":false,"dir":"test"},{"name":"change","suites":["Link"],"line":34,"updatePoint":{"line":34,"column":12,"index":1387},"code":"  it('change', function () {\n    const editor = this.initialize(Editor, '<p>0<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener noreferrer\">12</a>3</p>');\n    editor.formatText(1, 2, {\n      link: 'https://quilljs.com'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0').insert('12', {\n      link: 'https://quilljs.com'\n    }).insert('3\\n'));\n    expect(editor.scroll.domNode).toEqualHTML('<p>0<a href=\"https://quilljs.com\" target=\"_blank\" rel=\"noopener noreferrer\">12</a>3</p>');\n  });","file":"unit/formats/link.js","skipped":false,"dir":"test"},{"name":"remove","suites":["Link"],"line":44,"updatePoint":{"line":44,"column":12,"index":1900},"code":"  it('remove', function () {\n    const editor = this.initialize(Editor, '<p>0<a class=\"ql-size-large\" href=\"https://quilljs.com\" target=\"_blank\" rel=\"noopener noreferrer\">12</a>3</p>');\n    editor.formatText(1, 2, {\n      link: false\n    });\n    const delta = new Delta().insert('0').insert('12', {\n      size: 'large'\n    }).insert('3\\n');\n    expect(editor.getDelta()).toEqual(delta);\n    expect(editor.scroll.domNode).toEqualHTML('<p>0<span class=\"ql-size-large\">12</span>3</p>');\n  });","file":"unit/formats/link.js","skipped":false,"dir":"test"},{"name":"add","suites":["List"],"line":4,"updatePoint":{"line":4,"column":9,"index":117},"code":"  it('add', function () {\n    const editor = this.initialize(Editor, `\n      <p>0123</p>\n      <p>5678</p>\n      <p>0123</p>`);\n    editor.formatText(9, 1, {\n      list: 'ordered'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123\\n5678').insert('\\n', {\n      list: 'ordered'\n    }).insert('0123\\n'));\n    expect(this.container).toEqualHTML(`\n      <p>0123</p>\n      <ol><li data-list=\"ordered\">5678</li></ol>\n      <p>0123</p>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"checklist","suites":["List"],"line":21,"updatePoint":{"line":21,"column":15,"index":585},"code":"  it('checklist', function () {\n    const editor = this.initialize(Editor, `\n      <p>0123</p>\n      <p>5678</p>\n      <p>0123</p>\n    `);\n    editor.scroll.domNode.classList.add('ql-editor');\n    editor.formatText(4, 1, {\n      list: 'checked'\n    });\n    editor.formatText(9, 1, {\n      list: 'unchecked'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      list: 'checked'\n    }).insert('5678').insert('\\n', {\n      list: 'unchecked'\n    }).insert('0123\\n'));\n    expect(this.container).toEqualHTML(`\n      <ol>\n        <li data-list=\"checked\">0123</li>\n        <li data-list=\"unchecked\">5678</li>\n      </ol>\n      <p>0123</p>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"remove","suites":["List"],"line":47,"updatePoint":{"line":47,"column":12,"index":1268},"code":"  it('remove', function () {\n    const editor = this.initialize(Editor, `\n      <p>0123</p>\n      <ol><li data-list=\"ordered\">5678</li></ol>\n      <p>0123</p>\n    `);\n    editor.formatText(9, 1, {\n      list: null\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123\\n5678\\n0123\\n'));\n    expect(this.container).toEqualHTML(`\n      <p>0123</p>\n      <p>5678</p>\n      <p>0123</p>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"replace","suites":["List"],"line":63,"updatePoint":{"line":63,"column":13,"index":1681},"code":"  it('replace', function () {\n    const editor = this.initialize(Editor, `\n      <p>0123</p>\n      <ol><li data-list=\"ordered\">5678</li></ol>\n      <p>0123</p>\n    `);\n    editor.formatText(9, 1, {\n      list: 'bullet'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123\\n5678').insert('\\n', {\n      list: 'bullet'\n    }).insert('0123\\n'));\n    expect(this.container).toEqualHTML(`\n      <p>0123</p>\n      <ol><li data-list=\"bullet\">5678</li></ol>\n      <p>0123</p>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"replace checklist with bullet","suites":["List"],"line":81,"updatePoint":{"line":81,"column":35,"index":2202},"code":"  it('replace checklist with bullet', function () {\n    const editor = this.initialize(Editor, `\n      <ol>\n        <li data-list=\"checked\">0123</li>\n      </ol>\n    `);\n    editor.formatText(4, 1, {\n      list: 'bullet'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      list: 'bullet'\n    }));\n    expect(this.container).toEqualHTML(`\n      <ol><li data-list=\"bullet\">0123</li></ol>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"replace with attributes","suites":["List"],"line":97,"updatePoint":{"line":97,"column":29,"index":2638},"code":"  it('replace with attributes', function () {\n    const editor = this.initialize(Editor, '<ol><li data-list=\"ordered\" class=\"ql-align-center\">0123</li></ol>');\n    editor.formatText(4, 1, {\n      list: 'bullet'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      align: 'center',\n      list: 'bullet'\n    }));\n    expect(this.container).toEqualHTML('<ol><li data-list=\"bullet\" class=\"ql-align-center\">0123</li></ol>');\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"format merge","suites":["List"],"line":108,"updatePoint":{"line":108,"column":18,"index":3094},"code":"  it('format merge', function () {\n    const editor = this.initialize(Editor, `\n      <ol><li data-list=\"ordered\">0123</li></ol>\n      <p>5678</p>\n      <ol><li data-list=\"ordered\">0123</li></ol>\n    `);\n    editor.formatText(9, 1, {\n      list: 'ordered'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      list: 'ordered'\n    }).insert('5678').insert('\\n', {\n      list: 'ordered'\n    }).insert('0123').insert('\\n', {\n      list: 'ordered'\n    }));\n    expect(this.container).toEqualHTML(`\n      <ol>\n        <li data-list=\"ordered\">0123</li>\n        <li data-list=\"ordered\">5678</li>\n        <li data-list=\"ordered\">0123</li>\n      </ol>`);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"delete merge","suites":["List"],"line":131,"updatePoint":{"line":131,"column":18,"index":3786},"code":"  it('delete merge', function () {\n    const editor = this.initialize(Editor, `\n      <ol><li data-list=\"ordered\">0123</li></ol>\n      <p>5678</p>\n      <ol><li data-list=\"ordered\">0123</li></ol>`);\n    editor.deleteText(5, 5);\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      list: 'ordered'\n    }).insert('0123').insert('\\n', {\n      list: 'ordered'\n    }));\n    expect(this.container).toEqualHTML(`\n      <ol>\n        <li data-list=\"ordered\">0123</li>\n        <li data-list=\"ordered\">0123</li>\n      </ol>`);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"merge checklist","suites":["List"],"line":148,"updatePoint":{"line":148,"column":21,"index":4344},"code":"  it('merge checklist', function () {\n    const editor = this.initialize(Editor, `\n      <ol><li data-list=\"checked\">0123</li></ol>\n      <p>5678</p>\n      <ol><li data-list=\"checked\">0123</li></ol>\n    `);\n    editor.formatText(9, 1, {\n      list: 'checked'\n    });\n    expect(editor.getDelta()).toEqual(new Delta().insert('0123').insert('\\n', {\n      list: 'checked'\n    }).insert('5678').insert('\\n', {\n      list: 'checked'\n    }).insert('0123').insert('\\n', {\n      list: 'checked'\n    }));\n    expect(this.container).toEqualHTML(`\n      <ol>\n        <li data-list=\"checked\">0123</li>\n        <li data-list=\"checked\">5678</li>\n        <li data-list=\"checked\">0123</li>\n      </ol>`);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"empty line interop","suites":["List"],"line":171,"updatePoint":{"line":171,"column":24,"index":5042},"code":"  it('empty line interop', function () {\n    const editor = this.initialize(Editor, '<ol><li data-list=\"ordered\"><br></li></ol>');\n    editor.insertText(0, 'Test');\n    expect(this.container).toEqualHTML('<ol><li data-list=\"ordered\">Test</li></ol>');\n    editor.deleteText(0, 4);\n    expect(this.container).toEqualHTML('<ol><li data-list=\"ordered\"><br></li></ol>');\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"delete multiple items","suites":["List"],"line":178,"updatePoint":{"line":178,"column":27,"index":5417},"code":"  it('delete multiple items', function () {\n    const editor = this.initialize(Editor, `\n      <ol>\n        <li data-list=\"ordered\">0123</li>\n        <li data-list=\"ordered\">5678</li>\n        <li data-list=\"ordered\">0123</li>\n      </ol>`);\n    editor.deleteText(2, 5);\n    expect(this.container).toEqualHTML(`\n      <ol>\n        <li data-list=\"ordered\">0178</li>\n        <li data-list=\"ordered\">0123</li>\n      </ol>`);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"delete across last item","suites":["List"],"line":192,"updatePoint":{"line":192,"column":29,"index":5846},"code":"  it('delete across last item', function () {\n    const editor = this.initialize(Editor, `\n      <ol><li data-list=\"ordered\">0123</li></ol>\n      <p>5678</p>`);\n    editor.deleteText(2, 5);\n    expect(this.container).toEqualHTML('<p>0178</p>');\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"delete partial","suites":["List"],"line":199,"updatePoint":{"line":199,"column":20,"index":6088},"code":"  it('delete partial', function () {\n    const editor = this.initialize(Editor, '<p>0123</p><ol><li data-list=\"ordered\">5678</li></ol>');\n    editor.deleteText(2, 5);\n    expect(this.container).toEqualHTML('<ol><li data-list=\"ordered\">0178</li></ol>');\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"nested list replacement","suites":["List"],"line":204,"updatePoint":{"line":204,"column":29,"index":6356},"code":"  it('nested list replacement', function () {\n    const editor = this.initialize(Editor, `\n      <ol>\n        <li data-list=\"bullet\">One</li>\n        <li data-list=\"bullet\" class='ql-indent-1'>Alpha</li>\n        <li data-list=\"bullet\">Two</li>\n      </ol>\n    `);\n    editor.formatLine(1, 10, {\n      list: 'bullet'\n    });\n    expect(this.container).toEqualHTML(`\n      <ol>\n        <li data-list=\"bullet\">One</li>\n        <li data-list=\"bullet\" class='ql-indent-1'>Alpha</li>\n        <li data-list=\"bullet\">Two</li>\n      </ol>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"copy atttributes","suites":["List"],"line":223,"updatePoint":{"line":223,"column":22,"index":6893},"code":"  it('copy atttributes', function () {\n    const editor = this.initialize(Editor, '<p class=\"ql-align-center\">Test</p>');\n    editor.formatLine(4, 1, {\n      list: 'bullet'\n    });\n    expect(this.container).toEqualHTML('<ol><li data-list=\"bullet\" class=\"ql-align-center\">Test</li></ol>');\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"insert block embed","suites":["List"],"line":230,"updatePoint":{"line":230,"column":24,"index":7191},"code":"  it('insert block embed', function () {\n    const editor = this.initialize(Editor, '<ol><li data-list=\"ordered\">Test</li></ol>');\n    editor.insertEmbed(2, 'video', 'https://www.youtube.com/embed/QHH3iSeDBLo?showinfo=0');\n    expect(this.container).toEqualHTML(`\n      <ol><li data-list=\"ordered\">Te</li></ol>\n      <iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"https://www.youtube.com/embed/QHH3iSeDBLo?showinfo=0\"></iframe>\n      <ol><li data-list=\"ordered\">st</li></ol>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"insert block embed at beginning","suites":["List"],"line":239,"updatePoint":{"line":239,"column":37,"index":7715},"code":"  it('insert block embed at beginning', function () {\n    const editor = this.initialize(Editor, '<ol><li data-list=\"ordered\">Test</li></ol>');\n    editor.insertEmbed(0, 'video', 'https://www.youtube.com/embed/QHH3iSeDBLo?showinfo=0');\n    expect(this.container).toEqualHTML(`\n      <iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"https://www.youtube.com/embed/QHH3iSeDBLo?showinfo=0\"></iframe>\n      <ol><li data-list=\"ordered\">Test</li></ol>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"insert block embed at end","suites":["List"],"line":247,"updatePoint":{"line":247,"column":31,"index":8188},"code":"  it('insert block embed at end', function () {\n    const editor = this.initialize(Editor, '<ol><li data-list=\"ordered\">Test</li></ol>');\n    editor.insertEmbed(4, 'video', 'https://www.youtube.com/embed/QHH3iSeDBLo?showinfo=0');\n    expect(this.container).toEqualHTML(`\n      <ol><li data-list=\"ordered\">Test</li></ol>\n      <iframe class=\"ql-video\" frameborder=\"0\" allowfullscreen=\"true\" src=\"https://www.youtube.com/embed/QHH3iSeDBLo?showinfo=0\"></iframe>\n      <ol><li data-list=\"ordered\"><br></li></ol>\n    `);\n  });","file":"unit/formats/list.js","skipped":false,"dir":"test"},{"name":"add","suites":["Script"],"line":3,"updatePoint":{"line":3,"column":9,"index":86},"code":"  it('add', function () {\n    const editor = this.initialize(Editor, '<p>a<sup>2</sup> + b2 = c<sup>2</sup></p>');\n    editor.formatText(6, 1, {\n      script: 'super'\n    });\n    expect(editor.scroll.domNode).toEqualHTML('<p>a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></p>');\n  });","file":"unit/formats/script.js","skipped":false,"dir":"test"},{"name":"remove","suites":["Script"],"line":10,"updatePoint":{"line":10,"column":12,"index":373},"code":"  it('remove', function () {\n    const editor = this.initialize(Editor, '<p>a<sup>2</sup> + b<sup>2</sup></p>');\n    editor.formatText(1, 1, {\n      script: false\n    });\n    expect(editor.scroll.domNode).toEqualHTML('<p>a2 + b<sup>2</sup></p>');\n  });","file":"unit/formats/script.js","skipped":false,"dir":"test"},{"name":"replace","suites":["Script"],"line":17,"updatePoint":{"line":17,"column":13,"index":627},"code":"  it('replace', function () {\n    const editor = this.initialize(Editor, '<p>a<sup>2</sup> + b<sup>2</sup></p>');\n    editor.formatText(1, 1, {\n      script: 'sub'\n    });\n    expect(editor.scroll.domNode).toEqualHTML('<p>a<sub>2</sub> + b<sup>2</sup></p>');\n  });","file":"unit/formats/script.js","skipped":false,"dir":"test"},{"name":"initialize","suites":["Table"],"line":43,"updatePoint":{"line":43,"column":16,"index":987},"code":"  it('initialize', function () {\n    const editor = this.initialize(Editor, tableHTML);\n    expect(editor.getDelta()).toEqual(tableDelta);\n    expect(this.container).toEqualHTML(tableHTML);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"add","suites":["Table"],"line":48,"updatePoint":{"line":48,"column":9,"index":1176},"code":"  it('add', function () {\n    const editor = this.initialize(Editor, '');\n    editor.applyDelta(new Delta([...tableDelta.ops]).delete(1));\n    expect(this.container).toEqualHTML(tableHTML);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"add format plaintext","suites":["Table"],"line":53,"updatePoint":{"line":53,"column":26,"index":1389},"code":"  it('add format plaintext', function () {\n    const editor = this.initialize(Editor, '<p>Test</p>');\n    editor.formatLine(0, 5, {\n      table: 'a'\n    });\n    expect(this.container).toEqualHTML('<table><tbody><tr><td data-row=\"a\">Test</td></tr></tbody></table>');\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"add format replace","suites":["Table"],"line":60,"updatePoint":{"line":60,"column":24,"index":1659},"code":"  it('add format replace', function () {\n    const editor = this.initialize(Editor, '<h1>Test</h1>');\n    editor.formatLine(0, 5, {\n      table: 'a'\n    });\n    expect(this.container).toEqualHTML('<table><tbody><tr><td data-row=\"a\">Test</td></tr></tbody></table>');\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"remove format plaintext","suites":["Table"],"line":67,"updatePoint":{"line":67,"column":29,"index":1936},"code":"  it('remove format plaintext', function () {\n    const editor = this.initialize(Editor, '<table><tr><td data-row=\"a\">Test</td></tr></table>');\n    editor.formatLine(0, 5, {\n      table: null\n    });\n    expect(this.container).toEqualHTML('<p>Test</p>');\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"remove format replace","suites":["Table"],"line":74,"updatePoint":{"line":74,"column":27,"index":2195},"code":"  it('remove format replace', function () {\n    const editor = this.initialize(Editor, '<table><tr><td data-row=\"a\">Test</td></tr></table>');\n    editor.formatLine(0, 5, {\n      header: 1\n    });\n    expect(this.container).toEqualHTML('<h1>Test</h1>');\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"group rows","suites":["Table"],"line":81,"updatePoint":{"line":81,"column":16,"index":2443},"code":"  it('group rows', function () {\n    const editor = this.initialize(Editor, `\n      <table>\n        <tbody>\n          <tr><td data-row=\"a\">A</td></tr>\n          <tr><td data-row=\"a\">B</td></tr>\n        </tbody>\n      </table>\n    `);\n    editor.scroll.children.head.children.head.children.head.optimize();\n    expect(this.container).toEqualHTML(`\n      <table>\n        <tbody>\n          <tr><td data-row=\"a\">A</td><td data-row=\"a\">B</td></tr>\n        </tbody>\n      </table>\n    `);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"split rows","suites":["Table"],"line":99,"updatePoint":{"line":99,"column":16,"index":2932},"code":"  it('split rows', function () {\n    const editor = this.initialize(Editor, `\n      <table>\n        <tbody>\n          <tr><td data-row=\"a\">A</td><td data-row=\"b\">B</td></tr>\n        </tbody>\n      </table>\n    `);\n    editor.scroll.children.head.children.head.children.head.optimize();\n    expect(this.container).toEqualHTML(`\n      <table>\n        <tbody>\n          <tr><td data-row=\"a\">A</td></tr>\n          <tr><td data-row=\"b\">B</td></tr>\n        </tbody>\n      </table>\n    `);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"group and split rows","suites":["Table"],"line":117,"updatePoint":{"line":117,"column":26,"index":3431},"code":"  it('group and split rows', function () {\n    const editor = this.initialize(Editor, `\n      <table>\n        <tbody>\n          <tr><td data-row=\"a\">A</td><td data-row=\"b\">B1</td></tr>\n          <tr><td data-row=\"b\">B2</td></tr>\n        </tbody>\n      </table>\n    `);\n    editor.scroll.children.head.children.head.children.head.optimize();\n    expect(this.container).toEqualHTML(`\n      <table>\n        <tbody>\n          <tr><td data-row=\"a\">A</td></tr>\n          <tr><td data-row=\"b\">B1</td><td data-row=\"b\">B2</td></tr>\n        </tbody>\n      </table>\n    `);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"group and split multiple rows","suites":["Table"],"line":136,"updatePoint":{"line":136,"column":36,"index":4010},"skipped":true,"code":"  xit('group and split multiple rows', function () {\n    const editor = this.initialize(Editor, `\n      <table>\n        <tbody>\n          <tr><td data-row=\"1\"><br></td><td data-row=\"1\"><br></td><td data-row=\"1\"><br></td></tr>\n          <tr><td data-row=\"2\"><br></td><td data-row=\"2\"><br></td><td data-row=\"2\"><br></td></tr>\n          <tr><td data-row=\"3\"><br></td><td data-row=\"3\"><br></td></tr>\n          <tr><td data-row=\"3\"><br></td><td data-row=\"4\"><br></td></tr>\n          <tr><td data-row=\"4\"><br></td><td data-row=\"4\"><br></td></tr>\n        </tbody>\n      </table>\n    `);\n    editor.scroll.children.head.children.head.optimize();\n    expect(this.container).toEqualHTML(`\n      <table>\n        <tbody>\n          <tr><td data-row=\"1\"><br></td><td data-row=\"1\"><br></td><td data-row=\"1\"><br></td></tr>\n          <tr><td data-row=\"2\"><br></td><td data-row=\"2\"><br></td><td data-row=\"2\"><br></td></tr>\n          <tr><td data-row=\"3\"><br></td><td data-row=\"3\"><br></td><td data-row=\"3\"><br></td></tr>\n          <tr><td data-row=\"4\"><br></td><td data-row=\"4\"><br></td><td data-row=\"4\"><br></td></tr>\n        </tbody>\n      </table>\n    `);\n  });","file":"unit/formats/table.js","dir":"test"},{"name":"balance cells","suites":["Table"],"line":160,"updatePoint":{"line":160,"column":19,"index":5140},"code":"  it('balance cells', function () {\n    const editor = this.initialize(Editor, `<table>\n        <tbody>\n          <tr>\n            <td data-row=\"a\">A1</td>\n          </tr>\n          <tr>\n            <td data-row=\"b\">B1</td>\n            <td data-row=\"b\">B2</td>\n          </tr>\n          <tr>\n            <td data-row=\"c\">C1</td>\n            <td data-row=\"c\">C2</td>\n            <td data-row=\"c\">C3</td>\n          </tr>\n        </tbody>\n      </table>`);\n    editor.scroll.children.head.balanceCells();\n    expect(this.container).toEqualHTML(`<table>\n        <tbody>\n          <tr>\n            <td data-row=\"a\">A1</td>\n            <td data-row=\"a\"><br></td>\n            <td data-row=\"a\"><br></td>\n          </tr>\n          <tr>\n            <td data-row=\"b\">B1</td>\n            <td data-row=\"b\">B2</td>\n            <td data-row=\"b\"><br></td>\n          </tr>\n          <tr>\n            <td data-row=\"c\">C1</td>\n            <td data-row=\"c\">C2</td>\n            <td data-row=\"c\">C3</td>\n          </tr>\n        </tbody>\n      </table>`);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"format","suites":["Table"],"line":198,"updatePoint":{"line":198,"column":12,"index":6172},"code":"  it('format', function () {\n    const editor = this.initialize(Editor, '<p>a</p><p>b</p><p>1</p><p>2</p>');\n    editor.formatLine(0, 4, {\n      table: 'a'\n    });\n    editor.formatLine(4, 4, {\n      table: 'b'\n    });\n    expect(this.container).toEqualHTML(`<table>\n        <tbody>\n          <tr>\n            <td data-row=\"a\">a</td>\n            <td data-row=\"a\">b</td>\n          </tr>\n          <tr>\n            <td data-row=\"b\">1</td>\n            <td data-row=\"b\">2</td>\n          </tr>\n        </tbody>\n      </table>`);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"applyDelta","suites":["Table"],"line":219,"updatePoint":{"line":219,"column":16,"index":6706},"code":"  it('applyDelta', function () {\n    const editor = this.initialize(Editor, '<p><br></p>');\n    editor.applyDelta(new Delta().insert('\\n\\n', {\n      table: 'a'\n    }).insert('\\n\\n', {\n      table: 'b'\n    }));\n    expect(this.container).toEqualHTML(`<table>\n        <tbody>\n          <tr>\n            <td data-row=\"a\"><br></td>\n            <td data-row=\"a\"><br></td>\n          </tr>\n          <tr>\n            <td data-row=\"b\"><br></td>\n            <td data-row=\"b\"><br></td>\n          </tr>\n        </tbody>\n      </table>\n      <p><br></p>`);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"unbalanced table applyDelta","suites":["Table"],"line":240,"updatePoint":{"line":240,"column":33,"index":7274},"code":"  it('unbalanced table applyDelta', function () {\n    const editor = this.initialize(Editor, '<p><br></p>');\n    editor.applyDelta(new Delta().insert('A1\\nB1\\nC1\\n', {\n      table: '1'\n    }).insert('A2\\nB2\\nC2\\n', {\n      table: '2'\n    }).insert('A3\\nB3\\n', {\n      table: '3'\n    }));\n    expect(this.container).toEqualHTML(`<table>\n        <tbody>\n          <tr>\n            <td data-row=\"1\">A1</td>\n            <td data-row=\"1\">B1</td>\n            <td data-row=\"1\">C1</td>\n          </tr>\n          <tr>\n            <td data-row=\"2\">A2</td>\n            <td data-row=\"2\">B2</td>\n            <td data-row=\"2\">C2</td>\n          </tr>\n          <tr>\n            <td data-row=\"3\">A3</td>\n            <td data-row=\"3\">B3</td>\n          </tr>\n        </tbody>\n      </table>\n      <p><br></p>`);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"existing table applyDelta","suites":["Table"],"line":269,"updatePoint":{"line":269,"column":31,"index":8072},"code":"  it('existing table applyDelta', function () {\n    const editor = this.initialize(Editor, `\n      <table>\n        <tbody>\n          <tr>\n            <td data-row=\"1\">A1</td>\n          </tr>\n          <tr>\n            <td data-row=\"2\"><br></td>\n            <td data-row=\"2\">B1</td>\n          </tr>\n        </tbody>\n      </table>`);\n    editor.applyDelta(new Delta().retain(3).retain(1, {\n      table: '1'\n    }).insert('\\n', {\n      table: '2'\n    }));\n    expect(this.container).toEqualHTML(`<table>\n        <tbody>\n          <tr>\n            <td data-row=\"1\">A1</td>\n            <td data-row=\"1\"><br></td>\n          </tr>\n          <tr>\n            <td data-row=\"2\"><br></td>\n            <td data-row=\"2\">B1</td>\n          </tr>\n        </tbody>\n      </table>`);\n  });","file":"unit/formats/table.js","skipped":false,"dir":"test"},{"name":"pastes html data","suites":["Clipboard","events","paste"],"line":19,"updatePoint":{"line":19,"column":26,"index":642},"code":"      it('pastes html data', function (done) {\n        this.quill.clipboard.onCapturePaste(this.clipboardEvent);\n        setTimeout(() => {\n          expect(this.quill.root).toEqualHTML('<p>01<strong>|</strong><em>7</em>8</p>');\n          expect(this.quill.getSelection()).toEqual(new Range(3));\n          done();\n        }, 2);\n      });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"pastes html data if present with file","suites":["Clipboard","events","paste"],"line":29,"updatePoint":{"line":29,"column":47,"index":1059},"code":"      it('pastes html data if present with file', function (done) {\n        const upload = spyOn(this.quill.uploader, 'upload');\n        this.quill.clipboard.onCapturePaste({\n          ...this.clipboardEvent,\n          clipboardData: {\n            ...this.clipboardEvent.clipboardData,\n            files: ['file']\n          }\n        });\n        setTimeout(() => {\n          expect(upload).not.toHaveBeenCalled();\n          expect(this.quill.root).toEqualHTML('<p>01<strong>|</strong><em>7</em>8</p>');\n          expect(this.quill.getSelection()).toEqual(new Range(3));\n          done();\n        }, 2);\n      });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"pastes image file if present with image only html","suites":["Clipboard","events","paste"],"line":45,"updatePoint":{"line":45,"column":59,"index":1684},"code":"      it('pastes image file if present with image only html', function (done) {\n        const upload = spyOn(this.quill.uploader, 'upload');\n        this.quill.clipboard.onCapturePaste({\n          ...this.clipboardEvent,\n          clipboardData: {\n            getData: type => type === 'text/html' ? `<meta charset='utf-8'><img src=\"/assets/favicon.png\"/>` : '|',\n            files: ['file']\n          }\n        });\n        setTimeout(() => {\n          expect(upload).toHaveBeenCalled();\n          done();\n        }, 2);\n      });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"does not fire selection-change","suites":["Clipboard","events","paste"],"line":59,"updatePoint":{"line":59,"column":40,"index":2196},"code":"      it('does not fire selection-change', function (done) {\n        const change = jasmine.createSpy('change');\n        this.quill.on('selection-change', change);\n        this.quill.clipboard.onCapturePaste(this.clipboardEvent);\n        setTimeout(function () {\n          expect(change).not.toHaveBeenCalled();\n          done();\n        }, 2);\n      });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"keeps formats of first line","suites":["Clipboard","events","cut"],"line":81,"updatePoint":{"line":81,"column":37,"index":2876},"code":"      it('keeps formats of first line', function (done) {\n        this.quill.clipboard.onCaptureCopy(this.clipboardEvent, true);\n        setTimeout(() => {\n          expect(this.quill.root).toEqualHTML('<h1>01<em>7</em>8</h1>');\n          expect(this.quill.getSelection()).toEqual(new Range(2));\n          expect(this.clipboardData['text/plain']).toEqual('23\\n56');\n          expect(this.clipboardData['text/html']).toEqual('<h1>23</h1><p>5<em>6</em></p>');\n          done();\n        }, 2);\n      });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"dangerouslyPasteHTML(html)","suites":["Clipboard","events","cut"],"line":92,"updatePoint":{"line":92,"column":34,"index":3382},"code":"    it('dangerouslyPasteHTML(html)', function () {\n      this.quill.clipboard.dangerouslyPasteHTML('<i>ab</i><b>cd</b>');\n      expect(this.quill.root).toEqualHTML('<p><em>ab</em><strong>cd</strong></p>');\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"dangerouslyPasteHTML(index, html)","suites":["Clipboard","events","cut"],"line":96,"updatePoint":{"line":96,"column":41,"index":3603},"code":"    it('dangerouslyPasteHTML(index, html)', function () {\n      this.quill.clipboard.dangerouslyPasteHTML(2, '<b>ab</b>');\n      expect(this.quill.root).toEqualHTML('<h1>01<strong>ab</strong>23</h1><p>5<em>67</em>8</p>');\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"plain text","suites":["Clipboard","convert"],"line":106,"updatePoint":{"line":106,"column":18,"index":3977},"code":"    it('plain text', function () {\n      const delta = this.clipboard.convert({\n        html: 'simple plain text'\n      });\n      expect(delta).toEqual(new Delta().insert('simple plain text'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"whitespace","suites":["Clipboard","convert"],"line":112,"updatePoint":{"line":112,"column":18,"index":4179},"code":"    it('whitespace', function () {\n      const html = '<div> 0 </div><div> <div> 1 2 <span> 3 </span> 4 </div> </div>' + '<div><span>5 </span><span>6 </span><span> 7</span><span> 8</span></div>';\n      const delta = this.clipboard.convert({\n        html\n      });\n      expect(delta).toEqual(new Delta().insert('0\\n1 2  3  4\\n5 6  7 8'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"inline whitespace","suites":["Clipboard","convert"],"line":119,"updatePoint":{"line":119,"column":25,"index":4533},"code":"    it('inline whitespace', function () {\n      const html = '<p>0 <strong>1</strong> 2</p>';\n      const delta = this.clipboard.convert({\n        html\n      });\n      expect(delta).toEqual(new Delta().insert('0 ').insert('1', {\n        bold: true\n      }).insert(' 2'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"intentional whitespace","suites":["Clipboard","convert"],"line":128,"updatePoint":{"line":128,"column":30,"index":4818},"code":"    it('intentional whitespace', function () {\n      const html = '<span>0&nbsp;<strong>1</strong>&nbsp;2</span>';\n      const delta = this.clipboard.convert({\n        html\n      });\n      expect(delta).toEqual(new Delta().insert('0\\u00a0').insert('1', {\n        bold: true\n      }).insert('\\u00a02'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"consecutive intentional whitespace","suites":["Clipboard","convert"],"line":137,"updatePoint":{"line":137,"column":42,"index":5141},"code":"    it('consecutive intentional whitespace', function () {\n      const html = '<strong>&nbsp;&nbsp;1&nbsp;&nbsp;</strong>';\n      const delta = this.clipboard.convert({\n        html\n      });\n      expect(delta).toEqual(new Delta().insert('\\u00a0\\u00a01\\u00a0\\u00a0', {\n        bold: true\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"break","suites":["Clipboard","convert"],"line":146,"updatePoint":{"line":146,"column":13,"index":5420},"code":"    it('break', function () {\n      const html = '<div>0<br>1</div><div>2<br></div><div>3</div><div><br>4</div><div><br></div><div>5</div>';\n      const delta = this.clipboard.convert({\n        html\n      });\n      expect(delta).toEqual(new Delta().insert('0\\n1\\n2\\n3\\n\\n4\\n\\n5'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"empty block","suites":["Clipboard","convert"],"line":153,"updatePoint":{"line":153,"column":19,"index":5716},"code":"    it('empty block', function () {\n      const html = '<h1>Test</h1><h2></h2><p>Body</p>';\n      const delta = this.clipboard.convert({\n        html\n      });\n      expect(delta).toEqual(new Delta().insert('Test\\n', {\n        header: 1\n      }).insert('\\n', {\n        header: 2\n      }).insert('Body'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"mixed inline and block","suites":["Clipboard","convert"],"line":164,"updatePoint":{"line":164,"column":30,"index":6040},"code":"    it('mixed inline and block', function () {\n      const delta = this.clipboard.convert({\n        html: '<div>One<div>Two</div></div>'\n      });\n      expect(delta).toEqual(new Delta().insert('One\\nTwo'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"alias","suites":["Clipboard","convert"],"line":170,"updatePoint":{"line":170,"column":13,"index":6239},"code":"    it('alias', function () {\n      const delta = this.clipboard.convert({\n        html: '<b>Bold</b><i>Italic</i>'\n      });\n      expect(delta).toEqual(new Delta().insert('Bold', {\n        bold: true\n      }).insert('Italic', {\n        italic: true\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"pre","suites":["Clipboard","convert"],"line":180,"updatePoint":{"line":180,"column":11,"index":6507},"code":"    it('pre', function () {\n      const html = '<pre> 01 \\n 23 </pre>';\n      const delta = this.clipboard.convert({\n        html\n      });\n      expect(delta).toEqual(new Delta().insert(' 01 \\n 23 \\n', {\n        'code-block': true\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"pre with \\n node","suites":["Clipboard","convert"],"line":189,"updatePoint":{"line":189,"column":25,"index":6772},"code":"    it('pre with \\\\n node', function () {\n      const html = '<pre><span> 01 </span>\\n<span> 23 </span></pre>';\n      const delta = this.clipboard.convert({\n        html\n      });\n      expect(delta).toEqual(new Delta().insert(' 01 \\n 23 \\n', {\n        'code-block': true\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"nested list","suites":["Clipboard","convert"],"line":198,"updatePoint":{"line":198,"column":19,"index":7057},"code":"    it('nested list', function () {\n      const delta = this.clipboard.convert({\n        html: '<ol><li>One</li><li class=\"ql-indent-1\">Alpha</li></ol>'\n      });\n      expect(delta).toEqual(new Delta().insert('One\\n', {\n        list: 'ordered'\n      }).insert('Alpha\\n', {\n        list: 'ordered',\n        indent: 1\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"html nested list","suites":["Clipboard","convert"],"line":209,"updatePoint":{"line":209,"column":24,"index":7398},"code":"    it('html nested list', function () {\n      const delta = this.clipboard.convert({\n        html: '<ol><li>One<ol><li>Alpha</li><li>Beta<ol><li>I</li></ol></li></ol></li></ol>'\n      });\n      expect(delta).toEqual(new Delta().insert('One\\n', {\n        list: 'ordered'\n      }).insert('Alpha\\nBeta\\n', {\n        list: 'ordered',\n        indent: 1\n      }).insert('I\\n', {\n        list: 'ordered',\n        indent: 2\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"html nested bullet","suites":["Clipboard","convert"],"line":223,"updatePoint":{"line":223,"column":26,"index":7836},"code":"    it('html nested bullet', function () {\n      const delta = this.clipboard.convert({\n        html: '<ul><li>One<ul><li>Alpha</li><li>Beta<ul><li>I</li></ul></li></ul></li></ul>'\n      });\n      expect(delta).toEqual(new Delta().insert('One\\n', {\n        list: 'bullet'\n      }).insert('Alpha\\nBeta\\n', {\n        list: 'bullet',\n        indent: 1\n      }).insert('I\\n', {\n        list: 'bullet',\n        indent: 2\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"html nested checklist","suites":["Clipboard","convert"],"line":237,"updatePoint":{"line":237,"column":29,"index":8274},"code":"    it('html nested checklist', function () {\n      const delta = this.clipboard.convert({\n        html: '<ul><li data-list=\"checked\">One<ul><li data-list=\"checked\">Alpha</li><li data-list=\"checked\">Beta' + '<ul><li data-list=\"checked\">I</li></ul></li></ul></li></ul>'\n      });\n      expect(delta).toEqual(new Delta().insert('One\\n', {\n        list: 'checked'\n      }).insert('Alpha\\nBeta\\n', {\n        list: 'checked',\n        indent: 1\n      }).insert('I\\n', {\n        list: 'checked',\n        indent: 2\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"html partial list","suites":["Clipboard","convert"],"line":251,"updatePoint":{"line":251,"column":25,"index":8796},"code":"    it('html partial list', function () {\n      const delta = this.clipboard.convert({\n        html: '<ol><li><ol><li><ol><li>iiii</li></ol></li><li>bbbb</li></ol></li><li>2222</li></ol>'\n      });\n      expect(delta).toEqual(new Delta().insert('iiii\\n', {\n        list: 'ordered',\n        indent: 2\n      }).insert('bbbb\\n', {\n        list: 'ordered',\n        indent: 1\n      }).insert('2222\\n', {\n        list: 'ordered'\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"html table","suites":["Clipboard","convert"],"line":265,"updatePoint":{"line":265,"column":18,"index":9231},"code":"    it('html table', function () {\n      const delta = this.clipboard.convert({\n        html: '<table>' + '<thead><tr><td>A1</td><td>A2</td><td>A3</td></tr></thead>' + '<tbody><tr><td>B1</td><td></td><td>B3</td></tr></tbody>' + '</table>'\n      });\n      expect(delta).toEqual(new Delta().insert('A1\\nA2\\nA3\\n', {\n        table: 1\n      }).insert('B1\\n\\nB3\\n', {\n        table: 2\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"embeds","suites":["Clipboard","convert"],"line":275,"updatePoint":{"line":275,"column":14,"index":9626},"code":"    it('embeds', function () {\n      const delta = this.clipboard.convert({\n        html: '<div>01<img src=\"/assets/favicon.png\" height=\"200\" width=\"300\">34</div>'\n      });\n      const expected = new Delta().insert('01').insert({\n        image: '/assets/favicon.png'\n      }, {\n        height: '200',\n        width: '300'\n      }).insert('34');\n      expect(delta).toEqual(expected);\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"block embed","suites":["Clipboard","convert"],"line":287,"updatePoint":{"line":287,"column":19,"index":10024},"code":"    it('block embed', function () {\n      const delta = this.clipboard.convert({\n        html: '<p>01</p><iframe src=\"#\"></iframe><p>34</p>'\n      });\n      expect(delta).toEqual(new Delta().insert('01\\n').insert({\n        video: '#'\n      }).insert('34'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"block embeds within blocks","suites":["Clipboard","convert"],"line":295,"updatePoint":{"line":295,"column":34,"index":10305},"code":"    it('block embeds within blocks', function () {\n      const delta = this.clipboard.convert({\n        html: '<h1>01<iframe src=\"#\"></iframe>34</h1><p>67</p>'\n      });\n      expect(delta).toEqual(new Delta().insert('01\\n', {\n        header: 1\n      }).insert({\n        video: '#'\n      }, {\n        header: 1\n      }).insert('34\\n', {\n        header: 1\n      }).insert('67'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"wrapped block embed","suites":["Clipboard","convert"],"line":309,"updatePoint":{"line":309,"column":27,"index":10685},"code":"    it('wrapped block embed', function () {\n      const delta = this.clipboard.convert({\n        html: '<h1>01<a href=\"/\"><iframe src=\"#\"></iframe></a>34</h1><p>67</p>'\n      });\n      expect(delta).toEqual(new Delta().insert('01\\n', {\n        header: 1\n      }).insert({\n        video: '#'\n      }, {\n        link: '/',\n        header: 1\n      }).insert('34\\n', {\n        header: 1\n      }).insert('67'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"wrapped block embed with siblings","suites":["Clipboard","convert"],"line":324,"updatePoint":{"line":324,"column":41,"index":11114},"code":"    it('wrapped block embed with siblings', function () {\n      const delta = this.clipboard.convert({\n        html: '<h1>01<a href=\"/\">a<iframe src=\"#\"></iframe>b</a>34</h1><p>67</p>'\n      });\n      expect(delta).toEqual(new Delta().insert('01', {\n        header: 1\n      }).insert('a\\n', {\n        link: '/',\n        header: 1\n      }).insert({\n        video: '#'\n      }, {\n        link: '/',\n        header: 1\n      }).insert('b', {\n        link: '/',\n        header: 1\n      }).insert('34\\n', {\n        header: 1\n      }).insert('67'));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"attributor and style match","suites":["Clipboard","convert"],"line":345,"updatePoint":{"line":345,"column":34,"index":11658},"code":"    it('attributor and style match', function () {\n      const delta = this.clipboard.convert({\n        html: '<p style=\"direction:rtl;\">Test</p>'\n      });\n      expect(delta).toEqual(new Delta().insert('Test\\n', {\n        direction: 'rtl'\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"nested styles","suites":["Clipboard","convert"],"line":353,"updatePoint":{"line":353,"column":21,"index":11905},"code":"    it('nested styles', function () {\n      const delta = this.clipboard.convert({\n        html: '<span style=\"color: red;\"><span style=\"color: blue;\">Test</span></span>'\n      });\n      expect(delta).toEqual(new Delta().insert('Test', {\n        color: 'blue'\n      }));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"custom matcher","suites":["Clipboard","convert"],"line":361,"updatePoint":{"line":361,"column":22,"index":12185},"code":"    it('custom matcher', function () {\n      this.clipboard.addMatcher(Node.TEXT_NODE, function (node, delta) {\n        let index = 0;\n        const regex = /https?:\\/\\/[^\\s]+/g;\n        let match = null;\n        const composer = new Delta();\n        // eslint-disable-next-line no-cond-assign\n        while (match = regex.exec(node.data)) {\n          composer.retain(match.index - index);\n          index = regex.lastIndex;\n          composer.retain(match[0].length, {\n            link: match[0]\n          });\n        }\n        return delta.compose(composer);\n      });\n      const delta = this.clipboard.convert({\n        html: 'http://github.com https://quilljs.com'\n      });\n      const expected = new Delta().insert('http://github.com', {\n        link: 'http://github.com'\n      }).insert(' ').insert('https://quilljs.com', {\n        link: 'https://quilljs.com'\n      });\n      expect(delta).toEqual(expected);\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"does not execute javascript","suites":["Clipboard","convert"],"line":387,"updatePoint":{"line":387,"column":35,"index":13123},"code":"    it('does not execute javascript', function () {\n      window.unsafeFunction = jasmine.createSpy('unsafeFunction');\n      const html = \"<img src='/assets/favicon.png' onload='window.unsafeFunction()'/>\";\n      this.clipboard.convert({\n        html\n      });\n      expect(window.unsafeFunction).not.toHaveBeenCalled();\n      delete window.unsafeFunction;\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"xss","suites":["Clipboard","convert"],"line":396,"updatePoint":{"line":396,"column":11,"index":13464},"code":"    it('xss', function () {\n      const delta = this.clipboard.convert({\n        html: '<script>alert(2);</script>'\n      });\n      expect(delta).toEqual(new Delta().insert(''));\n    });","file":"unit/modules/clipboard.js","skipped":false,"dir":"test"},{"name":"delete","suites":["History","getLastChangeIndex"],"line":7,"updatePoint":{"line":7,"column":14,"index":281},"code":"    it('delete', function () {\n      const delta = new Delta().retain(4).delete(2);\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(4);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"delete with inserts","suites":["History","getLastChangeIndex"],"line":11,"updatePoint":{"line":11,"column":27,"index":454},"code":"    it('delete with inserts', function () {\n      const delta = new Delta().retain(4).insert('test').delete(2);\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(8);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"insert text","suites":["History","getLastChangeIndex"],"line":15,"updatePoint":{"line":15,"column":19,"index":634},"code":"    it('insert text', function () {\n      const delta = new Delta().retain(4).insert('testing');\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(11);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"insert embed","suites":["History","getLastChangeIndex"],"line":19,"updatePoint":{"line":19,"column":20,"index":809},"code":"    it('insert embed', function () {\n      const delta = new Delta().retain(4).insert({\n        image: true\n      });\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(5);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"insert with deletes","suites":["History","getLastChangeIndex"],"line":25,"updatePoint":{"line":25,"column":27,"index":1010},"code":"    it('insert with deletes', function () {\n      const delta = new Delta().retain(4).delete(3).insert('!');\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(5);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"format","suites":["History","getLastChangeIndex"],"line":29,"updatePoint":{"line":29,"column":14,"index":1182},"code":"    it('format', function () {\n      const delta = new Delta().retain(4).retain(3, {\n        bold: true\n      });\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(7);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"format newline","suites":["History","getLastChangeIndex"],"line":35,"updatePoint":{"line":35,"column":22,"index":1380},"code":"    it('format newline', function () {\n      const delta = new Delta().retain(4).retain(1, {\n        align: 'left'\n      });\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(4);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"format mixed","suites":["History","getLastChangeIndex"],"line":41,"updatePoint":{"line":41,"column":20,"index":1579},"code":"    it('format mixed', function () {\n      const delta = new Delta().retain(4).retain(1, {\n        align: 'left',\n        bold: true\n      });\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(4);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"insert newline","suites":["History","getLastChangeIndex"],"line":48,"updatePoint":{"line":48,"column":22,"index":1800},"code":"    it('insert newline', function () {\n      const delta = new Delta().retain(4).insert('a\\n');\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(5);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"mutliple newline inserts","suites":["History","getLastChangeIndex"],"line":52,"updatePoint":{"line":52,"column":32,"index":1982},"code":"    it('mutliple newline inserts', function () {\n      const delta = new Delta().retain(4).insert('ab\\n\\n');\n      expect(getLastChangeIndex(globalRegistry, delta)).toEqual(7);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"limits undo stack size","suites":["History","undo/redo"],"line":69,"updatePoint":{"line":69,"column":30,"index":2517},"code":"    it('limits undo stack size', function () {\n      const quill = new Quill(this.container.firstChild, {\n        modules: {\n          history: {\n            delay: 0,\n            maxStack: 2\n          }\n        }\n      });\n      ['A', 'B', 'C'].forEach(function (text) {\n        quill.insertText(0, text);\n      });\n      expect(quill.history.stack.undo.length).toEqual(2);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"emits selection changes","suites":["History","undo/redo"],"line":83,"updatePoint":{"line":83,"column":31,"index":2901},"code":"    it('emits selection changes', function () {\n      const quill = new Quill(this.container.firstChild, {\n        modules: {\n          history: {\n            delay: 0\n          }\n        }\n      });\n      quill.insertText(0, 'foo');\n      const change = jasmine.createSpy('change');\n      quill.on('selection-change', change);\n      quill.history.undo();\n      expect(change).toHaveBeenCalledOnceWith(jasmine.anything(), null, 'user');\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"user change","suites":["History","undo/redo"],"line":97,"updatePoint":{"line":97,"column":19,"index":3334},"code":"    it('user change', function () {\n      this.quill.root.firstChild.innerHTML = 'The lazy foxes';\n      this.quill.update();\n      const changed = this.quill.getContents();\n      expect(changed).not.toEqual(this.original);\n      this.quill.history.undo();\n      expect(this.quill.getContents()).toEqual(this.original);\n      this.quill.history.redo();\n      expect(this.quill.getContents()).toEqual(changed);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"merge changes","suites":["History","undo/redo"],"line":107,"updatePoint":{"line":107,"column":21,"index":3754},"code":"    it('merge changes', function () {\n      expect(this.quill.history.stack.undo.length).toEqual(0);\n      this.quill.updateContents(new Delta().retain(12).insert('e'));\n      expect(this.quill.history.stack.undo.length).toEqual(1);\n      this.quill.updateContents(new Delta().retain(13).insert('s'));\n      expect(this.quill.history.stack.undo.length).toEqual(1);\n      this.quill.history.undo();\n      expect(this.quill.getContents()).toEqual(this.original);\n      expect(this.quill.history.stack.undo.length).toEqual(0);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"dont merge changes","suites":["History","undo/redo"],"line":117,"updatePoint":{"line":117,"column":26,"index":4291},"code":"    it('dont merge changes', function (done) {\n      expect(this.quill.history.stack.undo.length).toEqual(0);\n      this.quill.updateContents(new Delta().retain(12).insert('e'));\n      expect(this.quill.history.stack.undo.length).toEqual(1);\n      setTimeout(() => {\n        this.quill.updateContents(new Delta().retain(13).insert('s'));\n        expect(this.quill.history.stack.undo.length).toEqual(2);\n        done();\n      }, this.quill.history.options.delay * 1.25);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"multiple undos","suites":["History","undo/redo"],"line":127,"updatePoint":{"line":127,"column":22,"index":4765},"code":"    it('multiple undos', function (done) {\n      expect(this.quill.history.stack.undo.length).toEqual(0);\n      this.quill.updateContents(new Delta().retain(12).insert('e'));\n      const contents = this.quill.getContents();\n      setTimeout(() => {\n        this.quill.updateContents(new Delta().retain(13).insert('s'));\n        this.quill.history.undo();\n        expect(this.quill.getContents()).toEqual(contents);\n        this.quill.history.undo();\n        expect(this.quill.getContents()).toEqual(this.original);\n        done();\n      }, this.quill.history.options.delay * 1.25);\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"transform api change","suites":["History","undo/redo"],"line":140,"updatePoint":{"line":140,"column":28,"index":5361},"code":"    it('transform api change', function () {\n      this.quill.history.options.userOnly = true;\n      this.quill.updateContents(new Delta().retain(12).insert('es'), Quill.sources.USER);\n      this.quill.history.lastRecorded = 0;\n      this.quill.updateContents(new Delta().retain(14).insert('!'), Quill.sources.USER);\n      this.quill.history.undo();\n      this.quill.updateContents(new Delta().retain(4).delete(5), Quill.sources.API);\n      expect(this.quill.getContents()).toEqual(new Delta().insert('The foxes\\n'));\n      this.quill.history.undo();\n      expect(this.quill.getContents()).toEqual(new Delta().insert('The fox\\n'));\n      this.quill.history.redo();\n      expect(this.quill.getContents()).toEqual(new Delta().insert('The foxes\\n'));\n      this.quill.history.redo();\n      expect(this.quill.getContents()).toEqual(new Delta().insert('The foxes!\\n'));\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"transform preserve intention","suites":["History","undo/redo"],"line":155,"updatePoint":{"line":155,"column":36,"index":6242},"code":"    it('transform preserve intention', function () {\n      const url = 'https://www.google.com/';\n      this.quill.history.options.userOnly = true;\n      this.quill.updateContents(new Delta().insert(url, {\n        link: url\n      }), Quill.sources.USER);\n      this.quill.history.lastRecorded = 0;\n      this.quill.updateContents(new Delta().delete(url.length).insert('Google', {\n        link: url\n      }), Quill.sources.API);\n      this.quill.history.lastRecorded = 0;\n      this.quill.updateContents(new Delta().retain(this.quill.getLength() - 1).insert('!'), Quill.sources.USER);\n      this.quill.history.lastRecorded = 0;\n      expect(this.quill.getContents()).toEqual(new Delta().insert('Google', {\n        link: url\n      }).insert('The lazy fox!\\n'));\n      this.quill.history.undo();\n      expect(this.quill.getContents()).toEqual(new Delta().insert('Google', {\n        link: url\n      }).insert('The lazy fox\\n'));\n      this.quill.history.undo();\n      expect(this.quill.getContents()).toEqual(new Delta().insert('Google', {\n        link: url\n      }).insert('The lazy fox\\n'));\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"ignore remote changes","suites":["History","undo/redo"],"line":180,"updatePoint":{"line":180,"column":29,"index":7333},"code":"    it('ignore remote changes', function () {\n      this.quill.history.options.delay = 0;\n      this.quill.history.options.userOnly = true;\n      this.quill.setText('\\n');\n      this.quill.insertText(0, 'a', Quill.sources.USER);\n      this.quill.insertText(1, 'b', Quill.sources.API);\n      this.quill.insertText(2, 'c', Quill.sources.USER);\n      this.quill.insertText(3, 'd', Quill.sources.API);\n      expect(this.quill.getText()).toEqual('abcd\\n');\n      this.quill.history.undo();\n      expect(this.quill.getText()).toEqual('abd\\n');\n      this.quill.history.undo();\n      expect(this.quill.getText()).toEqual('bd\\n');\n      this.quill.history.redo();\n      expect(this.quill.getText()).toEqual('abd\\n');\n      this.quill.history.redo();\n      expect(this.quill.getText()).toEqual('abcd\\n');\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"correctly transform against remote changes","suites":["History","undo/redo"],"line":198,"updatePoint":{"line":198,"column":50,"index":8158},"code":"    it('correctly transform against remote changes', function () {\n      this.quill.history.options.delay = 0;\n      this.quill.history.options.userOnly = true;\n      this.quill.setText('b\\n');\n      this.quill.insertText(1, 'd', Quill.sources.USER);\n      this.quill.insertText(0, 'a', Quill.sources.USER);\n      this.quill.insertText(2, 'c', Quill.sources.API);\n      expect(this.quill.getText()).toEqual('abcd\\n');\n      this.quill.history.undo();\n      expect(this.quill.getText()).toEqual('bcd\\n');\n      this.quill.history.undo();\n      expect(this.quill.getText()).toEqual('bc\\n');\n      this.quill.history.redo();\n      expect(this.quill.getText()).toEqual('bcd\\n');\n      this.quill.history.redo();\n      expect(this.quill.getText()).toEqual('abcd\\n');\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"correctly transform against remote changes breaking up an insert","suites":["History","undo/redo"],"line":215,"updatePoint":{"line":215,"column":72,"index":8950},"code":"    it('correctly transform against remote changes breaking up an insert', function () {\n      this.quill.history.options.delay = 0;\n      this.quill.history.options.userOnly = true;\n      this.quill.setText('\\n');\n      this.quill.insertText(0, 'ABC', Quill.sources.USER);\n      this.quill.insertText(3, '4', Quill.sources.API);\n      this.quill.insertText(2, '3', Quill.sources.API);\n      this.quill.insertText(1, '2', Quill.sources.API);\n      this.quill.insertText(0, '1', Quill.sources.API);\n      expect(this.quill.getText()).toEqual('1A2B3C4\\n');\n      this.quill.history.undo();\n      expect(this.quill.getText()).toEqual('1234\\n');\n      this.quill.history.redo();\n      expect(this.quill.getText()).toEqual('1A2B3C4\\n');\n      this.quill.history.undo();\n      expect(this.quill.getText()).toEqual('1234\\n');\n      this.quill.history.redo();\n      expect(this.quill.getText()).toEqual('1A2B3C4\\n');\n    });","file":"unit/modules/history.js","skipped":false,"dir":"test"},{"name":"no modifiers","suites":["Keyboard","match"],"line":4,"updatePoint":{"line":4,"column":20,"index":165},"code":"    it('no modifiers', function () {\n      const binding = normalize({\n        key: 'a'\n      });\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false\n      }, binding)).toBe(true);\n      expect(Keyboard.match({\n        key: 'A',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: true\n      }, binding)).toBe(false);\n    });","file":"unit/modules/keyboard.js","skipped":false,"dir":"test"},{"name":"simple modifier","suites":["Keyboard","match"],"line":23,"updatePoint":{"line":23,"column":23,"index":622},"code":"    it('simple modifier', function () {\n      const binding = normalize({\n        key: 'a',\n        altKey: true\n      });\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false\n      }, binding)).toBe(false);\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: true\n      }, binding)).toBe(true);\n    });","file":"unit/modules/keyboard.js","skipped":false,"dir":"test"},{"name":"optional modifier","suites":["Keyboard","match"],"line":43,"updatePoint":{"line":43,"column":25,"index":1103},"code":"    it('optional modifier', function () {\n      const binding = normalize({\n        key: 'a',\n        altKey: null\n      });\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false\n      }, binding)).toBe(true);\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: true\n      }, binding)).toBe(true);\n    });","file":"unit/modules/keyboard.js","skipped":false,"dir":"test"},{"name":"shortkey modifier","suites":["Keyboard","match"],"line":63,"updatePoint":{"line":63,"column":25,"index":1583},"code":"    it('shortkey modifier', function () {\n      const binding = normalize({\n        key: 'a',\n        shortKey: true\n      });\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false\n      }, binding)).toBe(false);\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false,\n        [SHORTKEY]: true\n      }, binding)).toBe(true);\n    });","file":"unit/modules/keyboard.js","skipped":false,"dir":"test"},{"name":"native shortkey modifier","suites":["Keyboard","match"],"line":84,"updatePoint":{"line":84,"column":32,"index":2100},"code":"    it('native shortkey modifier', function () {\n      const binding = normalize({\n        key: 'a',\n        [SHORTKEY]: true\n      });\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false\n      }, binding)).toBe(false);\n      expect(Keyboard.match({\n        key: 'a',\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false,\n        [SHORTKEY]: true\n      }, binding)).toBe(true);\n    });","file":"unit/modules/keyboard.js","skipped":false,"dir":"test"},{"name":"initialize","suites":["Syntax","highlighting"],"line":36,"updatePoint":{"line":36,"column":18,"index":1074},"code":"    it('initialize', function () {\n      expect(this.quill.root).toEqualHTML(`<div class=\"ql-code-block-container\" spellcheck=\"false\">\n          <div class=\"ql-code-block\" data-language=\"javascript\">var test = 1;</div>\n          <div class=\"ql-code-block\" data-language=\"javascript\">var bugz = 0;</div>\n        </div>\n        <p><br></p>`);\n      expect(this.quill.getContents()).toEqual(new Delta().insert('var test = 1;').insert('\\n', {\n        'code-block': 'javascript'\n      }).insert('var bugz = 0;').insert('\\n', {\n        'code-block': 'javascript'\n      }).insert('\\n'));\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"adds token","suites":["Syntax","highlighting"],"line":48,"updatePoint":{"line":48,"column":18,"index":1663},"code":"    it('adds token', function (done) {\n      setTimeout(() => {\n        expect(this.quill.root).toEqualHTML(`<div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> test = <span class=\"ql-token hljs-number\">1</span>;</div>\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> bugz = <span class=\"ql-token hljs-number\">0</span>;</div>\n          </div>\n          <p><br></p>`);\n        expect(this.quill.getContents()).toEqual(new Delta().insert('var test = 1;').insert('\\n', {\n          'code-block': 'javascript'\n        }).insert('var bugz = 0;').insert('\\n', {\n          'code-block': 'javascript'\n        }).insert('\\n'));\n        done();\n      }, HIGHLIGHT_INTERVAL + 1);\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"tokens do not escape","suites":["Syntax","highlighting"],"line":63,"updatePoint":{"line":63,"column":28,"index":2531},"code":"    it('tokens do not escape', function (done) {\n      this.quill.deleteText(22, 6);\n      setTimeout(() => {\n        expect(this.quill.root).toEqualHTML(`\n          <div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> test = <span class=\"ql-token hljs-number\">1</span>;</div>\n          </div>\n          <p>var bugz</p>`);\n        expect(this.quill.getContents()).toEqual(new Delta().insert('var test = 1;').insert('\\n', {\n          'code-block': 'javascript'\n        }).insert('var bugz\\n'));\n        done();\n      }, HIGHLIGHT_INTERVAL + 1);\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"change language","suites":["Syntax","highlighting"],"line":77,"updatePoint":{"line":77,"column":23,"index":3195},"code":"    it('change language', function (done) {\n      this.quill.formatLine(0, 20, 'code-block', 'ruby');\n      setTimeout(() => {\n        expect(this.quill.root).toEqualHTML(`\n          <div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <div class=\"ql-code-block\" data-language=\"ruby\">var test = <span class=\"ql-token hljs-number\">1</span>;</div>\n            <div class=\"ql-code-block\" data-language=\"ruby\">var bugz = <span class=\"ql-token hljs-number\">0</span>;</div>\n          </div>\n          <p><br></p>`);\n        expect(this.quill.getContents()).toEqual(new Delta().insert('var test = 1;').insert('\\n', {\n          'code-block': 'ruby'\n        }).insert('var bugz = 0;').insert('\\n', {\n          'code-block': 'ruby'\n        }).insert('\\n'));\n        done();\n      }, HIGHLIGHT_INTERVAL + 1);\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"invalid language","suites":["Syntax","highlighting"],"line":94,"updatePoint":{"line":94,"column":24,"index":4018},"code":"    it('invalid language', function (done) {\n      this.quill.formatLine(0, 20, 'code-block', 'invalid');\n      setTimeout(() => {\n        expect(this.quill.root).toEqualHTML(`\n          <div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <div class=\"ql-code-block\" data-language=\"plain\">var test = 1;</div>\n            <div class=\"ql-code-block\" data-language=\"plain\">var bugz = 0;</div>\n          </div>\n          <p><br></p>`);\n        expect(this.quill.getContents()).toEqual(new Delta().insert('var test = 1;').insert('\\n', {\n          'code-block': 'plain'\n        }).insert('var bugz = 0;').insert('\\n', {\n          'code-block': 'plain'\n        }).insert('\\n'));\n        done();\n      }, HIGHLIGHT_INTERVAL + 1);\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"unformat first line","suites":["Syntax","highlighting"],"line":111,"updatePoint":{"line":111,"column":27,"index":4767},"code":"    it('unformat first line', function (done) {\n      this.quill.formatLine(0, 1, 'code-block', false);\n      setTimeout(() => {\n        expect(this.quill.root).toEqualHTML(`\n          <p>var test = 1;</p>\n          <div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> bugz = <span class=\"ql-token hljs-number\">0</span>;</div>\n          </div>\n          <p><br></p>`);\n        expect(this.quill.getContents()).toEqual(new Delta().insert('var test = 1;\\nvar bugz = 0;').insert('\\n', {\n          'code-block': 'javascript'\n        }).insert('\\n'));\n        done();\n      }, HIGHLIGHT_INTERVAL + 1);\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"split container","suites":["Syntax","highlighting"],"line":126,"updatePoint":{"line":126,"column":23,"index":5485},"code":"    it('split container', function (done) {\n      this.quill.updateContents(new Delta().retain(14).insert('\\n'));\n      setTimeout(() => {\n        expect(this.quill.root).toEqualHTML(`\n          <div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <select class=\"ql-ui\" contenteditable=\"false\">\n              <option value=\"javascript\">Javascript</option>\n              <option value=\"ruby\">Ruby</option>\n            </select>\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> test = <span class=\"ql-token hljs-number\">1</span>;</div>\n          </div>\n          <p><br></p>\n          <div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <select class=\"ql-ui\" contenteditable=\"false\">\n              <option value=\"javascript\">Javascript</option>\n              <option value=\"ruby\">Ruby</option>\n            </select>\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> bugz = <span class=\"ql-token hljs-number\">0</span>;</div>\n          </div>\n          <p><br></p>`, false, false);\n        expect(this.quill.getContents()).toEqual(new Delta().insert('var test = 1;').insert('\\n', {\n          'code-block': 'javascript'\n        }).insert('\\nvar bugz = 0;').insert('\\n', {\n          'code-block': 'javascript'\n        }).insert('\\n'));\n        done();\n      }, HIGHLIGHT_INTERVAL + 1);\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"merge containers","suites":["Syntax","highlighting"],"line":154,"updatePoint":{"line":154,"column":24,"index":6934},"code":"    it('merge containers', function (done) {\n      this.quill.updateContents(new Delta().retain(14).insert('\\n'));\n      setTimeout(() => {\n        this.quill.deleteText(14, 1);\n        setTimeout(() => {\n          expect(this.quill.root).toEqualHTML(`\n            <div class=\"ql-code-block-container\" spellcheck=\"false\">\n              <select class=\"ql-ui\" contenteditable=\"false\">\n                <option value=\"javascript\">Javascript</option>\n                <option value=\"ruby\">Ruby</option>\n              </select>\n              <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> test = <span class=\"ql-token hljs-number\">1</span>;</div>\n              <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> bugz = <span class=\"ql-token hljs-number\">0</span>;</div>\n            </div>\n            <p><br></p>`, false, false);\n          expect(this.quill.getContents()).toEqual(new Delta().insert('var test = 1;').insert('\\n', {\n            'code-block': 'javascript'\n          }).insert('var bugz = 0;').insert('\\n', {\n            'code-block': 'javascript'\n          }).insert('\\n'));\n          done();\n        }, HIGHLIGHT_INTERVAL + 1);\n      }, HIGHLIGHT_INTERVAL + 1);\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"modification","suites":["Syntax","highlighting","allowedChildren"],"line":185,"updatePoint":{"line":185,"column":22,"index":8443},"code":"      it('modification', function (done) {\n        this.quill.formatText(2, 3, 'bold', true);\n        setTimeout(() => {\n          expect(this.quill.root).toEqualHTML(`\n          <div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">va</span><strong><span class=\"ql-token hljs-keyword\">r</span> t</strong>est = <span class=\"ql-token hljs-number\">1</span>;</div>\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">var</span> bugz = <span class=\"ql-token hljs-number\">0</span>;</div>\n          </div>\n          <p><br></p>`);\n          expect(this.quill.getContents()).toEqual(new Delta().insert('va').insert('r t', {\n            bold: true\n          }).insert('est = 1;').insert('\\n', {\n            'code-block': 'javascript'\n          }).insert('var bugz = 0;').insert('\\n', {\n            'code-block': 'javascript'\n          }).insert('\\n'));\n          done();\n        }, HIGHLIGHT_INTERVAL + 1);\n      });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"removal","suites":["Syntax","highlighting","allowedChildren"],"line":204,"updatePoint":{"line":204,"column":17,"index":9502},"code":"      it('removal', function (done) {\n        this.quill.formatText(2, 3, 'bold', true);\n        setTimeout(() => {\n          this.quill.formatLine(0, 15, 'code-block', false);\n          expect(this.quill.root).toEqualHTML(`<p>va<strong>r t</strong>est = 1;</p><p>var bugz = 0;</p><p><br></p>`);\n          expect(this.quill.getContents()).toEqual(new Delta().insert('va').insert('r t', {\n            bold: true\n          }).insert('est = 1;\\nvar bugz = 0;\\n\\n'));\n          done();\n        }, HIGHLIGHT_INTERVAL + 1);\n      });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"addition","suites":["Syntax","highlighting","allowedChildren"],"line":215,"updatePoint":{"line":215,"column":18,"index":10031},"code":"      it('addition', function (done) {\n        this.quill.setText('var test = 1;\\n');\n        this.quill.formatText(2, 3, 'bold', true);\n        this.quill.formatLine(0, 1, 'code-block', 'javascript');\n        setTimeout(() => {\n          expect(this.quill.root).toEqualHTML(`\n            <div class=\"ql-code-block-container\" spellcheck=\"false\">\n            <div class=\"ql-code-block\" data-language=\"javascript\"><span class=\"ql-token hljs-keyword\">va</span><strong><span class=\"ql-token hljs-keyword\">r</span> t</strong>est = <span class=\"ql-token hljs-number\">1</span>;</div>\n          </div>`);\n          expect(this.quill.getContents()).toEqual(new Delta().insert('va').insert('r t', {\n            bold: true\n          }).insert('est = 1;').insert('\\n', {\n            'code-block': 'javascript'\n          }));\n          done();\n        }, HIGHLIGHT_INTERVAL + 1);\n      });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"code language","suites":["Syntax","html"],"line":235,"updatePoint":{"line":235,"column":21,"index":10958},"code":"    it('code language', function () {\n      expect(this.quill.getSemanticHTML()).toContain('data-language=\"javascript\"');\n    });","file":"unit/modules/syntax.js","skipped":false,"dir":"test"},{"name":"empty","suites":["Table Module","insert table"],"line":5,"updatePoint":{"line":5,"column":13,"index":168},"code":"    it('empty', function () {\n      const quill = this.initialize(Quill, '<p><br></p>', this.container, {\n        modules: {\n          table: true\n        }\n      });\n      const table = quill.getModule('table');\n      quill.setSelection(0);\n      table.insertTable(2, 3);\n      expect(quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td><br></td><td><br></td><td><br></td></tr>\n            <tr><td><br></td><td><br></td><td><br></td></tr>\n          </tbody>\n        </table>\n        <p><br></p>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"split","suites":["Table Module","insert table"],"line":24,"updatePoint":{"line":24,"column":13,"index":710},"code":"    it('split', function () {\n      const quill = this.initialize(Quill, '<p>0123</p>', this.container, {\n        modules: {\n          table: true\n        }\n      });\n      const table = quill.getModule('table');\n      quill.setSelection(2);\n      table.insertTable(2, 3);\n      expect(quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td>01</td><td><br></td><td><br></td></tr>\n            <tr><td><br></td><td><br></td><td><br></td></tr>\n          </tbody>\n        </table>\n        <p>23</p>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"insertRowAbove","suites":["Table Module","modify table"],"line":61,"updatePoint":{"line":61,"column":22,"index":1738},"code":"    it('insertRowAbove', function () {\n      this.quill.setSelection(0);\n      this.table.insertRowAbove();\n      expect(this.quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td><br></td><td><br></td><td><br></td></tr>\n            <tr><td>a1</td><td>a2</td><td>a3</td></tr>\n            <tr><td>b1</td><td>b2</td><td>b3</td></tr>\n          </tbody>\n        </table>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"insertRowBelow","suites":["Table Module","modify table"],"line":74,"updatePoint":{"line":74,"column":22,"index":2149},"code":"    it('insertRowBelow', function () {\n      this.quill.setSelection(0);\n      this.table.insertRowBelow();\n      expect(this.quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td>a1</td><td>a2</td><td>a3</td></tr>\n            <tr><td><br></td><td><br></td><td><br></td></tr>\n            <tr><td>b1</td><td>b2</td><td>b3</td></tr>\n          </tbody>\n        </table>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"insertColumnLeft","suites":["Table Module","modify table"],"line":87,"updatePoint":{"line":87,"column":24,"index":2562},"code":"    it('insertColumnLeft', function () {\n      this.quill.setSelection(0);\n      this.table.insertColumnLeft();\n      expect(this.quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td><br></td><td>a1</td><td>a2</td><td>a3</td></tr>\n            <tr><td><br></td><td>b1</td><td>b2</td><td>b3</td></tr>\n          </tbody>\n        </table>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"insertColumnRight","suites":["Table Module","modify table"],"line":99,"updatePoint":{"line":99,"column":25,"index":2943},"code":"    it('insertColumnRight', function () {\n      this.quill.setSelection(0);\n      this.table.insertColumnRight();\n      expect(this.quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td>a1</td><td><br></td><td>a2</td><td>a3</td></tr>\n            <tr><td>b1</td><td><br></td><td>b2</td><td>b3</td></tr>\n          </tbody>\n        </table>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"deleteRow","suites":["Table Module","modify table"],"line":111,"updatePoint":{"line":111,"column":17,"index":3317},"code":"    it('deleteRow', function () {\n      this.quill.setSelection(0);\n      this.table.deleteRow();\n      expect(this.quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td>b1</td><td>b2</td><td>b3</td></tr>\n          </tbody>\n        </table>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"deleteColumn","suites":["Table Module","modify table"],"line":122,"updatePoint":{"line":122,"column":20,"index":3605},"code":"    it('deleteColumn', function () {\n      this.quill.setSelection(0);\n      this.table.deleteColumn();\n      expect(this.quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td>a2</td><td>a3</td></tr>\n            <tr><td>b2</td><td>b3</td></tr>\n          </tbody>\n        </table>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"insertText before","suites":["Table Module","modify table"],"line":134,"updatePoint":{"line":134,"column":25,"index":3934},"code":"    it('insertText before', function () {\n      this.quill.updateContents(new Delta().insert('\\n'));\n      expect(this.quill.root).toEqualHTML(`\n        <p><br></p>\n        <table>\n          <tbody>\n            <tr><td>a1</td><td>a2</td><td>a3</td></tr>\n            <tr><td>b1</td><td>b2</td><td>b3</td></tr>\n          </tbody>\n        </table>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"insertText after","suites":["Table Module","modify table"],"line":146,"updatePoint":{"line":146,"column":24,"index":4296},"code":"    it('insertText after', function () {\n      this.quill.updateContents(new Delta().retain(18).insert('\\n'));\n      expect(this.quill.root).toEqualHTML(`\n        <table>\n          <tbody>\n            <tr><td>a1</td><td>a2</td><td>a3</td></tr>\n            <tr><td>b1</td><td>b2</td><td>b3</td></tr>\n          </tbody>\n        </table>\n        <p><br></p>\n      `);\n    });","file":"unit/modules/table.js","skipped":false,"dir":"test"},{"name":"adds a row","suites":["Delta","compose"],"line":8,"updatePoint":{"line":8,"column":18,"index":215},"code":"    it('adds a row', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '55555555'\n              }\n            }]\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '55555555'\n              }\n            }, {\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '2:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"adds two rows","suites":["Delta","compose"],"line":105,"updatePoint":{"line":105,"column":21,"index":2359},"code":"    it('adds two rows', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '55555555'\n              }\n            }, {\n              insert: {\n                id: '66666666'\n              }\n            }]\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '55555555'\n              }\n            }, {\n              insert: {\n                id: '66666666'\n              }\n            }, {\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '3:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"adds a row and changes cell content","suites":["Delta","compose"],"line":210,"updatePoint":{"line":210,"column":43,"index":4701},"code":"    it('adds a row and changes cell content', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '55555555'\n              }\n            }],\n            cells: {\n              '2:2': {\n                content: [{\n                  insert: 'Hello'\n                }]\n              },\n              '2:3': {\n                content: [{\n                  insert: 'World'\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '66666666'\n              }\n            }],\n            cells: {\n              '3:2': {\n                attributes: {\n                  align: 'right'\n                }\n              },\n              '3:3': {\n                content: [{\n                  insert: 'Hello '\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '66666666'\n              }\n            }, {\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '55555555'\n              }\n            }],\n            cells: {\n              '3:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'right'\n                }\n              },\n              '3:3': {\n                content: [{\n                  insert: 'Hello World'\n                }]\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"deletes a column","suites":["Delta","compose"],"line":334,"updatePoint":{"line":334,"column":24,"index":7466},"code":"    it('deletes a column', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            columns: [{\n              retain: 1\n            }, {\n              delete: 1\n            }]\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }]\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"removes a cell attributes","suites":["Delta","compose"],"line":410,"updatePoint":{"line":410,"column":33,"index":9133},"code":"    it('removes a cell attributes', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            cells: {\n              '1:2': {\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            cells: {\n              '1:2': {\n                attributes: {\n                  align: null\n                }\n              }\n            }\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          'table-embed': {}\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"removes all rows","suites":["Delta","compose"],"line":443,"updatePoint":{"line":443,"column":24,"index":9830},"code":"    it('removes all rows', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }]\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              delete: 1\n            }]\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          'table-embed': {}\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"transform rows and columns","suites":["Delta","transform"],"line":472,"updatePoint":{"line":472,"column":34,"index":10434},"code":"    it('transform rows and columns', () => {\n      const change1 = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                height: 100\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 100\n              }\n            }, {\n              insert: {\n                id: '55555555'\n              }\n            }, {\n              insert: {\n                id: '66666666'\n              }\n            }]\n          }\n        }\n      }]);\n      const change2 = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              delete: 1\n            }, {\n              retain: 1,\n              attributes: {\n                height: 50\n              }\n            }],\n            columns: [{\n              delete: 1\n            }, {\n              retain: 2,\n              attributes: {\n                width: 40\n              }\n            }]\n          }\n        }\n      }]);\n      expect(change1.transform(change2)).toEqual(new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              retain: 3\n            }, {\n              delete: 1\n            }, {\n              retain: 1,\n              attributes: {\n                height: 50\n              }\n            }],\n            columns: [{\n              retain: 3\n            }, {\n              delete: 1\n            }, {\n              retain: 2,\n              attributes: {\n                width: 40\n              }\n            }]\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"transform cells","suites":["Delta","transform"],"line":560,"updatePoint":{"line":560,"column":23,"index":12338},"code":"    it('transform cells', () => {\n      const change1 = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '22222222'\n              }\n            }],\n            cells: {\n              '8:1': {\n                content: [{\n                  insert: 'Hello 8:1!'\n                }]\n              },\n              '21:2': {\n                content: [{\n                  insert: 'Hello 21:2!'\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      const change2 = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              delete: 1\n            }],\n            cells: {\n              '6:1': {\n                content: [{\n                  insert: 'Hello 6:1!'\n                }]\n              },\n              '52:8': {\n                content: [{\n                  insert: 'Hello 52:8!'\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      expect(change1.transform(change2)).toEqual(new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              retain: 1\n            }, {\n              delete: 1\n            }],\n            cells: {\n              '7:1': {\n                content: [{\n                  insert: 'Hello 6:1!'\n                }]\n              },\n              '53:8': {\n                content: [{\n                  insert: 'Hello 52:8!'\n                }]\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"transform cell attributes","suites":["Delta","transform"],"line":629,"updatePoint":{"line":629,"column":33,"index":13892},"code":"    it('transform cell attributes', () => {\n      const change1 = new Delta([{\n        retain: {\n          'table-embed': {\n            cells: {\n              '8:1': {\n                attributes: {\n                  align: 'right'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change2 = new Delta([{\n        retain: {\n          'table-embed': {\n            cells: {\n              '8:1': {\n                attributes: {\n                  align: 'left'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      expect(change1.transform(change2)).toEqual(new Delta([{\n        retain: {\n          'table-embed': {\n            cells: {\n              '8:1': {\n                attributes: {\n                  align: 'left'\n                }\n              }\n            }\n          }\n        }\n      }]));\n      expect(change1.transform(change2, true)).toEqual(new Delta([{\n        retain: {\n          'table-embed': {}\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"reverts rows and columns","suites":["Delta","invert"],"line":677,"updatePoint":{"line":677,"column":32,"index":14944},"code":"    it('reverts rows and columns', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 100\n              }\n            }]\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              delete: 1\n            }],\n            columns: [{\n              retain: 1\n            }, {\n              delete: 1\n            }]\n          }\n        }\n      }]);\n      expect(change.invert(base)).toEqual(new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }],\n            columns: [{\n              retain: 1\n            }, {\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 100\n              }\n            }]\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"inverts cell content","suites":["Delta","invert"],"line":741,"updatePoint":{"line":741,"column":28,"index":16309},"code":"    it('inverts cell content', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'Hello 1:2'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '55555555'\n              }\n            }],\n            cells: {\n              '2:2': {\n                content: [{\n                  retain: 6\n                }, {\n                  insert: '2'\n                }, {\n                  delete: 1\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      expect(change.invert(base)).toEqual(new Delta([{\n        retain: {\n          'table-embed': {\n            rows: [{\n              delete: 1\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  retain: 6\n                }, {\n                  insert: '1'\n                }, {\n                  delete: 1\n                }]\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"inverts cells removed by row/column delta","suites":["Delta","invert"],"line":819,"updatePoint":{"line":819,"column":49,"index":18037},"code":"    it('inverts cells removed by row/column delta', () => {\n      const base = new Delta([{\n        insert: {\n          'table-embed': {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'content'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          'table-embed': {\n            columns: [{\n              retain: 1\n            }, {\n              delete: 1\n            }]\n          }\n        }\n      }]);\n      expect(change.invert(base)).toEqual(new Delta([{\n        retain: {\n          'table-embed': {\n            columns: [{\n              retain: 1\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'content'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/modules/tableEmbed.js","skipped":false,"dir":"test"},{"name":"single level","suites":["Toolbar","add controls"],"line":5,"updatePoint":{"line":5,"column":20,"index":193},"code":"    it('single level', function () {\n      addControls(this.container, ['bold', 'italic']);\n      expect(this.container).toEqualHTML(`\n        <span class=\"ql-formats\">\n          <button type=\"button\" class=\"ql-bold\"></button>\n          <button type=\"button\" class=\"ql-italic\"></button>\n        </span>\n      `);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"nested group","suites":["Toolbar","add controls"],"line":14,"updatePoint":{"line":14,"column":20,"index":514},"code":"    it('nested group', function () {\n      addControls(this.container, [['bold', 'italic'], ['underline', 'strike']]);\n      expect(this.container).toEqualHTML(`\n        <span class=\"ql-formats\">\n          <button type=\"button\" class=\"ql-bold\"></button>\n          <button type=\"button\" class=\"ql-italic\"></button>\n        </span>\n        <span class=\"ql-formats\">\n          <button type=\"button\" class=\"ql-underline\"></button>\n          <button type=\"button\" class=\"ql-strike\"></button>\n        </span>\n      `);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"button value","suites":["Toolbar","add controls"],"line":27,"updatePoint":{"line":27,"column":20,"index":1035},"code":"    it('button value', function () {\n      addControls(this.container, ['bold', {\n        header: '2'\n      }]);\n      expect(this.container).toEqualHTML(`\n        <span class=\"ql-formats\">\n          <button type=\"button\" class=\"ql-bold\"></button>\n          <button type=\"button\" class=\"ql-header\" value=\"2\"></button>\n        </span>\n      `);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"select","suites":["Toolbar","add controls"],"line":38,"updatePoint":{"line":38,"column":14,"index":1381},"code":"    it('select', function () {\n      addControls(this.container, [{\n        size: ['10px', false, '18px', '32px']\n      }]);\n      expect(this.container).toEqualHTML(`\n        <span class=\"ql-formats\">\n          <select class=\"ql-size\">\n            <option value=\"10px\"></option>\n            <option selected=\"selected\"></option>\n            <option value=\"18px\"></option>\n            <option value=\"32px\"></option>\n          </select>\n        </span>\n      `);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"everything","suites":["Toolbar","add controls"],"line":53,"updatePoint":{"line":53,"column":18,"index":1855},"code":"    it('everything', function () {\n      addControls(this.container, [[{\n        font: [false, 'sans-serif', 'monospace']\n      }, {\n        size: ['10px', false, '18px', '32px']\n      }], ['bold', 'italic', 'underline', 'strike'], [{\n        list: 'ordered'\n      }, {\n        list: 'bullet'\n      }, {\n        align: [false, 'center', 'right', 'justify']\n      }], ['link', 'image']]);\n      expect(this.container).toEqualHTML(`\n        <span class=\"ql-formats\">\n          <select class=\"ql-font\">\n            <option selected=\"selected\"></option>\n            <option value=\"sans-serif\"></option>\n            <option value=\"monospace\"></option>\n          </select>\n          <select class=\"ql-size\">\n            <option value=\"10px\"></option>\n            <option selected=\"selected\"></option>\n            <option value=\"18px\"></option>\n            <option value=\"32px\"></option>\n          </select>\n        </span>\n        <span class=\"ql-formats\">\n          <button type=\"button\" class=\"ql-bold\"></button>\n          <button type=\"button\" class=\"ql-italic\"></button>\n          <button type=\"button\" class=\"ql-underline\"></button>\n          <button type=\"button\" class=\"ql-strike\"></button>\n        </span>\n        <span class=\"ql-formats\">\n          <button type=\"button\" class=\"ql-list\" value=\"ordered\"></button>\n          <button type=\"button\" class=\"ql-list\" value=\"bullet\"></button>\n          <select class=\"ql-align\">\n            <option selected=\"selected\"></option>\n            <option value=\"center\"></option>\n            <option value=\"right\"></option>\n            <option value=\"justify\"></option>\n          </select>\n        </span>\n        <span class=\"ql-formats\">\n          <button type=\"button\" class=\"ql-link\"></button>\n          <button type=\"button\" class=\"ql-image\"></button>\n        </span>\n      `);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"toggle button","suites":["Toolbar","active"],"line":124,"updatePoint":{"line":124,"column":21,"index":4362},"code":"    it('toggle button', function () {\n      const boldButton = this.container.parentNode.querySelector('button.ql-bold');\n      this.quill.setSelection(7);\n      expect(boldButton.classList.contains('ql-active')).toBe(true);\n      this.quill.setSelection(2);\n      expect(boldButton.classList.contains('ql-active')).toBe(false);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"link","suites":["Toolbar","active"],"line":131,"updatePoint":{"line":131,"column":12,"index":4690},"code":"    it('link', function () {\n      const linkButton = this.container.parentNode.querySelector('button.ql-link');\n      this.quill.setSelection(12);\n      expect(linkButton.classList.contains('ql-active')).toBe(true);\n      this.quill.setSelection(2);\n      expect(linkButton.classList.contains('ql-active')).toBe(false);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"dropdown","suites":["Toolbar","active"],"line":138,"updatePoint":{"line":138,"column":16,"index":5023},"code":"    it('dropdown', function () {\n      const sizeSelect = this.container.parentNode.querySelector('select.ql-size');\n      this.quill.setSelection(21);\n      expect(sizeSelect.selectedIndex).toEqual(0);\n      this.quill.setSelection(23);\n      expect(sizeSelect.selectedIndex).toEqual(2);\n      this.quill.setSelection(21, 2);\n      expect(sizeSelect.selectedIndex).toBeLessThan(0);\n      this.quill.setSelection(2);\n      expect(sizeSelect.selectedIndex).toEqual(1);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"custom button","suites":["Toolbar","active"],"line":149,"updatePoint":{"line":149,"column":21,"index":5504},"code":"    it('custom button', function () {\n      const centerButton = this.container.parentNode.querySelector('button.ql-align[value=\"center\"]');\n      const leftButton = this.container.parentNode.querySelector('button.ql-align[value]');\n      this.quill.setSelection(17);\n      expect(centerButton.classList.contains('ql-active')).toBe(true);\n      expect(leftButton.classList.contains('ql-active')).toBe(false);\n      this.quill.setSelection(2);\n      expect(centerButton.classList.contains('ql-active')).toBe(false);\n      expect(leftButton.classList.contains('ql-active')).toBe(true);\n      this.quill.blur();\n      expect(centerButton.classList.contains('ql-active')).toBe(false);\n      expect(leftButton.classList.contains('ql-active')).toBe(false);\n    });","file":"unit/modules/toolbar.js","skipped":false,"dir":"test"},{"name":"converts youtube video url to embedded","suites":["BaseTooltip","save"],"line":11,"updatePoint":{"line":11,"column":46,"index":420},"code":"    it('converts youtube video url to embedded', function () {\n      insertVideo(this.tooltip, 'http://youtube.com/watch?v=QHH3iSeDBLo');\n      expect(this.container.querySelector('.ql-video').src).toContain('http://www.youtube.com/embed/QHH3iSeDBLo');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"converts www.youtube video url to embedded","suites":["BaseTooltip","save"],"line":15,"updatePoint":{"line":15,"column":50,"index":685},"code":"    it('converts www.youtube video url to embedded', function () {\n      insertVideo(this.tooltip, 'http://www.youtube.com/watch?v=QHH3iSeDBLo');\n      expect(this.container.querySelector('.ql-video').src).toContain('http://www.youtube.com/embed/QHH3iSeDBLo');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"converts m.youtube video url to embedded","suites":["BaseTooltip","save"],"line":19,"updatePoint":{"line":19,"column":48,"index":952},"code":"    it('converts m.youtube video url to embedded', function () {\n      insertVideo(this.tooltip, 'http://m.youtube.com/watch?v=QHH3iSeDBLo');\n      expect(this.container.querySelector('.ql-video').src).toContain('http://www.youtube.com/embed/QHH3iSeDBLo');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"preserves youtube video url protocol","suites":["BaseTooltip","save"],"line":23,"updatePoint":{"line":23,"column":44,"index":1213},"code":"    it('preserves youtube video url protocol', function () {\n      insertVideo(this.tooltip, 'https://m.youtube.com/watch?v=QHH3iSeDBLo');\n      expect(this.container.querySelector('.ql-video').src).toContain('https://www.youtube.com/embed/QHH3iSeDBLo');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"uses https as default youtube video url protocol","suites":["BaseTooltip","save"],"line":27,"updatePoint":{"line":27,"column":56,"index":1488},"code":"    it('uses https as default youtube video url protocol', function () {\n      insertVideo(this.tooltip, 'youtube.com/watch?v=QHH3iSeDBLo');\n      expect(this.container.querySelector('.ql-video').src).toContain('https://www.youtube.com/embed/QHH3iSeDBLo');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"converts vimeo video url to embedded","suites":["BaseTooltip","save"],"line":31,"updatePoint":{"line":31,"column":44,"index":1741},"code":"    it('converts vimeo video url to embedded', function () {\n      insertVideo(this.tooltip, 'http://vimeo.com/47762693');\n      expect(this.container.querySelector('.ql-video').src).toContain('http://player.vimeo.com/video/47762693/');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"converts www.vimeo video url to embedded","suites":["BaseTooltip","save"],"line":35,"updatePoint":{"line":35,"column":48,"index":1990},"code":"    it('converts www.vimeo video url to embedded', function () {\n      insertVideo(this.tooltip, 'http://www.vimeo.com/47762693');\n      expect(this.container.querySelector('.ql-video').src).toContain('http://player.vimeo.com/video/47762693/');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"preserves vimeo video url protocol","suites":["BaseTooltip","save"],"line":39,"updatePoint":{"line":39,"column":42,"index":2237},"code":"    it('preserves vimeo video url protocol', function () {\n      insertVideo(this.tooltip, 'https://www.vimeo.com/47762693');\n      expect(this.container.querySelector('.ql-video').src).toContain('https://player.vimeo.com/video/47762693/');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"uses https as default vimeo video url protocol","suites":["BaseTooltip","save"],"line":43,"updatePoint":{"line":43,"column":54,"index":2498},"code":"    it('uses https as default vimeo video url protocol', function () {\n      insertVideo(this.tooltip, 'vimeo.com/47762693');\n      expect(this.container.querySelector('.ql-video').src).toContain('https://player.vimeo.com/video/47762693/');\n    });","file":"unit/theme/base/tooltip.js","skipped":false,"dir":"test"},{"name":"initialization","suites":["Picker"],"line":8,"updatePoint":{"line":8,"column":20,"index":378},"code":"  it('initialization', function () {\n    expect(this.container.querySelector('.ql-picker')).toBeTruthy();\n    expect(this.container.querySelector('.ql-active')).toBeFalsy();\n    expect(this.container.querySelector('.ql-picker-item.ql-selected').outerHTML).toEqualHTML('<span tabindex=\"0\" role=\"button\" class=\"ql-picker-item ql-selected\" data-label=\"0\"></span>');\n    expect(this.container.querySelector('.ql-picker-item:not(.ql-selected)').outerHTML).toEqualHTML('<span tabindex=\"0\" role=\"button\" class=\"ql-picker-item\" data-value=\"1\" data-label=\"1\"></span>');\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"escape charcters","suites":["Picker"],"line":14,"updatePoint":{"line":14,"column":22,"index":947},"code":"  it('escape charcters', function () {\n    const select = document.createElement('select');\n    const option = document.createElement('option');\n    this.container.appendChild(select);\n    select.appendChild(option);\n    let value = '\"Helvetica Neue\", \\'Helvetica\\', sans-serif';\n    option.value = value;\n    value = value.replace(/\"/g, '\\\\\"');\n    expect(select.querySelector(`option[value=\"${value}\"]`)).toEqual(option);\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"label is initialized with the correct aria attributes","suites":["Picker"],"line":24,"updatePoint":{"line":24,"column":59,"index":1414},"code":"  it('label is initialized with the correct aria attributes', function () {\n    expect(this.pickerSelector.querySelector('.ql-picker-label').getAttribute('aria-expanded')).toEqual('false');\n    const optionsId = this.pickerSelector.querySelector('.ql-picker-options').id;\n    expect(this.pickerSelector.querySelector('.ql-picker-label').getAttribute('aria-controls')).toEqual(optionsId);\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"options container is initialized with the correct aria attributes","suites":["Picker"],"line":29,"updatePoint":{"line":29,"column":71,"index":1820},"code":"  it('options container is initialized with the correct aria attributes', function () {\n    expect(this.pickerSelector.querySelector('.ql-picker-options').getAttribute('aria-hidden')).toEqual('true');\n    const ariaControlsLabel = this.pickerSelector.querySelector('.ql-picker-label').getAttribute('aria-controls');\n    expect(this.pickerSelector.querySelector('.ql-picker-options').id).toEqual(ariaControlsLabel);\n    expect(this.pickerSelector.querySelector('.ql-picker-options').tabIndex).toEqual(-1);\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"aria attributes toggle correctly when the picker is opened via enter key","suites":["Picker"],"line":35,"updatePoint":{"line":35,"column":78,"index":2338},"code":"  it('aria attributes toggle correctly when the picker is opened via enter key', function () {\n    const pickerLabel = this.pickerSelector.querySelector('.ql-picker-label');\n    pickerLabel.dispatchEvent(new KeyboardEvent('keydown', {\n      key: 'Enter'\n    }));\n    expect(pickerLabel.getAttribute('aria-expanded')).toEqual('true');\n    expect(this.pickerSelector.querySelector('.ql-picker-options').getAttribute('aria-hidden')).toEqual('false');\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"aria attributes toggle correctly when the picker is opened via mousedown","suites":["Picker"],"line":43,"updatePoint":{"line":43,"column":78,"index":2792},"code":"  it('aria attributes toggle correctly when the picker is opened via mousedown', function () {\n    const pickerLabel = this.pickerSelector.querySelector('.ql-picker-label');\n    pickerLabel.dispatchEvent(new Event('mousedown', {\n      bubbles: true,\n      cancelable: true\n    }));\n    expect(pickerLabel.getAttribute('aria-expanded')).toEqual('true');\n    expect(this.pickerSelector.querySelector('.ql-picker-options').getAttribute('aria-hidden')).toEqual('false');\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"aria attributes toggle correctly when an item is selected via click","suites":["Picker"],"line":52,"updatePoint":{"line":52,"column":73,"index":3260},"code":"  it('aria attributes toggle correctly when an item is selected via click', function () {\n    const pickerLabel = this.pickerSelector.querySelector('.ql-picker-label');\n    pickerLabel.click();\n    const pickerItem = this.pickerSelector.querySelector('.ql-picker-item');\n    pickerItem.click();\n    expect(pickerLabel.getAttribute('aria-expanded')).toEqual('false');\n    expect(this.pickerSelector.querySelector('.ql-picker-options').getAttribute('aria-hidden')).toEqual('true');\n    expect(pickerLabel.textContent.trim()).toEqual(pickerItem.textContent.trim());\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"aria attributes toggle correctly when an item is selected via enter","suites":["Picker"],"line":61,"updatePoint":{"line":61,"column":73,"index":3829},"code":"  it('aria attributes toggle correctly when an item is selected via enter', function () {\n    const pickerLabel = this.pickerSelector.querySelector('.ql-picker-label');\n    pickerLabel.click();\n    const pickerItem = this.pickerSelector.querySelector('.ql-picker-item');\n    pickerItem.dispatchEvent(new KeyboardEvent('keydown', {\n      key: 'Enter'\n    }));\n    expect(pickerLabel.getAttribute('aria-expanded')).toEqual('false');\n    expect(this.pickerSelector.querySelector('.ql-picker-options').getAttribute('aria-hidden')).toEqual('true');\n    expect(pickerLabel.textContent.trim()).toEqual(pickerItem.textContent.trim());\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"aria attributes toggle correctly when the picker is closed via clicking on the label again","suites":["Picker"],"line":72,"updatePoint":{"line":72,"column":96,"index":4485},"code":"  it('aria attributes toggle correctly when the picker is closed via clicking on the label again', function () {\n    const pickerLabel = this.pickerSelector.querySelector('.ql-picker-label');\n    pickerLabel.click();\n    pickerLabel.click();\n    expect(pickerLabel.getAttribute('aria-expanded')).toEqual('false');\n    expect(this.pickerSelector.querySelector('.ql-picker-options').getAttribute('aria-hidden')).toEqual('true');\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"aria attributes toggle correctly when the picker is closed via escaping out of it","suites":["Picker"],"line":79,"updatePoint":{"line":79,"column":87,"index":4909},"code":"  it('aria attributes toggle correctly when the picker is closed via escaping out of it', function () {\n    const pickerLabel = this.pickerSelector.querySelector('.ql-picker-label');\n    pickerLabel.click();\n    pickerLabel.dispatchEvent(new KeyboardEvent('keydown', {\n      key: 'Escape'\n    }));\n    expect(pickerLabel.getAttribute('aria-expanded')).toEqual('false');\n    expect(this.pickerSelector.querySelector('.ql-picker-options').getAttribute('aria-hidden')).toEqual('true');\n  });","file":"unit/ui/picker.js","skipped":false,"dir":"test"},{"name":"adds a row","suites":["Delta","compose"],"line":4,"updatePoint":{"line":4,"column":18,"index":108},"code":"    it('adds a row', () => {\n      const base = new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              insert: {\n                id: '55555555'\n              }\n            }]\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '55555555'\n              }\n            }, {\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '2:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"adds a row and changes cell content","suites":["Delta","compose"],"line":101,"updatePoint":{"line":101,"column":43,"index":2250},"code":"    it('adds a row and changes cell content', () => {\n      const base = new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '55555555'\n              }\n            }],\n            cells: {\n              '2:2': {\n                content: [{\n                  insert: 'Hello'\n                }]\n              },\n              '2:3': {\n                content: [{\n                  insert: 'World'\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              insert: {\n                id: '66666666'\n              }\n            }],\n            cells: {\n              '3:2': {\n                attributes: {\n                  align: 'right'\n                }\n              },\n              '3:3': {\n                content: [{\n                  insert: 'Hello '\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '66666666'\n              }\n            }, {\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '55555555'\n              }\n            }],\n            cells: {\n              '3:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'right'\n                }\n              },\n              '3:3': {\n                content: [{\n                  insert: 'Hello World'\n                }]\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"deletes a column","suites":["Delta","compose"],"line":225,"updatePoint":{"line":225,"column":24,"index":4991},"code":"    it('deletes a column', () => {\n      const base = new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                width: 30\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'Hello'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          table: {\n            columns: [{\n              retain: 1\n            }, {\n              delete: 1\n            }]\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              },\n              attributes: {\n                height: 20\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }]\n          }\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"removes a cell attributes","suites":["Delta","compose"],"line":301,"updatePoint":{"line":301,"column":33,"index":6634},"code":"    it('removes a cell attributes', () => {\n      const base = new Delta([{\n        insert: {\n          table: {\n            cells: {\n              '1:2': {\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          table: {\n            cells: {\n              '1:2': {\n                attributes: {\n                  align: null\n                }\n              }\n            }\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          table: {}\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"removes all rows","suites":["Delta","compose"],"line":334,"updatePoint":{"line":334,"column":24,"index":7307},"code":"    it('removes all rows', () => {\n      const base = new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }]\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              delete: 1\n            }]\n          }\n        }\n      }]);\n      expect(base.compose(change)).toEqual(new Delta([{\n        insert: {\n          table: {}\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"transform rows and columns","suites":["Delta","transform"],"line":363,"updatePoint":{"line":363,"column":34,"index":7887},"code":"    it('transform rows and columns', () => {\n      const change1 = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              }\n            }, {\n              insert: {\n                id: '33333333'\n              },\n              attributes: {\n                height: 100\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 100\n              }\n            }, {\n              insert: {\n                id: '55555555'\n              }\n            }, {\n              insert: {\n                id: '66666666'\n              }\n            }]\n          }\n        }\n      }]);\n      const change2 = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              delete: 1\n            }, {\n              retain: 1,\n              attributes: {\n                height: 50\n              }\n            }],\n            columns: [{\n              delete: 1\n            }, {\n              retain: 2,\n              attributes: {\n                width: 40\n              }\n            }]\n          }\n        }\n      }]);\n      expect(change1.transform(change2)).toEqual(new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              retain: 3\n            }, {\n              delete: 1\n            }, {\n              retain: 1,\n              attributes: {\n                height: 50\n              }\n            }],\n            columns: [{\n              retain: 3\n            }, {\n              delete: 1\n            }, {\n              retain: 2,\n              attributes: {\n                width: 40\n              }\n            }]\n          }\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"transform cells","suites":["Delta","transform"],"line":451,"updatePoint":{"line":451,"column":23,"index":9767},"code":"    it('transform cells', () => {\n      const change1 = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              insert: {\n                id: '22222222'\n              }\n            }],\n            cells: {\n              '8:1': {\n                content: [{\n                  insert: 'Hello 8:1!'\n                }]\n              },\n              '21:2': {\n                content: [{\n                  insert: 'Hello 21:2!'\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      const change2 = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              delete: 1\n            }],\n            cells: {\n              '6:1': {\n                content: [{\n                  insert: 'Hello 6:1!'\n                }]\n              },\n              '52:8': {\n                content: [{\n                  insert: 'Hello 52:8!'\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      expect(change1.transform(change2)).toEqual(new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              retain: 1\n            }, {\n              delete: 1\n            }],\n            cells: {\n              '7:1': {\n                content: [{\n                  insert: 'Hello 6:1!'\n                }]\n              },\n              '53:8': {\n                content: [{\n                  insert: 'Hello 52:8!'\n                }]\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"transform cell attributes","suites":["Delta","transform"],"line":520,"updatePoint":{"line":520,"column":33,"index":11297},"code":"    it('transform cell attributes', () => {\n      const change1 = new Delta([{\n        retain: {\n          table: {\n            cells: {\n              '8:1': {\n                attributes: {\n                  align: 'right'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change2 = new Delta([{\n        retain: {\n          table: {\n            cells: {\n              '8:1': {\n                attributes: {\n                  align: 'left'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      expect(change1.transform(change2)).toEqual(new Delta([{\n        retain: {\n          table: {\n            cells: {\n              '8:1': {\n                attributes: {\n                  align: 'left'\n                }\n              }\n            }\n          }\n        }\n      }]));\n      expect(change1.transform(change2, true)).toEqual(new Delta([{\n        retain: {\n          table: {}\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"reverts rows and columns","suites":["Delta","invert"],"line":568,"updatePoint":{"line":568,"column":32,"index":12317},"code":"    it('reverts rows and columns', () => {\n      const base = new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 100\n              }\n            }]\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              remove: {\n                id: '22222222'\n              }\n            }],\n            columns: [{\n              retain: 1\n            }, {\n              delete: 1\n            }]\n          }\n        }\n      }]);\n      expect(change.invert(base)).toEqual(new Delta([{\n        retain: {\n          table: {\n            columns: [{\n              retain: 1\n            }, {\n              insert: {\n                id: '44444444'\n              },\n              attributes: {\n                width: 100\n              }\n            }]\n          }\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"inverts cell content","suites":["Delta","invert"],"line":629,"updatePoint":{"line":629,"column":28,"index":13597},"code":"    it('inverts cell content', () => {\n      const base = new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'Hello 1:2'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              insert: {\n                id: '55555555'\n              }\n            }],\n            cells: {\n              '2:2': {\n                content: [{\n                  retain: 6\n                }, {\n                  insert: '2'\n                }, {\n                  delete: 1\n                }]\n              }\n            }\n          }\n        }\n      }]);\n      expect(change.invert(base)).toEqual(new Delta([{\n        retain: {\n          table: {\n            rows: [{\n              delete: 1\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  retain: 6\n                }, {\n                  insert: '1'\n                }, {\n                  delete: 1\n                }]\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"},{"name":"inverts cells removed by row/column delta","suites":["Delta","invert"],"line":707,"updatePoint":{"line":707,"column":49,"index":15301},"code":"    it('inverts cells removed by row/column delta', () => {\n      const base = new Delta([{\n        insert: {\n          table: {\n            rows: [{\n              insert: {\n                id: '11111111'\n              }\n            }, {\n              insert: {\n                id: '22222222'\n              }\n            }],\n            columns: [{\n              insert: {\n                id: '33333333'\n              }\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'content'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]);\n      const change = new Delta([{\n        retain: {\n          table: {\n            columns: [{\n              retain: 1\n            }, {\n              delete: 1\n            }]\n          }\n        }\n      }]);\n      expect(change.invert(base)).toEqual(new Delta([{\n        retain: {\n          table: {\n            columns: [{\n              retain: 1\n            }, {\n              insert: {\n                id: '44444444'\n              }\n            }],\n            cells: {\n              '1:2': {\n                content: [{\n                  insert: 'content'\n                }],\n                attributes: {\n                  align: 'center'\n                }\n              }\n            }\n          }\n        }\n      }]));\n    });","file":"unit/utils/delta.js","skipped":false,"dir":"test"}]}