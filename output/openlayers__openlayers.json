{"repo":"openlayers/openlayers","url":"https://github.com/openlayers/openlayers","branch":"main","configs":[{"package":"ol","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"returns the same for an array","suites":["ol.color","asArray()"],"updatePoint":{"line":4,"column":37,"index":224},"line":4,"code":"    it('returns the same for an array', function () {\n      const color = [1, 2, 3, 0.4];\n      const got = asArray(color);\n      expect(got).to.be(color);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"returns an array given an rgba string","suites":["ol.color","asArray()"],"updatePoint":{"line":9,"column":45,"index":396},"line":9,"code":"    it('returns an array given an rgba string', function () {\n      const color = asArray('rgba(1,2,3,0.4)');\n      expect(color).to.eql([1, 2, 3, 0.4]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"returns an array given an rgb string","suites":["ol.color","asArray()"],"updatePoint":{"line":13,"column":44,"index":557},"line":13,"code":"    it('returns an array given an rgb string', function () {\n      const color = asArray('rgb(1,2,3)');\n      expect(color).to.eql([1, 2, 3, 1]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"returns an array given a hex string","suites":["ol.color","asArray()"],"updatePoint":{"line":17,"column":43,"index":710},"line":17,"code":"    it('returns an array given a hex string', function () {\n      const color = asArray('#00ccff');\n      expect(color).to.eql([0, 204, 255, 1]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"returns an array given a hex string with alpha","suites":["ol.color","asArray()"],"updatePoint":{"line":21,"column":54,"index":875},"line":21,"code":"    it('returns an array given a hex string with alpha', function () {\n      const color = asArray('#00ccffb0');\n      expect(color).to.eql([0, 204, 255, 176 / 255]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"returns the same for a string","suites":["ol.color","asString()"],"updatePoint":{"line":27,"column":37,"index":1078},"line":27,"code":"    it('returns the same for a string', function () {\n      const color = 'rgba(0,1,2,0.3)';\n      const got = asString(color);\n      expect(got).to.be(color);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"returns a string given an rgba array","suites":["ol.color","asString()"],"updatePoint":{"line":32,"column":44,"index":1253},"line":32,"code":"    it('returns a string given an rgba array', function () {\n      const color = asString([1, 2, 3, 0.4]);\n      expect(color).to.eql('rgba(1,2,3,0.4)');\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"returns a string given an rgb array","suites":["ol.color","asString()"],"updatePoint":{"line":36,"column":43,"index":1414},"line":36,"code":"    it('returns a string given an rgb array', function () {\n      const color = asString([1, 2, 3]);\n      expect(color).to.eql('rgba(1,2,3,1)');\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"can parse 3-digit hex colors","suites":["ol.color","fromString()"],"updatePoint":{"line":42,"column":36,"index":1608},"line":42,"code":"    it('can parse 3-digit hex colors', function () {\n      expect(fromString('#087')).to.eql([0, 136, 119, 1]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"can parse 4-digit hex colors","suites":["ol.color","fromString()"],"updatePoint":{"line":45,"column":36,"index":1728},"line":45,"code":"    it('can parse 4-digit hex colors', function () {\n      expect(fromString('#0876')).to.eql([0, 136, 119, 102 / 255]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"can parse 6-digit hex colors","suites":["ol.color","fromString()"],"updatePoint":{"line":48,"column":36,"index":1857},"line":48,"code":"    it('can parse 6-digit hex colors', function () {\n      expect(fromString('#56789a')).to.eql([86, 120, 154, 1]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"can parse 8-digit hex colors","suites":["ol.color","fromString()"],"updatePoint":{"line":51,"column":36,"index":1981},"line":51,"code":"    it('can parse 8-digit hex colors', function () {\n      expect(fromString('#56789acc')).to.eql([86, 120, 154, 204 / 255]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"can parse rgb colors","suites":["ol.color","fromString()"],"updatePoint":{"line":54,"column":28,"index":2107},"line":54,"code":"    it('can parse rgb colors', function () {\n      expect(fromString('rgb(0, 0, 255)')).to.eql([0, 0, 255, 1]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"ignores whitespace before, between & after numbers (rgb)","suites":["ol.color","fromString()"],"updatePoint":{"line":57,"column":64,"index":2263},"line":57,"code":"    it('ignores whitespace before, between & after numbers (rgb)', function () {\n      expect(fromString('rgb( \\t 0  ,   0 \\n , 255  )')).to.eql([0, 0, 255, 1]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"can parse rgba colors","suites":["ol.color","fromString()"],"updatePoint":{"line":60,"column":29,"index":2398},"line":60,"code":"    it('can parse rgba colors', function () {\n      // opacity 0\n      expect(fromString('rgba(255, 255, 0, 0)')).to.eql([255, 255, 0, 0]);\n      // opacity 0.0 (simple float)\n      expect(fromString('rgba(255, 255, 0, 0.0)')).to.eql([255, 255, 0, 0]);\n      // opacity 0.0000000000000000 (float with 16 digits)\n      expect(fromString('rgba(255, 255, 0, 0.0000000000000000)')).to.eql([255, 255, 0, 0]);\n      // opacity 0.1 (simple float)\n      expect(fromString('rgba(255, 255, 0, 0.1)')).to.eql([255, 255, 0, 0.1]);\n      // opacity 0.1111111111111111 (float with 16 digits)\n      expect(fromString('rgba(255, 255, 0, 0.1111111111111111)')).to.eql([255, 255, 0, 0.1111111111111111]);\n      // opacity 1\n      expect(fromString('rgba(255, 255, 0, 1)')).to.eql([255, 255, 0, 1]);\n      // opacity 1.0\n      expect(fromString('rgba(255, 255, 0, 1.0)')).to.eql([255, 255, 0, 1]);\n      // opacity 1.0000000000000000\n      expect(fromString('rgba(255, 255, 0, 1.0000000000000000)')).to.eql([255, 255, 0, 1]);\n      // with 30 decimal digits\n      expect(fromString('rgba(255, 255, 0, 0.123456789012345678901234567890)')).to.eql([255, 255, 0, 0.12345678901234567890123456789]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"ignores whitespace before, between & after numbers (rgba)","suites":["ol.color","fromString()"],"updatePoint":{"line":80,"column":65,"index":3617},"line":80,"code":"    it('ignores whitespace before, between & after numbers (rgba)', function () {\n      expect(fromString('rgba( \\t 0  ,   0 \\n ,   255  ,   0.4711   )')).to.eql([0, 0, 255, 0.4711]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"throws an error on invalid colors","suites":["ol.color","fromString()"],"updatePoint":{"line":83,"column":41,"index":3785},"line":83,"code":"    it('throws an error on invalid colors', function () {\n      const invalidColors = ['tuesday', '#12345', '#1234567'];\n      let i, ii;\n      for (i = 0, ii = invalidColors.length; i < ii; ++i) {\n        expect(function () {\n          fromString(invalidColors[i]);\n        }).to.throwException();\n      }\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"clamps out-of-range channels","suites":["ol.color","normalize()"],"updatePoint":{"line":94,"column":36,"index":4141},"line":94,"code":"    it('clamps out-of-range channels', function () {\n      expect(normalize([-1, 256, 0, 2])).to.eql([0, 255, 0, 1]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"rounds color channels to integers","suites":["ol.color","normalize()"],"updatePoint":{"line":97,"column":41,"index":4272},"line":97,"code":"    it('rounds color channels to integers', function () {\n      expect(normalize([1.2, 2.5, 3.7, 1])).to.eql([1, 3, 4, 1]);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"converts valid colors","suites":["ol.color","toString()"],"updatePoint":{"line":102,"column":29,"index":4437},"line":102,"code":"    it('converts valid colors', function () {\n      expect(toString([1, 2, 3, 0.4])).to.be('rgba(1,2,3,0.4)');\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"rounds to integers if needed","suites":["ol.color","toString()"],"updatePoint":{"line":105,"column":36,"index":4563},"line":105,"code":"    it('rounds to integers if needed', function () {\n      expect(toString([1.2, 2.5, 3.7, 0.4])).to.be('rgba(1,3,4,0.4)');\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"sets default alpha value if undefined","suites":["ol.color","toString()"],"updatePoint":{"line":108,"column":45,"index":4704},"line":108,"code":"    it('sets default alpha value if undefined', function () {\n      expect(toString([0, 0, 0])).to.be('rgba(0,0,0,1)');\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"correctly detects valid colors","suites":["ol.color","isValid()"],"updatePoint":{"line":113,"column":38,"index":4869},"line":113,"code":"    it('correctly detects valid colors', function () {\n      expect(isStringColor('rgba(1,3,4,0.4)')).to.be(true);\n      expect(isStringColor('rgb(1,3,4)')).to.be(true);\n      expect(isStringColor('lightgreen')).to.be(true);\n      expect(isStringColor('yellow')).to.be(true);\n      expect(isStringColor('GREEN')).to.be(true);\n      expect(isStringColor('notacolor')).to.be(false);\n      expect(isStringColor('red_')).to.be(false);\n    });","file":"browser/spec/ol/color.test.js","skipped":false,"dir":"test"},{"name":"does not add duplicate attributions","suites":["ol.control.Attribution"],"updatePoint":{"line":64,"column":41,"index":1909},"line":64,"code":"  it('does not add duplicate attributions', function () {\n    map.renderSync();\n    const attribution = map.getTarget().querySelectorAll('.ol-attribution li');\n    expect(attribution.length).to.be(2);\n  });","file":"browser/spec/ol/control/attribution.test.js","skipped":false,"dir":"test"},{"name":"renders attributions as non-collapsible if source is configured with attributionsCollapsible set to false","suites":["ol.control.Attribution"],"updatePoint":{"line":69,"column":111,"index":2186},"line":69,"code":"  it('renders attributions as non-collapsible if source is configured with attributionsCollapsible set to false', function () {\n    map.getControls().clear();\n    map.addControl(new Attribution());\n    const source = new TileSource({\n      projection: 'EPSG:3857',\n      tileGrid: createXYZ(),\n      attributions: 'foo',\n      attributionsCollapsible: false\n    });\n    source.getTile = tileLoadFunction;\n    map.addLayer(new TileLayer({\n      source: source\n    }));\n    map.renderSync();\n    const attribution = map.getTarget().querySelectorAll('.ol-attribution.ol-uncollapsible');\n    expect(attribution.length).to.be(1);\n  });","file":"browser/spec/ol/control/attribution.test.js","skipped":false,"dir":"test"},{"name":"renders attributions as collapsible if configured with collapsible set to true","suites":["ol.control.Attribution"],"updatePoint":{"line":86,"column":84,"index":2790},"line":86,"code":"  it('renders attributions as collapsible if configured with collapsible set to true', function () {\n    map.getControls().clear();\n    map.addControl(new Attribution({\n      collapsible: true\n    }));\n    const source = new TileSource({\n      projection: 'EPSG:3857',\n      tileGrid: createXYZ(),\n      attributions: 'foo',\n      attributionsCollapsible: false\n    });\n    source.getTile = tileLoadFunction;\n    map.addLayer(new TileLayer({\n      source: source\n    }));\n    map.renderSync();\n    const attribution = map.getTarget().querySelectorAll('.ol-attribution.ol-uncollapsible');\n    expect(attribution.length).to.be(0);\n  });","file":"browser/spec/ol/control/attribution.test.js","skipped":false,"dir":"test"},{"name":"removes the control element from its parent","suites":["ol.control.Control","dispose"],"updatePoint":{"line":21,"column":51,"index":594},"line":21,"code":"    it('removes the control element from its parent', function () {\n      control.dispose();\n      expect(control.element.parentNode).to.be(null);\n    });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"sets `pointer-events: auto` for default target","suites":["element"],"updatePoint":{"line":28,"column":52,"index":794},"line":28,"code":"  it('sets `pointer-events: auto` for default target', function () {\n    const control = new Control({\n      element: document.createElement('div')\n    });\n    expect(control.element.style.pointerEvents).to.be('auto');\n  });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"does not set `pointer-events: auto` for custom target","suites":["element"],"updatePoint":{"line":34,"column":59,"index":1026},"line":34,"code":"  it('does not set `pointer-events: auto` for custom target', function () {\n    const control = new Control({\n      element: document.createElement('div'),\n      target: document.createElement('div')\n    });\n    expect(control.element.style.pointerEvents).to.be('');\n  });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"does not override `pointer-events` style","suites":["element"],"updatePoint":{"line":41,"column":46,"index":1286},"line":41,"code":"  it('does not override `pointer-events` style', function () {\n    const element = document.createElement('div');\n    element.style.pointerEvents = 'none';\n    const control = new Control({\n      element: element\n    });\n    expect(control.element.style.pointerEvents).to.be('none');\n  });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"transforms target from string to element","suites":["ol.control.Control's target","target as string or element"],"updatePoint":{"line":52,"column":48,"index":1692},"line":52,"code":"    it('transforms target from string to element', function () {\n      const target = document.createElement('div');\n      target.id = 'mycontrol';\n      document.body.appendChild(target);\n      const ctrl = new Control({\n        target: 'mycontrol'\n      });\n      expect(ctrl.target_.id).to.equal('mycontrol');\n      ctrl.dispose();\n      target.parentNode.removeChild(target);\n    });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"accepts element for target","suites":["ol.control.Control's target","target as string or element"],"updatePoint":{"line":63,"column":34,"index":2066},"line":63,"code":"    it('accepts element for target', function () {\n      const target = document.createElement('div');\n      target.id = 'mycontrol';\n      document.body.appendChild(target);\n      const ctrl = new Control({\n        target: target\n      });\n      expect(ctrl.target_.id).to.equal('mycontrol');\n      ctrl.dispose();\n      target.parentNode.removeChild(target);\n    });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"ignores non-existing target id","suites":["ol.control.Control's target","target as string or element"],"updatePoint":{"line":74,"column":38,"index":2439},"line":74,"code":"    it('ignores non-existing target id', function () {\n      const ctrl = new Control({\n        target: 'doesnotexist'\n      });\n      expect(ctrl.target_).to.equal(null);\n      ctrl.dispose();\n    });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"is the Control when the Control uses the default target","suites":["ol.control.Control's event target"],"updatePoint":{"line":84,"column":61,"index":2734},"line":84,"code":"  it('is the Control when the Control uses the default target', function (done) {\n    const ctrl = new Control({\n      element: document.createElement('div')\n    });\n    ctrl.on('test-event', function (e) {\n      expect(e.target).to.be(ctrl);\n      done();\n    });\n    ctrl.dispatchEvent('test-event');\n    ctrl.dispose();\n  });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"is the Control when the Control has a custom target","suites":["ol.control.Control's event target"],"updatePoint":{"line":95,"column":57,"index":3059},"line":95,"code":"  it('is the Control when the Control has a custom target', function (done) {\n    const ctrl = new Control({\n      element: document.createElement('div'),\n      target: document.createElement('div')\n    });\n    ctrl.on('test-event', function (e) {\n      expect(e.target).to.be(ctrl);\n      done();\n    });\n    ctrl.dispatchEvent('test-event');\n    ctrl.dispose();\n  });","file":"browser/spec/ol/control/control.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.control.FullScreen","constructor"],"updatePoint":{"line":4,"column":44,"index":203},"line":4,"code":"    it('can be constructed without arguments', function () {\n      const instance = new FullScreen();\n      expect(instance).to.be.an(FullScreen);\n    });","file":"browser/spec/ol/control/fullscreen.test.js","skipped":false,"dir":"test"},{"name":"is created with the default inactive classname set on the button","suites":["ol.control.FullScreen","the fullscreen button","when inactiveClassName is not set"],"updatePoint":{"line":11,"column":74,"index":508},"line":11,"code":"      it('is created with the default inactive classname set on the button', function () {\n        const instance = new FullScreen();\n        const button = instance.button_;\n        expect(button.className).to.equal('ol-full-screen-false');\n      });","file":"browser/spec/ol/control/fullscreen.test.js","skipped":false,"dir":"test"},{"name":"is created with the desired inactive classnames set on the button","suites":["ol.control.FullScreen","the fullscreen button","when inactiveClassName is set"],"updatePoint":{"line":18,"column":75,"index":829},"line":18,"code":"      it('is created with the desired inactive classnames set on the button', function () {\n        const instance = new FullScreen({\n          inactiveClassName: 'foo bar'\n        });\n        const button = instance.button_;\n        expect(button.className).to.equal('foo bar');\n      });","file":"browser/spec/ol/control/fullscreen.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol/control/MousePosition","constructor"],"updatePoint":{"line":8,"column":44,"index":474},"line":8,"code":"    it('can be constructed without arguments', function () {\n      const instance = new MousePosition();\n      expect(instance).to.be.an(MousePosition);\n      expect(instance.element.className).to.be('ol-mouse-position');\n    });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"creates the element with the provided class name","suites":["ol/control/MousePosition","constructor"],"updatePoint":{"line":13,"column":56,"index":716},"line":13,"code":"    it('creates the element with the provided class name', function () {\n      const className = 'foobar';\n      const instance = new MousePosition({\n        className: className\n      });\n      expect(instance.element.className).to.be(className);\n    });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"renders placeholder when mouse moves out","suites":["ol/control/MousePosition","configuration options","placeholder"],"updatePoint":{"line":60,"column":50,"index":2219},"line":60,"code":"      it('renders placeholder when mouse moves out', function () {\n        const ctrl = new MousePosition({\n          placeholder: 'some text'\n        });\n        ctrl.setMap(map);\n        map.renderSync();\n        const element = document.querySelector('.ol-mouse-position');\n        simulateEvent(EventType.POINTEROUT, width + 1, height + 1);\n        expect(element.innerHTML).to.be('some text');\n        simulateEvent(EventType.POINTERMOVE, 20, 30);\n        expect(element.innerHTML).to.be('20,-30');\n        simulateEvent(EventType.POINTEROUT, width + 1, height + 1);\n        expect(element.innerHTML).to.be('some text');\n      });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"renders the last posisition if placeholder is not set and mouse moves outside the viewport","suites":["ol/control/MousePosition","configuration options","placeholder"],"updatePoint":{"line":74,"column":100,"index":2905},"line":74,"code":"      it('renders the last posisition if placeholder is not set and mouse moves outside the viewport', function () {\n        const ctrl = new MousePosition();\n        ctrl.setMap(map);\n        map.renderSync();\n        const element = document.querySelector('.ol-mouse-position');\n        simulateEvent(EventType.POINTEROUT, width + 1, height + 1);\n        expect(element.innerHTML).to.be('&nbsp;');\n        target.dispatchEvent(new PointerEvent('pointermove'));\n        simulateEvent(EventType.POINTERMOVE, 20, 30);\n        expect(element.innerHTML).to.be('20,-30');\n        simulateEvent(EventType.POINTEROUT, width + 1, height + 1);\n        expect(element.innerHTML).to.be('20,-30');\n      });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"renders an empty space if placeholder is set to the same and mouse moves outside the viewport","suites":["ol/control/MousePosition","configuration options","placeholder"],"updatePoint":{"line":87,"column":103,"index":3605},"line":87,"code":"      it('renders an empty space if placeholder is set to the same and mouse moves outside the viewport', function () {\n        const ctrl = new MousePosition({\n          placeholder: ''\n        });\n        ctrl.setMap(map);\n        map.renderSync();\n        const element = document.querySelector('.ol-mouse-position');\n        simulateEvent(EventType.POINTEROUT, width + 1, height + 1);\n        expect(element.innerHTML).to.be('');\n        target.dispatchEvent(new PointerEvent('pointermove'));\n        simulateEvent(EventType.POINTERMOVE, 20, 30);\n        expect(element.innerHTML).to.be('20,-30');\n        simulateEvent(EventType.POINTEROUT, width + 1, height + 1);\n        expect(element.innerHTML).to.be('');\n      });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"can opt out of wrapX","suites":["ol/control/MousePosition","configuration options","placeholder"],"updatePoint":{"line":103,"column":28,"index":4263},"line":103,"code":"    it('can opt out of wrapX', function () {\n      const ctrl = new MousePosition({\n        wrapX: false\n      });\n      ctrl.setMap(map);\n      map.getView().setCenter([-360, 0]);\n      map.renderSync();\n      simulateEvent(EventType.POINTERMOVE, 0, 0);\n      expect(ctrl.element.innerHTML).to.be('-360,0');\n    });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"can wrapX","suites":["ol/control/MousePosition","configuration options","placeholder"],"updatePoint":{"line":113,"column":17,"index":4569},"line":113,"code":"    it('can wrapX', function () {\n      const ctrl = new MousePosition();\n      ctrl.setMap(map);\n      map.getView().setCenter([-360, 0]);\n      map.renderSync();\n      simulateEvent(EventType.POINTERMOVE, 0, 0);\n      expect(ctrl.element.innerHTML).to.be('0,0');\n    });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"can wrapX with projection","suites":["ol/control/MousePosition","configuration options","placeholder"],"updatePoint":{"line":121,"column":33,"index":4858},"line":121,"code":"    it('can wrapX with projection', function () {\n      const ctrl = new MousePosition({\n        projection: 'EPSG:4326'\n      });\n      map.setView(new View({\n        resolution: 1\n      }));\n      ctrl.setMap(map);\n      map.getView().setCenter(fromLonLat([-360, 0]));\n      map.renderSync();\n      simulateEvent(EventType.POINTERMOVE, 0, 0);\n      expect(ctrl.element.innerHTML).to.be('0,0');\n    });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"can wrapX with user projection","suites":["ol/control/MousePosition","configuration options","placeholder"],"updatePoint":{"line":134,"column":38,"index":5267},"line":134,"code":"    it('can wrapX with user projection', function () {\n      useGeographic();\n      const ctrl = new MousePosition({\n        projection: 'EPSG:4326'\n      });\n      map.setView(new View({\n        resolution: 1\n      }));\n      ctrl.setMap(map);\n      map.getView().setCenter([-360, 0]);\n      map.renderSync();\n      simulateEvent(EventType.POINTERMOVE, 0, 0);\n      expect(ctrl.element.innerHTML).to.be('0,0');\n    });","file":"browser/spec/ol/control/mouseposition.test.js","skipped":false,"dir":"test"},{"name":"creates an overview map with the default options","suites":["ol.control.OverviewMap","constructor"],"updatePoint":{"line":21,"column":56,"index":689},"line":21,"code":"    it('creates an overview map with the default options', function () {\n      const control = new OverviewMap();\n      expect(control).to.be.a(OverviewMap);\n      expect(control).to.be.a(Control);\n    });","file":"browser/spec/ol/control/overviewmap.test.js","skipped":false,"dir":"test"},{"name":"keeps ovmap view rotation in sync with map view rotation","suites":["ol.control.OverviewMap","setMap()"],"updatePoint":{"line":28,"column":64,"index":946},"line":28,"code":"    it('keeps ovmap view rotation in sync with map view rotation', function () {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: Math.PI / 2\n      });\n      map.setView(view);\n      const control = new OverviewMap({\n        rotateWithView: true\n      });\n      map.addControl(control);\n      const ovView = control.ovmap_.getView();\n      expect(ovView.getRotation()).to.be(Math.PI / 2);\n      view.setRotation(Math.PI / 4);\n      expect(ovView.getRotation()).to.be(Math.PI / 4);\n    });","file":"browser/spec/ol/control/overviewmap.test.js","skipped":false,"dir":"test"},{"name":"maintains rotation in sync if view added later","suites":["ol.control.OverviewMap","setMap()"],"updatePoint":{"line":44,"column":54,"index":1465},"line":44,"code":"    it('maintains rotation in sync if view added later', function () {\n      const control = new OverviewMap({\n        rotateWithView: true\n      });\n      map.addControl(control);\n      const ovInitialView = control.ovmap_.getView();\n      expect(ovInitialView.getRotation()).to.be(0);\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: Math.PI / 2\n      });\n      map.setView(view);\n      const ovView = control.ovmap_.getView();\n      expect(ovView.getRotation()).to.be(Math.PI / 2);\n      view.setRotation(Math.PI / 4);\n      expect(ovView.getRotation()).to.be(Math.PI / 4);\n    });","file":"browser/spec/ol/control/overviewmap.test.js","skipped":false,"dir":"test"},{"name":"stops listening to old maps","suites":["ol.control.OverviewMap","setMap()"],"updatePoint":{"line":62,"column":35,"index":2071},"line":62,"code":"    it('stops listening to old maps', function () {\n      const control = new OverviewMap({\n        rotateWithView: true\n      });\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: 0\n      });\n      map.setView(view);\n      map.addControl(control);\n      const ovView = control.ovmap_.getView();\n      view.setRotation(Math.PI / 8);\n      expect(ovView.getRotation()).to.be(Math.PI / 8);\n      map.removeControl(control);\n      view.setRotation(Math.PI / 4);\n      expect(ovView.getRotation()).to.be(Math.PI / 8);\n    });","file":"browser/spec/ol/control/overviewmap.test.js","skipped":false,"dir":"test"},{"name":"reflects projection change of main map","suites":["ol.control.OverviewMap","setMap()"],"updatePoint":{"line":80,"column":46,"index":2643},"line":80,"code":"    it('reflects projection change of main map', function () {\n      const control = new OverviewMap({\n        rotateWithView: true\n      });\n      map.addControl(control);\n      expect(control.ovmap_.getView().getProjection().getCode()).to.be('EPSG:3857');\n      map.setView(new View({\n        projection: 'EPSG:4326'\n      }));\n      expect(control.ovmap_.getView().getProjection().getCode()).to.be('EPSG:4326');\n    });","file":"browser/spec/ol/control/overviewmap.test.js","skipped":false,"dir":"test"},{"name":"retains explicitly set view","suites":["ol.control.OverviewMap","setMap()"],"updatePoint":{"line":91,"column":35,"index":3055},"line":91,"code":"    it('retains explicitly set view', function () {\n      const overviewMapView = new View();\n      const control = new OverviewMap({\n        rotateWithView: true,\n        view: overviewMapView\n      });\n      map.addControl(control);\n      expect(control.ovmap_.getView()).to.be(overviewMapView);\n      expect(control.ovmap_.getView().getProjection().getCode()).to.be('EPSG:3857');\n      map.setView(new View({\n        projection: 'EPSG:4326'\n      }));\n      expect(control.ovmap_.getView()).to.be(overviewMapView);\n      expect(control.ovmap_.getView().getProjection().getCode()).to.be('EPSG:3857');\n    });","file":"browser/spec/ol/control/overviewmap.test.js","skipped":false,"dir":"test"},{"name":"set target to null","suites":["ol.control.OverviewMap","setMap()"],"updatePoint":{"line":106,"column":26,"index":3657},"line":106,"code":"    it('set target to null', function () {\n      const control = new OverviewMap();\n      map.addControl(control);\n      expect(control.ovmap_.getTarget()).not.to.be(null);\n      map.removeControl(control);\n      expect(control.ovmap_.getTarget()).to.be(null);\n    });","file":"browser/spec/ol/control/overviewmap.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.control.Rotate","constructor"],"updatePoint":{"line":4,"column":44,"index":191},"line":4,"code":"    it('can be constructed without arguments', function () {\n      const instance = new Rotate();\n      expect(instance).to.be.an(Rotate);\n    });","file":"browser/spec/ol/control/rotate.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.control.ScaleLine","constructor"],"updatePoint":{"line":23,"column":44,"index":834},"line":23,"code":"    it('can be constructed without arguments', function () {\n      const ctrl = new ScaleLine();\n      expect(ctrl).to.be.an(ScaleLine);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"defaults to \"ol-scale-line\"","suites":["ol.control.ScaleLine","configuration options","className"],"updatePoint":{"line":30,"column":37,"index":1068},"line":30,"code":"      it('defaults to \"ol-scale-line\"', function () {\n        const ctrl = new ScaleLine();\n        ctrl.setMap(map);\n        const element = document.querySelector('.ol-scale-line');\n        expect(element).to.not.be(null);\n        expect(element).to.be.a(HTMLDivElement);\n      });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"can be configured","suites":["ol.control.ScaleLine","configuration options","className"],"updatePoint":{"line":37,"column":27,"index":1342},"line":37,"code":"      it('can be configured', function () {\n        const ctrl = new ScaleLine({\n          className: 'humpty-dumpty'\n        });\n        ctrl.setMap(map);\n\n        // check that the default was not chosen\n        const element1 = document.querySelector('.ol-scale-line');\n        expect(element1).to.be(null);\n        // check if the configured classname was chosen\n        const element2 = document.querySelector('.humpty-dumpty');\n        expect(element2).to.not.be(null);\n        expect(element2).to.be.a(HTMLDivElement);\n      });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"defaults to 64","suites":["ol.control.ScaleLine","configuration options","minWidth"],"updatePoint":{"line":53,"column":24,"index":1922},"line":53,"code":"      it('defaults to 64', function () {\n        const ctrl = new ScaleLine();\n        expect(ctrl.minWidth_).to.be(64);\n      });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"can be configured","suites":["ol.control.ScaleLine","configuration options","minWidth"],"updatePoint":{"line":57,"column":27,"index":2056},"line":57,"code":"      it('can be configured', function () {\n        const ctrl = new ScaleLine({\n          minWidth: 4711\n        });\n        expect(ctrl.minWidth_).to.be(4711);\n      });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"defaults to undefined","suites":["ol.control.ScaleLine","configuration options","maxWidth"],"updatePoint":{"line":65,"column":31,"index":2279},"line":65,"code":"      it('defaults to undefined', function () {\n        const ctrl = new ScaleLine();\n        expect(ctrl.maxWidth_).to.be(undefined);\n      });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"can be configured","suites":["ol.control.ScaleLine","configuration options","maxWidth"],"updatePoint":{"line":69,"column":27,"index":2420},"line":69,"code":"      it('can be configured', function () {\n        const ctrl = new ScaleLine({\n          maxWidth: 4711\n        });\n        expect(ctrl.maxWidth_).to.be(4711);\n      });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"defaults to `ol.control.ScaleLine.render`","suites":["ol.control.ScaleLine","configuration options","render"],"updatePoint":{"line":77,"column":51,"index":2661},"line":77,"code":"      it('defaults to `ol.control.ScaleLine.render`', function () {\n        const ctrl = new ScaleLine();\n        expect(ctrl.render).to.be(ScaleLine.prototype.render);\n      });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"can be configured","suites":["ol.control.ScaleLine","configuration options","render"],"updatePoint":{"line":81,"column":27,"index":2816},"line":81,"code":"      it('can be configured', function () {\n        const myRender = function () {};\n        const ctrl = new ScaleLine({\n          render: myRender\n        });\n        expect(ctrl.render).to.be(myRender);\n      });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"calls `render` as soon as the map is rendered","suites":["ol.control.ScaleLine","synchronisation with map view"],"updatePoint":{"line":91,"column":53,"index":3130},"line":91,"code":"    it('calls `render` as soon as the map is rendered', function (done) {\n      const renderSpy = sinon.spy();\n      const ctrl = new ScaleLine({\n        render: renderSpy\n      });\n      expect(renderSpy.called).to.be(false);\n      ctrl.setMap(map);\n      expect(renderSpy.called).to.be(false);\n      map.setView(new View({\n        center: [0, 0],\n        zoom: 0\n      }));\n      expect(renderSpy.called).to.be(false);\n      map.once('postrender', function () {\n        expect(renderSpy.called).to.be(true);\n        expect(renderSpy.callCount).to.be(1);\n        done();\n      });\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"calls `render` as often as the map is rendered","suites":["ol.control.ScaleLine","synchronisation with map view"],"updatePoint":{"line":110,"column":54,"index":3721},"line":110,"code":"    it('calls `render` as often as the map is rendered', function () {\n      const renderSpy = sinon.spy();\n      const ctrl = new ScaleLine({\n        render: renderSpy\n      });\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [0, 0],\n        zoom: 0\n      }));\n      map.renderSync();\n      expect(renderSpy.callCount).to.be(1);\n      map.renderSync();\n      expect(renderSpy.callCount).to.be(2);\n      map.renderSync();\n      expect(renderSpy.callCount).to.be(3);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"calls `render` as when the view changes","suites":["ol.control.ScaleLine","synchronisation with map view"],"updatePoint":{"line":127,"column":47,"index":4209},"line":127,"code":"    it('calls `render` as when the view changes', function (done) {\n      const renderSpy = sinon.spy();\n      const ctrl = new ScaleLine({\n        render: renderSpy\n      });\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [0, 0],\n        zoom: 0\n      }));\n      map.renderSync();\n      map.once('postrender', function () {\n        expect(renderSpy.callCount).to.be(2);\n        done();\n      });\n      map.getView().setCenter([1, 1]);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"updates the rendered text","suites":["ol.control.ScaleLine","static method `render`"],"updatePoint":{"line":146,"column":33,"index":4718},"line":146,"code":"    it('updates the rendered text', function () {\n      const ctrl = new ScaleLine();\n      expect(ctrl.element.innerText).to.be('');\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [0, 0],\n        multiWorld: true,\n        zoom: 0\n      }));\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('10000 km');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"returns \"metric\" by default","suites":["ol.control.ScaleLine","#getUnits"],"updatePoint":{"line":160,"column":35,"index":5116},"line":160,"code":"    it('returns \"metric\" by default', function () {\n      const ctrl = new ScaleLine();\n      expect(ctrl.getUnits()).to.be('metric');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"returns what is configured via `units` property","suites":["ol.control.ScaleLine","#getUnits"],"updatePoint":{"line":164,"column":55,"index":5279},"line":164,"code":"    it('returns what is configured via `units` property', function () {\n      const ctrl = new ScaleLine({\n        units: 'nautical'\n      });\n      expect(ctrl.getUnits()).to.be('nautical');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"returns what is configured `setUnits` method","suites":["ol.control.ScaleLine","#getUnits"],"updatePoint":{"line":170,"column":52,"index":5476},"line":170,"code":"    it('returns what is configured `setUnits` method', function () {\n      const ctrl = new ScaleLine();\n      ctrl.setUnits('nautical');\n      expect(ctrl.getUnits()).to.be('nautical');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"triggers rerendering","suites":["ol.control.ScaleLine","#setUnits"],"updatePoint":{"line":177,"column":28,"index":5691},"line":177,"code":"    it('triggers rerendering', function () {\n      const ctrl = new ScaleLine();\n      map.setView(new View({\n        center: [0, 0],\n        multiWorld: true,\n        zoom: 0\n      }));\n      ctrl.setMap(map);\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('10000 km');\n      ctrl.setUnits('nautical');\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('10000 NM');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"renders a scaleline for \"metric\"","suites":["ol.control.ScaleLine","different units result in different contents"],"updatePoint":{"line":215,"column":40,"index":6690},"line":215,"code":"    it('renders a scaleline for \"metric\"', function () {\n      expect(metricHtml).to.not.be(undefined);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"renders a different scaleline for \"nautical\"","suites":["ol.control.ScaleLine","different units result in different contents"],"updatePoint":{"line":218,"column":52,"index":6814},"line":218,"code":"    it('renders a different scaleline for \"nautical\"', function () {\n      ctrl.setUnits('nautical');\n      nauticalHtml = ctrl.element.innerHTML;\n      expect(nauticalHtml).to.not.be(metricHtml);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"renders a different scaleline for \"degrees\"","suites":["ol.control.ScaleLine","different units result in different contents"],"updatePoint":{"line":223,"column":51,"index":7018},"line":223,"code":"    it('renders a different scaleline for \"degrees\"', function () {\n      ctrl.setUnits('degrees');\n      degreesHtml = ctrl.element.innerHTML;\n      expect(degreesHtml).to.not.be(metricHtml);\n      expect(degreesHtml).to.not.be(nauticalHtml);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"renders a different scaleline for \"imperial\"","suites":["ol.control.ScaleLine","different units result in different contents"],"updatePoint":{"line":229,"column":52,"index":7271},"line":229,"code":"    it('renders a different scaleline for \"imperial\"', function () {\n      ctrl.setUnits('imperial');\n      imperialHtml = ctrl.element.innerHTML;\n      expect(imperialHtml).to.not.be(metricHtml);\n      expect(imperialHtml).to.not.be(nauticalHtml);\n      expect(imperialHtml).to.not.be(degreesHtml);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"renders a different scaleline for \"us\"","suites":["ol.control.ScaleLine","different units result in different contents"],"updatePoint":{"line":236,"column":46,"index":7573},"line":236,"code":"    it('renders a different scaleline for \"us\"', function () {\n      ctrl.setUnits('us');\n      usHtml = ctrl.element.innerHTML;\n      expect(usHtml).to.not.be(metricHtml);\n      expect(usHtml).to.not.be(nauticalHtml);\n      expect(usHtml).to.not.be(degreesHtml);\n      // it's hard to actually find a difference in rendering between\n      // usHtml and imperialHtml\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"is rendered differently for different projections","suites":["ol.control.ScaleLine","projections affect the scaleline"],"updatePoint":{"line":256,"column":57,"index":8683},"line":256,"code":"    it('is rendered differently for different projections', function () {\n      const ctrl = new ScaleLine();\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: fromLonLat([7, 52]),\n        zoom: 2,\n        projection: 'EPSG:3857'\n      }));\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('2000 km');\n      map.setView(new View({\n        center: [7, 52],\n        multiWorld: true,\n        zoom: 2,\n        projection: 'EPSG:4326'\n      }));\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('5000 km');\n      map.setView(new View({\n        center: fromLonLat([-85.685, 39.891], 'Indiana-East'),\n        zoom: 7,\n        projection: 'Indiana-East'\n      }));\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('100 km');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"maxWidth is applied correctly","suites":["ol.control.ScaleLine","projections affect the scaleline"],"updatePoint":{"line":282,"column":37,"index":9462},"line":282,"code":"    it('maxWidth is applied correctly', function () {\n      const ctrl = new ScaleLine({\n        maxWidth: 50\n      });\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: fromLonLat([-85.685, 39.891], 'Indiana-East'),\n        zoom: 7,\n        projection: 'Indiana-East'\n      }));\n      map.renderSync();\n      // without maxWidth set this would be 100 km\n      expect(ctrl.element.innerText).to.be('50 km');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"shows the same scale for different projections at higher resolutions","suites":["ol.control.ScaleLine","projections affect the scaleline"],"updatePoint":{"line":296,"column":76,"index":9936},"line":296,"code":"    it('shows the same scale for different projections at higher resolutions', function () {\n      const ctrl = new ScaleLine();\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: fromLonLat([-85.685, 39.891]),\n        zoom: 7,\n        projection: 'EPSG:3857'\n      }));\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('100 km');\n      map.setView(new View({\n        center: [-85.685, 39.891],\n        zoom: 7,\n        projection: 'EPSG:4326'\n      }));\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('100 km');\n      map.setView(new View({\n        center: fromLonLat([-85.685, 39.891], 'Indiana-East'),\n        zoom: 7,\n        projection: 'Indiana-East'\n      }));\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('100 km');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"Projection's metersPerUnit affect scale for non-degree units","suites":["ol.control.ScaleLine","projections affect the scaleline"],"updatePoint":{"line":321,"column":68,"index":10738},"line":321,"code":"    it(\"Projection's metersPerUnit affect scale for non-degree units\", function () {\n      const ctrl = new ScaleLine();\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [0, 0],\n        zoom: 0,\n        resolutions: [1],\n        projection: new Projection({\n          code: 'METERS',\n          units: 'm',\n          getPointResolution: function (r) {\n            return r;\n          }\n        })\n      }));\n      map.renderSync();\n      ctrl.setUnits('metric');\n      expect(ctrl.element.innerText).to.be('100 m');\n      ctrl.setUnits('imperial');\n      expect(ctrl.element.innerText).to.be('500 ft');\n      ctrl.setUnits('nautical');\n      expect(ctrl.element.innerText).to.be('0.05 NM');\n      ctrl.setUnits('us');\n      expect(ctrl.element.innerText).to.be('500 ft');\n      map.setView(new View({\n        center: [0, 0],\n        zoom: 0,\n        resolutions: [1],\n        projection: new Projection({\n          code: 'PIXELS',\n          units: 'pixels',\n          metersPerUnit: 1 / 1000,\n          getPointResolution: function (r) {\n            return r;\n          }\n        })\n      }));\n      map.renderSync();\n      ctrl.setUnits('metric');\n      expect(ctrl.element.innerText).to.be('100 mm');\n      ctrl.setUnits('imperial');\n      expect(ctrl.element.innerText).to.be('5 in');\n      ctrl.setUnits('nautical');\n      expect(ctrl.element.innerText).to.be('0.00005 NM');\n      ctrl.setUnits('us');\n      expect(ctrl.element.innerText).to.be('5 in');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"Metric display works with Geographic (EPSG:4326) projection","suites":["ol.control.ScaleLine","projections affect the scaleline"],"updatePoint":{"line":368,"column":67,"index":12222},"line":368,"code":"    it('Metric display works with Geographic (EPSG:4326) projection', function () {\n      const ctrl = new ScaleLine();\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [0, 0],\n        multiWorld: true,\n        zoom: 0 /* min zoom */,\n        projection: 'EPSG:4326'\n      }));\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('10000 km');\n      map.getView().setZoom(28); /* max zoom */\n      map.renderSync();\n      expect(ctrl.element.innerText).to.be('50 mm');\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"is rendered differently at different latitudes for metric","suites":["ol.control.ScaleLine","latitude may affect scale line in EPSG:4326"],"updatePoint":{"line":385,"column":65,"index":12809},"line":385,"code":"    it('is rendered differently at different latitudes for metric', function () {\n      const ctrl = new ScaleLine();\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [7, 0],\n        zoom: 2,\n        projection: 'EPSG:4326'\n      }));\n      map.renderSync();\n      const innerHtml0 = ctrl.element.innerHTML;\n      map.getView().setCenter([7, 52]);\n      map.renderSync();\n      const innerHtml52 = ctrl.element.innerHTML;\n      expect(innerHtml0).to.not.be(innerHtml52);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"is rendered the same at different latitudes for degrees","suites":["ol.control.ScaleLine","latitude may affect scale line in EPSG:4326"],"updatePoint":{"line":400,"column":63,"index":13306},"line":400,"code":"    it('is rendered the same at different latitudes for degrees', function () {\n      const ctrl = new ScaleLine({\n        units: 'degrees'\n      });\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [7, 0],\n        zoom: 2,\n        projection: 'EPSG:4326',\n        multiWorld: true\n      }));\n      map.renderSync();\n      const innerHtml0 = ctrl.element.innerHTML;\n      map.getView().setCenter([7, 52]);\n      map.renderSync();\n      const innerHtml52 = ctrl.element.innerHTML;\n      expect(innerHtml0).to.be(innerHtml52);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"metric: is rendered differently for different zoomlevels","suites":["ol.control.ScaleLine","zoom affects the scaleline"],"updatePoint":{"line":465,"column":64,"index":14863},"line":465,"code":"    it('metric: is rendered differently for different zoomlevels', function () {\n      ctrl.setUnits('metric');\n      map.renderSync();\n      renderedHtmls[ctrl.element.innerHTML] = true;\n      while (--currentZoom >= 0) {\n        mapView.setZoom(currentZoom);\n        map.renderSync();\n        const currentHtml = ctrl.element.innerHTML;\n        expect(currentHtml in renderedHtmls).to.be(false);\n        renderedHtmls[currentHtml] = true;\n        const unit = ctrl.innerElement_.textContent.match(/\\d+ (.+)/)[1];\n        expect(unit).to.eql(getMetricUnit(currentZoom));\n      }\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"degrees: is rendered differently for different zoomlevels","suites":["ol.control.ScaleLine","zoom affects the scaleline"],"updatePoint":{"line":479,"column":65,"index":15452},"line":479,"code":"    it('degrees: is rendered differently for different zoomlevels', function () {\n      ctrl.setUnits('degrees');\n      map.renderSync();\n      renderedHtmls[ctrl.element.innerHTML] = true;\n      while (--currentZoom >= 0) {\n        mapView.setZoom(currentZoom);\n        map.renderSync();\n        const currentHtml = ctrl.element.innerHTML;\n        expect(currentHtml in renderedHtmls).to.be(false);\n        renderedHtmls[currentHtml] = true;\n      }\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"imperial: is rendered differently for different zoomlevels","suites":["ol.control.ScaleLine","zoom affects the scaleline"],"updatePoint":{"line":491,"column":66,"index":15912},"line":491,"code":"    it('imperial: is rendered differently for different zoomlevels', function () {\n      ctrl.setUnits('imperial');\n      map.renderSync();\n      renderedHtmls[ctrl.element.innerHTML] = true;\n      while (--currentZoom >= 0) {\n        mapView.setZoom(currentZoom);\n        map.renderSync();\n        const currentHtml = ctrl.element.innerHTML;\n        expect(currentHtml in renderedHtmls).to.be(false);\n        renderedHtmls[currentHtml] = true;\n        const unit = ctrl.innerElement_.textContent.match(/\\d+ (.+)/)[1];\n        expect(unit).to.eql(getImperialUnit(currentZoom));\n      }\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"nautical: is rendered differently for different zoomlevels","suites":["ol.control.ScaleLine","zoom affects the scaleline"],"updatePoint":{"line":505,"column":66,"index":16506},"line":505,"code":"    it('nautical: is rendered differently for different zoomlevels', function () {\n      ctrl.setUnits('nautical');\n      map.renderSync();\n      renderedHtmls[ctrl.element.innerHTML] = true;\n      while (--currentZoom >= 0) {\n        mapView.setZoom(currentZoom);\n        map.renderSync();\n        const currentHtml = ctrl.element.innerHTML;\n        expect(currentHtml in renderedHtmls).to.be(false);\n        renderedHtmls[currentHtml] = true;\n      }\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"us: is rendered differently for different zoomlevels","suites":["ol.control.ScaleLine","zoom affects the scaleline"],"updatePoint":{"line":517,"column":60,"index":16961},"line":517,"code":"    it('us: is rendered differently for different zoomlevels', function () {\n      ctrl.setUnits('us');\n      map.renderSync();\n      renderedHtmls[ctrl.element.innerHTML] = true;\n      while (--currentZoom >= 0) {\n        mapView.setZoom(currentZoom);\n        map.renderSync();\n        const currentHtml = ctrl.element.innerHTML;\n        expect(currentHtml in renderedHtmls).to.be(false);\n        renderedHtmls[currentHtml] = true;\n      }\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"it corresponds to the resolution","suites":["ol.control.ScaleLine","scalebar text"],"updatePoint":{"line":531,"column":40,"index":17438},"line":531,"code":"    it('it corresponds to the resolution', function () {\n      const ctrl = new ScaleLine({\n        bar: true,\n        text: true\n      });\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [0, 0],\n        zoom: 2,\n        multiWorld: true\n      }));\n      map.renderSync();\n      const element = document.querySelector('.ol-scale-text');\n      expect(element).to.not.be(null);\n      expect(element).to.be.a(HTMLDivElement);\n      const text = element.innerText;\n      expect(text.slice(0, 4)).to.be('1 : ');\n      expect(text.replace(/^1|\\D/g, '')).to.eql(139770566);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"it changes with latitude","suites":["ol.control.ScaleLine","scalebar text"],"updatePoint":{"line":550,"column":32,"index":18026},"line":550,"code":"    it('it changes with latitude', function () {\n      const ctrl = new ScaleLine({\n        bar: true,\n        text: true\n      });\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: fromLonLat([0, 60]),\n        zoom: 2,\n        multiWorld: true\n      }));\n      map.renderSync();\n      const element = document.querySelector('.ol-scale-text');\n      expect(element).to.not.be(null);\n      expect(element).to.be.a(HTMLDivElement);\n      const text = element.innerText;\n      expect(text.slice(0, 4)).to.be('1 : ');\n      expect(text.replace(/^1|\\D/g, '')).to.eql(69885283);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"it corresponds to the resolution in EPSG:4326","suites":["ol.control.ScaleLine","scalebar text"],"updatePoint":{"line":569,"column":53,"index":18647},"line":569,"code":"    it('it corresponds to the resolution in EPSG:4326', function () {\n      const ctrl = new ScaleLine({\n        bar: true,\n        text: true\n      });\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [0, 0],\n        zoom: 2,\n        multiWorld: true,\n        projection: 'EPSG:4326'\n      }));\n      map.renderSync();\n      const element = document.querySelector('.ol-scale-text');\n      expect(element).to.not.be(null);\n      expect(element).to.be.a(HTMLDivElement);\n      const text = element.innerText;\n      expect(text.slice(0, 4)).to.be('1 : ');\n      expect(text.replace(/^1|\\D/g, '')).to.eql(139614359);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"it changes with latitude in EPSG:4326","suites":["ol.control.ScaleLine","scalebar text"],"updatePoint":{"line":589,"column":45,"index":19281},"line":589,"code":"    it('it changes with latitude in EPSG:4326', function () {\n      const ctrl = new ScaleLine({\n        bar: true,\n        text: true\n      });\n      ctrl.setMap(map);\n      map.setView(new View({\n        center: [0, 60],\n        zoom: 2,\n        multiWorld: true,\n        projection: 'EPSG:4326'\n      }));\n      map.renderSync();\n      const element = document.querySelector('.ol-scale-text');\n      expect(element).to.not.be(null);\n      expect(element).to.be.a(HTMLDivElement);\n      const text = element.innerText;\n      expect(text.slice(0, 4)).to.be('1 : ');\n      expect(text.replace(/^1|\\D/g, '')).to.eql(104710728);\n    });","file":"browser/spec/ol/control/scaleline.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.control.Zoom","constructor"],"updatePoint":{"line":4,"column":44,"index":185},"line":4,"code":"    it('can be constructed without arguments', function () {\n      const instance = new Zoom();\n      expect(instance).to.be.an(Zoom);\n    });","file":"browser/spec/ol/control/zoom.test.js","skipped":false,"dir":"test"},{"name":"creates the expected DOM elements","suites":["ol.control.ZoomSlider","DOM creation"],"updatePoint":{"line":37,"column":41,"index":1307},"line":37,"code":"    it('creates the expected DOM elements', function () {\n      const zoomSliderContainers = target.querySelectorAll('.ol-zoomslider');\n      expect(zoomSliderContainers.length).to.be(1);\n      const zoomSliderContainer = zoomSliderContainers[0];\n      expect(zoomSliderContainer instanceof HTMLDivElement).to.be(true);\n      let hasUnselectableCls = zoomSliderContainer.classList.contains('ol-unselectable');\n      expect(hasUnselectableCls).to.be(true);\n      const zoomSliderThumbs = zoomSliderContainer.querySelectorAll('.ol-zoomslider-thumb');\n      expect(zoomSliderThumbs.length).to.be(1);\n      const zoomSliderThumb = zoomSliderThumbs[0];\n      expect(zoomSliderThumb instanceof HTMLButtonElement).to.be(true);\n      hasUnselectableCls = zoomSliderThumb.classList.contains('ol-unselectable');\n      expect(hasUnselectableCls).to.be(true);\n    });","file":"browser/spec/ol/control/zoomslider.test.js","skipped":false,"dir":"test"},{"name":"sets limits","suites":["ol.control.ZoomSlider","#initSlider_"],"updatePoint":{"line":53,"column":19,"index":2188},"line":53,"code":"    it('sets limits', function () {\n      zoomslider.initSlider_();\n      expect(zoomslider.widthLimit_).not.to.be(0);\n      expect(zoomslider.heightLimit_).to.be(0);\n    });","file":"browser/spec/ol/control/zoomslider.test.js","skipped":false,"dir":"test"},{"name":"is horizontal for wide containers","suites":["ol.control.ZoomSlider","#direction_"],"updatePoint":{"line":60,"column":41,"index":2431},"line":60,"code":"    it('is horizontal for wide containers', function () {\n      const control = new ZoomSlider({});\n      control.element.style.width = '1000px';\n      control.element.style.height = '10px';\n      control.setMap(map);\n      control.initSlider_();\n      const horizontal = 1;\n      expect(control.direction_).to.be(horizontal);\n      control.dispose();\n    });","file":"browser/spec/ol/control/zoomslider.test.js","skipped":false,"dir":"test"},{"name":"is vertical for tall containers","suites":["ol.control.ZoomSlider","#direction_"],"updatePoint":{"line":70,"column":39,"index":2789},"line":70,"code":"    it('is vertical for tall containers', function () {\n      const control = new ZoomSlider({});\n      control.element.style.width = '10px';\n      control.element.style.height = '1000px';\n      control.setMap(map);\n      const vertical = 0;\n      expect(control.direction_).to.be(vertical);\n      control.dispose();\n    });","file":"browser/spec/ol/control/zoomslider.test.js","skipped":false,"dir":"test"},{"name":"[horizontal] handles a drag sequence","suites":["ol.control.ZoomSlider","Pointer event handling"],"updatePoint":{"line":94,"column":44,"index":3485},"line":94,"code":"    it('[horizontal] handles a drag sequence', function () {\n      document.createElement = createEventElement;\n      const control = new ZoomSlider();\n      map.addControl(control);\n      document.createElement = createElement;\n      map.getView().setZoom(0);\n      control.element.style.width = '500px';\n      control.element.style.height = '10px';\n      control.element.firstChild.style.width = '100px';\n      control.element.firstChild.style.height = '10px';\n      map.renderSync();\n      const event = new Event();\n      event.type = 'pointerdown', event.target = control.element.firstElementChild;\n      event.clientX = control.widthLimit_;\n      event.clientY = 0;\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(16);\n      expect(control.dragging_).to.be(true);\n      expect(control.dragListenerKeys_.length).to.be(2);\n      event.type = 'pointermove';\n      event.clientX = 6 * control.widthLimit_ / 8;\n      event.clientY = 0;\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(4);\n      event.type = 'pointermove';\n      event.clientX = 4 * control.widthLimit_ / 8;\n      event.clientY = 0;\n      control.element.dispatchEvent(event);\n      event.type = 'pointerup';\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(1);\n      expect(control.dragListenerKeys_.length).to.be(0);\n      expect(control.dragging_).to.be(false);\n    });","file":"browser/spec/ol/control/zoomslider.test.js","skipped":false,"dir":"test"},{"name":"[horizontal] handles a drag sequence ending outside its bounds","suites":["ol.control.ZoomSlider","Pointer event handling"],"updatePoint":{"line":128,"column":70,"index":4978},"line":128,"code":"    it('[horizontal] handles a drag sequence ending outside its bounds', function () {\n      document.createElement = createEventElement;\n      const control = new ZoomSlider();\n      map.addControl(control);\n      document.createElement = createElement;\n      map.getView().setZoom(0);\n      control.element.style.width = '500px';\n      control.element.style.height = '10px';\n      control.element.firstChild.style.width = '100px';\n      control.element.firstChild.style.height = '10px';\n      map.renderSync();\n      const event = new Event();\n      event.type = 'pointerdown';\n      event.target = control.element.firstElementChild;\n      event.clientX = control.widthLimit_;\n      event.clientY = 0;\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(16);\n      expect(control.dragging_).to.be(true);\n      expect(control.dragListenerKeys_.length).to.be(2);\n      event.type = 'pointermove';\n      event.clientX = 6 * control.widthLimit_ / 8;\n      event.clientY = 0;\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(4);\n      event.type = 'pointermove';\n      event.clientX = 12 * control.widthLimit_ / 8;\n      event.clientY = 0;\n      control.element.dispatchEvent(event);\n      event.type = 'pointerup';\n      event.target = 'document';\n      control.element.dispatchEvent(event);\n      expect(control.dragListenerKeys_.length).to.be(0);\n      expect(control.dragging_).to.be(false);\n      expect(control.currentResolution_).to.be(16);\n    });","file":"browser/spec/ol/control/zoomslider.test.js","skipped":false,"dir":"test"},{"name":"[vertical] handles a drag sequence","suites":["ol.control.ZoomSlider","Pointer event handling"],"updatePoint":{"line":164,"column":42,"index":6484},"line":164,"code":"    it('[vertical] handles a drag sequence', function () {\n      document.createElement = createEventElement;\n      const control = new ZoomSlider();\n      control.element.style.width = '10px';\n      control.element.style.height = '100px';\n      control.element.firstChild.style.width = '10px';\n      control.element.firstChild.style.height = '20px';\n      map.addControl(control);\n      document.createElement = createElement;\n      map.getView().setZoom(8);\n      map.renderSync();\n      const event = new Event();\n      event.type = 'pointerdown';\n      event.target = control.element.firstElementChild;\n      event.clientX = 0;\n      event.clientY = 0;\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(0.0625);\n      expect(control.dragging_).to.be(true);\n      expect(control.dragListenerKeys_.length).to.be(2);\n      event.type = 'pointermove';\n      event.clientX = 0;\n      event.clientY = 2 * control.heightLimit_ / 8;\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(0.25);\n      event.type = 'pointermove';\n      event.clientX = 0;\n      event.clientY = 4 * control.heightLimit_ / 8;\n      control.element.dispatchEvent(event);\n      event.type = 'pointerup';\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(1);\n      expect(control.dragListenerKeys_.length).to.be(0);\n      expect(control.dragging_).to.be(false);\n    });","file":"browser/spec/ol/control/zoomslider.test.js","skipped":false,"dir":"test"},{"name":"[vertical] handles a drag sequence ending outside its bounds","suites":["ol.control.ZoomSlider","Pointer event handling"],"updatePoint":{"line":199,"column":68,"index":7971},"line":199,"code":"    it('[vertical] handles a drag sequence ending outside its bounds', function () {\n      document.createElement = createEventElement;\n      const control = new ZoomSlider();\n      control.element.style.width = '10px';\n      control.element.style.height = '100px';\n      control.element.firstChild.style.width = '10px';\n      control.element.firstChild.style.height = '20px';\n      map.addControl(control);\n      document.createElement = createElement;\n      map.getView().setZoom(8);\n      map.renderSync();\n      const event = new Event();\n      event.type = 'pointerdown';\n      event.target = control.element.firstElementChild;\n      event.clientX = 0;\n      event.clientY = 0;\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(0.0625);\n      expect(control.dragging_).to.be(true);\n      expect(control.dragListenerKeys_.length).to.be(2);\n      event.type = 'pointermove';\n      event.clientX = 0;\n      event.clientY = 2 * control.heightLimit_ / 8;\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(0.25);\n      event.type = 'pointermove';\n      event.clientX = 0;\n      event.clientY = 12 * control.heightLimit_ / 8;\n      control.element.dispatchEvent(event);\n      event.type = 'pointerup';\n      control.element.dispatchEvent(event);\n      expect(control.currentResolution_).to.be(16);\n      expect(control.dragListenerKeys_.length).to.be(0);\n      expect(control.dragging_).to.be(false);\n    });","file":"browser/spec/ol/control/zoomslider.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.control.ZoomToExtent","constructor"],"updatePoint":{"line":4,"column":44,"index":209},"line":4,"code":"    it('can be constructed without arguments', function () {\n      const instance = new ZoomToExtent();\n      expect(instance).to.be.an(ZoomToExtent);\n    });","file":"browser/spec/ol/control/zoomtoextent.test.js","skipped":false,"dir":"test"},{"name":"sets options","suites":["ol/DataTile","constructor"],"updatePoint":{"line":21,"column":20,"index":809},"line":21,"code":"    it('sets options', function () {\n      const tileCoord = [0, 0, 0];\n      const tile = new DataTile({\n        tileCoord: tileCoord,\n        loader: loader,\n        transition: 200\n      });\n      expect(tile.tileCoord).to.equal(tileCoord);\n      expect(tile.transition_).to.be(200);\n      expect(tile.loader_).to.equal(loader);\n    });","file":"browser/spec/ol/DataTile.test.js","skipped":false,"dir":"test"},{"name":"returns [256, 256] by default","suites":["ol/DataTile","#getSize()"],"updatePoint":{"line":34,"column":37,"index":1211},"line":34,"code":"    it('returns [256, 256] by default', function () {\n      const tileCoord = [0, 0, 0];\n      const tile = new DataTile({\n        tileCoord: tileCoord,\n        loader: loader\n      });\n      expect(tile.getSize()).to.eql([256, 256]);\n    });","file":"browser/spec/ol/DataTile.test.js","skipped":false,"dir":"test"},{"name":"respects what is provided in the constructor","suites":["ol/DataTile","#getSize()"],"updatePoint":{"line":42,"column":52,"index":1469},"line":42,"code":"    it('respects what is provided in the constructor', function () {\n      const size = [123, 456];\n      const tileCoord = [0, 0, 0];\n      const tile = new DataTile({\n        size: size,\n        tileCoord: tileCoord,\n        loader: loader\n      });\n      expect(tile.getSize()).to.eql(size);\n    });","file":"browser/spec/ol/DataTile.test.js","skipped":false,"dir":"test"},{"name":"handles loading states correctly","suites":["ol/DataTile","#load()"],"updatePoint":{"line":54,"column":40,"index":1802},"line":54,"code":"    it('handles loading states correctly', function (done) {\n      const tileCoord = [0, 0, 0];\n      const tile = new DataTile({\n        tileCoord: tileCoord,\n        loader: loader\n      });\n      expect(tile.getState()).to.be(TileState.IDLE);\n      tile.load();\n      expect(tile.getState()).to.be(TileState.LOADING);\n      listenOnce(tile, 'change', () => {\n        expect(tile.getState()).to.be(TileState.LOADED);\n        done();\n      });\n    });","file":"browser/spec/ol/DataTile.test.js","skipped":false,"dir":"test"},{"name":"reloads tiles in an error state","suites":["ol/DataTile","#load()"],"updatePoint":{"line":68,"column":39,"index":2254},"line":68,"code":"    it('reloads tiles in an error state', function (done) {\n      const tileCoord = [0, 0, 0];\n      const tile = new DataTile({\n        tileCoord: tileCoord,\n        loader: loader\n      });\n      tile.state = TileState.ERROR;\n      tile.load();\n      expect(tile.getState()).to.be(TileState.LOADING);\n      listenOnce(tile, 'change', () => {\n        expect(tile.getState()).to.be(TileState.LOADED);\n        done();\n      });\n    });","file":"browser/spec/ol/DataTile.test.js","skipped":false,"dir":"test"},{"name":"handles array data correctly","suites":["ol/DataTile","#getData() #asArrayLike() #asImageLike() #toArray()"],"updatePoint":{"line":84,"column":36,"index":2772},"line":84,"code":"    it('handles array data correctly', function (done) {\n      const tileCoord = [0, 0, 0];\n      const tile = new DataTile({\n        tileCoord: tileCoord,\n        loader: loader\n      });\n      tile.load();\n      listenOnce(tile, 'change', () => {\n        expect(tile.getState()).to.be(TileState.LOADED);\n        const data = tile.getData();\n        expect(data).to.be.an(Uint8ClampedArray);\n        expect(data.length).to.be(262144);\n        const expected = [255, 0, 0, 255, 255, 0, 0, 255];\n        expect(Array.from(data.slice(0, 8))).to.eql(expected);\n        expect(asImageLike(data)).to.be(null);\n        expect(asArrayLike(data)).to.be(data);\n        done();\n      });\n    });","file":"browser/spec/ol/DataTile.test.js","skipped":false,"dir":"test"},{"name":"handles image data correctly","suites":["ol/DataTile","#getData() #asArrayLike() #asImageLike() #toArray()"],"updatePoint":{"line":103,"column":36,"index":3458},"line":103,"code":"    it('handles image data correctly', function (done) {\n      const loadImage = function (src) {\n        return new Promise((resolve, reject) => {\n          const img = new Image();\n          img.addEventListener('load', () => resolve(img));\n          img.addEventListener('error', () => reject(new Error('load failed')));\n          img.src = src;\n        });\n      };\n      const loader = async function () {\n        const canvas = document.createElement('canvas');\n        canvas.width = 256;\n        canvas.height = 256;\n        const context = canvas.getContext('2d');\n        context.fillStyle = 'red';\n        context.fillRect(0, 0, 256, 256);\n        const src = canvas.toDataURL();\n        const image = await loadImage(src);\n        return image;\n      };\n      const tileCoord = [0, 0, 0];\n      const tile = new DataTile({\n        tileCoord: tileCoord,\n        loader: loader\n      });\n      tile.load();\n      listenOnce(tile, 'change', () => {\n        expect(tile.getState()).to.be(TileState.LOADED);\n        const data = tile.getData();\n        expect(data).to.be.an(Image);\n        expect(data.width).to.be(256);\n        expect(data.height).to.be(256);\n        expect(asArrayLike(data)).to.be(null);\n        expect(asImageLike(data)).to.be(data);\n        const imageData = toArray(asImageLike(data));\n        expect(imageData).to.be.an(Uint8ClampedArray);\n        expect(imageData.length).to.be(262144);\n        const expected = [255, 0, 0, 255, 255, 0, 0, 255];\n        expect(Array.from(imageData.slice(0, 8))).to.eql(expected);\n        done();\n      });\n    });","file":"browser/spec/ol/DataTile.test.js","skipped":false,"dir":"test"},{"name":"returns a CanvasRenderingContext2D","suites":["ol.dom","ol.dom.createCanvasContext2D"],"updatePoint":{"line":8,"column":42,"index":405},"line":8,"code":"    it('returns a CanvasRenderingContext2D', function () {\n      const ctx = createCanvasContext2D();\n      expect(ctx).to.be.a(CanvasRenderingContext2D);\n      expect(ctx.canvas).to.be.a(HTMLCanvasElement);\n      expect(ctx.canvas.width).to.be(defaultWidth);\n      expect(ctx.canvas.height).to.be(defaultHeight);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"has the desired width","suites":["ol.dom","ol.dom.createCanvasContext2D"],"updatePoint":{"line":15,"column":29,"index":714},"line":15,"code":"    it('has the desired width', function () {\n      const ctx = createCanvasContext2D(42);\n      expect(ctx).to.be.a(CanvasRenderingContext2D);\n      expect(ctx.canvas).to.be.a(HTMLCanvasElement);\n      expect(ctx.canvas.width).to.be(42);\n      expect(ctx.canvas.height).to.be(defaultHeight);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"has the desired height","suites":["ol.dom","ol.dom.createCanvasContext2D"],"updatePoint":{"line":22,"column":30,"index":1016},"line":22,"code":"    it('has the desired height', function () {\n      const ctx = createCanvasContext2D(undefined, 42);\n      expect(ctx).to.be.a(CanvasRenderingContext2D);\n      expect(ctx.canvas).to.be.a(HTMLCanvasElement);\n      expect(ctx.canvas.width).to.be(defaultWidth);\n      expect(ctx.canvas.height).to.be(42);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"has the desired height and width","suites":["ol.dom","ol.dom.createCanvasContext2D"],"updatePoint":{"line":29,"column":40,"index":1338},"line":29,"code":"    it('has the desired height and width', function () {\n      const ctx = createCanvasContext2D(42, 42);\n      expect(ctx).to.be.a(CanvasRenderingContext2D);\n      expect(ctx.canvas).to.be.a(HTMLCanvasElement);\n      expect(ctx.canvas.width).to.be(42);\n      expect(ctx.canvas.height).to.be(42);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly","suites":["ol.dom","ol.dom.outerWidth","without padding, margin or border"],"updatePoint":{"line":53,"column":30,"index":2179},"line":53,"code":"      it('calculates correctly', function () {\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(10);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerWidth","with padding"],"updatePoint":{"line":59,"column":43,"index":2384},"line":59,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.padding = '5px';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerWidth","with padding"],"updatePoint":{"line":64,"column":41,"index":2575},"line":64,"code":"      it('calculates correctly (one side)', function () {\n        element.style.paddingLeft = '5px';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(15);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerWidth","with margin"],"updatePoint":{"line":71,"column":43,"index":2822},"line":71,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.margin = '5px';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerWidth","with margin"],"updatePoint":{"line":76,"column":41,"index":3012},"line":76,"code":"      it('calculates correctly (one side)', function () {\n        element.style.marginLeft = '5px';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(15);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerWidth","with border"],"updatePoint":{"line":83,"column":43,"index":3258},"line":83,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.border = '5px solid chocolate';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerWidth","with border"],"updatePoint":{"line":88,"column":41,"index":3464},"line":88,"code":"      it('calculates correctly (one side)', function () {\n        element.style.border = '5px solid chocolate';\n        element.style.borderRightWidth = '0';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(15);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerWidth","with padding and margin"],"updatePoint":{"line":96,"column":43,"index":3780},"line":96,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.padding = '5px';\n        element.style.margin = '5px';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(30);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerWidth","with padding and margin"],"updatePoint":{"line":102,"column":41,"index":4009},"line":102,"code":"      it('calculates correctly (one side)', function () {\n        element.style.paddingLeft = '5px';\n        element.style.marginLeft = '5px';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerWidth","with padding and border"],"updatePoint":{"line":110,"column":43,"index":4310},"line":110,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.padding = '5px';\n        element.style.border = '5px solid chocolate';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(30);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerWidth","with padding and border"],"updatePoint":{"line":116,"column":41,"index":4555},"line":116,"code":"      it('calculates correctly (one side)', function () {\n        element.style.paddingLeft = '5px';\n        element.style.border = '5px solid chocolate';\n        element.style.borderRightWidth = '0';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerWidth","with margin and border"],"updatePoint":{"line":125,"column":43,"index":4913},"line":125,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.margin = '5px';\n        element.style.border = '5px solid chocolate';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(30);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerWidth","with margin and border"],"updatePoint":{"line":131,"column":41,"index":5157},"line":131,"code":"      it('calculates correctly (one side)', function () {\n        element.style.marginLeft = '5px';\n        element.style.border = '5px solid chocolate';\n        element.style.borderRightWidth = '0';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerWidth","with padding, margin and border"],"updatePoint":{"line":140,"column":43,"index":5523},"line":140,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.margin = '5px';\n        element.style.padding = '5px';\n        element.style.border = '5px solid chocolate';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(40);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerWidth","with padding, margin and border"],"updatePoint":{"line":147,"column":41,"index":5806},"line":147,"code":"      it('calculates correctly (one side)', function () {\n        element.style.marginLeft = '5px';\n        element.style.paddingLeft = '5px';\n        element.style.border = '5px solid chocolate';\n        element.style.borderRightWidth = '0';\n        const calcWidth = outerWidth(element);\n        expect(calcWidth).to.be(25);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly","suites":["ol.dom","ol.dom.outerHeight","without padding, margin or border"],"updatePoint":{"line":173,"column":30,"index":6687},"line":173,"code":"      it('calculates correctly', function () {\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(10);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerHeight","with padding"],"updatePoint":{"line":179,"column":43,"index":6895},"line":179,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.padding = '5px';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerHeight","with padding"],"updatePoint":{"line":184,"column":41,"index":7089},"line":184,"code":"      it('calculates correctly (one side)', function () {\n        element.style.paddingTop = '5px';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(15);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerHeight","with margin"],"updatePoint":{"line":191,"column":43,"index":7338},"line":191,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.margin = '5px';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerHeight","with margin"],"updatePoint":{"line":196,"column":41,"index":7531},"line":196,"code":"      it('calculates correctly (one side)', function () {\n        element.style.marginTop = '5px';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(15);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerHeight","with border"],"updatePoint":{"line":203,"column":43,"index":7779},"line":203,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.border = '5px solid chocolate';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerHeight","with border"],"updatePoint":{"line":208,"column":41,"index":7988},"line":208,"code":"      it('calculates correctly (one side)', function () {\n        element.style.border = '5px solid chocolate';\n        element.style.borderBottomWidth = '0';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(15);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerHeight","with padding and margin"],"updatePoint":{"line":216,"column":43,"index":8308},"line":216,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.padding = '5px';\n        element.style.margin = '5px';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(30);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerHeight","with padding and margin"],"updatePoint":{"line":222,"column":41,"index":8540},"line":222,"code":"      it('calculates correctly (one side)', function () {\n        element.style.paddingTop = '5px';\n        element.style.marginTop = '5px';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerHeight","with padding and border"],"updatePoint":{"line":230,"column":43,"index":8842},"line":230,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.padding = '5px';\n        element.style.border = '5px solid chocolate';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(30);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerHeight","with padding and border"],"updatePoint":{"line":236,"column":41,"index":9090},"line":236,"code":"      it('calculates correctly (one side)', function () {\n        element.style.paddingTop = '5px';\n        element.style.border = '5px solid chocolate';\n        element.style.borderBottomWidth = '0';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerHeight","with margin and border"],"updatePoint":{"line":245,"column":43,"index":9451},"line":245,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.margin = '5px';\n        element.style.border = '5px solid chocolate';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(30);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerHeight","with margin and border"],"updatePoint":{"line":251,"column":41,"index":9698},"line":251,"code":"      it('calculates correctly (one side)', function () {\n        element.style.marginTop = '5px';\n        element.style.border = '5px solid chocolate';\n        element.style.borderBottomWidth = '0';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(20);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (both sides)","suites":["ol.dom","ol.dom.outerHeight","with padding, margin and border"],"updatePoint":{"line":260,"column":43,"index":10067},"line":260,"code":"      it('calculates correctly (both sides)', function () {\n        element.style.margin = '5px';\n        element.style.padding = '5px';\n        element.style.border = '5px solid chocolate';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(40);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly (one side)","suites":["ol.dom","ol.dom.outerHeight","with padding, margin and border"],"updatePoint":{"line":267,"column":41,"index":10353},"line":267,"code":"      it('calculates correctly (one side)', function () {\n        element.style.marginTop = '5px';\n        element.style.paddingTop = '5px';\n        element.style.border = '5px solid chocolate';\n        element.style.borderBottomWidth = '0';\n        const calcHeight = outerHeight(element);\n        expect(calcHeight).to.be(25);\n      });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"adds new children to an empty parent","suites":["ol.dom","replaceChildren()"],"updatePoint":{"line":285,"column":44,"index":11012},"line":285,"code":"    it('adds new children to an empty parent', function () {\n      const parent = document.createElement('div');\n      const children = [document.createElement('a'), document.createElement('b'), document.createElement('c')];\n      replaceChildren(parent, children);\n      assertChildrenMatch(parent, children);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"removes children","suites":["ol.dom","replaceChildren()"],"updatePoint":{"line":291,"column":24,"index":11311},"line":291,"code":"    it('removes children', function () {\n      const parent = document.createElement('div');\n      const existingChildren = [document.createElement('a'), document.createElement('b'), document.createElement('c')];\n      existingChildren.forEach(function (child) {\n        parent.appendChild(child);\n      });\n      replaceChildren(parent, []);\n      expect(parent.childNodes).to.have.length(0);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"swaps children","suites":["ol.dom","replaceChildren()"],"updatePoint":{"line":300,"column":22,"index":11711},"line":300,"code":"    it('swaps children', function () {\n      const parent = document.createElement('div');\n      const existingChildren = [document.createElement('a'), document.createElement('b'), document.createElement('c')];\n      existingChildren.forEach(function (child) {\n        parent.appendChild(child);\n      });\n      const newChildren = [document.createElement('d'), document.createElement('e'), document.createElement('f')];\n      replaceChildren(parent, newChildren);\n      assertChildrenMatch(parent, newChildren);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"appends children","suites":["ol.dom","replaceChildren()"],"updatePoint":{"line":310,"column":24,"index":12234},"line":310,"code":"    it('appends children', function () {\n      const parent = document.createElement('div');\n      const existingChildren = [document.createElement('a'), document.createElement('b'), document.createElement('c')];\n      existingChildren.forEach(function (child) {\n        parent.appendChild(child);\n      });\n      const newChildren = [document.createElement('d'), document.createElement('e'), document.createElement('f')];\n      const allChildren = existingChildren.concat(newChildren);\n      replaceChildren(parent, allChildren);\n      assertChildrenMatch(parent, allChildren);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"prunes children","suites":["ol.dom","replaceChildren()"],"updatePoint":{"line":321,"column":23,"index":12820},"line":321,"code":"    it('prunes children', function () {\n      const parent = document.createElement('div');\n      const existingChildren = [document.createElement('a'), document.createElement('b'), document.createElement('c'), document.createElement('d'), document.createElement('e')];\n      existingChildren.forEach(function (child) {\n        parent.appendChild(child);\n      });\n      const desiredChildren = [existingChildren[1], existingChildren[3]];\n      replaceChildren(parent, desiredChildren);\n      assertChildrenMatch(parent, desiredChildren);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"reorders children","suites":["ol.dom","replaceChildren()"],"updatePoint":{"line":331,"column":25,"index":13369},"line":331,"code":"    it('reorders children', function () {\n      const parent = document.createElement('div');\n      const existingChildren = [document.createElement('a'), document.createElement('b'), document.createElement('c'), document.createElement('d'), document.createElement('e')];\n      existingChildren.forEach(function (child) {\n        parent.appendChild(child);\n      });\n      const desiredChildren = [existingChildren[1], existingChildren[3], existingChildren[0], existingChildren[4], existingChildren[2]];\n      replaceChildren(parent, desiredChildren);\n      assertChildrenMatch(parent, desiredChildren);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"reorders, prunes, and appends children","suites":["ol.dom","replaceChildren()"],"updatePoint":{"line":341,"column":46,"index":14002},"line":341,"code":"    it('reorders, prunes, and appends children', function () {\n      const parent = document.createElement('div');\n      const existingChildren = [document.createElement('a'), document.createElement('b'), document.createElement('c'), document.createElement('d'), document.createElement('e')];\n      existingChildren.forEach(function (child) {\n        parent.appendChild(child);\n      });\n      const desiredChildren = [document.createElement('f'), existingChildren[3], document.createElement('g'), existingChildren[0], existingChildren[2]];\n      const clone = desiredChildren.slice();\n      replaceChildren(parent, desiredChildren);\n      assertChildrenMatch(parent, desiredChildren);\n\n      // confirm we haven't modified the input\n      expect(desiredChildren).to.eql(clone);\n    });","file":"browser/spec/ol/dom/dom.test.js","skipped":false,"dir":"test"},{"name":"can tell the difference between 1 and 3","suites":["expect.js","roughlyEqual"],"updatePoint":{"line":3,"column":47,"index":125},"line":3,"code":"    it('can tell the difference between 1 and 3', function () {\n      expect(1).not.to.roughlyEqual(3, 1);\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"really can tell the difference between 1 and 3","suites":["expect.js","roughlyEqual"],"updatePoint":{"line":6,"column":54,"index":247},"line":6,"code":"    it('really can tell the difference between 1 and 3', function () {\n      expect(function () {\n        expect(1).to.roughlyEqual(3, 0.5);\n      }).to.throwException();\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"thinks that 1 ain't so different from 2","suites":["expect.js","roughlyEqual"],"updatePoint":{"line":11,"column":47,"index":419},"line":11,"code":"    it(\"thinks that 1 ain't so different from 2\", function () {\n      expect(1).to.roughlyEqual(2, 1);\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"knows that, like, 1 and 2 would, like, totally dig each other","suites":["expect.js","roughlyEqual"],"updatePoint":{"line":14,"column":69,"index":552},"line":14,"code":"    it('knows that, like, 1 and 2 would, like, totally dig each other', function () {\n      expect(function () {\n        expect(1).to.roughlyEqual(2, 1);\n      }).not.to.throwException();\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"Test XML document with single root, different prefix","suites":["expect.js","Test equality of XML documents - xmleql"],"updatePoint":{"line":21,"column":60,"index":813},"line":21,"code":"    it('Test XML document with single root, different prefix', function () {\n      const doc1 = '<bar:foo xmlns:bar=\"http://foo\"></bar:foo>';\n      const doc2 = '<foo xmlns=\"http://foo\"></foo>';\n      expect(new DOMParser().parseFromString(doc1, 'application/xml')).to.xmleql(new DOMParser().parseFromString(doc2, 'application/xml'));\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"Test XML document with single root, different prefix, prefix true","suites":["expect.js","Test equality of XML documents - xmleql"],"updatePoint":{"line":26,"column":73,"index":1169},"line":26,"code":"    it('Test XML document with single root, different prefix, prefix true', function () {\n      const doc1 = '<bar:foo xmlns:bar=\"http://foo\"></bar:foo>';\n      const doc2 = '<foo xmlns=\"http://foo\"></foo>';\n      expect(new DOMParser().parseFromString(doc1, 'application/xml')).to.not.xmleql(new DOMParser().parseFromString(doc2, 'application/xml'), {\n        prefix: true\n      });\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"Test XML document with different root","suites":["expect.js","Test equality of XML documents - xmleql"],"updatePoint":{"line":33,"column":45,"index":1533},"line":33,"code":"    it('Test XML document with different root', function () {\n      const doc1 = '<foo></foo>';\n      const doc2 = '<bar></bar>';\n      expect(new DOMParser().parseFromString(doc1, 'application/xml')).to.not.xmleql(new DOMParser().parseFromString(doc2, 'application/xml'));\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"Test different number of attributes","suites":["expect.js","Test equality of XML documents - xmleql"],"updatePoint":{"line":38,"column":43,"index":1813},"line":38,"code":"    it('Test different number of attributes', function () {\n      const doc1 = '<foo attr=\"bla\"></foo>';\n      const doc2 = '<foo></foo>';\n      expect(new DOMParser().parseFromString(doc1, 'application/xml')).to.not.xmleql(new DOMParser().parseFromString(doc2, 'application/xml'));\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"Test different attribute value","suites":["expect.js","Test equality of XML documents - xmleql"],"updatePoint":{"line":43,"column":38,"index":2099},"line":43,"code":"    it('Test different attribute value', function () {\n      const doc1 = '<foo attr=\"bla\"></foo>';\n      const doc2 = '<foo attr=\"foo\"></foo>';\n      expect(new DOMParser().parseFromString(doc1, 'application/xml')).to.not.xmleql(new DOMParser().parseFromString(doc2, 'application/xml'));\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"Test different number of children","suites":["expect.js","Test equality of XML documents - xmleql"],"updatePoint":{"line":48,"column":41,"index":2399},"line":48,"code":"    it('Test different number of children', function () {\n      const doc1 = '<foo><mynode></mynode></foo>';\n      const doc2 = '<foo></foo>';\n      expect(new DOMParser().parseFromString(doc1, 'application/xml')).to.not.xmleql(new DOMParser().parseFromString(doc2, 'application/xml'));\n    });","file":"browser/spec/ol/expect.test.js","skipped":false,"dir":"test"},{"name":"adds features to the source","suites":["ol.featureloader","ol.featureloader.xhr"],"updatePoint":{"line":15,"column":35,"index":513},"line":15,"code":"    it('adds features to the source', function (done) {\n      loader = xhr(url, format);\n      source.on('addfeature', function (e) {\n        setTimeout(function () {\n          expect(source.getFeatures().length).to.be.greaterThan(0);\n          done();\n        }, 0);\n      });\n      loader.call(source, [], 1, 'EPSG:3857');\n    });","file":"browser/spec/ol/featureloader.test.js","skipped":false,"dir":"test"},{"name":"adds features to the source","suites":["ol.featureloader","ol.featureloader.xhr","when called with urlFunction"],"updatePoint":{"line":26,"column":37,"index":907},"line":26,"code":"      it('adds features to the source', function (done) {\n        url = function (extent, resolution, projection) {\n          return 'spec/ol/data/point.json';\n        };\n        loader = xhr(url, format);\n        source.on('addfeature', function (e) {\n          setTimeout(function () {\n            expect(source.getFeatures().length).to.be.greaterThan(0);\n            done();\n          }, 0);\n        });\n        loader.call(source, [], 1, 'EPSG:3857');\n      });","file":"browser/spec/ol/featureloader.test.js","skipped":false,"dir":"test"},{"name":"sends the correct arguments to the urlFunction","suites":["ol.featureloader","ol.featureloader.xhr","when called with urlFunction"],"updatePoint":{"line":39,"column":56,"index":1392},"line":39,"code":"      it('sends the correct arguments to the urlFunction', function (done) {\n        const extent = [];\n        const resolution = 1;\n        const projection = 'EPSG:3857';\n        url = function (extent_, resolution_, projection_) {\n          expect(extent_).to.eql(extent);\n          expect(resolution_).to.eql(resolution);\n          expect(projection_).to.eql(projection);\n          done();\n          return 'spec/ol/data/point.json';\n        };\n        loader = xhr(url, format);\n        loader.call(source, [], 1, 'EPSG:3857');\n      });","file":"browser/spec/ol/featureloader.test.js","skipped":false,"dir":"test"},{"name":"it calls the success callback","suites":["ol.featureloader","ol.featureloader.xhr","when called with urlFunction"],"updatePoint":{"line":54,"column":37,"index":1925},"line":54,"code":"    it('it calls the success callback', function (done) {\n      const errorSpy = sinon.spy();\n      loader = xhr(url, format);\n      loader.call(source, [], 1, 'EPSG:3857', function () {\n        setTimeout(function () {\n          expect(errorSpy.callCount).to.be(0);\n          done();\n        }, 0);\n      }, errorSpy);\n    });","file":"browser/spec/ol/featureloader.test.js","skipped":false,"dir":"test"},{"name":"reads all features","suites":["ol.format.GML2","#readFeatures"],"updatePoint":{"line":41,"column":26,"index":1620},"line":41,"code":"    it('reads all features', function () {\n      expect(features.length).to.be(3);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a point geometry","suites":["ol.format.GML2","#readGeometry","gml 2.1.2"],"updatePoint":{"line":47,"column":35,"index":1808},"line":47,"code":"      it('can read a point geometry', function () {\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:coordinates>-90,-180</gml:coordinates>' + '</gml:Point>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([-180, -90, 0]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a 3D point geometry","suites":["ol.format.GML2","#readGeometry","gml 2.1.2"],"updatePoint":{"line":53,"column":38,"index":2202},"line":53,"code":"      it('can read a 3D point geometry', function () {\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:coordinates>-90,-180,42</gml:coordinates>' + '</gml:Point>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([-180, -90, 42]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a box element","suites":["ol.format.GML2","#readGeometry","gml 2.1.2"],"updatePoint":{"line":59,"column":32,"index":2594},"line":59,"code":"      it('can read a box element', function () {\n        const text = '<gml:Box xmlns:gml=\"http://www.opengis.net/gml\" ' + 'srsName=\"EPSG:4326\">' + '  <gml:coordinates>-0.768746,47.003018 ' + '    3.002191,47.925567</gml:coordinates>' + '</gml:Box>';\n        const g = readGeometry(format, text);\n        expect(g).to.eql([47.003018, -0.768746, 47.925567, 3.002191]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a multipolygon with gml:coordinates","suites":["ol.format.GML2","#readGeometry","gml 2.1.2"],"updatePoint":{"line":64,"column":54,"index":2994},"line":64,"code":"      it('can read a multipolygon with gml:coordinates', function () {\n        const text = '<gml:MultiPolygon xmlns:gml=\"http://www.opengis.net/gml\" ' + '        srsName=\"EPSG:4326\">' + '  <gml:polygonMember>' + '    <gml:Polygon>' + '      <gml:outerBoundaryIs>' + '        <gml:LinearRing>' + '          <gml:coordinates>-0.318987,47.003018 ' + '             -0.768746,47.358268 ' + '             -0.574463,47.684285 -0.347374,47.854602 ' + '             -0.006740,47.925567 ' + '             0.135191,47.726864 0.149384,47.599127 ' + '             0.419052,47.670092 0.532597,47.428810 ' + '             0.305508,47.443003 0.475824,47.144948 ' + '             0.064225,47.201721 ' + '             -0.318987,47.003018 </gml:coordinates>' + '        </gml:LinearRing>' + '      </gml:outerBoundaryIs>' + '      <gml:innerBoundaryIs>' + '        <gml:LinearRing>' + '          <gml:coordinates>-0.035126,47.485582 ' + '             -0.035126,47.485582 ' + '             -0.049319,47.641706 -0.233829,47.655899 ' + '             -0.375760,47.457196 ' + '             -0.276408,47.286879 -0.035126,47.485582 ' + '          </gml:coordinates>' + '        </gml:LinearRing>' + '      </gml:innerBoundaryIs>' + '    </gml:Polygon>' + '  </gml:polygonMember>' + '</gml:MultiPolygon>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[47.003018, -0.318987, 0], [47.358268, -0.768746, 0], [47.684285, -0.574463, 0], [47.854602, -0.347374, 0], [47.925567, -0.00674, 0], [47.726864, 0.135191, 0], [47.599127, 0.149384, 0], [47.670092, 0.419052, 0], [47.42881, 0.532597, 0], [47.443003, 0.305508, 0], [47.144948, 0.475824, 0], [47.201721, 0.064225, 0], [47.003018, -0.318987, 0]], [[47.485582, -0.035126, 0], [47.485582, -0.035126, 0], [47.641706, -0.049319, 0], [47.655899, -0.233829, 0], [47.457196, -0.37576, 0], [47.286879, -0.276408, 0], [47.485582, -0.035126, 0]]]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can serialize a LineString","suites":["ol.format.GML2","#writeFeatureElement"],"updatePoint":{"line":78,"column":34,"index":5149},"line":78,"code":"    it('can serialize a LineString', function () {\n      const expected = '<layer xmlns=\"http://www.openlayers.org/\" fid=\"1\">' + '  <geometry>' + '     <LineString xmlns=\"http://www.opengis.net/gml\" ' + '                  srsName=\"EPSG:4326\">' + '       <coordinates ' + '                     decimal=\".\" cs=\",\" ts=\" \">' + '         2,1.1 4.2,3' + '       </coordinates>' + '      </LineString>' + '    </geometry>' + '  </layer>';\n      const feature = new Feature({\n        geometry: new LineString([[1.1, 2], [3, 4.2]])\n      });\n      feature.setId(1);\n      const objectStack = [{\n        featureNS: featureNS,\n        srsName: 'EPSG:4326'\n      }];\n      format.writeFeatureElement(node, feature, objectStack);\n      expect(node).to.xmleql(parse(expected));\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can serialize a Polygon","suites":["ol.format.GML2","#writeFeatureElement"],"updatePoint":{"line":91,"column":31,"index":5918},"line":91,"code":"    it('can serialize a Polygon', function () {\n      const expected = '<layer xmlns=\"http://www.openlayers.org/\" fid=\"1\">' + '  <geometry>' + '     <Polygon xmlns=\"http://www.opengis.net/gml\" ' + '                  srsName=\"EPSG:4326\">' + '       <outerBoundaryIs>' + '         <LinearRing srsName=\"EPSG:4326\">' + '           <coordinates ' + '                        decimal=\".\" cs=\",\" ts=\" \">' + '              2,1.1 4.2,3 6,5.2' + '           </coordinates>' + '         </LinearRing>' + '       </outerBoundaryIs>' + '      </Polygon>' + '    </geometry>' + '  </layer>';\n      const feature = new Feature({\n        geometry: new Polygon([[[1.1, 2], [3, 4.2], [5.2, 6]]])\n      });\n      feature.setId(1);\n      const objectStack = [{\n        featureNS: featureNS,\n        srsName: 'EPSG:4326'\n      }];\n      format.writeFeatureElement(node, feature, objectStack);\n      expect(node).to.xmleql(parse(expected));\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can serialize a Point","suites":["ol.format.GML2","#writeFeatureElement"],"updatePoint":{"line":104,"column":29,"index":6842},"line":104,"code":"    it('can serialize a Point', function () {\n      const expected = '<layer xmlns=\"http://www.openlayers.org/\" fid=\"1\">' + '  <geometry>' + '     <Point xmlns=\"http://www.opengis.net/gml\" ' + '            srsName=\"EPSG:4326\">' + '       <coordinates ' + '                    decimal=\".\" cs=\",\" ts=\" \">' + '              2,1.1' + '       </coordinates>' + '      </Point>' + '    </geometry>' + '  </layer>';\n      const feature = new Feature({\n        geometry: new Point([1.1, 2])\n      });\n      feature.setId(1);\n      const objectStack = [{\n        featureNS: featureNS,\n        srsName: 'EPSG:4326'\n      }];\n      format.writeFeatureElement(node, feature, objectStack);\n      expect(node).to.xmleql(parse(expected));\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can serialize a Multi Point","suites":["ol.format.GML2","#writeFeatureElement"],"updatePoint":{"line":117,"column":35,"index":7580},"line":117,"code":"    it('can serialize a Multi Point', function () {\n      const expected = '<layer xmlns=\"http://www.openlayers.org/\" fid=\"1\">' + '  <geometry>' + '     <MultiPoint xmlns=\"http://www.opengis.net/gml\" ' + '                 srsName=\"EPSG:4326\">' + '       <pointMember>' + '         <Point srsName=\"EPSG:4326\">' + '           <coordinates ' + '                    decimal=\".\" cs=\",\" ts=\" \">' + '              2,1.1' + '           </coordinates>' + '         </Point>' + '       </pointMember>' + '      </MultiPoint>' + '    </geometry>' + '  </layer>';\n      const feature = new Feature({\n        geometry: new MultiPoint([[1.1, 2]])\n      });\n      feature.setId(1);\n      const objectStack = [{\n        featureNS: featureNS,\n        srsName: 'EPSG:4326'\n      }];\n      format.writeFeatureElement(node, feature, objectStack);\n      expect(node).to.xmleql(parse(expected));\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can serialize a Multi Line String","suites":["ol.format.GML2","#writeFeatureElement"],"updatePoint":{"line":130,"column":41,"index":8468},"line":130,"code":"    it('can serialize a Multi Line String', function () {\n      const expected = '<layer xmlns=\"http://www.openlayers.org/\" fid=\"1\">' + '  <geometry>' + '     <MultiLineString xmlns=\"http://www.opengis.net/gml\" ' + '                 srsName=\"EPSG:4326\">' + '       <lineStringMember>' + '         <LineString srsName=\"EPSG:4326\">' + '           <coordinates ' + '                    decimal=\".\" cs=\",\" ts=\" \">' + '              2,1.1 4.2,3' + '           </coordinates>' + '         </LineString>' + '       </lineStringMember>' + '      </MultiLineString>' + '    </geometry>' + '  </layer>';\n      const feature = new Feature({\n        geometry: new MultiLineString([[[1.1, 2], [3, 4.2]]])\n      });\n      feature.setId(1);\n      const objectStack = [{\n        featureNS: featureNS,\n        srsName: 'EPSG:4326'\n      }];\n      format.writeFeatureElement(node, feature, objectStack);\n      expect(node).to.xmleql(parse(expected));\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can serialize a Multi Polygon","suites":["ol.format.GML2","#writeFeatureElement"],"updatePoint":{"line":143,"column":37,"index":9405},"line":143,"code":"    it('can serialize a Multi Polygon', function () {\n      const expected = '<layer xmlns=\"http://www.openlayers.org/\" fid=\"1\">' + '  <geometry>' + '     <MultiPolygon xmlns=\"http://www.opengis.net/gml\" ' + '                 srsName=\"EPSG:4326\">' + '       <polygonMember>' + '         <Polygon srsName=\"EPSG:4326\">' + '           <outerBoundaryIs>' + '             <LinearRing srsName=\"EPSG:4326\">' + '               <coordinates ' + '                        decimal=\".\" cs=\",\" ts=\" \">' + '                  2,1.1 4.2,3 6,5.2' + '               </coordinates>' + '             </LinearRing>' + '           </outerBoundaryIs>' + '         </Polygon>' + '       </polygonMember>' + '      </MultiPolygon>' + '    </geometry>' + '  </layer>';\n      const feature = new Feature({\n        geometry: new MultiPolygon([[[[1.1, 2], [3, 4.2], [5.2, 6]]]])\n      });\n      feature.setId(1);\n      const objectStack = [{\n        featureNS: featureNS,\n        srsName: 'EPSG:4326'\n      }];\n      format.writeFeatureElement(node, feature, objectStack);\n      expect(node).to.xmleql(parse(expected));\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a point geometry","suites":["ol.format.GML3","#readGeometry","point"],"updatePoint":{"line":171,"column":45,"index":10878},"line":171,"code":"      it('can read and write a point geometry', function () {\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos srsDimension=\"2\">1 2</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([1, 2, 0]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a point geometry with scientific notation","suites":["ol.format.GML3","#readGeometry","point"],"updatePoint":{"line":179,"column":60,"index":11389},"line":179,"code":"      it('can read a point geometry with scientific notation', function () {\n        let text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos>1E7 2</gml:pos>' + '</gml:Point>';\n        let g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([10000000, 2, 0]);\n        text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos>1e7 2</gml:pos>' + '</gml:Point>';\n        g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([10000000, 2, 0]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read, transform and write a point geometry","suites":["ol.format.GML3","#readGeometry","point"],"updatePoint":{"line":189,"column":56,"index":12038},"line":189,"code":"      it('can read, transform and write a point geometry', function () {\n        const config = {\n          featureProjection: 'EPSG:3857'\n        };\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos>1 2</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(format, text, config);\n        expect(g).to.be.an(Point);\n        const coordinates = g.getCoordinates();\n        expect(coordinates.splice(0, 2)).to.eql(transform([1, 2], 'CRS:84', 'EPSG:3857'));\n        config.dataProjection = 'CRS:84';\n        const serialized = format.writeGeometryNode(g, config);\n        const pos = serialized.firstElementChild.firstElementChild.textContent;\n        const coordinate = pos.split(' ');\n        expect(coordinate[0]).to.roughlyEqual(1, 1e-9);\n        expect(coordinate[1]).to.roughlyEqual(2, 1e-9);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can detect SRS, read and transform a point geometry","suites":["ol.format.GML3","#readGeometry","point"],"updatePoint":{"line":205,"column":61,"index":12919},"line":205,"code":"      it('can detect SRS, read and transform a point geometry', function () {\n        const config = {\n          featureProjection: 'EPSG:3857'\n        };\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos>1 2</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(formatNoSrs, text, config);\n        expect(g).to.be.an(Point);\n        const coordinates = g.getCoordinates();\n        expect(coordinates.splice(0, 2)).to.eql(transform([1, 2], 'CRS:84', 'EPSG:3857'));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a point geometry in EPSG:4326","suites":["ol.format.GML3","#readGeometry","point"],"updatePoint":{"line":215,"column":58,"index":13461},"line":215,"code":"      it('can read and write a point geometry in EPSG:4326', function () {\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:pos srsDimension=\"2\">2 1</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(formatWGS84, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([1, 2, 0]);\n        const serialized = formatWGS84.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a linestring geometry","suites":["ol.format.GML3","#readGeometry","linestring"],"updatePoint":{"line":225,"column":50,"index":14042},"line":225,"code":"      it('can read and write a linestring geometry', function () {\n        const text = '<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:posList srsDimension=\"2\">1 2 3 4</gml:posList>' + '</gml:LineString>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read, transform and write a linestring geometry","suites":["ol.format.GML3","#readGeometry","linestring"],"updatePoint":{"line":233,"column":61,"index":14594},"line":233,"code":"      it('can read, transform and write a linestring geometry', function () {\n        const config = {\n          dataProjection: 'CRS:84',\n          featureProjection: 'EPSG:3857'\n        };\n        const text = '<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:posList>1 2 3 4</gml:posList>' + '</gml:LineString>';\n        const g = readGeometry(format, text, config);\n        expect(g).to.be.an(LineString);\n        const coordinates = g.getCoordinates();\n        expect(coordinates[0].slice(0, 2)).to.eql(transform([1, 2], 'CRS:84', 'EPSG:3857'));\n        expect(coordinates[1].slice(0, 2)).to.eql(transform([3, 4], 'CRS:84', 'EPSG:3857'));\n        const serialized = format.writeGeometryNode(g, config);\n        const poss = serialized.firstElementChild.firstElementChild.textContent;\n        const coordinate = poss.split(' ');\n        expect(coordinate[0]).to.roughlyEqual(1, 1e-9);\n        expect(coordinate[1]).to.roughlyEqual(2, 1e-9);\n        expect(coordinate[2]).to.roughlyEqual(3, 1e-9);\n        expect(coordinate[3]).to.roughlyEqual(4, 1e-9);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a linestring geometry in EPSG:4326","suites":["ol.format.GML3","#readGeometry","linestring"],"updatePoint":{"line":252,"column":63,"index":15707},"line":252,"code":"      it('can read and write a linestring geometry in EPSG:4326', function () {\n        const text = '<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:posList srsDimension=\"2\">2 1 4 3</gml:posList>' + '</gml:LineString>';\n        const g = readGeometry(formatWGS84, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0]]);\n        const serialized = formatWGS84.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a point geometry with correct axis order","suites":["ol.format.GML3","#readGeometry","axis order"],"updatePoint":{"line":270,"column":69,"index":16958},"line":270,"code":"      it('can read and write a point geometry with correct axis order', function () {\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:pos srsDimension=\"2\">-90 -180</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([-180, -90, 0]);\n        const serialized = formatWGS84.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a surface geometry with right axis order","suites":["ol.format.GML3","#readGeometry","axis order"],"updatePoint":{"line":278,"column":69,"index":17514},"line":278,"code":"      it('can read and write a surface geometry with right axis order', function () {\n        const text = '<gml:MultiSurface xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:surfaceMember>' + '    <gml:Polygon srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=' + '          \"urn:x-ogc:def:crs:EPSG:4326\">' + '          <gml:posList srsDimension=\"2\">' + '          38.9661 -77.0081 38.9931 -77.0421 ' + '          38.9321 -77.1221 38.9151 -77.0781 38.8861 ' + '          -77.0671 38.8621 -77.0391 38.8381 -77.0401 ' + '          38.8291 -77.0451 38.8131 -77.0351 38.7881 ' + '          -77.0451 38.8891 -76.9111 38.9661 -77.0081' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:surfaceMember>' + '</gml:MultiSurface>';\n        const g = readGeometry(format, text);\n        expect(g.getCoordinates()[0][0][0][0]).to.equal(-77.0081);\n        expect(g.getCoordinates()[0][0][0][1]).to.equal(38.9661);\n        format = new GML({\n          srsName: 'urn:x-ogc:def:crs:EPSG:4326',\n          surface: false\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a linestring 3D geometry","suites":["ol.format.GML3","#readGeometry","linestring 3D"],"updatePoint":{"line":292,"column":43,"index":18858},"line":292,"code":"      it('can read a linestring 3D geometry', function () {\n        const text = '<gml:LineString xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\" srsDimension=\"3\">' + '  <gml:posList>1 2 3 4 5 6</gml:posList>' + '</gml:LineString>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a linearring geometry","suites":["ol.format.GML3","#readGeometry","linearring"],"updatePoint":{"line":300,"column":50,"index":19327},"line":300,"code":"      it('can read and write a linearring geometry', function () {\n        const text = '<gml:LinearRing xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:posList srsDimension=\"2\">1 2 3 4 5 6 1 2</gml:posList>' + '</gml:LinearRing>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LinearRing);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0], [5, 6, 0], [1, 2, 0]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a polygon geometry","suites":["ol.format.GML3","#readGeometry","polygon"],"updatePoint":{"line":310,"column":47,"index":19941},"line":310,"code":"      it('can read and write a polygon geometry', function () {\n        const text = '<gml:Polygon xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:exterior>' + '    <gml:LinearRing srsName=\"CRS:84\">' + '     <gml:posList srsDimension=\"2\">1 2 3 2 3 4 1 2</gml:posList>' + '    </gml:LinearRing>' + '  </gml:exterior>' + '  <gml:interior>' + '    <gml:LinearRing srsName=\"CRS:84\">' + '     <gml:posList srsDimension=\"2\">2 3 2 5 4 5 2 3</gml:posList>' + '    </gml:LinearRing>' + '  </gml:interior>' + '  <gml:interior>' + '    <gml:LinearRing srsName=\"CRS:84\">' + '     <gml:posList srsDimension=\"2\">3 4 3 6 5 6 3 4</gml:posList>' + '    </gml:LinearRing>' + '  </gml:interior>' + '</gml:Polygon>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Polygon);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a surface geometry","suites":["ol.format.GML3","#readGeometry","surface"],"updatePoint":{"line":320,"column":47,"index":21114},"line":320,"code":"      it('can read and write a surface geometry', function () {\n        const text = '<gml:Surface xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:patches>' + '    <gml:PolygonPatch>' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            2 3 2 5 4 5 2 3' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            3 4 3 6 5 6 3 4' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:PolygonPatch>' + '  </gml:patches>' + '</gml:Surface>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Polygon);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]]);\n        format = new GML({\n          srsName: 'CRS:84',\n          surface: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a curve geometry","suites":["ol.format.GML3","#readGeometry","curve"],"updatePoint":{"line":334,"column":45,"index":22630},"line":334,"code":"      it('can read and write a curve geometry', function () {\n        const text = '<gml:Curve xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:segments>' + '    <gml:LineStringSegment>' + '      <gml:posList srsDimension=\"2\">1 2 3 4</gml:posList>' + '    </gml:LineStringSegment>' + '  </gml:segments>' + '</gml:Curve>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0]]);\n        format = new GML({\n          srsName: 'CRS:84',\n          curve: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read an envelope geometry","suites":["ol.format.GML3","#readGeometry","envelope"],"updatePoint":{"line":348,"column":39,"index":23399},"line":348,"code":"      it('can read an envelope geometry', function () {\n        const text = '<gml:Envelope xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:lowerCorner>1 2</gml:lowerCorner>' + '  <gml:upperCorner>3 4</gml:upperCorner>' + '</gml:Envelope>';\n        const g = readGeometry(format, text);\n        expect(g).to.eql([1, 2, 3, 4]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multipoint geometry","suites":["ol.format.GML3","#readGeometry","multipoint"],"updatePoint":{"line":355,"column":59,"index":23834},"line":355,"code":"      it('can read and write a singular multipoint geometry', function () {\n        const text = '<gml:MultiPoint xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:pointMember>' + '    <gml:Point srsName=\"CRS:84\">' + '      <gml:pos srsDimension=\"2\">1 2</gml:pos>' + '    </gml:Point>' + '  </gml:pointMember>' + '  <gml:pointMember>' + '    <gml:Point srsName=\"CRS:84\">' + '      <gml:pos srsDimension=\"2\">2 3</gml:pos>' + '    </gml:Point>' + '  </gml:pointMember>' + '  <gml:pointMember>' + '    <gml:Point srsName=\"CRS:84\">' + '      <gml:pos srsDimension=\"2\">3 4</gml:pos>' + '    </gml:Point>' + '  </gml:pointMember>' + '</gml:MultiPoint>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPoint);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [2, 3, 0], [3, 4, 0]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a plural multipoint geometry","suites":["ol.format.GML3","#readGeometry","multipoint"],"updatePoint":{"line":363,"column":47,"index":24796},"line":363,"code":"      it('can read a plural multipoint geometry', function () {\n        const text = '<gml:MultiPoint xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:pointMembers>' + '    <gml:Point>' + '      <gml:pos>1 2</gml:pos>' + '    </gml:Point>' + '    <gml:Point>' + '      <gml:pos>2 3</gml:pos>' + '    </gml:Point>' + '    <gml:Point>' + '      <gml:pos>3 4</gml:pos>' + '    </gml:Point>' + '  </gml:pointMembers>' + '</gml:MultiPoint>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPoint);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [2, 3, 0], [3, 4, 0]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multilinestring geometry","suites":["ol.format.GML3","#readGeometry","multilinestring"],"updatePoint":{"line":371,"column":64,"index":25506},"line":371,"code":"      it('can read and write a singular multilinestring geometry', function () {\n        const text = '<gml:MultiLineString xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:lineStringMember>' + '    <gml:LineString srsName=\"CRS:84\">' + '      <gml:posList srsDimension=\"2\">1 2 2 3</gml:posList>' + '    </gml:LineString>' + '  </gml:lineStringMember>' + '  <gml:lineStringMember>' + '    <gml:LineString srsName=\"CRS:84\">' + '      <gml:posList srsDimension=\"2\">3 4 4 5</gml:posList>' + '    </gml:LineString>' + '  </gml:lineStringMember>' + '</gml:MultiLineString>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiLineString);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [2, 3, 0]], [[3, 4, 0], [4, 5, 0]]]);\n        format = new GML({\n          srsName: 'CRS:84',\n          multiCurve: false\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a plural multilinestring geometry","suites":["ol.format.GML3","#readGeometry","multilinestring"],"updatePoint":{"line":383,"column":52,"index":26506},"line":383,"code":"      it('can read a plural multilinestring geometry', function () {\n        const text = '<gml:MultiLineString xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:lineStringMembers>' + '    <gml:LineString>' + '      <gml:posList>1 2 2 3</gml:posList>' + '    </gml:LineString>' + '    <gml:LineString>' + '      <gml:posList>3 4 4 5</gml:posList>' + '    </gml:LineString>' + '  </gml:lineStringMembers>' + '</gml:MultiLineString>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiLineString);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [2, 3, 0]], [[3, 4, 0], [4, 5, 0]]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multipolygon geometry","suites":["ol.format.GML3","#readGeometry","multipolygon"],"updatePoint":{"line":391,"column":61,"index":27220},"line":391,"code":"      it('can read and write a singular multipolygon geometry', function () {\n        const text = '<gml:MultiPolygon xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:polygonMember>' + '    <gml:Polygon srsName=\"CRS:84\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            2 3 2 5 4 5 2 3' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            3 4 3 6 5 6 3 4' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:Polygon>' + '  </gml:polygonMember>' + '  <gml:polygonMember>' + '    <gml:Polygon srsName=\"CRS:84\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:polygonMember>' + '</gml:MultiPolygon>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n        format = new GML({\n          srsName: 'CRS:84',\n          multiSurface: false\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a plural multipolygon geometry","suites":["ol.format.GML3","#readGeometry","multipolygon"],"updatePoint":{"line":403,"column":49,"index":29134},"line":403,"code":"      it('can read a plural multipolygon geometry', function () {\n        const text = '<gml:MultiPolygon xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:polygonMembers>' + '    <gml:Polygon>' + '      <gml:exterior>' + '        <gml:LinearRing>' + '          <gml:posList>1 2 3 2 3 4 1 2</gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing>' + '          <gml:posList>2 3 2 5 4 5 2 3</gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing>' + '          <gml:posList>3 4 3 6 5 6 3 4</gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:Polygon>' + '    <gml:Polygon>' + '      <gml:exterior>' + '        <gml:LinearRing>' + '          <gml:posList>1 2 3 2 3 4 1 2</gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:polygonMembers>' + '</gml:MultiPolygon>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multicurve-linestring geometry","suites":["ol.format.GML3","#readGeometry","multicurve"],"updatePoint":{"line":411,"column":70,"index":30546},"line":411,"code":"      it('can read and write a singular multicurve-linestring geometry', function () {\n        const text = '<gml:MultiCurve xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:curveMember>' + '    <gml:LineString srsName=\"CRS:84\">' + '      <gml:posList srsDimension=\"2\">1 2 2 3</gml:posList>' + '    </gml:LineString>' + '  </gml:curveMember>' + '  <gml:curveMember>' + '    <gml:LineString srsName=\"CRS:84\">' + '      <gml:posList srsDimension=\"2\">3 4 4 5</gml:posList>' + '    </gml:LineString>' + '  </gml:curveMember>' + '</gml:MultiCurve>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiLineString);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [2, 3, 0]], [[3, 4, 0], [4, 5, 0]]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multicurve-curve geometry","suites":["ol.format.GML3","#readGeometry","multicurve"],"updatePoint":{"line":419,"column":65,"index":31433},"line":419,"code":"      it('can read and write a singular multicurve-curve geometry', function () {\n        const text = '<gml:MultiCurve xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:curveMember>' + '    <gml:Curve srsName=\"CRS:84\">' + '      <gml:segments>' + '        <gml:LineStringSegment>' + '          <gml:posList srsDimension=\"2\">1 2 2 3</gml:posList>' + '        </gml:LineStringSegment>' + '      </gml:segments>' + '    </gml:Curve>' + '  </gml:curveMember>' + '  <gml:curveMember>' + '    <gml:Curve srsName=\"CRS:84\">' + '      <gml:segments>' + '        <gml:LineStringSegment>' + '          <gml:posList srsDimension=\"2\">3 4 4 5</gml:posList>' + '        </gml:LineStringSegment>' + '      </gml:segments>' + '    </gml:Curve>' + '  </gml:curveMember>' + '</gml:MultiCurve>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiLineString);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [2, 3, 0]], [[3, 4, 0], [4, 5, 0]]]);\n        format = new GML({\n          srsName: 'CRS:84',\n          curve: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multisurface geometry","suites":["ol.format.GML3","#readGeometry","multisurface"],"updatePoint":{"line":433,"column":61,"index":32693},"line":433,"code":"      it('can read and write a singular multisurface geometry', function () {\n        const text = '<gml:MultiSurface xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:surfaceMember>' + '    <gml:Polygon srsName=\"CRS:84\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            2 3 2 5 4 5 2 3' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            3 4 3 6 5 6 3 4' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:Polygon>' + '  </gml:surfaceMember>' + '  <gml:surfaceMember>' + '    <gml:Polygon srsName=\"CRS:84\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:surfaceMember>' + '</gml:MultiSurface>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a plural multisurface geometry","suites":["ol.format.GML3","#readGeometry","multisurface"],"updatePoint":{"line":441,"column":49,"index":34509},"line":441,"code":"      it('can read a plural multisurface geometry', function () {\n        const text = '<gml:MultiSurface xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:surfaceMembers>' + '    <gml:Polygon>' + '      <gml:exterior>' + '        <gml:LinearRing>' + '          <gml:posList>1 2 3 2 3 4 1 2</gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing>' + '          <gml:posList>2 3 2 5 4 5 2 3</gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing>' + '          <gml:posList>3 4 3 6 5 6 3 4</gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:Polygon>' + '  </gml:surfaceMembers>' + '  <gml:surfaceMembers>' + '    <gml:Polygon>' + '      <gml:exterior>' + '        <gml:LinearRing>' + '          <gml:posList>1 2 3 2 3 4 1 2</gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:surfaceMembers>' + '</gml:MultiSurface>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a multisurface-surface geometry","suites":["ol.format.GML3","#readGeometry","multisurface"],"updatePoint":{"line":447,"column":60,"index":35917},"line":447,"code":"      it('can read and write a multisurface-surface geometry', function () {\n        const text = '<gml:MultiSurface xmlns:gml=\"http://www.opengis.net/gml\" ' + '    srsName=\"CRS:84\">' + '  <gml:surfaceMember>' + '    <gml:Surface srsName=\"CRS:84\">' + '      <gml:patches>' + '        <gml:PolygonPatch>' + '          <gml:exterior>' + '            <gml:LinearRing srsName=\"CRS:84\">' + '              <gml:posList srsDimension=\"2\">' + '                1 2 3 2 3 4 1 2' + '              </gml:posList>' + '            </gml:LinearRing>' + '          </gml:exterior>' + '          <gml:interior>' + '            <gml:LinearRing srsName=\"CRS:84\">' + '              <gml:posList srsDimension=\"2\">' + '                2 3 2 5 4 5 2 3' + '              </gml:posList>' + '            </gml:LinearRing>' + '          </gml:interior>' + '          <gml:interior>' + '            <gml:LinearRing srsName=\"CRS:84\">' + '              <gml:posList srsDimension=\"2\">' + '                3 4 3 6 5 6 3 4' + '              </gml:posList>' + '            </gml:LinearRing>' + '          </gml:interior>' + '        </gml:PolygonPatch>' + '      </gml:patches>' + '    </gml:Surface>' + '  </gml:surfaceMember>' + '  <gml:surfaceMember>' + '    <gml:Surface srsName=\"CRS:84\">' + '      <gml:patches>' + '        <gml:PolygonPatch>' + '          <gml:exterior>' + '            <gml:LinearRing srsName=\"CRS:84\">' + '              <gml:posList srsDimension=\"2\">' + '                1 2 3 2 3 4 1 2' + '              </gml:posList>' + '            </gml:LinearRing>' + '          </gml:exterior>' + '        </gml:PolygonPatch>' + '      </gml:patches>' + '    </gml:Surface>' + '  </gml:surfaceMember>' + '</gml:MultiSurface>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n        format = new GML({\n          srsName: 'CRS:84',\n          surface: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"generates undefined value","suites":["ol.format.GML3","when parsing empty attribute"],"updatePoint":{"line":462,"column":33,"index":38216},"line":462,"code":"    it('generates undefined value', function () {\n      const text = '<gml:featureMembers xmlns:gml=\"http://www.opengis.net/gml\">' + '  <topp:gnis_pop gml:id=\"gnis_pop.148604\" xmlns:topp=\"' + 'http://www.openplans.org/topp\">' + '    <gml:name>Aflu</gml:name>' + '    <topp:the_geom>' + '      <gml:Point srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '        <gml:pos>34.12 2.09</gml:pos>' + '      </gml:Point>' + '    </topp:the_geom>' + '    <topp:population>84683</topp:population>' + '    <topp:country>Algeria</topp:country>' + '    <topp:type>place</topp:type>' + '    <topp:name>Aflu</topp:name>' + '    <topp:empty></topp:empty>' + '  </topp:gnis_pop>' + '</gml:featureMembers>';\n      const config = {\n        'featureNS': 'http://www.openplans.org/topp',\n        'featureType': 'gnis_pop'\n      };\n      const features = new GML(config).readFeatures(text);\n      const feature = features[0];\n      expect(feature.get('empty')).to.be(undefined);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 1 feature","suites":["ol.format.GML3","when parsing CDATA attribute"],"updatePoint":{"line":488,"column":25,"index":40197},"line":488,"code":"    it('creates 1 feature', function () {\n      expect(features).to.have.length(1);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"converts XML attribute to text","suites":["ol.format.GML3","when parsing CDATA attribute"],"updatePoint":{"line":491,"column":38,"index":40302},"line":491,"code":"    it('converts XML attribute to text', function () {\n      expect(features[0].get('cdata')).to.be('<a>b</a>');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 3 features","suites":["ol.format.GML3","when parsing TOPP states WFS with autoconfigure"],"updatePoint":{"line":508,"column":26,"index":40812},"line":508,"code":"    it('creates 3 features', function () {\n      expect(features).to.have.length(3);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates the right id for the feature","suites":["ol.format.GML3","when parsing TOPP states WFS with autoconfigure"],"updatePoint":{"line":511,"column":44,"index":40923},"line":511,"code":"    it('creates the right id for the feature', function () {\n      expect(features[0].getId()).to.equal('states.1');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can reuse the parser for a different featureNS","suites":["ol.format.GML3","when parsing TOPP states WFS with autoconfigure"],"updatePoint":{"line":514,"column":54,"index":41058},"line":514,"code":"    it('can reuse the parser for a different featureNS', function () {\n      const text = '<gml:featureMembers xmlns:gml=\"http://www.opengis.net/gml\">' + '  <foo:gnis_pop gml:id=\"gnis_pop.148604\" xmlns:foo=\"' + 'http://foo\">' + '    <gml:name>Aflu</gml:name>' + '    <foo:the_geom>' + '      <gml:Point srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '        <gml:pos>34.12 2.09</gml:pos>' + '      </gml:Point>' + '    </foo:the_geom>' + '    <foo:population>84683</foo:population>' + '  </foo:gnis_pop>' + '</gml:featureMembers>';\n      features = gmlFormat.readFeatures(text);\n      expect(features).to.have.length(1);\n      expect(features[0].get('population')).to.equal('84683');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read an empty collection","suites":["ol.format.GML3","when parsing TOPP states WFS with autoconfigure"],"updatePoint":{"line":520,"column":36,"index":41728},"line":520,"code":"    it('can read an empty collection', function () {\n      const text = '<gml:featureMembers xmlns:gml=\"http://www.opengis.net/gml\">' + '</gml:featureMembers>';\n      features = gmlFormat.readFeatures(text);\n      expect(features).to.have.length(0);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 10 features","suites":["ol.format.GML3","when parsing TOPP states GML"],"updatePoint":{"line":548,"column":27,"index":42922},"line":548,"code":"    it('creates 10 features', function () {\n      expect(features).to.have.length(10);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates the right id for the feature","suites":["ol.format.GML3","when parsing TOPP states GML"],"updatePoint":{"line":551,"column":44,"index":43034},"line":551,"code":"    it('creates the right id for the feature', function () {\n      expect(features[0].getId()).to.equal('states.1');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"writes back features as GML","suites":["ol.format.GML3","when parsing TOPP states GML"],"updatePoint":{"line":554,"column":35,"index":43150},"line":554,"code":"    it('writes back features as GML', function () {\n      const serialized = gmlFormat.writeFeaturesNode(features);\n      expect(serialized).to.xmleql(parse(text), {\n        ignoreElementOrder: true\n      });\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 3 features","suites":["ol.format.GML3","when parsing TOPP states GML with multiple featureMember tags"],"updatePoint":{"line":582,"column":26,"index":44322},"line":582,"code":"    it('creates 3 features', function () {\n      expect(features).to.have.length(3);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 3 features","suites":["ol.format.GML3","when parsing TOPP states GML from WFS"],"updatePoint":{"line":602,"column":26,"index":44911},"line":602,"code":"    it('creates 3 features', function () {\n      expect(features).to.have.length(3);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates a polygon for Illinois","suites":["ol.format.GML3","when parsing TOPP states GML from WFS"],"updatePoint":{"line":605,"column":38,"index":45016},"line":605,"code":"    it('creates a polygon for Illinois', function () {\n      feature = features[0];\n      expect(feature.getId()).to.equal('states.1');\n      expect(feature.get('STATE_NAME')).to.equal('Illinois');\n      expect(feature.getGeometry()).to.be.an(MultiPolygon);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 2 geometries","suites":["ol.format.GML3","when parsing more than one geometry"],"updatePoint":{"line":628,"column":28,"index":45750},"line":628,"code":"    it('creates 2 geometries', function () {\n      const feature = features[0];\n      expect(feature.get('center')).to.be.a(Point);\n      expect(feature.get('the_geom')).to.be.a(MultiPolygon);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates the correct attribute value","suites":["ol.format.GML3","when parsing an attribute name equal to featureType"],"updatePoint":{"line":650,"column":43,"index":46463},"line":650,"code":"    it('creates the correct attribute value', function () {\n      const feature = features[0];\n      expect(feature.get('zoning')).to.equal('I-L');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates a feature without a geometry","suites":["ol.format.GML3","when parsing only a boundedBy element and no geometry"],"updatePoint":{"line":667,"column":44,"index":46982},"line":667,"code":"    it('creates a feature without a geometry', function () {\n      const feature = features[0];\n      expect(feature.getGeometry()).to.be(undefined);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"reads all features","suites":["ol.format.GML3","when parsing from OGR"],"updatePoint":{"line":684,"column":26,"index":47441},"line":684,"code":"    it('reads all features', function () {\n      expect(features.length).to.be(1);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"reads all features","suites":["ol.format.GML3","when parsing multiple feature types"],"updatePoint":{"line":703,"column":26,"index":48017},"line":703,"code":"    it('reads all features', function () {\n      expect(features.length).to.be(12);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"reads all features with autoconfigure","suites":["ol.format.GML3","when parsing multiple feature types"],"updatePoint":{"line":719,"column":45,"index":48476},"line":719,"code":"    it('reads all features with autoconfigure', function () {\n      expect(features.length).to.be(12);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"reads all features","suites":["ol.format.GML3","when parsing multiple feature types / namespaces"],"updatePoint":{"line":742,"column":26,"index":49173},"line":742,"code":"    it('reads all features', function () {\n      expect(features.length).to.be(2);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"reads all features with autoconfigure","suites":["ol.format.GML3","when parsing multiple feature types / namespaces"],"updatePoint":{"line":759,"column":45,"index":49670},"line":759,"code":"    it('reads all features with autoconfigure', function () {\n      expect(features.length).to.be(2);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 3 features","suites":["ol.format.GML3","when parsing srsDimension from WFS (Geoserver)"],"updatePoint":{"line":779,"column":26,"index":50284},"line":779,"code":"    it('creates 3 features', function () {\n      expect(features).to.have.length(3);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates a LineString","suites":["ol.format.GML3","when parsing srsDimension from WFS (Geoserver)"],"updatePoint":{"line":782,"column":28,"index":50379},"line":782,"code":"    it('creates a LineString', function () {\n      feature = features[0];\n      expect(feature.getId()).to.equal('geoserver_layer.1');\n      expect(feature.getGeometry()).to.be.an(LineString);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates a Polygon","suites":["ol.format.GML3","when parsing srsDimension from WFS (Geoserver)"],"updatePoint":{"line":787,"column":25,"index":50577},"line":787,"code":"    it('creates a Polygon', function () {\n      feature = features[1];\n      expect(feature.getId()).to.equal('geoserver_layer.2');\n      expect(feature.getGeometry()).to.be.an(Polygon);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates a Point","suites":["ol.format.GML3","when parsing srsDimension from WFS (Geoserver)"],"updatePoint":{"line":792,"column":23,"index":50770},"line":792,"code":"    it('creates a Point', function () {\n      feature = features[2];\n      expect(feature.getId()).to.equal('geoserver_layer.3');\n      expect(feature.getGeometry()).to.be.an(Point);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 3D Features with the expected geometries","suites":["ol.format.GML3","when parsing srsDimension from WFS (Geoserver)"],"updatePoint":{"line":797,"column":56,"index":50994},"line":797,"code":"    it('creates 3D Features with the expected geometries', function () {\n      const expectedGeometry1 = [4.46386854, 51.91122415, 46.04679351, 4.46382399, 51.91120839, 46.04679382];\n      const expectedGeometry2 = [4.46385491, 51.91119276, 46.06074531, 4.4638264, 51.91118582, 46.06074609, 4.46380612, 51.91121772, 46.06074168, 4.46383463, 51.91122465, 46.06074089, 4.46385491, 51.91119276, 46.06074531];\n      const expectedGeometry3 = [4.46383715, 51.91125849, 46.04679348];\n      feature = features[0];\n      expect(feature.getGeometry().getFlatCoordinates()).to.eql(expectedGeometry1);\n      feature = features[1];\n      expect(feature.getGeometry().getFlatCoordinates()).to.eql(expectedGeometry2);\n      feature = features[2];\n      expect(feature.getGeometry().getFlatCoordinates()).to.eql(expectedGeometry3);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 3 features","suites":["ol.format.GML3","when parsing complex"],"updatePoint":{"line":822,"column":26,"index":52159},"line":822,"code":"    it('creates 3 features', function () {\n      expect(features).to.have.length(3);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates feature with two names","suites":["ol.format.GML3","when parsing complex"],"updatePoint":{"line":825,"column":38,"index":52264},"line":825,"code":"    it('creates feature with two names', function () {\n      expect(features[0].values_['name']).to.have.length(2);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"parses mutliple simple elements to strings","suites":["ol.format.GML3","when parsing complex"],"updatePoint":{"line":828,"column":50,"index":52400},"line":828,"code":"    it('parses mutliple simple elements to strings', function () {\n      expect(features[0].values_['name'][0]).to.be.a('string');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates nested property","suites":["ol.format.GML3","when parsing complex"],"updatePoint":{"line":831,"column":31,"index":52520},"line":831,"code":"    it('creates nested property', function () {\n      expect(features[0].values_['observationMethod']['CGI_TermValue']['value']['_content_']).to.eql('urn:ogc:def:nil:OGC:missing');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates nested attribute","suites":["ol.format.GML3","when parsing complex"],"updatePoint":{"line":834,"column":32,"index":52710},"line":834,"code":"    it('creates nested attribute', function () {\n      expect(features[0].values_['observationMethod']['CGI_TermValue']['value']['codeSpace']).to.eql('urn:ietf:rfc:2141');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a point geometry","suites":["ol.format.GML32","#readGeometry","point"],"updatePoint":{"line":852,"column":45,"index":53277},"line":852,"code":"      it('can read and write a point geometry', function () {\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos srsDimension=\"2\">1 2</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([1, 2, 0]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a point geometry with scientific notation","suites":["ol.format.GML32","#readGeometry","point"],"updatePoint":{"line":860,"column":60,"index":53792},"line":860,"code":"      it('can read a point geometry with scientific notation', function () {\n        let text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos>1E7 2</gml:pos>' + '</gml:Point>';\n        let g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([10000000, 2, 0]);\n        text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos>1e7 2</gml:pos>' + '</gml:Point>';\n        g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([10000000, 2, 0]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read, transform and write a point geometry","suites":["ol.format.GML32","#readGeometry","point"],"updatePoint":{"line":870,"column":56,"index":54449},"line":870,"code":"      it('can read, transform and write a point geometry', function () {\n        const config = {\n          featureProjection: 'EPSG:3857'\n        };\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos>1 2</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(format, text, config);\n        expect(g).to.be.an(Point);\n        const coordinates = g.getCoordinates();\n        expect(coordinates.splice(0, 2)).to.eql(transform([1, 2], 'CRS:84', 'EPSG:3857'));\n        config.dataProjection = 'CRS:84';\n        const serialized = format.writeGeometryNode(g, config);\n        const pos = serialized.firstElementChild.firstElementChild.textContent;\n        const coordinate = pos.split(' ');\n        expect(coordinate[0]).to.roughlyEqual(1, 1e-9);\n        expect(coordinate[1]).to.roughlyEqual(2, 1e-9);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can detect SRS, read and transform a point geometry","suites":["ol.format.GML32","#readGeometry","point"],"updatePoint":{"line":886,"column":61,"index":55334},"line":886,"code":"      it('can detect SRS, read and transform a point geometry', function () {\n        const config = {\n          featureProjection: 'EPSG:3857'\n        };\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:pos>1 2</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(formatNoSrs, text, config);\n        expect(g).to.be.an(Point);\n        const coordinates = g.getCoordinates();\n        expect(coordinates.splice(0, 2)).to.eql(transform([1, 2], 'CRS:84', 'EPSG:3857'));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a point geometry in EPSG:4326","suites":["ol.format.GML32","#readGeometry","point"],"updatePoint":{"line":896,"column":58,"index":55880},"line":896,"code":"      it('can read and write a point geometry in EPSG:4326', function () {\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:pos srsDimension=\"2\">2 1</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(formatWGS84, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([1, 2, 0]);\n        const serialized = formatWGS84.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a linestring geometry","suites":["ol.format.GML32","#readGeometry","linestring"],"updatePoint":{"line":906,"column":50,"index":56465},"line":906,"code":"      it('can read and write a linestring geometry', function () {\n        const text = '<gml:LineString xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:posList srsDimension=\"2\">1 2 3 4</gml:posList>' + '</gml:LineString>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read, transform and write a linestring geometry","suites":["ol.format.GML32","#readGeometry","linestring"],"updatePoint":{"line":914,"column":61,"index":57021},"line":914,"code":"      it('can read, transform and write a linestring geometry', function () {\n        const config = {\n          dataProjection: 'CRS:84',\n          featureProjection: 'EPSG:3857'\n        };\n        const text = '<gml:LineString xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:posList>1 2 3 4</gml:posList>' + '</gml:LineString>';\n        const g = readGeometry(format, text, config);\n        expect(g).to.be.an(LineString);\n        const coordinates = g.getCoordinates();\n        expect(coordinates[0].slice(0, 2)).to.eql(transform([1, 2], 'CRS:84', 'EPSG:3857'));\n        expect(coordinates[1].slice(0, 2)).to.eql(transform([3, 4], 'CRS:84', 'EPSG:3857'));\n        const serialized = format.writeGeometryNode(g, config);\n        const poss = serialized.firstElementChild.firstElementChild.textContent;\n        const coordinate = poss.split(' ');\n        expect(coordinate[0]).to.roughlyEqual(1, 1e-9);\n        expect(coordinate[1]).to.roughlyEqual(2, 1e-9);\n        expect(coordinate[2]).to.roughlyEqual(3, 1e-9);\n        expect(coordinate[3]).to.roughlyEqual(4, 1e-9);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a linestring geometry in EPSG:4326","suites":["ol.format.GML32","#readGeometry","linestring"],"updatePoint":{"line":933,"column":63,"index":58138},"line":933,"code":"      it('can read and write a linestring geometry in EPSG:4326', function () {\n        const text = '<gml:LineString xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:posList srsDimension=\"2\">2 1 4 3</gml:posList>' + '</gml:LineString>';\n        const g = readGeometry(formatWGS84, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0]]);\n        const serialized = formatWGS84.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a point geometry with correct axis order","suites":["ol.format.GML32","#readGeometry","axis order"],"updatePoint":{"line":951,"column":69,"index":59397},"line":951,"code":"      it('can read and write a point geometry with correct axis order', function () {\n        const text = '<gml:Point xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:pos srsDimension=\"2\">-90 -180</gml:pos>' + '</gml:Point>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Point);\n        expect(g.getCoordinates()).to.eql([-180, -90, 0]);\n        const serialized = formatWGS84.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a surface geometry with right axis order","suites":["ol.format.GML32","#readGeometry","axis order"],"updatePoint":{"line":959,"column":69,"index":59957},"line":959,"code":"      it('can read and write a surface geometry with right axis order', function () {\n        const text = '<gml:MultiSurface xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '  <gml:surfaceMember>' + '    <gml:Polygon srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=' + '          \"urn:x-ogc:def:crs:EPSG:4326\">' + '          <gml:posList srsDimension=\"2\">' + '          38.9661 -77.0081 38.9931 -77.0421 ' + '          38.9321 -77.1221 38.9151 -77.0781 38.8861 ' + '          -77.0671 38.8621 -77.0391 38.8381 -77.0401 ' + '          38.8291 -77.0451 38.8131 -77.0351 38.7881 ' + '          -77.0451 38.8891 -76.9111 38.9661 -77.0081' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:surfaceMember>' + '</gml:MultiSurface>';\n        const g = readGeometry(format, text);\n        expect(g.getCoordinates()[0][0][0][0]).to.equal(-77.0081);\n        expect(g.getCoordinates()[0][0][0][1]).to.equal(38.9661);\n        format = new GML32({\n          srsName: 'urn:x-ogc:def:crs:EPSG:4326',\n          surface: false\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a linestring 3D geometry","suites":["ol.format.GML32","#readGeometry","linestring 3D"],"updatePoint":{"line":973,"column":43,"index":61307},"line":973,"code":"      it('can read a linestring 3D geometry', function () {\n        const text = '<gml:LineString xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\" srsDimension=\"3\">' + '  <gml:posList>1 2 3 4 5 6</gml:posList>' + '</gml:LineString>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a linearring geometry","suites":["ol.format.GML32","#readGeometry","linearring"],"updatePoint":{"line":981,"column":50,"index":61780},"line":981,"code":"      it('can read and write a linearring geometry', function () {\n        const text = '<gml:LinearRing xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:posList srsDimension=\"2\">1 2 3 4 5 6 1 2</gml:posList>' + '</gml:LinearRing>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LinearRing);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0], [5, 6, 0], [1, 2, 0]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a polygon geometry","suites":["ol.format.GML32","#readGeometry","polygon"],"updatePoint":{"line":991,"column":47,"index":62398},"line":991,"code":"      it('can read and write a polygon geometry', function () {\n        const text = '<gml:Polygon xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:exterior>' + '    <gml:LinearRing srsName=\"CRS:84\">' + '     <gml:posList srsDimension=\"2\">1 2 3 2 3 4 1 2</gml:posList>' + '    </gml:LinearRing>' + '  </gml:exterior>' + '  <gml:interior>' + '    <gml:LinearRing srsName=\"CRS:84\">' + '     <gml:posList srsDimension=\"2\">2 3 2 5 4 5 2 3</gml:posList>' + '    </gml:LinearRing>' + '  </gml:interior>' + '  <gml:interior>' + '    <gml:LinearRing srsName=\"CRS:84\">' + '     <gml:posList srsDimension=\"2\">3 4 3 6 5 6 3 4</gml:posList>' + '    </gml:LinearRing>' + '  </gml:interior>' + '</gml:Polygon>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Polygon);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a surface geometry","suites":["ol.format.GML32","#readGeometry","surface"],"updatePoint":{"line":1001,"column":47,"index":63575},"line":1001,"code":"      it('can read and write a surface geometry', function () {\n        const text = '<gml:Surface xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:patches>' + '    <gml:PolygonPatch>' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            2 3 2 5 4 5 2 3' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            3 4 3 6 5 6 3 4' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:PolygonPatch>' + '  </gml:patches>' + '</gml:Surface>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Polygon);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]]);\n        format = new GML32({\n          srsName: 'CRS:84',\n          surface: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a curve geometry","suites":["ol.format.GML32","#readGeometry","curve"],"updatePoint":{"line":1015,"column":45,"index":65097},"line":1015,"code":"      it('can read and write a curve geometry', function () {\n        const text = '<gml:Curve xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:segments>' + '    <gml:LineStringSegment>' + '      <gml:posList srsDimension=\"2\">1 2 3 4</gml:posList>' + '    </gml:LineStringSegment>' + '  </gml:segments>' + '</gml:Curve>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0]]);\n        format = new GML32({\n          srsName: 'CRS:84',\n          curve: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a curve geometry","suites":["ol.format.GML32","#readGeometry","curve"],"updatePoint":{"line":1027,"column":45,"index":65831},"line":1027,"code":"      it('can read and write a curve geometry', function () {\n        const text = '<gml:Curve xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:segments>' + '    <gml:LineStringSegment>' + '      <gml:posList srsDimension=\"2\">1 2 3 4</gml:posList>' + '    </gml:LineStringSegment>' + '    <gml:LineStringSegment>' + '      <gml:posList srsDimension=\"2\">5 6 7 8</gml:posList>' + '    </gml:LineStringSegment>' + '  </gml:segments>' + '</gml:Curve>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(LineString);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0], [5, 6, 0], [7, 8, 0]]);\n        format = new GML32({\n          srsName: 'CRS:84',\n          curve: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        // Conversion back to GML is not lossless, because we don't know\n        // the mapping of original LineString segements to the OpenLayers\n        // LineString geometry's coordinates.\n        const expected = '<gml:Curve xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:segments>' + '    <gml:LineStringSegment>' + '      <gml:posList srsDimension=\"2\">1 2 3 4 5 6 7 8</gml:posList>' + '    </gml:LineStringSegment>' + '  </gml:segments>' + '</gml:Curve>';\n        expect(serialized.firstElementChild).to.xmleql(parse(expected));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a polygon with a ring of curves","suites":["ol.format.GML32","#readGeometry","curve"],"updatePoint":{"line":1043,"column":50,"index":67220},"line":1043,"code":"      it('can read a polygon with a ring of curves', function () {\n        const text = `\n        <gml:Polygon xmlns:gml=\"http://www.opengis.net/gml/3.2\" srsName=\"CRS:84\">\n          <gml:exterior>\n            <gml:Ring>\n              <gml:curveMember>\n                <gml:Curve>\n                  <gml:segments>\n                    <gml:LineStringSegment interpolation=\"linear\">\n                      <gml:posList>1 2 3 4</gml:posList>\n                    </gml:LineStringSegment>\n                    <gml:LineStringSegment interpolation=\"linear\">\n                      <gml:posList>5 6 7 8</gml:posList>\n                    </gml:LineStringSegment>\n                  </gml:segments>\n                </gml:Curve>\n              </gml:curveMember>\n            </gml:Ring>\n          </gml:exterior>\n        </gml:Polygon>\n        `;\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(Polygon);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [3, 4, 0], [5, 6, 0], [7, 8, 0]]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read an envelope geometry","suites":["ol.format.GML32","#readGeometry","envelope"],"updatePoint":{"line":1070,"column":39,"index":68271},"line":1070,"code":"      it('can read an envelope geometry', function () {\n        const text = '<gml:Envelope xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:lowerCorner>1 2</gml:lowerCorner>' + '  <gml:upperCorner>3 4</gml:upperCorner>' + '</gml:Envelope>';\n        const g = readGeometry(format, text);\n        expect(g).to.eql([1, 2, 3, 4]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multipoint geometry","suites":["ol.format.GML32","#readGeometry","multipoint"],"updatePoint":{"line":1077,"column":59,"index":68710},"line":1077,"code":"      it('can read and write a singular multipoint geometry', function () {\n        const text = '<gml:MultiPoint xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:pointMember>' + '    <gml:Point srsName=\"CRS:84\">' + '      <gml:pos srsDimension=\"2\">1 2</gml:pos>' + '    </gml:Point>' + '  </gml:pointMember>' + '  <gml:pointMember>' + '    <gml:Point srsName=\"CRS:84\">' + '      <gml:pos srsDimension=\"2\">2 3</gml:pos>' + '    </gml:Point>' + '  </gml:pointMember>' + '  <gml:pointMember>' + '    <gml:Point srsName=\"CRS:84\">' + '      <gml:pos srsDimension=\"2\">3 4</gml:pos>' + '    </gml:Point>' + '  </gml:pointMember>' + '</gml:MultiPoint>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPoint);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [2, 3, 0], [3, 4, 0]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a plural multipoint geometry","suites":["ol.format.GML32","#readGeometry","multipoint"],"updatePoint":{"line":1085,"column":47,"index":69676},"line":1085,"code":"      it('can read a plural multipoint geometry', function () {\n        const text = '<gml:MultiPoint xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:pointMembers>' + '    <gml:Point>' + '      <gml:pos>1 2</gml:pos>' + '    </gml:Point>' + '    <gml:Point>' + '      <gml:pos>2 3</gml:pos>' + '    </gml:Point>' + '    <gml:Point>' + '      <gml:pos>3 4</gml:pos>' + '    </gml:Point>' + '  </gml:pointMembers>' + '</gml:MultiPoint>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPoint);\n        expect(g.getCoordinates()).to.eql([[1, 2, 0], [2, 3, 0], [3, 4, 0]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multilinestring geometry","suites":["ol.format.GML32","#readGeometry","multilinestring"],"updatePoint":{"line":1093,"column":64,"index":70390},"line":1093,"code":"      it('can read and write a singular multilinestring geometry', function () {\n        const text = '<gml:MultiLineString xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:lineStringMember>' + '    <gml:LineString srsName=\"CRS:84\">' + '      <gml:posList srsDimension=\"2\">1 2 2 3</gml:posList>' + '    </gml:LineString>' + '  </gml:lineStringMember>' + '  <gml:lineStringMember>' + '    <gml:LineString srsName=\"CRS:84\">' + '      <gml:posList srsDimension=\"2\">3 4 4 5</gml:posList>' + '    </gml:LineString>' + '  </gml:lineStringMember>' + '</gml:MultiLineString>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiLineString);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [2, 3, 0]], [[3, 4, 0], [4, 5, 0]]]);\n        format = new GML32({\n          srsName: 'CRS:84',\n          multiCurve: false\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a plural multilinestring geometry","suites":["ol.format.GML32","#readGeometry","multilinestring"],"updatePoint":{"line":1105,"column":52,"index":71396},"line":1105,"code":"      it('can read a plural multilinestring geometry', function () {\n        const text = '<gml:MultiLineString xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:lineStringMembers>' + '    <gml:LineString>' + '      <gml:posList>1 2 2 3</gml:posList>' + '    </gml:LineString>' + '    <gml:LineString>' + '      <gml:posList>3 4 4 5</gml:posList>' + '    </gml:LineString>' + '  </gml:lineStringMembers>' + '</gml:MultiLineString>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiLineString);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [2, 3, 0]], [[3, 4, 0], [4, 5, 0]]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multipolygon geometry","suites":["ol.format.GML32","#readGeometry","multipolygon"],"updatePoint":{"line":1113,"column":61,"index":72114},"line":1113,"code":"      it('can read and write a singular multipolygon geometry', function () {\n        const text = '<gml:MultiPolygon xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:polygonMember>' + '    <gml:Polygon srsName=\"CRS:84\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            2 3 2 5 4 5 2 3' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            3 4 3 6 5 6 3 4' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:Polygon>' + '  </gml:polygonMember>' + '  <gml:polygonMember>' + '    <gml:Polygon srsName=\"CRS:84\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:polygonMember>' + '</gml:MultiPolygon>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n        format = new GML32({\n          srsName: 'CRS:84',\n          multiSurface: false\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a plural multipolygon geometry","suites":["ol.format.GML32","#readGeometry","multipolygon"],"updatePoint":{"line":1125,"column":49,"index":74034},"line":1125,"code":"      it('can read a plural multipolygon geometry', function () {\n        const text = '<gml:MultiPolygon xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:polygonMembers>' + '    <gml:Polygon>' + '      <gml:exterior>' + '        <gml:LinearRing>' + '          <gml:posList>1 2 3 2 3 4 1 2</gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing>' + '          <gml:posList>2 3 2 5 4 5 2 3</gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing>' + '          <gml:posList>3 4 3 6 5 6 3 4</gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:Polygon>' + '    <gml:Polygon>' + '      <gml:exterior>' + '        <gml:LinearRing>' + '          <gml:posList>1 2 3 2 3 4 1 2</gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:polygonMembers>' + '</gml:MultiPolygon>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multicurve-linestring geometry","suites":["ol.format.GML32","#readGeometry","multicurve"],"updatePoint":{"line":1133,"column":70,"index":75450},"line":1133,"code":"      it('can read and write a singular multicurve-linestring geometry', function () {\n        const text = '<gml:MultiCurve xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:curveMember>' + '    <gml:LineString srsName=\"CRS:84\">' + '      <gml:posList srsDimension=\"2\">1 2 2 3</gml:posList>' + '    </gml:LineString>' + '  </gml:curveMember>' + '  <gml:curveMember>' + '    <gml:LineString srsName=\"CRS:84\">' + '      <gml:posList srsDimension=\"2\">3 4 4 5</gml:posList>' + '    </gml:LineString>' + '  </gml:curveMember>' + '</gml:MultiCurve>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiLineString);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [2, 3, 0]], [[3, 4, 0], [4, 5, 0]]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multicurve-curve geometry","suites":["ol.format.GML32","#readGeometry","multicurve"],"updatePoint":{"line":1141,"column":65,"index":76341},"line":1141,"code":"      it('can read and write a singular multicurve-curve geometry', function () {\n        const text = '<gml:MultiCurve xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:curveMember>' + '    <gml:Curve srsName=\"CRS:84\">' + '      <gml:segments>' + '        <gml:LineStringSegment>' + '          <gml:posList srsDimension=\"2\">1 2 2 3</gml:posList>' + '        </gml:LineStringSegment>' + '      </gml:segments>' + '    </gml:Curve>' + '  </gml:curveMember>' + '  <gml:curveMember>' + '    <gml:Curve srsName=\"CRS:84\">' + '      <gml:segments>' + '        <gml:LineStringSegment>' + '          <gml:posList srsDimension=\"2\">3 4 4 5</gml:posList>' + '        </gml:LineStringSegment>' + '      </gml:segments>' + '    </gml:Curve>' + '  </gml:curveMember>' + '</gml:MultiCurve>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiLineString);\n        expect(g.getCoordinates()).to.eql([[[1, 2, 0], [2, 3, 0]], [[3, 4, 0], [4, 5, 0]]]);\n        format = new GML32({\n          srsName: 'CRS:84',\n          curve: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a singular multisurface geometry","suites":["ol.format.GML32","#readGeometry","multisurface"],"updatePoint":{"line":1155,"column":61,"index":77607},"line":1155,"code":"      it('can read and write a singular multisurface geometry', function () {\n        const text = '<gml:MultiSurface xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:surfaceMember>' + '    <gml:Polygon srsName=\"CRS:84\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            2 3 2 5 4 5 2 3' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            3 4 3 6 5 6 3 4' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:Polygon>' + '  </gml:surfaceMember>' + '  <gml:surfaceMember>' + '    <gml:Polygon srsName=\"CRS:84\">' + '      <gml:exterior>' + '        <gml:LinearRing srsName=\"CRS:84\">' + '          <gml:posList srsDimension=\"2\">' + '            1 2 3 2 3 4 1 2' + '          </gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:surfaceMember>' + '</gml:MultiSurface>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read a plural multisurface geometry","suites":["ol.format.GML32","#readGeometry","multisurface"],"updatePoint":{"line":1163,"column":49,"index":79427},"line":1163,"code":"      it('can read a plural multisurface geometry', function () {\n        const text = '<gml:MultiSurface xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:surfaceMembers>' + '    <gml:Polygon>' + '      <gml:exterior>' + '        <gml:LinearRing>' + '          <gml:posList>1 2 3 2 3 4 1 2</gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '      <gml:interior>' + '        <gml:LinearRing>' + '          <gml:posList>2 3 2 5 4 5 2 3</gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '      <gml:interior>' + '        <gml:LinearRing>' + '          <gml:posList>3 4 3 6 5 6 3 4</gml:posList>' + '        </gml:LinearRing>' + '      </gml:interior>' + '    </gml:Polygon>' + '  </gml:surfaceMembers>' + '  <gml:surfaceMembers>' + '    <gml:Polygon>' + '      <gml:exterior>' + '        <gml:LinearRing>' + '          <gml:posList>1 2 3 2 3 4 1 2</gml:posList>' + '        </gml:LinearRing>' + '      </gml:exterior>' + '    </gml:Polygon>' + '  </gml:surfaceMembers>' + '</gml:MultiSurface>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"can read and write a multisurface-surface geometry","suites":["ol.format.GML32","#readGeometry","multisurface"],"updatePoint":{"line":1169,"column":60,"index":80839},"line":1169,"code":"      it('can read and write a multisurface-surface geometry', function () {\n        const text = '<gml:MultiSurface xmlns:gml=\"http://www.opengis.net/gml/3.2\" ' + '    srsName=\"CRS:84\">' + '  <gml:surfaceMember>' + '    <gml:Surface srsName=\"CRS:84\">' + '      <gml:patches>' + '        <gml:PolygonPatch>' + '          <gml:exterior>' + '            <gml:LinearRing srsName=\"CRS:84\">' + '              <gml:posList srsDimension=\"2\">' + '                1 2 3 2 3 4 1 2' + '              </gml:posList>' + '            </gml:LinearRing>' + '          </gml:exterior>' + '          <gml:interior>' + '            <gml:LinearRing srsName=\"CRS:84\">' + '              <gml:posList srsDimension=\"2\">' + '                2 3 2 5 4 5 2 3' + '              </gml:posList>' + '            </gml:LinearRing>' + '          </gml:interior>' + '          <gml:interior>' + '            <gml:LinearRing srsName=\"CRS:84\">' + '              <gml:posList srsDimension=\"2\">' + '                3 4 3 6 5 6 3 4' + '              </gml:posList>' + '            </gml:LinearRing>' + '          </gml:interior>' + '        </gml:PolygonPatch>' + '      </gml:patches>' + '    </gml:Surface>' + '  </gml:surfaceMember>' + '  <gml:surfaceMember>' + '    <gml:Surface srsName=\"CRS:84\">' + '      <gml:patches>' + '        <gml:PolygonPatch>' + '          <gml:exterior>' + '            <gml:LinearRing srsName=\"CRS:84\">' + '              <gml:posList srsDimension=\"2\">' + '                1 2 3 2 3 4 1 2' + '              </gml:posList>' + '            </gml:LinearRing>' + '          </gml:exterior>' + '        </gml:PolygonPatch>' + '      </gml:patches>' + '    </gml:Surface>' + '  </gml:surfaceMember>' + '</gml:MultiSurface>';\n        const g = readGeometry(format, text);\n        expect(g).to.be.an(MultiPolygon);\n        expect(g.getCoordinates()).to.eql([[[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]], [[2, 3, 0], [2, 5, 0], [4, 5, 0], [2, 3, 0]], [[3, 4, 0], [3, 6, 0], [5, 6, 0], [3, 4, 0]]], [[[1, 2, 0], [3, 2, 0], [3, 4, 0], [1, 2, 0]]]]);\n        format = new GML32({\n          srsName: 'CRS:84',\n          surface: true\n        });\n        const serialized = format.writeGeometryNode(g);\n        expect(serialized.firstElementChild).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"generates undefined value","suites":["ol.format.GML32","when parsing empty attribute"],"updatePoint":{"line":1184,"column":33,"index":83144},"line":1184,"code":"    it('generates undefined value', function () {\n      const text = '<gml:featureMembers xmlns:gml=\"http://www.opengis.net/gml/3.2\">' + '  <topp:gnis_pop gml:id=\"gnis_pop.148604\" xmlns:topp=\"' + 'http://www.openplans.org/topp\">' + '    <gml:name>Aflu</gml:name>' + '    <topp:the_geom>' + '      <gml:Point srsName=\"urn:x-ogc:def:crs:EPSG:4326\">' + '        <gml:pos>34.12 2.09</gml:pos>' + '      </gml:Point>' + '    </topp:the_geom>' + '    <topp:population>84683</topp:population>' + '    <topp:country>Algeria</topp:country>' + '    <topp:type>place</topp:type>' + '    <topp:name>Aflu</topp:name>' + '    <topp:empty></topp:empty>' + '  </topp:gnis_pop>' + '</gml:featureMembers>';\n      const config = {\n        'featureNS': 'http://www.openplans.org/topp',\n        'featureType': 'gnis_pop'\n      };\n      const features = new GML32(config).readFeatures(text);\n      const feature = features[0];\n      expect(feature.get('empty')).to.be(undefined);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 1 feature","suites":["ol.format.GML32","when parsing CDATA attribute"],"updatePoint":{"line":1210,"column":25,"index":85137},"line":1210,"code":"    it('creates 1 feature', function () {\n      expect(features).to.have.length(1);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"converts XML attribute to text","suites":["ol.format.GML32","when parsing CDATA attribute"],"updatePoint":{"line":1213,"column":38,"index":85242},"line":1213,"code":"    it('converts XML attribute to text', function () {\n      expect(features[0].get('cdata')).to.be('<a>b</a>');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates 2 features","suites":["ol.format.GML32","when parsing multiple complex attributes"],"updatePoint":{"line":1231,"column":26,"index":85753},"line":1231,"code":"    it('creates 2 features', function () {\n      expect(features).to.have.length(2);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"creates feature with three attributeA properties and two attributeB properties","suites":["ol.format.GML32","when parsing multiple complex attributes"],"updatePoint":{"line":1234,"column":86,"index":85906},"line":1234,"code":"    it('creates feature with three attributeA properties and two attributeB properties', function () {\n      expect(features[0].values_['attributeA']).to.have.length(3);\n      expect(features[0].values_['attributeB']).to.have.length(2);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"parses mutliple complex elements to an array of objects","suites":["ol.format.GML32","when parsing multiple complex attributes"],"updatePoint":{"line":1238,"column":63,"index":86128},"line":1238,"code":"    it('parses mutliple complex elements to an array of objects', function () {\n      expect(features[0].values_['attributeA'][0]).to.be.a('object');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"correctly structures multiple elements with attributes","suites":["ol.format.GML32","when parsing multiple complex attributes"],"updatePoint":{"line":1241,"column":62,"index":86285},"line":1241,"code":"    it('correctly structures multiple elements with attributes', function () {\n      expect(features[0].values_['attributeA'][0]['xlink:href']).to.be('http://www.example.com/extern/1');\n      expect(features[0].values_['attributeA'][0]._content_).to.be(undefined);\n      expect(features[0].values_['attributeA'][1]['xlink:href']).to.be('http://www.example.com/extern/2');\n      expect(features[0].values_['attributeA'][2]._content_).to.be(undefined);\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"correctly structures multiple elements with complex content","suites":["ol.format.GML32","when parsing multiple complex attributes"],"updatePoint":{"line":1247,"column":67,"index":86749},"line":1247,"code":"    it('correctly structures multiple elements with complex content', function () {\n      expect(features[0].values_['attributeB'][0].Attribute.value).to.be('foo');\n      expect(features[0].values_['attributeB'][1].Attribute.value).to.be('bar');\n    });","file":"browser/spec/ol/format/gml.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection from document","suites":["ol.format.GPX","#readProjection"],"updatePoint":{"line":15,"column":52,"index":716},"line":15,"code":"    it('returns the default projection from document', function () {\n      const projection = format.readProjectionFromDocument();\n      expect(projection).to.eql(getProjection('EPSG:4326'));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection from node","suites":["ol.format.GPX","#readProjection"],"updatePoint":{"line":19,"column":48,"index":912},"line":19,"code":"    it('returns the default projection from node', function () {\n      const projection = format.readProjectionFromNode();\n      expect(projection).to.eql(getProjection('EPSG:4326'));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read an empty rte","suites":["ol.format.GPX","rte"],"updatePoint":{"line":25,"column":29,"index":1123},"line":25,"code":"    it('can read an empty rte', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\">' + '  <rte/>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(LineString);\n      expect(g.getCoordinates()).to.eql([]);\n      expect(g.getLayout()).to.be('XY');\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write various rte attributes","suites":["ol.format.GPX","rte"],"updatePoint":{"line":36,"column":49,"index":1586},"line":36,"code":"    it('can read and write various rte attributes', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <rte>' + '    <name>Name</name>' + '    <cmt>Comment</cmt>' + '    <desc>Description</desc>' + '    <src>Source</src>' + '    <link href=\"http://example.com/\">' + '      <text>Link text</text>' + '      <type>Link type</type>' + '    </link>' + '    <number>1</number>' + '    <type>Type</type>' + '  </rte>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      expect(f.get('name')).to.be('Name');\n      expect(f.get('cmt')).to.be('Comment');\n      expect(f.get('desc')).to.be('Description');\n      expect(f.get('src')).to.be('Source');\n      expect(f.get('link')).to.be('http://example.com/');\n      expect(f.get('linkText')).to.be('Link text');\n      expect(f.get('linkType')).to.be('Link type');\n      expect(f.get('number')).to.be(1);\n      expect(f.get('type')).to.be('Type');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write a rte with multiple rtepts","suites":["ol.format.GPX","rte"],"updatePoint":{"line":54,"column":53,"index":2929},"line":54,"code":"    it('can read and write a rte with multiple rtepts', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <rte>' + '    <rtept lat=\"1\" lon=\"2\"/>' + '    <rtept lat=\"3\" lon=\"4\"/>' + '  </rte>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(LineString);\n      expect(g.getCoordinates()).to.eql([[2, 1], [4, 3]]);\n      expect(g.getLayout()).to.be('XY');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can transform, read and write a rte","suites":["ol.format.GPX","rte"],"updatePoint":{"line":67,"column":43,"index":3783},"line":67,"code":"    it('can transform, read and write a rte', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <rte>' + '    <rtept lat=\"1\" lon=\"2\"/>' + '    <rtept lat=\"5\" lon=\"6\"/>' + '  </rte>' + '</gpx>';\n      const fs = format.readFeatures(text, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(LineString);\n      const p1 = transform([2, 1], 'EPSG:4326', 'EPSG:3857');\n      const p2 = transform([6, 5], 'EPSG:4326', 'EPSG:3857');\n      expect(g.getCoordinates()).to.eql([p1, p2]);\n      expect(g.getLayout()).to.be('XY');\n      const serialized = format.writeFeaturesNode(fs, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"does not write rte attributes in rtepts","suites":["ol.format.GPX","rte"],"updatePoint":{"line":86,"column":47,"index":4857},"line":86,"code":"    it('does not write rte attributes in rtepts', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <rte>' + '    <name>Name</name>' + '    <rtept lat=\"1\" lon=\"2\"/>' + '    <rtept lat=\"3\" lon=\"4\"/>' + '  </rte>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read an empty trk","suites":["ol.format.GPX","trk"],"updatePoint":{"line":94,"column":29,"index":5496},"line":94,"code":"    it('can read an empty trk', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\">' + '  <trk/>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(MultiLineString);\n      expect(g.getCoordinates()).to.eql([]);\n      expect(g.getLayout()).to.be('XY');\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write various trk attributes","suites":["ol.format.GPX","trk"],"updatePoint":{"line":105,"column":49,"index":5964},"line":105,"code":"    it('can read and write various trk attributes', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <trk>' + '    <name>Name</name>' + '    <cmt>Comment</cmt>' + '    <desc>Description</desc>' + '    <src>Source</src>' + '    <link href=\"http://example.com/\">' + '      <text>Link text</text>' + '      <type>Link type</type>' + '    </link>' + '    <number>1</number>' + '    <type>Type</type>' + '  </trk>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      expect(f.get('name')).to.be('Name');\n      expect(f.get('cmt')).to.be('Comment');\n      expect(f.get('desc')).to.be('Description');\n      expect(f.get('src')).to.be('Source');\n      expect(f.get('link')).to.be('http://example.com/');\n      expect(f.get('linkText')).to.be('Link text');\n      expect(f.get('linkType')).to.be('Link type');\n      expect(f.get('number')).to.be(1);\n      expect(f.get('type')).to.be('Type');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write a trk with an empty trkseg","suites":["ol.format.GPX","trk"],"updatePoint":{"line":123,"column":53,"index":7307},"line":123,"code":"    it('can read and write a trk with an empty trkseg', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <trk>' + '    <trkseg/>' + '  </trk>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(MultiLineString);\n      expect(g.getCoordinates()).to.eql([[]]);\n      expect(g.getLayout()).to.be('XY');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read/write a trk with a trkseg with multiple trkpts","suites":["ol.format.GPX","trk"],"updatePoint":{"line":136,"column":63,"index":8126},"line":136,"code":"    it('can read/write a trk with a trkseg with multiple trkpts', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <trk>' + '    <trkseg>' + '      <trkpt lat=\"1\" lon=\"2\">' + '        <ele>3</ele>' + '        <time>2010-01-10T09:29:12Z</time>' + '      </trkpt>' + '      <trkpt lat=\"5\" lon=\"6\">' + '        <ele>7</ele>' + '        <time>2010-01-10T09:30:12Z</time>' + '      </trkpt>' + '    </trkseg>' + '  </trk>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(MultiLineString);\n      expect(g.getCoordinates()).to.eql([[[2, 1, 3, 1263115752], [6, 5, 7, 1263115812]]]);\n      expect(g.getLayout()).to.be('XYZM');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can transform, read and write a trk with a trkseg","suites":["ol.format.GPX","trk"],"updatePoint":{"line":149,"column":57,"index":9250},"line":149,"code":"    it('can transform, read and write a trk with a trkseg', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <trk>' + '    <trkseg>' + '      <trkpt lat=\"1\" lon=\"2\">' + '        <ele>3</ele>' + '        <time>2010-01-10T09:29:12Z</time>' + '      </trkpt>' + '      <trkpt lat=\"5\" lon=\"6\">' + '        <ele>7</ele>' + '        <time>2010-01-10T09:30:12Z</time>' + '      </trkpt>' + '    </trkseg>' + '  </trk>' + '</gpx>';\n      const fs = format.readFeatures(text, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(MultiLineString);\n      const p1 = transform([2, 1], 'EPSG:4326', 'EPSG:3857');\n      p1.push(3, 1263115752);\n      const p2 = transform([6, 5], 'EPSG:4326', 'EPSG:3857');\n      p2.push(7, 1263115812);\n      expect(g.getCoordinates()).to.eql([[p1, p2]]);\n      expect(g.getLayout()).to.be('XYZM');\n      const serialized = format.writeFeaturesNode(fs, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write a trk with multiple trksegs","suites":["ol.format.GPX","trk"],"updatePoint":{"line":170,"column":54,"index":10617},"line":170,"code":"    it('can read and write a trk with multiple trksegs', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <trk>' + '    <trkseg>' + '      <trkpt lat=\"1\" lon=\"2\">' + '        <ele>3</ele>' + '        <time>2010-01-10T09:29:12Z</time>' + '      </trkpt>' + '      <trkpt lat=\"5\" lon=\"6\">' + '        <ele>7</ele>' + '        <time>2010-01-10T09:30:12Z</time>' + '      </trkpt>' + '    </trkseg>' + '    <trkseg>' + '      <trkpt lat=\"8\" lon=\"9\">' + '        <ele>10</ele>' + '        <time>2010-01-10T09:31:12Z</time>' + '      </trkpt>' + '      <trkpt lat=\"11\" lon=\"12\">' + '        <ele>13</ele>' + '        <time>2010-01-10T09:32:12Z</time>' + '      </trkpt>' + '    </trkseg>' + '  </trk>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(MultiLineString);\n      expect(g.getCoordinates()).to.eql([[[2, 1, 3, 1263115752], [6, 5, 7, 1263115812]], [[9, 8, 10, 1263115872], [12, 11, 13, 1263115932]]]);\n      expect(g.getLayout()).to.be('XYZM');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"does not write trk attributes in trkpts","suites":["ol.format.GPX","trk"],"updatePoint":{"line":183,"column":47,"index":12070},"line":183,"code":"    it('does not write trk attributes in trkpts', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <trk>' + '    <name>Name</name>' + '    <trkseg>' + '      <trkpt lat=\"1\" lon=\"2\">' + '        <ele>3</ele>' + '        <time>2010-01-10T09:29:12Z</time>' + '      </trkpt>' + '      <trkpt lat=\"5\" lon=\"6\">' + '        <ele>7</ele>' + '        <time>2010-01-10T09:30:12Z</time>' + '      </trkpt>' + '    </trkseg>' + '    <trkseg>' + '      <trkpt lat=\"8\" lon=\"9\">' + '        <ele>10</ele>' + '        <time>2010-01-10T09:31:12Z</time>' + '      </trkpt>' + '      <trkpt lat=\"11\" lon=\"12\">' + '        <ele>13</ele>' + '        <time>2010-01-10T09:32:12Z</time>' + '      </trkpt>' + '    </trkseg>' + '  </trk>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write a wpt","suites":["ol.format.GPX","wpt"],"updatePoint":{"line":191,"column":32,"index":13216},"line":191,"code":"    it('can read and write a wpt', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <wpt lat=\"1\" lon=\"2\"/>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(Point);\n      expect(g.getCoordinates()).to.eql([2, 1]);\n      expect(g.getLayout()).to.be('XY');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can transform, read and write a wpt","suites":["ol.format.GPX","wpt"],"updatePoint":{"line":204,"column":43,"index":13993},"line":204,"code":"    it('can transform, read and write a wpt', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <wpt lat=\"1\" lon=\"2\"/>' + '</gpx>';\n      const fs = format.readFeatures(text, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(Point);\n      const expectedPoint = transform([2, 1], 'EPSG:4326', 'EPSG:3857');\n      expect(g.getCoordinates()).to.eql(expectedPoint);\n      expect(g.getLayout()).to.be('XY');\n      const serialized = format.writeFeaturesNode(fs, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write a wpt with ele","suites":["ol.format.GPX","wpt"],"updatePoint":{"line":222,"column":41,"index":14948},"line":222,"code":"    it('can read and write a wpt with ele', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <wpt lat=\"1\" lon=\"2\">' + '    <ele>3</ele>' + '  </wpt>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(Point);\n      expect(g.getCoordinates()).to.eql([2, 1, 3]);\n      expect(g.getLayout()).to.be('XYZ');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write a wpt with time","suites":["ol.format.GPX","wpt"],"updatePoint":{"line":235,"column":42,"index":15761},"line":235,"code":"    it('can read and write a wpt with time', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <wpt lat=\"1\" lon=\"2\">' + '    <time>2010-01-10T09:29:12Z</time>' + '  </wpt>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(Point);\n      expect(g.getCoordinates()).to.eql([2, 1, 1263115752]);\n      expect(g.getLayout()).to.be('XYM');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write a wpt with ele and time","suites":["ol.format.GPX","wpt"],"updatePoint":{"line":248,"column":50,"index":16612},"line":248,"code":"    it('can read and write a wpt with ele and time', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <wpt lat=\"1\" lon=\"2\">' + '    <ele>3</ele>' + '    <time>2010-01-10T09:29:12Z</time>' + '  </wpt>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(Point);\n      expect(g.getCoordinates()).to.eql([2, 1, 3, 1263115752]);\n      expect(g.getLayout()).to.be('XYZM');\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read and write various wpt attributes","suites":["ol.format.GPX","wpt"],"updatePoint":{"line":261,"column":49,"index":17487},"line":261,"code":"    it('can read and write various wpt attributes', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"OpenLayers\">' + '  <wpt lat=\"1\" lon=\"2\">' + '    <magvar>11</magvar>' + '    <geoidheight>4</geoidheight>' + '    <name>Name</name>' + '    <cmt>Comment</cmt>' + '    <desc>Description</desc>' + '    <src>Source</src>' + '    <link href=\"http://example.com/\">' + '      <text>Link text</text>' + '      <type>Link type</type>' + '    </link>' + '    <sym>Symbol</sym>' + '    <type>Type</type>' + '    <fix>2d</fix>' + '    <sat>5</sat>' + '    <hdop>6</hdop>' + '    <vdop>7</vdop>' + '    <pdop>8</pdop>' + '    <ageofdgpsdata>9</ageofdgpsdata>' + '    <dgpsid>10</dgpsid>' + '  </wpt>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      expect(f.get('magvar')).to.be(11);\n      expect(f.get('geoidheight')).to.be(4);\n      expect(f.get('name')).to.be('Name');\n      expect(f.get('cmt')).to.be('Comment');\n      expect(f.get('desc')).to.be('Description');\n      expect(f.get('src')).to.be('Source');\n      expect(f.get('link')).to.be('http://example.com/');\n      expect(f.get('linkText')).to.be('Link text');\n      expect(f.get('linkType')).to.be('Link type');\n      expect(f.get('sym')).to.be('Symbol');\n      expect(f.get('type')).to.be('Type');\n      expect(f.get('fix')).to.be('2d');\n      expect(f.get('hdop')).to.be(6);\n      expect(f.get('vdop')).to.be(7);\n      expect(f.get('pdop')).to.be(8);\n      expect(f.get('ageofdgpsdata')).to.be(9);\n      expect(f.get('dgpsid')).to.be(10);\n      const serialized = format.writeFeaturesNode(fs);\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read features with a version 1.0 namespace","suites":["ol.format.GPX","XML namespace support"],"updatePoint":{"line":292,"column":54,"index":19543},"line":292,"code":"    it('can read features with a version 1.0 namespace', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/0\">' + '  <wpt/>' + '  <rte/>' + '  <trk/>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(3);\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read features with a version 1.1 namespace","suites":["ol.format.GPX","XML namespace support"],"updatePoint":{"line":297,"column":54,"index":19822},"line":297,"code":"    it('can read features with a version 1.1 namespace', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\">' + '  <wpt/>' + '  <rte/>' + '  <trk/>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(3);\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can read features with no namespace","suites":["ol.format.GPX","XML namespace support"],"updatePoint":{"line":302,"column":43,"index":20090},"line":302,"code":"    it('can read features with no namespace', function () {\n      const text = '<gpx>' + '  <wpt/>' + '  <rte/>' + '  <trk/>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(3);\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can process extensions from wpt","suites":["ol.format.GPX","extensions support"],"updatePoint":{"line":318,"column":39,"index":20652},"line":318,"code":"    it('can process extensions from wpt', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\">' + '  <wpt>' + '    <extensions>' + '      <id>feature-id</id>' + '    </extensions>' + '  </wpt>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const feature = fs[0];\n      expect(feature.getId()).to.be('feature-id');\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can process extensions from rte","suites":["ol.format.GPX","extensions support"],"updatePoint":{"line":325,"column":39,"index":21055},"line":325,"code":"    it('can process extensions from rte', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\">' + '  <rte>' + '    <extensions>' + '      <foo>bar</foo>' + '      <id>feature-id</id>' + '    </extensions>' + '  </rte>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const feature = fs[0];\n      expect(feature.getId()).to.be('feature-id');\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"can process extensions from trk, not trkpt","suites":["ol.format.GPX","extensions support"],"updatePoint":{"line":332,"column":50,"index":21494},"line":332,"code":"    it('can process extensions from trk, not trkpt', function () {\n      const text = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\">' + '  <trk>' + '    <extensions>' + '      <id>feature-id</id>' + '    </extensions>' + '    <trkseg>' + '      <trkpt>' + '        <extensions>' + '          <id>another-feature-id</id>' + '        </extensions>' + '      </trkpt>' + '    </trkseg>' + '  </trk>' + '</gpx>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const feature = fs[0];\n      expect(feature.getId()).to.be('feature-id');\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"does not fail","suites":["ol.format.GPX","write unsupported geometries"],"updatePoint":{"line":344,"column":21,"index":22170},"line":344,"code":"    it('does not fail', function () {\n      const polygon = new Polygon([[[0, 0], [2, 2], [4, 0], [0, 0]]]);\n      const feature = new Feature(polygon);\n      const features = [feature];\n      const gpx = format.writeFeaturesNode(features);\n      const expected = '<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 ' + 'http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" ' + 'creator=\"OpenLayers\"></gpx>';\n      expect(gpx).to.xmleql(parse(expected));\n    });","file":"browser/spec/ol/format/gpx.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection","suites":["ol.format.IGC","#readProjectionFromText"],"updatePoint":{"line":11,"column":38,"index":1045},"line":11,"code":"    it('returns the default projection', function () {\n      const projection = format.readProjectionFromText(igc);\n      expect(projection).to.eql(getProjection('EPSG:4326'));\n    });","file":"browser/spec/ol/format/igc.test.js","skipped":false,"dir":"test"},{"name":"does not read invalid features","suites":["ol.format.IGC","#readFeature"],"updatePoint":{"line":17,"column":38,"index":1277},"line":17,"code":"    it('does not read invalid features', function () {\n      expect(format.readFeature('invalid')).to.be(null);\n    });","file":"browser/spec/ol/format/igc.test.js","skipped":false,"dir":"test"},{"name":"does read a feature","suites":["ol.format.IGC","#readFeature"],"updatePoint":{"line":20,"column":27,"index":1386},"line":20,"code":"    it('does read a feature', function () {\n      const feature = format.readFeature(igc);\n      expect(feature).to.be.an(Feature);\n      const geom = feature.getGeometry();\n      expect(geom.getType()).to.eql('LineString');\n      expect(geom.getCoordinates()).to.eql([[6.851583333333333, 45.9376, 1303202928], [6.850183333333334, 45.93395, 1303203353], [6.800816666666667, 45.916066666666666, 1303203815], [6.851583333333333, 45.9376, 1303289328]]);\n    });","file":"browser/spec/ol/format/igc.test.js","skipped":false,"dir":"test"},{"name":"does transform and read a feature","suites":["ol.format.IGC","#readFeature"],"updatePoint":{"line":27,"column":41,"index":1859},"line":27,"code":"    it('does transform and read a feature', function () {\n      const feature = format.readFeature(igc, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(feature).to.be.an(Feature);\n      const geom = feature.getGeometry();\n      expect(geom.getType()).to.eql('LineString');\n      const expectedPoint1 = transform([6.851583333333333, 45.9376], 'EPSG:4326', 'EPSG:3857');\n      expectedPoint1.push(1303202928);\n      const expectedPoint2 = transform([6.850183333333334, 45.93395], 'EPSG:4326', 'EPSG:3857');\n      expectedPoint2.push(1303203353);\n      const expectedPoint3 = transform([6.800816666666667, 45.916066666666666], 'EPSG:4326', 'EPSG:3857');\n      expectedPoint3.push(1303203815);\n      const expectedPoint4 = transform([6.851583333333333, 45.9376], 'EPSG:4326', 'EPSG:3857');\n      expectedPoint4.push(1303289328);\n      expect(geom.getCoordinates()).to.eql([expectedPoint1, expectedPoint2, expectedPoint3, expectedPoint4]);\n    });","file":"browser/spec/ol/format/igc.test.js","skipped":false,"dir":"test"},{"name":"does not read invalid features","suites":["ol.format.IGC","#readFeatures"],"updatePoint":{"line":46,"column":38,"index":2863},"line":46,"code":"    it('does not read invalid features', function () {\n      expect(format.readFeatures('invalid')).to.be.empty();\n    });","file":"browser/spec/ol/format/igc.test.js","skipped":false,"dir":"test"},{"name":"does read features","suites":["ol.format.IGC","#readFeatures"],"updatePoint":{"line":49,"column":26,"index":2974},"line":49,"code":"    it('does read features', function () {\n      const features = format.readFeatures(igc);\n      expect(features.length).to.eql(1);\n      const feature = features[0];\n      expect(feature).to.be.an(Feature);\n      const geom = feature.getGeometry();\n      expect(geom.getType()).to.eql('LineString');\n      expect(geom.getCoordinates()).to.eql([[6.851583333333333, 45.9376, 1303202928], [6.850183333333334, 45.93395, 1303203353], [6.800816666666667, 45.916066666666666, 1303203815], [6.851583333333333, 45.9376, 1303289328]]);\n    });","file":"browser/spec/ol/format/igc.test.js","skipped":false,"dir":"test"},{"name":"does transform and read features","suites":["ol.format.IGC","#readFeatures"],"updatePoint":{"line":58,"column":40,"index":3524},"line":58,"code":"    it('does transform and read features', function () {\n      const features = format.readFeatures(igc, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(features.length).to.eql(1);\n      const feature = features[0];\n      expect(feature).to.be.an(Feature);\n      const geom = feature.getGeometry();\n      expect(geom.getType()).to.eql('LineString');\n      const expectedPoint1 = transform([6.851583333333333, 45.9376], 'EPSG:4326', 'EPSG:3857');\n      expectedPoint1.push(1303202928);\n      const expectedPoint2 = transform([6.850183333333334, 45.93395], 'EPSG:4326', 'EPSG:3857');\n      expectedPoint2.push(1303203353);\n      const expectedPoint3 = transform([6.800816666666667, 45.916066666666666], 'EPSG:4326', 'EPSG:3857');\n      expectedPoint3.push(1303203815);\n      const expectedPoint4 = transform([6.851583333333333, 45.9376], 'EPSG:4326', 'EPSG:3857');\n      expectedPoint4.push(1303289328);\n      expect(geom.getCoordinates()).to.eql([expectedPoint1, expectedPoint2, expectedPoint3, expectedPoint4]);\n    });","file":"browser/spec/ol/format/igc.test.js","skipped":false,"dir":"test"},{"name":"can handle image info JSON as object or as string serialization","suites":["ol.format.IIIFInfo","setImageInfo"],"updatePoint":{"line":5,"column":71,"index":272},"line":5,"code":"    it('can handle image info JSON as object or as string serialization', function () {\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        '@id': 'http://iiif.test/id'\n      });\n      expect(iiifInfo.getImageApiVersion()).to.be(Versions.VERSION3);\n      iiifInfo.setImageInfo('{\"@context\": \"http://iiif.io/api/image/2/context.json\",\"@id\":\"http://iiif.test/id\"}');\n      expect(iiifInfo.getImageApiVersion()).to.be(Versions.VERSION2);\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"provides the correct Image API version","suites":["ol.format.IIIFInfo","getImageApiVersion"],"updatePoint":{"line":16,"column":46,"index":792},"line":16,"code":"    it('provides the correct Image API version', function () {\n      iiifInfo.setImageInfo({\n        '@id': 'http://iiif.test/id'\n      });\n      expect(function () {\n        iiifInfo.getImageApiVersion();\n      }).to.throwException();\n      iiifInfo.setImageInfo({\n        identifier: 'http://iiif.test/id',\n        profile: 'this is no valid profile'\n      });\n      expect(function () {\n        iiifInfo.getImageApiVersion();\n      }).to.throwException();\n      iiifInfo.setImageInfo({\n        '@context': 'this is no valid context',\n        '@id': 'http://iiif.test/id'\n      });\n      expect(function () {\n        iiifInfo.getImageApiVersion();\n      }).to.throwException();\n      iiifInfo.setImageInfo({\n        identifier: 'http://iiif.test/id',\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level0'\n      });\n      expect(iiifInfo.getImageApiVersion()).to.be(Versions.VERSION1);\n      iiifInfo.setImageInfo({\n        '@context': 'http://library.stanford.edu/iiif/image-api/1.1/context.json',\n        '@id': 'http://iiif.test/id'\n      });\n      expect(iiifInfo.getImageApiVersion()).to.be(Versions.VERSION1);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/1/context.json',\n        identifier: 'http://iiif.test/id'\n      });\n      expect(iiifInfo.getImageApiVersion()).to.be(Versions.VERSION1);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        '@id': 'http://iiif.test/id'\n      });\n      expect(iiifInfo.getImageApiVersion()).to.be(Versions.VERSION2);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        id: 'http://iiif.test/id'\n      });\n      expect(iiifInfo.getImageApiVersion()).to.be(Versions.VERSION3);\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"detects the correct compliance level","suites":["ol.format.IIIFInfo","getComplianceLevelFromProfile"],"updatePoint":{"line":65,"column":44,"index":2642},"line":65,"code":"    it('detects the correct compliance level', function () {\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        profile: 'level0'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be(undefined);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        profile: 'http://iiif.io/api/image/level3.json'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be(undefined);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        profile: 'level1'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be(undefined);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        profile: 'http://iiif.io/api/image/2/level2.json'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be('level2');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        profile: ['http://iiif.io/api/image/2/level1.json']\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be('level1');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        profile: 'level4'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be(undefined);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        profile: 'http://iiif.io/api/image/3/level3.json'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be(undefined);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        profile: 'http://iiif.io/api/image/2/level1.json'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be(undefined);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        profile: 'level2'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be('level2');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        profile: 'http://iiif.io/api/image/3/level1.json'\n      });\n      expect(iiifInfo.getComplianceLevelFromProfile()).to.be('level1');\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"provides the correct features for given versions and compliance levels","suites":["ol.format.IIIFInfo","getComplianceLevelSupportedFeatures"],"updatePoint":{"line":119,"column":78,"index":5023},"line":119,"code":"    it('provides the correct features for given versions and compliance levels', function () {\n      iiifInfo.setImageInfo({\n        '@context': 'http://library.stanford.edu/iiif/image-api/1.1/context.json',\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level0'\n      });\n      let level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.be.empty();\n      iiifInfo.setImageInfo({\n        '@context': 'http://library.stanford.edu/iiif/image-api/1.1/context.json',\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level1'\n      });\n      level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.have.length(4);\n      expect(level.supports).to.contain('regionByPx');\n      expect(level.supports).to.contain('sizeByW');\n      expect(level.supports).to.contain('sizeByH');\n      expect(level.supports).to.contain('sizeByPct');\n      iiifInfo.setImageInfo({\n        '@context': 'http://library.stanford.edu/iiif/image-api/1.1/context.json',\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level2'\n      });\n      level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.have.length(7);\n      expect(level.supports).to.contain('regionByPx');\n      expect(level.supports).to.contain('regionByPct');\n      expect(level.supports).to.contain('sizeByW');\n      expect(level.supports).to.contain('sizeByH');\n      expect(level.supports).to.contain('sizeByPct');\n      expect(level.supports).to.contain('sizeByConfinedWh');\n      expect(level.supports).to.contain('sizeByWh');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        profile: 'http://iiif.io/api/image/2/level0.json'\n      });\n      level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.be.empty();\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        profile: 'http://iiif.io/api/image/2/level1.json'\n      });\n      level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.have.length(4);\n      expect(level.supports).to.contain('regionByPx');\n      expect(level.supports).to.contain('sizeByW');\n      expect(level.supports).to.contain('sizeByH');\n      expect(level.supports).to.contain('sizeByPct');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        profile: 'http://iiif.io/api/image/2/level2.json'\n      });\n      level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.have.length(8);\n      expect(level.supports).to.contain('regionByPx');\n      expect(level.supports).to.contain('regionByPct');\n      expect(level.supports).to.contain('sizeByW');\n      expect(level.supports).to.contain('sizeByH');\n      expect(level.supports).to.contain('sizeByPct');\n      expect(level.supports).to.contain('sizeByConfinedWh');\n      expect(level.supports).to.contain('sizeByDistortedWh');\n      expect(level.supports).to.contain('sizeByWh');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        profile: 'level0'\n      });\n      level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.be.empty();\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        profile: 'level1'\n      });\n      level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.have.length(5);\n      expect(level.supports).to.contain('regionByPx');\n      expect(level.supports).to.contain('regionSquare');\n      expect(level.supports).to.contain('sizeByW');\n      expect(level.supports).to.contain('sizeByH');\n      expect(level.supports).to.contain('sizeByWh');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        profile: 'level2'\n      });\n      level = iiifInfo.getComplianceLevelSupportedFeatures();\n      expect(level.supports).to.have.length(8);\n      expect(level.supports).to.contain('regionByPx');\n      expect(level.supports).to.contain('regionByPct');\n      expect(level.supports).to.contain('regionSquare');\n      expect(level.supports).to.contain('sizeByW');\n      expect(level.supports).to.contain('sizeByH');\n      expect(level.supports).to.contain('sizeByWh');\n      expect(level.supports).to.contain('sizeByConfinedWh');\n      expect(level.supports).to.contain('sizeByPct');\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"produces options from minimal information responses","suites":["ol.format.IIIFInfo","getTileSourceOptions"],"updatePoint":{"line":213,"column":59,"index":9601},"line":213,"code":"    it('produces options from minimal information responses', function () {\n      expect(function () {\n        iiifInfo.setImageInfo({\n          width: 2000,\n          height: 1500\n        });\n        iiifInfo.getTileSourceOptions();\n      }).to.throwException();\n      iiifInfo.setImageInfo({\n        identifier: 'id',\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level0'\n      });\n      let options = iiifInfo.getTileSourceOptions();\n      expect(options).to.be.an('object');\n      expect(options).to.have.property('version', Versions.VERSION1);\n      iiifInfo.setImageInfo({\n        identifier: 'identifier-version-1.0',\n        width: 2000,\n        height: 1500,\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level0'\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options).to.not.be(undefined);\n      expect(options).to.not.be(null);\n      expect(options).to.have.property('version', Versions.VERSION1);\n      expect(options).to.have.property('size');\n      expect(options.size).to.be.an('array');\n      expect(options.size.length).to.be(2);\n      expect(options.size[0]).to.be(2000);\n      expect(options.size[1]).to.be(1500);\n      expect(options.quality).to.be('native');\n      expect(options.url).to.be(undefined);\n      expect(options.sizes).to.be(undefined);\n      expect(options.tileSize).to.be(undefined);\n      expect(options.format).to.be('jpg');\n      expect(options.supports).to.be.empty();\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        '@id': 'http://iiif.test/version2/id'\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options).to.be.an('object');\n      expect(options).to.have.property('version', Versions.VERSION2);\n      expect(options).to.have.property('url', 'http://iiif.test/version2/id');\n      expect(options).to.have.property('format', 'jpg');\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"uses preferred options if applicable","suites":["ol.format.IIIFInfo","getTileSourceOptions"],"updatePoint":{"line":259,"column":44,"index":11535},"line":259,"code":"    it('uses preferred options if applicable', function () {\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        '@id': 'http://iiif.test/version2/id',\n        width: 2000,\n        height: 1500,\n        profile: ['http://iiif.io/api/image/2/level2.json']\n      });\n      let options = iiifInfo.getTileSourceOptions({\n        quality: 'bitonal',\n        format: 'png'\n      });\n      expect(options).to.have.property('quality', 'bitonal');\n      expect(options).to.have.property('format', 'png');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        '@id': 'http://iiif.test/version3/id',\n        width: 2000,\n        height: 1500,\n        profile: 'level2',\n        extraQualities: ['gray', 'bitonal']\n      });\n      options = iiifInfo.getTileSourceOptions({\n        quality: 'bitonal',\n        format: 'png'\n      });\n      expect(options).to.have.property('quality', 'bitonal');\n      expect(options).to.have.property('format', 'png');\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"ignores preferred options that are not supported","suites":["ol.format.IIIFInfo","getTileSourceOptions"],"updatePoint":{"line":288,"column":56,"index":12591},"line":288,"code":"    it('ignores preferred options that are not supported', function () {\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        '@id': 'http://iiif.test/version2/id',\n        width: 2000,\n        height: 1500,\n        profile: ['http://iiif.io/api/image/2/level1.json']\n      });\n      let options = iiifInfo.getTileSourceOptions({\n        quality: 'bitonal',\n        format: 'png'\n      });\n      expect(options).to.have.property('quality', 'default');\n      expect(options).to.have.property('format', 'jpg');\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        '@id': 'http://iiif.test/version3/id',\n        width: 2000,\n        height: 1500,\n        profile: 'level1'\n      });\n      options = iiifInfo.getTileSourceOptions({\n        quality: 'bitonal',\n        format: 'png'\n      });\n      expect(options).to.have.property('quality', 'default');\n      expect(options).to.have.property('format', 'jpg');\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"combines supported features indicated by compliance level and explicitly stated in image info","suites":["ol.format.IIIFInfo","getTileSourceOptions"],"updatePoint":{"line":316,"column":101,"index":13647},"line":316,"code":"    it('combines supported features indicated by compliance level and explicitly stated in image info', function () {\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        '@id': 'http://iiif.test/id',\n        profile: ['http://iiif.io/api/image/2/level1.json', {\n          supports: ['regionByPct', 'sizeByWh']\n        }]\n      });\n      let options = iiifInfo.getTileSourceOptions();\n      expect(options.supports).to.contain('regionByPct');\n      expect(options.supports).to.contain('sizeByWh');\n      expect(options.supports).to.contain('regionByPx');\n      expect(options.supports).to.contain('sizeByW');\n      expect(options.supports).to.contain('sizeByH');\n      expect(options.supports).to.contain('sizeByPct');\n      expect(options.supports).to.have.length(6);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        id: 'http://iiif.test/id',\n        profile: 'level1',\n        extraFeatures: ['regionByPct', 'sizeByPct']\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options.supports).to.contain('regionByPct');\n      expect(options.supports).to.contain('sizeByPct');\n      expect(options.supports).to.contain('regionByPx');\n      expect(options.supports).to.contain('regionSquare');\n      expect(options.supports).to.contain('sizeByW');\n      expect(options.supports).to.contain('sizeByH');\n      expect(options.supports).to.contain('sizeByWh');\n      expect(options.supports).to.have.length(7);\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"uses the first available scale factors and tile sizes","suites":["ol.format.IIIFInfo","getTileSourceOptions"],"updatePoint":{"line":348,"column":61,"index":15141},"line":348,"code":"    it('uses the first available scale factors and tile sizes', function () {\n      iiifInfo.setImageInfo({\n        '@context': 'http://library.stanford.edu/iiif/image-api/1.1/context.json',\n        '@id': 'http://iiif.test/id',\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level0'\n      });\n      let options = iiifInfo.getTileSourceOptions();\n      expect(options.resolutions).to.be(undefined);\n      expect(options.tileSize).to.be(undefined);\n      iiifInfo.setImageInfo({\n        '@context': 'http://library.stanford.edu/iiif/image-api/1.1/context.json',\n        '@id': 'http://iiif.test/id',\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level0',\n        scale_factors: [1, 2, 4],\n        tile_width: 512\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options.resolutions).to.have.length(3);\n      expect(options.resolutions).to.contain(1);\n      expect(options.resolutions).to.contain(2);\n      expect(options.resolutions).to.contain(4);\n      expect(options.tileSize).to.have.length(2);\n      expect(options.tileSize[0]).to.be(512);\n      expect(options.tileSize[1]).to.be(512);\n      iiifInfo.setImageInfo({\n        '@context': 'http://library.stanford.edu/iiif/image-api/1.1/context.json',\n        '@id': 'http://iiif.test/id',\n        profile: 'http://library.stanford.edu/iiif/image-api/compliance.html#level0',\n        scale_factors: [1, 2, 4],\n        tile_width: 512,\n        tile_height: 1024\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options.resolutions).to.have.length(3);\n      expect(options.resolutions).to.contain(1);\n      expect(options.resolutions).to.contain(2);\n      expect(options.resolutions).to.contain(4);\n      expect(options.tileSize).to.have.length(2);\n      expect(options.tileSize[0]).to.be(512);\n      expect(options.tileSize[1]).to.be(1024);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        '@id': 'http://iiif.test/id',\n        profile: 'http://iiif.io/api/image/2/level0.json'\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options.resolutions).to.be(undefined);\n      expect(options.tileSize).to.be(undefined);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        '@id': 'http://iiif.test/id',\n        profile: 'http://iiif.io/api/image/2/level0.json',\n        tiles: [{\n          scaleFactors: [1, 2, 4],\n          width: 512\n        }, {\n          scaleFactors: [1, 2, 4, 8, 16],\n          width: 256\n        }]\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options.resolutions).to.have.length(3);\n      expect(options.resolutions).to.contain(1);\n      expect(options.resolutions).to.contain(2);\n      expect(options.resolutions).to.contain(4);\n      expect(options.tileSize).to.have.length(2);\n      expect(options.tileSize[0]).to.be(512);\n      expect(options.tileSize[1]).to.be(512);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/2/context.json',\n        '@id': 'http://iiif.test/id',\n        profile: 'http://iiif.io/api/image/2/level0.json',\n        tiles: [{\n          scaleFactors: [1, 2, 4],\n          width: 512,\n          height: 1024\n        }]\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options.resolutions).to.have.length(3);\n      expect(options.resolutions).to.contain(1);\n      expect(options.resolutions).to.contain(2);\n      expect(options.resolutions).to.contain(4);\n      expect(options.tileSize).to.have.length(2);\n      expect(options.tileSize[0]).to.be(512);\n      expect(options.tileSize[1]).to.be(1024);\n      iiifInfo.setImageInfo({\n        '@context': 'http://iiif.io/api/image/3/context.json',\n        '@id': 'http://iiif.test/id',\n        profile: 'level0',\n        tiles: [{\n          scaleFactors: [1, 2, 4, 8],\n          width: 512,\n          height: 256\n        }]\n      });\n      options = iiifInfo.getTileSourceOptions();\n      expect(options.resolutions).to.have.length(4);\n      expect(options.resolutions).to.contain(1);\n      expect(options.resolutions).to.contain(2);\n      expect(options.resolutions).to.contain(4);\n      expect(options.resolutions).to.contain(8);\n      expect(options.tileSize).to.have.length(2);\n      expect(options.tileSize[0]).to.be(512);\n      expect(options.tileSize[1]).to.be(256);\n    });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"provides each given size in sizes as OpenLayers Size","suites":["ol.format.IIIFInfo","getTileSourceOptions"],"updatePoint":{"line":455,"column":58,"index":19571},"line":455,"code":"  it('provides each given size in sizes as OpenLayers Size', function () {\n    iiifInfo.setImageInfo({\n      '@context': 'http://iiif.io/api/image/2/context.json',\n      '@id': 'http://iiif.test/id',\n      'sizes': [{\n        width: 2000,\n        height: 1000\n      }, {\n        width: 1000,\n        height: 500\n      }, {\n        width: 500,\n        height: 250\n      }]\n    });\n    let options = iiifInfo.getTileSourceOptions();\n    expect(options.sizes).to.have.length(3);\n    expect(options.sizes[0]).to.have.length(2);\n    expect(options.sizes[0][0]).to.be(2000);\n    expect(options.sizes[0][1]).to.be(1000);\n    expect(options.sizes[1]).to.have.length(2);\n    expect(options.sizes[1][0]).to.be(1000);\n    expect(options.sizes[1][1]).to.be(500);\n    expect(options.sizes[2]).to.have.length(2);\n    expect(options.sizes[2][0]).to.be(500);\n    expect(options.sizes[2][1]).to.be(250);\n    iiifInfo.setImageInfo({\n      '@context': 'http://iiif.io/api/image/3/context.json',\n      '@id': 'http://iiif.test/id',\n      'sizes': [{\n        width: 1500,\n        height: 800\n      }]\n    });\n    options = iiifInfo.getTileSourceOptions();\n    expect(options.sizes).to.have.length(1);\n    expect(options.sizes[0]).to.have.length(2);\n    expect(options.sizes[0][0]).to.be(1500);\n    expect(options.sizes[0][1]).to.be(800);\n  });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"respects the preferred image formats","suites":["ol.format.IIIFInfo","getTileSourceOptions"],"updatePoint":{"line":495,"column":42,"index":20878},"line":495,"code":"  it('respects the preferred image formats', function () {\n    iiifInfo.setImageInfo({\n      '@context': 'http://iiif.io/api/image/3/context.json',\n      'id': 'http://iiif.test/id',\n      'profile': 'level0',\n      'preferredFormats': ['png', 'gif']\n    });\n    let options = iiifInfo.getTileSourceOptions();\n    expect(options.format).to.be('jpg');\n    iiifInfo.setImageInfo({\n      '@context': 'http://iiif.io/api/image/3/context.json',\n      'id': 'http://iiif.test/id',\n      'profile': 'level1',\n      'preferredFormats': ['png', 'gif']\n    });\n    options = iiifInfo.getTileSourceOptions();\n    expect(options.format).to.be('jpg');\n    iiifInfo.setImageInfo({\n      '@context': 'http://iiif.io/api/image/3/context.json',\n      'id': 'http://iiif.test/id',\n      'profile': 'level1',\n      'extraFormats': ['webp', 'gif'],\n      'preferredFormats': ['webp', 'png', 'gif']\n    });\n    options = iiifInfo.getTileSourceOptions();\n    expect(options.format).to.be('gif');\n    iiifInfo.setImageInfo({\n      '@context': 'http://iiif.io/api/image/3/context.json',\n      'id': 'http://iiif.test/id',\n      'profile': 'level2',\n      'preferredFormats': ['png', 'gif']\n    });\n    options = iiifInfo.getTileSourceOptions();\n    expect(options.format).to.be('png');\n  });","file":"browser/spec/ol/format/iiif.test.js","skipped":false,"dir":"test"},{"name":"set constant variables","suites":["ol.format.KML","using defaultStyle"],"updatePoint":{"line":32,"column":30,"index":1889},"line":32,"code":"    it('set constant variables', function () {\n      expect(getDefaultStyleArray()).to.be.an(Array);\n    });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can apply a default style to a feature","suites":["ol.format.KML","using defaultStyle","#readFeatures"],"updatePoint":{"line":36,"column":48,"index":2060},"line":36,"code":"      it('can apply a default style to a feature', function () {\n        const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark/>' + '  </Document>' + '</kml>';\n        const fs = format.readFeatures(text);\n        expect(fs).to.have.length(1);\n        const f = fs[0];\n        expect(f).to.be.an(Feature);\n        const styleFunction = f.getStyleFunction();\n        expect(styleFunction).not.to.be(undefined);\n        const styleArray = styleFunction(f, 0);\n        expect(styleArray).to.be.an(Array);\n        expect(styleArray).to.have.length(1);\n        const style = styleArray[0];\n        expect(style).to.be.an(Style);\n        expect(style).to.be(dfltStyle);\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"set constant variables","suites":["ol.format.KML","without parameters"],"updatePoint":{"line":57,"column":30,"index":2882},"line":57,"code":"    it('set constant variables', function () {\n      expect(getDefaultStyleArray()).to.be.an(Array);\n    });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection from document","suites":["ol.format.KML","without parameters","#readProjection"],"updatePoint":{"line":61,"column":54,"index":3061},"line":61,"code":"      it('returns the default projection from document', function () {\n        const projection = format.readProjectionFromDocument();\n        expect(projection).to.eql(getProjection('EPSG:4326'));\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection from node","suites":["ol.format.KML","without parameters","#readProjection"],"updatePoint":{"line":65,"column":50,"index":3265},"line":65,"code":"      it('returns the default projection from node', function () {\n        const projection = format.readProjectionFromNode();\n        expect(projection).to.eql(getProjection('EPSG:4326'));\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a Feature's id","suites":["ol.format.KML","without parameters","#readFeatures","id"],"updatePoint":{"line":72,"column":35,"index":3537},"line":72,"code":"        it(\"can read a Feature's id\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark id=\"foo\"/>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.getId()).to.be('foo');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"treats a missing id as undefined","suites":["ol.format.KML","without parameters","#readFeatures","id"],"updatePoint":{"line":80,"column":44,"index":3917},"line":80,"code":"        it('treats a missing id as undefined', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark/>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.getId()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write a Feature","suites":["ol.format.KML","without parameters","#readFeatures","id"],"updatePoint":{"line":88,"column":31,"index":4279},"line":88,"code":"        it('can write a Feature', function () {\n          const features = [new Feature()];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark/>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write a Feature as string","suites":["ol.format.KML","without parameters","#readFeatures","id"],"updatePoint":{"line":94,"column":41,"index":4824},"line":94,"code":"        it('can write a Feature as string', function () {\n          const features = [new Feature()];\n          const node = format.writeFeatures(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark/>' + '</kml>';\n          expect(parse(node)).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write a Feature's id","suites":["ol.format.KML","without parameters","#readFeatures","id"],"updatePoint":{"line":100,"column":36,"index":5367},"line":100,"code":"        it(\"can write a Feature's id\", function () {\n          const feature = new Feature();\n          feature.setId('foo');\n          const features = [feature];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark id=\"foo\"/>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"treats a missing geometry as null","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":110,"column":45,"index":6043},"line":110,"code":"        it('treats a missing geometry as null', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark/>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be(null);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write feature with null geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":119,"column":50,"index":6448},"line":119,"code":"        it('can write feature with null geometries', function () {\n          const features = [new Feature(null)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark/>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write properties","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":125,"column":32,"index":6988},"line":125,"code":"        it('can write properties', function () {\n          const lineString = new LineString([[1, 2], [3, 4]]);\n          lineString.set('extrude', false);\n          lineString.set('tessellate', true);\n          lineString.set('altitudeMode', 'clampToGround');\n          lineString.set('unsupportedProperty', 'foo');\n          const features = [new Feature(lineString)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LineString>' + '      <extrude>0</extrude>' + '      <tessellate>1</tessellate>' + '      <altitudeMode>clampToGround</altitudeMode>' + '      <coordinates>1,2 3,4</coordinates>' + '    </LineString>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read Point geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":136,"column":37,"index":8034},"line":136,"code":"        it('can read Point geometries', function () {\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2,3</coordinates>' + '      <extrude>0</extrude>' + '      <altitudeMode>absolute</altitudeMode>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Point);\n          expect(g.getCoordinates()).to.eql([1, 2, 3]);\n          expect(g.get('extrude')).to.be(false);\n          expect(g.get('altitudeMode')).to.be('absolute');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can transform and read Point geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":148,"column":51,"index":9004},"line":148,"code":"        it('can transform and read Point geometries', function () {\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2,3</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text, {\n            featureProjection: 'EPSG:3857'\n          });\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Point);\n          const expectedPoint = transform([1, 2], 'EPSG:4326', 'EPSG:3857');\n          expectedPoint.push(3);\n          expect(g.getCoordinates()).to.eql(expectedPoint);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a single Point geometry","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":162,"column":44,"index":9952},"line":162,"code":"        it('can read a single Point geometry', function () {\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2,3</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          const f = format.readFeature(text);\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Point);\n          expect(g.getCoordinates()).to.eql([1, 2, 3]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can transform and read a single Point geometry","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":170,"column":58,"index":10673},"line":170,"code":"        it('can transform and read a single Point geometry', function () {\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2,3</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          const f = format.readFeature(text, {\n            featureProjection: 'EPSG:3857'\n          });\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Point);\n          const expectedPoint = transform([1, 2], 'EPSG:4326', 'EPSG:3857');\n          expectedPoint.push(3);\n          expect(g.getCoordinates()).to.eql(expectedPoint);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XY Point geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":182,"column":41,"index":11549},"line":182,"code":"        it('can write XY Point geometries', function () {\n          const layout = 'XY';\n          const point = new Point([1, 2], layout);\n          const features = [new Feature(point)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYZ Point geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":190,"column":42,"index":12274},"line":190,"code":"        it('can write XYZ Point geometries', function () {\n          const layout = 'XYZ';\n          const point = new Point([1, 2, 3], layout);\n          const features = [new Feature(point)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2,3</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can transform and write XYZ Point geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":198,"column":56,"index":13019},"line":198,"code":"        it('can transform and write XYZ Point geometries', function () {\n          addProjection(new Projection({\n            code: 'double'\n          }));\n          addCoordinateTransforms('EPSG:4326', 'double', function (coordinate) {\n            return [2 * coordinate[0], 2 * coordinate[1]];\n          }, function (coordinate) {\n            return [coordinate[0] / 2, coordinate[1] / 2];\n          });\n          const layout = 'XYZ';\n          const point = new Point([1, 2, 3], layout).transform('EPSG:4326', 'double');\n          const features = [new Feature(point)];\n          const node = format.writeFeaturesNode(features, {\n            featureProjection: 'double'\n          });\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2,3</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n          removeTransform(getProjection('EPSG:4326'), getProjection('double'));\n          removeTransform(getProjection('double'), getProjection('EPSG:4326'));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYM Point geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":218,"column":42,"index":14331},"line":218,"code":"        it('can write XYM Point geometries', function () {\n          const layout = 'XYM';\n          const point = new Point([1, 2, 100], layout);\n          const features = [new Feature(point)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYZM Point geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":226,"column":43,"index":15063},"line":226,"code":"        it('can write XYZM Point geometries', function () {\n          const layout = 'XYZM';\n          const point = new Point([1, 2, 3, 100], layout);\n          const features = [new Feature(point)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2,3</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read LineString geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":234,"column":42,"index":15800},"line":234,"code":"        it('can read LineString geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <LineString>' + '      <coordinates>1,2,3 4,5,6</coordinates>' + '      <extrude>0</extrude>' + '      <tessellate>1</tessellate>' + '      <altitudeMode>absolute</altitudeMode>' + '    </LineString>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(LineString);\n          expect(g.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n          expect(g.get('extrude')).to.be(false);\n          expect(g.get('tessellate')).to.be(true);\n          expect(g.get('altitudeMode')).to.be('absolute');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read XY coordinates","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":247,"column":35,"index":16653},"line":247,"code":"        it('can read XY coordinates', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <LineString>' + '      <coordinates>1,2 3,4</coordinates>' + '      <extrude>0</extrude>' + '      <tessellate>1</tessellate>' + '      <altitudeMode>absolute</altitudeMode>' + '    </LineString>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(LineString);\n          expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0]]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read empty Z coordinates","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":257,"column":40,"index":17348},"line":257,"code":"        it('can read empty Z coordinates', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <LineString>' + '      <coordinates>1,2, 3,4,</coordinates>' + '      <extrude>0</extrude>' + '      <tessellate>1</tessellate>' + '      <altitudeMode>absolute</altitudeMode>' + '    </LineString>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(LineString);\n          expect(g.getCoordinates()).to.eql([[1, 2, 0], [3, 4, 0]]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XY LineString geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":267,"column":46,"index":18051},"line":267,"code":"        it('can write XY LineString geometries', function () {\n          const layout = 'XY';\n          const lineString = new LineString([[1, 2], [3, 4]], layout);\n          const features = [new Feature(lineString)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LineString>' + '      <coordinates>1,2 3,4</coordinates>' + '    </LineString>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYZ LineString geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":275,"column":47,"index":18820},"line":275,"code":"        it('can write XYZ LineString geometries', function () {\n          const layout = 'XYZ';\n          const lineString = new LineString([[1, 2, 3], [4, 5, 6]], layout);\n          const features = [new Feature(lineString)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LineString>' + '      <coordinates>1,2,3 4,5,6</coordinates>' + '    </LineString>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYM LineString geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":283,"column":47,"index":19600},"line":283,"code":"        it('can write XYM LineString geometries', function () {\n          const layout = 'XYM';\n          const lineString = new LineString([[1, 2, 100], [3, 4, 200]], layout);\n          const features = [new Feature(lineString)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LineString>' + '      <coordinates>1,2 3,4</coordinates>' + '    </LineString>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYZM LineString geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":291,"column":48,"index":20381},"line":291,"code":"        it('can write XYZM LineString geometries', function () {\n          const layout = 'XYZM';\n          const lineString = new LineString([[1, 2, 3, 100], [4, 5, 6, 200]], layout);\n          const features = [new Feature(lineString)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LineString>' + '      <coordinates>1,2,3 4,5,6</coordinates>' + '    </LineString>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read LinearRing geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":299,"column":42,"index":21167},"line":299,"code":"        it('can read LinearRing geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <LinearRing>' + '      <coordinates>1,2,3 4,5,6 7,8,9</coordinates>' + '    </LinearRing>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Polygon);\n          expect(g.getCoordinates()).to.eql([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XY LinearRing geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":309,"column":46,"index":21772},"line":309,"code":"        it('can write XY LinearRing geometries', function () {\n          const layout = 'XY';\n          const linearRing = new LinearRing([[1, 2], [3, 4], [1, 2]], layout);\n          const features = [new Feature(linearRing)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LinearRing>' + '      <coordinates>1,2 3,4 1,2</coordinates>' + '    </LinearRing>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYZ LinearRing geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":317,"column":47,"index":22553},"line":317,"code":"        it('can write XYZ LinearRing geometries', function () {\n          const layout = 'XYZ';\n          const linearRing = new LinearRing([[1, 2, 3], [4, 5, 6], [1, 2, 3]], layout);\n          const features = [new Feature(linearRing)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LinearRing>' + '      <coordinates>1,2,3 4,5,6 1,2,3</coordinates>' + '    </LinearRing>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYM LinearRing geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":325,"column":47,"index":23350},"line":325,"code":"        it('can write XYM LinearRing geometries', function () {\n          const layout = 'XYM';\n          const linearRing = new LinearRing([[1, 2, 100], [3, 4, 200], [1, 2, 100]], layout);\n          const features = [new Feature(linearRing)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LinearRing>' + '      <coordinates>1,2 3,4 1,2</coordinates>' + '    </LinearRing>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYZM LinearRing geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":333,"column":48,"index":24148},"line":333,"code":"        it('can write XYZM LinearRing geometries', function () {\n          const layout = 'XYZM';\n          const linearRing = new LinearRing([[1, 2, 3, 100], [4, 5, 6, 200], [1, 2, 3, 100]], layout);\n          const features = [new Feature(linearRing)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <LinearRing>' + '      <coordinates>1,2,3 4,5,6 1,2,3</coordinates>' + '    </LinearRing>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read Polygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":341,"column":39,"index":24953},"line":341,"code":"        it('can read Polygon geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Polygon>' + '      <extrude>0</extrude>' + '      <altitudeMode>absolute</altitudeMode>' + '      <outerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>0,0,1 0,5,1 5,5,2 5,0,3</coordinates>' + '        </LinearRing>' + '      </outerBoundaryIs>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Polygon);\n          expect(g.getCoordinates()).to.eql([[[0, 0, 1], [0, 5, 1], [5, 5, 2], [5, 0, 3]]]);\n          expect(g.get('extrude')).to.be(false);\n          expect(g.get('altitudeMode')).to.be('absolute');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XY Polygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":353,"column":43,"index":25865},"line":353,"code":"        it('can write XY Polygon geometries', function () {\n          const layout = 'XY';\n          const polygon = new Polygon([[[0, 0], [0, 2], [2, 2], [2, 0], [0, 0]]], layout);\n          const features = [new Feature(polygon)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Polygon>' + '      <outerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>0,0 0,2 2,2 2,0 0,0</coordinates>' + '        </LinearRing>' + '      </outerBoundaryIs>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYZ Polygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":361,"column":44,"index":26766},"line":361,"code":"        it('can write XYZ Polygon geometries', function () {\n          const layout = 'XYZ';\n          const polygon = new Polygon([[[0, 0, 1], [0, 2, 2], [2, 2, 3], [2, 0, 4], [0, 0, 5]]], layout);\n          const features = [new Feature(polygon)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Polygon>' + '      <outerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>' + '            0,0,1 0,2,2 2,2,3 2,0,4 0,0,5' + '          </coordinates>' + '        </LinearRing>' + '      </outerBoundaryIs>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYM Polygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":369,"column":44,"index":27725},"line":369,"code":"        it('can write XYM Polygon geometries', function () {\n          const layout = 'XYM';\n          const polygon = new Polygon([[[0, 0, 1], [0, 2, 1], [2, 2, 1], [2, 0, 1], [0, 0, 1]]], layout);\n          const features = [new Feature(polygon)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Polygon>' + '      <outerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>' + '            0,0 0,2 2,2 2,0 0,0' + '          </coordinates>' + '        </LinearRing>' + '      </outerBoundaryIs>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write XYZM Polygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":377,"column":45,"index":28675},"line":377,"code":"        it('can write XYZM Polygon geometries', function () {\n          const layout = 'XYZM';\n          const polygon = new Polygon([[[0, 0, 1, 1], [0, 2, 2, 1], [2, 2, 3, 1], [2, 0, 4, 1], [0, 0, 5, 1]]], layout);\n          const features = [new Feature(polygon)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Polygon>' + '      <outerBoundaryIs>' + '        <LinearRing>' + '        <coordinates>0,0,1 0,2,2 2,2,3 2,0,4 0,0,5</coordinates>' + '        </LinearRing>' + '      </outerBoundaryIs>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read complex Polygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":385,"column":47,"index":29619},"line":385,"code":"        it('can read complex Polygon geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Polygon>' + '      <innerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>1,1,0 1,2,0 2,2,0 2,1,0</coordinates>' + '        </LinearRing>' + '      </innerBoundaryIs>' + '      <innerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>3,3,0 3,4,0 4,4,0 4,3,0</coordinates>' + '        </LinearRing>' + '      </innerBoundaryIs>' + '      <outerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>0,0,1 0,5,1 5,5,2 5,0,3</coordinates>' + '        </LinearRing>' + '      </outerBoundaryIs>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Polygon);\n          expect(g.getCoordinates()).to.eql([[[0, 0, 1], [0, 5, 1], [5, 5, 2], [5, 0, 3]], [[1, 1, 0], [1, 2, 0], [2, 2, 0], [2, 1, 0]], [[3, 3, 0], [3, 4, 0], [4, 4, 0], [4, 3, 0]]]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read multiple LinearRings from one innerBoundaryIs","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":395,"column":66,"index":30805},"line":395,"code":"        it('can read multiple LinearRings from one innerBoundaryIs', function () {\n          const text = `\n            <kml xmlns=\"http://earth.google.com/kml/2.2\">\n              <Placemark>\n                <Polygon>\n                  <innerBoundaryIs>\n                    <LinearRing>\n                      <coordinates>1,1,0 1,2,0 2,2,0 2,1,0</coordinates>\n                    </LinearRing>\n                    <LinearRing>\n                      <coordinates>3,3,0 3,4,0 4,4,0 4,3,0</coordinates>\n                    </LinearRing>\n                  </innerBoundaryIs>\n                  <outerBoundaryIs>\n                    <LinearRing>\n                      <coordinates>0,0,1 0,5,1 5,5,2 5,0,3</coordinates>\n                    </LinearRing>\n                  </outerBoundaryIs>\n                </Polygon>\n              </Placemark>\n            </kml>`;\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Polygon);\n          expect(g.getCoordinates()).to.eql([[[0, 0, 1], [0, 5, 1], [5, 5, 2], [5, 0, 3]], [[1, 1, 0], [1, 2, 0], [2, 2, 0], [2, 1, 0]], [[3, 3, 0], [3, 4, 0], [4, 4, 0], [4, 3, 0]]]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write complex Polygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":424,"column":48,"index":32073},"line":424,"code":"        it('can write complex Polygon geometries', function () {\n          const layout = 'XYZ';\n          const polygon = new Polygon([[[0, 0, 1], [0, 5, 1], [5, 5, 2], [5, 0, 3]], [[1, 1, 0], [1, 2, 0], [2, 2, 0], [2, 1, 0]], [[3, 3, 0], [3, 4, 0], [4, 4, 0], [4, 3, 0]]], layout);\n          const features = [new Feature(polygon)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Polygon>' + '      <innerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>1,1,0 1,2,0 2,2,0 2,1,0</coordinates>' + '        </LinearRing>' + '      </innerBoundaryIs>' + '      <innerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>3,3,0 3,4,0 4,4,0 4,3,0</coordinates>' + '        </LinearRing>' + '      </innerBoundaryIs>' + '      <outerBoundaryIs>' + '        <LinearRing>' + '          <coordinates>0,0,1 0,5,1 5,5,2 5,0,3</coordinates>' + '        </LinearRing>' + '      </outerBoundaryIs>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read MultiPolygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":432,"column":44,"index":33421},"line":432,"code":"        it('can read MultiPolygon geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Polygon>' + '        <extrude>0</extrude>' + '        <altitudeMode>absolute</altitudeMode>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>0,0,0 0,1,0 1,1,0 1,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>3,0,0 3,1,0 4,1,0 4,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(MultiPolygon);\n          expect(g.getCoordinates()).to.eql([[[[0, 0, 0], [0, 1, 0], [1, 1, 0], [1, 0, 0]]], [[[3, 0, 0], [3, 1, 0], [4, 1, 0], [4, 0, 0]]]]);\n          expect(g.get('extrude')).to.be.an('array');\n          expect(g.get('extrude')).to.have.length(2);\n          expect(g.get('extrude')[0]).to.be(false);\n          expect(g.get('extrude')[1]).to.be(undefined);\n          expect(g.get('altitudeMode')).to.be.an('array');\n          expect(g.get('altitudeMode')).to.have.length(2);\n          expect(g.get('altitudeMode')[0]).to.be('absolute');\n          expect(g.get('altitudeMode')[1]).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write MultiPolygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":450,"column":45,"index":35030},"line":450,"code":"        it('can write MultiPolygon geometries', function () {\n          const layout = 'XYZ';\n          const multiPolygon = new MultiPolygon([[[[0, 0, 0], [0, 1, 0], [1, 1, 0], [1, 0, 0]]], [[[3, 0, 0], [3, 1, 0], [4, 1, 0], [4, 0, 0]]]], layout);\n          const features = [new Feature(multiPolygon)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>0,0,0 0,1,0 1,1,0 1,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>3,0,0 3,1,0 4,1,0 4,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read MultiPoint geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":458,"column":42,"index":36290},"line":458,"code":"        it('can read MultiPoint geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Point>' + '        <coordinates>1,2,3</coordinates>' + '        <extrude>0</extrude>' + '        <altitudeMode>absolute</altitudeMode>' + '      </Point>' + '      <Point>' + '        <coordinates>4,5,6</coordinates>' + '        <extrude>1</extrude>' + '        <altitudeMode>clampToGround</altitudeMode>' + '      </Point>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(MultiPoint);\n          expect(g.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n          expect(g.get('extrude')).to.be.an('array');\n          expect(g.get('extrude')).to.have.length(2);\n          expect(g.get('extrude')[0]).to.be(false);\n          expect(g.get('extrude')[1]).to.be(true);\n          expect(g.get('altitudeMode')).to.be.an('array');\n          expect(g.get('altitudeMode')).to.have.length(2);\n          expect(g.get('altitudeMode')[0]).to.be('absolute');\n          expect(g.get('altitudeMode')[1]).to.be('clampToGround');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write MultiPoint geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":476,"column":43,"index":37626},"line":476,"code":"        it('can write MultiPoint geometries', function () {\n          const layout = 'XYZ';\n          const multiPoint = new MultiPoint([[1, 2, 3], [4, 5, 6]], layout);\n          const features = [new Feature(multiPoint)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Point>' + '        <coordinates>1,2,3</coordinates>' + '      </Point>' + '      <Point>' + '        <coordinates>4,5,6</coordinates>' + '      </Point>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read MultiLineString geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":484,"column":47,"index":38527},"line":484,"code":"        it('can read MultiLineString geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <LineString>' + '        <extrude>0</extrude>' + '        <tessellate>0</tessellate>' + '        <altitudeMode>absolute</altitudeMode>' + '        <coordinates>1,2,3 4,5,6</coordinates>' + '      </LineString>' + '      <LineString>' + '        <coordinates>7,8,9 10,11,12</coordinates>' + '      </LineString>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(MultiLineString);\n          expect(g.getCoordinates()).to.eql([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]);\n          expect(g.get('extrude')).to.be.an('array');\n          expect(g.get('extrude')).to.have.length(2);\n          expect(g.get('extrude')[0]).to.be(false);\n          expect(g.get('extrude')[1]).to.be(undefined);\n          expect(g.get('tessellate')).to.be.an('array');\n          expect(g.get('tessellate')).to.have.length(2);\n          expect(g.get('tessellate')[0]).to.be(false);\n          expect(g.get('tessellate')[1]).to.be(undefined);\n          expect(g.get('altitudeMode')).to.be.an('array');\n          expect(g.get('altitudeMode')).to.have.length(2);\n          expect(g.get('altitudeMode')[0]).to.be('absolute');\n          expect(g.get('altitudeMode')[1]).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write MultiLineString geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":506,"column":48,"index":40115},"line":506,"code":"        it('can write MultiLineString geometries', function () {\n          const layout = 'XYZ';\n          const multiLineString = new MultiLineString([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], layout);\n          const features = [new Feature(multiLineString)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <LineString>' + '        <coordinates>1,2,3 4,5,6</coordinates>' + '      </LineString>' + '      <LineString>' + '        <coordinates>7,8,9 10,11,12</coordinates>' + '      </LineString>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read MultiPolygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":514,"column":44,"index":41092},"line":514,"code":"        it('can read MultiPolygon geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Polygon>' + '        <extrude>0</extrude>' + '        <altitudeMode>absolute</altitudeMode>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>0,0,0 0,1,0 1,1,0 1,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>3,0,0 3,1,0 4,1,0 4,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(MultiPolygon);\n          expect(g.getCoordinates()).to.eql([[[[0, 0, 0], [0, 1, 0], [1, 1, 0], [1, 0, 0]]], [[[3, 0, 0], [3, 1, 0], [4, 1, 0], [4, 0, 0]]]]);\n          expect(g.get('extrude')).to.be.an('array');\n          expect(g.get('extrude')).to.have.length(2);\n          expect(g.get('extrude')[0]).to.be(false);\n          expect(g.get('extrude')[1]).to.be(undefined);\n          expect(g.get('altitudeMode')).to.be.an('array');\n          expect(g.get('altitudeMode')).to.have.length(2);\n          expect(g.get('altitudeMode')[0]).to.be('absolute');\n          expect(g.get('altitudeMode')[1]).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write MultiPolygon geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":532,"column":45,"index":42701},"line":532,"code":"        it('can write MultiPolygon geometries', function () {\n          const layout = 'XYZ';\n          const multiPolygon = new MultiPolygon([[[[0, 0, 0], [0, 1, 0], [1, 1, 0], [1, 0, 0]]], [[[3, 0, 0], [3, 1, 0], [4, 1, 0], [4, 0, 0]]]], layout);\n          const features = [new Feature(multiPolygon)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>0,0,0 0,1,0 1,1,0 1,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>3,0,0 3,1,0 4,1,0 4,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read empty GeometryCollection geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":540,"column":56,"index":43975},"line":540,"code":"        it('can read empty GeometryCollection geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <MultiGeometry>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(GeometryCollection);\n          expect(g.getGeometries()).to.be.empty();\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read heterogeneous GeometryCollection geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":550,"column":64,"index":44529},"line":550,"code":"        it('can read heterogeneous GeometryCollection geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Point>' + '        <coordinates>1,2,3</coordinates>' + '      </Point>' + '      <LineString>' + '        <coordinates>1,2,3 4,5,6</coordinates>' + '      </LineString>' + '      <LinearRing>' + '        <coordinates>1,2,3 4,5,6 7,8,9</coordinates>' + '      </LinearRing>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>0,0,0 0,1,0 1,1,0 1,0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(GeometryCollection);\n          const gs = g.getGeometries();\n          expect(gs).to.have.length(4);\n          expect(gs[0]).to.be.an(Point);\n          expect(gs[1]).to.be.an(LineString);\n          expect(gs[2]).to.be.an(Polygon);\n          expect(gs[3]).to.be.an(Polygon);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read nested GeometryCollection geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":565,"column":57,"index":45786},"line":565,"code":"        it('can read nested GeometryCollection geometries', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <MultiGeometry>' + '      </MultiGeometry>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(GeometryCollection);\n          const gs = g.getGeometries();\n          expect(gs).to.have.length(1);\n          expect(gs[0]).to.be.an(GeometryCollection);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write GeometryCollection geometries","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":577,"column":51,"index":46463},"line":577,"code":"        it('can write GeometryCollection geometries', function () {\n          const collection = new GeometryCollection([new GeometryCollection([new Point([1, 2]), new LineString([[1, 2], [3, 4]]), new Polygon([[[1, 2], [3, 4], [3, 2], [1, 2]]])]), new GeometryCollection([new MultiPoint([[5, 6], [9, 10]]), new MultiLineString([[[5, 6], [7, 8]], [[9, 10], [11, 12]]]), new MultiPolygon([[[[5, 6], [7, 8], [7, 6], [5, 6]]], [[[9, 10], [11, 12], [11, 10], [9, 10]]]])])]);\n          const features = [new Feature(collection)];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Point>' + '        <coordinates>1,2</coordinates>' + '      </Point>' + '      <LineString>' + '        <coordinates>1,2 3,4</coordinates>' + '      </LineString>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>1,2 3,4 3,2 1,2</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '      <Point>' + '        <coordinates>5,6</coordinates>' + '      </Point>' + '      <Point>' + '        <coordinates>9,10</coordinates>' + '      </Point>' + '      <LineString>' + '        <coordinates>5,6 7,8</coordinates>' + '      </LineString>' + '      <LineString>' + '        <coordinates>9,10 11,12</coordinates>' + '      </LineString>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>5,6 7,8 7,6 5,6</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>9,10 11,12 11,10 9,10</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read gx:Track","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":584,"column":29,"index":48657},"line":584,"code":"        it('can read gx:Track', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\"' + '     xmlns:gx=\"http://www.google.com/kml/ext/2.2\">' + '  <Placemark>' + '    <gx:Track>' + '      <when>2014-01-06T19:38:55Z</when>' + '      <when>2014-01-06T19:39:03Z</when>' + '      <when>2014-01-06T19:39:10Z</when>' + '      <when>2014-01-06T19:39:17Z</when>' + '      <gx:coord>8.1 46.1 1909.9</gx:coord>' + '      <gx:coord>8.2 46.2 1925.2</gx:coord>' + '      <gx:coord>8.3 46.3 1926.2</gx:coord>' + '      <gx:coord/>' + '    </gx:Track>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(LineString);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read gx:MultiTrack","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":593,"column":34,"index":49505},"line":593,"code":"        it('can read gx:MultiTrack', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\"' + '     xmlns:gx=\"http://www.google.com/kml/ext/2.2\">' + '  <Placemark>' + '    <gx:MultiTrack>' + '      <gx:Track>' + '        <when>2014-01-06T19:38:55Z</when>' + '        <gx:coord>8.1 46.1 1909.9</gx:coord>' + '      </gx:Track>' + '      <gx:Track>' + '        <when>2014-01-06T19:38:55Z</when>' + '        <when>2014-01-06T19:39:10Z</when>' + '        <gx:coord>8.1 46.1 1909.9</gx:coord>' + '        <gx:coord>8.2 46.2 1925.2</gx:coord>' + '      </gx:Track>' + '    </gx:MultiTrack>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(MultiLineString);\n          const gs = g.getLineStrings();\n          expect(gs).to.have.length(2);\n          expect(gs[0]).to.be.an(LineString);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read dateTime","suites":["ol.format.KML","without parameters","#readFeatures","geometry"],"updatePoint":{"line":605,"column":29,"index":50522},"line":605,"code":"        it('can read dateTime', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\"' + '     xmlns:gx=\"http://www.google.com/kml/ext/2.2\">' + '  <Placemark>' + '    <gx:Track>' + '      <when>2014</when>' + '      <when>2014-02</when>' + '      <when>2014-02-06</when>' + '      <when>2014-02-06T19:39:03Z</when>' + '      <when>2014-02-06T19:39:10+03:00</when>' + '      <gx:coord>8.1 46.1 1909.9</gx:coord>' + '      <gx:coord>8.2 46.2 1925.2</gx:coord>' + '      <gx:coord>8.3 46.3 1926.2</gx:coord>' + '      <gx:coord>8.4 46.4 1927.2</gx:coord>' + '      <gx:coord>8.5 46.5 1928.2</gx:coord>' + '    </gx:Track>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          const f = fs[0];\n          const g = f.getGeometry();\n          const flatCoordinates = g.flatCoordinates;\n          expect(flatCoordinates[3]).to.be.eql(Date.UTC(2014, 0, 1, 0, 0, 0));\n          expect(flatCoordinates[7]).to.be.eql(Date.UTC(2014, 1, 1, 0, 0, 0));\n          expect(flatCoordinates[11]).to.be.eql(Date.UTC(2014, 1, 6, 0, 0, 0));\n          expect(flatCoordinates[15]).to.be.eql(Date.UTC(2014, 1, 6, 19, 39, 3));\n          expect(flatCoordinates[19]).to.be.eql(Date.UTC(2014, 1, 6, 16, 39, 10));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read boolean attributes","suites":["ol.format.KML","without parameters","#readFeatures","attributes"],"updatePoint":{"line":619,"column":39,"index":51845},"line":619,"code":"        it('can read boolean attributes', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <open>1</open>' + '    <visibility>0</visibility>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('open')).to.be(true);\n          expect(f.get('visibility')).to.be(false);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read string attributes","suites":["ol.format.KML","without parameters","#readFeatures","attributes"],"updatePoint":{"line":628,"column":38,"index":52341},"line":628,"code":"        it('can read string attributes', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <address>My address</address>' + '    <description>My description</description>' + '    <name>My name</name>' + '    <phoneNumber>My phone number</phoneNumber>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('address')).to.be('My address');\n          expect(f.get('description')).to.be('My description');\n          expect(f.get('name')).to.be('My name');\n          expect(f.get('phoneNumber')).to.be('My phone number');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"strips leading and trailing whitespace in strings","suites":["ol.format.KML","without parameters","#readFeatures","attributes"],"updatePoint":{"line":639,"column":61,"index":53108},"line":639,"code":"        it('strips leading and trailing whitespace in strings', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <description>\\n\\nMy  description\\n\\n</description>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('description')).to.be('My  description');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read CDATA sections in strings","suites":["ol.format.KML","without parameters","#readFeatures","attributes"],"updatePoint":{"line":647,"column":46,"index":53581},"line":647,"code":"        it('can read CDATA sections in strings', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <name><![CDATA[My name in CDATA]]></name>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('name')).to.be('My name in CDATA');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"strips leading and trailing whitespace around CDATA","suites":["ol.format.KML","without parameters","#readFeatures","attributes"],"updatePoint":{"line":655,"column":63,"index":54056},"line":655,"code":"        it('strips leading and trailing whitespace around CDATA', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <name>\\n\\n<![CDATA[My name in CDATA]]>\\n\\n</name>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('name')).to.be('My name in CDATA');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write Feature's string attributes","suites":["ol.format.KML","without parameters","#readFeatures","attributes"],"updatePoint":{"line":663,"column":49,"index":54525},"line":663,"code":"        it(\"can write Feature's string attributes\", function () {\n          const feature = new Feature();\n          feature.set('address', 'My address');\n          feature.set('description', 'My description');\n          feature.set('name', 'My name');\n          feature.set('phoneNumber', 'My phone number');\n          const features = [feature];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <name>My name</name>' + '    <address>My address</address>' + '    <phoneNumber>My phone number</phoneNumber>' + '    <description>My description</description>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write Feature's boolean attributes","suites":["ol.format.KML","without parameters","#readFeatures","attributes"],"updatePoint":{"line":674,"column":50,"index":55503},"line":674,"code":"        it(\"can write Feature's boolean attributes\", function () {\n          const feature = new Feature();\n          feature.set('open', true);\n          feature.set('visibility', false);\n          const features = [feature];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <open>1</open>' + '    <visibility>0</visibility>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read Region","suites":["ol.format.KML","without parameters","#readFeatures","region"],"updatePoint":{"line":685,"column":27,"index":56275},"line":685,"code":"        it('can read Region', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark xmlns=\"http://earth.google.com/kml/2.2\">' + '      <Region>' + '        <LatLonAltBox>' + '          <north>43.651015</north>' + '          <south>43.540908</south>' + '          <east>1.514582</east>' + '          <west>1.384133</west>' + '          <minAltitude>133.57</minAltitude>' + '          <maxAltitude>146.16</maxAltitude>' + '          <altitudeMode>relativeToGround</altitudeMode>' + '        </LatLonAltBox>' + '      </Region>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const extent = f.get('extent');\n          expect(extent).to.be.an(Array);\n          expect(extent).to.have.length(4);\n          expect(extent[0]).to.be(1.384133);\n          expect(extent[1]).to.be(43.540908);\n          expect(extent[2]).to.be(1.514582);\n          expect(extent[3]).to.be(43.651015);\n          expect(f.get('altitudeMode')).to.be('relativeToGround');\n          expect(f.get('minAltitude')).to.be(133.57);\n          expect(f.get('maxAltitude')).to.be(146.16);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read Lod","suites":["ol.format.KML","without parameters","#readFeatures","region"],"updatePoint":{"line":702,"column":24,"index":57566},"line":702,"code":"        it('can read Lod', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark xmlns=\"http://earth.google.com/kml/2.2\">' + '      <Region>' + '        <Lod>' + '          <minLodPixels>128</minLodPixels>' + '          <maxLodPixels>2048</maxLodPixels>' + '          <minFadeExtent>0.2</minFadeExtent>' + '          <maxFadeExtent>10.5</maxFadeExtent>' + '        </Lod>' + '      </Region>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('minLodPixels')).to.be(128);\n          expect(f.get('maxLodPixels')).to.be(2048);\n          expect(f.get('minFadeExtent')).to.be(0.2);\n          expect(f.get('maxFadeExtent')).to.be(10.5);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write ExtendedData with no values","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":715,"column":49,"index":58535},"line":715,"code":"        it('can write ExtendedData with no values', function () {\n          const feature = new Feature();\n          feature.set('foo', null);\n          feature.set('bar', undefined);\n          const features = [feature];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <ExtendedData>' + '      <Data name=\"bar\"/>' + '      <Data name=\"foo\"/>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write ExtendedData with values","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":724,"column":46,"index":59320},"line":724,"code":"        it('can write ExtendedData with values', function () {\n          const feature = new Feature();\n          feature.set('foo', 'bar');\n          feature.set('aNumber', 1000);\n          const features = [feature];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <ExtendedData>' + '      <Data name=\"aNumber\">' + '        <value>1000</value>' + '      </Data>' + '      <Data name=\"foo\">' + '        <value>bar</value>' + '      </Data>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write ExtendedData pair with displayName and value","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":733,"column":66,"index":60226},"line":733,"code":"        it('can write ExtendedData pair with displayName and value', function () {\n          const pair = {\n            value: 'bar',\n            displayName: 'display name'\n          };\n          const feature = new Feature();\n          feature.set('foo', pair);\n          const features = [feature];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <ExtendedData>' + '      <Data name=\"foo\">' + '        <displayName><![CDATA[display name]]></displayName>' + '        <value>bar</value>' + '      </Data>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write ExtendedData after Style tag","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":745,"column":50,"index":61161},"line":745,"code":"        it('can write ExtendedData after Style tag', function () {\n          const style = new Style({\n            stroke: new Stroke({\n              color: '#112233',\n              width: 2\n            })\n          });\n          const feature = new Feature();\n          feature.set('foo', null);\n          feature.setStyle([style]);\n          const features = [feature];\n          const node = format.writeFeaturesNode(features);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>ff332211</color>' + '        <width>2</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <fill>0</fill>' + '      </PolyStyle>' + '    </Style>' + '    <ExtendedData>' + '      <Data name=\"foo\"/>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read ExtendedData","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":760,"column":33,"index":62268},"line":760,"code":"        it('can read ExtendedData', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark xmlns=\"http://earth.google.com/kml/2.2\">' + '    <ExtendedData>' + '      <Data name=\"foo\">' + '        <value>bar</value>' + '      </Data>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.getProperties()).to.only.have.keys(['foo', 'geometry']);\n          expect(f.get('foo')).to.be('bar');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read ExtendedData with no values","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":769,"column":48,"index":62904},"line":769,"code":"        it('can read ExtendedData with no values', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark xmlns=\"http://earth.google.com/kml/2.2\">' + '    <ExtendedData>' + '      <Data name=\"foo\">' + '        <value>200</value>' + '      </Data>' + '      <Data name=\"bar\"/>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.getProperties()).to.only.have.keys(['foo', 'bar', 'geometry']);\n          expect(f.get('foo')).to.be('200');\n          expect(f.get('bar')).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read ExtendedData with displayName instead of name","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":779,"column":66,"index":63643},"line":779,"code":"        it('can read ExtendedData with displayName instead of name', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark xmlns=\"http://earth.google.com/kml/2.2\">' + '    <ExtendedData>' + '      <Data>' + '        <displayName>foo</displayName>' + '        <value>bar</value>' + '      </Data>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('foo')).to.be('bar');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read SchemaData","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":787,"column":31,"index":64218},"line":787,"code":"        it('can read SchemaData', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark xmlns=\"http://earth.google.com/kml/2.2\">' + '    <ExtendedData>' + '      <SchemaData schemaUrl=\"#mySchema\">' + '        <SimpleData name=\"capital\">London</SimpleData>' + '        <SimpleData name=\"population\">60000000</SimpleData>' + '      </SchemaData>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('capital')).to.be('London');\n          expect(f.get('population')).to.be('60000000');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read ExtendedData with displayName","suites":["ol.format.KML","without parameters","#readFeatures","extended data"],"updatePoint":{"line":796,"column":50,"index":64959},"line":796,"code":"        it('can read ExtendedData with displayName', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark xmlns=\"http://earth.google.com/kml/2.2\">' + '    <ExtendedData>' + '      <Data>' + '        <displayName>capital</displayName>' + '        <value>London</value>' + '      </Data>' + '      <Data name=\"country\">' + '        <displayName>Country</displayName>' + '        <value>United-Kingdom</value>' + '      </Data>' + '    </ExtendedData>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('capital')).to.be('London');\n          expect(f.get('country').value).to.be('United-Kingdom');\n          expect(f.get('country').displayName).to.be('Country');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"applies the default style if no style is defined","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":808,"column":60,"index":65896},"line":808,"code":"        it('applies the default style if no style is defined', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getFill().getColor()).to.eql([255, 255, 255, 1]);\n          expect(style.getImage()).to.be(getDefaultImageStyle());\n          // FIXME check image style\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          expect(style.getStroke().getColor()).to.eql([255, 255, 255, 1]);\n          expect(style.getStroke().getWidth()).to.be(1);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's IconStyle using default crossOrigin","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":829,"column":68,"index":67039},"line":829,"code":"        it(\"can read a feature's IconStyle using default crossOrigin\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle).to.be.an(Icon);\n          expect(new URL(imageStyle.getSrc()).href).to.eql(new URL('http://foo.png').href);\n          expect(imageStyle.getAnchor()).to.be(null);\n          expect(imageStyle.getOrigin()).to.be(null);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getSize()).to.be(null);\n          expect(imageStyle.getScale()).to.be(1);\n          expect(imageStyle.getImage().crossOrigin).to.eql('anonymous');\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's IconStyle (and set the crossOrigin option)","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":856,"column":75,"index":68679},"line":856,"code":"        it(\"can read a feature's IconStyle (and set the crossOrigin option)\", function () {\n          format = new KML({\n            crossOrigin: null\n          });\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle).to.be.an(Icon);\n          expect(new URL(imageStyle.getSrc()).href).to.eql(new URL('http://foo.png').href);\n          expect(imageStyle.getAnchor()).to.be(null);\n          expect(imageStyle.getOrigin()).to.be(null);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getSize()).to.be(null);\n          expect(imageStyle.getScale()).to.be(1);\n          expect(imageStyle.getImage().crossOrigin).to.be(null);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's IconStyle and apply an iconUrlFunction","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":886,"column":71,"index":70380},"line":886,"code":"        it(\"can read a feature's IconStyle and apply an iconUrlFunction\", function () {\n          format = new KML({\n            iconUrlFunction: function (href) {\n              return href.replace(/^http:/, 'https:');\n            }\n          });\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle).to.be.an(Icon);\n          expect(new URL(imageStyle.getSrc()).href).to.eql(new URL('https://foo.png').href);\n          expect(imageStyle.getAnchor()).to.be(null);\n          expect(imageStyle.getOrigin()).to.be(null);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getSize()).to.be(null);\n          expect(imageStyle.getScale()).to.be(1);\n          expect(imageStyle.getImage().crossOrigin).to.eql('anonymous');\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's IconStyle, load the image and reset the scale","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":918,"column":78,"index":72183},"line":918,"code":"        it(\"can read a feature's IconStyle, load the image and reset the scale\", function (done) {\n          format = new KML({\n            iconUrlFunction: function (href) {\n              return href.replace('http://foo/', 'spec/ol/data/');\n            }\n          });\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo/dot.png</href>' + '        </Icon>' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = /** @type {Array<Style>} */styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle).to.be.an(Icon);\n          expect(imageStyle.getSrc()).to.eql('spec/ol/data/dot.png');\n          expect(imageStyle.getAnchor()).to.be(null);\n          expect(imageStyle.getOrigin()).to.be(null);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getSize()).to.be(null);\n          expect(imageStyle.getScale()).to.be(1);\n          expect(imageStyle.getImage().crossOrigin).to.eql('anonymous');\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n          imageStyle.listenImageChange(function (evt) {\n            if (imageStyle.getImageState() === ImageState.LOADED) {\n              expect(imageStyle.getSize()).to.eql([20, 20]);\n              expect(imageStyle.getScale()).to.be(1.6); // 32 / 20\n              done();\n            }\n          });\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a IconStyle's hotspot","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":957,"column":42,"index":74276},"line":957,"code":"        it(\"can read a IconStyle's hotspot\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark id=\"1\">' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '        <hotSpot x=\"0.5\" xunits=\"fraction\" y=\"0.5\" yunits=\"fraction\" />' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '  <Placemark id=\"2\">' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '        <hotSpot x=\"5\" xunits=\"pixels\" y=\"5\" yunits=\"pixels\" />' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '  <Placemark id=\"3\">' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '        <hotSpot x=\"5\" xunits=\"insetPixels\" y=\"5\" yunits=\"pixels\" />' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '  <Placemark id=\"4\">' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '        <hotSpot x=\"5\" xunits=\"pixels\" y=\"5\" yunits=\"insetPixels\" />' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '  <Placemark id=\"5\">' + '    <Style>' + '      <IconStyle>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '        <hotSpot x=\"5\" xunits=\"insetPixels\" y=\"5\" yunits=\"insetPixels\" />' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(5);\n          fs.forEach(function (f) {\n            expect(f).to.be.an(Feature);\n            expect(f.getId()).to.be.within(1, 5);\n            const styleFunction = f.getStyleFunction();\n            expect(styleFunction).not.to.be(undefined);\n            const styleArray = styleFunction(f, 0);\n            expect(styleArray).to.be.an(Array);\n            expect(styleArray).to.have.length(1);\n            const style = styleArray[0];\n            expect(style).to.be.an(Style);\n            expect(style.getFill()).to.be(getDefaultFillStyle());\n            expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n            const imageStyle = style.getImage();\n            expect(imageStyle).to.be.an(Icon);\n            expect(new URL(imageStyle.getSrc()).href).to.eql(new URL('http://foo.png').href);\n            expect(imageStyle.anchor_).to.be.an(Array);\n            expect(imageStyle.anchor_).to.have.length(2);\n            if (f.getId() == 1) {\n              expect(imageStyle.anchor_[0]).to.be(0.5);\n              expect(imageStyle.anchor_[1]).to.be(0.5);\n              expect(imageStyle.anchorOrigin_).to.be('bottom-left');\n              expect(imageStyle.anchorXUnits_).to.be('fraction');\n              expect(imageStyle.anchorYUnits_).to.be('fraction');\n            } else {\n              expect(imageStyle.anchor_[0]).to.be(5);\n              expect(imageStyle.anchor_[1]).to.be(5);\n              expect(imageStyle.anchorXUnits_).to.be('pixels');\n              expect(imageStyle.anchorYUnits_).to.be('pixels');\n              if (f.getId() == 2) {\n                expect(imageStyle.anchorOrigin_).to.be('bottom-left');\n              }\n              if (f.getId() == 3) {\n                expect(imageStyle.anchorOrigin_).to.be('bottom-right');\n              }\n              if (f.getId() == 4) {\n                expect(imageStyle.anchorOrigin_).to.be('top-left');\n              }\n              if (f.getId() == 5) {\n                expect(imageStyle.anchorOrigin_).to.be('top-right');\n              }\n            }\n            expect(imageStyle.getRotation()).to.eql(0);\n            expect(imageStyle.getSize()).to.be(null);\n            expect(imageStyle.getScale()).to.be(1);\n            expect(style.getText()).to.be(getDefaultTextStyle());\n            expect(style.getZIndex()).to.be(undefined);\n          });\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a complex feature's IconStyle","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1009,"column":50,"index":78226},"line":1009,"code":"        it(\"can read a complex feature's IconStyle\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\"' + '     xmlns:gx=\"http://www.google.com/kml/ext/2.2\">' + '  <Placemark>' + '    <Style>' + '      <IconStyle>' + '        <scale>3.0</scale>' + '        <Icon>' + '          <href>http://foo.png</href>' + '          <gx:x>24</gx:x>' + '          <gx:y>36</gx:y>' + '          <gx:w>48</gx:w>' + '          <gx:h>48</gx:h>' + '        </Icon>' + '        <hotSpot x=\"0.5\" y=\"12\" xunits=\"fraction\" ' + '                 yunits=\"pixels\"/>' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          imageStyle.iconImage_.size_ = [144, 192];\n          expect(imageStyle.getSize()).to.eql([48, 48]);\n          expect(imageStyle.getAnchor()).to.eql([24, 36]);\n          expect(imageStyle.getOrigin()).to.eql([24, 108]);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getScale()).to.eql(2.0); // 3.0 * 32 / 48\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's IconStyle and set color of image","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1034,"column":65,"index":80033},"line":1034,"code":"        it(\"can read a feature's IconStyle and set color of image\", () => {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\"' + '     xmlns:gx=\"http://www.google.com/kml/ext/2.2\">' + '  <Placemark>' + '    <Style>' + '      <IconStyle>' + '        <color>FF0000FF</color>' + '        <Icon>' + '          <href>http://foo.png</href>' + '        </Icon>' + '      </IconStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle.getColor()).to.eql([0xff, 0, 0, 0xff / 255]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's LabelStyle","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1051,"column":43,"index":81153},"line":1051,"code":"        it(\"can read a feature's LabelStyle\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <LabelStyle>' + '        <color>12345678</color>' + '        <scale>0.25</scale>' + '      </LabelStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getImage()).to.be(getDefaultImageStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const textStyle = style.getText();\n          expect(textStyle).to.be.an(Text);\n          expect(textStyle.getScale()).to.be(0.25);\n          const textFillStyle = textStyle.getFill();\n          expect(textFillStyle).to.be.an(Fill);\n          expect(textFillStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's LineStyle","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1075,"column":42,"index":82555},"line":1075,"code":"        it(\"can read a feature's LineStyle\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>12345678</color>' + '        <width>9</width>' + '      </LineStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getImage()).to.be(getDefaultImageStyle());\n          const strokeStyle = style.getStroke();\n          expect(strokeStyle).to.be.an(Stroke);\n          expect(strokeStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(strokeStyle.getWidth()).to.be(9);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's PolyStyle","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1097,"column":42,"index":83852},"line":1097,"code":"        it(\"can read a feature's PolyStyle\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <PolyStyle>' + '        <color>12345678</color>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          const fillStyle = style.getFill();\n          expect(fillStyle).to.be.an(Fill);\n          expect(fillStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(style.getImage()).to.be(getDefaultImageStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a feature's LineStyle and PolyStyle","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1118,"column":56,"index":85077},"line":1118,"code":"        it(\"can read a feature's LineStyle and PolyStyle\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>12345678</color>' + '        <width>9</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <color>12345678</color>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          const fillStyle = style.getFill();\n          expect(fillStyle).to.be.an(Fill);\n          expect(fillStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(style.getImage()).to.be(getDefaultImageStyle());\n          const strokeStyle = style.getStroke();\n          expect(strokeStyle).to.be.an(Stroke);\n          expect(strokeStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(strokeStyle.getWidth()).to.be(9);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"disables the fill when fill is '0'","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1142,"column":46,"index":86563},"line":1142,"code":"        it(\"disables the fill when fill is '0'\", function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>12345678</color>' + '        <width>9</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <color>12345678</color>' + '        <fill>0</fill>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(null);\n          expect(style.getImage()).to.be(getDefaultImageStyle());\n          const strokeStyle = style.getStroke();\n          expect(strokeStyle).to.be.an(Stroke);\n          expect(strokeStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(strokeStyle.getWidth()).to.be(9);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n          const lineString = new LineString([[1, 2], [3, 4]]);\n          const polygon = new Polygon([[[0, 0], [0, 2], [2, 2], [2, 0], [0, 0]]]);\n          const collection = new GeometryCollection([lineString, polygon]);\n          f.setGeometry(collection);\n          const node = format.writeFeaturesNode(fs);\n          const text1 = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>12345678</color>' + '        <width>9</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <fill>0</fill>' + '      </PolyStyle>' + '    </Style>' + '    <MultiGeometry>' + '      <LineString>' + '        <coordinates>1,2 3,4</coordinates>' + '      </LineString>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>0,0 0,2 2,2 2,0 0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text1));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"disables the stroke when outline is '0'","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1171,"column":51,"index":89242},"line":1171,"code":"        it(\"disables the stroke when outline is '0'\", function () {\n          const lineString = new LineString([[1, 2], [3, 4]]);\n          const polygon = new Polygon([[[0, 0], [0, 2], [2, 2], [2, 0], [0, 0]]]);\n          const lineStringFeature = new Feature(lineString);\n          const polygonFeature = new Feature(polygon);\n          const collectionFeature = new Feature(new GeometryCollection([lineString, polygon]));\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>12345678</color>' + '        <width>9</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <color>12345678</color>' + '        <outline>0</outline>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(2);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getGeometryFunction()(lineStringFeature)).to.be(lineString);\n          expect(style.getGeometryFunction()(polygonFeature)).to.be(undefined);\n          const gc = style.getGeometryFunction()(collectionFeature);\n          expect(gc).to.be.an(GeometryCollection);\n          const gs = gc.getGeometries();\n          expect(gs).to.be.an(Array);\n          expect(gs).to.have.length(1);\n          expect(gs[0]).to.be.an(LineString);\n          expect(gs[0].getCoordinates()).to.eql(lineString.getCoordinates());\n          const fillStyle = style.getFill();\n          expect(fillStyle).to.be.an(Fill);\n          expect(fillStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(style.getImage()).to.be(getDefaultImageStyle());\n          const strokeStyle = style.getStroke();\n          expect(strokeStyle).to.be.an(Stroke);\n          expect(strokeStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(strokeStyle.getWidth()).to.be(9);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n          const style1 = styleArray[1];\n          expect(style1).to.be.an(Style);\n          expect(style1.getGeometryFunction()(lineStringFeature)).to.be(undefined);\n          expect(style1.getGeometryFunction()(polygonFeature)).to.be(polygon);\n          const gc1 = style1.getGeometryFunction()(collectionFeature);\n          expect(gc1).to.be.an(GeometryCollection);\n          const gs1 = gc1.getGeometries();\n          expect(gs1).to.be.an(Array);\n          expect(gs1).to.have.length(1);\n          expect(gs1[0]).to.be.an(Polygon);\n          expect(gs1[0].getCoordinates()).to.eql(polygon.getCoordinates());\n          expect(style1.getFill()).to.be(fillStyle);\n          expect(style1.getStroke()).to.be(null);\n          expect(style1.getZIndex()).to.be(undefined);\n          f.setGeometry(collectionFeature.getGeometry());\n          const node = format.writeFeaturesNode(fs);\n          const text1 = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>12345678</color>' + '        <width>9</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <color>12345678</color>' + '        <outline>0</outline>' + '      </PolyStyle>' + '    </Style>' + '    <MultiGeometry>' + '      <LineString>' + '        <coordinates>1,2 3,4</coordinates>' + '      </LineString>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>0,0 0,2 2,2 2,0 0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text1));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"disables both fill and stroke when fill and outline are '0'","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1227,"column":71,"index":93563},"line":1227,"code":"        it(\"disables both fill and stroke when fill and outline are '0'\", function () {\n          const lineString = new LineString([[1, 2], [3, 4]]);\n          const polygon = new Polygon([[[0, 0], [0, 2], [2, 2], [2, 0], [0, 0]]]);\n          const lineStringFeature = new Feature(lineString);\n          const polygonFeature = new Feature(polygon);\n          const collectionFeature = new Feature(new GeometryCollection([lineString, polygon]));\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>12345678</color>' + '        <width>9</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <color>12345678</color>' + '        <fill>0</fill>' + '        <outline>0</outline>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(2);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getGeometryFunction()(lineStringFeature)).to.be(lineString);\n          expect(style.getGeometryFunction()(polygonFeature)).to.be(undefined);\n          const gc = style.getGeometryFunction()(collectionFeature);\n          expect(gc).to.be.an(GeometryCollection);\n          const gs = gc.getGeometries();\n          expect(gs).to.be.an(Array);\n          expect(gs).to.have.length(1);\n          expect(gs[0]).to.be.an(LineString);\n          expect(gs[0].getCoordinates()).to.eql(lineString.getCoordinates());\n          expect(style.getFill()).to.be(null);\n          expect(style.getImage()).to.be(getDefaultImageStyle());\n          const strokeStyle = style.getStroke();\n          expect(strokeStyle).to.be.an(Stroke);\n          expect(strokeStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n          expect(strokeStyle.getWidth()).to.be(9);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n          const style1 = styleArray[1];\n          expect(style1).to.be.an(Style);\n          expect(style1.getGeometryFunction()(lineStringFeature)).to.be(undefined);\n          expect(style1.getGeometryFunction()(polygonFeature)).to.be(polygon);\n          const gc1 = style1.getGeometryFunction()(collectionFeature);\n          expect(gc1).to.be.an(GeometryCollection);\n          const gs1 = gc1.getGeometries();\n          expect(gs1).to.be.an(Array);\n          expect(gs1).to.have.length(1);\n          expect(gs1[0]).to.be.an(Polygon);\n          expect(gs1[0].getCoordinates()).to.eql(polygon.getCoordinates());\n          expect(style1.getFill()).to.be(null);\n          expect(style1.getStroke()).to.be(null);\n          expect(style1.getZIndex()).to.be(undefined);\n          f.setGeometry(collectionFeature.getGeometry());\n          const node = format.writeFeaturesNode(fs);\n          const text1 = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>12345678</color>' + '        <width>9</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <fill>0</fill>' + '        <outline>0</outline>' + '      </PolyStyle>' + '    </Style>' + '    <MultiGeometry>' + '      <LineString>' + '        <coordinates>1,2 3,4</coordinates>' + '      </LineString>' + '      <Polygon>' + '        <outerBoundaryIs>' + '          <LinearRing>' + '            <coordinates>0,0 0,2 2,2 2,0 0,0</coordinates>' + '          </LinearRing>' + '        </outerBoundaryIs>' + '      </Polygon>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text1));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can create text style for named point placemarks (including html character codes)","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1281,"column":93,"index":97798},"line":1281,"code":"        it('can create text style for named point placemarks (including html character codes)', function () {\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Style id=\"sh_ylw-pushpin\">' + '    <IconStyle>' + '      <scale>0.3</scale>' + '      <Icon>' + '        <href>http://maps.google.com/mapfiles/kml/pushpin/' + 'ylw-pushpin.png</href>' + '      </Icon>' + '      <hotSpot x=\"20\" y=\"2\" xunits=\"pixels\" yunits=\"pixels\"/>' + '    </IconStyle>' + '  </Style>' + '  <StyleMap id=\"msn_ylw-pushpin0\">' + '    <Pair>' + '      <key>normal</key>' + '      <styleUrl>#sn_ylw-pushpin</styleUrl>' + '    </Pair>' + '    <Pair>' + '      <key>highlight</key>' + '      <styleUrl>#sh_ylw-pushpin</styleUrl>' + '    </Pair>' + '  </StyleMap>' + '  <Placemark>' + '    <name>Joe&apos;s Test</name>' + '    <styleUrl>#msn_ylw-pushpin0</styleUrl>' + '    <Point>' + '      <coordinates>1,2</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const style = styleFunction(f, 0);\n          expect(style).to.be.an(Style);\n          expect(style.getText().getText()).to.eql(\"Joe's Test\");\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write an feature's icon style","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1293,"column":45,"index":99369},"line":1293,"code":"        it(\"can write an feature's icon style\", function () {\n          const style = new Style({\n            image: new Icon({\n              anchor: [0.25, 36],\n              anchorOrigin: 'top-left',\n              anchorXUnits: 'fraction',\n              anchorYUnits: 'pixels',\n              crossOrigin: 'anonymous',\n              offset: [96, 96],\n              offsetOrigin: 'top-left',\n              rotation: 45,\n              scale: 0.5,\n              size: [48, 48],\n              src: 'http://foo.png',\n              color: 'rgba(255,0,0,1)'\n            })\n          });\n          const imageStyle = style.getImage();\n          imageStyle.iconImage_.size_ = [192, 144]; // sprite de 12 images(4*3)\n          const feature = new Feature();\n          feature.setStyle([style]);\n          const node = format.writeFeaturesNode([feature]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <IconStyle>' + '        <scale>0.75</scale>' +\n          // 0.5 * 48 / 32\n          '        <heading>45</heading>' + '        <Icon>' + '          <href>http://foo.png</href>' + '          <gx:x>96</gx:x>' + '          <gx:y>0</gx:y>' + '          <gx:w>48</gx:w>' + '          <gx:h>48</gx:h>' + '        </Icon>' + '        <color>ff0000ff</color>' + '        <hotSpot x=\"12\" y=\"12\" xunits=\"pixels\" ' + '                 yunits=\"pixels\"/>' + '      </IconStyle>' + '      <PolyStyle>' + '        <fill>0</fill>' + '        <outline>0</outline>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"does not write styles when writeStyles option is false","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1320,"column":66,"index":101251},"line":1320,"code":"        it('does not write styles when writeStyles option is false', function () {\n          format = new KML({\n            writeStyles: false\n          });\n          const style = new Style({\n            image: new Icon({\n              src: 'http://foo.png'\n            })\n          });\n          const feature = new Feature();\n          feature.setStyle([style]);\n          const node = format.writeFeaturesNode([feature]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"skips image styles that are not icon styles","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1335,"column":55,"index":102068},"line":1335,"code":"        it('skips image styles that are not icon styles', function () {\n          const style = new Style({\n            image: new CircleStyle({\n              radius: 4,\n              fill: new Fill({\n                color: 'rgb(12, 34, 223)'\n              })\n            })\n          });\n          const feature = new Feature();\n          feature.setStyle([style]);\n          const node = format.writeFeaturesNode([feature]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <PolyStyle>' + '        <fill>0</fill>' + '        <outline>0</outline>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write an feature's text style","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1350,"column":45,"index":103025},"line":1350,"code":"        it(\"can write an feature's text style\", function () {\n          const style = new Style({\n            text: new Text({\n              scale: 0.5,\n              text: 'foo',\n              fill: new Fill({\n                color: 'rgb(12, 34, 223)'\n              })\n            })\n          });\n          const feature = new Feature();\n          feature.setStyle([style]);\n          const node = format.writeFeaturesNode([feature]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <name>foo</name>' + '    <Style>' + '      <LabelStyle>' + '        <color>ffdf220c</color>' + '        <scale>0.5</scale>' + '      </LabelStyle>' + '      <PolyStyle>' + '        <fill>0</fill>' + '        <outline>0</outline>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write an feature's stroke style without fill","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1366,"column":60,"index":104156},"line":1366,"code":"        it(\"can write an feature's stroke style without fill\", function () {\n          const style = new Style({\n            stroke: new Stroke({\n              color: '#112233',\n              width: 2\n            })\n          });\n          const feature = new Feature();\n          feature.setStyle([style]);\n          const node = format.writeFeaturesNode([feature]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>ff332211</color>' + '        <width>2</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <fill>0</fill>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write an feature's fill style without outline","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1379,"column":61,"index":105142},"line":1379,"code":"        it(\"can write an feature's fill style without outline\", function () {\n          const style = new Style({\n            fill: new Fill({\n              color: 'rgba(12, 34, 223, 0.7)'\n            })\n          });\n          const feature = new Feature();\n          feature.setStyle([style]);\n          const node = format.writeFeaturesNode([feature]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <PolyStyle>' + '        <color>b2df220c</color>' + '        <outline>0</outline>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write an feature's fill style and outline","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1391,"column":57,"index":106043},"line":1391,"code":"        it(\"can write an feature's fill style and outline\", function () {\n          const style = new Style({\n            fill: new Fill({\n              color: 'rgba(12, 34, 223, 0.7)'\n            }),\n            stroke: new Stroke({\n              color: '#112233',\n              width: 2\n            })\n          });\n          const feature = new Feature();\n          feature.setStyle([style]);\n          const node = format.writeFeaturesNode([feature]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Placemark>' + '    <Style>' + '      <LineStyle>' + '        <color>ff332211</color>' + '        <width>2</width>' + '      </LineStyle>' + '      <PolyStyle>' + '        <color>b2df220c</color>' + '      </PolyStyle>' + '    </Style>' + '  </Placemark>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write multiple features with Style","suites":["ol.format.KML","without parameters","#readFeatures","styles"],"updatePoint":{"line":1407,"column":50,"index":107118},"line":1407,"code":"        it('can write multiple features with Style', function () {\n          const style = new Style({\n            fill: new Fill({\n              color: 'rgba(12, 34, 223, 0.7)'\n            })\n          });\n          const feature = new Feature();\n          feature.setStyle(style);\n          const feature2 = new Feature();\n          feature2.setStyle(style);\n          const node = format.writeFeaturesNode([feature, feature2]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Document>' + '    <Placemark>' + '      <Style>' + '        <PolyStyle>' + '          <color>b2df220c</color>' + '          <outline>0</outline>' + '        </PolyStyle>' + '      </Style>' + '    </Placemark>' + '    <Placemark>' + '      <Style>' + '        <PolyStyle>' + '          <color>b2df220c</color>' + '          <outline>0</outline>' + '        </PolyStyle>' + '      </Style>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a normal style","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1423,"column":35,"index":108387},"line":1423,"code":"        it('can read a normal style', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark id=\"a\">' + '      <StyleMap>' + '        <Pair>' + '          <key>normal</key>' + '          <Style>' + '            <PolyStyle>' + '              <color>00000000</color>' + '            </PolyStyle>' + '          </Style>' + '        </Pair>' + '      </StyleMap>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const s = styleArray[0];\n          expect(s).to.be.an(Style);\n          expect(s.getFill()).not.to.be(null);\n          expect(s.getFill().getColor()).to.eql([0, 0, 0, 0]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a normal IconStyle (and set the crossOrigin option)","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1439,"column":72,"index":109500},"line":1439,"code":"        it('can read a normal IconStyle (and set the crossOrigin option)', function () {\n          format = new KML({\n            crossOrigin: null\n          });\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark id=\"a\">' + '      <StyleMap>' + '        <Pair>' + '          <key>normal</key>' + '          <Style>' + '            <IconStyle>' + '              <Icon>' + '                <href>http://bar.png</href>' + '              </Icon>' + '            </IconStyle>' + '          </Style>' + '        </Pair>' + '      </StyleMap>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle).to.be.an(Icon);\n          expect(new URL(imageStyle.getSrc()).href).to.eql(new URL('http://bar.png').href);\n          expect(imageStyle.getAnchor()).to.be(null);\n          expect(imageStyle.getOrigin()).to.be(null);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getSize()).to.be(null);\n          expect(imageStyle.getScale()).to.be(1);\n          expect(imageStyle.getImage().crossOrigin).to.be(null);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"ignores highlight styles","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1469,"column":36,"index":111368},"line":1469,"code":"        it('ignores highlight styles', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark>' + '      <StyleMap>' + '        <Pair>' + '          <key>highlight</key>' + '          <Style>' + '            <PolyStyle>' + '              <color>00000000</color>' + '            </PolyStyle>' + '          </Style>' + '        </Pair>' + '      </StyleMap>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const s = styleArray[0];\n          expect(s).to.be.an(Style);\n          expect(s).to.be(getDefaultStyle());\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"uses normal styles instead of highlight styles","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1484,"column":58,"index":112399},"line":1484,"code":"        it('uses normal styles instead of highlight styles', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark id=\"a\">' + '      <StyleMap>' + '        <Pair>' + '          <key>normal</key>' + '          <Style>' + '            <PolyStyle>' + '              <color>00000000</color>' + '            </PolyStyle>' + '          </Style>' + '        </Pair>' + '        <Pair>' + '          <key>highlight</key>' + '          <Style>' + '            <PolyStyle>' + '              <color>ffffffff</color>' + '            </PolyStyle>' + '          </Style>' + '        </Pair>' + '      </StyleMap>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const s = styleArray[0];\n          expect(s).to.be.an(Style);\n          expect(s.getFill()).not.to.be(null);\n          expect(s.getFill().getColor()).to.eql([0, 0, 0, 0]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read normal styleUrls","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1500,"column":37,"index":113695},"line":1500,"code":"        it('can read normal styleUrls', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Style id=\"foo\">' + '      <PolyStyle>' + '        <color>00000000</color>' + '      </PolyStyle>' + '    </Style>' + '    <Placemark>' + '      <StyleMap>' + '        <Pair>' + '          <key>normal</key>' + '          <styleUrl>#foo</styleUrl>' + '        </Pair>' + '      </StyleMap>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const s = styleArray[0];\n          expect(s).to.be.an(Style);\n          expect(s.getFill()).not.to.be(null);\n          expect(s.getFill().getColor()).to.eql([0, 0, 0, 0]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"ignores highlight styleUrls","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1516,"column":39,"index":114787},"line":1516,"code":"        it('ignores highlight styleUrls', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Style id=\"foo\">' + '      <PolyStyle>' + '        <color>00000000</color>' + '      </PolyStyle>' + '    </Style>' + '    <Placemark>' + '      <StyleMap>' + '        <Pair>' + '          <key>highlight</key>' + '          <styleUrl>#foo</styleUrl>' + '        </Pair>' + '      </StyleMap>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const s = styleArray[0];\n          expect(s).to.be.an(Style);\n          expect(s).to.be(getDefaultStyle());\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can use Styles in StyleMaps before they are defined","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1531,"column":63,"index":115842},"line":1531,"code":"        it('can use Styles in StyleMaps before they are defined', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <StyleMap id=\"fooMap\">' + '      <Pair>' + '        <key>normal</key>' + '        <styleUrl>#foo</styleUrl>' + '      </Pair>' + '    </StyleMap>' + '    <Style id=\"foo\">' + '      <PolyStyle>' + '        <color>12345678</color>' + '      </PolyStyle>' + '    </Style>' + '    <Placemark>' + '      <styleUrl>#fooMap</styleUrl>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const s = styleArray[0];\n          expect(s).to.be.an(Style);\n          expect(s.getFill()).not.to.be(null);\n          expect(s.getFill().getColor()).to.eql([120, 86, 52, 18 / 255]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can use Styles in StyleMaps if # is missing","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1547,"column":55,"index":117000},"line":1547,"code":"        it('can use Styles in StyleMaps if # is missing', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <StyleMap id=\"fooMap\">' + '      <Pair>' + '        <key>normal</key>' + '        <styleUrl>foo</styleUrl>' + '      </Pair>' + '    </StyleMap>' + '    <Style id=\"foo\">' + '      <PolyStyle>' + '        <color>12345678</color>' + '      </PolyStyle>' + '    </Style>' + '    <Placemark>' + '      <styleUrl>fooMap</styleUrl>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const s = styleArray[0];\n          expect(s).to.be.an(Style);\n          expect(s.getFill()).not.to.be(null);\n          expect(s.getFill().getColor()).to.eql([120, 86, 52, 18 / 255]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can use IconStyles in StyleMaps before they are defined (and set the crossOrigin option)","suites":["ol.format.KML","without parameters","#readFeatures","style maps"],"updatePoint":{"line":1563,"column":100,"index":118201},"line":1563,"code":"        it('can use IconStyles in StyleMaps before they are defined (and set the crossOrigin option)', function () {\n          format = new KML({\n            crossOrigin: null\n          });\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <StyleMap id=\"fooMap\">' + '      <Pair>' + '        <key>normal</key>' + '        <styleUrl>#foo</styleUrl>' + '      </Pair>' + '    </StyleMap>' + '    <Style id=\"foo\">' + '      <IconStyle>' + '        <Icon>' + '          <href>http://bar.png</href>' + '        </Icon>' + '      </IconStyle>' + '    </Style>' + '    <Placemark>' + '      <styleUrl>#fooMap</styleUrl>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle).to.be.an(Icon);\n          expect(new URL(imageStyle.getSrc()).href).to.eql(new URL('http://bar.png').href);\n          expect(imageStyle.getAnchor()).to.be(null);\n          expect(imageStyle.getOrigin()).to.be(null);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getSize()).to.be(null);\n          expect(imageStyle.getScale()).to.be(1);\n          expect(imageStyle.getImage().crossOrigin).to.be(null);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can apply a shared style to a feature","suites":["ol.format.KML","without parameters","#readFeatures","shared styles"],"updatePoint":{"line":1595,"column":49,"index":120177},"line":1595,"code":"        it('can apply a shared style to a feature', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Style id=\"foo\">' + '      <PolyStyle>' + '        <color>12345678</color>' + '      </PolyStyle>' + '    </Style>' + '    <Placemark>' + '      <styleUrl>#foo</styleUrl>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          const fillStyle = style.getFill();\n          expect(fillStyle).to.be.an(Fill);\n          expect(fillStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can apply a shared IconStyle to a feature (and set the crossOrigin option)","suites":["ol.format.KML","without parameters","#readFeatures","shared styles"],"updatePoint":{"line":1612,"column":86,"index":121264},"line":1612,"code":"        it('can apply a shared IconStyle to a feature (and set the crossOrigin option)', function () {\n          format = new KML({\n            crossOrigin: null\n          });\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Style id=\"foo\">' + '      <IconStyle>' + '        <Icon>' + '          <href>http://bar.png</href>' + '        </Icon>' + '      </IconStyle>' + '    </Style>' + '    <Placemark>' + '      <styleUrl>#foo</styleUrl>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle).to.be.an(Icon);\n          expect(new URL(imageStyle.getSrc()).href).to.eql(new URL('http://bar.png').href);\n          expect(imageStyle.getAnchor()).to.be(null);\n          expect(imageStyle.getOrigin()).to.be(null);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getSize()).to.be(null);\n          expect(imageStyle.getScale()).to.be(1);\n          expect(imageStyle.getImage().crossOrigin).to.be(null);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a shared style from a Folder","suites":["ol.format.KML","without parameters","#readFeatures","shared styles"],"updatePoint":{"line":1642,"column":49,"index":123027},"line":1642,"code":"        it('can read a shared style from a Folder', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Folder>' + '      <Style id=\"foo\">' + '        <PolyStyle>' + '          <color>12345678</color>' + '        </PolyStyle>' + '      </Style>' + '    </Folder>' + '    <Placemark>' + '      <styleUrl>#foo</styleUrl>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          const fillStyle = style.getFill();\n          expect(fillStyle).to.be.an(Fill);\n          expect(fillStyle.getColor()).to.eql([0x78, 0x56, 0x34, 0x12 / 255]);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a shared IconStyle from a Folder (and set the crossOrigin option)","suites":["ol.format.KML","without parameters","#readFeatures","shared styles"],"updatePoint":{"line":1659,"column":86,"index":124159},"line":1659,"code":"        it('can read a shared IconStyle from a Folder (and set the crossOrigin option)', function () {\n          format = new KML({\n            crossOrigin: null\n          });\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Folder>' + '      <Style id=\"foo\">' + '        <IconStyle>' + '          <Icon>' + '            <href>http://bar.png</href>' + '          </Icon>' + '        </IconStyle>' + '      </Style>' + '    </Folder>' + '    <Placemark>' + '      <styleUrl>#foo</styleUrl>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const styleFunction = f.getStyleFunction();\n          expect(styleFunction).not.to.be(undefined);\n          const styleArray = styleFunction(f, 0);\n          expect(styleArray).to.be.an(Array);\n          expect(styleArray).to.have.length(1);\n          const style = styleArray[0];\n          expect(style).to.be.an(Style);\n          expect(style.getFill()).to.be(getDefaultFillStyle());\n          expect(style.getStroke()).to.be(getDefaultStrokeStyle());\n          const imageStyle = style.getImage();\n          expect(imageStyle).to.be.an(Icon);\n          expect(new URL(imageStyle.getSrc()).href).to.eql(new URL('http://bar.png').href);\n          expect(imageStyle.getAnchor()).to.be(null);\n          expect(imageStyle.getOrigin()).to.be(null);\n          expect(imageStyle.getRotation()).to.eql(0);\n          expect(imageStyle.getSize()).to.be(null);\n          expect(imageStyle.getScale()).to.be(1);\n          expect(imageStyle.getImage().crossOrigin).to.be(null);\n          expect(style.getText()).to.be(getDefaultTextStyle());\n          expect(style.getZIndex()).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can apply a shared style to multiple features","suites":["ol.format.KML","without parameters","#readFeatures","shared styles"],"updatePoint":{"line":1689,"column":57,"index":125979},"line":1689,"code":"        it('can apply a shared style to multiple features', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Style id=\"foo\">' + '      <PolyStyle>' + '        <color>12345678</color>' + '      </PolyStyle>' + '    </Style>' + '    <Placemark id=\"a\">' + '      <styleUrl>#foo</styleUrl>' + '    </Placemark>' + '    <Placemark id=\"b\">' + '      <styleUrl>#foo</styleUrl>' + '    </Placemark>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(2);\n          const f1 = fs[0];\n          expect(f1).to.be.an(Feature);\n          const styleFunction1 = f1.getStyleFunction();\n          expect(styleFunction1).not.to.be(undefined);\n          const styleArray1 = styleFunction1(f1, 0);\n          expect(styleArray1).to.be.an(Array);\n          const f2 = fs[1];\n          expect(f2).to.be.an(Feature);\n          const styleFunction2 = f2.getStyleFunction();\n          expect(styleFunction2).not.to.be(undefined);\n          const styleArray2 = styleFunction2(f2, 0);\n          expect(styleArray2).to.be.an(Array);\n          expect(styleArray1).to.be(styleArray2);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns no features from an empty Document","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1709,"column":54,"index":127227},"line":1709,"code":"        it('returns no features from an empty Document', function () {\n          const text = '<Document xmlns=\"http://earth.google.com/kml/2.2\">' + '</Document>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.be.empty();\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a single feature from a Document","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1714,"column":53,"index":127486},"line":1714,"code":"        it('can read a single feature from a Document', function () {\n          const text = '<Document xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '  </Placemark>' + '</Document>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          expect(fs[0]).to.be.an(Feature);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a single feature from nested Document","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1720,"column":58,"index":127834},"line":1720,"code":"        it('can read a single feature from nested Document', function () {\n          const text = '<Document xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark>' + '    </Placemark>' + '  </Document>' + '</Document>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          expect(fs[0]).to.be.an(Feature);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can transform and read a single feature from a Document","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1726,"column":67,"index":128230},"line":1726,"code":"        it('can transform and read a single feature from a Document', function () {\n          const text = '<Document xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>1,2,3</coordinates>' + '    </Point>' + '  </Placemark>' + '</Document>';\n          const fs = format.readFeatures(text, {\n            featureProjection: 'EPSG:3857'\n          });\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(Point);\n          const expectedPoint = transform([1, 2], 'EPSG:4326', 'EPSG:3857');\n          expectedPoint.push(3);\n          expect(g.getCoordinates()).to.eql(expectedPoint);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a multiple features from a Document","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1740,"column":56,"index":128977},"line":1740,"code":"        it('can read a multiple features from a Document', function () {\n          const text = '<Document xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark id=\"1\">' + '  </Placemark>' + '  <Placemark id=\"2\">' + '  </Placemark>' + '</Document>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(2);\n          expect(fs[0]).to.be.an(Feature);\n          expect(fs[0].getId()).to.be('1');\n          expect(fs[1]).to.be.an(Feature);\n          expect(fs[1].getId()).to.be('2');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns no features from an empty Folder","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1749,"column":52,"index":129501},"line":1749,"code":"        it('returns no features from an empty Folder', function () {\n          const text = '<Folder xmlns=\"http://earth.google.com/kml/2.2\">' + '</Folder>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.be.empty();\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a single feature from a Folder","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1754,"column":51,"index":129754},"line":1754,"code":"        it('can read a single feature from a Folder', function () {\n          const text = '<Folder xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark>' + '  </Placemark>' + '</Folder>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          expect(fs[0]).to.be.an(Feature);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a multiple features from a Folder","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1760,"column":54,"index":130094},"line":1760,"code":"        it('can read a multiple features from a Folder', function () {\n          const text = '<Folder xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark id=\"1\">' + '  </Placemark>' + '  <Placemark id=\"2\">' + '  </Placemark>' + '</Folder>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(2);\n          expect(fs[0]).to.be.an(Feature);\n          expect(fs[0].getId()).to.be('1');\n          expect(fs[1]).to.be.an(Feature);\n          expect(fs[1].getId()).to.be('2');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read features from Folders nested in Documents","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1769,"column":62,"index":130624},"line":1769,"code":"        it('can read features from Folders nested in Documents', function () {\n          const text = '<Document xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Folder>' + '    <Placemark>' + '    </Placemark>' + '  </Folder>' + '</Document>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          expect(fs[0]).to.be.an(Feature);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read features from Folders nested in Folders","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1775,"column":60,"index":131009},"line":1775,"code":"        it('can read features from Folders nested in Folders', function () {\n          const text = '<Folder xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Folder>' + '    <Placemark>' + '    </Placemark>' + '  </Folder>' + '</Folder>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          expect(fs[0]).to.be.an(Feature);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read a single feature","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1781,"column":37,"index":131367},"line":1781,"code":"        it('can read a single feature', function () {\n          const text = '<Placemark xmlns=\"http://earth.google.com/kml/2.2\">' + '</Placemark>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(1);\n          expect(fs[0]).to.be.an(Feature);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can read features at multiple levels","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1787,"column":48,"index":131670},"line":1787,"code":"        it('can read features at multiple levels', function () {\n          const text = '<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Document>' + '    <Placemark id=\"a\"/>' + '    <Folder>' + '      <Placemark id=\"b\"/>' + '      <Folder>' + '        <Placemark id=\"c\"/>' + '      </Folder>' + '      <Placemark id=\"d\"/>' + '    </Folder>' + '    <Placemark id=\"e\"/>' + '  </Document>' + '</kml>';\n          const fs = format.readFeatures(text);\n          expect(fs).to.have.length(5);\n          expect(fs[0]).to.be.an(Feature);\n          expect(fs[0].getId()).to.be('a');\n          expect(fs[1]).to.be.an(Feature);\n          expect(fs[1].getId()).to.be('b');\n          expect(fs[2]).to.be.an(Feature);\n          expect(fs[2].getId()).to.be('c');\n          expect(fs[3]).to.be.an(Feature);\n          expect(fs[3].getId()).to.be('d');\n          expect(fs[4]).to.be.an(Feature);\n          expect(fs[4].getId()).to.be('e');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"supports common namespaces","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1802,"column":38,"index":132600},"line":1802,"code":"        it('supports common namespaces', function () {\n          expect(format.readFeatures('<kml xmlns=\"http://earth.google.com/kml/2.0\">' + '  <Placemark/>' + '</kml>')).to.have.length(1);\n          expect(format.readFeatures('<kml xmlns=\"http://earth.google.com/kml/2.2\">' + '  <Placemark/>' + '</kml>')).to.have.length(1);\n          expect(format.readFeatures('<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark/>' + '</kml>')).to.have.length(1);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"ignores unknown namespaces","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1807,"column":38,"index":133074},"line":1807,"code":"        it('ignores unknown namespaces', function () {\n          expect(format.readFeatures('<kml xmlns=\"http://example.com/notkml/1.0\">' + '  <Placemark/>' + '</kml>')).to.be.empty();\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"can write multiple features","suites":["ol.format.KML","without parameters","#readFeatures","multiple features"],"updatePoint":{"line":1810,"column":39,"index":133272},"line":1810,"code":"        it('can write multiple features', function () {\n          const feature1 = new Feature();\n          feature1.setId('1');\n          const feature2 = new Feature();\n          feature2.setId('2');\n          const node = format.writeFeaturesNode([feature1, feature2]);\n          const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\"' + ' xmlns:gx=\"http://www.google.com/kml/ext/2.2\"' + ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + ' xsi:schemaLocation=\"http://www.opengis.net/kml/2.2' + ' https://developers.google.com/kml/schema/kml22gx.xsd\">' + '  <Document>' + '    <Placemark id=\"1\">' + '    </Placemark>' + '    <Placemark id=\"2\">' + '    </Placemark>' + '  </Document>' + '</kml>';\n          expect(node).to.xmleql(parse(text));\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"should ignore invalid coordinates","suites":["ol.format.KML","without parameters","#readFeatures","error handling"],"updatePoint":{"line":1821,"column":45,"index":134104},"line":1821,"code":"        it('should ignore invalid coordinates', function () {\n          const doc = new DOMParser().parseFromString('<coordinates>INVALID</coordinates>', 'application/xml');\n          const node = doc.firstChild;\n          expect(readFlatCoordinates(node)).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"should ignore Points with invalid coordinates","suites":["ol.format.KML","without parameters","#readFeatures","error handling"],"updatePoint":{"line":1826,"column":57,"index":134403},"line":1826,"code":"        it('should ignore Points with invalid coordinates', function () {\n          const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>INVALID COORDINATES</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(kml);\n          expect(fs).to.be.an(Array);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.getGeometry()).to.be(null);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"should ignore LineStrings with invalid coordinates","suites":["ol.format.KML","without parameters","#readFeatures","error handling"],"updatePoint":{"line":1835,"column":62,"index":134940},"line":1835,"code":"        it('should ignore LineStrings with invalid coordinates', function () {\n          const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark>' + '    <Point>' + '      <coordinates>INVALID COORDINATES</coordinates>' + '    </Point>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(kml);\n          expect(fs).to.be.an(Array);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.getGeometry()).to.be(null);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"should ignore Polygons with no rings","suites":["ol.format.KML","without parameters","#readFeatures","error handling"],"updatePoint":{"line":1844,"column":48,"index":135463},"line":1844,"code":"        it('should ignore Polygons with no rings', function () {\n          const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark>' + '    <Polygon>' + '      <coordinates>INVALID COORDINATES</coordinates>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(kml);\n          expect(fs).to.be.an(Array);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.getGeometry()).to.be(null);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"should ignore Polygons with no outer ring","suites":["ol.format.KML","without parameters","#readFeatures","error handling"],"updatePoint":{"line":1853,"column":53,"index":135995},"line":1853,"code":"        it('should ignore Polygons with no outer ring', function () {\n          const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark>' + '    <Polygon>' + '      <innerRingIs>' + '        <LinearRing>' + '          <coordinates>1,2,3 4,5,6 7,8,9</coordinates>' + '        </LinearRing>' + '      </innerRingIs>' + '    </Polygon>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(kml);\n          expect(fs).to.be.an(Array);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.getGeometry()).to.be(null);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"should ignore geometries with invalid coordinates","suites":["ol.format.KML","without parameters","#readFeatures","error handling"],"updatePoint":{"line":1862,"column":61,"index":136637},"line":1862,"code":"        it('should ignore geometries with invalid coordinates', function () {\n          const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark>' + '    <MultiGeometry>' + '      <Point>' + '        <coordinates>INVALID COORDINATES</coordinates>' + '      </Point>' + '    </MultiGeometry>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(kml);\n          expect(fs).to.be.an(Array);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          const g = f.getGeometry();\n          expect(g).to.be.an(GeometryCollection);\n          expect(g.getGeometries()).to.be.empty();\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"should ignore invalid booleans","suites":["ol.format.KML","without parameters","#readFeatures","error handling"],"updatePoint":{"line":1873,"column":42,"index":137300},"line":1873,"code":"        it('should ignore invalid booleans', function () {\n          const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark>' + '    <visibility>foo</visibility>' + '  </Placemark>' + '</kml>';\n          const fs = format.readFeatures(kml);\n          expect(fs).to.be.an(Array);\n          expect(fs).to.have.length(1);\n          const f = fs[0];\n          expect(f).to.be.an(Feature);\n          expect(f.get('visibility')).to.be(undefined);\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"parse all valid features in a Folder, without error","suites":["ol.format.KML","without parameters","#readFeatures","error handling"],"updatePoint":{"line":1882,"column":63,"index":137794},"line":1882,"code":"        it('parse all valid features in a Folder, without error', function () {\n          const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark id=\"a\"/>' + '  <Folder>' + '    <Placemark id=\"b\"/>' + '    <Placemark id=\"c\">' + '      <visibility>foo</visibility>' + '    </Placemark>' + '    <Placemark id=\"d\"/>' + '  </Folder>' + '  <Placemark id=\"e\"/>' + '</kml>';\n          const fs = format.readFeatures(kml);\n          expect(fs).to.be.an(Array);\n          expect(fs).to.have.length(5);\n          expect(fs[0]).to.be.an(Feature);\n          expect(fs[0].getId()).to.be('a');\n          expect(fs[1]).to.be.an(Feature);\n          expect(fs[1].getId()).to.be('b');\n          expect(fs[2]).to.be.an(Feature);\n          expect(fs[2].getId()).to.be('c');\n          expect(fs[3]).to.be.an(Feature);\n          expect(fs[3].getId()).to.be('d');\n          expect(fs[4]).to.be.an(Feature);\n          expect(fs[4].getId()).to.be('e');\n        });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"creates 50 features","suites":["ol.format.KML","without parameters","when parsing states.kml"],"updatePoint":{"line":1912,"column":29,"index":139076},"line":1912,"code":"      it('creates 50 features', function () {\n        expect(features).to.have.length(50);\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"creates features with heterogeneous geometry collections","suites":["ol.format.KML","without parameters","when parsing states.kml"],"updatePoint":{"line":1915,"column":66,"index":139214},"line":1915,"code":"      it('creates features with heterogeneous geometry collections', function () {\n        // FIXME decide if we should instead create features with multiple geoms\n        const feature = features[0];\n        expect(feature).to.be.an(Feature);\n        const geometry = feature.getGeometry();\n        expect(geometry).to.be.an(GeometryCollection);\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"creates a Point and a MultiPolygon for Alaska","suites":["ol.format.KML","without parameters","when parsing states.kml"],"updatePoint":{"line":1922,"column":55,"index":139560},"line":1922,"code":"      it('creates a Point and a MultiPolygon for Alaska', function () {\n        const alaska = features.find(function (feature) {\n          return feature.get('name') === 'Alaska';\n        });\n        expect(alaska).to.be.an(Feature);\n        const geometry = alaska.getGeometry();\n        expect(geometry).to.be.an(GeometryCollection);\n        const components = geometry.getGeometries();\n        expect(components).to.have.length(2);\n        expect(components[0]).to.be.an(Point);\n        expect(components[1]).to.be.an(MultiPolygon);\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"reads style and icon","suites":["ol.format.KML","without parameters","when parsing states.kml"],"updatePoint":{"line":1934,"column":30,"index":140082},"line":1934,"code":"      it('reads style and icon', function () {\n        const f = features[0];\n        const styleFunction = f.getStyleFunction();\n        expect(styleFunction).not.to.be(undefined);\n        const styleArray = styleFunction(f, 0);\n        expect(styleArray).to.be.an(Array);\n        expect(styleArray).to.have.length(2);\n        const style = styleArray[0];\n        expect(style).to.be.an(Style);\n        const gc = style.getGeometryFunction()(f);\n        expect(gc).to.be.an(GeometryCollection);\n        const gs = gc.getGeometries();\n        expect(gs).to.be.an(Array);\n        expect(gs).to.have.length(1);\n        expect(gs[0]).to.be.an(Point);\n        expect(gs[0].getCoordinates()).to.eql(f.getGeometry().getGeometries()[0].getCoordinates());\n        const imageStyle = style.getImage();\n        expect(imageStyle).to.be.an(Icon);\n        expect(imageStyle.getScale()).to.eql(0.4);\n        expect(imageStyle.getSrc()).to.eql('http://maps.google.com/mapfiles/kml/shapes/star.png');\n        const textStyle = style.getText();\n        expect(textStyle).to.be.an(Text);\n        const textFillStyle = textStyle.getFill();\n        expect(textFillStyle).to.be.an(Fill);\n        expect(textFillStyle.getColor()).to.eql([0xff, 0xff, 0x00, 0x99 / 255]);\n        expect(textStyle.getText()).to.eql(f.get('name'));\n        const style1 = styleArray[1];\n        expect(style1).to.be.an(Style);\n        expect(style1.getGeometryFunction()(f)).to.be(f.getGeometry());\n        expect(style1.getFill()).to.be(null);\n        expect(style1.getImage()).to.be(null);\n        const strokeStyle = style1.getStroke();\n        expect(strokeStyle).to.be.an(Stroke);\n        expect(strokeStyle.getColor()).to.eql([0xff, 0x00, 0xff, 0xff / 255]);\n        expect(strokeStyle.getWidth()).to.be(2);\n        expect(style1.getText()).to.be(null);\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"feature must not have a properties property","suites":["ol.format.KML","without parameters","#JSONExport"],"updatePoint":{"line":1984,"column":53,"index":142268},"line":1984,"code":"      it('feature must not have a properties property', function () {\n        const geojsonFormat = new GeoJSON();\n        features.forEach(function (feature) {\n          const geojsonFeature = geojsonFormat.writeFeatureObject(feature);\n          expect(geojsonFeature.properties).to.be(null);\n          JSON.stringify(geojsonFeature);\n        });\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns undefined if there is no name","suites":["ol.format.KML","without parameters","#readName"],"updatePoint":{"line":1994,"column":47,"index":142668},"line":1994,"code":"      it('returns undefined if there is no name', function () {\n        const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Document>' + '    <Folder>' + '     <Placemark/>' + '    </Folder>' + '  </Document>' + '</kml>';\n        expect(format.readName(kml)).to.be(undefined);\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns the name of the first Document","suites":["ol.format.KML","without parameters","#readName"],"updatePoint":{"line":1998,"column":48,"index":142969},"line":1998,"code":"      it('returns the name of the first Document', function () {\n        const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Document>' + '    <name>Document name</name>' + '  </Document>' + '</kml>';\n        expect(format.readName(kml)).to.be('Document name');\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns the name of the first Folder","suites":["ol.format.KML","without parameters","#readName"],"updatePoint":{"line":2002,"column":46,"index":143252},"line":2002,"code":"      it('returns the name of the first Folder', function () {\n        const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Folder>' + '    <name>Folder name</name>' + '  </Folder>' + '</kml>';\n        expect(format.readName(kml)).to.be('Folder name');\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns the name of the first Placemark","suites":["ol.format.KML","without parameters","#readName"],"updatePoint":{"line":2006,"column":49,"index":143530},"line":2006,"code":"      it('returns the name of the first Placemark', function () {\n        const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Placemark>' + '    <name>Placemark name</name>' + '  </Placemark>' + '</kml>';\n        expect(format.readName(kml)).to.be('Placemark name');\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"searches breadth-first","suites":["ol.format.KML","without parameters","#readName"],"updatePoint":{"line":2010,"column":32,"index":143803},"line":2010,"code":"      it('searches breadth-first', function () {\n        const kml = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Document>' + '    <Placemark>' + '      <name>Placemark name</name>' + '    </Placemark>' + '    <name>Document name</name>' + '  </Document>' + '</kml>';\n        expect(format.readName(kml)).to.be('Document name');\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns empty array if no network links found","suites":["ol.format.KML","without parameters","#readNetworkLinks"],"updatePoint":{"line":2016,"column":55,"index":144230},"line":2016,"code":"      it('returns empty array if no network links found', function () {\n        const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Document>' + '  </Document>' + '</kml>';\n        const nl = format.readNetworkLinks(text);\n        expect(nl).to.have.length(0);\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns an array of network links","suites":["ol.format.KML","without parameters","#readNetworkLinks"],"updatePoint":{"line":2021,"column":43,"index":144503},"line":2021,"code":"      it('returns an array of network links', function () {\n        const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Document>' + '    <NetworkLink>' + '      <name>bar</name>' + '      <Link>' + '        <href>bar/bar.kml</href>' + '      </Link>' + '    </NetworkLink>' + '  </Document>' + '  <Folder>' + '    <NetworkLink>' + '      <Link>' + '        <href>http://foo.com/foo.kml</href>' + '      </Link>' + '    </NetworkLink>' + '  </Folder>' + '</kml>';\n        const nl = format.readNetworkLinks(text);\n        expect(nl).to.have.length(2);\n        expect(nl[0].name).to.be('bar');\n        expect(nl[0].href.replace(window.location.origin, '')).to.be('/bar/bar.kml');\n        expect(nl[1].href).to.be('http://foo.com/foo.kml');\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns an array of network links","suites":["ol.format.KML","without parameters","#readNetworkLinksFile"],"updatePoint":{"line":2042,"column":43,"index":145609},"line":2042,"code":"      it('returns an array of network links', function () {\n        expect(nl).to.have.length(2);\n        expect(nl[0].name).to.be('bar');\n        expect(/\\/bar\\/bar\\.kml$/.test(nl[0].href)).to.be.ok();\n        expect(nl[1].href).to.be('http://foo.com/foo.kml');\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns an array of regions","suites":["ol.format.KML","without parameters","#readRegion"],"updatePoint":{"line":2050,"column":37,"index":145926},"line":2050,"code":"      it('returns an array of regions', function () {\n        const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Document>' + '    <Region>' + '      <LatLonAltBox>' + '        <north>0</north>' + '        <south>-90</south>' + '        <east>0</east>' + '        <west>-180</west>' + '        <minAltitude>0</minAltitude>' + '        <maxAltitude>4000</maxAltitude>' + '        <altitudeMode>clampToGround</altitudeMode>' + '      </LatLonAltBox>' + '      <Lod>' + '        <minLodPixels>0</minLodPixels>' + '        <maxLodPixels>-1</maxLodPixels>' + '        <minFadeExtent>0</minFadeExtent>' + '        <maxFadeExtent>0</maxFadeExtent>' + '      </Lod>' + '    </Region>' + '  </Document>' + '  <Folder>' + '    <Region>' + '      <LatLonAltBox>' + '        <north>90</north>' + '        <south>0</south>' + '        <east>180</east>' + '        <west>0</west>' + '        <minAltitude>0</minAltitude>' + '        <maxAltitude>0</maxAltitude>' + '        <altitudeMode>clampToGround</altitudeMode>' + '      </LatLonAltBox>' + '      <Lod>' + '        <minLodPixels>0</minLodPixels>' + '        <maxLodPixels>-1</maxLodPixels>' + '        <minFadeExtent>0</minFadeExtent>' + '        <maxFadeExtent>0</maxFadeExtent>' + '      </Lod>' + '    </Region>' + '  </Folder>' + '</kml>';\n        const nl = format.readRegion(text);\n        expect(nl).to.have.length(2);\n        expect(nl[0].extent).to.eql([-180, -90, 0, 0]);\n        expect(nl[0].minAltitude).to.be(0);\n        expect(nl[0].maxAltitude).to.be(4000);\n        expect(nl[0].altitudeMode).to.be('clampToGround');\n        expect(nl[0].minLodPixels).to.be(0);\n        expect(nl[0].maxLodPixels).to.be(-1);\n        expect(nl[0].minFadeExtent).to.be(0);\n        expect(nl[0].maxFadeExtent).to.be(0);\n        expect(nl[1].extent).to.eql([0, 0, 180, 90]);\n      });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"returns an array of cameras","suites":["ol.format.KML","#readCamera"],"updatePoint":{"line":2067,"column":35,"index":147814},"line":2067,"code":"    it('returns an array of cameras', function () {\n      const text = '<kml xmlns=\"http://www.opengis.net/kml/2.2\">' + '  <Document>' + '    <Camera>' + '      <Latitude>11</Latitude>' + '      <Longitude>46</Longitude>' + '      <Altitude>4000</Altitude>' + '      <AltitudeMode>clampToGround</AltitudeMode>' + '      <Heading>18.0</Heading>' + '      <Tilt>85</Tilt>' + '      <Roll>0</Roll>' + '    </Camera>' + '  </Document>' + '  <Placemark>' + '    <Point>' + '      <coordinates>' + '        8.167492844000884,46.88946232784758' + '      </coordinates>' + '    </Point>' + '    <Camera>' + '      <Latitude>22</Latitude>' + '      <Longitude>10</Longitude>' + '      <Altitude>40</Altitude>' + '      <AltitudeMode>clampToGround</AltitudeMode>' + '      <Heading>75</Heading>' + '      <Tilt>30</Tilt>' + '      <Roll>80</Roll>' + '    </Camera>' + '  </Placemark>' + '</kml>';\n      const nl = format.readCamera(text);\n      expect(nl).to.have.length(2);\n      expect(nl[0].Latitude).to.be(11);\n      expect(nl[0].Longitude).to.be(46);\n      expect(nl[0].Altitude).to.be(4000);\n      expect(nl[0].Heading).to.be(18.0);\n      expect(nl[0].Tilt).to.be(85);\n      expect(nl[0].Roll).to.be(0);\n      expect(nl[0].AltitudeMode).to.be('clampToGround');\n      expect(nl[1].Latitude).to.be(22);\n      expect(nl[1].Longitude).to.be(10);\n      expect(nl[1].Altitude).to.be(40);\n      expect(nl[1].Heading).to.be(75);\n      expect(nl[1].Tilt).to.be(30);\n      expect(nl[1].Roll).to.be(80);\n      expect(nl[1].AltitudeMode).to.be('clampToGround');\n    });","file":"browser/spec/ol/format/kml.test.js","skipped":false,"dir":"test"},{"name":"uses ol.render.Feature as feature class by default","suites":["#readFeatures"],"updatePoint":{"line":24,"column":58,"index":978},"line":24,"code":"    it('uses ol.render.Feature as feature class by default', function () {\n      const format = new MVT({\n        layers: ['water']\n      });\n      const features = format.readFeatures(data, options);\n      expect(features[0]).to.be.a(RenderFeature);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"parses only specified layers","suites":["#readFeatures"],"updatePoint":{"line":31,"column":36,"index":1215},"line":31,"code":"    it('parses only specified layers', function () {\n      const format = new MVT({\n        layers: ['water']\n      });\n      const features = format.readFeatures(data, options);\n      expect(features.length).to.be(10);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"parses geometries correctly","suites":["#readFeatures"],"updatePoint":{"line":38,"column":35,"index":1442},"line":38,"code":"    it('parses geometries correctly', function () {\n      const format = new MVT({\n        featureClass: Feature,\n        layers: ['poi_label']\n      });\n      let geometry;\n      geometry = format.readFeatures(data)[0].getGeometry();\n      expect(geometry.getType()).to.be('Point');\n      expect(geometry.getCoordinates()).to.eql([-1210, 2681]);\n      format.setLayers(['water']);\n      geometry = format.readFeatures(data)[0].getGeometry();\n      expect(geometry.getType()).to.be('Polygon');\n      expect(geometry.getCoordinates()[0].length).to.be(10);\n      expect(geometry.getCoordinates()[0][0]).to.eql([1007, 2302]);\n      format.setLayers(['barrier_line']);\n      geometry = format.readFeatures(data)[0].getGeometry();\n      expect(geometry.getType()).to.be('MultiLineString');\n      expect(geometry.getCoordinates()[1].length).to.be(6);\n      expect(geometry.getCoordinates()[1][0]).to.eql([4160, 3489]);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"avoids unnecessary reprojections of the ol.render.Feature","suites":["#readFeatures"],"updatePoint":{"line":58,"column":65,"index":2393},"line":58,"code":"    it('avoids unnecessary reprojections of the ol.render.Feature', function () {\n      const format = new MVT({\n        layers: ['poi_label']\n      });\n      const geometry = format.readFeatures(data)[0].getGeometry();\n      expect(geometry.getType()).to.be('Point');\n      expect(geometry.getFlatCoordinates()).to.eql([-1210, 2681]);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"parses id property","suites":["#readFeatures"],"updatePoint":{"line":66,"column":26,"index":2698},"line":66,"code":"    it('parses id property', function () {\n      // ol.Feature\n      let format = new MVT({\n        featureClass: Feature,\n        layers: ['building']\n      });\n      let features = format.readFeatures(data, options);\n      expect(features[0].getId()).to.be(2);\n      // ol.render.Feature\n      format = new MVT({\n        layers: ['building']\n      });\n      features = format.readFeatures(data, options);\n      expect(features[0].getId()).to.be(2);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"accepts custom idProperty","suites":["#readFeatures"],"updatePoint":{"line":81,"column":33,"index":3164},"line":81,"code":"    it('accepts custom idProperty', function () {\n      const format = new MVT({\n        featureClass: Feature,\n        layers: ['poi_label'],\n        idProperty: 'osm_id'\n      });\n      const features = format.readFeatures(data, options);\n      const first = features[0];\n      expect(first.getId()).to.be(1000000057590683);\n      expect(first.get('osm_id')).to.be(undefined);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"accepts custom idProperty (render features)","suites":["#readFeatures"],"updatePoint":{"line":92,"column":51,"index":3569},"line":92,"code":"    it('accepts custom idProperty (render features)', function () {\n      const format = new MVT({\n        layers: ['poi_label'],\n        idProperty: 'osm_id'\n      });\n      const features = format.readFeatures(data, options);\n      const first = features[0];\n      expect(first.getId()).to.be(1000000057590683);\n      expect(first.get('osm_id')).to.be(undefined);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"works if you provide a bogus idProperty","suites":["#readFeatures"],"updatePoint":{"line":102,"column":47,"index":3939},"line":102,"code":"    it('works if you provide a bogus idProperty', function () {\n      const format = new MVT({\n        layers: ['poi_label'],\n        idProperty: 'bogus'\n      });\n      const features = format.readFeatures(data, options);\n      const first = features[0];\n      expect(first.getId()).to.be(undefined);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"accepts a geometryName","suites":["ol.format.MVT","#createFeature_"],"updatePoint":{"line":119,"column":30,"index":4477},"line":119,"code":"    it('accepts a geometryName', function () {\n      const format = new MVT({\n        featureClass: Feature,\n        geometryName: 'myGeom'\n      });\n      const rawFeature = {\n        id: 1,\n        properties: {\n          geometry: 'foo'\n        },\n        type: 1,\n        layer: {\n          name: 'layer1'\n        }\n      };\n      format.readRawGeometry_ = function ({}, rawFeature, flatCoordinates, ends) {\n        flatCoordinates.push(0, 0);\n        ends.push(2);\n      };\n      const feature = format.createFeature_({}, rawFeature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.a(Point);\n      expect(feature.get('myGeom')).to.equal(geometry);\n      expect(feature.get('geometry')).to.be('foo');\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"detects a Polygon","suites":["ol.format.MVT","#createFeature_"],"updatePoint":{"line":144,"column":25,"index":5213},"line":144,"code":"    it('detects a Polygon', function () {\n      const format = new MVT({\n        featureClass: Feature\n      });\n      const rawFeature = {\n        type: 3,\n        properties: {},\n        layer: {\n          name: 'layer1'\n        }\n      };\n      format.readRawGeometry_ = function ({}, rawFeature, flatCoordinates, ends) {\n        flatCoordinates.push(0, 0, 3, 0, 3, 3, 0, 3, 0, 0);\n        flatCoordinates.push(1, 1, 1, 2, 2, 2, 2, 1, 1, 1);\n        ends.push(10, 20);\n      };\n      const feature = format.createFeature_({}, rawFeature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.a(Polygon);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"detects a MultiPolygon","suites":["ol.format.MVT","#createFeature_"],"updatePoint":{"line":164,"column":30,"index":5855},"line":164,"code":"    it('detects a MultiPolygon', function () {\n      const format = new MVT({\n        featureClass: Feature\n      });\n      const rawFeature = {\n        type: 3,\n        properties: {},\n        layer: {\n          name: 'layer1'\n        }\n      };\n      format.readRawGeometry_ = function ({}, rawFeature, flatCoordinates, ends) {\n        flatCoordinates.push(0, 0, 1, 0, 1, 1, 0, 1, 0, 0);\n        flatCoordinates.push(1, 1, 2, 1, 2, 2, 1, 2, 1, 1);\n        ends.push(10, 20);\n      };\n      const feature = format.createFeature_({}, rawFeature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.a(MultiPolygon);\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"creates ol.render.Feature instances","suites":["ol.format.MVT","#createFeature_"],"updatePoint":{"line":184,"column":43,"index":6515},"line":184,"code":"    it('creates ol.render.Feature instances', function () {\n      const format = new MVT();\n      const rawFeature = {\n        type: 3,\n        properties: {\n          foo: 'bar'\n        },\n        layer: {\n          name: 'layer1'\n        }\n      };\n      let createdFlatCoordinates;\n      let createdEnds;\n      format.readRawGeometry_ = function ({}, rawFeature, flatCoordinates, ends) {\n        flatCoordinates.push(0, 0, 1, 0, 1, 1, 1, 0, 0, 0);\n        flatCoordinates.push(1, 1, 2, 1, 2, 2, 2, 1, 1, 1);\n        createdFlatCoordinates = flatCoordinates;\n        ends.push(10, 20);\n        createdEnds = ends;\n      };\n      format.dataProjection.setExtent([0, 0, 4096, 4096]);\n      format.dataProjection.setWorldExtent(options.extent);\n      const feature = format.createFeature_({}, rawFeature, format.adaptOptions(options));\n      expect(feature).to.be.a(RenderFeature);\n      expect(feature.getType()).to.be('Polygon');\n      expect(feature.getFlatCoordinates()).to.equal(createdFlatCoordinates);\n      expect(feature.getEnds()).to.equal(createdEnds);\n      expect(feature.get('foo')).to.be('bar');\n    });","file":"browser/spec/ol/format/mvt.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection from document","suites":["ol.format.OSMXML","#readProjection"],"updatePoint":{"line":12,"column":52,"index":536},"line":12,"code":"    it('returns the default projection from document', function () {\n      const projection = format.readProjectionFromDocument();\n      expect(projection).to.eql(getProjection('EPSG:4326'));\n    });","file":"browser/spec/ol/format/osmxml.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection from node","suites":["ol.format.OSMXML","#readProjection"],"updatePoint":{"line":16,"column":48,"index":732},"line":16,"code":"    it('returns the default projection from node', function () {\n      const projection = format.readProjectionFromNode();\n      expect(projection).to.eql(getProjection('EPSG:4326'));\n    });","file":"browser/spec/ol/format/osmxml.test.js","skipped":false,"dir":"test"},{"name":"can read an empty document","suites":["ol.format.OSMXML","#readFeatures"],"updatePoint":{"line":22,"column":34,"index":958},"line":22,"code":"    it('can read an empty document', function () {\n      const text = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<osm version=\"0.6\" generator=\"my hand\">' + '</osm>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(0);\n    });","file":"browser/spec/ol/format/osmxml.test.js","skipped":false,"dir":"test"},{"name":"can read nodes","suites":["ol.format.OSMXML","#readFeatures"],"updatePoint":{"line":27,"column":22,"index":1201},"line":27,"code":"    it('can read nodes', function () {\n      const text = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<osm version=\"0.6\" generator=\"my hand\">' + '  <node id=\"1\" lat=\"1\" lon=\"2\">' + '    <tag k=\"name\" v=\"1\"/>' + '  </node>' + '  <node id=\"2\" lat=\"3\" lon=\"4\">' + '    <tag k=\"name\" v=\"2\"/>' + '  </node>' + '</osm>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(2);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(Point);\n      expect(g.getCoordinates()).to.eql([2, 1]);\n    });","file":"browser/spec/ol/format/osmxml.test.js","skipped":false,"dir":"test"},{"name":"can read nodes and ways","suites":["ol.format.OSMXML","#readFeatures"],"updatePoint":{"line":37,"column":31,"index":1786},"line":37,"code":"    it('can read nodes and ways', function () {\n      const text = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<osm version=\"0.6\" generator=\"my hand\">' + '  <node id=\"1\" lat=\"1\" lon=\"2\">' + '    <tag k=\"name\" v=\"1\"/>' + '  </node>' + '  <node id=\"2\" lat=\"3\" lon=\"4\">' + '    <tag k=\"name\" v=\"2\"/>' + '  </node>' + '  <way id=\"3\">' + '    <tag k=\"name\" v=\"3\"/>' + '    <nd ref=\"1\" />' + '    <nd ref=\"2\" />' + '  </way>' + '</osm>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(3);\n      const point = fs[0];\n      expect(point).to.be.an(Feature);\n      let g = point.getGeometry();\n      expect(g).to.be.an(Point);\n      expect(g.getCoordinates()).to.eql([2, 1]);\n      const line = fs[2];\n      expect(line).to.be.an(Feature);\n      g = line.getGeometry();\n      expect(g).to.be.an(LineString);\n      expect(g.getCoordinates()).to.eql([[2, 1], [4, 3]]);\n    });","file":"browser/spec/ol/format/osmxml.test.js","skipped":false,"dir":"test"},{"name":"can read ways before nodes","suites":["ol.format.OSMXML","#readFeatures"],"updatePoint":{"line":52,"column":34,"index":2683},"line":52,"code":"    it('can read ways before nodes', function () {\n      const text = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<osm version=\"0.6\" generator=\"my hand\">' + '  <way id=\"3\">' + '    <tag k=\"name\" v=\"3\"/>' + '    <nd ref=\"1\" />' + '    <nd ref=\"2\" />' + '  </way>' + '  <node id=\"1\" lat=\"1\" lon=\"2\">' + '    <tag k=\"name\" v=\"1\"/>' + '  </node>' + '  <node id=\"2\" lat=\"3\" lon=\"4\">' + '    <tag k=\"name\" v=\"2\"/>' + '  </node>' + '</osm>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(3);\n      const line = fs[2];\n      expect(line).to.be.an(Feature);\n      const g = line.getGeometry();\n      expect(g).to.be.an(LineString);\n      expect(g.getCoordinates()).to.eql([[2, 1], [4, 3]]);\n    });","file":"browser/spec/ol/format/osmxml.test.js","skipped":false,"dir":"test"},{"name":"can read coordinates from ways","suites":["ol.format.OSMXML","#readFeatures"],"updatePoint":{"line":62,"column":38,"index":3407},"line":62,"code":"    it('can read coordinates from ways', function () {\n      const text = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<osm version=\"0.6\" generator=\"my hand\">' + '  <way id=\"3\">' + '    <tag k=\"name\" v=\"3\"/>' + '    <nd ref=\"1\" lat=\"1\" lon=\"2\" />' + '    <nd ref=\"2\" lat=\"3\" lon=\"4\" />' + '  </way>' + '</osm>';\n      const fs = format.readFeatures(text);\n      expect(fs).to.have.length(1);\n      const line = fs[0];\n      expect(line).to.be.an(Feature);\n      const g = line.getGeometry();\n      expect(g).to.be.an(LineString);\n      expect(g.getCoordinates()).to.eql([[2, 1], [4, 3]]);\n    });","file":"browser/spec/ol/format/osmxml.test.js","skipped":false,"dir":"test"},{"name":"can transform and read nodes","suites":["ol.format.OSMXML","#readFeatures"],"updatePoint":{"line":72,"column":36,"index":4001},"line":72,"code":"    it('can transform and read nodes', function () {\n      const text = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<osm version=\"0.6\" generator=\"my hand\">' + '  <node id=\"1\" lat=\"1\" lon=\"2\">' + '    <tag k=\"name\" v=\"1\"/>' + '  </node>' + '  <node id=\"2\" lat=\"3\" lon=\"4\">' + '    <tag k=\"name\" v=\"2\"/>' + '  </node>' + '</osm>';\n      const fs = format.readFeatures(text, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(fs).to.have.length(2);\n      const f = fs[0];\n      expect(f).to.be.an(Feature);\n      const g = f.getGeometry();\n      expect(g).to.be.an(Point);\n      expect(g.getCoordinates()).to.eql(transform([2, 1], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"browser/spec/ol/format/osmxml.test.js","skipped":false,"dir":"test"},{"name":"should read ServiceProvider tag properly","suites":["ol.format.OWS 1.1"],"updatePoint":{"line":5,"column":46,"index":228},"line":5,"code":"  it('should read ServiceProvider tag properly', function () {\n    const doc = parse('<ows:GetCapabilities xmlns:ows=\"http://www.opengis.net/ows/1.1\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" >' + '<ows:ServiceProvider>' + '<ows:ProviderName>MiraMon</ows:ProviderName>' + '<ows:ProviderSite ' + 'xlink:href=\"http://www.creaf.uab.es/miramon\"/>' + '<ows:ServiceContact>' + '<ows:IndividualName>Joan Maso Pau' + '</ows:IndividualName>' + '<ows:PositionName>Senior Software Engineer' + '</ows:PositionName>' + '<ows:ContactInfo>' + '<ows:Phone>' + '<ows:Voice>+34 93 581 1312</ows:Voice>' + '<ows:Facsimile>+34 93 581 4151' + '</ows:Facsimile>' + '</ows:Phone>' + '<ows:Address>' + '<ows:DeliveryPoint>Fac Ciencies UAB' + '</ows:DeliveryPoint>' + '<ows:City>Bellaterra</ows:City>' + '<ows:AdministrativeArea>Barcelona' + '</ows:AdministrativeArea>' + '<ows:PostalCode>08193</ows:PostalCode>' + '<ows:Country>Spain</ows:Country>' + '<ows:ElectronicMailAddress>joan.maso@uab.es' + '</ows:ElectronicMailAddress>' + '</ows:Address>' + '</ows:ContactInfo>' + '</ows:ServiceContact>' + '</ows:ServiceProvider>' + '</ows:GetCapabilities>');\n    const obj = parser.read(doc);\n    expect(obj).to.be.ok();\n    const serviceProvider = obj.ServiceProvider;\n    expect(serviceProvider).to.be.ok();\n    expect(serviceProvider.ProviderName).to.eql('MiraMon');\n    const url = 'http://www.creaf.uab.es/miramon';\n    expect(serviceProvider.ProviderSite).to.eql(url);\n    const name = 'Joan Maso Pau';\n    expect(serviceProvider.ServiceContact.IndividualName).to.eql(name);\n    const position = 'Senior Software Engineer';\n    expect(serviceProvider.ServiceContact.PositionName).to.eql(position);\n  });","file":"browser/spec/ol/format/ows.test.js","skipped":false,"dir":"test"},{"name":"should read ServiceIdentification tag properly","suites":["ol.format.OWS 1.1"],"updatePoint":{"line":19,"column":52,"index":1921},"line":19,"code":"  it('should read ServiceIdentification tag properly', function () {\n    const doc = parse('<ows:GetCapabilities xmlns:ows=\"http://www.opengis.net/ows/1.1\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" >' + '<ows:ServiceIdentification>' + '<ows:Title>Web Map Tile Service</ows:Title>' + '<ows:Abstract>Service that contrains the map access interface ' + 'to some TileMatrixSets</ows:Abstract>' + '<ows:Keywords>' + '<ows:Keyword>tile</ows:Keyword>' + '<ows:Keyword>tile matrix set</ows:Keyword>' + '<ows:Keyword>map</ows:Keyword>' + '</ows:Keywords>' + '<ows:ServiceType>OGC WMTS</ows:ServiceType>' + '<ows:ServiceTypeVersion>1.0.0</ows:ServiceTypeVersion>' + '<ows:Fees>none</ows:Fees>' + '<ows:AccessConstraints>none</ows:AccessConstraints>' + '</ows:ServiceIdentification>' + '</ows:GetCapabilities>');\n    const obj = parser.readFromNode(doc.firstChild);\n    expect(obj).to.be.ok();\n    const serviceIdentification = obj.ServiceIdentification;\n    expect(serviceIdentification).to.be.ok();\n    expect(serviceIdentification.Abstract).to.eql('Service that contrains the map access interface to some TileMatrixSets');\n    expect(serviceIdentification.AccessConstraints).to.eql('none');\n    expect(serviceIdentification.Fees).to.eql('none');\n    expect(serviceIdentification.Title).to.eql('Web Map Tile Service');\n    expect(serviceIdentification.ServiceTypeVersion).to.eql('1.0.0');\n    expect(serviceIdentification.ServiceType).to.eql('OGC WMTS');\n  });","file":"browser/spec/ol/format/ows.test.js","skipped":false,"dir":"test"},{"name":"should read OperationsMetadata tag properly","suites":["ol.format.OWS 1.1"],"updatePoint":{"line":32,"column":49,"index":3376},"line":32,"code":"  it('should read OperationsMetadata tag properly', function () {\n    const doc = parse('<ows:GetCapabilities xmlns:ows=\"http://www.opengis.net/ows/1.1\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" >' + '<ows:OperationsMetadata>' + '<ows:Operation name=\"GetCapabilities\">' + '<ows:DCP>' + '<ows:HTTP>' + '<ows:Get xlink:href=' + '\"http://www.miramon.uab.es/cgi-bin/MiraMon5_0.cgi?\">' + '<ows:Constraint name=\"GetEncoding\">' + '<ows:AllowedValues>' + '<ows:Value>KVP</ows:Value>' + '<ows:Value>SOAP</ows:Value>' + '</ows:AllowedValues>' + '</ows:Constraint>' + '</ows:Get>' + '</ows:HTTP>' + '</ows:DCP>' + '</ows:Operation>' + '<ows:Operation name=\"GetTile\">' + '<ows:DCP>' + '<ows:HTTP>' + '<ows:Get xlink:href=\"http://www.miramon.uab.es/cgi-' + 'bin/MiraMon5_0.cgi?\"/>' + '<ows:Get xlink:href=\"http://www.miramon.uab.es/cgi-' + 'bin/MiraMon6_0.cgi?\"/>' + '<ows:Post xlink:href=\"http://www.miramon.uab.es/cgi-' + 'bin/MiraMon7_0.cgi?\"/>' + '</ows:HTTP>' + '</ows:DCP>' + '</ows:Operation>' + '<ows:Operation name=\"GetFeatureInfo\">' + '<ows:DCP>' + '<ows:HTTP>' + '<ows:Get xlink:href=\"http://www.miramon.uab.es/cgi-' + 'bin/MiraMon5_0.cgi?\"/>' + '</ows:HTTP>' + '</ows:DCP>' + '</ows:Operation>' + '</ows:OperationsMetadata>' + '</ows:GetCapabilities>');\n    const obj = parser.readFromNode(doc.firstChild);\n    expect(obj).to.be.ok();\n    const operationsMetadata = obj.OperationsMetadata;\n    expect(operationsMetadata).to.be.ok();\n    const getCap = operationsMetadata.GetCapabilities;\n    let dcp = getCap.DCP;\n    let url = 'http://www.miramon.uab.es/cgi-bin/MiraMon5_0.cgi?';\n    expect(dcp.HTTP.Get[0].href).to.eql(url);\n    expect(dcp.HTTP.Get[0].Constraint[0].name).to.eql('GetEncoding');\n    expect(dcp.HTTP.Get[0].Constraint[0].AllowedValues.Value[0]).to.eql('KVP');\n    url = 'http://www.miramon.uab.es/cgi-bin/MiraMon5_0.cgi?';\n    dcp = operationsMetadata.GetFeatureInfo.DCP;\n    expect(dcp.HTTP.Get[0].href).to.eql(url);\n    expect(dcp.HTTP.Get[0].Constraint).to.be(undefined);\n    url = 'http://www.miramon.uab.es/cgi-bin/MiraMon5_0.cgi?';\n    dcp = operationsMetadata.GetTile.DCP;\n    expect(dcp.HTTP.Get[0].href).to.eql(url);\n    expect(dcp.HTTP.Get[0].Constraint).to.be(undefined);\n  });","file":"browser/spec/ol/format/ows.test.js","skipped":false,"dir":"test"},{"name":"#getFeatureType #setFeatureType","suites":["ol.format.WFS","featureType"],"updatePoint":{"line":16,"column":39,"index":1495},"line":16,"code":"    it('#getFeatureType #setFeatureType', function () {\n      const format = new WFS({\n        featureNS: 'http://www.openplans.org/topp',\n        featureType: ['foo', 'bar']\n      });\n      expect(format.getFeatureType()).to.eql(['foo', 'bar']);\n      format.setFeatureType('baz');\n      expect(format.getFeatureType()).to.eql('baz');\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates 3 features","suites":["ol.format.WFS","when parsing TOPP states GML from WFS"],"updatePoint":{"line":50,"column":26,"index":2559},"line":50,"code":"    it('creates 3 features', function () {\n      expect(features).to.have.length(3);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a polygon for Illinois","suites":["ol.format.WFS","when parsing TOPP states GML from WFS"],"updatePoint":{"line":53,"column":38,"index":2664},"line":53,"code":"    it('creates a polygon for Illinois', function () {\n      feature = features[0];\n      expect(feature.getId()).to.equal('states.1');\n      expect(feature.get('STATE_NAME')).to.equal('Illinois');\n      expect(feature.getGeometry()).to.be.an(MultiPolygon);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"transforms and creates a polygon for Illinois","suites":["ol.format.WFS","when parsing TOPP states GML from WFS"],"updatePoint":{"line":59,"column":53,"index":2945},"line":59,"code":"    it('transforms and creates a polygon for Illinois', function () {\n      features = new WFS(config).readFeatures(xml, {\n        featureProjection: 'EPSG:3857'\n      });\n      feature = features[0];\n      expect(feature.getId()).to.equal('states.1');\n      expect(feature.get('STATE_NAME')).to.equal('Illinois');\n      const geom = feature.getGeometry();\n      expect(geom).to.be.an(MultiPolygon);\n      const p = transform([-88.071, 37.511], 'EPSG:4326', 'EPSG:3857');\n      p.push(0);\n      expect(geom.getFirstCoordinate()).to.eql(p);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates 3 features","suites":["ol.format.WFS","when parsing mapserver GML2 polygon"],"updatePoint":{"line":98,"column":26,"index":4232},"line":98,"code":"    it('creates 3 features', function () {\n      expect(features).to.have.length(3);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a polygon for My Polygon with hole","suites":["ol.format.WFS","when parsing mapserver GML2 polygon"],"updatePoint":{"line":101,"column":50,"index":4349},"line":101,"code":"    it('creates a polygon for My Polygon with hole', function () {\n      feature = features[0];\n      expect(feature.getId()).to.equal('1');\n      expect(feature.get('name')).to.equal('My Polygon with hole');\n      expect(feature.get('boundedBy')).to.eql([47.003018, -0.768746, 47.925567, 0.532597]);\n      expect(feature.getGeometry()).to.be.an(MultiPolygon);\n      expect(feature.getGeometry().getFlatCoordinates()).to.have.length(60);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array of features when none exist","suites":["ol.format.WFS","when parsing FeatureCollection"],"updatePoint":{"line":118,"column":58,"index":5051},"line":118,"code":"    it('returns an empty array of features when none exist', function () {\n      const result = new WFS().readFeatures(xml);\n      expect(result).to.have.length(0);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"returns the correct number of features","suites":["ol.format.WFS","when parsing FeatureCollection"],"updatePoint":{"line":135,"column":46,"index":5570},"line":135,"code":"    it('returns the correct number of features', function () {\n      expect(response.numberOfFeatures).to.equal(625);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"returns the correct bounds","suites":["ol.format.WFS","when parsing FeatureCollection"],"updatePoint":{"line":153,"column":34,"index":6306},"line":153,"code":"    it('returns the correct bounds', function () {\n      expect(response.bounds).to.eql([3197.88, 306457.313, 280339.156, 613850.438]);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"returns the correct TransactionResponse object","suites":["ol.format.WFS","when parsing TransactionResponse"],"updatePoint":{"line":169,"column":54,"index":6827},"line":169,"code":"    it('returns the correct TransactionResponse object', function () {\n      expect(response.transactionSummary.totalDeleted).to.equal(0);\n      expect(response.transactionSummary.totalInserted).to.equal(0);\n      expect(response.transactionSummary.totalUpdated).to.equal(1);\n      expect(response.insertIds).to.have.length(2);\n      expect(response.insertIds[0]).to.equal('parcelle.40');\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates the expected output","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":178,"column":35,"index":7277},"line":178,"code":"    it('creates the expected output', function () {\n      const text = '<wfs:GetFeature service=\"WFS\" version=\"1.1.0\" resultType=\"hits\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\"' + '    xmlns:wfs=\"http://www.opengis.net/wfs\"' + '    xmlns:ogc=\"http://www.opengis.net/ogc\"' + '    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + '    xsi:schemaLocation=\"http://www.opengis.net/wfs ' + 'http://schemas.opengis.net/wfs/1.1.0/wfs.xsd\">' + '  <wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '      typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '      xmlns:topp=\"http://www.openplans.org/topp\">' + '    <wfs:PropertyName>STATE_NAME</wfs:PropertyName>' + '    <wfs:PropertyName>STATE_FIPS</wfs:PropertyName>' + '    <wfs:PropertyName>STATE_ABBR</wfs:PropertyName>' + '  </wfs:Query>' + '</wfs:GetFeature>';\n      const serialized = new WFS().writeGetFeature({\n        resultType: 'hits',\n        featureTypes: ['states'],\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        propertyNames: ['STATE_NAME', 'STATE_FIPS', 'STATE_ABBR']\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates paging headers","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":190,"column":30,"index":8494},"line":190,"code":"    it('creates paging headers', function () {\n      const text = '<wfs:GetFeature service=\"WFS\" version=\"1.1.0\" startIndex=\"20\" ' + '    count=\"10\" xmlns:topp=\"http://www.openplans.org/topp\"' + '    xmlns:wfs=\"http://www.opengis.net/wfs\"' + '    xmlns:ogc=\"http://www.opengis.net/ogc\"' + '    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + '    xsi:schemaLocation=\"http://www.opengis.net/wfs ' + 'http://schemas.opengis.net/wfs/1.1.0/wfs.xsd\">' + '  <wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '      typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\"' + '       xmlns:topp=\"http://www.openplans.org/topp\">' + '  </wfs:Query>' + '</wfs:GetFeature>';\n      const serialized = new WFS().writeGetFeature({\n        count: 10,\n        startIndex: 20,\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states']\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a BBOX filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":202,"column":29,"index":9499},"line":202,"code":"    it('creates a BBOX filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:BBOX>' + '      <ogc:PropertyName>the_geom</ogc:PropertyName>' + '      <gml:Envelope xmlns:gml=\"http://www.opengis.net/gml\" ' + '          srsName=\"urn:ogc:def:crs:EPSG::4326\">' + '        <gml:lowerCorner>1 2</gml:lowerCorner>' + '        <gml:upperCorner>3 4</gml:upperCorner>' + '      </gml:Envelope>' + '    </ogc:BBOX>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        geometryName: 'the_geom',\n        bbox: [1, 2, 3, 4]\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates one BBOX filter per feature type","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":214,"column":48,"index":10555},"line":214,"code":"    it('creates one BBOX filter per feature type', function () {\n      const textQuery1 = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states_1\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:BBOX>' + '      <ogc:PropertyName>the_geom_1</ogc:PropertyName>' + '      <gml:Envelope xmlns:gml=\"http://www.opengis.net/gml\" ' + '          srsName=\"urn:ogc:def:crs:EPSG::4326\">' + '        <gml:lowerCorner>1 2</gml:lowerCorner>' + '        <gml:upperCorner>3 4</gml:upperCorner>' + '      </gml:Envelope>' + '    </ogc:BBOX>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const textQuery2 = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states_2\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:BBOX>' + '      <ogc:PropertyName>the_geom_2</ogc:PropertyName>' + '      <gml:Envelope xmlns:gml=\"http://www.opengis.net/gml\" ' + '          srsName=\"urn:ogc:def:crs:EPSG::4326\">' + '        <gml:lowerCorner>5 6</gml:lowerCorner>' + '        <gml:upperCorner>7 8</gml:upperCorner>' + '      </gml:Envelope>' + '    </ogc:BBOX>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: [{\n          name: 'states_1',\n          geometryName: 'the_geom_1',\n          bbox: [1, 2, 3, 4]\n        }, {\n          name: 'states_2',\n          geometryName: 'the_geom_2',\n          bbox: [5, 6, 7, 8]\n        }]\n      });\n      expect(serialized.children.length).to.equal(2);\n      expect(serialized.firstElementChild).to.xmleql(parse(textQuery1));\n      expect(serialized.lastElementChild).to.xmleql(parse(textQuery2));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a property filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":235,"column":33,"index":12520},"line":235,"code":"    it('creates a property filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:PropertyIsEqualTo matchCase=\"false\">' + '      <ogc:PropertyName>name</ogc:PropertyName>' + '      <ogc:Literal>New York</ogc:Literal>' + '    </ogc:PropertyIsEqualTo>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: equalToFilter('name', 'New York', false)\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates two property filters","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":246,"column":36,"index":13402},"line":246,"code":"    it('creates two property filters', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:Or>' + '      <ogc:PropertyIsEqualTo>' + '        <ogc:PropertyName>name</ogc:PropertyName>' + '        <ogc:Literal>New York</ogc:Literal>' + '      </ogc:PropertyIsEqualTo>' + '      <ogc:PropertyIsEqualTo>' + '        <ogc:PropertyName>area</ogc:PropertyName>' + '        <ogc:Literal>1234</ogc:Literal>' + '      </ogc:PropertyIsEqualTo>' + '    </ogc:Or>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: orFilter(equalToFilter('name', 'New York'), equalToFilter('area', 1234))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates greater/less than property filters","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":257,"column":50,"index":14522},"line":257,"code":"    it('creates greater/less than property filters', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:Or>' + '      <ogc:And>' + '        <ogc:PropertyIsGreaterThan>' + '          <ogc:PropertyName>area</ogc:PropertyName>' + '          <ogc:Literal>100</ogc:Literal>' + '        </ogc:PropertyIsGreaterThan>' + '        <ogc:PropertyIsGreaterThanOrEqualTo>' + '          <ogc:PropertyName>pop</ogc:PropertyName>' + '          <ogc:Literal>20000</ogc:Literal>' + '        </ogc:PropertyIsGreaterThanOrEqualTo>' + '      </ogc:And>' + '      <ogc:And>' + '        <ogc:PropertyIsLessThan>' + '          <ogc:PropertyName>area</ogc:PropertyName>' + '          <ogc:Literal>100</ogc:Literal>' + '        </ogc:PropertyIsLessThan>' + '        <ogc:PropertyIsLessThanOrEqualTo>' + '          <ogc:PropertyName>pop</ogc:PropertyName>' + '          <ogc:Literal>20000</ogc:Literal>' + '        </ogc:PropertyIsLessThanOrEqualTo>' + '      </ogc:And>' + '    </ogc:Or>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: orFilter(andFilter(greaterThanFilter('area', 100), greaterThanOrEqualToFilter('pop', 20000)), andFilter(lessThanFilter('area', 100), lessThanOrEqualToFilter('pop', 20000)))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates isBetween property filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":268,"column":41,"index":16231},"line":268,"code":"    it('creates isBetween property filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:PropertyIsBetween>' + '      <ogc:PropertyName>area</ogc:PropertyName>' + '      <ogc:LowerBoundary><ogc:Literal>100</ogc:Literal></ogc:LowerBoundary>' + '      <ogc:UpperBoundary><ogc:Literal>1000</ogc:Literal></ogc:UpperBoundary>' + '    </ogc:PropertyIsBetween>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: betweenFilter('area', 100, 1000)\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates isNull property filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":279,"column":38,"index":17204},"line":279,"code":"    it('creates isNull property filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:PropertyIsNull>' + '      <ogc:PropertyName>area</ogc:PropertyName>' + '    </ogc:PropertyIsNull>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: isNullFilter('area')\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates isLike property filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":290,"column":38,"index":17998},"line":290,"code":"    it('creates isLike property filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:PropertyIsLike wildCard=\"*\" singleChar=\".\" escapeChar=\"!\">' + '      <ogc:PropertyName>name</ogc:PropertyName>' + '      <ogc:Literal>New*</ogc:Literal>' + '    </ogc:PropertyIsLike>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: likeFilter('name', 'New*')\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates isLike property filter with arguments","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":301,"column":53,"index":18898},"line":301,"code":"    it('creates isLike property filter with arguments', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:PropertyIsLike wildCard=\"*\" singleChar=\".\" escapeChar=\"!\" matchCase=\"false\">' + '      <ogc:PropertyName>name</ogc:PropertyName>' + '      <ogc:Literal>New*</ogc:Literal>' + '    </ogc:PropertyIsLike>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: likeFilter('name', 'New*', '*', '.', '!', false)\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a Not filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":312,"column":28,"index":19813},"line":312,"code":"    it('creates a Not filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:Not>' + '      <ogc:PropertyIsEqualTo>' + '        <ogc:PropertyName>name</ogc:PropertyName>' + '        <ogc:Literal>New York</ogc:Literal>' + '      </ogc:PropertyIsEqualTo>' + '    </ogc:Not>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: notFilter(equalToFilter('name', 'New York'))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates an AND filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":323,"column":29,"index":20719},"line":323,"code":"    it('creates an AND filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:And>' + '      <ogc:PropertyIsEqualTo>' + '        <ogc:PropertyName>name</ogc:PropertyName>' + '        <ogc:Literal>New York</ogc:Literal>' + '      </ogc:PropertyIsEqualTo>' + '      <ogc:BBOX>' + '        <ogc:PropertyName>the_geom</ogc:PropertyName>' + '        <gml:Envelope xmlns:gml=\"http://www.opengis.net/gml\" ' + '            srsName=\"urn:ogc:def:crs:EPSG::4326\">' + '          <gml:lowerCorner>1 2</gml:lowerCorner>' + '          <gml:upperCorner>3 4</gml:upperCorner>' + '        </gml:Envelope>' + '      </ogc:BBOX>' + '      <ogc:PropertyIsGreaterThan>' + '        <ogc:PropertyName>population</ogc:PropertyName>' + '        <ogc:Literal>2000000</ogc:Literal>' + '      </ogc:PropertyIsGreaterThan>' + '    </ogc:And>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: andFilter(equalToFilter('name', 'New York'), bboxFilter('the_geom', [1, 2, 3, 4], 'urn:ogc:def:crs:EPSG::4326'), greaterThanFilter('population', 2000000))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a contains filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":334,"column":33,"index":22278},"line":334,"code":"    it('creates a contains filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"area\" srsName=\"EPSG:4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:Contains>' + '      <ogc:PropertyName>the_geom</ogc:PropertyName>' + '      <gml:Polygon xmlns:gml=\"http://www.opengis.net/gml\">' + '        <gml:exterior>' + '          <gml:LinearRing>' + '            <gml:posList srsDimension=\"2\">' + '              10 20 10 25 15 25 15 20 10 20' + '            </gml:posList>' + '          </gml:LinearRing>' + '        </gml:exterior>' + '      </gml:Polygon>' + '    </ogc:Contains>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'EPSG:4326',\n        featureTypes: ['area'],\n        filter: containsFilter('the_geom', new Polygon([[[10, 20], [10, 25], [15, 25], [15, 20], [10, 20]]]))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a intersects filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":343,"column":35,"index":23340},"line":343,"code":"    it('creates a intersects filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"area\" srsName=\"EPSG:4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:Intersects>' + '      <ogc:PropertyName>the_geom</ogc:PropertyName>' + '      <gml:Polygon xmlns:gml=\"http://www.opengis.net/gml\">' + '        <gml:exterior>' + '          <gml:LinearRing>' + '            <gml:posList srsDimension=\"2\">' + '              10 20 10 25 15 25 15 20 10 20' + '            </gml:posList>' + '          </gml:LinearRing>' + '        </gml:exterior>' + '      </gml:Polygon>' + '    </ogc:Intersects>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'EPSG:4326',\n        featureTypes: ['area'],\n        filter: intersectsFilter('the_geom', new Polygon([[[10, 20], [10, 25], [15, 25], [15, 20], [10, 20]]]))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"WFS v2 creates an intersects filter with a MultiSurface","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":352,"column":63,"index":24436},"line":352,"code":"    it('WFS v2 creates an intersects filter with a MultiSurface', function () {\n      const text = `\n        <wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs/2.0\"\n             typeNames=\"area\" srsName=\"EPSG:4326\"\n             xmlns:topp=\"http://www.openplans.org/topp\">\n          <Filter xmlns=\"http://www.opengis.net/fes/2.0\">\n            <Intersects>\n              <ValueReference>the_geom</ValueReference>\n                <MultiSurface xmlns=\"http://www.opengis.net/gml/3.2\">\n                  <surfaceMember>\n                    <Polygon>\n                      <exterior>\n                        <LinearRing>\n                          <posList srsDimension=\"2\">10 20 10 25 15 25 15 20 10 20</posList>\n                        </LinearRing>\n                      </exterior>\n                    </Polygon>\n                  </surfaceMember>\n                </MultiSurface>\n              </Intersects>\n            </Filter>        \n        </wfs:Query>`;\n      const serialized = new WFS({\n        version: '2.0.0'\n      }).writeGetFeature({\n        srsName: 'EPSG:4326',\n        featureTypes: ['area'],\n        filter: intersectsFilter('the_geom', new MultiPolygon([[[[10, 20], [10, 25], [15, 25], [15, 20], [10, 20]]]]))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a within filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":383,"column":31,"index":25713},"line":383,"code":"    it('creates a within filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"area\" srsName=\"EPSG:4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:Within>' + '      <ogc:PropertyName>the_geom</ogc:PropertyName>' + '      <gml:Polygon xmlns:gml=\"http://www.opengis.net/gml\">' + '        <gml:exterior>' + '          <gml:LinearRing>' + '            <gml:posList srsDimension=\"2\">' + '              10 20 10 25 15 25 15 20 10 20' + '            </gml:posList>' + '          </gml:LinearRing>' + '        </gml:exterior>' + '      </gml:Polygon>' + '    </ogc:Within>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'EPSG:4326',\n        featureTypes: ['area'],\n        filter: withinFilter('the_geom', new Polygon([[[10, 20], [10, 25], [15, 25], [15, 20], [10, 20]]]))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a dwithin filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":392,"column":32,"index":26766},"line":392,"code":"    it('creates a dwithin filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"area\" srsName=\"EPSG:4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:DWithin>' + '      <ogc:PropertyName>the_geom</ogc:PropertyName>' + '      <gml:Polygon xmlns:gml=\"http://www.opengis.net/gml\">' + '        <gml:exterior>' + '          <gml:LinearRing>' + '            <gml:posList srsDimension=\"2\">' + '              10 20 10 25 15 25 15 20 10 20' + '            </gml:posList>' + '          </gml:LinearRing>' + '        </gml:exterior>' + '      </gml:Polygon>' + '      <ogc:Distance units=\"m\">10</ogc:Distance>' + '    </ogc:DWithin>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'EPSG:4326',\n        featureTypes: ['area'],\n        filter: dwithinFilter('the_geom', new Polygon([[[10, 20], [10, 25], [15, 25], [15, 20], [10, 20]]]), 10, 'm')\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates During property filter","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":401,"column":38,"index":27889},"line":401,"code":"    it('creates During property filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs\" ' + '    typeName=\"states\" srsName=\"EPSG:4326\">' + '  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">' + '    <ogc:During>' + '      <fes:ValueReference xmlns:fes=\"http://www.opengis.net/fes\">date_prop</fes:ValueReference>' + '      <gml:TimePeriod xmlns:gml=\"http://www.opengis.net/gml\">' + '        <gml:begin>' + '          <gml:TimeInstant>' + '            <gml:timePosition>2010-01-20T00:00:00Z</gml:timePosition>' + '          </gml:TimeInstant>' + '        </gml:begin>' + '        <gml:end>' + '          <gml:TimeInstant>' + '            <gml:timePosition>2012-12-31T00:00:00Z</gml:timePosition>' + '          </gml:TimeInstant>' + '        </gml:end>' + '      </gml:TimePeriod>' + '    </ogc:During>' + '  </ogc:Filter>' + '</wfs:Query>';\n      const serialized = new WFS().writeGetFeature({\n        srsName: 'EPSG:4326',\n        featureTypes: ['states'],\n        filter: duringFilter('date_prop', '2010-01-20T00:00:00Z', '2012-12-31T00:00:00Z')\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a handle","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":412,"column":24,"index":29119},"line":412,"code":"    it('creates a handle', function () {\n      const text = '<wfs:Transaction xmlns:wfs=\"http://www.opengis.net/wfs\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'service=\"WFS\" version=\"1.1.0\" handle=\"handle_t\" ' + 'xsi:schemaLocation=\"http://www.opengis.net/wfs ' + 'http://schemas.opengis.net/wfs/1.1.0/wfs.xsd\"/>';\n      const serialized = new WFS().writeTransaction(null, null, null, {\n        handle: 'handle_t'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates the correct srsName","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":428,"column":35,"index":29880},"line":428,"code":"    it('creates the correct srsName', function () {\n      const format = new WFS();\n      const insertFeature = new Feature({\n        the_geom: new MultiLineString([[[-5178372.1885436, 1992365.7775042], [-4434792.7774889, 1601008.1927386], [-4043435.1927233, 2148908.8114105]]]),\n        TYPE: 'xyz'\n      });\n      insertFeature.setGeometryName('the_geom');\n      const inserts = [insertFeature];\n      const serialized = format.writeTransaction(inserts, null, null, {\n        featureNS: 'http://foo',\n        featureType: 'FAULTS',\n        featurePrefix: 'feature',\n        gmlOptions: {\n          multiCurve: true,\n          srsName: 'EPSG:900913'\n        }\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates the correct update","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":456,"column":34,"index":30858},"line":456,"code":"    it('creates the correct update', function () {\n      const format = new WFS();\n      const updateFeature = new Feature();\n      updateFeature.setGeometryName('the_geom');\n      updateFeature.setGeometry(new MultiLineString([[[-12279454, 6741885], [-12064207, 6732101], [-11941908, 6595126], [-12240318, 6507071], [-12416429, 6604910]]]));\n      updateFeature.setId('FAULTS.4455');\n      const serialized = format.writeTransaction(null, [updateFeature], null, {\n        featureNS: 'http://foo',\n        featureType: 'FAULTS',\n        featurePrefix: 'foo',\n        gmlOptions: {\n          srsName: 'EPSG:900913'\n        }\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates the correct update if geometry name is alias","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":472,"column":60,"index":31575},"line":472,"code":"    it('creates the correct update if geometry name is alias', function () {\n      const format = new WFS();\n      const updateFeature = new Feature(new MultiLineString([[[-12279454, 6741885], [-12064207, 6732101], [-11941908, 6595126], [-12240318, 6507071], [-12416429, 6604910]]]));\n      updateFeature.setGeometryName('the_geom');\n      updateFeature.setId('FAULTS.4455');\n      const serialized = format.writeTransaction(null, [updateFeature], null, {\n        featureNS: 'http://foo',\n        featureType: 'FAULTS',\n        featurePrefix: 'foo',\n        gmlOptions: {\n          srsName: 'EPSG:900913'\n        }\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates the correct update with default featurePrefix","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":489,"column":61,"index":32331},"line":489,"code":"    it('creates the correct update with default featurePrefix', function () {\n      const format = new WFS();\n      const updateFeature = new Feature();\n      updateFeature.setGeometryName('the_geom');\n      updateFeature.setGeometry(new MultiLineString([[[-12279454, 6741885], [-12064207, 6732101], [-11941908, 6595126], [-12240318, 6507071], [-12416429, 6604910]]]));\n      updateFeature.setId('FAULTS.4455');\n      const serialized = format.writeTransaction(null, [updateFeature], null, {\n        featureNS: 'http://foo',\n        featureType: 'FAULTS',\n        gmlOptions: {\n          srsName: 'EPSG:900913'\n        }\n      });\n      expect(serialized.firstChild.attributes.getNamedItem('xmlns:feature') !== null).to.equal(true);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"does not create an update if no fid","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":506,"column":43,"index":33127},"line":506,"code":"    it('does not create an update if no fid', function () {\n      const format = new WFS();\n      const updateFeature = new Feature();\n      updateFeature.setGeometryName('the_geom');\n      updateFeature.setGeometry(new MultiLineString([[[-12279454, 6741885], [-12064207, 6732101], [-11941908, 6595126], [-12240318, 6507071], [-12416429, 6604910]]]));\n      expect(function () {\n        format.writeTransaction(null, [updateFeature], null, {\n          featureNS: 'http://foo',\n          featureType: 'FAULTS',\n          featurePrefix: 'foo',\n          gmlOptions: {\n            srsName: 'EPSG:900913'\n          }\n        });\n      }).to.throwException();\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"handles multiple geometries","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":532,"column":35,"index":34074},"line":532,"code":"    it('handles multiple geometries', function () {\n      const format = new WFS();\n      const updateFeature = new Feature();\n      updateFeature.setGeometryName('the_geom');\n      updateFeature.setGeometry(new MultiLineString([[[-12279454, 6741885], [-12064207, 6732101], [-11941908, 6595126], [-12240318, 6507071], [-12416429, 6604910]]]));\n      updateFeature.set('geom2', new MultiLineString([[[-12000000, 6700000], [-12000001, 6700001], [-12000002, 6700002]]]));\n      const serialized = format.writeTransaction([updateFeature], [], null, {\n        featureNS: 'http://foo',\n        featureType: 'FAULTS',\n        featurePrefix: 'foo',\n        gmlOptions: {\n          srsName: 'EPSG:900913'\n        }\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates the correct transaction body","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":557,"column":44,"index":35106},"line":557,"code":"    it('creates the correct transaction body', function () {\n      const format = new WFS();\n      const insertFeature = new Feature({\n        the_geom: new MultiPoint([[1, 2]]),\n        foo: 'bar',\n        nul: null\n      });\n      insertFeature.setGeometryName('the_geom');\n      const inserts = [insertFeature];\n      const updateFeature = new Feature({\n        the_geom: new MultiPoint([[1, 2]]),\n        foo: 'bar',\n        // null value gets Property element with no Value\n        nul: null,\n        // undefined value means don't create a Property element\n        unwritten: undefined\n      });\n      updateFeature.setId('fid.42');\n      updateFeature.setGeometryName('the_geom');\n      const updates = [updateFeature];\n      const deleteFeature = new Feature();\n      deleteFeature.setId('fid.37');\n      const deletes = [deleteFeature];\n      const serialized = format.writeTransaction(inserts, updates, deletes, {\n        featureNS: 'http://www.openplans.org/topp',\n        featureType: 'states',\n        featurePrefix: 'topp'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"handles writing out Native","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":596,"column":34,"index":36440},"line":596,"code":"    it('handles writing out Native', function () {\n      const format = new WFS();\n      const serialized = format.writeTransaction(null, null, null, {\n        nativeElements: [{\n          vendorId: 'ORACLE',\n          safeToIgnore: true,\n          value: 'ALTER SESSION ENABLE PARALLEL DML'\n        }, {\n          vendorId: 'ORACLE',\n          safeToIgnore: false,\n          value: 'Another native line goes here'\n        }]\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"handles the WFS version","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":621,"column":31,"index":37221},"line":621,"code":"    it('handles the WFS version', function () {\n      const format = new WFS();\n      const insertFeature = new Feature({\n        the_geom: new LineString([[1.1, 2], [3, 4.2]]),\n        foo: 'bar',\n        nul: null\n      });\n      insertFeature.setGeometryName('the_geom');\n      const inserts = [insertFeature];\n      const updateFeature = new Feature({\n        the_geom: new LineString([[1.1, 2], [3, 4.2]]),\n        foo: 'bar',\n        // null value gets Property element with no Value\n        nul: null,\n        // undefined value means don't create a Property element\n        unwritten: undefined\n      });\n      updateFeature.setId('fid.42');\n      updateFeature.setGeometryName('the_geom');\n      const updates = [updateFeature];\n      const deleteFeature = new Feature();\n      deleteFeature.setId('fid.37');\n      const deletes = [deleteFeature];\n      const serialized = format.writeTransaction(inserts, updates, deletes, {\n        featureNS: 'http://www.openplans.org/topp',\n        featureType: 'states',\n        featurePrefix: 'topp',\n        version: '1.0.0'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"do not add feature prefix twice","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":661,"column":39,"index":38620},"line":661,"code":"    it('do not add feature prefix twice', function () {\n      const format = new WFS();\n      const insertFeature = new Feature({\n        the_geom: new MultiPoint([[1, 2]]),\n        foo: 'bar',\n        nul: null\n      });\n      insertFeature.setGeometryName('the_geom');\n      const inserts = [insertFeature];\n      const updateFeature = new Feature({\n        the_geom: new MultiPoint([[1, 2]]),\n        foo: 'bar',\n        // null value gets Property element with no Value\n        nul: null,\n        // undefined value means don't create a Property element\n        unwritten: undefined\n      });\n      updateFeature.setId('fid.42');\n      updateFeature.setGeometryName('the_geom');\n      const updates = [updateFeature];\n      const deleteFeature = new Feature();\n      deleteFeature.setId('fid.37');\n      const deletes = [deleteFeature];\n      const serialized = format.writeTransaction(inserts, updates, deletes, {\n        featureNS: 'http://www.openplans.org/topp',\n        featureType: 'topp:states',\n        featurePrefix: 'topp'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"handles 3D in WFS 1.0.0","suites":["ol.format.WFS","when writing out a transaction request"],"updatePoint":{"line":701,"column":31,"index":40010},"line":701,"code":"    it('handles 3D in WFS 1.0.0', function () {\n      const format = new WFS();\n      const insertFeature = new Feature({\n        the_geom: new LineString([[1.1, 2, 4], [3, 4.2, 5]]),\n        foo: 'bar',\n        nul: null\n      });\n      insertFeature.setGeometryName('the_geom');\n      const inserts = [insertFeature];\n      const updateFeature = new Feature({\n        the_geom: new LineString([[1.1, 2, 6], [3, 4.2, 7]]),\n        foo: 'bar',\n        // null value gets Property element with no Value\n        nul: null,\n        // undefined value means don't create a Property element\n        unwritten: undefined\n      });\n      updateFeature.setGeometryName('the_geom');\n      updateFeature.setId('fid.42');\n      const updates = [updateFeature];\n      const serialized = format.writeTransaction(inserts, updates, null, {\n        featureNS: 'http://www.openplans.org/topp',\n        featureType: 'states',\n        featurePrefix: 'topp',\n        hasZ: true,\n        version: '1.0.0'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"handles 3D in WFS 1.1.0","suites":["ol.format.WFS","when writing out a Transaction request"],"updatePoint":{"line":739,"column":31,"index":41314},"line":739,"code":"    it('handles 3D in WFS 1.1.0', function () {\n      const format = new WFS();\n      const insertFeature = new Feature({\n        the_geom: new MultiPoint([[1, 2, 3]]),\n        foo: 'bar',\n        nul: null\n      });\n      insertFeature.setGeometryName('the_geom');\n      const inserts = [insertFeature];\n      const updateFeature = new Feature({\n        the_geom: new MultiPoint([[1, 2, 3]]),\n        foo: 'bar',\n        // null value gets Property element with no Value\n        nul: null,\n        // undefined value means don't create a Property element\n        unwritten: undefined\n      });\n      updateFeature.setGeometryName('the_geom');\n      updateFeature.setId('fid.42');\n      const updates = [updateFeature];\n      const serialized = format.writeTransaction(inserts, updates, null, {\n        featureNS: 'http://www.openplans.org/topp',\n        featureType: 'states',\n        hasZ: true,\n        featurePrefix: 'topp'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"handles writing multiple Query elements","suites":["ol.format.WFS","when writing out a GetFeature request"],"updatePoint":{"line":776,"column":47,"index":42576},"line":776,"code":"    it('handles writing multiple Query elements', function () {\n      const format = new WFS();\n      const serialized = format.writeGetFeature({\n        featureNS: 'http://www.openplans.org/topp',\n        featureTypes: ['states', 'cities'],\n        featurePrefix: 'topp'\n      });\n      expect(serialized).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates 7 features","suites":["ol.format.WFS","when parsing GML from MapServer"],"updatePoint":{"line":802,"column":26,"index":43414},"line":802,"code":"    it('creates 7 features', function () {\n      expect(features).to.have.length(7);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a polygon for Arnstadt","suites":["ol.format.WFS","when parsing GML from MapServer"],"updatePoint":{"line":805,"column":38,"index":43519},"line":805,"code":"    it('creates a polygon for Arnstadt', function () {\n      feature = features[0];\n      const fid = 'Historische_Messtischblaetter_WFS.71055885';\n      expect(feature.getId()).to.equal(fid);\n      expect(feature.get('titel')).to.equal('Arnstadt');\n      expect(feature.getGeometry()).to.be.an(Polygon);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"reads all features","suites":["ol.format.WFS","when parsing multiple feature types"],"updatePoint":{"line":828,"column":26,"index":44305},"line":828,"code":"    it('reads all features', function () {\n      expect(features.length).to.be(12);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"reads all features","suites":["ol.format.WFS","when parsing multiple feature types separately"],"updatePoint":{"line":851,"column":26,"index":45071},"line":851,"code":"    it('reads all features', function () {\n      expect(lineFeatures.length).to.be(3);\n      expect(polygonFeatures.length).to.be(9);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"reads all features with autoconfigure","suites":["ol.format.WFS","when parsing multiple feature types"],"updatePoint":{"line":868,"column":45,"index":45580},"line":868,"code":"    it('reads all features with autoconfigure', function () {\n      expect(features.length).to.be(12);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"reads all features","suites":["ol.format.WFS","when parsing multiple feature types (MapServer)"],"updatePoint":{"line":884,"column":26,"index":46042},"line":884,"code":"    it('reads all features', function () {\n      expect(features.length).to.be(5);\n      features.forEach(function (feature) {\n        expect(feature instanceof Feature).to.be(true);\n      });\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"reads all features","suites":["ol.format.WFS","when parsing multiple feature types separately (MapServer)"],"updatePoint":{"line":910,"column":26,"index":46933},"line":910,"code":"    it('reads all features', function () {\n      expect(busFeatures.length).to.be(3);\n      expect(infoFeatures.length).to.be(2);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a WFS 1.x.x filter","suites":["ol.format.WFS","when writing out a WFS Filter"],"updatePoint":{"line":918,"column":34,"index":48021},"line":918,"code":"    it('creates a WFS 1.x.x filter', function () {\n      const serialized = writeFilter(andFilter(likeFilter('name', 'Mississippi*'), equalToFilter('waterway', 'riverbank')), '1.1.0');\n      expect(serialized).to.xmleql(parse(wfs1Filter));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"defaults to creating a WFS 1.x.x filter if no version specified","suites":["ol.format.WFS","when writing out a WFS Filter"],"updatePoint":{"line":922,"column":71,"index":48306},"line":922,"code":"    it('defaults to creating a WFS 1.x.x filter if no version specified', function () {\n      const serialized = writeFilter(andFilter(likeFilter('name', 'Mississippi*'), equalToFilter('waterway', 'riverbank')));\n      expect(serialized).to.xmleql(parse(wfs1Filter));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a WFS 2.x.x filter","suites":["ol.format.WFS","when writing out a WFS Filter"],"updatePoint":{"line":926,"column":34,"index":48545},"line":926,"code":"    it('creates a WFS 2.x.x filter', function () {\n      const serialized = writeFilter(andFilter(likeFilter('name', 'Mississippi*'), equalToFilter('waterway', 'riverbank')), '2.0.0');\n      expect(serialized).to.xmleql(parse(wfs2Filter));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"can writeGetFeature query with simple resourceId filter","suites":["ol.format.WFS","WFS 2.0.0"],"updatePoint":{"line":944,"column":63,"index":49396},"line":944,"code":"    it('can writeGetFeature query with simple resourceId filter', function () {\n      const getFeatureXml = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n    This example demonstrates a WFS 2.0 GetFeature POST request.\n\n    This filter selects a single feature with id \"bugsites.3\".\n\n    See also:\n    WFS Standard: http://www.opengeospatial.org/standards/wfs\n    Filter Encoding Standard: http://www.opengeospatial.org/standards/filter\n-->\n<wfs:GetFeature service=\"WFS\" version=\"2.0.0\"\n    xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" xmlns:fes=\"http://www.opengis.net/fes/2.0\"\n    xmlns:sf=\"http://www.openplans.org/spearfish\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd\">\n    <wfs:Query typeNames=\"sf:bugsites\">\n        <fes:Filter>\n            <fes:ResourceId rid=\"bugsites.3\"/>\n        </fes:Filter>\n    </wfs:Query>\n</wfs:GetFeature>\n    `.trim();\n      const wfs = new WFS({\n        version: '2.0.0'\n      });\n      const filter = resourceIdFilter('bugsites.3');\n      const serialized = wfs.writeGetFeature({\n        featureNS: 'http://www.openplans.org/spearfish',\n        featureTypes: ['bugsites'],\n        featurePrefix: 'sf',\n        filter\n      });\n      expect(serialized).to.xmleql(parse(getFeatureXml));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"can writeGetFeature query with negated disjoint spatial filter","suites":["ol.format.WFS","WFS 2.0.0"],"updatePoint":{"line":979,"column":70,"index":50739},"line":979,"code":"    it('can writeGetFeature query with negated disjoint spatial filter', function () {\n      const geometryXml = `\n<gml:Polygon xmlns:gml=\"http://www.opengis.net/gml/3.2\">\n  <gml:exterior>\n      <gml:LinearRing>\n          <!-- pairs must form a closed ring -->\n          <gml:posList srsDimension=\"2\">590431 4915204 590430\n              4915205 590429 4915204 590430\n              4915203 590431 4915204</gml:posList>\n      </gml:LinearRing>\n  </gml:exterior>\n</gml:Polygon>\n  `.trim();\n      const getFeatureXml = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n    This example demonstrates a WFS 2.0 GetFeature POST request.\n\n    WFS 2.0 does not depend on any one GML version and thus\n    requires an explicit namespace and schemaLocation for GML.\n\n    This spatial filter selects a single feature with\n    gml:id=\"bugsites.2\".\n\n    See also:\n    WFS Standard: http://www.opengeospatial.org/standards/wfs\n    Filter Encoding Standard: http://www.opengeospatial.org/standards/filter\n-->\n<wfs:GetFeature service=\"WFS\" version=\"2.0.0\"\n    xmlns:wfs=\"http://www.opengis.net/wfs/2.0\"\n    xmlns:fes=\"http://www.opengis.net/fes/2.0\"\n    xmlns:sf=\"http://www.openplans.org/spearfish\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd\">\n    <wfs:Query typeNames=\"sf:bugsites\">\n        <fes:Filter>\n            <fes:Not>\n                <fes:Disjoint>\n                    <fes:ValueReference>sf:the_geom</fes:ValueReference>\n                    ${geometryXml}\n                </fes:Disjoint>\n            </fes:Not>\n        </fes:Filter>\n    </wfs:Query>\n</wfs:GetFeature>\n    `.trim();\n      const wfs = new WFS({\n        version: '2.0.0'\n      });\n      const geometryNode = parse(geometryXml);\n      const geometry = new GML32().readGeometryElement(geometryNode, [{}]);\n      const filter = notFilter(disjointFilter('sf:the_geom', geometry));\n      const serialized = wfs.writeGetFeature({\n        featureNS: 'http://www.openplans.org/spearfish',\n        featureTypes: ['bugsites'],\n        featurePrefix: 'sf',\n        filter\n      });\n      expect(serialized).to.xmleql(parse(getFeatureXml));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"can parse basic GetFeature response","suites":["ol.format.WFS","WFS 2.0.0"],"updatePoint":{"line":1039,"column":43,"index":52915},"line":1039,"code":"    it('can parse basic GetFeature response', function () {\n      const response = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<wfs:FeatureCollection xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:sf=\"http://www.openplans.org/spearfish\"\n    xmlns:wfs=\"http://www.opengis.net/wfs/2.0\"\n    xmlns:gml=\"http://www.opengis.net/gml/3.2\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" numberMatched=\"1\" numberReturned=\"1\" timeStamp=\"2020-08-11T12:18:35.474Z\" xsi:schemaLocation=\"http://www.opengis.net/wfs/2.0 http://localhost:8080/geoserver/schemas/wfs/2.0/wfs.xsd http://www.openplans.org/spearfish http://localhost:8080/geoserver/wfs?service=WFS&amp;version=2.0.0&amp;request=DescribeFeatureType&amp;typeName=sf%3Abugsites http://www.opengis.net/gml/3.2 http://localhost:8080/geoserver/schemas/gml/3.2.1/gml.xsd\">\n    <wfs:member>\n        <sf:bugsites gml:id=\"bugsites.3\">\n            <sf:the_geom>\n                <gml:Point srsName=\"urn:ogc:def:crs:EPSG::26713\" srsDimension=\"2\" gml:id=\"bugsites.3.the_geom\">\n                    <gml:pos>590529 4914625</gml:pos>\n                </gml:Point>\n            </sf:the_geom>\n            <sf:cat>3</sf:cat>\n            <sf:str1>Beetle site</sf:str1>\n        </sf:bugsites>\n    </wfs:member>\n</wfs:FeatureCollection>\n    `.trim();\n      const wfs = new WFS({\n        version: '2.0.0'\n      });\n      const features = wfs.readFeatures(parse(response));\n      expect(features.length).to.be(1);\n      expect(features[0]).to.be.an(Feature);\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a handle","suites":["ol.format.WFS","WFS 2.0.0","when writing out a Transaction request"],"updatePoint":{"line":1068,"column":26,"index":54467},"line":1068,"code":"      it('creates a handle', function () {\n        const text = '<wfs:Transaction xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" ' + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' + 'service=\"WFS\" version=\"2.0.0\" handle=\"handle_t\" ' + 'xsi:schemaLocation=\"http://www.opengis.net/wfs/2.0 ' + 'http://schemas.opengis.net/wfs/2.0/wfs.xsd\"/>';\n        const serialized = new WFS({\n          version: '2.0.0'\n        }).writeTransaction(null, null, null, {\n          handle: 'handle_t'\n        });\n        expect(serialized).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates the correct srsName","suites":["ol.format.WFS","WFS 2.0.0","when writing out a Transaction request"],"updatePoint":{"line":1079,"column":37,"index":55115},"line":1079,"code":"      it('creates the correct srsName', function () {\n        const text = `\n<wfs:Transaction xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" service=\"WFS\" version=\"2.0.0\" xsi:schemaLocation=\"http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n<wfs:Insert>\n    <feature:FAULTS xmlns:feature=\"http://foo\">\n        <feature:the_geom>\n            <gml:MultiCurve xmlns:gml=\"http://www.opengis.net/gml/3.2\" srsName=\"EPSG:900913\">\n                <gml:curveMember>\n                    <gml:LineString srsName=\"EPSG:900913\">\n                        <gml:posList srsDimension=\"2\">-5178372.1885436 1992365.7775042 -4434792.7774889 1601008.1927386 -4043435.1927233 2148908.8114105</gml:posList>\n                    </gml:LineString>\n                </gml:curveMember>\n            </gml:MultiCurve>\n        </feature:the_geom>\n        <feature:TYPE>xyz</feature:TYPE>\n    </feature:FAULTS>\n</wfs:Insert>\n</wfs:Transaction>\n        `.trim();\n        const format = new WFS({\n          version: '2.0.0'\n        });\n        const insertFeature = new Feature({\n          the_geom: new MultiLineString([[[-5178372.1885436, 1992365.7775042], [-4434792.7774889, 1601008.1927386], [-4043435.1927233, 2148908.8114105]]]),\n          TYPE: 'xyz'\n        });\n        insertFeature.setGeometryName('the_geom');\n        const inserts = [insertFeature];\n        const serialized = format.writeTransaction(inserts, null, null, {\n          featureNS: 'http://foo',\n          featureType: 'FAULTS',\n          featurePrefix: 'feature',\n          gmlOptions: {\n            multiCurve: true,\n            srsName: 'EPSG:900913'\n          }\n        });\n        expect(serialized).to.xmleql(parse(text));\n      });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates a dwithin filter","suites":["ol.format.WFS","WFS 2.0.0","when writing out a Transaction request"],"updatePoint":{"line":1120,"column":32,"index":56872},"line":1120,"code":"    it('creates a dwithin filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" ' + '    typeNames=\"area\" srsName=\"EPSG:4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <fes:Filter xmlns:fes=\"http://www.opengis.net/fes/2.0\">' + '    <fes:DWithin>' + '      <fes:ValueReference>the_geom</fes:ValueReference>' + '      <gml:Polygon xmlns:gml=\"http://www.opengis.net/gml/3.2\">' + '        <gml:exterior>' + '          <gml:LinearRing>' + '            <gml:posList srsDimension=\"2\">' + '              10 20 10 25 15 25 15 20 10 20' + '            </gml:posList>' + '          </gml:LinearRing>' + '        </gml:exterior>' + '      </gml:Polygon>' + '      <fes:Distance uom=\"m\">10</fes:Distance>' + '    </fes:DWithin>' + '  </fes:Filter>' + '</wfs:Query>';\n      const serialized = new WFS({\n        version: '2.0.0'\n      }).writeGetFeature({\n        srsName: 'EPSG:4326',\n        featureTypes: ['area'],\n        filter: dwithinFilter('the_geom', new Polygon([[[10, 20], [10, 25], [15, 25], [15, 20], [10, 20]]]), 10, 'm')\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates isLike property filter","suites":["ol.format.WFS","WFS 2.0.0","when writing out a Transaction request"],"updatePoint":{"line":1131,"column":38,"index":58044},"line":1131,"code":"    it('creates isLike property filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" ' + '    typeNames=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <fes:Filter xmlns:fes=\"http://www.opengis.net/fes/2.0\">' + '    <fes:PropertyIsLike wildCard=\"*\" singleChar=\".\" escapeChar=\"!\">' + '      <fes:ValueReference>name</fes:ValueReference>' + '      <fes:Literal>New*</fes:Literal>' + '    </fes:PropertyIsLike>' + '  </fes:Filter>' + '</wfs:Query>';\n      const serialized = new WFS({\n        version: '2.0.0'\n      }).writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: likeFilter('name', 'New*')\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates isBetween property filter","suites":["ol.format.WFS","WFS 2.0.0","when writing out a Transaction request"],"updatePoint":{"line":1144,"column":41,"index":58979},"line":1144,"code":"    it('creates isBetween property filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" ' + '    typeNames=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <fes:Filter xmlns:fes=\"http://www.opengis.net/fes/2.0\">' + '    <fes:PropertyIsBetween>' + '      <fes:ValueReference>area</fes:ValueReference>' + '      <fes:LowerBoundary><fes:Literal>100</fes:Literal></fes:LowerBoundary>' + '      <fes:UpperBoundary><fes:Literal>1000</fes:Literal></fes:UpperBoundary>' + '    </fes:PropertyIsBetween>' + '  </fes:Filter>' + '</wfs:Query>';\n      const serialized = new WFS({\n        version: '2.0.0'\n      }).writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: betweenFilter('area', 100, 1000)\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates greater/less than property filters","suites":["ol.format.WFS","WFS 2.0.0","when writing out a Transaction request"],"updatePoint":{"line":1157,"column":50,"index":60011},"line":1157,"code":"    it('creates greater/less than property filters', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" ' + '    typeNames=\"topp:states\" srsName=\"urn:ogc:def:crs:EPSG::4326\" ' + '    xmlns:topp=\"http://www.openplans.org/topp\">' + '  <fes:Filter xmlns:fes=\"http://www.opengis.net/fes/2.0\">' + '    <fes:Or>' + '      <fes:And>' + '        <fes:PropertyIsGreaterThan>' + '          <fes:ValueReference>area</fes:ValueReference>' + '          <fes:Literal>100</fes:Literal>' + '        </fes:PropertyIsGreaterThan>' + '        <fes:PropertyIsGreaterThanOrEqualTo>' + '          <fes:ValueReference>pop</fes:ValueReference>' + '          <fes:Literal>20000</fes:Literal>' + '        </fes:PropertyIsGreaterThanOrEqualTo>' + '      </fes:And>' + '      <fes:And>' + '        <fes:PropertyIsLessThan>' + '          <fes:ValueReference>area</fes:ValueReference>' + '          <fes:Literal>100</fes:Literal>' + '        </fes:PropertyIsLessThan>' + '        <fes:PropertyIsLessThanOrEqualTo>' + '          <fes:ValueReference>pop</fes:ValueReference>' + '          <fes:Literal>20000</fes:Literal>' + '        </fes:PropertyIsLessThanOrEqualTo>' + '      </fes:And>' + '    </fes:Or>' + '  </fes:Filter>' + '</wfs:Query>';\n      const serialized = new WFS({\n        version: '2.0.0'\n      }).writeGetFeature({\n        srsName: 'urn:ogc:def:crs:EPSG::4326',\n        featureNS: 'http://www.openplans.org/topp',\n        featurePrefix: 'topp',\n        featureTypes: ['states'],\n        filter: orFilter(andFilter(greaterThanFilter('area', 100), greaterThanOrEqualToFilter('pop', 20000)), andFilter(lessThanFilter('area', 100), lessThanOrEqualToFilter('pop', 20000)))\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"creates During property filter","suites":["ol.format.WFS","WFS 2.0.0","when writing out a Transaction request"],"updatePoint":{"line":1170,"column":38,"index":61776},"line":1170,"code":"    it('creates During property filter', function () {\n      const text = '<wfs:Query xmlns:wfs=\"http://www.opengis.net/wfs/2.0\" ' + '    typeNames=\"states\" srsName=\"EPSG:4326\">' + '  <fes:Filter xmlns:fes=\"http://www.opengis.net/fes/2.0\">' + '    <fes:During>' + '      <fes:ValueReference>date_prop</fes:ValueReference>' + '      <gml:TimePeriod xmlns:gml=\"http://www.opengis.net/gml\">' + '        <gml:begin>' + '          <gml:TimeInstant>' + '            <gml:timePosition>2010-01-20T00:00:00Z</gml:timePosition>' + '          </gml:TimeInstant>' + '        </gml:begin>' + '        <gml:end>' + '          <gml:TimeInstant>' + '            <gml:timePosition>2012-12-31T00:00:00Z</gml:timePosition>' + '          </gml:TimeInstant>' + '        </gml:end>' + '      </gml:TimePeriod>' + '    </fes:During>' + '  </fes:Filter>' + '</wfs:Query>';\n      const serialized = new WFS({\n        version: '2.0.0'\n      }).writeGetFeature({\n        srsName: 'EPSG:4326',\n        featureTypes: ['states'],\n        filter: duringFilter('date_prop', '2010-01-20T00:00:00Z', '2012-12-31T00:00:00Z')\n      });\n      expect(serialized.firstElementChild).to.xmleql(parse(text));\n    });","file":"browser/spec/ol/format/wfs.test.js","skipped":false,"dir":"test"},{"name":"can read version","suites":["ol.format.WMSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":16,"column":24,"index":519},"line":16,"code":"    it('can read version', function () {\n      expect(capabilities.version).to.eql('1.3.0');\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Service section","suites":["ol.format.WMSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":19,"column":32,"index":628},"line":19,"code":"    it('can read Service section', function () {\n      // FIXME not all fields are tested\n      const service = capabilities.Service;\n      const contact = service.ContactInformation;\n      expect(service.Name).to.eql('WMS');\n      expect(service.Title).to.eql('Acme Corp. Map Server');\n      expect(service.KeywordList).to.eql(['bird', 'roadrunner', 'ambush']);\n      expect(service.OnlineResource).to.eql('http://hostname/');\n      expect(service.Fees).to.eql('none');\n      expect(service.AccessConstraints).to.eql('none');\n      expect(service.LayerLimit).to.eql(16);\n      expect(service.MaxWidth).to.eql(2048);\n      expect(service.MaxHeight).to.eql(2048);\n      expect(contact.ContactPosition).to.eql('Computer Scientist');\n      expect(contact.ContactPersonPrimary).to.eql({\n        ContactPerson: 'Jeff Smith',\n        ContactOrganization: 'NASA'\n      });\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Capability.Exception","suites":["ol.format.WMSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":38,"column":37,"index":1507},"line":38,"code":"    it('can read Capability.Exception', function () {\n      const exception = capabilities.Capability.Exception;\n      expect(exception).to.eql(['XML', 'INIMAGE', 'BLANK']);\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Capability.Request.GetCapabilities","suites":["ol.format.WMSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":42,"column":51,"index":1703},"line":42,"code":"    it('can read Capability.Request.GetCapabilities', function () {\n      const getCapabilities = capabilities.Capability.Request.GetCapabilities;\n      expect(getCapabilities.Format).to.eql(['text/xml']);\n      expect(getCapabilities.DCPType.length).to.eql(1);\n      const http = getCapabilities.DCPType[0].HTTP;\n      expect(http.Get.OnlineResource).to.eql('http://hostname/path?');\n      expect(http.Post.OnlineResource).to.eql('http://hostname/path?');\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Capability.Request.GetFeatureInfo","suites":["ol.format.WMSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":50,"column":50,"index":2167},"line":50,"code":"    it('can read Capability.Request.GetFeatureInfo', function () {\n      const getFeatureInfo = capabilities.Capability.Request.GetFeatureInfo;\n      expect(getFeatureInfo.Format).to.eql(['text/xml', 'text/plain', 'text/html']);\n      expect(getFeatureInfo.DCPType.length).to.eql(1);\n      const http = getFeatureInfo.DCPType[0].HTTP;\n      expect(http.Get.OnlineResource).to.eql('http://hostname/path?');\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Capability.Request.GetMap","suites":["ol.format.WMSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":57,"column":42,"index":2573},"line":57,"code":"    it('can read Capability.Request.GetMap', function () {\n      const getMap = capabilities.Capability.Request.GetMap;\n      expect(getMap.Format).to.eql(['image/gif', 'image/png', 'image/jpeg']);\n      expect(getMap.DCPType.length).to.eql(1);\n      const http = getMap.DCPType[0].HTTP;\n      expect(http.Get.OnlineResource).to.eql('http://hostname/path?');\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Capability.Layer","suites":["ol.format.WMSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":64,"column":33,"index":2931},"line":64,"code":"    it('can read Capability.Layer', function () {\n      const layer = capabilities.Capability.Layer;\n      expect(layer.Title).to.eql('Acme Corp. Map Server');\n      expect(layer.Name).to.be(undefined);\n      expect(layer.CRS).to.eql(['CRS:84']);\n      expect(layer.AuthorityURL).to.eql([{\n        name: 'DIF_ID',\n        OnlineResource: 'http://gcmd.gsfc.nasa.gov/difguide/whatisadif.html'\n      }]);\n      expect(layer.BoundingBox).to.eql([{\n        crs: 'CRS:84',\n        extent: [-1, -1, 1, 1],\n        res: [0, 0]\n      }]);\n      expect(layer.Layer.length).to.eql(4);\n      expect(layer.Layer[0].Name).to.eql('ROADS_RIVERS');\n      expect(layer.Layer[0].Title).to.eql('Roads and Rivers');\n      expect(layer.Layer[0].CRS).to.eql(['EPSG:26986', 'CRS:84']);\n      expect(layer.Layer[0].Identifier).to.eql(['123456']);\n      expect(layer.Layer[0].BoundingBox).to.eql([{\n        crs: 'CRS:84',\n        extent: [-71.63, 41.75, -70.78, 42.9],\n        res: [0.01, 0.01]\n      }, {\n        crs: 'EPSG:26986',\n        extent: [189000, 834000, 285000, 962000],\n        res: [1, 1]\n      }]);\n      expect(layer.Layer[0].EX_GeographicBoundingBox).to.eql([-71.63, 41.75, -70.78, 42.9]);\n      expect(layer.Layer[0].Style).to.eql([{\n        Name: 'USGS',\n        Title: 'USGS Topo Map Style',\n        Abstract: 'Features are shown in a style like that used in USGS ' + 'topographic maps.',\n        StyleSheetURL: {\n          Format: 'text/xsl',\n          OnlineResource: 'http://www.university.edu/stylesheets/usgs.xsl'\n        },\n        LegendURL: [{\n          Format: 'image/gif',\n          OnlineResource: 'http://www.university.edu/legends/usgs.gif',\n          size: [72, 72]\n        }]\n      }]);\n      expect(layer.Layer[0].FeatureListURL).to.eql([{\n        Format: 'XML',\n        OnlineResource: 'http://www.university.edu/data/roads_rivers.gml'\n      }]);\n      expect(layer.Layer[0].Attribution).to.eql({\n        Title: 'State College University',\n        OnlineResource: 'http://www.university.edu/',\n        LogoURL: {\n          Format: 'image/gif',\n          OnlineResource: 'http://www.university.edu/icons/logo.gif',\n          size: [100, 100]\n        }\n      });\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read version","suites":["ol.format.WMSCapabilities","when parsing singlelayer.xml"],"updatePoint":{"line":137,"column":24,"index":5531},"line":137,"code":"    it('can read version', function () {\n      expect(capabilities.version).to.eql('1.3.0');\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Service section","suites":["ol.format.WMSCapabilities","when parsing singlelayer.xml"],"updatePoint":{"line":140,"column":32,"index":5640},"line":140,"code":"    it('can read Service section', function () {\n      // FIXME not all fields are tested\n      const service = capabilities.Service;\n      expect(service.Name).to.eql('WMS');\n      expect(service.Title).to.eql('Acme Corp. Map Server');\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Capability.Layer","suites":["ol.format.WMSCapabilities","when parsing singlelayer.xml"],"updatePoint":{"line":146,"column":33,"index":5886},"line":146,"code":"    it('can read Capability.Layer', function () {\n      const layer = capabilities.Capability.Layer;\n      expect(layer.Title).to.eql('Roads at 1:1M scale');\n      expect(layer.Name).to.be('ROADS_1M');\n      expect(layer.queryable).to.be(true);\n    });","file":"browser/spec/ol/format/wmscapabilities.test.js","skipped":false,"dir":"test"},{"name":"returns null if layers is undefined","suites":["ol.format.WMSGetFeatureInfo","#getLayers"],"updatePoint":{"line":6,"column":43,"index":364},"line":6,"code":"    it('returns null if layers is undefined', function () {\n      const format = new WMSGetFeatureInfo();\n      expect(format.getLayers()).to.be(null);\n    });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"returns the value provided in the layers option","suites":["ol.format.WMSGetFeatureInfo","#getLayers"],"updatePoint":{"line":10,"column":55,"index":536},"line":10,"code":"    it('returns the value provided in the layers option', function () {\n      const format = new WMSGetFeatureInfo({\n        layers: ['a', 'z']\n      });\n      expect(format.getLayers()).to.eql(['a', 'z']);\n    });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"creates 3 features","suites":["ol.format.WMSGetFeatureInfo","#readFormat","read Features"],"updatePoint":{"line":37,"column":28,"index":1373},"line":37,"code":"      it('creates 3 features', function () {\n        expect(features).to.have.length(3);\n      });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"creates a feature for 1071","suites":["ol.format.WMSGetFeatureInfo","#readFormat","read Features"],"updatePoint":{"line":40,"column":36,"index":1480},"line":40,"code":"      it('creates a feature for 1071', function () {\n        const feature = features[0];\n        expect(feature.getId()).to.be(undefined);\n        expect(feature.get('FID')).to.equal('1071');\n        expect(feature.get('NO_CAMPAGNE')).to.equal('1020050');\n      });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"read boundedBy but no geometry","suites":["ol.format.WMSGetFeatureInfo","#readFormat","read Features"],"updatePoint":{"line":46,"column":40,"index":1751},"line":46,"code":"      it('read boundedBy but no geometry', function () {\n        const feature = features[0];\n        expect(feature.getGeometry()).to.be(undefined);\n        expect(feature.get('boundedBy')).to.eql([-531138.686422, 5386348.414671, -117252.819653, 6144475.186022]);\n      });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"read empty response","suites":["ol.format.WMSGetFeatureInfo","#readFormat","read Features"],"updatePoint":{"line":51,"column":29,"index":2015},"line":51,"code":"      it('read empty response', function () {\n        // read empty response\n        const text = '<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>' + '<msGMLOutput xmlns:gml=\"http://www.opengis.net/gml\"' + '  xmlns:xlink=\"http://www.w3.org/1999/xlink\"' + '  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">' + '  <AAA64_layer>' + '  </AAA64_layer>' + '</msGMLOutput>';\n        const features = new WMSGetFeatureInfo().readFeatures(text);\n        expect(features.length).to.be(0);\n      });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"read empty attributes","suites":["ol.format.WMSGetFeatureInfo","#readFormat","read Features"],"updatePoint":{"line":57,"column":31,"index":2509},"line":57,"code":"      it('read empty attributes', function () {\n        const text = '<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>' + '<msGMLOutput ' + '   xmlns:gml=\"http://www.opengis.net/gml\"' + '   xmlns:xlink=\"http://www.w3.org/1999/xlink\"' + '   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">' + '  <AAA64_layer>' + '    <AAA64_feature>' + '      <gml:boundedBy>' + '        <gml:Box srsName=\"EPSG:4326\">' + '        <gml:coordinates>' + '        107397.266000,460681.063000 116568.188000,480609.250000' + '        </gml:coordinates>' + '        </gml:Box>' + '      </gml:boundedBy>' + '      <FOO>bar</FOO>' + '      <EMPTY></EMPTY>' + '    </AAA64_feature>' + '  </AAA64_layer>' + '</msGMLOutput>';\n        const features = new WMSGetFeatureInfo().readFeatures(text);\n        expect(features.length).to.be(1);\n        expect(features[0].get('FOO')).to.be('bar');\n        // FIXME is that really wanted ?\n        expect(features[0].get('EMPTY')).to.be(undefined);\n      });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"read features from multiple layers","suites":["ol.format.WMSGetFeatureInfo","#readFormat","read Features"],"updatePoint":{"line":65,"column":44,"index":3495},"line":65,"code":"      it('read features from multiple layers', function () {\n        const text = '<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>' + '<msGMLOutput ' + '  xmlns:gml=\"http://www.opengis.net/gml\"' + '  xmlns:xlink=\"http://www.w3.org/1999/xlink\"' + '  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">' + '  <AAA64_layer>' + '   <AAA64_feature>' + '     <gml:boundedBy>' + '       <gml:Box srsName=\"EPSG:4326\">' + '       <gml:coordinates>' + '       129799.109000,467950.250000 133199.906000,468904.063000' + '       </gml:coordinates>' + '       </gml:Box>' + '     </gml:boundedBy>' + '     <OBJECTID>287</OBJECTID>' + '     <ROUTE>N403</ROUTE>' + '     <ROUTE_CH>#N403</ROUTE_CH>' + '     <COUNT>1</COUNT>' + '     <BEHEERDER>P</BEHEERDER>' + '     <LENGTH>4091.25</LENGTH>' + '     <SHAPE>&lt;shape&gt;</SHAPE>' + '     <SE_ANNO_CAD_DATA>&lt;null&gt;</SE_ANNO_CAD_DATA>' + '   </AAA64_feature>' + '  </AAA64_layer>' + '  <AAA62_layer>' + '   <AAA62_feature>' + '     <gml:boundedBy>' + '       <gml:Box srsName=\"EPSG:4326\">' + '        <gml:coordinates>' + '        129936.000000,468362.000000 131686.000000,473119.000000' + '        </gml:coordinates>' + '       </gml:Box>' + '     </gml:boundedBy>' + '     <OBJECTID>1251</OBJECTID>' + '     <VWK_ID>1515</VWK_ID>' + '     <VWK_BEGDTM>00:00:00 01/01/1998</VWK_BEGDTM>' + '     <VWJ_ID_BEG>1472</VWJ_ID_BEG>' + '     <VWJ_ID_END>1309</VWJ_ID_END>' + '     <VAKTYPE>D</VAKTYPE>' + '     <VRT_CODE>227</VRT_CODE>' + '     <VRT_NAAM>Vecht</VRT_NAAM>' + '     <VWG_NR>2</VWG_NR>' + '     <VWG_NAAM>Vecht</VWG_NAAM>' + '     <BEGKM>18.25</BEGKM>' + '     <ENDKM>23.995</ENDKM>' + '     <LENGTH>5745.09</LENGTH>' + '     <SHAPE>&lt;shape&gt;</SHAPE>' + '     <SE_ANNO_CAD_DATA>&lt;null&gt;</SE_ANNO_CAD_DATA>' + '   </AAA62_feature>' + '  </AAA62_layer>' + '</msGMLOutput>';\n        const format = new WMSGetFeatureInfo();\n        const features = format.readFeatures(text);\n        expect(features.length).to.be(2);\n        expect(features[0].get('OBJECTID')).to.be('287');\n        expect(features[1].get('OBJECTID')).to.be('1251');\n        format.setLayers(['AAA64']);\n        const aaa64Features = format.readFeatures(text);\n        expect(aaa64Features.length).to.be(1);\n        format.setLayers(['AAA64', 'AAA62']);\n        const allFeatures = format.readFeatures(text);\n        expect(allFeatures.length).to.be(2);\n        format.setLayers(['foo', 'bar']);\n        const dummyFeatures = format.readFeatures(text);\n        expect(dummyFeatures.length).to.be(0);\n      });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"read geoserver’s response","suites":["ol.format.WMSGetFeatureInfo","#readFormat","read Features"],"updatePoint":{"line":82,"column":35,"index":6012},"line":82,"code":"      it('read geoserver’s response', function () {\n        const text = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<wfs:FeatureCollection xmlns=\"http://www.opengis.net/wfs\"' + '  xmlns:wfs=\"http://www.opengis.net/wfs\"' + '   xmlns:opengeo=\"http://opengeo.org\"' + '   xmlns:gml=\"http://www.opengis.net/gml\"' + '   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' + '   xsi:schemaLocation=\"http://opengeo.org ' + '   http://demo.opengeo.org:80/geoserver/wfs?service=WFS&amp;' + 'version=1.0.0&amp;request=DescribeFeatureType&amp;' + 'typeName=opengeo:roads http://www.opengis.net/wfs ' + '   http://demo.opengeo.org:80/geoserver/schemas/wfs/1.0.0/' + 'WFS-basic.xsd\">' + '  <gml:boundedBy>' + '    <gml:Box' + ' srsName=\"http://www.opengis.net/gml/srs/epsg.xml#4326\">' + '      <gml:coordinates xmlns:gml=\"http://www.opengis.net/gml\"' + '        decimal=\".\" cs=\",\" ts=\" \">' + '591943.9375,4925605 593045.625,4925845' + '      </gml:coordinates>' + '    </gml:Box>' + '  </gml:boundedBy>' + '  <gml:featureMember>' + '    <opengeo:roads fid=\"roads.90\">' + '      <opengeo:cat>3</opengeo:cat>' + '      <opengeo:label>secondary highway, hard surface' + '      </opengeo:label>' + '      <opengeo:the_geom>' + '        <gml:MultiLineString' + '  srsName=\"http://www.opengis.net/gml/srs/epsg.xml#4326\">' + '        <gml:lineStringMember>' + '        <gml:LineString>' + '        <gml:coordinates xmlns:gml=\"http://www.opengis.net/gml\"' + ' decimal=\".\" cs=\",\" ts=\" \">' + '593045.60746465,4925605.0059156 593024.32382915,4925606.79305411' + ' 592907.54863574,4925624.85647524 592687.35111096,' + '4925670.76834012 592430.76279218,4925678.79393165' + ' 592285.97636109,4925715.70811767 592173.39165655,' + '4925761.83511156 592071.1753393,4925793.95523514' + ' 591985.96972625,4925831.59842486' + ' 591943.98769455,4925844.93220071' + '        </gml:coordinates>' + '        </gml:LineString>' + '        </gml:lineStringMember>' + '        </gml:MultiLineString>' + '      </opengeo:the_geom>' + '    </opengeo:roads>' + '  </gml:featureMember>' + '</wfs:FeatureCollection>';\n        const features = new WMSGetFeatureInfo().readFeatures(text);\n        expect(features.length).to.be(1);\n        expect(features[0].get('cat')).to.be('3');\n        expect(features[0].getGeometry().getType()).to.be('MultiLineString');\n      });","file":"browser/spec/ol/format/wmsgetfeatureinfo.test.js","skipped":false,"dir":"test"},{"name":"can read Capability.Contents.Layer","suites":["ol.format.WMTSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":16,"column":42,"index":542},"line":16,"code":"    it('can read Capability.Contents.Layer', function () {\n      expect(capabilities.Contents.Layer).to.be.an('array');\n      expect(capabilities.Contents.Layer).to.have.length(1);\n      const layer = capabilities.Contents.Layer[0];\n      expect(layer.Abstract).to.be.eql('Blue Marble Next Generation NASA Product');\n      expect(layer.Identifier).to.be.eql('BlueMarbleNextGeneration');\n      expect(layer.Title).to.be.eql('Blue Marble Next Generation');\n      expect(layer.Dimension).to.be.an('array');\n      expect(layer.Dimension).to.have.length(1);\n      expect(layer.Dimension[0]).to.be.an('object');\n      expect(layer.Dimension[0].Identifier).to.be.eql('Time');\n      expect(layer.Dimension[0].Default).to.be.eql('20110805');\n      expect(layer.Dimension[0].Value).to.be.an('array');\n      expect(layer.Dimension[0].Value).to.have.length(2);\n      expect(layer.Dimension[0].Value[0]).to.be.eql('20110805');\n      expect(layer.Format).to.be.an('array');\n      expect(layer.Format).to.have.length(2);\n      expect(layer.Format[0]).to.be.eql('image/jpeg');\n      expect(layer.Style).to.be.an('array');\n      expect(layer.Style).to.have.length(2);\n      expect(layer.Style[0].Identifier).to.be.eql('DarkBlue');\n      expect(layer.Style[0].isDefault).to.be(true);\n      expect(layer.Style[0].Title).to.be.eql('Dark Blue');\n      expect(layer.Style[0].LegendURL[0].href).to.be.eql('http://www.miramon.uab.es/wmts/Coastlines/' + 'coastlines_darkBlue.png');\n      expect(layer.Style[0].LegendURL[0].format).to.be.eql('image/png');\n      expect(layer.TileMatrixSetLink).to.be.an('array');\n      expect(layer.TileMatrixSetLink).to.have.length(3);\n      expect(layer.TileMatrixSetLink[0].TileMatrixSet).to.be.eql('BigWorldPixel');\n      expect(layer.TileMatrixSetLink[1].TileMatrixSet).to.be.eql('google3857');\n      expect(layer.TileMatrixSetLink[2].TileMatrixSet).to.be.eql('google3857subset');\n      const wgs84Bbox = layer.WGS84BoundingBox;\n      expect(wgs84Bbox).to.be.an('array');\n      expect(wgs84Bbox[0]).to.be.eql(-180);\n      expect(wgs84Bbox[2]).to.be.eql(180);\n      expect(wgs84Bbox[1]).to.be.eql(-90);\n      expect(wgs84Bbox[3]).to.be.eql(90.0);\n      expect(layer.ResourceURL).to.be.an('array');\n      expect(layer.ResourceURL).to.have.length(2);\n      expect(layer.ResourceURL[0].format).to.be.eql('image/png');\n      expect(layer.ResourceURL[0].template).to.be.eql('http://www.example.com/wmts/coastlines/{TileMatrix}' + '/{TileRow}/{TileCol}.png');\n    });","file":"browser/spec/ol/format/wmtscapabilities.test.js","skipped":false,"dir":"test"},{"name":"Can read Capabilities.Content.TileMatrixSet","suites":["ol.format.WMTSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":57,"column":51,"index":3024},"line":57,"code":"    it('Can read Capabilities.Content.TileMatrixSet', function () {\n      expect(capabilities.Contents.TileMatrixSet).to.be.ok();\n      const bigWorld = capabilities.Contents.TileMatrixSet[2];\n      expect(bigWorld).to.be.ok();\n      expect(bigWorld.Identifier).to.be.eql('BigWorld');\n      expect(bigWorld.SupportedCRS).to.be.eql('urn:ogc:def:crs:OGC:1.3:CRS84');\n      expect(bigWorld.TileMatrix).to.have.length(2);\n      expect(bigWorld.TileMatrix[0].Identifier).to.be.eql('1e6');\n      expect(bigWorld.TileMatrix[0].MatrixHeight).to.be.eql(50000);\n      expect(bigWorld.TileMatrix[0].MatrixWidth).to.be.eql(60000);\n      expect(bigWorld.TileMatrix[0].ScaleDenominator).to.be.eql(1000000);\n      expect(bigWorld.TileMatrix[0].TileWidth).to.be.eql(256);\n      expect(bigWorld.TileMatrix[0].TileHeight).to.be.eql(256);\n      expect(bigWorld.TileMatrix[0].TopLeftCorner).to.be.a('array');\n      expect(bigWorld.TileMatrix[0].TopLeftCorner[0]).to.be.eql(-180);\n      expect(bigWorld.TileMatrix[0].TopLeftCorner[1]).to.be.eql(84);\n      expect(bigWorld.TileMatrix[1].Identifier).to.be.eql('2.5e6');\n      expect(bigWorld.TileMatrix[1].MatrixHeight).to.be.eql(7000);\n      expect(bigWorld.TileMatrix[1].MatrixWidth).to.be.eql(9000);\n      expect(bigWorld.TileMatrix[1].ScaleDenominator).to.be.eql(2500000);\n      expect(bigWorld.TileMatrix[1].TileWidth).to.be.eql(256);\n      expect(bigWorld.TileMatrix[1].TileHeight).to.be.eql(256);\n      expect(bigWorld.TileMatrix[1].TopLeftCorner).to.be.a('array');\n      expect(bigWorld.TileMatrix[1].TopLeftCorner[0]).to.be.eql(-180);\n      expect(bigWorld.TileMatrix[1].TopLeftCorner[1]).to.be.eql(84);\n    });","file":"browser/spec/ol/format/wmtscapabilities.test.js","skipped":false,"dir":"test"},{"name":"Can read OWS tags","suites":["ol.format.WMTSCapabilities","when parsing ogcsample.xml"],"updatePoint":{"line":83,"column":25,"index":4646},"line":83,"code":"    it('Can read OWS tags', function () {\n      expect(capabilities.ServiceIdentification).to.be.ok();\n      expect(capabilities.OperationsMetadata).to.be.ok();\n    });","file":"browser/spec/ol/format/wmtscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can read Capability.Contents.Layer","suites":["ol.format.WMTSCapabilities","when parsing ign.xml"],"updatePoint":{"line":101,"column":42,"index":5191},"line":101,"code":"    it('can read Capability.Contents.Layer', function () {\n      expect(capabilities.Contents.Layer).to.be.an('array');\n      expect(capabilities.Contents.Layer).to.have.length(1);\n      const layer = capabilities.Contents.Layer[0];\n      expect(layer.TileMatrixSetLink).to.be.an('array');\n      expect(layer.TileMatrixSetLink).to.have.length(2);\n      expect(layer.TileMatrixSetLink[0].TileMatrixSet).to.be.eql('PM');\n      expect(layer.TileMatrixSetLink[0].TileMatrixSetLimits).to.be.an('array');\n      expect(layer.TileMatrixSetLink[0].TileMatrixSetLimits).to.have.length(20);\n      expect(layer.TileMatrixSetLink[0].TileMatrixSetLimits[0].TileMatrix).to.be.eql('0');\n      expect(layer.TileMatrixSetLink[0].TileMatrixSetLimits[0].MinTileRow).to.be.eql(0);\n      expect(layer.TileMatrixSetLink[0].TileMatrixSetLimits[0].MaxTileRow).to.be.eql(1);\n      expect(layer.TileMatrixSetLink[0].TileMatrixSetLimits[0].MinTileCol).to.be.eql(0);\n      expect(layer.TileMatrixSetLink[0].TileMatrixSetLimits[0].MaxTileCol).to.be.eql(1);\n      expect(layer.TileMatrixSetLink[1].TileMatrixSet).to.be.eql('Prefixed');\n      expect(layer.TileMatrixSetLink[1].TileMatrixSetLimits).to.be.an('array');\n      expect(layer.TileMatrixSetLink[1].TileMatrixSetLimits).to.have.length(2);\n      expect(layer.TileMatrixSetLink[1].TileMatrixSetLimits[0].TileMatrix).to.be.eql('Prefixed:0');\n      expect(layer.TileMatrixSetLink[1].TileMatrixSetLimits[0].MinTileRow).to.be.eql(0);\n      expect(layer.TileMatrixSetLink[1].TileMatrixSetLimits[0].MaxTileRow).to.be.eql(1);\n      expect(layer.TileMatrixSetLink[1].TileMatrixSetLimits[0].MinTileCol).to.be.eql(0);\n      expect(layer.TileMatrixSetLink[1].TileMatrixSetLimits[0].MaxTileCol).to.be.eql(1);\n    });","file":"browser/spec/ol/format/wmtscapabilities.test.js","skipped":false,"dir":"test"},{"name":"Can read Capabilities.Content.TileMatrixSet","suites":["ol.format.WMTSCapabilities","when parsing ign.xml"],"updatePoint":{"line":124,"column":51,"index":6929},"line":124,"code":"    it('Can read Capabilities.Content.TileMatrixSet', function () {\n      expect(capabilities.Contents.TileMatrixSet).to.be.ok();\n      const pm = capabilities.Contents.TileMatrixSet[0];\n      expect(pm).to.be.ok();\n      expect(pm.Identifier).to.be.eql('PM');\n      expect(pm.SupportedCRS).to.be.eql('EPSG:3857');\n      expect(pm.TileMatrix).to.have.length(22);\n      expect(pm.TileMatrix[0].Identifier).to.be.eql('0');\n      expect(pm.TileMatrix[0].MatrixHeight).to.be.eql(1);\n      expect(pm.TileMatrix[0].MatrixWidth).to.be.eql(1);\n      expect(pm.TileMatrix[0].ScaleDenominator).to.be.eql(559082264.0287178958533332);\n      expect(pm.TileMatrix[0].TileWidth).to.be.eql(256);\n      expect(pm.TileMatrix[0].TileHeight).to.be.eql(256);\n      expect(pm.TileMatrix[0].TopLeftCorner).to.be.a('array');\n      expect(pm.TileMatrix[0].TopLeftCorner[0]).to.be.eql(-20037508);\n      expect(pm.TileMatrix[0].TopLeftCorner[1]).to.be.eql(20037508);\n      expect(pm.TileMatrix[1].Identifier).to.be.eql('1');\n      expect(pm.TileMatrix[1].MatrixHeight).to.be.eql(2);\n      expect(pm.TileMatrix[1].MatrixWidth).to.be.eql(2);\n      expect(pm.TileMatrix[1].ScaleDenominator).to.be.eql(279541132.0143588959472254);\n      expect(pm.TileMatrix[1].TileWidth).to.be.eql(256);\n      expect(pm.TileMatrix[1].TileHeight).to.be.eql(256);\n      expect(pm.TileMatrix[1].TopLeftCorner).to.be.a('array');\n      expect(pm.TileMatrix[1].TopLeftCorner[0]).to.be.eql(-20037508);\n      expect(pm.TileMatrix[1].TopLeftCorner[1]).to.be.eql(20037508);\n    });","file":"browser/spec/ol/format/wmtscapabilities.test.js","skipped":false,"dir":"test"},{"name":"can handle non-Zulu time zones","suites":["ol/format/xsd","readDateTime"],"updatePoint":{"line":4,"column":38,"index":188},"line":4,"code":"    it('can handle non-Zulu time zones', function () {\n      const node = document.createElement('time');\n      node.textContent = '2016-07-12T15:00:00+03:00';\n      expect(new Date(readDateTime(node) * 1000).toISOString()).to.eql('2016-07-12T12:00:00.000Z');\n    });","file":"browser/spec/ol/format/xsd.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.Geolocation","constructor"],"updatePoint":{"line":4,"column":44,"index":187},"line":4,"code":"    it('can be constructed without arguments', function () {\n      const instance = new Geolocation();\n      expect(instance).to.be.an(Geolocation);\n    });","file":"browser/spec/ol/geolocation.test.js","skipped":false,"dir":"test"},{"name":"creates a graticule without labels","suites":["ol.layer.Graticule","#createGraticule"],"updatePoint":{"line":16,"column":42,"index":616},"line":16,"code":"    it('creates a graticule without labels', function () {\n      createGraticule();\n      const extent = [-25614353.926475704, -7827151.696402049, 25614353.926475704, 7827151.696402049];\n      const projection = getProjection('EPSG:3857');\n      const resolution = 39135.75848201024;\n      const squaredTolerance = resolution * resolution / 4.0;\n      graticule.updateProjectionInfo_(projection);\n      graticule.createGraticule_(extent, [0, 0], resolution, squaredTolerance);\n      expect(graticule.getMeridians().length).to.be(13);\n      expect(graticule.getParallels().length).to.be(3);\n      expect(graticule.meridiansLabels_).to.be(null);\n      expect(graticule.parallelsLabels_).to.be(null);\n    });","file":"browser/spec/ol/graticule.test.js","skipped":false,"dir":"test"},{"name":"creates a graticule with normal world labels","suites":["ol.layer.Graticule","#createGraticule"],"updatePoint":{"line":29,"column":52,"index":1332},"line":29,"code":"    it('creates a graticule with normal world labels', function () {\n      const feature = new Feature();\n      graticule = new Graticule({\n        showLabels: true,\n        wrapX: false\n      });\n      new Map({\n        layers: [graticule]\n      });\n      const extent = [-25614353.926475704, -7827151.696402049, 25614353.926475704, 7827151.696402049];\n      const projection = getProjection('EPSG:3857');\n      const resolution = 39135.75848201024;\n      graticule.loaderFunction(extent, resolution, projection);\n      const event = {\n        context: document.createElement('canvas').getContext('2d'),\n        inversePixelTransform: [1, 0, 0, 1, 0, 0],\n        frameState: {\n          coordinateToPixelTransform: [1, 0, 0, 1, 0, 0],\n          extent: extent,\n          pixelRatio: 1,\n          viewState: {\n            projection: projection,\n            resolution: resolution,\n            rotation: 0\n          }\n        }\n      };\n      graticule.drawLabels_(event);\n      expect(graticule.meridiansLabels_.length).to.be(13);\n      expect(graticule.meridiansLabels_[0].text).to.be('0°');\n      expect(graticule.meridiansLabels_[0].geom.getCoordinates()[0]).to.roughlyEqual(0, 1e-9);\n      expect(graticule.parallelsLabels_.length).to.be(3);\n      expect(graticule.parallelsLabels_[0].text).to.be('0°');\n      expect(graticule.parallelsLabels_[0].geom.getCoordinates()[1]).to.roughlyEqual(0, 1e-9);\n      feature.set('graticule_label', graticule.meridiansLabels_[0].text);\n      expect(graticule.lonLabelStyle_(feature).getText().getText()).to.be('0°');\n      feature.set('graticule_label', graticule.parallelsLabels_[0].text);\n      expect(graticule.latLabelStyle_(feature).getText().getText()).to.be('0°');\n    });","file":"browser/spec/ol/graticule.test.js","skipped":false,"dir":"test"},{"name":"creates a graticule with wrapped world labels","suites":["ol.layer.Graticule","#createGraticule"],"updatePoint":{"line":68,"column":53,"index":3055},"line":68,"code":"    it('creates a graticule with wrapped world labels', function () {\n      const feature = new Feature();\n      graticule = new Graticule({\n        showLabels: true\n      });\n      new Map({\n        layers: [graticule]\n      });\n      const extent = [-25614353.926475704, -7827151.696402049, 25614353.926475704, 7827151.696402049];\n      const projection = getProjection('EPSG:3857');\n      const resolution = 39135.75848201024;\n      graticule.loaderFunction(extent, resolution, projection);\n      const event = {\n        context: document.createElement('canvas').getContext('2d'),\n        inversePixelTransform: [1, 0, 0, 1, 0, 0],\n        frameState: {\n          coordinateToPixelTransform: [1, 0, 0, 1, 0, 0],\n          extent: extent,\n          pixelRatio: 1,\n          viewState: {\n            projection: projection,\n            resolution: resolution,\n            rotation: 0\n          }\n        }\n      };\n      graticule.drawLabels_(event);\n      expect(graticule.meridiansLabels_.length).to.be(13);\n      expect(graticule.meridiansLabels_[0].text).to.be('0°');\n      const coordinates = fromLonLat([360, 0]);\n      expect(graticule.meridiansLabels_[0].geom.getCoordinates()[0]).to.roughlyEqual(coordinates[0], 1e-9);\n      expect(graticule.parallelsLabels_.length).to.be(3);\n      expect(graticule.parallelsLabels_[0].text).to.be('0°');\n      expect(graticule.parallelsLabels_[0].geom.getCoordinates()[1]).to.roughlyEqual(0, 1e-9);\n      feature.set('graticule_label', graticule.meridiansLabels_[0].text);\n      expect(graticule.lonLabelStyle_(feature).getText().getText()).to.be('0°');\n      feature.set('graticule_label', graticule.parallelsLabels_[0].text);\n      expect(graticule.latLabelStyle_(feature).getText().getText()).to.be('0°');\n    });","file":"browser/spec/ol/graticule.test.js","skipped":false,"dir":"test"},{"name":"has a default stroke style","suites":["ol.layer.Graticule","#createGraticule"],"updatePoint":{"line":107,"column":34,"index":4798},"line":107,"code":"    it('has a default stroke style', function () {\n      createGraticule();\n      const actualStyle = graticule.strokeStyle_;\n      expect(actualStyle).not.to.be(undefined);\n      expect(actualStyle instanceof Stroke).to.be(true);\n    });","file":"browser/spec/ol/graticule.test.js","skipped":false,"dir":"test"},{"name":"can be configured with a stroke style","suites":["ol.layer.Graticule","#createGraticule"],"updatePoint":{"line":113,"column":45,"index":5048},"line":113,"code":"    it('can be configured with a stroke style', function () {\n      createGraticule();\n      const customStrokeStyle = new Stroke({\n        color: 'rebeccapurple'\n      });\n      const styledGraticule = new Graticule({\n        map: new Map({}),\n        strokeStyle: customStrokeStyle\n      });\n      const actualStyle = styledGraticule.strokeStyle_;\n      expect(actualStyle).not.to.be(undefined);\n      expect(actualStyle).to.be(customStrokeStyle);\n    });","file":"browser/spec/ol/graticule.test.js","skipped":false,"dir":"test"},{"name":"can be configured with label options","suites":["ol.layer.Graticule","#createGraticule"],"updatePoint":{"line":126,"column":44,"index":5505},"line":126,"code":"    it('can be configured with label options', function () {\n      const latLabelStyle = new Text();\n      const lonLabelStyle = new Text();\n      const feature = new Feature();\n      graticule = new Graticule({\n        map: new Map({}),\n        showLabels: true,\n        lonLabelFormatter: function (lon) {\n          return 'lon: ' + lon.toString();\n        },\n        latLabelFormatter: function (lat) {\n          return 'lat: ' + lat.toString();\n        },\n        lonLabelPosition: 0.9,\n        latLabelPosition: 0.1,\n        lonLabelStyle: lonLabelStyle,\n        latLabelStyle: latLabelStyle\n      });\n      const extent = [-25614353.926475704, -7827151.696402049, 25614353.926475704, 7827151.696402049];\n      const projection = getProjection('EPSG:3857');\n      const resolution = 39135.75848201024;\n      const squaredTolerance = resolution * resolution / 4.0;\n      graticule.updateProjectionInfo_(projection);\n      graticule.createGraticule_(extent, [0, 0], resolution, squaredTolerance);\n      expect(graticule.meridiansLabels_[0].text).to.be('lon: 0');\n      expect(graticule.parallelsLabels_[0].text).to.be('lat: 0');\n      expect(graticule.lonLabelStyle_(feature).getText()).to.eql(lonLabelStyle);\n      expect(graticule.latLabelStyle_(feature).getText()).to.eql(latLabelStyle);\n      feature.set('graticule_label', graticule.meridiansLabels_[0].text);\n      expect(graticule.lonLabelStyle_(feature).getText().getText()).to.be('lon: 0');\n      feature.set('graticule_label', graticule.parallelsLabels_[0].text);\n      expect(graticule.latLabelStyle_(feature).getText().getText()).to.be('lat: 0');\n      expect(graticule.lonLabelPosition_).to.be(0.9);\n      expect(graticule.latLabelPosition_).to.be(0.1);\n    });","file":"browser/spec/ol/graticule.test.js","skipped":false,"dir":"test"},{"name":"can be configured with interval limits","suites":["ol.layer.Graticule","#createGraticule"],"updatePoint":{"line":161,"column":46,"index":7235},"line":161,"code":"    it('can be configured with interval limits', function () {\n      graticule = new Graticule({\n        showLabels: true,\n        lonLabelFormatter: function (lon) {\n          return lon.toString();\n        },\n        latLabelFormatter: function (lat) {\n          return lat.toString();\n        },\n        intervals: [10]\n      });\n      new Map({\n        layers: [graticule]\n      });\n      const extent = [-25614353.926475704, -7827151.696402049, 25614353.926475704, 7827151.696402049];\n      const projection = getProjection('EPSG:3857');\n      const resolution = 4891.96981025128;\n      const squaredTolerance = resolution * resolution / 4.0;\n      graticule.updateProjectionInfo_(projection);\n      graticule.createGraticule_(extent, [0, 0], resolution, squaredTolerance);\n      expect(graticule.meridiansLabels_[0].text).to.be('0');\n      expect(graticule.parallelsLabels_[0].text).to.be('0');\n      expect(graticule.meridiansLabels_[1].text).to.be('-10');\n      expect(graticule.parallelsLabels_[1].text).to.be('-10');\n      expect(graticule.meridiansLabels_[2].text).to.be('-20');\n      expect(graticule.parallelsLabels_[2].text).to.be('-20');\n      expect(graticule.getMeridians().length).to.be(37);\n      expect(graticule.getParallels().length).to.be(11);\n    });","file":"browser/spec/ol/graticule.test.js","skipped":false,"dir":"test"},{"name":"handles load event","suites":["HTML Image loading"],"updatePoint":{"line":12,"column":24,"index":501},"line":12,"code":"  it('handles load event', function (done) {\n    img.src = 'spec/ol/data/dot.png';\n    listenImage(img, handleLoad, handleError);\n    setTimeout(function () {\n      expect(handleLoad.called).to.be(true);\n      expect(handleError.called).to.be(false);\n      done();\n    }, 200);\n  });","file":"browser/spec/ol/image.test.js","skipped":false,"dir":"test"},{"name":"handles load event when src is set later","suites":["HTML Image loading"],"updatePoint":{"line":21,"column":46,"index":807},"line":21,"code":"  it('handles load event when src is set later', function (done) {\n    listenImage(img, handleLoad, handleError);\n    img.src = 'spec/ol/data/dot.png';\n    setTimeout(function () {\n      expect(handleLoad.called).to.be(true);\n      expect(handleError.called).to.be(false);\n      done();\n    }, 200);\n  });","file":"browser/spec/ol/image.test.js","skipped":false,"dir":"test"},{"name":"handles error event","suites":["HTML Image loading"],"updatePoint":{"line":30,"column":25,"index":1092},"line":30,"code":"  it('handles error event', function (done) {\n    img.src = 'invalid.jpeg';\n    listenImage(img, handleLoad, handleError);\n    setTimeout(function () {\n      expect(handleLoad.called).to.be(false);\n      expect(handleError.called).to.be(true);\n      done();\n    }, 500);\n  });","file":"browser/spec/ol/image.test.js","skipped":false,"dir":"test"},{"name":"handles cancelation","suites":["HTML Image loading"],"updatePoint":{"line":39,"column":25,"index":1369},"line":39,"code":"  it('handles cancelation', function (done) {\n    img.src = 'spec/ol/data/dot.png';\n    listenImage(img, handleLoad, handleError)();\n    setTimeout(function () {\n      expect(handleLoad.called).to.be(false);\n      expect(handleError.called).to.be(false);\n      done();\n    }, 200);\n  });","file":"browser/spec/ol/image.test.js","skipped":false,"dir":"test"},{"name":"renders the image to the provided context, returns its canvas","suites":["getImage() with context"],"updatePoint":{"line":60,"column":67,"index":2092},"line":60,"code":"  it('renders the image to the provided context, returns its canvas', function () {\n    expect(image.image_).to.be.a(HTMLImageElement);\n    expect(image.getImage()).to.be.a(HTMLCanvasElement);\n    expect(image.context_.canvas).to.eql(image.getImage());\n  });","file":"browser/spec/ol/image.test.js","skipped":false,"dir":"test"},{"name":"can load idle tile","suites":["ol.ImageTile","#load()"],"updatePoint":{"line":8,"column":26,"index":429},"line":8,"code":"    it('can load idle tile', function (done) {\n      const tileCoord = [0, 0, 0];\n      const state = TileState.IDLE;\n      const src = 'spec/ol/data/osm-0-0-0.png';\n      const tileLoadFunction = defaultImageLoadFunction;\n      const tile = new ImageTile(tileCoord, state, src, null, tileLoadFunction);\n      let previousState = tile.getState();\n      listen(tile, EventType.CHANGE, function (event) {\n        const state = tile.getState();\n        if (previousState == TileState.IDLE) {\n          expect(state).to.be(TileState.LOADING);\n        } else if (previousState == TileState.LOADING) {\n          expect(state).to.be(TileState.LOADED);\n          done();\n        } else {\n          expect().fail();\n        }\n        previousState = state;\n      });\n      tile.load();\n    });","file":"browser/spec/ol/imagetile.test.js","skipped":false,"dir":"test"},{"name":"can load error tile","suites":["ol.ImageTile","#load()"],"updatePoint":{"line":29,"column":27,"index":1215},"line":29,"code":"    it('can load error tile', function (done) {\n      const tileCoord = [0, 0, 0];\n      const state = TileState.ERROR;\n      const src = 'spec/ol/data/osm-0-0-0.png';\n      const tileLoadFunction = defaultImageLoadFunction;\n      const tile = new ImageTile(tileCoord, state, src, null, tileLoadFunction);\n      let previousState = tile.getState();\n      listen(tile, EventType.CHANGE, function (event) {\n        const state = tile.getState();\n        if (previousState == TileState.ERROR) {\n          expect(state).to.be(TileState.LOADING);\n        } else if (previousState == TileState.LOADING) {\n          expect(state).to.be(TileState.LOADED);\n          done();\n        } else {\n          expect().fail();\n        }\n        previousState = state;\n      });\n      tile.load();\n    });","file":"browser/spec/ol/imagetile.test.js","skipped":false,"dir":"test"},{"name":"loads an empty image on error ","suites":["ol.ImageTile","#load()"],"updatePoint":{"line":50,"column":38,"index":2014},"line":50,"code":"    it('loads an empty image on error ', function (done) {\n      const tileCoord = [0, 0, 0];\n      const state = TileState.IDLE;\n      const src = 'spec/ol/data/osm-0-0-99.png';\n      const tileLoadFunction = defaultImageLoadFunction;\n      const tile = new ImageTile(tileCoord, state, src, null, tileLoadFunction);\n      const key = listen(tile, EventType.CHANGE, function (event) {\n        const state = tile.getState();\n        if (state == TileState.ERROR) {\n          expect(state).to.be(TileState.ERROR);\n          expect(tile.image_).to.be.a(HTMLCanvasElement);\n          unlistenByKey(key);\n          tile.load();\n          expect(tile.image_).to.be.a(HTMLImageElement);\n          done();\n        }\n      });\n      tile.load();\n    });","file":"browser/spec/ol/imagetile.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.interaction.DblClickDragZoom","constructor"],"updatePoint":{"line":8,"column":44,"index":459},"line":8,"code":"    it('can be constructed without arguments', function () {\n      const instance = new DblClickDragZoom();\n      expect(instance).to.be.an(DblClickDragZoom);\n    });","file":"browser/spec/ol/interaction/dblclickdragzoom.test.js","skipped":false,"dir":"test"},{"name":"does zoom in","suites":["ol.interaction.DblClickDragZoom","handleEvent()"],"updatePoint":{"line":50,"column":20,"index":1643},"line":50,"code":"    it('does zoom in', function () {\n      const down1 = new PointerEvent('pointerdown', {\n        clientX: 20,\n        clientY: 100\n      });\n      const up1 = new PointerEvent('pointerup', {\n        clientX: 20,\n        clientY: 100\n      });\n      const down2 = new PointerEvent('pointerdown', {\n        clientX: 20,\n        clientY: 100\n      });\n      const move1 = new PointerEvent('pointermove', {\n        clientX: 20,\n        clientY: 80\n      });\n      const move2 = new PointerEvent('pointermove', {\n        clientX: 20,\n        clientY: 60\n      });\n      const up2 = new PointerEvent('pointerup', {\n        clientX: 20,\n        clientY: 50\n      });\n      const ignoreMove1 = new PointerEvent('pointermove', {\n        clientX: 20,\n        clientY: 40\n      });\n      const ignoreMove2 = new PointerEvent('pointermove', {\n        clientX: 20,\n        clientY: 20\n      });\n      const view = map.getView();\n      expect(view.getZoom()).to.be(3);\n      map.getViewport().dispatchEvent(down1);\n      document.dispatchEvent(up1);\n      map.getViewport().dispatchEvent(down2);\n      document.dispatchEvent(move1);\n      document.dispatchEvent(move2);\n      document.dispatchEvent(up2);\n      expect(view.getZoom()).to.be(3.3219280948873626);\n      document.dispatchEvent(ignoreMove1);\n      document.dispatchEvent(ignoreMove2);\n      expect(view.getZoom()).to.be(3.3219280948873626);\n    });","file":"browser/spec/ol/interaction/dblclickdragzoom.test.js","skipped":false,"dir":"test"},{"name":"does zoom out","suites":["ol.interaction.DblClickDragZoom","handleEvent()"],"updatePoint":{"line":96,"column":21,"index":3043},"line":96,"code":"    it('does zoom out', function () {\n      const down1 = new PointerEvent('pointerdown', {\n        clientX: 20,\n        clientY: 10\n      });\n      const up1 = new PointerEvent('pointerup', {\n        clientX: 20,\n        clientY: 10\n      });\n      const down2 = new PointerEvent('pointerdown', {\n        clientX: 20,\n        clientY: 10\n      });\n      const move1 = new PointerEvent('pointermove', {\n        clientX: 20,\n        clientY: 20\n      });\n      const move2 = new PointerEvent('pointermove', {\n        clientX: 20,\n        clientY: 50\n      });\n      const up2 = new PointerEvent('pointerup', {\n        clientX: 20,\n        clientY: 50\n      });\n      const ignoreMove1 = new PointerEvent('pointermove', {\n        clientX: 20,\n        clientY: 100\n      });\n      const ignoreMove2 = new PointerEvent('pointermove', {\n        clientX: 20,\n        clientY: 120\n      });\n      const view = map.getView();\n      expect(view.getZoom()).to.be(3);\n      map.getViewport().dispatchEvent(down1);\n      document.dispatchEvent(up1);\n      map.getViewport().dispatchEvent(down2);\n      document.dispatchEvent(move1);\n      document.dispatchEvent(move2);\n      document.dispatchEvent(up2);\n      expect(view.getZoom()).to.be(2.6214883767462704);\n      document.dispatchEvent(ignoreMove1);\n      document.dispatchEvent(ignoreMove2);\n      expect(view.getZoom()).to.be(2.6214883767462704);\n    });","file":"browser/spec/ol/interaction/dblclickdragzoom.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["constructor"],"updatePoint":{"line":26,"column":44,"index":1020},"line":26,"code":"    it('can be constructed without arguments', function () {\n      const interaction = new DragAndDrop();\n      expect(interaction).to.be.an(DragAndDrop);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"sets formats on the instance","suites":["constructor"],"updatePoint":{"line":30,"column":36,"index":1175},"line":30,"code":"    it('sets formats on the instance', function () {\n      expect(interaction.formats_).to.have.length(1);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"accepts a source option","suites":["constructor"],"updatePoint":{"line":33,"column":31,"index":1285},"line":33,"code":"    it('accepts a source option', function () {\n      const source = new VectorSource();\n      const drop = new DragAndDrop({\n        formatConstructors: [GeoJSON],\n        source: source\n      });\n      expect(drop.source_).to.equal(source);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"registers and unregisters listeners","suites":["#setActive()"],"updatePoint":{"line":43,"column":43,"index":1595},"line":43,"code":"    it('registers and unregisters listeners', function () {\n      interaction.setMap(map);\n      interaction.setActive(true);\n      expect(viewport.hasListener('dragenter')).to.be(true);\n      expect(viewport.hasListener('dragover')).to.be(true);\n      expect(viewport.hasListener('drop')).to.be(true);\n      interaction.setActive(false);\n      expect(viewport.hasListener('dragenter')).to.be(false);\n      expect(viewport.hasListener('dragover')).to.be(false);\n      expect(viewport.hasListener('drop')).to.be(false);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"registers and unregisters listeners","suites":["#setMap()"],"updatePoint":{"line":56,"column":43,"index":2166},"line":56,"code":"    it('registers and unregisters listeners', function () {\n      interaction.setMap(map);\n      expect(viewport.hasListener('dragenter')).to.be(true);\n      expect(viewport.hasListener('dragover')).to.be(true);\n      expect(viewport.hasListener('drop')).to.be(true);\n      interaction.setMap(null);\n      expect(viewport.hasListener('dragenter')).to.be(false);\n      expect(viewport.hasListener('dragover')).to.be(false);\n      expect(viewport.hasListener('drop')).to.be(false);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"registers and unregisters listeners on a custom target","suites":["#setMap()"],"updatePoint":{"line":66,"column":62,"index":2673},"line":66,"code":"    it('registers and unregisters listeners on a custom target', function () {\n      const customTarget = new EventTarget();\n      interaction = new DragAndDrop({\n        formatConstructors: [GeoJSON],\n        target: customTarget\n      });\n      interaction.setMap(map);\n      expect(customTarget.hasListener('dragenter')).to.be(true);\n      expect(customTarget.hasListener('dragover')).to.be(true);\n      expect(customTarget.hasListener('drop')).to.be(true);\n      interaction.setMap(null);\n      expect(customTarget.hasListener('dragenter')).to.be(false);\n      expect(customTarget.hasListener('dragover')).to.be(false);\n      expect(customTarget.hasListener('drop')).to.be(false);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"reads dropped files as text","suites":["#handleDrop_"],"updatePoint":{"line":110,"column":35,"index":4155},"line":110,"code":"    it('reads dropped files as text', function (done) {\n      interaction.on('addfeatures', function (evt) {\n        expect(evt.features.length).to.be(1);\n        expect(evt.features[0].getGeometry().getCoordinates()).to.eql(transform([102.0, 0.5], 'EPSG:4326', 'EPSG:3857'));\n        expect(mockReadAsText).to.be(true);\n        expect(mockReadAsArrayBuffer).to.be(false);\n        done();\n      });\n      interaction.setMap(map);\n      const event = new Event();\n      event.dataTransfer = {};\n      event.type = 'dragenter';\n      viewport.dispatchEvent(event);\n      event.type = 'dragover';\n      viewport.dispatchEvent(event);\n      event.type = 'drop';\n      event.dataTransfer.files = {\n        length: 1,\n        item: function () {\n          return JSON.stringify({\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              id: '1',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [102.0, 0.5]\n              }\n            }]\n          });\n        }\n      };\n      viewport.dispatchEvent(event);\n      expect(event.dataTransfer.dropEffect).to.be('copy');\n      expect(event.propagationStopped).to.be(true);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"works with user projection","suites":["#handleDrop_"],"updatePoint":{"line":146,"column":34,"index":5371},"line":146,"code":"    it('works with user projection', function (done) {\n      interaction.on('addfeatures', function (evt) {\n        expect(evt.features.length).to.be(1);\n        expect(evt.features[0].getGeometry().getCoordinates()).to.eql([102.0, 0.5]);\n        expect(mockReadAsText).to.be(true);\n        expect(mockReadAsArrayBuffer).to.be(false);\n        clearUserProjection();\n        done();\n      });\n      useGeographic();\n      interaction.setMap(map);\n      const event = new Event();\n      event.dataTransfer = {};\n      event.type = 'dragenter';\n      viewport.dispatchEvent(event);\n      event.type = 'dragover';\n      viewport.dispatchEvent(event);\n      event.type = 'drop';\n      event.dataTransfer.files = {\n        length: 1,\n        item: function () {\n          return JSON.stringify({\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              id: '1',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [102.0, 0.5]\n              }\n            }]\n          });\n        }\n      };\n      viewport.dispatchEvent(event);\n      expect(event.dataTransfer.dropEffect).to.be('copy');\n      expect(event.propagationStopped).to.be(true);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"reads dropped files as arraybuffer","suites":["#handleDrop_"],"updatePoint":{"line":184,"column":42,"index":6612},"line":184,"code":"    it('reads dropped files as arraybuffer', function (done) {\n      const drop = new DragAndDrop({\n        formatConstructors: [GeoJSON, MVT]\n      });\n      drop.setMap(map);\n      drop.on('addfeatures', function (evt) {\n        expect(evt.features.length).to.be(1);\n        expect(mockReadAsText).to.be(false);\n        expect(mockReadAsArrayBuffer).to.be(true);\n        done();\n      });\n      const event = new Event();\n      event.dataTransfer = {};\n      event.type = 'dragenter';\n      viewport.dispatchEvent(event);\n      event.type = 'dragover';\n      viewport.dispatchEvent(event);\n      event.type = 'drop';\n      event.dataTransfer.files = {\n        length: 1,\n        item: function () {\n          return JSON.stringify({\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              id: '1'\n            }]\n          });\n        }\n      };\n      viewport.dispatchEvent(event);\n      expect(event.dataTransfer.dropEffect).to.be('copy');\n      expect(event.propagationStopped).to.be(true);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"reads using constructed formats","suites":["#handleDrop_"],"updatePoint":{"line":218,"column":39,"index":7665},"line":218,"code":"    it('reads using constructed formats', function (done) {\n      const drop = new DragAndDrop({\n        formatConstructors: [new GeoJSON()]\n      });\n      drop.setMap(map);\n      drop.on('addfeatures', function (evt) {\n        expect(evt.features.length).to.be(1);\n        expect(mockReadAsText).to.be(true);\n        expect(mockReadAsArrayBuffer).to.be(false);\n        done();\n      });\n      const event = new Event();\n      event.dataTransfer = {};\n      event.type = 'dragenter';\n      viewport.dispatchEvent(event);\n      event.type = 'dragover';\n      viewport.dispatchEvent(event);\n      event.type = 'drop';\n      event.dataTransfer.files = {\n        length: 1,\n        item: function () {\n          return JSON.stringify({\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              id: '1'\n            }]\n          });\n        }\n      };\n      viewport.dispatchEvent(event);\n      expect(event.dataTransfer.dropEffect).to.be('copy');\n      expect(event.propagationStopped).to.be(true);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"reads using arraybuffer formats","suites":["#handleDrop_"],"updatePoint":{"line":252,"column":39,"index":8719},"line":252,"code":"    it('reads using arraybuffer formats', function (done) {\n      class binaryGeoJSON extends GeoJSON {\n        constructor(options) {\n          super(options);\n        }\n        getType() {\n          return 'arraybuffer';\n        }\n        readFeatures(source, options) {\n          const data = new TextDecoder().decode(source);\n          return super.readFeatures(data, options);\n        }\n      }\n      const drop = new DragAndDrop({\n        formatConstructors: [binaryGeoJSON]\n      });\n      drop.setMap(map);\n      drop.on('addfeatures', function (evt) {\n        expect(evt.features.length).to.be(1);\n        expect(mockReadAsText).to.be(false);\n        expect(mockReadAsArrayBuffer).to.be(true);\n        done();\n      });\n      const event = new Event();\n      event.dataTransfer = {};\n      event.type = 'dragenter';\n      viewport.dispatchEvent(event);\n      event.type = 'dragover';\n      viewport.dispatchEvent(event);\n      event.type = 'drop';\n      event.dataTransfer.files = {\n        length: 1,\n        item: function () {\n          return JSON.stringify({\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              id: '1'\n            }]\n          });\n        }\n      };\n      viewport.dispatchEvent(event);\n      expect(event.dataTransfer.dropEffect).to.be('copy');\n      expect(event.propagationStopped).to.be(true);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"adds dropped features to a source","suites":["#handleDrop_"],"updatePoint":{"line":298,"column":41,"index":10115},"line":298,"code":"    it('adds dropped features to a source', function (done) {\n      const source = new VectorSource();\n      const drop = new DragAndDrop({\n        formatConstructors: [GeoJSON],\n        source: source\n      });\n      drop.setMap(map);\n      drop.on('addfeatures', function (evt) {\n        const features = source.getFeatures();\n        expect(features.length).to.be(1);\n        done();\n      });\n      const event = new Event();\n      event.dataTransfer = {};\n      event.type = 'dragenter';\n      viewport.dispatchEvent(event);\n      event.type = 'dragover';\n      viewport.dispatchEvent(event);\n      event.type = 'drop';\n      event.dataTransfer.files = {\n        length: 1,\n        item: function () {\n          return JSON.stringify({\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              id: '1'\n            }]\n          });\n        }\n      };\n      viewport.dispatchEvent(event);\n      expect(event.dataTransfer.dropEffect).to.be('copy');\n      expect(event.propagationStopped).to.be(true);\n    });","file":"browser/spec/ol/interaction/draganddrop.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.interaction.DragRotateAndZoom","constructor"],"updatePoint":{"line":10,"column":44,"index":593},"line":10,"code":"    it('can be constructed without arguments', function () {\n      const instance = new DragRotateAndZoom();\n      expect(instance).to.be.an(DragRotateAndZoom);\n    });","file":"browser/spec/ol/interaction/dragrotateandzoom.test.js","skipped":false,"dir":"test"},{"name":"does not rotate when rotation is disabled on the view","suites":["ol.interaction.DragRotateAndZoom","#handleDragEvent()"],"updatePoint":{"line":51,"column":61,"index":1802},"line":51,"code":"    it('does not rotate when rotation is disabled on the view', function () {\n      const pointerEvent = new Event();\n      pointerEvent.type = 'pointermove';\n      pointerEvent.clientX = 20;\n      pointerEvent.clientY = 10;\n      pointerEvent.pointerType = 'mouse';\n      let event = new MapBrowserEvent('pointermove', map, pointerEvent, true);\n      interaction.lastAngle_ = Math.PI;\n      let callCount = 0;\n      let view = map.getView();\n      view.on('change:rotation', function () {\n        callCount++;\n      });\n      interaction.handleDragEvent(event);\n      expect(callCount).to.be(1);\n      expect(interaction.lastAngle_).to.be(-0.8308214428190254);\n      callCount = 0;\n      view = new View({\n        projection: 'EPSG:4326',\n        center: [0, 0],\n        resolution: 1,\n        enableRotation: false\n      });\n      map.setView(view);\n      view.on('change:rotation', function () {\n        callCount++;\n      });\n      pointerEvent.type = 'pointermove';\n      pointerEvent.clientX = 24;\n      pointerEvent.clientY = 16;\n      pointerEvent.pointerType = 'mouse';\n      event = new MapBrowserEvent('pointermove', map, pointerEvent, true);\n      interaction.handleDragEvent(event);\n      expect(callCount).to.be(0);\n    });","file":"browser/spec/ol/interaction/dragrotateandzoom.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.interaction.DragZoom","constructor"],"updatePoint":{"line":50,"column":44,"index":1601},"line":50,"code":"    it('can be constructed without arguments', function () {\n      const instance = new DragZoom();\n      expect(instance).to.be.an(DragZoom);\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"sets \"ol-dragzoom\" as box className","suites":["ol.interaction.DragZoom","constructor"],"updatePoint":{"line":54,"column":43,"index":1751},"line":54,"code":"    it('sets \"ol-dragzoom\" as box className', function () {\n      const instance = new DragZoom();\n      expect(instance.box_.element_.className).to.be('ol-box ol-dragzoom');\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"sets a custom box className","suites":["ol.interaction.DragZoom","constructor"],"updatePoint":{"line":58,"column":35,"index":1926},"line":58,"code":"    it('sets a custom box className', function () {\n      const instance = new DragZoom({\n        className: 'test-dragzoom'\n      });\n      expect(instance.box_.element_.className).to.be('ol-box test-dragzoom');\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"uses the configured duration","suites":["ol.interaction.DragZoom","#onBoxEnd()"],"updatePoint":{"line":66,"column":36,"index":2194},"line":66,"code":"    it('uses the configured duration', function () {\n      const interaction = new DragZoom({\n        duration: 1\n      });\n      map.addInteraction(interaction);\n      const view = map.getView();\n      view.fitInternal = sinon.spy();\n      const box = new RenderBox();\n      const extent = [-110, 40, -90, 60];\n      box.geometry_ = polygonFromExtent(extent);\n      interaction.box_ = box;\n      interaction.onBoxEnd();\n      expect(view.fitInternal.calledOnce).to.be(true);\n      expect(view.fitInternal.args[0][1].duration).to.be(1);\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"centers the view on the box geometry","suites":["ol.interaction.DragZoom","#onBoxEnd()"],"updatePoint":{"line":81,"column":44,"index":2747},"line":81,"code":"    it('centers the view on the box geometry', function () {\n      const interaction = new DragZoom({\n        duration: 0\n      });\n      map.addInteraction(interaction);\n      const box = new RenderBox();\n      const extent = [-110, 40, -90, 60];\n      box.geometry_ = polygonFromExtent(extent);\n      interaction.box_ = box;\n      interaction.onBoxEnd();\n      const view = map.getView();\n      const center = view.getCenterInternal();\n      expect(center).to.eql(getCenter(extent));\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"centers the rotated view on the box geometry","suites":["ol.interaction.DragZoom","#onBoxEnd()"],"updatePoint":{"line":95,"column":52,"index":3249},"line":95,"code":"    it('centers the rotated view on the box geometry', function () {\n      const view = map.getView();\n      view.setRotation(Math.PI / 4);\n      const interaction = new DragZoom({\n        duration: 0\n      });\n      map.addInteraction(interaction);\n      const box = new RenderBox();\n      map.renderSync();\n      box.geometry_ = new Polygon([[map.getCoordinateFromPixel([0, 0]), map.getCoordinateFromPixel([360, 0]), map.getCoordinateFromPixel([360, 180]), map.getCoordinateFromPixel([0, 180]), map.getCoordinateFromPixel([0, 0])]]);\n      interaction.box_ = box;\n      const extentBefore = view.calculateExtentInternal();\n      interaction.onBoxEnd();\n      const newExtent = view.calculateExtentInternal();\n      expect(newExtent[0]).to.roughlyEqual(extentBefore[0], 1e-9);\n      expect(newExtent[1]).to.roughlyEqual(extentBefore[1], 1e-9);\n      expect(newExtent[2]).to.roughlyEqual(extentBefore[2], 1e-9);\n      expect(newExtent[3]).to.roughlyEqual(extentBefore[3], 1e-9);\n      expect(view.getResolution()).to.roughlyEqual(1, 1e-9);\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"centers the padded view on the box geometry","suites":["ol.interaction.DragZoom","#onBoxEnd()"],"updatePoint":{"line":115,"column":51,"index":4296},"line":115,"code":"    it('centers the padded view on the box geometry', function () {\n      map.getView().padding = [0, 180, 0, 0];\n      const interaction = new DragZoom({\n        duration: 0\n      });\n      map.addInteraction(interaction);\n      const box = new RenderBox();\n      const extent = [-180, -90, 0, 90];\n      box.geometry_ = polygonFromExtent(extent);\n      interaction.box_ = box;\n      interaction.onBoxEnd();\n      const view = map.getView();\n      expect(view.getResolution()).to.be(1);\n      expect(view.calculateExtentInternal()).to.eql(extent);\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"sets new resolution while zooming out","suites":["ol.interaction.DragZoom","#onBoxEnd()"],"updatePoint":{"line":130,"column":45,"index":4847},"line":130,"code":"    it('sets new resolution while zooming out', function () {\n      const interaction = new DragZoom({\n        duration: 0,\n        out: true\n      });\n      map.addInteraction(interaction);\n      const box = new RenderBox();\n      const extent = [-11.25, -11.25, 11.25, 11.25];\n      box.geometry_ = polygonFromExtent(extent);\n      interaction.box_ = box;\n      map.getView().setResolution(0.25);\n      interaction.onBoxEnd();\n      const view = map.getView();\n      const resolution = view.getResolution();\n      expect(resolution).to.eql(view.getConstrainedResolution(0.5));\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"sets new resolution while zooming out with view padding and rotation","suites":["ol.interaction.DragZoom","#onBoxEnd()"],"updatePoint":{"line":146,"column":76,"index":5465},"line":146,"code":"    it('sets new resolution while zooming out with view padding and rotation', function () {\n      const view = map.getView();\n      view.setResolution(0.5);\n      view.setRotation(Math.PI / 4);\n      view.padding = [90, 0, 0, 0];\n      const interaction = new DragZoom({\n        duration: 0,\n        out: true\n      });\n      map.addInteraction(interaction);\n      const box = new RenderBox();\n      map.renderSync();\n      box.geometry_ = new Polygon([[map.getCoordinateFromPixel([90, 117.5]), map.getCoordinateFromPixel([90, 152.5]), map.getCoordinateFromPixel([270, 152.5]), map.getCoordinateFromPixel([270, 117.5]), map.getCoordinateFromPixel([90, 117.5])]]);\n      interaction.box_ = box;\n      const expected = view.calculateExtentInternal();\n      scaleFromCenter(expected, 2);\n      interaction.onBoxEnd();\n      const newExtent = view.calculateExtentInternal();\n      expect(view.getResolution()).to.roughlyEqual(1, 1e-9);\n      expect(newExtent[0]).to.roughlyEqual(expected[0], 1e-9);\n      expect(newExtent[1]).to.roughlyEqual(expected[1], 1e-9);\n      expect(newExtent[2]).to.roughlyEqual(expected[2], 1e-9);\n      expect(newExtent[3]).to.roughlyEqual(expected[3], 1e-9);\n    });","file":"browser/spec/ol/interaction/dragzoom.test.js","skipped":false,"dir":"test"},{"name":"creates a new interaction","suites":["ol/interaction/Draw","constructor"],"updatePoint":{"line":111,"column":33,"index":4231},"line":111,"code":"    it('creates a new interaction', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'Point'\n      });\n      expect(draw).to.be.a(Draw);\n      expect(draw).to.be.a(Interaction);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"accepts a freehand option","suites":["ol/interaction/Draw","constructor"],"updatePoint":{"line":119,"column":33,"index":4450},"line":119,"code":"    it('accepts a freehand option', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'LineString',\n        freehand: true\n      });\n      const event = new PointerEvent('pointerdown', {\n        clientX: 0,\n        clientY: 0,\n        shiftKey: false\n      });\n      expect(draw.freehandCondition_(event)).to.be(true);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"always goes in trace mode if true","suites":["ol/interaction/Draw","constructor","trace option"],"updatePoint":{"line":133,"column":43,"index":4862},"line":133,"code":"      it('always goes in trace mode if true', function () {\n        const draw = new Draw({\n          source: source,\n          type: 'LineString',\n          trace: true\n        });\n        const event = new MapBrowserEvent({\n          map: map,\n          type: 'pointerup',\n          originalEvent: new PointerEvent('pointerup', {\n            clientX: 0,\n            clientY: 0\n          })\n        });\n        expect(draw.traceCondition_(event)).to.be(true);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"never goes in trace mode if false","suites":["ol/interaction/Draw","constructor","trace option"],"updatePoint":{"line":149,"column":43,"index":5333},"line":149,"code":"      it('never goes in trace mode if false', function () {\n        const draw = new Draw({\n          source: source,\n          type: 'LineString',\n          trace: false\n        });\n        const event = new MapBrowserEvent(map, 'pointerup', new PointerEvent('pointerup', {\n          clientX: 0,\n          clientY: 0\n        }));\n        expect(draw.traceCondition_(event)).to.be(false);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"accepts a condition","suites":["ol/interaction/Draw","constructor","trace option"],"updatePoint":{"line":161,"column":29,"index":5718},"line":161,"code":"      it('accepts a condition', function () {\n        const draw = new Draw({\n          source: source,\n          type: 'LineString',\n          trace: shiftKeyOnly\n        });\n        const goodEvent = new MapBrowserEvent(map, 'pointerup', new PointerEvent('pointerup', {\n          clientX: 0,\n          clientY: 0,\n          shiftKey: true\n        }));\n        expect(draw.traceCondition_(goodEvent)).to.be(true);\n        const badEvent = new MapBrowserEvent(map, 'pointerup', new PointerEvent('pointerup', {\n          clientX: 0,\n          clientY: 0,\n          shiftKey: false\n        }));\n        expect(draw.traceCondition_(badEvent)).to.be(false);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"accepts a dragVertexDelay option","suites":["ol/interaction/Draw","constructor","trace option"],"updatePoint":{"line":181,"column":40,"index":6401},"line":181,"code":"    it('accepts a dragVertexDelay option', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'LineString',\n        dragVertexDelay: 42\n      });\n      expect(draw.dragVertexDelay_).to.be(42);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"accepts a stopClick option","suites":["ol/interaction/Draw","constructor","trace option"],"updatePoint":{"line":189,"column":34,"index":6627},"line":189,"code":"    it('accepts a stopClick option', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'Point',\n        stopClick: true\n      });\n      map.addInteraction(draw);\n      let clicked = false;\n      const clickKey = map.on('click', () => clicked = true);\n      simulateBrowserEvent('pointermove', 10, 20);\n      simulateBrowserEvent('pointerdown', 10, 20);\n      simulateBrowserEvent('pointerup', 10, 20);\n      //setTimeout(() => {\n      expect(clicked).to.be(false);\n      unByKey(clickKey);\n      //}, 300);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"accepts a geometryLayout option","suites":["ol/interaction/Draw","constructor","trace option"],"updatePoint":{"line":207,"column":39,"index":7180},"line":207,"code":"    it('accepts a geometryLayout option', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'Point',\n        geometryLayout: 'XYZ'\n      });\n      expect(draw.geometryLayout_).to.be('XYZ');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"creates a feature with the correct geometryName","suites":["ol/interaction/Draw","specifying a geometryName"],"updatePoint":{"line":225,"column":55,"index":7675},"line":225,"code":"    it('creates a feature with the correct geometryName', function () {\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(features[0].getGeometryName()).to.equal('the_geom');\n      expect(geometry).to.be.a(Point);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"adds a point when below the tolerance","suites":["ol/interaction/Draw","specifying a clickTolerance"],"updatePoint":{"line":244,"column":45,"index":8319},"line":244,"code":"    it('adds a point when below the tolerance', function () {\n      let features;\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 15, 25);\n      features = source.getFeatures();\n      expect(features).to.length(0);\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 14, 24);\n      features = source.getFeatures();\n      expect(features).to.length(1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws a point on click","suites":["ol/interaction/Draw","drawing points"],"updatePoint":{"line":267,"column":30,"index":9018},"line":267,"code":"    it('draws a point on click', function () {\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Point);\n      expect(geometry.getCoordinates()).to.eql([10, -20]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"does not draw a point with a significant drag","suites":["ol/interaction/Draw","drawing points"],"updatePoint":{"line":277,"column":53,"index":9461},"line":277,"code":"    it('does not draw a point with a significant drag', function () {\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointermove', 18, 20);\n      simulateEvent('pointerup', 18, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"does not draw a point when modifier key is pressed","suites":["ol/interaction/Draw","drawing points"],"updatePoint":{"line":285,"column":58,"index":9805},"line":285,"code":"    it('does not draw a point when modifier key is pressed', function () {\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20, true);\n      simulateEvent('pointerup', 10, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"does not draw a point when multiple pointers are involved","suites":["ol/interaction/Draw","drawing points"],"updatePoint":{"line":292,"column":65,"index":10118},"line":292,"code":"    it('does not draw a point when multiple pointers are involved', function () {\n      simulateEvent('pointerdown', 10, 20, false, 1);\n      simulateEvent('pointerdown', 10, 20, false, 2);\n      simulateEvent('pointermove', 10, 30, false, 1);\n      simulateEvent('pointermove', 10, 10, false, 2);\n      simulateEvent('pointerup', 10, 30, false, 1);\n      simulateEvent('pointerup', 10, 10, false, 2);\n      const features = source.getFeatures();\n      expect(features).to.have.length(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"triggers draw events","suites":["ol/interaction/Draw","drawing points"],"updatePoint":{"line":302,"column":28,"index":10578},"line":302,"code":"    it('triggers draw events', function () {\n      const ds = sinon.spy();\n      const de = sinon.spy();\n      const da = sinon.spy();\n      listen(draw, 'drawstart', ds);\n      listen(draw, 'drawend', de);\n      listen(draw, 'drawabort', da);\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      expect(ds.called).to.be(true);\n      expect(de.called).to.be(true);\n      expect(da.called).to.be(false);\n      simulateEvent('pointermove', 20, 20);\n      expect(ds.callCount).to.be(1);\n      expect(de.callCount).to.be(1);\n      expect(da.callCount).to.be(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"triggers drawend event before inserting the feature","suites":["ol/interaction/Draw","drawing points"],"updatePoint":{"line":320,"column":59,"index":11258},"line":320,"code":"    it('triggers drawend event before inserting the feature', function () {\n      const receivedEvents = {\n        end: 0,\n        addfeature: 0\n      };\n      listen(draw, 'drawend', function () {\n        expect(receivedEvents.end).to.be(0);\n        expect(receivedEvents.addfeature).to.be(0);\n        ++receivedEvents.end;\n      });\n      source.on('addfeature', function () {\n        expect(receivedEvents.end).to.be(1);\n        expect(receivedEvents.addfeature).to.be(0);\n        receivedEvents.addfeature++;\n      });\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      simulateEvent('pointermove', 20, 20);\n      expect(receivedEvents.end).to.be(1);\n      expect(receivedEvents.addfeature).to.be(1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"works if finishDrawing is called when the sketch feature is not defined","suites":["ol/interaction/Draw","drawing points"],"updatePoint":{"line":342,"column":79,"index":12076},"line":342,"code":"    it('works if finishDrawing is called when the sketch feature is not defined', function () {\n      expect(function () {\n        draw.finishDrawing();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws multipoint on click","suites":["ol/interaction/Draw","drawing multipoints"],"updatePoint":{"line":357,"column":33,"index":12447},"line":357,"code":"    it('draws multipoint on click', function () {\n      simulateEvent('pointermove', 30, 15);\n      simulateEvent('pointerdown', 30, 15);\n      simulateEvent('pointerup', 30, 15);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(MultiPoint);\n      expect(geometry.getCoordinates()).to.eql([[30, -15]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"works if finishDrawing is called when the sketch feature is not defined","suites":["ol/interaction/Draw","drawing multipoints"],"updatePoint":{"line":367,"column":79,"index":12923},"line":367,"code":"    it('works if finishDrawing is called when the sketch feature is not defined', function () {\n      expect(function () {\n        draw.finishDrawing();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws linestring with clicks, finishing on last point","suites":["ol/interaction/Draw","drawing linestrings"],"updatePoint":{"line":382,"column":61,"index":13322},"line":382,"code":"    it('draws linestring with clicks, finishing on last point', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // finish on second point\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(LineString);\n      expect(geometry.getCoordinates()).to.eql([[10, -20], [30, -20]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"supports removeLastPoint while drawing","suites":["ol/interaction/Draw","drawing linestrings"],"updatePoint":{"line":402,"column":46,"index":14069},"line":402,"code":"    it('supports removeLastPoint while drawing', function () {\n      draw.removeLastPoint();\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 40, 30);\n      simulateEvent('pointerdown', 40, 30);\n      simulateEvent('pointerup', 40, 30);\n      simulateEvent('pointermove', 100, 100);\n      draw.removeLastPoint();\n\n      // click near the removed point\n      simulateEvent('pointermove', 39, 31);\n      simulateEvent('pointerdown', 38, 31);\n      simulateEvent('pointerup', 38, 31);\n      expect(source.getFeatures()).to.have.length(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"supports freehand drawing for linestrings","suites":["ol/interaction/Draw","drawing linestrings"],"updatePoint":{"line":423,"column":49,"index":14777},"line":423,"code":"    it('supports freehand drawing for linestrings', function () {\n      // freehand sequence\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20, true);\n      simulateEvent('pointermove', 20, 30, true);\n      simulateEvent('pointerdrag', 20, 30, true);\n      simulateEvent('pointermove', 20, 40, true);\n      simulateEvent('pointerdrag', 20, 40, true);\n      simulateEvent('pointerup', 20, 40, true);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(LineString);\n      expect(geometry.getCoordinates()).to.eql([[10, -20], [20, -30], [20, -40]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"allows freehand mode for part of the drawing","suites":["ol/interaction/Draw","drawing linestrings"],"updatePoint":{"line":438,"column":52,"index":15487},"line":438,"code":"    it('allows freehand mode for part of the drawing', function () {\n      // non-freehand\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      simulateEvent('pointermove', 20, 30);\n\n      // freehand\n      simulateEvent('pointermove', 20, 30, true);\n      simulateEvent('pointerdrag', 20, 30, true);\n      simulateEvent('pointermove', 30, 40, true);\n      simulateEvent('pointerdrag', 30, 40, true);\n      simulateEvent('pointermove', 40, 50, true);\n      simulateEvent('pointerdrag', 40, 50, true);\n\n      // non-freehand\n      simulateEvent('pointerup', 40, 50);\n      simulateEvent('pointermove', 50, 60);\n      simulateEvent('pointerdown', 50, 60);\n      simulateEvent('pointerup', 50, 60);\n      simulateEvent('pointermove', 60, 70);\n      simulateEvent('pointerdown', 60, 70);\n      simulateEvent('pointerup', 60, 70);\n\n      // finish\n      simulateEvent('pointerdown', 60, 70);\n      simulateEvent('pointerup', 60, 70);\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(LineString);\n      expect(geometry.getCoordinates()).to.eql([[10, -20], [20, -30], [30, -40], [40, -50], [50, -60], [60, -70]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"does not add a point with a significant drag","suites":["ol/interaction/Draw","drawing linestrings"],"updatePoint":{"line":469,"column":52,"index":16718},"line":469,"code":"    it('does not add a point with a significant drag', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // drag map\n      simulateEvent('pointermove', 15, 20);\n      simulateEvent('pointerdown', 15, 20);\n      simulateEvent('pointermove', 23, 20);\n      simulateEvent('pointerup', 23, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // finish on second point\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(LineString);\n      expect(geometry.getCoordinates()).to.eql([[10, -20], [30, -20]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"allows dragging of the vertex after dragVertexDelay","suites":["ol/interaction/Draw","drawing linestrings"],"updatePoint":{"line":495,"column":59,"index":17671},"line":495,"code":"    it('allows dragging of the vertex after dragVertexDelay', function (done) {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point, drag vertex\n      simulateEvent('pointermove', 15, 20);\n      simulateEvent('pointerdown', 15, 20);\n      setTimeout(function () {\n        simulateEvent('pointermove', 20, 10);\n        simulateEvent('pointerdrag', 20, 10);\n        simulateEvent('pointerup', 20, 10);\n        // third point\n        simulateEvent('pointermove', 30, 20);\n        simulateEvent('pointerdown', 30, 20);\n        simulateEvent('pointerup', 30, 20);\n\n        // finish on third point\n        simulateEvent('pointerdown', 30, 20);\n        simulateEvent('pointerup', 30, 20);\n        const features = source.getFeatures();\n        expect(features).to.have.length(1);\n        const geometry = features[0].getGeometry();\n        expect(geometry).to.be.a(LineString);\n        expect(geometry.getCoordinates()).to.eql([[10, -20], [20, -10], [30, -20]]);\n        done();\n      }, 600);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"triggers draw events","suites":["ol/interaction/Draw","drawing linestrings"],"updatePoint":{"line":524,"column":28,"index":18758},"line":524,"code":"    it('triggers draw events', function () {\n      const ds = sinon.spy();\n      const de = sinon.spy();\n      const da = sinon.spy();\n      listen(draw, 'drawstart', ds);\n      listen(draw, 'drawend', de);\n      listen(draw, 'drawabort', da);\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // finish on second point\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      simulateEvent('pointermove', 10, 20);\n      expect(ds.called).to.be(true);\n      expect(ds.callCount).to.be(1);\n      expect(de.called).to.be(true);\n      expect(de.callCount).to.be(1);\n      expect(da.called).to.be(false);\n      expect(da.callCount).to.be(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"works if finishDrawing is called when the sketch feature is not defined","suites":["ol/interaction/Draw","drawing linestrings"],"updatePoint":{"line":553,"column":79,"index":19752},"line":553,"code":"    it('works if finishDrawing is called when the sketch feature is not defined', function () {\n      expect(function () {\n        draw.finishDrawing();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"finishes draw sequence correctly","suites":["ol/interaction/Draw","drawing with a condition"],"updatePoint":{"line":570,"column":40,"index":20207},"line":570,"code":"    it('finishes draw sequence correctly', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20, true);\n      simulateEvent('pointerdown', 10, 20, true);\n      simulateEvent('pointerup', 10, 20, true);\n\n      // second point\n      simulateEvent('pointermove', 30, 20, true);\n      simulateEvent('pointerdown', 30, 20, true);\n      simulateEvent('pointerup', 30, 20, true);\n\n      // finish on second point\n      simulateEvent('pointerdown', 30, 20, true);\n      simulateEvent('pointerup', 30, 20, true);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(LineString);\n      expect(geometry.getCoordinates()).to.eql([[10, -20], [30, -20]]);\n\n      // without modifier, to be handled by the map's DragPan interaction\n      simulateEvent('pointermove', 20, 20);\n      simulateEvent('pointerdown', 20, 20);\n      simulateEvent('pointermove', 10, 30);\n      expect(draw.lastDragTime_).to.be(undefined);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:true for POINT type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":632,"column":49,"index":22641},"line":632,"code":"    it('calls finishCondition:true for POINT type', function () {\n      testFinishConditionTrue('Point', 1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:true for MULTI_POINT type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":635,"column":55,"index":22764},"line":635,"code":"    it('calls finishCondition:true for MULTI_POINT type', function () {\n      testFinishConditionTrue('MultiPoint', 1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:true for LINE_STRING type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":638,"column":55,"index":22892},"line":638,"code":"    it('calls finishCondition:true for LINE_STRING type', function () {\n      testFinishConditionTrue('LineString', 2);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:true for MULTI_LINE_STRING type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":641,"column":61,"index":23026},"line":641,"code":"    it('calls finishCondition:true for MULTI_LINE_STRING type', function () {\n      testFinishConditionTrue('MultiLineString', 2);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:true for CIRCLE type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":644,"column":50,"index":23154},"line":644,"code":"    it('calls finishCondition:true for CIRCLE type', function () {\n      testFinishConditionTrue('Circle', 2);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:true for POLYGON type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":647,"column":51,"index":23274},"line":647,"code":"    it('calls finishCondition:true for POLYGON type', function () {\n      testFinishConditionTrue('Polygon', 3);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:true for MULTI_POLYGON type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":650,"column":57,"index":23401},"line":650,"code":"    it('calls finishCondition:true for MULTI_POLYGON type', function () {\n      testFinishConditionTrue('MultiPolygon', 3);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:false for POINT type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":661,"column":50,"index":23894},"line":661,"code":"    it('calls finishCondition:false for POINT type', function () {\n      testFinishConditionFalse('Point', 1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:false for MULTI_POINT type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":664,"column":56,"index":24019},"line":664,"code":"    it('calls finishCondition:false for MULTI_POINT type', function () {\n      testFinishConditionFalse('MultiPoint', 1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:false for LINE_STRING type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":667,"column":56,"index":24149},"line":667,"code":"    it('calls finishCondition:false for LINE_STRING type', function () {\n      testFinishConditionFalse('LineString', 2);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:false for MULTI_LINE_STRING type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":670,"column":62,"index":24285},"line":670,"code":"    it('calls finishCondition:false for MULTI_LINE_STRING type', function () {\n      testFinishConditionFalse('MultiLineString', 2);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:false for CIRCLE type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":673,"column":51,"index":24415},"line":673,"code":"    it('calls finishCondition:false for CIRCLE type', function () {\n      testFinishConditionFalse('Circle', 2);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:false for POLYGON type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":676,"column":52,"index":24537},"line":676,"code":"    it('calls finishCondition:false for POLYGON type', function () {\n      testFinishConditionFalse('Polygon', 3);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"calls finishCondition:false for MULTI_POLYGON type","suites":["ol/interaction/Draw","finishCondition called for each type"],"updatePoint":{"line":679,"column":58,"index":24666},"line":679,"code":"    it('calls finishCondition:false for MULTI_POLYGON type', function () {\n      testFinishConditionFalse('MultiPolygon', 3);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws a linestring failing to finish it first, then finishes it","suites":["ol/interaction/Draw","drawing with a finishCondition"],"updatePoint":{"line":694,"column":71,"index":25147},"line":694,"code":"    it('draws a linestring failing to finish it first, then finishes it', function () {\n      let features;\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 40, 30);\n      simulateEvent('pointerdown', 40, 30);\n      simulateEvent('pointerup', 40, 30);\n\n      // try to finish on this point\n      simulateEvent('pointerdown', 40, 30);\n      simulateEvent('pointerup', 40, 30);\n      features = source.getFeatures();\n      expect(features).to.have.length(0);\n\n      // third point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      //  finish on this point\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      features = source.getFeatures();\n      expect(features).to.have.length(1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws multi with clicks, finishing on last point","suites":["ol/interaction/Draw","drawing multi-linestrings"],"updatePoint":{"line":734,"column":56,"index":26342},"line":734,"code":"    it('draws multi with clicks, finishing on last point', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // finish on second point\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(MultiLineString);\n      expect(geometry.getCoordinates()).to.eql([[[10, -20], [30, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"works if finishDrawing is called when the sketch feature is not defined","suites":["ol/interaction/Draw","drawing multi-linestrings"],"updatePoint":{"line":754,"column":79,"index":27129},"line":754,"code":"    it('works if finishDrawing is called when the sketch feature is not defined', function () {\n      expect(function () {\n        draw.finishDrawing();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws polygon with clicks, finishing on first point","suites":["ol/interaction/Draw","drawing polygons"],"updatePoint":{"line":774,"column":59,"index":27691},"line":774,"code":"    it('draws polygon with clicks, finishing on first point', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      isClosed(draw.sketchFeature_.getGeometry());\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      isClosed(draw.sketchFeature_.getGeometry());\n\n      // third point\n      simulateEvent('pointermove', 40, 10);\n      simulateEvent('pointerdown', 40, 10);\n      simulateEvent('pointerup', 40, 10);\n      isClosed(draw.sketchFeature_.getGeometry());\n\n      // finish on first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[10, -20], [30, -20], [40, -10], [10, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"supports removeLastPoint while drawing","suites":["ol/interaction/Draw","drawing polygons"],"updatePoint":{"line":803,"column":46,"index":28807},"line":803,"code":"    it('supports removeLastPoint while drawing', function () {\n      draw.removeLastPoint();\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 40, 30);\n      simulateEvent('pointerdown', 40, 30);\n      simulateEvent('pointerup', 40, 30);\n      simulateEvent('pointermove', 100, 100);\n      draw.removeLastPoint();\n\n      // click near the removed point\n      simulateEvent('pointermove', 39, 31);\n      simulateEvent('pointerdown', 39, 31);\n      simulateEvent('pointerup', 39, 31);\n      expect(source.getFeatures()).to.have.length(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"will tolerate removeLastPoint being called when no coordinates","suites":["ol/interaction/Draw","drawing polygons"],"updatePoint":{"line":824,"column":70,"index":29536},"line":824,"code":"    it('will tolerate removeLastPoint being called when no coordinates', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 40, 30);\n      simulateEvent('pointerdown', 40, 30);\n      simulateEvent('pointerup', 40, 30);\n      simulateEvent('pointermove', 100, 100);\n      expect(function () {\n        draw.removeLastPoint();\n        draw.removeLastPoint();\n        draw.removeLastPoint();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws polygon with clicks, finishing on last point","suites":["ol/interaction/Draw","drawing polygons"],"updatePoint":{"line":841,"column":58,"index":30126},"line":841,"code":"    it('draws polygon with clicks, finishing on last point', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // third point\n      simulateEvent('pointermove', 40, 10);\n      simulateEvent('pointerdown', 40, 10);\n      simulateEvent('pointerup', 40, 10);\n\n      // finish on last point\n      simulateEvent('pointerdown', 40, 10);\n      simulateEvent('pointerup', 40, 10);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[10, -20], [30, -20], [40, -10], [10, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"supports freehand drawing for polygons","suites":["ol/interaction/Draw","drawing polygons"],"updatePoint":{"line":866,"column":46,"index":31044},"line":866,"code":"    it('supports freehand drawing for polygons', function () {\n      // freehand sequence\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20, true);\n      simulateEvent('pointermove', 30, 20, true);\n      simulateEvent('pointerdrag', 30, 20, true);\n      simulateEvent('pointermove', 40, 10, true);\n      simulateEvent('pointerdrag', 40, 10, true);\n      simulateEvent('pointerup', 40, 10, true);\n\n      // finish on last point\n      simulateEvent('pointerdown', 40, 10);\n      simulateEvent('pointerup', 40, 10);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[10, -20], [30, -20], [40, -10], [10, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"triggers draw events","suites":["ol/interaction/Draw","drawing polygons"],"updatePoint":{"line":885,"column":28,"index":31857},"line":885,"code":"    it('triggers draw events', function () {\n      const ds = sinon.spy();\n      const de = sinon.spy();\n      const da = sinon.spy();\n      listen(draw, 'drawstart', ds);\n      listen(draw, 'drawend', de);\n      listen(draw, 'drawabort', da);\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // third point\n      simulateEvent('pointermove', 30, 10);\n      simulateEvent('pointerdown', 30, 10);\n      simulateEvent('pointerup', 30, 10);\n\n      // finish on first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      expect(ds.called).to.be(true);\n      expect(ds.callCount).to.be(1);\n      expect(de.called).to.be(true);\n      expect(de.callCount).to.be(1);\n      expect(da.called).to.be(false);\n      expect(da.callCount).to.be(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"works if finishDrawing is called when the sketch feature is not defined","suites":["ol/interaction/Draw","drawing polygons"],"updatePoint":{"line":919,"column":79,"index":33002},"line":919,"code":"    it('works if finishDrawing is called when the sketch feature is not defined', function () {\n      expect(function () {\n        draw.finishDrawing();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"starts tracing with first edge click, stops tracing with second edge click","suites":["ol/interaction/Draw","tracing polygons"],"updatePoint":{"line":935,"column":82,"index":33437},"line":935,"code":"    it('starts tracing with first edge click, stops tracing with second edge click', function () {\n      source.addFeatures([new Feature(new Polygon([[[0, -50], [100, -50], [100, -100], [0, -100], [0, -50]]]))]);\n\n      // first click adds a point\n      simulateEvent('pointermove', 50, 0);\n      simulateEvent('pointerdown', 50, 0);\n      simulateEvent('pointerup', 50, 0);\n      expect(draw.traceState_.active).to.be(false);\n      draw.shouldHandle_ = false;\n\n      // second click activates tracing (center of bottom edge)\n      simulateEvent('pointermove', 50, 50);\n      simulateEvent('pointerdown', 50, 50);\n      simulateEvent('pointerup', 50, 50);\n      expect(draw.traceState_.active).to.be(true);\n      expect(draw.traceState_.targetIndex).to.be(-1);\n      draw.shouldHandle_ = false;\n\n      // move to pick a target\n      simulateEvent('pointermove', 75, 10);\n      expect(draw.traceState_.active).to.be(true);\n      expect(draw.traceState_.targetIndex).to.be(0);\n      draw.shouldHandle_ = false;\n\n      // third click ends tracing (right half of top edge)\n      simulateEvent('pointermove', 75, 100);\n      simulateEvent('pointerdown', 75, 100);\n      simulateEvent('pointerup', 75, 100);\n      expect(draw.traceState_.active).to.be(false);\n      draw.shouldHandle_ = false;\n\n      // finish on first point\n      simulateEvent('pointermove', 50, 0);\n      simulateEvent('pointerdown', 50, 0);\n      simulateEvent('pointerup', 50, 0);\n      const features = source.getFeatures();\n      expect(features).to.have.length(2);\n      const geometry = features[1].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[50, 0], [50, -50], [100, -50],\n      // traced point\n      [100, -100],\n      // traced point\n      [75, -100], [50, 0]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws multi with clicks, finishing on first point","suites":["ol/interaction/Draw","drawing multi-polygons"],"updatePoint":{"line":990,"column":57,"index":35446},"line":990,"code":"    it('draws multi with clicks, finishing on first point', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // third point\n      simulateEvent('pointermove', 40, 10);\n      simulateEvent('pointerdown', 40, 10);\n      simulateEvent('pointerup', 40, 10);\n\n      // finish on first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(MultiPolygon);\n      const coordinates = geometry.getCoordinates();\n      expect(coordinates).to.have.length(1);\n      expect(coordinates[0]).to.eql([[[10, -20], [30, -20], [40, -10], [10, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws multi with clicks, finishing on last point","suites":["ol/interaction/Draw","drawing multi-polygons"],"updatePoint":{"line":1018,"column":56,"index":36511},"line":1018,"code":"    it('draws multi with clicks, finishing on last point', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // third point\n      simulateEvent('pointermove', 40, 10);\n      simulateEvent('pointerdown', 40, 10);\n      simulateEvent('pointerup', 40, 10);\n\n      // finish on last point\n      simulateEvent('pointerdown', 40, 10);\n      simulateEvent('pointerup', 40, 10);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(MultiPolygon);\n      const coordinates = geometry.getCoordinates();\n      expect(coordinates).to.have.length(1);\n      expect(coordinates[0]).to.eql([[[10, -20], [30, -20], [40, -10], [10, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"works if finishDrawing is called when the sketch feature is not defined","suites":["ol/interaction/Draw","drawing multi-polygons"],"updatePoint":{"line":1045,"column":79,"index":37554},"line":1045,"code":"    it('works if finishDrawing is called when the sketch feature is not defined', function () {\n      expect(function () {\n        draw.finishDrawing();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws circle with clicks, finishing on second point along x axis","suites":["ol/interaction/Draw","drawing circles"],"updatePoint":{"line":1060,"column":72,"index":37956},"line":1060,"code":"    it('draws circle with clicks, finishing on second point along x axis', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // finish on second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Circle);\n      expect(geometry.getCenter()).to.eql([10, -20]);\n      expect(geometry.getRadius()).to.eql(20);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws circle with clicks, finishing on second point along y axis","suites":["ol/interaction/Draw","drawing circles"],"updatePoint":{"line":1077,"column":72,"index":38645},"line":1077,"code":"    it('draws circle with clicks, finishing on second point along y axis', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // finish on second point\n      simulateEvent('pointermove', 10, 40);\n      simulateEvent('pointerdown', 10, 40);\n      simulateEvent('pointerup', 10, 40);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Circle);\n      expect(geometry.getCenter()).to.eql([10, -20]);\n      expect(geometry.getRadius()).to.eql(20);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws circle with clicks in a user projection, finishing on second point along x axis","suites":["ol/interaction/Draw","drawing circles"],"updatePoint":{"line":1094,"column":93,"index":39355},"line":1094,"code":"    it('draws circle with clicks in a user projection, finishing on second point along x axis', function () {\n      const userProjection = 'EPSG:3857';\n      setUserProjection(userProjection);\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // finish on second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Circle);\n      const viewProjection = map.getView().getProjection();\n      expect(geometry.getCenter()).to.eql(transform([10, -20], viewProjection, userProjection));\n      const radius = geometry.clone().transform(userProjection, viewProjection).getRadius();\n      expect(radius).to.roughlyEqual(20, 1e-9);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws circle with clicks in a user projection, finishing on second point along y axis","suites":["ol/interaction/Draw","drawing circles"],"updatePoint":{"line":1116,"column":93,"index":40346},"line":1116,"code":"    it('draws circle with clicks in a user projection, finishing on second point along y axis', function () {\n      const userProjection = 'EPSG:3857';\n      setUserProjection(userProjection);\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // finish on second point\n      simulateEvent('pointermove', 10, 40);\n      simulateEvent('pointerdown', 10, 40);\n      simulateEvent('pointerup', 10, 40);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Circle);\n      const viewProjection = map.getView().getProjection();\n      expect(geometry.getCenter()).to.eql(transform([10, -20], viewProjection, userProjection));\n      const radius = geometry.clone().transform(userProjection, viewProjection).getRadius();\n      expect(radius).to.roughlyEqual(20, 1e-9);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"supports freehand drawing for circles","suites":["ol/interaction/Draw","drawing circles"],"updatePoint":{"line":1138,"column":45,"index":41289},"line":1138,"code":"    it('supports freehand drawing for circles', function () {\n      draw.freehand_ = true;\n      draw.freehandCondition_ = always;\n\n      // no feature created when not moved\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      expect(source.getFeatures()).to.have.length(0);\n\n      // feature created when moved\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      expect(source.getFeatures()).to.have.length(1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"triggers draw events","suites":["ol/interaction/Draw","drawing circles"],"updatePoint":{"line":1155,"column":28,"index":41904},"line":1155,"code":"    it('triggers draw events', function () {\n      const ds = sinon.spy();\n      const de = sinon.spy();\n      const da = sinon.spy();\n      listen(draw, 'drawstart', ds);\n      listen(draw, 'drawend', de);\n      listen(draw, 'drawabort', da);\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // finish on second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      expect(ds.called).to.be(true);\n      expect(ds.callCount).to.be(1);\n      expect(de.called).to.be(true);\n      expect(de.callCount).to.be(1);\n      expect(da.called).to.be(false);\n      expect(da.callCount).to.be(0);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"aborts the current drawing","suites":["ol/interaction/Draw","#abortDrawing()"],"updatePoint":{"line":1189,"column":34,"index":42918},"line":1189,"code":"    it('aborts the current drawing', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      draw.abortDrawing();\n      expect(source.getFeatures()).to.have.length(0);\n      expect(draw.sketchFeature_).to.be(null);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"triggers draw events","suites":["ol/interaction/Draw","#abortDrawing()"],"updatePoint":{"line":1203,"column":28,"index":43403},"line":1203,"code":"    it('triggers draw events', function () {\n      const ds = sinon.spy();\n      const de = sinon.spy();\n      const da = sinon.spy();\n      listen(draw, 'drawstart', ds);\n      listen(draw, 'drawend', de);\n      listen(draw, 'drawabort', da);\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      draw.abortDrawing();\n      expect(ds.called).to.be(true);\n      expect(ds.callCount).to.be(1);\n      expect(de.called).to.be(false);\n      expect(de.callCount).to.be(0);\n      expect(da.called).to.be(true);\n      expect(da.callCount).to.be(1);\n\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n\n      // second point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n      draw.removeLastPoint();\n      draw.removeLastPoint();\n      draw.removeLastPoint();\n      expect(ds.called).to.be(true);\n      expect(ds.callCount).to.be(2);\n      expect(de.called).to.be(false);\n      expect(de.callCount).to.be(0);\n      expect(da.called).to.be(true);\n      expect(da.callCount).to.be(2);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"works if finishDrawing is called when the sketch feature is not defined","suites":["ol/interaction/Draw","#abortDrawing()"],"updatePoint":{"line":1247,"column":79,"index":44879},"line":1247,"code":"    it('works if finishDrawing is called when the sketch feature is not defined', function () {\n      expect(function () {\n        draw.finishDrawing();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"unsets the map from the feature overlay","suites":["ol/interaction/Draw","#setActive()","#setActive(false)"],"updatePoint":{"line":1272,"column":49,"index":45643},"line":1272,"code":"      it('unsets the map from the feature overlay', function () {\n        const spy = sinon.spy(interaction.overlay_, 'setMap');\n        interaction.setActive(false);\n        expect(spy.getCall(0).args[0]).to.be(null);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"aborts the drawing","suites":["ol/interaction/Draw","#setActive()","#setActive(false)"],"updatePoint":{"line":1277,"column":28,"index":45851},"line":1277,"code":"      it('aborts the drawing', function () {\n        interaction.setActive(false);\n        expect(interaction.sketchFeature_).to.be(null);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"fires change:active","suites":["ol/interaction/Draw","#setActive()","#setActive(false)"],"updatePoint":{"line":1281,"column":29,"index":46001},"line":1281,"code":"      it('fires change:active', function () {\n        const spy = sinon.spy(interaction.overlay_, 'setMap');\n        const listenerSpy = sinon.spy(function () {\n          // test that the interaction's change:active listener is called first\n          expect(spy.getCall(0).args[0]).to.be(null);\n        });\n        interaction.on('change:active', listenerSpy);\n        interaction.setActive(false);\n        expect(listenerSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"sets the map into the feature overlay","suites":["ol/interaction/Draw","#setActive()","#setActive(true)"],"updatePoint":{"line":1296,"column":47,"index":46610},"line":1296,"code":"      it('sets the map into the feature overlay', function () {\n        const spy = sinon.spy(interaction.overlay_, 'setMap');\n        interaction.setActive(true);\n        expect(spy.getCall(0).args[0]).to.be(map);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"fires change:active","suites":["ol/interaction/Draw","#setActive()","#setActive(true)"],"updatePoint":{"line":1301,"column":29,"index":46817},"line":1301,"code":"      it('fires change:active', function () {\n        const spy = sinon.spy(interaction.overlay_, 'setMap');\n        const listenerSpy = sinon.spy(function () {\n          // test that the interaction's change:active listener is called first\n          expect(spy.getCall(0).args[0]).to.be(map);\n        });\n        interaction.on('change:active', listenerSpy);\n        interaction.setActive(true);\n        expect(listenerSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"unsets the map from the feature overlay","suites":["ol/interaction/Draw","#setMap()","#setMap(null)","#setMap(null) when interaction is active"],"updatePoint":{"line":1334,"column":51,"index":48025},"line":1334,"code":"        it('unsets the map from the feature overlay', function () {\n          const spy = sinon.spy(interaction.overlay_, 'setMap');\n          interaction.setMap(null);\n          expect(spy.getCall(0).args[0]).to.be(null);\n        });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"aborts the drawing","suites":["ol/interaction/Draw","#setMap()","#setMap(null)","#setMap(null) when interaction is active"],"updatePoint":{"line":1339,"column":30,"index":48239},"line":1339,"code":"        it('aborts the drawing', function () {\n          interaction.setMap(null);\n          expect(interaction.sketchFeature_).to.be(null);\n        });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"clears the sketch features","suites":["ol/interaction/Draw","#setMap()","#setMap(null) when no drawing is in progress"],"updatePoint":{"line":1355,"column":36,"index":48817},"line":1355,"code":"      it('clears the sketch features', function () {\n        interaction.setMap(null);\n        expect(interaction.sketchFeature_).to.be(null);\n        expect(interaction.sketchPoint_).to.be(null);\n        expect(interaction.sketchLine_).to.be(null);\n      });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"sets the map into the feature overlay","suites":["ol/interaction/Draw","#setMap()","#setMap(map)","#setMap(map) when interaction is active"],"updatePoint":{"line":1364,"column":49,"index":49213},"line":1364,"code":"        it('sets the map into the feature overlay', function () {\n          const spy = sinon.spy(interaction.overlay_, 'setMap');\n          interaction.setMap(map);\n          expect(spy.getCall(0).args[0]).to.be(map);\n        });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"does not set the map into the feature overlay","suites":["ol/interaction/Draw","#setMap()","#setMap(map)","#setMap(map) when interaction is not active"],"updatePoint":{"line":1371,"column":57,"index":49538},"line":1371,"code":"        it('does not set the map into the feature overlay', function () {\n          interaction.setActive(false);\n          const spy = sinon.spy(interaction.overlay_, 'setMap');\n          interaction.setMap(map);\n          expect(spy.getCall(0).args[0]).to.be(null);\n        });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"returns the feature overlay layer","suites":["ol/interaction/Draw","#getOverlay"],"updatePoint":{"line":1381,"column":41,"index":49866},"line":1381,"code":"    it('returns the feature overlay layer', function () {\n      const draw = new Draw({\n        type: 'Point'\n      });\n      expect(draw.getOverlay()).to.eql(draw.overlay_);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"creates a regular polygon in Circle mode","suites":["ol/interaction/Draw","createRegularPolygon"],"updatePoint":{"line":1389,"column":48,"index":50111},"line":1389,"code":"    it('creates a regular polygon in Circle mode', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'Circle',\n        geometryFunction: createRegularPolygon(4)\n      });\n      map.addInteraction(draw);\n\n      // first point\n      simulateEvent('pointermove', 0, 0);\n      simulateEvent('pointerdown', 0, 0);\n      simulateEvent('pointerup', 0, 0);\n\n      // finish on second point\n      simulateEvent('pointermove', 20, 20);\n      simulateEvent('pointerdown', 20, 20);\n      simulateEvent('pointerup', 20, 20);\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      const coordinates = geometry.getCoordinates();\n      expect(coordinates[0].length).to.eql(5);\n      expect(coordinates[0][0][0]).to.roughlyEqual(20, 1e-9);\n      expect(coordinates[0][0][1]).to.roughlyEqual(-20, 1e-9);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"creates a regular polygon at specified angle","suites":["ol/interaction/Draw","createRegularPolygon"],"updatePoint":{"line":1414,"column":52,"index":51028},"line":1414,"code":"    it('creates a regular polygon at specified angle', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'Circle',\n        geometryFunction: createRegularPolygon(4, Math.PI / 4)\n      });\n      map.addInteraction(draw);\n\n      // first point\n      simulateEvent('pointermove', 0, 0);\n      simulateEvent('pointerdown', 0, 0);\n      simulateEvent('pointerup', 0, 0);\n\n      // finish on second point\n      simulateEvent('pointermove', 20, 20);\n      simulateEvent('pointerdown', 20, 20);\n      simulateEvent('pointerup', 20, 20);\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      const coordinates = geometry.getCoordinates();\n      expect(coordinates[0].length).to.eql(5);\n      expect(coordinates[0][0][0]).to.roughlyEqual(20, 1e-9);\n      expect(coordinates[0][0][1]).to.roughlyEqual(20, 1e-9);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"creates a regular polygon at specified 0 angle","suites":["ol/interaction/Draw","createRegularPolygon"],"updatePoint":{"line":1439,"column":54,"index":51959},"line":1439,"code":"    it('creates a regular polygon at specified 0 angle', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'Circle',\n        geometryFunction: createRegularPolygon(4, 0)\n      });\n      map.addInteraction(draw);\n\n      // first point\n      simulateEvent('pointermove', 0, 0);\n      simulateEvent('pointerdown', 0, 0);\n      simulateEvent('pointerup', 0, 0);\n\n      // finish on second point\n      simulateEvent('pointermove', 20, 20);\n      simulateEvent('pointerdown', 20, 20);\n      simulateEvent('pointerup', 20, 20);\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      const coordinates = geometry.getCoordinates();\n      expect(coordinates[0].length).to.eql(5);\n      expect(coordinates[0][0][0]).to.roughlyEqual(28.2842712474619, 1e-9);\n      expect(coordinates[0][0][1]).to.roughlyEqual(0, 1e-9);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"creates a regular polygon in Circle mode in a user projection","suites":["ol/interaction/Draw","createRegularPolygon"],"updatePoint":{"line":1464,"column":69,"index":52908},"line":1464,"code":"    it('creates a regular polygon in Circle mode in a user projection', function () {\n      const userProjection = 'EPSG:3857';\n      setUserProjection(userProjection);\n      const draw = new Draw({\n        source: source,\n        type: 'Circle',\n        geometryFunction: createRegularPolygon(4, Math.PI / 4)\n      });\n      map.addInteraction(draw);\n\n      // first point\n      simulateEvent('pointermove', 0, 0);\n      simulateEvent('pointerdown', 0, 0);\n      simulateEvent('pointerup', 0, 0);\n\n      // finish on second point\n      simulateEvent('pointermove', 20, 20);\n      simulateEvent('pointerdown', 20, 20);\n      simulateEvent('pointerup', 20, 20);\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      const coordinates = geometry.getCoordinates();\n      expect(coordinates[0].length).to.eql(5);\n      const viewProjection = map.getView().getProjection();\n      const coordinate = transform([20, 20], viewProjection, userProjection);\n      expect(coordinates[0][0][0]).to.roughlyEqual(coordinate[0], 1e-9);\n      expect(coordinates[0][0][1]).to.roughlyEqual(coordinate[1], 1e-9);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"sketch start point always matches the mouse point","suites":["ol/interaction/Draw","createRegularPolygon"],"updatePoint":{"line":1493,"column":57,"index":54085},"line":1493,"code":"    it('sketch start point always matches the mouse point', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'Circle',\n        geometryFunction: createRegularPolygon(3)\n      });\n      map.addInteraction(draw);\n\n      // regular polygon center point\n      simulateEvent('pointermove', 60, 60);\n      simulateEvent('pointerdown', 60, 60);\n      simulateEvent('pointerup', 60, 60);\n\n      // move to first quadrant\n      simulateEvent('pointermove', 79, 80);\n      let event = simulateEvent('pointermove', 80, 80);\n      let coordinate = event.coordinate;\n      const firstQuadrantCoordinate = draw.sketchFeature_.getGeometry().getFirstCoordinate();\n      expect(firstQuadrantCoordinate[0]).to.roughlyEqual(coordinate[0], 1e-9);\n      expect(firstQuadrantCoordinate[1]).to.roughlyEqual(coordinate[1], 1e-9);\n\n      // move to second quadrant\n      simulateEvent('pointermove', 41, 80);\n      event = simulateEvent('pointermove', 40, 80);\n      coordinate = event.coordinate;\n      const secondQuadrantCoordinate = draw.sketchFeature_.getGeometry().getFirstCoordinate();\n      expect(secondQuadrantCoordinate[0]).to.roughlyEqual(coordinate[0], 1e-9);\n      expect(secondQuadrantCoordinate[1]).to.roughlyEqual(coordinate[1], 1e-9);\n\n      // move to third quadrant\n      simulateEvent('pointermove', 40, 41);\n      event = simulateEvent('pointermove', 40, 40);\n      coordinate = event.coordinate;\n      const thirdQuadrantCoordinate = draw.sketchFeature_.getGeometry().getFirstCoordinate();\n      expect(thirdQuadrantCoordinate[0]).to.roughlyEqual(coordinate[0], 1e-9);\n      expect(thirdQuadrantCoordinate[1]).to.roughlyEqual(coordinate[1], 1e-9);\n\n      // move to fourth quadrant\n      simulateEvent('pointermove', 79, 40);\n      event = simulateEvent('pointermove', 80, 40);\n      coordinate = event.coordinate;\n      const fourthQuadrantCoordinate = draw.sketchFeature_.getGeometry().getFirstCoordinate();\n      expect(fourthQuadrantCoordinate[0]).to.roughlyEqual(coordinate[0], 1e-9);\n      expect(fourthQuadrantCoordinate[1]).to.roughlyEqual(coordinate[1], 1e-9);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"creates a box-shaped polygon in Circle mode","suites":["ol/interaction/Draw","createBox"],"updatePoint":{"line":1540,"column":51,"index":56232},"line":1540,"code":"    it('creates a box-shaped polygon in Circle mode', function () {\n      const draw = new Draw({\n        source: source,\n        type: 'Circle',\n        geometryFunction: createBox()\n      });\n      map.addInteraction(draw);\n\n      // first point\n      simulateEvent('pointermove', 0, 0);\n      simulateEvent('pointerdown', 0, 0);\n      simulateEvent('pointerup', 0, 0);\n\n      // finish on second point\n      simulateEvent('pointermove', 20, 20);\n      simulateEvent('pointerdown', 20, 20);\n      simulateEvent('pointerup', 20, 20);\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      const coordinates = geometry.getCoordinates();\n      expect(coordinates[0]).to.have.length(5);\n      expect(geometry.getArea()).to.equal(400);\n      expect(geometry.getExtent()).to.eql([0, -20, 20, 0]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"creates a box-shaped polygon in Circle mode in a user projection","suites":["ol/interaction/Draw","createBox"],"updatePoint":{"line":1565,"column":72,"index":57141},"line":1565,"code":"    it('creates a box-shaped polygon in Circle mode in a user projection', function () {\n      proj4.defs('ESRI:54009', '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs');\n      register(proj4);\n      const userProjection = 'ESRI:54009';\n      setUserProjection(userProjection);\n      const draw = new Draw({\n        source: source,\n        type: 'Circle',\n        geometryFunction: createBox()\n      });\n      map.addInteraction(draw);\n\n      // first point\n      simulateEvent('pointermove', 0, 0);\n      simulateEvent('pointerdown', 0, 0);\n      simulateEvent('pointerup', 0, 0);\n\n      // finish on second point\n      simulateEvent('pointermove', 20, 20);\n      simulateEvent('pointerdown', 20, 20);\n      simulateEvent('pointerup', 20, 20);\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      const coordinates = geometry.getCoordinates();\n      expect(coordinates[0]).to.have.length(5);\n      const viewProjection = map.getView().getProjection();\n      const area = geometry.clone().transform(userProjection, viewProjection).getArea();\n      expect(area).to.roughlyEqual(400, 1e-9);\n      const extent = geometry.clone().transform(userProjection, viewProjection).getExtent();\n      expect(extent[0]).to.roughlyEqual(0, 1e-9);\n      expect(extent[1]).to.roughlyEqual(-20, 1e-9);\n      expect(extent[2]).to.roughlyEqual(20, 1e-9);\n      expect(extent[3]).to.roughlyEqual(0, 1e-9);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"sets the initial state","suites":["ol/interaction/Draw","extend an existing feature"],"updatePoint":{"line":1612,"column":30,"index":58916},"line":1612,"code":"    it('sets the initial state', function () {\n      draw.extend(feature);\n      expect(draw.sketchCoords_).to.have.length(4);\n      expect(draw.sketchCoords_).to.eql([[0, 0], [1, 1], [2, 0], [2, 0]]);\n      expect(draw.finishCoordinate_).to.eql([2, 0]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"dispatches a drawstart event","suites":["ol/interaction/Draw","extend an existing feature"],"updatePoint":{"line":1618,"column":36,"index":59185},"line":1618,"code":"    it('dispatches a drawstart event', function () {\n      const spy = sinon.spy();\n      listen(draw, 'drawstart', spy);\n      draw.extend(feature);\n      expect(spy.callCount).to.be(1);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"draws polygon with clicks, adds coordinates to drawing, finishing on first point","suites":["ol/interaction/Draw","append coordinates when drawing a Polygon feature"],"updatePoint":{"line":1643,"column":88,"index":60049},"line":1643,"code":"    it('draws polygon with clicks, adds coordinates to drawing, finishing on first point', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      isClosed(draw.sketchFeature_.getGeometry());\n\n      // add coordinates\n      draw.appendCoordinates(coordinates);\n\n      // finish on first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[10, -20], [0, 0], [1, 1], [2, 0], [0, 3], [3, 2], [4, 4], [10, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"adds coordinates to empty drawing","suites":["ol/interaction/Draw","append coordinates when drawing a Polygon feature"],"updatePoint":{"line":1663,"column":41,"index":60848},"line":1663,"code":"    it('adds coordinates to empty drawing', function () {\n      // first point\n      simulateEvent('pointermove', 0, 0);\n      simulateEvent('pointerdown', 0, 0);\n      simulateEvent('pointerup', 0, 0);\n      draw.removeLastPoint();\n      draw.appendCoordinates(coordinates);\n      isClosed(draw.sketchFeature_.getGeometry());\n\n      // finish drawing\n      simulateEvent('pointerdown', 0, 0);\n      simulateEvent('pointerup', 0, 0);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[0, 0], [1, 1], [2, 0], [0, 3], [3, 2], [4, 4], [0, 0]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"keeps updating the sketch feature after appending coordinates","suites":["ol/interaction/Draw","append coordinates when drawing a Polygon feature"],"updatePoint":{"line":1681,"column":69,"index":61604},"line":1681,"code":"    it('keeps updating the sketch feature after appending coordinates', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      isClosed(draw.sketchFeature_.getGeometry());\n\n      // add coordinates\n      draw.appendCoordinates(coordinates);\n\n      // add another point\n      simulateEvent('pointermove', 30, 20);\n      simulateEvent('pointerdown', 30, 20);\n      simulateEvent('pointerup', 30, 20);\n\n      // sketchGeom should have a complete ring, with a double coordinate for cursor\n      const sketchGeom = draw.sketchFeature_.getGeometry();\n      expect(sketchGeom.getCoordinates()).to.eql([[[10, -20], [0, 0], [1, 1], [2, 0], [0, 3], [3, 2], [4, 4], [30, -20], [30, -20], [10, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"keeps updating the sketch feature after multiple appendiges","suites":["ol/interaction/Draw","append coordinates when drawing a Polygon feature"],"updatePoint":{"line":1700,"column":67,"index":62417},"line":1700,"code":"    it('keeps updating the sketch feature after multiple appendiges', function () {\n      // first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      isClosed(draw.sketchFeature_.getGeometry());\n\n      // add coordinates\n      draw.appendCoordinates(coordinates);\n\n      // another point\n      simulateEvent('pointermove', 100, 100);\n      simulateEvent('pointerdown', 100, 100);\n      simulateEvent('pointerup', 100, 100);\n\n      // add another array of coordinates\n      draw.appendCoordinates(coordinates2);\n\n      // finish on first point\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerup', 10, 20);\n      const features = source.getFeatures();\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[10, -20], [0, 0], [1, 1], [2, 0], [0, 3], [3, 2], [4, 4], [100, -100], [10, 10], [11, 11], [12, 10], [10, 13], [13, 12], [14, 14], [10, -20]]]);\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XY layout for POINT type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1794,"column":41,"index":65686},"line":1794,"code":"    it('respects XY layout for POINT type', function () {\n      drawPoint('XY');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([10, -20]);\n      expect(geometry.getLayout()).to.eql('XY');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYZ layout for POINT type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1801,"column":42,"index":65979},"line":1801,"code":"    it('respects XYZ layout for POINT type', function () {\n      drawPoint('XYZ');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([10, -20, 0]);\n      expect(geometry.getLayout()).to.eql('XYZ');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYM layout for POINT type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1808,"column":42,"index":66277},"line":1808,"code":"    it('respects XYM layout for POINT type', function () {\n      drawPoint('XYM');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([10, -20, 0]);\n      expect(geometry.getLayout()).to.eql('XYM');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYZM layout for POINT type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1815,"column":43,"index":66576},"line":1815,"code":"    it('respects XYZM layout for POINT type', function () {\n      drawPoint('XYZM');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([10, -20, 0, 0]);\n      expect(geometry.getLayout()).to.eql('XYZM');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XY layout for LINESTRING type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1822,"column":46,"index":66883},"line":1822,"code":"    it('respects XY layout for LINESTRING type', function () {\n      drawLineString('XY');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([[10, -20], [30, -20]]);\n      expect(geometry.getLayout()).to.eql('XY');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYZ layout for LINESTRING type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1829,"column":47,"index":67199},"line":1829,"code":"    it('respects XYZ layout for LINESTRING type', function () {\n      drawLineString('XYZ');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([[10, -20, 0], [30, -20, 0]]);\n      expect(geometry.getLayout()).to.eql('XYZ');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYM layout for LINESTRING type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1836,"column":47,"index":67523},"line":1836,"code":"    it('respects XYM layout for LINESTRING type', function () {\n      drawLineString('XYM');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([[10, -20, 0], [30, -20, 0]]);\n      expect(geometry.getLayout()).to.eql('XYM');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYZM layout for LINESTRING type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1843,"column":48,"index":67848},"line":1843,"code":"    it('respects XYZM layout for LINESTRING type', function () {\n      drawLineString('XYZM');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([[10, -20, 0, 0], [30, -20, 0, 0]]);\n      expect(geometry.getLayout()).to.eql('XYZM');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XY layout for POLYGON type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1850,"column":43,"index":68176},"line":1850,"code":"    it('respects XY layout for POLYGON type', function () {\n      drawPolygon('XY');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([[[10, -20], [30, -20], [40, -10], [10, -20]]]);\n      expect(geometry.getLayout()).to.eql('XY');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYZ layout for POLYGON type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1857,"column":44,"index":68510},"line":1857,"code":"    it('respects XYZ layout for POLYGON type', function () {\n      drawPolygon('XYZ');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([[[10, -20, 0], [30, -20, 0], [40, -10, 0], [10, -20, 0]]]);\n      expect(geometry.getLayout()).to.eql('XYZ');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYM layout for POLYGON type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1864,"column":44,"index":68858},"line":1864,"code":"    it('respects XYM layout for POLYGON type', function () {\n      drawPolygon('XYM');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([[[10, -20, 0], [30, -20, 0], [40, -10, 0], [10, -20, 0]]]);\n      expect(geometry.getLayout()).to.eql('XYM');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYZM layout for POLYGON type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1871,"column":45,"index":69207},"line":1871,"code":"    it('respects XYZM layout for POLYGON type', function () {\n      drawPolygon('XYZM');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCoordinates()).to.eql([[[10, -20, 0, 0], [30, -20, 0, 0], [40, -10, 0, 0], [10, -20, 0, 0]]]);\n      expect(geometry.getLayout()).to.eql('XYZM');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XY layout for CIRCLE type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1878,"column":42,"index":69567},"line":1878,"code":"    it('respects XY layout for CIRCLE type', function () {\n      drawCircle('XY');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCenter()).to.eql([10, -20]);\n      expect(geometry.getRadius()).to.eql(20);\n      expect(geometry.getLayout()).to.eql('XY');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYZ layout for CIRCLE type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1886,"column":43,"index":69904},"line":1886,"code":"    it('respects XYZ layout for CIRCLE type', function () {\n      drawCircle('XYZ');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCenter()).to.eql([10, -20, 0]);\n      expect(geometry.getRadius()).to.eql(20);\n      expect(geometry.getLayout()).to.eql('XYZ');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYM layout for CIRCLE type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1894,"column":43,"index":70246},"line":1894,"code":"    it('respects XYM layout for CIRCLE type', function () {\n      drawCircle('XYM');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCenter()).to.eql([10, -20, 0]);\n      expect(geometry.getRadius()).to.eql(20);\n      expect(geometry.getLayout()).to.eql('XYM');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"respects XYZM layout for CIRCLE type","suites":["ol/interaction/Draw","drawing with geometryLayout"],"updatePoint":{"line":1902,"column":44,"index":70589},"line":1902,"code":"    it('respects XYZM layout for CIRCLE type', function () {\n      drawCircle('XYZM');\n      const features = source.getFeatures();\n      const geometry = features[0].getGeometry();\n      expect(geometry.getCenter()).to.eql([10, -20, 0, 0]);\n      expect(geometry.getRadius()).to.eql(20);\n      expect(geometry.getLayout()).to.eql('XYZM');\n    });","file":"browser/spec/ol/interaction/Draw.test.js","skipped":false,"dir":"test"},{"name":"can be configured with an extent","suites":["ol.interaction.Extent","Constructor"],"updatePoint":{"line":60,"column":40,"index":2150},"line":60,"code":"    it('can be configured with an extent', function () {\n      expect(function () {\n        new ExtentInteraction({\n          extent: [-10, -10, 10, 10]\n        });\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/extent.test.js","skipped":false,"dir":"test"},{"name":"snap to vertex works","suites":["ol.interaction.Extent","snap to vertex"],"updatePoint":{"line":69,"column":28,"index":2394},"line":69,"code":"    it('snap to vertex works', function () {\n      interaction.setExtent([-50, -50, 50, 50]);\n      expect(interaction.snapToVertex_([230, 40], map)).to.eql([50, 50]);\n      expect(interaction.snapToVertex_([231, 41], map)).to.eql([50, 50]);\n    });","file":"browser/spec/ol/interaction/extent.test.js","skipped":false,"dir":"test"},{"name":"snap to edge works","suites":["ol.interaction.Extent","snap to vertex"],"updatePoint":{"line":74,"column":26,"index":2642},"line":74,"code":"    it('snap to edge works', function () {\n      interaction.setExtent([-50, -50, 50, 50]);\n      expect(interaction.snapToVertex_([230, 90], map)).to.eql([50, 0]);\n      expect(interaction.snapToVertex_([230, 89], map)).to.eql([50, 1]);\n      expect(interaction.snapToVertex_([231, 90], map)).to.eql([50, 0]);\n    });","file":"browser/spec/ol/interaction/extent.test.js","skipped":false,"dir":"test"},{"name":"drawing extent works","suites":["ol.interaction.Extent","draw extent"],"updatePoint":{"line":82,"column":28,"index":3009},"line":82,"code":"    it('drawing extent works', function () {\n      simulateEvent('pointerdown', -50, -50, false, 0);\n      simulateEvent('pointerdrag', 50, 50, false, 0);\n      simulateEvent('pointerup', 50, 50, false, 0);\n      expect(interaction.getExtent()).to.eql([-50, -50, 50, 50]);\n    });","file":"browser/spec/ol/interaction/extent.test.js","skipped":false,"dir":"test"},{"name":"clicking off extent nulls extent","suites":["ol.interaction.Extent","draw extent"],"updatePoint":{"line":88,"column":40,"index":3302},"line":88,"code":"    it('clicking off extent nulls extent', function () {\n      interaction.setExtent([-50, -50, 50, 50]);\n      simulateEvent('pointerdown', -10, -10, false, 0);\n      simulateEvent('pointerup', -10, -10, false, 0);\n      expect(interaction.getExtent()).to.equal(null);\n    });","file":"browser/spec/ol/interaction/extent.test.js","skipped":false,"dir":"test"},{"name":"clicking on extent does not null extent","suites":["ol.interaction.Extent","draw extent"],"updatePoint":{"line":94,"column":47,"index":3587},"line":94,"code":"    it('clicking on extent does not null extent', function () {\n      interaction.setExtent([-50, -50, 50, 50]);\n      simulateEvent('pointerdown', 50, 50, false, 0);\n      simulateEvent('pointerup', 50, 50, false, 0);\n      expect(interaction.getExtent()).to.eql([-50, -50, 50, 50]);\n    });","file":"browser/spec/ol/interaction/extent.test.js","skipped":false,"dir":"test"},{"name":"snap and drag vertex works","suites":["ol.interaction.Extent","draw extent"],"updatePoint":{"line":100,"column":34,"index":3867},"line":100,"code":"    it('snap and drag vertex works', function () {\n      interaction.setExtent([-50, -50, 50, 50]);\n      simulateEvent('pointerdown', 51, 49, false, 0);\n      simulateEvent('pointerdrag', -70, -40, false, 0);\n      simulateEvent('pointerup', -70, -40, false, 0);\n      expect(interaction.getExtent()).to.eql([-70, -50, -50, -40]);\n    });","file":"browser/spec/ol/interaction/extent.test.js","skipped":false,"dir":"test"},{"name":"snap and drag edge works","suites":["ol.interaction.Extent","draw extent"],"updatePoint":{"line":107,"column":32,"index":4205},"line":107,"code":"    it('snap and drag edge works', function () {\n      interaction.setExtent([-50, -50, 50, 50]);\n      simulateEvent('pointerdown', 51, 5, false, 0);\n      simulateEvent('pointerdrag', 20, -30, false, 0);\n      simulateEvent('pointerup', 20, -30, false, 0);\n      expect(interaction.getExtent()).to.eql([-50, -50, 20, 50]);\n    });","file":"browser/spec/ol/interaction/extent.test.js","skipped":false,"dir":"test"},{"name":"creates a new interaction","suites":["ol.interaction.Interaction","constructor"],"updatePoint":{"line":12,"column":33,"index":589},"line":12,"code":"    it('creates a new interaction', function () {\n      expect(interaction).to.be.a(Interaction);\n      expect(interaction).to.be.a(EventTarget);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"creates an active interaction","suites":["ol.interaction.Interaction","constructor"],"updatePoint":{"line":16,"column":37,"index":747},"line":16,"code":"    it('creates an active interaction', function () {\n      expect(interaction.getActive()).to.be(true);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"retrieves the associated map","suites":["ol.interaction.Interaction","#getMap()"],"updatePoint":{"line":21,"column":36,"index":903},"line":21,"code":"    it('retrieves the associated map', function () {\n      const map = new Map({});\n      const interaction = new Interaction({});\n      interaction.setMap(map);\n      expect(interaction.getMap()).to.be(map);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"returns null if no map","suites":["ol.interaction.Interaction","#getMap()"],"updatePoint":{"line":27,"column":30,"index":1114},"line":27,"code":"    it('returns null if no map', function () {\n      const interaction = new Interaction({});\n      expect(interaction.getMap()).to.be(null);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"allows a map to be set","suites":["ol.interaction.Interaction","#setMap()"],"updatePoint":{"line":33,"column":30,"index":1308},"line":33,"code":"    it('allows a map to be set', function () {\n      const map = new Map({});\n      const interaction = new Interaction({});\n      interaction.setMap(map);\n      expect(interaction.getMap()).to.be(map);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"accepts null","suites":["ol.interaction.Interaction","#setMap()"],"updatePoint":{"line":39,"column":20,"index":1509},"line":39,"code":"    it('accepts null', function () {\n      const interaction = new Interaction({});\n      interaction.setMap(null);\n      expect(interaction.getMap()).to.be(null);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"has a default event handler","suites":["ol.interaction.Interaction","#handleEvent()"],"updatePoint":{"line":54,"column":35,"index":1925},"line":54,"code":"    it('has a default event handler', function () {\n      const interaction = new Interaction({});\n      expect(interaction.handleEvent()).to.be(true);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"allows event handler overrides via options","suites":["ol.interaction.Interaction","#handleEvent()"],"updatePoint":{"line":58,"column":50,"index":2100},"line":58,"code":"    it('allows event handler overrides via options', function () {\n      const interaction = new Interaction({\n        handleEvent: FALSE\n      });\n      expect(interaction.handleEvent()).to.be(false);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"allows event handler overrides via class extension","suites":["ol.interaction.Interaction","#handleEvent()"],"updatePoint":{"line":64,"column":58,"index":2318},"line":64,"code":"    it('allows event handler overrides via class extension', function () {\n      const interaction = new MockInteraction({});\n      expect(interaction.handleEvent()).to.be(false);\n    });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"works with a user projection set","suites":["zoomByDelta - useGeographic"],"updatePoint":{"line":73,"column":38,"index":2607},"line":73,"code":"  it('works with a user projection set', () => {\n    const view = new View({\n      center: [0, 0],\n      zoom: 0\n    });\n    const spy = sinon.spy(view, 'animate');\n    const anchor = [90, 45];\n    const duration = 10;\n    zoomByDelta(view, 1, anchor, duration);\n    expect(spy.callCount).to.be(1);\n    const options = spy.getCall(0).args[0];\n    expect(options.anchor).to.be(anchor);\n  });","file":"browser/spec/ol/interaction/interaction.test.js","skipped":false,"dir":"test"},{"name":"pans on arrow keys","suites":["ol.interaction.KeyboardPan","handleEvent()"],"updatePoint":{"line":22,"column":26,"index":634},"line":22,"code":"    it('pans on arrow keys', function () {\n      const view = map.getView();\n      const spy = sinon.spy(view, 'animateInternal');\n      const event = new MapBrowserEvent('keydown', map, {\n        type: 'keydown',\n        target: map.getTargetElement(),\n        preventDefault: Event.prototype.preventDefault\n      });\n      event.originalEvent.key = 'ArrowDown';\n      map.handleMapBrowserEvent(event);\n      expect(spy.getCall(0).args[0].center).to.eql([0, -128]);\n      view.setCenter([0, 0]);\n      event.originalEvent.key = 'ArrowUp';\n      map.handleMapBrowserEvent(event);\n      expect(spy.getCall(1).args[0].center).to.eql([0, 128]);\n      view.setCenter([0, 0]);\n      event.originalEvent.key = 'ArrowLeft';\n      map.handleMapBrowserEvent(event);\n      expect(spy.getCall(2).args[0].center).to.eql([-128, 0]);\n      view.setCenter([0, 0]);\n      event.originalEvent.key = 'ArrowRight';\n      map.handleMapBrowserEvent(event);\n      expect(spy.getCall(3).args[0].center).to.eql([128, 0]);\n      view.setCenter([0, 0]);\n      view.animateInternal.restore();\n    });","file":"browser/spec/ol/interaction/keyboardpan.test.js","skipped":false,"dir":"test"},{"name":"zooms on + and - keys","suites":["ol.interaction.KeyboardZoom","handleEvent()"],"updatePoint":{"line":23,"column":29,"index":696},"line":23,"code":"    it('zooms on + and - keys', function () {\n      const view = map.getView();\n      const spy = sinon.spy(view, 'animateInternal');\n      const event = new MapBrowserEvent('keydown', map, {\n        type: 'keydown',\n        target: map.getTargetElement(),\n        preventDefault: Event.prototype.preventDefault\n      });\n      event.originalEvent.key = '+';\n      map.handleMapBrowserEvent(event);\n      expect(spy.getCall(0).args[0].resolution).to.eql(1);\n      view.setResolution(2);\n      event.originalEvent.key = '-';\n      map.handleMapBrowserEvent(event);\n      expect(spy.getCall(1).args[0].resolution).to.eql(4);\n      view.setResolution(2);\n      view.animateInternal.restore();\n    });","file":"browser/spec/ol/interaction/keyboardzoom.test.js","skipped":false,"dir":"test"},{"name":"does nothing if the target is editable","suites":["ol.interaction.KeyboardZoom","handleEvent()"],"updatePoint":{"line":41,"column":46,"index":1411},"line":41,"code":"    it('does nothing if the target is editable', function () {\n      const view = map.getView();\n      const spy = sinon.spy(view, 'animateInternal');\n      const event = new MapBrowserEvent('keydown', map, {\n        type: 'keydown',\n        target: document.createElement('input'),\n        preventDefault: Event.prototype.preventDefault\n      });\n      event.originalEvent.key = '+';\n      map.handleMapBrowserEvent(event);\n      expect(spy.called).to.be(false);\n    });","file":"browser/spec/ol/interaction/keyboardzoom.test.js","skipped":false,"dir":"test"},{"name":"does nothing if platform modifier key is pressed at the same time","suites":["ol.interaction.KeyboardZoom","handleEvent()"],"updatePoint":{"line":53,"column":73,"index":1910},"line":53,"code":"    it('does nothing if platform modifier key is pressed at the same time', function () {\n      const view = map.getView();\n      const spy = sinon.spy(view, 'animateInternal');\n      const event = new MapBrowserEvent('keydown', map, {\n        type: 'keydown',\n        target: map.getTargetElement(),\n        preventDefault: Event.prototype.preventDefault\n      });\n      event.originalEvent.key = '+';\n      if (MAC) {\n        event.originalEvent.metaKey = true;\n      } else {\n        event.originalEvent.ctrlKey = true;\n      }\n      map.handleMapBrowserEvent(event);\n      expect(spy.called).to.be(false);\n    });","file":"browser/spec/ol/interaction/keyboardzoom.test.js","skipped":false,"dir":"test"},{"name":"addds view state to the url","suites":["ol/interaction/Link","constructor"],"updatePoint":{"line":29,"column":35,"index":765},"line":29,"code":"    it('addds view state to the url', done => {\n      map.addInteraction(new Link());\n      map.once('moveend', () => {\n        const url = new URL(window.location.href);\n        const params = url.searchParams;\n        expect(params.get('z')).to.be('2');\n        expect(params.get('x')).to.be('3');\n        expect(params.get('y')).to.be('4');\n        expect(params.get('r')).to.be('0.5');\n        expect(params.get('l')).to.be('101');\n        done();\n      });\n      const view = map.getView();\n      view.setZoom(2);\n      view.setCenter([3, 4]);\n      view.setRotation(0.5);\n    });","file":"browser/spec/ol/interaction/Link.test.js","skipped":false,"dir":"test"},{"name":"accepts a prefix","suites":["ol/interaction/Link","constructor"],"updatePoint":{"line":46,"column":24,"index":1340},"line":46,"code":"    it('accepts a prefix', done => {\n      map.addInteraction(new Link({\n        prefix: 'ol:'\n      }));\n      map.once('moveend', () => {\n        const url = new URL(window.location.href);\n        const params = url.searchParams;\n        expect(params.get('ol:z')).to.be('2');\n        expect(params.get('ol:x')).to.be('3');\n        expect(params.get('ol:y')).to.be('4');\n        expect(params.get('ol:r')).to.be('0.5');\n        expect(params.get('ol:l')).to.be('101');\n        done();\n      });\n      const view = map.getView();\n      view.setZoom(2);\n      view.setCenter([3, 4]);\n      view.setRotation(0.5);\n    });","file":"browser/spec/ol/interaction/Link.test.js","skipped":false,"dir":"test"},{"name":"accepts an array of properties to track","suites":["ol/interaction/Link","constructor"],"updatePoint":{"line":65,"column":47,"index":1984},"line":65,"code":"    it('accepts an array of properties to track', done => {\n      map.addInteraction(new Link({\n        params: ['z', 'r']\n      }));\n      map.once('moveend', () => {\n        const url = new URL(window.location.href);\n        const params = url.searchParams;\n        expect(params.get('z')).to.be('2');\n        expect(params.get('x')).to.be(null);\n        expect(params.get('y')).to.be(null);\n        expect(params.get('r')).to.be('0.5');\n        expect(params.get('l')).to.be(null);\n        done();\n      });\n      const view = map.getView();\n      view.setZoom(2);\n      view.setCenter([3, 4]);\n      view.setRotation(0.5);\n    });","file":"browser/spec/ol/interaction/Link.test.js","skipped":false,"dir":"test"},{"name":"adds features to the RTree","suites":["ol.interaction.Modify","constructor"],"updatePoint":{"line":143,"column":34,"index":5495},"line":143,"code":"    it('adds features to the RTree', function () {\n      const feature = new Feature(new Point([0, 0]));\n      const features = new Collection([feature]);\n      const modify = new Modify({\n        features: features\n      });\n      const rbushEntries = modify.rBush_.getAll();\n      expect(rbushEntries.length).to.be(1);\n      expect(rbushEntries[0].feature).to.be(feature);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"accepts feature without geometry","suites":["ol.interaction.Modify","constructor"],"updatePoint":{"line":153,"column":40,"index":5884},"line":153,"code":"    it('accepts feature without geometry', function () {\n      const feature = new Feature();\n      const features = new Collection([feature]);\n      const modify = new Modify({\n        features: features\n      });\n      let rbushEntries = modify.rBush_.getAll();\n      expect(rbushEntries.length).to.be(0);\n      feature.setGeometry(new Point([0, 10]));\n      rbushEntries = modify.rBush_.getAll();\n      expect(rbushEntries.length).to.be(1);\n      expect(rbushEntries[0].feature).to.be(feature);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"accepts a source","suites":["ol.interaction.Modify","constructor"],"updatePoint":{"line":166,"column":24,"index":6374},"line":166,"code":"    it('accepts a source', function () {\n      const feature = new Feature(new Point([0, 0]));\n      const source = new VectorSource({\n        features: [feature]\n      });\n      const modify = new Modify({\n        source: source\n      });\n      const rbushEntries = modify.rBush_.getAll();\n      expect(rbushEntries.length).to.be(1);\n      expect(rbushEntries[0].feature).to.be(feature);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"accepts a hitDetection option","suites":["ol.interaction.Modify","constructor"],"updatePoint":{"line":178,"column":37,"index":6784},"line":178,"code":"    it('accepts a hitDetection option', function () {\n      const feature = new Feature(new Point([0, 0]));\n      const source = new VectorSource({\n        features: [feature]\n      });\n      const layer = new VectorLayer({\n        source: source\n      });\n      const modify = new Modify({\n        hitDetection: layer,\n        source: source\n      });\n      const rbushEntries = modify.rBush_.getAll();\n      expect(rbushEntries.length).to.be(1);\n      expect(rbushEntries[0].feature).to.be(feature);\n      expect(modify.hitDetection_).to.be(layer);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"accepts a snapToPointer option","suites":["ol.interaction.Modify","constructor"],"updatePoint":{"line":195,"column":38,"index":7344},"line":195,"code":"    it('accepts a snapToPointer option', function () {\n      const modify = new Modify({\n        source: source,\n        snapToPointer: true\n      });\n      expect(modify.snapToPointer_).to.be(true);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"works when clicking on a shared vertex","suites":["ol.interaction.Modify","vertex deletion"],"updatePoint":{"line":204,"column":46,"index":7610},"line":204,"code":"    it('works when clicking on a shared vertex', function () {\n      features.push(features[0].clone());\n      const first = features[0];\n      const firstRevision = first.getGeometry().getRevision();\n      const second = features[1];\n      const secondRevision = second.getGeometry().getRevision();\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      const events = trackEvents(first, modify);\n      expect(first.getGeometry().getRevision()).to.equal(firstRevision);\n      expect(first.getGeometry().getCoordinates()[0]).to.have.length(5);\n      expect(second.getGeometry().getRevision()).to.equal(secondRevision);\n      expect(second.getGeometry().getCoordinates()[0]).to.have.length(5);\n      simulateEvent('pointerdown', 10, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('pointerup', 10, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('click', 10, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('singleclick', 10, -20, {\n        alt: true\n      }, 0);\n      expect(first.getGeometry().getRevision()).to.equal(firstRevision + 1);\n      expect(first.getGeometry().getCoordinates()[0]).to.have.length(4);\n      expect(second.getGeometry().getRevision()).to.equal(secondRevision + 1);\n      expect(second.getGeometry().getCoordinates()[0]).to.have.length(4);\n      validateEvents(events, features);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"deletes first vertex of a LineString","suites":["ol.interaction.Modify","vertex deletion"],"updatePoint":{"line":237,"column":44,"index":9024},"line":237,"code":"    it('deletes first vertex of a LineString', function () {\n      const lineFeature = new Feature({\n        geometry: new LineString([[0, 0], [10, 20], [0, 40], [40, 40], [40, 0]])\n      });\n      features.length = 0;\n      features.push(lineFeature);\n      features.push(lineFeature.clone());\n      const first = features[0];\n      const firstRevision = first.getGeometry().getRevision();\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      const events = trackEvents(first, modify);\n      expect(first.getGeometry().getRevision()).to.equal(firstRevision);\n      expect(first.getGeometry().getCoordinates()).to.have.length(5);\n      simulateEvent('pointerdown', 0, 0, {\n        alt: true\n      }, 0);\n      simulateEvent('pointerup', 0, 0, {\n        alt: true\n      }, 0);\n      simulateEvent('click', 0, 0, {\n        alt: true\n      }, 0);\n      simulateEvent('singleclick', 0, 0, {\n        alt: true\n      }, 0);\n      expect(first.getGeometry().getRevision()).to.equal(firstRevision + 1);\n      expect(first.getGeometry().getCoordinates()).to.have.length(4);\n      expect(first.getGeometry().getCoordinates()[0][0]).to.equal(10);\n      expect(first.getGeometry().getCoordinates()[0][1]).to.equal(20);\n      validateEvents(events, features);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"deletes last vertex of a LineString","suites":["ol.interaction.Modify","vertex deletion"],"updatePoint":{"line":271,"column":43,"index":10352},"line":271,"code":"    it('deletes last vertex of a LineString', function () {\n      const lineFeature = new Feature({\n        geometry: new LineString([[0, 0], [10, 20], [0, 40], [40, 40], [40, 0]])\n      });\n      features.length = 0;\n      features.push(lineFeature);\n      features.push(lineFeature.clone());\n      const first = features[0];\n      const firstRevision = first.getGeometry().getRevision();\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      const events = trackEvents(first, modify);\n      expect(first.getGeometry().getRevision()).to.equal(firstRevision);\n      expect(first.getGeometry().getCoordinates()).to.have.length(5);\n      simulateEvent('pointerdown', 40, 0, {\n        alt: true\n      }, 0);\n      simulateEvent('pointerup', 40, 0, {\n        alt: true\n      }, 0);\n      simulateEvent('click', 40, 0, {\n        alt: true\n      }, 0);\n      simulateEvent('singleclick', 40, 0, {\n        alt: true\n      }, 0);\n      expect(first.getGeometry().getRevision()).to.equal(firstRevision + 1);\n      expect(first.getGeometry().getCoordinates()).to.have.length(4);\n      expect(first.getGeometry().getCoordinates()[3][0]).to.equal(40);\n      expect(first.getGeometry().getCoordinates()[3][1]).to.equal(40);\n      validateEvents(events, features);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"deletes vertex of a LineString programmatically","suites":["ol.interaction.Modify","vertex deletion"],"updatePoint":{"line":305,"column":55,"index":11696},"line":305,"code":"    it('deletes vertex of a LineString programmatically', function () {\n      const lineFeature = new Feature({\n        geometry: new LineString([[0, 0], [10, 20], [0, 40], [40, 40], [40, 0]])\n      });\n      features.length = 0;\n      features.push(lineFeature);\n      features.push(lineFeature.clone());\n      const first = features[0];\n      const firstRevision = first.getGeometry().getRevision();\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      const events = trackEvents(first, modify);\n      expect(first.getGeometry().getRevision()).to.equal(firstRevision);\n      expect(first.getGeometry().getCoordinates()).to.have.length(5);\n      simulateEvent('pointerdown', 40, 0, null, 0);\n      simulateEvent('pointerup', 40, 0, null, 0);\n      const removed = modify.removePoint();\n      expect(removed).to.be(true);\n      expect(first.getGeometry().getRevision()).to.equal(firstRevision + 1);\n      expect(first.getGeometry().getCoordinates()).to.have.length(4);\n      expect(first.getGeometry().getCoordinates()[3][0]).to.equal(40);\n      expect(first.getGeometry().getCoordinates()[3][1]).to.equal(40);\n      validateEvents(events, features);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"keeps the third dimension","suites":["ol.interaction.Modify","vertex modification"],"updatePoint":{"line":333,"column":33,"index":12961},"line":333,"code":"    it('keeps the third dimension', function () {\n      const lineFeature = new Feature({\n        geometry: new LineString([[0, 0, 10], [10, 20, 20], [0, 40, 30], [40, 40, 40], [40, 0, 50]])\n      });\n      features.length = 0;\n      features.push(lineFeature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n\n      // Move first vertex\n      simulateEvent('pointermove', 0, 0, null, 0);\n      simulateEvent('pointerdown', 0, 0, null, 0);\n      simulateEvent('pointermove', -10, -10, null, 0);\n      simulateEvent('pointerdrag', -10, -10, null, 0);\n      simulateEvent('pointerup', -10, -10, null, 0);\n\n      // Move middle vertex\n      simulateEvent('pointermove', 0, -40, null, 0);\n      simulateEvent('pointerdown', 0, -40, null, 0);\n      simulateEvent('pointermove', 10, -30, null, 0);\n      simulateEvent('pointerdrag', 10, -30, null, 0);\n      simulateEvent('pointerup', 10, -30, null, 0);\n\n      // Move last vertex\n      simulateEvent('pointermove', 40, 0, null, 0);\n      simulateEvent('pointerdown', 40, 0, null, 0);\n      simulateEvent('pointermove', 50, -10, null, 0);\n      simulateEvent('pointerdrag', 50, -10, null, 0);\n      simulateEvent('pointerup', 50, -10, null, 0);\n      expect(lineFeature.getGeometry().getCoordinates()[0][2]).to.equal(10);\n      expect(lineFeature.getGeometry().getCoordinates()[2][2]).to.equal(30);\n      expect(lineFeature.getGeometry().getCoordinates()[4][2]).to.equal(50);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"keeps polygon geometries valid","suites":["ol.interaction.Modify","vertex modification"],"updatePoint":{"line":368,"column":38,"index":14467},"line":368,"code":"    it('keeps polygon geometries valid', function () {\n      const overlappingVertexFeature = new Feature({\n        geometry: new Polygon([[[10, 20], [0, 20], [0, 0], [20, 0], [20, 20], [10, 20], [15, 15], [5, 15], [10, 20]]])\n      });\n      features.length = 0;\n      features.push(overlappingVertexFeature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      let coords, exteriorRing;\n      coords = overlappingVertexFeature.getGeometry().getCoordinates();\n      exteriorRing = coords[0];\n      expect(exteriorRing.length).to.equal(9);\n      expect(exteriorRing[0]).to.eql(exteriorRing[exteriorRing.length - 1]);\n\n      // move the overlapping vertice\n      simulateEvent('pointermove', 10, -20, null, 0);\n      simulateEvent('pointerdown', 10, -20, null, 0);\n      simulateEvent('pointermove', 10, -25, null, 0);\n      simulateEvent('pointerdrag', 10, -25, null, 0);\n      simulateEvent('pointerup', 10, -25, null, 0);\n      coords = overlappingVertexFeature.getGeometry().getCoordinates();\n      exteriorRing = coords[0];\n      expect(exteriorRing.length).to.equal(9);\n      expect(exteriorRing[0]).to.eql([10, 25]);\n      expect(exteriorRing[0]).to.eql(exteriorRing[exteriorRing.length - 1]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"only inserts one vertex per geometry","suites":["ol.interaction.Modify","vertex insertion"],"updatePoint":{"line":398,"column":44,"index":15807},"line":398,"code":"    it('only inserts one vertex per geometry', function () {\n      const lineFeature = new Feature({\n        geometry: new LineString([[-10, -10], [10, 10], [-10, -10], [10, 10]])\n      });\n      features.length = 0;\n      features.push(lineFeature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n\n      // Click on line\n      simulateEvent('pointermove', 0, 0, null, 0);\n      simulateEvent('pointerdown', 0, 0, null, 0);\n      simulateEvent('pointerup', 0, 0, null, 0);\n      expect(lineFeature.getGeometry().getCoordinates().length).to.equal(5);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"inserts one vertex into both linestrings with duplicate segments each","suites":["ol.interaction.Modify","vertex insertion"],"updatePoint":{"line":415,"column":77,"index":16472},"line":415,"code":"    it('inserts one vertex into both linestrings with duplicate segments each', function () {\n      const lineFeature1 = new Feature(new LineString([[-10, -10], [10, 10], [-10, -10]]));\n      const lineFeature2 = new Feature(new LineString([[10, 10], [-10, -10], [10, 10]]));\n      features.length = 0;\n      features.push(lineFeature1, lineFeature2);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      let modifiedFeatures;\n      const onModifyStart = function (evt) {\n        modifiedFeatures = evt.features;\n      };\n      map.addInteraction(modify);\n      modify.on('modifystart', onModifyStart);\n      // Click on line\n      simulateEvent('pointermove', 0, 0, null, 0);\n      simulateEvent('pointerdown', 0, 0, null, 0);\n      simulateEvent('pointerup', 0, 0, null, 0);\n      modify.un('modifystart', onModifyStart);\n      expect(lineFeature1.getGeometry().getCoordinates().length).to.be(4);\n      expect(lineFeature2.getGeometry().getCoordinates().length).to.be(4);\n      expect(modifiedFeatures.getArray()).to.eql([lineFeature1, lineFeature2]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"changes the circle radius and center","suites":["ol.interaction.Modify","circle modification"],"updatePoint":{"line":440,"column":44,"index":17595},"line":440,"code":"    it('changes the circle radius and center', function () {\n      const circleFeature = new Feature(new Circle([10, 10], 20));\n      features.length = 0;\n      features.push(circleFeature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n\n      // Change center\n      simulateEvent('pointermove', 10, -10, null, 0);\n      simulateEvent('pointerdown', 10, -10, null, 0);\n      simulateEvent('pointermove', 5, -5, null, 0);\n      simulateEvent('pointerdrag', 5, -5, null, 0);\n      simulateEvent('pointerup', 5, -5, null, 0);\n      expect(circleFeature.getGeometry().getRadius()).to.equal(20);\n      expect(circleFeature.getGeometry().getCenter()).to.eql([5, 5]);\n\n      // Increase radius along x axis\n      simulateEvent('pointermove', 25, -4, null, 0);\n      simulateEvent('pointerdown', 25, -4, null, 0);\n      simulateEvent('pointermove', 30, -5, null, 0);\n      simulateEvent('pointerdrag', 30, -5, null, 0);\n      simulateEvent('pointerup', 30, -5, null, 0);\n      expect(circleFeature.getGeometry().getRadius()).to.roughlyEqual(25, 0.1);\n      expect(circleFeature.getGeometry().getCenter()).to.eql([5, 5]);\n\n      // Increase radius along y axis\n      simulateEvent('pointermove', 4, -30, null, 0);\n      simulateEvent('pointerdown', 4, -30, null, 0);\n      simulateEvent('pointermove', 5, -35, null, 0);\n      simulateEvent('pointerdrag', 5, -35, null, 0);\n      simulateEvent('pointerup', 5, -35, null, 0);\n      expect(circleFeature.getGeometry().getRadius()).to.roughlyEqual(30, 0.1);\n      expect(circleFeature.getGeometry().getCenter()).to.eql([5, 5]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"changes the circle radius and center in a user projection","suites":["ol.interaction.Modify","circle modification"],"updatePoint":{"line":476,"column":65,"index":19264},"line":476,"code":"    it('changes the circle radius and center in a user projection', function () {\n      const userProjection = 'EPSG:3857';\n      setUserProjection(userProjection);\n      const viewProjection = map.getView().getProjection();\n      const circleFeature = new Feature(new Circle([10, 10], 20).transform(viewProjection, userProjection));\n      features.length = 0;\n      features.push(circleFeature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n\n      // Change center\n      simulateEvent('pointermove', 10, -10, null, 0);\n      simulateEvent('pointerdown', 10, -10, null, 0);\n      simulateEvent('pointermove', 5, -5, null, 0);\n      simulateEvent('pointerdrag', 5, -5, null, 0);\n      simulateEvent('pointerup', 5, -5, null, 0);\n      const geometry1 = circleFeature.getGeometry().clone().transform(userProjection, viewProjection);\n      expect(geometry1.getRadius()).to.roughlyEqual(20, 1e-9);\n      expect(geometry1.getCenter()).to.eql([5, 5]);\n\n      // Increase radius along x axis\n      simulateEvent('pointermove', 25, -4, null, 0);\n      simulateEvent('pointerdown', 25, -4, null, 0);\n      simulateEvent('pointermove', 30, -5, null, 0);\n      simulateEvent('pointerdrag', 30, -5, null, 0);\n      simulateEvent('pointerup', 30, -5, null, 0);\n      const geometry2 = circleFeature.getGeometry().clone().transform(userProjection, viewProjection);\n      expect(geometry2.getRadius()).to.roughlyEqual(25, 0.1);\n      expect(geometry2.getCenter()).to.eql([5, 5]);\n\n      // Increase radius along y axis\n      simulateEvent('pointermove', 4, -30, null, 0);\n      simulateEvent('pointerdown', 4, -30, null, 0);\n      simulateEvent('pointermove', 5, -35, null, 0);\n      simulateEvent('pointerdrag', 5, -35, null, 0);\n      simulateEvent('pointerup', 5, -35, null, 0);\n      const geometry3 = circleFeature.getGeometry().clone().transform(userProjection, viewProjection);\n      expect(geometry3.getRadius()).to.roughlyEqual(30, 0.1);\n      expect(geometry3.getCenter()).to.eql([5, 5]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"clicking vertex should delete it and +r1","suites":["ol.interaction.Modify","boundary modification"],"updatePoint":{"line":530,"column":48,"index":21685},"line":530,"code":"    it('clicking vertex should delete it and +r1', function () {\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      simulateEvent('pointerdown', 10, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('pointerup', 10, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('click', 10, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('singleclick', 10, -20, {\n        alt: true\n      }, 0);\n      expect(feature.getGeometry().getRevision()).to.equal(2);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(4);\n      validateEvents(events, [feature]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"single clicking boundary should add vertex and +r1","suites":["ol.interaction.Modify","boundary modification"],"updatePoint":{"line":549,"column":58,"index":22385},"line":549,"code":"    it('single clicking boundary should add vertex and +r1', function () {\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      simulateEvent('pointerdown', 40, -20, null, 0);\n      simulateEvent('pointerup', 40, -20, null, 0);\n      simulateEvent('click', 40, -20, null, 0);\n      simulateEvent('singleclick', 40, -20, null, 0);\n      expect(feature.getGeometry().getRevision()).to.equal(2);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(6);\n      validateEvents(events, [feature]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"single clicking on created vertex should delete it again","suites":["ol.interaction.Modify","boundary modification"],"updatePoint":{"line":560,"column":64,"index":22999},"line":560,"code":"    it('single clicking on created vertex should delete it again', function () {\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      simulateEvent('pointerdown', 40, -20, null, 0);\n      simulateEvent('pointerup', 40, -20, null, 0);\n      simulateEvent('click', 40, -20, null, 0);\n      simulateEvent('singleclick', 40, -20, null, 0);\n      expect(feature.getGeometry().getRevision()).to.equal(2);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(6);\n      validateEvents(events, [feature]);\n      events.length = 0;\n      simulateEvent('pointerdown', 40, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('pointerup', 40, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('click', 40, -20, {\n        alt: true\n      }, 0);\n      simulateEvent('singleclick', 40, -20, {\n        alt: true\n      }, 0);\n      expect(feature.getGeometry().getRevision()).to.equal(3);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      validateEvents(events, [feature]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"clicking with drag should add vertex and +r3","suites":["ol.interaction.Modify","boundary modification"],"updatePoint":{"line":587,"column":52,"index":24105},"line":587,"code":"    it('clicking with drag should add vertex and +r3', function () {\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      simulateEvent('pointermove', 40, -20, null, 0);\n      simulateEvent('pointerdown', 40, -20, null, 0);\n      simulateEvent('pointermove', 30, -20, null, 0);\n      simulateEvent('pointerdrag', 30, -20, null, 0);\n      simulateEvent('pointerup', 30, -20, null, 0);\n      expect(feature.getGeometry().getRevision()).to.equal(4);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(6);\n      validateEvents(events, [feature]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"clicking with right button should not add a vertex","suites":["ol.interaction.Modify","boundary modification"],"updatePoint":{"line":599,"column":58,"index":24773},"line":599,"code":"    it('clicking with right button should not add a vertex', function () {\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      simulateEvent('pointermove', 40, -20, null, 0);\n      // right click\n      simulateEvent('pointerdown', 40, -20, null, 1);\n      simulateEvent('pointermove', 30, -20, null, 1);\n      simulateEvent('pointerdrag', 30, -20, null, 1);\n      simulateEvent('pointerup', 30, -20, null, 1);\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      expect(events).to.have.length(0);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"all geometries should be modified","suites":["ol.interaction.Modify","geometry collection modification"],"updatePoint":{"line":614,"column":41,"index":25511},"line":614,"code":"    it('all geometries should be modified', function () {\n      const firstPolygon = new Polygon([[[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]]);\n      const secondPolygon = firstPolygon.clone();\n      const firstLineString = new LineString([[-2, 0], [0, 0], [2, 0]]);\n      const secondLineString = new LineString([[0, 2], [0, 0], [0, -2]]);\n      const point = new Point([0, 0]);\n      const circle = new Circle([0, 0], 1);\n      const geometryCollection = new GeometryCollection([firstPolygon, secondPolygon, firstLineString, secondLineString, point, circle]);\n      const feature = new Feature({\n        geometry: geometryCollection\n      });\n      features.length = 0;\n      features.push(feature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n\n      // Move vertex\n      simulateEvent('pointermove', 0, 0, null, 0);\n      simulateEvent('pointerdown', 0, 0, null, 0);\n      simulateEvent('pointermove', -1, 0, null, 0);\n      simulateEvent('pointerdrag', -1, 0, null, 0);\n      simulateEvent('pointerup', -1, 0, null, 0);\n      let geomCoords;\n      geomCoords = firstPolygon.getCoordinates()[0];\n      expect(geomCoords[0][0]).to.equal(-1);\n      expect(geomCoords[0][1]).to.equal(0);\n      geomCoords = secondPolygon.getCoordinates()[0];\n      expect(geomCoords[0][0]).to.equal(-1);\n      expect(geomCoords[0][1]).to.equal(0);\n      geomCoords = firstLineString.getCoordinates();\n      expect(geomCoords[1][0]).to.equal(-1);\n      expect(geomCoords[1][1]).to.equal(0);\n      geomCoords = secondLineString.getCoordinates();\n      expect(geomCoords[1][0]).to.equal(-1);\n      expect(geomCoords[1][1]).to.equal(0);\n      geomCoords = point.getCoordinates();\n      expect(geomCoords[0]).to.equal(-1);\n      expect(geomCoords[1]).to.equal(0);\n      geomCoords = circle.getCenter();\n      expect(geomCoords[0]).to.equal(-1);\n      expect(geomCoords[1]).to.equal(0);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"should delete vertex on double click","suites":["ol.interaction.Modify","double click deleteCondition"],"updatePoint":{"line":670,"column":44,"index":27821},"line":670,"code":"    it('should delete vertex on double click', function () {\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      simulateEvent('pointerdown', 10, -20, null, 0);\n      simulateEvent('pointerup', 10, -20, null, 0);\n      simulateEvent('click', 10, -20, null, 0);\n      simulateEvent('pointerdown', 10, -20, null, 0);\n      simulateEvent('pointerup', 10, -20, null, 0);\n      simulateEvent('click', 10, -20, null, 0);\n      simulateEvent('dblclick', 10, -20, null, 0);\n      expect(feature.getGeometry().getRevision()).to.equal(2);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(4);\n      validateEvents(events, features);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"should do nothing on single click","suites":["ol.interaction.Modify","double click deleteCondition"],"updatePoint":{"line":684,"column":41,"index":28562},"line":684,"code":"    it('should do nothing on single click', function () {\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      simulateEvent('pointerdown', 10, -20, null, 0);\n      simulateEvent('pointerup', 10, -20, null, 0);\n      simulateEvent('click', 10, -20, null, 0);\n      simulateEvent('singleclick', 10, -20, null, 0);\n      expect(feature.getGeometry().getRevision()).to.equal(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n      expect(events.length).to.eql(0);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"calls the callback function","suites":["ol.interaction.Modify","insertVertexCondition"],"updatePoint":{"line":697,"column":35,"index":29201},"line":697,"code":"    it('calls the callback function', function () {\n      const listenerSpy = sinon.spy(function (event) {\n        return false;\n      });\n      const modify = new Modify({\n        features: new Collection(features),\n        insertVertexCondition: listenerSpy\n      });\n      map.addInteraction(modify);\n      const feature = features[0];\n\n      // move first vertex\n      simulateEvent('pointermove', 0, 0, null, 0);\n      simulateEvent('pointerdown', 0, 0, null, 0);\n      simulateEvent('pointermove', -10, -10, null, 0);\n      simulateEvent('pointerdrag', -10, -10, null, 0);\n      simulateEvent('pointerup', -10, -10, null, 0);\n      expect(listenerSpy.callCount).to.be(0);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n\n      // try to add vertex\n      simulateEvent('pointerdown', 40, -20, null, 0);\n      simulateEvent('pointerup', 40, -20, null, 0);\n      simulateEvent('click', 40, -20, null, 0);\n      simulateEvent('singleclick', 40, -20, null, 0);\n      expect(listenerSpy.callCount).to.be(1);\n      expect(feature.getGeometry().getCoordinates()[0]).to.have.length(5);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"does not fire `modifystart` when nothing is modified","suites":["ol.interaction.Modify","insertVertexCondition"],"updatePoint":{"line":725,"column":60,"index":30344},"line":725,"code":"    it('does not fire `modifystart` when nothing is modified', function (done) {\n      const modify = new Modify({\n        features: new Collection(features),\n        insertVertexCondition: never\n      });\n      map.addInteraction(modify);\n      let modifystart = false;\n      modify.on('modifystart', function () {\n        modifystart = true;\n      });\n\n      // try to add vertex\n      simulateEvent('pointermove', 40, -20, null, 0);\n      simulateEvent('pointerdown', 40, -20, null, 0);\n      simulateEvent('pointermove', 42, -30, null, 0);\n      simulateEvent('pointerdrag', 42, -30, null, 0);\n      simulateEvent('pointerup', 42, -30, null, 0);\n      simulateEvent('click', 42, -30, null, 0);\n      simulateEvent('singleclick', 42, -30, null, 0);\n      setTimeout(function () {\n        expect(modifystart).to.be(false);\n        done();\n      }, 0);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"does not fire `modifyend` when nothing is modified","suites":["ol.interaction.Modify","insertVertexCondition"],"updatePoint":{"line":749,"column":58,"index":31204},"line":749,"code":"    it('does not fire `modifyend` when nothing is modified', function (done) {\n      const modify = new Modify({\n        features: new Collection(features),\n        deleteCondition: click,\n        insertVertexCondition: never\n      });\n      map.addInteraction(modify);\n      let modifyend = false;\n      modify.on('modifyend', function (e) {\n        modifyend = true;\n      });\n\n      // try to add vertex\n      simulateEvent('pointermove', 40, -20, null, 0);\n      simulateEvent('pointerdown', 40, -20, null, 0);\n      simulateEvent('pointerdrag', 42, -30, null, 0);\n      simulateEvent('pointerup', 42, -30, null, 0);\n      simulateEvent('click', 42, -30, null, 0);\n      simulateEvent('singleclick', 42, -30, null, 0);\n      setTimeout(function () {\n        expect(modifyend).to.be(false);\n        done();\n      }, 0);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"updates circle segment data","suites":["ol.interaction.Modify","handle feature change"],"updatePoint":{"line":785,"column":35,"index":32418},"line":785,"code":"    it('updates circle segment data', function () {\n      const feature = new Feature(new Circle([10, 10], 20));\n      features.length = 0;\n      features.push(feature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      let listeners;\n      listeners = getModifyListeners(feature, modify);\n      expect(listeners).to.have.length(1);\n      let firstSegmentData;\n      firstSegmentData = modify.rBush_.forEachInExtent([0, 0, 5, 5], function (node) {\n        return node;\n      });\n      expect(firstSegmentData.segment[0]).to.eql([10, 10]);\n      expect(firstSegmentData.segment[1]).to.eql([10, 10]);\n      const center = feature.getGeometry().getCenter();\n      center[0] = 1;\n      center[1] = 1;\n      feature.getGeometry().setCenter(center);\n      firstSegmentData = modify.rBush_.forEachInExtent([0, 0, 5, 5], function (node) {\n        return node;\n      });\n      expect(firstSegmentData.segment[0]).to.eql([1, 1]);\n      expect(firstSegmentData.segment[1]).to.eql([1, 1]);\n      listeners = getModifyListeners(feature, modify);\n      expect(listeners).to.have.length(1);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"updates polygon segment data","suites":["ol.interaction.Modify","handle feature change"],"updatePoint":{"line":814,"column":36,"index":33580},"line":814,"code":"    it('updates polygon segment data', function () {\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      const feature = features[0];\n      let listeners;\n      listeners = getModifyListeners(feature, modify);\n      expect(listeners).to.have.length(1);\n      let firstSegmentData;\n      firstSegmentData = modify.rBush_.forEachInExtent([0, 0, 5, 5], function (node) {\n        return node;\n      });\n      expect(firstSegmentData.segment[0]).to.eql([0, 0]);\n      expect(firstSegmentData.segment[1]).to.eql([10, 20]);\n      const coordinates = feature.getGeometry().getCoordinates();\n      const firstVertex = coordinates[0][0];\n      firstVertex[0] = 1;\n      firstVertex[1] = 1;\n      feature.getGeometry().setCoordinates(coordinates);\n      firstSegmentData = modify.rBush_.forEachInExtent([0, 0, 5, 5], function (node) {\n        return node;\n      });\n      expect(firstSegmentData.segment[0]).to.eql([1, 1]);\n      expect(firstSegmentData.segment[1]).to.eql([10, 20]);\n      listeners = getModifyListeners(feature, modify);\n      expect(listeners).to.have.length(1);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"removes segment data of removed features from dragSegments_","suites":["ol.interaction.Modify","handle feature removal during down-up sequence"],"updatePoint":{"line":844,"column":67,"index":34846},"line":844,"code":"    it('removes segment data of removed features from dragSegments_', function () {\n      const collection = new Collection(features);\n      const modify = new Modify({\n        features: collection\n      });\n      map.addInteraction(modify);\n      simulateEvent('pointermove', 0, 0, null, 0);\n      simulateEvent('pointerdown', 0, 0, null, 0);\n      simulateEvent('pointermove', -10, -10, null, 0);\n      simulateEvent('pointerdrag', -10, -10, null, 0);\n      collection.remove(features[0]);\n      expect(function () {\n        simulateEvent('pointerup', -10, -10, null, 0);\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"tracks features and geometries and removes the vertexFeature on deactivation","suites":["ol.interaction.Modify","Vertex feature"],"updatePoint":{"line":861,"column":84,"index":35528},"line":861,"code":"    it('tracks features and geometries and removes the vertexFeature on deactivation', function () {\n      const collection = new Collection(features);\n      const modify = new Modify({\n        features: collection\n      });\n      map.addInteraction(modify);\n      expect(modify.vertexFeature_).to.be(null);\n      simulateEvent('pointermove', 10, -20, null, 0);\n      expect(modify.vertexFeature_).to.not.be(null);\n      expect(modify.vertexFeature_.get('features').length).to.be(1);\n      expect(modify.vertexFeature_.get('geometries').length).to.be(1);\n      modify.setActive(false);\n      expect(modify.vertexFeature_).to.be(null);\n      map.removeInteraction(modify);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"tracks features and geometries - multi geometry","suites":["ol.interaction.Modify","Vertex feature"],"updatePoint":{"line":876,"column":55,"index":36179},"line":876,"code":"    it('tracks features and geometries - multi geometry', function () {\n      const collection = new Collection();\n      const modify = new Modify({\n        features: collection\n      });\n      map.addInteraction(modify);\n      const feature = new Feature(new MultiPoint([[10, 10], [10, 20]]));\n      collection.push(feature);\n      simulateEvent('pointermove', 10, -20, null, 0);\n      expect(modify.vertexFeature_.get('features')[0]).to.eql(feature);\n      expect(modify.vertexFeature_.get('geometries')[0]).to.eql(feature.getGeometry());\n      map.removeInteraction(modify);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"tracks features and geometries - geometry collection","suites":["ol.interaction.Modify","Vertex feature"],"updatePoint":{"line":889,"column":60,"index":36770},"line":889,"code":"    it('tracks features and geometries - geometry collection', function () {\n      const collection = new Collection();\n      const modify = new Modify({\n        features: collection\n      });\n      map.addInteraction(modify);\n      const feature = new Feature(new GeometryCollection([fromExtent([0, 0, 10, 10]), new Point([5, 5])]));\n      collection.push(feature);\n      simulateEvent('pointermove', 5, -5, null, 0);\n      expect(modify.vertexFeature_.get('features')[0]).to.eql(feature);\n      expect(modify.vertexFeature_.get('geometries')[0]).to.eql(feature.getGeometry().getGeometriesArray()[1]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"works with hit detection of point features","suites":["ol.interaction.Modify","Vertex feature"],"updatePoint":{"line":901,"column":50,"index":37371},"line":901,"code":"    it('works with hit detection of point features', function () {\n      const modify = new Modify({\n        hitDetection: layer,\n        source: source\n      });\n      map.addInteraction(modify);\n      source.clear();\n      const pointFeature = new Feature(new Point([0, 0]));\n      source.addFeature(pointFeature);\n      layer.setStyle(new Style({\n        image: new CircleStyle({\n          radius: 30,\n          fill: new Fill({\n            color: 'fuchsia'\n          })\n        })\n      }));\n      map.renderSync();\n      simulateEvent('pointermove', 10, -10, null, 0);\n      expect(modify.vertexFeature_.get('features')[0]).to.eql(pointFeature);\n      expect(modify.vertexFeature_.get('geometries')[0].getCoordinates()).to.eql(pointFeature.getGeometry().getCoordinates());\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"works with hit detection of point features with userGeographic()","suites":["ol.interaction.Modify","Vertex feature"],"updatePoint":{"line":923,"column":72,"index":38179},"line":923,"code":"    it('works with hit detection of point features with userGeographic()', function () {\n      useGeographic();\n      const modify = new Modify({\n        hitDetection: layer,\n        source: source\n      });\n      map.setView(new View({\n        center: [16, 48],\n        zoom: map.getView().getZoom()\n      }));\n      map.addInteraction(modify);\n      source.clear();\n      const pointFeature = new Feature(new Point([16, 48]));\n      source.addFeature(pointFeature);\n      layer.setStyle(new Style({\n        image: new CircleStyle({\n          radius: 30,\n          fill: new Fill({\n            color: 'fuchsia'\n          })\n        })\n      }));\n      map.renderSync();\n      simulateEvent('pointermove', 10, -10, null, 0);\n      simulateEvent('pointerdown', 10, -10, null, 0);\n      simulateEvent('pointerdrag', 0, 0, null, 0);\n      simulateEvent('pointerup', 0, 0, null, 0);\n      expect(modify.vertexFeature_.get('features')[0]).to.eql(pointFeature);\n      expect(modify.vertexFeature_.get('geometries')[0].getCoordinates()).to.eql(pointFeature.getGeometry().getCoordinates());\n      clearUserProjection();\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"snaps to pointer by default","suites":["ol.interaction.Modify","Vertex feature"],"updatePoint":{"line":954,"column":35,"index":39262},"line":954,"code":"    it('snaps to pointer by default', function () {\n      const modify = new Modify({\n        source: source\n      });\n      map.addInteraction(modify);\n      source.clear();\n      const pointFeature = new Feature(new Point([0, 0]));\n      source.addFeature(pointFeature);\n      map.renderSync();\n      simulateEvent('pointerdown', 2, 2, null, 0);\n      simulateEvent('pointerdrag', 2, 2, null, 0);\n      simulateEvent('pointerup', 2, 2, null, 0);\n      expect(pointFeature.getGeometry().getCoordinates()).to.eql([2, -2]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"does not snap to pointer when snapToPointer is false","suites":["ol.interaction.Modify","Vertex feature"],"updatePoint":{"line":968,"column":60,"index":39818},"line":968,"code":"    it('does not snap to pointer when snapToPointer is false', function () {\n      const modify = new Modify({\n        source: source,\n        snapToPointer: false\n      });\n      map.addInteraction(modify);\n      source.clear();\n      const pointFeature = new Feature(new Point([0, 0]));\n      source.addFeature(pointFeature);\n      map.renderSync();\n      simulateEvent('pointerdown', 2, 2, null, 0);\n      simulateEvent('pointerdrag', 2, 2, null, 0);\n      simulateEvent('pointerup', 2, 2, null, 0);\n      expect(pointFeature.getGeometry().getCoordinates()).to.eql([0, 0]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"returns the feature overlay layer","suites":["ol.interaction.Modify","#getOverlay"],"updatePoint":{"line":985,"column":41,"index":40430},"line":985,"code":"    it('returns the feature overlay layer', function () {\n      const modify = new Modify({\n        features: new Collection()\n      });\n      expect(modify.getOverlay()).to.eql(modify.overlay_);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"changes the circle radius and center","suites":["ol.interaction.Modify","circle modification with snap"],"updatePoint":{"line":993,"column":44,"index":40701},"line":993,"code":"    it('changes the circle radius and center', function () {\n      const circleFeature = new Feature(new Circle([10, 10], 20));\n      features.length = 0;\n      features.push(circleFeature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      const snap = new Snap({\n        features: new Collection(features),\n        pixelTolerance: 1\n      });\n      map.addInteraction(snap);\n\n      // Change center\n      simulateEvent('pointermove', 10, -10, null, 0);\n      simulateEvent('pointerdown', 10, -10, null, 0);\n      simulateEvent('pointermove', 5, -5, null, 0);\n      simulateEvent('pointerdrag', 5, -5, null, 0);\n      simulateEvent('pointerup', 5, -5, null, 0);\n      expect(circleFeature.getGeometry().getRadius()).to.equal(20);\n      expect(circleFeature.getGeometry().getCenter()).to.eql([5, 5]);\n\n      // Increase radius along x axis\n      simulateEvent('pointermove', 25, -4, null, 0);\n      simulateEvent('pointerdown', 25, -4, null, 0);\n      simulateEvent('pointermove', 30, -5, null, 0);\n      simulateEvent('pointerdrag', 30, -5, null, 0);\n      simulateEvent('pointerup', 30, -5, null, 0);\n      expect(circleFeature.getGeometry().getRadius()).to.roughlyEqual(25, 1e-9);\n      expect(circleFeature.getGeometry().getCenter()).to.eql([5, 5]);\n\n      // Increase radius along y axis\n      simulateEvent('pointermove', 4, -30, null, 0);\n      simulateEvent('pointerdown', 4, -30, null, 0);\n      simulateEvent('pointermove', 5, -35, null, 0);\n      simulateEvent('pointerdrag', 5, -35, null, 0);\n      simulateEvent('pointerup', 5, -35, null, 0);\n      expect(circleFeature.getGeometry().getRadius()).to.equal(30);\n      expect(circleFeature.getGeometry().getCenter()).to.eql([5, 5]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"changes the circle radius and center in a user projection","suites":["ol.interaction.Modify","circle modification with snap"],"updatePoint":{"line":1034,"column":65,"index":42501},"line":1034,"code":"    it('changes the circle radius and center in a user projection', function () {\n      const userProjection = 'EPSG:3857';\n      setUserProjection(userProjection);\n      const viewProjection = map.getView().getProjection();\n      const circleFeature = new Feature(new Circle([10, 10], 20).transform(viewProjection, userProjection));\n      features.length = 0;\n      features.push(circleFeature);\n      const modify = new Modify({\n        features: new Collection(features)\n      });\n      map.addInteraction(modify);\n      const snap = new Snap({\n        features: new Collection(features),\n        pixelTolerance: 1\n      });\n      map.addInteraction(snap);\n\n      // Change center\n      simulateEvent('pointermove', 10, -10, null, 0);\n      simulateEvent('pointerdown', 10, -10, null, 0);\n      simulateEvent('pointermove', 5, -5, null, 0);\n      simulateEvent('pointerdrag', 5, -5, null, 0);\n      simulateEvent('pointerup', 5, -5, null, 0);\n      const geometry1 = circleFeature.getGeometry().clone().transform(userProjection, viewProjection);\n      expect(geometry1.getRadius()).to.roughlyEqual(20, 1e-9);\n      expect(geometry1.getCenter()).to.eql([5, 5]);\n\n      // Increase radius along x axis\n      simulateEvent('pointermove', 25, -4, null, 0);\n      simulateEvent('pointerdown', 25, -4, null, 0);\n      simulateEvent('pointermove', 30, -5, null, 0);\n      simulateEvent('pointerdrag', 30, -5, null, 0);\n      simulateEvent('pointerup', 30, -5, null, 0);\n      const geometry2 = circleFeature.getGeometry().clone().transform(userProjection, viewProjection);\n      expect(geometry2.getRadius()).to.roughlyEqual(25, 1e-9);\n      expect(geometry2.getCenter()).to.eql([5, 5]);\n\n      // Increase radius along y axis\n      simulateEvent('pointermove', 4, -30, null, 0);\n      simulateEvent('pointerdown', 4, -30, null, 0);\n      simulateEvent('pointermove', 5, -35, null, 0);\n      simulateEvent('pointerdrag', 5, -35, null, 0);\n      simulateEvent('pointerup', 5, -35, null, 0);\n      const geometry3 = circleFeature.getGeometry().clone().transform(userProjection, viewProjection);\n      expect(geometry3.getRadius()).to.roughlyEqual(30, 1e-9);\n      expect(geometry3.getCenter()).to.eql([5, 5]);\n    });","file":"browser/spec/ol/interaction/modify.test.js","skipped":false,"dir":"test"},{"name":"works with the default value","suites":["ol.interaction.MouseWheelZoom","timeout duration"],"updatePoint":{"line":40,"column":36,"index":1247},"line":40,"code":"    it('works with the default value', function (done) {\n      const event = new MapBrowserEvent('wheel', map, {\n        type: 'wheel',\n        target: map.getViewport(),\n        preventDefault: Event.prototype.preventDefault\n      });\n      map.handleMapBrowserEvent(event);\n      clock.tick(50);\n      // default timeout is 80 ms, not called yet\n      expect(interaction.handleWheelZoom_.called).to.be(false);\n      clock.tick(30);\n      expect(interaction.handleWheelZoom_.called).to.be(true);\n      done();\n    });","file":"browser/spec/ol/interaction/mousewheelzoom.test.js","skipped":false,"dir":"test"},{"name":"works on Firefox in DOM_DELTA_PIXEL mode (trackpad)","suites":["ol.interaction.MouseWheelZoom","handleEvent()"],"updatePoint":{"line":57,"column":61,"index":1858},"line":57,"code":"      it('works on Firefox in DOM_DELTA_PIXEL mode (trackpad)', function (done) {\n        map.once('postrender', function () {\n          expect(interaction.mode_).to.be('trackpad');\n          done();\n        });\n        const event = new MapBrowserEvent('wheel', map, {\n          type: 'wheel',\n          deltaMode: WheelEvent.DOM_DELTA_PIXEL,\n          deltaY: DEVICE_PIXEL_RATIO,\n          target: map.getViewport(),\n          preventDefault: Event.prototype.preventDefault\n        });\n        event.coordinate = [0, 0];\n        map.handleMapBrowserEvent(event);\n      });","file":"browser/spec/ol/interaction/mousewheelzoom.test.js","skipped":false,"dir":"test"},{"name":"works in DOM_DELTA_PIXEL mode (trackpad)","suites":["ol.interaction.MouseWheelZoom","handleEvent()"],"updatePoint":{"line":74,"column":50,"index":2448},"line":74,"code":"      it('works in DOM_DELTA_PIXEL mode (trackpad)', function (done) {\n        map.once('postrender', function () {\n          expect(interaction.mode_).to.be('trackpad');\n          done();\n        });\n        const event = new MapBrowserEvent('wheel', map, {\n          type: 'wheel',\n          deltaMode: WheelEvent.DOM_DELTA_PIXEL,\n          deltaY: 1,\n          target: map.getViewport(),\n          preventDefault: Event.prototype.preventDefault\n        });\n        event.coordinate = [0, 0];\n        map.handleMapBrowserEvent(event);\n      });","file":"browser/spec/ol/interaction/mousewheelzoom.test.js","skipped":false,"dir":"test"},{"name":"works in DOM_DELTA_LINE mode (wheel)","suites":["ol.interaction.MouseWheelZoom","handleEvent()","spying on view.animateInternal()"],"updatePoint":{"line":99,"column":46,"index":3271},"line":99,"code":"      it('works in DOM_DELTA_LINE mode (wheel)', function (done) {\n        map.once('postrender', function () {\n          const call = view.animateInternal.getCall(0);\n          expect(call.args[0].resolution).to.be(2);\n          expect(call.args[0].anchor).to.eql([0, 0]);\n          done();\n        });\n        const event = new MapBrowserEvent('wheel', map, {\n          type: 'wheel',\n          deltaMode: WheelEvent.DOM_DELTA_LINE,\n          deltaY: 20,\n          target: map.getViewport(),\n          preventDefault: Event.prototype.preventDefault\n        });\n        event.coordinate = [0, 0];\n        map.handleMapBrowserEvent(event);\n      });","file":"browser/spec/ol/interaction/mousewheelzoom.test.js","skipped":false,"dir":"test"},{"name":"works on all browsers (wheel)","suites":["ol.interaction.MouseWheelZoom","handleEvent()","spying on view.animateInternal()"],"updatePoint":{"line":116,"column":39,"index":3914},"line":116,"code":"      it('works on all browsers (wheel)', function (done) {\n        map.once('postrender', function () {\n          const call = view.animateInternal.getCall(0);\n          expect(call.args[0].resolution).to.be(2);\n          expect(call.args[0].anchor).to.eql([0, 0]);\n          done();\n        });\n        const event = new MapBrowserEvent('wheel', map, {\n          type: 'wheel',\n          deltaY: 300,\n          target: map.getViewport(),\n          preventDefault: Event.prototype.preventDefault\n        });\n        event.coordinate = [0, 0];\n        map.handleMapBrowserEvent(event);\n      });","file":"browser/spec/ol/interaction/mousewheelzoom.test.js","skipped":false,"dir":"test"},{"name":"does not prevent default on handled down event","suites":["ol/interaction/Pointer","#handleEvent"],"updatePoint":{"line":23,"column":54,"index":1009},"line":23,"code":"    it('does not prevent default on handled down event', function () {\n      const interaction = new PointerInteraction({\n        handleDownEvent: function () {\n          return true;\n        }\n      });\n      interaction.handleEvent(event);\n      expect(defaultPrevented).to.be(false);\n    });","file":"browser/spec/ol/interaction/Pointer.test.js","skipped":false,"dir":"test"},{"name":"does not prevent default on unhandled down event","suites":["ol/interaction/Pointer","#handleEvent"],"updatePoint":{"line":32,"column":56,"index":1306},"line":32,"code":"    it('does not prevent default on unhandled down event', function () {\n      const interaction = new PointerInteraction({\n        handleDownEvent: function () {\n          return false;\n        }\n      });\n      interaction.handleEvent(event);\n      expect(defaultPrevented).to.be(false);\n    });","file":"browser/spec/ol/interaction/Pointer.test.js","skipped":false,"dir":"test"},{"name":"has default event handlers","suites":["ol/interaction/Pointer","event handlers"],"updatePoint":{"line":81,"column":34,"index":2715},"line":81,"code":"    it('has default event handlers', function () {\n      const interaction = new PointerInteraction({});\n      expect(interaction.handleDownEvent()).to.be(false);\n      expect(interaction.handleUpEvent()).to.be(false);\n    });","file":"browser/spec/ol/interaction/Pointer.test.js","skipped":false,"dir":"test"},{"name":"allows event handler overrides via options","suites":["ol/interaction/Pointer","event handlers"],"updatePoint":{"line":86,"column":50,"index":2958},"line":86,"code":"    it('allows event handler overrides via options', function () {\n      const interaction = new PointerInteraction({\n        handleDownEvent: flagHandleDown,\n        handleDragEvent: flagHandleDrag,\n        handleMoveEvent: flagHandleMove,\n        handleUpEvent: flagHandleUp\n      });\n      interaction.handleDownEvent();\n      expect(handleDownCalled).to.be(true);\n      interaction.handleDragEvent();\n      expect(handleDragCalled).to.be(true);\n      interaction.handleMoveEvent();\n      expect(handleMoveCalled).to.be(true);\n      interaction.handleUpEvent();\n      expect(handleUpCalled).to.be(true);\n    });","file":"browser/spec/ol/interaction/Pointer.test.js","skipped":false,"dir":"test"},{"name":"allows event handler overrides via class extension","suites":["ol/interaction/Pointer","event handlers"],"updatePoint":{"line":102,"column":58,"index":3581},"line":102,"code":"    it('allows event handler overrides via class extension', function () {\n      const interaction = new MockPointerInteraction({});\n      interaction.handleDownEvent();\n      expect(handleDownCalled).to.be(true);\n      interaction.handleDragEvent();\n      expect(handleDragCalled).to.be(true);\n      interaction.handleMoveEvent();\n      expect(handleMoveCalled).to.be(true);\n      interaction.handleUpEvent();\n      expect(handleUpCalled).to.be(true);\n    });","file":"browser/spec/ol/interaction/Pointer.test.js","skipped":false,"dir":"test"},{"name":"tracks pointers correctly","suites":["ol/interaction/Pointer","With a map's MapBrowserEventHandler"],"updatePoint":{"line":167,"column":33,"index":5520},"line":167,"code":"    it('tracks pointers correctly', function () {\n      element.dispatchEvent(down1);\n      element.dispatchEvent(down2);\n      expect(interaction.targetPointers[0].pointerId).to.be(1);\n      expect(interaction.targetPointers[1].pointerId).to.be(2);\n      document.dispatchEvent(up1);\n      document.dispatchEvent(up2);\n      expect(interaction.targetPointers).to.have.length(0);\n    });","file":"browser/spec/ol/interaction/Pointer.test.js","skipped":false,"dir":"test"},{"name":"creates a new interaction","suites":["ol.interaction.Select","constructor"],"updatePoint":{"line":95,"column":33,"index":3293},"line":95,"code":"    it('creates a new interaction', function () {\n      const select = new Select();\n      expect(select).to.be.a(Select);\n      expect(select).to.be.a(Interaction);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"uses the user-provided collection","suites":["ol.interaction.Select","constructor","user-provided collection"],"updatePoint":{"line":101,"column":43,"index":3532},"line":101,"code":"      it('uses the user-provided collection', function () {\n        const features = new Collection();\n        const select = new Select({\n          features: features\n        });\n        expect(select.getFeatures()).to.be(features);\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"select with single-click","suites":["ol.interaction.Select","selecting a polygon"],"updatePoint":{"line":116,"column":32,"index":3943},"line":116,"code":"    it('select with single-click', function () {\n      const listenerSpy = sinon.spy(function (e) {\n        expect(e.selected).to.have.length(1);\n      });\n      select.on('select', listenerSpy);\n      simulateEvent('singleclick', 10, -20);\n      expect(listenerSpy.callCount).to.be(1);\n      const features = select.getFeatures();\n      expect(features.getLength()).to.equal(1);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"single-click outside the geometry","suites":["ol.interaction.Select","selecting a polygon"],"updatePoint":{"line":126,"column":41,"index":4340},"line":126,"code":"    it('single-click outside the geometry', function () {\n      const listenerSpy = sinon.spy(function (e) {\n        expect(e.selected).to.have.length(1);\n      });\n      select.on('select', listenerSpy);\n      simulateEvent(MapBrowserEventType.SINGLECLICK, -10, -10);\n      expect(listenerSpy.callCount).to.be(0);\n      const features = select.getFeatures();\n      expect(features.getLength()).to.equal(0);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"select twice with single-click","suites":["ol.interaction.Select","selecting a polygon"],"updatePoint":{"line":136,"column":38,"index":4753},"line":136,"code":"    it('select twice with single-click', function () {\n      const listenerSpy = sinon.spy(function (e) {\n        expect(e.selected).to.have.length(1);\n      });\n      select.on('select', listenerSpy);\n      simulateEvent(MapBrowserEventType.SINGLECLICK, 10, -20);\n      simulateEvent(MapBrowserEventType.SINGLECLICK, 9, -21);\n      expect(listenerSpy.callCount).to.be(1);\n      const features = select.getFeatures();\n      expect(features.getLength()).to.equal(1);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"select with shift single-click","suites":["ol.interaction.Select","selecting a polygon"],"updatePoint":{"line":147,"column":38,"index":5227},"line":147,"code":"    it('select with shift single-click', function () {\n      const listenerSpy = sinon.spy(function (e) {\n        expect(e.selected).to.have.length(1);\n      });\n      select.on('select', listenerSpy);\n      simulateEvent('singleclick', 10, -20, true);\n      expect(listenerSpy.callCount).to.be(1);\n      const features = select.getFeatures();\n      expect(features.getLength()).to.equal(1);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"select with single-click","suites":["ol.interaction.Select","multiselecting polygons"],"updatePoint":{"line":166,"column":32,"index":5824},"line":166,"code":"    it('select with single-click', function () {\n      const listenerSpy = sinon.spy(function (e) {\n        expect(e.selected).to.have.length(4);\n      });\n      select.on('select', listenerSpy);\n      simulateEvent('singleclick', 10, -20);\n      expect(listenerSpy.callCount).to.be(1);\n      const features = select.getFeatures();\n      expect(features.getLength()).to.equal(4);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"select with shift single-click","suites":["ol.interaction.Select","multiselecting polygons"],"updatePoint":{"line":176,"column":38,"index":6218},"line":176,"code":"    it('select with shift single-click', function () {\n      const listenerSpy = sinon.spy(function (e) {\n        expect(e.selected).to.have.length(4);\n      });\n      select.on('select', listenerSpy);\n      simulateEvent('singleclick', 10, -20, true);\n      expect(listenerSpy.callCount).to.be(1);\n      let features = select.getFeatures();\n      expect(features.getLength()).to.equal(4);\n      expect(select.getLayer(features.item(0))).to.equal(layer);\n\n      // Select again to make sure the style change does not break selection\n      simulateEvent('singleclick', 10, -20);\n      expect(listenerSpy.callCount).to.be(1);\n      features = select.getFeatures();\n      expect(features.getLength()).to.equal(4);\n      expect(select.getLayer(features.item(0))).to.equal(layer);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"with SHIFT + single-click","suites":["ol.interaction.Select","toggle selecting polygons"],"updatePoint":{"line":203,"column":33,"index":7202},"line":203,"code":"    it('with SHIFT + single-click', function () {\n      const listenerSpy = sinon.spy();\n      select.on('select', listenerSpy);\n      simulateEvent('singleclick', 10, -20, true);\n      expect(listenerSpy.callCount).to.be(1);\n      let features = select.getFeatures();\n      expect(features.getLength()).to.equal(4);\n      map.renderSync();\n      simulateEvent('singleclick', 10, -20, true);\n      expect(listenerSpy.callCount).to.be(1);\n      features = select.getFeatures();\n      expect(features.getLength()).to.equal(4);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"only selects features that pass the filter","suites":["ol.interaction.Select","filter features using the filter option","with multi set to true"],"updatePoint":{"line":219,"column":52,"index":7881},"line":219,"code":"      it('only selects features that pass the filter', function () {\n        const select = new Select({\n          multi: true,\n          filter: function (feature, layer) {\n            return feature.get('type') === 'bar';\n          }\n        });\n        map.addInteraction(select);\n        simulateEvent('singleclick', 10, -20);\n        const features = select.getFeatures();\n        expect(features.getLength()).to.equal(2);\n        expect(features.item(0).get('type')).to.be('bar');\n        expect(features.item(1).get('type')).to.be('bar');\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"only selects the first feature that passes the filter","suites":["ol.interaction.Select","filter features using the filter option","with multi set to false"],"updatePoint":{"line":249,"column":63,"index":9102},"line":249,"code":"      it('only selects the first feature that passes the filter', function () {\n        const select = new Select({\n          multi: false,\n          filter: function (feature, layer) {\n            return feature.get('type') === 'bar';\n          }\n        });\n        map.addInteraction(select);\n        simulateEvent('singleclick', 10, -20);\n        const features = select.getFeatures();\n        expect(features.getLength()).to.equal(1);\n        expect(features.item(0).get('type')).to.be('bar');\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"returns a layer from a selected feature","suites":["ol.interaction.Select","#getLayer(feature)"],"updatePoint":{"line":286,"column":47,"index":10410},"line":286,"code":"    it('returns a layer from a selected feature', function () {\n      const listenerSpy = sinon.spy(function (e) {\n        const feature = e.selected[0];\n        const layer_ = interaction.getLayer(feature);\n        expect(e.selected).to.have.length(1);\n        expect(feature).to.be.a(Feature);\n        expect(layer_).to.be.a(VectorLayer);\n        expect(layer_).to.equal(layer);\n      });\n      interaction.on('select', listenerSpy);\n      simulateEvent('singleclick', 10, -20);\n      // Select again to make sure the style change does not break selection\n      simulateEvent('singleclick', 10, -20);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"returns a layer from a programmatically selected feature","suites":["ol.interaction.Select","#getLayer(feature)"],"updatePoint":{"line":300,"column":64,"index":11038},"line":300,"code":"    it('returns a layer from a programmatically selected feature', function () {\n      const feature = source.getFeatures()[0];\n      interaction.getFeatures().push(feature);\n      const layerWithSelectedFeature = interaction.getLayer(feature);\n      expect(layerWithSelectedFeature).to.equal(layer);\n    });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"keeps the the selection","suites":["ol.interaction.Select","#setActive()","#setActive(false)"],"updatePoint":{"line":319,"column":33,"index":11716},"line":319,"code":"      it('keeps the the selection', function () {\n        interaction.setActive(false);\n        expect(interaction.getFeatures().getLength()).to.equal(1);\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"fires change:active","suites":["ol.interaction.Select","#setActive()","#setActive(true)"],"updatePoint":{"line":328,"column":29,"index":12011},"line":328,"code":"      it('fires change:active', function () {\n        const listenerSpy = sinon.spy();\n        interaction.on('change:active', listenerSpy);\n        interaction.setActive(true);\n        expect(listenerSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"changes the selected feature once","suites":["ol.interaction.Select","clear event listeners on interaction removal","with a single interaction added"],"updatePoint":{"line":359,"column":43,"index":12960},"line":359,"code":"      it('changes the selected feature once', function () {\n        map.addInteraction(firstInteraction);\n        const listenerSpy = sinon.spy();\n        feature.on('change', listenerSpy);\n        simulateEvent('singleclick', 10, -20, false);\n        expect(listenerSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"changes the selected feature once","suites":["ol.interaction.Select","clear event listeners on interaction removal","with a replaced interaction"],"updatePoint":{"line":370,"column":43,"index":13380},"line":370,"code":"      it('changes the selected feature once', function () {\n        map.addInteraction(firstInteraction);\n        map.removeInteraction(firstInteraction);\n        map.addInteraction(secondInteraction);\n        const listenerSpy = sinon.spy();\n        feature.on('change', listenerSpy);\n        simulateEvent('singleclick', 10, -20, false);\n        expect(listenerSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"both interactions dispatch select","suites":["ol.interaction.Select","supports stop propagation","without stop propagation"],"updatePoint":{"line":397,"column":43,"index":14363},"line":397,"code":"      it('both interactions dispatch select', function () {\n        const firstSelectSpy = sinon.spy();\n        firstInteraction.on('select', firstSelectSpy);\n        const secondSelectSpy = sinon.spy();\n        secondInteraction.on('select', secondSelectSpy);\n        simulateEvent('singleclick', 10, -20);\n        expect(firstSelectSpy.callCount).to.be(1);\n        expect(secondSelectSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"only \"last\" added interaction dispatches select","suites":["ol.interaction.Select","supports stop propagation","calling stop propagation"],"updatePoint":{"line":408,"column":57,"index":14861},"line":408,"code":"      it('only \"last\" added interaction dispatches select', function () {\n        const firstSelectSpy = sinon.spy();\n        firstInteraction.on('select', firstSelectSpy);\n        const secondSelectSpy = sinon.spy(function (e) {\n          e.mapBrowserEvent.stopPropagation();\n        });\n        secondInteraction.on('select', secondSelectSpy);\n        simulateEvent('singleclick', 10, -20);\n        expect(firstSelectSpy.callCount).to.be(0);\n        expect(secondSelectSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/interaction/select.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol.interaction.Snap","constructor"],"updatePoint":{"line":13,"column":44,"index":751},"line":13,"code":"    it('can be constructed without arguments', function () {\n      const instance = new Snap();\n      expect(instance).to.be.an(Snap);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"can handle XYZ coordinates","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":48,"column":34,"index":1697},"line":48,"code":"    it('can handle XYZ coordinates', function (done) {\n      const point = new Feature(new Point([0, 0, 123]));\n      const snapInteraction = new Snap({\n        features: new Collection([point])\n      });\n      snapInteraction.setMap(map);\n      const event = {\n        pixel: [width / 2, height / 2],\n        coordinate: [0, 0],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.type).to.be('snap');\n        expect(snapEvent.vertex).to.be(event.coordinate);\n        expect(snapEvent.vertexPixel).to.be(event.pixel);\n        expect(snapEvent.feature).to.eql(point);\n\n        // check that the coordinate is in XY and not XYZ\n        expect(event.coordinate).to.eql([0, 0]);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"can handle view rotation","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":71,"column":32,"index":2502},"line":71,"code":"    it('can handle view rotation', function (done) {\n      map.getView().setRotation(Math.PI / 4);\n      map.renderSync();\n      const point = new Feature(new Point([0, 0]));\n      const snapInteraction = new Snap({\n        features: new Collection([point])\n      });\n      snapInteraction.setMap(map);\n      const event = {\n        pixel: [6 + width / 2, height / 2 - 3],\n        coordinate: [1, 3],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.vertex).to.be(event.coordinate);\n        expect(snapEvent.vertexPixel).to.be(event.pixel);\n        expect(snapEvent.feature).to.be(point);\n        expect(event.coordinate).to.eql([0, 0]);\n        expect(event.pixel).to.eql([width / 2, height / 2]);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"snaps to edges only","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":94,"column":27,"index":3330},"line":94,"code":"    it('snaps to edges only', function (done) {\n      const point = new Feature(new LineString([[-10, 0], [10, 0]]));\n      const snapInteraction = new Snap({\n        features: new Collection([point]),\n        pixelTolerance: 5,\n        vertex: false\n      });\n      snapInteraction.setMap(map);\n      const event = {\n        pixel: [7 + width / 2, height / 2 - 4],\n        coordinate: [7, 4],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(undefined);\n        expect(event.coordinate).to.eql([7, 0]);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"snaps to edges in a user projection","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":114,"column":43,"index":3999},"line":114,"code":"    it('snaps to edges in a user projection', function (done) {\n      const userProjection = 'EPSG:3857';\n      setUserProjection(userProjection);\n      const viewProjection = map.getView().getProjection();\n      const point = new Feature(new LineString([[-10, 0], [10, 0]]).transform(viewProjection, userProjection));\n      const snapInteraction = new Snap({\n        features: new Collection([point]),\n        pixelTolerance: 5,\n        vertex: false\n      });\n      snapInteraction.setMap(map);\n      const event = {\n        pixel: [7 + width / 2, height / 2 - 4],\n        coordinate: transform([7, 4], viewProjection, userProjection),\n        map: map\n      };\n      const coordinate = transform([7, 0], viewProjection, userProjection);\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(undefined);\n        expect(event.coordinate[0]).to.roughlyEqual(coordinate[0], 1e-10);\n        expect(event.coordinate[1]).to.roughlyEqual(coordinate[1], 1e-10);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"snaps to vertices only","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":139,"column":30,"index":5060},"line":139,"code":"    it('snaps to vertices only', function (done) {\n      const point = new Feature(new LineString([[-10, 0], [10, 0]]));\n      const snapInteraction = new Snap({\n        features: new Collection([point]),\n        pixelTolerance: 5,\n        edge: false\n      });\n      snapInteraction.setMap(map);\n      const event = {\n        pixel: [7 + width / 2, height / 2 - 4],\n        coordinate: [7, 4],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(point);\n        expect(event.coordinate).to.eql([10, 0]);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"snaps to vertex on line","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":159,"column":31,"index":5712},"line":159,"code":"    it('snaps to vertex on line', function (done) {\n      const line = new Feature(new LineString([[0, 0], [50, 0]]));\n      const point = new Feature(new Point([5, 0]));\n      const snapInteraction = new Snap({\n        features: new Collection([line, point])\n      });\n      snapInteraction.setMap(map);\n      const event = {\n        pixel: [3 + width / 2, height / 2],\n        coordinate: [3, 0],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(point);\n        expect(event.coordinate).to.eql([5, 0]);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"snaps to circle","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":178,"column":23,"index":6358},"line":178,"code":"    it('snaps to circle', function (done) {\n      const circle = new Feature(new Circle([0, 0], 10));\n      const snapInteraction = new Snap({\n        features: new Collection([circle]),\n        pixelTolerance: 5\n      });\n      snapInteraction.setMap(map);\n      const event = {\n        pixel: [5 + width / 2, height / 2 - 5],\n        coordinate: [5, 5],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(undefined);\n        expect(event.coordinate[0]).to.roughlyEqual(Math.sin(Math.PI / 4) * 10, 1e-10);\n        expect(event.coordinate[1]).to.roughlyEqual(Math.sin(Math.PI / 4) * 10, 1e-10);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"snaps to circle in a user projection","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":198,"column":44,"index":7121},"line":198,"code":"    it('snaps to circle in a user projection', function (done) {\n      const userProjection = 'EPSG:3857';\n      setUserProjection(userProjection);\n      const viewProjection = map.getView().getProjection();\n      const circle = new Feature(new Circle([0, 0], 10).transform(viewProjection, userProjection));\n      const snapInteraction = new Snap({\n        features: new Collection([circle]),\n        pixelTolerance: 5\n      });\n      snapInteraction.setMap(map);\n      const event = {\n        pixel: [5 + width / 2, height / 2 - 5],\n        coordinate: transform([5, 5], viewProjection, userProjection),\n        map: map\n      };\n      const coordinate = transform([Math.sin(Math.PI / 4) * 10, Math.sin(Math.PI / 4) * 10], viewProjection, userProjection);\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(undefined);\n        expect(event.coordinate[0]).to.roughlyEqual(coordinate[0], 1e-10);\n        expect(event.coordinate[1]).to.roughlyEqual(coordinate[1], 1e-10);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"handle feature without geometry","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":222,"column":39,"index":8207},"line":222,"code":"    it('handle feature without geometry', function (done) {\n      const feature = new Feature();\n      const snapInteraction = new Snap({\n        features: new Collection([feature]),\n        pixelTolerance: 5,\n        edge: false\n      });\n      snapInteraction.setMap(map);\n      feature.setGeometry(new LineString([[-10, 0], [10, 0]]));\n      const event = {\n        pixel: [7 + width / 2, height / 2 - 4],\n        coordinate: [7, 4],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(feature);\n        expect(event.coordinate).to.eql([10, 0]);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"handle geometry changes","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":243,"column":31,"index":8894},"line":243,"code":"    it('handle geometry changes', function (done) {\n      const line = new Feature(new LineString([[-10, 0], [0, 0]]));\n      const snapInteraction = new Snap({\n        features: new Collection([line]),\n        pixelTolerance: 5,\n        edge: false\n      });\n      snapInteraction.setMap(map);\n      line.getGeometry().setCoordinates([[-10, 0], [10, 0]]);\n      const event = {\n        pixel: [7 + width / 2, height / 2 - 4],\n        coordinate: [7, 4],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(line);\n        expect(event.coordinate).to.eql([10, 0]);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"handle geometry name changes","suites":["ol.interaction.Snap","handleEvent"],"updatePoint":{"line":264,"column":36,"index":9609},"line":264,"code":"    it('handle geometry name changes', function (done) {\n      const line = new Feature({\n        geometry: new LineString([[-10, 0], [0, 0]]),\n        alt_geometry: new LineString([[-10, 0], [10, 0]])\n      });\n      const snapInteraction = new Snap({\n        features: new Collection([line]),\n        pixelTolerance: 5,\n        edge: false\n      });\n      snapInteraction.setMap(map);\n      line.setGeometryName('alt_geometry');\n      const event = {\n        pixel: [7 + width / 2, height / 2 - 4],\n        coordinate: [7, 4],\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(line);\n        expect(event.coordinate).to.eql([10, 0]);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"snaps to user coordinates","suites":["ol.interaction.Snap","handleEvent - useGeographic"],"updatePoint":{"line":322,"column":33,"index":11191},"line":322,"code":"    it('snaps to user coordinates', done => {\n      const lon = -90;\n      const lat = 45;\n      const point = new Feature(new Point([lon, lat]));\n      const snapInteraction = new Snap({\n        features: new Collection([point])\n      });\n      snapInteraction.setMap(map);\n      const expectedPixel = map.getPixelFromCoordinate([lon, lat]).map(value => Math.round(value));\n      const delta = 5;\n      const pixel = expectedPixel.slice();\n      pixel[0] += delta;\n      pixel[1] += delta;\n      const coordinate = map.getCoordinateFromPixel(pixel);\n      const event = {\n        pixel: pixel,\n        coordinate: coordinate,\n        map: map\n      };\n      snapInteraction.on('snap', function (snapEvent) {\n        expect(snapEvent.feature).to.be(point);\n        expect(event.coordinate).to.eql([lon, lat]);\n        expect(event.pixel).to.eql(expectedPixel);\n        done();\n      });\n      snapInteraction.handleEvent(event);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"adds and removes feature listeners","suites":["ol.interaction.Snap","setMap"],"updatePoint":{"line":368,"column":42,"index":12612},"line":368,"code":"    it('adds and removes feature listeners', function () {\n      const feature = featureCollection.item(0);\n      const snapInteraction = new Snap({\n        features: featureCollection\n      });\n      expect(feature.getListeners('change')).to.be(undefined);\n      snapInteraction.setMap(map);\n      expect(snapInteraction.getMap()).to.eql(map);\n      expect(feature.getListeners('change').length).to.be(1);\n      snapInteraction.setMap(null);\n      expect(snapInteraction.getMap()).to.be(null);\n      expect(feature.getListeners('change')).to.be(undefined);\n    });","file":"browser/spec/ol/interaction/snap.test.js","skipped":false,"dir":"test"},{"name":"creates a new interaction","suites":["ol.interaction.Translate","constructor"],"updatePoint":{"line":137,"column":33,"index":4989},"line":137,"code":"    it('creates a new interaction', function () {\n      const translate = new Translate({\n        features: features\n      });\n      expect(translate).to.be.a(Translate);\n      expect(translate).to.be.a(Interaction);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"works when the map is not set","suites":["ol.interaction.Translate","setActive"],"updatePoint":{"line":146,"column":37,"index":5262},"line":146,"code":"    it('works when the map is not set', function () {\n      const translate = new Translate({\n        features: features\n      });\n      expect(translate.getActive()).to.be(true);\n      translate.setActive(false);\n      expect(translate.getActive()).to.be(false);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"moves a selected feature","suites":["ol.interaction.Translate","moving features, with features option"],"updatePoint":{"line":163,"column":32,"index":5786},"line":163,"code":"    it('moves a selected feature', function () {\n      const events = trackEvents(features[0], translate);\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerdrag', 50, -40);\n      simulateEvent('pointerup', 50, -40);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Point);\n      expect(geometry.getCoordinates()).to.eql([50, 40]);\n      validateEvents(events, [features[0]]);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"does not move an unselected feature","suites":["ol.interaction.Translate","moving features, with features option"],"updatePoint":{"line":174,"column":43,"index":6280},"line":174,"code":"    it('does not move an unselected feature', function () {\n      const events = trackEvents(features[0], translate);\n      simulateEvent('pointermove', 20, 30);\n      simulateEvent('pointerdown', 20, 30);\n      simulateEvent('pointerdrag', 50, -40);\n      simulateEvent('pointerup', 50, -40);\n      const geometry = features[1].getGeometry();\n      expect(geometry).to.be.a(Point);\n      expect(geometry.getCoordinates()).to.eql([20, -30]);\n      expect(events).to.be.empty();\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"moves only targeted feature","suites":["ol.interaction.Translate","moving features, without features option"],"updatePoint":{"line":192,"column":35,"index":6961},"line":192,"code":"    it('moves only targeted feature', function () {\n      const events = trackEvents(features[0], translate);\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerdrag', 50, -40);\n      simulateEvent('pointerup', 50, -40);\n      expect(features[0].getGeometry().getCoordinates()).to.eql([50, 40]);\n      expect(features[1].getGeometry().getCoordinates()).to.eql([20, -30]);\n      validateEvents(events, [features[0]]);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"moves a filter-passing feature","suites":["ol.interaction.Translate","moving features, with filter option"],"updatePoint":{"line":213,"column":38,"index":7756},"line":213,"code":"    it('moves a filter-passing feature', function () {\n      const events = trackEvents(features[0], translate);\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20);\n      simulateEvent('pointerdrag', 50, -40);\n      simulateEvent('pointerup', 50, -40);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.a(Point);\n      expect(geometry.getCoordinates()).to.eql([50, 40]);\n      validateEvents(events, [features[0]]);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"does not move a filter-discarded feature","suites":["ol.interaction.Translate","moving features, with filter option"],"updatePoint":{"line":224,"column":48,"index":8255},"line":224,"code":"    it('does not move a filter-discarded feature', function () {\n      const events = trackEvents(features[0], translate);\n      simulateEvent('pointermove', 20, 30);\n      simulateEvent('pointerdown', 20, 30);\n      simulateEvent('pointerdrag', 50, -40);\n      simulateEvent('pointerup', 50, -40);\n      const geometry = features[1].getGeometry();\n      expect(geometry).to.be.a(Point);\n      expect(geometry.getCoordinates()).to.eql([20, -30]);\n      expect(events).to.be.empty();\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"moves targeted feature when condition is met","suites":["ol.interaction.Translate","moving features, with condition option"],"updatePoint":{"line":244,"column":52,"index":8992},"line":244,"code":"    it('moves targeted feature when condition is met', function () {\n      const events = trackEvents(features[0], translate);\n      simulateEvent('pointermove', 10, 20);\n      simulateEvent('pointerdown', 10, 20, true);\n      simulateEvent('pointerdrag', 50, -40);\n      simulateEvent('pointerup', 50, -40);\n      expect(features[0].getGeometry().getCoordinates()).to.eql([50, 40]);\n      validateEvents(events, [features[0]]);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"does not move feature when condition is not met","suites":["ol.interaction.Translate","moving features, with condition option"],"updatePoint":{"line":253,"column":55,"index":9432},"line":253,"code":"    it('does not move feature when condition is not met', function () {\n      const events = trackEvents(features[0], translate);\n      simulateEvent('pointermove', 20, 30);\n      simulateEvent('pointerdown', 20, 30);\n      simulateEvent('pointerdrag', 50, -40);\n      simulateEvent('pointerup', 50, -40);\n      expect(features[1].getGeometry().getCoordinates()).to.eql([20, -30]);\n      expect(events).to.be.empty();\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"moves in view projection","suites":["ol.interaction.Translate","moving geometry collection, circle, polygon features"],"updatePoint":{"line":270,"column":32,"index":10072},"line":270,"code":"    it('moves in view projection', function (done) {\n      const feature = new Feature(new GeometryCollection([new Circle([10, -10], 10), new Polygon([[[30, 0], [20, -20], [40, -20], [30, 0]]])]));\n      source.addFeature(feature);\n      map.once('postrender', function () {\n        const events = trackEvents(feature, translate);\n        simulateEvent('pointermove', 10, 20);\n        simulateEvent('pointerdown', 10, 20);\n        simulateEvent('pointerdrag', 50, -40);\n        simulateEvent('pointerup', 50, -40);\n        const geometries = feature.getGeometry().getGeometriesArray();\n        expect(geometries[0].getRadius()).to.equal(10);\n        expect(geometries[0].getCenter()).to.eql([50, 50]);\n        expect(geometries[1].getCoordinates()).to.eql([[[70, 60], [60, 40], [80, 40], [70, 60]]]);\n        validateEvents(events, [feature]);\n        done();\n      });\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"moves in a non-parallel user projection","suites":["ol.interaction.Translate","moving geometry collection, circle, polygon features"],"updatePoint":{"line":287,"column":47,"index":10965},"line":287,"code":"    it('moves in a non-parallel user projection', function (done) {\n      proj4.defs('EPSG:32637', '+proj=utm +zone=37 +datum=WGS84 +units=m +no_defs +type=crs');\n      register(proj4);\n      const userProjection = 'EPSG:32637';\n      setUserProjection(userProjection);\n      const viewProjection = map.getView().getProjection();\n      const feature = new Feature(new GeometryCollection([new Circle([10, -10], 10), new Polygon([[[30, 0], [20, -20], [40, -20], [30, 0]]])]).transform(viewProjection, userProjection));\n      source.addFeature(feature);\n      map.once('postrender', function () {\n        const events = trackEvents(feature, translate);\n        simulateEvent('pointermove', 10, 20);\n        simulateEvent('pointerdown', 10, 20);\n        simulateEvent('pointerdrag', 50, -40);\n        simulateEvent('pointerup', 50, -40);\n        const geometries = feature.getGeometry().getGeometriesArray();\n        const circle = geometries[0].clone().transform(userProjection, viewProjection);\n        expect(circle.getRadius()).to.roughlyEqual(10, 1e-9);\n        const center = circle.getCenter();\n        expect(center[0]).to.roughlyEqual(50, 1e-9);\n        expect(center[1]).to.roughlyEqual(50, 1e-9);\n        const polygon = geometries[1].clone().transform(userProjection, viewProjection);\n        const coordinates = polygon.getCoordinates()[0];\n        expect(coordinates[0][0]).to.roughlyEqual(70, 1e-9);\n        expect(coordinates[0][1]).to.roughlyEqual(60, 1e-9);\n        expect(coordinates[1][0]).to.roughlyEqual(60, 1e-9);\n        expect(coordinates[1][1]).to.roughlyEqual(40, 1e-9);\n        expect(coordinates[2][0]).to.roughlyEqual(80, 1e-9);\n        expect(coordinates[2][1]).to.roughlyEqual(40, 1e-9);\n        expect(coordinates[3][0]).to.equal(coordinates[0][0]);\n        expect(coordinates[3][1]).to.equal(coordinates[0][1]);\n        validateEvents(events, [feature]);\n        done();\n      });\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"changes css cursor","suites":["ol.interaction.Translate","changes css cursor"],"updatePoint":{"line":329,"column":26,"index":13088},"line":329,"code":"    it('changes css cursor', function () {\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(false);\n      simulateEvent('pointermove', 10, 20);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(true);\n      simulateEvent('pointerdown', 10, 20);\n      expect(element.classList.contains('ol-grabbing')).to.be(true);\n      expect(element.classList.contains('ol-grab')).to.be(false);\n      simulateEvent('pointerup', 10, 20);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(true);\n      simulateEvent('pointermove', 0, 0);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(false);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"resets css cursor when interaction is deactivated while pointer is on feature","suites":["ol.interaction.Translate","changes css cursor"],"updatePoint":{"line":345,"column":85,"index":14047},"line":345,"code":"    it('resets css cursor when interaction is deactivated while pointer is on feature', function () {\n      simulateEvent('pointermove', 10, 20);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(true);\n      translate.setActive(false);\n      simulateEvent('pointermove', 0, 0);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(false);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"resets css cursor interaction is removed while pointer is on feature","suites":["ol.interaction.Translate","changes css cursor"],"updatePoint":{"line":354,"column":76,"index":14539},"line":354,"code":"    it('resets css cursor interaction is removed while pointer is on feature', function () {\n      simulateEvent('pointermove', 10, 20);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(true);\n      map.removeInteraction(translate);\n      simulateEvent('pointermove', 0, 0);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(false);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"resets css cursor to existing cursor interaction is removed while pointer is on feature","suites":["ol.interaction.Translate","changes css cursor"],"updatePoint":{"line":363,"column":95,"index":15056},"line":363,"code":"    it('resets css cursor to existing cursor interaction is removed while pointer is on feature', function () {\n      element.style.cursor = 'pointer';\n      simulateEvent('pointermove', 10, 20);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(true);\n      map.removeInteraction(translate);\n      simulateEvent('pointermove', 0, 0);\n      expect(element.classList.contains('ol-grabbing')).to.be(false);\n      expect(element.classList.contains('ol-grab')).to.be(false);\n    });","file":"browser/spec/ol/interaction/translate.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol/layer/Group","constructor (defaults)"],"updatePoint":{"line":23,"column":27,"index":826},"line":23,"code":"    it('creates an instance', function () {\n      expect(group).to.be.a(LayerGroup);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"provides default opacity","suites":["ol/layer/Group","constructor (defaults)"],"updatePoint":{"line":26,"column":32,"index":924},"line":26,"code":"    it('provides default opacity', function () {\n      expect(group.getOpacity()).to.be(1);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"provides default visibility","suites":["ol/layer/Group","constructor (defaults)"],"updatePoint":{"line":29,"column":35,"index":1027},"line":29,"code":"    it('provides default visibility', function () {\n      expect(group.getVisible()).to.be(true);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"provides default layerState","suites":["ol/layer/Group","constructor (defaults)"],"updatePoint":{"line":32,"column":35,"index":1133},"line":32,"code":"    it('provides default layerState', function () {\n      expect(group.getLayerState()).to.eql({\n        layer: group,\n        opacity: 1,\n        visible: true,\n        managed: true,\n        extent: undefined,\n        zIndex: undefined,\n        maxResolution: Infinity,\n        minResolution: 0,\n        minZoom: -Infinity,\n        maxZoom: Infinity\n      });\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"provides default empty layers collection","suites":["ol/layer/Group","constructor (defaults)"],"updatePoint":{"line":46,"column":48,"index":1516},"line":46,"code":"    it('provides default empty layers collection', function () {\n      expect(group.getLayers()).to.be.a(Collection);\n      expect(group.getLayers().getLength()).to.be(0);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched by the group when layer opacity changes","suites":["ol/layer/Group","generic change event"],"updatePoint":{"line":67,"column":61,"index":2105},"line":67,"code":"    it('is dispatched by the group when layer opacity changes', function () {\n      group.on('change', listener);\n      layer.setOpacity(0.5);\n      expect(listener.calledOnce).to.be(true);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched by the group when layer visibility changes","suites":["ol/layer/Group","generic change event"],"updatePoint":{"line":72,"column":64,"index":2306},"line":72,"code":"    it('is dispatched by the group when layer visibility changes', function () {\n      group.on('change', listener);\n      layer.setVisible(false);\n      expect(listener.callCount).to.be(1);\n      layer.setVisible(true);\n      expect(listener.callCount).to.be(2);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched by the group when group opacity changes","suites":["ol/layer/Group","property change event"],"updatePoint":{"line":96,"column":61,"index":2972},"line":96,"code":"    it('is dispatched by the group when group opacity changes', function () {\n      group.on('propertychange', listener);\n      group.setOpacity(0.5);\n      expect(listener.calledOnce).to.be(true);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched by the group when group visibility changes","suites":["ol/layer/Group","property change event"],"updatePoint":{"line":101,"column":64,"index":3181},"line":101,"code":"    it('is dispatched by the group when group visibility changes', function () {\n      group.on('propertychange', listener);\n      group.setVisible(false);\n      expect(listener.callCount).to.be(1);\n      group.setVisible(true);\n      expect(listener.callCount).to.be(2);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"accepts options","suites":["ol/layer/Group","constructor (options)"],"updatePoint":{"line":110,"column":23,"index":3476},"line":110,"code":"    it('accepts options', function () {\n      const layer = new Layer({\n        source: new Source({\n          projection: 'EPSG:4326'\n        })\n      });\n      const group = new LayerGroup({\n        layers: [layer],\n        opacity: 0.5,\n        visible: false,\n        zIndex: 10,\n        maxResolution: 500,\n        minResolution: 0.25,\n        minZoom: 1,\n        maxZoom: 10\n      });\n      expect(group.getOpacity()).to.be(0.5);\n      expect(group.getVisible()).to.be(false);\n      expect(group.getMaxResolution()).to.be(500);\n      expect(group.getMinResolution()).to.be(0.25);\n      expect(group.getMinZoom()).to.be(1);\n      expect(group.getMaxZoom()).to.be(10);\n      expect(group.getLayerState()).to.eql({\n        layer: group,\n        opacity: 0.5,\n        visible: false,\n        managed: true,\n        extent: undefined,\n        zIndex: 10,\n        maxResolution: 500,\n        minResolution: 0.25,\n        minZoom: 1,\n        maxZoom: 10\n      });\n      expect(group.getLayers()).to.be.a(Collection);\n      expect(group.getLayers().getLength()).to.be(1);\n      expect(group.getLayers().item(0)).to.be(layer);\n      disposeHierarchy(group);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"accepts an extent option","suites":["ol/layer/Group","constructor (options)"],"updatePoint":{"line":149,"column":32,"index":4648},"line":149,"code":"    it('accepts an extent option', function () {\n      const layer = new Layer({\n        source: new Source({\n          projection: 'EPSG:4326'\n        })\n      });\n      const groupExtent = [-10, -5, 10, 5];\n      const group = new LayerGroup({\n        layers: [layer],\n        opacity: 0.5,\n        visible: false,\n        extent: groupExtent,\n        maxResolution: 500,\n        minResolution: 0.25\n      });\n      expect(group.getOpacity()).to.be(0.5);\n      expect(group.getVisible()).to.be(false);\n      expect(group.getExtent()).to.eql(groupExtent);\n      expect(group.getMaxResolution()).to.be(500);\n      expect(group.getMinResolution()).to.be(0.25);\n      expect(group.getLayerState()).to.eql({\n        layer: group,\n        opacity: 0.5,\n        visible: false,\n        managed: true,\n        extent: groupExtent,\n        zIndex: undefined,\n        maxResolution: 500,\n        minResolution: 0.25,\n        minZoom: -Infinity,\n        maxZoom: Infinity\n      });\n      expect(group.getLayers()).to.be.a(Collection);\n      expect(group.getLayers().getLength()).to.be(1);\n      expect(group.getLayers().item(0)).to.be(layer);\n      disposeHierarchy(group);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched when a layer is added","suites":["ol/layer/Group","addlayer event"],"updatePoint":{"line":188,"column":43,"index":5875},"line":188,"code":"    it('is dispatched when a layer is added', done => {\n      const group = new LayerGroup();\n      const layer = new Layer({});\n      group.on('addlayer', event => {\n        expect(event.layer).to.be(layer);\n        done();\n      });\n      group.getLayers().push(layer);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched once for each layer added","suites":["ol/layer/Group","addlayer event"],"updatePoint":{"line":197,"column":47,"index":6159},"line":197,"code":"    it('is dispatched once for each layer added', done => {\n      const group = new LayerGroup();\n      const layers = [new Layer({}), new Layer({}), new Layer({})];\n      let count = 0;\n      group.on('addlayer', event => {\n        expect(event.layer).to.be(layers[count]);\n        count++;\n        if (count === layers.length) {\n          done();\n        }\n      });\n      group.getLayers().extend(layers);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched when setLayers is called","suites":["ol/layer/Group","addlayer event"],"updatePoint":{"line":210,"column":46,"index":6575},"line":210,"code":"    it('is dispatched when setLayers is called', done => {\n      const group = new LayerGroup();\n      const layers = [new Layer({}), new Layer({}), new Layer({})];\n      let count = 0;\n      group.on('addlayer', event => {\n        expect(event.layer).to.be(layers[count]);\n        count++;\n        if (count === layers.length) {\n          done();\n        }\n      });\n      group.setLayers(new Collection(layers));\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched when a layer group is added","suites":["ol/layer/Group","addlayer event"],"updatePoint":{"line":223,"column":49,"index":7001},"line":223,"code":"    it('is dispatched when a layer group is added', done => {\n      const group = new LayerGroup();\n      const layer = new LayerGroup();\n      group.on('addlayer', event => {\n        expect(event.layer).to.be(layer);\n        done();\n      });\n      group.getLayers().push(layer);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched for each layer added to a child group","suites":["ol/layer/Group","addlayer event"],"updatePoint":{"line":232,"column":59,"index":7300},"line":232,"code":"    it('is dispatched for each layer added to a child group', done => {\n      const group = new LayerGroup();\n      const child = new LayerGroup();\n      group.getLayers().push(child);\n      const layer = new Layer({});\n      group.on('addlayer', event => {\n        expect(event.layer).to.be(layer);\n        done();\n      });\n      child.getLayers().push(layer);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched for each layer added to a child group configured at construction","suites":["ol/layer/Group","addlayer event"],"updatePoint":{"line":243,"column":86,"index":7698},"line":243,"code":"    it('is dispatched for each layer added to a child group configured at construction', done => {\n      const child = new LayerGroup();\n      const group = new LayerGroup({\n        layers: [child]\n      });\n      const layer = new Layer({});\n      group.on('addlayer', event => {\n        expect(event.layer).to.be(layer);\n        done();\n      });\n      child.getLayers().push(layer);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is not dispatched for layers added to a child group after the child group is removed","suites":["ol/layer/Group","addlayer event"],"updatePoint":{"line":255,"column":92,"index":8098},"line":255,"code":"    it('is not dispatched for layers added to a child group after the child group is removed', done => {\n      const child = new LayerGroup();\n      const group = new LayerGroup({\n        layers: [child]\n      });\n      const layer = new Layer({});\n      group.on('addlayer', event => {\n        done(new Error('unexpected addlayer after group removal'));\n      });\n      group.getLayers().remove(child);\n      child.getLayers().push(layer);\n      setTimeout(done, 10);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched when a layer is removed","suites":["ol/layer/Group","removelayer event"],"updatePoint":{"line":270,"column":45,"index":8574},"line":270,"code":"    it('is dispatched when a layer is removed', done => {\n      const layer = new Layer({});\n      const group = new LayerGroup({\n        layers: [layer]\n      });\n      group.on('removelayer', event => {\n        expect(event.layer).to.be(layer);\n        done();\n      });\n      group.getLayers().remove(layer);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched when a setLayers is called","suites":["ol/layer/Group","removelayer event"],"updatePoint":{"line":281,"column":48,"index":8897},"line":281,"code":"    it('is dispatched when a setLayers is called', done => {\n      const layer = new Layer({});\n      const group = new LayerGroup({\n        layers: [layer]\n      });\n      group.on('removelayer', event => {\n        expect(event.layer).to.be(layer);\n        done();\n      });\n      group.setLayers(new Collection());\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is dispatched when a layer is removed from a child group","suites":["ol/layer/Group","removelayer event"],"updatePoint":{"line":292,"column":64,"index":9238},"line":292,"code":"    it('is dispatched when a layer is removed from a child group', done => {\n      const layer = new Layer({});\n      const child = new LayerGroup({\n        layers: [layer]\n      });\n      const group = new LayerGroup({\n        layers: [child]\n      });\n      group.on('removelayer', event => {\n        expect(event.layer).to.be(layer);\n        done();\n      });\n      child.getLayers().remove(layer);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"is not dispatched when a layer is removed from a child group after child group removal","suites":["ol/layer/Group","removelayer event"],"updatePoint":{"line":306,"column":94,"index":9678},"line":306,"code":"    it('is not dispatched when a layer is removed from a child group after child group removal', done => {\n      const layer = new Layer({});\n      const child = new LayerGroup({\n        layers: [layer]\n      });\n      const group = new LayerGroup({\n        layers: [child]\n      });\n      group.getLayers().remove(child);\n      group.on('removelayer', event => {\n        done(new Error('unexpected removelayer after group removal'));\n      });\n      child.getLayers().remove(layer);\n      setTimeout(done, 10);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"returns a layerState from the properties values","suites":["ol/layer/Group","#getLayerState"],"updatePoint":{"line":330,"column":55,"index":10359},"line":330,"code":"    it('returns a layerState from the properties values', function () {\n      group.setOpacity(0.3);\n      group.setVisible(false);\n      group.setZIndex(10);\n      const groupExtent = [-100, 50, 100, 50];\n      group.setExtent(groupExtent);\n      group.setMaxResolution(500);\n      group.setMinResolution(0.25);\n      group.setMinZoom(5);\n      group.setMaxZoom(10);\n      expect(group.getLayerState()).to.eql({\n        layer: group,\n        opacity: 0.3,\n        visible: false,\n        managed: true,\n        extent: groupExtent,\n        zIndex: 10,\n        maxResolution: 500,\n        minResolution: 0.25,\n        minZoom: 5,\n        maxZoom: 10\n      });\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"returns a layerState with clamped values","suites":["ol/layer/Group","#getLayerState"],"updatePoint":{"line":353,"column":48,"index":11020},"line":353,"code":"    it('returns a layerState with clamped values', function () {\n      group.setOpacity(-1.5);\n      group.setVisible(false);\n      expect(group.getLayerState()).to.eql({\n        layer: group,\n        opacity: 0,\n        visible: false,\n        managed: true,\n        extent: undefined,\n        zIndex: undefined,\n        maxResolution: Infinity,\n        minResolution: 0,\n        minZoom: -Infinity,\n        maxZoom: Infinity\n      });\n      group.setOpacity(3);\n      group.setVisible(true);\n      expect(group.getLayerState()).to.eql({\n        layer: group,\n        opacity: 1,\n        visible: true,\n        managed: true,\n        extent: undefined,\n        zIndex: undefined,\n        maxResolution: Infinity,\n        minResolution: 0,\n        minZoom: -Infinity,\n        maxZoom: Infinity\n      });\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"listen / unlisten for layers added to the collection","suites":["ol/layer/Group","layers events"],"updatePoint":{"line":385,"column":60,"index":11892},"line":385,"code":"    it('listen / unlisten for layers added to the collection', function () {\n      const layers = new Collection();\n      const group = new LayerGroup({\n        layers: layers\n      });\n      expect(Object.keys(group.listenerKeys_).length).to.eql(0);\n      const layer = new Layer({});\n      layers.push(layer);\n      expect(Object.keys(group.listenerKeys_).length).to.eql(1);\n      const listeners = group.listenerKeys_[getUid(layer)];\n      expect(listeners.length).to.eql(2);\n      expect(typeof listeners[0]).to.be('object');\n      expect(typeof listeners[1]).to.be('object');\n\n      // remove the layer from the group\n      layers.pop();\n      expect(Object.keys(group.listenerKeys_).length).to.eql(0);\n      expect(listeners[0].listener).to.be(undefined);\n      expect(listeners[1].listener).to.be(undefined);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"sets layers property","suites":["ol/layer/Group","#setLayers"],"updatePoint":{"line":407,"column":28,"index":12729},"line":407,"code":"    it('sets layers property', function () {\n      const layer = new Layer({\n        source: new Source({\n          projection: 'EPSG:4326'\n        })\n      });\n      const layers = new Collection([layer]);\n      const group = new LayerGroup();\n      group.setLayers(layers);\n      expect(group.getLayers()).to.be(layers);\n      disposeHierarchy(group);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array if no layer","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":449,"column":42,"index":13805},"line":449,"code":"    it('returns an empty array if no layer', function () {\n      const group = new LayerGroup();\n      const layerStatesArray = group.getLayerStatesArray();\n      expect(layerStatesArray).to.be.a(Array);\n      expect(layerStatesArray.length).to.be(0);\n      group.dispose();\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"does not transform layerStates by default","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":456,"column":49,"index":14095},"line":456,"code":"    it('does not transform layerStates by default', function () {\n      const group = new LayerGroup({\n        layers: [layer1, layer2]\n      });\n      const layerStatesArray = group.getLayerStatesArray();\n      expect(layerStatesArray).to.be.a(Array);\n      expect(layerStatesArray.length).to.be(2);\n      expect(layerStatesArray[0]).to.eql(layer1.getLayerState());\n\n      // layer state should match except for layer reference\n      const layerState = Object.assign({}, layerStatesArray[0]);\n      delete layerState.layer;\n      const groupState = Object.assign({}, group.getLayerState());\n      delete groupState.layer;\n      expect(layerState).to.eql(groupState);\n      expect(layerStatesArray[1]).to.eql(layer2.getLayerState());\n      group.dispose();\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"uses the layer group extent if layer has no extent","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":474,"column":58,"index":14869},"line":474,"code":"    it('uses the layer group extent if layer has no extent', function () {\n      const groupExtent = [-10, -5, 10, 5];\n      const group = new LayerGroup({\n        extent: groupExtent,\n        layers: [layer1]\n      });\n      const layerStatesArray = group.getLayerStatesArray();\n      expect(layerStatesArray[0].extent).to.eql(groupExtent);\n      group.dispose();\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"uses the intersection of group and child extent","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":484,"column":55,"index":15239},"line":484,"code":"    it('uses the intersection of group and child extent', function () {\n      const groupExtent = [-10, -5, 10, 5];\n      const group = new LayerGroup({\n        extent: groupExtent,\n        layers: [layer3]\n      });\n      const layerStatesArray = group.getLayerStatesArray();\n      expect(layerStatesArray[0].extent).to.eql(getIntersection(layer3.getExtent(), groupExtent));\n      group.dispose();\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"transforms layerStates correctly","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":494,"column":40,"index":15631},"line":494,"code":"    it('transforms layerStates correctly', function () {\n      const group = new LayerGroup({\n        layers: [layer1, layer2],\n        opacity: 0.5,\n        visible: false,\n        maxResolution: 150,\n        minResolution: 0.2\n      });\n      const layerStatesArray = group.getLayerStatesArray([]);\n\n      // compare layer state to group state\n\n      // layer state should match except for layer reference\n      let layerState = Object.assign({}, layerStatesArray[0]);\n      delete layerState.layer;\n      const groupState = Object.assign({}, group.getLayerState());\n      delete groupState.layer;\n      expect(layerState).to.eql(groupState);\n\n      // layer state should be transformed (and we ignore layer reference)\n      layerState = Object.assign({}, layerStatesArray[1]);\n      delete layerState.layer;\n      expect(layerState).to.eql({\n        opacity: 0.25,\n        visible: false,\n        managed: true,\n        extent: undefined,\n        zIndex: undefined,\n        maxResolution: 150,\n        minResolution: 0.25,\n        minZoom: -Infinity,\n        maxZoom: Infinity\n      });\n      group.dispose();\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"returns max minZoom","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":529,"column":27,"index":16739},"line":529,"code":"    it('returns max minZoom', function () {\n      const group = new LayerGroup({\n        minZoom: 5,\n        layers: [new Layer({\n          source: new Source({\n            projection: 'EPSG:4326'\n          })\n        }), new Layer({\n          source: new Source({\n            projection: 'EPSG:4326'\n          }),\n          minZoom: 10\n        })]\n      });\n      expect(group.getLayerStatesArray()[0].minZoom).to.be(5);\n      expect(group.getLayerStatesArray()[1].minZoom).to.be(10);\n      disposeHierarchy(group);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"returns min maxZoom of layers","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":547,"column":37,"index":17274},"line":547,"code":"    it('returns min maxZoom of layers', function () {\n      const group = new LayerGroup({\n        maxZoom: 5,\n        layers: [new Layer({\n          source: new Source({\n            projection: 'EPSG:4326'\n          })\n        }), new Layer({\n          source: new Source({\n            projection: 'EPSG:4326'\n          }),\n          maxZoom: 2\n        })]\n      });\n      expect(group.getLayerStatesArray()[0].maxZoom).to.be(5);\n      expect(group.getLayerStatesArray()[1].maxZoom).to.be(2);\n      disposeHierarchy(group);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"uses the layer group zIndex if layer has no zIndex","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":565,"column":58,"index":17828},"line":565,"code":"    it('uses the layer group zIndex if layer has no zIndex', function () {\n      const layerM1 = new Layer({\n        zIndex: -1,\n        source: new Source({})\n      });\n      const layerUndefined = new Layer({\n        source: new Source({})\n      });\n      const layer0 = new Layer({\n        zIndex: 0,\n        source: new Source({})\n      });\n      const group = new LayerGroup({\n        zIndex: 2,\n        layers: [layerM1, layerUndefined, layer0]\n      });\n      const layerStatesArray = group.getLayerStatesArray();\n      expect(layerStatesArray[0].zIndex).to.be(-1);\n      expect(layerStatesArray[1].zIndex).to.be(2);\n      expect(layerStatesArray[2].zIndex).to.be(0);\n      disposeHierarchy(group);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"uses the deepest nested group with zIndex as default","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":587,"column":60,"index":18544},"line":587,"code":"    it('uses the deepest nested group with zIndex as default', function () {\n      const group = new LayerGroup({\n        zIndex: 1,\n        layers: [new LayerGroup({\n          zIndex: 5,\n          layers: [new Layer({\n            source: new Source({})\n          })]\n        })]\n      });\n      const layerStatesArray = group.getLayerStatesArray();\n      expect(layerStatesArray[0].zIndex).to.be(5);\n      disposeHierarchy(group);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"uses zIndex of closest parent group where it is not undefined","suites":["ol/layer/Group","#getLayerStatesArray"],"updatePoint":{"line":601,"column":69,"index":18993},"line":601,"code":"    it('uses zIndex of closest parent group where it is not undefined', function () {\n      const group = new LayerGroup({\n        zIndex: 1,\n        layers: [new LayerGroup({\n          layers: [new Layer({\n            source: new Source({})\n          })]\n        })]\n      });\n      const layerStatesArray = group.getLayerStatesArray();\n      expect(layerStatesArray[0].zIndex).to.be(1);\n      disposeHierarchy(group);\n    });","file":"browser/spec/ol/layer/Group.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without arguments","suites":["ol/layer/Heatmap","constructor"],"updatePoint":{"line":33,"column":44,"index":1008},"line":33,"code":"    it('can be constructed without arguments', function () {\n      layer = new HeatmapLayer();\n      expect(layer).to.be.an(HeatmapLayer);\n    });","file":"browser/spec/ol/layer/Heatmap.test.js","skipped":false,"dir":"test"},{"name":"has a default className","suites":["ol/layer/Heatmap","constructor"],"updatePoint":{"line":37,"column":31,"index":1142},"line":37,"code":"    it('has a default className', function () {\n      layer = new HeatmapLayer({\n        source: new VectorSource()\n      });\n      map.addLayer(layer);\n      map.renderSync();\n      const canvas = layer.getRenderer().helper.getCanvas();\n      expect(canvas.className).to.eql('ol-layer');\n    });","file":"browser/spec/ol/layer/Heatmap.test.js","skipped":false,"dir":"test"},{"name":"accepts a custom className","suites":["ol/layer/Heatmap","constructor"],"updatePoint":{"line":46,"column":34,"index":1442},"line":46,"code":"    it('accepts a custom className', function () {\n      layer = new HeatmapLayer({\n        source: new VectorSource(),\n        className: 'a-class-name'\n      });\n      map.addLayer(layer);\n      map.renderSync();\n      const canvas = layer.getRenderer().helper.getCanvas();\n      expect(canvas.className).to.eql('a-class-name');\n    });","file":"browser/spec/ol/layer/Heatmap.test.js","skipped":false,"dir":"test"},{"name":"hit detects two distinct features","suites":["ol/layer/Heatmap","hit detection"],"updatePoint":{"line":58,"column":41,"index":1836},"line":58,"code":"    it('hit detects two distinct features', function (done) {\n      const feature = new Feature({\n        geometry: new Point([0, 0]),\n        id: 1,\n        weight: 10\n      });\n      const feature2 = new Feature({\n        geometry: new Point([14, 14]),\n        id: 2,\n        weight: 10\n      });\n      const source = new VectorSource({\n        features: [feature, feature2]\n      });\n      layer = new HeatmapLayer({\n        source: source,\n        blur: 10,\n        radius: 10\n      });\n      map.addLayer(layer);\n      map.render();\n      function hitTest(coordinate) {\n        const features = map.getFeaturesAtPixel(map.getPixelFromCoordinate(coordinate));\n        return features.length ? features[0] : null;\n      }\n      const renderer = layer.getRenderer();\n      renderer.worker_.addEventListener('message', function (event) {\n        if (!renderer.renderInstructions_) {\n          return;\n        }\n        map.renderSync();\n        let res;\n        res = hitTest([0, 0]);\n        expect(res).to.be(feature);\n        res = hitTest([20, 0]);\n        expect(res).to.be(null);\n        res = hitTest([14, 14]);\n        expect(res).to.be(feature2);\n        res = hitTest([0, 14]);\n        expect(res).to.be(null);\n        done();\n      });\n    });","file":"browser/spec/ol/layer/Heatmap.test.js","skipped":false,"dir":"test"},{"name":"should not detect pixels outside of the layer extent","suites":["ol/layer/Image","getData()"],"updatePoint":{"line":48,"column":60,"index":1464},"line":48,"code":"    it('should not detect pixels outside of the layer extent', () => {\n      map.renderSync();\n      const pixel = [10, 10];\n      const data = layer.getData(pixel);\n      expect(data).to.be(null);\n    });","file":"browser/spec/ol/layer/Image.test.js","skipped":false,"dir":"test"},{"name":"should detect pixels in the layer extent","suites":["ol/layer/Image","getData()"],"updatePoint":{"line":54,"column":48,"index":1658},"line":54,"code":"    it('should detect pixels in the layer extent', () => {\n      map.renderSync();\n      const pixel = [50, 50];\n      const data = layer.getData(pixel);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(255);\n      expect(data[1]).to.be(255);\n      expect(data[2]).to.be(255);\n      expect(data[3]).to.be(255);\n    });","file":"browser/spec/ol/layer/Image.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol/layer/Layer","constructor (defaults)"],"updatePoint":{"line":24,"column":27,"index":958},"line":24,"code":"    it('creates an instance', function () {\n      expect(layer).to.be.a(Layer);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"provides default opacity","suites":["ol/layer/Layer","constructor (defaults)"],"updatePoint":{"line":27,"column":32,"index":1051},"line":27,"code":"    it('provides default opacity', function () {\n      expect(layer.getOpacity()).to.be(1);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"provides default visibility","suites":["ol/layer/Layer","constructor (defaults)"],"updatePoint":{"line":30,"column":35,"index":1154},"line":30,"code":"    it('provides default visibility', function () {\n      expect(layer.getVisible()).to.be(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"provides default max resolution","suites":["ol/layer/Layer","constructor (defaults)"],"updatePoint":{"line":33,"column":39,"index":1264},"line":33,"code":"    it('provides default max resolution', function () {\n      expect(layer.getMaxResolution()).to.be(Infinity);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"provides default min resolution","suites":["ol/layer/Layer","constructor (defaults)"],"updatePoint":{"line":36,"column":39,"index":1384},"line":36,"code":"    it('provides default min resolution', function () {\n      expect(layer.getMinResolution()).to.be(0);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"provides default min zoom","suites":["ol/layer/Layer","constructor (defaults)"],"updatePoint":{"line":39,"column":33,"index":1491},"line":39,"code":"    it('provides default min zoom', function () {\n      expect(layer.getMinZoom()).to.be(-Infinity);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"provides default max zoom","suites":["ol/layer/Layer","constructor (defaults)"],"updatePoint":{"line":42,"column":33,"index":1600},"line":42,"code":"    it('provides default max zoom', function () {\n      expect(layer.getMaxZoom()).to.be(Infinity);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"provides default layerState","suites":["ol/layer/Layer","constructor (defaults)"],"updatePoint":{"line":45,"column":35,"index":1710},"line":45,"code":"    it('provides default layerState', function () {\n      expect(layer.getLayerState()).to.eql({\n        layer: layer,\n        opacity: 1,\n        visible: true,\n        managed: true,\n        extent: undefined,\n        zIndex: undefined,\n        maxResolution: Infinity,\n        minResolution: 0,\n        minZoom: -Infinity,\n        maxZoom: Infinity\n      });\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"accepts options","suites":["ol/layer/Layer","constructor (options)"],"updatePoint":{"line":61,"column":23,"index":2124},"line":61,"code":"    it('accepts options', function () {\n      const layer = new Layer({\n        source: new Source({\n          projection: getProjection('EPSG:4326')\n        }),\n        opacity: 0.5,\n        visible: false,\n        zIndex: 10,\n        maxResolution: 500,\n        minResolution: 0.25,\n        minZoom: 1,\n        maxZoom: 10,\n        foo: 42\n      });\n      expect(layer.getOpacity()).to.be(0.5);\n      expect(layer.getVisible()).to.be(false);\n      expect(layer.getMaxResolution()).to.be(500);\n      expect(layer.getMinResolution()).to.be(0.25);\n      expect(layer.getMinZoom()).to.be(1);\n      expect(layer.getMaxZoom()).to.be(10);\n      expect(layer.get('foo')).to.be(42);\n      expect(layer.getLayerState()).to.eql({\n        layer: layer,\n        opacity: 0.5,\n        visible: false,\n        managed: true,\n        extent: undefined,\n        zIndex: 10,\n        maxResolution: 500,\n        minResolution: 0.25,\n        minZoom: 1,\n        maxZoom: 10\n      });\n      layer.dispose();\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"assigns key-value pairs of `properties` to the object","suites":["ol/layer/Layer","constructor (options)"],"updatePoint":{"line":96,"column":61,"index":3159},"line":96,"code":"    it('assigns key-value pairs of `properties` to the object', function () {\n      const o = new Layer({\n        properties: {\n          foo: 'bar'\n        }\n      });\n      expect(o.get('foo')).to.be('bar');\n      expect(o.get('properties')).to.be(undefined);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"can have a `properties` property","suites":["ol/layer/Layer","constructor (options)"],"updatePoint":{"line":105,"column":40,"index":3408},"line":105,"code":"    it('can have a `properties` property', function () {\n      const o = new Layer({\n        properties: {\n          properties: {\n            foo: 'bar'\n          }\n        }\n      });\n      expect(o.get('properties')).to.eql({\n        foo: 'bar'\n      });\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"throws on non-numeric opacity","suites":["ol/layer/Layer","constructor (options)"],"updatePoint":{"line":117,"column":37,"index":3671},"line":117,"code":"    it('throws on non-numeric opacity', function () {\n      function create() {\n        new Layer({\n          source: new Source({\n            projection: 'EPSG:4326'\n          }),\n          opacity: 'foo'\n        });\n      }\n      expect(create).to.throwException();\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"accepts a custom render function","suites":["ol/layer/Layer","constructor (options)"],"updatePoint":{"line":128,"column":40,"index":3950},"line":128,"code":"    it('accepts a custom render function', function () {\n      let called = false;\n      const layer = new Layer({\n        render: function () {\n          called = true;\n        }\n      });\n      layer.render();\n      expect(called).to.eql(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns a layerState from the properties values","suites":["ol/layer/Layer","#getLayerState"],"updatePoint":{"line":376,"column":55,"index":9558},"line":376,"code":"    it('returns a layerState from the properties values', function () {\n      layer.setOpacity(1 / 3);\n      layer.setVisible(false);\n      layer.setMaxResolution(500);\n      layer.setMinResolution(0.25);\n      layer.setZIndex(10);\n      expect(layer.getLayerState()).to.eql({\n        layer: layer,\n        opacity: 0.33,\n        visible: false,\n        managed: true,\n        extent: undefined,\n        zIndex: 10,\n        maxResolution: 500,\n        minResolution: 0.25,\n        minZoom: -Infinity,\n        maxZoom: Infinity\n      });\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns a layerState with clamped values","suites":["ol/layer/Layer","#getLayerState"],"updatePoint":{"line":395,"column":48,"index":10096},"line":395,"code":"    it('returns a layerState with clamped values', function () {\n      layer.setOpacity(-1.5);\n      layer.setVisible(false);\n      let state = layer.getLayerState();\n      expect(state.opacity).to.be(0);\n      expect(state.visible).to.be(false);\n      layer.setOpacity(3);\n      layer.setVisible(true);\n      state = layer.getLayerState();\n      expect(state.opacity).to.be(1);\n      expect(state.visible).to.be(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns true if the layer is visible","suites":["ol/layer/Layer","#isVisible"],"updatePoint":{"line":422,"column":44,"index":10840},"line":422,"code":"    it('returns true if the layer is visible', function () {\n      layer.setVisible(true);\n      expect(layer.isVisible(view)).to.be(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns false if the layer is not visible","suites":["ol/layer/Layer","#isVisible"],"updatePoint":{"line":426,"column":49,"index":10993},"line":426,"code":"    it('returns false if the layer is not visible', function () {\n      layer.setVisible(false);\n      expect(layer.isVisible(view)).to.be(false);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns false if the layer is not in view","suites":["ol/layer/Layer","#isVisible"],"updatePoint":{"line":430,"column":49,"index":11148},"line":430,"code":"    it('returns false if the layer is not in view', function () {\n      layer.setExtent([15, 47, 16, 48]);\n      view.setZoom(14);\n      expect(layer.isVisible(view)).to.be(false);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns false if the layer is not within zoom range","suites":["ol/layer/Layer","#isVisible"],"updatePoint":{"line":435,"column":59,"index":11347},"line":435,"code":"    it('returns false if the layer is not within zoom range', function () {\n      layer.setMinZoom(2);\n      expect(layer.isVisible(view)).to.be(false);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"works without arguments on layers that are in a map","suites":["ol/layer/Layer","#isVisible"],"updatePoint":{"line":439,"column":59,"index":11508},"line":439,"code":"    it('works without arguments on layers that are in a map', function () {\n      new Map({\n        view: view,\n        layers: [layer]\n      });\n      expect(layer.isVisible()).to.be(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"throws when called without arguments","suites":["ol/layer/Layer","#isVisible"],"updatePoint":{"line":446,"column":44,"index":11692},"line":446,"code":"    it('throws when called without arguments', function () {\n      expect(() => layer.isVisible()).to.throwException();\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns the attributions","suites":["ol/layer/Layer","#getAttributions"],"updatePoint":{"line":469,"column":32,"index":12278},"line":469,"code":"    it('returns the attributions', function () {\n      expect(layer.getAttributions(view)).to.be(attributions);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array when the layer is not visible","suites":["ol/layer/Layer","#getAttributions"],"updatePoint":{"line":472,"column":60,"index":12426},"line":472,"code":"    it('returns an empty array when the layer is not visible', function () {\n      layer.setVisible(false);\n      expect(layer.getAttributions(view)).to.eql([]);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array when the layer is in a hidden group","suites":["ol/layer/Layer","#getAttributions"],"updatePoint":{"line":476,"column":66,"index":12602},"line":476,"code":"    it('returns an empty array when the layer is in a hidden group', function () {\n      new Map({\n        layers: [new Group({\n          layers: [layer],\n          visible: false\n        })],\n        view: view\n      });\n      expect(layer.getAttributions()).to.eql([]);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"gets the layer source","suites":["ol/layer/Layer","#getSource"],"updatePoint":{"line":488,"column":29,"index":12890},"line":488,"code":"    it('gets the layer source', function () {\n      const source = new Source({\n        projection: getProjection('EPSG:4326')\n      });\n      const layer = new Layer({\n        source: source\n      });\n      expect(layer.getSource()).to.be(source);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"sets the layer source","suites":["ol/layer/Layer","#set(\"source\", source)"],"updatePoint":{"line":500,"column":29,"index":13255},"line":500,"code":"    it('sets the layer source', function () {\n      const layer = new Layer({\n        source: new Source({\n          projection: projection\n        })\n      });\n      const source = new Source({\n        projection: projection\n      });\n      layer.set('source', source);\n      expect(layer.getSource()).to.be(source);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"calls changed","suites":["ol/layer/Layer","#set(\"source\", source)"],"updatePoint":{"line":512,"column":21,"index":13573},"line":512,"code":"    it('calls changed', function () {\n      const layer = new Layer({\n        source: new Source({\n          projection: projection\n        })\n      });\n      sinon.spy(layer, 'changed');\n      const source = new Source({\n        projection: projection\n      });\n      layer.set('source', source);\n      expect(layer.changed.calledOnce).to.be(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"sets up event listeners","suites":["ol/layer/Layer","#set(\"source\", source)"],"updatePoint":{"line":525,"column":31,"index":13941},"line":525,"code":"    it('sets up event listeners', function () {\n      sinon.spy(Layer.prototype, 'handleSourceChange_');\n      const first = new Source({\n        projection: projection\n      });\n      const layer = new Layer({\n        source: first\n      });\n      first.setState('ready');\n      expect(layer.handleSourceChange_.calledOnce).to.be(true);\n      const second = new Source({\n        projection: projection\n      });\n      layer.set('source', second);\n      expect(layer.handleSourceChange_.calledOnce).to.be(true);\n      second.setState('ready');\n      expect(layer.handleSourceChange_.callCount).to.be(2);\n\n      // remove spy\n      Layer.prototype.handleSourceChange_.restore();\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"sets the layer source","suites":["ol/layer/Layer","#setSource()"],"updatePoint":{"line":549,"column":29,"index":14723},"line":549,"code":"    it('sets the layer source', function () {\n      const layer = new Layer({\n        source: new Source({\n          projection: projection\n        })\n      });\n      const source = new Source({\n        projection: projection\n      });\n      layer.setSource(source);\n      expect(layer.getSource()).to.be(source);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"calls changed","suites":["ol/layer/Layer","#setSource()"],"updatePoint":{"line":561,"column":21,"index":15037},"line":561,"code":"    it('calls changed', function () {\n      const layer = new Layer({\n        source: new Source({\n          projection: projection\n        })\n      });\n      sinon.spy(layer, 'changed');\n      const source = new Source({\n        projection: projection\n      });\n      layer.setSource(source);\n      expect(layer.changed.calledOnce).to.be(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"sets up event listeners","suites":["ol/layer/Layer","#setSource()"],"updatePoint":{"line":574,"column":31,"index":15401},"line":574,"code":"    it('sets up event listeners', function () {\n      sinon.spy(Layer.prototype, 'handleSourceChange_');\n      const first = new Source({\n        projection: projection\n      });\n      const layer = new Layer({\n        source: first\n      });\n      first.setState('ready');\n      expect(layer.handleSourceChange_.calledOnce).to.be(true);\n      const second = new Source({\n        projection: projection\n      });\n      layer.setSource(second);\n      expect(layer.handleSourceChange_.calledOnce).to.be(true);\n      second.setState('ready');\n      expect(layer.handleSourceChange_.callCount).to.be(2);\n\n      // remove spy\n      Layer.prototype.handleSourceChange_.restore();\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"accepts a positive number","suites":["ol/layer/Layer","#setOpacity"],"updatePoint":{"line":608,"column":33,"index":16367},"line":608,"code":"    it('accepts a positive number', function () {\n      layer.setOpacity(0.3);\n      expect(layer.getOpacity()).to.be(0.3);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"throws on types other than number","suites":["ol/layer/Layer","#setOpacity"],"updatePoint":{"line":612,"column":41,"index":16507},"line":612,"code":"    it('throws on types other than number', function () {\n      function set() {\n        layer.setOpacity('foo');\n      }\n      expect(set).to.throwException();\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"triggers a change event","suites":["ol/layer/Layer","#setOpacity"],"updatePoint":{"line":618,"column":31,"index":16666},"line":618,"code":"    it('triggers a change event', function () {\n      const listener = sinon.spy();\n      layer.on('propertychange', listener);\n      layer.setOpacity(0.4);\n      expect(listener.calledOnce).to.be(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"sets visible property","suites":["ol/layer/Layer","#setVisible"],"updatePoint":{"line":637,"column":29,"index":17158},"line":637,"code":"    it('sets visible property', function () {\n      layer.setVisible(false);\n      expect(layer.getVisible()).to.be(false);\n      layer.setVisible(true);\n      expect(layer.getVisible()).to.be(true);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"fires a change event","suites":["ol/layer/Layer","#setVisible"],"updatePoint":{"line":643,"column":28,"index":17365},"line":643,"code":"    it('fires a change event', function () {\n      const listener = sinon.spy();\n      layer.on('propertychange', listener);\n      layer.setVisible(false);\n      expect(listener.callCount).to.be(1);\n      layer.setVisible(true);\n      expect(listener.callCount).to.be(2);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is called when a layer goes from visible to not visible","suites":["ol/layer/Layer","unrender()"],"updatePoint":{"line":685,"column":63,"index":18464},"line":685,"code":"    it('is called when a layer goes from visible to not visible', () => {\n      const spy = sinon.spy(layer, 'unrender');\n      map.renderSync();\n      expect(spy.callCount).to.be(0);\n      layer.setVisible(false);\n      map.renderSync();\n      expect(spy.callCount).to.be(1);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is called when a layer is removed from the map","suites":["ol/layer/Layer","unrender()"],"updatePoint":{"line":693,"column":54,"index":18740},"line":693,"code":"    it('is called when a layer is removed from the map', () => {\n      const spy = sinon.spy(layer, 'unrender');\n      map.renderSync();\n      expect(spy.callCount).to.be(0);\n      map.removeLayer(layer);\n      map.renderSync();\n      expect(spy.callCount).to.be(1);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is called when a layer goes out of range","suites":["ol/layer/Layer","unrender()"],"updatePoint":{"line":701,"column":48,"index":19009},"line":701,"code":"    it('is called when a layer goes out of range', () => {\n      const spy = sinon.spy(layer, 'unrender');\n      map.renderSync();\n      expect(spy.callCount).to.be(0);\n      layer.setMaxZoom(3);\n      map.getView().setZoom(4);\n      map.renderSync();\n      expect(spy.callCount).to.be(1);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is set when a layer is added to a map","suites":["ol/layer/Layer","map property"],"updatePoint":{"line":712,"column":45,"index":19345},"line":712,"code":"    it('is set when a layer is added to a map', () => {\n      const map = new Map({});\n      const layer = new Layer({});\n      map.addLayer(layer);\n      expect(layer.get(Property.MAP)).to.be(map);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is set when a layer is added to a map in the constructor","suites":["ol/layer/Layer","map property"],"updatePoint":{"line":718,"column":64,"index":19571},"line":718,"code":"    it('is set when a layer is added to a map in the constructor', () => {\n      const layer = new Layer({});\n      const map = new Map({\n        layers: [layer]\n      });\n      expect(layer.get(Property.MAP)).to.be(map);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is set when a layer is added to a group","suites":["ol/layer/Layer","map property"],"updatePoint":{"line":725,"column":47,"index":19784},"line":725,"code":"    it('is set when a layer is added to a group', () => {\n      const layer = new Layer({});\n      const group = new Group();\n      const map = new Map({});\n      map.addLayer(group);\n      group.getLayers().push(layer);\n      expect(layer.get(Property.MAP)).to.be(map);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is set when a layer is added to a group set in the constructor","suites":["ol/layer/Layer","map property"],"updatePoint":{"line":733,"column":70,"index":20086},"line":733,"code":"    it('is set when a layer is added to a group set in the constructor', () => {\n      const layer = new Layer({});\n      const group = new Group();\n      const map = new Map({\n        layers: [group]\n      });\n      group.getLayers().push(layer);\n      expect(layer.get(Property.MAP)).to.be(map);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is set when a layer already added to a group set in the constructor","suites":["ol/layer/Layer","map property"],"updatePoint":{"line":742,"column":75,"index":20397},"line":742,"code":"    it('is set when a layer already added to a group set in the constructor', () => {\n      const layer = new Layer({});\n      const group = new Group({\n        layers: [layer]\n      });\n      const map = new Map({\n        layers: [group]\n      });\n      expect(layer.get(Property.MAP)).to.be(map);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is removed when a layer is removed from the map","suites":["ol/layer/Layer","map property"],"updatePoint":{"line":752,"column":55,"index":20684},"line":752,"code":"    it('is removed when a layer is removed from the map', () => {\n      const map = new Map({});\n      const layer = new Layer({});\n      map.addLayer(layer);\n      expect(layer.get(Property.MAP)).to.be(map);\n      map.removeLayer(layer);\n      expect(layer.get(Property.MAP)).to.be(null);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is removed when a layer added in the constructor is removed from the map","suites":["ol/layer/Layer","map property"],"updatePoint":{"line":760,"column":80,"index":21007},"line":760,"code":"    it('is removed when a layer added in the constructor is removed from the map', () => {\n      const layer = new Layer({});\n      const map = new Map({\n        layers: [layer]\n      });\n      expect(layer.get(Property.MAP)).to.be(map);\n      map.removeLayer(layer);\n      expect(layer.get(Property.MAP)).to.be(null);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is removed when a layer is removed from a group","suites":["ol/layer/Layer","map property"],"updatePoint":{"line":769,"column":55,"index":21309},"line":769,"code":"    it('is removed when a layer is removed from a group', () => {\n      const layer = new Layer({});\n      const group = new Group({\n        layers: [layer]\n      });\n      const map = new Map({\n        layers: [group]\n      });\n      expect(layer.get(Property.MAP)).to.be(map);\n      group.getLayers().remove(layer);\n      expect(layer.get(Property.MAP)).to.be(null);\n    });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"renders the layer","suites":["ol/layer/Layer","#setMap (unmanaged layer)","with map in constructor options"],"updatePoint":{"line":788,"column":27,"index":21855},"line":788,"code":"      it('renders the layer', function () {\n        const layer = new Layer({\n          map: map\n        });\n        const frameState = {\n          layerStatesArray: []\n        };\n        map.dispatchEvent(new RenderEvent('precompose', null, frameState, null));\n        expect(frameState.layerStatesArray.length).to.be(1);\n        const layerState = frameState.layerStatesArray[0];\n        expect(layerState.layer).to.equal(layer);\n      });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"requests a render frame","suites":["ol/layer/Layer","#setMap (unmanaged layer)","setMap sequences"],"updatePoint":{"line":809,"column":33,"index":22544},"line":809,"code":"      it('requests a render frame', function () {\n        const layer = new Layer({});\n        layer.setMap(map);\n        expect(mapRenderSpy.callCount).to.be(1);\n        layer.setMap(null);\n        expect(mapRenderSpy.callCount).to.be(2);\n        layer.setMap(map);\n        expect(mapRenderSpy.callCount).to.be(3);\n      });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"has Infinity as zIndex when not configured otherwise","suites":["ol/layer/Layer","#setMap (unmanaged layer)","zIndex for unmanaged layers"],"updatePoint":{"line":832,"column":62,"index":23227},"line":832,"code":"      it('has Infinity as zIndex when not configured otherwise', function () {\n        map.dispatchEvent(new RenderEvent('precompose', null, frameState, null));\n        const layerState = frameState.layerStatesArray[0];\n        expect(layerState.zIndex).to.be(Infinity);\n      });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"respects the configured zIndex","suites":["ol/layer/Layer","#setMap (unmanaged layer)","zIndex for unmanaged layers"],"updatePoint":{"line":837,"column":40,"index":23486},"line":837,"code":"      it('respects the configured zIndex', function () {\n        [-5, 0, 42].forEach(index => {\n          layer.setZIndex(index);\n          map.dispatchEvent(new RenderEvent('precompose', null, frameState, null));\n          const layerState = frameState.layerStatesArray[0];\n          frameState.layerStatesArray.length = 0;\n          expect(layerState.zIndex).to.be(index);\n        });\n      });","file":"browser/spec/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"lets ol-mapbox-style handle TileJSON URLs","suites":["ol/layer/MapboxVector","TileJSON"],"updatePoint":{"line":7,"column":49,"index":367},"line":7,"code":"    it('lets ol-mapbox-style handle TileJSON URLs', function (done) {\n      const layer = new MapboxVectorLayer({\n        styleUrl: 'data:,' + encodeURIComponent(JSON.stringify({\n          version: 8,\n          sources: {\n            'foo': {\n              url: '/spec/ol/data/tilejson.json',\n              type: 'vector'\n            }\n          },\n          layers: []\n        }))\n      });\n      layer.on('error', function (e) {\n        done(e.error);\n      });\n      const source = layer.getSource();\n      const key = source.on('change', function () {\n        if (source.getState() === 'ready') {\n          unByKey(key);\n          expect(source.getTileUrlFunction()([0, 0, 0])).to.be('http://a.tiles.mapbox.com/v3/mapbox.geography-class/0/0/0.png');\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/layer/MapboxVector.test.js","skipped":false,"dir":"test"},{"name":"accepts minZoom from configuration","suites":["ol/layer/MapboxVector","maxResolution"],"updatePoint":{"line":45,"column":42,"index":1479},"line":45,"code":"    it('accepts minZoom from configuration', function (done) {\n      const layer = new MapboxVectorLayer({\n        minZoom: 5,\n        styleUrl: styleUrl\n      });\n      const source = layer.getSource();\n      source.on('change', function onchange() {\n        if (source.getState() === 'ready') {\n          source.un('change', onchange);\n          expect(layer.getMaxResolution()).to.be(Infinity);\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/layer/MapboxVector.test.js","skipped":false,"dir":"test"},{"name":"uses minZoom from source","suites":["ol/layer/MapboxVector","maxResolution"],"updatePoint":{"line":59,"column":32,"index":1913},"line":59,"code":"    it('uses minZoom from source', function (done) {\n      const layer = new MapboxVectorLayer({\n        styleUrl: styleUrl\n      });\n      layer.on('error', function (e) {\n        done(e.error);\n      });\n      const source = layer.getSource();\n      source.on('change', function onchange() {\n        if (source.getState() === 'ready') {\n          source.un('change', onchange);\n          expect(layer.getMaxResolution()).to.be(source.getTileGrid().getResolution(6));\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/layer/MapboxVector.test.js","skipped":false,"dir":"test"},{"name":"works for styles without background","suites":["ol/layer/MapboxVector","background"],"updatePoint":{"line":90,"column":43,"index":2748},"line":90,"code":"    it('works for styles without background', function (done) {\n      const layer = new MapboxVectorLayer({\n        styleUrl: 'data:,' + encodeURIComponent(JSON.stringify({\n          version: 8,\n          sources: {\n            'foo': {\n              tiles: ['/spec/ol/data/{z}-{x}-{y}.vector.pbf'],\n              type: 'vector'\n            }\n          },\n          layers: [{\n            id: 'landuse',\n            type: 'fill',\n            source: 'foo',\n            'source-layer': 'landuse',\n            paint: {\n              'fill-color': '#ff0000',\n              'fill-opacity': 0.8\n            }\n          }]\n        }))\n      });\n      map.addLayer(layer);\n      layer.getSource().once('change', () => {\n        layer.once('postrender', e => {\n          const pixel = Array.from(e.context.getImageData(0, 0, 1, 1).data);\n          expect(pixel).to.eql([0, 0, 0, 0]);\n          done();\n        });\n      });\n    });","file":"browser/spec/ol/layer/MapboxVector.test.js","skipped":false,"dir":"test"},{"name":"applies correct access token","suites":["ol/layer/MapboxVector","Access token"],"updatePoint":{"line":136,"column":36,"index":4019},"line":136,"code":"    it('applies correct access token', function () {\n      new MapboxVectorLayer({\n        styleUrl: 'mapbox://styles/mapbox/streets-v7',\n        accessToken: '123'\n      });\n      expect(fetchUrl.url).to.be('https://api.mapbox.com/styles/v1/mapbox/streets-v7?&access_token=123');\n    });","file":"browser/spec/ol/layer/MapboxVector.test.js","skipped":false,"dir":"test"},{"name":"applies correct access token from url","suites":["ol/layer/MapboxVector","Access token"],"updatePoint":{"line":143,"column":45,"index":4317},"line":143,"code":"    it('applies correct access token from url', function () {\n      new MapboxVectorLayer({\n        styleUrl: 'foo?key=123'\n      });\n      expect(fetchUrl.url).to.be(`${location.origin}/foo?key=123`);\n    });","file":"browser/spec/ol/layer/MapboxVector.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol/layer/Tile","constructor (defaults)"],"updatePoint":{"line":15,"column":27,"index":486},"line":15,"code":"    it('creates an instance', function () {\n      expect(layer).to.be.a(TileLayer);\n    });","file":"browser/spec/ol/layer/Tile.test.js","skipped":false,"dir":"test"},{"name":"provides default preload","suites":["ol/layer/Tile","constructor (defaults)"],"updatePoint":{"line":18,"column":32,"index":583},"line":18,"code":"    it('provides default preload', function () {\n      expect(layer.getPreload()).to.be(0);\n    });","file":"browser/spec/ol/layer/Tile.test.js","skipped":false,"dir":"test"},{"name":"provides default useInterimTilesOnError","suites":["ol/layer/Tile","constructor (defaults)"],"updatePoint":{"line":21,"column":47,"index":698},"line":21,"code":"    it('provides default useInterimTilesOnError', function () {\n      expect(layer.getUseInterimTilesOnError()).to.be(true);\n    });","file":"browser/spec/ol/layer/Tile.test.js","skipped":false,"dir":"test"},{"name":"gets pixel data","suites":["ol/layer/Tile","getData()"],"updatePoint":{"line":51,"column":23,"index":1494},"line":51,"code":"    it('gets pixel data', () => {\n      const data = layer.getData([50, 50]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(181);\n      expect(data[1]).to.be(208);\n      expect(data[2]).to.be(208);\n      expect(data[3]).to.be(255);\n    });","file":"browser/spec/ol/layer/Tile.test.js","skipped":false,"dir":"test"},{"name":"gets pixel data","suites":["ol/layer/Tile","getData()"],"updatePoint":{"line":60,"column":23,"index":1799},"line":60,"code":"    it('gets pixel data', () => {\n      layer.setVisible(false);\n      map.renderSync();\n      const data = layer.getData([50, 50]);\n      expect(data).to.be(null);\n    });","file":"browser/spec/ol/layer/Tile.test.js","skipped":false,"dir":"test"},{"name":"gets pixel data","suites":["ol/layer/Tile","gutter"],"updatePoint":{"line":98,"column":23,"index":2768},"line":98,"code":"    it('gets pixel data', () => {\n      data = layer.getData([76, 114]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(77);\n      expect(data[1]).to.be(255);\n      expect(data[2]).to.be(77);\n      expect(data[3]).to.be(179);\n      data = layer.getData([76, 118]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(255);\n      expect(data[1]).to.be(77);\n      expect(data[2]).to.be(77);\n      expect(data[3]).to.be(179);\n      data = layer.getData([80, 114]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(255);\n      expect(data[1]).to.be(77);\n      expect(data[2]).to.be(77);\n      expect(data[3]).to.be(179);\n      data = layer.getData([80, 118]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(77);\n      expect(data[1]).to.be(255);\n      expect(data[2]).to.be(77);\n      expect(data[3]).to.be(179);\n    });","file":"browser/spec/ol/layer/Tile.test.js","skipped":false,"dir":"test"},{"name":"sets frameState.animate to false when opacity is 1","suites":["ol/layer/Tile","frameState.animate after tile transition with layer opacity"],"updatePoint":{"line":156,"column":58,"index":4592},"line":156,"code":"    it('sets frameState.animate to false when opacity is 1', function (done) {\n      let lastFrameState;\n      const layer = new TileLayer({\n        opacity: 1,\n        source: new XYZ({\n          url: 'spec/ol/data/osm-0-0-0.png'\n        })\n      });\n      layer.on('postrender', function (event) {\n        lastFrameState = event.frameState;\n      });\n      map.once('rendercomplete', function () {\n        expect(lastFrameState.animate).to.be(false);\n        done();\n      });\n      map.addLayer(layer);\n    });","file":"browser/spec/ol/layer/Tile.test.js","skipped":false,"dir":"test"},{"name":"sets frameState.animate to false when opacity is 0.5","suites":["ol/layer/Tile","frameState.animate after tile transition with layer opacity"],"updatePoint":{"line":173,"column":60,"index":5108},"line":173,"code":"    it('sets frameState.animate to false when opacity is 0.5', function (done) {\n      let lastFrameState;\n      const layer = new TileLayer({\n        opacity: 0.5,\n        source: new XYZ({\n          url: 'spec/ol/data/osm-0-0-0.png'\n        })\n      });\n      layer.on('postrender', function (event) {\n        lastFrameState = event.frameState;\n      });\n      map.once('rendercomplete', function () {\n        expect(lastFrameState.animate).to.be(false);\n        done();\n      });\n      map.addLayer(layer);\n    });","file":"browser/spec/ol/layer/Tile.test.js","skipped":false,"dir":"test"},{"name":"creates a new layer","suites":["ol.layer.Vector","constructor"],"updatePoint":{"line":17,"column":27,"index":909},"line":17,"code":"    it('creates a new layer', function () {\n      const layer = new VectorLayer({\n        source: source\n      });\n      expect(layer).to.be.a(VectorLayer);\n      expect(layer).to.be.a(Layer);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"accepts a style option with a single style","suites":["ol.layer.Vector","constructor"],"updatePoint":{"line":24,"column":50,"index":1133},"line":24,"code":"    it('accepts a style option with a single style', function () {\n      const layer = new VectorLayer({\n        source: source,\n        style: style\n      });\n      const styleFunction = layer.getStyleFunction();\n      expect(styleFunction()).to.eql([style]);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"accepts a style option with an array of styles","suites":["ol.layer.Vector","constructor"],"updatePoint":{"line":32,"column":54,"index":1406},"line":32,"code":"    it('accepts a style option with an array of styles', function () {\n      const layer = new VectorLayer({\n        source: source,\n        style: [style]\n      });\n      const styleFunction = layer.getStyleFunction();\n      expect(styleFunction()).to.eql([style]);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"accepts a style option with a style function","suites":["ol.layer.Vector","constructor"],"updatePoint":{"line":40,"column":52,"index":1679},"line":40,"code":"    it('accepts a style option with a style function', function () {\n      const layer = new VectorLayer({\n        source: source,\n        style: function (feature, resolution) {\n          return [style];\n        }\n      });\n      const styleFunction = layer.getStyleFunction();\n      expect(styleFunction()).to.eql([style]);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"allows the style to be set after construction","suites":["ol.layer.Vector","#setStyle()"],"updatePoint":{"line":59,"column":53,"index":2223},"line":59,"code":"    it('allows the style to be set after construction', function () {\n      layer.setStyle(style);\n      expect(layer.getStyle()).to.be(style);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"dispatches the change event","suites":["ol.layer.Vector","#setStyle()"],"updatePoint":{"line":63,"column":35,"index":2357},"line":63,"code":"    it('dispatches the change event', function (done) {\n      layer.on('change', function () {\n        done();\n      });\n      layer.setStyle(style);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"updates the internal style function","suites":["ol.layer.Vector","#setStyle()"],"updatePoint":{"line":69,"column":43,"index":2523},"line":69,"code":"    it('updates the internal style function', function () {\n      expect(layer.getStyleFunction()).to.be(createDefaultStyle);\n      layer.setStyle(style);\n      expect(layer.getStyleFunction()).not.to.be(createDefaultStyle);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"allows setting an null style","suites":["ol.layer.Vector","#setStyle()"],"updatePoint":{"line":74,"column":36,"index":2749},"line":74,"code":"    it('allows setting an null style', function () {\n      layer.setStyle(null);\n      expect(layer.getStyle()).to.be(null);\n      expect(layer.getStyleFunction()).to.be(undefined);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"sets the default style when passing undefined","suites":["ol.layer.Vector","#setStyle()"],"updatePoint":{"line":79,"column":53,"index":2956},"line":79,"code":"    it('sets the default style when passing undefined', function () {\n      layer.setStyle(style);\n      layer.setStyle(undefined);\n      expect(layer.getStyle()).to.be(createDefaultStyle);\n      expect(layer.getStyleFunction()).to.be(createDefaultStyle);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"returns what is provided to setStyle","suites":["ol.layer.Vector","#getStyle()"],"updatePoint":{"line":89,"column":44,"index":3327},"line":89,"code":"    it('returns what is provided to setStyle', function () {\n      const layer = new VectorLayer({\n        source: source\n      });\n      expect(layer.getStyle()).to.be(createDefaultStyle);\n      layer.setStyle(style);\n      expect(layer.getStyle()).to.be(style);\n      layer.setStyle([style]);\n      expect(layer.getStyle()).to.eql([style]);\n      const styleFunction = function (feature, resolution) {\n        return [style];\n      };\n      layer.setStyle(styleFunction);\n      expect(layer.getStyle()).to.be(styleFunction);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"detects features properly","suites":["ol.layer.Vector","#getFeatures()"],"updatePoint":{"line":124,"column":33,"index":4387},"line":124,"code":"    it('detects features properly', function (done) {\n      const source = new VectorSource({\n        features: [new Feature({\n          geometry: new Point([-1000000, 0]),\n          name: 'feature1'\n        }), new Feature({\n          geometry: new Point([1000000, 0]),\n          name: 'feature2'\n        })]\n      });\n      const feature = new Feature({\n        geometry: new Point([-1000000, 0]),\n        name: 'feature with no size'\n      });\n      const testImage = new ImageStyle({\n        opacity: 1,\n        displacement: []\n      });\n      testImage.getImageState = () => {};\n      testImage.listenImageChange = () => {};\n      testImage.getImageSize = () => {};\n      feature.setStyle([new Style({\n        image: testImage\n      })]);\n      source.addFeature(feature);\n      const layer = new VectorLayer({\n        source\n      });\n      map.addLayer(layer);\n      map.renderSync();\n      const pixel = map.getPixelFromCoordinate([-1000000, 0]);\n      layer.getFeatures(pixel).then(function (features) {\n        expect(features.length).to.equal(1);\n        expect(features[0].get('name')).to.be('feature1');\n        done();\n      });\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"detects zero opacity images","suites":["ol.layer.Vector","#getFeatures()"],"updatePoint":{"line":161,"column":35,"index":5541},"line":161,"code":"    it('detects zero opacity images', function (done) {\n      const source = new VectorSource({\n        features: [new Feature({\n          geometry: new Point([-1000000, 0]),\n          name: 'feature1'\n        }), new Feature({\n          geometry: new Point([1000000, 0]),\n          name: 'feature2'\n        })]\n      });\n      const style = new Style({\n        image: new Icon({\n          src: 'spec/ol/data/dot.png',\n          opacity: 0\n        })\n      });\n      const layer = new VectorLayer({\n        source,\n        style\n      });\n      map.addLayer(layer);\n      map.once('rendercomplete', () => {\n        const pixel = map.getPixelFromCoordinate([-1000000, 0]);\n        layer.getFeatures(pixel).then(function (features) {\n          expect(features.length).to.equal(1);\n          expect(features[0].get('name')).to.be('feature1');\n          done();\n        });\n      });\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"detects feature styles when layer style is null","suites":["ol.layer.Vector","#getFeatures()"],"updatePoint":{"line":191,"column":55,"index":6449},"line":191,"code":"    it('detects feature styles when layer style is null', function (done) {\n      const source = new VectorSource({\n        features: [new Feature({\n          geometry: new Point([-1000000, 0]),\n          name: 'feature1'\n        }), new Feature({\n          geometry: new Point([1000000, 0]),\n          name: 'feature2'\n        })]\n      });\n      const style = new Style({\n        image: new Icon({\n          src: 'spec/ol/data/dot.png',\n          opacity: 0\n        })\n      });\n      source.forEachFeature(feature => {\n        feature.setStyle(style);\n      });\n      const layer = new VectorLayer({\n        source,\n        style: null\n      });\n      map.addLayer(layer);\n      map.once('rendercomplete', () => {\n        const pixel = map.getPixelFromCoordinate([-1000000, 0]);\n        layer.getFeatures(pixel).then(function (features) {\n          expect(features.length).to.equal(1);\n          expect(features[0].get('name')).to.be('feature1');\n          done();\n        });\n      });\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"hits lines even if they are dashed","suites":["ol.layer.Vector","#getFeatures()"],"updatePoint":{"line":224,"column":42,"index":7434},"line":224,"code":"    it('hits lines even if they are dashed', function (done) {\n      const geometry = new LineString([[-1e6, 0], [1e6, 0]]);\n      const feature = new Feature(geometry);\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [feature]\n        }),\n        style: new Style({\n          stroke: new Stroke({\n            color: 'black',\n            width: 8,\n            lineDash: [10, 20]\n          })\n        })\n      });\n      map.addLayer(layer);\n      map.renderSync();\n      const pixel = map.getPixelFromCoordinate([0, 0]);\n      layer.getFeatures(pixel).then(function (features) {\n        expect(features.length).to.equal(1);\n        expect(features[0]).to.be(feature);\n        done();\n      }, done).catch(done);\n    });","file":"browser/spec/ol/layer/vector.test.js","skipped":false,"dir":"test"},{"name":"detects features properly","suites":["ol/layer/VectorImage","#getFeatures()"],"updatePoint":{"line":39,"column":33,"index":1318},"line":39,"code":"    it('detects features properly', function (done) {\n      map.renderSync();\n      const pixel = map.getPixelFromCoordinate([-1000000, 0]);\n      layer.getFeatures(pixel).then(function (features) {\n        expect(features[0].get('name')).to.be('feature1');\n        done();\n      });\n    });","file":"browser/spec/ol/layer/vectorimage.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol.layer.VectorTile","constructor (defaults)"],"updatePoint":{"line":26,"column":27,"index":1204},"line":26,"code":"    it('creates an instance', function () {\n      expect(layer).to.be.a(VectorTileLayer);\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"provides default preload","suites":["ol.layer.VectorTile","constructor (defaults)"],"updatePoint":{"line":29,"column":32,"index":1307},"line":29,"code":"    it('provides default preload', function () {\n      expect(layer.getPreload()).to.be(0);\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"provides default useInterimTilesOnError","suites":["ol.layer.VectorTile","constructor (defaults)"],"updatePoint":{"line":32,"column":47,"index":1422},"line":32,"code":"    it('provides default useInterimTilesOnError', function () {\n      expect(layer.getUseInterimTilesOnError()).to.be(true);\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"provides default renderMode","suites":["ol.layer.VectorTile","constructor (defaults)"],"updatePoint":{"line":35,"column":35,"index":1543},"line":35,"code":"    it('provides default renderMode', function () {\n      expect(layer.getRenderMode()).to.be('hybrid');\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"works with options","suites":["ol.layer.VectorTile","constructor (options)"],"updatePoint":{"line":40,"column":26,"index":1703},"line":40,"code":"    it('works with options', function () {\n      let layer = new VectorTileLayer({\n        renderMode: 'hybrid',\n        source: new VectorTileSource({})\n      });\n      expect(layer.getRenderMode()).to.be('hybrid');\n      expect(function () {\n        layer = new VectorTileLayer({\n          renderMode: 'foo',\n          source: new VectorTileSource({})\n        });\n      }).to.throwException();\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"detects features properly","suites":["ol.layer.VectorTile","#getFeatures()"],"updatePoint":{"line":106,"column":33,"index":3591},"line":106,"code":"    it('detects features properly', function (done) {\n      map.once('rendercomplete', function () {\n        const pixel = map.getPixelFromCoordinate(fromLonLat([-36, 0]));\n        layer.getFeatures(pixel).then(function (features) {\n          expect(features[0].get('name')).to.be('feature1');\n          done();\n        }).catch(done);\n      });\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"does not give false positives","suites":["ol.layer.VectorTile","#getFeatures()"],"updatePoint":{"line":115,"column":37,"index":3949},"line":115,"code":"    it('does not give false positives', function (done) {\n      map.once('rendercomplete', function () {\n        const pixel = map.getPixelFromCoordinate(fromLonLat([0, 0]));\n        layer.getFeatures(pixel).then(function (features) {\n          expect(features.length).to.be(0);\n          done();\n        }).catch(done);\n      });\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"stores separate hit detection data for each layer that uses the source","suites":["ol.layer.VectorTile","#getFeatures()"],"updatePoint":{"line":124,"column":78,"index":4329},"line":124,"code":"    it('stores separate hit detection data for each layer that uses the source', function (done) {\n      const layer2 = new VectorTileLayer({\n        source: layer.getSource()\n      });\n      map.addLayer(layer2);\n      map.once('rendercomplete', function () {\n        const pixel = map.getPixelFromCoordinate(fromLonLat([-36, 0]));\n        Promise.all([layer.getFeatures(pixel), layer2.getFeatures(pixel)]).then(function (result) {\n          const tile = layer.getSource().tileCache.get('0/0/0');\n          expect(Object.keys(tile.hitDetectionImageData).length).to.be(2);\n          done();\n        }).catch(done);\n      });\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"sets ready property to false when icons are loading","suites":["ol.layer.VectorTile","#renderFrame"],"updatePoint":{"line":144,"column":59,"index":5094},"line":144,"code":"    it('sets ready property to false when icons are loading', function (done) {\n      const zoom = 1;\n      const tileSize = 32;\n      const projection = getProjection('EPSG:3857');\n      const tileGrid = createXYZ({\n        tileSize: tileSize\n      });\n      const resolution = tileGrid.getResolution(zoom);\n      layer = new VectorTileLayer({\n        renderBuffer: 0,\n        source: new VectorTileSource({\n          tileSize: tileSize,\n          tileUrlFunction: tileCoord => tileCoord.join('/'),\n          tileLoadFunction: function (tile, url) {\n            const coordinate = tileGrid.getTileCoordCenter(tile.getTileCoord());\n            tile.setFeatures([new Feature(new Point(coordinate))]);\n          }\n        }),\n        style: new Style({\n          image: new Icon({\n            src: 'data:image/svg+xml;base64,' + window.btoa(`<svg width=\"10\" height=\"10\" viewBox=\"0 0 1 1\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect x=\"0\" y=\"0\" width=\"1\" height=\"1\"/>\n              </svg>`)\n          })\n        })\n      });\n      const renderer = layer.getRenderer();\n      const frameState = /** @type {import(\"../../../../../src/ol/Map.js\").FrameState} */{\n        pixelRatio: 1,\n        viewState: {\n          zoom: zoom,\n          resolution: resolution,\n          center: [0, 0],\n          rotation: 0,\n          projection: projection\n        },\n        size: [2 * tileSize, 2 * tileSize],\n        extent: [-tileSize, -tileSize, tileSize, tileSize].map(n => n * resolution),\n        viewHints: [0, 0],\n        layerStatesArray: layer.getLayerStatesArray(),\n        layerIndex: 0,\n        wantedTiles: {},\n        usedTiles: {},\n        tileQueue: {\n          isKeyQueued: () => true\n        },\n        pixelToCoordinateTransform: createTransform()\n      };\n      renderer.renderFrame(frameState);\n      // Tiles not yet loaded, no icon queued\n      expect(renderer.ready).to.be(true);\n      const source = layer.getSource();\n      const wantedTiles = frameState.wantedTiles[getUid(source)];\n      expect(isEmpty(wantedTiles)).to.be(false);\n\n      // Tiles are loaded synchronously\n      source.tileCache.forEach(tile => tile.load());\n      renderer.renderFrame(frameState);\n      // Tiles loaded, waiting for icon\n      expect(renderer.ready).to.be(false);\n      layer.getStyle().getImage().listenImageChange(function (evt) {\n        if (evt.target.getImageState() !== ImageState.LOADED) {\n          return;\n        }\n        try {\n          renderer.renderFrame(frameState);\n          // Tiles and icon loaded\n          expect(renderer.ready).to.be(true);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });","file":"browser/spec/ol/layer/vectortile.test.js","skipped":false,"dir":"test"},{"name":"retrieves pixel data","suites":["ol/layer/WebGLTile","getData()"],"updatePoint":{"line":77,"column":28,"index":2391},"line":77,"code":"    it('retrieves pixel data', done => {\n      const layer = new WebGLTileLayer({\n        source: new DataTileSource({\n          tileSize: 1,\n          tileGrid: createXYZ(),\n          loader(z, x, y) {\n            return new Uint8Array([5, 4, 3, 2, 1]);\n          }\n        })\n      });\n      map.addLayer(layer);\n      map.once('rendercomplete', () => {\n        const data = layer.getData([50, 25]);\n        expect(data).to.be.a(Uint8Array);\n        expect(data.length).to.be(5);\n        expect(data[0]).to.be(5);\n        expect(data[1]).to.be(4);\n        expect(data[2]).to.be(3);\n        expect(data[3]).to.be(2);\n        expect(data[4]).to.be(1);\n        done();\n      });\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"retrieves pixel data from pyramid","suites":["ol/layer/WebGLTile","getData()"],"updatePoint":{"line":100,"column":41,"index":3090},"line":100,"code":"    it('retrieves pixel data from pyramid', done => {\n      const pyramidGrid = createXYZ({\n        minZoom: 1,\n        maxZoom: 1\n      });\n      const layer = new WebGLTileLayer({\n        sources: sourcesFromTileGrid(pyramidGrid, ([z1, x1, y1]) => new DataTileSource({\n          tileSize: 1,\n          tileGrid: createXYZ({\n            extent: pyramidGrid.getTileCoordExtent([z1, x1, y1]),\n            minZoom: 1,\n            maxZoom: 1\n          }),\n          loader(z2, x2, y2) {\n            return new Uint8Array([x1, y1, x2, y2]);\n          }\n        }))\n      });\n      map.addLayer(layer);\n      map.once('rendercomplete', () => {\n        let data;\n        data = layer.getData([25, 25]);\n        expect(data).to.be.a(Uint8Array);\n        expect(data.length).to.be(4);\n        expect(data[0]).to.be(0);\n        expect(data[1]).to.be(0);\n        expect(data[2]).to.be(1);\n        expect(data[3]).to.be(1);\n        data = layer.getData([75, 25]);\n        expect(data).to.be.a(Uint8Array);\n        expect(data.length).to.be(4);\n        expect(data[0]).to.be(1);\n        expect(data[1]).to.be(0);\n        expect(data[2]).to.be(0);\n        expect(data[3]).to.be(1);\n        data = layer.getData([25, 75]);\n        expect(data).to.be.a(Uint8Array);\n        expect(data.length).to.be(4);\n        expect(data[0]).to.be(0);\n        expect(data[1]).to.be(1);\n        expect(data[2]).to.be(1);\n        expect(data[3]).to.be(0);\n        data = layer.getData([75, 75]);\n        expect(data).to.be.a(Uint8Array);\n        expect(data.length).to.be(4);\n        expect(data[0]).to.be(1);\n        expect(data[1]).to.be(1);\n        expect(data[2]).to.be(0);\n        expect(data[3]).to.be(0);\n        done();\n      });\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"preserves the original data type","suites":["ol/layer/WebGLTile","getData()"],"updatePoint":{"line":152,"column":40,"index":4804},"line":152,"code":"    it('preserves the original data type', done => {\n      const layer = new WebGLTileLayer({\n        source: new DataTileSource({\n          tileSize: 1,\n          tileGrid: createXYZ(),\n          loader(z, x, y) {\n            return new Float32Array([1.11, 2.22, 3.33, 4.44, 5.55]);\n          }\n        })\n      });\n      map.addLayer(layer);\n      map.once('rendercomplete', () => {\n        const data = layer.getData([50, 25]);\n        expect(data).to.be.a(Float32Array);\n        expect(data.length).to.be(5);\n        expect(data[0]).to.roughlyEqual(1.11, 1e-5);\n        expect(data[1]).to.roughlyEqual(2.22, 1e-5);\n        expect(data[2]).to.roughlyEqual(3.33, 1e-5);\n        expect(data[3]).to.roughlyEqual(4.44, 1e-5);\n        expect(data[4]).to.roughlyEqual(5.55, 1e-5);\n        done();\n      });\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"gets pixel data","suites":["ol/layer/WebGLTile","gutter"],"updatePoint":{"line":207,"column":23,"index":6400},"line":207,"code":"    it('gets pixel data', () => {\n      data = layer.getData([76, 114]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(77);\n      expect(data[1]).to.be(255);\n      expect(data[2]).to.be(77);\n      expect(data[3]).to.be(179);\n      data = layer.getData([76, 118]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(255);\n      expect(data[1]).to.be(77);\n      expect(data[2]).to.be(77);\n      expect(data[3]).to.be(179);\n      data = layer.getData([80, 114]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(255);\n      expect(data[1]).to.be(77);\n      expect(data[2]).to.be(77);\n      expect(data[3]).to.be(179);\n      data = layer.getData([80, 118]);\n      expect(data).to.be.a(Uint8ClampedArray);\n      expect(data.length).to.be(4);\n      expect(data[0]).to.be(77);\n      expect(data[1]).to.be(255);\n      expect(data[2]).to.be(77);\n      expect(data[3]).to.be(179);\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"calls dispose on the renderer","suites":["ol/layer/WebGLTile","dispose()"],"updatePoint":{"line":239,"column":37,"index":7518},"line":239,"code":"    it('calls dispose on the renderer', () => {\n      const renderer = layer.getRenderer();\n      const spy = sinon.spy(renderer, 'dispose');\n      layer.dispose();\n      expect(spy.called).to.be(true);\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"updates the size of the tile cache on the source ","suites":["ol/layer/WebGLTile","caching"],"updatePoint":{"line":247,"column":57,"index":7785},"line":247,"code":"    it('updates the size of the tile cache on the source ', done => {\n      const source = new OSM();\n      const spy = sinon.spy(source, 'updateCacheSize');\n      const layer = new WebGLTileLayer({\n        source: source\n      });\n      map.addLayer(layer);\n      map.once('rendercomplete', () => {\n        expect(spy.called).to.be(true);\n        done();\n      });\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"creates fragment and vertex shaders","suites":["ol/layer/WebGLTile","caching"],"updatePoint":{"line":260,"column":41,"index":8149},"line":260,"code":"  it('creates fragment and vertex shaders', function () {\n    const compileShaderSpy = sinon.spy(WebGLHelper.prototype, 'compileShader');\n    const renderer = layer.getRenderer();\n    const viewState = map.getView().getState();\n    const size = map.getSize();\n    const frameState = {\n      viewState: viewState,\n      extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n      layerStatesArray: map.getLayerGroup().getLayerStatesArray(),\n      layerIndex: 0\n    };\n    renderer.prepareFrame(frameState);\n    compileShaderSpy.restore();\n    expect(compileShaderSpy.callCount).to.be(2);\n    expect(compileShaderSpy.getCall(0).args[0].replace(/[ \\n]+/g, ' ')).to.be(`\n      #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      #else\n      precision mediump float;\n      #endif\n\n      varying vec2 v_textureCoord;\n      varying vec2 v_mapCoord;\n\n      uniform vec4 u_renderExtent;\n      uniform float u_transitionAlpha;\n      uniform float u_texturePixelWidth;\n      uniform float u_texturePixelHeight;\n      uniform float u_resolution;\n      uniform float u_zoom;\n      uniform float u_var_r;\n      uniform float u_var_g;\n      uniform float u_var_b;\n      uniform sampler2D u_tileTextures[1];\n\n      void main() {\n        if (\n          v_mapCoord[0] < u_renderExtent[0] ||\n          v_mapCoord[1] < u_renderExtent[1] ||\n          v_mapCoord[0] > u_renderExtent[2] ||\n          v_mapCoord[1] > u_renderExtent[3]\n        ) {\n          discard;\n        }\n        vec4 color = texture2D(u_tileTextures[0], v_textureCoord);\n        color = vec4(u_var_r / 255.0, u_var_g / 255.0, u_var_b / 255.0, 1.0);\n        gl_FragColor = color;\n        gl_FragColor.rgb *= gl_FragColor.a;\n        gl_FragColor *= u_transitionAlpha;\n      }`.replace(/[ \\n]+/g, ' '));\n    expect(compileShaderSpy.getCall(1).args[0].replace(/[ \\n]+/g, ' ')).to.be(`\n      attribute vec2 a_textureCoord;\n\n      uniform mat4 u_tileTransform;\n      uniform float u_texturePixelWidth;\n      uniform float u_texturePixelHeight;\n      uniform float u_textureResolution;\n      uniform float u_textureOriginX;\n      uniform float u_textureOriginY;\n      uniform float u_depth;\n\n      varying vec2 v_textureCoord;\n      varying vec2 v_mapCoord;\n\n      void main() {\n        v_textureCoord = a_textureCoord;\n        v_mapCoord = vec2(\n          u_textureOriginX + u_textureResolution * u_texturePixelWidth * v_textureCoord[0],\n          u_textureOriginY - u_textureResolution * u_texturePixelHeight * v_textureCoord[1]\n        );\n        gl_Position = u_tileTransform * vec4(a_textureCoord, u_depth, 1.0);\n      }\n      `.replace(/[ \\n]+/g, ' '));\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"adds a getBandValue function to the fragment shaders","suites":["ol/layer/WebGLTile","caching"],"updatePoint":{"line":334,"column":58,"index":10829},"line":334,"code":"  it('adds a getBandValue function to the fragment shaders', function () {\n    const max = 3000;\n    function normalize(value) {\n      return ['/', value, max];\n    }\n    const red = normalize(['band', 1]);\n    const green = normalize(['band', 2]);\n    const nir = normalize(['band', 4]);\n    layer.setStyle({\n      color: ['array', nir, red, green, 1]\n    });\n    const compileShaderSpy = sinon.spy(WebGLHelper.prototype, 'compileShader');\n    const renderer = layer.getRenderer();\n    const viewState = map.getView().getState();\n    const size = map.getSize();\n    const frameState = {\n      viewState: viewState,\n      extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n      layerStatesArray: map.getLayerGroup().getLayerStatesArray(),\n      layerIndex: 0\n    };\n    renderer.prepareFrame(frameState);\n    compileShaderSpy.restore();\n    expect(compileShaderSpy.callCount).to.be(2);\n    expect(compileShaderSpy.getCall(0).args[0].replace(/[ \\n]+/g, ' ')).to.be(`\n      #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      #else\n      precision mediump float;\n      #endif varying vec2 v_textureCoord;\n\n      varying vec2 v_mapCoord;\n\n      uniform vec4 u_renderExtent;\n      uniform float u_transitionAlpha;\n      uniform float u_texturePixelWidth;\n      uniform float u_texturePixelHeight;\n      uniform float u_resolution;\n      uniform float u_zoom;\n      uniform sampler2D u_tileTextures[1];\n\n      float getBandValue(float band, float xOffset, float yOffset) {\n        float dx = xOffset / u_texturePixelWidth;\n        float dy = yOffset / u_texturePixelHeight;\n        if (band == 1.0) {\n          return texture2D(u_tileTextures[0], v_textureCoord + vec2(dx, dy))[0];\n        }\n        if (band == 2.0) {\n          return texture2D(u_tileTextures[0], v_textureCoord + vec2(dx, dy))[1];\n        }\n        if (band == 3.0) {\n          return texture2D(u_tileTextures[0], v_textureCoord + vec2(dx, dy))[2];\n        }\n        if (band == 4.0) {\n          return texture2D(u_tileTextures[0], v_textureCoord + vec2(dx, dy))[3];\n        }\n      }\n\n      void main() {\n        if (\n          v_mapCoord[0] < u_renderExtent[0] ||\n          v_mapCoord[1] < u_renderExtent[1] ||\n          v_mapCoord[0] > u_renderExtent[2] ||\n          v_mapCoord[1] > u_renderExtent[3]\n        ) {\n          discard;\n        }\n        vec4 color = texture2D(u_tileTextures[0], v_textureCoord);\n        color = vec4((getBandValue(4.0, 0.0, 0.0) / 3000.0), (getBandValue(1.0, 0.0, 0.0) / 3000.0), (getBandValue(2.0, 0.0, 0.0) / 3000.0), 1.0);\n        gl_FragColor = color;\n        gl_FragColor.rgb *= gl_FragColor.a;\n        gl_FragColor *= u_transitionAlpha;\n      }`.replace(/[ \\n]+/g, ' '));\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"updates style variables","suites":["ol/layer/WebGLTile","updateStyleVariables()"],"updatePoint":{"line":409,"column":31,"index":13594},"line":409,"code":"    it('updates style variables', function (done) {\n      layer.updateStyleVariables({\n        r: 255,\n        g: 0,\n        b: 255\n      });\n      expect(layer.styleVariables_['r']).to.be(255);\n      const targetContext = createCanvasContext2D(100, 100);\n      layer.on('postrender', () => {\n        targetContext.clearRect(0, 0, 100, 100);\n        targetContext.drawImage(target.querySelector('.testlayer'), 0, 0);\n      });\n      map.once('rendercomplete', () => {\n        expect(Array.from(targetContext.getImageData(0, 0, 1, 1).data)).to.eql([255, 0, 255, 255]);\n        done();\n      });\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"can be called before the layer is rendered","suites":["ol/layer/WebGLTile","updateStyleVariables()"],"updatePoint":{"line":426,"column":50,"index":14215},"line":426,"code":"    it('can be called before the layer is rendered', function () {\n      layer = new WebGLTileLayer({\n        style: {\n          variables: {\n            foo: 'bar'\n          }\n        },\n        source: new DataTileSource({\n          loader(z, x, y) {\n            return new Promise(resolve => {\n              resolve(new ImageData(256, 256).data);\n            });\n          }\n        })\n      });\n      layer.updateStyleVariables({\n        foo: 'bam'\n      });\n      expect(layer.styleVariables_.foo).to.be('bam');\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"can be called even if no initial variables are provided","suites":["ol/layer/WebGLTile","updateStyleVariables()"],"updatePoint":{"line":446,"column":63,"index":14753},"line":446,"code":"    it('can be called even if no initial variables are provided', function () {\n      const layer = new WebGLTileLayer({\n        source: new DataTileSource({\n          loader(z, x, y) {\n            return new Promise(resolve => {\n              resolve(new ImageData(256, 256).data);\n            });\n          }\n        })\n      });\n      layer.updateStyleVariables({\n        foo: 'bam'\n      });\n      expect(layer.styleVariables_.foo).to.be('bam');\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"also works after setStyle()","suites":["ol/layer/WebGLTile","updateStyleVariables()"],"updatePoint":{"line":461,"column":35,"index":15183},"line":461,"code":"    it('also works after setStyle()', function (done) {\n      const layer = new WebGLTileLayer({\n        className: 'testlayer2',\n        source: new DataTileSource({\n          loader(z, x, y) {\n            return new Promise(resolve => {\n              resolve(new ImageData(256, 256).data);\n            });\n          }\n        })\n      });\n      map.addLayer(layer);\n      layer.setStyle({\n        variables: {\n          r: 0,\n          g: 255,\n          b: 0\n        },\n        color: ['color', ['var', 'r'], ['var', 'g'], ['var', 'b']]\n      });\n      map.renderSync();\n      layer.updateStyleVariables({\n        r: 255,\n        g: 0,\n        b: 255\n      });\n      expect(layer.styleVariables_['r']).to.be(255);\n      const targetContext = createCanvasContext2D(100, 100);\n      layer.on('postrender', () => {\n        targetContext.clearRect(0, 0, 100, 100);\n        targetContext.drawImage(target.querySelector('.testlayer2'), 0, 0);\n      });\n      map.once('rendercomplete', () => {\n        expect(Array.from(targetContext.getImageData(0, 0, 1, 1).data)).to.eql([255, 0, 255, 255]);\n        done();\n      });\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"can determine the correct band count for static sources array","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":500,"column":69,"index":16386},"line":500,"code":"    it('can determine the correct band count for static sources array', () => {\n      const layer = new WebGLTileLayer({\n        sources: [new DataTileSource({\n          bandCount: 7\n        })]\n      });\n      expect(layer.getSourceBandCount_()).to.be(7);\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"can determine the correct band count for sources function","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":508,"column":65,"index":16647},"line":508,"code":"    it('can determine the correct band count for sources function', () => {\n      const layer = new WebGLTileLayer({\n        sources: sourcesFromTileGrid(createXYZ(), ([z, x, y]) => new DataTileSource({\n          bandCount: 7\n        }))\n      });\n      expect(layer.getSourceBandCount_()).to.be(7);\n    });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"dispatches a precompose event with WebGL context","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":517,"column":54,"index":16950},"line":517,"code":"  it('dispatches a precompose event with WebGL context', done => {\n    let called = false;\n    layer.on('precompose', event => {\n      expect(event.context).to.be.a(WebGLRenderingContext);\n      called = true;\n    });\n    map.once('rendercomplete', () => {\n      expect(called).to.be(true);\n      done();\n    });\n    map.render();\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"dispatches a prerender event with WebGL context and inverse pixel transform","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":529,"column":81,"index":17314},"line":529,"code":"  it('dispatches a prerender event with WebGL context and inverse pixel transform', done => {\n    let called = false;\n    layer.on('prerender', event => {\n      expect(event.context).to.be.a(WebGLRenderingContext);\n      const mapSize = event.frameState.size;\n      const bottomLeft = getRenderPixel(event, [0, mapSize[1]]);\n      expect(bottomLeft).to.eql([0, 0]);\n      called = true;\n    });\n    map.once('rendercomplete', () => {\n      expect(called).to.be(true);\n      done();\n    });\n    map.render();\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"dispatches a postrender event with WebGL context and inverse pixel transform","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":544,"column":82,"index":17829},"line":544,"code":"  it('dispatches a postrender event with WebGL context and inverse pixel transform', done => {\n    let called = false;\n    layer.on('postrender', event => {\n      expect(event.context).to.be.a(WebGLRenderingContext);\n      const mapSize = event.frameState.size;\n      const topRight = getRenderPixel(event, [mapSize[1], 0]);\n      const pixelRatio = event.frameState.pixelRatio;\n      expect(topRight).to.eql([mapSize[0] * pixelRatio, mapSize[1] * pixelRatio]);\n      called = true;\n    });\n    map.once('rendercomplete', () => {\n      expect(called).to.be(true);\n      done();\n    });\n    map.render();\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"tries to expire the source tile cache","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":560,"column":43,"index":18400},"line":560,"code":"  it('tries to expire the source tile cache', done => {\n    const source = layer.getSource();\n    const expire = sinon.spy(source, 'expireCache');\n    layer.updateStyleVariables({\n      r: 1,\n      g: 2,\n      b: 3\n    });\n    map.once('rendercomplete', () => {\n      expect(expire.called).to.be(true);\n      done();\n    });\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"throws on incorrect style configs","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":573,"column":39,"index":18727},"line":573,"code":"  it('throws on incorrect style configs', function () {\n    function incorrectStyle() {\n      layer.style_ = {\n        variables: {\n          'red': 25,\n          'green': 200\n        },\n        exposure: 0,\n        contrast: 0,\n        saturation: 0,\n        color: ['color', ['var', 'red'], ['var', 'green'], ['var', 'blue']]\n      };\n      layer.createRenderer();\n    }\n    expect(incorrectStyle).to.throwException(); // missing 'blue' in styleVariables\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"works if the layer is constructed without a source","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":590,"column":56,"index":19208},"line":590,"code":"  it('works if the layer is constructed without a source', done => {\n    const sourceless = new WebGLTileLayer({\n      className: 'testlayer',\n      style: {\n        variables: {\n          r: 0,\n          g: 255,\n          b: 0\n        },\n        color: ['color', ['var', 'r'], ['var', 'g'], ['var', 'b']]\n      }\n    });\n    map.addLayer(sourceless);\n    sourceless.setSource(new DataTileSource({\n      loader(z, x, y) {\n        return new ImageData(256, 256).data;\n      }\n    }));\n    let called = false;\n    layer.on('postrender', event => {\n      called = true;\n    });\n    map.once('rendercomplete', () => {\n      expect(called).to.be(true);\n      done();\n    });\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"handles multiple sources correctly","suites":["ol/layer/WebGLTile","multiple sources"],"updatePoint":{"line":617,"column":40,"index":19868},"line":617,"code":"  it('handles multiple sources correctly', () => {\n    const source = layer.getSource();\n    expect(layer.getRenderSource()).to.be(source);\n    layer.sources_ = (extent, resolution) => {\n      return [{\n        getState: () => 'ready',\n        extent,\n        resolution,\n        id: 'source1'\n      }, {\n        getState: () => 'ready',\n        extent,\n        resolution,\n        id: 'source2'\n      }];\n    };\n    const sourceIds = [];\n    layer.getRenderer().prepareFrame = frameState => {\n      const renderedSource = layer.getRenderSource();\n      expect(renderedSource.extent).to.eql([0, 0, 100, 100]);\n      expect(renderedSource.resolution).to.be(1);\n      sourceIds.push(renderedSource.id);\n    };\n    layer.render({\n      extent: [0, 0, 100, 100],\n      viewState: {\n        resolution: 1\n      }\n    });\n    expect(sourceIds).to.eql(['source1', 'source2']);\n  });","file":"browser/spec/ol/layer/WebGLTile.test.js","skipped":false,"dir":"test"},{"name":"uses a tile grid in view projection","suites":["ol/loadingstrategy","tile"],"updatePoint":{"line":10,"column":43,"index":512},"line":10,"code":"    it('uses a tile grid in view projection', function () {\n      useGeographic();\n      const tileGrid = createXYZ();\n      const strategy = tile(tileGrid);\n      const extent = tileGrid.getTileCoordExtent([1, 1, 1]);\n      const userExtent = toUserExtent(extent, get('EPSG:3857'));\n      const userResolution = toUserResolution(tileGrid.getResolution(1), get('EPSG:3857'));\n      const extents = strategy(userExtent, userResolution, get('EPSG:3857'));\n      expect(approximatelyEquals(transformExtent(extents[0], 'EPSG:4326', 'EPSG:3857'), extent, 1e-8)).to.be(true);\n    });","file":"browser/spec/ol/loadingstrategy.test.js","skipped":false,"dir":"test"},{"name":"creates a new map","suites":["ol/Map","constructor"],"updatePoint":{"line":39,"column":25,"index":2468},"line":39,"code":"    it('creates a new map', function () {\n      const map = new Map({});\n      expect(map).to.be.a(Map);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"accepts a promise for view options","suites":["ol/Map","constructor"],"updatePoint":{"line":43,"column":42,"index":2598},"line":43,"code":"    it('accepts a promise for view options', done => {\n      let resolve;\n      const map = new Map({\n        view: new Promise(r => {\n          resolve = r;\n        })\n      });\n      expect(map.getView()).to.be.a(View);\n      expect(map.getView().isDef()).to.be(false);\n      map.once('change:view', () => {\n        const view = map.getView();\n        expect(view).to.be.a(View);\n        expect(view.isDef()).to.be(true);\n        expect(view.getCenter()).to.eql([1, 2]);\n        expect(view.getZoom()).to.be(3);\n        done();\n      });\n      resolve({\n        center: [1, 2],\n        zoom: 3\n      });\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"allows the view to be set with a promise later after construction","suites":["ol/Map","constructor"],"updatePoint":{"line":65,"column":73,"index":3243},"line":65,"code":"    it('allows the view to be set with a promise later after construction', done => {\n      const map = new Map({\n        view: new View({\n          zoom: 1,\n          center: [0, 0]\n        })\n      });\n      expect(map.getView()).to.be.a(View);\n      expect(map.getView().isDef()).to.be(true);\n      let resolve;\n      map.setView(new Promise(r => {\n        resolve = r;\n      }));\n      expect(map.getView()).to.be.a(View);\n      expect(map.getView().isDef()).to.be(false);\n      map.once('change:view', () => {\n        const view = map.getView();\n        expect(view).to.be.a(View);\n        expect(view.isDef()).to.be(true);\n        expect(view.getCenter()).to.eql([1, 2]);\n        expect(view.getZoom()).to.be(3);\n        done();\n      });\n      resolve({\n        center: [1, 2],\n        zoom: 3\n      });\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"creates a set of default interactions","suites":["ol/Map","constructor"],"updatePoint":{"line":93,"column":45,"index":4034},"line":93,"code":"    it('creates a set of default interactions', function () {\n      const map = new Map({});\n      const interactions = map.getInteractions();\n      const length = interactions.getLength();\n      expect(length).to.be.greaterThan(0);\n      for (let i = 0; i < length; ++i) {\n        expect(interactions.item(i).getMap()).to.be(map);\n      }\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"creates the viewport","suites":["ol/Map","constructor"],"updatePoint":{"line":102,"column":28,"index":4365},"line":102,"code":"    it('creates the viewport', function () {\n      const map = new Map({});\n      const viewport = map.getViewport();\n      const className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n      expect(viewport.className).to.be(className);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"creates the overlay containers","suites":["ol/Map","constructor"],"updatePoint":{"line":108,"column":38,"index":4639},"line":108,"code":"    it('creates the overlay containers', function () {\n      const map = new Map({});\n      const container = map.getOverlayContainer();\n      expect(container.className).to.be('ol-overlaycontainer');\n      const containerStop = map.getOverlayContainerStopEvent();\n      expect(containerStop.className).to.be('ol-overlaycontainer-stopevent');\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"calls setMap for controls added by other controls","suites":["ol/Map","constructor"],"updatePoint":{"line":115,"column":57,"index":5009},"line":115,"code":"    it('calls setMap for controls added by other controls', function () {\n      let subSetMapCalled = false;\n      class SubControl extends Control {\n        setMap(map) {\n          super.setMap(map);\n          subSetMapCalled = true;\n        }\n      }\n      class MainControl extends Control {\n        setMap(map) {\n          super.setMap(map);\n          map.addControl(new SubControl({\n            element: document.createElement('div')\n          }));\n        }\n      }\n      new Map({\n        target: document.createElement('div'),\n        controls: [new MainControl({\n          element: document.createElement('div')\n        })]\n      });\n      expect(subSetMapCalled).to.be(true);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"adds a layer to the map","suites":["ol/Map","#addLayer()"],"updatePoint":{"line":141,"column":31,"index":5723},"line":141,"code":"    it('adds a layer to the map', function () {\n      const map = new Map({});\n      const layer = new TileLayer();\n      map.addLayer(layer);\n      expect(map.getLayers().item(0)).to.be(layer);\n      expect(layer.get(Property.MAP)).to.be(map);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"throws if a layer is added twice","suites":["ol/Map","#addLayer()"],"updatePoint":{"line":148,"column":40,"index":5985},"line":148,"code":"    it('throws if a layer is added twice', function () {\n      const map = new Map({});\n      const layer = new TileLayer();\n      map.addLayer(layer);\n      const call = function () {\n        map.addLayer(layer);\n      };\n      expect(call).to.throwException();\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"removes a layer from the map","suites":["ol/Map","#removeLayer()"],"updatePoint":{"line":159,"column":36,"index":6301},"line":159,"code":"    it('removes a layer from the map', function () {\n      const map = new Map({});\n      const layer = new TileLayer();\n      map.addLayer(layer);\n      expect(layer.get(Property.MAP)).to.be(map);\n      map.removeLayer(layer);\n      expect(layer.get(Property.MAP)).to.be(null);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"removes a layer group from the map","suites":["ol/Map","#removeLayer()"],"updatePoint":{"line":167,"column":42,"index":6594},"line":167,"code":"    it('removes a layer group from the map', function () {\n      const map = new Map({});\n      const layer = new TileLayer();\n      const group = new LayerGroup({\n        layers: [layer]\n      });\n      map.addLayer(group);\n      expect(layer.get(Property.MAP)).to.be(map);\n      map.removeLayer(group);\n      expect(layer.get(Property.MAP)).to.be(null);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"sets the layer group","suites":["ol/Map","#setLayerGroup()"],"updatePoint":{"line":180,"column":28,"index":6995},"line":180,"code":"    it('sets the layer group', function () {\n      const map = new Map({});\n      const layer = new Layer({});\n      const group = new LayerGroup({\n        layers: [layer]\n      });\n      map.setLayerGroup(group);\n      expect(map.getLayerGroup()).to.be(group);\n      expect(layer.get(Property.MAP)).to.be(map);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"removes the map property from old layers","suites":["ol/Map","#setLayerGroup()"],"updatePoint":{"line":190,"column":48,"index":7335},"line":190,"code":"    it('removes the map property from old layers', function () {\n      const oldLayer = new Layer({});\n      const map = new Map({\n        layers: [oldLayer]\n      });\n      expect(oldLayer.get(Property.MAP)).to.be(map);\n      const layer = new Layer({});\n      const group = new LayerGroup({\n        layers: [layer]\n      });\n      map.setLayerGroup(group);\n      expect(layer.get(Property.MAP)).to.be(map);\n      expect(oldLayer.get(Property.MAP)).to.be(null);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns all layers, also from inside groups","suites":["ol/Map","#getAllLayers()"],"updatePoint":{"line":206,"column":51,"index":7859},"line":206,"code":"    it('returns all layers, also from inside groups', function () {\n      const map = new Map({});\n      const layer = new TileLayer();\n      const group = new LayerGroup({\n        layers: [layer]\n      });\n      map.addLayer(group);\n      const allLayers = map.getAllLayers();\n      expect(allLayers.length).to.be(1);\n      expect(allLayers[0]).to.be(layer);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"adds an array of layers to the map","suites":["ol/Map","#setLayers()"],"updatePoint":{"line":219,"column":42,"index":8265},"line":219,"code":"    it('adds an array of layers to the map', function () {\n      const map = new Map({});\n      const layer0 = new TileLayer();\n      const layer1 = new TileLayer();\n      map.setLayers([layer0, layer1]);\n      const collection = map.getLayers();\n      expect(collection.getLength()).to.be(2);\n      expect(collection.item(0)).to.be(layer0);\n      expect(collection.item(1)).to.be(layer1);\n      expect(layer0.get(Property.MAP)).to.be(map);\n      expect(layer1.get(Property.MAP)).to.be(map);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"clears any existing layers","suites":["ol/Map","#setLayers()"],"updatePoint":{"line":231,"column":34,"index":8757},"line":231,"code":"    it('clears any existing layers', function () {\n      const oldLayer = new TileLayer();\n      const map = new Map({\n        layers: [oldLayer]\n      });\n      expect(oldLayer.get(Property.MAP)).to.be(map);\n      const newLayer1 = new TileLayer();\n      const newLayer2 = new TileLayer();\n      map.setLayers([newLayer1, newLayer2]);\n      expect(newLayer1.get(Property.MAP)).to.be(map);\n      expect(newLayer2.get(Property.MAP)).to.be(map);\n      expect(oldLayer.get(Property.MAP)).to.be(null);\n      expect(map.getLayers().getLength()).to.be(2);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"also works with collections","suites":["ol/Map","#setLayers()"],"updatePoint":{"line":245,"column":35,"index":9316},"line":245,"code":"    it('also works with collections', function () {\n      const map = new Map({});\n      const layer0 = new TileLayer();\n      const layer1 = new TileLayer();\n      map.setLayers(new Collection([layer0, layer1]));\n      const collection = map.getLayers();\n      expect(collection.getLength()).to.be(2);\n      expect(collection.item(0)).to.be(layer0);\n      expect(collection.item(1)).to.be(layer1);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"adds an interaction to the map","suites":["ol/Map","#addInteraction()"],"updatePoint":{"line":257,"column":38,"index":9778},"line":257,"code":"    it('adds an interaction to the map', function () {\n      const map = new Map({});\n      const interaction = new Interaction({});\n      const before = map.getInteractions().getLength();\n      map.addInteraction(interaction);\n      const after = map.getInteractions().getLength();\n      expect(after).to.be(before + 1);\n      expect(interaction.getMap()).to.be(map);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"removes an interaction from the map","suites":["ol/Map","#removeInteraction()"],"updatePoint":{"line":268,"column":43,"index":10215},"line":268,"code":"    it('removes an interaction from the map', function () {\n      const map = new Map({});\n      const interaction = new Interaction({});\n      const before = map.getInteractions().getLength();\n      map.addInteraction(interaction);\n      map.removeInteraction(interaction);\n      expect(map.getInteractions().getLength()).to.be(before);\n      expect(interaction.getMap()).to.be(null);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"are fired only once after view changes","suites":["ol/Map","movestart/moveend event"],"updatePoint":{"line":306,"column":46,"index":11366},"line":306,"code":"    it('are fired only once after view changes', function (done) {\n      const center = [10, 20];\n      const zoom = 3;\n      let startCalls = 0;\n      let endCalls = 0;\n      map.on('movestart', function () {\n        ++startCalls;\n        expect(startCalls).to.be(1);\n      });\n      map.on('moveend', function () {\n        ++endCalls;\n        expect(endCalls).to.be(1);\n        expect(view.getCenter()).to.eql(center);\n        expect(view.getZoom()).to.be(zoom);\n        window.setTimeout(done, 1000);\n      });\n      view.setCenter(center);\n      view.setZoom(zoom);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"are fired in sequence","suites":["ol/Map","movestart/moveend event"],"updatePoint":{"line":325,"column":29,"index":11927},"line":325,"code":"    it('are fired in sequence', function (done) {\n      view.setCenter([0, 0]);\n      view.setResolution(0.703125);\n      map.renderSync();\n      const center = [10, 20];\n      const zoom = 3;\n      const calls = [];\n      map.on('movestart', function (e) {\n        calls.push('start');\n        expect(calls).to.eql(['start']);\n        expect(e.frameState.viewState.center).to.eql([0, 0]);\n        expect(e.frameState.viewState.resolution).to.be(0.703125);\n      });\n      map.on('moveend', function () {\n        calls.push('end');\n        expect(calls).to.eql(['start', 'end']);\n        expect(view.getCenter()).to.eql(center);\n        expect(view.getZoom()).to.be(zoom);\n        done();\n      });\n      view.setCenter(center);\n      view.setZoom(zoom);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"triggers when all tiles and sources are loaded and faded in","suites":["ol/Map","rendercomplete event","renderer ready property"],"updatePoint":{"line":410,"column":69,"index":14742},"line":410,"code":"      it('triggers when all tiles and sources are loaded and faded in', function (done) {\n        const layers = map.getLayers().getArray();\n        map.once('rendercomplete', function () {\n          expect(map.tileQueue_.getTilesLoading()).to.be(0);\n          expect(layers[1].getSource().image_.getState()).to.be(ImageState.LOADED);\n          expect(layers[2].getSource().getFeatures().length).to.be(1);\n          expect(layers[6].getRenderer().ready).to.be(true);\n          done();\n        });\n        map.setView(new View({\n          center: [0, 0],\n          zoom: 0\n        }));\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"ignores invisible layers","suites":["ol/Map","rendercomplete event","renderer ready property"],"updatePoint":{"line":424,"column":34,"index":15302},"line":424,"code":"      it('ignores invisible layers', function (done) {\n        map.getLayers().forEach((layer, i) => layer.setVisible(i === 4));\n        map.setView(new View({\n          center: [0, 0],\n          zoom: 0\n        }));\n        map.once('rendercomplete', () => done());\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"waits for icons to be loaded with ol/renderer/canvas/VectorTileLayer","suites":["ol/Map","rendercomplete event","with icons"],"updatePoint":{"line":480,"column":78,"index":17153},"line":480,"code":"      it('waits for icons to be loaded with ol/renderer/canvas/VectorTileLayer', function (done) {\n        const delayIconAtTile = 1;\n        let tilesRequested = 0;\n        const tileSize = 64;\n        const tileGrid = createXYZ({\n          tileSize: tileSize\n        });\n        map = new Map({\n          target: target,\n          view: new View({\n            center: [0, 0],\n            resolution: 1\n          }),\n          layers: [new VectorTileLayer({\n            source: new VectorTileSource({\n              tileSize: tileSize,\n              tileUrlFunction: tileCoord => tileCoord.join('/'),\n              tileLoadFunction: function (tile, url) {\n                const coordinate = tileGrid.getTileCoordCenter(tile.getTileCoord());\n                const feature = new Feature(new Point(coordinate));\n                tile.setFeatures([feature]);\n                if (tilesRequested++ === delayIconAtTile) {\n                  feature.setStyle(new Style({\n                    image: icon\n                  }));\n                }\n              }\n            }),\n            style: new Style({\n              image: new Icon({\n                src: 'spec/ol/data/dot.png'\n              })\n            })\n          })]\n        });\n        let iconLoaded = false;\n        icon.listenImageChange(function (e) {\n          if (e.target.getImageState() === ImageState.LOADED) {\n            iconLoaded = true;\n          }\n        });\n        map.once('rendercomplete', function () {\n          try {\n            expect(tilesRequested).to.be.greaterThan(delayIconAtTile);\n            expect(iconLoaded).to.be(true);\n            done();\n          } catch (e) {\n            done(e);\n          }\n        });\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"waits for icons to be loaded with ol/renderer/canvas/VectorLayer","suites":["ol/Map","rendercomplete event","with icons"],"updatePoint":{"line":531,"column":74,"index":18856},"line":531,"code":"      it('waits for icons to be loaded with ol/renderer/canvas/VectorLayer', function (done) {\n        map = new Map({\n          target: target,\n          view: new View({\n            center: [0, 0],\n            resolution: 1\n          }),\n          layers: [new VectorLayer({\n            source: new VectorSource({\n              features: [new Feature(new Point([0, 0]))]\n            }),\n            style: new Style({\n              image: icon\n            })\n          })]\n        });\n        let iconLoaded = false;\n        icon.listenImageChange(function (e) {\n          if (e.target.getImageState() === ImageState.LOADED) {\n            iconLoaded = true;\n          }\n        });\n        map.once('rendercomplete', function () {\n          try {\n            expect(iconLoaded).to.be(true);\n            done();\n          } catch (e) {\n            done(e);\n          }\n        });\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"is a reliable start-end sequence","suites":["ol/Map","loadstart/loadend event sequence"],"updatePoint":{"line":624,"column":40,"index":21639},"line":624,"code":"    it('is a reliable start-end sequence', function (done) {\n      let loading = 0;\n      map.on('loadstart', () => {\n        map.getView().setZoom(0.1);\n        loading++;\n      });\n      map.on('loadend', () => {\n        expect(loading).to.be(1);\n        done();\n      });\n      map.setView(new View({\n        center: [0, 0],\n        zoom: 0\n      }));\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array if no feature was found","suites":["ol/Map","#getFeaturesAtPixel"],"updatePoint":{"line":665,"column":54,"index":22717},"line":665,"code":"    it('returns an empty array if no feature was found', function () {\n      const features = map.getFeaturesAtPixel([0, 0]);\n      expect(features).to.be.an(Array);\n      expect(features).to.be.empty();\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns an array of found features","suites":["ol/Map","#getFeaturesAtPixel"],"updatePoint":{"line":670,"column":42,"index":22917},"line":670,"code":"    it('returns an array of found features', function () {\n      const features = map.getFeaturesAtPixel([50, 50]);\n      expect(features).to.be.an(Array);\n      expect(features[0]).to.be.an(Feature);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns an array of found features with declutter: true","suites":["ol/Map","#getFeaturesAtPixel"],"updatePoint":{"line":675,"column":63,"index":23147},"line":675,"code":"    it('returns an array of found features with declutter: true', function () {\n      const layer = map.getLayers().item(0);\n      map.removeLayer(layer);\n      const otherLayer = new VectorLayer({\n        declutter: true,\n        source: layer.getSource()\n      });\n      map.addLayer(otherLayer);\n      map.renderSync();\n      const features = map.getFeaturesAtPixel([50, 50]);\n      expect(features).to.be.an(Array);\n      expect(features[0]).to.be.a(Feature);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"respects options","suites":["ol/Map","#getFeaturesAtPixel"],"updatePoint":{"line":688,"column":24,"index":23580},"line":688,"code":"    it('respects options', function () {\n      const otherLayer = new VectorLayer({\n        source: new VectorSource()\n      });\n      map.addLayer(otherLayer);\n      map.renderSync();\n      const features = map.getFeaturesAtPixel([50, 50], {\n        layerFilter: function (layer) {\n          return layer === otherLayer;\n        }\n      });\n      expect(features).to.be.an(Array);\n      expect(features).to.be.empty();\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"finds off-world geometries","suites":["ol/Map","#getFeaturesAtPixel"],"updatePoint":{"line":702,"column":34,"index":24018},"line":702,"code":"    it('finds off-world geometries', function () {\n      const line1 = new LineString([[130, 0], [230, 0]]);\n      line1.transform('EPSG:4326', 'EPSG:3857');\n      const line2 = new LineString([[-230, 0], [-130, 0]]);\n      line2.transform('EPSG:4326', 'EPSG:3857');\n      layer.getSource().addFeature(new Feature(line1));\n      layer.getSource().addFeature(new Feature(line2));\n      map.getView().setCenter(fromLonLat([180, 0]));\n      map.renderSync();\n      let features = map.getFeaturesAtPixel([60, 50]);\n      expect(features).to.be.an(Array);\n      expect(features.length).to.be(2);\n      features = map.getFeaturesAtPixel([60, 50], {\n        checkWrapped: false\n      });\n      expect(features).to.be.an(Array);\n      expect(features.length).to.be(1);\n      map.getView().setCenter(fromLonLat([-180, 0]));\n      map.renderSync();\n      features = map.getFeaturesAtPixel([40, 50]);\n      expect(features).to.be.an(Array);\n      expect(features.length).to.be(2);\n      features = map.getFeaturesAtPixel([40, 50], {\n        checkWrapped: false\n      });\n      expect(features).to.be.an(Array);\n      expect(features.length).to.be(1);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array if no feature was found","suites":["ol/Map","#getFeaturesAtPixel - useGeographic"],"updatePoint":{"line":758,"column":54,"index":26002},"line":758,"code":"    it('returns an empty array if no feature was found', function () {\n      const features = map.getFeaturesAtPixel([size / 2, size / 2]);\n      expect(features).to.be.an(Array);\n      expect(features).to.be.empty();\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns an array of found features","suites":["ol/Map","#getFeaturesAtPixel - useGeographic"],"updatePoint":{"line":763,"column":42,"index":26216},"line":763,"code":"    it('returns an array of found features', function () {\n      const coordinate = [-95, 45];\n      const pixel = map.getPixelFromCoordinate(coordinate);\n      const features = map.getFeaturesAtPixel(pixel);\n      expect(features).to.be.an(Array);\n      expect(features[0]).to.be.a(Feature);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns false if no feature was found","suites":["ol/Map","#hasFeatureAtPixel - useGeographic"],"updatePoint":{"line":798,"column":45,"index":27335},"line":798,"code":"    it('returns false if no feature was found', function () {\n      const has = map.hasFeatureAtPixel([size / 2, size / 2]);\n      expect(has).to.be(false);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns true if there are features found","suites":["ol/Map","#hasFeatureAtPixel - useGeographic"],"updatePoint":{"line":802,"column":48,"index":27503},"line":802,"code":"    it('returns true if there are features found', function () {\n      const coordinate = [-95, 45];\n      const pixel = map.getPixelFromCoordinate(coordinate);\n      const has = map.hasFeatureAtPixel(pixel);\n      expect(has).to.be(true);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"does hitdetection with image offset","suites":["ol/Map","#forEachFeatureAtPixel"],"updatePoint":{"line":821,"column":43,"index":28103},"line":821,"code":"    it('does hitdetection with image offset', function (done) {\n      const svg = `<svg width=\"64\" height=\"64\" viewBox=\"0 0 64 64\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect x=\"32\" y=\"32\" width=\"32\" height=\"32\" />\n      </svg>`;\n      const feature = new Feature(new Point([0, 0]));\n      feature.setStyle(new Style({\n        image: new Icon({\n          src: 'data:image/svg+xml;base64,' + window.btoa(svg),\n          color: [255, 0, 0, 1],\n          offset: [32, 32],\n          size: [32, 32]\n        })\n      }));\n      map = new Map({\n        pixelRatio: 2,\n        controls: [],\n        interactions: [],\n        target: target,\n        layers: [new VectorLayer({\n          source: new VectorSource({\n            features: [feature]\n          })\n        })],\n        view: new View({\n          projection: 'EPSG:4326',\n          center: [0, 0],\n          resolution: 1\n        })\n      });\n      map.once('rendercomplete', function () {\n        const hit = map.forEachFeatureAtPixel(map.getPixelFromCoordinate([0, 0]), () => true);\n        try {\n          expect(hit).to.be(true);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"is called when the view.changed() is called","suites":["ol/Map","#render()"],"updatePoint":{"line":885,"column":51,"index":29941},"line":885,"code":"    it('is called when the view.changed() is called', function () {\n      const view = map.getView();\n      const spy = sinon.spy(map, 'render');\n      view.changed();\n      expect(spy.callCount).to.be(1);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"is not called on view changes after the view has been removed","suites":["ol/Map","#render()"],"updatePoint":{"line":891,"column":69,"index":30173},"line":891,"code":"    it('is not called on view changes after the view has been removed', function () {\n      const view = map.getView();\n      map.setView(null);\n      const spy = sinon.spy(map, 'render');\n      view.changed();\n      expect(spy.callCount).to.be(0);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"calls renderFrame_ and results in a postrender event","suites":["ol/Map","#render()"],"updatePoint":{"line":898,"column":60,"index":30421},"line":898,"code":"    it('calls renderFrame_ and results in a postrender event', function (done) {\n      const spy = sinon.spy(map, 'renderFrame_');\n      map.render();\n      map.once('postrender', function (event) {\n        expect(event).to.be.a(MapEvent);\n        expect(typeof spy.firstCall.args[0]).to.be('number');\n        spy.restore();\n        expect(event.frameState).not.to.be(null);\n        done();\n      });\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"uses the same render frame for subsequent calls","suites":["ol/Map","#render()"],"updatePoint":{"line":909,"column":55,"index":30825},"line":909,"code":"    it('uses the same render frame for subsequent calls', function () {\n      map.render();\n      const id1 = map.animationDelayKey_;\n      map.render();\n      const id2 = map.animationDelayKey_;\n      expect(id1).to.be(id2);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"creates a new render frame after renderSync()","suites":["ol/Map","#render()"],"updatePoint":{"line":916,"column":53,"index":31057},"line":916,"code":"    it('creates a new render frame after renderSync()', function () {\n      map.render();\n      expect(map.animationDelayKey_).to.not.be(undefined);\n      map.renderSync();\n      expect(map.animationDelayKey_).to.be(undefined);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"results in an postrender event (for zero height map)","suites":["ol/Map","#render()"],"updatePoint":{"line":922,"column":60,"index":31300},"line":922,"code":"    it('results in an postrender event (for zero height map)', function (done) {\n      target.style.height = '0px';\n      map.updateSize();\n      map.render();\n      map.once('postrender', function (event) {\n        expect(event).to.be.a(MapEvent);\n        const frameState = event.frameState;\n        expect(frameState).to.be(null);\n        done();\n      });\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"results in an postrender event (for zero width map)","suites":["ol/Map","#render()"],"updatePoint":{"line":933,"column":59,"index":31667},"line":933,"code":"    it('results in an postrender event (for zero width map)', function (done) {\n      target.style.width = '0px';\n      map.updateSize();\n      map.render();\n      map.once('postrender', function (event) {\n        expect(event).to.be.a(MapEvent);\n        const frameState = event.frameState;\n        expect(frameState).to.be(null);\n        done();\n      });\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"removes the viewport from its parent","suites":["ol/Map","dispose"],"updatePoint":{"line":952,"column":44,"index":32188},"line":952,"code":"    it('removes the viewport from its parent', function () {\n      map.dispose();\n      expect(map.getViewport().parentNode).to.be(null);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"removes window listeners","suites":["ol/Map","dispose"],"updatePoint":{"line":956,"column":32,"index":32322},"line":956,"code":"    it('removes window listeners', function () {\n      map.dispose();\n      expect(map.targetChangeHandlerKeys_).to.be(null);\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"has undefined as size with target not in document","suites":["ol/Map","#setTarget","map with target not attached to dom"],"updatePoint":{"line":971,"column":59,"index":32810},"line":971,"code":"      it('has undefined as size with target not in document', function () {\n        expect(map.getSize()).to.be(undefined);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"unregisters the viewport resize listener","suites":["ol/Map","#setTarget","call setTarget with null"],"updatePoint":{"line":976,"column":50,"index":32998},"line":976,"code":"      it('unregisters the viewport resize listener', function () {\n        map.setTarget(null);\n        expect(map.targetChangeHandlerKeys_).to.be(null);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"registers a viewport resize listener","suites":["ol/Map","#setTarget","call setTarget with an element"],"updatePoint":{"line":982,"column":46,"index":33227},"line":982,"code":"      it('registers a viewport resize listener', function () {\n        map.setTarget(null);\n        map.setTarget(document.createElement('div'));\n        expect(map.targetChangeHandlerKeys_).to.be.ok();\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"detach and re-attach","suites":["ol/Map","#setTarget","call setTarget with an element"],"updatePoint":{"line":988,"column":28,"index":33430},"line":988,"code":"    it('detach and re-attach', function (done) {\n      const target = map.getTargetElement();\n      map.setTarget(null);\n      target.style.width = '100px';\n      target.style.height = '100px';\n      document.body.appendChild(target);\n      map.setTarget(target);\n      map.addLayer(new VectorLayer({\n        source: new VectorSource({\n          features: [new Feature(new Point([0, 0]))]\n        })\n      }));\n      map.getView().setCenter([0, 0]);\n      map.getView().setZoom(0);\n      map.renderSync();\n      try {\n        expect(target.querySelector('canvas')).to.be.a(HTMLCanvasElement);\n        map.setTarget(null);\n        expect(target.querySelector('canvas')).to.be(null);\n        map.setTarget(target);\n        map.once('rendercomplete', () => {\n          try {\n            expect(target.querySelector('canvas')).to.be.a(HTMLCanvasElement);\n            done();\n          } catch (e) {\n            done(e);\n          }\n        });\n      } finally {\n        document.body.removeChild(target);\n      }\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"creates mousewheel interaction","suites":["ol/Map","create interactions","create mousewheel interaction"],"updatePoint":{"line":1069,"column":40,"index":35701},"line":1069,"code":"      it('creates mousewheel interaction', function () {\n        options.mouseWheelZoom = true;\n        const interactions = defaultInteractions(options);\n        expect(interactions.getLength()).to.eql(1);\n        expect(interactions.item(0)).to.be.a(MouseWheelZoom);\n        expect(interactions.item(0).useAnchor_).to.eql(true);\n        interactions.item(0).setMouseAnchor(false);\n        expect(interactions.item(0).useAnchor_).to.eql(false);\n        expect(interactions.item(0).condition_).to.be(TRUE);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"does not use the default condition when onFocusOnly option is set","suites":["ol/Map","create interactions","create mousewheel interaction"],"updatePoint":{"line":1079,"column":75,"index":36253},"line":1079,"code":"      it('does not use the default condition when onFocusOnly option is set', function () {\n        options.onFocusOnly = true;\n        options.mouseWheelZoom = true;\n        const interactions = defaultInteractions(options);\n        expect(interactions.item(0).condition_).to.not.be(TRUE);\n        hasTabIndex = true;\n        hasFocus = true;\n        expect(interactions.item(0).condition_(event)).to.be(true);\n        hasTabIndex = true;\n        hasFocus = false;\n        expect(interactions.item(0).condition_(event)).to.be(false);\n        hasTabIndex = false;\n        expect(interactions.item(0).condition_(event)).to.be(true);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"creates dragpan interaction","suites":["ol/Map","create interactions","create dragpan interaction"],"updatePoint":{"line":1095,"column":37,"index":36922},"line":1095,"code":"      it('creates dragpan interaction', function () {\n        options.dragPan = true;\n        const interactions = defaultInteractions(options);\n        expect(interactions.getLength()).to.eql(1);\n        expect(interactions.item(0)).to.be.a(DragPan);\n        expect(interactions.item(0).condition_(event)).to.be(true);\n        hasTabIndex = true;\n        hasFocus = false;\n        expect(interactions.item(0).condition_(event)).to.be(true);\n        event.originalEvent.altKey = true;\n        expect(interactions.item(0).condition_(event)).to.be(false);\n        delete event.originalEvent.altKey;\n        event.originalEvent.button = 1;\n        expect(interactions.item(0).condition_(event)).to.be(false);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"does not use the default condition when onFocusOnly option is set","suites":["ol/Map","create interactions","create dragpan interaction"],"updatePoint":{"line":1110,"column":75,"index":37676},"line":1110,"code":"      it('does not use the default condition when onFocusOnly option is set', function () {\n        options.onFocusOnly = true;\n        options.dragPan = true;\n        const interactions = defaultInteractions(options);\n        hasTabIndex = true;\n        hasFocus = true;\n        expect(interactions.item(0).condition_(event)).to.be(true);\n        hasTabIndex = true;\n        hasFocus = false;\n        expect(interactions.item(0).condition_(event)).to.be(false);\n        hasTabIndex = false;\n        expect(interactions.item(0).condition_(event)).to.be(true);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"creates pinchZoom interaction","suites":["ol/Map","create interactions","create pinchZoom interaction"],"updatePoint":{"line":1125,"column":39,"index":38277},"line":1125,"code":"      it('creates pinchZoom interaction', function () {\n        options.pinchZoom = true;\n        const interactions = defaultInteractions(options);\n        expect(interactions.getLength()).to.eql(1);\n        expect(interactions.item(0)).to.be.a(PinchZoom);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"create double click interaction with default delta","suites":["ol/Map","create interactions","create double click interaction","default zoomDelta"],"updatePoint":{"line":1137,"column":62,"index":38769},"line":1137,"code":"        it('create double click interaction with default delta', function () {\n          const interactions = defaultInteractions(options);\n          expect(interactions.getLength()).to.eql(1);\n          expect(interactions.item(0)).to.be.a(DoubleClickZoom);\n          expect(interactions.item(0).delta_).to.eql(1);\n        });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"create double click interaction with set delta","suites":["ol/Map","create interactions","create double click interaction","set zoomDelta"],"updatePoint":{"line":1145,"column":58,"index":39149},"line":1145,"code":"        it('create double click interaction with set delta', function () {\n          options.zoomDelta = 7;\n          const interactions = defaultInteractions(options);\n          expect(interactions.getLength()).to.eql(1);\n          expect(interactions.item(0)).to.be.a(DoubleClickZoom);\n          expect(interactions.item(0).delta_).to.eql(7);\n        });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"works with touchend events","suites":["ol/Map","create interactions","#getEventPixel"],"updatePoint":{"line":1168,"column":36,"index":39972},"line":1168,"code":"      it('works with touchend events', function () {\n        const map = new Map({\n          target: target\n        });\n        const browserEvent = {\n          type: 'touchend',\n          target: target,\n          changedTouches: [{\n            clientX: 100,\n            clientY: 200\n          }]\n        };\n        const position = map.getEventPixel(browserEvent);\n        // 80 = clientX - target.style.left\n        expect(position[0]).to.eql(80);\n        // 190 = clientY - target.style.top\n        expect(position[1]).to.eql(190);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns an overlay by id","suites":["ol/Map","create interactions","#getOverlayById()"],"updatePoint":{"line":1213,"column":34,"index":41342},"line":1213,"code":"      it('returns an overlay by id', function () {\n        overlay = new Overlay({\n          id: 'foo',\n          element: overlay_target,\n          position: [0, 0]\n        });\n        map.addOverlay(overlay);\n        expect(map.getOverlayById('foo')).to.be(overlay);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns null when no overlay is found","suites":["ol/Map","create interactions","#getOverlayById()"],"updatePoint":{"line":1222,"column":47,"index":41634},"line":1222,"code":"      it('returns null when no overlay is found', function () {\n        overlay = new Overlay({\n          id: 'foo',\n          element: overlay_target,\n          position: [0, 0]\n        });\n        map.addOverlay(overlay);\n        expect(map.getOverlayById('bar')).to.be(null);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"returns null after removing overlay","suites":["ol/Map","create interactions","#getOverlayById()"],"updatePoint":{"line":1231,"column":45,"index":41921},"line":1231,"code":"      it('returns null after removing overlay', function () {\n        overlay = new Overlay({\n          id: 'foo',\n          element: overlay_target,\n          position: [0, 0]\n        });\n        map.addOverlay(overlay);\n        expect(map.getOverlayById('foo')).to.be(overlay);\n        map.removeOverlay(overlay);\n        expect(map.getOverlayById('foo')).to.be(null);\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"gets coordinates in user projection","suites":["ol/Map","create interactions","getCoordinateFromPixel() and getPixelFromCoordinate()"],"updatePoint":{"line":1277,"column":45,"index":43465},"line":1277,"code":"      it('gets coordinates in user projection', function (done) {\n        map.renderSync();\n        const coordinateGeographic = map.getCoordinateFromPixel(screenCenter);\n        expect(coordinateGeographic[0]).to.roughlyEqual(centerGeographic[0], 1e-5);\n        expect(coordinateGeographic[1]).to.roughlyEqual(centerGeographic[1], 1e-5);\n        done();\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"gets coordinates in view projection","suites":["ol/Map","create interactions","getCoordinateFromPixel() and getPixelFromCoordinate()"],"updatePoint":{"line":1284,"column":45,"index":43830},"line":1284,"code":"      it('gets coordinates in view projection', function (done) {\n        map.renderSync();\n        const coordinateMercator = map.getCoordinateFromPixelInternal(screenCenter);\n        expect(coordinateMercator[0]).to.roughlyEqual(centerMercator[0], 1e-5);\n        expect(coordinateMercator[1]).to.roughlyEqual(centerMercator[1], 1e-5);\n        done();\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"gets pixel from coordinates in user projection","suites":["ol/Map","create interactions","getCoordinateFromPixel() and getPixelFromCoordinate()"],"updatePoint":{"line":1291,"column":56,"index":44204},"line":1291,"code":"      it('gets pixel from coordinates in user projection', function (done) {\n        map.renderSync();\n        const pixel = map.getPixelFromCoordinate(centerGeographic);\n        expect(pixel).to.eql(screenCenter);\n        done();\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"gets pixel from coordinates in view projection","suites":["ol/Map","create interactions","getCoordinateFromPixel() and getPixelFromCoordinate()"],"updatePoint":{"line":1297,"column":56,"index":44445},"line":1297,"code":"      it('gets pixel from coordinates in view projection', function (done) {\n        map.renderSync();\n        const pixel = map.getPixelFromCoordinateInternal(centerMercator);\n        expect(pixel).to.eql(screenCenter);\n        done();\n      });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"calls handleEvent on interaction","suites":["ol/Map","#handleMapBrowserEvent()"],"updatePoint":{"line":1332,"column":40,"index":45437},"line":1332,"code":"    it('calls handleEvent on interaction', function () {\n      const spy = sinon.spy(dragpan, 'handleEvent');\n      map.handleMapBrowserEvent(new MapBrowserEvent('pointermove', map, new PointerEvent('pointermove')));\n      expect(spy.callCount).to.be(1);\n      spy.restore();\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"does not call handleEvent on interaction when map has no target","suites":["ol/Map","#handleMapBrowserEvent()"],"updatePoint":{"line":1338,"column":71,"index":45752},"line":1338,"code":"    it('does not call handleEvent on interaction when map has no target', function () {\n      map.setTarget(null);\n      const spy = sinon.spy(dragpan, 'handleEvent');\n      map.handleMapBrowserEvent(new MapBrowserEvent('pointermove', map, new PointerEvent('pointermove')));\n      expect(spy.callCount).to.be(0);\n      spy.restore();\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"does not call handleEvent on interaction that has been removed","suites":["ol/Map","#handleMapBrowserEvent()"],"updatePoint":{"line":1345,"column":70,"index":46093},"line":1345,"code":"    it('does not call handleEvent on interaction that has been removed', function () {\n      const spy = sinon.spy(dragpan, 'handleEvent');\n      let callCount = 0;\n      const interaction = new Interaction({\n        handleEvent: function () {\n          ++callCount;\n          map.removeInteraction(dragpan);\n          return true;\n        }\n      });\n      map.addInteraction(interaction);\n      map.handleMapBrowserEvent(new MapBrowserEvent('pointermove', map, new PointerEvent('pointermove')));\n      expect(callCount).to.be(1);\n      expect(spy.callCount).to.be(0);\n      spy.restore();\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"does not call handleEvent on interaction when MapBrowserEvent propagation stopped","suites":["ol/Map","#handleMapBrowserEvent()"],"updatePoint":{"line":1361,"column":89,"index":46711},"line":1361,"code":"    it('does not call handleEvent on interaction when MapBrowserEvent propagation stopped', function () {\n      const select = new Select();\n      const selectStub = sinon.stub(select, 'handleEvent');\n      selectStub.callsFake(function (e) {\n        e.stopPropagation();\n        return true;\n      });\n      map.addInteraction(select);\n      const spy = sinon.spy(dragpan, 'handleEvent');\n      map.handleMapBrowserEvent(new MapBrowserEvent('pointermove', map, new PointerEvent('pointermove')));\n      expect(spy.callCount).to.be(0);\n      expect(selectStub.callCount).to.be(1);\n      spy.restore();\n      selectStub.restore();\n    });","file":"browser/spec/ol/Map.test.js","skipped":false,"dir":"test"},{"name":"is the pixel position of the event","suites":["ol/MapBrowserEvent","pixel"],"updatePoint":{"line":39,"column":42,"index":981},"line":39,"code":"    it('is the pixel position of the event', () => {\n      const x = 10;\n      const y = 15;\n      const event = new Event();\n      event.clientX = x;\n      event.clientY = y;\n      const mapEvent = new MapBrowserEvent('test', ref.map, event);\n      expect(mapEvent.pixel).to.eql([x, y]);\n    });","file":"browser/spec/ol/MapBrowserEvent.test.js","skipped":false,"dir":"test"},{"name":"is settable","suites":["ol/MapBrowserEvent","pixel"],"updatePoint":{"line":48,"column":19,"index":1255},"line":48,"code":"    it('is settable', () => {\n      const x = 10;\n      const y = 15;\n      const event = new Event();\n      event.clientX = x;\n      event.clientY = y;\n      const mapEvent = new MapBrowserEvent('test', ref.map, event);\n      expect(mapEvent.pixel).to.eql([x, y]);\n      const pixel = [x + 5, y + 5];\n      mapEvent.pixel = pixel;\n      expect(mapEvent.pixel).to.eql(pixel);\n    });","file":"browser/spec/ol/MapBrowserEvent.test.js","skipped":false,"dir":"test"},{"name":"is the map coordinate of the event","suites":["ol/MapBrowserEvent","coordinate"],"updatePoint":{"line":71,"column":42,"index":1904},"line":71,"code":"    it('is the map coordinate of the event', () => {\n      const x = ref.size / 2;\n      const y = ref.size / 2;\n      const event = new Event();\n      event.clientX = x;\n      event.clientY = y;\n      const mapEvent = new MapBrowserEvent('test', ref.map, event);\n      expect(mapEvent.coordinate).to.eql([0, 0]);\n    });","file":"browser/spec/ol/MapBrowserEvent.test.js","skipped":false,"dir":"test"},{"name":"is settable","suites":["ol/MapBrowserEvent","coordinate"],"updatePoint":{"line":80,"column":19,"index":2203},"line":80,"code":"    it('is settable', () => {\n      const x = ref.size / 2;\n      const y = ref.size / 2;\n      const event = new Event();\n      event.clientX = x;\n      event.clientY = y;\n      const mapEvent = new MapBrowserEvent('test', ref.map, event);\n      expect(mapEvent.coordinate).to.eql([0, 0]);\n      const coordinate = [1, 2];\n      mapEvent.coordinate = coordinate;\n      expect(mapEvent.coordinate).to.eql(coordinate);\n    });","file":"browser/spec/ol/MapBrowserEvent.test.js","skipped":false,"dir":"test"},{"name":"is the geographic coordinate of the event","suites":["ol/MapBrowserEvent","coordinate - with useGeographic()"],"updatePoint":{"line":105,"column":49,"index":2976},"line":105,"code":"    it('is the geographic coordinate of the event', () => {\n      const x = ref.size / 4;\n      const y = ref.size / 4;\n      const event = new Event();\n      event.clientX = x;\n      event.clientY = y;\n      const mapEvent = new MapBrowserEvent('test', ref.map, event);\n      const coord = mapEvent.coordinate;\n      expect(coord[0]).to.be(-90);\n      expect(coord[1]).to.roughlyEqual(66.5132, 1e-4);\n    });","file":"browser/spec/ol/MapBrowserEvent.test.js","skipped":false,"dir":"test"},{"name":"emulates click","suites":["ol/MapBrowserEventHandler","#emulateClick_"],"updatePoint":{"line":30,"column":22,"index":1043},"line":30,"code":"    it('emulates click', function () {\n      const event = new OlEvent();\n      event.type = 'pointerdown';\n      event.target = target, event.clientX = 0;\n      event.clientY = 0;\n      handler.emulateClick_(event);\n      expect(clickSpy.called).to.be.ok();\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"emulates singleclick","suites":["ol/MapBrowserEventHandler","#emulateClick_"],"updatePoint":{"line":38,"column":28,"index":1316},"line":38,"code":"    it('emulates singleclick', function () {\n      const event = new OlEvent();\n      event.type = 'pointerdown';\n      event.target = target;\n      event.clientX = 0;\n      event.clientY = 0;\n      handler.emulateClick_(event);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.called).to.not.be.ok();\n      clock.tick(250);\n      expect(singleclickSpy.calledOnce).to.be.ok();\n      expect(dblclickSpy.called).to.not.be.ok();\n      handler.emulateClick_(event);\n      expect(singleclickSpy.calledOnce).to.be.ok();\n      expect(dblclickSpy.called).to.not.be.ok();\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"emulates dblclick","suites":["ol/MapBrowserEventHandler","#emulateClick_"],"updatePoint":{"line":54,"column":25,"index":1912},"line":54,"code":"    it('emulates dblclick', function () {\n      const event = new OlEvent();\n      event.type = 'pointerdown';\n      event.target = target;\n      event.clientX = 0;\n      event.clientY = 0;\n      handler.emulateClick_(event);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.called).to.not.be.ok();\n      handler.emulateClick_(event);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.calledOnce).to.be.ok();\n      clock.tick(250);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.calledOnce).to.be.ok();\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"is null if no \"down\" type event has been handled","suites":["ol/MapBrowserEventHandler","#down_"],"updatePoint":{"line":76,"column":56,"index":2691},"line":76,"code":"    it('is null if no \"down\" type event has been handled', function () {\n      expect(handler.down_).to.be(null);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"is properly set after handlePointerDown_ has been called","suites":["ol/MapBrowserEventHandler","#down_"],"updatePoint":{"line":79,"column":64,"index":2821},"line":79,"code":"    it('is properly set after handlePointerDown_ has been called', function () {\n      const event = new OlEvent('pointerdown');\n      event.clientX = 42;\n      event.clientY = 666;\n      event.target = 'foo';\n      handler.handlePointerDown_(event);\n      expect(handler.down_.type).to.be('pointerdown');\n      expect(handler.down_.clientX).to.be(42);\n      expect(handler.down_.clientY).to.be(666);\n      expect(handler.down_.target).to.be('foo');\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"is not moving if distance is 0","suites":["ol/MapBrowserEventHandler","#isMoving_"],"updatePoint":{"line":105,"column":38,"index":3819},"line":105,"code":"    it('is not moving if distance is 0', function () {\n      pointerdownAt0 = new OlEvent();\n      pointerdownAt0.type = 'pointerdown';\n      pointerdownAt0.clientX = 0;\n      pointerdownAt0.clientY = 0;\n      expect(defaultHandler.isMoving_(pointerdownAt0)).to.be(false);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"is moving if distance is 2","suites":["ol/MapBrowserEventHandler","#isMoving_"],"updatePoint":{"line":112,"column":34,"index":4096},"line":112,"code":"    it('is moving if distance is 2', function () {\n      const pointerdownAt2 = new OlEvent();\n      pointerdownAt2.type = 'pointerdown';\n      pointerdownAt2.clientX = DEVICE_PIXEL_RATIO + 1;\n      pointerdownAt2.clientY = DEVICE_PIXEL_RATIO + 1;\n      expect(defaultHandler.isMoving_(pointerdownAt2)).to.be(true);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"is moving with negative distance","suites":["ol/MapBrowserEventHandler","#isMoving_"],"updatePoint":{"line":119,"column":40,"index":4426},"line":119,"code":"    it('is moving with negative distance', function () {\n      const pointerdownAt2 = new OlEvent();\n      pointerdownAt2.type = 'pointerdown';\n      pointerdownAt2.clientX = -(DEVICE_PIXEL_RATIO + 1);\n      pointerdownAt2.clientY = -(DEVICE_PIXEL_RATIO + 1);\n      expect(defaultHandler.isMoving_(pointerdownAt2)).to.be(true);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"is not moving if distance is less than move tolerance","suites":["ol/MapBrowserEventHandler","#isMoving_"],"updatePoint":{"line":126,"column":61,"index":4783},"line":126,"code":"    it('is not moving if distance is less than move tolerance', function () {\n      const pointerdownAt2 = new OlEvent();\n      pointerdownAt2.type = 'pointerdown';\n      pointerdownAt2.clientX = DEVICE_PIXEL_RATIO + 1;\n      pointerdownAt2.clientY = DEVICE_PIXEL_RATIO + 1;\n      expect(moveToleranceHandler.isMoving_(pointerdownAt2)).to.be(false);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"is moving if distance is greater than move tolerance","suites":["ol/MapBrowserEventHandler","#isMoving_"],"updatePoint":{"line":133,"column":60,"index":5140},"line":133,"code":"    it('is moving if distance is greater than move tolerance', function () {\n      const pointerdownAt9 = new OlEvent();\n      pointerdownAt9.type = 'pointerdown';\n      pointerdownAt9.clientX = DEVICE_PIXEL_RATIO * 8 + 1;\n      pointerdownAt9.clientY = DEVICE_PIXEL_RATIO * 8 + 1;\n      expect(moveToleranceHandler.isMoving_(pointerdownAt9)).to.be(true);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"is moving when moving back close to the down pixel","suites":["ol/MapBrowserEventHandler","#isMoving_"],"updatePoint":{"line":140,"column":58,"index":5502},"line":140,"code":"    it('is moving when moving back close to the down pixel', function () {\n      const pointermoveAt9 = new OlEvent();\n      pointermoveAt9.type = 'pointermove';\n      pointermoveAt9.clientX = DEVICE_PIXEL_RATIO * 8 + 1;\n      pointermoveAt9.clientY = DEVICE_PIXEL_RATIO * 8 + 1;\n      moveToleranceHandler.handlePointerMove_(pointermoveAt9);\n      expect(moveToleranceHandler.isMoving_(pointermoveAt9)).to.be(true);\n      const pointermoveAt2 = new OlEvent();\n      pointermoveAt2.type = 'pointermove';\n      pointermoveAt2.clientX = DEVICE_PIXEL_RATIO + 1;\n      pointermoveAt2.clientY = DEVICE_PIXEL_RATIO + 1;\n      moveToleranceHandler.handlePointerMove_(pointermoveAt2);\n      expect(moveToleranceHandler.isMoving_(pointermoveAt2)).to.be(true);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"prevents default on touchmove event","suites":["ol/MapBrowserEventHandler","handleTouchMove_"],"updatePoint":{"line":160,"column":43,"index":6408},"line":160,"code":"    it('prevents default on touchmove event', function () {\n      handler.originalPointerMoveEvent_ = {\n        defaultPrevented: true\n      };\n      const event = {\n        preventDefault: sinon.spy()\n      };\n      handler.handleTouchMove_(event);\n      expect(event.preventDefault.callCount).to.be(1);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"emulates dblclick","suites":["ol/MapBrowserEventHandler","dblclick"],"updatePoint":{"line":224,"column":25,"index":8121},"line":224,"code":"    it('emulates dblclick', function () {\n      element.dispatchEvent(down1);\n      document.dispatchEvent(up1);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.called).to.not.be.ok();\n      element.dispatchEvent(down2);\n      document.dispatchEvent(up2);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.called).to.be.ok();\n      clock.tick(250);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.called).to.be.ok();\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"does not emulate dblclick and singleclick when multiple pointers are active","suites":["ol/MapBrowserEventHandler","dblclick"],"updatePoint":{"line":237,"column":83,"index":8689},"line":237,"code":"    it('does not emulate dblclick and singleclick when multiple pointers are active', function () {\n      element.dispatchEvent(down1);\n      element.dispatchEvent(down2);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.called).to.not.be.ok();\n      document.dispatchEvent(up1);\n      document.dispatchEvent(up2);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.called).to.not.be.ok();\n      clock.tick(250);\n      expect(singleclickSpy.called).to.not.be.ok();\n      expect(dblclickSpy.called).to.not.be.ok();\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"keeps activePointers up to date when event target changes","suites":["ol/MapBrowserEventHandler","Event target change"],"updatePoint":{"line":288,"column":65,"index":10265},"line":288,"code":"    it('keeps activePointers up to date when event target changes', function () {\n      element.dispatchEvent(down1);\n      element.dispatchEvent(down2);\n      expect(handler.activePointers_[0].pointerId).to.be(1);\n      expect(handler.activePointers_[1].pointerId).to.be(2);\n      document.dispatchEvent(up1);\n      document.dispatchEvent(up2);\n      expect(handler.activePointers_).to.have.length(0);\n    });","file":"browser/spec/ol/MapBrowserEventHandler.test.js","skipped":false,"dir":"test"},{"name":"returns a promise that resolves to a parsed JSON object","suites":["ol/net","getJSON()"],"updatePoint":{"line":5,"column":63,"index":276},"line":5,"code":"    it('returns a promise that resolves to a parsed JSON object', function (done) {\n      const url = 'spec/ol/data/point.json';\n      const result = getJSON(url);\n      expect(result).to.be.a(Promise);\n      result.then(function (json) {\n        expect(json).to.be.an(Object);\n        expect(json.type).to.be('FeatureCollection');\n        done();\n      });\n      result.catch(done);\n    });","file":"browser/spec/ol/net.test.js","skipped":false,"dir":"test"},{"name":"resolves an absolute URL given a base and relative URL","suites":["ol/net","resolveUrl()"],"updatePoint":{"line":18,"column":62,"index":714},"line":18,"code":"    it('resolves an absolute URL given a base and relative URL', function () {\n      const url = resolveUrl('https://example.com/base/', 'relative/path');\n      expect(url).to.be('https://example.com/base/relative/path');\n    });","file":"browser/spec/ol/net.test.js","skipped":false,"dir":"test"},{"name":"returns the second arg if it is an absolute URL","suites":["ol/net","resolveUrl()"],"updatePoint":{"line":22,"column":55,"index":937},"line":22,"code":"    it('returns the second arg if it is an absolute URL', function () {\n      const url = resolveUrl('https://example.com', 'https://other-example.com');\n      expect(url).to.be('https://other-example.com');\n    });","file":"browser/spec/ol/net.test.js","skipped":false,"dir":"test"},{"name":"appends callback param to url, cleans up after call","suites":["ol/net","jsonp()"],"updatePoint":{"line":72,"column":59,"index":2519},"line":72,"code":"    it('appends callback param to url, cleans up after call', function (done) {\n      requestJSONP('foo', createCallback('foo?callback=', done));\n    });","file":"browser/spec/ol/net.test.js","skipped":false,"dir":"test"},{"name":"appends correct callback param to a url with query","suites":["ol/net","jsonp()"],"updatePoint":{"line":75,"column":58,"index":2672},"line":75,"code":"    it('appends correct callback param to a url with query', function (done) {\n      const callback = createCallback('http://foo/bar?baz&callback=', done);\n      requestJSONP('http://foo/bar?baz', callback);\n    });","file":"browser/spec/ol/net.test.js","skipped":false,"dir":"test"},{"name":"calls errback when jsonp is not executed, cleans up","suites":["ol/net","jsonp()"],"updatePoint":{"line":79,"column":59,"index":2889},"line":79,"code":"    it('calls errback when jsonp is not executed, cleans up', function (done) {\n      head.appendChild = function (element) {\n        element.parentNode = {\n          removeChild: removeChild\n        };\n      };\n      function callback() {\n        expect().fail();\n      }\n      function errback() {\n        expect(window[key]).to.be(undefined);\n        expect(removeChild.called).to.be(true);\n        done();\n      }\n      requestJSONP('foo', callback, errback);\n    });","file":"browser/spec/ol/net.test.js","skipped":false,"dir":"test"},{"name":"accepts a custom callback param","suites":["ol/net","jsonp()"],"updatePoint":{"line":95,"column":39,"index":3341},"line":95,"code":"    it('accepts a custom callback param', function (done) {\n      const callback = createCallback('foo?mycallback=', done);\n      requestJSONP('foo', callback, undefined, 'mycallback');\n    });","file":"browser/spec/ol/net.test.js","skipped":false,"dir":"test"},{"name":"can be constructed with minimal arguments","suites":["ol.Overlay","constructor"],"updatePoint":{"line":31,"column":49,"index":887},"line":31,"code":"    it('can be constructed with minimal arguments', function () {\n      const instance = new Overlay({});\n      expect(instance).to.be.an(Overlay);\n    });","file":"browser/spec/ol/overlay.test.js","skipped":false,"dir":"test"},{"name":"can be constructed with className","suites":["ol.Overlay","constructor"],"updatePoint":{"line":35,"column":41,"index":1035},"line":35,"code":"    it('can be constructed with className', function () {\n      const instance = new Overlay({\n        className: 'my-class'\n      });\n      expect(instance).to.be.an(Overlay);\n      expect(instance.element.className).to.be('my-class');\n    });","file":"browser/spec/ol/overlay.test.js","skipped":false,"dir":"test"},{"name":"returns the overlay identifier","suites":["ol.Overlay","#getId()"],"updatePoint":{"line":51,"column":38,"index":1498},"line":51,"code":"    it('returns the overlay identifier', function () {\n      overlay = new Overlay({\n        element: target,\n        position: [0, 0]\n      });\n      map.addOverlay(overlay);\n      expect(overlay.getId()).to.be(undefined);\n      map.removeOverlay(overlay);\n      overlay = new Overlay({\n        id: 'foo',\n        element: target,\n        position: [0, 0]\n      });\n      map.addOverlay(overlay);\n      expect(overlay.getId()).to.be('foo');\n    });","file":"browser/spec/ol/overlay.test.js","skipped":false,"dir":"test"},{"name":"changes the CSS display value","suites":["ol.Overlay","#setVisible()"],"updatePoint":{"line":76,"column":37,"index":2173},"line":76,"code":"    it('changes the CSS display value', function () {\n      overlay = new Overlay({\n        element: target,\n        position: [0, 0]\n      });\n      map.addOverlay(overlay);\n      map.renderSync();\n      expect(overlay.element.style.display).not.to.be('none');\n      overlay.setVisible(false);\n      expect(overlay.element.style.display).to.be('none');\n    });","file":"browser/spec/ol/overlay.test.js","skipped":false,"dir":"test"},{"name":"transforms from geographic to Web Mercator","suites":["ol/proj/epsg3857","fromEPSG4326()"],"updatePoint":{"line":9,"column":50,"index":440},"line":9,"code":"    it('transforms from geographic to Web Mercator', function () {\n      const tolerance = 1e-5;\n      const cases = [{\n        g: [0, 0],\n        m: [0, 0]\n      }, {\n        g: [-180, -90],\n        m: [-HALF_SIZE, -MAX_SAFE_Y]\n      }, {\n        g: [180, 90],\n        m: [HALF_SIZE, MAX_SAFE_Y]\n      }, {\n        g: [-111.0429, 45.677],\n        m: [-12361239.084208, 5728738.469095]\n      }];\n      for (let i = 0, ii = cases.length; i < ii; ++i) {\n        const point = cases[i].g;\n        const transformed = fromEPSG4326(point);\n        expect(transformed[0]).to.roughlyEqual(cases[i].m[0], tolerance);\n        expect(transformed[1]).to.roughlyEqual(cases[i].m[1], tolerance);\n      }\n    });","file":"browser/spec/ol/proj/epsg3857.test.js","skipped":false,"dir":"test"},{"name":"does not produce unexpected results for string coordinates","suites":["ol/proj/epsg3857","fromEPSG4326()"],"updatePoint":{"line":31,"column":66,"index":1155},"line":31,"code":"    it('does not produce unexpected results for string coordinates', function () {\n      const transformed = fromEPSG4326(['180', '90']);\n      expect(transformed[0]).to.roughlyEqual(HALF_SIZE, 1e-5);\n      expect(transformed[1]).to.roughlyEqual(MAX_SAFE_Y, 1e-5);\n    });","file":"browser/spec/ol/proj/epsg3857.test.js","skipped":false,"dir":"test"},{"name":"returns the correct point scale at the equator","suites":["ol/proj/epsg3857","getPointResolution"],"updatePoint":{"line":38,"column":54,"index":1469},"line":38,"code":"    it('returns the correct point scale at the equator', function () {\n      // @see https://docs.microsoft.com/en-us/bingmaps/articles/understanding-scale-and-resolution\n      const epsg3857 = getProjection('EPSG:3857');\n      const resolution = 19.11;\n      const point = [0, 0];\n      expect(getPointResolution(epsg3857, resolution, point)).to.roughlyEqual(19.11, 1e-1);\n    });","file":"browser/spec/ol/proj/epsg3857.test.js","skipped":false,"dir":"test"},{"name":"returns the correct point scale at the latitude of Toronto","suites":["ol/proj/epsg3857","getPointResolution"],"updatePoint":{"line":45,"column":66,"index":1863},"line":45,"code":"    it('returns the correct point scale at the latitude of Toronto', function () {\n      // @see https://docs.microsoft.com/en-us/bingmaps/articles/understanding-scale-and-resolution\n      const epsg3857 = getProjection('EPSG:3857');\n      const epsg4326 = getProjection('EPSG:4326');\n      const resolution = 19.11;\n      const point = transform([0, 43.65], epsg4326, epsg3857);\n      expect(getPointResolution(epsg3857, resolution, point)).to.roughlyEqual(19.11 * Math.cos(Math.PI * 43.65 / 180), 1e-9);\n    });","file":"browser/spec/ol/proj/epsg3857.test.js","skipped":false,"dir":"test"},{"name":"returns the correct point scale at various latitudes","suites":["ol/proj/epsg3857","getPointResolution"],"updatePoint":{"line":53,"column":60,"index":2371},"line":53,"code":"    it('returns the correct point scale at various latitudes', function () {\n      // @see https://docs.microsoft.com/en-us/bingmaps/articles/understanding-scale-and-resolution\n      const epsg3857 = getProjection('EPSG:3857');\n      const epsg4326 = getProjection('EPSG:4326');\n      const resolution = 19.11;\n      let latitude;\n      for (latitude = 0; latitude <= 85; ++latitude) {\n        const point = transform([0, latitude], epsg4326, epsg3857);\n        expect(getPointResolution(epsg3857, resolution, point)).to.roughlyEqual(19.11 * Math.cos(Math.PI * latitude / 180), 1e-9);\n      }\n    });","file":"browser/spec/ol/proj/epsg3857.test.js","skipped":false,"dir":"test"},{"name":"removes functions cached by transforms.add()","suites":["transforms.remove()"],"updatePoint":{"line":6,"column":50,"index":301},"line":6,"code":"  it('removes functions cached by transforms.add()', function () {\n    const foo = new Projection({\n      code: 'foo',\n      units: units,\n      extent: extent\n    });\n    const bar = new Projection({\n      code: 'bar',\n      units: units,\n      extent: extent\n    });\n    const transform = function (input, output, dimension) {\n      return input;\n    };\n    transforms.add(foo, bar, transform);\n    expect(transforms.get('foo', 'bar')).to.be(transform);\n    const removed = transforms.remove(foo, bar);\n    expect(removed).to.be(transform);\n    expect(transforms.get('foo', 'bar')).to.be(undefined);\n  });","file":"browser/spec/ol/proj/transforms.test.js","skipped":false,"dir":"test"},{"name":"creates an ol.render.canvas.Immediate and sets defaults","suites":["ol.render","toContext"],"updatePoint":{"line":8,"column":63,"index":501},"line":8,"code":"    it('creates an ol.render.canvas.Immediate and sets defaults', function () {\n      const canvas = document.createElement('canvas');\n      const render = toContext(canvas.getContext('2d'));\n      expect(render).to.be.a(CanvasImmediateRenderer);\n      expect(render.pixelRatio_).to.be(DEVICE_PIXEL_RATIO);\n    });","file":"browser/spec/ol/render.test.js","skipped":false,"dir":"test"},{"name":"sets size and pixel ratio from options","suites":["ol.render","toContext"],"updatePoint":{"line":14,"column":46,"index":799},"line":14,"code":"    it('sets size and pixel ratio from options', function () {\n      const canvas = document.createElement('canvas');\n      const pixelRatio = 1.5;\n      const size = [100, 50];\n      const render = toContext(canvas.getContext('2d'), {\n        pixelRatio: pixelRatio,\n        size: size\n      });\n      expect(render.pixelRatio_).to.be(pixelRatio);\n      expect(render.extent_).to.eql([0, 0, size[0] * pixelRatio, size[1] * pixelRatio]);\n      expect(canvas.style.width).to.be(size[0] + 'px');\n      expect(canvas.style.height).to.be(size[1] + 'px');\n      const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n      expect(equals(render.transform_, transform)).to.be.ok();\n    });","file":"browser/spec/ol/render.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol.render.Box","constructor"],"updatePoint":{"line":28,"column":27,"index":857},"line":28,"code":"    it('creates an instance', function () {\n      const obj = new RenderBox('test-box');\n      expect(obj).to.be.a(RenderBox);\n      expect(obj).to.be.a(Disposable);\n      obj.dispose();\n    });","file":"browser/spec/ol/render/box.test.js","skipped":false,"dir":"test"},{"name":"creates an absolutely positioned DIV with a className","suites":["ol.render.Box","constructor"],"updatePoint":{"line":34,"column":61,"index":1086},"line":34,"code":"    it('creates an absolutely positioned DIV with a className', function () {\n      expect(box.element_).to.be.a(HTMLDivElement);\n      expect(box.element_.style.position).to.be('absolute');\n      expect(box.element_.className).to.be('ol-box test-box');\n      expect(box.element_.style.position).to.be('absolute');\n    });","file":"browser/spec/ol/render/box.test.js","skipped":false,"dir":"test"},{"name":"appends the DIV to the map's overlay container","suites":["ol.render.Box","constructor"],"updatePoint":{"line":40,"column":54,"index":1402},"line":40,"code":"    it(\"appends the DIV to the map's overlay container\", function () {\n      expect(box.element_.parentNode).to.equal(map.getOverlayContainer());\n    });","file":"browser/spec/ol/render/box.test.js","skipped":false,"dir":"test"},{"name":"applies correct styles for a box","suites":["ol.render.Box","#setPixels()"],"updatePoint":{"line":45,"column":40,"index":1589},"line":45,"code":"    it('applies correct styles for a box', function () {\n      box.setPixels([1, 2], [4, 8]);\n      expect(box.element_.style.left).to.be('1px');\n      expect(box.element_.style.top).to.be('2px');\n      expect(box.element_.style.width).to.be('3px');\n      expect(box.element_.style.height).to.be('6px');\n    });","file":"browser/spec/ol/render/box.test.js","skipped":false,"dir":"test"},{"name":"applies correct styles for a flipped box","suites":["ol.render.Box","#setPixels()"],"updatePoint":{"line":52,"column":48,"index":1909},"line":52,"code":"    it('applies correct styles for a flipped box', function () {\n      box.setPixels([4, 8], [1, 2]);\n      expect(box.element_.style.left).to.be('1px');\n      expect(box.element_.style.top).to.be('2px');\n      expect(box.element_.style.width).to.be('3px');\n      expect(box.element_.style.height).to.be('6px');\n    });","file":"browser/spec/ol/render/box.test.js","skipped":false,"dir":"test"},{"name":"creates a polygon geometry","suites":["ol.render.Box","#setPixels()"],"updatePoint":{"line":59,"column":34,"index":2215},"line":59,"code":"    it('creates a polygon geometry', function () {\n      expect(box.getGeometry()).to.be(null);\n      box.setPixels([1, 2], [3, 4]);\n      expect(box.getGeometry()).to.be.a(Polygon);\n    });","file":"browser/spec/ol/render/box.test.js","skipped":false,"dir":"test"},{"name":"creates an array with every index within distance","suites":["ol.render.canvas.ExecutorGroup","#getPixelIndexArray"],"updatePoint":{"line":4,"column":57,"index":257},"line":4,"code":"    it('creates an array with every index within distance', function () {\n      const radius = 10;\n      const size = radius * 2 + 1;\n      const hitIndexes = getPixelIndexArray(radius);\n      const circleArray = new Array(size);\n      for (let i = 0; i < size; i++) {\n        circleArray[i] = new Array(size);\n      }\n      hitIndexes.forEach(function (d) {\n        const x = (d - 3) / 4 % size;\n        const y = (d - 3) / 4 / size | 0;\n        circleArray[x][y] = true;\n      });\n      const minRadiusSq = Math.pow(radius - Math.SQRT2, 2);\n      const maxRadiusSq = Math.pow(radius + Math.SQRT2, 2);\n      expect(circleArray.length).to.be(size);\n      for (let i = 0; i < size; i++) {\n        expect(circleArray[i].length).to.be(size);\n        for (let j = 0; j < size; j++) {\n          const dx = Math.abs(radius - i);\n          const dy = Math.abs(radius - j);\n          const distanceSq = Math.pow(dx, 2) + Math.pow(dy, 2);\n          if (circleArray[i][j] === true) {\n            expect(distanceSq).to.be.within(0, maxRadiusSq);\n          } else {\n            expect(distanceSq).to.be.within(minRadiusSq, Infinity);\n          }\n        }\n      }\n    });","file":"browser/spec/ol/render/canvas/executorgroup.test.js","skipped":false,"dir":"test"},{"name":"orders the indexes correctly from closest to farthest away","suites":["ol.render.canvas.ExecutorGroup","#getPixelIndexArray"],"updatePoint":{"line":34,"column":66,"index":1426},"line":34,"code":"    it('orders the indexes correctly from closest to farthest away', function () {\n      const radius = 10;\n      const size = radius * 2 + 1;\n      const hitIndexes = getPixelIndexArray(radius);\n\n      // Center first\n      expect(hitIndexes[0]).to.be((size * radius + radius) * 4 + 3);\n\n      // 4 Pixels above/below/left/right of center next\n      const begin = hitIndexes.slice(1, 5);\n      expect(begin).to.contain((radius * size + radius + 1) * 4 + 3);\n      expect(begin).to.contain(((radius + 1) * size + radius) * 4 + 3);\n      expect(begin).to.contain(((radius - 1) * size + radius) * 4 + 3);\n      expect(begin).to.contain((radius * size + radius - 1) * 4 + 3);\n\n      // 4 Pixels in the middle of each side in the last 12 elements (at radius 10)\n      const last = hitIndexes.slice(hitIndexes.length - 12);\n      expect(last).to.contain((0 * size + radius) * 4 + 3);\n      expect(last).to.contain((radius * size + 0) * 4 + 3);\n      expect(last).to.contain((radius * size + size - 1) * 4 + 3);\n      expect(last).to.contain(((size - 1) * size + radius) * 4 + 3);\n    });","file":"browser/spec/ol/render/canvas/executorgroup.test.js","skipped":false,"dir":"test"},{"name":"has no duplicate indexes","suites":["ol.render.canvas.ExecutorGroup","#getPixelIndexArray"],"updatePoint":{"line":56,"column":32,"index":2475},"line":56,"code":"    it('has no duplicate indexes', function () {\n      const radius = 10;\n      const hitIndexes = getPixelIndexArray(radius);\n      expect(new Set(hitIndexes).size).to.be(hitIndexes.length);\n    });","file":"browser/spec/ol/render/canvas/executorgroup.test.js","skipped":false,"dir":"test"},{"name":"does not exceed the color range","suites":["hitdetect"],"updatePoint":{"line":20,"column":37,"index":962},"line":20,"code":"  it('does not exceed the color range', function () {\n    const imageData = createHitDetectionImageData([2, 2], [create()], features, styleFunction, [0, 0, 0, 0], 1, 0);\n    expect(Array.prototype.slice.call(imageData.data, 0, 3)).to.eql([255, 255, 252]);\n  });","file":"browser/spec/ol/render/canvas/hitdetect.test.js","skipped":false,"dir":"test"},{"name":"detects hit at the correct position","suites":["hitdetect"],"updatePoint":{"line":24,"column":41,"index":1228},"line":24,"code":"  it('detects hit at the correct position', function () {\n    const context = createCanvasContext2D(3, 3);\n    context.fillStyle = '#ffffff';\n    context.fillRect(1, 1, 1, 1);\n    const features = [new Feature()];\n    const imageData = context.getImageData(0, 0, 3, 3);\n    expect(hitDetect([2, 2], features, imageData)).to.have.length(1);\n    expect(hitDetect([2, 3], features, imageData)).to.have.length(1);\n    expect(hitDetect([3, 2], features, imageData)).to.have.length(1);\n    expect(hitDetect([3, 3], features, imageData)).to.have.length(1);\n    expect(hitDetect([1.5, 1.5], features, imageData)).to.have.length(1);\n    expect(hitDetect([3.4, 3.4], features, imageData)).to.have.length(1);\n    expect(hitDetect([1.4, 1], features, imageData)).to.have.length(0);\n    expect(hitDetect([1, 2.4], features, imageData)).to.have.length(0);\n    expect(hitDetect([2.4, 1], features, imageData)).to.have.length(0);\n    expect(hitDetect([3.5, 4.5], features, imageData)).to.have.length(0);\n    expect(hitDetect([5, 4], features, imageData)).to.have.length(0);\n    expect(hitDetect([4.5, 5], features, imageData)).to.have.length(0);\n    expect(hitDetect([1.4, 3.5], features, imageData)).to.have.length(0);\n    expect(hitDetect([1, 4.5], features, imageData)).to.have.length(0);\n    expect(hitDetect([1.5, 5], features, imageData)).to.have.length(0);\n  });","file":"browser/spec/ol/render/canvas/hitdetect.test.js","skipped":false,"dir":"test"},{"name":"correctly detects hit for pixel exceeding canvas dimension","suites":["hitdetect"],"updatePoint":{"line":46,"column":64,"index":2605},"line":46,"code":"  it('correctly detects hit for pixel exceeding canvas dimension', function () {\n    const features = [new Feature()];\n    const context = createCanvasContext2D(2, 2);\n    context.fillStyle = '#ffffff';\n    context.fillRect(1, 1, 1, 1);\n    let imageData = context.getImageData(0, 0, 2, 2);\n    expect(hitDetect([4, 2], features, imageData)).to.have.length(1);\n    expect(hitDetect([2, 4], features, imageData)).to.have.length(1);\n    expect(hitDetect([-2, 4], features, imageData)).to.have.length(0);\n    expect(hitDetect([4, -2], features, imageData)).to.have.length(0);\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n    context.fillRect(0, 0, 1, 1);\n    imageData = context.getImageData(0, 0, 2, 2);\n    expect(hitDetect([-2, 0], features, imageData)).to.have.length(1);\n    expect(hitDetect([0, -2], features, imageData)).to.have.length(1);\n    expect(hitDetect([-2, 4], features, imageData)).to.have.length(0);\n    expect(hitDetect([4, -2], features, imageData)).to.have.length(0);\n  });","file":"browser/spec/ol/render/canvas/hitdetect.test.js","skipped":false,"dir":"test"},{"name":"finds correct geometry when overlapping","suites":["hitdetect"],"updatePoint":{"line":64,"column":45,"index":3607},"line":64,"code":"  it('finds correct geometry when overlapping', function () {\n    const bottomPoint = new Feature(new Point([90, 100]));\n    const bottomLineString = new Feature(new LineString([[0, 140], [200, 140]]));\n    const bottomPolygon = new Feature(new Polygon([[[0, 0], [0, 200], [200, 200], [200, 0], [0, 0]]]));\n    const geometryCollection = new Feature(new GeometryCollection([new Point([100, 100]), new LineString([[0, 160], [200, 160]]), new Polygon([[[66, 0], [66, 200], [200, 200], [200, 0], [66, 0]]])]));\n    const topPoint = new Feature(new Point([110, 100]));\n    const topLineString = new Feature(new LineString([[0, 180], [200, 180]]));\n    const topPolygon = new Feature(new Polygon([[[133, 0], [133, 200], [200, 200], [200, 0], [133, 0]]]));\n    features = [bottomPoint, bottomLineString, bottomPolygon, geometryCollection, topPoint, topLineString, topPolygon];\n    styleFunction = function (feature) {\n      const index = features.indexOf(feature);\n      const color = [index & 4 ? 200 : 0, index & 2 ? 200 : 0, index & 1 ? 200 : 0];\n      const geometry = feature.getGeometry();\n      const geometries = geometry instanceof GeometryCollection ? geometry.getGeometriesArrayRecursive() : [geometry];\n      return geometries.map(function (geometry) {\n        const type = geometry.getType();\n        return new Style({\n          geometry: geometry,\n          fill: new Fill({\n            color: color\n          }),\n          stroke: type === 'LineString' ? new Stroke({\n            color: color,\n            width: 150\n          }) : undefined,\n          image: new Circle({\n            radius: 40,\n            fill: new Fill({\n              color: color\n            })\n          })\n        });\n      });\n    };\n    const imageData = createHitDetectionImageData([200, 200], [[0.5, 0, 0, -0.5, 0, 100]], features, styleFunction, [0, 0, 200, 200], 1, 0);\n    expect(hitDetect([55, 100], features, imageData)[0]).to.be(bottomPoint);\n    expect(hitDetect([65, 100], features, imageData)[0]).to.be(geometryCollection);\n    expect(hitDetect([75, 100], features, imageData)[0]).to.be(topPoint);\n    expect(hitDetect([33, 190], features, imageData)[0]).to.be(bottomPolygon);\n    expect(hitDetect([100, 190], features, imageData)[0]).to.be(geometryCollection);\n    expect(hitDetect([166, 190], features, imageData)[0]).to.be(topPolygon);\n    expect(hitDetect([10, 130], features, imageData)[0]).to.be(bottomLineString);\n    expect(hitDetect([10, 110], features, imageData)[0]).to.be(geometryCollection);\n    expect(hitDetect([10, 90], features, imageData)[0]).to.be(topLineString);\n  });","file":"browser/spec/ol/render/canvas/hitdetect.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol.render.canvas.Immediate","constructor"],"updatePoint":{"line":28,"column":27,"index":1392},"line":28,"code":"    it('creates an instance', function () {\n      const instance = new CanvasImmediateRenderer();\n      expect(instance).to.be.a(CanvasImmediateRenderer);\n      expect(instance).to.be.a(VectorContext);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls the more specific methods with style parts","suites":["ol.render.canvas.Immediate","#setStyle()"],"updatePoint":{"line":35,"column":56,"index":1677},"line":35,"code":"    it('calls the more specific methods with style parts', function () {\n      const context = new CanvasImmediateRenderer();\n      sinon.spy(context, 'setFillStrokeStyle');\n      sinon.spy(context, 'setImageStyle');\n      sinon.spy(context, 'setTextStyle');\n      const fill = new Fill({});\n      const stroke = new Stroke({});\n      const text = new Text({});\n      const image = new CircleStyle({});\n      const style = new Style({\n        fill: fill,\n        stroke: stroke,\n        image: image,\n        text: text\n      });\n      context.setStyle(style);\n      expect(context.setFillStrokeStyle.calledOnce).to.be(true);\n      expect(context.setFillStrokeStyle.firstCall.calledWithExactly(fill, stroke)).to.be(true);\n      expect(context.setImageStyle.calledOnce).to.be(true);\n      expect(context.setImageStyle.firstCall.calledWithExactly(image)).to.be(true);\n      expect(context.setTextStyle.calledOnce).to.be(true);\n      expect(context.setTextStyle.firstCall.calledWithExactly(text)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls drawPoint() with a Point","suites":["ol.render.canvas.Immediate","#drawGeometry()"],"updatePoint":{"line":61,"column":38,"index":2763},"line":61,"code":"    it('calls drawPoint() with a Point', function () {\n      const context = new CanvasImmediateRenderer(getMockContext(), 1, extent);\n      sinon.spy(context, 'drawPoint');\n      const geometry = new Point([1, 2]);\n      context.drawGeometry(geometry);\n      expect(context.drawPoint.calledOnce).to.be(true);\n      expect(context.drawPoint.firstCall.calledWithExactly(geometry)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls drawLineString() with a LineString","suites":["ol.render.canvas.Immediate","#drawGeometry()"],"updatePoint":{"line":69,"column":48,"index":3174},"line":69,"code":"    it('calls drawLineString() with a LineString', function () {\n      const context = new CanvasImmediateRenderer(getMockContext(), 1, extent);\n      sinon.spy(context, 'drawLineString');\n      const geometry = new LineString([[1, 2], [3, 4]]);\n      context.drawGeometry(geometry);\n      expect(context.drawLineString.calledOnce).to.be(true);\n      expect(context.drawLineString.firstCall.calledWithExactly(geometry)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls drawPolygon() with a Polygon","suites":["ol.render.canvas.Immediate","#drawGeometry()"],"updatePoint":{"line":77,"column":42,"index":3609},"line":77,"code":"    it('calls drawPolygon() with a Polygon', function () {\n      const context = new CanvasImmediateRenderer(getMockContext(), 1, extent);\n      sinon.spy(context, 'drawPolygon');\n      const geometry = new Polygon([[[1, 2], [3, 4], [5, 6], [1, 2]]]);\n      context.drawGeometry(geometry);\n      expect(context.drawPolygon.calledOnce).to.be(true);\n      expect(context.drawPolygon.firstCall.calledWithExactly(geometry)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls drawMultiPoint() with a MultiPoint","suites":["ol.render.canvas.Immediate","#drawGeometry()"],"updatePoint":{"line":85,"column":48,"index":4056},"line":85,"code":"    it('calls drawMultiPoint() with a MultiPoint', function () {\n      const context = new CanvasImmediateRenderer(getMockContext(), 1, extent);\n      sinon.spy(context, 'drawMultiPoint');\n      const geometry = new MultiPoint([[1, 2], [3, 4]]);\n      context.drawGeometry(geometry);\n      expect(context.drawMultiPoint.calledOnce).to.be(true);\n      expect(context.drawMultiPoint.firstCall.calledWithExactly(geometry)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls drawMultiLineString() with a MultiLineString","suites":["ol.render.canvas.Immediate","#drawGeometry()"],"updatePoint":{"line":93,"column":58,"index":4507},"line":93,"code":"    it('calls drawMultiLineString() with a MultiLineString', function () {\n      const context = new CanvasImmediateRenderer(getMockContext(), 1, extent);\n      sinon.spy(context, 'drawMultiLineString');\n      const geometry = new MultiLineString([[[1, 2], [3, 4]]]);\n      context.drawGeometry(geometry);\n      expect(context.drawMultiLineString.calledOnce).to.be(true);\n      expect(context.drawMultiLineString.firstCall.calledWithExactly(geometry)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls drawMultiPolygon() with a MultiPolygon","suites":["ol.render.canvas.Immediate","#drawGeometry()"],"updatePoint":{"line":101,"column":52,"index":4974},"line":101,"code":"    it('calls drawMultiPolygon() with a MultiPolygon', function () {\n      const context = new CanvasImmediateRenderer(getMockContext(), 1, extent);\n      sinon.spy(context, 'drawMultiPolygon');\n      const geometry = new MultiPolygon([[[[1, 2], [3, 4], [5, 6], [1, 2]]]]);\n      context.drawGeometry(geometry);\n      expect(context.drawMultiPolygon.calledOnce).to.be(true);\n      expect(context.drawMultiPolygon.firstCall.calledWithExactly(geometry)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls drawGeometryCollection() with a GeometryCollection","suites":["ol.render.canvas.Immediate","#drawGeometry()"],"updatePoint":{"line":109,"column":64,"index":5459},"line":109,"code":"    it('calls drawGeometryCollection() with a GeometryCollection', function () {\n      const context = new CanvasImmediateRenderer(getMockContext(), 1, extent);\n      sinon.spy(context, 'drawGeometryCollection');\n      sinon.spy(context, 'drawPoint');\n      sinon.spy(context, 'drawLineString');\n      sinon.spy(context, 'drawPolygon');\n      const point = new Point([1, 2]);\n      const linestring = new LineString([[1, 2], [3, 4]]);\n      const polygon = new Polygon([[[1, 2], [3, 4], [5, 6], [1, 2]]]);\n      const geometry = new GeometryCollection([point, linestring, polygon]);\n      context.drawGeometry(geometry);\n      expect(context.drawGeometryCollection.calledOnce).to.be(true);\n      expect(context.drawPoint.calledOnce).to.be(true);\n      expect(context.drawPoint.firstCall.calledWithExactly(point)).to.be(true);\n      expect(context.drawLineString.calledOnce).to.be(true);\n      expect(context.drawLineString.firstCall.calledWithExactly(linestring)).to.be(true);\n      expect(context.drawPolygon.calledOnce).to.be(true);\n      expect(context.drawPolygon.firstCall.calledWithExactly(polygon)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"calls drawCircle() with a Circle","suites":["ol.render.canvas.Immediate","#drawGeometry()"],"updatePoint":{"line":128,"column":40,"index":6562},"line":128,"code":"    it('calls drawCircle() with a Circle', function () {\n      const context = new CanvasImmediateRenderer(getMockContext(), 1, extent);\n      sinon.spy(context, 'drawCircle');\n      const geometry = new Circle([0, 0]);\n      context.drawGeometry(geometry);\n      expect(context.drawCircle.calledOnce).to.be(true);\n      expect(context.drawCircle.firstCall.calledWithExactly(geometry)).to.be(true);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"creates the correct canvas instructions for 3D geometries","suites":["ol.render.canvas.Immediate","#drawMultiPolygon()"],"updatePoint":{"line":138,"column":65,"index":7048},"line":138,"code":"    it('creates the correct canvas instructions for 3D geometries', function () {\n      const instructions = [];\n      function serialize(index, instruction) {\n        if (!instruction) {\n          return 'id: ' + index + ' NO INSTRUCTION';\n        }\n        const parts = ['id: ' + index, 'type: ' + instruction.type];\n        if (instruction.args) {\n          parts.push('args: [' + instruction.args.map(function (arg) {\n            if (typeof arg === 'number') {\n              return arg.toFixed(9);\n            }\n            return arg;\n          }).join(', ') + ']');\n        }\n        return parts.join(', ');\n      }\n      const context = {\n        beginPath: function () {},\n        moveTo: function (x, y) {\n          instructions.push({\n            type: 'moveTo',\n            args: [x, y]\n          });\n        },\n        lineTo: function (x, y) {\n          instructions.push({\n            type: 'lineTo',\n            args: [x, y]\n          });\n        },\n        closePath: function () {\n          instructions.push({\n            type: 'closePath'\n          });\n        },\n        setLineDash: function () {},\n        stroke: function () {}\n      };\n      const transform = [0.0004088332670837288, 0, 0, -0.0004088332670837288, 4480.991370439071, 1529.5752568707105];\n      const extent = [-10960437.252092224, 2762924.0275091752, -7572748.158493212, 3741317.9895594316];\n      const canvas = new CanvasImmediateRenderer(context, 1, extent, transform);\n      canvas.strokeState_ = {\n        lineCap: 'round',\n        lineDash: [],\n        lineJoin: 'round',\n        lineWidth: 3,\n        miterLimit: 10,\n        strokeStyle: '#00FFFF'\n      };\n      const multiPolygonGeometry = new MultiPolygon([[[\n      // first polygon\n      [-80.736061, 28.788576000000006, 0],\n      // moveTo()\n      [-80.763557, 28.821799999999996, 0],\n      // lineTo()\n      [-80.817406, 28.895123999999996, 0],\n      // lineTo()\n      [-80.891304, 29.013130000000004, 0],\n      // lineTo()\n      [-80.916512, 29.071560000000005, 0],\n      // lineTo()\n      [-80.899323, 29.061249000000004, 0],\n      // lineTo()\n      [-80.862663, 28.991361999999995, 0],\n      // lineTo()\n      [-80.736061, 28.788576000000006, 0] //  closePath()\n      ]], [[\n      // second polygon\n      [-82.102127, 26.585724, 0],\n      //          moveTo()\n      [-82.067139, 26.497208, 0],\n      //          lineTo()\n      [-82.097641, 26.493585999999993, 0],\n      // lineTo()\n      [-82.135895, 26.642279000000002, 0],\n      // lineTo()\n      [-82.183495, 26.683082999999996, 0],\n      // lineTo()\n      [-82.128838, 26.693342, 0],\n      //          lineTo()\n      [-82.102127, 26.585724, 0] //           closePath()\n      ]]]).transform('EPSG:4326', 'EPSG:3857');\n      canvas.drawMultiPolygon(multiPolygonGeometry);\n      const expected = [\n      // first polygon\n      {\n        type: 'moveTo',\n        args: [806.6035275946265, 160.48916296287916]\n      }, {\n        type: 'lineTo',\n        args: [805.3521540835154, 158.76358389011807]\n      }, {\n        type: 'lineTo',\n        args: [802.9014262612932, 154.95335187132082]\n      }, {\n        type: 'lineTo',\n        args: [799.5382461724039, 148.815592819916]\n      }, {\n        type: 'lineTo',\n        args: [798.3910020835165, 145.77392230456553]\n      }, {\n        type: 'lineTo',\n        args: [799.1732925724045, 146.31080369865776]\n      }, {\n        type: 'lineTo',\n        args: [800.8417299057378, 149.94832216046188]\n      }, {\n        type: 'closePath'\n      },\n      // second polygon\n      {\n        type: 'moveTo',\n        args: [744.4323460835158, 273.7179168205373]\n      }, {\n        type: 'lineTo',\n        args: [746.0246888390716, 278.22094795365365]\n      }, {\n        type: 'lineTo',\n        args: [744.6365089279602, 278.40513424671826]\n      }, {\n        type: 'lineTo',\n        args: [742.8955268835157, 270.83899948444764]\n      }, {\n        type: 'lineTo',\n        args: [740.7291979946272, 268.76099731369345]\n      }, {\n        type: 'lineTo',\n        args: [743.2166987946266, 268.23842607400616]\n      }, {\n        type: 'closePath'\n      }];\n      for (let i = 0, ii = instructions.length; i < ii; ++i) {\n        const actualInstruction = serialize(i, instructions[i]);\n        const expectedInstruction = serialize(i, expected[i]);\n        expect(actualInstruction).to.equal(expectedInstruction);\n      }\n      expect(instructions.length).to.equal(expected.length);\n    });","file":"browser/spec/ol/render/canvas/immediate.test.js","skipped":false,"dir":"test"},{"name":"does not trigger redraw and clear measurements for unavailable fonts","suites":["ol.render.canvas","ol.render.canvas.registerFont()"],"updatePoint":{"line":12,"column":76,"index":581},"line":12,"code":"    it('does not trigger redraw and clear measurements for unavailable fonts', function (done) {\n      this.timeout(4000);\n      const spy = sinon.spy();\n      render.checkedFonts.addEventListener('propertychange', spy);\n      const interval = setInterval(function () {\n        if (render.checkedFonts.get('normal\\nnormal\\nfoo') == retries && render.checkedFonts.get('normal\\nnormal\\nsans-serif') == retries) {\n          clearInterval(interval);\n          render.checkedFonts.removeEventListener('propertychange', spy);\n          expect(spy.callCount).to.be(0);\n          expect(render.textHeights).to.not.eql({});\n          done();\n        }\n      }, 32);\n      render.registerFont('12px foo,sans-serif');\n    });","file":"browser/spec/ol/render/canvas/index.test.js","skipped":false,"dir":"test"},{"name":"does not trigger redraw and clear measurements for available fonts","suites":["ol.render.canvas","ol.render.canvas.registerFont()"],"updatePoint":{"line":27,"column":74,"index":1294},"line":27,"code":"    it('does not trigger redraw and clear measurements for available fonts', function (done) {\n      const spy = sinon.spy();\n      render.checkedFonts.addEventListener('propertychange', spy);\n      const interval = setInterval(function () {\n        if (render.checkedFonts.get('normal\\nnormal\\nsans-serif') == retries) {\n          clearInterval(interval);\n          render.checkedFonts.removeEventListener('propertychange', spy);\n          expect(spy.callCount).to.be(0);\n          expect(render.textHeights).to.not.eql({});\n          done();\n        }\n      }, 32);\n      render.registerFont('12px sans-serif');\n    });","file":"browser/spec/ol/render/canvas/index.test.js","skipped":false,"dir":"test"},{"name":"does not trigger redraw and clear measurements for the 'monospace' font","suites":["ol.render.canvas","ol.render.canvas.registerFont()"],"updatePoint":{"line":41,"column":79,"index":1921},"line":41,"code":"    it(\"does not trigger redraw and clear measurements for the 'monospace' font\", function (done) {\n      const spy = sinon.spy();\n      render.checkedFonts.addEventListener('propertychange', spy);\n      const interval = setInterval(function () {\n        if (render.checkedFonts.get('normal\\nnormal\\nmonospace') == retries) {\n          clearInterval(interval);\n          render.checkedFonts.removeEventListener('propertychange', spy);\n          expect(spy.callCount).to.be(0);\n          expect(render.textHeights).to.not.eql({});\n          done();\n        }\n      }, 32);\n      render.registerFont('12px monospace');\n    });","file":"browser/spec/ol/render/canvas/index.test.js","skipped":false,"dir":"test"},{"name":"triggers redraw and clear measurements for fonts that become available","suites":["ol.render.canvas","ol.render.canvas.registerFont()"],"updatePoint":{"line":55,"column":78,"index":2545},"line":55,"code":"    it('triggers redraw and clear measurements for fonts that become available', function (done) {\n      document.head.appendChild(font);\n      render.checkedFonts.addEventListener('propertychange', function onPropertyChange(e) {\n        render.checkedFonts.removeEventListener('propertychange', onPropertyChange);\n        expect(e.key).to.be('normal\\nnormal\\nAbel');\n        expect(render.textHeights).to.eql({});\n        document.head.removeChild(font);\n        done();\n      });\n      render.registerFont('12px Abel');\n    });","file":"browser/spec/ol/render/canvas/index.test.js","skipped":false,"dir":"test"},{"name":"respects line-height","suites":["ol.render.canvas","measureTextHeight"],"updatePoint":{"line":68,"column":28,"index":3077},"line":68,"code":"    it('respects line-height', function () {\n      const height = render.measureTextHeight('12px/1.2 sans-serif');\n      expect(render.measureTextHeight('12px/2.4 sans-serif')).to.be.greaterThan(height);\n      expect(render.measureTextHeight('12px/0.1 sans-serif')).to.be.lessThan(height);\n    });","file":"browser/spec/ol/render/canvas/index.test.js","skipped":false,"dir":"test"},{"name":"rotates a canvas at an offset point","suites":["ol.render.canvas","rotateAtOffset"],"updatePoint":{"line":75,"column":43,"index":3439},"line":75,"code":"    it('rotates a canvas at an offset point', function () {\n      const context = {\n        translate: sinon.spy(),\n        rotate: sinon.spy()\n      };\n      render.rotateAtOffset(context, Math.PI, 10, 10);\n      expect(context.translate.callCount).to.be(2);\n      expect(context.translate.firstCall.args).to.eql([10, 10]);\n      expect(context.translate.secondCall.args).to.eql([-10, -10]);\n      expect(context.rotate.callCount).to.be(1);\n      expect(context.rotate.firstCall.args).to.eql([Math.PI]);\n    });","file":"browser/spec/ol/render/canvas/index.test.js","skipped":false,"dir":"test"},{"name":"draws the image with correct parameters","suites":["ol.render.canvas","drawImageOrLabel"],"updatePoint":{"line":89,"column":47,"index":4007},"line":89,"code":"    it('draws the image with correct parameters', function () {\n      const layerContext = {\n        save: sinon.spy(),\n        setTransform: sinon.spy(),\n        drawImage: sinon.spy(),\n        restore: sinon.spy(),\n        globalAlpha: 1\n      };\n      const transform = [1, 0, 0, 1, 0, 0];\n      const opacity = 0.5;\n      const image = {};\n      const x = 0;\n      const y = 0;\n      const w = 1;\n      const h = 1;\n      const scale = 1;\n      render.drawImageOrLabel(layerContext, transform.slice(), opacity, image, x, y, w, h, x, y, scale);\n      expect(layerContext.save.callCount).to.be(1);\n      expect(layerContext.setTransform.callCount).to.be(1);\n      expect(layerContext.setTransform.firstCall.args).to.eql(transform);\n      expect(layerContext.drawImage.callCount).to.be(1);\n      expect(layerContext.globalAlpha).to.be(0.5);\n      expect(layerContext.restore.callCount).to.be(1);\n    });","file":"browser/spec/ol/render/canvas/index.test.js","skipped":false,"dir":"test"},{"name":"builds correct coordinates array with a stride of 2 for geometries with 2 dimensions","suites":["ol.render.canvas.TextBuilder"],"updatePoint":{"line":41,"column":90,"index":1992},"line":41,"code":"  it('builds correct coordinates array with a stride of 2 for geometries with 2 dimensions', function () {\n    const builder = createBuilder();\n    const features = [new Feature(new Point([0, 0])), new Feature(new Point([1, 1])), new Feature(new MultiLineString([new LineString([[1, 1], [3, 3]]), new LineString([[2, 2], [4, 4]])])), new Feature(new LineString([[3, 3], [5, 5]])), new Feature(new Circle([5, 5, 7], 4)), new Feature(new MultiPoint([[6, 6], [7, 7]])), new Feature(new Polygon([[[7, 7], [7, 9], [9, 9], [9, 7], [7, 7]]])), new Feature(new MultiPolygon([new Polygon([[[8, 8], [8, 10], [10, 10], [10, 8], [8, 8]]]), new Polygon([[[9, 9], [9, 11], [11, 11], [11, 9], [9, 9]]])]))];\n    builder.setTextStyle(new Text({\n      text: 'Text'\n    }));\n    features.forEach(function (feature) {\n      builder.drawText(feature.getGeometry(), feature);\n    });\n    expect(builder.coordinates).to.eql([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]);\n  });","file":"browser/spec/ol/render/canvas/textbuilder.test.js","skipped":false,"dir":"test"},{"name":"builds correct coordinates array with a stride of 2 for geometries with 3 dimensions","suites":["ol.render.canvas.TextBuilder"],"updatePoint":{"line":52,"column":90,"index":2971},"line":52,"code":"  it('builds correct coordinates array with a stride of 2 for geometries with 3 dimensions', function () {\n    const builder = createBuilder();\n    const features = [new Feature(new Point([0, 0, 1])), new Feature(new Point([1, 1, 2])), new Feature(new MultiLineString([new LineString([[1, 1, 1], [3, 3, 2]]), new LineString([[2, 2, 3], [4, 4, 4]])])), new Feature(new LineString([[3, 3, 5], [5, 5, 6]])), new Feature(new Circle([5, 5, 7], 4)), new Feature(new MultiPoint([[6, 6, 8], [7, 7, 9]])), new Feature(new Polygon([[[7, 7, 1], [7, 9, 2], [9, 9, 3], [9, 7, 4], [7, 7, 5]]])), new Feature(new MultiPolygon([new Polygon([[[8, 8, 1], [8, 10, 2], [10, 10, 3], [10, 8, 4], [8, 8, 1]]]), new Polygon([[[9, 9, 5], [9, 11, 6], [11, 11, 7], [11, 9, 8], [9, 9, 5]]])]))];\n    builder.setTextStyle(new Text({\n      text: 'Text'\n    }));\n    features.forEach(function (feature) {\n      builder.drawText(feature.getGeometry(), feature);\n    });\n    expect(builder.coordinates).to.eql([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]);\n  });","file":"browser/spec/ol/render/canvas/textbuilder.test.js","skipped":false,"dir":"test"},{"name":"renders polygon labels only when they fit","suites":["ol.render.canvas.TextBuilder"],"updatePoint":{"line":63,"column":47,"index":3982},"line":63,"code":"  it('renders polygon labels only when they fit', function () {\n    let builder = createBuilder();\n    const geometry = new Polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]]);\n    const feature = new Feature(geometry);\n    builder.setTextStyle(new Text({\n      text: 'This is a long text'\n    }));\n    builder.drawText(geometry, feature);\n    expect(builder.instructions.length).to.be(3);\n    executeInstructions(builder, 1, 0);\n    builder = createBuilder();\n    builder.setTextStyle(new Text({\n      text: 'short'\n    }));\n    builder.drawText(geometry, feature);\n    expect(builder.instructions.length).to.be(3);\n    executeInstructions(builder, 1, 1);\n  });","file":"browser/spec/ol/render/canvas/textbuilder.test.js","skipped":false,"dir":"test"},{"name":"renders multipolygon labels only when they fit","suites":["ol.render.canvas.TextBuilder"],"updatePoint":{"line":81,"column":52,"index":4650},"line":81,"code":"  it('renders multipolygon labels only when they fit', function () {\n    const geometry = new MultiPolygon([[[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], [[[1, 1], [1, 2], [2, 2], [2, 1], [1, 1]]]]);\n    const feature = new Feature(geometry);\n    let builder = createBuilder();\n    builder.setTextStyle(new Text({\n      text: 'This is a long text'\n    }));\n    builder.drawText(geometry, feature);\n    expect(builder.instructions.length).to.be(3);\n    executeInstructions(builder, 1, 0);\n    builder = createBuilder();\n    builder.setTextStyle(new Text({\n      text: 'short'\n    }));\n    builder.drawText(geometry, feature);\n    expect(builder.instructions.length).to.be(3);\n    executeInstructions(builder, 1, 2);\n  });","file":"browser/spec/ol/render/canvas/textbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a matching geometry widths array for multipolygons","suites":["ol.render.canvas.TextBuilder"],"updatePoint":{"line":99,"column":66,"index":5383},"line":99,"code":"  it('generates a matching geometry widths array for multipolygons', function () {\n    const feature = new Feature(new MultiPolygon([[[[-180, -90], [-180, 90], [-50, 90], [-50, -90], [-180, -90]]], [[[-50, -90], [-50, 90], [70, 90], [70, -90], [-50, -90]]], [[[70, -90], [70, 90], [180, 90], [180, -90], [70, -90]]]]));\n    const builder = new TextBuilder(1, [-50, -90, 70, 90], 1, 1);\n    builder.setTextStyle(new Text({\n      text: 'text'\n    }));\n    builder.drawText(feature.getGeometry(), feature);\n    expect(builder.coordinates).to.have.length(2);\n    expect(builder.instructions).to.have.length(3);\n    const geometryWidths = builder.instructions[1][25];\n    expect(geometryWidths).to.have.length(1);\n    expect(geometryWidths[0]).to.be(120);\n  });","file":"browser/spec/ol/render/canvas/textbuilder.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol.render.Feature","Constructor"],"updatePoint":{"line":14,"column":27,"index":579},"line":14,"code":"    it('creates an instance', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature).to.be.a(RenderFeature);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns a single property","suites":["ol.render.Feature","#get()"],"updatePoint":{"line":20,"column":33,"index":813},"line":20,"code":"    it('returns a single property', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.get('foo')).to.be('bar');\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns the ends it was created with","suites":["ol.render.Feature","#getEnds()"],"updatePoint":{"line":26,"column":44,"index":1063},"line":26,"code":"    it('returns the ends it was created with', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getEnds()).to.equal(ends);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns the correct extent for a point","suites":["ol.render.Feature","#getExtent()"],"updatePoint":{"line":32,"column":46,"index":1318},"line":32,"code":"    it('returns the correct extent for a point', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getExtent()).to.eql([0, 0, 0, 0]);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"caches the extent","suites":["ol.render.Feature","#getExtent()"],"updatePoint":{"line":36,"column":25,"index":1513},"line":36,"code":"    it('caches the extent', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getExtent()).to.equal(feature.extent_);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns the correct extent for a linestring","suites":["ol.render.Feature","#getExtent()"],"updatePoint":{"line":40,"column":51,"index":1739},"line":40,"code":"    it('returns the correct extent for a linestring', function () {\n      const feature = new RenderFeature('LineString', [-1, -2, 2, 1], null, {});\n      expect(feature.getExtent()).to.eql([-1, -2, 2, 1]);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns the flat coordinates it was created with","suites":["ol.render.Feature","#getFlatCoordinates()"],"updatePoint":{"line":46,"column":56,"index":2015},"line":46,"code":"    it('returns the flat coordinates it was created with', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getFlatCoordinates()).to.equal(flatCoordinates);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns correct point and caches it","suites":["ol.render.Feature","#getFlatInteriorPoint()"],"updatePoint":{"line":52,"column":43,"index":2300},"line":52,"code":"    it('returns correct point and caches it', function () {\n      const polygon = new Polygon([[[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]]]);\n      const feature = new RenderFeature('Polygon', polygon.getOrientedFlatCoordinates(), polygon.getEnds());\n      expect(feature.getFlatInteriorPoint()).to.eql([5, 5, 10]);\n      expect(feature.getFlatInteriorPoint()).to.be(feature.flatInteriorPoints_);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns correct points and caches them","suites":["ol.render.Feature","#getFlatInteriorPoints()"],"updatePoint":{"line":60,"column":46,"index":2768},"line":60,"code":"    it('returns correct points and caches them', function () {\n      const polygon = new MultiPolygon([[[[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]]], [[[10, 0], [10, 10], [20, 10], [20, 0], [10, 0]]]]);\n      const feature = new RenderFeature('MultiPolygon', polygon.getOrientedFlatCoordinates(), polygon.getEndss());\n      expect(feature.getFlatInteriorPoints()).to.eql([5, 5, 10, 15, 5, 10]);\n      expect(feature.getFlatInteriorPoints()).to.be(feature.flatInteriorPoints_);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns correct point","suites":["ol.render.Feature","#getFlatMidpoint()"],"updatePoint":{"line":68,"column":29,"index":3290},"line":68,"code":"    it('returns correct point', function () {\n      const line = new LineString([[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]]);\n      const feature = new RenderFeature('LineString', line.getFlatCoordinates());\n      expect(feature.getFlatMidpoint()).to.eql([10, 10]);\n      expect(feature.getFlatMidpoint()).to.eql(feature.flatMidpoints_);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns correct points and caches them","suites":["ol.render.Feature","#getFlatMidpoints()"],"updatePoint":{"line":76,"column":46,"index":3708},"line":76,"code":"    it('returns correct points and caches them', function () {\n      const line = new MultiLineString([[[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]], [[10, 0], [10, 10], [20, 10], [20, 0], [10, 0]]]);\n      const feature = new RenderFeature('MultiLineString', line.getFlatCoordinates(), line.getEnds());\n      expect(feature.getFlatMidpoints()).to.eql([10, 10, 20, 10]);\n      expect(feature.getFlatMidpoints()).to.be(feature.flatMidpoints_);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns itself as geometry","suites":["ol.render.Feature","#getGeometry()"],"updatePoint":{"line":84,"column":34,"index":4195},"line":84,"code":"    it('returns itself as geometry', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getGeometry()).to.equal(feature);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns the feature id","suites":["ol.render.Feature","#getId()"],"updatePoint":{"line":90,"column":30,"index":4437},"line":90,"code":"    it('returns the feature id', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getId()).to.be('foo');\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns the properties it was created with","suites":["ol.render.Feature","#getProperties()"],"updatePoint":{"line":96,"column":50,"index":4696},"line":96,"code":"    it('returns the properties it was created with', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getProperties()).to.equal(properties);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns itself as simplified geometry","suites":["ol.render.Feature","#getSimplifiedGeometry()"],"updatePoint":{"line":102,"column":45,"index":4974},"line":102,"code":"    it('returns itself as simplified geometry', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getSimplifiedGeometry()).to.equal(feature);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns 2","suites":["ol.render.Feature","#getStride()"],"updatePoint":{"line":108,"column":17,"index":5217},"line":108,"code":"    it('returns 2', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getStride()).to.be(2);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns undefined","suites":["ol.render.Feature","#getStyleFunction()"],"updatePoint":{"line":114,"column":25,"index":5454},"line":114,"code":"    it('returns undefined', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getStyleFunction()).to.be(undefined);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"returns the type it was created with","suites":["ol.render.Feature","#getType()"],"updatePoint":{"line":120,"column":44,"index":5716},"line":120,"code":"    it('returns the type it was created with', function () {\n      const feature = new RenderFeature(type, flatCoordinates, ends, properties, 'foo');\n      expect(feature.getType()).to.equal(type);\n    });","file":"browser/spec/ol/render/feature.test.js","skipped":false,"dir":"test"},{"name":"calls addFeature for each feature","suites":["MixedGeometryBatch","#addFeatures"],"updatePoint":{"line":25,"column":41,"index":1276},"line":25,"code":"    it('calls addFeature for each feature', () => {\n      expect(spy.callCount).to.be(3);\n      expect(spy.args[0][0]).to.be(features[0]);\n      expect(spy.args[1][0]).to.be(features[1]);\n      expect(spy.args[2][0]).to.be(features[2]);\n    });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the geometries in the point batch","suites":["MixedGeometryBatch","features with Point geometries","#addFeature"],"updatePoint":{"line":53,"column":48,"index":2125},"line":53,"code":"      it('puts the geometries in the point batch', () => {\n        const keys = Object.keys(mixedBatch.pointBatch.entries);\n        const uid1 = getUid(feature1);\n        const uid2 = getUid(feature2);\n        expect(keys).to.eql([uid1, uid2]);\n        expect(mixedBatch.pointBatch.entries[uid1]).to.eql({\n          feature: feature1,\n          flatCoordss: [[0, 1]]\n        });\n        expect(mixedBatch.pointBatch.entries[uid2]).to.eql({\n          feature: feature2,\n          flatCoordss: [[2, 3]]\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the geometries count","suites":["MixedGeometryBatch","features with Point geometries","#addFeature"],"updatePoint":{"line":67,"column":39,"index":2639},"line":67,"code":"      it('computes the geometries count', () => {\n        expect(mixedBatch.pointBatch.geometriesCount).to.be(2);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"leaves other batches untouched","suites":["MixedGeometryBatch","features with Point geometries","#addFeature"],"updatePoint":{"line":70,"column":40,"index":2764},"line":70,"code":"      it('leaves other batches untouched', () => {\n        expect(Object.keys(mixedBatch.polygonBatch.entries)).to.have.length(0);\n        expect(Object.keys(mixedBatch.lineStringBatch.entries)).to.have.length(0);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the modified properties and geometry in the point batch","suites":["MixedGeometryBatch","features with Point geometries","#changeFeature","modifying geometry and props"],"updatePoint":{"line":86,"column":75,"index":3419},"line":86,"code":"        it('updates the modified properties and geometry in the point batch', () => {\n          const entry = mixedBatch.pointBatch.entries[getUid(feature1)];\n          expect(entry.feature.get('prop1')).to.eql('changed');\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"keeps geometry count the same","suites":["MixedGeometryBatch","features with Point geometries","#changeFeature","modifying geometry and props"],"updatePoint":{"line":90,"column":41,"index":3620},"line":90,"code":"        it('keeps geometry count the same', () => {\n          expect(mixedBatch.pointBatch.geometriesCount).to.be(2);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the geometry in the point batch","suites":["MixedGeometryBatch","features with Point geometries","#changeFeature","changing the geometry"],"updatePoint":{"line":101,"column":51,"index":4006},"line":101,"code":"        it('updates the geometry in the point batch', () => {\n          const entry = mixedBatch.pointBatch.entries[getUid(feature1)];\n          expect(entry.flatCoordss).to.eql([[40, 41]]);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"keeps geometry count the same","suites":["MixedGeometryBatch","features with Point geometries","#changeFeature","changing the geometry"],"updatePoint":{"line":105,"column":41,"index":4199},"line":105,"code":"        it('keeps geometry count the same', () => {\n          expect(mixedBatch.pointBatch.geometriesCount).to.be(2);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears the entry related to this feature","suites":["MixedGeometryBatch","features with Point geometries","#removeFeature"],"updatePoint":{"line":116,"column":50,"index":4556},"line":116,"code":"      it('clears the entry related to this feature', () => {\n        const keys = Object.keys(mixedBatch.pointBatch.entries);\n        expect(keys).to.not.contain(getUid(feature1));\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"recompute geometry count","suites":["MixedGeometryBatch","features with Point geometries","#removeFeature"],"updatePoint":{"line":120,"column":34,"index":4731},"line":120,"code":"      it('recompute geometry count', () => {\n        expect(mixedBatch.pointBatch.geometriesCount).to.be(1);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the geometries in the linestring batch","suites":["MixedGeometryBatch","features with LineString geometries","#addFeature"],"updatePoint":{"line":146,"column":53,"index":5537},"line":146,"code":"      it('puts the geometries in the linestring batch', () => {\n        const keys = Object.keys(mixedBatch.lineStringBatch.entries);\n        const uid1 = getUid(feature1);\n        const uid2 = getUid(feature2);\n        expect(keys).to.eql([uid1, uid2]);\n        expect(mixedBatch.lineStringBatch.entries[uid1]).to.eql({\n          feature: feature1,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 6, 7]],\n          verticesCount: 4\n        });\n        expect(mixedBatch.lineStringBatch.entries[uid2]).to.eql({\n          feature: feature2,\n          flatCoordss: [[8, 9, 10, 11, 12, 13]],\n          verticesCount: 3\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all geoms","suites":["MixedGeometryBatch","features with LineString geometries","#addFeature"],"updatePoint":{"line":162,"column":54,"index":6171},"line":162,"code":"      it('computes the aggregated metrics on all geoms', () => {\n        expect(mixedBatch.lineStringBatch.verticesCount).to.be(7);\n        expect(mixedBatch.lineStringBatch.geometriesCount).to.be(2);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"leaves other batches untouched","suites":["MixedGeometryBatch","features with LineString geometries","#addFeature"],"updatePoint":{"line":166,"column":40,"index":6368},"line":166,"code":"      it('leaves other batches untouched', () => {\n        expect(Object.keys(mixedBatch.polygonBatch.entries)).to.have.length(0);\n        expect(Object.keys(mixedBatch.pointBatch.entries)).to.have.length(0);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the modified properties and geometry in the linestring batch","suites":["MixedGeometryBatch","features with LineString geometries","#changeFeature","modifying geometry and props"],"updatePoint":{"line":183,"column":80,"index":7075},"line":183,"code":"        it('updates the modified properties and geometry in the linestring batch', () => {\n          const entry = mixedBatch.lineStringBatch.entries[getUid(feature1)];\n          expect(entry.feature.get('prop1')).to.eql('changed');\n          expect(entry.verticesCount).to.eql(6);\n          expect(entry.flatCoordss).to.eql([[0, 1, 2, 3, 4, 5, 6, 7, 100, 101, 102, 103]]);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on all geoms","suites":["MixedGeometryBatch","features with LineString geometries","#changeFeature","modifying geometry and props"],"updatePoint":{"line":189,"column":55,"index":7436},"line":189,"code":"        it('updates the aggregated metrics on all geoms', () => {\n          expect(mixedBatch.lineStringBatch.verticesCount).to.be(9);\n          expect(mixedBatch.lineStringBatch.geometriesCount).to.be(2);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the geometry in the linestring batch","suites":["MixedGeometryBatch","features with LineString geometries","#changeFeature","changing the geometry"],"updatePoint":{"line":201,"column":56,"index":7918},"line":201,"code":"        it('updates the geometry in the linestring batch', () => {\n          const entry = mixedBatch.lineStringBatch.entries[getUid(feature1)];\n          expect(entry.flatCoordss).to.eql([[40, 41, 42, 43]]);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on all geoms","suites":["MixedGeometryBatch","features with LineString geometries","#changeFeature","changing the geometry"],"updatePoint":{"line":205,"column":55,"index":8138},"line":205,"code":"        it('updates the aggregated metrics on all geoms', () => {\n          expect(mixedBatch.lineStringBatch.verticesCount).to.be(5);\n          expect(mixedBatch.lineStringBatch.geometriesCount).to.be(2);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears the entry related to this feature","suites":["MixedGeometryBatch","features with LineString geometries","#removeFeature"],"updatePoint":{"line":217,"column":50,"index":8569},"line":217,"code":"      it('clears the entry related to this feature', () => {\n        const keys = Object.keys(mixedBatch.lineStringBatch.entries);\n        expect(keys).to.not.contain(getUid(feature1));\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on all geoms","suites":["MixedGeometryBatch","features with LineString geometries","#removeFeature"],"updatePoint":{"line":221,"column":53,"index":8768},"line":221,"code":"      it('updates the aggregated metrics on all geoms', () => {\n        expect(mixedBatch.lineStringBatch.verticesCount).to.be(3);\n        expect(mixedBatch.lineStringBatch.geometriesCount).to.be(1);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the polygons in the polygon batch","suites":["MixedGeometryBatch","features with Polygon geometries","#addFeature"],"updatePoint":{"line":248,"column":48,"index":9747},"line":248,"code":"      it('puts the polygons in the polygon batch', () => {\n        const keys = Object.keys(mixedBatch.polygonBatch.entries);\n        const uid1 = getUid(feature1);\n        const uid2 = getUid(feature2);\n        expect(keys).to.eql([uid1, uid2]);\n        expect(mixedBatch.polygonBatch.entries[uid1]).to.eql({\n          feature: feature1,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7, 20, 21, 22, 23, -24, 25]],\n          verticesCount: 7,\n          ringsCount: 2,\n          ringsVerticesCounts: [[4, 3]]\n        });\n        expect(mixedBatch.polygonBatch.entries[uid2]).to.eql({\n          feature: feature2,\n          flatCoordss: [[8, 9, 10, 11, 120, 13, 30, 31, 32, 33, -34, 35, 40, 41, 42, 43, 44, 45, -46, 47]],\n          verticesCount: 10,\n          ringsCount: 3,\n          ringsVerticesCounts: [[3, 3, 4]]\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all polygons","suites":["MixedGeometryBatch","features with Polygon geometries","#addFeature"],"updatePoint":{"line":268,"column":57,"index":10596},"line":268,"code":"      it('computes the aggregated metrics on all polygons', () => {\n        expect(mixedBatch.polygonBatch.verticesCount).to.be(17);\n        expect(mixedBatch.polygonBatch.geometriesCount).to.be(2);\n        expect(mixedBatch.polygonBatch.ringsCount).to.be(5);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the linear rings in the linestring batch","suites":["MixedGeometryBatch","features with Polygon geometries","#addFeature"],"updatePoint":{"line":273,"column":55,"index":10864},"line":273,"code":"      it('puts the linear rings in the linestring batch', () => {\n        const keys = Object.keys(mixedBatch.lineStringBatch.entries);\n        expect(keys).to.eql([getUid(feature1), getUid(feature2)]);\n        expect(mixedBatch.lineStringBatch.entries[getUid(feature1)]).to.eql({\n          feature: feature1,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7], [20, 21, 22, 23, -24, 25]],\n          verticesCount: 7\n        });\n        expect(mixedBatch.lineStringBatch.entries[getUid(feature2)]).to.eql({\n          feature: feature2,\n          flatCoordss: [[8, 9, 10, 11, 120, 13], [30, 31, 32, 33, -34, 35], [40, 41, 42, 43, 44, 45, -46, 47]],\n          verticesCount: 10\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all linestrings","suites":["MixedGeometryBatch","features with Polygon geometries","#addFeature"],"updatePoint":{"line":287,"column":60,"index":11566},"line":287,"code":"      it('computes the aggregated metrics on all linestrings', () => {\n        expect(mixedBatch.lineStringBatch.verticesCount).to.be(17);\n        expect(mixedBatch.lineStringBatch.geometriesCount).to.be(5);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"leaves point batch untouched","suites":["MixedGeometryBatch","features with Polygon geometries","#addFeature"],"updatePoint":{"line":291,"column":38,"index":11762},"line":291,"code":"      it('leaves point batch untouched', () => {\n        expect(Object.keys(mixedBatch.pointBatch.entries)).to.have.length(0);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the modified properties and geometry in the polygon batch","suites":["MixedGeometryBatch","features with Polygon geometries","#changeFeature","modifying geometry and props"],"updatePoint":{"line":306,"column":77,"index":12390},"line":306,"code":"        it('updates the modified properties and geometry in the polygon batch', () => {\n          const entry = mixedBatch.polygonBatch.entries[getUid(feature1)];\n          expect(entry.feature.get('prop1')).to.eql('changed');\n          expect(entry.verticesCount).to.eql(11);\n          expect(entry.ringsCount).to.eql(3);\n          expect(entry.ringsVerticesCounts).to.eql([[4, 3, 4]]);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on all geoms","suites":["MixedGeometryBatch","features with Polygon geometries","#changeFeature","modifying geometry and props"],"updatePoint":{"line":313,"column":55,"index":12768},"line":313,"code":"        it('updates the aggregated metrics on all geoms', () => {\n          expect(mixedBatch.polygonBatch.verticesCount).to.be(21);\n          expect(mixedBatch.polygonBatch.geometriesCount).to.be(2);\n          expect(mixedBatch.polygonBatch.ringsCount).to.be(6);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the geometry in the polygon batch","suites":["MixedGeometryBatch","features with Polygon geometries","#changeFeature","changing the geometry"],"updatePoint":{"line":326,"column":53,"index":13333},"line":326,"code":"        it('updates the geometry in the polygon batch', () => {\n          const entry = mixedBatch.polygonBatch.entries[getUid(feature1)];\n          expect(entry.feature).to.be(feature1);\n          expect(entry.verticesCount).to.eql(4);\n          expect(entry.ringsCount).to.eql(1);\n          expect(entry.ringsVerticesCounts).to.eql([[4]]);\n          expect(entry.flatCoordss).to.eql([[201, 202, 203, 204, 205, 206, 2070, 208]]);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on all geoms","suites":["MixedGeometryBatch","features with Polygon geometries","#changeFeature","changing the geometry"],"updatePoint":{"line":334,"column":55,"index":13778},"line":334,"code":"        it('updates the aggregated metrics on all geoms', () => {\n          expect(mixedBatch.polygonBatch.verticesCount).to.be(14);\n          expect(mixedBatch.polygonBatch.geometriesCount).to.be(2);\n          expect(mixedBatch.polygonBatch.ringsCount).to.be(4);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears the entry related to this feature","suites":["MixedGeometryBatch","features with Polygon geometries","#removeFeature"],"updatePoint":{"line":347,"column":50,"index":14267},"line":347,"code":"      it('clears the entry related to this feature', () => {\n        const keys = Object.keys(mixedBatch.polygonBatch.entries);\n        expect(keys).to.not.contain(getUid(feature1));\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on all geoms","suites":["MixedGeometryBatch","features with Polygon geometries","#removeFeature"],"updatePoint":{"line":351,"column":53,"index":14463},"line":351,"code":"      it('updates the aggregated metrics on all geoms', () => {\n        expect(mixedBatch.polygonBatch.verticesCount).to.be(10);\n        expect(mixedBatch.polygonBatch.geometriesCount).to.be(1);\n        expect(mixedBatch.polygonBatch.ringsCount).to.be(3);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the polygons in the polygon batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#addFeature"],"updatePoint":{"line":375,"column":48,"index":15626},"line":375,"code":"      it('puts the polygons in the polygon batch', () => {\n        const uid = getUid(feature);\n        expect(mixedBatch.polygonBatch.entries[uid]).to.eql({\n          feature: feature,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7, 20, 21, 22, 23, -24, 25], [8, 9, 10, 11, 120, 13, 30, 31, 32, 33, -34, 35, 40, 41, 42, 43, 44, 45, -46, 47]],\n          verticesCount: 17,\n          ringsCount: 5,\n          ringsVerticesCounts: [[4, 3], [3, 3, 4]]\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the polygon rings and linestrings in the linestring batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#addFeature"],"updatePoint":{"line":385,"column":72,"index":16123},"line":385,"code":"      it('puts the polygon rings and linestrings in the linestring batch', () => {\n        const uid = getUid(feature);\n        expect(mixedBatch.lineStringBatch.entries[uid]).to.eql({\n          feature: feature,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7], [20, 21, 22, 23, -24, 25], [8, 9, 10, 11, 120, 13], [30, 31, 32, 33, -34, 35], [40, 41, 42, 43, 44, 45, -46, 47], [0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13]],\n          verticesCount: 24\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the points in the linestring batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#addFeature"],"updatePoint":{"line":393,"column":49,"index":16579},"line":393,"code":"      it('puts the points in the linestring batch', () => {\n        const uid = getUid(feature);\n        expect(mixedBatch.pointBatch.entries[uid]).to.eql({\n          feature: feature,\n          flatCoordss: [[101, 102], [201, 202], [301, 302]]\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all polygons","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#addFeature"],"updatePoint":{"line":400,"column":57,"index":16854},"line":400,"code":"      it('computes the aggregated metrics on all polygons', () => {\n        expect(mixedBatch.polygonBatch.verticesCount).to.be(17);\n        expect(mixedBatch.polygonBatch.geometriesCount).to.be(2);\n        expect(mixedBatch.polygonBatch.ringsCount).to.be(5);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all linestring","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#addFeature"],"updatePoint":{"line":405,"column":59,"index":17126},"line":405,"code":"      it('computes the aggregated metrics on all linestring', () => {\n        expect(mixedBatch.lineStringBatch.verticesCount).to.be(24);\n        expect(mixedBatch.lineStringBatch.geometriesCount).to.be(7);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all points","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#addFeature"],"updatePoint":{"line":409,"column":55,"index":17339},"line":409,"code":"      it('computes the aggregated metrics on all points', () => {\n        expect(mixedBatch.pointBatch.geometriesCount).to.be(3);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the geometries in the polygon batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","modifying geometry"],"updatePoint":{"line":423,"column":55,"index":17950},"line":423,"code":"        it('updates the geometries in the polygon batch', () => {\n          const entry = mixedBatch.polygonBatch.entries[getUid(feature)];\n          expect(entry).to.eql({\n            feature: feature,\n            flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7, 20, 21, 22, 23, -24, 25], [8, 9, 10, 11, 120, 13, 30, 31, 32, 33, -34, 35, 40, 41, 42, 43, 44, 45, -46, 47], [201, 202, 203, 204, 205, 206, 207, 208, 2090, 210]],\n            verticesCount: 22,\n            ringsCount: 6,\n            ringsVerticesCounts: [[4, 3], [3, 3, 4], [5]]\n          });\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the geometries in the linestring batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","modifying geometry"],"updatePoint":{"line":433,"column":58,"index":18513},"line":433,"code":"        it('updates the geometries in the linestring batch', () => {\n          const entry = mixedBatch.lineStringBatch.entries[getUid(feature)];\n          expect(entry).to.eql({\n            feature: feature,\n            flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7], [20, 21, 22, 23, -24, 25], [8, 9, 10, 11, 120, 13], [30, 31, 32, 33, -34, 35], [40, 41, 42, 43, 44, 45, -46, 47], [201, 202, 203, 204, 205, 206, 207, 208, 2090, 210], [0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13], [500, 501, 502, 503, 504, 505, 506, 507]],\n            verticesCount: 33\n          });\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on the polygon batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","modifying geometry"],"updatePoint":{"line":441,"column":63,"index":19096},"line":441,"code":"        it('updates the aggregated metrics on the polygon batch', () => {\n          expect(mixedBatch.polygonBatch.verticesCount).to.be(22);\n          expect(mixedBatch.polygonBatch.geometriesCount).to.be(3);\n          expect(mixedBatch.polygonBatch.ringsCount).to.be(6);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on the linestring batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","modifying geometry"],"updatePoint":{"line":446,"column":66,"index":19383},"line":446,"code":"        it('updates the aggregated metrics on the linestring batch', () => {\n          expect(mixedBatch.lineStringBatch.verticesCount).to.be(33);\n          expect(mixedBatch.lineStringBatch.geometriesCount).to.be(9);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the geometries in the polygon batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","changing the geometry"],"updatePoint":{"line":456,"column":55,"index":19841},"line":456,"code":"        it('updates the geometries in the polygon batch', () => {\n          const entry = mixedBatch.polygonBatch.entries[getUid(feature)];\n          expect(entry).to.eql({\n            feature: feature,\n            flatCoordss: [[201, 202, 203, 204, 205, 206, 2070, 208]],\n            verticesCount: 4,\n            ringsCount: 1,\n            ringsVerticesCounts: [[4]]\n          });\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the geometries in the linestring batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","changing the geometry"],"updatePoint":{"line":466,"column":58,"index":20239},"line":466,"code":"        it('updates the geometries in the linestring batch', () => {\n          const entry = mixedBatch.lineStringBatch.entries[getUid(feature)];\n          expect(entry).to.eql({\n            feature: feature,\n            flatCoordss: [[201, 202, 203, 204, 205, 206, 2070, 208]],\n            verticesCount: 4\n          });\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on the polygon batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","changing the geometry"],"updatePoint":{"line":474,"column":63,"index":20578},"line":474,"code":"        it('updates the aggregated metrics on the polygon batch', () => {\n          expect(mixedBatch.polygonBatch.verticesCount).to.be(4);\n          expect(mixedBatch.polygonBatch.geometriesCount).to.be(1);\n          expect(mixedBatch.polygonBatch.ringsCount).to.be(1);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on the linestring batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","changing the geometry"],"updatePoint":{"line":479,"column":66,"index":20864},"line":479,"code":"        it('updates the aggregated metrics on the linestring batch', () => {\n          expect(mixedBatch.lineStringBatch.verticesCount).to.be(4);\n          expect(mixedBatch.lineStringBatch.geometriesCount).to.be(1);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on the point batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#changeFeature","changing the geometry"],"updatePoint":{"line":483,"column":61,"index":21088},"line":483,"code":"        it('updates the aggregated metrics on the point batch', () => {\n          const keys = Object.keys(mixedBatch.pointBatch.entries);\n          expect(keys).to.not.contain(getUid(feature));\n          expect(mixedBatch.pointBatch.geometriesCount).to.be(0);\n        });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears all entries in the polygon batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#removeFeature"],"updatePoint":{"line":495,"column":49,"index":21524},"line":495,"code":"      it('clears all entries in the polygon batch', () => {\n        const keys = Object.keys(mixedBatch.polygonBatch.entries);\n        expect(keys).to.have.length(0);\n        expect(mixedBatch.polygonBatch.verticesCount).to.be(0);\n        expect(mixedBatch.polygonBatch.geometriesCount).to.be(0);\n        expect(mixedBatch.polygonBatch.ringsCount).to.be(0);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears all entries in the linestring batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#removeFeature"],"updatePoint":{"line":502,"column":52,"index":21895},"line":502,"code":"      it('clears all entries in the linestring batch', () => {\n        const keys = Object.keys(mixedBatch.lineStringBatch.entries);\n        expect(keys).to.have.length(0);\n        expect(mixedBatch.lineStringBatch.verticesCount).to.be(0);\n        expect(mixedBatch.lineStringBatch.geometriesCount).to.be(0);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears all entries in the point batch","suites":["MixedGeometryBatch","feature with nested geometries (collection, multi)","#removeFeature"],"updatePoint":{"line":508,"column":47,"index":22209},"line":508,"code":"      it('clears all entries in the point batch', () => {\n        const keys = Object.keys(mixedBatch.pointBatch.entries);\n        expect(keys).to.have.length(0);\n        expect(mixedBatch.pointBatch.geometriesCount).to.be(0);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the polygons in the polygon batch","suites":["MixedGeometryBatch","render feature with Polygon geometry","#addFeature"],"updatePoint":{"line":529,"column":48,"index":22976},"line":529,"code":"      it('puts the polygons in the polygon batch', () => {\n        const keys = Object.keys(mixedBatch.polygonBatch.entries);\n        expect(keys).to.eql([uid]);\n        expect(mixedBatch.polygonBatch.entries[uid]).to.eql({\n          feature: feature,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7, 20, 21, 22, 23, -24, 25]],\n          verticesCount: 7,\n          ringsCount: 2,\n          ringsVerticesCounts: [[4, 3]]\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all polygons","suites":["MixedGeometryBatch","render feature with Polygon geometry","#addFeature"],"updatePoint":{"line":540,"column":57,"index":23429},"line":540,"code":"      it('computes the aggregated metrics on all polygons', () => {\n        expect(mixedBatch.polygonBatch.verticesCount).to.be(7);\n        expect(mixedBatch.polygonBatch.geometriesCount).to.be(1);\n        expect(mixedBatch.polygonBatch.ringsCount).to.be(2);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the linear rings in the linestring batch","suites":["MixedGeometryBatch","render feature with Polygon geometry","#addFeature"],"updatePoint":{"line":545,"column":55,"index":23696},"line":545,"code":"      it('puts the linear rings in the linestring batch', () => {\n        const keys = Object.keys(mixedBatch.lineStringBatch.entries);\n        expect(keys).to.eql([uid]);\n        expect(mixedBatch.lineStringBatch.entries[uid]).to.eql({\n          feature: feature,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7], [20, 21, 22, 23, -24, 25]],\n          verticesCount: 7\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all linestrings","suites":["MixedGeometryBatch","render feature with Polygon geometry","#addFeature"],"updatePoint":{"line":554,"column":60,"index":24094},"line":554,"code":"      it('computes the aggregated metrics on all linestrings', () => {\n        expect(mixedBatch.lineStringBatch.verticesCount).to.be(7);\n        expect(mixedBatch.lineStringBatch.geometriesCount).to.be(2);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"leaves point batch untouched","suites":["MixedGeometryBatch","render feature with Polygon geometry","#addFeature"],"updatePoint":{"line":558,"column":38,"index":24289},"line":558,"code":"      it('leaves point batch untouched', () => {\n        expect(Object.keys(mixedBatch.pointBatch.entries)).to.have.length(0);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears the entry related to this feature","suites":["MixedGeometryBatch","render feature with Polygon geometry","#removeFeature"],"updatePoint":{"line":567,"column":50,"index":24603},"line":567,"code":"      it('clears the entry related to this feature', () => {\n        const keys = Object.keys(mixedBatch.polygonBatch.entries);\n        expect(keys).to.not.contain(uid);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"updates the aggregated metrics on all geoms","suites":["MixedGeometryBatch","render feature with Polygon geometry","#removeFeature"],"updatePoint":{"line":571,"column":53,"index":24786},"line":571,"code":"      it('updates the aggregated metrics on all geoms', () => {\n        expect(mixedBatch.polygonBatch.verticesCount).to.be(0);\n        expect(mixedBatch.polygonBatch.geometriesCount).to.be(0);\n        expect(mixedBatch.polygonBatch.ringsCount).to.be(0);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts two different polygons with holes in the polygon batch","suites":["MixedGeometryBatch","render feature with alternating CW and CCW rings"],"updatePoint":{"line":589,"column":67,"index":25597},"line":589,"code":"    it('puts two different polygons with holes in the polygon batch', () => {\n      expect(mixedBatch.polygonBatch.geometriesCount).to.be(2);\n      expect(mixedBatch.polygonBatch.entries[uid]).to.eql({\n        feature: feature,\n        flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7, 20, 21, 22, 23, -24, 25], [8, 9, 10, 11, 120, 13, 30, 31, 32, 33, -34, 35]],\n        verticesCount: 13,\n        ringsCount: 4,\n        ringsVerticesCounts: [[4, 3], [3, 3]]\n      });\n    });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the linear rings in the linestring batch","suites":["MixedGeometryBatch","render feature with alternating CW and CCW rings"],"updatePoint":{"line":599,"column":53,"index":26050},"line":599,"code":"    it('puts the linear rings in the linestring batch', () => {\n      expect(mixedBatch.lineStringBatch.entries[uid]).to.eql({\n        feature: feature,\n        flatCoordss: [[0, 1, 2, 3, 4, 5, 60, 7], [20, 21, 22, 23, -24, 25], [8, 9, 10, 11, 120, 13], [30, 31, 32, 33, -34, 35]],\n        verticesCount: 13\n      });\n    });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the polygons in the polygon batch","suites":["MixedGeometryBatch","feature with multi geometry","#addFeature"],"updatePoint":{"line":634,"column":48,"index":27706},"line":634,"code":"      it('puts the polygons in the polygon batch', () => {\n        expect(mixedBatch.polygonBatch.entries[uid2]).to.eql({\n          feature: feature2,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 6, 7, 20, 21, 22, 23, 24, 25], [8, 9, 10, 11, 12, 13, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47]],\n          verticesCount: 17,\n          ringsCount: 5,\n          ringsVerticesCounts: [[4, 3], [3, 3, 4]]\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"puts the polygon rings and linestrings in the linestring batch","suites":["MixedGeometryBatch","feature with multi geometry","#addFeature"],"updatePoint":{"line":643,"column":72,"index":28163},"line":643,"code":"      it('puts the polygon rings and linestrings in the linestring batch', () => {\n        expect(mixedBatch.lineStringBatch.entries[uid1]).to.eql({\n          feature: feature1,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13]],\n          verticesCount: 7\n        });\n        expect(mixedBatch.lineStringBatch.entries[uid2]).to.eql({\n          feature: feature2,\n          flatCoordss: [[0, 1, 2, 3, 4, 5, 6, 7], [20, 21, 22, 23, 24, 25], [8, 9, 10, 11, 12, 13], [30, 31, 32, 33, 34, 35], [40, 41, 42, 43, 44, 45, 46, 47]],\n          verticesCount: 17\n        });\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all polygons","suites":["MixedGeometryBatch","feature with multi geometry","#addFeature"],"updatePoint":{"line":655,"column":57,"index":28746},"line":655,"code":"      it('computes the aggregated metrics on all polygons', () => {\n        expect(mixedBatch.polygonBatch.verticesCount).to.be(17);\n        expect(mixedBatch.polygonBatch.geometriesCount).to.be(2);\n        expect(mixedBatch.polygonBatch.ringsCount).to.be(5);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all linestring","suites":["MixedGeometryBatch","feature with multi geometry","#addFeature"],"updatePoint":{"line":660,"column":59,"index":29018},"line":660,"code":"      it('computes the aggregated metrics on all linestring', () => {\n        expect(mixedBatch.lineStringBatch.verticesCount).to.be(24);\n        expect(mixedBatch.lineStringBatch.geometriesCount).to.be(7);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"computes the aggregated metrics on all points","suites":["MixedGeometryBatch","feature with multi geometry","#addFeature"],"updatePoint":{"line":664,"column":55,"index":29231},"line":664,"code":"      it('computes the aggregated metrics on all points', () => {\n        expect(mixedBatch.pointBatch.geometriesCount).to.be(3);\n      });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears polygon batch","suites":["MixedGeometryBatch","#clear"],"updatePoint":{"line":677,"column":28,"index":29682},"line":677,"code":"    it('clears polygon batch', () => {\n      expect(Object.keys(mixedBatch.polygonBatch.entries)).to.have.length(0);\n      expect(mixedBatch.polygonBatch.geometriesCount).to.be(0);\n      expect(mixedBatch.polygonBatch.verticesCount).to.be(0);\n      expect(mixedBatch.polygonBatch.ringsCount).to.be(0);\n    });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears linestring batch","suites":["MixedGeometryBatch","#clear"],"updatePoint":{"line":683,"column":31,"index":29995},"line":683,"code":"    it('clears linestring batch', () => {\n      expect(Object.keys(mixedBatch.lineStringBatch.entries)).to.have.length(0);\n      expect(mixedBatch.lineStringBatch.geometriesCount).to.be(0);\n      expect(mixedBatch.lineStringBatch.verticesCount).to.be(0);\n    });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"clears point batch","suites":["MixedGeometryBatch","#clear"],"updatePoint":{"line":688,"column":26,"index":30253},"line":688,"code":"    it('clears point batch', () => {\n      expect(Object.keys(mixedBatch.pointBatch.entries)).to.have.length(0);\n      expect(mixedBatch.pointBatch.geometriesCount).to.be(0);\n    });","file":"browser/spec/ol/render/webgl/MixedGeometryBatch.test.js","skipped":false,"dir":"test"},{"name":"generates render instructions","suites":["Render instructions utilities","generatePointRenderInstructions"],"updatePoint":{"line":57,"column":37,"index":2370},"line":57,"code":"    it('generates render instructions', function () {\n      expect(Array.from(renderInstructions)).to.eql([2, 2, 1000, 22, 33, 44, 6, 6, 2000, 44, 55, 66]);\n    });","file":"browser/spec/ol/render/webgl/renderinstructions.test.js","skipped":false,"dir":"test"},{"name":"generates render instructions","suites":["Render instructions utilities","generateLineStringRenderInstructions"],"updatePoint":{"line":65,"column":37,"index":2793},"line":65,"code":"    it('generates render instructions', function () {\n      expect(Array.from(renderInstructions)).to.eql([3000, 66, 77, 88, 5, 2, 0, 4, 0, 6, 2, 4, 6, 2, 0, 4000, 88, 99, 0, 3, 20, 38, 60, 78, 100, 118]);\n    });","file":"browser/spec/ol/render/webgl/renderinstructions.test.js","skipped":false,"dir":"test"},{"name":"generates render instructions","suites":["Render instructions utilities","generatePolygonRenderInstructions"],"updatePoint":{"line":73,"column":37,"index":3256},"line":73,"code":"    it('generates render instructions', function () {\n      expect(Array.from(renderInstructions)).to.eql([3000, 66, 77, 88, 1, 5, 2, 0, 4, 0, 6, 2, 4, 6, 2, 0]);\n    });","file":"browser/spec/ol/render/webgl/renderinstructions.test.js","skipped":false,"dir":"test"},{"name":"writes correctly to the buffers (without custom attributes)","suites":["webgl render utils","writePointFeatureToBuffers"],"updatePoint":{"line":12,"column":67,"index":780},"line":12,"code":"    it('writes correctly to the buffers (without custom attributes)', function () {\n      const stride = 3;\n      const positions = writePointFeatureToBuffers(instructions, 4, vertexBuffer, indexBuffer, 0);\n      expect(vertexBuffer[0]).to.eql(10);\n      expect(vertexBuffer[1]).to.eql(11);\n      expect(vertexBuffer[2]).to.eql(0);\n      expect(vertexBuffer[stride + 0]).to.eql(10);\n      expect(vertexBuffer[stride + 1]).to.eql(11);\n      expect(vertexBuffer[stride + 2]).to.eql(1);\n      expect(vertexBuffer[stride * 2 + 0]).to.eql(10);\n      expect(vertexBuffer[stride * 2 + 1]).to.eql(11);\n      expect(vertexBuffer[stride * 2 + 2]).to.eql(2);\n      expect(vertexBuffer[stride * 3 + 0]).to.eql(10);\n      expect(vertexBuffer[stride * 3 + 1]).to.eql(11);\n      expect(vertexBuffer[stride * 3 + 2]).to.eql(3);\n      expect(indexBuffer[0]).to.eql(0);\n      expect(indexBuffer[1]).to.eql(1);\n      expect(indexBuffer[2]).to.eql(3);\n      expect(indexBuffer[3]).to.eql(1);\n      expect(indexBuffer[4]).to.eql(2);\n      expect(indexBuffer[5]).to.eql(3);\n      expect(positions.indexPosition).to.eql(6);\n      expect(positions.vertexPosition).to.eql(stride * 4);\n    });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"writes correctly to the buffers (with 2 custom attributes)","suites":["webgl render utils","writePointFeatureToBuffers"],"updatePoint":{"line":36,"column":66,"index":1947},"line":36,"code":"    it('writes correctly to the buffers (with 2 custom attributes)', function () {\n      instructions.set([0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 13]);\n      const stride = 5;\n      const positions = writePointFeatureToBuffers(instructions, 8, vertexBuffer, indexBuffer, 2);\n      expect(vertexBuffer[0]).to.eql(10);\n      expect(vertexBuffer[1]).to.eql(11);\n      expect(vertexBuffer[2]).to.eql(0);\n      expect(vertexBuffer[3]).to.eql(12);\n      expect(vertexBuffer[4]).to.eql(13);\n      expect(vertexBuffer[stride + 0]).to.eql(10);\n      expect(vertexBuffer[stride + 1]).to.eql(11);\n      expect(vertexBuffer[stride + 2]).to.eql(1);\n      expect(vertexBuffer[stride + 3]).to.eql(12);\n      expect(vertexBuffer[stride + 4]).to.eql(13);\n      expect(vertexBuffer[stride * 2 + 0]).to.eql(10);\n      expect(vertexBuffer[stride * 2 + 1]).to.eql(11);\n      expect(vertexBuffer[stride * 2 + 2]).to.eql(2);\n      expect(vertexBuffer[stride * 2 + 3]).to.eql(12);\n      expect(vertexBuffer[stride * 2 + 4]).to.eql(13);\n      expect(vertexBuffer[stride * 3 + 0]).to.eql(10);\n      expect(vertexBuffer[stride * 3 + 1]).to.eql(11);\n      expect(vertexBuffer[stride * 3 + 2]).to.eql(3);\n      expect(vertexBuffer[stride * 3 + 3]).to.eql(12);\n      expect(vertexBuffer[stride * 3 + 4]).to.eql(13);\n      expect(indexBuffer[0]).to.eql(0);\n      expect(indexBuffer[1]).to.eql(1);\n      expect(indexBuffer[2]).to.eql(3);\n      expect(indexBuffer[3]).to.eql(1);\n      expect(indexBuffer[4]).to.eql(2);\n      expect(indexBuffer[5]).to.eql(3);\n      expect(positions.indexPosition).to.eql(6);\n      expect(positions.vertexPosition).to.eql(stride * 4);\n    });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly chains buffer writes","suites":["webgl render utils","writePointFeatureToBuffers"],"updatePoint":{"line":69,"column":38,"index":3558},"line":69,"code":"    it('correctly chains buffer writes', function () {\n      instructions.set([10, 11, 20, 21, 30, 31]);\n      const stride = 3;\n      let positions = writePointFeatureToBuffers(instructions, 0, vertexBuffer, indexBuffer, 0);\n      positions = writePointFeatureToBuffers(instructions, 2, vertexBuffer, indexBuffer, 0, positions);\n      positions = writePointFeatureToBuffers(instructions, 4, vertexBuffer, indexBuffer, 0, positions);\n      expect(vertexBuffer[0]).to.eql(10);\n      expect(vertexBuffer[1]).to.eql(11);\n      expect(vertexBuffer[2]).to.eql(0);\n      expect(vertexBuffer[stride * 4 + 0]).to.eql(20);\n      expect(vertexBuffer[stride * 4 + 1]).to.eql(21);\n      expect(vertexBuffer[stride * 4 + 2]).to.eql(0);\n      expect(vertexBuffer[stride * 8 + 0]).to.eql(30);\n      expect(vertexBuffer[stride * 8 + 1]).to.eql(31);\n      expect(vertexBuffer[stride * 8 + 2]).to.eql(0);\n      expect(indexBuffer[6 + 0]).to.eql(4);\n      expect(indexBuffer[6 + 1]).to.eql(5);\n      expect(indexBuffer[6 + 2]).to.eql(7);\n      expect(indexBuffer[6 + 3]).to.eql(5);\n      expect(indexBuffer[6 + 4]).to.eql(6);\n      expect(indexBuffer[6 + 5]).to.eql(7);\n      expect(indexBuffer[6 * 2 + 0]).to.eql(8);\n      expect(indexBuffer[6 * 2 + 1]).to.eql(9);\n      expect(indexBuffer[6 * 2 + 2]).to.eql(11);\n      expect(indexBuffer[6 * 2 + 3]).to.eql(9);\n      expect(indexBuffer[6 * 2 + 4]).to.eql(10);\n      expect(indexBuffer[6 * 2 + 5]).to.eql(11);\n      expect(positions.indexPosition).to.eql(6 * 3);\n      expect(positions.vertexPosition).to.eql(stride * 4 * 3);\n    });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"generates a quad for the segment","suites":["webgl render utils","writeLineSegmentToBuffers","isolated segment"],"updatePoint":{"line":117,"column":42,"index":5970},"line":117,"code":"      it('generates a quad for the segment', function () {\n        expect(vertexArray).to.have.length(20);\n        expect(vertexArray).to.eql([5, 5, 25, 5, 0, 5, 5, 25, 5, 100000000, 5, 5, 25, 5, 200000000, 5, 5, 25, 5, 300000000]);\n        expect(indexArray).to.have.length(6);\n        expect(indexArray).to.eql([0, 1, 2, 1, 3, 2]);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"adds custom attributes in the vertices buffer","suites":["webgl render utils","writeLineSegmentToBuffers","isolated segment with custom attributes"],"updatePoint":{"line":129,"column":55,"index":6656},"line":129,"code":"      it('adds custom attributes in the vertices buffer', function () {\n        expect(vertexArray).to.have.length(28);\n        expect(vertexArray).to.eql([5, 5, 25, 5, 0, 888, 999, 5, 5, 25, 5, 100000000, 888, 999, 5, 5, 25, 5, 200000000, 888, 999, 5, 5, 25, 5, 300000000, 888, 999]);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"does not impact indices array","suites":["webgl render utils","writeLineSegmentToBuffers","isolated segment with custom attributes"],"updatePoint":{"line":133,"column":39,"index":6936},"line":133,"code":"      it('does not impact indices array', function () {\n        expect(indexArray).to.have.length(6);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"generate the correct amount of vertices","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming before it, join angle < PI"],"updatePoint":{"line":142,"column":49,"index":7388},"line":142,"code":"      it('generate the correct amount of vertices', () => {\n        expect(vertexArray).to.have.length(20);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly encodes the join angle","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming before it, join angle < PI"],"updatePoint":{"line":145,"column":42,"index":7499},"line":145,"code":"      it('correctly encodes the join angle', () => {\n        expect(vertexArray[4]).to.eql(2356);\n        expect(vertexArray[9]).to.eql(100002356);\n        expect(vertexArray[14]).to.eql(200002356);\n        expect(vertexArray[19]).to.eql(300002356);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"does not impact indices array","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming before it, join angle < PI"],"updatePoint":{"line":151,"column":39,"index":7756},"line":151,"code":"      it('does not impact indices array', function () {\n        expect(indexArray).to.have.length(6);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"generate the correct amount of vertices","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming before it, join angle > PI"],"updatePoint":{"line":160,"column":49,"index":8209},"line":160,"code":"      it('generate the correct amount of vertices', () => {\n        expect(vertexArray).to.have.length(20);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly encodes the join angle","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming before it, join angle > PI"],"updatePoint":{"line":163,"column":42,"index":8320},"line":163,"code":"      it('correctly encodes the join angle', () => {\n        expect(vertexArray[4]).to.eql(7069);\n        expect(vertexArray[9]).to.eql(100007069);\n        expect(vertexArray[14]).to.eql(200007069);\n        expect(vertexArray[19]).to.eql(300007069);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"does not impact indices array","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming before it, join angle > PI"],"updatePoint":{"line":169,"column":39,"index":8577},"line":169,"code":"      it('does not impact indices array', function () {\n        expect(indexArray).to.have.length(6);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"generate the correct amount of vertices","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming after it, join angle < PI"],"updatePoint":{"line":178,"column":49,"index":9028},"line":178,"code":"      it('generate the correct amount of vertices', () => {\n        expect(vertexArray).to.have.length(20);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly encodes the join angle","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming after it, join angle < PI"],"updatePoint":{"line":181,"column":42,"index":9139},"line":181,"code":"      it('correctly encodes the join angle', () => {\n        expect(vertexArray[4]).to.eql(88870000);\n        expect(vertexArray[9]).to.eql(188870000);\n        expect(vertexArray[14]).to.eql(288870000);\n        expect(vertexArray[19]).to.eql(388870000);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"does not impact indices array","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming after it, join angle < PI"],"updatePoint":{"line":187,"column":39,"index":9400},"line":187,"code":"      it('does not impact indices array', function () {\n        expect(indexArray).to.have.length(6);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"generate the correct amount of vertices","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming after it, join angle > PI"],"updatePoint":{"line":196,"column":49,"index":9853},"line":196,"code":"      it('generate the correct amount of vertices', () => {\n        expect(vertexArray).to.have.length(20);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly encodes join angles","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming after it, join angle > PI"],"updatePoint":{"line":199,"column":39,"index":9961},"line":199,"code":"      it('correctly encodes join angles', () => {\n        expect(vertexArray[4]).to.eql(23560000);\n        expect(vertexArray[9]).to.eql(123560000);\n        expect(vertexArray[14]).to.eql(223560000);\n        expect(vertexArray[19]).to.eql(323560000);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"does not impact indices array","suites":["webgl render utils","writeLineSegmentToBuffers","segment with a point coming after it, join angle > PI"],"updatePoint":{"line":205,"column":39,"index":10222},"line":205,"code":"      it('does not impact indices array', function () {\n        expect(indexArray).to.have.length(6);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"generates triangles correctly","suites":["webgl render utils","writePolygonTrianglesToBuffers","polygon with a hole"],"updatePoint":{"line":222,"column":39,"index":10896},"line":222,"code":"      it('generates triangles correctly', function () {\n        expect(vertexArray).to.have.length(22);\n        expect(vertexArray).to.eql([0, 0, 10, 0, 15, 6, 10, 12, 0, 12, 0, 0, 3, 3, 5, 1, 7, 3, 5, 5, 3, 3]);\n        expect(indexArray).to.have.length(27);\n        expect(indexArray).to.eql([1, 2, 3, 3, 4, 0, 3, 0, 10, 7, 10, 0, 3, 10, 9, 7, 0, 1, 3, 9, 8, 8, 7, 1, 1, 3, 8]);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly returns the new index","suites":["webgl render utils","writePolygonTrianglesToBuffers","polygon with a hole"],"updatePoint":{"line":228,"column":41,"index":11289},"line":228,"code":"      it('correctly returns the new index', function () {\n        expect(newIndex).to.eql(28);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"generates triangles correctly","suites":["webgl render utils","writePolygonTrianglesToBuffers","polygon with a hole and custom attributes"],"updatePoint":{"line":237,"column":39,"index":11732},"line":237,"code":"      it('generates triangles correctly', function () {\n        expect(vertexArray).to.have.length(33);\n        expect(vertexArray).to.eql([0, 0, 1234, 10, 0, 1234, 15, 6, 1234, 10, 12, 1234, 0, 12, 1234, 0, 0, 1234, 3, 3, 1234, 5, 1, 1234, 7, 3, 1234, 5, 5, 1234, 3, 3, 1234]);\n        expect(indexArray).to.have.length(27);\n        expect(indexArray).to.eql([1, 2, 3, 3, 4, 0, 3, 0, 10, 7, 10, 0, 3, 10, 9, 7, 0, 1, 3, 9, 8, 8, 7, 1, 1, 3, 8]);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly returns the new index","suites":["webgl render utils","writePolygonTrianglesToBuffers","polygon with a hole and custom attributes"],"updatePoint":{"line":243,"column":41,"index":12191},"line":243,"code":"      it('correctly returns the new index', function () {\n        expect(newIndex).to.eql(29);\n      });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"creates a 1x1 white texture","suites":["webgl render utils","getBlankImageData"],"updatePoint":{"line":249,"column":35,"index":12350},"line":249,"code":"    it('creates a 1x1 white texture', function () {\n      const texture = getBlankImageData();\n      expect(texture.height).to.eql(1);\n      expect(texture.width).to.eql(1);\n      expect(texture.data[0]).to.eql(255);\n      expect(texture.data[1]).to.eql(255);\n      expect(texture.data[2]).to.eql(255);\n      expect(texture.data[3]).to.eql(255);\n    });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly encodes and decodes ids","suites":["webgl render utils","colorEncodeId and colorDecodeId"],"updatePoint":{"line":260,"column":41,"index":12776},"line":260,"code":"    it('correctly encodes and decodes ids', function () {\n      expect(colorDecodeId(colorEncodeId(0))).to.eql(0);\n      expect(colorDecodeId(colorEncodeId(1))).to.eql(1);\n      expect(colorDecodeId(colorEncodeId(123))).to.eql(123);\n      expect(colorDecodeId(colorEncodeId(12345))).to.eql(12345);\n      expect(colorDecodeId(colorEncodeId(123456))).to.eql(123456);\n      expect(colorDecodeId(colorEncodeId(91612))).to.eql(91612);\n      expect(colorDecodeId(colorEncodeId(1234567890))).to.eql(1234567890);\n    });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly reuses array","suites":["webgl render utils","colorEncodeId and colorDecodeId"],"updatePoint":{"line":269,"column":30,"index":13278},"line":269,"code":"    it('correctly reuses array', function () {\n      const arr = [];\n      expect(colorEncodeId(123, arr)).to.be(arr);\n    });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"is compatible with Uint8Array storage","suites":["webgl render utils","colorEncodeId and colorDecodeId"],"updatePoint":{"line":273,"column":45,"index":13420},"line":273,"code":"    it('is compatible with Uint8Array storage', function () {\n      const encoded = colorEncodeId(91612);\n      const typed = Uint8Array.of(encoded[0] * 255, encoded[1] * 255, encoded[2] * 255, encoded[3] * 255);\n      const arr = [typed[0] / 255, typed[1] / 255, typed[2] / 255, typed[3] / 255];\n      const decoded = colorDecodeId(arr);\n      expect(decoded).to.eql(91612);\n    });","file":"browser/spec/ol/render/webgl/utils.test.js","skipped":false,"dir":"test"},{"name":"creates a VectorStyleRenderer","suites":["VectorStyleRenderer","constructor using style"],"updatePoint":{"line":97,"column":37,"index":2949},"line":97,"code":"    it('creates a VectorStyleRenderer', () => {\n      expect(vectorStyleRenderer.customAttributes_).to.eql({\n        color: {\n          callback: {},\n          size: 2\n        },\n        size: {\n          callback: {},\n          size: 1\n        }\n      });\n      expect(vectorStyleRenderer.uniforms_).to.eql({});\n      expect(vectorStyleRenderer.fillProgram_).to.be.an(WebGLProgram);\n      expect(vectorStyleRenderer.strokeProgram_).to.be.an(WebGLProgram);\n      expect(vectorStyleRenderer.symbolProgram_).to.be.an(WebGLProgram);\n      expect(vectorStyleRenderer.polygonAttributesDesc_).to.eql([{\n        name: 'a_position',\n        size: 2,\n        type: FLOAT\n      }, {\n        name: 'a_size',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_color',\n        size: 2,\n        type: FLOAT\n      }]);\n      expect(vectorStyleRenderer.lineStringAttributesDesc_).to.eql([{\n        name: 'a_segmentStart',\n        size: 2,\n        type: FLOAT\n      }, {\n        name: 'a_segmentEnd',\n        size: 2,\n        type: FLOAT\n      }, {\n        name: 'a_parameters',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_size',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_color',\n        size: 2,\n        type: FLOAT\n      }]);\n      expect(vectorStyleRenderer.pointAttributesDesc_).to.eql([{\n        name: 'a_position',\n        size: 2,\n        type: FLOAT\n      }, {\n        name: 'a_index',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_size',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_color',\n        size: 2,\n        type: FLOAT\n      }]);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"creates a VectorStyleRenderer","suites":["VectorStyleRenderer","constructor using shaders"],"updatePoint":{"line":169,"column":37,"index":4747},"line":169,"code":"    it('creates a VectorStyleRenderer', () => {\n      expect(vectorStyleRenderer.customAttributes_).to.eql({\n        attr1: {\n          callback: {}\n        },\n        attr2: {\n          callback: {},\n          size: 3\n        }\n      });\n      expect(vectorStyleRenderer.uniforms_).to.eql({\n        custom: {}\n      });\n      expect(vectorStyleRenderer.fillProgram_).to.be.an(WebGLProgram);\n      expect(vectorStyleRenderer.strokeProgram_).to.be.an(WebGLProgram);\n      expect(vectorStyleRenderer.symbolProgram_).to.be.an(WebGLProgram);\n      expect(vectorStyleRenderer.polygonAttributesDesc_).to.eql([{\n        name: 'a_position',\n        size: 2,\n        type: FLOAT\n      }, {\n        name: 'a_attr1',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_attr2',\n        size: 3,\n        type: FLOAT\n      }]);\n      expect(vectorStyleRenderer.lineStringAttributesDesc_).to.eql([{\n        name: 'a_segmentStart',\n        size: 2,\n        type: FLOAT\n      }, {\n        name: 'a_segmentEnd',\n        size: 2,\n        type: FLOAT\n      }, {\n        name: 'a_parameters',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_attr1',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_attr2',\n        size: 3,\n        type: FLOAT\n      }]);\n      expect(vectorStyleRenderer.pointAttributesDesc_).to.eql([{\n        name: 'a_position',\n        size: 2,\n        type: FLOAT\n      }, {\n        name: 'a_index',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_attr1',\n        size: 1,\n        type: FLOAT\n      }, {\n        name: 'a_attr2',\n        size: 3,\n        type: FLOAT\n      }]);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"creates buffers for a geometry batch","suites":["VectorStyleRenderer","methods","generateBuffers"],"updatePoint":{"line":247,"column":46,"index":6741},"line":247,"code":"      it('creates buffers for a geometry batch', () => {\n        expect(buffers.invertVerticesTransform).to.eql(makeInverseTransform(createTransform(), SAMPLE_TRANSFORM));\n        expect(buffers.polygonBuffers[0]).to.be.an(WebGLArrayBuffer);\n        expect(buffers.polygonBuffers[0].getType()).to.be(ELEMENT_ARRAY_BUFFER);\n        expect(buffers.polygonBuffers[0].getUsage()).to.be(DYNAMIC_DRAW);\n        expect(buffers.polygonBuffers[1]).to.be.an(WebGLArrayBuffer);\n        expect(buffers.polygonBuffers[1].getType()).to.be(ARRAY_BUFFER);\n        expect(buffers.polygonBuffers[1].getUsage()).to.be(DYNAMIC_DRAW);\n        expect(buffers.polygonBuffers[1].getArray().slice(0, 6)).to.eql([-45, -47.5, 3000, 10, 20, 30]);\n        expect(buffers.lineStringBuffers[0]).to.be.an(WebGLArrayBuffer);\n        expect(buffers.lineStringBuffers[0].getType()).to.be(ELEMENT_ARRAY_BUFFER);\n        expect(buffers.lineStringBuffers[0].getUsage()).to.be(DYNAMIC_DRAW);\n        expect(buffers.lineStringBuffers[1]).to.be.an(WebGLArrayBuffer);\n        expect(buffers.lineStringBuffers[1].getType()).to.be(ARRAY_BUFFER);\n        expect(buffers.lineStringBuffers[1].getUsage()).to.be(DYNAMIC_DRAW);\n        expect(buffers.lineStringBuffers[1].getArray().slice(0, 9)).to.eql([-45, -47.5, -40, -47.5, 58900000, 3000, 10, 20, 30]);\n        expect(buffers.pointBuffers[0]).to.be.an(WebGLArrayBuffer);\n        expect(buffers.pointBuffers[0].getType()).to.be(ELEMENT_ARRAY_BUFFER);\n        expect(buffers.pointBuffers[0].getUsage()).to.be(DYNAMIC_DRAW);\n        expect(buffers.pointBuffers[1]).to.be.an(WebGLArrayBuffer);\n        expect(buffers.pointBuffers[1].getType()).to.be(ARRAY_BUFFER);\n        expect(buffers.pointBuffers[1].getUsage()).to.be(DYNAMIC_DRAW);\n        expect(buffers.pointBuffers[1].getArray().slice(0, 7)).to.eql([-45, -45, 0, 1000, 10, 20, 30]);\n      });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"uses programs for all geometry types","suites":["VectorStyleRenderer","methods","render"],"updatePoint":{"line":283,"column":46,"index":9084},"line":283,"code":"      it('uses programs for all geometry types', function () {\n        expect(helper.useProgram.callCount).to.be(3);\n        expect(helper.useProgram.firstCall.firstArg).to.be(vectorStyleRenderer.fillProgram_);\n        expect(helper.useProgram.secondCall.firstArg).to.be(vectorStyleRenderer.strokeProgram_);\n        expect(helper.useProgram.thirdCall.firstArg).to.be(vectorStyleRenderer.symbolProgram_);\n      });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"binds buffers for all geometry types","suites":["VectorStyleRenderer","methods","render"],"updatePoint":{"line":289,"column":46,"index":9498},"line":289,"code":"      it('binds buffers for all geometry types', function () {\n        expect(helper.bindBuffer.callCount).to.be(6);\n        expect(helper.bindBuffer.calledWith(buffers.polygonBuffers[0])).to.be(true);\n        expect(helper.bindBuffer.calledWith(buffers.polygonBuffers[1])).to.be(true);\n        expect(helper.bindBuffer.calledWith(buffers.lineStringBuffers[0])).to.be(true);\n        expect(helper.bindBuffer.calledWith(buffers.lineStringBuffers[1])).to.be(true);\n        expect(helper.bindBuffer.calledWith(buffers.pointBuffers[0])).to.be(true);\n        expect(helper.bindBuffer.calledWith(buffers.pointBuffers[1])).to.be(true);\n      });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"enables attributes for all geometry types","suites":["VectorStyleRenderer","methods","render"],"updatePoint":{"line":298,"column":51,"index":10142},"line":298,"code":"      it('enables attributes for all geometry types', function () {\n        expect(helper.enableAttributes.callCount).to.be(3);\n        expect(helper.enableAttributes.firstCall.firstArg).to.be(vectorStyleRenderer.polygonAttributesDesc_);\n        expect(helper.enableAttributes.secondCall.firstArg).to.be(vectorStyleRenderer.lineStringAttributesDesc_);\n        expect(helper.enableAttributes.thirdCall.firstArg).to.be(vectorStyleRenderer.pointAttributesDesc_);\n      });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"calls the pre render callback once per geometry type","suites":["VectorStyleRenderer","methods","render"],"updatePoint":{"line":304,"column":62,"index":10623},"line":304,"code":"      it('calls the pre render callback once per geometry type', function () {\n        expect(preRenderCb.callCount).to.be(3);\n      });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"renders all geometry types","suites":["VectorStyleRenderer","methods","render"],"updatePoint":{"line":307,"column":36,"index":10734},"line":307,"code":"      it('renders all geometry types', function () {\n        expect(helper.drawElements.callCount).to.be(3);\n        expect(helper.drawElements.firstCall.args).to.eql([0, buffers.polygonBuffers[0].getSize()]);\n        expect(helper.drawElements.secondCall.args).to.eql([0, buffers.lineStringBuffers[0].getSize()]);\n        expect(helper.drawElements.thirdCall.args).to.eql([0, buffers.pointBuffers[0].getSize()]);\n      });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only loads buffer data for one geometry type","suites":["VectorStyleRenderer","rendering only fill"],"updatePoint":{"line":332,"column":52,"index":11885},"line":332,"code":"    it('only loads buffer data for one geometry type', function () {\n      expect(helper.flushBufferData.callCount).to.be(2);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only does one render","suites":["VectorStyleRenderer","rendering only fill"],"updatePoint":{"line":335,"column":28,"index":11995},"line":335,"code":"    it('only does one render', function () {\n      expect(preRenderCb.callCount).to.be(1);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only does the polygon render pass","suites":["VectorStyleRenderer","rendering only fill"],"updatePoint":{"line":338,"column":41,"index":12107},"line":338,"code":"    it('only does the polygon render pass', function () {\n      expect(helper.enableAttributes.callCount).to.be(1);\n      expect(helper.enableAttributes.firstCall.firstArg).to.be(vectorStyleRenderer.polygonAttributesDesc_);\n      expect(helper.useProgram.callCount).to.be(1);\n      expect(helper.useProgram.firstCall.firstArg).to.be(vectorStyleRenderer.fillProgram_);\n      expect(helper.drawElements.callCount).to.be(1);\n      expect(helper.drawElements.firstCall.args).to.eql([0, buffers.polygonBuffers[0].getSize()]);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only loads buffer data for one geometry type","suites":["VectorStyleRenderer","rendering only stroke"],"updatePoint":{"line":364,"column":52,"index":13358},"line":364,"code":"    it('only loads buffer data for one geometry type', function () {\n      expect(helper.flushBufferData.callCount).to.be(2);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only does one render","suites":["VectorStyleRenderer","rendering only stroke"],"updatePoint":{"line":367,"column":28,"index":13468},"line":367,"code":"    it('only does one render', function () {\n      expect(preRenderCb.callCount).to.be(1);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only does the line string render pass","suites":["VectorStyleRenderer","rendering only stroke"],"updatePoint":{"line":370,"column":45,"index":13584},"line":370,"code":"    it('only does the line string render pass', function () {\n      expect(helper.enableAttributes.callCount).to.be(1);\n      expect(helper.enableAttributes.firstCall.firstArg).to.be(vectorStyleRenderer.lineStringAttributesDesc_);\n      expect(helper.useProgram.callCount).to.be(1);\n      expect(helper.useProgram.firstCall.firstArg).to.be(vectorStyleRenderer.strokeProgram_);\n      expect(helper.drawElements.callCount).to.be(1);\n      expect(helper.drawElements.firstCall.args).to.eql([0, buffers.lineStringBuffers[0].getSize()]);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only loads buffer data for one geometry type","suites":["VectorStyleRenderer","rendering only symbol"],"updatePoint":{"line":396,"column":52,"index":14843},"line":396,"code":"    it('only loads buffer data for one geometry type', function () {\n      expect(helper.flushBufferData.callCount).to.be(2);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only does one render","suites":["VectorStyleRenderer","rendering only symbol"],"updatePoint":{"line":399,"column":28,"index":14953},"line":399,"code":"    it('only does one render', function () {\n      expect(preRenderCb.callCount).to.be(1);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"only does the point render pass","suites":["VectorStyleRenderer","rendering only symbol"],"updatePoint":{"line":402,"column":39,"index":15063},"line":402,"code":"    it('only does the point render pass', function () {\n      expect(helper.enableAttributes.callCount).to.be(1);\n      expect(helper.enableAttributes.firstCall.firstArg).to.be(vectorStyleRenderer.pointAttributesDesc_);\n      expect(helper.useProgram.callCount).to.be(1);\n      expect(helper.useProgram.firstCall.firstArg).to.be(vectorStyleRenderer.symbolProgram_);\n      expect(helper.drawElements.callCount).to.be(1);\n      expect(helper.drawElements.firstCall.args).to.eql([0, buffers.pointBuffers[0].getSize()]);\n    });","file":"browser/spec/ol/render/webgl/VectorStyleRenderer.test.js","skipped":false,"dir":"test"},{"name":"omits lineTo for repeated coordinates","suites":["ol.render.canvas.BuilderGroup","#replay"],"updatePoint":{"line":105,"column":45,"index":4103},"line":105,"code":"    it('omits lineTo for repeated coordinates', function () {\n      renderFeature(builder, feature0, fill0, 1);\n      execute(builder);\n      expect(lineToCount).to.be(4);\n      lineToCount = 0;\n      scaleTransform(transform, 0.25, 0.25);\n      execute(builder);\n      expect(lineToCount).to.be(3);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"does not omit moveTo for repeated coordinates","suites":["ol.render.canvas.BuilderGroup","#replay"],"updatePoint":{"line":114,"column":53,"index":4419},"line":114,"code":"    it('does not omit moveTo for repeated coordinates', function () {\n      renderFeature(builder, feature0, fill0, 1);\n      renderFeature(builder, feature1, fill1, 1);\n      execute(builder);\n      expect(moveToCount).to.be(2);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"batches fill and stroke instructions for same style","suites":["ol.render.canvas.BuilderGroup","#replay"],"updatePoint":{"line":120,"column":59,"index":4663},"line":120,"code":"    it('batches fill and stroke instructions for same style', function () {\n      renderFeature(builder, feature1, style1, 1);\n      renderFeature(builder, feature2, style1, 1);\n      renderFeature(builder, feature3, style1, 1);\n      execute(builder);\n      expect(fillCount).to.be(1);\n      expect(strokeCount).to.be(1);\n      expect(beginPathCount).to.be(1);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"batches fill and stroke instructions for different styles","suites":["ol.render.canvas.BuilderGroup","#replay"],"updatePoint":{"line":129,"column":65,"index":5039},"line":129,"code":"    it('batches fill and stroke instructions for different styles', function () {\n      renderFeature(builder, feature1, style1, 1);\n      renderFeature(builder, feature2, style1, 1);\n      renderFeature(builder, feature3, style2, 1);\n      execute(builder);\n      expect(fillCount).to.be(2);\n      expect(strokeCount).to.be(2);\n      expect(beginPathCount).to.be(2);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"batches fill and stroke instructions for changing styles","suites":["ol.render.canvas.BuilderGroup","#replay"],"updatePoint":{"line":138,"column":64,"index":5414},"line":138,"code":"    it('batches fill and stroke instructions for changing styles', function () {\n      renderFeature(builder, feature1, style1, 1);\n      renderFeature(builder, feature2, style2, 1);\n      renderFeature(builder, feature3, style1, 1);\n      execute(builder);\n      expect(fillCount).to.be(3);\n      expect(strokeCount).to.be(3);\n      expect(beginPathCount).to.be(3);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"does not batch when overlaps is set to true","suites":["ol.render.canvas.BuilderGroup","#replay"],"updatePoint":{"line":147,"column":51,"index":5776},"line":147,"code":"    it('does not batch when overlaps is set to true', function () {\n      builder = new BuilderGroup(1, [-180, -90, 180, 90], 1, 1, true);\n      renderFeature(builder, feature1, style1, 1);\n      renderFeature(builder, feature2, style1, 1);\n      renderFeature(builder, feature3, style1, 1);\n      execute(builder, {}, 1, true);\n      expect(fillCount).to.be(3);\n      expect(strokeCount).to.be(3);\n      expect(beginPathCount).to.be(3);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"applies the pixelRatio to the linedash array and offset","suites":["ol.render.canvas.BuilderGroup","#replay"],"updatePoint":{"line":157,"column":63,"index":6234},"line":157,"code":"    it('applies the pixelRatio to the linedash array and offset', function () {\n      // replay with a pixelRatio of 2\n      builder = new BuilderGroup(1, [-180, -90, 180, 90], 1, 2, true);\n      let lineDash,\n        lineDashCount = 0,\n        lineDashOffset,\n        lineDashOffsetCount = 0;\n      context.setLineDash = function (lineDash_) {\n        lineDashCount++;\n        lineDash = lineDash_.slice();\n      };\n      Object.defineProperty(context, 'lineDashOffset', {\n        set: function (lineDashOffset_) {\n          lineDashOffsetCount++;\n          lineDashOffset = lineDashOffset_;\n        }\n      });\n      renderFeature(builder, feature1, style2, 1);\n      renderFeature(builder, feature2, style2, 1);\n      execute(builder, {}, 2, true);\n      expect(lineDashCount).to.be(1);\n      expect(style2.getStroke().getLineDash()).to.eql([3, 6]);\n      expect(lineDash).to.eql([6, 12]);\n      expect(lineDashOffsetCount).to.be(1);\n      expect(style2.getStroke().getLineDashOffset()).to.be(2);\n      expect(lineDashOffset).to.be(4);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"calls the renderer function in hit detection","suites":["ol.render.canvas.BuilderGroup","#replay","use renderer and hitDetectionRenderer defined in style"],"updatePoint":{"line":208,"column":54,"index":8801},"line":208,"code":"      it('calls the renderer function in hit detection', function () {\n        const calls = [];\n        const style = new Style({\n          renderer: function (coords, state) {\n            calls.push({\n              coords: coords,\n              geometry: state.geometry,\n              feature: state.feature,\n              context: state.context,\n              pixelRatio: state.pixelRatio,\n              rotation: state.rotation,\n              resolution: state.resolution\n            });\n          }\n        });\n        builder = new BuilderGroup(1, [-180, -90, 180, 90], 1, 1, true);\n        renderFeature(builder, point, style, 1);\n        renderFeature(builder, multipoint, style, 1);\n        renderFeature(builder, linestring, style, 1);\n        renderFeature(builder, multilinestring, style, 1);\n        renderFeature(builder, polygon, style, 1);\n        renderFeature(builder, multipolygon, style, 1);\n        renderFeature(builder, geometrycollection, style, 1);\n        scaleTransform(transform, 0.1, 0.1);\n        executeHitDetectionForCoordinate(builder, 1, true, [45, 90]);\n\n        // since renderer will be used for rendering and hit detection\n        // expect calls.length to be ass twice was in rendering\n        expect(calls.length).to.be(18);\n      });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"calls the hit detection renderer in hit detection","suites":["ol.render.canvas.BuilderGroup","#replay","use renderer and hitDetectionRenderer defined in style"],"updatePoint":{"line":238,"column":59,"index":10081},"line":238,"code":"      it('calls the hit detection renderer in hit detection', function () {\n        const calls = [];\n        const hitDetectionCalls = [];\n        const style = new Style({\n          renderer: function (coords, state) {\n            calls.push({\n              coords: coords,\n              geometry: state.geometry,\n              feature: state.feature,\n              context: state.context,\n              pixelRatio: state.pixelRatio,\n              rotation: state.rotation,\n              resolution: state.resolution\n            });\n          },\n          hitDetectionRenderer: function (coords, state) {\n            hitDetectionCalls.push({\n              coords: coords,\n              geometry: state.geometry,\n              feature: state.feature,\n              context: state.context,\n              pixelRatio: state.pixelRatio,\n              rotation: state.rotation,\n              resolution: state.resolution\n            });\n          }\n        });\n        builder = new BuilderGroup(1, [-180, -90, 180, 90], 1, 1, true);\n        renderFeature(builder, point, style, 1);\n        renderFeature(builder, multipoint, style, 1);\n        renderFeature(builder, linestring, style, 1);\n        renderFeature(builder, multilinestring, style, 1);\n        renderFeature(builder, polygon, style, 1);\n        renderFeature(builder, multipolygon, style, 1);\n        renderFeature(builder, geometrycollection, style, 1);\n        scaleTransform(transform, 0.1, 0.1);\n        executeHitDetectionForCoordinate(builder, 1, true, [45, 90]);\n        expect(calls.length).to.be(9);\n        expect(hitDetectionCalls.length).to.be(9);\n      });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"calls the renderer function configured for the style","suites":["ol.render.canvas.BuilderGroup","#replay","use renderer and hitDetectionRenderer defined in style"],"updatePoint":{"line":278,"column":62,"index":11714},"line":278,"code":"      it('calls the renderer function configured for the style', function () {\n        const calls = [];\n        const style = new Style({\n          renderer: function (coords, state) {\n            calls.push({\n              coords: coords,\n              geometry: state.geometry,\n              feature: state.feature,\n              context: state.context,\n              pixelRatio: state.pixelRatio,\n              rotation: state.rotation,\n              resolution: state.resolution\n            });\n          }\n        });\n        builder = new BuilderGroup(1, [-180, -90, 180, 90], 1, 1, true);\n        renderFeature(builder, point, style, 1);\n        renderFeature(builder, multipoint, style, 1);\n        renderFeature(builder, linestring, style, 1);\n        renderFeature(builder, multilinestring, style, 1);\n        renderFeature(builder, polygon, style, 1);\n        renderFeature(builder, multipolygon, style, 1);\n        renderFeature(builder, geometrycollection, style, 1);\n        scaleTransform(transform, 0.1, 0.1);\n        execute(builder, 1, true);\n        expect(calls.length).to.be(9);\n        expect(calls[0].geometry).to.be(point.getGeometry());\n        expect(calls[0].feature).to.be(point);\n        expect(calls[0].context).to.be(context);\n        expect(calls[0].pixelRatio).to.be(1);\n        expect(calls[0].rotation).to.be(0);\n        expect(calls[0].resolution).to.be(1);\n        expect(calls[0].coords).to.eql([4.5, 9]);\n        expect(calls[1].feature).to.be(multipoint);\n        expect(calls[1].coords[0]).to.eql([4.5, 9]);\n        expect(calls[2].feature).to.be(linestring);\n        expect(calls[2].coords[0]).to.eql([4.5, 9]);\n        expect(calls[3].feature).to.be(multilinestring);\n        expect(calls[3].coords[0][0]).to.eql([4.5, 9]);\n        expect(calls[4].feature).to.be(polygon);\n        expect(calls[4].coords[0][0]).to.eql([-9, -4.5]);\n        expect(calls[5].feature).to.be(multipolygon);\n        expect(calls[5].coords[0][0][0]).to.eql([-9, -4.5]);\n        expect(calls[6].feature).to.be(geometrycollection);\n        expect(calls[6].geometry.getCoordinates()).to.eql([45, 90]);\n        expect(calls[7].geometry.getCoordinates()[0]).to.eql([45, 90]);\n        expect(calls[8].geometry.getCoordinates()[0][0]).to.eql([-90, -45]);\n      });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"creates a new replay batch","suites":["ol.render.canvas.Builder","constructor"],"updatePoint":{"line":331,"column":34,"index":14073},"line":331,"code":"    it('creates a new replay batch', function () {\n      const tolerance = 10;\n      const extent = [-180, -90, 180, 90];\n      const replay = new CanvasBuilder(tolerance, extent, 1, 1, true);\n      expect(replay).to.be.a(CanvasBuilder);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"appends coordinates that are within the max extent","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":343,"column":58,"index":14530},"line":343,"code":"    it('appends coordinates that are within the max extent', function () {\n      const flat = [-110, 45, 110, 45, 110, -45, -110, -45];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"appends polygon coordinates that are within the max extent","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":348,"column":66,"index":14808},"line":348,"code":"    it('appends polygon coordinates that are within the max extent', function () {\n      const flat = [-110, 45, 110, 45, 110, -45, -110, -45, -110, 45];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"appends polygon coordinates that are within the max extent (skipping first)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":353,"column":83,"index":15112},"line":353,"code":"    it('appends polygon coordinates that are within the max extent (skipping first)', function () {\n      const flat = [-110, 45, 110, 45, 110, -45, -110, -45, -110, 45];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, true);\n      expect(replay.coordinates).to.eql([110, 45, 110, -45, -110, -45, -110, 45]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"works with a single coordinate (inside)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":358,"column":47,"index":15415},"line":358,"code":"    it('works with a single coordinate (inside)', function () {\n      const flat = [-110, 45];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"always appends first point (even if outside)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":363,"column":52,"index":15649},"line":363,"code":"    it('always appends first point (even if outside)', function () {\n      // this could be changed, but to make the code simpler for properly\n      // closing rings, we always add the first point\n      const flat = [-110, 145];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"always appends first polygon vertex (even if outside)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":370,"column":61,"index":16021},"line":370,"code":"    it('always appends first polygon vertex (even if outside)', function () {\n      // this could be changed, but to make the code simpler for properly\n      // closing rings, we always add the first point\n      const flat = [-110, 145, -110, 145];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"skips first polygon vertex upon request (also when outside)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":377,"column":67,"index":16409},"line":377,"code":"    it('skips first polygon vertex upon request (also when outside)', function () {\n      const flat = [-110, 145, -110, 145];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, true);\n      expect(replay.coordinates).to.eql([-110, 145]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"appends points when segments cross (top to bottom)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":382,"column":58,"index":16666},"line":382,"code":"    it('appends points when segments cross (top to bottom)', function () {\n      // this means we get a few extra points when coordinates are not\n      // part of a linestring or ring, but only a few extra\n      const flat = [0, 200, 0, -200];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"appends points when segments cross (top to inside)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":389,"column":58,"index":17044},"line":389,"code":"    it('appends points when segments cross (top to inside)', function () {\n      const flat = [0, 200, 0, 0];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"always appends the first segment (even when outside)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":394,"column":60,"index":17290},"line":394,"code":"    it('always appends the first segment (even when outside)', function () {\n      // this could be changed, but to make the code simpler for properly\n      // closing rings, we always add the first segment\n      const flat = [-10, 200, 10, 200];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"always appends the first polygon segment (even when outside)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":401,"column":68,"index":17679},"line":401,"code":"    it('always appends the first polygon segment (even when outside)', function () {\n      // this could be changed, but to make the code simpler for properly\n      // closing rings, we always add the first segment\n      const flat = [-10, 200, 10, 200, -10, 200];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"skips first polygon segment upon request (also when outside)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":408,"column":68,"index":18077},"line":408,"code":"    it('skips first polygon segment upon request (also when outside)', function () {\n      const flat = [-10, 200, 10, 200, -10, 200];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, true);\n      expect(replay.coordinates).to.eql([10, 200, -10, 200]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"eliminates segments outside (and not changing rel)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":413,"column":58,"index":18349},"line":413,"code":"    it('eliminates segments outside (and not changing rel)', function () {\n      const flat = [0, 0, 0, 200, 5, 200, 10, 200];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql([0, 0, 0, 200]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"eliminates polygon segments outside (and not changing rel)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":418,"column":66,"index":18628},"line":418,"code":"    it('eliminates polygon segments outside (and not changing rel)', function () {\n      const flat = [0, 0, 0, 200, 5, 200, 10, 200, 0, 0];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, false);\n      expect(replay.coordinates).to.eql([0, 0, 0, 200, 10, 200, 0, 0]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"eliminates polygon segments outside (skipping first and not changing rel)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":423,"column":81,"index":18942},"line":423,"code":"    it('eliminates polygon segments outside (skipping first and not changing rel)', function () {\n      const flat = [0, 0, 0, 10, 0, 200, 5, 200, 10, 200, 0, 0];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, true);\n      expect(replay.coordinates).to.eql([0, 10, 0, 200, 10, 200, 0, 0]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"eliminates segments outside (and not changing rel)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":428,"column":58,"index":19240},"line":428,"code":"    it('eliminates segments outside (and not changing rel)', function () {\n      const flat = [0, 0, 0, 200, 10, 200];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql([0, 0, 0, 200]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"includes polygon segments outside (and not changing rel) when on last segment","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":433,"column":85,"index":19530},"line":433,"code":"    it('includes polygon segments outside (and not changing rel) when on last segment', function () {\n      const flat = [0, 0, 0, 200, 10, 200, 0, 0];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"includes polygon segments outside (skipping first and not changing rel) when on last segment","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":438,"column":100,"index":19830},"line":438,"code":"    it('includes polygon segments outside (skipping first and not changing rel) when on last segment', function () {\n      const flat = [0, 0, 0, 200, 10, 200, 0, 0];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, true);\n      expect(replay.coordinates).to.eql([0, 200, 10, 200, 0, 0]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"includes outside segments that change relationship","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":443,"column":58,"index":20106},"line":443,"code":"    it('includes outside segments that change relationship', function () {\n      const flat = [0, 0, 0, 200, 200, 200, 250, 200];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, false, false);\n      expect(replay.coordinates).to.eql([0, 0, 0, 200, 200, 200]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"includes outside polygon segments that change relationship when on last segment","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":448,"column":87,"index":20419},"line":448,"code":"    it('includes outside polygon segments that change relationship when on last segment', function () {\n      const flat = [0, 0, 0, 200, 200, 200, 250, 200, 0, 0];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, false);\n      expect(replay.coordinates).to.eql(flat);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"includes outside polygon segments that change relationship when on last segment (when skipping first)","suites":["ol.render.canvas.Builder","#appendFlatLineCoordinates()"],"updatePoint":{"line":453,"column":109,"index":20739},"line":453,"code":"    it('includes outside polygon segments that change relationship when on last segment (when skipping first)', function () {\n      const flat = [0, 0, 0, 200, 200, 200, 250, 200, 0, 0];\n      replay.appendFlatLineCoordinates(flat, 0, flat.length, 2, true, true);\n      expect(replay.coordinates).to.eql([0, 200, 200, 200, 250, 200, 0, 0]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"buffers the max extent to accommodate stroke width","suites":["ol.render.canvas.LineStringBuilder","#getBufferedMaxExtent()"],"updatePoint":{"line":462,"column":58,"index":21160},"line":462,"code":"    it('buffers the max extent to accommodate stroke width', function () {\n      const tolerance = 1;\n      const extent = [-180, -90, 180, 90];\n      const resolution = 10;\n      const replay = new CanvasLineStringBuilder(tolerance, extent, resolution);\n      const stroke = new Stroke({\n        width: 2\n      });\n      replay.setFillStrokeStyle(null, stroke);\n      const buffered = replay.getBufferedMaxExtent();\n      expect(buffered).to.eql([-195, -105, 195, 105]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"returns correct offset","suites":["ol.render.canvas.PolygonBuilder","#drawFlatCoordinatess_()"],"updatePoint":{"line":485,"column":30,"index":21943},"line":485,"code":"    it('returns correct offset', function () {\n      const coords = [1, 2, 3, 4, 5, 6, 1, 2, 1, 2, 3, 4, 5, 6, 1, 2];\n      const ends = [7, 14];\n      const stroke = new Stroke({\n        width: 5\n      });\n      replay.setFillStrokeStyle(null, stroke);\n      let offset = replay.drawFlatCoordinatess_(coords, 0, ends, 2);\n      expect(offset).to.be(14);\n      replay.setFillStrokeStyle(null, null);\n      offset = replay.drawFlatCoordinatess_(coords, 0, ends, 2);\n      expect(offset).to.be(14);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"buffers the max extent to accommodate stroke width","suites":["ol.render.canvas.PolygonBuilder","#getBufferedMaxExtent()"],"updatePoint":{"line":500,"column":58,"index":22534},"line":500,"code":"    it('buffers the max extent to accommodate stroke width', function () {\n      const stroke = new Stroke({\n        width: 5\n      });\n      replay.setFillStrokeStyle(null, stroke);\n      const buffered = replay.getBufferedMaxExtent();\n      expect(buffered).to.eql([-210, -120, 210, 120]);\n    });","file":"browser/spec/ol/renderer/canvas/builder.test.js","skipped":false,"dir":"test"},{"name":"properly detects pixels","suites":["ol/renderer/canvas/ImageLayer","#getData"],"updatePoint":{"line":56,"column":31,"index":2030},"line":56,"code":"    it('properly detects pixels', function () {\n      map.renderSync();\n      expect(layer.getData([20, 80])[3]).to.not.be(0);\n      expect(layer.getData([10, 90])[3]).to.be(0);\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"should not detect pixels when crossOrigin is not set","suites":["ol/renderer/canvas/ImageLayer","#getData Image CORS"],"updatePoint":{"line":117,"column":60,"index":3908},"line":117,"code":"    it('should not detect pixels when crossOrigin is not set', function () {\n      imageLayerCross.setVisible(false);\n      imageLayer.setVisible(true);\n      map.renderSync();\n      expect(imageLayer.getData([50, 50])).to.be(null);\n      expect(imageLayer.getData([10, 10])).to.be(null);\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"should not detect pixels outside of the layer extent with crossOrigin set","suites":["ol/renderer/canvas/ImageLayer","#getData Image CORS"],"updatePoint":{"line":124,"column":81,"index":4226},"line":124,"code":"    it('should not detect pixels outside of the layer extent with crossOrigin set', function () {\n      imageLayerCross.setVisible(true);\n      imageLayer.setVisible(false);\n      map.renderSync();\n      expect(imageLayerCross.getData([50, 50])).to.not.be(null);\n      expect(imageLayerCross.getData([10, 10])).to.be(null);\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"should not detect pixels outside of the layer extent with extent set","suites":["ol/renderer/canvas/ImageLayer","#getData Image CORS"],"updatePoint":{"line":131,"column":76,"index":4553},"line":131,"code":"    it('should not detect pixels outside of the layer extent with extent set', function () {\n      imageLayerCross.setVisible(true);\n      imageLayerCross.setExtent(imageExtent);\n      imageLayer.setVisible(false);\n      map.renderSync();\n      expect(imageLayerCross.getData([50, 50])).to.not.be(null);\n      expect(imageLayerCross.getData([10, 10])).to.be(null);\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"dispatches prerender and postrender events on the image layer","suites":["ol/renderer/canvas/ImageLayer","Image rendering"],"updatePoint":{"line":172,"column":69,"index":5799},"line":172,"code":"    it('dispatches prerender and postrender events on the image layer', function (done) {\n      let prerender = 0;\n      let postrender = 0;\n      layer.on('prerender', function () {\n        ++prerender;\n      });\n      layer.on('postrender', function () {\n        ++postrender;\n      });\n      map.on('postrender', function () {\n        expect(prerender).to.be(1);\n        expect(postrender).to.be(1);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"image smoothing is re-enabled after rendering","suites":["ol/renderer/canvas/ImageLayer","Image rendering"],"updatePoint":{"line":187,"column":53,"index":6220},"line":187,"code":"    it('image smoothing is re-enabled after rendering', function (done) {\n      let context;\n      layer.on('postrender', function (e) {\n        context = e.context;\n        context.imageSmoothingEnabled = false;\n      });\n      map.on('postrender', function () {\n        expect(context.imageSmoothingEnabled).to.be(true);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"dispatches prerender and postrender events on the vector layer","suites":["ol/renderer/canvas/ImageLayer","Vector image rendering"],"updatePoint":{"line":225,"column":70,"index":7287},"line":225,"code":"    it('dispatches prerender and postrender events on the vector layer', function (done) {\n      let prerender = 0;\n      let postrender = 0;\n      layer.on('prerender', function () {\n        ++prerender;\n      });\n      layer.on('postrender', function () {\n        ++postrender;\n      });\n      map.once('postrender', function () {\n        expect(prerender).to.be(1);\n        expect(postrender).to.be(1);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"does not render if layer extent does not intersect view extent","suites":["ol/renderer/canvas/ImageLayer","renderFrame"],"updatePoint":{"line":285,"column":70,"index":9079},"line":285,"code":"    it('does not render if layer extent does not intersect view extent', function (done) {\n      const frameState = createLayerFrameState([200, 200, 300, 300]);\n      layer.getSource().on('imageloadend', function () {\n        try {\n          expect(renderer.prepareFrame(frameState)).to.be(false);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"renders if layer extent partially intersects view extent","suites":["ol/renderer/canvas/ImageLayer","renderFrame"],"updatePoint":{"line":296,"column":64,"index":9458},"line":296,"code":"    it('renders if layer extent partially intersects view extent', function (done) {\n      const frameState = createLayerFrameState([50, 50, 150, 150]);\n      layer.getSource().on('imageloadend', function () {\n        if (renderer.prepareFrame(frameState)) {\n          renderer.renderFrame(frameState, null);\n        }\n        try {\n          expect(renderer.clipUnrotated.callCount).to.be(1);\n          expect(renderer.context.drawImage.callCount).to.be(1);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"renders without clipping when layer extent covers view","suites":["ol/renderer/canvas/ImageLayer","renderFrame"],"updatePoint":{"line":311,"column":62,"index":10002},"line":311,"code":"    it('renders without clipping when layer extent covers view', function (done) {\n      const frameState = createLayerFrameState([0, 0, 100, 100]);\n      layer.getSource().on('imageloadend', function () {\n        if (renderer.prepareFrame(frameState)) {\n          renderer.renderFrame(frameState, null);\n        }\n        try {\n          expect(renderer.clipUnrotated.callCount).to.be(0);\n          expect(renderer.context.drawImage.callCount).to.be(1);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"resets image when empty","suites":["ol/renderer/canvas/ImageLayer","renderFrame"],"updatePoint":{"line":326,"column":31,"index":10513},"line":326,"code":"    it('resets image when empty', function (done) {\n      const frameState = createLayerFrameState([0, 0, 100, 100]);\n      layer.getSource().on('imageloadend', function () {\n        if (renderer.prepareFrame(frameState)) {\n          renderer.renderFrame(frameState, null);\n        }\n        expect(renderer.image_).to.be.a(ImageWrapper);\n        renderer.image_.state = ImageState.EMPTY;\n        expect(renderer.prepareFrame(frameState)).to.be(false);\n        expect(renderer.image_).to.be(null);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/ImageLayer.test.js","skipped":false,"dir":"test"},{"name":"properly handles interim tiles","suites":["ol.renderer.canvas.TileLayer","#prepareFrame"],"updatePoint":{"line":41,"column":38,"index":1290},"line":41,"code":"    it('properly handles interim tiles', function (done) {\n      const layer = map.getLayers().item(0);\n      source.once('tileloadend', function (e) {\n        expect(e.tile.inTransition()).to.be(false);\n        done();\n      });\n      source.updateParams({\n        TIME: '1'\n      });\n      map.renderSync();\n      const tiles = layer.getRenderer().renderedTiles;\n      expect(tiles.length).to.be(1);\n      expect(tiles[0]).to.equal(tile);\n      expect(tile.inTransition()).to.be(true);\n    });","file":"browser/spec/ol/renderer/canvas/tilelayer.test.js","skipped":false,"dir":"test"},{"name":"respects the source's zDirection setting","suites":["ol.renderer.canvas.TileLayer","#renderFrame"],"updatePoint":{"line":78,"column":48,"index":2310},"line":78,"code":"    it(\"respects the source's zDirection setting\", function (done) {\n      layer.getSource().zDirection = 1;\n      map.getView().setZoom(5.8); // would lead to z6 tile request with the default zDirection\n      map.once('rendercomplete', function () {\n        const tileCache = layer.getSource().tileCache;\n        const keys = tileCache.getKeys();\n        expect(keys.some(key => key.startsWith('6/'))).to.be(false);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/tilelayer.test.js","skipped":false,"dir":"test"},{"name":"image smoothing is re-enabled after rendering","suites":["ol.renderer.canvas.TileLayer","#renderFrame"],"updatePoint":{"line":88,"column":53,"index":2766},"line":88,"code":"    it('image smoothing is re-enabled after rendering', function (done) {\n      let context;\n      layer.on('postrender', function (e) {\n        context = e.context;\n        context.imageSmoothingEnabled = false;\n      });\n      map.on('postrender', function () {\n        expect(context.imageSmoothingEnabled).to.be(true);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/tilelayer.test.js","skipped":false,"dir":"test"},{"name":"cleans up CanvasVectorRenderer","suites":["ol/renderer/canvas/VectorImageLayer","#dispose()"],"updatePoint":{"line":12,"column":38,"index":788},"line":12,"code":"    it('cleans up CanvasVectorRenderer', function () {\n      const layer = new VectorImageLayer({\n        source: new VectorSource()\n      });\n      const renderer = new CanvasVectorImageLayerRenderer(layer);\n      const spy = sinon.spy(renderer.vectorRenderer_, 'dispose');\n      renderer.dispose();\n      expect(spy.called).to.be(true);\n    });","file":"browser/spec/ol/renderer/canvas/vectorimage.test.js","skipped":false,"dir":"test"},{"name":"sets image to null if no features are rendered","suites":["ol/renderer/canvas/VectorImageLayer","#prepareFrame"],"updatePoint":{"line":53,"column":54,"index":2130},"line":53,"code":"    it('sets image to null if no features are rendered', function () {\n      renderer.prepareFrame(frameState);\n      expect(renderer.image_).to.be.a(ImageCanvas);\n      layer.getSource().clear();\n      renderer.prepareFrame(frameState);\n      expect(renderer.image_).to.be(null);\n    });","file":"browser/spec/ol/renderer/canvas/vectorimage.test.js","skipped":false,"dir":"test"},{"name":"sets correct extent with imageRatio = 2","suites":["ol/renderer/canvas/VectorImageLayer","#prepareFrame"],"updatePoint":{"line":60,"column":47,"index":2412},"line":60,"code":"    it('sets correct extent with imageRatio = 2', function () {\n      const extent = frameState.extent.slice();\n      scaleFromCenter(extent, 2);\n      renderer.prepareFrame(frameState);\n      const imageExtent = renderer.image_.getExtent();\n      expect(imageExtent).to.eql(extent);\n    });","file":"browser/spec/ol/renderer/canvas/vectorimage.test.js","skipped":false,"dir":"test"},{"name":"creates a new instance","suites":["ol/renderer/canvas/VectorLayer","constructor"],"updatePoint":{"line":35,"column":30,"index":1611},"line":35,"code":"    it('creates a new instance', function () {\n      const layer = new VectorLayer({\n        source: new VectorSource()\n      });\n      const renderer = new CanvasVectorLayerRenderer(layer);\n      expect(renderer).to.be.a(CanvasVectorLayerRenderer);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"gives precedence to feature styles over layer styles","suites":["ol/renderer/canvas/VectorLayer","constructor"],"updatePoint":{"line":42,"column":60,"index":1899},"line":42,"code":"    it('gives precedence to feature styles over layer styles', function () {\n      const target = document.createElement('div');\n      target.style.width = '256px';\n      target.style.height = '256px';\n      document.body.appendChild(target);\n      const map = new Map({\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        }),\n        target: target\n      });\n      const layerStyle = [new Style({\n        text: new Text({\n          text: 'layer'\n        })\n      })];\n      const featureStyle = [new Style({\n        text: new Text({\n          text: 'feature'\n        })\n      })];\n      const feature1 = new Feature(new Point([0, 0]));\n      const feature2 = new Feature(new Point([0, 0]));\n      feature2.setStyle(featureStyle);\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [feature1, feature2]\n        }),\n        style: layerStyle\n      });\n      map.addLayer(layer);\n      const spy = sinon.spy(layer.getRenderer(), 'renderFeature');\n      map.renderSync();\n      expect(spy.getCall(0).args[2]).to.eql(layerStyle);\n      expect(spy.getCall(1).args[2]).to.be(featureStyle);\n      document.body.removeChild(target);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"does not re-render for unavailable fonts","suites":["ol/renderer/canvas/VectorLayer","constructor"],"updatePoint":{"line":80,"column":48,"index":3087},"line":80,"code":"    it('does not re-render for unavailable fonts', function (done) {\n      checkedFonts.values_ = {};\n      const map = new Map({\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        }),\n        target: target\n      });\n      const layerStyle = new Style({\n        text: new Text({\n          text: 'layer',\n          font: '12px \"Unavailable Font\",sans-serif'\n        })\n      });\n      const feature = new Feature(new Point([0, 0]));\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [feature]\n        }),\n        style: layerStyle\n      });\n      map.addLayer(layer);\n      const revision = layer.getRevision();\n      setTimeout(function () {\n        expect(layer.getRevision()).to.be(revision);\n        done();\n      }, 800);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"does not re-render for available fonts","suites":["ol/renderer/canvas/VectorLayer","constructor"],"updatePoint":{"line":109,"column":46,"index":3889},"line":109,"code":"    it('does not re-render for available fonts', function (done) {\n      checkedFonts.values_ = {};\n      const map = new Map({\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        }),\n        target: target\n      });\n      const layerStyle = new Style({\n        text: new Text({\n          text: 'layer',\n          font: '12px sans-serif'\n        })\n      });\n      const feature = new Feature(new Point([0, 0]));\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [feature]\n        }),\n        style: layerStyle\n      });\n      map.addLayer(layer);\n      const revision = layer.getRevision();\n      setTimeout(function () {\n        expect(layer.getRevision()).to.be(revision);\n        done();\n      }, 800);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"re-renders for fonts that become available","suites":["ol/renderer/canvas/VectorLayer","constructor"],"updatePoint":{"line":138,"column":50,"index":4676},"line":138,"code":"    it('re-renders for fonts that become available', function (done) {\n      checkedFonts.values_ = {};\n      font.add();\n      const map = new Map({\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        }),\n        target: target\n      });\n      const layerStyle = new Style({\n        text: new Text({\n          text: 'layer',\n          font: `12px \"${fontFamily}\",sans-serif`\n        })\n      });\n      const feature = new Feature(new Point([0, 0]));\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [feature]\n        }),\n        style: layerStyle\n      });\n      map.addLayer(layer);\n      const revision = layer.getRevision();\n      setTimeout(function () {\n        try {\n          font.remove();\n          expect(layer.getRevision()).to.be(revision + 1);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      }, 1600);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls callback once per feature with a layer as 2nd arg","suites":["ol/renderer/canvas/VectorLayer","#forEachFeatureAtCoordinate"],"updatePoint":{"line":192,"column":63,"index":6353},"line":192,"code":"    it('calls callback once per feature with a layer as 2nd arg', function () {\n      const spy = sinon.spy();\n      const coordinate = [0, 0];\n      const matches = [];\n      const frameState = {\n        layerStatesArray: [{}],\n        viewState: {\n          center: [0, 0],\n          resolution: 1,\n          rotation: 0\n        }\n      };\n      renderer.forEachFeatureAtCoordinate(coordinate, frameState, 0, spy, matches);\n      expect(spy.callCount).to.be(1);\n      expect(spy.getCall(0).args[1]).to.be(layer);\n      expect(matches).to.be.empty();\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"sets correct extent for small viewport near dateline","suites":["ol/renderer/canvas/VectorLayer","#prepareFrame and #compose"],"updatePoint":{"line":253,"column":60,"index":8243},"line":253,"code":"    it('sets correct extent for small viewport near dateline', function () {\n      setExtent([projExtent[0] - 10000, -10000, projExtent[0] + 10000, 10000]);\n      renderer.prepareFrame(frameState);\n      expect(renderer.replayGroup_.maxExtent_).to.eql(bufferExtent([projExtent[0] - worldWidth + buffer, -10000, projExtent[2] + worldWidth - buffer, 10000], buffer));\n      expect(loadExtents.length).to.be(2);\n      expect(loadExtents[0]).to.eql(bufferExtent(frameState.extent, buffer));\n      const otherExtent = [projExtent[2] - 10000, -10000, projExtent[2] + 10000, 10000];\n      expect(loadExtents[1]).to.eql(bufferExtent(otherExtent, buffer));\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"sets correct extent for viewport less than 1 world wide","suites":["ol/renderer/canvas/VectorLayer","#prepareFrame and #compose"],"updatePoint":{"line":262,"column":63,"index":8902},"line":262,"code":"    it('sets correct extent for viewport less than 1 world wide', function () {\n      setExtent([projExtent[0] - 10000, -10000, projExtent[2] - 10000, 10000]);\n      renderer.prepareFrame(frameState);\n      expect(renderer.replayGroup_.maxExtent_).to.eql(bufferExtent([projExtent[0] - worldWidth + buffer, -10000, projExtent[2] + worldWidth - buffer, 10000], buffer));\n      expect(loadExtents.length).to.be(2);\n      expect(loadExtents[0]).to.eql(bufferExtent(frameState.extent, buffer));\n      const otherExtent = [projExtent[0] - 10000 + worldWidth, -10000, projExtent[2] - 10000 + worldWidth, 10000];\n      expect(loadExtents[1]).to.eql(bufferExtent(otherExtent, buffer));\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"sets correct extent for viewport more than 1 world wide","suites":["ol/renderer/canvas/VectorLayer","#prepareFrame and #compose"],"updatePoint":{"line":271,"column":63,"index":9587},"line":271,"code":"    it('sets correct extent for viewport more than 1 world wide', function () {\n      setExtent([2 * projExtent[0] + 10000, -10000, 2 * projExtent[2] - 10000, 10000]);\n      renderer.prepareFrame(frameState);\n      expect(renderer.replayGroup_.maxExtent_).to.eql(bufferExtent([projExtent[0] - worldWidth + buffer, -10000, projExtent[2] + worldWidth - buffer, 10000], buffer));\n      expect(loadExtents.length).to.be(1);\n      expect(loadExtents[0]).to.eql(bufferExtent(frameState.extent, buffer));\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"sets correct extent for viewport more than 2 worlds wide, one world away","suites":["ol/renderer/canvas/VectorLayer","#prepareFrame and #compose"],"updatePoint":{"line":278,"column":80,"index":10110},"line":278,"code":"    it('sets correct extent for viewport more than 2 worlds wide, one world away', function () {\n      setExtent([projExtent[0] - 2 * worldWidth - 10000, -10000, projExtent[0] + 2 * worldWidth + 10000, 10000]);\n      renderer.prepareFrame(frameState);\n      expect(renderer.replayGroup_.maxExtent_).to.eql(bufferExtent([projExtent[0] - 2 * worldWidth - 10000, -10000, projExtent[2] + 2 * worldWidth + 10000, 10000], buffer));\n      expect(loadExtents.length).to.be(1);\n      const normalizedExtent = [projExtent[0] - 2 * worldWidth + worldWidth - 10000, -10000, projExtent[0] + 2 * worldWidth + worldWidth + 10000, 10000];\n      expect(loadExtents[0]).to.eql(bufferExtent(normalizedExtent, buffer));\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"sets correct extent for small viewport, one world away","suites":["ol/renderer/canvas/VectorLayer","#prepareFrame and #compose"],"updatePoint":{"line":286,"column":62,"index":10800},"line":286,"code":"    it('sets correct extent for small viewport, one world away', function () {\n      setExtent([-worldWidth - 10000, -10000, -worldWidth + 10000, 10000]);\n      renderer.prepareFrame(frameState);\n      expect(renderer.replayGroup_.maxExtent_).to.eql(bufferExtent([projExtent[0] - worldWidth + buffer, -10000, projExtent[2] + worldWidth - buffer, 10000], buffer));\n      expect(loadExtents.length).to.be(1);\n      const normalizedExtent = [-10000, -10000, 10000, 10000];\n      expect(loadExtents[0]).to.eql(bufferExtent(normalizedExtent, buffer));\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"sets replayGroupChanged correctly","suites":["ol/renderer/canvas/VectorLayer","#prepareFrame and #compose"],"updatePoint":{"line":294,"column":41,"index":11334},"line":294,"code":"    it('sets replayGroupChanged correctly', function () {\n      setExtent([-10000, -10000, 10000, 10000]);\n      renderer.prepareFrame(frameState);\n      expect(renderer.replayGroupChanged).to.be(true);\n      renderer.prepareFrame(frameState);\n      expect(renderer.replayGroupChanged).to.be(false);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"dispatches a postrender event when rendering","suites":["ol/renderer/canvas/VectorLayer","#prepareFrame and #compose"],"updatePoint":{"line":301,"column":52,"index":11653},"line":301,"code":"    it('dispatches a postrender event when rendering', function (done) {\n      const layer = renderer.getLayer();\n      layer.getSource().addFeature(new Feature(new Point([0, 0])));\n      layer.once('postrender', function () {\n        expect(true);\n        done();\n      });\n      frameState.layerStatesArray = [layer.getLayerState()];\n      frameState.layerIndex = 0;\n      frameState.size = [100, 100];\n      setExtent([-10000, -10000, 10000, 10000]);\n      let rendered = false;\n      if (renderer.prepareFrame(frameState)) {\n        rendered = true;\n        renderer.renderFrame(frameState, null);\n      }\n      expect(rendered).to.be(true);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"invalidates hitdetection image when map is moved horizontally","suites":["ol/renderer/canvas/VectorLayer","hit detection"],"updatePoint":{"line":321,"column":69,"index":12372},"line":321,"code":"    it('invalidates hitdetection image when map is moved horizontally', function (done) {\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          wrapX: true\n        })\n      });\n      const renderer = new CanvasVectorLayerRenderer(layer);\n      const projection = getProjection('EPSG:3857');\n      const projExtent = projection.getExtent();\n      const worldWidth = getWidth(projExtent);\n      /** @type {import(\"../../../../../../src/ol/Map\").FrameState} */\n      const frameState = {\n        viewHints: [],\n        pixelRatio: 1,\n        layerStatesArray: [layer.getLayerState()],\n        layerIndex: 0,\n        size: [100, 100],\n        viewState: {\n          projection: projection,\n          resolution: 1,\n          rotation: 0\n        }\n      };\n      function setExtent(extent) {\n        frameState.extent = extent;\n        frameState.viewState.center = getCenter(extent);\n      }\n      layer.getSource().addFeature(new Feature(new Point([0, 0])));\n      setExtent([-10000 - worldWidth, -10000, 10000 - worldWidth, 10000]);\n      if (renderer.prepareFrame(frameState)) {\n        renderer.renderFrame(frameState, null);\n        renderer.getFeatures([50, 50]).then(features => {\n          const imageData = renderer.hitDetectionImageData_;\n          expect(imageData).to.be.an(ImageData);\n          expect(features).to.have.length(1);\n          setExtent([5e8 - worldWidth, -10000, 5e8 + 20000 - worldWidth, 10000]);\n          if (renderer.prepareFrame(frameState)) {\n            renderer.renderFrame(frameState);\n            renderer.getFeatures([50, 50]).then(features => {\n              expect(renderer.hitDetectionImageData_).to.be.an(ImageData);\n              expect(renderer.hitDetectionImageData_ !== imageData).to.be(true);\n              expect(features).to.have.length(0);\n              done();\n            });\n          }\n        });\n      }\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"does not render if layer extent does not intersect view extent","suites":["ol/renderer/canvas/VectorLayer","renderFrame"],"updatePoint":{"line":403,"column":70,"index":15267},"line":403,"code":"    it('does not render if layer extent does not intersect view extent', function () {\n      const frameState = createLayerFrameState([100, 100, 200, 200]);\n      if (renderer.prepareFrame(frameState)) {\n        renderer.renderFrame(frameState, null);\n      }\n      expect(renderer.renderWorlds.callCount).to.be(0);\n      expect(renderer.clipUnrotated.callCount).to.be(0);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"renders if layer extent partially intersects view extent","suites":["ol/renderer/canvas/VectorLayer","renderFrame"],"updatePoint":{"line":411,"column":64,"index":15642},"line":411,"code":"    it('renders if layer extent partially intersects view extent', function () {\n      const frameState = createLayerFrameState([0, 0, 100, 100]);\n      if (renderer.prepareFrame(frameState)) {\n        renderer.renderFrame(frameState, null);\n      }\n      expect(renderer.renderWorlds.callCount).to.be(1);\n      expect(renderer.clipUnrotated.callCount).to.be(1);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"renders withoutt clipping when layer extent covers view","suites":["ol/renderer/canvas/VectorLayer","renderFrame"],"updatePoint":{"line":419,"column":63,"index":16012},"line":419,"code":"    it('renders withoutt clipping when layer extent covers view', function () {\n      const frameState = createLayerFrameState([-200, -200, 200, 200]);\n      if (renderer.prepareFrame(frameState)) {\n        renderer.renderFrame(frameState, null);\n      }\n      expect(renderer.renderWorlds.callCount).to.be(1);\n      expect(renderer.clipUnrotated.callCount).to.be(0);\n    });","file":"browser/spec/ol/renderer/canvas/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"creates a new instance","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":98,"column":30,"index":3775},"line":98,"code":"    it('creates a new instance', function () {\n      const renderer = new CanvasVectorTileLayerRenderer(layer);\n      expect(renderer).to.be.a(CanvasVectorTileLayerRenderer);\n      expect(renderer.getLayer()).to.be(layer);\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"does not render images for pure vector rendering","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":103,"column":56,"index":4032},"line":103,"code":"    it('does not render images for pure vector rendering', function () {\n      const testLayer = new VectorTileLayer({\n        renderMode: 'vector',\n        source: source,\n        style: layerStyle\n      });\n      map.removeLayer(layer);\n      map.addLayer(testLayer);\n      const spy = sinon.spy(CanvasVectorTileLayerRenderer.prototype, 'renderTileImage_');\n      map.renderSync();\n      expect(spy.callCount).to.be(0);\n      spy.restore();\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"renders both replays and images for hybrid rendering","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":116,"column":60,"index":4487},"line":116,"code":"    it('renders both replays and images for hybrid rendering', function () {\n      const spy1 = sinon.spy(CanvasVectorTileLayerRenderer.prototype, 'getRenderTransform');\n      const spy2 = sinon.spy(CanvasVectorTileLayerRenderer.prototype, 'renderTileImage_');\n      map.renderSync();\n      expect(spy1.callCount).to.be(1);\n      expect(spy2.callCount).to.be(1);\n      spy1.restore();\n      spy2.restore();\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"renders replays with custom renderers as direct replays","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":125,"column":63,"index":4905},"line":125,"code":"    it('renders replays with custom renderers as direct replays', function () {\n      layer.setStyle(new Style({\n        renderer: function () {}\n      }));\n      const spy = sinon.spy(CanvasVectorTileLayerRenderer.prototype, 'getRenderTransform');\n      map.renderSync();\n      expect(spy.callCount).to.be(1);\n      spy.restore();\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"gives precedence to feature styles over layer styles","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":134,"column":60,"index":5242},"line":134,"code":"    it('gives precedence to feature styles over layer styles', function () {\n      const spy = sinon.spy(layer.getRenderer(), 'renderFeature');\n      map.renderSync();\n      expect(spy.getCall(0).args[2]).to.be(layer.getStyle());\n      expect(spy.getCall(1).args[2]).to.be(feature2.getStyle());\n      spy.restore();\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"does not re-render for unavailable fonts","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":141,"column":48,"index":5554},"line":141,"code":"    it('does not re-render for unavailable fonts', function (done) {\n      map.renderSync();\n      checkedFonts.values_ = {};\n      layerStyle[0].getText().setFont('12px \"Unavailable font\",sans-serif');\n      layer.changed();\n      const revision = layer.getRevision();\n      setTimeout(function () {\n        expect(layer.getRevision()).to.be(revision);\n        done();\n      }, 800);\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"does not re-render for available fonts","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":152,"column":46,"index":5945},"line":152,"code":"    it('does not re-render for available fonts', function (done) {\n      map.renderSync();\n      checkedFonts.values_ = {};\n      layerStyle[0].getText().setFont('12px sans-serif');\n      layer.changed();\n      const revision = layer.getRevision();\n      setTimeout(function () {\n        expect(layer.getRevision()).to.be(revision);\n        done();\n      }, 800);\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"re-renders for fonts that become available","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":163,"column":50,"index":6321},"line":163,"code":"    it('re-renders for fonts that become available', function (done) {\n      map.renderSync();\n      checkedFonts.values_ = {};\n      font.add();\n      layerStyle[0].getText().setFont(`12px \"${fontFamily}\",sans-serif`);\n      layer.changed();\n      const revision = layer.getRevision();\n      setTimeout(function () {\n        try {\n          font.remove();\n          expect(layer.getRevision()).to.be(revision + 1);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      }, 1600);\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"works for multiple layers that use the same source","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":180,"column":58,"index":6838},"line":180,"code":"    it('works for multiple layers that use the same source', function () {\n      const layer2 = new VectorTileLayer({\n        source: source,\n        style: new Style({\n          text: new Text({\n            text: 'layer2'\n          })\n        })\n      });\n      map.addLayer(layer2);\n      map.renderSync();\n      const tile = source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      expect(Object.keys(tile.executorGroups)[0]).to.be(getUid(layer));\n      expect(Object.keys(tile.executorGroups)[1]).to.be(getUid(layer2));\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"reuses render container and adds and removes overlay context","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":195,"column":68,"index":7385},"line":195,"code":"    it('reuses render container and adds and removes overlay context', function (done) {\n      map.getLayers().insertAt(0, new TileLayer({\n        source: new XYZ({\n          url: 'rendering/ol/data/tiles/osm/{z}/{x}/{y}.png'\n        })\n      }));\n      map.once('rendercomplete', function () {\n        expect(document.querySelector('.ol-layers').childElementCount).to.be(1);\n        expect(document.querySelector('.ol-layer').childElementCount).to.be(1);\n        map.removeLayer(map.getLayers().item(1));\n        map.renderSync();\n        expect(document.querySelector('.ol-layer').childElementCount).to.be(1);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"reuses render container when previous layer has a background","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":210,"column":68,"index":8031},"line":210,"code":"    it('reuses render container when previous layer has a background', function (done) {\n      map.getLayers().insertAt(0, new TileLayer({\n        background: 'rgb(255, 0, 0)',\n        source: new XYZ({\n          url: 'rendering/ol/data/tiles/osm/{z}/{x}/{y}.png'\n        })\n      }));\n      map.once('rendercomplete', function () {\n        expect(document.querySelector('.ol-layers').childElementCount).to.be(1);\n        expect(document.querySelector('.ol-layer').childElementCount).to.be(1);\n        map.removeLayer(map.getLayers().item(1));\n        map.renderSync();\n        expect(document.querySelector('.ol-layer').childElementCount).to.be(1);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"does not reuse render container when backgrounds are different","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":226,"column":70,"index":8717},"line":226,"code":"    it('does not reuse render container when backgrounds are different', function (done) {\n      map.getLayers().insertAt(0, new TileLayer({\n        background: 'rgb(255, 0, 0)',\n        source: new XYZ({\n          url: 'rendering/ol/data/tiles/osm/{z}/{x}/{y}.png'\n        })\n      }));\n      map.getLayers().insertAt(0, new TileLayer({\n        background: 'rgba(255, 0, 0, 0.1)',\n        source: new XYZ({\n          url: 'rendering/ol/data/tiles/osm/{z}/{x}/{y}.png'\n        })\n      }));\n      map.once('rendercomplete', function () {\n        expect(document.querySelector('.ol-layers').childElementCount).to.be(2);\n        expect(document.querySelector('.ol-layer').childElementCount).to.be(1);\n        map.removeLayer(map.getLayers().item(1));\n        map.renderSync();\n        expect(document.querySelector('.ol-layers').childElementCount).to.be(1);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"sets the configured background (string) on the container","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":248,"column":64,"index":9601},"line":248,"code":"    it('sets the configured background (string) on the container', function (done) {\n      layer.setBackground('rgba(255, 0, 0, 0.5)');\n      map.once('rendercomplete', function () {\n        expect(layer.getRenderer().container.style.backgroundColor).to.be('rgba(255, 0, 0, 0.5)');\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"sets the configured background (function) on the container","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":255,"column":66,"index":9919},"line":255,"code":"    it('sets the configured background (function) on the container', function (done) {\n      layer.setBackground(function (resolution) {\n        expect(resolution).to.be(map.getView().getResolution());\n        return 'rgba(255, 0, 0, 0.5)';\n      });\n      map.once('rendercomplete', function () {\n        expect(layer.getRenderer().container.style.backgroundColor).to.be('rgba(255, 0, 0, 0.5)');\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"changes background when function returns a different color","suites":["ol/renderer/canvas/VectorTileLayer","constructor"],"updatePoint":{"line":265,"column":66,"index":10350},"line":265,"code":"    it('changes background when function returns a different color', function (done) {\n      let count = 0;\n      layer.setBackground(function (resolution) {\n        const backgrounds = [undefined, 'rgba(255, 0, 0, 0.5)', 'rgba(0, 0, 255, 0.5)', undefined];\n        expect(resolution).to.be(map.getView().getResolution());\n        return backgrounds[count++];\n      });\n      map.once('rendercomplete', function () {\n        expect(layer.getRenderer().container.style.backgroundColor).to.be('');\n        map.renderSync();\n        expect(layer.getRenderer().container.style.backgroundColor).to.be('rgba(255, 0, 0, 0.5)');\n        map.renderSync();\n        expect(layer.getRenderer().container.style.backgroundColor).to.be('rgba(0, 0, 255, 0.5)');\n        map.renderSync();\n        expect(layer.getRenderer().container.style.backgroundColor).to.be('');\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"re-renders when layer changed","suites":["ol/renderer/canvas/VectorTileLayer","#prepareFrame"],"updatePoint":{"line":285,"column":37,"index":11254},"line":285,"code":"    it('re-renders when layer changed', function () {\n      const layer = new VectorTileLayer({\n        source: new VectorTileSource({\n          tileGrid: createXYZ(),\n          transition: 0\n        })\n      });\n      const sourceTile = new VectorTile([0, 0, 0], 2);\n      sourceTile.features_ = [];\n      sourceTile.getImage = function () {\n        return document.createElement('canvas');\n      };\n      const tile = new VectorRenderTile([0, 0, 0], 1, [0, 0, 0], function () {\n        return sourceTile;\n      });\n      tile.transition_ = 0;\n      tile.setState(TileState.LOADED);\n      layer.getSource().getTile = function () {\n        return tile;\n      };\n      const renderer = new CanvasVectorTileLayerRenderer(layer);\n      renderer.isDrawableTile = function () {\n        return true;\n      };\n      const proj = getProjection('EPSG:3857');\n      const frameState = {\n        layerStatesArray: [layer.getLayerState()],\n        layerIndex: 0,\n        extent: proj.getExtent(),\n        pixelRatio: 1,\n        pixelToCoordinateTransform: create(),\n        time: Date.now(),\n        viewHints: [],\n        viewState: {\n          center: [0, 0],\n          resolution: 156543.03392804097,\n          projection: proj\n        },\n        size: [256, 256],\n        usedTiles: {},\n        wantedTiles: {}\n      };\n      renderer.renderFrame(frameState);\n      const replayState = renderer.renderedTiles[0].getReplayState(layer);\n      const revision = replayState.renderedTileRevision;\n      renderer.renderFrame(frameState, null);\n      expect(replayState.renderedTileRevision).to.be(revision);\n      layer.changed();\n      renderer.renderFrame(frameState, null);\n      expect(replayState.renderedTileRevision).to.be(revision + 1);\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"uses correct image - vector sequence in vector mode","suites":["ol/renderer/canvas/VectorTileLayer","#renderFrame"],"updatePoint":{"line":338,"column":59,"index":13062},"line":338,"code":"    it('uses correct image - vector sequence in vector mode', function () {\n      const layer = new VectorTileLayer({\n        renderMode: 'vector',\n        source: new VectorTileSource({\n          tileGrid: createXYZ()\n        })\n      });\n      const sourceTile = new VectorTile([0, 0, 0], 2);\n      sourceTile.features_ = [new RenderFeature('Point', [0, 0])];\n      sourceTile.getImage = function () {\n        return document.createElement('canvas');\n      };\n      layer.getSource().getSourceTiles = () => [sourceTile];\n      const tile = new VectorRenderTile([0, 0, 0], 1, [0, 0, 0], function () {\n        return sourceTile;\n      });\n      tile.transition_ = 0;\n      tile.replayState_[getUid(layer)] = [{\n        dirty: true\n      }];\n      tile.setState(TileState.LOADED);\n      layer.getSource().getTile = function () {\n        return tile;\n      };\n      const renderer = new CanvasVectorTileLayerRenderer(layer);\n      renderer.isDrawableTile = function () {\n        return true;\n      };\n      const proj = getProjection('EPSG:3857');\n      const frameState = {\n        layerStatesArray: [layer.getLayerState()],\n        layerIndex: 0,\n        extent: proj.getExtent(),\n        pixelRatio: 1,\n        pixelToCoordinateTransform: create(),\n        time: Date.now(),\n        viewHints: [],\n        viewState: {\n          center: [0, 0],\n          resolution: 156543.03392804097,\n          projection: proj\n        },\n        size: [256, 256],\n        usedTiles: {},\n        wantedTiles: {}\n      };\n      renderer.container = document.createElement('div');\n      const sequence = [];\n      renderer.context = {\n        clearRect: () => sequence.push('clearRect'),\n        save: () => sequence.push('save'),\n        restore: () => sequence.push('restore'),\n        beginPath: () => sequence.push('beginPath'),\n        moveTo: () => sequence.push('moveTo'),\n        lineTo: () => sequence.push('lineTo'),\n        clip: () => sequence.push('clip'),\n        canvas: {\n          style: {\n            transform: ''\n          }\n        }\n      };\n      layer.on('prerender', () => sequence.push('prerender'));\n      layer.on('postrender', () => sequence.push('postrender'));\n      renderer.renderFrame(frameState);\n      expect(sequence).to.eql(['prerender', 'clearRect', 'save', 'beginPath', 'moveTo', 'lineTo', 'lineTo', 'lineTo', 'clip', 'restore', 'postrender']);\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"calls callback once per feature with a layer as 2nd arg","suites":["ol/renderer/canvas/VectorTileLayer","#forEachFeatureAtCoordinate"],"updatePoint":{"line":446,"column":63,"index":16937},"line":446,"code":"    it('calls callback once per feature with a layer as 2nd arg', function () {\n      const spy = sinon.spy();\n      const coordinate = [0, 0];\n      const matches = [];\n      const frameState = {\n        layerStatesArray: [{}],\n        viewState: {\n          projection: getProjection('EPSG:3857'),\n          resolution: 1,\n          rotation: 0\n        }\n      };\n      renderer.renderedTiles = [source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'))];\n      renderer.forEachFeatureAtCoordinate(coordinate, frameState, 0, spy, matches);\n      expect(spy.callCount).to.be(1);\n      expect(spy.getCall(0).args[1]).to.be(layer);\n      expect(matches).to.be.empty();\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"does not give false positives when overzoomed","suites":["ol/renderer/canvas/VectorTileLayer","#forEachFeatureAtCoordinate"],"updatePoint":{"line":464,"column":53,"index":17600},"line":464,"code":"    it('does not give false positives when overzoomed', function (done) {\n      const target = document.createElement('div');\n      target.style.width = '100px';\n      target.style.height = '100px';\n      document.body.appendChild(target);\n      const extent = [1824704.739223726, 6141868.096770482, 1827150.7241288517, 6144314.081675608];\n      const source = new VectorTileSource({\n        format: new MVT(),\n        url: 'spec/ol/data/14-8938-5680.vector.pbf',\n        minZoom: 14,\n        maxZoom: 14\n      });\n      const map = new Map({\n        target: target,\n        layers: [new VectorTileLayer({\n          extent: extent,\n          source: source\n        })],\n        view: new View({\n          center: getCenter(extent),\n          zoom: 19\n        })\n      });\n      source.on('tileloadend', function () {\n        setTimeout(function () {\n          const features = map.getFeaturesAtPixel([96, 96]);\n          document.body.removeChild(target);\n          map.dispose();\n          expect(features).to.be.an(Array);\n          expect(features).to.be.empty();\n          done();\n        }, 200);\n      });\n    });","file":"browser/spec/ol/renderer/canvas/vectortilelayer.test.js","skipped":false,"dir":"test"},{"name":"updates revision when data is ready and layer is visible","suites":["ol/renderer/Layer","#renderIfReadyAndVisible"],"updatePoint":{"line":17,"column":64,"index":778},"line":17,"code":"    it('updates revision when data is ready and layer is visible', function () {\n      layer.setVisible(true);\n      let state;\n      layer.getSourceState = function () {\n        return state;\n      };\n      const revision = layer.getRevision();\n      state = 'foo';\n      renderer.renderIfReadyAndVisible();\n      expect(layer.getRevision()).to.be(revision);\n      state = 'ready';\n      renderer.renderIfReadyAndVisible();\n      expect(layer.getRevision()).to.be(revision + 1);\n    });","file":"browser/spec/ol/renderer/layer.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/renderer/Layer","#loadImage","load IDLE image"],"updatePoint":{"line":45,"column":23,"index":1668},"line":45,"code":"      it('returns false', function () {\n        const loaded = renderer.loadImage(image);\n        expect(loaded).to.be(false);\n      });","file":"browser/spec/ol/renderer/layer.test.js","skipped":false,"dir":"test"},{"name":"registers a listener","suites":["ol/renderer/Layer","#loadImage","load IDLE image"],"updatePoint":{"line":49,"column":30,"index":1812},"line":49,"code":"      it('registers a listener', function () {\n        renderer.loadImage(image);\n        const listeners = image.listeners_[eventType];\n        expect(listeners).to.have.length(1);\n      });","file":"browser/spec/ol/renderer/layer.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/renderer/Layer","#loadImage","load LOADED image"],"updatePoint":{"line":56,"column":22,"index":2052},"line":56,"code":"      it('returns true', function () {\n        image.state = 2; // LOADED\n        const loaded = renderer.loadImage(image);\n        expect(loaded).to.be(true);\n      });","file":"browser/spec/ol/renderer/layer.test.js","skipped":false,"dir":"test"},{"name":"does not register a listener","suites":["ol/renderer/Layer","#loadImage","load LOADED image"],"updatePoint":{"line":61,"column":38,"index":2238},"line":61,"code":"      it('does not register a listener', function () {\n        image.state = 2; // LOADED\n        const loaded = renderer.loadImage(image);\n        expect(loaded).to.be(true);\n      });","file":"browser/spec/ol/renderer/layer.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/renderer/Layer","#loadImage","load LOADING image"],"updatePoint":{"line":73,"column":23,"index":2597},"line":73,"code":"      it('returns false', function () {\n        const loaded = renderer.loadImage(image);\n        expect(loaded).to.be(false);\n      });","file":"browser/spec/ol/renderer/layer.test.js","skipped":false,"dir":"test"},{"name":"does not register a new listener","suites":["ol/renderer/Layer","#loadImage","load LOADING image"],"updatePoint":{"line":77,"column":42,"index":2753},"line":77,"code":"      it('does not register a new listener', function () {\n        renderer.loadImage(image);\n        const listeners = image.listeners_[eventType];\n        expect(listeners).to.have.length(1);\n      });","file":"browser/spec/ol/renderer/layer.test.js","skipped":false,"dir":"test"},{"name":"accesses tiles from current zoom level last","suites":["ol/renderer/Layer","manageTilePyramid behavior"],"updatePoint":{"line":119,"column":51,"index":3847},"line":119,"code":"    it('accesses tiles from current zoom level last', function (done) {\n      // expect most recent tile in the cache to be from zoom level 0\n      const key = source.tileCache.peekFirstKey();\n      const tileCoord = fromKey(key);\n      expect(tileCoord[0]).to.be(0);\n      map.once('moveend', function () {\n        // expect most recent tile in the cache to be from zoom level 4\n        const key = source.tileCache.peekFirstKey();\n        const tileCoord = fromKey(key);\n        expect(tileCoord[0]).to.be(4);\n        done();\n      });\n      view.setZoom(4);\n    });","file":"browser/spec/ol/renderer/layer.test.js","skipped":false,"dir":"test"},{"name":"createst an instance","suites":["ol.renderer.Map","constructor"],"updatePoint":{"line":14,"column":28,"index":895},"line":14,"code":"    it('createst an instance', function () {\n      const map = new Map({});\n      const renderer = new MapRenderer(null, map);\n      expect(renderer).to.be.a(MapRenderer);\n      expect(renderer).to.be.a(Disposable);\n      renderer.dispose();\n      map.dispose();\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"calls callback with feature, layer and geometry","suites":["ol.renderer.Map","#forEachFeatureAtPixel"],"updatePoint":{"line":42,"column":55,"index":1722},"line":42,"code":"    it('calls callback with feature, layer and geometry', function () {\n      let hit;\n      const point = new Point([0, 0]);\n      const polygon = fromExtent([0, -1e6, 1e6, 1e6]);\n      const geometryCollection = new Feature(new GeometryCollection([polygon, point]));\n      const multiPoint = new MultiPoint([[-1e6, -1e6], [-1e6, 1e6]]);\n      const multiGeometry = new Feature(multiPoint);\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [geometryCollection, multiGeometry]\n        })\n      });\n      map.addLayer(layer);\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit.feature).to.be(geometryCollection);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(point);\n      hit = map.forEachFeatureAtPixel([75, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit.feature).to.be(geometryCollection);\n      expect(hit.geometry).to.be(polygon);\n      hit = map.forEachFeatureAtPixel([25, 25], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit.feature).to.be(multiGeometry);\n      expect(hit.geometry).to.be(multiPoint);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"hits Polygon, Circle geometry, Circle style stroke and transparent fill","suites":["ol.renderer.Map","#forEachFeatureAtPixel"],"updatePoint":{"line":79,"column":79,"index":3092},"line":79,"code":"    it('hits Polygon, Circle geometry, Circle style stroke and transparent fill', function () {\n      const target = map.getTargetElement();\n      target.style.width = '300px';\n      target.style.height = '300px';\n      map.updateSize();\n      map.setView(new View({\n        center: [4.5, 7],\n        resolution: 0.05\n      }));\n      const styles = {\n        transparent: new Style({\n          stroke: new Stroke({\n            color: 'blue',\n            width: 3\n          }),\n          fill: new Fill({\n            color: 'transparent'\n          }),\n          image: new Circle({\n            radius: 30,\n            stroke: new Stroke({\n              color: 'blue',\n              width: 3\n            }),\n            fill: new Fill({\n              color: 'transparent'\n            })\n          })\n        }),\n        none: new Style({\n          stroke: new Stroke({\n            color: 'blue',\n            width: 3\n          }),\n          image: new Circle({\n            radius: 30,\n            stroke: new Stroke({\n              color: 'blue',\n              width: 3\n            })\n          })\n        })\n      };\n      const source = new VectorSource({\n        features: [new Feature({\n          geometry: fromExtent([0, 10, 3, 13]),\n          fillType: 'none'\n        }), new Feature({\n          geometry: fromExtent([1, 11, 4, 14]),\n          fillType: 'none'\n        }), new Feature({\n          geometry: fromExtent([5, 10, 8, 13]),\n          fillType: 'transparent'\n        }), new Feature({\n          geometry: fromExtent([6, 11, 9, 14]),\n          fillType: 'transparent'\n        }), new Feature({\n          geometry: new CircleGeometry([1.5, 6.5], 1.5),\n          fillType: 'none'\n        }), new Feature({\n          geometry: new CircleGeometry([2.5, 7.5], 1.5),\n          fillType: 'none'\n        }), new Feature({\n          geometry: new CircleGeometry([6.5, 6.5], 1.5),\n          fillType: 'transparent'\n        }), new Feature({\n          geometry: new CircleGeometry([7.5, 7.5], 1.5),\n          fillType: 'transparent'\n        }), new Feature({\n          geometry: new Point([1.5, 1.5]),\n          fillType: 'none'\n        }), new Feature({\n          geometry: new Point([2.5, 2.5]),\n          fillType: 'none'\n        }), new Feature({\n          geometry: new Point([6.5, 1.5]),\n          fillType: 'transparent'\n        }), new Feature({\n          geometry: new Point([7.5, 2.5]),\n          fillType: 'transparent'\n        })]\n      });\n      const layer = new VectorLayer({\n        source: source,\n        style: function (feature, resolution) {\n          return styles[feature.get('fillType')];\n        }\n      });\n      map.addLayer(layer);\n      map.renderSync();\n      function hitTest(coordinate) {\n        const features = map.getFeaturesAtPixel(map.getPixelFromCoordinate(coordinate));\n        const result = {\n          count: 0\n        };\n        if (features && features.length > 0) {\n          result.count = features.length;\n          result.extent = features[0].getGeometry().getExtent();\n        }\n        return result;\n      }\n      let res;\n      res = hitTest([0, 12]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(0);\n      res = hitTest([1, 12]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(1);\n      res = hitTest([2, 12]);\n      expect(res.count).to.be(0);\n      res = hitTest([3, 12]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(0);\n      res = hitTest([4, 12]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(1);\n      res = hitTest([5, 12]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(5);\n      res = hitTest([6, 12]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(6);\n      res = hitTest([7, 12]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(6);\n      res = hitTest([8, 12]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(6);\n      res = hitTest([9, 12]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(6);\n      res = hitTest([0, 6.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(0);\n      res = hitTest([1, 7.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(1);\n      res = hitTest([2, 7.0]);\n      expect(res.count).to.be(0);\n      res = hitTest([3, 6.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(0);\n      res = hitTest([4, 7.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(1);\n      res = hitTest([5, 6.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(5);\n      res = hitTest([6, 7.5]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(6);\n      res = hitTest([7, 7.0]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(6);\n      res = hitTest([8, 6.5]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(6);\n      res = hitTest([9, 7.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(6);\n      res = hitTest([0, 1.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(1.5);\n      res = hitTest([1, 2.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(2.5);\n      res = hitTest([2, 2.0]);\n      expect(res.count).to.be(0);\n      res = hitTest([3, 1.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(1.5);\n      res = hitTest([4, 2.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(2.5);\n      res = hitTest([5, 1.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(6.5);\n      res = hitTest([6, 2.5]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(7.5);\n      res = hitTest([7, 2.0]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(7.5);\n      res = hitTest([8, 1.5]);\n      expect(res.count).to.be(2);\n      expect(res.extent[0]).to.be(7.5);\n      res = hitTest([9, 2.5]);\n      expect(res.count).to.be(1);\n      expect(res.extent[0]).to.be(7.5);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"hits lines even if they are dashed","suites":["ol.renderer.Map","#forEachFeatureAtPixel"],"updatePoint":{"line":269,"column":42,"index":9125},"line":269,"code":"    it('hits lines even if they are dashed', function () {\n      map.getView().setResolution(1);\n      let geometry, hit;\n      const feature = new Feature();\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [feature]\n        }),\n        style: new Style({\n          stroke: new Stroke({\n            color: 'black',\n            width: 8,\n            lineDash: [10, 20]\n          })\n        })\n      });\n      map.addLayer(layer);\n      geometry = new LineString([[-20, 0], [20, 0]]);\n      feature.setGeometry(geometry);\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n      geometry = new MultiLineString([[[-20, 0], [20, 0]]]);\n      feature.setGeometry(geometry);\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n      geometry = new Polygon([[[-20, 0], [20, 0], [20, -20], [-20, -20], [-20, 0]]]);\n      feature.setGeometry(geometry);\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n      geometry = new MultiPolygon([[[[-20, 0], [20, 0], [20, -20], [-20, -20], [-20, 0]]]]);\n      feature.setGeometry(geometry);\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n      geometry = new CircleGeometry([0, -40 / Math.PI], 40 / Math.PI);\n      feature.setGeometry(geometry);\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"hits Text stroke, transparent fill and background fill","suites":["ol.renderer.Map","#forEachFeatureAtPixel"],"updatePoint":{"line":347,"column":62,"index":11772},"line":347,"code":"    it('hits Text stroke, transparent fill and background fill', function () {\n      let hit;\n      const geometry = new Point([0, 0]);\n      const feature = new Feature(geometry);\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [feature]\n        })\n      });\n      map.addLayer(layer);\n      layer.setStyle({\n        'text-value': 'X',\n        'text-font': 'bold 100px sans-serif',\n        'text-baseline': 'top',\n        'text-offset-y': -50,\n        'text-stroke-width': 20,\n        'text-stroke-color': 'black',\n        'text-fill-color': null\n      });\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n      layer.setStyle({\n        'text-value': 'X',\n        'text-font': 'bold 100px sans-serif',\n        'text-baseline': 'top',\n        'text-offset-y': -50,\n        'text-stroke-width': 1,\n        'text-stroke-color': 'black',\n        'text-fill-color': null\n      });\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be(undefined);\n      layer.setStyle({\n        'text-value': 'X',\n        'text-font': 'bold 100px sans-serif',\n        'text-baseline': 'top',\n        'text-offset-y': -50,\n        'text-stroke-width': 1,\n        'text-stroke-color': 'black',\n        'text-fill-color': 'transparent'\n      });\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n      layer.setStyle({\n        'text-value': 'X',\n        'text-font': 'bold 100px sans-serif',\n        'text-baseline': 'top',\n        'text-offset-y': -50,\n        'text-stroke-width': 1,\n        'text-stroke-color': 'black',\n        'text-fill-color': null,\n        'text-background-fill-color': 'transparent'\n      });\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"hits line placement Text stroke and transparent fill","suites":["ol.renderer.Map","#forEachFeatureAtPixel"],"updatePoint":{"line":432,"column":60,"index":14411},"line":432,"code":"    it('hits line placement Text stroke and transparent fill', function () {\n      let hit;\n      const geometry = new LineString([[-1e6, 0], [1e6, 0]]);\n      const feature = new Feature(geometry);\n      const layer = new VectorLayer({\n        source: new VectorSource({\n          features: [feature]\n        })\n      });\n      map.addLayer(layer);\n      layer.setStyle({\n        'text-value': 'X',\n        'text-font': 'bold 100px sans-serif',\n        'text-baseline': 'top',\n        'text-offset-y': -50,\n        'text-stroke-width': 20,\n        'text-stroke-color': 'black',\n        'text-fill-color': null,\n        'text-placement': 'line',\n        'text-overflow': true\n      });\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n      layer.setStyle({\n        'text-value': 'X',\n        'text-font': 'bold 100px sans-serif',\n        'text-baseline': 'top',\n        'text-offset-y': -50,\n        'text-stroke-width': 1,\n        'text-stroke-color': 'black',\n        'text-fill-color': null,\n        'text-placement': 'line',\n        'text-overflow': true\n      });\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be(undefined);\n      layer.setStyle({\n        'text-value': 'X',\n        'text-font': 'bold 100px sans-serif',\n        'text-baseline': 'top',\n        'text-offset-y': -50,\n        'text-stroke-width': 1,\n        'text-stroke-color': 'black',\n        'text-fill-color': 'transparent',\n        'text-placement': 'line',\n        'text-overflow': true\n      });\n      map.renderSync();\n      hit = map.forEachFeatureAtPixel([50, 50], (feature, layer, geometry) => ({\n        feature,\n        layer,\n        geometry\n      }));\n      expect(hit).to.be.ok();\n      expect(hit.feature).to.be(feature);\n      expect(hit.layer).to.be(layer);\n      expect(hit.geometry).to.be(geometry);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"prioritizes closer features when no direct hit is found","suites":["ol.renderer.Map","#forEachFeatureAtPixel"],"updatePoint":{"line":503,"column":63,"index":16626},"line":503,"code":"    it('prioritizes closer features when no direct hit is found', function () {\n      map.getView().setResolution(1);\n      map.addLayer(new VectorLayer({\n        style: new Style({\n          image: new Circle({\n            radius: 4,\n            fill: new Fill({\n              color: 'black'\n            })\n          })\n        }),\n        source: new VectorSource({\n          features: [[0, -10], [0, 0], [0, 10], [10, 0]].map(coordinate => new Feature(new Point(coordinate)))\n        })\n      }));\n      map.renderSync();\n      let feature = map.forEachFeatureAtPixel(map.getPixelFromCoordinate([8, 6]), feature => feature, {\n        hitTolerance: 20\n      });\n      expect(feature.getGeometry().getCoordinates()).to.eql([10, 0]);\n      feature = map.forEachFeatureAtPixel(map.getPixelFromCoordinate([6, -8]), feature => feature, {\n        hitTolerance: 20\n      });\n      expect(feature.getGeometry().getCoordinates()).to.eql([0, -10]);\n      feature = map.forEachFeatureAtPixel(map.getPixelFromCoordinate([-6, -4]), feature => feature, {\n        hitTolerance: 20\n      });\n      expect(feature.getGeometry().getCoordinates()).to.eql([0, 0]);\n      feature = map.forEachFeatureAtPixel(map.getPixelFromCoordinate([-6, 7]), feature => feature, {\n        hitTolerance: 20\n      });\n      expect(feature.getGeometry().getCoordinates()).to.eql([0, 10]);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"works with custom projection","suites":["ol.renderer.Map","#forEachFeatureAtCoordinate"],"updatePoint":{"line":579,"column":36,"index":19108},"line":579,"code":"    it('works with custom projection', function () {\n      map.renderSync();\n      const features = map.getFeaturesAtPixel([50, 50]);\n      expect(features.length).to.be(1);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"works with negative image scale","suites":["ol.renderer.Map","#forEachFeatureAtCoordinate"],"updatePoint":{"line":584,"column":39,"index":19293},"line":584,"code":"    it('works with negative image scale', function () {\n      style.getImage().setScale([-1, -1]);\n      map.renderSync();\n      const features = map.getFeaturesAtPixel([50, 50]);\n      expect(features.length).to.be(1);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"works with zero opacity image","suites":["ol.renderer.Map","#forEachFeatureAtCoordinate"],"updatePoint":{"line":590,"column":37,"index":19519},"line":590,"code":"    it('works with zero opacity image', function () {\n      style.getImage().setOpacity(0);\n      map.renderSync();\n      const features = map.getFeaturesAtPixel([50, 50]);\n      expect(features.length).to.be(1);\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"only draws features that intersect the hit detection viewport","suites":["ol.renderer.Map","#forEachFeatureAtCoordinate"],"updatePoint":{"line":596,"column":69,"index":19772},"line":596,"code":"    it('only draws features that intersect the hit detection viewport', function () {\n      const resolution = map.getView().getResolution();\n      source.addFeature(new Feature(new Point([660000 + resolution * 6, 190000])));\n      source.addFeature(new Feature(new Point([660000 - resolution * 12, 190000])));\n      map.renderSync();\n      const spy = sinon.spy(CanvasRenderingContext2D.prototype, 'drawImage');\n      const features = map.getFeaturesAtPixel([50, 44]);\n      expect(features.length).to.be(1);\n      expect(spy.callCount).to.be(2);\n      spy.restore();\n    });","file":"browser/spec/ol/renderer/map.test.js","skipped":false,"dir":"test"},{"name":"does not set multiple listeners","suites":["ol.renderer.vector","#renderFeature","call multiple times"],"updatePoint":{"line":42,"column":41,"index":1793},"line":42,"code":"      it('does not set multiple listeners', function () {\n        let listeners;\n\n        // call #1\n        renderFeature(builderGroup, feature, style, squaredTolerance, listener);\n        expect(iconStyleLoadSpy.calledOnce).to.be.ok();\n        listeners = iconStyle.iconImage_.listeners_['change'];\n        expect(listeners.length).to.eql(1);\n\n        // call #2\n        renderFeature(builderGroup, feature, style, squaredTolerance, listener);\n        expect(iconStyleLoadSpy.calledOnce).to.be.ok();\n        listeners = iconStyle.iconImage_.listeners_['change'];\n        expect(listeners.length).to.eql(1);\n      });","file":"browser/spec/ol/renderer/vector.test.js","skipped":false,"dir":"test"},{"name":"does not render the point","suites":["ol.renderer.vector","#renderFeature","call renderFeature with a loading icon"],"updatePoint":{"line":59,"column":35,"index":2483},"line":59,"code":"      it('does not render the point', function () {\n        feature.setGeometry(new Point([0, 0]));\n        const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\n        const setImageStyleSpy = sinon.spy(imageReplay, 'setImageStyle');\n        const drawPointSpy = sinon.stub(imageReplay, 'drawPoint').callsFake(VOID);\n        renderFeature(builderGroup, feature, style, squaredTolerance, listener);\n        expect(setImageStyleSpy.called).to.be(false);\n        setImageStyleSpy.restore();\n        drawPointSpy.restore();\n      });","file":"browser/spec/ol/renderer/vector.test.js","skipped":false,"dir":"test"},{"name":"does not render the multipoint","suites":["ol.renderer.vector","#renderFeature","call renderFeature with a loading icon"],"updatePoint":{"line":69,"column":40,"index":3039},"line":69,"code":"      it('does not render the multipoint', function () {\n        feature.setGeometry(new MultiPoint([[0, 0], [1, 1]]));\n        const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\n        const setImageStyleSpy = sinon.spy(imageReplay, 'setImageStyle');\n        const drawMultiPointSpy = sinon.stub(imageReplay, 'drawMultiPoint').callsFake(VOID);\n        renderFeature(builderGroup, feature, style, squaredTolerance, listener);\n        expect(setImageStyleSpy.called).to.be(false);\n        setImageStyleSpy.restore();\n        drawMultiPointSpy.restore();\n      });","file":"browser/spec/ol/renderer/vector.test.js","skipped":false,"dir":"test"},{"name":"does render the linestring","suites":["ol.renderer.vector","#renderFeature","call renderFeature with a loading icon"],"updatePoint":{"line":79,"column":36,"index":3621},"line":79,"code":"      it('does render the linestring', function () {\n        feature.setGeometry(new LineString([[0, 0], [1, 1]]));\n        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n        const setFillStrokeStyleSpy = sinon.spy(lineStringReplay, 'setFillStrokeStyle');\n        const drawLineStringSpy = sinon.stub(lineStringReplay, 'drawLineString').callsFake(VOID);\n        renderFeature(builderGroup, feature, style, squaredTolerance, listener);\n        expect(setFillStrokeStyleSpy.called).to.be(true);\n        expect(drawLineStringSpy.called).to.be(true);\n        setFillStrokeStyleSpy.restore();\n        drawLineStringSpy.restore();\n      });","file":"browser/spec/ol/renderer/vector.test.js","skipped":false,"dir":"test"},{"name":"does render the multilinestring","suites":["ol.renderer.vector","#renderFeature","call renderFeature with a loading icon"],"updatePoint":{"line":90,"column":41,"index":4301},"line":90,"code":"      it('does render the multilinestring', function () {\n        feature.setGeometry(new MultiLineString([[[0, 0], [1, 1]]]));\n        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n        const setFillStrokeStyleSpy = sinon.spy(lineStringReplay, 'setFillStrokeStyle');\n        const drawMultiLineStringSpy = sinon.stub(lineStringReplay, 'drawMultiLineString').callsFake(VOID);\n        renderFeature(builderGroup, feature, style, squaredTolerance, listener);\n        expect(setFillStrokeStyleSpy.called).to.be(true);\n        expect(drawMultiLineStringSpy.called).to.be(true);\n        setFillStrokeStyleSpy.restore();\n        drawMultiLineStringSpy.restore();\n      });","file":"browser/spec/ol/renderer/vector.test.js","skipped":false,"dir":"test"},{"name":"does render the polygon","suites":["ol.renderer.vector","#renderFeature","call renderFeature with a loading icon"],"updatePoint":{"line":101,"column":33,"index":5000},"line":101,"code":"      it('does render the polygon', function () {\n        feature.setGeometry(new Polygon([[[0, 0], [1, 1], [1, 0], [0, 0]]]));\n        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n        const setFillStrokeStyleSpy = sinon.spy(polygonReplay, 'setFillStrokeStyle');\n        const drawPolygonSpy = sinon.stub(polygonReplay, 'drawPolygon').callsFake(VOID);\n        renderFeature(builderGroup, feature, style, squaredTolerance, listener);\n        expect(setFillStrokeStyleSpy.called).to.be(true);\n        expect(drawPolygonSpy.called).to.be(true);\n        setFillStrokeStyleSpy.restore();\n        drawPolygonSpy.restore();\n      });","file":"browser/spec/ol/renderer/vector.test.js","skipped":false,"dir":"test"},{"name":"does render the multipolygon","suites":["ol.renderer.vector","#renderFeature","call renderFeature with a loading icon"],"updatePoint":{"line":112,"column":38,"index":5668},"line":112,"code":"      it('does render the multipolygon', function () {\n        feature.setGeometry(new MultiPolygon([[[[0, 0], [1, 1], [1, 0], [0, 0]]]]));\n        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n        const setFillStrokeStyleSpy = sinon.spy(polygonReplay, 'setFillStrokeStyle');\n        const drawMultiPolygonSpy = sinon.stub(polygonReplay, 'drawMultiPolygon').callsFake(VOID);\n        renderFeature(builderGroup, feature, style, squaredTolerance, listener);\n        expect(setFillStrokeStyleSpy.called).to.be(true);\n        expect(drawMultiPolygonSpy.called).to.be(true);\n        setFillStrokeStyleSpy.restore();\n        drawMultiPolygonSpy.restore();\n      });","file":"browser/spec/ol/renderer/vector.test.js","skipped":false,"dir":"test"},{"name":"creates a new instance","suites":["ol/renderer/webgl/Layer","constructor"],"updatePoint":{"line":22,"column":30,"index":999},"line":22,"code":"    it('creates a new instance', function () {\n      const layer = new Layer({});\n      const renderer = new WebGLLayerRenderer(layer);\n      expect(renderer).to.be.a(WebGLLayerRenderer);\n    });","file":"browser/spec/ol/renderer/webgl/Layer.test.js","skipped":false,"dir":"test"},{"name":"allows sequences of WebGL layers to share a canvas","suites":["ol/renderer/webgl/Layer","context sharing"],"updatePoint":{"line":62,"column":58,"index":2167},"line":62,"code":"    it('allows sequences of WebGL layers to share a canvas', () => {\n      const layer1 = getWebGLLayer();\n      const layer2 = getWebGLLayer();\n      const layer3 = getWebGLLayer();\n      const layer4 = getCanvasLayer();\n      const layer5 = getCanvasLayer();\n      const layer6 = getWebGLLayer();\n      const map = new Map({\n        target: target,\n        layers: [layer1, layer2, layer3, layer4, layer5, layer6],\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        })\n      });\n      map.renderSync();\n      const mapId = getUid(map);\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer2, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer3, `map/${mapId}/group/0`);\n      // layer4 and layer5 cannot be grouped\n      expectCacheKeyMatches(layer6, `map/${mapId}/group/1`);\n      dispose(map);\n    });","file":"browser/spec/ol/renderer/webgl/Layer.test.js","skipped":false,"dir":"test"},{"name":"does not group layers with different className","suites":["ol/renderer/webgl/Layer","context sharing"],"updatePoint":{"line":87,"column":54,"index":3105},"line":87,"code":"    it('does not group layers with different className', () => {\n      const layer1 = getWebGLLayer();\n      const layer2 = getWebGLLayer();\n      const layer3 = getWebGLLayer('foo');\n      const layer4 = getWebGLLayer('foo');\n      const layer5 = getWebGLLayer();\n      const map = new Map({\n        target: target,\n        layers: [layer1, layer2, layer3, layer4, layer5],\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        })\n      });\n      map.renderSync();\n      const mapId = getUid(map);\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer2, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer3, `map/${mapId}/group/1`);\n      expectCacheKeyMatches(layer4, `map/${mapId}/group/1`);\n      expectCacheKeyMatches(layer5, `map/${mapId}/group/2`);\n      dispose(map);\n    });","file":"browser/spec/ol/renderer/webgl/Layer.test.js","skipped":false,"dir":"test"},{"name":"collapses groups when a layer is removed","suites":["ol/renderer/webgl/Layer","context sharing"],"updatePoint":{"line":110,"column":48,"index":3954},"line":110,"code":"    it('collapses groups when a layer is removed', () => {\n      const layer1 = getWebGLLayer();\n      const layer2 = getWebGLLayer('foo');\n      const layer3 = getWebGLLayer();\n      const map = new Map({\n        target: target,\n        layers: [layer1, layer2, layer3],\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        })\n      });\n      map.renderSync();\n      const mapId = getUid(map);\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer2, `map/${mapId}/group/1`);\n      expectCacheKeyMatches(layer3, `map/${mapId}/group/2`);\n      map.removeLayer(layer2);\n      map.renderSync();\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/0`);\n      expect(layer2.getRenderer().helper).to.be(undefined);\n      expectCacheKeyMatches(layer3, `map/${mapId}/group/0`);\n      dispose(map);\n    });","file":"browser/spec/ol/renderer/webgl/Layer.test.js","skipped":false,"dir":"test"},{"name":"regroups when layer order changes","suites":["ol/renderer/webgl/Layer","context sharing"],"updatePoint":{"line":134,"column":41,"index":4814},"line":134,"code":"    it('regroups when layer order changes', () => {\n      const layer1 = getWebGLLayer();\n      const layer2 = getWebGLLayer();\n      const layer3 = getCanvasLayer();\n      const layer4 = getWebGLLayer();\n      const map = new Map({\n        target: target,\n        layers: [layer1, layer2, layer3, layer4],\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        })\n      });\n      map.renderSync();\n      const mapId = getUid(map);\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer2, `map/${mapId}/group/0`);\n      // layer3 cannot be grouped\n      expectCacheKeyMatches(layer4, `map/${mapId}/group/1`);\n      map.removeLayer(layer2);\n      map.addLayer(layer2);\n      map.renderSync();\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/0`);\n      // layer3 cannot be grouped\n      expectCacheKeyMatches(layer4, `map/${mapId}/group/1`);\n      expectCacheKeyMatches(layer2, `map/${mapId}/group/1`);\n      dispose(map);\n    });","file":"browser/spec/ol/renderer/webgl/Layer.test.js","skipped":false,"dir":"test"},{"name":"changes groups based on z-index","suites":["ol/renderer/webgl/Layer","context sharing"],"updatePoint":{"line":162,"column":39,"index":5811},"line":162,"code":"    it('changes groups based on z-index', () => {\n      const layer1 = getWebGLLayer();\n      const layer2 = getWebGLLayer('foo');\n      const layer3 = getWebGLLayer();\n      const map = new Map({\n        target: target,\n        layers: [layer1, layer2, layer3],\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        })\n      });\n      map.renderSync();\n      const mapId = getUid(map);\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer2, `map/${mapId}/group/1`);\n      expectCacheKeyMatches(layer3, `map/${mapId}/group/2`);\n      layer1.setZIndex(1);\n      map.renderSync();\n      expectCacheKeyMatches(layer2, `map/${mapId}/group/0`);\n      expectCacheKeyMatches(layer3, `map/${mapId}/group/1`);\n      expectCacheKeyMatches(layer1, `map/${mapId}/group/1`);\n      dispose(map);\n    });","file":"browser/spec/ol/renderer/webgl/Layer.test.js","skipped":false,"dir":"test"},{"name":"creates a new instance","suites":["ol/renderer/webgl/PointsLayer","constructor"],"updatePoint":{"line":74,"column":30,"index":2817},"line":74,"code":"    it('creates a new instance', function () {\n      const layer = new VectorLayer({\n        source: new VectorSource()\n      });\n      const renderer = new WebGLPointsLayerRenderer(layer, {\n        vertexShader: simpleVertexShader,\n        fragmentShader: simpleFragmentShader\n      });\n      expect(renderer).to.be.a(WebGLPointsLayerRenderer);\n      renderer.dispose();\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"calls WebGlHelper#prepareDraw","suites":["ol/renderer/webgl/PointsLayer","#prepareFrame"],"updatePoint":{"line":107,"column":37,"index":3856},"line":107,"code":"    it('calls WebGlHelper#prepareDraw', function () {\n      renderer.prepareFrame(frameState);\n      const spy = sinon.spy(renderer.helper, 'prepareDraw');\n      renderer.prepareFrame(frameState);\n      expect(spy.called).to.be(true);\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"fills up a buffer with 2 triangles per point","suites":["ol/renderer/webgl/PointsLayer","#prepareFrame"],"updatePoint":{"line":113,"column":52,"index":4114},"line":113,"code":"    it('fills up a buffer with 2 triangles per point', function (done) {\n      layer.getSource().addFeature(new Feature({\n        geometry: new Point([10, 20])\n      }));\n      layer.getSource().addFeature(new Feature({\n        geometry: new Point([30, 40])\n      }));\n      renderer.prepareFrame(frameState);\n      const attributePerVertex = 3;\n      renderer.worker_.addEventListener('message', function (event) {\n        if (event.data.type !== WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n          return;\n        }\n        expect(renderer.verticesBuffer_.getArray().length).to.eql(2 * 4 * attributePerVertex);\n        expect(renderer.indicesBuffer_.getArray().length).to.eql(2 * 6);\n        expect(renderer.verticesBuffer_.getArray()[0]).to.eql(10);\n        expect(renderer.verticesBuffer_.getArray()[1]).to.eql(20);\n        expect(renderer.verticesBuffer_.getArray()[4 * attributePerVertex + 0]).to.eql(30);\n        expect(renderer.verticesBuffer_.getArray()[4 * attributePerVertex + 1]).to.eql(40);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"fills up the hit render buffer with 2 triangles per point","suites":["ol/renderer/webgl/PointsLayer","#prepareFrame"],"updatePoint":{"line":135,"column":65,"index":5172},"line":135,"code":"    it('fills up the hit render buffer with 2 triangles per point', function (done) {\n      renderer.dispose();\n      renderer = new WebGLPointsLayerRenderer(layer, {\n        vertexShader: simpleVertexShader,\n        fragmentShader: simpleFragmentShader,\n        hitDetectionEnabled: true\n      });\n      layer.getSource().addFeature(new Feature({\n        geometry: new Point([10, 20])\n      }));\n      layer.getSource().addFeature(new Feature({\n        geometry: new Point([30, 40])\n      }));\n      renderer.prepareFrame(frameState);\n      const attributePerVertex = 8;\n      renderer.worker_.addEventListener('message', function (event) {\n        if (event.data.type !== WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n          return;\n        }\n        if (!renderer.verticesBuffer_.getArray()) {\n          return;\n        }\n        expect(renderer.verticesBuffer_.getArray().length).to.eql(2 * 4 * attributePerVertex);\n        expect(renderer.indicesBuffer_.getArray().length).to.eql(2 * 6);\n        expect(renderer.verticesBuffer_.getArray()[0]).to.eql(10);\n        expect(renderer.verticesBuffer_.getArray()[1]).to.eql(20);\n        expect(renderer.verticesBuffer_.getArray()[4 * attributePerVertex + 0]).to.eql(30);\n        expect(renderer.verticesBuffer_.getArray()[4 * attributePerVertex + 1]).to.eql(40);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"clears the buffers when the features are gone","suites":["ol/renderer/webgl/PointsLayer","#prepareFrame"],"updatePoint":{"line":166,"column":53,"index":6511},"line":166,"code":"    it('clears the buffers when the features are gone', function (done) {\n      const source = layer.getSource();\n      source.addFeature(new Feature({\n        geometry: new Point([10, 20])\n      }));\n      source.removeFeature(source.getFeatures()[0]);\n      source.addFeature(new Feature({\n        geometry: new Point([10, 20])\n      }));\n      renderer.prepareFrame(frameState);\n      renderer.worker_.addEventListener('message', function (event) {\n        if (event.data.type !== WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n          return;\n        }\n        const attributePerVertex = 3;\n        expect(renderer.verticesBuffer_.getArray().length).to.eql(4 * attributePerVertex);\n        expect(renderer.indicesBuffer_.getArray().length).to.eql(6);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"rebuilds the buffers only when not interacting or animating","suites":["ol/renderer/webgl/PointsLayer","#prepareFrame"],"updatePoint":{"line":186,"column":67,"index":7318},"line":186,"code":"    it('rebuilds the buffers only when not interacting or animating', function () {\n      const spy = sinon.spy(renderer, 'rebuildBuffers_');\n      frameState.viewHints[ViewHint.INTERACTING] = 1;\n      frameState.viewHints[ViewHint.ANIMATING] = 0;\n      renderer.prepareFrame(frameState);\n      expect(spy.called).to.be(false);\n      frameState.viewHints[ViewHint.INTERACTING] = 0;\n      frameState.viewHints[ViewHint.ANIMATING] = 1;\n      renderer.prepareFrame(frameState);\n      expect(spy.called).to.be(false);\n      frameState.viewHints[ViewHint.INTERACTING] = 0;\n      frameState.viewHints[ViewHint.ANIMATING] = 0;\n      renderer.prepareFrame(frameState);\n      expect(spy.called).to.be(true);\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"rebuilds the buffers only when the frame extent changed","suites":["ol/renderer/webgl/PointsLayer","#prepareFrame"],"updatePoint":{"line":201,"column":63,"index":8021},"line":201,"code":"    it('rebuilds the buffers only when the frame extent changed', function () {\n      const spy = sinon.spy(renderer, 'rebuildBuffers_');\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(1);\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(1);\n      frameState.extent = [10, 20, 30, 40];\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(2);\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"triggers source loading when the extent changes","suites":["ol/renderer/webgl/PointsLayer","#prepareFrame"],"updatePoint":{"line":211,"column":55,"index":8440},"line":211,"code":"    it('triggers source loading when the extent changes', function () {\n      const spy = sinon.spy(layer.getSource(), 'loadFeatures');\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(1);\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(1);\n      frameState.extent = [10, 20, 30, 40];\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(2);\n      expect(spy.getCall(1).args[0]).to.eql([0, 10, 40, 50]); // renderBuffer is 10\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"triggers source loading when the source revision changes","suites":["ol/renderer/webgl/PointsLayer","#prepareFrame"],"updatePoint":{"line":223,"column":64,"index":8959},"line":223,"code":"    it('triggers source loading when the source revision changes', function () {\n      const spy = sinon.spy(layer.getSource(), 'loadFeatures');\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(1);\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(1);\n      layer.getSource().changed();\n      renderer.prepareFrame(frameState);\n      expect(spy.callCount).to.be(2);\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"correctly hit detects a feature","suites":["ol/renderer/webgl/PointsLayer","#forEachFeatureAtCoordinate"],"updatePoint":{"line":259,"column":39,"index":10064},"line":259,"code":"    it('correctly hit detects a feature', function (done) {\n      const transform = composeTransform(createTransform(), 20, 20, 1, -1, 0, 0, 0);\n      const frameState = Object.assign({}, baseFrameState, {\n        extent: [-20, -20, 20, 20],\n        size: [40, 40],\n        coordinateToPixelTransform: transform,\n        layerStatesArray: [layer.getLayerState()]\n      });\n      renderer.prepareFrame(frameState);\n      renderer.worker_.addEventListener('message', function () {\n        if (!renderer.renderInstructions_) {\n          return;\n        }\n        renderer.prepareFrame(frameState);\n        renderer.renderFrame(frameState);\n        function checkHit(x, y, expected) {\n          let called = false;\n          renderer.forEachFeatureAtCoordinate([x, y], frameState, 0, function (feature) {\n            expect(feature).to.be(expected);\n            called = true;\n          }, null);\n          if (expected) {\n            expect(called).to.be(true);\n          } else {\n            expect(called).to.be(false);\n          }\n        }\n        checkHit(0, 0, feature);\n        checkHit(1, -1, feature);\n        checkHit(-2, 2, feature);\n        checkHit(2, 0, null);\n        checkHit(1, -3, null);\n        checkHit(14, 14, feature2);\n        checkHit(15, 13, feature2);\n        checkHit(12, 16, feature2);\n        checkHit(16, 14, null);\n        checkHit(13, 11, null);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"correctly hit detects with pixelratio != 1","suites":["ol/renderer/webgl/PointsLayer","#forEachFeatureAtCoordinate"],"updatePoint":{"line":299,"column":50,"index":11484},"line":299,"code":"    it('correctly hit detects with pixelratio != 1', function (done) {\n      const transform = composeTransform(createTransform(), 20, 20, 1, -1, 0, 0, 0);\n      const frameState = Object.assign({}, baseFrameState, {\n        pixelRatio: 3,\n        extent: [-20, -20, 20, 20],\n        size: [40, 40],\n        coordinateToPixelTransform: transform,\n        layerStatesArray: [layer.getLayerState()]\n      });\n      let found;\n      const cb = function (feature) {\n        found = feature;\n      };\n      renderer.prepareFrame(frameState);\n      renderer.worker_.addEventListener('message', function () {\n        if (!renderer.renderInstructions_) {\n          return;\n        }\n        renderer.prepareFrame(frameState);\n        renderer.renderFrame(frameState);\n        function checkHit(x, y, expected) {\n          found = null;\n          renderer.forEachFeatureAtCoordinate([x, y], frameState, 0, cb, null);\n          expect(found).to.be(expected);\n        }\n        checkHit(0, 0, feature);\n        checkHit(1, -1, feature);\n        checkHit(-2, 2, feature);\n        checkHit(2, 0, null);\n        checkHit(1, -3, null);\n        checkHit(14, 14, feature2);\n        checkHit(15, 13, feature2);\n        checkHit(12, 16, feature2);\n        checkHit(16, 14, null);\n        checkHit(13, 11, null);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"terminates the worker and calls dispose on the helper","suites":["ol/renderer/webgl/PointsLayer","#disposeInternal"],"updatePoint":{"line":339,"column":61,"index":12873},"line":339,"code":"    it('terminates the worker and calls dispose on the helper', function () {\n      const layer = new VectorLayer({\n        source: new VectorSource()\n      });\n      const renderer = new WebGLPointsLayerRenderer(layer, {\n        vertexShader: simpleVertexShader,\n        fragmentShader: simpleFragmentShader\n      });\n      const frameState = Object.assign({}, baseFrameState, {\n        size: [2, 2],\n        extent: [-100, -100, 100, 100],\n        layerStatesArray: [layer.getLayerState()]\n      });\n      renderer.prepareFrame(frameState);\n      const spyHelper = sinon.spy(renderer.helper, 'disposeInternal');\n      const spyWorker = sinon.spy(renderer.worker_, 'terminate');\n      renderer.dispose();\n      expect(spyHelper.called).to.be(true);\n      expect(spyWorker.called).to.be(true);\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"contains no features initially","suites":["ol/renderer/webgl/PointsLayer","featureCache_"],"updatePoint":{"line":384,"column":38,"index":14281},"line":384,"code":"    it('contains no features initially', function () {\n      const renderer = new WebGLPointsLayerRenderer(layer, {\n        vertexShader: simpleVertexShader,\n        fragmentShader: simpleFragmentShader\n      });\n      expect(renderer.featureCount_).to.be(0);\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"contains the features initially present in the source","suites":["ol/renderer/webgl/PointsLayer","featureCache_"],"updatePoint":{"line":391,"column":61,"index":14572},"line":391,"code":"    it('contains the features initially present in the source', function () {\n      source.addFeatures(features);\n      const renderer = new WebGLPointsLayerRenderer(layer, {\n        vertexShader: simpleVertexShader,\n        fragmentShader: simpleFragmentShader\n      });\n      expect(renderer.featureCount_).to.be(3);\n      expect(getCache(features[0], renderer).feature).to.be(features[0]);\n      expect(getCache(features[0], renderer).geometry).to.be(features[0].getGeometry());\n      expect(getCache(features[0], renderer).properties['test']).to.be(features[0].get('test'));\n      expect(getCache(features[1], renderer).feature).to.be(features[1]);\n      expect(getCache(features[1], renderer).geometry).to.be(features[1].getGeometry());\n      expect(getCache(features[1], renderer).properties['test']).to.be(features[1].get('test'));\n      expect(getCache(features[2], renderer).feature).to.be(features[2]);\n      expect(getCache(features[2], renderer).geometry).to.be(features[2].getGeometry());\n      expect(getCache(features[2], renderer).properties['test']).to.be(features[2].get('test'));\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"contains the features added to the source","suites":["ol/renderer/webgl/PointsLayer","featureCache_"],"updatePoint":{"line":408,"column":49,"index":15667},"line":408,"code":"    it('contains the features added to the source', function () {\n      const renderer = new WebGLPointsLayerRenderer(layer, {\n        vertexShader: simpleVertexShader,\n        fragmentShader: simpleFragmentShader\n      });\n      source.addFeature(features[0]);\n      expect(renderer.featureCount_).to.be(1);\n      source.addFeature(features[1]);\n      expect(renderer.featureCount_).to.be(2);\n      expect(getCache(features[0], renderer).feature).to.be(features[0]);\n      expect(getCache(features[0], renderer).geometry).to.be(features[0].getGeometry());\n      expect(getCache(features[0], renderer).properties['test']).to.be(features[0].get('test'));\n      expect(getCache(features[1], renderer).feature).to.be(features[1]);\n      expect(getCache(features[1], renderer).geometry).to.be(features[1].getGeometry());\n      expect(getCache(features[1], renderer).properties['test']).to.be(features[1].get('test'));\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"does not contain the features removed to the source","suites":["ol/renderer/webgl/PointsLayer","featureCache_"],"updatePoint":{"line":424,"column":59,"index":16599},"line":424,"code":"    it('does not contain the features removed to the source', function () {\n      const renderer = new WebGLPointsLayerRenderer(layer, {\n        vertexShader: simpleVertexShader,\n        fragmentShader: simpleFragmentShader\n      });\n      source.addFeatures(features);\n      expect(renderer.featureCount_).to.be(3);\n      source.removeFeature(features[1]);\n      expect(renderer.featureCount_).to.be(2);\n      expect(getCache(features[0], renderer).feature).to.be(features[0]);\n      expect(getCache(features[0], renderer).geometry).to.be(features[0].getGeometry());\n      expect(getCache(features[0], renderer).properties['test']).to.be(features[0].get('test'));\n      expect(getCache(features[2], renderer).feature).to.be(features[2]);\n      expect(getCache(features[2], renderer).geometry).to.be(features[2].getGeometry());\n      expect(getCache(features[2], renderer).properties['test']).to.be(features[2].get('test'));\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"contains up to date properties and geometry","suites":["ol/renderer/webgl/PointsLayer","featureCache_"],"updatePoint":{"line":440,"column":51,"index":17524},"line":440,"code":"    it('contains up to date properties and geometry', function () {\n      const renderer = new WebGLPointsLayerRenderer(layer, {\n        vertexShader: simpleVertexShader,\n        fragmentShader: simpleFragmentShader\n      });\n      source.addFeatures(features);\n      features[0].set('test', 'updated');\n      features[0].set('added', true);\n      features[0].getGeometry().setCoordinates([10, 20]);\n      expect(renderer.featureCount_).to.be(3);\n      expect(getCache(features[0], renderer).feature).to.be(features[0]);\n      expect(getCache(features[0], renderer).geometry.getCoordinates()).to.eql([10, 20]);\n      expect(getCache(features[0], renderer).properties['test']).to.be(features[0].get('test'));\n      expect(getCache(features[0], renderer).properties['added']).to.be(features[0].get('added'));\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"fires prerender and postrender events","suites":["ol/renderer/webgl/PointsLayer","fires events"],"updatePoint":{"line":508,"column":45,"index":19698},"line":508,"code":"    it('fires prerender and postrender events', function (done) {\n      let prerenderNotified = false;\n      let postrenderNotified = false;\n      layer.once('prerender', evt => {\n        prerenderNotified = true;\n      });\n      layer.once('postrender', evt => {\n        postrenderNotified = true;\n        expect(prerenderNotified).to.be(true);\n        expect(postrenderNotified).to.be(true);\n        done();\n      });\n      renderer.prepareFrame(frameState);\n      renderer.renderFrame(frameState);\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"is completely rendered on rendercomplete","suites":["ol/renderer/webgl/PointsLayer","rendercomplete"],"updatePoint":{"line":553,"column":48,"index":20885},"line":553,"code":"    it('is completely rendered on rendercomplete', function (done) {\n      map.once('rendercomplete', function () {\n        const targetContext = createCanvasContext2D(1, 1);\n        const canvas = document.querySelector('.ol-layer');\n        targetContext.drawImage(canvas, 50, 50, 1, 1, 0, 0, 1, 1);\n        expect(Array.from(targetContext.getImageData(0, 0, 1, 1).data)).to.eql([255, 0, 0, 255]);\n        layer.getSource().addFeature(new Feature(new Point([1900000, 1900000])));\n        layer.once('postrender', function () {\n          expect(layer.getRenderer().ready).to.be(false);\n        });\n        map.once('rendercomplete', function () {\n          const targetContext = createCanvasContext2D(1, 1);\n          const canvas = document.querySelector('.ol-layer');\n          targetContext.drawImage(canvas, 99, 0, 1, 1, 0, 0, 1, 1);\n          expect(Array.from(targetContext.getImageData(0, 0, 1, 1).data)).to.eql([255, 0, 0, 255]);\n          done();\n        });\n      });\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"loadstart and loadend events trigger normally","suites":["ol/renderer/webgl/PointsLayer","layer not visible initially"],"updatePoint":{"line":604,"column":53,"index":22615},"line":604,"code":"    it('loadstart and loadend events trigger normally', function (done) {\n      map.once('loadstart', () => {\n        map.once('loadend', () => {\n          done();\n        });\n      });\n      map.renderSync();\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"allows changing variables","suites":["ol/renderer/webgl/PointsLayer","#updateStyleVariables()"],"updatePoint":{"line":656,"column":33,"index":24057},"line":656,"code":"    it('allows changing variables', function (done) {\n      expect(layer.styleVariables_['r']).to.be(0);\n      expect(getCenterPixelImageData()).to.eql([0, 255, 0, 255]);\n      layer.updateStyleVariables({\n        r: 255,\n        g: 0,\n        b: 255\n      });\n      expect(layer.styleVariables_['r']).to.be(255);\n      map.on('rendercomplete', function (event) {\n        expect(getCenterPixelImageData()).to.eql([255, 0, 255, 255]);\n        done();\n      });\n    });","file":"browser/spec/ol/renderer/webgl/PointsLayer.test.js","skipped":false,"dir":"test"},{"name":"maintains a cache on the renderer instead of the source","suites":["ol/renderer/webgl/TileLayer"],"updatePoint":{"line":68,"column":61,"index":2494},"line":68,"code":"  it('maintains a cache on the renderer instead of the source', function () {\n    expect(tileLayer.getSource().tileCache.highWaterMark).to.be(0.1);\n    expect(renderer.tileRepresentationCache.highWaterMark).to.be(512);\n  });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"#prepareFrame()","suites":["ol/renderer/webgl/TileLayer"],"updatePoint":{"line":72,"column":21,"index":2679},"line":72,"code":"  it('#prepareFrame()', function () {\n    const source = tileLayer.getSource();\n    tileLayer.setSource(null);\n    expect(renderer.prepareFrame(frameState)).to.be(false);\n    tileLayer.setSource(source);\n    expect(renderer.prepareFrame(frameState)).to.be(true);\n    const tileGrid = source.getTileGrid();\n    tileLayer.setExtent(tileGrid.getTileCoordExtent([2, 0, 0]));\n    frameState.resolution = tileGrid.getResolution(2);\n    frameState.extent = tileGrid.getTileCoordExtent([2, 2, 2]);\n    frameState.layerStatesArray = [tileLayer.getLayerState()];\n    expect(renderer.prepareFrame(frameState)).to.be(false);\n  });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"#renderFrame()","suites":["ol/renderer/webgl/TileLayer"],"updatePoint":{"line":85,"column":20,"index":3297},"line":85,"code":"  it('#renderFrame()', function () {\n    const ready = renderer.prepareFrame(frameState);\n    expect(ready).to.be(true);\n    const rendered = renderer.renderFrame(frameState);\n    expect(rendered).to.be.a(HTMLCanvasElement);\n    expect(frameState.tileQueue.getCount()).to.be(1);\n    expect(Object.keys(frameState.wantedTiles).length).to.be(1);\n    expect(frameState.postRenderFunctions.length).to.be(1); // clear source cache (use renderer cache)\n    expect(renderer.tileRepresentationCache.count_).to.be(1);\n  });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"#isDrawableTile_()","suites":["ol/renderer/webgl/TileLayer"],"updatePoint":{"line":95,"column":24,"index":3816},"line":95,"code":"  it('#isDrawableTile_()', function (done) {\n    const tile = tileLayer.getSource().getTile(0, 0, 0);\n    expect(renderer.isDrawableTile_(tile)).to.be(false);\n    tileLayer.getSource().on('tileloadend', () => {\n      expect(renderer.isDrawableTile_(tile)).to.be(true);\n      done();\n    });\n    tile.load();\n    const errorTile = tileLayer.getSource().getTile(1, 0, 1);\n    errorTile.setState(TileState.ERROR);\n    tileLayer.setUseInterimTilesOnError(false);\n    expect(renderer.isDrawableTile_(errorTile)).to.be(true);\n    tileLayer.setUseInterimTilesOnError(true);\n    expect(renderer.isDrawableTile_(errorTile)).to.be(false);\n  });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"enqueues tiles at a single zoom level (preload: 0)","suites":["ol/renderer/webgl/TileLayer","enqueueTiles()"],"updatePoint":{"line":111,"column":58,"index":4522},"line":111,"code":"    it('enqueues tiles at a single zoom level (preload: 0)', () => {\n      renderer.prepareFrame(frameState);\n      const extent = [-1, -1, 1, 1];\n      renderer.enqueueTiles(frameState, extent, 10, newTileRepresentationLookup(), tileLayer.getPreload());\n      const source = tileLayer.getSource();\n      const sourceKey = getUid(source);\n      expect(frameState.wantedTiles[sourceKey]).to.be.an(Object);\n      const wantedTiles = frameState.wantedTiles[sourceKey];\n      const expected = {\n        '/10,511,511': true,\n        '/10,511,512': true,\n        '/10,512,511': true,\n        '/10,512,512': true\n      };\n      expect(wantedTiles).to.eql(expected);\n    });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"enqueues tiles at multiple zoom levels (preload: 2)","suites":["ol/renderer/webgl/TileLayer","enqueueTiles()"],"updatePoint":{"line":127,"column":59,"index":5190},"line":127,"code":"    it('enqueues tiles at multiple zoom levels (preload: 2)', () => {\n      tileLayer.setPreload(2);\n      renderer.prepareFrame(frameState);\n      const extent = [-1, -1, 1, 1];\n      renderer.enqueueTiles(frameState, extent, 10, newTileRepresentationLookup(), tileLayer.getPreload());\n      const source = tileLayer.getSource();\n      const sourceKey = getUid(source);\n      expect(frameState.wantedTiles[sourceKey]).to.be.an(Object);\n      const wantedTiles = frameState.wantedTiles[sourceKey];\n      const expected = {\n        '/10,511,511': true,\n        '/10,511,512': true,\n        '/10,512,511': true,\n        '/10,512,512': true,\n        '/9,255,255': true,\n        '/9,255,256': true,\n        '/9,256,255': true,\n        '/9,256,256': true,\n        '/8,127,127': true,\n        '/8,127,128': true,\n        '/8,128,127': true,\n        '/8,128,128': true\n      };\n      expect(wantedTiles).to.eql(expected);\n    });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"does not go below layer min zoom","suites":["ol/renderer/webgl/TileLayer","enqueueTiles()"],"updatePoint":{"line":152,"column":40,"index":6094},"line":152,"code":"    it('does not go below layer min zoom', () => {\n      tileLayer.setPreload(Infinity);\n      tileLayer.setMinZoom(9);\n      renderer.prepareFrame(frameState);\n      const extent = [-1, -1, 1, 1];\n      renderer.enqueueTiles(frameState, extent, 10, newTileRepresentationLookup(), tileLayer.getPreload());\n      const source = tileLayer.getSource();\n      const sourceKey = getUid(source);\n      expect(frameState.wantedTiles[sourceKey]).to.be.an(Object);\n      const wantedTiles = frameState.wantedTiles[sourceKey];\n      const expected = {\n        '/10,511,511': true,\n        '/10,511,512': true,\n        '/10,512,511': true,\n        '/10,512,512': true,\n        '/9,255,255': true,\n        '/9,255,256': true,\n        '/9,256,255': true,\n        '/9,256,256': true\n      };\n      expect(wantedTiles).to.eql(expected);\n    });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"layer min zoom relates to view zoom levels","suites":["ol/renderer/webgl/TileLayer","enqueueTiles()"],"updatePoint":{"line":174,"column":50,"index":6934},"line":174,"code":"    it('layer min zoom relates to view zoom levels', () => {\n      map.setView(new View({\n        maxResolution: map.getView().getMaxResolution() * 2\n      }));\n      tileLayer.setPreload(Infinity);\n      tileLayer.setMinZoom(9);\n      renderer.prepareFrame(frameState);\n      const extent = [-1, -1, 1, 1];\n      renderer.enqueueTiles(frameState, extent, 10, newTileRepresentationLookup(), tileLayer.getPreload());\n      const source = tileLayer.getSource();\n      const sourceKey = getUid(source);\n      expect(frameState.wantedTiles[sourceKey]).to.be.an(Object);\n      const wantedTiles = frameState.wantedTiles[sourceKey];\n      const expected = {\n        '/10,511,511': true,\n        '/10,511,512': true,\n        '/10,512,511': true,\n        '/10,512,512': true,\n        '/9,255,255': true,\n        '/9,255,256': true,\n        '/9,256,255': true,\n        '/9,256,256': true,\n        '/8,127,127': true,\n        '/8,127,128': true,\n        '/8,128,127': true,\n        '/8,128,128': true\n      };\n      expect(wantedTiles).to.eql(expected);\n    });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"creates a TileTexture instance","suites":["ol/renderer/webgl/TileLayer","#createTileRepresentation"],"updatePoint":{"line":218,"column":38,"index":8409},"line":218,"code":"    it('creates a TileTexture instance', () => {\n      expect(tileRepresentation).to.be.a(TileTexture);\n    });","file":"browser/spec/ol/renderer/webgl/TileLayer.test.js","skipped":false,"dir":"test"},{"name":"creates a new instance","suites":["ol/renderer/webgl/VectorLayer"],"updatePoint":{"line":133,"column":28,"index":3827},"line":133,"code":"  it('creates a new instance', function () {\n    expect(renderer).to.be.a(WebGLVectorLayerRenderer);\n  });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"do not create renderers initially","suites":["ol/renderer/webgl/VectorLayer"],"updatePoint":{"line":136,"column":39,"index":3945},"line":136,"code":"  it('do not create renderers initially', function () {\n    expect(renderer.styleRenderers_).to.eql([]);\n  });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"creates renderers","suites":["ol/renderer/webgl/VectorLayer","#afterHelperCreated"],"updatePoint":{"line":150,"column":25,"index":4373},"line":150,"code":"    it('creates renderers', () => {\n      expect(renderer.styleRenderers_.length).to.be(2);\n      expect(renderer.styleRenderers_[0]).to.be.a(VectorStyleRenderer);\n      expect(renderer.styleRenderers_[1]).to.be.a(VectorStyleRenderer);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"passes the correct styles to renderers","suites":["ol/renderer/webgl/VectorLayer","#afterHelperCreated"],"updatePoint":{"line":155,"column":46,"index":4638},"line":155,"code":"    it('passes the correct styles to renderers', () => {\n      expect(spy.callCount).to.be(2);\n      expect(spy.calledWith(SAMPLE_SHADERS)).to.be(true);\n      expect(spy.calledWith(SAMPLE_STYLE)).to.be(true);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"recreates renderers","suites":["ol/renderer/webgl/VectorLayer","#reset","use a single style"],"updatePoint":{"line":177,"column":29,"index":5294},"line":177,"code":"      it('recreates renderers', () => {\n        expect(renderer.styleRenderers_.length).to.be(1);\n        expect(renderer.styleRenderers_[0]).to.be.a(VectorStyleRenderer);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"passes the correct styles to renderers","suites":["ol/renderer/webgl/VectorLayer","#reset","use a single style"],"updatePoint":{"line":181,"column":48,"index":5495},"line":181,"code":"      it('passes the correct styles to renderers', () => {\n        expect(spy.callCount).to.be(1);\n        expect(spy.calledWith(SAMPLE_STYLE2)).to.be(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"batch contains all features","suites":["ol/renderer/webgl/VectorLayer","source changes","initial state"],"updatePoint":{"line":195,"column":37,"index":5965},"line":195,"code":"      it('batch contains all features', () => {\n        const polygonIds = Object.keys(renderer.batch_.polygonBatch.entries);\n        const lineStringIds = Object.keys(renderer.batch_.lineStringBatch.entries);\n        const pointIds = Object.keys(renderer.batch_.pointBatch.entries);\n        expect(polygonIds).to.eql([getUid(feature2)]);\n        expect(lineStringIds).to.eql([getUid(feature2), getUid(feature3)]);\n        expect(pointIds).to.eql([getUid(feature1)]);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls batch.addFeature","suites":["ol/renderer/webgl/VectorLayer","source changes","on feature added"],"updatePoint":{"line":205,"column":32,"index":6487},"line":205,"code":"      it('calls batch.addFeature', () => {\n        const feature4 = new Feature({\n          id: '04',\n          geometry: new Point([1, 2])\n        });\n        vectorSource.addFeature(feature4);\n        expect(renderer.batch_.addFeature.calledWith(feature4)).to.be(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls batch.changeFeature","suites":["ol/renderer/webgl/VectorLayer","source changes","on feature changed"],"updatePoint":{"line":215,"column":35,"index":6823},"line":215,"code":"      it('calls batch.changeFeature', () => {\n        feature1.set('message', 'hello world');\n        expect(renderer.batch_.changeFeature.calledWith(feature1)).to.be(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls batch.removeFeature","suites":["ol/renderer/webgl/VectorLayer","source changes","on feature deleted"],"updatePoint":{"line":221,"column":35,"index":7058},"line":221,"code":"      it('calls batch.removeFeature', () => {\n        vectorSource.removeFeature(feature2);\n        expect(renderer.batch_.removeFeature.calledWith(feature2)).to.be(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls batch.clear","suites":["ol/renderer/webgl/VectorLayer","source changes","on source clear"],"updatePoint":{"line":227,"column":27,"index":7280},"line":227,"code":"      it('calls batch.clear', () => {\n        vectorSource.clear();\n        expect(renderer.batch_.clear.calledOnce).to.be(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"requires rendering","suites":["ol/renderer/webgl/VectorLayer","#prepareFrame"],"updatePoint":{"line":239,"column":26,"index":7617},"line":239,"code":"    it('requires rendering', () => {\n      expect(toRender).to.eql(true);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"loads the data","suites":["ol/renderer/webgl/VectorLayer","#prepareFrame"],"updatePoint":{"line":242,"column":22,"index":7695},"line":242,"code":"    it('loads the data', () => {\n      expect(vectorSource.loadFeatures.calledOnce).to.eql(true);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"requires rendering","suites":["ol/renderer/webgl/VectorLayer","#prepareFrame","new frame without change"],"updatePoint":{"line":249,"column":28,"index":7945},"line":249,"code":"      it('requires rendering', () => {\n        expect(toRender).to.eql(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"does not load the data again","suites":["ol/renderer/webgl/VectorLayer","#prepareFrame","new frame without change"],"updatePoint":{"line":252,"column":38,"index":8043},"line":252,"code":"      it('does not load the data again', () => {\n        expect(vectorSource.loadFeatures.calledTwice).to.eql(false);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"requires rendering","suites":["ol/renderer/webgl/VectorLayer","#prepareFrame","on source change"],"updatePoint":{"line":261,"column":28,"index":8331},"line":261,"code":"      it('requires rendering', () => {\n        expect(toRender).to.eql(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"loads the data again","suites":["ol/renderer/webgl/VectorLayer","#prepareFrame","on source change"],"updatePoint":{"line":264,"column":30,"index":8421},"line":264,"code":"      it('loads the data again', () => {\n        expect(vectorSource.loadFeatures.calledTwice).to.eql(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"requires rendering","suites":["ol/renderer/webgl/VectorLayer","#prepareFrame","on view change"],"updatePoint":{"line":273,"column":28,"index":8718},"line":273,"code":"      it('requires rendering', () => {\n        expect(toRender).to.eql(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"loads the data again","suites":["ol/renderer/webgl/VectorLayer","#prepareFrame","on view change"],"updatePoint":{"line":276,"column":30,"index":8808},"line":276,"code":"      it('loads the data again', () => {\n        expect(vectorSource.loadFeatures.calledTwice).to.eql(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"sets PROJECTION matrix uniform once for each geometry type","suites":["ol/renderer/webgl/VectorLayer","#renderFrame"],"updatePoint":{"line":313,"column":66,"index":10267},"line":313,"code":"    it('sets PROJECTION matrix uniform once for each geometry type', () => {\n      const calls = renderer.helper.setUniformMatrixValue.getCalls().filter(c => c.args[0] === 'u_projectionMatrix');\n      expect(calls.length).to.be(6);\n      expect(calls[0].args).to.eql(['u_projectionMatrix',\n      // 0.5   0     0     0      combination of:\n      // 0     0.5   0     0        scale( 0.25 * 200px / 2 , 0.25 * 100px / 2 )  ->  multiply by initial resolution & viewport size\n      // 0     0     1     0        translate( 0 , 16 )  ->  add initial view center\n      // -0.32 0.64  0     1        translate( -16 , 0 )  ->  subtract current view center\n      //                            scale( 2 / ( 0.5 * 200px ) , 2 / ( 0.5 * 100px ) )  ->  divide by current resolution & viewport size\n      [0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 1, 0, -0.32, 0.64, 0, 1]]);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls render once for each renderer","suites":["ol/renderer/webgl/VectorLayer","#renderFrame"],"updatePoint":{"line":324,"column":43,"index":11107},"line":324,"code":"    it('calls render once for each renderer', () => {\n      expect(renderer.styleRenderers_[0].render.callCount).to.be(1);\n      expect(renderer.styleRenderers_[1].render.callCount).to.be(1);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls helper.prepareDraw once","suites":["ol/renderer/webgl/VectorLayer","#renderFrame"],"updatePoint":{"line":328,"column":37,"index":11301},"line":328,"code":"    it('calls helper.prepareDraw once', () => {\n      expect(renderer.helper.prepareDraw.calledOnce).to.eql(true);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls helper.finalizeDraw once","suites":["ol/renderer/webgl/VectorLayer","#renderFrame"],"updatePoint":{"line":331,"column":38,"index":11425},"line":331,"code":"    it('calls helper.finalizeDraw once', () => {\n      expect(renderer.helper.finalizeDraw.calledOnce).to.be(true);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"calls render three times for each renderer","suites":["ol/renderer/webgl/VectorLayer","#renderFrame","with horizontal wrapping"],"updatePoint":{"line":348,"column":52,"index":12135},"line":348,"code":"      it('calls render three times for each renderer', () => {\n        expect(renderer.styleRenderers_[0].render.callCount).to.be(3);\n        expect(renderer.styleRenderers_[1].render.callCount).to.be(3);\n      });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"unlistens to source events","suites":["ol/renderer/webgl/VectorLayer","#dispose"],"updatePoint":{"line":359,"column":34,"index":12488},"line":359,"code":"    it('unlistens to source events', () => {\n      expect(vectorSource.removeEventListener.calledWith(VectorEventType.ADDFEATURE)).to.be(true);\n      expect(vectorSource.removeEventListener.calledWith(VectorEventType.CHANGEFEATURE)).to.be(true);\n      expect(vectorSource.removeEventListener.calledWith(VectorEventType.REMOVEFEATURE)).to.be(true);\n      expect(vectorSource.removeEventListener.calledWith(VectorEventType.CLEAR)).to.be(true);\n    });","file":"browser/spec/ol/renderer/webgl/VectorLayer.test.js","skipped":false,"dir":"test"},{"name":"creates a new instance","suites":["ol/renderer/webgl/VectorTileLayer"],"updatePoint":{"line":122,"column":28,"index":3774},"line":122,"code":"  it('creates a new instance', function () {\n    expect(renderer).to.be.a(WebGLVectorTileLayerRenderer);\n  });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"do not create renderers initially","suites":["ol/renderer/webgl/VectorTileLayer"],"updatePoint":{"line":125,"column":39,"index":3896},"line":125,"code":"  it('do not create renderers initially', function () {\n    expect(renderer.styleRenderers_).to.eql([]);\n  });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"creates renderers","suites":["ol/renderer/webgl/VectorTileLayer","#afterHelperCreated"],"updatePoint":{"line":139,"column":25,"index":4324},"line":139,"code":"    it('creates renderers', () => {\n      expect(renderer.styleRenderers_.length).to.be(2);\n      expect(renderer.styleRenderers_[0]).to.be.a(VectorStyleRenderer);\n      expect(renderer.styleRenderers_[1]).to.be.a(VectorStyleRenderer);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"passes the correct styles to renderers","suites":["ol/renderer/webgl/VectorTileLayer","#afterHelperCreated"],"updatePoint":{"line":144,"column":46,"index":4589},"line":144,"code":"    it('passes the correct styles to renderers', () => {\n      expect(spy.callCount).to.be(2);\n      expect(spy.calledWith(SAMPLE_SHADERS)).to.be(true);\n      expect(spy.calledWith(SAMPLE_STYLE)).to.be(true);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"recreates renderers","suites":["ol/renderer/webgl/VectorTileLayer","#reset","use a single style"],"updatePoint":{"line":166,"column":29,"index":5245},"line":166,"code":"      it('recreates renderers', () => {\n        expect(renderer.styleRenderers_.length).to.be(1);\n        expect(renderer.styleRenderers_[0]).to.be.a(VectorStyleRenderer);\n      });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"passes the correct styles to renderers","suites":["ol/renderer/webgl/VectorTileLayer","#reset","use a single style"],"updatePoint":{"line":170,"column":48,"index":5446},"line":170,"code":"      it('passes the correct styles to renderers', () => {\n        expect(spy.callCount).to.be(1);\n        expect(spy.calledWith(SAMPLE_STYLE2)).to.be(true);\n      });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"creates a TileGeometry instance","suites":["ol/renderer/webgl/VectorTileLayer","#createTileRepresentation"],"updatePoint":{"line":190,"column":39,"index":6220},"line":190,"code":"    it('creates a TileGeometry instance', () => {\n      expect(tileRepresentation).to.be.a(TileGeometry);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"triggers a redraw of the layer when the tile representation is ready","suites":["ol/renderer/webgl/VectorTileLayer","#createTileRepresentation"],"updatePoint":{"line":193,"column":76,"index":6371},"line":193,"code":"    it('triggers a redraw of the layer when the tile representation is ready', () => {\n      tileRepresentation.setReady();\n      expect(vectorTileLayer.changed.calledOnce).to.be(true);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"sets GLOBAL_ALPHA uniform three times for each tile and style renderer","suites":["ol/renderer/webgl/VectorTileLayer","#renderFrame"],"updatePoint":{"line":221,"column":78,"index":7644},"line":221,"code":"    it('sets GLOBAL_ALPHA uniform three times for each tile and style renderer', () => {\n      const calls = renderer.helper.setUniformFloatValue.getCalls().filter(c => c.args[0] === 'u_globalAlpha');\n      expect(calls.length).to.be(12);\n      expect(calls[0].args).to.eql(['u_globalAlpha', 1]);\n      expect(calls[6].args).to.eql(['u_globalAlpha', 1]);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"sets RENDER_EXTENT uniform (intersection of tile and view extent) three times for each tile and style renderer","suites":["ol/renderer/webgl/VectorTileLayer","#renderFrame"],"updatePoint":{"line":227,"column":118,"index":8047},"line":227,"code":"    it('sets RENDER_EXTENT uniform (intersection of tile and view extent) three times for each tile and style renderer', () => {\n      const calls = renderer.helper.setUniformFloatVec4.getCalls().filter(c => c.args[0] === 'u_renderExtent');\n      expect(calls.length).to.be(12);\n      expect(calls[0].args).to.eql(['u_renderExtent', [-31, 1, 0, 31]]);\n      expect(calls[6].args).to.eql(['u_renderExtent', [0, 1, 31, 31]]);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"sets PROJECTION matrix uniform three times for each tile and style renderer","suites":["ol/renderer/webgl/VectorTileLayer","#renderFrame"],"updatePoint":{"line":233,"column":83,"index":8444},"line":233,"code":"    it('sets PROJECTION matrix uniform three times for each tile and style renderer', () => {\n      const calls = renderer.helper.setUniformMatrixValue.getCalls().filter(c => c.args[0] === 'u_projectionMatrix');\n      expect(calls.length).to.be(12);\n      expect(calls[0].args).to.eql(['u_projectionMatrix',\n      // 0.04   0     0     0      combination of:\n      // 0      0.08  0     0        translate( 0 , -16 )  ->  subtract view center\n      // 0      0     1     0        translate( -64 , 0 )  ->  add tile origin\n      // -2.56 -1.28  0     1        scale( 2 / ( 0.25 * 200px ) , 2 / ( 0.25 * 100px ) )  ->  divide by resolution and viewport size\n      [0.04, 0, 0, 0, 0, 0.08, 0, 0, 0, 0, 1, 0, -2.56, -1.28, 0, 1]]);\n      expect(calls[6].args).to.eql(['u_projectionMatrix',\n      // 0.04   0     0     0      combination of:\n      // 0      0.08  0     0        translate( 0 , -16 )  ->  subtract view center\n      // 0      0     1     0        translate( 0 , 0 )  ->  add tile origin\n      // 0     -1.28  0     1        scale( 2 / ( 0.25 * 200px ) , 2 / ( 0.25 * 100px ) )  ->  divide by resolution and viewport size\n      [0.04, 0, 0, 0, 0, 0.08, 0, 0, 0, 0, 1, 0, 0, -1.28, 0, 1]]);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"sets SCREEN_TO_WORLD matrix uniform three times for each tile and style renderer","suites":["ol/renderer/webgl/VectorTileLayer","#renderFrame"],"updatePoint":{"line":249,"column":88,"index":9657},"line":249,"code":"    it('sets SCREEN_TO_WORLD matrix uniform three times for each tile and style renderer', () => {\n      const calls = renderer.helper.setUniformMatrixValue.getCalls().filter(c => c.args[0] === 'u_screenToWorldMatrix');\n      expect(calls.length).to.be(12);\n      expect(calls[0].args).to.eql(['u_screenToWorldMatrix',\n      // 25     0     0     0      combination of:\n      // 0      12.5  0     0      * scale( 0.25 * 200px / 2 , 0.25 * 100px / 2 )  ->  view resolution and viewport size\n      // 0      0     1     0      * translate( 0 , 16 )  ->  view center\n      // 0      16    0     1\n      [25, 0, 0, 0, 0, 12.5, 0, 0, 0, 0, 1, 0, 0, 16, 0, 1]]);\n      expect(calls[6].args).to.eql(['u_screenToWorldMatrix', [25, 0, 0, 0, 0, 12.5, 0, 0, 0, 0, 1, 0, 0, 16, 0, 1]]);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"calls render for each tile on each renderer","suites":["ol/renderer/webgl/VectorTileLayer","#renderFrame"],"updatePoint":{"line":260,"column":51,"index":10404},"line":260,"code":"    it('calls render for each tile on each renderer', () => {\n      expect(renderer.styleRenderers_[0].render.callCount).to.be(2);\n      expect(renderer.styleRenderers_[1].render.callCount).to.be(2);\n    });","file":"browser/spec/ol/renderer/webgl/VectorTileLayer.test.js","skipped":false,"dir":"test"},{"name":"accepts a transition option","suites":["ol/reproj/DataTile"],"updatePoint":{"line":52,"column":33,"index":1867},"line":52,"code":"  it('accepts a transition option', () => {\n    const sourceProj = getProjection('EPSG:4326');\n    const targetProj = getProjection('EPSG:3857');\n\n    /**\n     * @type {import(\"../../../../../src/ol/reproj/DataTile.js\").Options}\n     */\n    const options = {\n      sourceProj,\n      sourceTileGrid: getForProjection(sourceProj),\n      targetProj,\n      targetTileGrid: getForProjection(targetProj),\n      tileCoord: [0, 0, 0],\n      pixelRatio: 1,\n      gutter: 0,\n      getTileFunction: (z, x, y, pixelRatio) => null\n    };\n    const withTransition = new ReprojDataTile({\n      ...options,\n      transition: 42\n    });\n    const withoutTransition = new ReprojDataTile({\n      ...options,\n      transition: 0\n    });\n    expect(withTransition.getAlpha('test', 0)).to.be.lessThan(1);\n    expect(withoutTransition.getAlpha('test', 0)).to.be(1);\n  });","file":"browser/spec/ol/reproj/DataTile.test.js","skipped":false,"dir":"test"},{"name":"pixel data reprojected from EPSG:4326 to EPSG:3857 exactly matches original","suites":["ol/reproj/DataTile"],"updatePoint":{"line":80,"column":81,"index":2764},"line":80,"code":"  it('pixel data reprojected from EPSG:4326 to EPSG:3857 exactly matches original', done => {\n    target.style.width = '512px';\n    map = new Map({\n      target: target,\n      view: new View({\n        center: [0, 0],\n        zoom: 1,\n        multiWorld: true,\n        projection: 'EPSG:4326'\n      })\n    });\n    targetR.style.width = '512px';\n    targetR.style.height = '512px';\n    mapR = new Map({\n      target: targetR,\n      view: new View({\n        center: [0, 0],\n        zoom: 1,\n        multiWorld: true\n      })\n    });\n    const source = new DataTileSource({\n      loader: loader,\n      transition: 0,\n      projection: 'EPSG:4326',\n      maxResolution: 180 / 256,\n      maxZoom: 0\n    });\n    const layer = new WebGLTileLayer({\n      source: source\n    });\n    const layerR = new WebGLTileLayer({\n      source: source\n    });\n    map.addLayer(layer);\n    map.once('rendercomplete', () => {\n      mapR.addLayer(layerR);\n      mapR.once('rendercomplete', () => {\n        for (let i = 0; i < 256; ++i) {\n          const pixelR = [i + 0.5, i * 2 + 1];\n          const coordinateR = mapR.getCoordinateFromPixel(pixelR);\n          const dataR = layerR.getData(pixelR);\n          const coordinate = transform(coordinateR, mapR.getView().getProjection(), map.getView().getProjection());\n          const pixel = map.getPixelFromCoordinate(coordinate);\n          const dataA = [];\n          for (let j = -1; j < 2; ++j) {\n            dataA.push(layer.getData([pixel[0], pixel[1] + j]).toString());\n          }\n          expect(dataA).to.contain(dataR.toString());\n        }\n        done();\n      });\n    });\n  });","file":"browser/spec/ol/reproj/DataTile.test.js","skipped":false,"dir":"test"},{"name":"pixel data reprojected from EPSG:3857 to EPSG:4326 exactly matches original","suites":["ol/reproj/DataTile"],"updatePoint":{"line":134,"column":81,"index":4380},"line":134,"code":"  it('pixel data reprojected from EPSG:3857 to EPSG:4326 exactly matches original', done => {\n    map = new Map({\n      target: target,\n      view: new View({\n        center: [0, 0],\n        zoom: 0,\n        multiWorld: true\n      })\n    });\n    targetR.style.width = '512px';\n    mapR = new Map({\n      target: targetR,\n      view: new View({\n        center: [0, 0],\n        zoom: 1,\n        multiWorld: true,\n        projection: 'EPSG:4326'\n      })\n    });\n    const source = new DataTileSource({\n      loader: loader,\n      transition: 0,\n      maxZoom: 0\n    });\n    const layer = new WebGLTileLayer({\n      source: source\n    });\n    const layerR = new WebGLTileLayer({\n      source: source\n    });\n    map.addLayer(layer);\n    map.once('rendercomplete', () => {\n      mapR.addLayer(layerR);\n      mapR.once('rendercomplete', () => {\n        for (let i = 0; i < 256; ++i) {\n          const pixelR = [i + 0.5, i + 0.5];\n          const coordinateR = mapR.getCoordinateFromPixel(pixelR);\n          if (Math.abs(coordinateR[1]) < 84) {\n            const dataR = layerR.getData(pixelR);\n            const coordinate = transform(coordinateR, mapR.getView().getProjection(), map.getView().getProjection());\n            const pixel = map.getPixelFromCoordinate(coordinate);\n            const dataA = [];\n            for (let j = -3; j < 4; ++j) {\n              dataA.push(layer.getData([pixel[0], pixel[1] + j]).toString());\n            }\n            expect(dataA).to.contain(dataR.toString());\n          }\n        }\n        done();\n      });\n    });\n  });","file":"browser/spec/ol/reproj/DataTile.test.js","skipped":false,"dir":"test"},{"name":"pixel data reprojected from EPSG:32636 to EPSG:32632 exactly matches original","suites":["ol/reproj/DataTile"],"updatePoint":{"line":186,"column":83,"index":5938},"line":186,"code":"  it('pixel data reprojected from EPSG:32636 to EPSG:32632 exactly matches original', done => {\n    proj4.defs('EPSG:32632', '+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs');\n    proj4.defs('EPSG:32636', '+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs');\n    register(proj4);\n    getProjection('EPSG:32632').setExtent([-3500000, 0, 4500000, 10000000]);\n    getProjection('EPSG:32636').setExtent([-3500000, 0, 4500000, 10000000]);\n    const extent = [539660, 1835050, 543590, 1838980];\n    const tileGrid = createXYZ({\n      extent: extent,\n      maxZoom: 0\n    });\n    const source = new DataTileSource({\n      loader: loader,\n      transition: 0,\n      tileGrid: tileGrid,\n      projection: 'EPSG:32636'\n    });\n    const layer = new WebGLTileLayer({\n      source: source\n    });\n    const layerR = new WebGLTileLayer({\n      source: source\n    });\n    map = new Map({\n      target: target,\n      layers: [layer],\n      view: new View({\n        projection: 'EPSG:32636'\n      })\n    });\n    mapR = new Map({\n      target: targetR,\n      layers: [layerR],\n      view: new View({\n        projection: 'EPSG:32632'\n      })\n    });\n    map.getView().fit(extent);\n    map.once('rendercomplete', () => {\n      mapR.getView().fit(transformExtent(extent, map.getView().getProjection(), mapR.getView().getProjection()));\n      mapR.once('rendercomplete', () => {\n        for (let i = 1; i < 255; ++i) {\n          let pixel, coordinate, coordinateR, pixelR, dataR, dataA;\n          const emptyData = new Uint8Array([0, 0, 0, 0]);\n          pixel = [i + 0.5, i + 0.5];\n          coordinate = map.getCoordinateFromPixel(pixel);\n          coordinateR = transform(coordinate, map.getView().getProjection(), mapR.getView().getProjection());\n          pixelR = mapR.getPixelFromCoordinate(coordinateR);\n          dataR = layerR.getData(pixelR);\n          dataA = [];\n          for (let i = -1; i < 2; ++i) {\n            for (let j = -1; j < 2; ++j) {\n              const data = layer.getData([pixel[0] + i, pixel[1] + j]);\n              dataA.push(data.toString());\n            }\n          }\n          expect(dataA).to.contain(dataR.toString());\n          pixel = [i + 0.5, 255.5 - i];\n          coordinate = map.getCoordinateFromPixel(pixel);\n          coordinateR = transform(coordinate, map.getView().getProjection(), mapR.getView().getProjection());\n          pixelR = mapR.getPixelFromCoordinate(coordinateR);\n          dataR = layerR.getData(pixelR);\n          dataA = [];\n          for (let i = -1; i < 2; ++i) {\n            for (let j = -1; j < 2; ++j) {\n              const data = layer.getData([pixel[0] + i, pixel[1] + j]);\n              dataA.push(data.toString());\n            }\n          }\n          expect(dataA).to.contain(dataR.toString());\n          pixel = [i + 0.5, 1.5];\n          coordinate = map.getCoordinateFromPixel(pixel);\n          coordinateR = transform(coordinate, map.getView().getProjection(), mapR.getView().getProjection());\n          pixelR = mapR.getPixelFromCoordinate(coordinateR);\n          dataR = layerR.getData(pixelR);\n          dataA = [];\n          for (let i = -1; i < 2; ++i) {\n            for (let j = -1; j < 2; ++j) {\n              const data = layer.getData([pixel[0] + i, pixel[1] + j]);\n              dataA.push(data.toString());\n            }\n          }\n          expect(dataA).to.contain(dataR.toString());\n          pixel = [1.5, i + 0.5];\n          coordinate = map.getCoordinateFromPixel(pixel);\n          coordinateR = transform(coordinate, map.getView().getProjection(), mapR.getView().getProjection());\n          pixelR = mapR.getPixelFromCoordinate(coordinateR);\n          dataR = layerR.getData(pixelR);\n          dataA = [];\n          for (let i = -1; i < 2; ++i) {\n            for (let j = -1; j < 2; ++j) {\n              const data = layer.getData([pixel[0] + i, pixel[1] + j]);\n              dataA.push(data.toString());\n            }\n          }\n          expect(dataA).to.contain(dataR.toString());\n          pixel = [i + 0.5, 255.5];\n          coordinate = map.getCoordinateFromPixel(pixel);\n          coordinateR = transform(coordinate, map.getView().getProjection(), mapR.getView().getProjection());\n          pixelR = mapR.getPixelFromCoordinate(coordinateR);\n          dataR = layerR.getData(pixelR);\n          dataA = [];\n          for (let i = -1; i < 2; ++i) {\n            for (let j = -1; j < 2; ++j) {\n              const data = layer.getData([pixel[0] + i, pixel[1] + j]);\n              dataA.push((data || emptyData).toString());\n            }\n          }\n          expect(dataA).to.contain(dataR.toString());\n        }\n        done();\n      });\n    });\n  });","file":"browser/spec/ol/reproj/DataTile.test.js","skipped":false,"dir":"test"},{"name":"changes state as expected","suites":["ol.reproj.Image"],"updatePoint":{"line":20,"column":31,"index":1247},"line":20,"code":"  it('changes state as expected', function (done) {\n    const image = createImage(1);\n    expect(image.getState()).to.be(0); // IDLE\n    listen(image, 'change', function () {\n      if (image.getState() == 2) {\n        // LOADED\n        done();\n      }\n    });\n    image.load();\n  });","file":"browser/spec/ol/reproj/image.test.js","skipped":false,"dir":"test"},{"name":"returns correct canvas size","suites":["ol.reproj.Image"],"updatePoint":{"line":31,"column":33,"index":1533},"line":31,"code":"  it('returns correct canvas size', function (done) {\n    const image = createImage(1);\n    listen(image, 'change', function () {\n      if (image.getState() == 2) {\n        // LOADED\n        const canvas = image.getImage();\n        expect(canvas.width).to.be(36);\n        expect(canvas.height).to.be(17);\n        done();\n      }\n    });\n    image.load();\n  });","file":"browser/spec/ol/reproj/image.test.js","skipped":false,"dir":"test"},{"name":"respects pixelRatio","suites":["ol.reproj.Image"],"updatePoint":{"line":44,"column":25,"index":1886},"line":44,"code":"  it('respects pixelRatio', function (done) {\n    const image = createImage(2);\n    listen(image, 'change', function () {\n      if (image.getState() == 2) {\n        // LOADED\n        const canvas = image.getImage();\n        expect(canvas.width).to.be(72);\n        expect(canvas.height).to.be(34);\n        done();\n      }\n    });\n    image.load();\n  });","file":"browser/spec/ol/reproj/image.test.js","skipped":false,"dir":"test"},{"name":"has uniform color","suites":["ol.reproj.Image"],"updatePoint":{"line":57,"column":23,"index":2237},"line":57,"code":"  it('has uniform color', function (done) {\n    const image = createTranslucentImage(1);\n    listen(image, 'change', function () {\n      if (image.getState() == 2) {\n        // LOADED\n        const canvas = image.getImage();\n        expect(canvas.width).to.be(36);\n        expect(canvas.height).to.be(17);\n        const pixels = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height).data;\n        for (let i = 0; i < canvas.width * canvas.height * 4; i += 4) {\n          expect(Math.abs(pixels[i + 0] - pixels[0]) + Math.abs(pixels[i + 1] - pixels[1]) + Math.abs(pixels[i + 2] - pixels[2]) + Math.abs(pixels[i + 3] - pixels[3])).to.be.lessThan(5);\n        }\n        done();\n      }\n    });\n    image.load();\n  });","file":"browser/spec/ol/reproj/image.test.js","skipped":false,"dir":"test"},{"name":"is identity for identical projection","suites":["ol.reproj","#calculateSourceResolution"],"updatePoint":{"line":10,"column":44,"index":515},"line":10,"code":"    it('is identity for identical projection', function () {\n      let result;\n      const resolution = 500;\n      result = calculateSourceResolution(proj3857, proj3857, origin, resolution);\n      expect(result).to.be(resolution);\n      result = calculateSourceResolution(proj3857, proj3857, point3857, resolution);\n      expect(result).to.be(resolution);\n      result = calculateSourceResolution(proj4326, proj4326, point4326, resolution);\n      expect(result).to.be(resolution);\n    });","file":"browser/spec/ol/reproj/reproj.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly","suites":["ol.reproj","#calculateSourceResolution"],"updatePoint":{"line":20,"column":28,"index":988},"line":20,"code":"    it('calculates correctly', function () {\n      const resolution4326 = 5;\n      const resolution3857 = calculateSourceResolution(proj3857, proj4326, point4326, resolution4326);\n      expect(resolution3857).not.to.be(resolution4326);\n      expect(resolution3857).to.roughlyEqual(5 * proj4326.getMetersPerUnit(), 1e-4);\n      const result = calculateSourceResolution(proj4326, proj3857, point3857, resolution3857);\n      expect(result).to.be(resolution4326);\n    });","file":"browser/spec/ol/reproj/reproj.test.js","skipped":false,"dir":"test"},{"name":"changes state as expected","suites":["ol.reproj.Tile"],"updatePoint":{"line":30,"column":31,"index":1534},"line":30,"code":"  it('changes state as expected', function (done) {\n    const tile = createTile(1);\n    expect(tile.getState()).to.be(0); // IDLE\n    listen(tile, 'change', function () {\n      if (tile.getState() == 2) {\n        // LOADED\n        done();\n      }\n    });\n    tile.load();\n  });","file":"browser/spec/ol/reproj/tile.test.js","skipped":false,"dir":"test"},{"name":"is empty when outside target tile grid","suites":["ol.reproj.Tile"],"updatePoint":{"line":41,"column":44,"index":1825},"line":41,"code":"  it('is empty when outside target tile grid', function () {\n    const proj4326 = getProjection('EPSG:4326');\n    const proj3857 = getProjection('EPSG:3857');\n    const tile = new ReprojTile(proj3857, createForProjection(proj3857), proj4326, createForProjection(proj4326), [0, -1, 0], null, 1, 0, function () {\n      expect().fail('No tiles should be required');\n    });\n    expect(tile.getState()).to.be(4); // EMPTY\n  });","file":"browser/spec/ol/reproj/tile.test.js","skipped":false,"dir":"test"},{"name":"is empty when outside source tile grid","suites":["ol.reproj.Tile"],"updatePoint":{"line":50,"column":44,"index":2250},"line":50,"code":"  it('is empty when outside source tile grid', function () {\n    const proj4326 = getProjection('EPSG:4326');\n    const proj27700 = getProjection('EPSG:27700');\n    const tile = new ReprojTile(proj27700, createForProjection(proj27700), proj4326, createForProjection(proj4326), [3, 2, -2], null, 1, 0, function () {\n      expect().fail('No tiles should be required');\n    });\n    expect(tile.getState()).to.be(4); // EMPTY\n  });","file":"browser/spec/ol/reproj/tile.test.js","skipped":false,"dir":"test"},{"name":"respects tile size of target tile grid","suites":["ol.reproj.Tile"],"updatePoint":{"line":59,"column":44,"index":2679},"line":59,"code":"  it('respects tile size of target tile grid', function (done) {\n    const tile = createTile(1, [100, 40]);\n    listen(tile, 'change', function () {\n      if (tile.getState() == 2) {\n        // LOADED\n        const canvas = tile.getImage();\n        expect(canvas.width).to.be(100);\n        expect(canvas.height).to.be(40);\n        done();\n      }\n    });\n    tile.load();\n  });","file":"browser/spec/ol/reproj/tile.test.js","skipped":false,"dir":"test"},{"name":"respects pixelRatio","suites":["ol.reproj.Tile"],"updatePoint":{"line":72,"column":25,"index":3038},"line":72,"code":"  it('respects pixelRatio', function (done) {\n    const tile = createTile(3, [60, 20]);\n    listen(tile, 'change', function () {\n      if (tile.getState() == 2) {\n        // LOADED\n        const canvas = tile.getImage();\n        expect(canvas.width).to.be(180);\n        expect(canvas.height).to.be(60);\n        done();\n      }\n    });\n    tile.load();\n  });","file":"browser/spec/ol/reproj/tile.test.js","skipped":false,"dir":"test"},{"name":"is trivial for identity","suites":["ol.reproj.Triangulation","constructor"],"updatePoint":{"line":17,"column":31,"index":840},"line":17,"code":"    it('is trivial for identity', function () {\n      const proj4326 = getProjection('EPSG:4326');\n      const triangulation = new Triangulation(proj4326, proj4326, [20, 20, 30, 30], [-180, -90, 180, 90], 0);\n      expect(triangulation.getTriangles().length).to.be(2);\n    });","file":"browser/spec/ol/reproj/triangulation.test.js","skipped":false,"dir":"test"},{"name":"is empty when outside source extent","suites":["ol.reproj.Triangulation","constructor"],"updatePoint":{"line":22,"column":43,"index":1129},"line":22,"code":"    it('is empty when outside source extent', function () {\n      const proj4326 = getProjection('EPSG:4326');\n      const proj27700 = getProjection('EPSG:27700');\n      const triangulation = new Triangulation(proj27700, proj4326, [0, 0, 10, 10], proj27700.getExtent(), 0);\n      expect(triangulation.getTriangles().length).to.be(0);\n    });","file":"browser/spec/ol/reproj/triangulation.test.js","skipped":false,"dir":"test"},{"name":"can handle null source extent","suites":["ol.reproj.Triangulation","constructor"],"updatePoint":{"line":28,"column":37,"index":1465},"line":28,"code":"    it('can handle null source extent', function () {\n      const proj4326 = getProjection('EPSG:4326');\n      const triangulation = new Triangulation(proj4326, proj4326, [20, 20, 30, 30], null, 0);\n      expect(triangulation.getTriangles().length).to.be(2);\n    });","file":"browser/spec/ol/reproj/triangulation.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToResolution","direction 0"],"updatePoint":{"line":9,"column":43,"index":454},"line":9,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1000, 0)).to.eql(1000);\n        expect(resolutionConstraint(500, 0)).to.eql(500);\n        expect(resolutionConstraint(250, 0)).to.eql(250);\n        expect(resolutionConstraint(100, 0)).to.eql(100);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToResolution","direction 1"],"updatePoint":{"line":17,"column":43,"index":808},"line":17,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1000, 1)).to.eql(1000);\n        expect(resolutionConstraint(500, 1)).to.eql(500);\n        expect(resolutionConstraint(250, 1)).to.eql(250);\n        expect(resolutionConstraint(100, 1)).to.eql(100);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToResolution","direction -1"],"updatePoint":{"line":25,"column":43,"index":1163},"line":25,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1000, -1)).to.eql(1000);\n        expect(resolutionConstraint(500, -1)).to.eql(500);\n        expect(resolutionConstraint(250, -1)).to.eql(250);\n        expect(resolutionConstraint(100, -1)).to.eql(100);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToResolutions Nearest","direction 0"],"updatePoint":{"line":39,"column":43,"index":1725},"line":39,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1050, 0)).to.eql(1000);\n        expect(resolutionConstraint(950, 0)).to.eql(1000);\n        expect(resolutionConstraint(550, 0)).to.eql(500);\n        expect(resolutionConstraint(400, 0)).to.eql(500);\n        expect(resolutionConstraint(300, 0)).to.eql(250);\n        expect(resolutionConstraint(200, 0)).to.eql(250);\n        expect(resolutionConstraint(150, 0)).to.eql(100);\n        expect(resolutionConstraint(50, 0)).to.eql(100);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToResolutions Nearest","direction 1"],"updatePoint":{"line":51,"column":43,"index":2311},"line":51,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1050, 1)).to.eql(1000);\n        expect(resolutionConstraint(950, 1)).to.eql(1000);\n        expect(resolutionConstraint(550, 1)).to.eql(1000);\n        expect(resolutionConstraint(450, 1)).to.eql(500);\n        expect(resolutionConstraint(300, 1)).to.eql(500);\n        expect(resolutionConstraint(200, 1)).to.eql(250);\n        expect(resolutionConstraint(150, 1)).to.eql(250);\n        expect(resolutionConstraint(50, 1)).to.eql(100);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToResolutions Nearest","direction -1"],"updatePoint":{"line":63,"column":43,"index":2899},"line":63,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1050, -1)).to.eql(1000);\n        expect(resolutionConstraint(950, -1)).to.eql(500);\n        expect(resolutionConstraint(550, -1)).to.eql(500);\n        expect(resolutionConstraint(450, -1)).to.eql(250);\n        expect(resolutionConstraint(300, -1)).to.eql(250);\n        expect(resolutionConstraint(200, -1)).to.eql(100);\n        expect(resolutionConstraint(150, -1)).to.eql(100);\n        expect(resolutionConstraint(50, -1)).to.eql(100);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","createSnapToPower","delta 0"],"updatePoint":{"line":81,"column":43,"index":3667},"line":81,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1024, 0)).to.eql(1024);\n        expect(resolutionConstraint(512, 0)).to.eql(512);\n        expect(resolutionConstraint(256, 0)).to.eql(256);\n        expect(resolutionConstraint(128, 0)).to.eql(128);\n        expect(resolutionConstraint(64, 0)).to.eql(64);\n        expect(resolutionConstraint(32, 0)).to.eql(32);\n        expect(resolutionConstraint(16, 0)).to.eql(16);\n        expect(resolutionConstraint(8, 0)).to.eql(8);\n        expect(resolutionConstraint(4, 0)).to.eql(4);\n        expect(resolutionConstraint(2, 0)).to.eql(2);\n        expect(resolutionConstraint(1, 0)).to.eql(1);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","createSnapToPower","direction 1"],"updatePoint":{"line":96,"column":43,"index":4405},"line":96,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1024, 1)).to.eql(1024);\n        expect(resolutionConstraint(512, 1)).to.eql(512);\n        expect(resolutionConstraint(256, 1)).to.eql(256);\n        expect(resolutionConstraint(128, 1)).to.eql(128);\n        expect(resolutionConstraint(64, 1)).to.eql(64);\n        expect(resolutionConstraint(32, 1)).to.eql(32);\n        expect(resolutionConstraint(16, 1)).to.eql(16);\n        expect(resolutionConstraint(8, 1)).to.eql(8);\n        expect(resolutionConstraint(4, 1)).to.eql(4);\n        expect(resolutionConstraint(2, 1)).to.eql(2);\n        expect(resolutionConstraint(1, 1)).to.eql(1);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","createSnapToPower","direction -1"],"updatePoint":{"line":111,"column":43,"index":5144},"line":111,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1024, -1)).to.eql(1024);\n        expect(resolutionConstraint(512, -1)).to.eql(512);\n        expect(resolutionConstraint(256, -1)).to.eql(256);\n        expect(resolutionConstraint(128, -1)).to.eql(128);\n        expect(resolutionConstraint(64, -1)).to.eql(64);\n        expect(resolutionConstraint(32, -1)).to.eql(32);\n        expect(resolutionConstraint(16, -1)).to.eql(16);\n        expect(resolutionConstraint(8, -1)).to.eql(8);\n        expect(resolutionConstraint(4, -1)).to.eql(4);\n        expect(resolutionConstraint(2, -1)).to.eql(2);\n        expect(resolutionConstraint(1, -1)).to.eql(1);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","createSnapToPower Nearest","direction 0"],"updatePoint":{"line":132,"column":43,"index":6080},"line":132,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1050, 0)).to.eql(1024);\n        expect(resolutionConstraint(9050, 0)).to.eql(1024);\n        expect(resolutionConstraint(550, 0)).to.eql(512);\n        expect(resolutionConstraint(450, 0)).to.eql(512);\n        expect(resolutionConstraint(300, 0)).to.eql(256);\n        expect(resolutionConstraint(250, 0)).to.eql(256);\n        expect(resolutionConstraint(150, 0)).to.eql(128);\n        expect(resolutionConstraint(100, 0)).to.eql(128);\n        expect(resolutionConstraint(75, 0)).to.eql(64);\n        expect(resolutionConstraint(50, 0)).to.eql(64);\n        expect(resolutionConstraint(40, 0)).to.eql(32);\n        expect(resolutionConstraint(30, 0)).to.eql(32);\n        expect(resolutionConstraint(20, 0)).to.eql(16);\n        expect(resolutionConstraint(12, 0)).to.eql(16);\n        expect(resolutionConstraint(9, 0)).to.eql(8);\n        expect(resolutionConstraint(7, 0)).to.eql(8);\n        expect(resolutionConstraint(5, 0)).to.eql(4);\n        expect(resolutionConstraint(3.5, 0)).to.eql(4);\n        expect(resolutionConstraint(2.1, 0)).to.eql(2);\n        expect(resolutionConstraint(1.9, 0)).to.eql(2);\n        expect(resolutionConstraint(1.1, 0)).to.eql(1);\n        expect(resolutionConstraint(0.9, 0)).to.eql(1);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","createSnapToPower Nearest","direction 1"],"updatePoint":{"line":158,"column":43,"index":7446},"line":158,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1050, 1)).to.eql(1024);\n        expect(resolutionConstraint(9050, 1)).to.eql(1024);\n        expect(resolutionConstraint(550, 1)).to.eql(1024);\n        expect(resolutionConstraint(450, 1)).to.eql(512);\n        expect(resolutionConstraint(300, 1)).to.eql(512);\n        expect(resolutionConstraint(250, 1)).to.eql(256);\n        expect(resolutionConstraint(150, 1)).to.eql(256);\n        expect(resolutionConstraint(100, 1)).to.eql(128);\n        expect(resolutionConstraint(75, 1)).to.eql(128);\n        expect(resolutionConstraint(50, 1)).to.eql(64);\n        expect(resolutionConstraint(40, 1)).to.eql(64);\n        expect(resolutionConstraint(30, 1)).to.eql(32);\n        expect(resolutionConstraint(20, 1)).to.eql(32);\n        expect(resolutionConstraint(12, 1)).to.eql(16);\n        expect(resolutionConstraint(9, 1)).to.eql(16);\n        expect(resolutionConstraint(7, 1)).to.eql(8);\n        expect(resolutionConstraint(5, 1)).to.eql(8);\n        expect(resolutionConstraint(3.5, 1)).to.eql(4);\n        expect(resolutionConstraint(2.1, 1)).to.eql(4);\n        expect(resolutionConstraint(1.9, 1)).to.eql(2);\n        expect(resolutionConstraint(1.1, 1)).to.eql(2);\n        expect(resolutionConstraint(0.9, 1)).to.eql(1);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","createSnapToPower Nearest","direction -1"],"updatePoint":{"line":184,"column":43,"index":8816},"line":184,"code":"      it('returns expected resolution value', function () {\n        expect(resolutionConstraint(1050, -1)).to.eql(1024);\n        expect(resolutionConstraint(9050, -1)).to.eql(1024);\n        expect(resolutionConstraint(550, -1)).to.eql(512);\n        expect(resolutionConstraint(450, -1)).to.eql(256);\n        expect(resolutionConstraint(300, -1)).to.eql(256);\n        expect(resolutionConstraint(250, -1)).to.eql(128);\n        expect(resolutionConstraint(150, -1)).to.eql(128);\n        expect(resolutionConstraint(100, -1)).to.eql(64);\n        expect(resolutionConstraint(75, -1)).to.eql(64);\n        expect(resolutionConstraint(50, -1)).to.eql(32);\n        expect(resolutionConstraint(40, -1)).to.eql(32);\n        expect(resolutionConstraint(30, -1)).to.eql(16);\n        expect(resolutionConstraint(20, -1)).to.eql(16);\n        expect(resolutionConstraint(12, -1)).to.eql(8);\n        expect(resolutionConstraint(9, -1)).to.eql(8);\n        expect(resolutionConstraint(7, -1)).to.eql(4);\n        expect(resolutionConstraint(5, -1)).to.eql(4);\n        expect(resolutionConstraint(3.5, -1)).to.eql(2);\n        expect(resolutionConstraint(2.1, -1)).to.eql(2);\n        expect(resolutionConstraint(1.9, -1)).to.eql(1);\n        expect(resolutionConstraint(1.1, -1)).to.eql(1);\n        expect(resolutionConstraint(0.9, -1)).to.eql(1);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToPower smooth constraint","snap to power, smooth constraint on"],"updatePoint":{"line":212,"column":43,"index":10290},"line":212,"code":"      it('returns expected resolution value', function () {\n        const resolutionConstraint = createSnapToPower(2, 128, 16, true);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.be.greaterThan(128);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.be.lessThan(150);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.be.greaterThan(128);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.be.lessThan(130);\n        expect(resolutionConstraint(128, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(16, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.be.greaterThan(15);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.be.lessThan(16);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.be.greaterThan(10);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.be.lessThan(16);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToPower smooth constraint","snap to power, smooth constraint off"],"updatePoint":{"line":227,"column":43,"index":11335},"line":227,"code":"      it('returns expected resolution value', function () {\n        const resolutionConstraint = createSnapToPower(2, 128, 16, false);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(128, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(16, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.eql(16);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToPower smooth constraint","snap to resolutions, smooth constraint on"],"updatePoint":{"line":238,"column":43,"index":12010},"line":238,"code":"      it('returns expected resolution value', function () {\n        const resolutionConstraint = createSnapToResolutions([128, 64, 32, 16], true);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.be.greaterThan(128);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.be.lessThan(150);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.be.greaterThan(128);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.be.lessThan(130);\n        expect(resolutionConstraint(128, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(16, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.be.greaterThan(15);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.be.lessThan(16);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.be.greaterThan(10);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.be.lessThan(16);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToPower smooth constraint","snap to resolutions, smooth constraint off"],"updatePoint":{"line":253,"column":43,"index":13074},"line":253,"code":"      it('returns expected resolution value', function () {\n        const resolutionConstraint = createSnapToResolutions([128, 64, 32, 16], false);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(128, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(16, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.eql(16);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToPower smooth constraint","min/max, smooth constraint on"],"updatePoint":{"line":264,"column":43,"index":13750},"line":264,"code":"      it('returns expected resolution value', function () {\n        const resolutionConstraint = createMinMaxResolution(128, 16, true);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.be.greaterThan(128);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.be.lessThan(150);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.be.greaterThan(128);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.be.lessThan(130);\n        expect(resolutionConstraint(128, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(16, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.be.greaterThan(15);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.be.lessThan(16);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.be.greaterThan(10);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.be.lessThan(16);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected resolution value","suites":["ol.resolutionconstraint","SnapToPower smooth constraint","min/max, smooth constraint off"],"updatePoint":{"line":279,"column":43,"index":14791},"line":279,"code":"      it('returns expected resolution value', function () {\n        const resolutionConstraint = createMinMaxResolution(128, 16, false);\n        expect(resolutionConstraint(150, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(130, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(128, 0, [100, 100], true)).to.eql(128);\n        expect(resolutionConstraint(16, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(15, 0, [100, 100], true)).to.eql(16);\n        expect(resolutionConstraint(10, 0, [100, 100], true)).to.eql(16);\n      });","file":"browser/spec/ol/resolutionconstraint.test.js","skipped":false,"dir":"test"},{"name":"returns expected rotation value","suites":["ol.rotationconstraint","SnapToZero"],"updatePoint":{"line":4,"column":39,"index":204},"line":4,"code":"    it('returns expected rotation value', function () {\n      const rotationConstraint = createSnapToZero(0.3);\n      expect(rotationConstraint(0.1)).to.eql(0);\n      expect(rotationConstraint(0.2)).to.eql(0);\n      expect(rotationConstraint(0.3)).to.eql(0);\n      expect(rotationConstraint(0.4)).to.eql(0.4);\n      expect(rotationConstraint(-0.1)).to.eql(0);\n      expect(rotationConstraint(-0.2)).to.eql(0);\n      expect(rotationConstraint(-0.3)).to.eql(0);\n      expect(rotationConstraint(-0.4)).to.eql(-0.4);\n    });","file":"browser/spec/ol/rotationconstraint.test.js","skipped":false,"dir":"test"},{"name":"buffers a size","suites":["ol.size","buffer()"],"updatePoint":{"line":4,"column":22,"index":198},"line":4,"code":"    it('buffers a size', function () {\n      const size = [50, 75];\n      const bufferedSize = bufferSize(size, 20);\n      expect(bufferedSize).to.eql([90, 115]);\n    });","file":"browser/spec/ol/size.test.js","skipped":false,"dir":"test"},{"name":"reuses an existing array","suites":["ol.size","buffer()"],"updatePoint":{"line":9,"column":32,"index":379},"line":9,"code":"    it('reuses an existing array', function () {\n      const reuse = [0, 0];\n      const size = [50, 50];\n      const bufferedSize = bufferSize(size, 20, reuse);\n      expect(bufferedSize).to.equal(reuse);\n    });","file":"browser/spec/ol/size.test.js","skipped":false,"dir":"test"},{"name":"determines if a size has a positive area","suites":["ol.size","hasArea()"],"updatePoint":{"line":17,"column":48,"index":653},"line":17,"code":"    it('determines if a size has a positive area', function () {\n      expect(hasArea([50, 75])).to.equal(true);\n      expect(hasArea([0, 75])).to.equal(false);\n      expect(hasArea([50, 0])).to.equal(false);\n      expect(hasArea([0, 0])).to.equal(false);\n      expect(hasArea([-1, 75])).to.equal(false);\n      expect(hasArea([50, -1])).to.equal(false);\n      expect(hasArea([-1, -1])).to.equal(false);\n    });","file":"browser/spec/ol/size.test.js","skipped":false,"dir":"test"},{"name":"scales a size and rounds the result","suites":["ol.size","scale()"],"updatePoint":{"line":28,"column":43,"index":1101},"line":28,"code":"    it('scales a size and rounds the result', function () {\n      const size = [50, 75];\n      const scaledSize = scaleSize(size, 1.75);\n      expect(scaledSize).to.eql([88, 131]);\n    });","file":"browser/spec/ol/size.test.js","skipped":false,"dir":"test"},{"name":"reuses an existing array","suites":["ol.size","scale()"],"updatePoint":{"line":33,"column":32,"index":1279},"line":33,"code":"    it('reuses an existing array', function () {\n      const reuse = [0, 0];\n      const size = [50, 50];\n      const scaledSize = scaleSize(size, 1.75, reuse);\n      expect(scaledSize).to.equal(reuse);\n    });","file":"browser/spec/ol/size.test.js","skipped":false,"dir":"test"},{"name":"creates a size array from a number","suites":["ol.size","toSize()"],"updatePoint":{"line":41,"column":42,"index":1543},"line":41,"code":"    it('creates a size array from a number', function () {\n      const size = toSize(512);\n      expect(size).to.eql([512, 512]);\n    });","file":"browser/spec/ol/size.test.js","skipped":false,"dir":"test"},{"name":"reuses an existing array","suites":["ol.size","toSize()"],"updatePoint":{"line":45,"column":32,"index":1671},"line":45,"code":"    it('reuses an existing array', function () {\n      const sizeArray = [0, 0];\n      const size = toSize(512, sizeArray);\n      expect(size).to.equal(sizeArray);\n    });","file":"browser/spec/ol/size.test.js","skipped":false,"dir":"test"},{"name":"returns a size array unaltered","suites":["ol.size","toSize()"],"updatePoint":{"line":50,"column":38,"index":1849},"line":50,"code":"    it('returns a size array unaltered', function () {\n      const sizeArray = [512, 256];\n      let size = toSize(sizeArray);\n      expect(size).to.equal(sizeArray);\n      size = toSize(sizeArray, [0, 0]);\n      expect(size).to.equal(sizeArray);\n    });","file":"browser/spec/ol/size.test.js","skipped":false,"dir":"test"},{"name":"returns a function that returns the correct source","suites":["ol/source","sourcesFromTileGrid()"],"updatePoint":{"line":8,"column":58,"index":439},"line":8,"code":"    it('returns a function that returns the correct source', function () {\n      const resolutions = createXYZ({\n        maxZoom: 1\n      }).getResolutions();\n      const tileGrid = new TileGrid({\n        extent: get('EPSG:3857').getExtent(),\n        resolutions: [resolutions[1]],\n        tileSizes: [[256, 512]]\n      });\n      const factory = function (tileCoord) {\n        return new XYZ({\n          url: tileCoord.join('-') + '/{z}/{x}/{y}.png',\n          tileGrid: new TileGrid({\n            resolutions,\n            minZoom: tileCoord[0],\n            maxZoom: tileCoord[0] + 1,\n            extent: tileGrid.getTileCoordExtent(tileCoord),\n            origin: [-20037508.342789244, 20037508.342789244]\n          })\n        });\n      };\n      const getSources = sourcesFromTileGrid(tileGrid, factory);\n      expect(getSources(tileGrid.getExtent(), resolutions[1]).length).to.be(2);\n      expect(getSources([-10000, -10000, -5000, 10000], resolutions[1])[0].getUrls()[0]).to.be('0-0-0/{z}/{x}/{y}.png');\n      expect(getSources([5000, -10000, 10000, 10000], resolutions[1])[0].getUrls()[0]).to.be('0-1-0/{z}/{x}/{y}.png');\n    });","file":"browser/spec/ol/source.test.js","skipped":false,"dir":"test"},{"name":"returns expected string","suites":["ol/source/BingMaps","quadKey()"],"updatePoint":{"line":5,"column":31,"index":256},"line":5,"code":"    it('returns expected string', function () {\n      const tileCoord = [3, 3, 5];\n      const s = quadKey(tileCoord);\n      expect(s).to.eql('213');\n    });","file":"browser/spec/ol/source/BingMaps.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/BingMaps","#getInterpolate()"],"updatePoint":{"line":12,"column":26,"index":461},"line":12,"code":"    it('is true by default', function () {\n      const source = new BingMaps({});\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/BingMaps.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/BingMaps","#getInterpolate()"],"updatePoint":{"line":16,"column":55,"index":631},"line":16,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new BingMaps({\n        interpolate: false\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/BingMaps.test.js","skipped":false,"dir":"test"},{"name":"getImagerySet works correctly","suites":["ol/source/BingMaps","#tileUrlFunction()"],"updatePoint":{"line":46,"column":37,"index":1561},"line":46,"code":"    it('getImagerySet works correctly', function () {\n      expect(source.getImagerySet()).to.equal('AerialWithLabelsOnDemand');\n    });","file":"browser/spec/ol/source/BingMaps.test.js","skipped":false,"dir":"test"},{"name":"getApiKey works correctly","suites":["ol/source/BingMaps","#tileUrlFunction()"],"updatePoint":{"line":49,"column":33,"index":1694},"line":49,"code":"    it('getApiKey works correctly', function () {\n      expect(source.getApiKey()).to.equal('');\n    });","file":"browser/spec/ol/source/BingMaps.test.js","skipped":false,"dir":"test"},{"name":"returns the expected URL","suites":["ol/source/BingMaps","#tileUrlFunction()"],"updatePoint":{"line":52,"column":32,"index":1798},"line":52,"code":"    it('returns the expected URL', function () {\n      const coordinate = [829330.2064098881, 5933916.615134273];\n      const projection = source.getProjection();\n      const regex = /\\/tiles\\/h(.*)\\.jpeg/;\n      let tileUrl;\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 1), 1, projection);\n      expect(tileUrl.match(regex)[1]).to.equal(quadKey([1, 1, 0]));\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 2), 1, projection);\n      expect(tileUrl.match(regex)[1]).to.equal(quadKey([2, 2, 1]));\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 3), 1, projection);\n      expect(tileUrl.match(regex)[1]).to.equal(quadKey([3, 4, 2]));\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 4), 1, projection);\n      expect(tileUrl.match(regex)[1]).to.equal(quadKey([4, 8, 5]));\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 5), 1, projection);\n      expect(tileUrl.match(regex)[1]).to.equal(quadKey([5, 16, 11]));\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 6), 1, projection);\n      expect(tileUrl.match(regex)[1]).to.equal(quadKey([6, 33, 22]));\n      const url = new URL(tileUrl);\n      expect(url.searchParams.get('dpi')).to.equal('d1');\n      expect(url.searchParams.get('device')).to.equal('mobile');\n      expect(url.searchParams.get('n')).to.equal('z');\n    });","file":"browser/spec/ol/source/BingMaps.test.js","skipped":false,"dir":"test"},{"name":"returns a CartoDB source","suites":["ol.source.CartoDB","constructor"],"updatePoint":{"line":5,"column":32,"index":235},"line":5,"code":"    it('returns a CartoDB source', function () {\n      const source = new CartoDB({\n        account: 'documentation',\n        config: {}\n      });\n      expect(source).to.be.a(XYZ);\n      expect(source).to.be.a(CartoDB);\n    });","file":"browser/spec/ol/source/cartodb.test.js","skipped":false,"dir":"test"},{"name":"returns a cluster source","suites":["ol.source.Cluster","constructor"],"updatePoint":{"line":12,"column":32,"index":686},"line":12,"code":"    it('returns a cluster source', function () {\n      const source = new Cluster({\n        projection: getProjection('EPSG:4326'),\n        source: new VectorSource()\n      });\n      expect(source).to.be.a(Source);\n      expect(source).to.be.a(Cluster);\n      expect(source.getDistance()).to.be(20);\n    });","file":"browser/spec/ol/source/cluster.test.js","skipped":false,"dir":"test"},{"name":"clusters a source with point features","suites":["ol.source.Cluster","#loadFeatures"],"updatePoint":{"line":25,"column":45,"index":1141},"line":25,"code":"    it('clusters a source with point features', function () {\n      const source = new Cluster({\n        source: new VectorSource({\n          features: [new Feature(new Point([0, 0])), new Feature(new Point([0, 0]))]\n        })\n      });\n      source.loadFeatures(extent, 1, projection);\n      expect(source.getFeatures().length).to.be(1);\n      expect(source.getFeatures()[0].get('features').length).to.be(2);\n    });","file":"browser/spec/ol/source/cluster.test.js","skipped":false,"dir":"test"},{"name":"clusters a source with point and null features","suites":["ol.source.Cluster","#loadFeatures"],"updatePoint":{"line":35,"column":54,"index":1569},"line":35,"code":"    it('clusters a source with point and null features', function () {\n      const source = new Cluster({\n        source: new VectorSource({\n          features: [new Feature(new Point([0, 0])), new Feature()]\n        })\n      });\n      source.loadFeatures(extent, 1, projection);\n      expect(source.getFeatures().length).to.be(1);\n      expect(source.getFeatures()[0].get('features').length).to.be(1);\n    });","file":"browser/spec/ol/source/cluster.test.js","skipped":false,"dir":"test"},{"name":"clusters with a custom geometryFunction","suites":["ol.source.Cluster","#loadFeatures"],"updatePoint":{"line":45,"column":47,"index":1973},"line":45,"code":"    it('clusters with a custom geometryFunction', function () {\n      const source = new Cluster({\n        geometryFunction: function (feature) {\n          const geom = feature.getGeometry();\n          if (geom.getType() == 'Point') {\n            return geom;\n          }\n          if (geom.getType() == 'Polygon') {\n            return geom.getInteriorPoint();\n          }\n          return null;\n        },\n        source: new VectorSource({\n          features: [new Feature(new Point([0, 0])), new Feature(new LineString([[0, 0], [1, 1]])), new Feature(new Polygon([[[-1, -1], [-1, 1], [1, 1], [1, -1], [-1, -1]]]))]\n        })\n      });\n      source.loadFeatures(extent, 1, projection);\n      expect(source.getFeatures().length).to.be(1);\n      expect(source.getFeatures()[0].get('features').length).to.be(2);\n    });","file":"browser/spec/ol/source/cluster.test.js","skipped":false,"dir":"test"},{"name":"custom cluster feature with additional fields","suites":["ol.source.Cluster","#loadFeatures"],"updatePoint":{"line":65,"column":53,"index":2799},"line":65,"code":"    it('custom cluster feature with additional fields', function () {\n      const feature1 = new Feature(new Point([0, 0]));\n      const feature2 = new Feature(new Point([0, 0]));\n      feature1.set('value', 1);\n      feature2.set('value', 2);\n      const source = new Cluster({\n        source: new VectorSource({\n          features: [feature1, feature2]\n        }),\n        createCluster: function (clusterPoint, features) {\n          let sum = 0;\n          for (const ft of features) {\n            sum += ft.get('value');\n          }\n          return new Feature({\n            geometry: clusterPoint,\n            sum: sum\n          });\n        }\n      });\n      source.loadFeatures(extent, 1, projection);\n      expect(source.getFeatures().length).to.be(1);\n      expect(source.getFeatures()[0].get('sum')).to.be(3);\n    });","file":"browser/spec/ol/source/cluster.test.js","skipped":false,"dir":"test"},{"name":"changes the distance value","suites":["ol.source.Cluster","#setDistance"],"updatePoint":{"line":91,"column":34,"index":3654},"line":91,"code":"    it('changes the distance value', function () {\n      const source = new Cluster({\n        distance: 100,\n        source: new VectorSource()\n      });\n      expect(source.getDistance()).to.be(100);\n      source.setDistance(10);\n      expect(source.getDistance()).to.be(10);\n    });","file":"browser/spec/ol/source/cluster.test.js","skipped":false,"dir":"test"},{"name":"removes the change listener from the old source","suites":["#setSource"],"updatePoint":{"line":103,"column":53,"index":4005},"line":103,"code":"  it('removes the change listener from the old source', function () {\n    const source = new VectorSource();\n    const clusterSource = new Cluster({\n      source: source\n    });\n    expect(source.hasListener(EventType.CHANGE)).to.be(true);\n    clusterSource.setSource(null);\n    expect(source.hasListener(EventType.CHANGE)).to.be(false);\n  });","file":"browser/spec/ol/source/cluster.test.js","skipped":false,"dir":"test"},{"name":"properly removes the previous features","suites":["#setSource"],"updatePoint":{"line":112,"column":44,"index":4340},"line":112,"code":"  it('properly removes the previous features', function () {\n    const source = new Cluster({\n      source: new VectorSource({\n        features: [new Feature(new Point([0, 0]))]\n      })\n    });\n    const projection = getProjection('EPSG:3857');\n    const extent = [-1, -1, 1, 1];\n    source.loadFeatures(extent, 1, projection);\n    expect(source.features.length).to.be(1);\n    source.setSource(null);\n    expect(source.features.length).to.be(0);\n  });","file":"browser/spec/ol/source/cluster.test.js","skipped":false,"dir":"test"},{"name":"gets tiles and fires a tileloadend event","suites":["ol/source/DataTile","#getTile()"],"updatePoint":{"line":25,"column":48,"index":930},"line":25,"code":"    it('gets tiles and fires a tileloadend event', function (done) {\n      const tile = source.getTile(3, 2, 1);\n      expect(tile).to.be.a(DataTile);\n      expect(tile.state).to.be(TileState.IDLE);\n      source.on('tileloadend', () => {\n        expect(tile.state).to.be(TileState.LOADED);\n        // decode tile coordinate from rgb\n        expect(Array.from(tile.getData().slice(0, 3))).to.eql([3, 2, 1]);\n        done();\n      });\n      tile.load();\n    });","file":"browser/spec/ol/source/DataTile.test.js","skipped":false,"dir":"test"},{"name":"returns [256, 256] by default","suites":["ol/source/DataTile","#getTileSize()"],"updatePoint":{"line":39,"column":37,"index":1428},"line":39,"code":"    it('returns [256, 256] by default', function () {\n      const source = new DataTileSource({});\n      expect(source.getTileSize(0)).to.eql([256, 256]);\n    });","file":"browser/spec/ol/source/DataTile.test.js","skipped":false,"dir":"test"},{"name":"respects a tileSize passed to the constructor","suites":["ol/source/DataTile","#getTileSize()"],"updatePoint":{"line":43,"column":53,"index":1607},"line":43,"code":"    it('respects a tileSize passed to the constructor', function () {\n      const size = [1234, 5678];\n      const source = new DataTileSource({\n        tileSize: size\n      });\n      expect(source.getTileSize(0)).to.eql(size);\n    });","file":"browser/spec/ol/source/DataTile.test.js","skipped":false,"dir":"test"},{"name":"picks from an array of sizes passed to setTileSizes()","suites":["ol/source/DataTile","#getTileSize()"],"updatePoint":{"line":50,"column":61,"index":1851},"line":50,"code":"    it('picks from an array of sizes passed to setTileSizes()', function () {\n      const sizes = [[123, 456], [234, 567], [345, 678]];\n      const source = new DataTileSource({});\n      source.setTileSizes(sizes);\n      expect(source.getTileSize(1)).to.eql(sizes[1]);\n    });","file":"browser/spec/ol/source/DataTile.test.js","skipped":false,"dir":"test"},{"name":"is false by default","suites":["ol/source/DataTile","#getInterpolate()"],"updatePoint":{"line":58,"column":27,"index":2146},"line":58,"code":"    it('is false by default', function () {\n      const source = new DataTileSource({\n        loader: () => {}\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/DataTile.test.js","skipped":false,"dir":"test"},{"name":"is true if constructed with interpoate: true","suites":["ol/source/DataTile","#getInterpolate()"],"updatePoint":{"line":64,"column":52,"index":2352},"line":64,"code":"    it('is true if constructed with interpoate: true', function () {\n      const source = new DataTileSource({\n        interpolate: true,\n        loader: () => {}\n      });\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/DataTile.test.js","skipped":false,"dir":"test"},{"name":"sets convertToRGB false by default","suites":["ol/source/GeoTIFF","constructor"],"updatePoint":{"line":5,"column":42,"index":256},"line":5,"code":"    it('sets convertToRGB false by default', function () {\n      const source = new GeoTIFFSource({\n        sources: [{\n          url: 'spec/ol/source/images/0-0-0.tif'\n        }]\n      });\n      expect(source.convertToRGB_).to.be(false);\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"respects the convertToRGB option","suites":["ol/source/GeoTIFF","constructor"],"updatePoint":{"line":13,"column":40,"index":501},"line":13,"code":"    it('respects the convertToRGB option', function () {\n      const source = new GeoTIFFSource({\n        convertToRGB: true,\n        sources: [{\n          url: 'spec/ol/source/images/0-0-0.tif'\n        }]\n      });\n      expect(source.convertToRGB_).to.be(true);\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"accepts auto convertToRGB","suites":["ol/source/GeoTIFF","constructor"],"updatePoint":{"line":22,"column":33,"index":766},"line":22,"code":"    it('accepts auto convertToRGB', function () {\n      const source = new GeoTIFFSource({\n        convertToRGB: 'auto',\n        sources: [{\n          url: 'spec/ol/source/images/0-0-0.tif'\n        }]\n      });\n      expect(source.convertToRGB_).to.be('auto');\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"defaults to wrapX: false","suites":["ol/source/GeoTIFF","constructor"],"updatePoint":{"line":31,"column":32,"index":1034},"line":31,"code":"    it('defaults to wrapX: false', function () {\n      const source = new GeoTIFFSource({\n        sources: [{\n          url: 'spec/ol/source/images/0-0-0.tif'\n        }]\n      });\n      expect(source.getWrapX()).to.be(false);\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"allows wrapX to be set","suites":["ol/source/GeoTIFF","constructor"],"updatePoint":{"line":39,"column":30,"index":1266},"line":39,"code":"    it('allows wrapX to be set', function () {\n      const source = new GeoTIFFSource({\n        wrapX: true,\n        sources: [{\n          url: 'spec/ol/source/images/0-0-0.tif'\n        }]\n      });\n      expect(source.getWrapX()).to.be(true);\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"generates Float32Array data if normalize is set to false","suites":["ol/source/GeoTIFF","constructor"],"updatePoint":{"line":48,"column":64,"index":1552},"line":48,"code":"    it('generates Float32Array data if normalize is set to false', done => {\n      const source = new GeoTIFFSource({\n        normalize: false,\n        sources: [{\n          url: 'spec/ol/source/images/0-0-0.tif'\n        }]\n      });\n      source.on('change', () => {\n        const tile = source.getTile(0, 0, 0);\n        source.on('tileloadend', () => {\n          expect(tile.getState()).to.be(TileState.LOADED);\n          expect(tile.getData()).to.be.a(Float32Array);\n          done();\n        });\n        tile.load();\n      });\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"generates Uint8Array data if normalize is not set to false","suites":["ol/source/GeoTIFF","constructor"],"updatePoint":{"line":65,"column":66,"index":2093},"line":65,"code":"    it('generates Uint8Array data if normalize is not set to false', done => {\n      const source = new GeoTIFFSource({\n        sources: [{\n          url: 'spec/ol/source/images/0-0-0.tif'\n        }]\n      });\n      source.on('change', () => {\n        const tile = source.getTile(0, 0, 0);\n        source.on('tileloadend', () => {\n          expect(tile.getState()).to.be(TileState.LOADED);\n          expect(tile.getData()).to.be.a(Uint8Array);\n          done();\n        });\n        tile.load();\n      });\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"loads from blob","suites":["ol/source/GeoTIFF","constructor"],"updatePoint":{"line":81,"column":23,"index":2563},"line":81,"code":"    it('loads from blob', done => {\n      fetch('spec/ol/source/images/0-0-0.tif').then(response => response.blob()).then(blob => {\n        const source = new GeoTIFFSource({\n          sources: [{\n            blob: blob\n          }]\n        });\n        source.on('change', () => {\n          const tile = source.getTile(0, 0, 0);\n          source.on('tileloadend', () => {\n            expect(tile.getState()).to.be(TileState.LOADED);\n            expect(tile.getData()).to.be.a(Uint8Array);\n            done();\n          });\n          tile.load();\n        });\n      });\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"manages load states","suites":["ol/source/GeoTIFF","loading"],"updatePoint":{"line":110,"column":27,"index":3396},"line":110,"code":"    it('manages load states', function (done) {\n      expect(source.getState()).to.be('loading');\n      source.on('change', () => {\n        expect(source.getState()).to.be('ready');\n        done();\n      });\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"configures itself from source metadata","suites":["ol/source/GeoTIFF","loading"],"updatePoint":{"line":117,"column":46,"index":3631},"line":117,"code":"    it('configures itself from source metadata', function (done) {\n      source.on('change', () => {\n        expect(source.addAlpha_).to.be(true);\n        expect(source.bandCount).to.be(4);\n        expect(source.nodataValues_).to.eql([[0]]);\n        expect(source.getTileGrid().getResolutions().length).to.be(1);\n        expect(source.projection.getCode()).to.be('EPSG:4326');\n        expect(source.projection.getUnits()).to.be('degrees');\n        done();\n      });\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"resolves view properties","suites":["ol/source/GeoTIFF","loading"],"updatePoint":{"line":128,"column":32,"index":4091},"line":128,"code":"    it('resolves view properties', function (done) {\n      source.getView().then(viewOptions => {\n        const projection = viewOptions.projection;\n        expect(projection.getCode()).to.be('EPSG:4326');\n        expect(projection.getUnits()).to.be('degrees');\n        expect(viewOptions.extent).to.eql([-180, -90, 180, 90]);\n        expect(viewOptions.center).to.eql([0, 0]);\n        expect(viewOptions.resolutions).to.eql([1.40625, 0.703125, 0.3515625]);\n        expect(viewOptions.showFullExtent).to.be(true);\n        done();\n      });\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"loads tiles","suites":["ol/source/GeoTIFF","loading"],"updatePoint":{"line":140,"column":19,"index":4626},"line":140,"code":"    it('loads tiles', function (done) {\n      source.on('change', () => {\n        const tile = source.getTile(0, 0, 0);\n        source.on('tileloadend', () => {\n          expect(tile.getState()).to.be(TileState.LOADED);\n          done();\n        });\n        tile.load();\n      });\n    });","file":"browser/spec/ol/source/GeoTIFF.test.js","skipped":false,"dir":"test"},{"name":"requires valid size option","suites":["ol/source/IIIF","constructor"],"updatePoint":{"line":22,"column":34,"index":726},"line":22,"code":"    it('requires valid size option', function () {\n      expect(function () {\n        new IIIF();\n      }).to.throwException();\n      expect(function () {\n        new IIIF({});\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: []\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: 100\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: [100]\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: [null, 100]\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: ['very wide', 100]\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: [0, 100]\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: [100, null]\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: [100, 0]\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: [100, 'not that high']\n        });\n      }).to.throwException();\n      expect(function () {\n        new IIIF({\n          size: [100, 200, 300]\n        });\n      }).to.throwException();\n      let source;\n      expect(function () {\n        source = new IIIF({\n          size: [100, 200]\n        });\n      }).to.not.throwException();\n      expect(source).to.be.a(IIIF);\n      expect(function () {\n        getMinimalSource();\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"uses empty base URL, default quality, jpg format as default","suites":["ol/source/IIIF","constructor"],"updatePoint":{"line":90,"column":67,"index":2398},"line":90,"code":"    it('uses empty base URL, default quality, jpg format as default', function () {\n      const tileUrlFunction = getMinimalSource().getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('full/full/0/default.jpg');\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"uses native as default quality for version 1","suites":["ol/source/IIIF","constructor"],"updatePoint":{"line":94,"column":52,"index":2621},"line":94,"code":"    it('uses native as default quality for version 1', function () {\n      const tileUrlFunction = new IIIF({\n        size: size,\n        version: Versions.VERSION1\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('full/full/0/native.jpg');\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"corrects non empty base URL if trailing slash is missing","suites":["ol/source/IIIF","constructor"],"updatePoint":{"line":101,"column":64,"index":2911},"line":101,"code":"    it('corrects non empty base URL if trailing slash is missing', function () {\n      // missing trailing slash is added\n      let tileUrlFunction = getSource().getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/full/0/default.jpg');\n\n      // existent trailing slash isn't doubled\n      tileUrlFunction = getSource({\n        url: 'http://iiif.test/other-image-id/'\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/other-image-id/full/full/0/default.jpg');\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/IIIF","#getInterpolate()"],"updatePoint":{"line":114,"column":26,"index":3488},"line":114,"code":"    it('is true by default', function () {\n      const source = new IIIF({\n        size: size\n      });\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/IIIF","#getInterpolate()"],"updatePoint":{"line":120,"column":55,"index":3680},"line":120,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new IIIF({\n        size: size,\n        interpolate: false\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"has only one resolution and one tile if no tiles, resolutions, sizes and supported features are given","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":129,"column":109,"index":4005},"line":129,"code":"    it('has only one resolution and one tile if no tiles, resolutions, sizes and supported features are given', function () {\n      let tileUrlFunction = getSource().getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/full/0/default.jpg');\n      expect(tileUrlFunction([-1, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([1, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 1, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 0, 1])).to.be(undefined);\n      tileUrlFunction = getSource({\n        version: Versions.VERSION1\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/full/0/native.jpg');\n      tileUrlFunction = getSource({\n        version: Versions.VERSION3\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/max/0/default.jpg');\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"constructs the same number of resolutions as distinguishable sizes are given","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":145,"column":84,"index":4918},"line":145,"code":"    it('constructs the same number of resolutions as distinguishable sizes are given', function () {\n      let tileUrlFunction = getSource({\n        sizes: [[2000, 1500], [1000, 750], [500, 375]]\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/500,/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/full/1000,/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/full/full/0/default.jpg');\n      expect(tileUrlFunction([3, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([-1, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 1, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 0, 1])).to.be(undefined);\n      expect(tileUrlFunction([1, 1, 0])).to.be(undefined);\n      expect(tileUrlFunction([1, 0, 1])).to.be(undefined);\n      tileUrlFunction = getSource({\n        sizes: [[2000, 1500], [1000, 750], [500, 375]],\n        version: Versions.VERSION3\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/500,375/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/full/1000,750/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/full/max/0/default.jpg');\n      tileUrlFunction = getSource({\n        sizes: [[2000, 1500], [1000, 749], [1000, 750], [500, 375], [500, 374]]\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/500,/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/full/1000,/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/full/full/0/default.jpg');\n      expect(tileUrlFunction([3, 0, 0])).to.be(undefined);\n      tileUrlFunction = getSource({\n        version: Versions.VERSION3,\n        sizes: [[2000, 1500], [1000, 750], [500, 375]]\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/500,375/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/full/1000,750/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/full/max/0/default.jpg');\n      expect(tileUrlFunction([3, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([-1, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 1, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 0, 1])).to.be(undefined);\n      expect(tileUrlFunction([1, 1, 0])).to.be(undefined);\n      expect(tileUrlFunction([1, 0, 1])).to.be(undefined);\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"cannot provide scaled tiles without provided tilesize or supported features","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":186,"column":83,"index":7610},"line":186,"code":"    it('cannot provide scaled tiles without provided tilesize or supported features', function () {\n      const tileUrlFunction = getSource({\n        resolutions: [16, 8, 4, 2, 1]\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/full/0/default.jpg');\n      expect(tileUrlFunction([-1, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([1, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 1, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 0, 1])).to.be(undefined);\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"provides canonical tile URLs for all necessary resolutions if only a tileSize exists","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":196,"column":92,"index":8176},"line":196,"code":"    it('provides canonical tile URLs for all necessary resolutions if only a tileSize exists', function () {\n      let tileUrlFunction = getSource({\n        tileSize: 512\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/500,/0/default.jpg');\n      expect(tileUrlFunction([-1, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 1, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 0, 1])).to.be(undefined);\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/0,0,1024,1024/512,/0/default.jpg');\n      expect(tileUrlFunction([1, 1, 0])).to.be('http://iiif.test/image-id/1024,0,976,1024/488,/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 1])).to.be('http://iiif.test/image-id/0,1024,1024,476/512,/0/default.jpg');\n      expect(tileUrlFunction([1, 1, 1])).to.be('http://iiif.test/image-id/1024,1024,976,476/488,/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/0,0,512,512/512,/0/default.jpg');\n      expect(tileUrlFunction([2, 3, 0])).to.be('http://iiif.test/image-id/1536,0,464,512/464,/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 2])).to.be('http://iiif.test/image-id/0,1024,512,476/512,/0/default.jpg');\n      expect(tileUrlFunction([2, 3, 2])).to.be('http://iiif.test/image-id/1536,1024,464,476/464,/0/default.jpg');\n      expect(tileUrlFunction([3, 0, 0])).to.be(undefined);\n      tileUrlFunction = getSource({\n        tileSize: 512,\n        version: Versions.VERSION3\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/500,375/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/0,0,1024,1024/512,512/0/default.jpg');\n      expect(tileUrlFunction([1, 1, 0])).to.be('http://iiif.test/image-id/1024,0,976,1024/488,512/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 1])).to.be('http://iiif.test/image-id/0,1024,1024,476/512,238/0/default.jpg');\n      expect(tileUrlFunction([1, 1, 1])).to.be('http://iiif.test/image-id/1024,1024,976,476/488,238/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/0,0,512,512/512,512/0/default.jpg');\n      expect(tileUrlFunction([2, 3, 0])).to.be('http://iiif.test/image-id/1536,0,464,512/464,512/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 2])).to.be('http://iiif.test/image-id/0,1024,512,476/512,476/0/default.jpg');\n      expect(tileUrlFunction([2, 3, 2])).to.be('http://iiif.test/image-id/1536,1024,464,476/464,476/0/default.jpg');\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"provides canonical tile URLs for all provided resolutions if a tileSize also exists","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":227,"column":91,"index":10760},"line":227,"code":"    it('provides canonical tile URLs for all provided resolutions if a tileSize also exists', function () {\n      const tileUrlFunction = getSource({\n        tileSize: 512,\n        resolutions: [8, 4, 2, 1]\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/250,/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/full/500,/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/0,0,1024,1024/512,/0/default.jpg');\n      expect(tileUrlFunction([2, 1, 0])).to.be('http://iiif.test/image-id/1024,0,976,1024/488,/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 1])).to.be('http://iiif.test/image-id/0,1024,1024,476/512,/0/default.jpg');\n      expect(tileUrlFunction([2, 1, 1])).to.be('http://iiif.test/image-id/1024,1024,976,476/488,/0/default.jpg');\n      expect(tileUrlFunction([3, 0, 0])).to.be('http://iiif.test/image-id/0,0,512,512/512,/0/default.jpg');\n      expect(tileUrlFunction([3, 3, 0])).to.be('http://iiif.test/image-id/1536,0,464,512/464,/0/default.jpg');\n      expect(tileUrlFunction([3, 0, 2])).to.be('http://iiif.test/image-id/0,1024,512,476/512,/0/default.jpg');\n      expect(tileUrlFunction([3, 3, 2])).to.be('http://iiif.test/image-id/1536,1024,464,476/464,/0/default.jpg');\n      expect(tileUrlFunction([4, 0, 0])).to.be(undefined);\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"supports non square tiles","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":244,"column":33,"index":12101},"line":244,"code":"    it('supports non square tiles', function () {\n      let tileUrlFunction = getSource({\n        tileSize: [1024, 512]\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/500,/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/0,0,2000,1024/1000,/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 1])).to.be('http://iiif.test/image-id/0,1024,2000,476/1000,/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/0,0,1024,512/1024,/0/default.jpg');\n      expect(tileUrlFunction([2, 1, 0])).to.be('http://iiif.test/image-id/1024,0,976,512/976,/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 2])).to.be('http://iiif.test/image-id/0,1024,1024,476/1024,/0/default.jpg');\n      expect(tileUrlFunction([2, 1, 2])).to.be('http://iiif.test/image-id/1024,1024,976,476/976,/0/default.jpg');\n      expect(tileUrlFunction([3, 0, 0])).to.be(undefined);\n      tileUrlFunction = getSource({\n        tileSize: [1024, 512],\n        version: Versions.VERSION3\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/500,375/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/0,0,1024,512/1024,512/0/default.jpg');\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"provides tile URLs with default tile size if sufficient supported features are provided","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":263,"column":95,"index":13504},"line":263,"code":"    it('provides tile URLs with default tile size if sufficient supported features are provided', function () {\n      let tileUrlFunction = getSource({\n        supports: ['regionByPx', 'sizeByW']\n      }).getTileUrlFunction();\n      const maxZoom = Math.ceil(Math.log2(width / DEFAULT_TILE_SIZE));\n      expect(tileUrlFunction([maxZoom, 0, 0])).to.be('http://iiif.test/image-id/0,0,' + DEFAULT_TILE_SIZE + ',' + DEFAULT_TILE_SIZE + '/' + DEFAULT_TILE_SIZE + ',/0/default.jpg');\n      expect(tileUrlFunction([maxZoom + 1, 0, 0])).to.be(undefined);\n      tileUrlFunction = getSource({\n        supports: ['regionByPx', 'sizeByH']\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([maxZoom, 0, 0])).to.be('http://iiif.test/image-id/0,0,' + DEFAULT_TILE_SIZE + ',' + DEFAULT_TILE_SIZE + '/,' + DEFAULT_TILE_SIZE + '/0/default.jpg');\n      expect(tileUrlFunction([maxZoom + 1, 0, 0])).to.be(undefined);\n      tileUrlFunction = getSource({\n        supports: ['regionByPx', 'sizeByWh']\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([maxZoom, 0, 0])).to.be('http://iiif.test/image-id/0,0,' + DEFAULT_TILE_SIZE + ',' + DEFAULT_TILE_SIZE + '/' + DEFAULT_TILE_SIZE + ',' + DEFAULT_TILE_SIZE + '/0/default.jpg');\n      expect(tileUrlFunction([maxZoom + 1, 0, 0])).to.be(undefined);\n      tileUrlFunction = getSource({\n        supports: ['regionByPct', 'sizeByPct']\n      }).getTileUrlFunction();\n      const tileWPct = (DEFAULT_TILE_SIZE / width * 100).toLocaleString('en', {\n          maximumFractionDigits: 10\n        }),\n        tileHPct = (DEFAULT_TILE_SIZE / height * 100).toLocaleString('en', {\n          maximumFractionDigits: 10\n        });\n      expect(tileUrlFunction([maxZoom, 0, 0])).to.be('http://iiif.test/image-id/pct:0,0,' + tileWPct + ',' + tileHPct + '/pct:100/0/default.jpg');\n      expect(tileUrlFunction([maxZoom + 1, 0, 0])).to.be(undefined);\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"prefers canonical tile URLs","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":292,"column":35,"index":15328},"line":292,"code":"    it('prefers canonical tile URLs', function () {\n      let tileUrlFunction = getSource({\n        tileSize: 512,\n        supports: ['regionByPx', 'regionByPct', 'sizeByW', 'sizeByH', 'sizeByWh', 'sizeByPct']\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/0,0,512,512/512,/0/default.jpg');\n      tileUrlFunction = getSource({\n        tileSize: 512,\n        version: Versions.VERSION3,\n        supports: ['regionByPx', 'regionByPct', 'sizeByW', 'sizeByH', 'sizeByWh', 'sizeByPct']\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/0,0,512,512/512,512/0/default.jpg');\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"provides correct tile URLs for percentage URL parameter values","suites":["ol/source/IIIF","tileUrlFunction"],"updatePoint":{"line":305,"column":70,"index":16052},"line":305,"code":"    it('provides correct tile URLs for percentage URL parameter values', function () {\n      const tileUrlFunction = getSource({\n        tileSize: 512,\n        supports: ['regionByPct', 'sizeByPct']\n      }).getTileUrlFunction();\n      expect(tileUrlFunction([0, 0, 0])).to.be('http://iiif.test/image-id/full/pct:25/0/default.jpg');\n      expect(tileUrlFunction([-1, 0, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 1, 0])).to.be(undefined);\n      expect(tileUrlFunction([0, 0, 1])).to.be(undefined);\n      expect(tileUrlFunction([1, 0, 0])).to.be('http://iiif.test/image-id/pct:0,0,51.2,68.2666666667/pct:50/0/default.jpg');\n      expect(tileUrlFunction([1, 1, 0])).to.be('http://iiif.test/image-id/pct:51.2,0,48.8,68.2666666667/pct:50/0/default.jpg');\n      expect(tileUrlFunction([1, 0, 1])).to.be('http://iiif.test/image-id/pct:0,68.2666666667,51.2,31.7333333333/pct:50/0/default.jpg');\n      expect(tileUrlFunction([1, 1, 1])).to.be('http://iiif.test/image-id/pct:51.2,68.2666666667,48.8,31.7333333333/pct:50/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 0])).to.be('http://iiif.test/image-id/pct:0,0,25.6,34.1333333333/pct:100/0/default.jpg');\n      expect(tileUrlFunction([2, 3, 0])).to.be('http://iiif.test/image-id/pct:76.8,0,23.2,34.1333333333/pct:100/0/default.jpg');\n      expect(tileUrlFunction([2, 0, 2])).to.be('http://iiif.test/image-id/pct:0,68.2666666667,25.6,31.7333333333/pct:100/0/default.jpg');\n      expect(tileUrlFunction([2, 3, 2])).to.be('http://iiif.test/image-id/pct:76.8,68.2666666667,23.2,31.7333333333/pct:100/0/default.jpg');\n      expect(tileUrlFunction([3, 0, 0])).to.be(undefined);\n    });","file":"browser/spec/ol/source/IIIF.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/ImageArcGISRest","#getInterpolate()"],"updatePoint":{"line":16,"column":26,"index":581},"line":16,"code":"    it('is true by default', function () {\n      const source = new ImageArcGISRest(options);\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/ImageArcGISRest","#getInterpolate()"],"updatePoint":{"line":20,"column":55,"index":763},"line":20,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new ImageArcGISRest(Object.assign({\n        interpolate: false\n      }, options));\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"returns a image with the expected URL","suites":["ol/source/ImageArcGISRest","#getImage"],"updatePoint":{"line":28,"column":45,"index":1033},"line":28,"code":"    it('returns a image with the expected URL', function () {\n      const source = new ImageArcGISRest(options);\n      const image = source.getImage([3, 2, -7, 1], resolution, pixelRatio, proj3857);\n      const uri = new URL(image.src_);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/MapServer/export');\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('5.5,2.25,-9.5,0.75');\n      expect(queryData.get('FORMAT')).to.be('PNG32');\n      expect(queryData.get('IMAGESR')).to.be('3857');\n      expect(queryData.get('BBOXSR')).to.be('3857');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"returns a non floating point DPI value","suites":["ol/source/ImageArcGISRest","#getImage"],"updatePoint":{"line":42,"column":46,"index":1753},"line":42,"code":"    it('returns a non floating point DPI value', function () {\n      const source = new ImageArcGISRest(options);\n      const image = source.getImage([3, 2, -7, 1.12], resolution, 1.01, proj3857);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('DPI')).to.be('91');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"returns a image with the expected URL for ImageServer","suites":["ol/source/ImageArcGISRest","#getImage"],"updatePoint":{"line":49,"column":61,"index":2102},"line":49,"code":"    it('returns a image with the expected URL for ImageServer', function () {\n      options.url = 'http://example.com/ImageServer';\n      const source = new ImageArcGISRest(options);\n      const image = source.getImage([3, 2, -7, 1], resolution, pixelRatio, proj3857);\n      const uri = new URL(image.src_);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/ImageServer/exportImage');\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('5.5,2.25,-9.5,0.75');\n      expect(queryData.get('FORMAT')).to.be('PNG32');\n      expect(queryData.get('IMAGESR')).to.be('3857');\n      expect(queryData.get('BBOXSR')).to.be('3857');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"allows various parameters to be overridden","suites":["ol/source/ImageArcGISRest","#getImage"],"updatePoint":{"line":64,"column":50,"index":2887},"line":64,"code":"    it('allows various parameters to be overridden', function () {\n      options.params.FORMAT = 'png';\n      options.params.TRANSPARENT = false;\n      const source = new ImageArcGISRest(options);\n      const image = source.getImage([3, 2, -3, 1], resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT')).to.be('png');\n      expect(queryData.get('TRANSPARENT')).to.be('false');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"allows adding rest option","suites":["ol/source/ImageArcGISRest","#getImage"],"updatePoint":{"line":74,"column":33,"index":3355},"line":74,"code":"    it('allows adding rest option', function () {\n      options.params.LAYERS = 'show:1,3,4';\n      const source = new ImageArcGISRest(options);\n      const image = source.getImage([3, 2, -3, 1], resolution, pixelRatio, proj3857);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('LAYERS')).to.be('show:1,3,4');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"add a new param","suites":["ol/source/ImageArcGISRest","#updateParams"],"updatePoint":{"line":84,"column":23,"index":3772},"line":84,"code":"    it('add a new param', function () {\n      const source = new ImageArcGISRest(options);\n      source.updateParams({\n        'TEST': 'value'\n      });\n      const image = source.getImage([3, 2, -7, 1], resolution, pixelRatio, proj3857);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('TEST')).to.be('value');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"updates an existing param","suites":["ol/source/ImageArcGISRest","#updateParams"],"updatePoint":{"line":94,"column":33,"index":4162},"line":94,"code":"    it('updates an existing param', function () {\n      options.params.TEST = 'value';\n      const source = new ImageArcGISRest(options);\n      source.updateParams({\n        'TEST': 'newValue'\n      });\n      const image = source.getImage([3, 2, -7, 1], resolution, pixelRatio, proj3857);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('TEST')).to.be('newValue');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"verify getting a param","suites":["ol/source/ImageArcGISRest","#getParams"],"updatePoint":{"line":107,"column":30,"index":4637},"line":107,"code":"    it('verify getting a param', function () {\n      options.params.TEST = 'value';\n      const source = new ImageArcGISRest(options);\n      const setParams = source.getParams();\n      expect(setParams).to.eql({\n        TEST: 'value'\n      });\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"verify on adding a param","suites":["ol/source/ImageArcGISRest","#getParams"],"updatePoint":{"line":115,"column":32,"index":4891},"line":115,"code":"    it('verify on adding a param', function () {\n      options.params.TEST = 'value';\n      const source = new ImageArcGISRest(options);\n      source.updateParams({\n        'TEST2': 'newValue'\n      });\n      const setParams = source.getParams();\n      expect(setParams).to.eql({\n        TEST: 'value',\n        TEST2: 'newValue'\n      });\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"verify on update a param","suites":["ol/source/ImageArcGISRest","#getParams"],"updatePoint":{"line":127,"column":32,"index":5238},"line":127,"code":"    it('verify on update a param', function () {\n      options.params.TEST = 'value';\n      const source = new ImageArcGISRest(options);\n      source.updateParams({\n        'TEST': 'newValue'\n      });\n      const setParams = source.getParams();\n      expect(setParams).to.eql({\n        TEST: 'newValue'\n      });\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"verify getting url","suites":["ol/source/ImageArcGISRest","#getUrl"],"updatePoint":{"line":140,"column":26,"index":5596},"line":140,"code":"    it('verify getting url', function () {\n      options.url = 'http://test.com/MapServer';\n      const source = new ImageArcGISRest(options);\n      const url = source.getUrl();\n      expect(url).to.eql('http://test.com/MapServer');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"verify setting url when not set yet","suites":["ol/source/ImageArcGISRest","#setUrl"],"updatePoint":{"line":148,"column":43,"index":5896},"line":148,"code":"    it('verify setting url when not set yet', function () {\n      const source = new ImageArcGISRest(options);\n      source.setUrl('http://test.com/MapServer');\n      const url = source.getUrl();\n      expect(url).to.eql('http://test.com/MapServer');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"verify setting url with existing url","suites":["ol/source/ImageArcGISRest","#setUrl"],"updatePoint":{"line":154,"column":44,"index":6156},"line":154,"code":"    it('verify setting url with existing url', function () {\n      options.url = 'http://test.com/MapServer';\n      const source = new ImageArcGISRest(options);\n      source.setUrl('http://test2.com/MapServer');\n      const url = source.getUrl();\n      expect(url).to.eql('http://test2.com/MapServer');\n    });","file":"browser/spec/ol/source/ImageArcGISRest.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/ImageStatic","#getInterpolate()"],"updatePoint":{"line":12,"column":26,"index":519},"line":12,"code":"    it('is true by default', function () {\n      const source = new Static({});\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/ImageStatic.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/ImageStatic","#getInterpolate()"],"updatePoint":{"line":16,"column":55,"index":687},"line":16,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new Static({\n        interpolate: false\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/ImageStatic.test.js","skipped":false,"dir":"test"},{"name":"scales image height to fit imageExtent","suites":["ol/source/ImageStatic","#getImage"],"updatePoint":{"line":24,"column":46,"index":925},"line":24,"code":"    it('scales image height to fit imageExtent', function (done) {\n      const source = new Static({\n        url: 'spec/ol/source/images/12-655-1583.png',\n        imageExtent: [-13629027.891360067, 4539747.983913189, -13619243.951739565, 4559315.863154193],\n        projection: projection\n      });\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      source.on('imageloadend', function (event) {\n        expect(image.getImage().width).to.be(256);\n        expect(image.getImage().height).to.be(512);\n        done();\n      });\n      image.load();\n    });","file":"browser/spec/ol/source/ImageStatic.test.js","skipped":false,"dir":"test"},{"name":"scales image width to fit imageExtent","suites":["ol/source/ImageStatic","#getImage"],"updatePoint":{"line":38,"column":45,"index":1512},"line":38,"code":"    it('scales image width to fit imageExtent', function (done) {\n      const source = new Static({\n        url: 'spec/ol/source/images/12-655-1583.png',\n        imageExtent: [-13629027.891360067, 4539747.983913189, -13609460.012119063, 4549531.923533691],\n        projection: projection\n      });\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      source.on('imageloadend', function (event) {\n        expect(image.getImage().width).to.be(512);\n        expect(image.getImage().height).to.be(256);\n        done();\n      });\n      image.load();\n    });","file":"browser/spec/ol/source/ImageStatic.test.js","skipped":false,"dir":"test"},{"name":"respects imageSize","suites":["ol/source/ImageStatic","#getImage"],"updatePoint":{"line":52,"column":26,"index":2080},"line":52,"code":"    it('respects imageSize', function (done) {\n      const source = new Static({\n        url: 'spec/ol/source/images/12-655-1583.png',\n        imageExtent: [-13629027.891360067, 4539747.983913189, -13619243.951739565, 4559315.863154193],\n        imageSize: [254, 254],\n        projection: projection\n      });\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      source.on('imageloadend', function (event) {\n        expect(image.getImage().width).to.be(254);\n        expect(image.getImage().height).to.be(508);\n        done();\n      });\n      image.load();\n    });","file":"browser/spec/ol/source/ImageStatic.test.js","skipped":false,"dir":"test"},{"name":"triggers image load events","suites":["ol/source/ImageStatic","#getImage"],"updatePoint":{"line":67,"column":34,"index":2687},"line":67,"code":"    it('triggers image load events', function (done) {\n      const source = new Static({\n        url: 'spec/ol/source/images/12-655-1583.png',\n        imageExtent: [-13629027.891360067, 4539747.983913189, -13619243.951739565, 4549531.923533691],\n        projection: projection\n      });\n      const imageloadstart = sinon.spy();\n      const imageloaderror = sinon.spy();\n      source.on('imageloadstart', imageloadstart);\n      source.on('imageloaderror', imageloaderror);\n      source.on('imageloadend', function (event) {\n        expect(imageloadstart.callCount).to.be(1);\n        expect(imageloaderror.callCount).to.be(0);\n        done();\n      });\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      image.load();\n    });","file":"browser/spec/ol/source/ImageStatic.test.js","skipped":false,"dir":"test"},{"name":"returns the expected image URL","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":32,"column":38,"index":1091},"line":32,"code":"    it('returns the expected image URL', function () {\n      [1, 1.5].forEach(function (ratio) {\n        options.ratio = ratio;\n        const source = new ImageWMS(options);\n        const viewExtent = [10, 20, 30.1, 39.9];\n        const viewWidth = getWidth(viewExtent);\n        const viewHeight = getHeight(viewExtent);\n        const image = source.getImage(viewExtent, resolution, pixelRatio, projection);\n        const uri = new URL(image.src_);\n        const queryData = uri.searchParams;\n        const imageWidth = Number(queryData.get('WIDTH'));\n        const imageHeight = Number(queryData.get('HEIGHT'));\n        const bbox = queryData.get('BBOX').split(',').map(Number);\n        const bboxAspectRatio = (bbox[3] - bbox[1]) / (bbox[2] - bbox[0]);\n        const imageAspectRatio = imageWidth / imageHeight;\n        const marginWidth = Math.ceil((ratio - 1) * viewWidth / resolution / 2);\n        const marginHeight = Math.ceil((ratio - 1) * viewHeight / resolution / 2);\n        expect(imageWidth).to.be(Math.round(viewWidth / resolution) + 2 * marginWidth);\n        expect(imageHeight).to.be(Math.round(viewHeight / resolution) + 2 * marginHeight);\n        expect(bboxAspectRatio).to.roughlyEqual(imageAspectRatio, 1e-12);\n      });\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"uses correct WIDTH and HEIGHT for HiDPI devices","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":54,"column":55,"index":2357},"line":54,"code":"    it('uses correct WIDTH and HEIGHT for HiDPI devices', function () {\n      pixelRatio = 2;\n      options.serverType = 'geoserver';\n      const source = new ImageWMS(options);\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      const width = Number(queryData.get('WIDTH'));\n      const height = Number(queryData.get('HEIGHT'));\n      expect(width).to.be(400);\n      expect(height).to.be(400);\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"requests integer WIDTH and HEIGHT","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":66,"column":41,"index":2862},"line":66,"code":"    it('requests integer WIDTH and HEIGHT', function () {\n      options.ratio = 1.5;\n      const source = new ImageWMS(options);\n      const image = source.getImage([10, 20, 30.1, 39.9], resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      const width = parseFloat(queryData.get('WIDTH'));\n      const height = parseFloat(queryData.get('HEIGHT'));\n      expect(width).to.be(Math.round(width));\n      expect(height).to.be(Math.round(height));\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"does not request extra pixels due to floating point issues","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":77,"column":66,"index":3408},"line":77,"code":"    it('does not request extra pixels due to floating point issues', function () {\n      const source = new ImageWMS({\n        params: {\n          LAYERS: 'layer'\n        },\n        url: 'http://example.com/wms',\n        ratio: 1\n      });\n      const mapSize = [1110, 670];\n      const rotation = 0;\n      const resolution = 354.64216525539024;\n      const center = [1224885.7248147277, 6681822.177576577];\n      const extent = getForViewAndSize(center, resolution, rotation, mapSize);\n      const projection = getProjection('EPSG:3857');\n      const image = source.getImage(extent, resolution, 1, projection);\n      const params = new URL(image.src_).searchParams;\n      const imageWidth = Number(params.get('WIDTH'));\n      const imageHeight = Number(params.get('HEIGHT'));\n      expect(imageWidth).to.be(mapSize[0]);\n      expect(imageHeight).to.be(mapSize[1]);\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"sets WIDTH and HEIGHT to match the aspect ratio of BBOX","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":98,"column":63,"index":4279},"line":98,"code":"    it('sets WIDTH and HEIGHT to match the aspect ratio of BBOX', function () {\n      const source = new ImageWMS(options);\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('20,10,40,30');\n      expect(queryData.get('CRS')).to.be('EPSG:4326');\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('HEIGHT')).to.be('200');\n      expect(queryData.get('LAYERS')).to.be('layer');\n      expect(queryData.get('REQUEST')).to.be('GetMap');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('SRS')).to.be(null);\n      expect(queryData.get('STYLES')).to.be('');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('WIDTH')).to.be('200');\n      expect(uri.hash.replace('#', '')).to.be.empty();\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"sets the SRS query value instead of CRS if version < 1.3","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":120,"column":64,"index":5410},"line":120,"code":"    it('sets the SRS query value instead of CRS if version < 1.3', function () {\n      options.params.VERSION = '1.2';\n      const source = new ImageWMS(options);\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('CRS')).to.be(null);\n      expect(queryData.get('SRS')).to.be('EPSG:4326');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"allows various parameters to be overridden","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":129,"column":50,"index":5832},"line":129,"code":"    it('allows various parameters to be overridden', function () {\n      options.params.FORMAT = 'image/jpeg';\n      options.params.TRANSPARENT = false;\n      const source = new ImageWMS(options);\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT')).to.be('image/jpeg');\n      expect(queryData.get('TRANSPARENT')).to.be('false');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"does not add a STYLES= option if one is specified","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":139,"column":57,"index":6324},"line":139,"code":"    it('does not add a STYLES= option if one is specified', function () {\n      options.params.STYLES = 'foo';\n      const source = new ImageWMS(options);\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('STYLES')).to.be('foo');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"changes the BBOX order for EN axis orientations","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":147,"column":55,"index":6699},"line":147,"code":"    it('changes the BBOX order for EN axis orientations', function () {\n      const source = new ImageWMS(options);\n      projection = getProjection('CRS:84');\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('10,20,30,40');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"uses EN BBOX order if version < 1.3","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":155,"column":43,"index":7075},"line":155,"code":"    it('uses EN BBOX order if version < 1.3', function () {\n      options.params.VERSION = '1.1.0';\n      const source = new ImageWMS(options);\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('10,20,30,40');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"sets MAP_RESOLUTION when the server is MapServer","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":163,"column":56,"index":7460},"line":163,"code":"    it('sets MAP_RESOLUTION when the server is MapServer', function () {\n      options.serverType = 'mapserver';\n      const source = new ImageWMS(options);\n      pixelRatio = 2;\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('MAP_RESOLUTION')).to.be('180');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"sets FORMAT_OPTIONS when the server is GeoServer","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":172,"column":56,"index":7869},"line":172,"code":"    it('sets FORMAT_OPTIONS when the server is GeoServer', function () {\n      options.serverType = 'geoserver';\n      const source = new ImageWMS(options);\n      pixelRatio = 2;\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT_OPTIONS')).to.be('dpi:180');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"extends FORMAT_OPTIONS if it is already present","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":181,"column":55,"index":8281},"line":181,"code":"    it('extends FORMAT_OPTIONS if it is already present', function () {\n      options.serverType = 'geoserver';\n      options.params.FORMAT_OPTIONS = 'param1:value1';\n      const source = new ImageWMS(options);\n      pixelRatio = 2;\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT_OPTIONS')).to.be('param1:value1;dpi:180');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"rounds FORMAT_OPTIONS to an integer when the server is GeoServer","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":191,"column":72,"index":8779},"line":191,"code":"    it('rounds FORMAT_OPTIONS to an integer when the server is GeoServer', function () {\n      options.serverType = 'geoserver';\n      const source = new ImageWMS(options);\n      pixelRatio = 1.325;\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT_OPTIONS')).to.be('dpi:119');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"sets DPI when the server is QGIS","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":200,"column":40,"index":9180},"line":200,"code":"    it('sets DPI when the server is QGIS', function () {\n      options.serverType = 'qgis';\n      const source = new ImageWMS(options);\n      pixelRatio = 2;\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      const uri = new URL(image.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('DPI')).to.be('180');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"creates an image with a custom imageLoadFunction","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":209,"column":56,"index":9573},"line":209,"code":"    it('creates an image with a custom imageLoadFunction', function () {\n      const imageLoadFunction = sinon.spy();\n      options.imageLoadFunction = imageLoadFunction;\n      const source = new ImageWMS(options);\n      const image = source.getImage(extent, resolution, pixelRatio, projection);\n      image.load();\n      expect(imageLoadFunction.called).to.be(true);\n      expect(imageLoadFunction.calledWith(image, image.src_)).to.be(true);\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"returns same image for consecutive calls with same args","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":218,"column":63,"index":10031},"line":218,"code":"    it('returns same image for consecutive calls with same args', function () {\n      const extent = [10.01, 20, 30.01, 40];\n      const source = new ImageWMS(options);\n      const image1 = source.getImage(extent, resolution, pixelRatio, projection);\n      const image2 = source.getImage(extent, resolution, pixelRatio, projection);\n      expect(image1).to.equal(image2);\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"returns same image for calls with similar extents","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":225,"column":57,"index":10405},"line":225,"code":"    it('returns same image for calls with similar extents', function () {\n      options.ratio = 1.5;\n      const source = new ImageWMS(options);\n      let extent = [10.01, 20, 30.01, 40];\n      const image1 = source.getImage(extent, resolution, pixelRatio, projection);\n      extent = [10.01, 20.1, 30.01, 40.1];\n      const image2 = source.getImage(extent, resolution, pixelRatio, projection);\n      expect(image1).to.equal(image2);\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"calculates correct image size with ratio","suites":["ol/source/ImageWMS","#getImage"],"updatePoint":{"line":234,"column":48,"index":10838},"line":234,"code":"    it('calculates correct image size with ratio', function () {\n      options.ratio = 1.5;\n      const source = new ImageWMS(options);\n      const extent = [10, 5, 30, 45];\n      source.getImage(extent, resolution, pixelRatio, projection);\n      expect(source.imageSize_).to.eql([300, 600]);\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"returns the expected GetFeatureInfo URL","suites":["ol/source/ImageWMS","#getFeatureInfoUrl"],"updatePoint":{"line":243,"column":47,"index":11191},"line":243,"code":"    it('returns the expected GetFeatureInfo URL', function () {\n      const source = new ImageWMS(options);\n      const url = source.getFeatureInfoUrl([20, 30], resolution, projection, {\n        INFO_FORMAT: 'text/plain'\n      });\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('24.95,14.95,35.05,25.05');\n      expect(queryData.get('CRS')).to.be('EPSG:4326');\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('HEIGHT')).to.be('101');\n      expect(queryData.get('I')).to.be('50');\n      expect(queryData.get('J')).to.be('50');\n      expect(queryData.get('LAYERS')).to.be('layer');\n      expect(queryData.get('QUERY_LAYERS')).to.be('layer');\n      expect(queryData.get('REQUEST')).to.be('GetFeatureInfo');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('SRS')).to.be(null);\n      expect(queryData.get('STYLES')).to.be('');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('WIDTH')).to.be('101');\n      expect(uri.hash.replace('#', '')).to.be.empty();\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"returns the expected GetFeatureInfo URL when source's projection is different from the parameter","suites":["ol/source/ImageWMS","#getFeatureInfoUrl"],"updatePoint":{"line":270,"column":104,"index":12569},"line":270,"code":"    it(\"returns the expected GetFeatureInfo URL when source's projection is different from the parameter\", function () {\n      const source = new ImageWMS(optionsReproj);\n      const url = source.getFeatureInfoUrl([20, 30], resolution, projection, {\n        INFO_FORMAT: 'text/plain'\n      });\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('1577259.402312431,2854419.4299513334,2875520.229418512,4152680.2570574144');\n      expect(queryData.get('CRS')).to.be('EPSG:3857');\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('HEIGHT')).to.be('101');\n      expect(queryData.get('I')).to.be('50');\n      expect(queryData.get('J')).to.be('50');\n      expect(queryData.get('LAYERS')).to.be('layer');\n      expect(queryData.get('QUERY_LAYERS')).to.be('layer');\n      expect(queryData.get('REQUEST')).to.be('GetFeatureInfo');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('SRS')).to.be(null);\n      expect(queryData.get('STYLES')).to.be('');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('WIDTH')).to.be('101');\n      expect(uri.hash.replace('#', '')).to.be.empty();\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"sets the QUERY_LAYERS param as expected","suites":["ol/source/ImageWMS","#getFeatureInfoUrl"],"updatePoint":{"line":297,"column":47,"index":13946},"line":297,"code":"    it('sets the QUERY_LAYERS param as expected', function () {\n      const source = new ImageWMS(options);\n      const url = source.getFeatureInfoUrl([20, 30], resolution, projection, {\n        INFO_FORMAT: 'text/plain',\n        QUERY_LAYERS: 'foo,bar'\n      });\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('24.95,14.95,35.05,25.05');\n      expect(queryData.get('CRS')).to.be('EPSG:4326');\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('HEIGHT')).to.be('101');\n      expect(queryData.get('I')).to.be('50');\n      expect(queryData.get('J')).to.be('50');\n      expect(queryData.get('LAYERS')).to.be('layer');\n      expect(queryData.get('QUERY_LAYERS')).to.be('foo,bar');\n      expect(queryData.get('REQUEST')).to.be('GetFeatureInfo');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('SRS')).to.be(null);\n      expect(queryData.get('STYLES')).to.be('');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('WIDTH')).to.be('101');\n      expect(uri.hash.replace('#', '')).to.be.empty();\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"returns the GetLegendGraphic url as expected","suites":["ol/source/ImageWMS","#getLegendUrl"],"updatePoint":{"line":327,"column":52,"index":15355},"line":327,"code":"    it('returns the GetLegendGraphic url as expected', function () {\n      const source = new ImageWMS(options);\n      const url = source.getLegendUrl(resolution);\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('LAYER')).to.be('layer');\n      expect(queryData.get('REQUEST')).to.be('GetLegendGraphic');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('SCALE')).to.be('357.14285714285717');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"does not include SCALE if no resolution was provided","suites":["ol/source/ImageWMS","#getLegendUrl"],"updatePoint":{"line":342,"column":60,"index":16094},"line":342,"code":"    it('does not include SCALE if no resolution was provided', function () {\n      const source = new ImageWMS(options);\n      const url = source.getLegendUrl();\n      const uri = new URL(url);\n      const queryData = uri.searchParams;\n      expect(queryData.get('SCALE')).to.be(null);\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"adds additional params as expected","suites":["ol/source/ImageWMS","#getLegendUrl"],"updatePoint":{"line":349,"column":42,"index":16370},"line":349,"code":"    it('adds additional params as expected', function () {\n      const source = new ImageWMS(options);\n      const url = source.getLegendUrl(resolution, {\n        STYLE: 'STYLE_VALUE',\n        FEATURETYPE: 'FEATURETYPE_VALUE',\n        RULE: 'RULE_VALUE',\n        SLD: 'SLD_VALUE',\n        SLD_BODY: 'SLD_BODY_VALUE',\n        FORMAT: 'FORMAT_VALUE',\n        WIDTH: 'WIDTH_VALUE',\n        HEIGHT: 'HEIGHT_VALUE',\n        EXCEPTIONS: 'EXCEPTIONS_VALUE',\n        LANGUAGE: 'LANGUAGE_VALUE',\n        LAYER: 'LAYER_VALUE'\n      });\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT')).to.be('FORMAT_VALUE');\n      expect(queryData.get('LAYER')).to.be('LAYER_VALUE');\n      expect(queryData.get('REQUEST')).to.be('GetLegendGraphic');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('SCALE')).to.be('357.14285714285717');\n      expect(queryData.get('STYLE')).to.be('STYLE_VALUE');\n      expect(queryData.get('FEATURETYPE')).to.be('FEATURETYPE_VALUE');\n      expect(queryData.get('RULE')).to.be('RULE_VALUE');\n      expect(queryData.get('SLD')).to.be('SLD_VALUE');\n      expect(queryData.get('SLD_BODY')).to.be('SLD_BODY_VALUE');\n      expect(queryData.get('FORMAT')).to.be('FORMAT_VALUE');\n      expect(queryData.get('WIDTH')).to.be('WIDTH_VALUE');\n      expect(queryData.get('HEIGHT')).to.be('HEIGHT_VALUE');\n      expect(queryData.get('EXCEPTIONS')).to.be('EXCEPTIONS_VALUE');\n      expect(queryData.get('LANGUAGE')).to.be('LANGUAGE_VALUE');\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"reloads from server","suites":["ol/source/ImageWMS","#refresh()"],"updatePoint":{"line":420,"column":27,"index":18989},"line":420,"code":"    it('reloads from server', function (done) {\n      map.once('rendercomplete', function () {\n        expect(callCount).to.be(1);\n        done();\n      });\n      source.refresh();\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"loads wrapped extents when both projections are global","suites":["ol/source/ImageWMS","reprojection"],"updatePoint":{"line":467,"column":62,"index":20342},"line":467,"code":"    it('loads wrapped extents when both projections are global', function (done) {\n      map.once('rendercomplete', function () {\n        expect(queryData.length).to.be(1);\n        expect(queryData[0].get('BBOX')).to.be('-85.078125,181,85.078125,541');\n        expect(queryData[0].get('WIDTH')).to.be('256');\n        expect(queryData[0].get('HEIGHT')).to.be('121');\n        done();\n      });\n      map.getView().setCenter(fromLonLat([361, 0]));\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"does not load outside extent when view projection is not global","suites":["ol/source/ImageWMS","reprojection"],"updatePoint":{"line":477,"column":71,"index":20804},"line":477,"code":"    it('does not load outside extent when view projection is not global', function (done) {\n      getProjection('EPSG:3857').setGlobal(false);\n      map.once('rendercomplete', function () {\n        expect(queryData.length).to.be(0);\n        done();\n      });\n      map.getView().setCenter(fromLonLat([361, 0]));\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"does not load outside extent when source projection is not global","suites":["ol/source/ImageWMS","reprojection"],"updatePoint":{"line":485,"column":73,"index":21126},"line":485,"code":"    it('does not load outside extent when source projection is not global', function (done) {\n      getProjection('EPSG:4326').setGlobal(false);\n      map.once('rendercomplete', function () {\n        expect(queryData.length).to.be(0);\n        done();\n      });\n      map.getView().setCenter(fromLonLat([361, 0]));\n    });","file":"browser/spec/ol/source/ImageWMS.test.js","skipped":false,"dir":"test"},{"name":"returns a raster source","suites":["constructor"],"updatePoint":{"line":87,"column":31,"index":2936},"line":87,"code":"    it('returns a raster source', function () {\n      const source = new RasterSource({\n        threads: 0,\n        sources: [new TileSource({})]\n      });\n      expect(source).to.be.a(Source);\n      expect(source).to.be.a(RasterSource);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"defaults to \"pixel\" operation","suites":["constructor"],"updatePoint":{"line":95,"column":37,"index":3188},"line":95,"code":"    it('defaults to \"pixel\" operation', function (done) {\n      const log = [];\n      const source = new RasterSource({\n        threads: 0,\n        sources: [redSource, greenSource, blueSource],\n        operation: function (inputs) {\n          log.push(inputs);\n          return inputs[0];\n        }\n      });\n      source.once('afteroperations', function () {\n        expect(log.length).to.equal(4);\n        const inputs = log[0];\n        const pixel = inputs[0];\n        expect(pixel).to.be.an('array');\n        done();\n      });\n      map.getLayers().item(0).setSource(source);\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"uses resolutions from the first source where available","suites":["constructor"],"updatePoint":{"line":117,"column":62,"index":3889},"line":117,"code":"    it('uses resolutions from the first source where available', function () {\n      greenSource.setResolutions([100, 10, 1]);\n      const source = new RasterSource({\n        threads: 0,\n        sources: [redSource, greenSource, blueSource],\n        operation: function (inputs) {\n          return inputs[0];\n        }\n      });\n      expect(source.getResolutions()).to.eql([100, 10, 1]);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"accepts a \"resolutions\" option","suites":["constructor"],"updatePoint":{"line":128,"column":38,"index":4262},"line":128,"code":"    it('accepts a \"resolutions\" option', function (done) {\n      const source = new RasterSource({\n        threads: 0,\n        sources: [redSource],\n        resolutions: [1],\n        operation: function (inputs) {\n          return inputs[0];\n        }\n      });\n      source.on('afteroperations', function (event) {\n        expect(event.resolution).to.equal(1);\n        done();\n      });\n      map.getLayers().item(0).setSource(source);\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"uses the view resolution when \"resolutions\" are set to null","suites":["constructor"],"updatePoint":{"line":146,"column":67,"index":4823},"line":146,"code":"    it('uses the view resolution when \"resolutions\" are set to null', function () {\n      redSource.setResolutions([100, 10, 1]);\n      const source = new RasterSource({\n        threads: 0,\n        sources: [redSource],\n        resolutions: null,\n        operation: function (inputs) {\n          return inputs[0];\n        }\n      });\n      expect(source.getResolutions()).to.be(null);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"disposes the processor when disposed","suites":["constructor"],"updatePoint":{"line":158,"column":44,"index":5193},"line":158,"code":"    it('disposes the processor when disposed', function () {\n      const source = new RasterSource({\n        threads: 0,\n        sources: [redSource, greenSource, blueSource],\n        operation: function (inputs) {\n          return inputs[0];\n        }\n      });\n      source.dispose();\n      expect(source.processor_.disposed).to.be(true);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"allows operation type to be set to \"image\"","suites":["constructor"],"updatePoint":{"line":169,"column":50,"index":5548},"line":169,"code":"    it('allows operation type to be set to \"image\"', function (done) {\n      const log = [];\n      const source = new RasterSource({\n        operationType: 'image',\n        threads: 0,\n        sources: [redSource, greenSource, blueSource],\n        operation: function (inputs) {\n          log.push(inputs);\n          return inputs[0];\n        }\n      });\n      source.once('afteroperations', function () {\n        expect(log.length).to.equal(1);\n        const inputs = log[0];\n        const imageData = inputs[0];\n        expect(imageData.data).to.be.a(Uint8ClampedArray);\n        expect(imageData.width).to.be(2);\n        expect(imageData.height).to.be(2);\n        done();\n      });\n      map.getLayers().item(0).setSource(source);\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"handles empty attributions","suites":["config option `attributions`"],"updatePoint":{"line":196,"column":34,"index":6423},"line":196,"code":"    it('handles empty attributions', function () {\n      const blue = new RasterSource({\n        operationType: 'image',\n        threads: 0,\n        sources: [blueSource],\n        operation: function (inputs) {\n          return inputs[0];\n        }\n      });\n      const blueAttributions = blue.getAttributions();\n      expect(blueAttributions()).to.be(null);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"shows single attributions","suites":["config option `attributions`"],"updatePoint":{"line":208,"column":33,"index":6790},"line":208,"code":"    it('shows single attributions', function () {\n      const red = new RasterSource({\n        operationType: 'image',\n        threads: 0,\n        sources: [redSource],\n        operation: function (inputs) {\n          return inputs[0];\n        }\n      });\n      const redAttribtuions = red.getAttributions();\n      expect(redAttribtuions()).to.not.be(null);\n      expect(typeof redAttribtuions).to.be('function');\n      expect(redAttribtuions()).to.eql(['red raster source']);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"concatinates multiple attributions","suites":["config option `attributions`"],"updatePoint":{"line":222,"column":42,"index":7284},"line":222,"code":"    it('concatinates multiple attributions', function () {\n      const redGreen = new RasterSource({\n        operationType: 'image',\n        threads: 0,\n        sources: [redSource, greenSource],\n        operation: function (inputs) {\n          return inputs[0];\n        }\n      });\n      const redGreenAttributions = redGreen.getAttributions();\n      expect(redGreenAttributions()).to.not.be(null);\n      expect(typeof redGreenAttributions).to.be('function');\n      expect(redGreenAttributions()).to.eql(['red raster source', 'green raster source']);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"allows operation to be set","suites":["#setOperation()"],"updatePoint":{"line":238,"column":34,"index":7886},"line":238,"code":"    it('allows operation to be set', function (done) {\n      let count = 0;\n      raster.setOperation(function (pixels) {\n        ++count;\n        const redPixel = pixels[0];\n        const greenPixel = pixels[1];\n        const bluePixel = pixels[2];\n        expect(redPixel).to.eql([255, 0, 0, 255]);\n        expect(greenPixel).to.eql([0, 255, 0, 255]);\n        expect(bluePixel).to.eql([0, 0, 255, 255]);\n        return pixels[0];\n      });\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n      raster.once('afteroperations', function (event) {\n        expect(count).to.equal(4);\n        done();\n      });\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"updates and re-runs the operation","suites":["#setOperation()"],"updatePoint":{"line":258,"column":41,"index":8547},"line":258,"code":"    it('updates and re-runs the operation', function (done) {\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n      let count = 0;\n      raster.on('afteroperations', function (event) {\n        ++count;\n        if (count === 1) {\n          raster.setOperation(function (inputs) {\n            return inputs[0];\n          });\n        } else {\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"disposes the previous processor","suites":["#setOperation()"],"updatePoint":{"line":274,"column":39,"index":8970},"line":274,"code":"    it('disposes the previous processor', function () {\n      const previousProcessor = raster.processor_;\n      raster.setOperation(function (pixels) {\n        return pixels[0];\n      });\n      expect(previousProcessor.disposed).to.be(true);\n      expect(raster.processor_.disposed).to.be(false);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"gets called before operations are run","suites":["beforeoperations"],"updatePoint":{"line":284,"column":45,"index":9333},"line":284,"code":"    it('gets called before operations are run', function (done) {\n      let count = 0;\n      raster.setOperation(function (inputs) {\n        ++count;\n        return inputs[0];\n      });\n      raster.once('beforeoperations', function (event) {\n        expect(count).to.equal(0);\n        expect(!!event).to.be(true);\n        expect(event.extent).to.be.an('array');\n        expect(event.resolution).to.be.a('number');\n        expect(event.data).to.be.an('object');\n        done();\n      });\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"allows data to be set for the operation","suites":["beforeoperations"],"updatePoint":{"line":302,"column":47,"index":9918},"line":302,"code":"    it('allows data to be set for the operation', function (done) {\n      raster.setOperation(function (inputs, data) {\n        ++data.count;\n        return inputs[0];\n      });\n      raster.on('beforeoperations', function (event) {\n        event.data.count = 0;\n      });\n      raster.once('afteroperations', function (event) {\n        expect(event.data.count).to.equal(4);\n        done();\n      });\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"gets called after operations are run","suites":["afteroperations"],"updatePoint":{"line":320,"column":44,"index":10461},"line":320,"code":"    it('gets called after operations are run', function (done) {\n      let count = 0;\n      raster.setOperation(function (inputs) {\n        ++count;\n        return inputs[0];\n      });\n      raster.once('afteroperations', function (event) {\n        expect(count).to.equal(4);\n        expect(!!event).to.be(true);\n        expect(event.extent).to.be.an('array');\n        expect(event.resolution).to.be.a('number');\n        expect(event.data).to.be.an('object');\n        done();\n      });\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"receives data set by the operation","suites":["afteroperations"],"updatePoint":{"line":338,"column":42,"index":11040},"line":338,"code":"    it('receives data set by the operation', function (done) {\n      raster.setOperation(function (inputs, data) {\n        data.message = 'hello world';\n        return inputs[0];\n      });\n      raster.once('afteroperations', function (event) {\n        expect(event.data.message).to.equal('hello world');\n        done();\n      });\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"is passed an array of data if more than one thread","suites":["afteroperations"],"updatePoint":{"line":351,"column":58,"index":11482},"line":351,"code":"    it('is passed an array of data if more than one thread', function (done) {\n      const threads = 3;\n      raster = new RasterSource({\n        threads: threads,\n        sources: [redSource, greenSource, blueSource],\n        operation: function (inputs, data) {\n          data.prop = 'value';\n          return inputs[0];\n        }\n      });\n      layer.setSource(raster);\n      raster.once('afteroperations', function (event) {\n        expect(event.data).to.be.an(Array);\n        expect(event.data).to.have.length(threads);\n        expect(event.data[0].prop).to.equal('value');\n        done();\n      });\n      const view = map.getView();\n      view.setCenter([0, 0]);\n      view.setZoom(0);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"is initiated on the underlying source","suites":["tile loading"],"updatePoint":{"line":379,"column":45,"index":12310},"line":379,"code":"    it('is initiated on the underlying source', function (done) {\n      const source = new XYZ({\n        url: 'spec/ol/data/osm-{z}-{x}-{y}.png'\n      });\n      raster = new RasterSource({\n        threads: 0,\n        sources: [source],\n        operation: function (inputs) {\n          return inputs[0];\n        }\n      });\n      map2 = new Map({\n        target: target,\n        view: new View({\n          center: [0, 0],\n          zoom: 0\n        }),\n        layers: [new ImageLayer({\n          source: raster\n        })]\n      });\n      const tileCache = source.tileCache;\n      expect(tileCache.getCount()).to.equal(0);\n      map2.once('moveend', function () {\n        expect(tileCache.getCount()).to.equal(1);\n        const state = tileCache.peekLast().getState();\n        expect(state === TileState.LOADING || state === TileState.LOADED).to.be(true);\n        done();\n      });\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"creates a new processor","suites":["constructor"],"updatePoint":{"line":416,"column":31,"index":13364},"line":416,"code":"    it('creates a new processor', function () {\n      const processor = new Processor({\n        operation: identity\n      });\n      expect(processor).to.be.a(Processor);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"calls operation with input pixels","suites":["#process()"],"updatePoint":{"line":424,"column":41,"index":13597},"line":424,"code":"    it('calls operation with input pixels', function (done) {\n      const processor = new Processor({\n        operation: function (inputs, meta) {\n          ++meta.count;\n          const pixel = inputs[0];\n          for (let i = 0, ii = pixel.length; i < ii; ++i) {\n            meta.sum += pixel[i];\n          }\n          return pixel;\n        }\n      });\n      const array = new Uint8ClampedArray([1, 2, 3, 4, 5, 6, 7, 8]);\n      const input = newImageData(array, 1, 2);\n      processor.process([input], {\n        count: 0,\n        sum: 0\n      }, function (err, output, m) {\n        if (err) {\n          done(err);\n          return;\n        }\n        expect(m.count).to.equal(2);\n        expect(m.sum).to.equal(36);\n        done();\n      });\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"calls callback with processed image data","suites":["#process()"],"updatePoint":{"line":450,"column":48,"index":14356},"line":450,"code":"    it('calls callback with processed image data', function (done) {\n      const processor = new Processor({\n        operation: function (inputs) {\n          const pixel = inputs[0];\n          pixel[0] *= 2;\n          pixel[1] *= 2;\n          pixel[2] *= 2;\n          pixel[3] *= 2;\n          return pixel;\n        }\n      });\n      const array = new Uint8ClampedArray([1, 2, 3, 4, 5, 6, 7, 8]);\n      const input = newImageData(array, 1, 2);\n      processor.process([input], {}, function (err, output, m) {\n        if (err) {\n          done(err);\n          return;\n        }\n        expect(output).to.be.a(ImageData);\n        expect(output.data).to.eql(new Uint8ClampedArray([2, 4, 6, 8, 10, 12, 14, 16]));\n        done();\n      });\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"allows library functions to be called","suites":["#process()"],"updatePoint":{"line":473,"column":45,"index":15095},"line":473,"code":"    it('allows library functions to be called', function (done) {\n      const lib = {\n        sum: function (a, b) {\n          return a + b;\n        },\n        diff: function (a, b) {\n          return a - b;\n        }\n      };\n      const normalizedDiff = function (pixels) {\n        const pixel = pixels[0];\n        const r = pixel[0];\n        const g = pixel[1];\n        // eslint-disable-next-line no-undef\n        const nd = diff(r, g) / sum(r, g);\n        const index = Math.round(255 * (nd + 1) / 2);\n        return [index, index, index, pixel[3]];\n      };\n      const processor = new Processor({\n        operation: normalizedDiff,\n        lib: lib\n      });\n      const array = new Uint8ClampedArray([10, 2, 0, 0, 5, 8, 0, 1]);\n      const input = newImageData(array, 1, 2);\n      processor.process([input], {}, function (err, output, m) {\n        if (err) {\n          done(err);\n          return;\n        }\n        expect(output).to.be.a(ImageData);\n        const v0 = Math.round(255 * (1 + 8 / 12) / 2);\n        const v1 = Math.round(255 * (1 + -3 / 13) / 2);\n        expect(output.data).to.eql(new Uint8ClampedArray([v0, v0, v0, 0, v1, v1, v1, 1]));\n        done();\n      });\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"calls callbacks for each call","suites":["#process()"],"updatePoint":{"line":509,"column":37,"index":16282},"line":509,"code":"    it('calls callbacks for each call', function (done) {\n      const processor = new Processor({\n        operation: identity\n      });\n      let calls = 0;\n      function createCallback(index) {\n        return function (err, output, meta) {\n          if (err) {\n            done(err);\n            return;\n          }\n          expect(output).to.be.a(ImageData);\n          ++calls;\n        };\n      }\n      for (let i = 0; i < 5; ++i) {\n        const input = newImageData(new Uint8ClampedArray([1, 2, 3, 4]), 1, 1);\n        processor.process([input], {}, createCallback(i));\n      }\n      setTimeout(function () {\n        expect(calls).to.be(5);\n        done();\n      }, 1000);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"respects max queue length","suites":["#process()"],"updatePoint":{"line":533,"column":33,"index":16964},"line":533,"code":"    it('respects max queue length', function (done) {\n      const processor = new Processor({\n        queue: 1,\n        operation: identity\n      });\n      const log = [];\n      function createCallback(index) {\n        return function (err, output, meta) {\n          if (err) {\n            done(err);\n            return;\n          }\n          log.push(output);\n        };\n      }\n      for (let i = 0; i < 5; ++i) {\n        const input = newImageData(new Uint8ClampedArray([1, 2, 3, 4]), 1, 1);\n        processor.process([input], {}, createCallback(i));\n      }\n      setTimeout(function () {\n        expect(log).to.have.length(5);\n        expect(log[0]).to.be(null);\n        expect(log[1]).to.be(null);\n        expect(log[2]).to.be(null);\n        expect(log[3]).to.be.a(ImageData);\n        expect(log[4]).to.be.a(ImageData);\n        done();\n      }, 1000);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"can run on multiple threads","suites":["#process()"],"updatePoint":{"line":562,"column":35,"index":17832},"line":562,"code":"    it('can run on multiple threads', function (done) {\n      const processor = new Processor({\n        threads: 2,\n        operation: identity\n      });\n      const input = newImageData(new Uint8ClampedArray([1, 2, 3, 4]), 1, 1);\n      processor.process([input], {}, function (err) {\n        if (err) {\n          done(err);\n        }\n      });\n      processor.dispose();\n      setTimeout(done, 20);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"calls operation with input pixels","suites":["#process() - faux worker"],"updatePoint":{"line":582,"column":41,"index":18404},"line":582,"code":"    it('calls operation with input pixels', function (done) {\n      const processor = new Processor({\n        threads: 0,\n        operation: identitySpy\n      });\n      const array = new Uint8ClampedArray([1, 2, 3, 4, 5, 6, 7, 8]);\n      const input = newImageData(array, 1, 2);\n      processor.process([input], {}, function (err, output, m) {\n        if (err) {\n          done(err);\n          return;\n        }\n        expect(identitySpy.callCount).to.be(2);\n        const first = identitySpy.getCall(0);\n        expect(first.args).to.have.length(2);\n        done();\n      });\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"passes meta object to operations","suites":["#process() - faux worker"],"updatePoint":{"line":600,"column":40,"index":18989},"line":600,"code":"    it('passes meta object to operations', function (done) {\n      const processor = new Processor({\n        threads: 0,\n        operation: identitySpy\n      });\n      const array = new Uint8ClampedArray([1, 2, 3, 4]);\n      const input = newImageData(array, 1, 1);\n      const meta = {\n        foo: 'bar'\n      };\n      processor.process([input], meta, function (err, output, m) {\n        if (err) {\n          done(err);\n          return;\n        }\n        expect(m).to.eql(meta);\n        expect(identitySpy.callCount).to.be(1);\n        done();\n      });\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"stops callbacks from being called","suites":["#dispose()"],"updatePoint":{"line":622,"column":41,"index":19599},"line":622,"code":"    it('stops callbacks from being called', function (done) {\n      const processor = new Processor({\n        operation: identity\n      });\n      const array = new Uint8ClampedArray([1, 2, 3, 4, 5, 6, 7, 8]);\n      const input = newImageData(array, 1, 2);\n      processor.process([input], {}, function () {\n        done(new Error('Expected abort to stop callback from being called'));\n      });\n      processor.dispose();\n      setTimeout(done, 500);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"stops callbacks from being called","suites":["#dispose() - faux worker"],"updatePoint":{"line":636,"column":41,"index":20117},"line":636,"code":"    it('stops callbacks from being called', function (done) {\n      const processor = new Processor({\n        threads: 0,\n        operation: identity\n      });\n      const array = new Uint8ClampedArray([1, 2, 3, 4, 5, 6, 7, 8]);\n      const input = newImageData(array, 1, 2);\n      processor.process([input], {}, function () {\n        done(new Error('Expected abort to stop callback from being called'));\n      });\n      processor.dispose();\n      setTimeout(done, 20);\n    });","file":"browser/spec/ol/source/raster.test.js","skipped":false,"dir":"test"},{"name":"returns a source","suites":["ol/source/Source","constructor"],"updatePoint":{"line":5,"column":24,"index":239},"line":5,"code":"    it('returns a source', function () {\n      const source = new Source({\n        projection: getProjection('EPSG:4326')\n      });\n      expect(source).to.be.a(Source);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts undefined","suites":["ol/source/Source","config option `attributions`"],"updatePoint":{"line":13,"column":25,"index":481},"line":13,"code":"    it('accepts undefined', function () {\n      const source = new Source({});\n      const attributions = source.getAttributions();\n      expect(attributions).to.be(null);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts a single string","suites":["ol/source/Source","config option `attributions`"],"updatePoint":{"line":18,"column":31,"index":667},"line":18,"code":"    it('accepts a single string', function () {\n      const source = new Source({\n        attributions: 'Humpty'\n      });\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      expect(attributions()).to.eql(['Humpty']);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts an array of strings","suites":["ol/source/Source","config option `attributions`"],"updatePoint":{"line":27,"column":35,"index":1001},"line":27,"code":"    it('accepts an array of strings', function () {\n      const source = new Source({\n        attributions: ['Humpty', 'Dumpty']\n      });\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      expect(attributions()).to.eql(['Humpty', 'Dumpty']);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts a function that returns a string","suites":["ol/source/Source","config option `attributions`"],"updatePoint":{"line":36,"column":48,"index":1370},"line":36,"code":"    it('accepts a function that returns a string', function () {\n      const source = new Source({\n        attributions: function () {\n          return 'Humpty';\n        }\n      });\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      expect(attributions()).to.be('Humpty');\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts a function that returns an array of strings","suites":["ol/source/Source","config option `attributions`"],"updatePoint":{"line":47,"column":59,"index":1767},"line":47,"code":"    it('accepts a function that returns an array of strings', function () {\n      const source = new Source({\n        attributions: function () {\n          return ['Humpty', 'Dumpty'];\n        }\n      });\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      expect(attributions()).to.eql(['Humpty', 'Dumpty']);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"dispatches the change event","suites":["ol/source/Source","#refresh()"],"updatePoint":{"line":60,"column":35,"index":2210},"line":60,"code":"    it('dispatches the change event', function () {\n      const source = new Source({\n        projection: getProjection('EPSG:4326')\n      });\n      const changedSpy = sinon.spy();\n      source.on('change', changedSpy);\n      source.refresh();\n      expect(changedSpy.called).to.be.ok();\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"returns false by default","suites":["ol/source/Source","#getInterpolate()"],"updatePoint":{"line":71,"column":32,"index":2555},"line":71,"code":"    it('returns false by default', function () {\n      const source = new Source({});\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"returns true if constructed with interpolate: true","suites":["ol/source/Source","#getInterpolate()"],"updatePoint":{"line":75,"column":58,"index":2727},"line":75,"code":"    it('returns true if constructed with interpolate: true', function () {\n      const source = new Source({\n        interpolate: true\n      });\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts undefined","suites":["ol/source/Source","#setAttributions()"],"updatePoint":{"line":92,"column":25,"index":3137},"line":92,"code":"    it('accepts undefined', function () {\n      source.setAttributions();\n      const attributions = source.getAttributions();\n      expect(attributions).to.be(null);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts a single string","suites":["ol/source/Source","#setAttributions()"],"updatePoint":{"line":97,"column":31,"index":3318},"line":97,"code":"    it('accepts a single string', function () {\n      source.setAttributions('Humpty');\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      expect(attributions()).to.eql(['Humpty']);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts an array of strings","suites":["ol/source/Source","#setAttributions()"],"updatePoint":{"line":104,"column":35,"index":3617},"line":104,"code":"    it('accepts an array of strings', function () {\n      source.setAttributions(['Humpty', 'Dumpty']);\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      expect(attributions()).to.eql(['Humpty', 'Dumpty']);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts a function that returns a string","suites":["ol/source/Source","#setAttributions()"],"updatePoint":{"line":111,"column":48,"index":3951},"line":111,"code":"    it('accepts a function that returns a string', function () {\n      source.setAttributions(function () {\n        return 'Humpty';\n      });\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      expect(attributions()).to.eql('Humpty');\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"accepts a function that returns an array of strings","suites":["ol/source/Source","#setAttributions()"],"updatePoint":{"line":120,"column":59,"index":4310},"line":120,"code":"    it('accepts a function that returns an array of strings', function () {\n      source.setAttributions(function () {\n        return ['Humpty', 'Dumpty'];\n      });\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      expect(attributions()).to.eql(['Humpty', 'Dumpty']);\n    });","file":"browser/spec/ol/source/Source.test.js","skipped":false,"dir":"test"},{"name":"can be constructed with a custom minZoom","suites":["ol.source.Stamen","constructor"],"updatePoint":{"line":4,"column":48,"index":193},"line":4,"code":"    it('can be constructed with a custom minZoom', function () {\n      const source = new Stamen({\n        layer: 'watercolor',\n        minZoom: 10\n      });\n      expect(source.getTileGrid().getMinZoom()).to.be(10);\n    });","file":"browser/spec/ol/source/stamen.test.js","skipped":false,"dir":"test"},{"name":"can be constructed with a custom maxZoom","suites":["ol.source.Stamen","constructor"],"updatePoint":{"line":11,"column":48,"index":418},"line":11,"code":"    it('can be constructed with a custom maxZoom', function () {\n      const source = new Stamen({\n        layer: 'watercolor',\n        maxZoom: 8\n      });\n      expect(source.getTileGrid().getMaxZoom()).to.be(8);\n    });","file":"browser/spec/ol/source/stamen.test.js","skipped":false,"dir":"test"},{"name":"returns a tile source","suites":["ol/source/Tile","constructor"],"updatePoint":{"line":49,"column":29,"index":1768},"line":49,"code":"    it('returns a tile source', function () {\n      const source = new TileSource({\n        projection: getProjection('EPSG:4326')\n      });\n      expect(source).to.be.a(Source);\n      expect(source).to.be.a(TileSource);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"sets 0 as initial cache size","suites":["ol/source/Tile","constructor"],"updatePoint":{"line":56,"column":36,"index":2004},"line":56,"code":"    it('sets 0 as initial cache size', function () {\n      const source = new TileSource({});\n      expect(source.tileCache.highWaterMark).to.be(0);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"grows the cache","suites":["ol/source/Tile","constructor"],"updatePoint":{"line":60,"column":23,"index":2148},"line":60,"code":"    it('grows the cache', function () {\n      const source = new TileDebugSource();\n      const layer = new TileLayer({\n        source: source\n      });\n      const target = document.createElement('div');\n      target.style.width = '100px';\n      target.style.height = '100px';\n      document.body.appendChild(target);\n      const map = new Map({\n        layers: [layer],\n        view: new View({\n          center: [0, 0],\n          zoom: 2\n        }),\n        target: target\n      });\n      map.renderSync();\n      expect(source.getTileCacheForProjection(map.getView().getProjection()).highWaterMark).to.be(4);\n      map.setTarget(null);\n      document.body.removeChild(target);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"sets a custom cache size","suites":["ol/source/Tile","constructor"],"updatePoint":{"line":82,"column":32,"index":2845},"line":82,"code":"    it('sets a custom cache size', function () {\n      const projection = getProjection('EPSG:4326');\n      const source = new TileSource({\n        projection: projection,\n        cacheSize: 442\n      });\n      expect(source.getTileCacheForProjection(projection).highWaterMark).to.be(442);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"sets the source key","suites":["ol/source/Tile","#setKey()"],"updatePoint":{"line":92,"column":27,"index":3182},"line":92,"code":"    it('sets the source key', function () {\n      const source = new TileSource({});\n      expect(source.getKey()).to.equal('');\n      const key = 'foo';\n      source.setKey(key);\n      expect(source.getKey()).to.equal(key);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"is false by default","suites":["ol/source/Tile","#getInterpolate()"],"updatePoint":{"line":101,"column":27,"index":3467},"line":101,"code":"    it('is false by default', function () {\n      const source = new TileSource({});\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"is true if constructed with interpolate: true","suites":["ol/source/Tile","#getInterpolate()"],"updatePoint":{"line":105,"column":53,"index":3638},"line":105,"code":"    it('is true if constructed with interpolate: true', function () {\n      const source = new TileSource({\n        interpolate: true\n      });\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"dispatches a change event","suites":["ol/source/Tile","#setKey()"],"updatePoint":{"line":113,"column":33,"index":3865},"line":113,"code":"    it('dispatches a change event', function (done) {\n      const source = new TileSource({});\n      const key = 'foo';\n      source.once('change', function () {\n        done();\n      });\n      source.setKey(key);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"does not dispatch change if key does not change","suites":["ol/source/Tile","#setKey()"],"updatePoint":{"line":121,"column":55,"index":4109},"line":121,"code":"    it('does not dispatch change if key does not change', function (done) {\n      const source = new TileSource({});\n      const key = 'foo';\n      source.once('change', function () {\n        source.once('change', function () {\n          done(new Error('Unexpected change event after source.setKey()'));\n        });\n        setTimeout(function () {\n          done();\n        }, 10);\n        source.setKey(key); // this should not result in a change event\n      });\n\n      source.setKey(key); // this should result in a change event\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"does not call the callback if no tiles are loaded","suites":["ol/source/Tile","#forEachLoadedTile()"],"updatePoint":{"line":143,"column":57,"index":4792},"line":143,"code":"    it('does not call the callback if no tiles are loaded', function () {\n      const source = new MockTile({});\n      const grid = source.getTileGrid();\n      const extent = [-180, -180, 180, 180];\n      const zoom = 3;\n      const range = grid.getTileRangeForExtentAndZ(extent, zoom);\n      source.forEachLoadedTile(source.getProjection(), zoom, range, callback);\n      expect(callback.callCount).to.be(0);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"does not call getTile() if no tiles are loaded","suites":["ol/source/Tile","#forEachLoadedTile()"],"updatePoint":{"line":152,"column":54,"index":5206},"line":152,"code":"    it('does not call getTile() if no tiles are loaded', function () {\n      const source = new MockTile({});\n      sinon.spy(source, 'getTile');\n      const grid = source.getTileGrid();\n      const extent = [-180, -180, 180, 180];\n      const zoom = 3;\n      const range = grid.getTileRangeForExtentAndZ(extent, zoom);\n      source.forEachLoadedTile(source.getProjection(), zoom, range, callback);\n      expect(source.getTile.callCount).to.be(0);\n      source.getTile.restore();\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"calls callback for each loaded tile","suites":["ol/source/Tile","#forEachLoadedTile()"],"updatePoint":{"line":163,"column":43,"index":5683},"line":163,"code":"    it('calls callback for each loaded tile', function () {\n      const source = new MockTile({\n        '1/0/0': 2,\n        // LOADED\n        '1/0/1': 2,\n        // LOADED\n        '1/1/0': 1,\n        // LOADING,\n        '1/1/1': 2 // LOADED\n      });\n\n      const zoom = 1;\n      const range = new TileRange(0, 1, 0, 1);\n      source.forEachLoadedTile(source.getProjection(), zoom, range, callback);\n      expect(callback.callCount).to.be(3);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"returns true if range is fully loaded","suites":["ol/source/Tile","#forEachLoadedTile()"],"updatePoint":{"line":179,"column":45,"index":6136},"line":179,"code":"    it('returns true if range is fully loaded', function () {\n      // a source with no loaded tiles\n      const source = new MockTile({\n        '1/0/0': 2,\n        // LOADED,\n        '1/0/1': 2,\n        // LOADED,\n        '1/1/0': 2,\n        // LOADED,\n        '1/1/1': 2 // LOADED\n      });\n\n      const zoom = 1;\n      const range = new TileRange(0, 1, 0, 1);\n      const covered = source.forEachLoadedTile(source.getProjection(), zoom, range, function () {\n        return true;\n      });\n      expect(covered).to.be(true);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"returns false if range is not fully loaded","suites":["ol/source/Tile","#forEachLoadedTile()"],"updatePoint":{"line":198,"column":50,"index":6676},"line":198,"code":"    it('returns false if range is not fully loaded', function () {\n      // a source with no loaded tiles\n      const source = new MockTile({\n        '1/0/0': 2,\n        // LOADED,\n        '1/0/1': 2,\n        // LOADED,\n        '1/1/0': 1,\n        // LOADING,\n        '1/1/1': 2 // LOADED\n      });\n\n      const zoom = 1;\n      const range = new TileRange(0, 1, 0, 1);\n      const covered = source.forEachLoadedTile(source.getProjection(), zoom, range, function () {\n        return true;\n      });\n      expect(covered).to.be(false);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"allows callback to override loaded check","suites":["ol/source/Tile","#forEachLoadedTile()"],"updatePoint":{"line":217,"column":48,"index":7216},"line":217,"code":"    it('allows callback to override loaded check', function () {\n      // a source with no loaded tiles\n      const source = new MockTile({\n        '1/0/0': 2,\n        // LOADED,\n        '1/0/1': 2,\n        // LOADED,\n        '1/1/0': 2,\n        // LOADED,\n        '1/1/1': 2 // LOADED\n      });\n\n      const zoom = 1;\n      const range = new TileRange(0, 1, 0, 1);\n      const covered = source.forEachLoadedTile(source.getProjection(), zoom, range, function () {\n        return false;\n      });\n      expect(covered).to.be(false);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"returns the expected tile coordinate - {wrapX: true}","suites":["ol/source/Tile","#getTileCoordForTileUrlFunction()"],"updatePoint":{"line":238,"column":60,"index":7836},"line":238,"code":"    it('returns the expected tile coordinate - {wrapX: true}', function () {\n      const tileSource = new TileSource({\n        projection: 'EPSG:3857',\n        wrapX: true\n      });\n      let tileCoord = tileSource.getTileCoordForTileUrlFunction([6, -31, 22]);\n      expect(tileCoord).to.eql([6, 33, 22]);\n      tileCoord = tileSource.getTileCoordForTileUrlFunction([6, 33, 22]);\n      expect(tileCoord).to.eql([6, 33, 22]);\n      tileCoord = tileSource.getTileCoordForTileUrlFunction([6, 97, 22]);\n      expect(tileCoord).to.eql([6, 33, 22]);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"returns the expected tile coordinate - {wrapX: false}","suites":["ol/source/Tile","#getTileCoordForTileUrlFunction()"],"updatePoint":{"line":250,"column":61,"index":8389},"line":250,"code":"    it('returns the expected tile coordinate - {wrapX: false}', function () {\n      const tileSource = new TileSource({\n        projection: 'EPSG:3857',\n        wrapX: false\n      });\n      let tileCoord = tileSource.getTileCoordForTileUrlFunction([6, -31, 22]);\n      expect(tileCoord).to.eql(null);\n      tileCoord = tileSource.getTileCoordForTileUrlFunction([6, 33, 22]);\n      expect(tileCoord).to.eql([6, 33, 22]);\n      tileCoord = tileSource.getTileCoordForTileUrlFunction([6, 97, 22]);\n      expect(tileCoord).to.eql(null);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"works with wrapX and custom projection without extent","suites":["ol/source/Tile","#getTileCoordForTileUrlFunction()"],"updatePoint":{"line":262,"column":61,"index":8929},"line":262,"code":"    it('works with wrapX and custom projection without extent', function () {\n      const tileSource = new TileSource({\n        projection: new Projection({\n          code: 'foo',\n          global: true,\n          units: 'm'\n        }),\n        wrapX: true\n      });\n      const tileCoord = tileSource.getTileCoordForTileUrlFunction([6, -31, 22]);\n      expect(tileCoord).to.eql([6, 33, 22]);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"checks clearing of internal state","suites":["ol/source/Tile","#refresh()"],"updatePoint":{"line":276,"column":41,"index":9355},"line":276,"code":"    it('checks clearing of internal state', function () {\n      // create a source with one loaded tile\n      const source = new MockTile({\n        '1/0/0': 2 // LOADED\n      });\n      // check the loaded tile is there\n      const tile = source.getTile(1, 0, 0);\n      expect(tile).to.be.a(Tile);\n      // check tile cache is filled\n      expect(source.tileCache.getCount()).to.eql(1);\n      // refresh the source\n      source.refresh();\n      // check tile cache after refresh (should be empty)\n      expect(source.tileCache.getCount()).to.eql(0);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"creates a tile source","suites":["MockTile","constructor"],"updatePoint":{"line":295,"column":29,"index":9985},"line":295,"code":"    it('creates a tile source', function () {\n      const source = new MockTile({});\n      expect(source).to.be.a(TileSource);\n      expect(source).to.be.a(MockTile);\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"returns a tile with state based on constructor arg","suites":["MockTile","#getTile()"],"updatePoint":{"line":302,"column":58,"index":10234},"line":302,"code":"    it('returns a tile with state based on constructor arg', function () {\n      const source = new MockTile({\n        '0/0/0': 2,\n        // LOADED,\n        '1/0/0': 2 // LOADED\n      });\n\n      let tile;\n\n      // check a loaded tile\n      tile = source.getTile(0, 0, 0);\n      expect(tile).to.be.a(Tile);\n      expect(tile.state).to.be(2); // LOADED\n\n      // check a tile that is not loaded\n      tile = source.getTile(1, 0, -1);\n      expect(tile).to.be.a(Tile);\n      expect(tile.state).to.be(0); // IDLE\n\n      // check another loaded tile\n      tile = source.getTile(1, 0, 0);\n      expect(tile).to.be.a(Tile);\n      expect(tile.state).to.be(2); // LOADED\n    });","file":"browser/spec/ol/source/Tile.test.js","skipped":false,"dir":"test"},{"name":"returns a tile with the expected URL","suites":["ol.source.TileArcGISRest","#getTile"],"updatePoint":{"line":13,"column":44,"index":471},"line":13,"code":"    it('returns a tile with the expected URL', function () {\n      const source = new TileArcGISRest(options);\n      const tile = source.getTile(3, 2, 6, 1, getProjection('EPSG:3857'));\n      expect(tile).to.be.an(ImageTile);\n      const uri = new URL(tile.src_);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/MapServer/export');\n      const queryData = uri.searchParams;\n      const bbox = queryData.get('BBOX').split(',').map(parseFloat);\n      expect(bbox[0]).roughlyEqual(-10018754.171394622, 1e-9);\n      expect(bbox[1]).roughlyEqual(-15028131.257091936, 1e-9);\n      expect(bbox[2]).roughlyEqual(-5009377.085697311, 1e-9);\n      expect(bbox[3]).roughlyEqual(-10018754.171394624, 1e-9);\n      expect(queryData.get('FORMAT')).to.be('PNG32');\n      expect(queryData.get('SIZE')).to.be('256,256');\n      expect(queryData.get('IMAGESR')).to.be('3857');\n      expect(queryData.get('BBOXSR')).to.be('3857');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"returns a non floating point DPI value","suites":["ol.source.TileArcGISRest","#getTile"],"updatePoint":{"line":33,"column":46,"index":1527},"line":33,"code":"    it('returns a non floating point DPI value', function () {\n      const source = new TileArcGISRest(options);\n      const tile = source.getTile(3, 2, 6, 1.12, getProjection('EPSG:3857'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('DPI')).to.be('101');\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"takes DPI from params if specified","suites":["ol.source.TileArcGISRest","#getTile"],"updatePoint":{"line":40,"column":42,"index":1851},"line":40,"code":"    it('takes DPI from params if specified', function () {\n      options.params.DPI = 96;\n      const source = new TileArcGISRest(options);\n      const tile = source.getTile(3, 2, 6, 1.12, getProjection('EPSG:3857'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('DPI')).to.be('108');\n      delete options.params.DPI;\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"returns a tile with the expected URL with url list","suites":["ol.source.TileArcGISRest","#getTile"],"updatePoint":{"line":49,"column":58,"index":2255},"line":49,"code":"    it('returns a tile with the expected URL with url list', function () {\n      options.urls = ['http://test1.com/MapServer', 'http://test2.com/MapServer'];\n      const source = new TileArcGISRest(options);\n      const tile = source.getTile(3, 2, 6, 1, getProjection('EPSG:3857'));\n      expect(tile).to.be.an(ImageTile);\n      const uri = new URL(tile.src_);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.match(/test[12]\\.com/);\n      expect(uri.pathname).to.be('/MapServer/export');\n      const queryData = uri.searchParams;\n      const bbox = queryData.get('BBOX').split(',').map(parseFloat);\n      expect(bbox[0]).roughlyEqual(-10018754.171394622, 1e-9);\n      expect(bbox[1]).roughlyEqual(-15028131.257091936, 1e-9);\n      expect(bbox[2]).roughlyEqual(-5009377.085697311, 1e-9);\n      expect(bbox[3]).roughlyEqual(-10018754.171394624, 1e-9);\n      expect(queryData.get('FORMAT')).to.be('PNG32');\n      expect(queryData.get('SIZE')).to.be('256,256');\n      expect(queryData.get('IMAGESR')).to.be('3857');\n      expect(queryData.get('BBOXSR')).to.be('3857');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"returns a tile with the expected URL for ImageServer","suites":["ol.source.TileArcGISRest","#getTile"],"updatePoint":{"line":70,"column":60,"index":3413},"line":70,"code":"    it('returns a tile with the expected URL for ImageServer', function () {\n      options.url = 'http://example.com/ImageServer';\n      const source = new TileArcGISRest(options);\n      const tile = source.getTile(3, 2, 6, 1, getProjection('EPSG:3857'));\n      expect(tile).to.be.an(ImageTile);\n      const uri = new URL(tile.src_);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/ImageServer/exportImage');\n      const queryData = uri.searchParams;\n      const bbox = queryData.get('BBOX').split(',').map(parseFloat);\n      expect(bbox[0]).roughlyEqual(-10018754.171394622, 1e-9);\n      expect(bbox[1]).roughlyEqual(-15028131.257091936, 1e-9);\n      expect(bbox[2]).roughlyEqual(-5009377.085697311, 1e-9);\n      expect(bbox[3]).roughlyEqual(-10018754.171394624, 1e-9);\n      expect(queryData.get('FORMAT')).to.be('PNG32');\n      expect(queryData.get('SIZE')).to.be('256,256');\n      expect(queryData.get('IMAGESR')).to.be('3857');\n      expect(queryData.get('BBOXSR')).to.be('3857');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"allows various parameters to be overridden","suites":["ol.source.TileArcGISRest","#getTile"],"updatePoint":{"line":91,"column":50,"index":4534},"line":91,"code":"    it('allows various parameters to be overridden', function () {\n      options.params.FORMAT = 'png';\n      options.params.TRANSPARENT = false;\n      const source = new TileArcGISRest(options);\n      const tile = source.getTile(3, 2, 2, 1, getProjection('EPSG:4326'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT')).to.be('png');\n      expect(queryData.get('TRANSPARENT')).to.be('false');\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"allows adding rest option","suites":["ol.source.TileArcGISRest","#getTile"],"updatePoint":{"line":101,"column":33,"index":4987},"line":101,"code":"    it('allows adding rest option', function () {\n      options.params.LAYERS = 'show:1,3,4';\n      const source = new TileArcGISRest(options);\n      const tile = source.getTile(3, 2, 2, 1, getProjection('EPSG:4326'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('LAYERS')).to.be('show:1,3,4');\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"add a new param","suites":["ol.source.TileArcGISRest","#updateParams"],"updatePoint":{"line":111,"column":23,"index":5391},"line":111,"code":"    it('add a new param', function () {\n      const source = new TileArcGISRest(options);\n      source.updateParams({\n        'TEST': 'value'\n      });\n      const tile = source.getTile(3, 2, 6, 1, getProjection('EPSG:3857'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('TEST')).to.be('value');\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"updates an existing param","suites":["ol.source.TileArcGISRest","#updateParams"],"updatePoint":{"line":121,"column":33,"index":5768},"line":121,"code":"    it('updates an existing param', function () {\n      options.params.TEST = 'value';\n      const source = new TileArcGISRest(options);\n      source.updateParams({\n        'TEST': 'newValue'\n      });\n      const tile = source.getTile(3, 2, 6, 1, getProjection('EPSG:3857'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('TEST')).to.be('newValue');\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"verify getting a param","suites":["ol.source.TileArcGISRest","#getParams"],"updatePoint":{"line":134,"column":30,"index":6230},"line":134,"code":"    it('verify getting a param', function () {\n      options.params.TEST = 'value';\n      const source = new TileArcGISRest(options);\n      const setParams = source.getParams();\n      expect(setParams).to.eql({\n        TEST: 'value'\n      });\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"verify on adding a param","suites":["ol.source.TileArcGISRest","#getParams"],"updatePoint":{"line":142,"column":32,"index":6483},"line":142,"code":"    it('verify on adding a param', function () {\n      options.params.TEST = 'value';\n      const source = new TileArcGISRest(options);\n      source.updateParams({\n        'TEST2': 'newValue'\n      });\n      const setParams = source.getParams();\n      expect(setParams).to.eql({\n        TEST: 'value',\n        TEST2: 'newValue'\n      });\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"verify on update a param","suites":["ol.source.TileArcGISRest","#getParams"],"updatePoint":{"line":154,"column":32,"index":6829},"line":154,"code":"    it('verify on update a param', function () {\n      options.params.TEST = 'value';\n      const source = new TileArcGISRest(options);\n      source.updateParams({\n        'TEST': 'newValue'\n      });\n      const setParams = source.getParams();\n      expect(setParams).to.eql({\n        TEST: 'newValue'\n      });\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"verify getting array of urls","suites":["ol.source.TileArcGISRest","#getUrls"],"updatePoint":{"line":167,"column":36,"index":7197},"line":167,"code":"    it('verify getting array of urls', function () {\n      options.urls = ['http://test.com/MapServer', 'http://test2.com/MapServer'];\n      const source = new TileArcGISRest(options);\n      const urls = source.getUrls();\n      expect(urls).to.eql(['http://test.com/MapServer', 'http://test2.com/MapServer']);\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"verify setting urls when not set yet","suites":["ol.source.TileArcGISRest","#setUrls"],"updatePoint":{"line":175,"column":44,"index":7566},"line":175,"code":"    it('verify setting urls when not set yet', function () {\n      const source = new TileArcGISRest(options);\n      source.setUrls(['http://test.com/MapServer', 'http://test2.com/MapServer']);\n      const urls = source.getUrls();\n      expect(urls).to.eql(['http://test.com/MapServer', 'http://test2.com/MapServer']);\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"verify setting urls with existing list","suites":["ol.source.TileArcGISRest","#setUrls"],"updatePoint":{"line":181,"column":46,"index":7895},"line":181,"code":"    it('verify setting urls with existing list', function () {\n      options.urls = ['http://test.com/MapServer', 'http://test2.com/MapServer'];\n      const source = new TileArcGISRest(options);\n      source.setUrls(['http://test3.com/MapServer', 'http://test4.com/MapServer']);\n      const urls = source.getUrls();\n      expect(urls).to.eql(['http://test3.com/MapServer', 'http://test4.com/MapServer']);\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"verify setting url with no urls","suites":["ol.source.TileArcGISRest","#setUrl"],"updatePoint":{"line":190,"column":39,"index":8343},"line":190,"code":"    it('verify setting url with no urls', function () {\n      const source = new TileArcGISRest(options);\n      source.setUrl('http://test.com/MapServer');\n      const urls = source.getUrls();\n      expect(urls).to.eql(['http://test.com/MapServer']);\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"verify setting url with list of urls","suites":["ol.source.TileArcGISRest","#setUrl"],"updatePoint":{"line":196,"column":44,"index":8607},"line":196,"code":"    it('verify setting url with list of urls', function () {\n      options.urls = ['http://test.com/MapServer', 'http://test2.com/MapServer'];\n      const source = new TileArcGISRest(options);\n      source.setUrl('http://test3.com/MapServer');\n      const urls = source.getUrls();\n      expect(urls).to.eql(['http://test3.com/MapServer']);\n      const tileUrl = source.tileUrlFunction([0, 0, 0], 1, getProjection('EPSG:4326'));\n      expect(tileUrl.indexOf(urls[0])).to.be(0);\n    });","file":"browser/spec/ol/source/tilearcgisrest.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/TileImage","#getInterpolate()"],"updatePoint":{"line":24,"column":26,"index":1354},"line":24,"code":"    it('is true by default', function () {\n      const source = new TileImage({});\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/TileImage","#getInterpolate()"],"updatePoint":{"line":28,"column":55,"index":1525},"line":28,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new TileImage({\n        interpolate: false\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"uses the cacheSize for reprojected tile caches","suites":["ol/source/TileImage","#getTileCacheForProjection"],"updatePoint":{"line":36,"column":54,"index":1791},"line":36,"code":"    it('uses the cacheSize for reprojected tile caches', function () {\n      const source = createSource(undefined, undefined, 442);\n      const tileCache = source.getTileCacheForProjection(getProjection('EPSG:4326'));\n      expect(tileCache.highWaterMark).to.be(442);\n      expect(tileCache).to.not.equal(source.getTileCacheForProjection(source.getProjection()));\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"uses the tilegrid for given projection","suites":["ol/source/TileImage","#setTileGridForProjection"],"updatePoint":{"line":44,"column":46,"index":2216},"line":44,"code":"    it('uses the tilegrid for given projection', function () {\n      const source = createSource();\n      const tileGrid = createForProjection('EPSG:4326', 3, [10, 20]);\n      source.setTileGridForProjection('EPSG:4326', tileGrid);\n      const retrieved = source.getTileGridForProjection(getProjection('EPSG:4326'));\n      expect(retrieved).to.be(tileGrid);\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"refreshes the source","suites":["ol/source/TileImage","#refresh"],"updatePoint":{"line":53,"column":28,"index":2607},"line":53,"code":"    it('refreshes the source', function () {\n      const source = createSource();\n      let loaded = 0;\n      source.setTileLoadFunction(() => ++loaded);\n      source.getTile(0, 0, 0, 1, getProjection('EPSG:3857')).load();\n      expect(loaded).to.be(1);\n      source.getTile(0, 0, 0, 1, getProjection('EPSG:3857')).load();\n      expect(loaded).to.be(1);\n      const revision = source.getRevision();\n      source.refresh();\n      expect(source.getRevision()).to.be(revision + 1);\n      source.getTile(0, 0, 0, 1, getProjection('EPSG:3857')).load();\n      expect(loaded).to.be(2);\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"refreshes the source when raster reprojection is used","suites":["ol/source/TileImage","#refresh"],"updatePoint":{"line":67,"column":61,"index":3227},"line":67,"code":"    it('refreshes the source when raster reprojection is used', function () {\n      const source = createSource();\n      let loaded = 0;\n      source.setTileLoadFunction(() => ++loaded);\n      source.getTile(0, 0, 0, 1, getProjection('EPSG:4326')).load();\n      expect(loaded).to.be(16384);\n      source.getTile(0, 0, 0, 1, getProjection('EPSG:4326')).load();\n      expect(loaded).to.be(16384);\n      const revision = source.getRevision();\n      source.refresh();\n      expect(source.getRevision()).to.be(revision + 1);\n      source.getTile(0, 0, 0, 1, getProjection('EPSG:4326')).load();\n      expect(loaded).to.be(16384 * 2);\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"gets the tile from the cache","suites":["ol/source/TileImage","#getTileInternal"],"updatePoint":{"line":91,"column":36,"index":4197},"line":91,"code":"    it('gets the tile from the cache', function () {\n      const returnedTile = source.getTileInternal(0, 0, 0, 1, getProjection('EPSG:3857'));\n      expect(returnedTile).to.be(tile);\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"returns a tile with no interim tile","suites":["ol/source/TileImage","#getTileInternal","change a dynamic param","tile is not loaded"],"updatePoint":{"line":97,"column":47,"index":4504},"line":97,"code":"        it('returns a tile with no interim tile', function () {\n          source.getKey = function () {\n            return 'key0';\n          };\n          const returnedTile = source.getTileInternal(0, 0, 0, 1, getProjection('EPSG:3857'));\n          expect(returnedTile).not.to.be(tile);\n          expect(returnedTile.key).to.be('key0');\n          expect(returnedTile.interimTile).to.be(null);\n        });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"returns a tile with interim tile","suites":["ol/source/TileImage","#getTileInternal","change a dynamic param","tile is loaded"],"updatePoint":{"line":108,"column":44,"index":4963},"line":108,"code":"        it('returns a tile with interim tile', function () {\n          source.getKey = function () {\n            return 'key0';\n          };\n          tile.state = 2; // LOADED\n          const returnedTile = source.getTileInternal(0, 0, 0, 1, getProjection('EPSG:3857'));\n          expect(returnedTile).not.to.be(tile);\n          expect(returnedTile.key).to.be('key0');\n          expect(returnedTile.interimTile).to.be(tile);\n        });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"returns a tile with interim tile","suites":["ol/source/TileImage","#getTileInternal","change a dynamic param","tile is not loaded but interim tile is"],"updatePoint":{"line":120,"column":44,"index":5482},"line":120,"code":"        it('returns a tile with interim tile', function () {\n          let dynamicParamsKey, returnedTile;\n          source.getKey = function () {\n            return dynamicParamsKey;\n          };\n          dynamicParamsKey = 'key0';\n          tile.state = 2; // LOADED\n          returnedTile = source.getTileInternal(0, 0, 0, 1, getProjection('EPSG:3857'));\n          dynamicParamsKey = 'key1';\n          returnedTile = source.getTileInternal(0, 0, 0, 1, getProjection('EPSG:3857'));\n          expect(returnedTile).not.to.be(tile);\n          expect(returnedTile.key).to.be('key1');\n          expect(returnedTile.interimTile).to.be(tile);\n        });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"does not do reprojection for identity","suites":["ol/source/TileImage","#getTile"],"updatePoint":{"line":138,"column":45,"index":6195},"line":138,"code":"    it('does not do reprojection for identity', function () {\n      const source3857 = createSource('EPSG:3857');\n      const tile3857 = source3857.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      expect(tile3857).to.be.a(ImageTile);\n      expect(tile3857).not.to.be.a(ReprojTile);\n      const projXXX = new Projection({\n        code: 'XXX',\n        units: 'degrees'\n      });\n      const sourceXXX = createSource(projXXX);\n      const tileXXX = sourceXXX.getTile(0, 0, 0, 1, projXXX);\n      expect(tileXXX).to.be.a(ImageTile);\n      expect(tileXXX).not.to.be.a(ReprojTile);\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"can handle source projection without extent and units","suites":["ol/source/TileImage","#getTile"],"updatePoint":{"line":161,"column":61,"index":7074},"line":161,"code":"    it('can handle source projection without extent and units', function (done) {\n      const source = createSource('4326_noextentnounits', createXYZ({\n        extent: [-180, -90, 180, 90],\n        tileSize: [2, 2]\n      }));\n      const tile = source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      expect(tile).to.be.a(ReprojTile);\n      listen(tile, 'change', function () {\n        if (tile.getState() == 2) {\n          // LOADED\n          done();\n        }\n      });\n      tile.load();\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"can handle target projection without extent and units","suites":["ol/source/TileImage","#getTile"],"updatePoint":{"line":176,"column":61,"index":7579},"line":176,"code":"    it('can handle target projection without extent and units', function (done) {\n      const proj = getProjection('4326_noextentnounits');\n      const source = createSource();\n      source.setTileGridForProjection(proj, createXYZ({\n        extent: WORLD_EXTENT,\n        tileSize: [2, 2]\n      }));\n      const tile = source.getTile(0, 0, 0, 1, proj);\n      expect(tile).to.be.a(ReprojTile);\n      listen(tile, 'change', function () {\n        if (tile.getState() == 2) {\n          // LOADED\n          done();\n        }\n      });\n      tile.load();\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"dispatches tileloadstart and tileloadend events","suites":["ol/source/TileImage","tile load events"],"updatePoint":{"line":201,"column":55,"index":8301},"line":201,"code":"    it('dispatches tileloadstart and tileloadend events', function () {\n      source.setTileLoadFunction(function (tile) {\n        tile.setState(TileState.LOADED);\n      });\n      const startSpy = sinon.spy();\n      source.on('tileloadstart', startSpy);\n      const endSpy = sinon.spy();\n      source.on('tileloadend', endSpy);\n      const tile = source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      tile.load();\n      expect(startSpy.callCount).to.be(1);\n      expect(endSpy.callCount).to.be(1);\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"works for loading-error-loading-loaded sequences","suites":["ol/source/TileImage","tile load events"],"updatePoint":{"line":214,"column":56,"index":8816},"line":214,"code":"    it('works for loading-error-loading-loaded sequences', function (done) {\n      source.setTileLoadFunction(function (tile) {\n        tile.setState(tile.state == TileState.ERROR ? TileState.LOADED : TileState.ERROR);\n      });\n      const startSpy = sinon.spy();\n      source.on('tileloadstart', startSpy);\n      const errorSpy = sinon.spy();\n      source.on('tileloaderror', function (e) {\n        setTimeout(function () {\n          e.tile.setState(TileState.LOADING);\n          e.tile.setState(TileState.LOADED);\n        }, 0);\n        errorSpy();\n      });\n      source.on('tileloadend', function () {\n        expect(startSpy.callCount).to.be(2);\n        expect(errorSpy.callCount).to.be(1);\n        done();\n      });\n      const tile = source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      tile.load();\n    });","file":"browser/spec/ol/source/TileImage.test.js","skipped":false,"dir":"test"},{"name":"returns a tileJSON source","suites":["ol/source/TileJSON","constructor"],"updatePoint":{"line":7,"column":33,"index":373},"line":7,"code":"    it('returns a tileJSON source', function () {\n      const source = new TileJSON({\n        url: 'spec/ol/data/tilejson.json'\n      });\n      expect(source).to.be.a(Source);\n      expect(source).to.be.a(TileJSON);\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/TileJSON","#getInterpolate()"],"updatePoint":{"line":16,"column":26,"index":642},"line":16,"code":"    it('is true by default', function () {\n      const source = new TileJSON({\n        url: 'spec/ol/data/tilejson.json'\n      });\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/TileJSON","#getInterpolate()"],"updatePoint":{"line":22,"column":55,"index":861},"line":22,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new TileJSON({\n        interpolate: false,\n        url: 'spec/ol/data/tilejson.json'\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"parses the tilejson file","suites":["ol/source/TileJSON","#getTileJSON"],"updatePoint":{"line":31,"column":32,"index":1133},"line":31,"code":"    it('parses the tilejson file', function () {\n      const source = new TileJSON({\n        url: 'spec/ol/data/tilejson.json'\n      });\n      source.on('change', function () {\n        if (source.getState() === 'ready') {\n          const tileJSON = source.getTileJSON();\n          expect(tileJSON.name).to.eql('Geography Class');\n          expect(tileJSON.version).to.eql('1.0.0');\n        }\n      });\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"parses inline TileJSON","suites":["ol/source/TileJSON","#getTileJSON"],"updatePoint":{"line":63,"column":30,"index":2677},"line":63,"code":"    it('parses inline TileJSON', function () {\n      const source = new TileJSON({\n        tileJSON: tileJSON\n      });\n      expect(source.getState()).to.be('ready');\n      expect(source.getTileUrlFunction()([0, 0, 0])).to.be('https://a.tiles.mapbox.com/v3/mapbox.geography-class/0/0/0.png');\n      expect(source.getTileUrlFunction()([1, 0, 0])).to.be('https://a.tiles.mapbox.com/v3/mapbox.geography-class/1/0/0.png');\n      expect(source.getTileUrlFunction()([1, 0, 1])).to.be('https://b.tiles.mapbox.com/v3/mapbox.geography-class/1/0/1.png');\n      expect(source.getTileUrlFunction()([1, 1, 0])).to.be('https://c.tiles.mapbox.com/v3/mapbox.geography-class/1/1/0.png');\n      expect(source.getTileUrlFunction()([1, 1, 1])).to.be('https://d.tiles.mapbox.com/v3/mapbox.geography-class/1/1/1.png');\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"returns attributions, but not when outside bounds","suites":["ol/source/TileJSON","#getTileJSON"],"updatePoint":{"line":74,"column":57,"index":3510},"line":74,"code":"    it('returns attributions, but not when outside bounds', function () {\n      tileJSON.bounds = [-10.764179999935878, 49.528423000201656, 1.9134115551745678, 61.3311509999582];\n      const source = new TileJSON({\n        tileJSON: tileJSON\n      });\n      expect(source.getState()).to.be('ready');\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      const frameState = {};\n      frameState.extent = transformExtent([1, 51, 2, 52], 'EPSG:4326', 'EPSG:3857');\n      expect(attributions(frameState)).to.eql(['TileMill']);\n      frameState.extent = transformExtent([2, 51, 3, 52], 'EPSG:4326', 'EPSG:3857');\n      expect(attributions(frameState)).to.be(null);\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"attributions bounds default to the tilegrid extent","suites":["ol/source/TileJSON","#getTileJSON"],"updatePoint":{"line":89,"column":58,"index":4281},"line":89,"code":"    it('attributions bounds default to the tilegrid extent', function () {\n      delete tileJSON.bounds;\n      const source = new TileJSON({\n        tileJSON: tileJSON\n      });\n      expect(source.getState()).to.be('ready');\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n      const frameState = {};\n      frameState.extent = transformExtent([1, 51, 2, 52], 'EPSG:4326', 'EPSG:3857');\n      expect(attributions(frameState)).to.eql(['TileMill']);\n      frameState.extent = transformExtent([2, 51, 3, 52], 'EPSG:4326', 'EPSG:3857');\n      expect(attributions(frameState)).to.eql(['TileMill']);\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"returns error on HTTP 404","suites":["ol/source/TileJSON","#getState"],"updatePoint":{"line":106,"column":33,"index":5005},"line":106,"code":"    it('returns error on HTTP 404', function () {\n      const source = new TileJSON({\n        url: 'invalid.jsonp'\n      });\n      source.on('change', function () {\n        expect(source.getState()).to.eql('error');\n        expect(source.getTileJSON()).to.eql(null);\n      });\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"returns error on CORS issues","suites":["ol/source/TileJSON","#getState"],"updatePoint":{"line":115,"column":36,"index":5293},"line":115,"code":"    it('returns error on CORS issues', function () {\n      const source = new TileJSON({\n        url: 'http://example.com'\n      });\n      source.on('change', function () {\n        expect(source.getState()).to.eql('error');\n        expect(source.getTileJSON()).to.eql(null);\n      });\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"returns error on JSON parsing issues","suites":["ol/source/TileJSON","#getState"],"updatePoint":{"line":124,"column":44,"index":5594},"line":124,"code":"    it('returns error on JSON parsing issues', function () {\n      const source = new TileJSON({\n        url: '/'\n      });\n      source.on('change', function () {\n        expect(source.getState()).to.eql('error');\n        expect(source.getTileJSON()).to.eql(null);\n      });\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"uses the correct tile coordinates","suites":["ol/source/TileJSON","tileUrlFunction"],"updatePoint":{"line":148,"column":41,"index":6276},"line":148,"code":"    it('uses the correct tile coordinates', function () {\n      const coordinate = [829330.2064098881, 5933916.615134273];\n      const regex = /\\/([0-9]*\\/[0-9]*\\/[0-9]*)\\.png$/;\n      let tileUrl;\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 0));\n      expect(tileUrl.match(regex)[1]).to.eql('0/0/0');\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 1));\n      expect(tileUrl.match(regex)[1]).to.eql('1/1/0');\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 2));\n      expect(tileUrl.match(regex)[1]).to.eql('2/2/1');\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 3));\n      expect(tileUrl.match(regex)[1]).to.eql('3/4/2');\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 4));\n      expect(tileUrl.match(regex)[1]).to.eql('4/8/5');\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 5));\n      expect(tileUrl.match(regex)[1]).to.eql('5/16/11');\n      tileUrl = source.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 6));\n      expect(tileUrl.match(regex)[1]).to.eql('6/33/22');\n    });","file":"browser/spec/ol/source/TileJSON.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without url or urls params","suites":["ol/source/TileWMS","constructor"],"updatePoint":{"line":24,"column":53,"index":781},"line":24,"code":"    it('can be constructed without url or urls params', function () {\n      const source = new TileWMS({\n        projection: 'EPSG:3857',\n        tileGrid: createXYZ({\n          maxZoom: 6\n        })\n      });\n      expect(source).to.be.an(TileWMS);\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/TileWMS","#getInterpolate()"],"updatePoint":{"line":35,"column":26,"index":1064},"line":35,"code":"    it('is true by default', function () {\n      const source = new TileWMS();\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/TileWMS","#getInterpolate()"],"updatePoint":{"line":39,"column":55,"index":1231},"line":39,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new TileWMS({\n        interpolate: false\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"returns a tile with the expected URL","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":47,"column":44,"index":1467},"line":47,"code":"    it('returns a tile with the expected URL', function () {\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 6, 1, getProjection('EPSG:3857'));\n      expect(tile).to.be.an(ImageTile);\n      const uri = new URL(tile.src_);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      const bbox = queryData.get('BBOX').split(',').map(parseFloat);\n      expect(bbox[0]).roughlyEqual(-10018754.171394622, 1e-9);\n      expect(bbox[1]).roughlyEqual(-15028131.257091936, 1e-9);\n      expect(bbox[2]).roughlyEqual(-5009377.085697311, 1e-9);\n      expect(bbox[3]).roughlyEqual(-10018754.171394624, 1e-9);\n      expect(queryData.get('CRS')).to.be('EPSG:3857');\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('HEIGHT')).to.be('256');\n      expect(queryData.get('LAYERS')).to.be('layer');\n      expect(queryData.get('REQUEST')).to.be('GetMap');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('SRS')).to.be(null);\n      expect(queryData.get('STYLES')).to.be('');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('WIDTH')).to.be('256');\n      expect(uri.hash.replace('#', '')).to.be.empty();\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"returns a larger tile when a gutter is specified","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":74,"column":56,"index":2884},"line":74,"code":"    it('returns a larger tile when a gutter is specified', function () {\n      options.gutter = 16;\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 6, 1, getProjection('EPSG:3857'));\n      expect(tile).to.be.an(ImageTile);\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      const bbox = queryData.get('BBOX').split(',');\n      const expected = [-10331840.239250705, -15341217.324948018, -4696291.017841229, -9705668.103538541];\n      for (let i = 0, ii = bbox.length; i < ii; ++i) {\n        expect(parseFloat(bbox[i])).to.roughlyEqual(expected[i], 1e-9);\n      }\n      expect(queryData.get('HEIGHT')).to.be('288');\n      expect(queryData.get('WIDTH')).to.be('288');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"sets the SRS query value instead of CRS if version < 1.3","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":89,"column":64,"index":3636},"line":89,"code":"    it('sets the SRS query value instead of CRS if version < 1.3', function () {\n      options.params.VERSION = '1.2';\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 2, 1, getProjection('EPSG:4326'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('CRS')).to.be(null);\n      expect(queryData.get('SRS')).to.be('EPSG:4326');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"allows various parameters to be overridden","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":98,"column":50,"index":4050},"line":98,"code":"    it('allows various parameters to be overridden', function () {\n      options.params.FORMAT = 'image/jpeg';\n      options.params.TRANSPARENT = false;\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 2, 1, getProjection('EPSG:4326'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT')).to.be('image/jpeg');\n      expect(queryData.get('TRANSPARENT')).to.be('false');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"does not add a STYLES= option if one is specified","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":108,"column":57,"index":4534},"line":108,"code":"    it('does not add a STYLES= option if one is specified', function () {\n      options.params.STYLES = 'foo';\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 2, 1, getProjection('EPSG:4326'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('STYLES')).to.be('foo');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"changes the BBOX order for EN axis orientations","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":116,"column":55,"index":4901},"line":116,"code":"    it('changes the BBOX order for EN axis orientations', function () {\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 2, 1, getProjection('EPSG:4326'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('-45,-90,0,-45');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"uses EN BBOX order if version < 1.3","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":123,"column":43,"index":5227},"line":123,"code":"    it('uses EN BBOX order if version < 1.3', function () {\n      options.params.VERSION = '1.1.0';\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 2, 1, getProjection('CRS:84'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('-90,-45,-45,0');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"sets FORMAT_OPTIONS when the server is GeoServer","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":131,"column":56,"index":5603},"line":131,"code":"    it('sets FORMAT_OPTIONS when the server is GeoServer', function () {\n      options.serverType = 'geoserver';\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 2, 2, getProjection('CRS:84'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT_OPTIONS')).to.be('dpi:180');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"extends FORMAT_OPTIONS if it is already present","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":139,"column":55,"index":5982},"line":139,"code":"    it('extends FORMAT_OPTIONS if it is already present', function () {\n      options.serverType = 'geoserver';\n      options.params.FORMAT_OPTIONS = 'param1:value1';\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 2, 2, getProjection('CRS:84'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT_OPTIONS')).to.be('param1:value1;dpi:180');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"rounds FORMAT_OPTIONS to an integer when the server is GeoServer","suites":["ol/source/TileWMS","#getTile"],"updatePoint":{"line":148,"column":72,"index":6447},"line":148,"code":"    it('rounds FORMAT_OPTIONS to an integer when the server is GeoServer', function () {\n      options.serverType = 'geoserver';\n      const source = new TileWMS(options);\n      const tile = source.getTile(3, 2, 2, 1.325, getProjection('CRS:84'));\n      const uri = new URL(tile.src_);\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT_OPTIONS')).to.be('dpi:119');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"can be used when obtained through #getTileUrlFunction","suites":["ol/source/TileWMS","#tileUrlFunction"],"updatePoint":{"line":158,"column":61,"index":6887},"line":158,"code":"    it('can be used when obtained through #getTileUrlFunction', function () {\n      options.extent = [-80, -40, -50, -10];\n      const source = new TileWMS(options);\n      const tileCoord = [3, 2, 2];\n      expect(function () {\n        source.getTileUrlFunction()(tileCoord, 1, getProjection('EPSG:4326'));\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"returns a tile if it is contained within layers extent","suites":["ol/source/TileWMS","#tileUrlFunction"],"updatePoint":{"line":166,"column":62,"index":7237},"line":166,"code":"    it('returns a tile if it is contained within layers extent', function () {\n      options.extent = [-80, -40, -50, -10];\n      const source = new TileWMS(options);\n      const tileCoord = [3, 2, 2];\n      const url = source.tileUrlFunction(tileCoord, 1, getProjection('EPSG:4326'));\n      const uri = new URL(url);\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('-45,-90,0,-45');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"returns a tile if it intersects layers extent","suites":["ol/source/TileWMS","#tileUrlFunction"],"updatePoint":{"line":175,"column":53,"index":7656},"line":175,"code":"    it('returns a tile if it intersects layers extent', function () {\n      options.extent = [-80, -40, -40, -10];\n      const source = new TileWMS(options);\n      const tileCoord = [3, 3, 2];\n      const url = source.tileUrlFunction(tileCoord, 1, getProjection('EPSG:4326'));\n      const uri = new URL(url);\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('-45,-45,0,0');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"works with non-square tiles","suites":["ol/source/TileWMS","#tileUrlFunction"],"updatePoint":{"line":184,"column":35,"index":8055},"line":184,"code":"    it('works with non-square tiles', function () {\n      options.tileGrid = new TileGrid({\n        tileSize: [640, 320],\n        resolutions: [1.40625, 0.703125, 0.3515625, 0.17578125],\n        origin: [-180, -90]\n      });\n      const source = new TileWMS(options);\n      const tileCoord = [3, 3, 2];\n      const url = source.tileUrlFunction(tileCoord, 1, getProjection('EPSG:4326'));\n      const uri = new URL(url);\n      const queryData = uri.searchParams;\n      expect(queryData.get('WIDTH')).to.be('640');\n      expect(queryData.get('HEIGHT')).to.be('320');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"returns the expected GetFeatureInfo URL","suites":["ol/source/TileWMS","#getFeatureInfoUrl"],"updatePoint":{"line":200,"column":47,"index":8692},"line":200,"code":"    it('returns the expected GetFeatureInfo URL', function () {\n      const source = new TileWMS(options);\n      source.pixelRatio_ = 1;\n      const url = source.getFeatureInfoUrl([-7000000, -12000000], 19567.87924100512, getProjection('EPSG:3857'), {\n        INFO_FORMAT: 'text/plain'\n      });\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      const bbox = queryData.get('BBOX').split(',').map(parseFloat);\n      expect(bbox[0]).roughlyEqual(-10018754.171394622, 1e-9);\n      expect(bbox[1]).roughlyEqual(-15028131.257091936, 1e-9);\n      expect(bbox[2]).roughlyEqual(-5009377.085697311, 1e-9);\n      expect(bbox[3]).roughlyEqual(-10018754.171394624, 1e-9);\n      expect(queryData.get('CRS')).to.be('EPSG:3857');\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('HEIGHT')).to.be('256');\n      expect(queryData.get('I')).to.be('154');\n      expect(queryData.get('J')).to.be('101');\n      expect(queryData.get('LAYERS')).to.be('layer');\n      expect(queryData.get('QUERY_LAYERS')).to.be('layer');\n      expect(queryData.get('REQUEST')).to.be('GetFeatureInfo');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('SRS')).to.be(null);\n      expect(queryData.get('STYLES')).to.be('');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('WIDTH')).to.be('256');\n      expect(uri.hash.replace('#', '')).to.be.empty();\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"returns the expected GetFeatureInfo URL when source's projection is different from the parameter","suites":["ol/source/TileWMS","#getFeatureInfoUrl"],"updatePoint":{"line":232,"column":104,"index":10387},"line":232,"code":"    it(\"returns the expected GetFeatureInfo URL when source's projection is different from the parameter\", function () {\n      const source = new TileWMS(optionsReproj);\n      source.pixelRatio_ = 1;\n      const url = source.getFeatureInfoUrl([-7000000, -12000000], 19567.87924100512, getProjection('EPSG:3857'), {\n        INFO_FORMAT: 'text/plain'\n      });\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('BBOX')).to.be('-79.17133464081945,-90,-66.51326044311186,-45');\n      expect(queryData.get('CRS')).to.be('EPSG:4326');\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('HEIGHT')).to.be('256');\n      expect(queryData.get('I')).to.be('517');\n      expect(queryData.get('J')).to.be('117');\n      expect(queryData.get('LAYERS')).to.be('layer');\n      expect(queryData.get('QUERY_LAYERS')).to.be('layer');\n      expect(queryData.get('REQUEST')).to.be('GetFeatureInfo');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('SRS')).to.be(null);\n      expect(queryData.get('STYLES')).to.be('');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('WIDTH')).to.be('256');\n      expect(uri.hash.replace('#', '')).to.be.empty();\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"sets the QUERY_LAYERS param as expected","suites":["ol/source/TileWMS","#getFeatureInfoUrl"],"updatePoint":{"line":260,"column":47,"index":11803},"line":260,"code":"    it('sets the QUERY_LAYERS param as expected', function () {\n      const source = new TileWMS(options);\n      source.pixelRatio_ = 1;\n      const url = source.getFeatureInfoUrl([-7000000, -12000000], 19567.87924100512, getProjection('EPSG:3857'), {\n        INFO_FORMAT: 'text/plain',\n        QUERY_LAYERS: 'foo,bar'\n      });\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      const bbox = queryData.get('BBOX').split(',').map(parseFloat);\n      expect(bbox[0]).roughlyEqual(-10018754.171394622, 1e-9);\n      expect(bbox[1]).roughlyEqual(-15028131.257091936, 1e-9);\n      expect(bbox[2]).roughlyEqual(-5009377.085697311, 1e-9);\n      expect(bbox[3]).roughlyEqual(-10018754.171394624, 1e-9);\n      expect(queryData.get('CRS')).to.be('EPSG:3857');\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('HEIGHT')).to.be('256');\n      expect(queryData.get('I')).to.be('154');\n      expect(queryData.get('J')).to.be('101');\n      expect(queryData.get('LAYERS')).to.be('layer');\n      expect(queryData.get('QUERY_LAYERS')).to.be('foo,bar');\n      expect(queryData.get('REQUEST')).to.be('GetFeatureInfo');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('SRS')).to.be(null);\n      expect(queryData.get('STYLES')).to.be('');\n      expect(queryData.get('TRANSPARENT')).to.be('true');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('WIDTH')).to.be('256');\n      expect(uri.hash.replace('#', '')).to.be.empty();\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"returns the getLegenGraphic url as expected","suites":["ol/source/TileWMS","#getLegendGraphicUrl"],"updatePoint":{"line":295,"column":51,"index":13535},"line":295,"code":"    it('returns the getLegenGraphic url as expected', function () {\n      const source = new TileWMS(options);\n      const url = source.getLegendUrl(0.1);\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT')).to.be('image/png');\n      expect(queryData.get('LAYER')).to.be('layer');\n      expect(queryData.get('REQUEST')).to.be('GetLegendGraphic');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('SCALE')).to.be('357.14285714285717');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"does not include SCALE if no resolution was provided","suites":["ol/source/TileWMS","#getLegendGraphicUrl"],"updatePoint":{"line":310,"column":60,"index":14266},"line":310,"code":"    it('does not include SCALE if no resolution was provided', function () {\n      const source = new TileWMS(options);\n      const url = source.getLegendUrl();\n      const uri = new URL(url);\n      const queryData = uri.searchParams;\n      expect(queryData.get('SCALE')).to.be(null);\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"adds additional params as expected","suites":["ol/source/TileWMS","#getLegendGraphicUrl"],"updatePoint":{"line":317,"column":42,"index":14541},"line":317,"code":"    it('adds additional params as expected', function () {\n      const source = new TileWMS(options);\n      const url = source.getLegendUrl(0.1, {\n        STYLE: 'STYLE_VALUE',\n        FEATURETYPE: 'FEATURETYPE_VALUE',\n        RULE: 'RULE_VALUE',\n        SLD: 'SLD_VALUE',\n        SLD_BODY: 'SLD_BODY_VALUE',\n        FORMAT: 'FORMAT_VALUE',\n        WIDTH: 'WIDTH_VALUE',\n        HEIGHT: 'HEIGHT_VALUE',\n        EXCEPTIONS: 'EXCEPTIONS_VALUE',\n        LANGUAGE: 'LANGUAGE_VALUE',\n        LAYER: 'LAYER_VALUE'\n      });\n      const uri = new URL(url);\n      expect(uri.protocol).to.be('http:');\n      expect(uri.hostname).to.be('example.com');\n      expect(uri.pathname).to.be('/wms');\n      const queryData = uri.searchParams;\n      expect(queryData.get('FORMAT')).to.be('FORMAT_VALUE');\n      expect(queryData.get('LAYER')).to.be('LAYER_VALUE');\n      expect(queryData.get('REQUEST')).to.be('GetLegendGraphic');\n      expect(queryData.get('SERVICE')).to.be('WMS');\n      expect(queryData.get('VERSION')).to.be('1.3.0');\n      expect(queryData.get('SCALE')).to.be('357.14285714285717');\n      expect(queryData.get('STYLE')).to.be('STYLE_VALUE');\n      expect(queryData.get('FEATURETYPE')).to.be('FEATURETYPE_VALUE');\n      expect(queryData.get('RULE')).to.be('RULE_VALUE');\n      expect(queryData.get('SLD')).to.be('SLD_VALUE');\n      expect(queryData.get('SLD_BODY')).to.be('SLD_BODY_VALUE');\n      expect(queryData.get('FORMAT')).to.be('FORMAT_VALUE');\n      expect(queryData.get('WIDTH')).to.be('WIDTH_VALUE');\n      expect(queryData.get('HEIGHT')).to.be('HEIGHT_VALUE');\n      expect(queryData.get('EXCEPTIONS')).to.be('EXCEPTIONS_VALUE');\n      expect(queryData.get('LANGUAGE')).to.be('LANGUAGE_VALUE');\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"sets the correct url","suites":["ol/source/TileWMS","#setUrl()"],"updatePoint":{"line":356,"column":28,"index":16287},"line":356,"code":"    it('sets the correct url', function () {\n      const source = new TileWMS(options);\n      const url = 'http://foo/';\n      source.setUrl(url);\n      const tileUrl = source.tileUrlFunction([0, 0, 0], 1, getProjection('EPSG:4326'));\n      expect(tileUrl.indexOf(url)).to.be(0);\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"updates the source key","suites":["ol/source/TileWMS","#setUrls()"],"updatePoint":{"line":365,"column":30,"index":16622},"line":365,"code":"    it('updates the source key', function () {\n      const source = new TileWMS({\n        urls: ['u1', 'u2']\n      });\n      const originalKey = source.getKey();\n      source.setUrls(['u3', 'u4']);\n      expect(source.getKey() !== originalKey).to.be(true);\n    });","file":"browser/spec/ol/source/TileWMS.test.js","skipped":false,"dir":"test"},{"name":"sets the URL for the source","suites":["ol/source/UrlTile","#setUrl()"],"updatePoint":{"line":6,"column":35,"index":314},"line":6,"code":"    it('sets the URL for the source', function () {\n      const source = new UrlTile({});\n      const url = 'https://example.com/';\n      source.setUrl(url);\n      expect(source.getUrls()).to.eql([url]);\n    });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"updates the key for the source","suites":["ol/source/UrlTile","#setUrl()"],"updatePoint":{"line":12,"column":38,"index":529},"line":12,"code":"    it('updates the key for the source', function () {\n      const source = new UrlTile({});\n      const url = 'https://example.com/';\n      source.setUrl(url);\n      expect(source.getKey()).to.eql(url);\n    });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"is false by default","suites":["ol/source/UrlTile","#getInterpolate()"],"updatePoint":{"line":20,"column":27,"index":782},"line":20,"code":"    it('is false by default', function () {\n      const source = new UrlTile({});\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"is true if constructed with interpolate: true","suites":["ol/source/UrlTile","#getInterpolate()"],"updatePoint":{"line":24,"column":53,"index":950},"line":24,"code":"    it('is true if constructed with interpolate: true', function () {\n      const source = new UrlTile({\n        interpolate: true\n      });\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"sets the URL for the source","suites":["ol/source/UrlTile","#setUrls()"],"updatePoint":{"line":32,"column":35,"index":1177},"line":32,"code":"    it('sets the URL for the source', function () {\n      const source = new UrlTile({});\n      const urls = ['https://a.example.com/', 'https://b.example.com/', 'https://c.example.com/'];\n      source.setUrls(urls);\n      expect(source.getUrls()).to.eql(urls);\n    });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"updates the key for the source","suites":["ol/source/UrlTile","#setUrls()"],"updatePoint":{"line":38,"column":38,"index":1450},"line":38,"code":"    it('updates the key for the source', function () {\n      const source = new UrlTile({});\n      const urls = ['https://a.example.com/', 'https://b.example.com/', 'https://c.example.com/'];\n      source.setUrls(urls);\n      expect(source.getKey()).to.eql(urls.join('\\n'));\n    });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"expands url template","suites":["ol/source/UrlTile","url option"],"updatePoint":{"line":46,"column":28,"index":1768},"line":46,"code":"    it('expands url template', function () {\n      const tileSource = new UrlTile({\n        url: '{1-3}'\n      });\n      const urls = tileSource.getUrls();\n      expect(urls).to.eql(['1', '2', '3']);\n    });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"returns the expected URL","suites":["ol/source/UrlTile","tileUrlFunction"],"updatePoint":{"line":67,"column":32,"index":2327},"line":67,"code":"    it('returns the expected URL', function () {\n      const coordinate = [829330.2064098881, 5933916.615134273];\n      let tileUrl;\n      tileUrl = tileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 0));\n      expect(tileUrl).to.eql('0/0/0');\n      tileUrl = tileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 1));\n      expect(tileUrl).to.eql('1/1/0');\n      tileUrl = tileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 2));\n      expect(tileUrl).to.eql('2/2/1');\n      tileUrl = tileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 3));\n      expect(tileUrl).to.eql('3/4/2');\n      tileUrl = tileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 4));\n      expect(tileUrl).to.eql('4/8/5');\n      tileUrl = tileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 5));\n      expect(tileUrl).to.eql('5/16/11');\n      tileUrl = tileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 6));\n      expect(tileUrl).to.eql('6/33/22');\n    });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"returns the expected URL","suites":["ol/source/UrlTile","tileUrlFunction","wrap x"],"updatePoint":{"line":86,"column":34,"index":3442},"line":86,"code":"      it('returns the expected URL', function () {\n        const projection = tileSource.getProjection();\n        let tileUrl = tileSource.tileUrlFunction(tileSource.getTileCoordForTileUrlFunction([6, -31, 22], projection));\n        expect(tileUrl).to.eql('6/33/22');\n        tileUrl = tileSource.tileUrlFunction(tileSource.getTileCoordForTileUrlFunction([6, 33, 22], projection));\n        expect(tileUrl).to.eql('6/33/22');\n        tileUrl = tileSource.tileUrlFunction(tileSource.getTileCoordForTileUrlFunction([6, 97, 22], projection));\n        expect(tileUrl).to.eql('6/33/22');\n      });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"returns the expected URL","suites":["ol/source/UrlTile","tileUrlFunction","crop y"],"updatePoint":{"line":97,"column":34,"index":4079},"line":97,"code":"      it('returns the expected URL', function () {\n        const projection = tileSource.getProjection();\n        let tileUrl = tileSource.tileUrlFunction(tileSource.getTileCoordForTileUrlFunction([6, 33, -1], projection));\n        expect(tileUrl).to.be(undefined);\n        tileUrl = tileSource.tileUrlFunction(tileSource.getTileCoordForTileUrlFunction([6, 33, 22], projection));\n        expect(tileUrl).to.eql('6/33/22');\n        tileUrl = tileSource.tileUrlFunction(tileSource.getTileCoordForTileUrlFunction([6, 33, 64], projection));\n        expect(tileUrl).to.be(undefined);\n      });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"returns the XYZ URL","suites":["ol/source/UrlTile","#getUrls","using a \"url\" option"],"updatePoint":{"line":124,"column":29,"index":5168},"line":124,"code":"      it('returns the XYZ URL', function () {\n        const urls = source.getUrls();\n        expect(urls).to.be.eql([url]);\n      });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"returns the XYZ URLs","suites":["ol/source/UrlTile","#getUrls","using a \"urls\" option"],"updatePoint":{"line":134,"column":30,"index":5514},"line":134,"code":"      it('returns the XYZ URLs', function () {\n        const urls = source.getUrls();\n        expect(urls).to.be.eql(['some_xyz_url1', 'some_xyz_url2']);\n      });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"returns null","suites":["ol/source/UrlTile","#getUrls","using a \"tileUrlFunction\""],"updatePoint":{"line":146,"column":22,"index":5918},"line":146,"code":"      it('returns null', function () {\n        const urls = source.getUrls();\n        expect(urls).to.be(null);\n      });","file":"browser/spec/ol/source/UrlTile.test.js","skipped":false,"dir":"test"},{"name":"needs to be constructed with url option","suites":["ol.source.UTFGrid","constructor"],"updatePoint":{"line":31,"column":47,"index":1024},"line":31,"code":"    it('needs to be constructed with url option', function () {\n      const source = new UTFGrid({\n        url: url\n      });\n      expect(source).to.be.an(UTFGrid);\n      expect(source).to.be.an(TileSource);\n      expect(function () {\n        // no options: will throw\n        return new UTFGrid();\n      }).to.throwException();\n      expect(function () {\n        // no url-option: will throw\n        return new UTFGrid({});\n      }).to.throwException();\n      expect(getUTFGrid()).to.be.an(UTFGrid);\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"is fired when the source is ready","suites":["ol.source.UTFGrid","change event (ready)"],"updatePoint":{"line":49,"column":41,"index":1583},"line":49,"code":"    it('is fired when the source is ready', function (done) {\n      const source = new UTFGrid({\n        url: url\n      });\n      expect(source.getState()).to.be('loading');\n      expect(source.tileGrid).to.be(null);\n      source.on('change', function (event) {\n        if (source.getState() === 'ready') {\n          expect(source.tileGrid).to.be.an(TileGrid);\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"is fired when the source fails to initialize","suites":["ol.source.UTFGrid","change event (error)"],"updatePoint":{"line":64,"column":52,"index":2060},"line":64,"code":"    it('is fired when the source fails to initialize', function (done) {\n      const source = new UTFGrid({\n        url: 'Bogus UTFGrid URL'\n      });\n      expect(source.getState()).to.be('loading');\n      expect(source.tileGrid).to.be(null);\n      source.on('change', function (event) {\n        if (source.getState() === 'error') {\n          expect(source.tileGrid).to.be(null);\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"sets up a tileGrid","suites":["ol.source.UTFGrid","#handleTileJSONResponse"],"updatePoint":{"line":79,"column":26,"index":2519},"line":79,"code":"    it('sets up a tileGrid', function () {\n      const source = getUTFGrid();\n      expect(source.getTileGrid()).to.be(null);\n      // call the handleTileJSONResponse method with our\n      // locally available tileJson (from `before`)\n      source.handleTileJSONResponse(tileJson);\n      const tileGrid = source.getTileGrid();\n      expect(tileGrid).to.not.be(null);\n      expect(tileGrid).to.be.an(TileGrid);\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"sets up a tilegrid with expected extent","suites":["ol.source.UTFGrid","#handleTileJSONResponse"],"updatePoint":{"line":89,"column":47,"index":2958},"line":89,"code":"    it('sets up a tilegrid with expected extent', function () {\n      const source = getUTFGrid();\n      // call the handleTileJSONResponse method with our\n      // locally available tileJson (from `before`)\n      source.handleTileJSONResponse(tileJson);\n      const tileGrid = source.getTileGrid();\n      const extent = tileGrid.getExtent();\n      const proj4326 = getProjection('EPSG:4326');\n      const proj3857 = getProjection('EPSG:3857');\n      const expectedExtent4326 = tileJson.bounds;\n      const expectedExtent3857 = transformExtent(expectedExtent4326, proj4326, proj3857);\n      expect(extent).to.eql(proj3857.getExtent());\n      expect(extent[0]).to.roughlyEqual(expectedExtent3857[0], 1e-8);\n      expect(extent[1]).to.roughlyEqual(expectedExtent3857[1], 1e-8);\n      expect(extent[2]).to.roughlyEqual(expectedExtent3857[2], 1e-8);\n      expect(extent[3]).to.roughlyEqual(expectedExtent3857[3], 1e-8);\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"sets up a tilegrid with expected minZoom","suites":["ol.source.UTFGrid","#handleTileJSONResponse"],"updatePoint":{"line":106,"column":48,"index":3883},"line":106,"code":"    it('sets up a tilegrid with expected minZoom', function () {\n      const source = getUTFGrid();\n      // call the handleTileJSONResponse method with our\n      // locally available tileJson (from `before`)\n      source.handleTileJSONResponse(tileJson);\n      const tileGrid = source.getTileGrid();\n      const minZoom = tileGrid.getMinZoom();\n      expect(minZoom).to.eql(tileJson.minzoom);\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"sets up a tilegrid with expected maxZoom","suites":["ol.source.UTFGrid","#handleTileJSONResponse"],"updatePoint":{"line":115,"column":48,"index":4285},"line":115,"code":"    it('sets up a tilegrid with expected maxZoom', function () {\n      const source = getUTFGrid();\n      // call the handleTileJSONResponse method with our\n      // locally available tileJson (from `before`)\n      source.handleTileJSONResponse(tileJson);\n      const tileGrid = source.getTileGrid();\n      const maxZoom = tileGrid.getMaxZoom();\n      expect(maxZoom).to.eql(tileJson.maxzoom);\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"sets up a template","suites":["ol.source.UTFGrid","#handleTileJSONResponse"],"updatePoint":{"line":124,"column":26,"index":4665},"line":124,"code":"    it('sets up a template', function () {\n      const source = getUTFGrid();\n      expect(source.getTemplate()).to.be(undefined);\n\n      // call the handleTileJSONResponse method with our\n      // locally available tileJson (from `before`)\n      source.handleTileJSONResponse(tileJson);\n      const template = source.getTemplate();\n      expect(template).to.not.be(undefined);\n      expect(template).to.be(tileJson.template);\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"sets up correct attribution","suites":["ol.source.UTFGrid","#handleTileJSONResponse"],"updatePoint":{"line":135,"column":35,"index":5109},"line":135,"code":"    it('sets up correct attribution', function () {\n      const source = getUTFGrid();\n      expect(source.getAttributions()).to.be(null);\n\n      // call the handleTileJSONResponse method with our\n      // locally available tileJson (from `before`)\n      source.handleTileJSONResponse(tileJson);\n      const attributions = source.getAttributions();\n      expect(attributions).to.not.be(null);\n      expect(typeof attributions).to.be('function');\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"sets correct state","suites":["ol.source.UTFGrid","#handleTileJSONResponse"],"updatePoint":{"line":146,"column":26,"index":5554},"line":146,"code":"    it('sets correct state', function () {\n      const source = getUTFGrid();\n      expect(source.getState()).to.be('loading');\n\n      // call the handleTileJSONResponse method with our\n      // locally available tileJson (from `before`)\n      source.handleTileJSONResponse(tileJson);\n      expect(source.getState()).to.be('ready');\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"calls callback with data if found","suites":["ol.source.UTFGrid","#forDataAtCoordinateAndResolution"],"updatePoint":{"line":205,"column":41,"index":8135},"line":205,"code":"    it('calls callback with data if found', function (done) {\n      const callback = function (data) {\n        expect(arguments).to.have.length(1);\n        expect(data).to.not.be(null);\n        expect('admin' in data).to.be(true);\n        expect(data.admin).to.be('Germany');\n        done();\n      };\n      source.forDataAtCoordinateAndResolution(bonn3857, resolutionZoom1, callback, true);\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"calls callback with `null` if not found","suites":["ol.source.UTFGrid","#forDataAtCoordinateAndResolution"],"updatePoint":{"line":215,"column":47,"index":8540},"line":215,"code":"    it('calls callback with `null` if not found', function (done) {\n      const callback = function (data) {\n        expect(arguments).to.have.length(1);\n        expect(data).to.be(null);\n        done();\n      };\n      source.forDataAtCoordinateAndResolution(noState3857, resolutionZoom1, callback, true);\n    });","file":"browser/spec/ol/source/utfgrid.test.js","skipped":false,"dir":"test"},{"name":"does not call the callback","suites":["ol.source.Vector","when empty","#forEachFeatureInExtent"],"updatePoint":{"line":28,"column":36,"index":1320},"line":28,"code":"      it('does not call the callback', function () {\n        const f = sinon.spy();\n        vectorSource.forEachFeatureInExtent(infiniteExtent, f);\n        expect(f.called).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array","suites":["ol.source.Vector","when empty","#getFeaturesInExtent"],"updatePoint":{"line":35,"column":32,"index":1572},"line":35,"code":"      it('returns an empty array', function () {\n        const features = vectorSource.getFeaturesInExtent(infiniteExtent);\n        expect(features).to.be.an(Array);\n        expect(features).to.be.empty();\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol.source.Vector","when empty","#isEmpty"],"updatePoint":{"line":42,"column":22,"index":1825},"line":42,"code":"      it('returns true', function () {\n        expect(vectorSource.isEmpty()).to.be(true);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns true without spatial index","suites":["ol.source.Vector","when empty","#isEmpty"],"updatePoint":{"line":45,"column":44,"index":1948},"line":45,"code":"      it('returns true without spatial index', function () {\n        const source = new VectorSource({\n          useSpatialIndex: false\n        });\n        expect(source.isEmpty()).to.be(true);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns false with geometry","suites":["ol.source.Vector","when empty","#isEmpty"],"updatePoint":{"line":51,"column":37,"index":2145},"line":51,"code":"      it('returns false with geometry', function () {\n        vectorSource.addFeature(new Feature(new Point([0, 0])));\n        expect(vectorSource.isEmpty()).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns false without spatial index and geometry","suites":["ol.source.Vector","when empty","#isEmpty"],"updatePoint":{"line":55,"column":58,"index":2348},"line":55,"code":"      it('returns false without spatial index and geometry', function () {\n        const source = new VectorSource({\n          useSpatialIndex: false\n        });\n        source.addFeature(new Feature(new Point([0, 0])));\n        expect(source.isEmpty()).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns false with null geometry","suites":["ol.source.Vector","when empty","#isEmpty"],"updatePoint":{"line":62,"column":42,"index":2610},"line":62,"code":"      it('returns false with null geometry', function () {\n        vectorSource.addFeature(new Feature());\n        expect(vectorSource.isEmpty()).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns false without spatial index and null geometry","suites":["ol.source.Vector","when empty","#isEmpty"],"updatePoint":{"line":66,"column":63,"index":2801},"line":66,"code":"      it('returns false without spatial index and null geometry', function () {\n        const source = new VectorSource({\n          useSpatialIndex: false\n        });\n        source.addFeature(new Feature());\n        expect(source.isEmpty()).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"can add a single point feature","suites":["ol.source.Vector","when empty","#addFeature"],"updatePoint":{"line":75,"column":40,"index":3094},"line":75,"code":"      it('can add a single point feature', function () {\n        vectorSource.addFeature(pointFeature);\n        const features = vectorSource.getFeaturesInExtent(infiniteExtent);\n        expect(features).to.be.an(Array);\n        expect(features).to.have.length(1);\n        expect(features[0]).to.be(pointFeature);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires a change event","suites":["ol.source.Vector","when empty","#addFeature"],"updatePoint":{"line":82,"column":30,"index":3408},"line":82,"code":"      it('fires a change event', function () {\n        const listener = sinon.spy();\n        listen(vectorSource, 'change', listener);\n        vectorSource.addFeature(pointFeature);\n        expect(listener.called).to.be(true);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"adds same id features only once","suites":["ol.source.Vector","when empty","#addFeature"],"updatePoint":{"line":88,"column":41,"index":3656},"line":88,"code":"      it('adds same id features only once', function () {\n        const source = new VectorSource();\n        const feature1 = new Feature();\n        feature1.setId('1');\n        const feature2 = new Feature();\n        feature2.setId('1');\n        source.addFeature(feature1);\n        source.addFeature(feature2);\n        expect(source.getFeatures().length).to.be(1);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns true for added feature without id","suites":["ol.source.Vector","when empty","#hasFeature"],"updatePoint":{"line":100,"column":51,"index":4093},"line":100,"code":"      it('returns true for added feature without id', function () {\n        const feature = new Feature();\n        vectorSource.addFeature(feature);\n        expect(vectorSource.hasFeature(feature)).to.be(true);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns true for added feature with id","suites":["ol.source.Vector","when empty","#hasFeature"],"updatePoint":{"line":105,"column":48,"index":4311},"line":105,"code":"      it('returns true for added feature with id', function () {\n        const feature = new Feature();\n        feature.setId('1');\n        vectorSource.addFeature(feature);\n        expect(vectorSource.hasFeature(feature)).to.be(true);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"return false for removed feature","suites":["ol.source.Vector","when empty","#hasFeature"],"updatePoint":{"line":111,"column":42,"index":4551},"line":111,"code":"      it('return false for removed feature', function () {\n        const feature = new Feature();\n        vectorSource.addFeature(feature);\n        vectorSource.removeFeature(feature);\n        expect(vectorSource.hasFeature(feature)).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns false for non-added feature","suites":["ol.source.Vector","when empty","#hasFeature"],"updatePoint":{"line":117,"column":45,"index":4812},"line":117,"code":"      it('returns false for non-added feature', function () {\n        const feature = new Feature();\n        expect(vectorSource.hasFeature(feature)).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns the expected feature","suites":["ol.source.Vector","when populated with 3 features","#getClosestFeatureToCoordinate"],"updatePoint":{"line":135,"column":38,"index":5452},"line":135,"code":"      it('returns the expected feature', function () {\n        const feature = vectorSource.getClosestFeatureToCoordinate([1, 9]);\n        expect(feature).to.be(features[1]);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns the expected feature when a filter is used","suites":["ol.source.Vector","when populated with 3 features","#getClosestFeatureToCoordinate"],"updatePoint":{"line":139,"column":60,"index":5659},"line":139,"code":"      it('returns the expected feature when a filter is used', function () {\n        const feature = vectorSource.getClosestFeatureToCoordinate([1, 9], function (feature) {\n          return feature.getGeometry().getType() == 'LineString';\n        });\n        expect(feature).to.be(features[0]);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"does not return the internal array when useSpatialIndex is false","suites":["ol.source.Vector","when populated with 3 features","#getFeatures"],"updatePoint":{"line":147,"column":74,"index":6029},"line":147,"code":"      it('does not return the internal array when useSpatialIndex is false', function () {\n        const noSpatialIndexSource = new VectorSource({\n          useSpatialIndex: false,\n          features: vectorSource.getFeatures()\n        });\n        expect(noSpatialIndexSource.getFeatures()).to.not.be(noSpatialIndexSource.getFeaturesCollection().getArray());\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"#refresh() reloads from server","suites":["ol.source.Vector","clear and refresh"],"updatePoint":{"line":189,"column":38,"index":7298},"line":189,"code":"    it('#refresh() reloads from server', function (done) {\n      expect(source.getFeatures()).to.have.length(1);\n      map.once('rendercomplete', function () {\n        expect(source.getFeatures()).to.have.length(1);\n        expect(spy.callCount).to.be(1);\n        done();\n      });\n      source.refresh();\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"#clear() removes all features from the source","suites":["ol.source.Vector","clear and refresh"],"updatePoint":{"line":198,"column":53,"index":7627},"line":198,"code":"    it('#clear() removes all features from the source', function (done) {\n      expect(source.getFeatures()).to.have.length(1);\n      map.once('rendercomplete', function () {\n        expect(source.getFeatures()).to.have.length(0);\n        expect(spy.callCount).to.be(0);\n        done();\n      });\n      source.clear();\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"After #setUrl(), refresh() loads from the new url","suites":["ol.source.Vector","clear and refresh"],"updatePoint":{"line":207,"column":57,"index":7958},"line":207,"code":"    it('After #setUrl(), refresh() loads from the new url', function (done) {\n      source.loader_.restore();\n      spy = undefined;\n      expect(source.getFeatures()).to.have.length(1);\n      const oldCoordinates = source.getFeatures()[0].getGeometry().getCoordinates();\n      map.on('rendercomplete', function () {\n        expect(source.getFeatures()).to.have.length(1);\n        const newCoordinates = source.getFeatures()[0].getGeometry().getCoordinates();\n        expect(newCoordinates).to.not.eql(oldCoordinates);\n        done();\n      });\n      source.setUrl('spec/ol/data/point.json');\n      source.refresh();\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"removes all features using fast path","suites":["ol.source.Vector","when populated with 10 random points and a null","#clear"],"updatePoint":{"line":237,"column":46,"index":9038},"line":237,"code":"      it('removes all features using fast path', function () {\n        const removeFeatureSpy = sinon.spy();\n        listen(vectorSource, 'removefeature', removeFeatureSpy);\n        const clearSourceSpy = sinon.spy();\n        listen(vectorSource, 'clear', clearSourceSpy);\n        vectorSource.clear(true);\n        expect(vectorSource.getFeatures()).to.eql([]);\n        expect(vectorSource.isEmpty()).to.be(true);\n        expect(removeFeatureSpy.called).to.be(false);\n        expect(removeFeatureSpy.callCount).to.be(0);\n        expect(clearSourceSpy.called).to.be(true);\n        expect(clearSourceSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"removes all features using slow path","suites":["ol.source.Vector","when populated with 10 random points and a null","#clear"],"updatePoint":{"line":250,"column":46,"index":9671},"line":250,"code":"      it('removes all features using slow path', function () {\n        const removeFeatureSpy = sinon.spy();\n        listen(vectorSource, 'removefeature', removeFeatureSpy);\n        const clearSourceSpy = sinon.spy();\n        listen(vectorSource, 'clear', clearSourceSpy);\n        vectorSource.clear();\n        expect(vectorSource.getFeatures()).to.eql([]);\n        expect(vectorSource.isEmpty()).to.be(true);\n        expect(removeFeatureSpy.called).to.be(true);\n        expect(removeFeatureSpy.callCount).to.be(features.length);\n        expect(clearSourceSpy.called).to.be(true);\n        expect(clearSourceSpy.callCount).to.be(1);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"is called the expected number of times","suites":["ol.source.Vector","when populated with 10 random points and a null","#forEachFeatureInExtent"],"updatePoint":{"line":265,"column":48,"index":10377},"line":265,"code":"      it('is called the expected number of times', function () {\n        const f = sinon.spy();\n        vectorSource.forEachFeatureInExtent(infiniteExtent, f);\n        expect(f.callCount).to.be(10);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"allows breaking out","suites":["ol.source.Vector","when populated with 10 random points and a null","#forEachFeatureInExtent"],"updatePoint":{"line":270,"column":29,"index":10567},"line":270,"code":"      it('allows breaking out', function () {\n        let count = 0;\n        const result = vectorSource.forEachFeatureInExtent(infiniteExtent, function (f) {\n          return ++count == 5;\n        });\n        expect(result).to.be(true);\n        expect(count).to.be(5);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns the expected number of features","suites":["ol.source.Vector","when populated with 10 random points and a null","#getFeaturesInExtent"],"updatePoint":{"line":280,"column":49,"index":10926},"line":280,"code":"      it('returns the expected number of features', function () {\n        expect(vectorSource.getFeaturesInExtent(infiniteExtent)).to.have.length(10);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol.source.Vector","when populated with 10 random points and a null","#isEmpty"],"updatePoint":{"line":285,"column":23,"index":11108},"line":285,"code":"      it('returns false', function () {\n        expect(vectorSource.isEmpty()).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"works as expected","suites":["ol.source.Vector","when populated with 10 random points and a null","#removeFeature"],"updatePoint":{"line":290,"column":27,"index":11268},"line":290,"code":"      it('works as expected', function () {\n        let i;\n        for (i = features.length - 1; i >= 0; --i) {\n          vectorSource.removeFeature(features[i]);\n          expect(vectorSource.getFeaturesInExtent(infiniteExtent)).have.length(i);\n        }\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires a change event","suites":["ol.source.Vector","when populated with 10 random points and a null","#removeFeature"],"updatePoint":{"line":297,"column":30,"index":11537},"line":297,"code":"      it('fires a change event', function () {\n        const listener = sinon.spy();\n        listen(vectorSource, 'change', listener);\n        vectorSource.removeFeature(features[0]);\n        expect(listener.called).to.be(true);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires a removefeature event","suites":["ol.source.Vector","when populated with 10 random points and a null","#removeFeature"],"updatePoint":{"line":303,"column":37,"index":11783},"line":303,"code":"      it('fires a removefeature event', function () {\n        const listener = sinon.spy();\n        listen(vectorSource, 'removefeature', listener);\n        vectorSource.removeFeature(features[0]);\n        expect(listener.called).to.be(true);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"accepts features that are not in the source","suites":["ol.source.Vector","when populated with 10 random points and a null","#removeFeature"],"updatePoint":{"line":309,"column":53,"index":12052},"line":309,"code":"      it('accepts features that are not in the source', function () {\n        const changeListener = sinon.spy();\n        listen(vectorSource, 'change', changeListener);\n        const removeFeatureListener = sinon.spy();\n        listen(vectorSource, 'removefeature', removeFeatureListener);\n        const feature = new Feature(new Point([0, 0]));\n        vectorSource.removeFeature(feature);\n        expect(changeListener.called).to.be(false);\n        expect(removeFeatureListener.called).to.be(false);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"keeps the R-Tree index up to date","suites":["ol.source.Vector","when populated with 10 random points and a null","modifying a feature's geometry"],"updatePoint":{"line":321,"column":43,"index":12624},"line":321,"code":"      it('keeps the R-Tree index up to date', function () {\n        expect(vectorSource.getFeaturesInExtent([0, 0, 1, 1])).to.have.length(10);\n        features[0].getGeometry().setCoordinates([100, 100]);\n        expect(vectorSource.getFeaturesInExtent([0, 0, 1, 1])).to.have.length(9);\n        features[0].getGeometry().setCoordinates([0.5, 0.5]);\n        expect(vectorSource.getFeaturesInExtent([0, 0, 1, 1])).to.have.length(10);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"keeps the R-Tree index up to date","suites":["ol.source.Vector","when populated with 10 random points and a null","setting a features geometry"],"updatePoint":{"line":330,"column":43,"index":13132},"line":330,"code":"      it('keeps the R-Tree index up to date', function () {\n        expect(vectorSource.getFeaturesInExtent([0, 0, 1, 1])).to.have.length(10);\n        features[0].setGeometry(new Point([100, 100]));\n        expect(vectorSource.getFeaturesInExtent([0, 0, 1, 1])).to.have.length(9);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"keeps its index up-to-date","suites":["ol.source.Vector","tracking changes to features"],"updatePoint":{"line":342,"column":34,"index":13585},"line":342,"code":"    it('keeps its index up-to-date', function () {\n      const feature = new Feature(new Point([1, 1]));\n      vectorSource.addFeature(feature);\n      expect(vectorSource.getFeaturesInExtent([0, 0, 2, 2])).to.eql([feature]);\n      feature.getGeometry().setCoordinates([3, 3]);\n      expect(vectorSource.getFeaturesInExtent([0, 0, 2, 2])).to.be.empty();\n      expect(vectorSource.getFeaturesInExtent([2, 2, 4, 4])).to.eql([feature]);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"handles features with null geometries","suites":["ol.source.Vector","tracking changes to features"],"updatePoint":{"line":350,"column":45,"index":14037},"line":350,"code":"    it('handles features with null geometries', function () {\n      const feature = new Feature(null);\n      vectorSource.addFeature(feature);\n      expect(vectorSource.getFeatures()).to.eql([feature]);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"handles features with geometries changing from null","suites":["ol.source.Vector","tracking changes to features"],"updatePoint":{"line":355,"column":59,"index":14262},"line":355,"code":"    it('handles features with geometries changing from null', function () {\n      const feature = new Feature(null);\n      vectorSource.addFeature(feature);\n      expect(vectorSource.getFeatures()).to.eql([feature]);\n      feature.setGeometry(new Point([1, 1]));\n      expect(vectorSource.getFeaturesInExtent([0, 0, 2, 2])).to.eql([feature]);\n      expect(vectorSource.getFeatures()).to.eql([feature]);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"handles features with geometries changing to null","suites":["ol.source.Vector","tracking changes to features"],"updatePoint":{"line":363,"column":57,"index":14671},"line":363,"code":"    it('handles features with geometries changing to null', function () {\n      const feature = new Feature(new Point([1, 1]));\n      vectorSource.addFeature(feature);\n      expect(vectorSource.getFeatures()).to.eql([feature]);\n      expect(vectorSource.getFeaturesInExtent([0, 0, 2, 2])).to.eql([feature]);\n      feature.setGeometry(null);\n      expect(vectorSource.getFeaturesInExtent([0, 0, 2, 2])).to.be.empty();\n      expect(vectorSource.getFeatures()).to.eql([feature]);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires a change event when setting a feature's property","suites":["ol.source.Vector","tracking changes to features"],"updatePoint":{"line":372,"column":62,"index":15161},"line":372,"code":"    it(\"fires a change event when setting a feature's property\", function () {\n      const feature = new Feature(new Point([1, 1]));\n      vectorSource.addFeature(feature);\n      const listener = sinon.spy();\n      listen(vectorSource, 'change', listener);\n      feature.set('foo', 'bar');\n      expect(listener.called).to.be(true);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires a changefeature event when updating a feature","suites":["ol.source.Vector","tracking changes to features"],"updatePoint":{"line":380,"column":59,"index":15499},"line":380,"code":"    it('fires a changefeature event when updating a feature', function () {\n      const feature = new Feature(new Point([1, 1]));\n      vectorSource.addFeature(feature);\n      const listener = sinon.spy(function (event) {\n        expect(event.feature).to.be(feature);\n      });\n      vectorSource.on('changefeature', listener);\n      feature.setStyle(null);\n      expect(listener.called).to.be(true);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns a feature by id","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":396,"column":31,"index":16020},"line":396,"code":"    it('returns a feature by id', function () {\n      const feature = new Feature();\n      feature.setId('foo');\n      source.addFeature(feature);\n      expect(source.getFeatureById('foo')).to.be(feature);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns a feature by id (set after add)","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":402,"column":47,"index":16250},"line":402,"code":"    it('returns a feature by id (set after add)', function () {\n      const feature = new Feature();\n      source.addFeature(feature);\n      expect(source.getFeatureById('foo')).to.be(null);\n      feature.setId('foo');\n      expect(source.getFeatureById('foo')).to.be(feature);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null when no feature is found","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":409,"column":45,"index":16534},"line":409,"code":"    it('returns null when no feature is found', function () {\n      const feature = new Feature();\n      feature.setId('foo');\n      source.addFeature(feature);\n      expect(source.getFeatureById('bar')).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null after removing feature","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":415,"column":43,"index":16757},"line":415,"code":"    it('returns null after removing feature', function () {\n      const feature = new Feature();\n      feature.setId('foo');\n      source.addFeature(feature);\n      expect(source.getFeatureById('foo')).to.be(feature);\n      source.removeFeature(feature);\n      expect(source.getFeatureById('foo')).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null after unsetting id","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":423,"column":39,"index":17072},"line":423,"code":"    it('returns null after unsetting id', function () {\n      const feature = new Feature();\n      feature.setId('foo');\n      source.addFeature(feature);\n      expect(source.getFeatureById('foo')).to.be(feature);\n      feature.setId(undefined);\n      expect(source.getFeatureById('foo')).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null after clear","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":431,"column":32,"index":17375},"line":431,"code":"    it('returns null after clear', function () {\n      const feature = new Feature();\n      feature.setId('foo');\n      source.addFeature(feature);\n      expect(source.getFeatureById('foo')).to.be(feature);\n      source.clear();\n      expect(source.getFeatureById('foo')).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null when no features are indexed","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":439,"column":49,"index":17685},"line":439,"code":"    it('returns null when no features are indexed', function () {\n      expect(source.getFeatureById('foo')).to.be(null);\n      source.addFeature(new Feature());\n      expect(source.getFeatureById('foo')).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns correct feature after add/remove/add","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":444,"column":52,"index":17914},"line":444,"code":"    it('returns correct feature after add/remove/add', function () {\n      expect(source.getFeatureById('foo')).to.be(null);\n      const first = new Feature();\n      first.setId('foo');\n      source.addFeature(first);\n      expect(source.getFeatureById('foo')).to.be(first);\n      source.removeFeature(first);\n      expect(source.getFeatureById('foo')).to.be(null);\n      const second = new Feature();\n      second.setId('foo');\n      source.addFeature(second);\n      expect(source.getFeatureById('foo')).to.be(second);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns correct feature after add/change","suites":["ol.source.Vector","#getFeatureById()"],"updatePoint":{"line":457,"column":48,"index":18438},"line":457,"code":"    it('returns correct feature after add/change', function () {\n      expect(source.getFeatureById('foo')).to.be(null);\n      const feature = new Feature();\n      feature.setId('foo');\n      source.addFeature(feature);\n      expect(source.getFeatureById('foo')).to.be(feature);\n      feature.setId('bar');\n      expect(source.getFeatureById('foo')).to.be(null);\n      expect(source.getFeatureById('bar')).to.be(feature);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns a feature with an id","suites":["ol.source.Vector","#getFeatureByUid()"],"updatePoint":{"line":473,"column":36,"index":18997},"line":473,"code":"    it('returns a feature with an id', function () {\n      const feature = new Feature();\n      feature.setId('abcd');\n      source.addFeature(feature);\n      expect(source.getFeatureByUid(getUid(feature))).to.be(feature);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns a feature without id","suites":["ol.source.Vector","#getFeatureByUid()"],"updatePoint":{"line":479,"column":36,"index":19228},"line":479,"code":"    it('returns a feature without id', function () {\n      const feature = new Feature();\n      source.addFeature(feature);\n      expect(source.getFeatureByUid(getUid(feature))).to.be(feature);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null when no feature is found","suites":["ol.source.Vector","#getFeatureByUid()"],"updatePoint":{"line":484,"column":45,"index":19439},"line":484,"code":"    it('returns null when no feature is found', function () {\n      const feature = new Feature();\n      feature.setId('abcd');\n      source.addFeature(feature);\n      const wrongId = 'abcd';\n      expect(source.getFeatureByUid(wrongId)).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null after removing feature","suites":["ol.source.Vector","#getFeatureByUid()"],"updatePoint":{"line":491,"column":43,"index":19696},"line":491,"code":"    it('returns null after removing feature', function () {\n      const feature = new Feature();\n      feature.setId('abcd');\n      source.addFeature(feature);\n      const uid = getUid(feature);\n      expect(source.getFeatureByUid(uid)).to.be(feature);\n      source.removeFeature(feature);\n      expect(source.getFeatureByUid(uid)).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null after clear","suites":["ol.source.Vector","#getFeatureByUid()"],"updatePoint":{"line":500,"column":32,"index":20038},"line":500,"code":"    it('returns null after clear', function () {\n      const feature = new Feature();\n      feature.setId('abcd');\n      source.addFeature(feature);\n      const uid = getUid(feature);\n      expect(source.getFeatureByUid(uid)).to.be(feature);\n      source.clear();\n      expect(source.getFeatureByUid(uid)).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns null when no features are present","suites":["ol.source.Vector","#getFeatureByUid()"],"updatePoint":{"line":509,"column":49,"index":20382},"line":509,"code":"    it('returns null when no features are present', function () {\n      expect(source.getFeatureByUid('abcd')).to.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires the FEATURESLOADSTART event","suites":["ol.source.Vector","#loadFeatures"],"updatePoint":{"line":514,"column":41,"index":20554},"line":514,"code":"    it('fires the FEATURESLOADSTART event', function (done) {\n      const source = new VectorSource();\n      source.on('featuresloadstart', function () {\n        done();\n      });\n      source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires the FEATURESLOADEND event after the features are added","suites":["ol.source.Vector","#loadFeatures"],"updatePoint":{"line":521,"column":68,"index":20859},"line":521,"code":"    it('fires the FEATURESLOADEND event after the features are added', function (done) {\n      const source = new VectorSource({\n        format: new GeoJSON(),\n        url: 'spec/ol/source/vectorsource/single-feature.json'\n      });\n      source.on('featuresloadend', function () {\n        const features = source.getFeatures();\n        expect(features).to.be.an('array');\n        expect(features.length).to.be(1);\n        done();\n      });\n      source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires the FEATURESLOADEND event if the default load function is used","suites":["ol.source.Vector","#loadFeatures"],"updatePoint":{"line":534,"column":76,"index":21406},"line":534,"code":"    it('fires the FEATURESLOADEND event if the default load function is used', function (done) {\n      const source = new VectorSource({\n        format: new GeoJSON(),\n        url: 'spec/ol/source/vectorsource/single-feature.json'\n      });\n      source.on('featuresloadend', function (event) {\n        expect(event.features).to.be.an('array');\n        expect(event.features.length).to.be(1);\n        done();\n      });\n      source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"requests the view extent plus render buffer","suites":["ol.source.Vector","#loadFeatures","with the \"bbox\" strategy"],"updatePoint":{"line":547,"column":53,"index":21955},"line":547,"code":"      it('requests the view extent plus render buffer', function (done) {\n        const center = [-97.6114, 38.8403];\n        const source = new VectorSource({\n          strategy: bboxStrategy,\n          loader: function (extent) {\n            setTimeout(function () {\n              const lonLatExtent = transformExtent(extent, 'EPSG:3857', 'EPSG:4326');\n              expect(lonLatExtent[0]).to.roughlyEqual(-99.259349218, 1e-9);\n              expect(lonLatExtent[2]).to.roughlyEqual(-95.963450781, 1e-9);\n              done();\n            }, 0);\n          }\n        });\n        const div = document.createElement('div');\n        div.style.width = '100px';\n        div.style.height = '100px';\n        document.body.appendChild(div);\n        const map = new Map({\n          target: div,\n          layers: [new VectorLayer({\n            source: source\n          })],\n          view: new View({\n            center: fromLonLat(center),\n            zoom: 7\n          })\n        });\n        map.renderSync();\n        map.setTarget(null);\n        document.body.removeChild(div);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"stores the infinity extent in the Rtree","suites":["ol.source.Vector","#loadFeatures","with no loader and the \"all\" strategy"],"updatePoint":{"line":580,"column":49,"index":23110},"line":580,"code":"      it('stores the infinity extent in the Rtree', function () {\n        const source = new VectorSource();\n        source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n        const loadedExtents = source.loadedExtentsRtree_.getAll();\n        expect(loadedExtents).to.have.length(1);\n        expect(loadedExtents[0].extent).to.eql([-Infinity, -Infinity, Infinity, Infinity]);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"it will change the loader function","suites":["ol.source.Vector","#loadFeatures","with setLoader"],"updatePoint":{"line":589,"column":44,"index":23577},"line":589,"code":"      it('it will change the loader function', function () {\n        let count1 = 0;\n        const loader1 = function (bbox, resolution, projection) {\n          count1++;\n        };\n        let count2 = 0;\n        const loader2 = function (bbox, resolution, projection) {\n          count2++;\n        };\n        const source = new VectorSource({\n          loader: loader1\n        });\n        source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n        source.setLoader(loader2);\n        source.refresh();\n        source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n        expect(count1).to.eql(1);\n        expect(count2).to.eql(1);\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"removes extents with #removeLoadedExtent()","suites":["ol.source.Vector","#loadFeatures","with setLoader"],"updatePoint":{"line":608,"column":52,"index":24291},"line":608,"code":"      it('removes extents with #removeLoadedExtent()', function (done) {\n        const source = new VectorSource();\n        source.setLoader(function (bbox, resolution, projection) {\n          setTimeout(function () {\n            expect(source.loadedExtentsRtree_.getAll()).to.have.length(1);\n            source.removeLoadedExtent(bbox);\n            expect(source.loadedExtentsRtree_.getAll()).to.have.length(0);\n            done();\n          }, 0);\n        });\n        source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires the FEATURESLOADEND event if the load function uses the callback","suites":["ol.source.Vector","#loadFeatures","with setLoader"],"updatePoint":{"line":620,"column":80,"index":24883},"line":620,"code":"      it('fires the FEATURESLOADEND event if the load function uses the callback', function (done) {\n        const source = new VectorSource();\n        const spy = sinon.spy();\n        source.on('featuresloadend', spy);\n        const features = [new Feature(), new Feature()];\n        source.setLoader(function (bbox, resolution, projection, success) {\n          success(features);\n          setTimeout(function () {\n            expect(spy.calledOnce).to.be(true);\n            const event = spy.getCall(0).args[0];\n            expect(event.features).to.be(features);\n            done();\n          }, 0);\n        });\n        source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"fires the FEATURESLOADERROR event if the load function uses the callback","suites":["ol.source.Vector","#loadFeatures","with setLoader"],"updatePoint":{"line":636,"column":82,"index":25603},"line":636,"code":"      it('fires the FEATURESLOADERROR event if the load function uses the callback', function (done) {\n        const source = new VectorSource();\n        const spy = sinon.spy();\n        source.on('featuresloaderror', spy);\n        source.setLoader(function (bbox, resolution, projection, success, failure) {\n          failure();\n          setTimeout(function () {\n            expect(spy.calledOnce).to.be(true);\n            done();\n          }, 0);\n        });\n        source.loadFeatures([-10000, -10000, 10000, 10000], 1, getProjection('EPSG:3857'));\n      });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"ignores features with the same id","suites":["ol.source.Vector","the feature id index"],"updatePoint":{"line":656,"column":41,"index":26277},"line":656,"code":"    it('ignores features with the same id', function () {\n      const feature = new Feature();\n      feature.setId('foo');\n      source.addFeature(feature);\n      const dupe = new Feature();\n      dupe.setId('foo');\n      source.addFeature(dupe);\n      expect(source.getFeatures()).to.have.length(1);\n      expect(source.getFeatureById('foo')).to.be(feature);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"allows changing feature and set the same id","suites":["ol.source.Vector","the feature id index"],"updatePoint":{"line":666,"column":51,"index":26655},"line":666,"code":"    it('allows changing feature and set the same id', function () {\n      const foo = new Feature();\n      foo.setId('foo');\n      source.addFeature(foo);\n      const bar = new Feature();\n      bar.setId('bar');\n      source.addFeature(bar);\n      bar.setId('foo');\n      expect(source.getFeatureById('foo')).to.be(bar);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"disallows adding the same feature twice","suites":["ol.source.Vector","the undefined feature id index"],"updatePoint":{"line":682,"column":47,"index":27133},"line":682,"code":"    it('disallows adding the same feature twice', function () {\n      const feature = new Feature();\n      source.addFeature(feature);\n      expect(function () {\n        source.addFeature(feature);\n      }).to.throwException();\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"returns a features collection","suites":["ol.source.Vector","with useSpatialIndex set to false"],"updatePoint":{"line":697,"column":37,"index":27555},"line":697,"code":"    it('returns a features collection', function () {\n      expect(source.getFeaturesCollection()).to.be.a(Collection);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"#forEachFeatureInExtent loops through all features","suites":["ol.source.Vector","with useSpatialIndex set to false"],"updatePoint":{"line":700,"column":58,"index":27704},"line":700,"code":"    it('#forEachFeatureInExtent loops through all features', function () {\n      source.addFeatures([new Feature(), new Feature()]);\n      const spy = sinon.spy();\n      source.forEachFeatureInExtent([0, 0, 0, 0], spy);\n      expect(spy.callCount).to.be(2);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"creates a features collection","suites":["ol.source.Vector","with a collection of features"],"updatePoint":{"line":715,"column":37,"index":28204},"line":715,"code":"    it('creates a features collection', function () {\n      expect(source.getFeaturesCollection()).to.not.be(null);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"adding/removing features keeps the collection in sync","suites":["ol.source.Vector","with a collection of features"],"updatePoint":{"line":718,"column":61,"index":28352},"line":718,"code":"    it('adding/removing features keeps the collection in sync', function () {\n      const feature = new Feature();\n      source.addFeature(feature);\n      expect(collection.getLength()).to.be(1);\n      source.removeFeature(feature);\n      expect(collection.getLength()).to.be(0);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"#clear() features keeps the collection in sync","suites":["ol.source.Vector","with a collection of features"],"updatePoint":{"line":725,"column":54,"index":28633},"line":725,"code":"    it('#clear() features keeps the collection in sync', function () {\n      const feature = new Feature();\n      source.addFeatures([feature]);\n      expect(collection.getLength()).to.be(1);\n      source.clear();\n      expect(collection.getLength()).to.be(0);\n      source.addFeatures([feature]);\n      expect(collection.getLength()).to.be(1);\n      source.clear(true);\n      expect(collection.getLength()).to.be(0);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"keeps the source's features in sync with the collection","suites":["ol.source.Vector","with a collection of features"],"updatePoint":{"line":736,"column":63,"index":29068},"line":736,"code":"    it(\"keeps the source's features in sync with the collection\", function () {\n      const feature = new Feature();\n      collection.push(feature);\n      expect(source.getFeatures().length).to.be(1);\n      collection.remove(feature);\n      expect(source.getFeatures().length).to.be(0);\n      collection.extend([feature]);\n      expect(source.getFeatures().length).to.be(1);\n      collection.clear();\n      expect(source.getFeatures().length).to.be(0);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"prevents adding two features with a duplicate id in the collection","suites":["ol.source.Vector","with a collection of features"],"updatePoint":{"line":747,"column":74,"index":29540},"line":747,"code":"    it('prevents adding two features with a duplicate id in the collection', function () {\n      source = new VectorSource({\n        features: new Collection()\n      });\n      const feature1 = new Feature();\n      feature1.setId('1');\n      const feature2 = new Feature();\n      feature2.setId('1');\n      const collection = source.getFeaturesCollection();\n      collection.push(feature1);\n      collection.push(feature2);\n      expect(collection.getLength()).to.be(1);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"#getFeaturesCollection returns the configured collection","suites":["ol.source.Vector","with a collection of features plus spatial index"],"updatePoint":{"line":769,"column":64,"index":30266},"line":769,"code":"    it('#getFeaturesCollection returns the configured collection', function () {\n      expect(source.getFeaturesCollection()).to.equal(collection);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"adding/removing features keeps the collection in sync","suites":["ol.source.Vector","with a collection of features plus spatial index"],"updatePoint":{"line":772,"column":61,"index":30419},"line":772,"code":"    it('adding/removing features keeps the collection in sync', function () {\n      const feature = new Feature();\n      source.addFeature(feature);\n      expect(collection.getLength()).to.be(1);\n      source.removeFeature(feature);\n      expect(collection.getLength()).to.be(0);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"#clear() features keeps the collection in sync","suites":["ol.source.Vector","with a collection of features plus spatial index"],"updatePoint":{"line":779,"column":54,"index":30700},"line":779,"code":"    it('#clear() features keeps the collection in sync', function () {\n      const feature = new Feature();\n      source.addFeatures([feature]);\n      expect(collection.getLength()).to.be(1);\n      source.clear();\n      expect(collection.getLength()).to.be(0);\n      source.addFeatures([feature]);\n      expect(collection.getLength()).to.be(1);\n      source.clear(true);\n      expect(collection.getLength()).to.be(0);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"keeps the source's features in sync with the collection","suites":["ol.source.Vector","with a collection of features plus spatial index"],"updatePoint":{"line":790,"column":63,"index":31135},"line":790,"code":"    it(\"keeps the source's features in sync with the collection\", function () {\n      const feature = new Feature();\n      collection.push(feature);\n      expect(source.getFeatures().length).to.be(1);\n      collection.remove(feature);\n      expect(source.getFeatures().length).to.be(0);\n      collection.extend([feature]);\n      expect(source.getFeatures().length).to.be(1);\n      collection.clear();\n      expect(source.getFeatures().length).to.be(0);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"adjusts the extent if projection canWrapX","suites":["ol.source.Vector","#getFeaturesInExtent()"],"updatePoint":{"line":803,"column":49,"index":31639},"line":803,"code":"    it('adjusts the extent if projection canWrapX', function () {\n      const a = new Feature(new Point([0, 0]));\n      const b = new Feature(new Point([179, 0]));\n      const c = new Feature(new Point([-179, 0]));\n      const source = new VectorSource({\n        features: [a, b, c]\n      });\n      const projection = getProjection('EPSG:4326');\n      expect(source.getFeaturesInExtent([-180, -90, 180, 90], projection).length).to.be(3);\n      const onlyB = source.getFeaturesInExtent([1, -90, 180, 90], projection);\n      expect(onlyB.length).to.be(1);\n      expect(onlyB).to.contain(b);\n      const bAndC = source.getFeaturesInExtent([1, -90, 182, 90], projection);\n      expect(bAndC.length).to.be(2);\n      expect(bAndC).to.contain(b);\n      expect(bAndC).to.contain(c);\n      const onlyC = source.getFeaturesInExtent([-180, -90, -1, 90], projection);\n      expect(onlyC.length).to.be(1);\n      expect(onlyC).to.contain(c);\n      const bAndCAgain = source.getFeaturesInExtent([-182, -90, -1, 90], projection);\n      expect(bAndCAgain.length).to.be(2);\n      expect(bAndCAgain).to.contain(b);\n      expect(bAndCAgain).to.contain(c);\n      const onlyA = source.getFeaturesInExtent([359, -90, 361, 90], projection);\n      expect(onlyA.length).to.be(1);\n      expect(onlyA).to.contain(a);\n    });","file":"browser/spec/ol/source/vector.test.js","skipped":false,"dir":"test"},{"name":"sets the format on the instance","suites":["ol.source.VectorTile","constructor"],"updatePoint":{"line":28,"column":39,"index":1407},"line":28,"code":"    it('sets the format on the instance', function () {\n      expect(source.format_).to.equal(format);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"sets the default zDirection on the instance","suites":["ol.source.VectorTile","constructor"],"updatePoint":{"line":31,"column":51,"index":1530},"line":31,"code":"    it('sets the default zDirection on the instance', function () {\n      expect(source.zDirection).to.be(1);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"uses ol.VectorTile as default tileClass","suites":["ol.source.VectorTile","constructor"],"updatePoint":{"line":34,"column":47,"index":1644},"line":34,"code":"    it('uses ol.VectorTile as default tileClass', function () {\n      expect(source.tileClass).to.equal(VectorTile);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates a 512 XYZ tilegrid by default","suites":["ol.source.VectorTile","constructor"],"updatePoint":{"line":37,"column":45,"index":1767},"line":37,"code":"    it('creates a 512 XYZ tilegrid by default', function () {\n      const tileGrid = createXYZ({\n        tileSize: 512\n      });\n      expect(source.tileGrid.tileSize_).to.equal(tileGrid.tileSize_);\n      expect(source.tileGrid.extent_).to.equal(tileGrid.extent_);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates a tile with the correct tile class","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":46,"column":50,"index":2090},"line":46,"code":"    it('creates a tile with the correct tile class', function () {\n      const tile = source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      expect(tile).to.be.a(VectorRenderTile);\n      expect(tile.getTileCoord()).to.eql([0, 0, 0]);\n      expect(source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'))).to.equal(tile);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"loads source tiles","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":52,"column":26,"index":2400},"line":52,"code":"    it('loads source tiles', function (done) {\n      const source = new VectorTileSource({\n        format: new GeoJSON(),\n        url: 'spec/ol/data/point.json'\n      });\n      const tile = source.getTile(0, 0, 0, 1, source.getProjection());\n      tile.load();\n      const key = listen(tile, 'change', function (e) {\n        if (tile.getState() === TileState.LOADED) {\n          const sourceTile = source.getSourceTiles(1, source.getProjection(), tile)[0];\n          expect(sourceTile.getFeatures().length).to.be.greaterThan(0);\n          unlistenByKey(key);\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"handles empty tiles","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":68,"column":27,"index":3006},"line":68,"code":"    it('handles empty tiles', function () {\n      const source = new VectorTileSource({\n        format: new GeoJSON(),\n        url: ''\n      });\n      const tile = source.getTile(0, 0, 0, 1, source.getProjection());\n      expect(tile.getState()).to.be(TileState.EMPTY);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates empty tiles outside the source extent","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":76,"column":53,"index":3310},"line":76,"code":"    it('creates empty tiles outside the source extent', function () {\n      const fullExtent = get('EPSG:3857').getExtent();\n      const source = new VectorTileSource({\n        extent: [fullExtent[0], fullExtent[1], 0, 0]\n      });\n      const tile = source.getTile(1, 1, 1, 1, source.getProjection());\n      expect(tile.getState()).to.be(TileState.EMPTY);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates empty tiles outside the world extent when wrapX === false","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":84,"column":73,"index":3695},"line":84,"code":"    it('creates empty tiles outside the world extent when wrapX === false', function () {\n      const source = new VectorTileSource({\n        wrapX: false\n      });\n      const tile = source.getTile(0, -1, 0, 1, source.getProjection());\n      expect(tile.getState()).to.be(TileState.EMPTY);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates empty tiles when the tileUrlFunction returns undefined","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":91,"column":70,"index":3991},"line":91,"code":"    it('creates empty tiles when the tileUrlFunction returns undefined', function () {\n      const source = new VectorTileSource({\n        tileUrlFunction: function (tileCoord) {\n          return;\n        }\n      });\n      const tile = source.getTile(1, 1, 1, 1, source.getProjection());\n      expect(tile.getState()).to.be(TileState.EMPTY);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates non-empty tiles outside the world extent when wrapX === true","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":100,"column":76,"index":4347},"line":100,"code":"    it('creates non-empty tiles outside the world extent when wrapX === true', function () {\n      const source = new VectorTileSource({\n        url: '{z}/{x}/{y}.pbf'\n      });\n      const tile = source.getTile(0, -1, 0, 1, source.getProjection());\n      expect(tile.getState()).to.be(TileState.IDLE);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates non-empty tiles for overzoomed resolutions","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":107,"column":58,"index":4640},"line":107,"code":"    it('creates non-empty tiles for overzoomed resolutions', function () {\n      const source = new VectorTileSource({\n        url: '{z}/{x}/{y}.pbf',\n        tileLoadFunction: function (tile) {\n          tile.setLoader(function () {});\n        },\n        maxZoom: 16\n      });\n      const tile = source.getTile(24, 9119385, 5820434, 1, source.getProjection());\n      tile.load();\n      expect(tile.getState()).to.be(TileState.LOADING);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates new tile when source key changes","suites":["ol.source.VectorTile","#getTile()"],"updatePoint":{"line":119,"column":48,"index":5075},"line":119,"code":"    it('creates new tile when source key changes', function () {\n      source.setKey('key1');\n      const tile1 = source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      const tile2 = source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      source.setKey('key2');\n      const tile3 = source.getTile(0, 0, 0, 1, getProjection('EPSG:3857'));\n      expect(tile1).to.equal(tile2);\n      expect(tile1.key).to.be('key1');\n      expect(tile3.key).to.be('key2');\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates a tile grid with the source tile grid's tile size","suites":["ol.source.VectorTile","#getTileGridForProjection"],"updatePoint":{"line":131,"column":65,"index":5626},"line":131,"code":"    it(\"creates a tile grid with the source tile grid's tile size\", function () {\n      const tileGrid = source.getTileGridForProjection(getProjection('EPSG:3857'));\n      expect(tileGrid.getTileSize(0)).to.be(512);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"triggers tileloadstart and tileloadend with ol.VectorTile","suites":["ol.source.VectorTile","Tile load events"],"updatePoint":{"line":137,"column":65,"index":5901},"line":137,"code":"    it('triggers tileloadstart and tileloadend with ol.VectorTile', function (done) {\n      const tile = source.getTile(14, 8938, 5680, 1, getProjection('EPSG:3857'));\n      let started = false;\n      source.on('tileloadstart', function () {\n        started = true;\n      });\n      source.on('tileloadend', function (e) {\n        expect(started).to.be(true);\n        expect(e.tile).to.be.a(VectorTile);\n        expect(e.tile.getFeatures().length).to.be(1327);\n        done();\n      });\n      tile.load();\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"triggers events and loads source tile properly for wrapX counterpart","suites":["ol.source.VectorTile","Tile load events"],"updatePoint":{"line":151,"column":76,"index":6425},"line":151,"code":"    it('triggers events and loads source tile properly for wrapX counterpart', function (done) {\n      const tile1 = source.getTile(14, 8938, 5680, 1, getProjection('EPSG:3857'));\n      const tile2 = source.getTile(14, 8938 + Math.pow(2, 14), 5680, 1, getProjection('EPSG:3857'));\n      expect(tile2.wrappedTileCoord).to.eql([14, 8938, 5680]);\n      let loadstart = 0;\n      source.on('tileloadstart', function () {\n        ++loadstart;\n      });\n      let loadend = 0;\n      source.on('tileloadend', function (e) {\n        ++loadend;\n      });\n      let loaded = 0;\n      [tile1, tile2].forEach(tile => {\n        tile.addEventListener('change', e => {\n          if (e.target.getState() === TileState.LOADED) {\n            const sourceTiles = e.target.getSourceTiles();\n            expect(sourceTiles.length).to.be(1);\n            expect(sourceTiles[0].getState()).to.be(TileState.LOADED);\n            ++loaded;\n            if (loaded === 2) {\n              expect(loadstart).to.be(1);\n              expect(loadend).to.be(1);\n              done();\n            }\n          }\n        });\n        tile.load();\n      });\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"loads only required tiles","suites":["ol.source.VectorTile","different source and render tile grids"],"updatePoint":{"line":221,"column":33,"index":8784},"line":221,"code":"    it('loads only required tiles', function (done) {\n      map.renderSync();\n      setTimeout(function () {\n        expect(loaded).to.eql(['5/13/-28']);\n        done();\n      }, 0);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"adjusts the tile cache size","suites":["ol.source.VectorTile","different source and render tile grids"],"updatePoint":{"line":228,"column":35,"index":8977},"line":228,"code":"    it('adjusts the tile cache size', function (done) {\n      map.renderSync();\n      setTimeout(function () {\n        expect(source.getTileCacheForProjection(map.getView().getProjection()).highWaterMark).to.be(2);\n        expect(source.sourceTileCache.highWaterMark).to.be(2);\n        done();\n      }, 0);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"does not fill up the tile queue","suites":["ol.source.VectorTile","different source and render tile grids"],"updatePoint":{"line":237,"column":37,"index":9300},"line":237,"code":"  it('does not fill up the tile queue', function (done) {\n    const target = document.createElement('div');\n    target.style.width = '100px';\n    target.style.height = '100px';\n    document.body.appendChild(target);\n    const urls = ['spec/ol/data/14-8938-5680.vector.pbf?num=0&coord={z},{x},{y}', 'spec/ol/data/14-8938-5680.vector.pbf?num=1&coord={z},{x},{y}', 'spec/ol/data/14-8938-5680.vector.pbf?num=2&coord={z},{x},{y}', 'spec/ol/data/14-8938-5680.vector.pbf?num=3&coord={z},{x},{y}'];\n    const source = new VectorTileSource({\n      format: new MVT(),\n      url: urls[0]\n    });\n    const map = new Map({\n      target: target,\n      layers: [new VectorTileLayer({\n        source: source\n      })],\n      view: new View({\n        center: [0, 0],\n        zoom: 0\n      })\n    });\n    map.renderSync();\n    const max = urls.length + 3;\n    let count = 0;\n    let tile = source.getTile(0, 0, 0, 1, map.getView().getProjection());\n    tile.addEventListener('change', function onTileChange(e) {\n      if (e.target.getState() !== TileState.LOADED) {\n        return;\n      }\n      e.target.removeEventListener('change', onTileChange);\n      map.once('rendercomplete', function () {\n        expect(map.tileQueue_.getTilesLoading()).to.be(0);\n        ++count;\n        if (count === max) {\n          document.body.removeChild(target);\n          map.dispose();\n          done();\n          return;\n        }\n        source.setUrl(urls[count % urls.length]);\n        tile = source.getTile(0, 0, 0, 1, map.getView().getProjection());\n        tile.addEventListener('change', onTileChange);\n      });\n    });\n  });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"re-renders when source changes","suites":["ol.source.VectorTile","interim tile handling"],"updatePoint":{"line":312,"column":38,"index":11828},"line":312,"code":"    it('re-renders when source changes', function (done) {\n      map.once('rendercomplete', function () {\n        const key = map.on('rendercomplete', function () {\n          const tile = source.getTile(14, 8938, 5680, 1, map.getView().getProjection());\n          expect(tile.getKey()).to.be('spec/ol/data/14-8938-5680.vector.pbf?new/14,8938,5680');\n          expect(tile.interimTile).to.be.a(VectorRenderTile);\n          expect(tile.interimTile.getKey()).to.be('spec/ol/data/14-8938-5680.vector.pbf/14,8938,5680');\n          const sourceTiles = source.getSourceTiles(1, map.getView().getProjection(), tile);\n          if (sourceTiles) {\n            expect(sourceTiles[0].getKey()).to.be('spec/ol/data/14-8938-5680.vector.pbf?new/14,8938,5680');\n            unByKey(key);\n            done();\n          }\n        });\n        source.setUrl('spec/ol/data/14-8938-5680.vector.pbf?new');\n      });\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array when no tiles are in the cache","suites":["ol.source.VectorTile","getFeatuersInExtent"],"updatePoint":{"line":363,"column":61,"index":13750},"line":363,"code":"    it('returns an empty array when no tiles are in the cache', function () {\n      source.tileCache.clear();\n      const extent = map.getView().calculateExtent(map.getSize());\n      expect(source.getFeaturesInExtent(extent).length).to.be(0);\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"returns features in extent for the last rendered z","suites":["ol.source.VectorTile","getFeatuersInExtent"],"updatePoint":{"line":368,"column":58,"index":13998},"line":368,"code":"    it('returns features in extent for the last rendered z', function (done) {\n      map.getView().setZoom(15);\n      map.once('rendercomplete', function () {\n        const extent = map.getView().calculateExtent(map.getSize());\n        const features = source.getFeaturesInExtent(extent);\n        expect(features.length).to.be(4);\n        expect(features[0].get('z')).to.be(15);\n        map.getView().setZoom(0);\n        map.once('rendercomplete', function () {\n          const extent = map.getView().calculateExtent(map.getSize());\n          const features = source.getFeaturesInExtent(extent);\n          expect(features.length).to.be(1);\n          expect(features[0].get('z')).to.be(0);\n          done();\n        });\n      });\n    });","file":"browser/spec/ol/source/vectortile.test.js","skipped":false,"dir":"test"},{"name":"returns null if the layer was not found in the capabilities","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":22,"column":67,"index":970},"line":22,"code":"    it('returns null if the layer was not found in the capabilities', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'invalid'\n      });\n      expect(options).to.be(null);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"passes the crossOrigin option","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":28,"column":37,"index":1164},"line":28,"code":"    it('passes the crossOrigin option', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        matrixSet: 'google3857',\n        crossOrigin: ''\n      });\n      expect(options.crossOrigin).to.be.eql('');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can create KVP options from spec/ol/format/wmts/ogcsample.xml","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":36,"column":69,"index":1479},"line":36,"code":"    it('can create KVP options from spec/ol/format/wmts/ogcsample.xml', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        matrixSet: 'google3857'\n      });\n      expect(options.urls).to.be.an('array');\n      expect(options.urls).to.have.length(1);\n      expect(options.urls[0]).to.be.eql('http://www.maps.bob/cgi-bin/MiraMon5_0.cgi?');\n      expect(options.layer).to.be.eql('BlueMarbleNextGeneration');\n      expect(options.matrixSet).to.be.eql('google3857');\n      expect(options.format).to.be.eql('image/jpeg');\n      expect(options.projection).to.be.a(Projection);\n      expect(options.projection).to.be.eql(getProjection('EPSG:3857'));\n      expect(options.requestEncoding).to.be.eql('KVP');\n      expect(options.tileGrid).to.be.a(WMTSTileGrid);\n      expect(options.style).to.be.eql('DarkBlue');\n      expect(options.dimensions).to.eql({\n        Time: '20110805'\n      });\n      expect(options.crossOrigin).to.be(undefined);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can create REST options from spec/ol/format/wmts/ogcsample.xml","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":57,"column":70,"index":2495},"line":57,"code":"    it('can create REST options from spec/ol/format/wmts/ogcsample.xml', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        matrixSet: 'google3857',\n        requestEncoding: 'REST'\n      });\n      expect(options.urls).to.be.an('array');\n      expect(options.urls).to.have.length(1);\n      expect(options.urls[0]).to.be.eql('http://www.example.com/wmts/coastlines/{TileMatrix}/{TileRow}/{TileCol}.png');\n      expect(options.layer).to.be.eql('BlueMarbleNextGeneration');\n      expect(options.matrixSet).to.be.eql('google3857');\n      expect(options.format).to.be.eql('image/png');\n      expect(options.projection).to.be.a(Projection);\n      expect(options.projection).to.be.eql(getProjection('EPSG:3857'));\n      expect(options.requestEncoding).to.be.eql('REST');\n      expect(options.tileGrid).to.be.a(WMTSTileGrid);\n      expect(options.style).to.be.eql('DarkBlue');\n      expect(options.dimensions).to.eql({\n        Time: '20110805'\n      });\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can find a MatrixSet by SRS identifier","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":78,"column":46,"index":3500},"line":78,"code":"    it('can find a MatrixSet by SRS identifier', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        projection: 'EPSG:3857',\n        requestEncoding: 'REST'\n      });\n      expect(options.matrixSet).to.be.eql('google3857');\n      expect(options.projection.getCode()).to.be.eql('EPSG:3857');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can find a MatrixSet by equivalent SRS identifier","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":87,"column":57,"index":3886},"line":87,"code":"    it('can find a MatrixSet by equivalent SRS identifier', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        projection: 'EPSG:900913',\n        requestEncoding: 'REST'\n      });\n      expect(options.matrixSet).to.be.eql('google3857');\n      expect(options.projection.getCode()).to.be.eql('EPSG:900913');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can find the default MatrixSet","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":96,"column":38,"index":4257},"line":96,"code":"    it('can find the default MatrixSet', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        requestEncoding: 'REST'\n      });\n      expect(options.matrixSet).to.be.eql('BigWorldPixel');\n      expect(options.projection.getCode()).to.be.eql('urn:ogc:def:crs:OGC:1.3:CRS84');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"uses the projection of the default MatrixSet if the config's projection is not supported","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":104,"column":96,"index":4672},"line":104,"code":"    it(\"uses the projection of the default MatrixSet if the config's projection is not supported\", function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        projection: new Projection({\n          code: 'EPSG:2056',\n          units: 'm'\n        })\n      });\n      expect(options.matrixSet).to.be.eql('BigWorldPixel');\n      expect(options.projection.getCode()).to.be.eql('urn:ogc:def:crs:OGC:1.3:CRS84');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"uses extent of tile matrix instead of projection extent","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":115,"column":63,"index":5120},"line":115,"code":"    it('uses extent of tile matrix instead of projection extent', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        matrixSet: 'google3857subset'\n      });\n\n      // Since google3857subset defines subset of space defined by the google3857 matrix set:\n      // - top left corner: -10000000, 10000000\n      // - calculated grid extent: [-10000000, 9999694.25188686, -9999694.25188686, 10000000]\n      // then the tile grid extent is only a part of the full projection extent.\n\n      const gridExtent = options.tileGrid.getExtent();\n      const gridBottomLeft = getBottomLeft(gridExtent);\n      const gridTopRight = getTopRight(gridExtent);\n      expect(Math.round(gridBottomLeft[0])).to.be.eql(-10000000);\n      expect(Math.round(gridBottomLeft[1])).to.be.eql(9999847);\n      expect(Math.round(gridTopRight[0])).to.be.eql(-9999847);\n      expect(Math.round(gridTopRight[1])).to.be.eql(10000000);\n      const projExtent = options.projection.getExtent();\n      const projBottomLeft = getBottomLeft(projExtent);\n      const projTopRight = getTopRight(projExtent);\n      expect(Math.round(projBottomLeft[0])).to.be.eql(-20037508);\n      expect(Math.round(projBottomLeft[1])).to.be.eql(-20037508);\n      expect(Math.round(projTopRight[0])).to.be.eql(20037508);\n      expect(Math.round(projTopRight[1])).to.be.eql(20037508);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"doesn't fail if the GetCap doesn't contains Constraint tags","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":141,"column":67,"index":6526},"line":141,"code":"    it(\"doesn't fail if the GetCap doesn't contains Constraint tags\", function () {\n      const tmpXml = content.replace(/<ows:Constraint[\\s\\S]*?<\\/ows:Constraint>/g, '');\n      const tmpCapabilities = parser.read(tmpXml);\n      expect(tmpCapabilities['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'][0]['Constraint']).to.be(undefined);\n      const options = optionsFromCapabilities(tmpCapabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        matrixSet: 'google3857'\n      });\n      expect(options.layer).to.be.eql('BlueMarbleNextGeneration');\n      expect(options.matrixSet).to.be.eql('google3857');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"set KVP as default request encoding if the GetCap doesn't contains Constraint and ResourceUrl tags","suites":["ol/source/WMTS","when creating options from capabilities"],"updatePoint":{"line":152,"column":106,"index":7190},"line":152,"code":"    it(\"set KVP as default request encoding if the GetCap doesn't contains Constraint and ResourceUrl tags\", function () {\n      let tmpXml = content.replace(/<ows:Constraint[\\s\\S]*?<\\/ows:Constraint>/g, '');\n      tmpXml = tmpXml.replace(/<ResourceURL[\\s\\S]*?\"\\/>/g, '');\n      const tmpCapabilities = parser.read(tmpXml);\n      expect(tmpCapabilities['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'][0]['Constraint']).to.be(undefined);\n      expect(tmpCapabilities['Contents']['Layer'][0]['ResourceURL']).to.be(undefined);\n      const options = optionsFromCapabilities(tmpCapabilities, {\n        layer: 'BlueMarbleNextGeneration',\n        matrixSet: 'google3857'\n      });\n      expect(options.layer).to.be.eql('BlueMarbleNextGeneration');\n      expect(options.matrixSet).to.be.eql('google3857');\n      expect(options.urls).to.be.an('array');\n      expect(options.urls).to.have.length(1);\n      expect(options.urls[0]).to.be.eql('http://www.maps.bob/cgi-bin/MiraMon5_0.cgi?');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/WMTS","#getInterpolate()"],"updatePoint":{"line":170,"column":26,"index":8155},"line":170,"code":"    it('is true by default', function () {\n      const source = new WMTS({});\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/WMTS","#getInterpolate()"],"updatePoint":{"line":174,"column":55,"index":8321},"line":174,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new WMTS({\n        interpolate: false\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can replace lowercase REST parameters","suites":["ol/source/WMTS","when creating tileUrlFunction"],"updatePoint":{"line":187,"column":45,"index":8811},"line":187,"code":"    it('can replace lowercase REST parameters', function () {\n      const source = new WMTS({\n        layer: 'layer',\n        style: 'default',\n        urls: ['http://host/{layer}/{style}/{tilematrixset}/{TileMatrix}/{TileCol}/{TileRow}.jpg'],\n        matrixSet: 'EPSG:3857',\n        requestEncoding: 'REST',\n        tileGrid: defaultTileGrid\n      });\n      const projection = getProjection('EPSG:3857');\n      const url = source.tileUrlFunction(source.getTileCoordForTileUrlFunction([1, 1, 1]), 1, projection);\n      expect(url).to.be.eql('http://host/layer/default/EPSG:3857/1/1/1.jpg');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can replace camelcase REST parameters","suites":["ol/source/WMTS","when creating tileUrlFunction"],"updatePoint":{"line":200,"column":45,"index":9410},"line":200,"code":"    it('can replace camelcase REST parameters', function () {\n      const source = new WMTS({\n        layer: 'layer',\n        style: 'default',\n        urls: ['http://host/{Layer}/{Style}/{tilematrixset}/{TileMatrix}/{TileCol}/{TileRow}.jpg'],\n        matrixSet: 'EPSG:3857',\n        requestEncoding: 'REST',\n        tileGrid: defaultTileGrid\n      });\n      const projection = getProjection('EPSG:3857');\n      const url = source.tileUrlFunction(source.getTileCoordForTileUrlFunction([1, 1, 1]), 1, projection);\n      expect(url).to.be.eql('http://host/layer/default/EPSG:3857/1/1/1.jpg');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can replace dimensions","suites":["ol/source/WMTS","when creating tileUrlFunction"],"updatePoint":{"line":213,"column":30,"index":9994},"line":213,"code":"    it('can replace dimensions', function () {\n      const source = new WMTS({\n        layer: 'layer',\n        style: 'default',\n        dimensions: {\n          'Time': 42\n        },\n        urls: ['http://host/{Layer}/{Style}/{Time}/{tilematrixset}/{TileMatrix}/{TileCol}/{TileRow}.jpg'],\n        matrixSet: 'EPSG:3857',\n        requestEncoding: 'REST',\n        tileGrid: defaultTileGrid\n      });\n      const projection = getProjection('EPSG:3857');\n      const url = source.tileUrlFunction(source.getTileCoordForTileUrlFunction([1, 1, 1]), 1, projection);\n      expect(url).to.be.eql('http://host/layer/default/42/EPSG:3857/1/1/1.jpg');\n      expect(source.getKey()).to.be.eql('http://host/{Layer}/{Style}/{Time}/{tilematrixset}/{TileMatrix}/{TileCol}/{TileRow}.jpg/Time-42');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can create KVP options from spec/ol/format/wmts/arcgis.xml","suites":["ol/source/WMTS","when creating options from Esri capabilities"],"updatePoint":{"line":244,"column":66,"index":11204},"line":244,"code":"    it('can create KVP options from spec/ol/format/wmts/arcgis.xml', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'Demographics_USA_Population_Density',\n        requestEncoding: 'KVP',\n        matrixSet: 'default028mm'\n      });\n      expect(options.urls).to.be.an('array');\n      expect(options.urls).to.have.length(1);\n      expect(options.urls[0]).to.be.eql('https://services.arcgisonline.com/arcgis/rest/services/' + 'Demographics/USA_Population_Density/MapServer/WMTS?');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can create REST options from spec/ol/format/wmts/arcgis.xml","suites":["ol/source/WMTS","when creating options from Esri capabilities"],"updatePoint":{"line":254,"column":67,"index":11736},"line":254,"code":"    it('can create REST options from spec/ol/format/wmts/arcgis.xml', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'Demographics_USA_Population_Density',\n        matrixSet: 'default028mm'\n      });\n      expect(options.urls).to.be.an('array');\n      expect(options.urls).to.have.length(1);\n      expect(options.urls[0]).to.be.eql('https://services.arcgisonline.com/arcgis/rest/services/' + 'Demographics/USA_Population_Density/MapServer/WMTS/' + 'tile/1.0.0/Demographics_USA_Population_Density/' + '{Style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.png');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"returns correct bounding box","suites":["ol/source/WMTS","when creating options from wgs84 capabilities"],"updatePoint":{"line":277,"column":36,"index":12721},"line":277,"code":"    it('returns correct bounding box', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'baselayer',\n        matrixSet: 'inspire_quad',\n        requestEncoding: 'REST'\n      });\n      expect(options.urls).to.be.an('array');\n      expect(options.urls).to.have.length(1);\n      expect(options.urls[0]).to.be.eql('https://example.com/wmts/baselayer/{TileMatrixSet}/{TileMatrix}/{TileCol}/{TileRow}.png');\n      expect(options.layer).to.be.eql('baselayer');\n      expect(options.matrixSet).to.be.eql('inspire_quad');\n      expect(options.format).to.be.eql('image/png');\n      expect(options.projection).to.be.a(Projection);\n      expect(options.projection).to.be.eql(getProjection('EPSG:4326'));\n      expect(options.requestEncoding).to.be.eql('REST');\n      expect(options.tileGrid).to.be.a(WMTSTileGrid);\n      expect(options.style).to.be.eql('default');\n      const extent = options.tileGrid.getExtent();\n\n      // compare with delta, due to rounding not the exact bounding box is returned...\n      const expectDelta = (value, expected) => expect(Math.abs(value - expected)).to.below(1e-10);\n      expectDelta(extent[0], -180);\n      expectDelta(extent[1], -90);\n      expectDelta(extent[2], 180);\n      expectDelta(extent[3], 90);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"returns correct bounding box when the layer has BoundingBox","suites":["ol/source/WMTS","when creating options from wgs84 capabilities with BoundingBox"],"updatePoint":{"line":317,"column":67,"index":14466},"line":317,"code":"    it('returns correct bounding box when the layer has BoundingBox', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'bmaphidpi',\n        matrixSet: 'google3857',\n        style: 'normal'\n      });\n      expect(options.layer).to.be.eql('bmaphidpi');\n      expect(options.matrixSet).to.be.eql('google3857');\n      expect(options.format).to.be.eql('image/jpeg');\n      expect(options.requestEncoding).to.be.eql('REST');\n      expect(options.tileGrid).to.be.a(WMTSTileGrid);\n      expect(options.style).to.be.eql('normal');\n      expect(options.projection).to.be.a(Projection);\n      expect(options.projection).to.be.eql(getProjection('EPSG:3857'));\n      const expectedMatrixSetExtend = [977650, 5838030, 1913530, 6281290];\n      const extent = options.tileGrid.getExtent();\n\n      // compare with delta, due to rounding not the exact bounding box is returned...\n      const expectDelta = (value, expected) => expect(Math.abs(value - expected)).to.below(1e-1);\n      expectDelta(extent[0], expectedMatrixSetExtend[0]);\n      expectDelta(extent[1], expectedMatrixSetExtend[1]);\n      expectDelta(extent[2], expectedMatrixSetExtend[2]);\n      expectDelta(extent[3], expectedMatrixSetExtend[3]);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"returns correct bounding box when the layer has BoundingBox","suites":["ol/source/WMTS","when creating options from epsg:4326 capabilities with BoundingBox"],"updatePoint":{"line":355,"column":67,"index":16148},"line":355,"code":"    it('returns correct bounding box when the layer has BoundingBox', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 's2cloudless-2020'\n      });\n      const extent = options.tileGrid.getExtent();\n      expect(extent).to.eql([-180, -90, 180, 90]);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"sets wrapx when no bounding box is set","suites":["ol/source/WMTS","set wrap x by bounding box if available"],"updatePoint":{"line":376,"column":46,"index":16820},"line":376,"code":"    it('sets wrapx when no bounding box is set', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'no-bb',\n        matrixSet: 'EPSG:3857',\n        crossOrigin: 'anonymous'\n      });\n      expect(options.wrapX).to.be(true);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"sets wrapx when only wgs 84 bb is set","suites":["ol/source/WMTS","set wrap x by bounding box if available"],"updatePoint":{"line":384,"column":45,"index":17092},"line":384,"code":"    it('sets wrapx when only wgs 84 bb is set', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'only-wgs84-bb',\n        matrixSet: 'EPSG:3857',\n        crossOrigin: 'anonymous'\n      });\n      expect(options.wrapX).to.be(true);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"does not set wrapx when wgs84 bb is set","suites":["ol/source/WMTS","set wrap x by bounding box if available"],"updatePoint":{"line":392,"column":47,"index":17374},"line":392,"code":"    it('does not set wrapx when wgs84 bb is set', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'no-wrap-wgs84-bb',\n        matrixSet: 'EPSG:3857',\n        crossOrigin: 'anonymous'\n      });\n      expect(options.wrapX).to.be(false);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"does not set wrapx when tile matrix does not wrap","suites":["ol/source/WMTS","set wrap x by bounding box if available"],"updatePoint":{"line":400,"column":57,"index":17670},"line":400,"code":"    it('does not set wrapx when tile matrix does not wrap', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'no-wrap-tm',\n        matrixSet: 'EPSG:3857',\n        crossOrigin: 'anonymous'\n      });\n      expect(options.wrapX).to.be(false);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"returns correct bounding box for a layer","suites":["ol/source/WMTS","when creating options from capabilities with TileMatrixSetLink"],"updatePoint":{"line":422,"column":48,"index":18384},"line":422,"code":"    it('returns correct bounding box for a layer', function () {\n      const options = optionsFromCapabilities(capabilities, {\n        layer: 'mean_atlas_land',\n        matrixSet: 'inspire_quad',\n        requestEncoding: 'REST'\n      });\n      expect(options.urls).to.be.an('array');\n      expect(options.urls).to.have.length(1);\n      expect(options.urls[0]).to.be.eql('https://example.com/wmts/mean_atlas_land/{TileMatrixSet}/{TileMatrix}/{TileCol}/{TileRow}.png');\n      expect(options.layer).to.be.eql('mean_atlas_land');\n      expect(options.matrixSet).to.be.eql('inspire_quad');\n      expect(options.format).to.be.eql('image/png');\n      expect(options.projection).to.be.a(Projection);\n      expect(options.projection).to.be.eql(getProjection('EPSG:4326'));\n      expect(options.requestEncoding).to.be.eql('REST');\n      expect(options.tileGrid).to.be.a(WMTSTileGrid);\n      expect(options.style).to.be.eql('default');\n      const extent = options.tileGrid.getExtent();\n\n      // calculate with of one tile, this will be used as tolerance for result extent\n      const tile_width = 68247.34668319306 * 0.00028 / getProjection('EPSG:4326').getMetersPerUnit() * 256;\n\n      // compare with delta, due to rounding not the exact bounding box is returned...\n      const expectDelta = (value, expected) => expect(Math.abs(value - expected)).to.below(tile_width + 1e-10);\n      expectDelta(extent[0], -36);\n      expectDelta(extent[1], 15);\n      expectDelta(extent[2], 43);\n      expectDelta(extent[3], 90);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"sets the URL for the source","suites":["ol/source/WMTS","#setUrls()"],"updatePoint":{"line":453,"column":35,"index":19932},"line":453,"code":"    it('sets the URL for the source', function () {\n      const source = new WMTS({});\n      const urls = ['https://a.example.com/', 'https://b.example.com/', 'https://c.example.com/'];\n      source.setUrls(urls);\n      expect(source.getUrls()).to.eql(urls);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"updates the key for the source","suites":["ol/source/WMTS","#setUrls()"],"updatePoint":{"line":459,"column":38,"index":20202},"line":459,"code":"    it('updates the key for the source', function () {\n      const source = new WMTS({});\n      const urls = ['https://a.example.com/', 'https://b.example.com/', 'https://c.example.com/'];\n      source.setUrls(urls);\n      expect(source.getKey()).to.eql(urls.join('\\n'));\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"generates the correct tileUrlFunction during application of setUrl()","suites":["ol/source/WMTS","#setUrls()"],"updatePoint":{"line":465,"column":76,"index":20520},"line":465,"code":"    it('generates the correct tileUrlFunction during application of setUrl()', function () {\n      const projection = getProjection('EPSG:3857');\n      const source = new WMTS({\n        projection: projection,\n        requestEncoding: 'REST',\n        urls: ['http://1.example.com/{TileMatrix}/{TileRow}/{TileCol}.jpeg', 'http://2.example.com/{TileMatrix}/{TileRow}/{TileCol}.jpeg'],\n        tileGrid: new WMTSTileGrid({\n          matrixIds: [0, 1, 2, 3, 4, 5, 6, 7],\n          origin: [2690000, 1285000],\n          resolutions: [4000, 3750, 3500, 3250, 3000, 2750, 2500, 2250]\n        })\n      });\n      const urls = ['https://a.example.com/{TileMatrix}/{TileRow}/{TileCol}.jpg', 'https://b.example.com/{TileMatrix}/{TileRow}/{TileCol}.jpg'];\n      source.setUrls(urls);\n      const tileUrl1 = source.tileUrlFunction([2, 9, -5], 1, projection);\n      expect(tileUrl1).to.match(/https\\:\\/\\/[ab]\\.example\\.com\\/2\\/-5\\/9\\.jpg/);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"expands url template","suites":["ol/source/WMTS","url option"],"updatePoint":{"line":484,"column":28,"index":21451},"line":484,"code":"    it('expands url template', function () {\n      const tileSource = new WMTS({\n        url: '{1-3}'\n      });\n      const urls = tileSource.getUrls();\n      expect(urls).to.eql(['1', '2', '3']);\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"returns the WMTS URLs","suites":["ol/source/WMTS","#getUrls","using a \"url\" option"],"updatePoint":{"line":513,"column":31,"index":22224},"line":513,"code":"      it('returns the WMTS URLs', function () {\n        const urls = source.getUrls();\n        expect(urls).to.be.eql(['some_wmts_url']);\n      });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"returns the WMTS URLs","suites":["ol/source/WMTS","#getUrls","using a \"urls\" option"],"updatePoint":{"line":523,"column":31,"index":22582},"line":523,"code":"      it('returns the WMTS URLs', function () {\n        const urls = source.getUrls();\n        expect(urls).to.be.eql(['some_wmts_url1', 'some_wmts_url2']);\n      });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"returns the request encoding","suites":["ol/source/WMTS","#getRequestEncoding"],"updatePoint":{"line":544,"column":36,"index":23139},"line":544,"code":"    it('returns the request encoding', function () {\n      const requestEncoding = source.getRequestEncoding();\n      expect(requestEncoding).to.be.eql('REST');\n    });","file":"browser/spec/ol/source/WMTS.test.js","skipped":false,"dir":"test"},{"name":"can be constructed without options","suites":["ol/source/XYZ","constructor"],"updatePoint":{"line":11,"column":42,"index":593},"line":11,"code":"    it('can be constructed without options', function () {\n      const source = new XYZ();\n      expect(source).to.be.an(XYZ);\n      expect(source).to.be.an(TileImage);\n      expect(source).to.be.an(UrlTile);\n      expect(source).to.be.an(TileSource);\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"can be constructed with a custom zDirection","suites":["ol/source/XYZ","constructor"],"updatePoint":{"line":18,"column":51,"index":862},"line":18,"code":"    it('can be constructed with a custom zDirection', function () {\n      const source = new XYZ({\n        zDirection: -1\n      });\n      expect(source.zDirection).to.be(-1);\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"can be constructed with a custom tile grid","suites":["ol/source/XYZ","constructor"],"updatePoint":{"line":24,"column":50,"index":1044},"line":24,"code":"    it('can be constructed with a custom tile grid', function () {\n      const tileGrid = createXYZ();\n      const tileSource = new XYZ({\n        tileGrid: tileGrid\n      });\n      expect(tileSource.getTileGrid()).to.be(tileGrid);\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"can be constructed with a custom tile size","suites":["ol/source/XYZ","constructor"],"updatePoint":{"line":31,"column":50,"index":1283},"line":31,"code":"    it('can be constructed with a custom tile size', function () {\n      const tileSource = new XYZ({\n        tileSize: 512\n      });\n      expect(tileSource.getTileGrid().getTileSize(0)).to.be(512);\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"can be constructed with a custom min zoom","suites":["ol/source/XYZ","constructor"],"updatePoint":{"line":37,"column":49,"index":1490},"line":37,"code":"    it('can be constructed with a custom min zoom', function () {\n      const tileSource = new XYZ({\n        minZoom: 2\n      });\n      expect(tileSource.getTileGrid().getMinZoom()).to.be(2);\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/XYZ","getInterpolate()"],"updatePoint":{"line":45,"column":26,"index":1718},"line":45,"code":"    it('is true by default', function () {\n      const source = new XYZ();\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/XYZ","getInterpolate()"],"updatePoint":{"line":49,"column":55,"index":1881},"line":49,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new XYZ({\n        interpolate: false\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"returns the expected URL","suites":["ol/source/XYZ","tileUrlFunction"],"updatePoint":{"line":65,"column":32,"index":2313},"line":65,"code":"    it('returns the expected URL', function () {\n      const coordinate = [829330.2064098881, 5933916.615134273];\n      let tileUrl;\n      tileUrl = xyzTileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 0));\n      expect(tileUrl).to.eql('0/0/0');\n      tileUrl = xyzTileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 1));\n      expect(tileUrl).to.eql('1/1/0');\n      tileUrl = xyzTileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 2));\n      expect(tileUrl).to.eql('2/2/1');\n      tileUrl = xyzTileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 3));\n      expect(tileUrl).to.eql('3/4/2');\n      tileUrl = xyzTileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 4));\n      expect(tileUrl).to.eql('4/8/5');\n      tileUrl = xyzTileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 5));\n      expect(tileUrl).to.eql('5/16/11');\n      tileUrl = xyzTileSource.tileUrlFunction(tileGrid.getTileCoordForCoordAndZ(coordinate, 6));\n      expect(tileUrl).to.eql('6/33/22');\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"returns the expected URL","suites":["ol/source/XYZ","tileUrlFunction","wrap x"],"updatePoint":{"line":84,"column":34,"index":3449},"line":84,"code":"      it('returns the expected URL', function () {\n        const projection = xyzTileSource.getProjection();\n        let tileUrl = xyzTileSource.tileUrlFunction(xyzTileSource.getTileCoordForTileUrlFunction([6, -31, 22], projection));\n        expect(tileUrl).to.eql('6/33/22');\n        tileUrl = xyzTileSource.tileUrlFunction(xyzTileSource.getTileCoordForTileUrlFunction([6, 33, 22], projection));\n        expect(tileUrl).to.eql('6/33/22');\n        tileUrl = xyzTileSource.tileUrlFunction(xyzTileSource.getTileCoordForTileUrlFunction([6, 97, 22], projection));\n        expect(tileUrl).to.eql('6/33/22');\n      });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"returns the expected URL","suites":["ol/source/XYZ","tileUrlFunction","crop y"],"updatePoint":{"line":95,"column":34,"index":4107},"line":95,"code":"      it('returns the expected URL', function () {\n        const projection = xyzTileSource.getProjection();\n        let tileUrl = xyzTileSource.tileUrlFunction(xyzTileSource.getTileCoordForTileUrlFunction([6, 33, -1], projection));\n        expect(tileUrl).to.be(undefined);\n        tileUrl = xyzTileSource.tileUrlFunction(xyzTileSource.getTileCoordForTileUrlFunction([6, 33, 22], projection));\n        expect(tileUrl).to.eql('6/33/22');\n        tileUrl = xyzTileSource.tileUrlFunction(xyzTileSource.getTileCoordForTileUrlFunction([6, 33, 64], projection));\n        expect(tileUrl).to.be(undefined);\n      });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"returns the XYZ URL","suites":["ol/source/XYZ","#getUrls","using a \"url\" option"],"updatePoint":{"line":120,"column":29,"index":5147},"line":120,"code":"      it('returns the XYZ URL', function () {\n        const urls = source.getUrls();\n        expect(urls).to.be.eql([url]);\n      });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"returns the XYZ URLs","suites":["ol/source/XYZ","#getUrls","using a \"urls\" option"],"updatePoint":{"line":130,"column":30,"index":5489},"line":130,"code":"      it('returns the XYZ URLs', function () {\n        const urls = source.getUrls();\n        expect(urls).to.be.eql(['some_xyz_url1', 'some_xyz_url2']);\n      });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"returns null","suites":["ol/source/XYZ","#getUrls","using a \"tileUrlFunction\""],"updatePoint":{"line":142,"column":22,"index":5889},"line":142,"code":"      it('returns null', function () {\n        const urls = source.getUrls();\n        expect(urls).to.be(null);\n      });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"#refresh() reloads from server","suites":["ol/source/XYZ","clear and refresh"],"updatePoint":{"line":182,"column":38,"index":6966},"line":182,"code":"    it('#refresh() reloads from server', function (done) {\n      map.once('rendercomplete', function () {\n        expect(callCount).to.be(1);\n        done();\n      });\n      source.refresh();\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"#clear() clears the tile cache","suites":["ol/source/XYZ","clear and refresh"],"updatePoint":{"line":189,"column":38,"index":7166},"line":189,"code":"    it('#clear() clears the tile cache', function (done) {\n      map.once('rendercomplete', function () {\n        done(new Error('should not re-render'));\n      });\n      source.clear();\n      setTimeout(function () {\n        done();\n      }, 1000);\n    });","file":"browser/spec/ol/source/XYZ.test.js","skipped":false,"dir":"test"},{"name":"requires config \"size\" and \"url\"","suites":["ol/source/Zoomify","constructor"],"updatePoint":{"line":44,"column":40,"index":1319},"line":44,"code":"    it('requires config \"size\" and \"url\"', function () {\n      let source;\n\n      // undefined config object\n      expect(function () {\n        source = new Zoomify();\n      }).to.throwException();\n\n      // empty object as config object\n      expect(function () {\n        source = new Zoomify({});\n      }).to.throwException();\n\n      // passing \"url\" in config object\n      expect(function () {\n        source = new Zoomify({\n          url: 'some-url'\n        });\n      }).to.throwException();\n\n      // passing \"size\" in config object\n      expect(function () {\n        source = new Zoomify({\n          size: [47, 11]\n        });\n      }).to.throwException();\n\n      // passing \"size\" and \"url\" in config object\n      expect(function () {\n        source = new Zoomify({\n          url: '',\n          size: [47, 11]\n        });\n      }).to.not.throwException();\n      // we got a source\n      expect(source).to.be.a(Zoomify);\n\n      // also test our helper methods from above\n      expect(function () {\n        source = getZoomifySource();\n      }).to.not.throwException();\n      expect(function () {\n        source = getIIPSource();\n      }).to.not.throwException();\n      // we got a source\n      expect(source).to.be.a(Zoomify);\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"does not need \"tierSizeCalculation\" option","suites":["ol/source/Zoomify","constructor"],"updatePoint":{"line":91,"column":50,"index":2570},"line":91,"code":"    it('does not need \"tierSizeCalculation\" option', function () {\n      expect(function () {\n        new Zoomify({\n          url: '',\n          size: [47, 11]\n        });\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"accepts \"tierSizeCalculation\" option \"default\"","suites":["ol/source/Zoomify","constructor"],"updatePoint":{"line":99,"column":54,"index":2788},"line":99,"code":"    it('accepts \"tierSizeCalculation\" option \"default\"', function () {\n      expect(function () {\n        new Zoomify({\n          url: '',\n          size: [47, 11],\n          tierSizeCalculation: 'default'\n        });\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"accepts \"tierSizeCalculation\" option \"truncated\"","suites":["ol/source/Zoomify","constructor"],"updatePoint":{"line":108,"column":56,"index":3050},"line":108,"code":"    it('accepts \"tierSizeCalculation\" option \"truncated\"', function () {\n      expect(function () {\n        new Zoomify({\n          url: '',\n          size: [47, 11],\n          tierSizeCalculation: 'truncated'\n        });\n      }).to.not.throwException();\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"throws on unexpected \"tierSizeCalculation\" ","suites":["ol/source/Zoomify","constructor"],"updatePoint":{"line":117,"column":51,"index":3309},"line":117,"code":"    it('throws on unexpected \"tierSizeCalculation\" ', function () {\n      // passing unknown string will throw\n      expect(function () {\n        new Zoomify({\n          url: '',\n          size: [47, 11],\n          tierSizeCalculation: 'ace-of-spades'\n        });\n      }).to.throwException();\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"creates a tileGrid for both protocols","suites":["ol/source/Zoomify","constructor"],"updatePoint":{"line":127,"column":45,"index":3605},"line":127,"code":"    it('creates a tileGrid for both protocols', function () {\n      const sources = [getZoomifySource(), getIIPSource()];\n      for (let i = 0; i < sources.length; i++) {\n        const tileGrid = sources[i].getTileGrid();\n        expect(tileGrid).to.be.a(TileGrid);\n      }\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"is true by default","suites":["ol/source/Zoomify","#getInterpolate()"],"updatePoint":{"line":136,"column":26,"index":3920},"line":136,"code":"    it('is true by default', function () {\n      const source = new Zoomify({\n        url: '',\n        size: [47, 11]\n      });\n      expect(source.getInterpolate()).to.be(true);\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"is false if constructed with interpolate: false","suites":["ol/source/Zoomify","#getInterpolate()"],"updatePoint":{"line":143,"column":55,"index":4136},"line":143,"code":"    it('is false if constructed with interpolate: false', function () {\n      const source = new Zoomify({\n        interpolate: false,\n        url: '',\n        size: [47, 11]\n      });\n      expect(source.getInterpolate()).to.be(false);\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"has expected extent","suites":["ol/source/Zoomify","generated tileGrid"],"updatePoint":{"line":153,"column":27,"index":4406},"line":153,"code":"    it('has expected extent', function () {\n      const sources = [getZoomifySource(), getIIPSource()];\n      for (let i = 0; i < sources.length; i++) {\n        const tileGrid = sources[i].getTileGrid();\n        const expectedExtent = [0, -h, w, 0];\n        expect(tileGrid.getExtent()).to.eql(expectedExtent);\n      }\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"has expected origin","suites":["ol/source/Zoomify","generated tileGrid"],"updatePoint":{"line":161,"column":27,"index":4733},"line":161,"code":"    it('has expected origin', function () {\n      const sources = [getZoomifySource(), getIIPSource()];\n      for (let i = 0; i < sources.length; i++) {\n        const tileGrid = sources[i].getTileGrid();\n        const expectedOrigin = [0, 0];\n        expect(tileGrid.getOrigin()).to.eql(expectedOrigin);\n      }\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"has expected resolutions","suites":["ol/source/Zoomify","generated tileGrid"],"updatePoint":{"line":169,"column":32,"index":5058},"line":169,"code":"    it('has expected resolutions', function () {\n      const sources = [getZoomifySource(), getIIPSource()];\n      for (let i = 0; i < sources.length; i++) {\n        const tileGrid = sources[i].getTileGrid();\n        const expectedResolutions = [4, 2, 1];\n        expect(tileGrid.getResolutions()).to.eql(expectedResolutions);\n      }\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"has expected tileSize","suites":["ol/source/Zoomify","generated tileGrid"],"updatePoint":{"line":177,"column":29,"index":5398},"line":177,"code":"    it('has expected tileSize', function () {\n      const sources = [getZoomifySource(), getZoomifySourceWith1024pxTiles()];\n      const expectedTileSizes = [DEFAULT_TILE_SIZE, 1024];\n      for (let i = 0; i < sources.length; i++) {\n        const tileGrid = sources[i].getTileGrid();\n        expect(tileGrid.getTileSize()).to.eql(expectedTileSizes[i]);\n      }\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"has expected extent","suites":["ol/source/Zoomify","generated tileGrid"],"updatePoint":{"line":185,"column":27,"index":5765},"line":185,"code":"    it('has expected extent', function () {\n      const sources = [getZoomifySource(), getZoomifySourceWithExtentInFirstQuadrant()];\n      const expectedExtents = [[0, -size[1], size[0], 0], [0, 0, size[0], size[1]]];\n      for (let i = 0; i < sources.length; i++) {\n        const tileGrid = sources[i].getTileGrid();\n        expect(tileGrid.getExtent()).to.eql(expectedExtents[i]);\n      }\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"has expected origin","suites":["ol/source/Zoomify","generated tileGrid"],"updatePoint":{"line":193,"column":27,"index":6164},"line":193,"code":"    it('has expected origin', function () {\n      const sources = [getZoomifySource(), getZoomifySourceWithExtentInFirstQuadrant()];\n      const expectedOrigins = [[0, 0], [0, size[1]]];\n      for (let i = 0; i < sources.length; i++) {\n        const tileGrid = sources[i].getTileGrid();\n        expect(tileGrid.getOrigin()).to.eql(expectedOrigins[i]);\n      }\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"influences resolutions","suites":["ol/source/Zoomify","tierSizeCalculation configuration"],"updatePoint":{"line":203,"column":30,"index":6603},"line":203,"code":"    it('influences resolutions', function () {\n      // not configured at all\n      const source = new Zoomify({\n        url: zoomifyUrl,\n        size: [513, 256]\n      });\n      const tileGrid = source.getTileGrid();\n\n      // explicitly set as 'default'\n      const sourceDefault = new Zoomify({\n        url: zoomifyUrl,\n        size: [513, 256],\n        tierSizeCalculation: 'default'\n      });\n      const tileGridDefault = sourceDefault.getTileGrid();\n\n      // explicitly set to 'truncated'\n      const sourceTruncated = new Zoomify({\n        url: zoomifyUrl,\n        size: [513, 256],\n        tierSizeCalculation: 'truncated'\n      });\n      const tileGridTruncated = sourceTruncated.getTileGrid();\n      expect(tileGrid.getResolutions()).to.eql([4, 2, 1]);\n      expect(tileGridDefault.getResolutions()).to.eql([4, 2, 1]);\n      expect(tileGridTruncated.getResolutions()).to.eql([2, 1]);\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"creates an expected tileUrlFunction with zoomify template","suites":["ol/source/Zoomify","generated tileUrlFunction for zoomify protocol"],"updatePoint":{"line":232,"column":65,"index":7623},"line":232,"code":"    it('creates an expected tileUrlFunction with zoomify template', function () {\n      const source = getZoomifySource();\n      const tileUrlFunction = source.getTileUrlFunction();\n      // zoomlevel 0\n      expect(tileUrlFunction([0, 0, 0])).to.eql('spec/ol/source/images/zoomify/TileGroup0/0-0-0.jpg');\n      // zoomlevel 1\n      expect(tileUrlFunction([1, 0, 0])).to.eql('spec/ol/source/images/zoomify/TileGroup0/1-0-0.jpg');\n      expect(tileUrlFunction([1, 1, 0])).to.eql('spec/ol/source/images/zoomify/TileGroup0/1-1-0.jpg');\n      expect(tileUrlFunction([1, 0, 1])).to.eql('spec/ol/source/images/zoomify/TileGroup0/1-0-1.jpg');\n      expect(tileUrlFunction([1, 1, 1])).to.eql('spec/ol/source/images/zoomify/TileGroup0/1-1-1.jpg');\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"creates an expected tileUrlFunction with IIP template","suites":["ol/source/Zoomify","generated tileUrlFunction for zoomify protocol"],"updatePoint":{"line":243,"column":61,"index":8366},"line":243,"code":"    it('creates an expected tileUrlFunction with IIP template', function () {\n      const source = getIIPSource();\n      const tileUrlFunction = source.getTileUrlFunction();\n      // zoomlevel 0\n      expect(tileUrlFunction([0, 0, 0])).to.eql('spec/ol/source/images/zoomify?JTL=0,0');\n      // zoomlevel 1\n      expect(tileUrlFunction([1, 0, 0])).to.eql('spec/ol/source/images/zoomify?JTL=1,0');\n      expect(tileUrlFunction([1, 1, 0])).to.eql('spec/ol/source/images/zoomify?JTL=1,1');\n      expect(tileUrlFunction([1, 0, 1])).to.eql('spec/ol/source/images/zoomify?JTL=1,2');\n      expect(tileUrlFunction([1, 1, 1])).to.eql('spec/ol/source/images/zoomify?JTL=1,3');\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"creates an expected tileUrlFunction without template","suites":["ol/source/Zoomify","generated tileUrlFunction for zoomify protocol"],"updatePoint":{"line":254,"column":60,"index":9039},"line":254,"code":"    it('creates an expected tileUrlFunction without template', function () {\n      const source = new Zoomify({\n        url: 'spec/ol/source/images/zoomify/',\n        size: size\n      });\n      const tileUrlFunction = source.getTileUrlFunction();\n      // zoomlevel 0\n      expect(tileUrlFunction([0, 0, 0])).to.eql('spec/ol/source/images/zoomify/TileGroup0/0-0-0.jpg');\n      // zoomlevel 1\n      expect(tileUrlFunction([1, 0, 0])).to.eql('spec/ol/source/images/zoomify/TileGroup0/1-0-0.jpg');\n      expect(tileUrlFunction([1, 1, 0])).to.eql('spec/ol/source/images/zoomify/TileGroup0/1-1-0.jpg');\n      expect(tileUrlFunction([1, 0, 1])).to.eql('spec/ol/source/images/zoomify/TileGroup0/1-0-1.jpg');\n      expect(tileUrlFunction([1, 1, 1])).to.eql('spec/ol/source/images/zoomify/TileGroup0/1-1-1.jpg');\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"returns undefined if no tileCoord passed","suites":["ol/source/Zoomify","generated tileUrlFunction for zoomify protocol"],"updatePoint":{"line":268,"column":48,"index":9839},"line":268,"code":"    it('returns undefined if no tileCoord passed', function () {\n      const source = getZoomifySource();\n      const tileUrlFunction = source.getTileUrlFunction();\n      expect(tileUrlFunction()).to.be(undefined);\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"returns expected tileClass instances via \"getTile\"","suites":["ol/source/Zoomify","uses a custom tileClass"],"updatePoint":{"line":275,"column":58,"index":10130},"line":275,"code":"    it('returns expected tileClass instances via \"getTile\"', function () {\n      const source = getZoomifySource();\n      const tile = source.getTile(0, 0, 0, 1, proj);\n      expect(tile).to.be.a(CustomTile);\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"\"tile.getImage\" returns and caches an unloaded image","suites":["ol/source/Zoomify","uses a custom tileClass"],"updatePoint":{"line":280,"column":60,"index":10349},"line":280,"code":"    it('\"tile.getImage\" returns and caches an unloaded image', function () {\n      const source = getZoomifySource();\n      const tile = source.getTile(0, 0, 0, 1, proj);\n      const img = tile.getImage();\n      const tile2 = source.getTile(0, 0, 0, 1, proj);\n      const img2 = tile2.getImage();\n      expect(img).to.be.a(HTMLImageElement);\n      expect(img).to.be(img2);\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"\"tile.getImage\" returns and caches a loaded canvas","suites":["ol/source/Zoomify","uses a custom tileClass"],"updatePoint":{"line":289,"column":58,"index":10728},"line":289,"code":"    it('\"tile.getImage\" returns and caches a loaded canvas', function (done) {\n      const source = getZoomifySource();\n      const tile = source.getTile(0, 0, 0, 1, proj);\n      listen(tile, 'change', function () {\n        if (tile.getState() == 2) {\n          // LOADED\n          const img = tile.getImage();\n          expect(img).to.be.a(HTMLCanvasElement);\n          const tile2 = source.getTile(0, 0, 0, 1, proj);\n          expect(tile2.getState()).to.be(2); // LOADED\n          const img2 = tile2.getImage();\n          expect(img).to.be(img2);\n          done();\n        }\n      });\n      tile.load();\n    });","file":"browser/spec/ol/source/Zoomify.test.js","skipped":false,"dir":"test"},{"name":"calculates the area of Ilinois","suites":["ol/sphere","getArea()"],"updatePoint":{"line":131,"column":38,"index":4232},"line":131,"code":"    it('calculates the area of Ilinois', function () {\n      const area = getArea(geometry, {\n        projection: 'EPSG:4326'\n      });\n      expect(area).to.equal(expectedArea);\n    });","file":"browser/spec/ol/sphere.test.js","skipped":false,"dir":"test"},{"name":"calculates the area of a projected geometry","suites":["ol/sphere","getArea()"],"updatePoint":{"line":137,"column":51,"index":4432},"line":137,"code":"    it('calculates the area of a projected geometry', function () {\n      const projected = geometry.clone().transform('EPSG:4326', 'EPSG:3857');\n      const area = getArea(projected);\n      expect(area).to.roughlyEqual(expectedArea, 1e-3);\n    });","file":"browser/spec/ol/sphere.test.js","skipped":false,"dir":"test"},{"name":"calculates the area of a projected geometry collection","suites":["ol/sphere","getArea()"],"updatePoint":{"line":142,"column":62,"index":4692},"line":142,"code":"    it('calculates the area of a projected geometry collection', function () {\n      const part = geometry.clone().transform('EPSG:4326', 'EPSG:3857');\n      const collection = new GeometryCollection([part, part.clone()]);\n      const area = getArea(collection);\n      expect(area).to.roughlyEqual(2 * expectedArea, 1e-3);\n    });","file":"browser/spec/ol/sphere.test.js","skipped":false,"dir":"test"},{"name":"returns the correct padding without precision","suites":["ol.string","ol.string.padNumber"],"updatePoint":{"line":4,"column":53,"index":213},"line":4,"code":"    it('returns the correct padding without precision', function () {\n      expect(padNumber(6.5, 2)).to.be('06.5');\n      expect(padNumber(6.5, 3)).to.be('006.5');\n      expect(padNumber(1.25, 2)).to.be('01.25');\n      expect(padNumber(5, 3)).to.be('005');\n    });","file":"browser/spec/ol/string.test.js","skipped":false,"dir":"test"},{"name":"returns the same string when padding is less than length","suites":["ol.string","ol.string.padNumber"],"updatePoint":{"line":10,"column":64,"index":490},"line":10,"code":"    it('returns the same string when padding is less than length', function () {\n      expect(padNumber(6.5, 0)).to.be('6.5');\n      expect(padNumber(6.5, 1)).to.be('6.5');\n      expect(padNumber(1.25, 0)).to.be('1.25');\n      expect(padNumber(5, 0)).to.be('5');\n      expect(padNumber(5, 1)).to.be('5');\n    });","file":"browser/spec/ol/string.test.js","skipped":false,"dir":"test"},{"name":"returns the correct string precision is given","suites":["ol.string","ol.string.padNumber"],"updatePoint":{"line":17,"column":53,"index":792},"line":17,"code":"    it('returns the correct string precision is given', function () {\n      expect(padNumber(6.5, 0, 2)).to.be('6.50');\n      expect(padNumber(6.5, 1, 2)).to.be('6.50');\n      expect(padNumber(6.5, 2, 2)).to.be('06.50');\n      expect(padNumber(1.25, 2, 3)).to.be('01.250');\n      expect(padNumber(1.25, 2, 1)).to.be('01.3');\n      expect(padNumber(9.9, 2, 0)).to.be('10');\n      expect(padNumber(5, 0, 0)).to.be('5');\n      expect(padNumber(5, 1, 1)).to.be('5.0');\n      expect(padNumber(5, 2, 1)).to.be('05.0');\n      expect(padNumber(5, 2, 0)).to.be('05');\n    });","file":"browser/spec/ol/string.test.js","skipped":false,"dir":"test"},{"name":"should return the correct value for number input","suites":["ol.string","ol.string.compareVersions"],"updatePoint":{"line":31,"column":56,"index":1422},"line":31,"code":"    it('should return the correct value for number input', function () {\n      expect(compareVersions(1, 1)).to.be(0);\n      expect(compareVersions(1.0, 1.1)).to.be.below(0);\n      expect(compareVersions(2.0, 1.1)).to.be.above(0);\n    });","file":"browser/spec/ol/string.test.js","skipped":false,"dir":"test"},{"name":"should return the correct value for string input","suites":["ol.string","ol.string.compareVersions"],"updatePoint":{"line":36,"column":56,"index":1661},"line":36,"code":"    it('should return the correct value for string input', function () {\n      expect(compareVersions('1.0', '1.0')).to.be(0);\n      expect(compareVersions('1.0.0.0', '1.0')).to.be(0);\n      expect(compareVersions('1.000', '1.0')).to.be(0);\n      expect(compareVersions('1.0.2.1', '1.1')).to.be.below(0);\n      expect(compareVersions('1.1', '1.0.2.1')).to.be.above(0);\n      expect(compareVersions('1', '1.1')).to.be.below(0);\n      expect(compareVersions('2.2', '2')).to.be.above(0);\n      expect(compareVersions('9.5', '9.10')).to.be.below(0);\n      expect(compareVersions('9.5', '9.11')).to.be.below(0);\n      expect(compareVersions('9.11', '9.10')).to.be.above(0);\n      expect(compareVersions('9.1', '9.10')).to.be.below(0);\n      expect(compareVersions('9.1.1', '9.10')).to.be.below(0);\n      expect(compareVersions('9.1.1', '9.11')).to.be.below(0);\n      expect(compareVersions(' 7', '6')).to.be.above(0);\n      expect(compareVersions('7 ', '6')).to.be.above(0);\n      expect(compareVersions(' 7 ', '6')).to.be.above(0);\n      expect(compareVersions('7', ' 6')).to.be.above(0);\n      expect(compareVersions('7', '6 ')).to.be.above(0);\n      expect(compareVersions('7', ' 6 ')).to.be.above(0);\n      expect(compareVersions(' 7', ' 6')).to.be.above(0);\n      expect(compareVersions('7 ', '6 ')).to.be.above(0);\n      expect(compareVersions(' 7 ', ' 6 ')).to.be.above(0);\n    });","file":"browser/spec/ol/string.test.js","skipped":false,"dir":"test"},{"name":"creates a canvas (no fill-style)","suites":["ol.style.Circle","#constructor"],"updatePoint":{"line":6,"column":40,"index":305},"line":6,"code":"    it('creates a canvas (no fill-style)', function () {\n      const style = new CircleStyle({\n        radius: 10\n      });\n      expect(style.getImage(1)).to.be.an(HTMLCanvasElement);\n      expect(style.getSize()).to.eql([20, 20]);\n      expect(style.getImageSize()).to.eql([20, 20]);\n      expect(style.getOrigin()).to.eql([0, 0]);\n      expect(style.getAnchor()).to.eql([10, 10]);\n      // no hit-detection image is created, because no fill style is set\n      expect(style.getImage(1)).to.be(style.getHitDetectionImage());\n      expect(style.getHitDetectionImage()).to.be.an(HTMLCanvasElement);\n    });","file":"browser/spec/ol/style/circle.test.js","skipped":false,"dir":"test"},{"name":"creates a canvas (transparent fill-style)","suites":["ol.style.Circle","#constructor"],"updatePoint":{"line":19,"column":49,"index":920},"line":19,"code":"    it('creates a canvas (transparent fill-style)', function () {\n      const style = new CircleStyle({\n        radius: 10,\n        fill: new Fill({\n          color: 'transparent'\n        })\n      });\n      expect(style.getImage(1)).to.be.an(HTMLCanvasElement);\n      expect(style.getSize()).to.eql([20, 20]);\n      expect(style.getImageSize()).to.eql([20, 20]);\n      expect(style.getOrigin()).to.eql([0, 0]);\n      expect(style.getAnchor()).to.eql([10, 10]);\n      // hit-detection image is created, because transparent fill style is set\n      expect(style.getImage(1)).to.not.be(style.getHitDetectionImage());\n      expect(style.getHitDetectionImage()).to.be.an(HTMLCanvasElement);\n    });","file":"browser/spec/ol/style/circle.test.js","skipped":false,"dir":"test"},{"name":"creates a canvas (non-transparent fill-style)","suites":["ol.style.Circle","#constructor"],"updatePoint":{"line":35,"column":53,"index":1617},"line":35,"code":"    it('creates a canvas (non-transparent fill-style)', function () {\n      const style = new CircleStyle({\n        radius: 10,\n        fill: new Fill({\n          color: '#FFFF00'\n        })\n      });\n      expect(style.getImage(1)).to.be.an(HTMLCanvasElement);\n      expect(style.getSize()).to.eql([20, 20]);\n      expect(style.getImageSize()).to.eql([20, 20]);\n      expect(style.getOrigin()).to.eql([0, 0]);\n      expect(style.getAnchor()).to.eql([10, 10]);\n      // no hit-detection image is created, because non-transparent fill style is set\n      expect(style.getImage(1)).to.be(style.getHitDetectionImage());\n      expect(style.getHitDetectionImage()).to.be.an(HTMLCanvasElement);\n    });","file":"browser/spec/ol/style/circle.test.js","skipped":false,"dir":"test"},{"name":"creates a new ol.style.Circle","suites":["ol.style.Circle","#clone"],"updatePoint":{"line":53,"column":37,"index":2338},"line":53,"code":"    it('creates a new ol.style.Circle', function () {\n      const original = new CircleStyle();\n      const clone = original.clone();\n      expect(clone).to.be.an(CircleStyle);\n      expect(clone).to.not.be(original);\n    });","file":"browser/spec/ol/style/circle.test.js","skipped":false,"dir":"test"},{"name":"copies all values","suites":["ol.style.Circle","#clone"],"updatePoint":{"line":59,"column":25,"index":2552},"line":59,"code":"    it('copies all values', function () {\n      const original = new CircleStyle({\n        fill: new Fill({\n          color: '#319FD3'\n        }),\n        stroke: new Stroke({\n          color: '#319FD3'\n        }),\n        radius: 5,\n        scale: [1.5, 1],\n        rotation: 2,\n        rotateWithView: true,\n        displacement: [10, 20]\n      });\n      original.setOpacity(0.5);\n      const clone = original.clone();\n      expect(original.getFill().getColor()).to.eql(clone.getFill().getColor());\n      expect(original.getOpacity()).to.eql(clone.getOpacity());\n      expect(original.getRadius()).to.eql(clone.getRadius());\n      expect(original.getRotation()).to.eql(clone.getRotation());\n      expect(original.getRotateWithView()).to.eql(clone.getRotateWithView());\n      expect(original.getScale()[0]).to.eql(clone.getScale()[0]);\n      expect(original.getScale()[1]).to.eql(clone.getScale()[1]);\n      expect(original.getStroke().getColor()).to.eql(clone.getStroke().getColor());\n      expect(original.getDisplacement()[0]).to.eql(clone.getDisplacement()[0]);\n      expect(original.getDisplacement()[1]).to.eql(clone.getDisplacement()[1]);\n    });","file":"browser/spec/ol/style/circle.test.js","skipped":false,"dir":"test"},{"name":"the clone does not reference the same objects as the original","suites":["ol.style.Circle","#clone"],"updatePoint":{"line":86,"column":69,"index":3751},"line":86,"code":"    it('the clone does not reference the same objects as the original', function () {\n      const original = new CircleStyle({\n        fill: new Fill({\n          color: '#319FD3'\n        }),\n        stroke: new Stroke({\n          color: '#319FD3'\n        }),\n        scale: [1.5, 1],\n        displacement: [0, 5]\n      });\n      const clone = original.clone();\n      expect(original.getFill()).to.not.be(clone.getFill());\n      expect(original.getStroke()).to.not.be(clone.getStroke());\n      expect(original.getScale()).to.not.be(clone.getScale());\n      expect(original.getDisplacement()).to.not.be(clone.getDisplacement());\n      clone.getFill().setColor('#012345');\n      clone.getStroke().setColor('#012345');\n      expect(original.getFill().getColor()).to.not.eql(clone.getFill().getColor());\n      expect(original.getStroke().getColor()).to.not.eql(clone.getStroke().getColor());\n    });","file":"browser/spec/ol/style/circle.test.js","skipped":false,"dir":"test"},{"name":"changes the circle radius","suites":["ol.style.Circle","#setRadius"],"updatePoint":{"line":109,"column":33,"index":4655},"line":109,"code":"    it('changes the circle radius', function () {\n      const style = new CircleStyle({\n        radius: 10,\n        fill: new Fill({\n          color: '#FFFF00'\n        })\n      });\n      expect(style.getRadius()).to.eql(10);\n      style.setRadius(20);\n      expect(style.getRadius()).to.eql(20);\n    });","file":"browser/spec/ol/style/circle.test.js","skipped":false,"dir":"test"},{"name":"does a simple transform when a fraction is present","suites":["ol/style/expressions","numberToGlsl"],"updatePoint":{"line":6,"column":58,"index":526},"line":6,"code":"    it('does a simple transform when a fraction is present', function () {\n      expect(numberToGlsl(1.3456)).to.eql('1.3456');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"adds a fraction separator when missing","suites":["ol/style/expressions","numberToGlsl"],"updatePoint":{"line":9,"column":46,"index":650},"line":9,"code":"    it('adds a fraction separator when missing', function () {\n      expect(numberToGlsl(1)).to.eql('1.0');\n      expect(numberToGlsl(2.0)).to.eql('2.0');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"outputs numbers with dot separators","suites":["ol/style/expressions","arrayToGlsl"],"updatePoint":{"line":15,"column":43,"index":856},"line":15,"code":"    it('outputs numbers with dot separators', function () {\n      expect(arrayToGlsl([1, 0, 3.45, 0.8888])).to.eql('vec4(1.0, 0.0, 3.45, 0.8888)');\n      expect(arrayToGlsl([3, 4])).to.eql('vec2(3.0, 4.0)');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws on invalid lengths","suites":["ol/style/expressions","arrayToGlsl"],"updatePoint":{"line":19,"column":33,"index":1062},"line":19,"code":"    it('throws on invalid lengths', function () {\n      expect(() => arrayToGlsl([3])).to.throwException();\n      expect(() => arrayToGlsl([3, 2, 1, 0, -1])).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"normalizes color and outputs numbers with dot separators, including premultiplied alpha","suites":["ol/style/expressions","colorToGlsl"],"updatePoint":{"line":25,"column":95,"index":1357},"line":25,"code":"    it('normalizes color and outputs numbers with dot separators, including premultiplied alpha', function () {\n      expect(colorToGlsl([100, 0, 255])).to.eql('vec4(0.39215686274509803, 0.0, 1.0, 1.0)');\n      expect(colorToGlsl([100, 0, 255, 0.7])).to.eql('vec4(0.2745098039215686, 0.0, 0.7, 0.7)');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"handles colors in string format","suites":["ol/style/expressions","colorToGlsl"],"updatePoint":{"line":29,"column":39,"index":1611},"line":29,"code":"    it('handles colors in string format', function () {\n      expect(colorToGlsl('red')).to.eql('vec4(1.0, 0.0, 0.0, 1.0)');\n      expect(colorToGlsl('#00ff99')).to.eql('vec4(0.0, 1.0, 0.6, 1.0)');\n      expect(colorToGlsl('rgb(100, 0, 255)')).to.eql('vec4(0.39215686274509803, 0.0, 1.0, 1.0)');\n      expect(colorToGlsl('rgba(100, 0, 255, 0.3)')).to.eql('vec4(0.11764705882352941, 0.0, 0.3, 0.3)');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"maps input string to stable numbers","suites":["ol/style/expressions","stringToGlsl"],"updatePoint":{"line":45,"column":43,"index":2223},"line":45,"code":"    it('maps input string to stable numbers', function () {\n      expect(stringToGlsl(context, 'abcd')).to.eql('0.0');\n      expect(stringToGlsl(context, 'defg')).to.eql('1.0');\n      expect(stringToGlsl(context, 'hijk')).to.eql('2.0');\n      expect(stringToGlsl(context, 'abcd')).to.eql('0.0');\n      expect(stringToGlsl(context, 'def')).to.eql('3.0');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"return true if only one value type","suites":["ol/style/expressions","isTypeUnique"],"updatePoint":{"line":54,"column":42,"index":2631},"line":54,"code":"    it('return true if only one value type', function () {\n      expect(isTypeUnique(ValueTypes.NUMBER)).to.eql(true);\n      expect(isTypeUnique(ValueTypes.STRING)).to.eql(true);\n      expect(isTypeUnique(ValueTypes.COLOR)).to.eql(true);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"return false if several value types","suites":["ol/style/expressions","isTypeUnique"],"updatePoint":{"line":59,"column":43,"index":2878},"line":59,"code":"    it('return false if several value types', function () {\n      expect(isTypeUnique(ValueTypes.NUMBER | ValueTypes.COLOR)).to.eql(false);\n      expect(isTypeUnique(ValueTypes.ANY)).to.eql(false);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"return false if no value type","suites":["ol/style/expressions","isTypeUnique"],"updatePoint":{"line":63,"column":37,"index":3078},"line":63,"code":"    it('return false if no value type', function () {\n      expect(isTypeUnique(ValueTypes.NUMBER & ValueTypes.COLOR)).to.eql(false);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly analyzes a literal value","suites":["ol/style/expressions","getValueType"],"updatePoint":{"line":68,"column":42,"index":3272},"line":68,"code":"    it('correctly analyzes a literal value', function () {\n      expect(getValueType(1234)).to.eql(ValueTypes.NUMBER);\n      expect(getValueType([1, 2, 3, 4])).to.eql(ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY);\n      expect(getValueType([1, 2, 3])).to.eql(ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY);\n      expect(getValueType([1, 2])).to.eql(ValueTypes.NUMBER_ARRAY);\n      expect(getValueType([1, 2, 3, 4, 5])).to.eql(ValueTypes.NUMBER_ARRAY);\n      expect(getValueType('yellow')).to.eql(ValueTypes.COLOR | ValueTypes.STRING);\n      expect(getValueType('#113366')).to.eql(ValueTypes.COLOR | ValueTypes.STRING);\n      expect(getValueType('rgba(252,171,48,0.62)')).to.eql(ValueTypes.COLOR | ValueTypes.STRING);\n      expect(getValueType('abcd')).to.eql(ValueTypes.STRING);\n      expect(getValueType(true)).to.eql(ValueTypes.BOOLEAN);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws on an unsupported type (object)","suites":["ol/style/expressions","getValueType"],"updatePoint":{"line":80,"column":46,"index":4119},"line":80,"code":"    it('throws on an unsupported type (object)', function () {\n      expect(() => getValueType(new Object())).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws on an unsupported type (mixed array)","suites":["ol/style/expressions","getValueType"],"updatePoint":{"line":83,"column":51,"index":4263},"line":83,"code":"    it('throws on an unsupported type (mixed array)', function () {\n      expect(() => getValueType([1, true, 'aa'])).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly analyzes operator return types","suites":["ol/style/expressions","getValueType"],"updatePoint":{"line":86,"column":48,"index":4407},"line":86,"code":"    it('correctly analyzes operator return types', function () {\n      expect(getValueType(['get', 'myAttr'])).to.eql(ValueTypes.ANY);\n      expect(getValueType(['var', 'myVar'])).to.eql(ValueTypes.ANY);\n      expect(getValueType(['time'])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['zoom'])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['resolution'])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['+', ['get', 'size'], 12])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['-', ['get', 'size'], 12])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['/', ['get', 'size'], 12])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['*', ['get', 'size'], 12])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['clamp', ['get', 'attr2'], ['get', 'attr3'], 20])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['^', 10, 2])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['%', ['time'], 10])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['>', 10, ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['>=', 10, ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['<', 10, ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['<=', 10, ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['==', 10, ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['!=', 10, ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['all', true, ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['any', true, ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['between', ['get', 'attr4'], -4.0, 5.0])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['!', ['get', 'attr4']])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['array', ['get', 'attr4'], 1, 2, 3])).to.eql(ValueTypes.NUMBER_ARRAY);\n      expect(getValueType(['color', ['get', 'attr4'], 1, 2])).to.eql(ValueTypes.COLOR);\n      expect(getValueType(['in', ['get', 'attr4'], 1, 2, 3])).to.eql(ValueTypes.BOOLEAN);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly analyzes get operator return type with hint","suites":["ol/style/expressions","getValueType"],"updatePoint":{"line":113,"column":61,"index":6543},"line":113,"code":"    it('correctly analyzes get operator return type with hint', function () {\n      expect(getValueType(['get', 'myAttr', 'number'])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['get', 'myAttr', 'string'])).to.eql(ValueTypes.STRING);\n      expect(getValueType(['get', 'myAttr', 'boolean'])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['get', 'myAttr', 'number[]'])).to.eql(ValueTypes.NUMBER_ARRAY);\n      expect(getValueType(['get', 'myAttr', 'color'])).to.eql(ValueTypes.COLOR);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws on invalid hint","suites":["ol/style/expressions","getValueType"],"updatePoint":{"line":120,"column":30,"index":7021},"line":120,"code":"    it('throws on invalid hint', function () {\n      expect(() => getValueType(['get', 'myAttr', 'weird-type'])).to.throwError(/Unrecognized type hint/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly converts expressions to GLSL","suites":["ol/style/expressions","expressionToGlsl"],"updatePoint":{"line":140,"column":46,"index":7540},"line":140,"code":"    it('correctly converts expressions to GLSL', function () {\n      expect(expressionToGlsl(context, ['get', 'myAttr'])).to.eql('a_myAttr');\n      expect(expressionToGlsl(context, ['var', 'myVar'])).to.eql(uniformNameForVariable('myVar'));\n      expect(expressionToGlsl(context, ['time'])).to.eql('u_time');\n      expect(expressionToGlsl(context, ['zoom'])).to.eql('u_zoom');\n      expect(expressionToGlsl(context, ['resolution'])).to.eql('u_resolution');\n      expect(expressionToGlsl(context, ['+', 1, 2, 3, 4])).to.eql('(1.0 + 2.0 + 3.0 + 4.0)');\n      expect(expressionToGlsl(context, ['*', 1, 2, 3, 4])).to.eql('(1.0 * 2.0 * 3.0 * 4.0)');\n      expect(expressionToGlsl(context, ['*', [255, 127.5, 0, 0.5], 'red'], ValueTypes.ANY)).to.eql('(vec4(0.5, 0.25, 0.0, 0.5) * vec4(1.0, 0.0, 0.0, 1.0))');\n      expect(expressionToGlsl(context, ['+', ['*', ['get', 'size'], 0.001], 12])).to.eql('((a_size * 0.001) + 12.0)');\n      expect(expressionToGlsl(context, ['/', ['-', ['get', 'size'], 20], 100])).to.eql('((a_size - 20.0) / 100.0)');\n      expect(expressionToGlsl(context, ['clamp', ['get', 'attr2'], ['get', 'attr3'], 20])).to.eql('clamp(a_attr2, a_attr3, 20.0)');\n      expect(expressionToGlsl(context, ['^', ['%', ['time'], 10], 2])).to.eql('pow(mod(u_time, 10.0), 2.0)');\n      expect(expressionToGlsl(context, ['abs', ['-', ['get', 'attr3'], ['get', 'attr2']]])).to.eql('abs((a_attr3 - a_attr2))');\n      expect(expressionToGlsl(context, ['floor', 1])).to.eql('floor(1.0)');\n      expect(expressionToGlsl(context, ['round', 1])).to.eql('floor(1.0 + 0.5)');\n      expect(expressionToGlsl(context, ['ceil', 1])).to.eql('ceil(1.0)');\n      expect(expressionToGlsl(context, ['sin', 1])).to.eql('sin(1.0)');\n      expect(expressionToGlsl(context, ['cos', 1])).to.eql('cos(1.0)');\n      expect(expressionToGlsl(context, ['atan', 1])).to.eql('atan(1.0)');\n      expect(expressionToGlsl(context, ['atan', 1, 0.5])).to.eql('atan(1.0, 0.5)');\n      expect(expressionToGlsl(context, ['sqrt', 100])).to.eql('sqrt(100.0)');\n      expect(expressionToGlsl(context, ['>', 10, ['get', 'attr4']])).to.eql('(10.0 > a_attr4)');\n      expect(expressionToGlsl(context, ['>=', 10, ['get', 'attr4']])).to.eql('(10.0 >= a_attr4)');\n      expect(expressionToGlsl(context, ['<', 10, ['get', 'attr4']])).to.eql('(10.0 < a_attr4)');\n      expect(expressionToGlsl(context, ['<=', 10, ['get', 'attr4']])).to.eql('(10.0 <= a_attr4)');\n      expect(expressionToGlsl(context, ['==', 10, ['get', 'attr4']])).to.eql('(10.0 == a_attr4)');\n      expect(expressionToGlsl(context, ['==', 'red', ['get', 'attr5']])).to.eql(`(${stringToGlsl(context, 'red')} == a_attr5)`);\n      expect(expressionToGlsl(context, ['!=', 10, ['get', 'attr4']])).to.eql('(10.0 != a_attr4)');\n      expect(expressionToGlsl(context, ['all', true, ['get', 'attr6']])).to.eql('(true && a_attr6)');\n      expect(expressionToGlsl(context, ['any', true, ['get', 'attr6']])).to.eql('(true || a_attr6)');\n      expect(expressionToGlsl(context, ['any', true, ['get', 'attr6'], true])).to.eql('(true || a_attr6 || true)');\n      expect(expressionToGlsl(context, ['between', ['get', 'attr4'], -4.0, 5.0])).to.eql('(a_attr4 >= -4.0 && a_attr4 <= 5.0)');\n      expect(expressionToGlsl(context, ['!', ['get', 'attr6']])).to.eql('(!a_attr6)');\n      expect(expressionToGlsl(context, ['array', ['get', 'attr4'], 1, 2, 3])).to.eql('vec4(a_attr4, 1.0, 2.0, 3.0)');\n      expect(expressionToGlsl(context, ['color', ['get', 'attr4'], 1, 2, 0.5])).to.eql('(0.5 * vec4(a_attr4 / 255.0, 1.0 / 255.0, 2.0 / 255.0, 1.0))');\n      expect(expressionToGlsl(context, ['band', 1])).to.eql('getBandValue(1.0, 0.0, 0.0)');\n      expect(expressionToGlsl(context, ['band', 1, -1, 2])).to.eql('getBandValue(1.0, -1.0, 2.0)');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if the value does not match the type","suites":["ol/style/expressions","expressionToGlsl"],"updatePoint":{"line":179,"column":51,"index":11291},"line":179,"code":"    it('throws if the value does not match the type', function () {\n      const call = function () {\n        expressionToGlsl(context, '42', ValueTypes.NUMBER);\n      };\n      expect(call).to.throwException(/No matching type was found/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly adapts output for fragment shaders","suites":["ol/style/expressions","expressionToGlsl"],"updatePoint":{"line":185,"column":52,"index":11538},"line":185,"code":"    it('correctly adapts output for fragment shaders', function () {\n      context.inFragmentShader = true;\n      expect(expressionToGlsl(context, ['get', 'myAttr'])).to.eql('v_myAttr');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"gives precedence to the string type unless asked otherwise","suites":["ol/style/expressions","expressionToGlsl"],"updatePoint":{"line":189,"column":66,"index":11747},"line":189,"code":"    it('gives precedence to the string type unless asked otherwise', function () {\n      expect(expressionToGlsl(context, 'lightgreen', ValueTypes.ANY)).to.eql('0.0');\n      expect(expressionToGlsl(context, 'lightgreen', ValueTypes.COLOR)).to.eql('vec4(0.5647058823529412, 0.9333333333333333, 0.5647058823529412, 1.0)');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws on unsupported types for operators","suites":["ol/style/expressions","expressionToGlsl"],"updatePoint":{"line":193,"column":49,"index":12059},"line":193,"code":"    it('throws on unsupported types for operators', function () {\n      expect(() => expressionToGlsl(context, ['var', 1234])).to.throwException();\n      expect(() => expressionToGlsl(context, ['any', ['var', 'aa'], 10])).to.throwException();\n      expect(() => expressionToGlsl(context, ['all', ['var', 'aa'], 10])).to.throwException();\n      expect(() => expressionToGlsl(context, ['<', 0, 'aa'])).to.throwException();\n      expect(() => expressionToGlsl(context, ['+', true, ['get', 'attr']])).to.throwException();\n      expect(() => expressionToGlsl(context, ['color', 1, 2, 'red'])).to.throwException();\n      expect(() => expressionToGlsl(context, ['array', 1, '2', 3])).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws with the wrong number of arguments","suites":["ol/style/expressions","expressionToGlsl"],"updatePoint":{"line":202,"column":49,"index":12765},"line":202,"code":"    it('throws with the wrong number of arguments', function () {\n      expect(() => expressionToGlsl(context, ['var', 1234, 456])).to.throwException();\n      expect(() => expressionToGlsl(context, ['all', ['var', true], ['get', true], true])).to.throwException();\n      expect(() => expressionToGlsl(context, ['any', ['var', true]])).to.throwException();\n      expect(() => expressionToGlsl(context, ['<', 4])).to.throwException();\n      expect(() => expressionToGlsl(context, ['+'])).to.throwException();\n      expect(() => expressionToGlsl(context, ['array', 1])).to.throwException();\n      expect(() => expressionToGlsl(context, ['color', 1, 2, 3, 4, 5])).to.throwException();\n      expect(() => expressionToGlsl(context, ['sqrt', 1, 2])).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws on invalid expressions","suites":["ol/style/expressions","expressionToGlsl"],"updatePoint":{"line":212,"column":37,"index":13525},"line":212,"code":"    it('throws on invalid expressions', function () {\n      expect(() => expressionToGlsl(context, null)).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws when using a variable not defined in the style","suites":["ol/style/expressions","expressionToGlsl"],"updatePoint":{"line":215,"column":61,"index":13684},"line":215,"code":"    it('throws when using a variable not defined in the style', () => {\n      expect(() => expressionToGlsl(context, ['var', 'myAttr'])).to.throwError(/variable is missing/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly guesses the output type","suites":["ol/style/expressions","case operator"],"updatePoint":{"line":230,"column":41,"index":14095},"line":230,"code":"    it('correctly guesses the output type', function () {\n      expect(getValueType(['case', true, 0, false, [3, 4, 5], 'green'])).to.eql(ValueTypes.NONE);\n      expect(getValueType(['case', true, 0, false, 1, 2])).to.eql(ValueTypes.NUMBER);\n      expect(getValueType(['case', true, [0, 0, 0], true, [1, 2, 3], ['get', 'attr'], [4, 5, 6, 7], [8, 9, 0]])).to.eql(ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY);\n      expect(getValueType(['case', true, 'red', true, 'yellow', ['get', 'attr'], 'green', 'white'])).to.eql(ValueTypes.COLOR | ValueTypes.STRING);\n      expect(getValueType(['case', true, [0, 0], false, [1, 1], [2, 2]])).to.eql(ValueTypes.NUMBER_ARRAY);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if no single output type could be inferred","suites":["ol/style/expressions","case operator"],"updatePoint":{"line":237,"column":57,"index":14780},"line":237,"code":"    it('throws if no single output type could be inferred', function () {\n      expect(() => expressionToGlsl(context, ['case', false, 'red', true, 'yellow', 'green'], ValueTypes.COLOR)).not.to.throwException();\n      expect(() => expressionToGlsl(context, ['case', true, 'red', true, 'yellow', 'green'])).to.throwException();\n      expect(() => expressionToGlsl(context, ['case', true, 'red', false, 'yellow', 'green'], ValueTypes.NUMBER)).to.throwException();\n      expect(() => expressionToGlsl(context, ['case', true, 'red', false, 'yellow', 'not_a_color'], ValueTypes.COLOR)).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if invalid argument count","suites":["ol/style/expressions","case operator"],"updatePoint":{"line":243,"column":40,"index":15373},"line":243,"code":"    it('throws if invalid argument count', function () {\n      expect(() => expressionToGlsl(context, ['case', true, 0, false, 1])).to.throwException();\n      expect(() => expressionToGlsl(context, ['case', true, 0])).to.throwException();\n      expect(() => expressionToGlsl(context, ['case', false])).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (colors)","suites":["ol/style/expressions","case operator"],"updatePoint":{"line":248,"column":48,"index":15712},"line":248,"code":"    it('correctly parses the expression (colors)', function () {\n      expect(expressionToGlsl(context, ['case', ['>', ['get', 'attr'], 3], 'red', ['>', ['get', 'attr'], 1], 'yellow', 'white'], ValueTypes.COLOR)).to.eql('((a_attr > 3.0) ? vec4(1.0, 0.0, 0.0, 1.0) : ((a_attr > 1.0) ? vec4(1.0, 1.0, 0.0, 1.0) : vec4(1.0, 1.0, 1.0, 1.0)))');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly guesses the output type","suites":["ol/style/expressions","match operator"],"updatePoint":{"line":263,"column":41,"index":16303},"line":263,"code":"    it('correctly guesses the output type', function () {\n      expect(getValueType(['match', ['get', 'attr'], 0, 'red', 1, 'yellow', 'green'])).to.eql(ValueTypes.STRING | ValueTypes.COLOR);\n      expect(getValueType(['match', ['get', 'attr'], 0, 'not_a_color', 1, 'yellow', 'green'])).to.eql(ValueTypes.STRING);\n      expect(getValueType(['match', ['get', 'attr'], 0, 'red', 1, 'yellow', 'not_a_color'])).to.eql(ValueTypes.STRING);\n      expect(getValueType(['match', ['get', 'attr'], 0, [1, 1, 0], 1, [1, 0, 1], [0, 1, 1]])).to.eql(ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY);\n      expect(getValueType(['match', ['get', 'attr'], 0, [1, 1, 0], 1, [1, 0, 1], 'white'])).to.eql(ValueTypes.COLOR);\n      expect(getValueType(['match', ['get', 'attr'], 0, 'red', 1, true, 100])).to.eql(ValueTypes.NONE);\n      expect(getValueType(['match', ['get', 'attr'], 0, false, 1, true, false])).to.eql(ValueTypes.BOOLEAN);\n      expect(getValueType(['match', ['get', 'attr'], 0, 100, 1, 200, 300])).to.eql(ValueTypes.NUMBER);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if no single output type could be inferred","suites":["ol/style/expressions","match operator"],"updatePoint":{"line":273,"column":57,"index":17340},"line":273,"code":"    it('throws if no single output type could be inferred', function () {\n      expect(() => expressionToGlsl(context, ['match', ['get', 'attr'], 0, 'red', 1, 'yellow', 'green'], ValueTypes.COLOR)).not.to.throwException();\n      expect(() => expressionToGlsl(context, ['match', ['get', 'attr'], 0, 'red', 1, 'yellow', 'green'])).to.throwException();\n      expect(() => expressionToGlsl(context, ['match', ['get', 'attr'], 0, 'red', 1, 'yellow', 'green'], ValueTypes.NUMBER)).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if invalid argument count","suites":["ol/style/expressions","match operator"],"updatePoint":{"line":278,"column":40,"index":17827},"line":278,"code":"    it('throws if invalid argument count', function () {\n      expect(() => expressionToGlsl(context, ['match', ['get', 'attr'], 0, true, false, false])).to.throwException();\n      expect(() => expressionToGlsl(context, ['match', ['get', 'attr'], 0, true])).to.throwException();\n      expect(() => expressionToGlsl(context, ['match', ['get', 'attr'], 0])).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (colors)","suites":["ol/style/expressions","match operator"],"updatePoint":{"line":283,"column":48,"index":18220},"line":283,"code":"    it('correctly parses the expression (colors)', function () {\n      expect(expressionToGlsl(context, ['match', ['get', 'attr'], 0, 'red', 1, 'yellow', 'white'], ValueTypes.COLOR)).to.eql('(a_attr == 0.0 ? vec4(1.0, 0.0, 0.0, 1.0) : (a_attr == 1.0 ? vec4(1.0, 1.0, 0.0, 1.0) : vec4(1.0, 1.0, 1.0, 1.0)))');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (strings)","suites":["ol/style/expressions","match operator"],"updatePoint":{"line":286,"column":49,"index":18538},"line":286,"code":"    it('correctly parses the expression (strings)', function () {\n      function toGlsl(string) {\n        return stringToGlsl(context, string);\n      }\n      expect(expressionToGlsl(context, ['match', ['get', 'attr'], 10, 'red', 20, 'yellow', 'white'], ValueTypes.STRING)).to.eql(`(a_attr == 10.0 ? ${toGlsl('red')} : (a_attr == 20.0 ? ${toGlsl('yellow')} : ${toGlsl('white')}))`);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (number arrays)","suites":["ol/style/expressions","match operator"],"updatePoint":{"line":292,"column":55,"index":18934},"line":292,"code":"    it('correctly parses the expression (number arrays)', function () {\n      function toGlsl(string) {\n        return stringToGlsl(context, string);\n      }\n      expect(expressionToGlsl(context, ['match', ['get', 'attr'], 'low', [0, 0], 'high', [0, 1], [1, 0]], ValueTypes.NUMBER_ARRAY)).to.eql(`(a_attr == ${toGlsl('low')} ? vec2(0.0, 0.0) : (a_attr == ${toGlsl('high')} ? vec2(0.0, 1.0) : vec2(1.0, 0.0)))`);\n      expect(expressionToGlsl(context, ['match', ['get', 'attr2'], 0, [0, 0, 1, 1], 1, [1, 1, 2, 2], 2, [2, 2, 3, 3], [3, 3, 4, 4]], ValueTypes.NUMBER_ARRAY)).to.eql('(a_attr2 == 0.0 ? vec4(0.0, 0.0, 1.0, 1.0) : (a_attr2 == 1.0 ? vec4(1.0, 1.0, 2.0, 2.0) : (a_attr2 == 2.0 ? vec4(2.0, 2.0, 3.0, 3.0) : vec4(3.0, 3.0, 4.0, 4.0))))');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"only expects string, number or boolean as input","suites":["ol/style/expressions","match operator"],"updatePoint":{"line":299,"column":55,"index":19688},"line":299,"code":"    it('only expects string, number or boolean as input', () => {\n      // match input is only expressed through get operator and values which can be strings or colors\n      // the call shouldn't throw because match does not allow color as input (so the final input type is string)\n      expect(() => expressionToGlsl(context, ['match', ['get', 'attr3'], 'red', [6, 0], 'green', [3, 0], [0, 0]], ValueTypes.ANY)).not.to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly guesses the output type","suites":["ol/style/expressions","interpolate operator"],"updatePoint":{"line":320,"column":41,"index":20441},"line":320,"code":"    it('correctly guesses the output type', function () {\n      expect(getValueType(['interpolate', ['linear'], ['get', 'attr'], 0, 'red', 100, 'yellow'])).to.eql(ValueTypes.COLOR);\n      expect(getValueType(['interpolate', ['linear'], ['get', 'attr'], 0, [1, 2, 3], 1, [0, 0, 0, 4]])).to.eql(ValueTypes.COLOR);\n      expect(getValueType(['interpolate', ['linear'], ['get', 'attr'], 1000, -10, 2000, 10])).to.eql(ValueTypes.NUMBER);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if no single output type could be inferred","suites":["ol/style/expressions","interpolate operator"],"updatePoint":{"line":325,"column":57,"index":20898},"line":325,"code":"    it('throws if no single output type could be inferred', function () {\n      expect(() => expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 1000, -10, 2000, 10], ValueTypes.COLOR)).to.throwException();\n      expect(() => expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 0, [1, 2, 3], 1, 222])).to.throwException();\n      expect(() => expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 0, [1, 2, 3], 1, [0, 0, 0, 4]], ValueTypes.NUMBER)).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if invalid argument count","suites":["ol/style/expressions","interpolate operator"],"updatePoint":{"line":330,"column":40,"index":21413},"line":330,"code":"    it('throws if invalid argument count', function () {\n      expect(() => expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 1000])).to.throwException();\n      expect(() => expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 1000, -10, 2000, 10, 5000])).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if an invalid interpolation type is given","suites":["ol/style/expressions","interpolate operator"],"updatePoint":{"line":334,"column":56,"index":21753},"line":334,"code":"    it('throws if an invalid interpolation type is given', function () {\n      expect(() => expressionToGlsl(context, ['interpolate', 'linear', ['get', 'attr'], 1000, 0, 2000, 1])).to.throwException();\n      expect(() => expressionToGlsl(context, ['interpolate', ['exponential'], ['get', 'attr'], 1000, -10, 2000, 1])).to.throwException();\n      expect(() => expressionToGlsl(context, ['interpolate', ['not_a_type'], ['get', 'attr'], 1000, -10, 2000, 1])).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (colors, linear)","suites":["ol/style/expressions","interpolate operator"],"updatePoint":{"line":339,"column":56,"index":22238},"line":339,"code":"    it('correctly parses the expression (colors, linear)', function () {\n      expect(expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 1000, [255, 0, 0], 2000, [0, 255, 0]], ValueTypes.ANY)).to.eql('mix(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 0.0, 1.0), clamp((a_attr - 1000.0) / (2000.0 - 1000.0), 0.0, 1.0))');\n      expect(expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 1000, [255, 0, 0], 2000, [0, 255, 0], 5000, [0, 0, 255]], ValueTypes.ANY)).to.eql('mix(mix(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 0.0, 1.0), clamp((a_attr - 1000.0) / (2000.0 - 1000.0), 0.0, 1.0)), vec4(0.0, 0.0, 1.0, 1.0), clamp((a_attr - 2000.0) / (5000.0 - 2000.0), 0.0, 1.0))');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (number, linear)","suites":["ol/style/expressions","interpolate operator"],"updatePoint":{"line":343,"column":56,"index":22951},"line":343,"code":"    it('correctly parses the expression (number, linear)', function () {\n      expect(expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 1000, -10, 2000, 0, 5000, 10])).to.eql('mix(mix(-10.0, 0.0, clamp((a_attr - 1000.0) / (2000.0 - 1000.0), 0.0, 1.0)), 10.0, clamp((a_attr - 2000.0) / (5000.0 - 2000.0), 0.0, 1.0))');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (number, exponential)","suites":["ol/style/expressions","interpolate operator"],"updatePoint":{"line":346,"column":61,"index":23303},"line":346,"code":"    it('correctly parses the expression (number, exponential)', function () {\n      expect(expressionToGlsl(context, ['interpolate', ['exponential', 0.5], ['get', 'attr'], 1000, -10, 2000, 0, 5000, 10])).to.eql('mix(mix(-10.0, 0.0, clamp((pow(0.5, (a_attr - 1000.0)) - 1.0) / (pow(0.5, (2000.0 - 1000.0)) - 1.0), 0.0, 1.0)), 10.0, clamp((pow(0.5, (a_attr - 2000.0)) - 1.0) / (pow(0.5, (5000.0 - 2000.0)) - 1.0), 0.0, 1.0))');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"only expects number as input","suites":["ol/style/expressions","interpolate operator"],"updatePoint":{"line":349,"column":36,"index":23712},"line":349,"code":"    it('only expects number as input', () => {\n      // interpolation input is only expressed through get and var operators, which means that it is unspecified on its own\n      // the call shouldn't throw because interpolation only accepts numerical input\n      expect(() => expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'attr'], 1000, ['var', 'value'], 2000, 3000], ValueTypes.ANY)).not.to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"outputs boolean","suites":["ol/style/expressions","in operator"],"updatePoint":{"line":366,"column":23,"index":24378},"line":366,"code":"    it('outputs boolean', function () {\n      expect(getValueType(['in', ['get', 'attr'], [0, 50, 100]])).to.eql(ValueTypes.BOOLEAN);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if no single output type could be inferred","suites":["ol/style/expressions","in operator"],"updatePoint":{"line":369,"column":57,"index":24554},"line":369,"code":"    it('throws if no single output type could be inferred', function () {\n      expect(() => {\n        expressionToGlsl(context, ['in', ['get', 'attr'], [0, 'abc', 50]], ValueTypes.COLOR);\n      }).to.throwException(/got these types instead/i);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if invalid argument count","suites":["ol/style/expressions","in operator"],"updatePoint":{"line":374,"column":40,"index":24790},"line":374,"code":"    it('throws if invalid argument count', function () {\n      expect(() => {\n        expressionToGlsl(context, ['in', ['get', 'attr'], 'abcd', 'efgh']);\n      }).to.throwException(/2 arguments were expected/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if second argument is not an array","suites":["ol/style/expressions","in operator"],"updatePoint":{"line":379,"column":49,"index":25018},"line":379,"code":"    it('throws if second argument is not an array', function () {\n      expect(() => {\n        expressionToGlsl(context, ['in', ['get', 'attr'], 'abcd']);\n      }).to.throwException(/expects an array literal/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if second argument is a string array but not wrapped in a literal operator","suites":["ol/style/expressions","in operator"],"updatePoint":{"line":384,"column":89,"index":25277},"line":384,"code":"    it('throws if second argument is a string array but not wrapped in a literal operator', function () {\n      expect(() => {\n        expressionToGlsl(context, ['in', ['get', 'attr'], ['abcd', 'efgh', 'ijkl']]);\n      }).to.throwException(/should be wrapped in a \"literal\" operator/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if second argument is a literal value but not an array","suites":["ol/style/expressions","in operator"],"updatePoint":{"line":389,"column":69,"index":25551},"line":389,"code":"    it('throws if second argument is a literal value but not an array', function () {\n      expect(() => {\n        expressionToGlsl(context, ['in', ['get', 'attr'], ['literal', 123]]);\n      }).to.throwException(/a literal value which was not an array/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (number haystack)","suites":["ol/style/expressions","in operator"],"updatePoint":{"line":394,"column":57,"index":25802},"line":394,"code":"    it('correctly parses the expression (number haystack)', function () {\n      context.functions['a_function'] = 'float a_function() { return 1.0; }';\n      context.functions['another_function'] = 'float another_function() { return 1.0; }';\n      const glsl = expressionToGlsl(context, ['in', ['get', 'attr'], [0, 20, 50]]);\n      expect(glsl).to.eql('operator_in_2(a_attr)');\n      expect(context.functions).to.have.property('operator_in_2');\n      expect(context.functions['operator_in_2']).to.eql(`bool operator_in_2(float inputValue) {\n  if (inputValue == 0.0) { return true; }\n  if (inputValue == 20.0) { return true; }\n  if (inputValue == 50.0) { return true; }\n  return false;\n}`);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (string haystack)","suites":["ol/style/expressions","in operator"],"updatePoint":{"line":407,"column":57,"index":26500},"line":407,"code":"    it('correctly parses the expression (string haystack)', function () {\n      const glsl = expressionToGlsl(context, ['in', ['get', 'attr'], ['literal', ['abc', 'def', 'ghi']]]);\n      expect(glsl).to.eql('operator_in_0(a_attr)');\n      expect(context.functions).to.have.property('operator_in_0');\n      expect(context.functions['operator_in_0']).to.eql(`bool operator_in_0(float inputValue) {\n  if (inputValue == 0.0) { return true; }\n  if (inputValue == 1.0) { return true; }\n  if (inputValue == 2.0) { return true; }\n  return false;\n}`);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"outputs string","suites":["ol/style/expressions","geometry-type operator"],"updatePoint":{"line":430,"column":22,"index":27273},"line":430,"code":"    it('outputs string', function () {\n      expect(getValueType(['geometry-type'])).to.eql(ValueTypes.STRING);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if invalid argument count","suites":["ol/style/expressions","geometry-type operator"],"updatePoint":{"line":433,"column":40,"index":27411},"line":433,"code":"    it('throws if invalid argument count', function () {\n      expect(() => {\n        expressionToGlsl(context, ['geometry-type', 'abcd']);\n      }).to.throwException(/0 arguments were expected/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression and add a new attribute","suites":["ol/style/expressions","geometry-type operator"],"updatePoint":{"line":438,"column":63,"index":27639},"line":438,"code":"    it('correctly parses the expression and add a new attribute', function () {\n      const glsl = expressionToGlsl(context, ['geometry-type']);\n      expect(glsl).to.eql('a_geometryType');\n      expect(context.attributes[0].name).to.be('geometryType');\n      expect(context.attributes[0].type).to.be(ValueTypes.STRING);\n      expect(context.attributes[0].callback).to.be.a(Function);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"computes a standard geometry type from the given features","suites":["ol/style/expressions","geometry-type operator","geometry type computation"],"updatePoint":{"line":452,"column":67,"index":28503},"line":452,"code":"      it('computes a standard geometry type from the given features', function () {\n        expect(features.map(callback)).to.eql(['Point', 'Polygon', 'LineString', 'Polygon', 'Point']);\n      });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses a combination of interpolate, match, color and number","suites":["ol/style/expressions","complex expressions"],"updatePoint":{"line":473,"column":78,"index":29077},"line":473,"code":"    it('correctly parses a combination of interpolate, match, color and number', function () {\n      const expression = ['interpolate', ['linear'], ['^', ['/', ['%', ['+', ['time'], ['interpolate', ['linear'], ['get', 'year'], 1850, 0, 2015, 8]], 8], 8], 0.5], 0, 'rgba(255, 255, 0, 0.5)', 1, ['match', ['get', 'year'], 2000, 'green', '#ffe52c']];\n      expect(expressionToGlsl(context, expression, ValueTypes.COLOR)).to.eql('mix(vec4(0.5, 0.5, 0.0, 0.5), (a_year == 2000.0 ? vec4(0.0, 0.5019607843137255, 0.0, 1.0) : vec4(1.0, 0.8980392156862745, 0.17254901960784313, 1.0)), clamp((pow((mod((u_time + mix(0.0, 8.0, clamp((a_year - 1850.0) / (2015.0 - 1850.0), 0.0, 1.0))), 8.0) / 8.0), 0.5) - 0.0) / (1.0 - 0.0), 0.0, 1.0))');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"correctly parses the expression (array for symbol size, variables and attributes)","suites":["ol/style/expressions","complex expressions"],"updatePoint":{"line":477,"column":89,"index":29824},"line":477,"code":"    it('correctly parses the expression (array for symbol size, variables and attributes)', function () {\n      expect(expressionToGlsl(context, ['array', ['ceil', ['match', ['get', 'width'], 0, ['var', 'defaultWidth'], ['get', 'width']]], ['ceil', ['match', ['get', 'height'], 0, ['var', 'defaultHeight'], ['get', 'height']]]], ValueTypes.NUMBER | ValueTypes.NUMBER_ARRAY)).to.eql('vec2(ceil((a_width == 0.0 ? u_var_defaultWidth : a_width)), ceil((a_height == 0.0 ? u_var_defaultHeight : a_height)))');\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"get operator with type hint","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":503,"column":35,"index":30828},"line":503,"code":"    it('get operator with type hint', () => {\n      const result = expressionToGlsl(context, ['get', 'color'], ValueTypes.COLOR);\n      expect(result).to.eql('a_color');\n      expect(context.attributes).to.eql([{\n        name: 'color',\n        type: ValueTypes.COLOR\n      }]);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"var operator with type hint","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":511,"column":35,"index":31114},"line":511,"code":"    it('var operator with type hint', () => {\n      const result = expressionToGlsl(context, ['var', 'color'], ValueTypes.COLOR);\n      expect(result).to.eql('u_var_color');\n      expect(context.variables).to.eql([{\n        name: 'color',\n        type: ValueTypes.COLOR\n      }]);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"get and var operators, numbers","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":519,"column":38,"index":31406},"line":519,"code":"    it('get and var operators, numbers', function () {\n      context.style.variables['myVar'] = 123;\n      context.style.variables['myVar2'] = 456;\n      expressionToGlsl(context, ['get', 'myAttr']);\n      expressionToGlsl(context, ['var', 'myVar']);\n      expressionToGlsl(context, ['clamp', ['get', 'attr2'], ['get', 'attr2'], ['get', 'myAttr']]);\n      expressionToGlsl(context, ['*', ['get', 'attr2'], ['var', 'myVar']]);\n      expressionToGlsl(context, ['*', ['get', 'attr3'], ['var', 'myVar2']]);\n      expect(context.attributes).to.eql([{\n        name: 'myAttr',\n        type: ValueTypes.NUMBER\n      }, {\n        name: 'attr2',\n        type: ValueTypes.NUMBER\n      }, {\n        name: 'attr3',\n        type: ValueTypes.NUMBER\n      }]);\n      expect(context.variables).to.eql([{\n        name: 'myVar',\n        type: ValueTypes.NUMBER\n      }, {\n        name: 'myVar2',\n        type: ValueTypes.NUMBER\n      }]);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"get and var operators, nested, color and number","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":545,"column":55,"index":32351},"line":545,"code":"    it('get and var operators, nested, color and number', () => {\n      expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'intensity'], 0, ['get', 'low_color'], 1, ['get', 'high_color']], ValueTypes.COLOR);\n      expect(context.attributes).to.eql([{\n        name: 'intensity',\n        type: ValueTypes.NUMBER\n      }, {\n        name: 'low_color',\n        type: ValueTypes.COLOR\n      }, {\n        name: 'high_color',\n        type: ValueTypes.COLOR\n      }]);\n      expect(context.variables).to.eql([]);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"get and var operators, nested, string and number array","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":559,"column":62,"index":32881},"line":559,"code":"    it('get and var operators, nested, string and number array', () => {\n      expressionToGlsl(context, ['case', ['==', ['var', 'symbolType'], 'dynamic'], ['array', ['match', ['get', 'type'], 'low', ['var', 'lowHeight'], 'medium', ['var', 'mediumHeight'], ['get', 'height']], 10], ['var', 'fixedSize']], ValueTypes.ANY);\n      expect(context.attributes).to.eql([{\n        name: 'type',\n        type: ValueTypes.STRING\n      }, {\n        name: 'height',\n        type: ValueTypes.NUMBER\n      }]);\n      expect(context.variables).to.eql([{\n        name: 'fixedSize',\n        type: ValueTypes.NUMBER_ARRAY\n      }, {\n        name: 'symbolType',\n        type: ValueTypes.STRING\n      }, {\n        name: 'mediumHeight',\n        type: ValueTypes.NUMBER\n      }, {\n        name: 'lowHeight',\n        type: ValueTypes.NUMBER\n      }]);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"var and get operators, nested, boolean and color","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":582,"column":56,"index":33712},"line":582,"code":"    it('var and get operators, nested, boolean and color', () => {\n      expressionToGlsl(context, ['match', ['var', 'selected'], false, 'red', ['get', 'validValue'], 'green', ['case', ['<', ['time'], 10000], ['var', 'oldColor'], ['var', 'newColor']]], ValueTypes.COLOR);\n      expect(context.attributes).to.eql([{\n        name: 'validValue',\n        type: ValueTypes.BOOLEAN\n      }]);\n      expect(context.variables).to.eql([{\n        name: 'selected',\n        type: ValueTypes.BOOLEAN\n      }, {\n        name: 'newColor',\n        type: ValueTypes.COLOR\n      }, {\n        name: 'oldColor',\n        type: ValueTypes.COLOR\n      }]);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws when an attribute is used with conflicting types","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":599,"column":63,"index":34362},"line":599,"code":"    it('throws when an attribute is used with conflicting types', () => {\n      expect(() => expressionToGlsl(context, ['interpolate', ['linear'], ['get', 'intensity'], 0, ['get', 'intensity'], 1, 'red'], ValueTypes.COLOR)).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws when a variable is used with conflicting types","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":602,"column":61,"index":34613},"line":602,"code":"    it('throws when a variable is used with conflicting types', () => {\n      expect(() => expressionToGlsl(context, ['interpolate', ['linear'], ['var', 'intensity'], 0, ['var', 'intensity'], 1, 'red'], ValueTypes.COLOR)).to.throwException();\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if a variable is used with the wrong type","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":605,"column":56,"index":34859},"line":605,"code":"    it('throws if a variable is used with the wrong type', () => {\n      expect(() => expressionToGlsl(context, ['var', 'oldColor'], ValueTypes.NUMBER)).to.throwError(/No matching type/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws if a type ambiguity remains when using a variable","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":608,"column":64,"index":35063},"line":608,"code":"    it('throws if a type ambiguity remains when using a variable', () => {\n      expect(() => expressionToGlsl(context, ['var', 'oldColor'], ValueTypes.ANY)).to.throwError(/unique type/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"throws a variable initial value is null","suites":["ol/style/expressions","attributes and variables collection"],"updatePoint":{"line":611,"column":47,"index":35242},"line":611,"code":"    it('throws a variable initial value is null', () => {\n      context.style.variables.oldColor = null;\n      expect(() => expressionToGlsl(context, ['var', 'oldColor'], ValueTypes.COLOR)).to.throwError(/Unhandled value type/);\n    });","file":"browser/spec/ol/style/expressions.test.js","skipped":false,"dir":"test"},{"name":"creates a new ol.style.Fill","suites":["ol.style.Fill","#clone"],"updatePoint":{"line":4,"column":35,"index":167},"line":4,"code":"    it('creates a new ol.style.Fill', function () {\n      const original = new Fill();\n      const clone = original.clone();\n      expect(clone).to.be.an(Fill);\n      expect(clone).to.not.be(original);\n    });","file":"browser/spec/ol/style/fill.test.js","skipped":false,"dir":"test"},{"name":"copies all values","suites":["ol.style.Fill","#clone"],"updatePoint":{"line":10,"column":25,"index":367},"line":10,"code":"    it('copies all values', function () {\n      const original = new Fill({\n        color: '#319FD3'\n      });\n      const clone = original.clone();\n      expect(original.getColor()).to.eql(clone.getColor());\n    });","file":"browser/spec/ol/style/fill.test.js","skipped":false,"dir":"test"},{"name":"the clone does not reference the same objects as the original","suites":["ol.style.Fill","#clone"],"updatePoint":{"line":17,"column":69,"index":628},"line":17,"code":"    it('the clone does not reference the same objects as the original', function () {\n      const original = new Fill({\n        color: [63, 255, 127, 0.7]\n      });\n      const clone = original.clone();\n      expect(original.getColor()).to.not.be(clone.getColor());\n      clone.getColor()[2] = 0;\n      expect(original.getColor()).to.not.eql(clone.getColor());\n    });","file":"browser/spec/ol/style/fill.test.js","skipped":false,"dir":"test"},{"name":"caches canvas images with a uid as src","suites":["ol.style.Icon","constructor"],"updatePoint":{"line":12,"column":46,"index":599},"line":12,"code":"    it('caches canvas images with a uid as src', function () {\n      const canvas = document.createElement('canvas');\n      new Icon({\n        img: canvas,\n        imgSize: size\n      });\n      expect(getIconImage(canvas, getUid(canvas), size, '').getImage()).to.eql(canvas);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"imgSize overrides img.width and img.height","suites":["ol.style.Icon","constructor"],"updatePoint":{"line":20,"column":50,"index":887},"line":20,"code":"    it('imgSize overrides img.width and img.height', function (done) {\n      const style = new Icon({\n        src: src,\n        imgSize: size\n      });\n      const iconImage = style.iconImage_;\n      iconImage.addEventListener('change', function () {\n        expect([iconImage.image_.width, iconImage.image_.height]).to.eql(size);\n        done();\n      });\n      style.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"creates a new ol.style.Icon","suites":["ol.style.Icon","#clone"],"updatePoint":{"line":34,"column":35,"index":1298},"line":34,"code":"    it('creates a new ol.style.Icon', function () {\n      const original = new Icon({\n        src: src\n      });\n      const clone = original.clone();\n      expect(clone).to.be.an(Icon);\n      expect(clone).to.not.be(original);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"copies all values with img","suites":["ol.style.Icon","#clone"],"updatePoint":{"line":42,"column":34,"index":1533},"line":42,"code":"    it('copies all values with img', function () {\n      const canvas = document.createElement('canvas');\n      const original = new Icon({\n        anchor: [1, 0],\n        anchorOrigin: 'bottom-right',\n        anchorXUnits: 'pixels',\n        anchorYUnits: 'pixels',\n        color: '#319FD3',\n        crossOrigin: 'Anonymous',\n        img: canvas,\n        imgSize: size,\n        offset: [1, 2],\n        offsetOrigin: 'bottom-left',\n        opacity: 0.5,\n        scale: 2,\n        rotation: 4,\n        size: [10, 12],\n        displacement: [5, 6],\n        declutterMode: 'obstacle'\n      });\n      const clone = original.clone();\n      expect(original.getImage(1)).to.be(clone.getImage(1));\n      expect(original.iconImage_).to.be(clone.iconImage_);\n      expect(original.getAnchor()).to.eql(clone.getAnchor());\n      expect(original.anchorOrigin_).to.eql(clone.anchorOrigin_);\n      expect(original.anchorXUnits_).to.eql(clone.anchorXUnits_);\n      expect(original.anchorYUnits_).to.eql(clone.anchorYUnits_);\n      expect(original.crossOrigin_).to.eql(clone.crossOrigin_);\n      expect(original.getColor()).to.eql(clone.getColor());\n      expect(original.imgSize_).to.eql(clone.imgSize_);\n      expect(original.offset_).to.eql(clone.offset_);\n      expect(original.offsetOrigin_).to.eql(clone.offsetOrigin_);\n      expect(original.getScale()).to.eql(clone.getScale());\n      expect(original.getSize()).to.eql(clone.getSize());\n      expect(original.getSrc()).to.eql(clone.getSrc());\n      expect(original.getOpacity()).to.eql(clone.getOpacity());\n      expect(original.getRotation()).to.eql(clone.getRotation());\n      expect(original.getRotateWithView()).to.eql(clone.getRotateWithView());\n      expect(original.getDisplacement()).to.eql(clone.getDisplacement());\n      expect(original.getDeclutterMode()).to.eql(clone.getDeclutterMode());\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"copies all values with src","suites":["ol.style.Icon","#clone"],"updatePoint":{"line":83,"column":34,"index":3381},"line":83,"code":"    it('copies all values with src', function () {\n      const original = new Icon({\n        src: src\n      });\n      const clone = original.clone();\n      expect(original.getImage(1)).to.be(clone.getImage(1));\n      expect(original.iconImage_).to.be(clone.iconImage_);\n      expect(original.getSrc()).to.be(clone.getSrc());\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"copies all values with src without shared IconImageCache","suites":["ol.style.Icon","#clone"],"updatePoint":{"line":92,"column":64,"index":3744},"line":92,"code":"    it('copies all values with src without shared IconImageCache', function (done) {\n      const imgSize = [11, 13];\n      const original = new Icon({\n        src: src,\n        imgSize: imgSize.slice()\n      });\n      iconImageCache.clear();\n      const clone = original.clone();\n      original.load();\n      clone.load();\n      Promise.all([new Promise(function (resolve) {\n        original.iconImage_.addEventListener('change', resolve);\n      }), new Promise(function (resolve) {\n        clone.iconImage_.addEventListener('change', resolve);\n      })]).then(function () {\n        expect(original.getSrc()).to.be(clone.getSrc());\n        expect(original.iconImage_).to.not.be(clone.iconImage_);\n        expect(original.getImage(1).width).to.be(imgSize[0]);\n        expect(original.getImage(1).height).to.be(imgSize[1]);\n        expect(original.getImage(1).width).to.be(clone.getImage(1).width);\n        expect(original.getImage(1).height).to.be(clone.getImage(1).height);\n        done();\n      });\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"preserves the scale","suites":["ol.style.Icon","#clone"],"updatePoint":{"line":116,"column":27,"index":4715},"line":116,"code":"    it('preserves the scale', done => {\n      const original = new Icon({\n        src: 'spec/ol/data/dot.png'\n      });\n      original.setScale(2);\n      expect(original.getScale()).to.be(2);\n      const clone = original.clone();\n      expect(original.getScale()).to.eql(clone.getScale());\n      original.load();\n      original.getImage(1).addEventListener('load', () => {\n        const clone = original.clone();\n        expect(original.getScale()).to.eql(clone.getScale());\n        done();\n      });\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"preserves width and height","suites":["ol.style.Icon","#clone"],"updatePoint":{"line":131,"column":34,"index":5231},"line":131,"code":"    it('preserves width and height', done => {\n      const original = new Icon({\n        src: 'spec/ol/data/dot.png',\n        width: 42,\n        height: 24\n      });\n      const clone = original.clone();\n      clone.listenImageChange(() => {\n        expect(clone.getWidth()).to.eql(42);\n        expect(clone.getHeight()).to.eql(24);\n        done();\n      });\n      clone.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"the clone does not reference the same objects as the original","suites":["ol.style.Icon","#clone"],"updatePoint":{"line":145,"column":69,"index":5653},"line":145,"code":"    it('the clone does not reference the same objects as the original', function () {\n      const original = new Icon({\n        anchor: [1, 0],\n        color: [1, 2, 3, 0.4],\n        src: src,\n        offset: [1, 2],\n        size: [10, 12],\n        displacement: [5, 6]\n      });\n      const clone = original.clone();\n      expect(original.getAnchor()).not.to.be(clone.getAnchor());\n      expect(original.offset_).not.to.be(clone.offset_);\n      expect(original.getColor()).not.to.be(clone.getColor());\n      expect(original.getSize()).not.to.be(clone.getSize());\n      expect(original.getDisplacement()).not.to.be(clone.getDisplacement());\n      clone.anchor_[0] = 0;\n      clone.offset_[0] = 0;\n      clone.color_[0] = 0;\n      clone.size_[0] = 5;\n      clone.displacement_[0] = 10;\n      expect(original.anchor_).not.to.eql(clone.anchor_);\n      expect(original.offset_).not.to.eql(clone.offset_);\n      expect(original.color_).not.to.eql(clone.color_);\n      expect(original.size_).not.to.eql(clone.size_);\n      expect(original.displacement_).not.to.eql(clone.displacement_);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"autocalculated scale (due to width/height) does not halt cloning","suites":["ol.style.Icon","#clone"],"updatePoint":{"line":171,"column":72,"index":6745},"line":171,"code":"    it('autocalculated scale (due to width/height) does not halt cloning', () => {\n      const original = new Icon({\n        src: src,\n        width: 10,\n        height: 5\n      });\n      let clone;\n      expect(() => clone = original.clone()).to.not.throwException();\n      expect(original.getWidth()).to.eql(clone.getWidth());\n      expect(original.getHeight()).to.eql(clone.getHeight());\n      expect(original.getScale()).to.eql(clone.getScale());\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses fractional units by default","suites":["ol.style.Icon","#getAnchor"],"updatePoint":{"line":186,"column":40,"index":7258},"line":186,"code":"    it('uses fractional units by default', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        anchor: fractionAnchor\n      });\n      expect(iconStyle.getAnchor()).to.eql([9, 12]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses pixels units","suites":["ol.style.Icon","#getAnchor"],"updatePoint":{"line":194,"column":25,"index":7482},"line":194,"code":"    it('uses pixels units', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        anchor: [2, 18],\n        anchorXUnits: 'pixels',\n        anchorYUnits: 'pixels'\n      });\n      expect(iconStyle.getAnchor()).to.eql([2, 18]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses a bottom left anchor origin","suites":["ol.style.Icon","#getAnchor"],"updatePoint":{"line":204,"column":40,"index":7778},"line":204,"code":"    it('uses a bottom left anchor origin', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        anchor: fractionAnchor,\n        anchorOrigin: 'bottom-left'\n      });\n      expect(iconStyle.getAnchor()).to.eql([9, 36]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses a bottom right anchor origin","suites":["ol.style.Icon","#getAnchor"],"updatePoint":{"line":213,"column":41,"index":8055},"line":213,"code":"    it('uses a bottom right anchor origin', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        anchor: fractionAnchor,\n        anchorOrigin: 'bottom-right'\n      });\n      expect(iconStyle.getAnchor()).to.eql([27, 36]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses a top right anchor origin","suites":["ol.style.Icon","#getAnchor"],"updatePoint":{"line":222,"column":38,"index":8331},"line":222,"code":"    it('uses a top right anchor origin', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        anchor: fractionAnchor,\n        anchorOrigin: 'top-right'\n      });\n      expect(iconStyle.getAnchor()).to.eql([27, 12]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses a top right anchor origin + displacement","suites":["ol.style.Icon","#getAnchor"],"updatePoint":{"line":231,"column":53,"index":8619},"line":231,"code":"    it('uses a top right anchor origin + displacement', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        anchor: fractionAnchor,\n        anchorOrigin: 'top-right',\n        displacement: [20, 10]\n      });\n      expect(iconStyle.getAnchor()).to.eql([size[0] * (1 - fractionAnchor[0]) - 20, size[1] * fractionAnchor[1] + 10]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses displacement","suites":["ol.style.Icon","#getAnchor"],"updatePoint":{"line":241,"column":25,"index":8977},"line":241,"code":"    it('uses displacement', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        displacement: [20, 10]\n      });\n      expect(iconStyle.getAnchor()).to.eql([size[0] / 2 - 20, size[1] / 2 + 10]);\n      iconStyle.setDisplacement([10, 20]);\n      expect(iconStyle.getAnchor()).to.eql([size[0] / 2 - 10, size[1] / 2 + 20]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"scale applies to image size, not offset","suites":["ol.style.Icon","#getAnchor"],"updatePoint":{"line":251,"column":47,"index":9377},"line":251,"code":"    it('scale applies to image size, not offset', function () {\n      const scale = 4;\n      let anchorScaled, anchorBig;\n      const iconStyleScaled = new Icon({\n        src: 'test.png',\n        size: size,\n        displacement: [20, 10],\n        scale: scale\n      });\n      const iconStyleBig = new Icon({\n        src: 'test.png',\n        size: [size[0] * scale, size[1] * scale],\n        displacement: [20, 10]\n      });\n      anchorScaled = iconStyleScaled.getAnchor();\n      anchorBig = iconStyleBig.getAnchor();\n      expect(anchorScaled).to.eql([anchorBig[0] / scale, anchorBig[1] / scale]);\n      iconStyleScaled.setDisplacement([10, 20]);\n      iconStyleBig.setDisplacement([10, 20]);\n      anchorScaled = iconStyleScaled.getAnchor();\n      anchorBig = iconStyleBig.getAnchor();\n      expect(anchorScaled).to.eql([anchorBig[0] / scale, anchorBig[1] / scale]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"resets the cached anchor","suites":["ol.style.Icon","#setAnchor"],"updatePoint":{"line":276,"column":32,"index":10285},"line":276,"code":"    it('resets the cached anchor', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        anchor: [0.25, 0.25]\n      });\n      expect(iconStyle.getAnchor()).to.eql([9, 12]);\n      iconStyle.setAnchor([0.5, 0.5]);\n      expect(iconStyle.getAnchor()).to.eql([18, 24]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses a top left offset origin (default)","suites":["ol.style.Icon","#getOrigin"],"updatePoint":{"line":290,"column":47,"index":10730},"line":290,"code":"    it('uses a top left offset origin (default)', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        offset: offset\n      });\n      expect(iconStyle.getOrigin()).to.eql([16, 20]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses a bottom left offset origin","suites":["ol.style.Icon","#getOrigin"],"updatePoint":{"line":298,"column":40,"index":10962},"line":298,"code":"    it('uses a bottom left offset origin', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        offset: offset,\n        offsetOrigin: 'bottom-left'\n      });\n      iconStyle.iconImage_.size_ = imageSize;\n      expect(iconStyle.getOrigin()).to.eql([16, 124]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses a bottom right offset origin","suites":["ol.style.Icon","#getOrigin"],"updatePoint":{"line":308,"column":41,"index":11279},"line":308,"code":"    it('uses a bottom right offset origin', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        offset: offset,\n        offsetOrigin: 'bottom-right'\n      });\n      iconStyle.iconImage_.size_ = imageSize;\n      expect(iconStyle.getOrigin()).to.eql([92, 124]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses a top right offset origin","suites":["ol.style.Icon","#getOrigin"],"updatePoint":{"line":318,"column":38,"index":11594},"line":318,"code":"    it('uses a top right offset origin', function () {\n      const iconStyle = new Icon({\n        src: 'test.png',\n        size: size,\n        offset: offset,\n        offsetOrigin: 'top-right'\n      });\n      iconStyle.iconImage_.size_ = imageSize;\n      expect(iconStyle.getOrigin()).to.eql([92, 20]);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"takes the real image size","suites":["ol.style.Icon","#getImageSize"],"updatePoint":{"line":331,"column":33,"index":11980},"line":331,"code":"    it('takes the real image size', function () {\n      // pretend that the image is already in the cache,\n      // this image will be used for the icon.\n      const src = 'test.png';\n      const iconImage = new IconImage(null, 'test.png', imgSize);\n      iconImageCache.set(src, null, null, iconImage);\n      const iconStyle = new Icon({\n        src: 'test.png'\n      });\n      expect(iconStyle.getImageSize()).to.eql(imgSize);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"uses the given image size","suites":["ol.style.Icon","#getImageSize"],"updatePoint":{"line":342,"column":33,"index":12417},"line":342,"code":"    it('uses the given image size', function () {\n      const iconStyle = new Icon({\n        img: {\n          src: 'test.png'\n        },\n        imgSize: imgSize\n      });\n      expect(iconStyle.getImageSize()).to.eql(imgSize);\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"scale is set correctly if configured with width only","suites":["ol.style.Icon","#width/height"],"updatePoint":{"line":355,"column":60,"index":12896},"line":355,"code":"    it('scale is set correctly if configured with width only', function (done) {\n      const iconStyle = new Icon({\n        src,\n        width: 6\n      });\n      const iconImage = iconStyle.iconImage_;\n      iconImage.addEventListener('change', function () {\n        expect(iconStyle.getScale()).to.eql(2);\n        done();\n      });\n      iconStyle.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"scale is set correctly if configured with height only","suites":["ol.style.Icon","#width/height"],"updatePoint":{"line":367,"column":61,"index":13262},"line":367,"code":"    it('scale is set correctly if configured with height only', function (done) {\n      const iconStyle = new Icon({\n        src,\n        height: 12\n      });\n      const iconImage = iconStyle.iconImage_;\n      iconImage.addEventListener('change', function () {\n        expect(iconStyle.getScale()).to.eql(3);\n        done();\n      });\n      iconStyle.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"scale is set correctly if used with width and height","suites":["ol.style.Icon","#width/height"],"updatePoint":{"line":379,"column":60,"index":13629},"line":379,"code":"    it('scale is set correctly if used with width and height', function (done) {\n      const iconStyle = new Icon({\n        src,\n        width: 6,\n        height: 12\n      });\n      const iconImage = iconStyle.iconImage_;\n      iconImage.addEventListener('change', function () {\n        expect(iconStyle.getScale()).to.eql([2, 3]);\n        done();\n      });\n      iconStyle.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"getWidth returns the expected value","suites":["ol.style.Icon","#width/height"],"updatePoint":{"line":392,"column":43,"index":14002},"line":392,"code":"    it('getWidth returns the expected value', function (done) {\n      const iconStyle = new Icon({\n        src,\n        width: 10\n      });\n      iconStyle.listenImageChange(() => {\n        expect(iconStyle.getWidth()).to.eql(10);\n        done();\n      });\n      iconStyle.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"getHeight returns the expected value","suites":["ol.style.Icon","#width/height"],"updatePoint":{"line":403,"column":44,"index":14292},"line":403,"code":"    it('getHeight returns the expected value', function (done) {\n      const iconStyle = new Icon({\n        src,\n        height: 20\n      });\n      iconStyle.listenImageChange(() => {\n        expect(iconStyle.getHeight()).to.eql(20);\n        done();\n      });\n      iconStyle.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"setScale updates the width and height","suites":["ol.style.Icon","#width/height"],"updatePoint":{"line":414,"column":45,"index":14585},"line":414,"code":"    it('setScale updates the width and height', function (done) {\n      const iconStyle = new Icon({\n        src\n      });\n      const iconImage = iconStyle.iconImage_;\n      iconImage.addEventListener('change', function () {\n        iconStyle.setScale(2);\n        expect(iconStyle.getWidth()).to.eql(6);\n        expect(iconStyle.getHeight()).to.eql(8);\n        done();\n      });\n      iconStyle.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"setScale with array updates the width and height","suites":["ol.style.Icon","#width/height"],"updatePoint":{"line":427,"column":56,"index":15008},"line":427,"code":"    it('setScale with array updates the width and height', function (done) {\n      const iconStyle = new Icon({\n        src\n      });\n      const iconImage = iconStyle.iconImage_;\n      iconImage.addEventListener('change', function () {\n        iconStyle.setScale([3, 4]);\n        expect(iconStyle.getWidth()).to.eql(9);\n        expect(iconStyle.getHeight()).to.eql(16);\n        done();\n      });\n      iconStyle.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"setScale overrides initial width and height","suites":["ol.style.Icon","#width/height"],"updatePoint":{"line":440,"column":51,"index":15432},"line":440,"code":"    it('setScale overrides initial width and height', function (done) {\n      const iconStyle = new Icon({\n        src,\n        width: 42,\n        height: 24\n      });\n      iconStyle.setScale(1);\n      iconStyle.listenImageChange(() => {\n        try {\n          expect(iconStyle.getWidth()).to.eql(3);\n          expect(iconStyle.getHeight()).to.eql(4);\n          expect(iconStyle.getScale()).to.eql(1);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n      iconStyle.load();\n    });","file":"browser/spec/ol/style/icon.test.js","skipped":false,"dir":"test"},{"name":"expires images when expected","suites":["ol.style.IconImageCache","#expire"],"updatePoint":{"line":17,"column":36,"index":696},"line":17,"code":"    it('expires images when expected', function () {\n      let i, src, iconImage;\n      for (i = 0; i < 4; ++i) {\n        src = i + '';\n        iconImage = new IconImage(null, src);\n        iconImageCache.set(src, null, null, iconImage);\n      }\n      expect(iconImageCache.cacheSize_).to.eql(4);\n      iconImageCache.expire();\n      expect(iconImageCache.cacheSize_).to.eql(4);\n      src = '4';\n      iconImage = new IconImage(null, src);\n      iconImageCache.set(src, null, null, iconImage);\n      expect(iconImageCache.cacheSize_).to.eql(5);\n      iconImageCache.expire(); // remove '0' and '4'\n      expect(iconImageCache.cacheSize_).to.eql(3);\n      src = '0';\n      iconImage = new IconImage(null, src);\n      listen(iconImage, 'change', VOID, false);\n      iconImageCache.set(src, null, null, iconImage);\n      expect(iconImageCache.cacheSize_).to.eql(4);\n      src = '4';\n      iconImage = new IconImage(null, src);\n      listen(iconImage, 'change', VOID, false);\n      iconImageCache.set(src, null, null, iconImage);\n      expect(iconImageCache.cacheSize_).to.eql(5);\n\n      // check that '0' and '4' are not removed from the cache\n      iconImageCache.expire();\n      expect(iconImageCache.get('0', null, null)).to.not.be(null);\n      expect(iconImageCache.get('4', null, null)).to.not.be(null);\n    });","file":"browser/spec/ol/style/iconimagecache.test.js","skipped":false,"dir":"test"},{"name":"sets max cache size and expires cache","suites":["ol.style.IconImageCache","#setSize"],"updatePoint":{"line":51,"column":45,"index":2062},"line":51,"code":"    it('sets max cache size and expires cache', function () {\n      let i, src, iconImage;\n      for (i = 0; i < 3; ++i) {\n        src = i + '';\n        iconImage = new IconImage(null, src);\n        iconImageCache.set(src, null, null, iconImage);\n      }\n      expect(iconImageCache.cacheSize_).to.eql(3);\n      iconImageCache.setSize(2);\n      expect(iconImageCache.maxCacheSize_).to.eql(2);\n      expect(iconImageCache.cacheSize_).to.eql(2);\n    });","file":"browser/spec/ol/style/iconimagecache.test.js","skipped":false,"dir":"test"},{"name":"can use rotateWithView","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":6,"column":30,"index":308},"line":6,"code":"    it('can use rotateWithView', function () {\n      const style = new RegularShape({\n        rotateWithView: true,\n        radius: 0\n      });\n      expect(style.getRotateWithView()).to.be(true);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"can use radius","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":13,"column":22,"index":505},"line":13,"code":"    it('can use radius', function () {\n      const style = new RegularShape({\n        radius: 5,\n        radius2: 10\n      });\n      expect(style.getRadius()).to.eql(5);\n      expect(style.getRadius2()).to.eql(10);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"can use radius1 as an alias for radius","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":21,"column":46,"index":752},"line":21,"code":"    it('can use radius1 as an alias for radius', function () {\n      const style = new RegularShape({\n        radius1: 5,\n        radius2: 10\n      });\n      expect(style.getRadius()).to.eql(5);\n      expect(style.getRadius2()).to.eql(10);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"creates a canvas (no fill-style)","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":29,"column":40,"index":994},"line":29,"code":"    it('creates a canvas (no fill-style)', function () {\n      const style = new RegularShape({\n        radius: 10\n      });\n      expect(style.getImage(1)).to.be.an(HTMLCanvasElement);\n      expect(style.getSize()).to.eql([20, 20]);\n      expect(style.getImageSize()).to.eql([20, 20]);\n      expect(style.getOrigin()).to.eql([0, 0]);\n      expect(style.getAnchor()).to.eql([10, 10]);\n      // no hit-detection image is created, because no fill style is set\n      expect(style.getImage(1)).to.be(style.getHitDetectionImage());\n      expect(style.getHitDetectionImage()).to.be.an(HTMLCanvasElement);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"creates a canvas (transparent fill-style)","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":42,"column":49,"index":1610},"line":42,"code":"    it('creates a canvas (transparent fill-style)', function () {\n      const style = new RegularShape({\n        radius: 10,\n        fill: new Fill({\n          color: 'transparent'\n        })\n      });\n      expect(style.getImage(1)).to.be.an(HTMLCanvasElement);\n      expect(style.getImage(1).width).to.be(20);\n      expect(style.getImage(2).width).to.be(40);\n      expect(style.getPixelRatio(2)).to.be(2);\n      expect(style.getSize()).to.eql([20, 20]);\n      expect(style.getImageSize()).to.eql([20, 20]);\n      expect(style.getOrigin()).to.eql([0, 0]);\n      expect(style.getAnchor()).to.eql([10, 10]);\n      // hit-detection image is created, because transparent fill style is set\n      expect(style.getImage(1)).to.not.be(style.getHitDetectionImage());\n      expect(style.getHitDetectionImage()).to.be.an(HTMLCanvasElement);\n      expect(style.getHitDetectionImage().width).to.be(20);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"creates a canvas (non-transparent fill-style)","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":62,"column":53,"index":2513},"line":62,"code":"    it('creates a canvas (non-transparent fill-style)', function () {\n      const style = new RegularShape({\n        radius: 10,\n        fill: new Fill({\n          color: '#FFFF00'\n        })\n      });\n      expect(style.getImage(1)).to.be.an(HTMLCanvasElement);\n      expect(style.getSize()).to.eql([20, 20]);\n      expect(style.getImageSize()).to.eql([20, 20]);\n      expect(style.getOrigin()).to.eql([0, 0]);\n      expect(style.getAnchor()).to.eql([10, 10]);\n      // no hit-detection image is created, because non-transparent fill style is set\n      expect(style.getImage(1)).to.be(style.getHitDetectionImage());\n      expect(style.getHitDetectionImage()).to.be.an(HTMLCanvasElement);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets default displacement [0, 0]","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":78,"column":40,"index":3197},"line":78,"code":"    it('sets default displacement [0, 0]', function () {\n      const style = new RegularShape({\n        radius: 5\n      });\n      expect(style.getDisplacement()).to.an('array');\n      expect(style.getDisplacement()[0]).to.eql(0);\n      expect(style.getDisplacement()[1]).to.eql(0);\n      expect(style.getAnchor()).to.eql([5, 5]);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"will use the larger radius to calculate the size","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":87,"column":56,"index":3551},"line":87,"code":"    it('will use the larger radius to calculate the size', function () {\n      let style = new RegularShape({\n        radius: 10,\n        radius2: 5\n      });\n      expect(style.getSize()).to.eql([20, 20]);\n      style = new RegularShape({\n        radius: 5,\n        radius2: 10\n      });\n      expect(style.getSize()).to.eql([20, 20]);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"can use offset","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":99,"column":22,"index":3862},"line":99,"code":"    it('can use offset', function () {\n      const style = new RegularShape({\n        radius: 5,\n        displacement: [10, 20]\n      });\n      expect(style.getDisplacement()).to.an('array');\n      expect(style.getDisplacement()[0]).to.eql(10);\n      expect(style.getDisplacement()[1]).to.eql(20);\n      expect(style.getAnchor()).to.eql([-5, 25]);\n      style.setDisplacement([20, 10]);\n      expect(style.getDisplacement()).to.an('array');\n      expect(style.getDisplacement()[0]).to.eql(20);\n      expect(style.getDisplacement()[1]).to.eql(10);\n      expect(style.getAnchor()).to.eql([-15, 15]);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"scale applies to rendered radius, not offset","suites":["ol.style.RegularShape","#constructor"],"updatePoint":{"line":114,"column":52,"index":4498},"line":114,"code":"    it('scale applies to rendered radius, not offset', function () {\n      let style;\n      style = new RegularShape({\n        radius: 5,\n        displacement: [10, 20],\n        scale: 4\n      });\n      expect(style.getDisplacement()).to.an('array');\n      expect(style.getDisplacement()[0]).to.eql(10);\n      expect(style.getDisplacement()[1]).to.eql(20);\n      expect(style.getAnchor()).to.eql([2.5, 10]);\n      style.setDisplacement([20, 10]);\n      expect(style.getDisplacement()).to.an('array');\n      expect(style.getDisplacement()[0]).to.eql(20);\n      expect(style.getDisplacement()[1]).to.eql(10);\n      expect(style.getAnchor()).to.eql([0, 7.5]);\n      style = new RegularShape({\n        radius: 20,\n        displacement: [10, 20]\n      });\n      expect(style.getDisplacement()).to.an('array');\n      expect(style.getDisplacement()[0]).to.eql(10);\n      expect(style.getDisplacement()[1]).to.eql(20);\n      expect(style.getAnchor()).to.eql([10, 40]);\n      style.setDisplacement([20, 10]);\n      expect(style.getDisplacement()).to.an('array');\n      expect(style.getDisplacement()[0]).to.eql(20);\n      expect(style.getDisplacement()[1]).to.eql(10);\n      expect(style.getAnchor()).to.eql([0, 30]);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"creates a new ol.style.RegularShape","suites":["ol.style.RegularShape","#clone"],"updatePoint":{"line":146,"column":43,"index":5747},"line":146,"code":"    it('creates a new ol.style.RegularShape', function () {\n      const original = new RegularShape({\n        points: 5\n      });\n      const clone = original.clone();\n      expect(clone).to.be.an(RegularShape);\n      expect(clone).to.not.be(original);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"copies all values","suites":["ol.style.RegularShape","#clone"],"updatePoint":{"line":154,"column":25,"index":5990},"line":154,"code":"    it('copies all values', function () {\n      const original = new RegularShape({\n        fill: new Fill({\n          color: '#319FD3'\n        }),\n        points: 5,\n        radius: 4,\n        radius2: 6,\n        angle: 1,\n        stroke: new Stroke({\n          color: '#319FD3'\n        }),\n        rotation: 2,\n        rotateWithView: true,\n        displacement: [10, 20]\n      });\n      original.setOpacity(0.5);\n      original.setScale(1.5);\n      const clone = original.clone();\n      expect(original.getAngle()).to.eql(clone.getAngle());\n      expect(original.getFill().getColor()).to.eql(clone.getFill().getColor());\n      expect(original.getOpacity()).to.eql(clone.getOpacity());\n      expect(original.getPoints()).to.eql(clone.getPoints());\n      expect(original.getRadius()).to.eql(clone.getRadius());\n      expect(original.getRadius2()).to.eql(clone.getRadius2());\n      expect(original.getRotation()).to.eql(clone.getRotation());\n      expect(original.getRotateWithView()).to.eql(clone.getRotateWithView());\n      expect(original.getScale()).to.eql(clone.getScale());\n      expect(original.getStroke().getColor()).to.eql(clone.getStroke().getColor());\n      expect(original.getDisplacement()[0]).to.eql(clone.getDisplacement()[0]);\n      expect(original.getDisplacement()[1]).to.eql(clone.getDisplacement()[1]);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"the clone does not reference the same objects as the original","suites":["ol.style.RegularShape","#clone"],"updatePoint":{"line":186,"column":69,"index":7366},"line":186,"code":"    it('the clone does not reference the same objects as the original', function () {\n      const original = new RegularShape({\n        fill: new Fill({\n          color: '#319FD3'\n        }),\n        stroke: new Stroke({\n          color: '#319FD3'\n        }),\n        displacement: [0, 5]\n      });\n      const clone = original.clone();\n      expect(original.getFill()).to.not.be(clone.getFill());\n      expect(original.getStroke()).to.not.be(clone.getStroke());\n      expect(original.getDisplacement()).to.not.be(clone.getDisplacement());\n      clone.getFill().setColor('#012345');\n      clone.getStroke().setColor('#012345');\n      expect(original.getFill().getColor()).to.not.eql(clone.getFill().getColor());\n      expect(original.getStroke().getColor()).to.not.eql(clone.getStroke().getColor());\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"does not double the points without radius2","suites":["ol.style.RegularShape","#createPath_"],"updatePoint":{"line":215,"column":50,"index":8367},"line":215,"code":"    it('does not double the points without radius2', function () {\n      const style = new RegularShape({\n        radius: 10,\n        points: 4\n      });\n      style.createPath_(canvas);\n      expect(canvas.arc.callCount).to.be(0);\n      expect(canvas.lineTo.callCount).to.be(4);\n      expect(canvas.closePath.callCount).to.be(1);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"doubles the points with radius2","suites":["ol.style.RegularShape","#createPath_"],"updatePoint":{"line":225,"column":39,"index":8695},"line":225,"code":"    it('doubles the points with radius2', function () {\n      const style = new RegularShape({\n        radius: 10,\n        radius2: 12,\n        points: 4\n      });\n      style.createPath_(canvas);\n      expect(canvas.arc.callCount).to.be(0);\n      expect(canvas.lineTo.callCount).to.be(8);\n      expect(canvas.closePath.callCount).to.be(1);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"doubles the points when radius2 equals radius","suites":["ol.style.RegularShape","#createPath_"],"updatePoint":{"line":236,"column":53,"index":9058},"line":236,"code":"    it('doubles the points when radius2 equals radius', function () {\n      const style = new RegularShape({\n        radius: 10,\n        radius2: 10,\n        points: 4\n      });\n      style.createPath_(canvas);\n      expect(canvas.arc.callCount).to.be(0);\n      expect(canvas.lineTo.callCount).to.be(8);\n      expect(canvas.closePath.callCount).to.be(1);\n    });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size to diameter","suites":["ol.style.RegularShape","#calculateLineJoinSize_","polygon"],"updatePoint":{"line":270,"column":31,"index":9882},"line":270,"code":"      it('sets size to diameter', function () {\n        const style = create({\n          strokeWidth: 0\n        });\n        expect(style.getSize()).to.eql([20, 20]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size to diameter rounded up","suites":["ol.style.RegularShape","#calculateLineJoinSize_","polygon"],"updatePoint":{"line":276,"column":42,"index":10069},"line":276,"code":"      it('sets size to diameter rounded up', function () {\n        const style = create({\n          radius: 9.9,\n          strokeWidth: 0\n        });\n        expect(style.getSize()).to.eql([20, 20]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size to diameter plus miter","suites":["ol.style.RegularShape","#calculateLineJoinSize_","polygon"],"updatePoint":{"line":283,"column":42,"index":10279},"line":283,"code":"      it('sets size to diameter plus miter', function () {\n        const style = create({});\n        expect(style.getSize()).to.eql([35, 35]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size to diameter plus miter with miter limit","suites":["ol.style.RegularShape","#calculateLineJoinSize_","polygon"],"updatePoint":{"line":287,"column":59,"index":10449},"line":287,"code":"      it('sets size to diameter plus miter with miter limit', function () {\n        const style = create({\n          miterLimit: 0\n        });\n        expect(style.getSize()).to.eql([28, 28]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size to diameter plus bevel","suites":["ol.style.RegularShape","#calculateLineJoinSize_","polygon"],"updatePoint":{"line":293,"column":42,"index":10635},"line":293,"code":"      it('sets size to diameter plus bevel', function () {\n        const style = create({\n          lineJoin: 'bevel'\n        });\n        expect(style.getSize()).to.eql([28, 28]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size to diameter plus stroke width with round line join","suites":["ol.style.RegularShape","#calculateLineJoinSize_","polygon"],"updatePoint":{"line":299,"column":70,"index":10853},"line":299,"code":"      it('sets size to diameter plus stroke width with round line join', function () {\n        const style = create({\n          lineJoin: 'round'\n        });\n        expect(style.getSize()).to.eql([30, 30]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size to diameter plus miter r1 > r2","suites":["ol.style.RegularShape","#calculateLineJoinSize_","star"],"updatePoint":{"line":307,"column":50,"index":11094},"line":307,"code":"      it('sets size to diameter plus miter r1 > r2', function () {\n        const style = create({\n          radius2: 1,\n          miterLimit: 100\n        });\n        expect(style.getSize()).to.eql([152, 152]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size to diameter plus miter r1 < r2","suites":["ol.style.RegularShape","#calculateLineJoinSize_","star"],"updatePoint":{"line":314,"column":50,"index":11314},"line":314,"code":"      it('sets size to diameter plus miter r1 < r2', function () {\n        const style = create({\n          radius2: 2,\n          points: 7,\n          miterLimit: 100\n        });\n        expect(style.getSize()).to.eql([116, 116]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"sets size with spokes through center and outer bevel","suites":["ol.style.RegularShape","#calculateLineJoinSize_","star"],"updatePoint":{"line":322,"column":62,"index":11567},"line":322,"code":"      it('sets size with spokes through center and outer bevel', function () {\n        const style = create({\n          radius2: 80,\n          points: 9,\n          strokeWidth: 90\n        });\n        expect(style.getSize()).to.eql([213, 213]);\n      });","file":"browser/spec/ol/style/regularshape.test.js","skipped":false,"dir":"test"},{"name":"creates a new ol.style.Stroke","suites":["ol.style.Stroke","#clone"],"updatePoint":{"line":4,"column":37,"index":175},"line":4,"code":"    it('creates a new ol.style.Stroke', function () {\n      const original = new Stroke();\n      const clone = original.clone();\n      expect(clone).to.be.an(Stroke);\n      expect(clone).to.not.be(original);\n    });","file":"browser/spec/ol/style/stroke.test.js","skipped":false,"dir":"test"},{"name":"copies all values","suites":["ol.style.Stroke","#clone"],"updatePoint":{"line":10,"column":25,"index":379},"line":10,"code":"    it('copies all values', function () {\n      const original = new Stroke({\n        color: '#319FD3',\n        lineCap: 'square',\n        lineJoin: 'miter',\n        lineDash: [1, 2, 3],\n        lineDashOffset: 2,\n        miterLimit: 20,\n        width: 5\n      });\n      const clone = original.clone();\n      expect(original.getColor()).to.eql(clone.getColor());\n      expect(original.getLineCap()).to.eql(clone.getLineCap());\n      expect(original.getLineJoin()).to.eql(clone.getLineJoin());\n      expect(original.getLineDash()).to.eql(clone.getLineDash());\n      expect(original.getLineDashOffset()).to.eql(clone.getLineDashOffset());\n      expect(original.getMiterLimit()).to.eql(clone.getMiterLimit());\n      expect(original.getWidth()).to.eql(clone.getWidth());\n    });","file":"browser/spec/ol/style/stroke.test.js","skipped":false,"dir":"test"},{"name":"the clone does not reference the same objects as the original","suites":["ol.style.Stroke","#clone"],"updatePoint":{"line":29,"column":69,"index":1198},"line":29,"code":"    it('the clone does not reference the same objects as the original', function () {\n      const original = new Stroke({\n        color: [1, 2, 3, 0.4],\n        lineDash: [1, 2, 3]\n      });\n      const clone = original.clone();\n      expect(original.getColor()).to.not.be(clone.getColor());\n      expect(original.getLineDash()).to.not.be(clone.getLineDash());\n      clone.getColor()[0] = 0;\n      clone.getLineDash()[0] = 0;\n      expect(original.getColor()).to.not.eql(clone.getColor());\n      expect(original.getLineDash()).to.not.eql(clone.getLineDash());\n    });","file":"browser/spec/ol/style/stroke.test.js","skipped":false,"dir":"test"},{"name":"creates a new ol.style.Style","suites":["ol.style.Style","#clone"],"updatePoint":{"line":30,"column":36,"index":934},"line":30,"code":"    it('creates a new ol.style.Style', function () {\n      const original = new Style();\n      const clone = original.clone();\n      expect(clone).to.be.an(Style);\n      expect(clone).to.not.be(original);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"copies all values","suites":["ol.style.Style","#clone"],"updatePoint":{"line":36,"column":25,"index":1136},"line":36,"code":"    it('copies all values', function () {\n      const original = new Style({\n        geometry: new Point([0, 0, 0]),\n        fill: new Fill({\n          color: '#319FD3'\n        }),\n        image: new CircleStyle({\n          radius: 5\n        }),\n        renderer: function (pixelCoordinates, state) {\n          const geometry = state.geometry.clone();\n          geometry.setCoordinates(pixelCoordinates);\n        },\n        stroke: new Stroke({\n          color: '#319FD3'\n        }),\n        text: new Text({\n          text: 'test'\n        }),\n        zIndex: 2\n      });\n      const clone = original.clone();\n      expect(original.getGeometry().getCoordinates()).to.eql(clone.getGeometry().getCoordinates());\n      expect(original.getFill().getColor()).to.eql(clone.getFill().getColor());\n      expect(original.getImage().getRadius()).to.eql(clone.getImage().getRadius());\n      expect(original.getRenderer()).to.eql(clone.getRenderer());\n      expect(original.getStroke().getColor()).to.eql(clone.getStroke().getColor());\n      expect(original.getText().getText()).to.eql(clone.getText().getText());\n      expect(original.getZIndex()).to.eql(clone.getZIndex());\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"the clone does not reference the same objects as the original","suites":["ol.style.Style","#clone"],"updatePoint":{"line":66,"column":69,"index":2352},"line":66,"code":"    it('the clone does not reference the same objects as the original', function () {\n      const original = new Style({\n        geometry: new Point([0, 0, 0]),\n        fill: new Fill({\n          color: '#319FD3'\n        }),\n        image: new CircleStyle({\n          radius: 5\n        }),\n        renderer: function (pixelCoordinates, state) {\n          const geometry = state.geometry.clone();\n          geometry.setCoordinates(pixelCoordinates);\n        },\n        stroke: new Stroke({\n          color: '#319FD3'\n        }),\n        text: new Text({\n          text: 'test'\n        })\n      });\n      const clone = original.clone();\n      expect(original.getGeometry()).not.to.be(clone.getGeometry());\n      expect(original.getFill()).not.to.be(clone.getFill());\n      expect(original.getImage()).not.to.be(clone.getImage());\n      expect(original.getStroke()).not.to.be(clone.getStroke());\n      expect(original.getText()).not.to.be(clone.getText());\n      clone.getGeometry().setCoordinates([1, 1, 1]);\n      clone.getFill().setColor('#012345');\n      clone.getImage().setScale(2);\n      clone.setRenderer(function (pixelCoordinates, state) {\n        return;\n      });\n      clone.getStroke().setColor('#012345');\n      clone.getText().setText('other');\n      expect(original.getGeometry().getCoordinates()).not.to.eql(clone.getGeometry().getCoordinates());\n      expect(original.getFill().getColor()).not.to.eql(clone.getFill().getColor());\n      expect(original.getImage().getScale()).not.to.eql(clone.getImage().getScale());\n      expect(original.getRenderer()).not.to.eql(clone.getRenderer());\n      expect(original.getStroke().getColor()).not.to.eql(clone.getStroke().getColor());\n      expect(original.getText().getText()).not.to.eql(clone.getText().getText());\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"sets the zIndex","suites":["ol.style.Style","#setZIndex"],"updatePoint":{"line":109,"column":23,"index":4131},"line":109,"code":"    it('sets the zIndex', function () {\n      const style = new Style();\n      style.setZIndex(0.7);\n      expect(style.getZIndex()).to.be(0.7);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"returns the fill style of a style","suites":["ol.style.Style","#getFill"],"updatePoint":{"line":119,"column":41,"index":4404},"line":119,"code":"    it('returns the fill style of a style', function () {\n      expect(style.getFill()).to.eql(testFill);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"sets the fill style of a style","suites":["ol.style.Style","#setFill"],"updatePoint":{"line":125,"column":38,"index":4589},"line":125,"code":"    it('sets the fill style of a style', function () {\n      style.setFill(testFill);\n      expect(style.getFill()).to.eql(testFill);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"returns the image style of a style","suites":["ol.style.Style","#getImage"],"updatePoint":{"line":134,"column":42,"index":4840},"line":134,"code":"    it('returns the image style of a style', function () {\n      expect(style.getImage()).to.eql(testImage);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"sets the image style of a style","suites":["ol.style.Style","#setImage"],"updatePoint":{"line":140,"column":39,"index":5029},"line":140,"code":"    it('sets the image style of a style', function () {\n      style.setImage(testImage);\n      expect(style.getImage()).to.eql(testImage);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"returns the stroke style of a style","suites":["ol.style.Style","#getStroke"],"updatePoint":{"line":149,"column":43,"index":5288},"line":149,"code":"    it('returns the stroke style of a style', function () {\n      expect(style.getStroke()).to.eql(testStroke);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"sets the stroke style of a style","suites":["ol.style.Style","#setStroke"],"updatePoint":{"line":155,"column":40,"index":5481},"line":155,"code":"    it('sets the stroke style of a style', function () {\n      style.setStroke(testStroke);\n      expect(style.getStroke()).to.eql(testStroke);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"returns the text style of a style","suites":["ol.style.Style","#getText"],"updatePoint":{"line":164,"column":41,"index":5736},"line":164,"code":"    it('returns the text style of a style', function () {\n      expect(style.getText()).to.eql(testText);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"sets the text style of a style","suites":["ol.style.Style","#setText"],"updatePoint":{"line":170,"column":38,"index":5921},"line":170,"code":"    it('sets the text style of a style', function () {\n      style.setText(testText);\n      expect(style.getText()).to.eql(testText);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"creates a geometry function from a string","suites":["ol.style.Style","#setGeometry"],"updatePoint":{"line":177,"column":49,"index":6152},"line":177,"code":"    it('creates a geometry function from a string', function () {\n      const feature = new Feature();\n      feature.set('myGeom', new Point([0, 0]));\n      style.setGeometry('myGeom');\n      expect(style.getGeometryFunction()(feature)).to.eql(feature.get('myGeom'));\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"creates a geometry function from a geometry","suites":["ol.style.Style","#setGeometry"],"updatePoint":{"line":183,"column":51,"index":6430},"line":183,"code":"    it('creates a geometry function from a geometry', function () {\n      const geom = new Point([0, 0]);\n      style.setGeometry(geom);\n      expect(style.getGeometryFunction()()).to.eql(geom);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"returns the configured geometry function","suites":["ol.style.Style","#setGeometry"],"updatePoint":{"line":188,"column":48,"index":6630},"line":188,"code":"    it('returns the configured geometry function', function () {\n      const geom = new Point([0, 0]);\n      style.setGeometry(function () {\n        return geom;\n      });\n      expect(style.getGeometryFunction()()).to.eql(geom);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"returns whatever was passed to setGeometry","suites":["ol.style.Style","#getGeometry"],"updatePoint":{"line":197,"column":50,"index":6917},"line":197,"code":"    it('returns whatever was passed to setGeometry', function () {\n      const style = new Style();\n      style.setGeometry('foo');\n      expect(style.getGeometry()).to.eql('foo');\n      const geom = new Point([1, 2]);\n      style.setGeometry(geom);\n      expect(style.getGeometry()).to.eql(geom);\n      const fn = function () {\n        return geom;\n      };\n      style.setGeometry(fn);\n      expect(style.getGeometry()).to.eql(fn);\n      style.setGeometry(null);\n      expect(style.getGeometry()).to.eql(null);\n    });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"creates a style function from a single style","suites":["toFunction()"],"updatePoint":{"line":216,"column":50,"index":7516},"line":216,"code":"  it('creates a style function from a single style', function () {\n    const styleFunction = toFunction(style);\n    expect(styleFunction()).to.eql([style]);\n  });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"creates a style function from an array of styles","suites":["toFunction()"],"updatePoint":{"line":220,"column":54,"index":7683},"line":220,"code":"  it('creates a style function from an array of styles', function () {\n    const styleFunction = toFunction([style]);\n    expect(styleFunction()).to.eql([style]);\n  });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"passes through a function","suites":["toFunction()"],"updatePoint":{"line":224,"column":31,"index":7829},"line":224,"code":"  it('passes through a function', function () {\n    const original = function () {\n      return [style];\n    };\n    const styleFunction = toFunction(original);\n    expect(styleFunction).to.be(original);\n  });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"throws on (some) unexpected input","suites":["toFunction()"],"updatePoint":{"line":231,"column":39,"index":8046},"line":231,"code":"  it('throws on (some) unexpected input', function () {\n    expect(function () {\n      toFunction({\n        bogus: 'input'\n      });\n    }).to.throwException();\n  });","file":"browser/spec/ol/style/style.test.js","skipped":false,"dir":"test"},{"name":"uses a default fill style if none passed","suites":["ol.style.Text","#constructor"],"updatePoint":{"line":6,"column":48,"index":302},"line":6,"code":"    it('uses a default fill style if none passed', function () {\n      const style = new Text();\n      expect(style.getFill().getColor()).to.be('#333');\n    });","file":"browser/spec/ol/style/text.test.js","skipped":false,"dir":"test"},{"name":"uses a provided fill style if one passed","suites":["ol.style.Text","#constructor"],"updatePoint":{"line":10,"column":48,"index":463},"line":10,"code":"    it('uses a provided fill style if one passed', function () {\n      const style = new Text({\n        fill: new Fill({\n          color: '#123456'\n        })\n      });\n      expect(style.getFill().getColor()).to.be('#123456');\n    });","file":"browser/spec/ol/style/text.test.js","skipped":false,"dir":"test"},{"name":"can always be resetted to no color","suites":["ol.style.Text","#constructor"],"updatePoint":{"line":18,"column":42,"index":693},"line":18,"code":"    it('can always be resetted to no color', function () {\n      const style = new Text();\n      style.getFill().setColor();\n      expect(style.getFill().getColor()).to.be(undefined);\n    });","file":"browser/spec/ol/style/text.test.js","skipped":false,"dir":"test"},{"name":"creates a new ol.style.Text","suites":["ol.style.Text","#clone"],"updatePoint":{"line":25,"column":35,"index":919},"line":25,"code":"    it('creates a new ol.style.Text', function () {\n      const original = new Text();\n      const clone = original.clone();\n      expect(clone).to.be.an(Text);\n      expect(clone).to.not.be(original);\n    });","file":"browser/spec/ol/style/text.test.js","skipped":false,"dir":"test"},{"name":"copies all values","suites":["ol.style.Text","#clone"],"updatePoint":{"line":31,"column":25,"index":1119},"line":31,"code":"    it('copies all values', function () {\n      const original = new Text({\n        font: '12px serif',\n        offsetX: 4,\n        offsetY: 10,\n        scale: 2,\n        rotateWithView: true,\n        rotation: 1.5,\n        text: 'test',\n        textAlign: 'center',\n        textBaseline: 'top',\n        repeat: 250,\n        fill: new Fill({\n          color: '#319FD3'\n        }),\n        stroke: new Stroke({\n          color: '#319FD3'\n        }),\n        backgroundFill: new Fill({\n          color: 'white'\n        }),\n        backgroundStroke: new Stroke({\n          color: 'black'\n        }),\n        padding: [10, 11, 12, 13]\n      });\n      const clone = original.clone();\n      expect(original.getFont()).to.eql(clone.getFont());\n      expect(original.getOffsetX()).to.eql(clone.getOffsetX());\n      expect(original.getOffsetY()).to.eql(clone.getOffsetY());\n      expect(original.getScale()).to.eql(clone.getScale());\n      expect(original.getRotateWithView()).to.eql(clone.getRotateWithView());\n      expect(original.getRotation()).to.eql(clone.getRotation());\n      expect(original.getText()).to.eql(clone.getText());\n      expect(original.getTextAlign()).to.eql(clone.getTextAlign());\n      expect(original.getRepeat()).to.eql(clone.getRepeat());\n      expect(original.getTextBaseline()).to.eql(clone.getTextBaseline());\n      expect(original.getStroke().getColor()).to.eql(clone.getStroke().getColor());\n      expect(original.getFill().getColor()).to.eql(clone.getFill().getColor());\n      expect(original.getBackgroundStroke().getColor()).to.eql(clone.getBackgroundStroke().getColor());\n      expect(original.getBackgroundFill().getColor()).to.eql(clone.getBackgroundFill().getColor());\n      expect(original.getPadding()).to.eql(clone.getPadding());\n    });","file":"browser/spec/ol/style/text.test.js","skipped":false,"dir":"test"},{"name":"the clone does not reference the same objects as the original","suites":["ol.style.Text","#clone"],"updatePoint":{"line":74,"column":69,"index":2934},"line":74,"code":"    it('the clone does not reference the same objects as the original', function () {\n      const original = new Text({\n        fill: new Fill({\n          color: '#319FD3'\n        }),\n        stroke: new Stroke({\n          color: '#319FD3'\n        })\n      });\n      const clone = original.clone();\n      expect(original.getFill()).to.not.be(clone.getFill());\n      expect(original.getStroke()).to.not.be(clone.getStroke());\n      clone.getFill().setColor('#012345');\n      clone.getStroke().setColor('#012345');\n      expect(original.getFill().getColor()).to.not.eql(clone.getFill().getColor());\n      expect(original.getStroke().getColor()).to.not.eql(clone.getStroke().getColor());\n    });","file":"browser/spec/ol/style/text.test.js","skipped":false,"dir":"test"},{"name":"sets the rotateWithView property","suites":["ol.style.Text","#setRotateWithView"],"updatePoint":{"line":93,"column":40,"index":3651},"line":93,"code":"    it('sets the rotateWithView property', function () {\n      const textStyle = new Text();\n      expect(textStyle.getRotateWithView()).to.eql(undefined);\n      textStyle.setRotateWithView(true);\n      expect(textStyle.getRotateWithView()).to.eql(true);\n    });","file":"browser/spec/ol/style/text.test.js","skipped":false,"dir":"test"},{"name":"sets a default transition","suites":["ol.Tile","constructor"],"updatePoint":{"line":7,"column":33,"index":322},"line":7,"code":"    it('sets a default transition', function () {\n      const coord = [0, 0, 0];\n      const tile = new Tile(coord, TileState.IDLE);\n      expect(tile.transition_).to.equal(250);\n    });","file":"browser/spec/ol/tile.test.js","skipped":false,"dir":"test"},{"name":"allows the transition to be set","suites":["ol.Tile","constructor"],"updatePoint":{"line":12,"column":39,"index":515},"line":12,"code":"    it('allows the transition to be set', function () {\n      const coord = [0, 0, 0];\n      const transition = 500;\n      const tile = new Tile(coord, TileState.IDLE, {\n        transition: transition\n      });\n      expect(tile.transition_).to.equal(transition);\n    });","file":"browser/spec/ol/tile.test.js","skipped":false,"dir":"test"},{"name":"returns the alpha value for a tile in transition","suites":["ol.Tile","#getAlpha()"],"updatePoint":{"line":22,"column":56,"index":850},"line":22,"code":"    it('returns the alpha value for a tile in transition', function () {\n      const coord = [0, 0, 0];\n      const tile = new Tile(coord, TileState.IDLE);\n      const id = 'test';\n      let time = Date.now();\n      const startAlpha = tile.getAlpha(id, time);\n      expect(startAlpha > 0).to.be(true);\n      expect(startAlpha < 1).to.be(true);\n      time += tile.transition_ / 2;\n      const midAlpha = tile.getAlpha(id, time);\n      expect(midAlpha > startAlpha).to.be(true);\n      expect(midAlpha < 1).to.be(true);\n      time += tile.transition_ / 2;\n      const endAlpha = tile.getAlpha(id, time);\n      expect(endAlpha).to.be(1);\n    });","file":"browser/spec/ol/tile.test.js","skipped":false,"dir":"test"},{"name":"determines if the tile is in transition","suites":["ol.Tile","#inTransition()"],"updatePoint":{"line":40,"column":47,"index":1533},"line":40,"code":"    it('determines if the tile is in transition', function () {\n      const coord = [0, 0, 0];\n      const tile = new Tile(coord, TileState.IDLE);\n      const id = 'test';\n      expect(tile.inTransition(id)).to.be(true);\n      tile.endTransition(id);\n      expect(tile.inTransition(id)).to.be(false);\n    });","file":"browser/spec/ol/tile.test.js","skipped":false,"dir":"test"},{"name":"shrinks tile chain correctly","suites":["ol.Tile","interimChain"],"updatePoint":{"line":71,"column":36,"index":2845},"line":71,"code":"    it('shrinks tile chain correctly', function (done) {\n      const chainLength = function (tile) {\n        let c = 0;\n        while (tile) {\n          ++c;\n          tile = tile.interimTile;\n        }\n        return c;\n      };\n      expect(chainLength(head)).to.be(9);\n      head.refreshInterimChain();\n      expect(chainLength(head)).to.be(3);\n      done();\n    });","file":"browser/spec/ol/tile.test.js","skipped":false,"dir":"test"},{"name":"gives the right tile to render","suites":["ol.Tile","interimChain"],"updatePoint":{"line":85,"column":38,"index":3217},"line":85,"code":"    it('gives the right tile to render', function (done) {\n      expect(head.getInterimTile()).to.be(renderTile);\n      head.refreshInterimChain();\n      expect(head.getInterimTile()).to.be(renderTile);\n      done();\n    });","file":"browser/spec/ol/tile.test.js","skipped":false,"dir":"test"},{"name":"discards everything after the render tile","suites":["ol.Tile","interimChain"],"updatePoint":{"line":91,"column":49,"index":3453},"line":91,"code":"    it('discards everything after the render tile', function (done) {\n      head.refreshInterimChain();\n      expect(renderTile.interimTile).to.be(null);\n      done();\n    });","file":"browser/spec/ol/tile.test.js","skipped":false,"dir":"test"},{"name":"preserves order of tiles","suites":["ol.Tile","interimChain"],"updatePoint":{"line":96,"column":32,"index":3612},"line":96,"code":"    it('preserves order of tiles', function (done) {\n      head.refreshInterimChain();\n      while (head.interimTile !== null) {\n        //use property of ol.getUid returning increasing id's.\n        expect(getUid(head) < getUid(head.interimTile));\n        head = head.interimTile;\n      }\n      done();\n    });","file":"browser/spec/ol/tile.test.js","skipped":false,"dir":"test"},{"name":"gets rid of all entries that are not at the newest z","suites":["ol.TileCache","#pruneExceptNewestZ()"],"updatePoint":{"line":6,"column":60,"index":312},"line":6,"code":"    it('gets rid of all entries that are not at the newest z', function () {\n      const tiles = [new Tile([0, 0, 0]), new Tile([1, 0, 0]), new Tile([1, 1, 0]), new Tile([2, 0, 0]), new Tile([2, 1, 0]), new Tile([2, 2, 0]), new Tile([2, 3, 0]) // newest tile at z: 2\n      ];\n\n      const cache = new TileCache();\n      sinon.spy(tiles[0], 'dispose');\n      tiles.forEach(function (tile) {\n        cache.set(getKey(tile.tileCoord), tile);\n      });\n      cache.pruneExceptNewestZ();\n      expect(cache.getKeys()).to.eql(['2/3/0', '2/2/0', '2/1/0', '2/0/0']);\n    });","file":"browser/spec/ol/tilecache.test.js","skipped":false,"dir":"test"},{"name":"sets x y z properties as expected","suites":["ol.TileCoord","create"],"updatePoint":{"line":5,"column":41,"index":271},"line":5,"code":"    it('sets x y z properties as expected', function () {\n      const tileCoord = [1, 2, 3];\n      expect(tileCoord[0]).to.eql(1);\n      expect(tileCoord[1]).to.eql(2);\n      expect(tileCoord[2]).to.eql(3);\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"returns a key for a tile coord","suites":["ol.TileCoord","getKey()"],"updatePoint":{"line":13,"column":38,"index":526},"line":13,"code":"    it('returns a key for a tile coord', function () {\n      const key = getKey([1, 2, 3]);\n      expect(key).to.eql('1/2/3');\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"returns a tile coord given a key","suites":["ol.TileCoord","fromKey()"],"updatePoint":{"line":19,"column":40,"index":707},"line":19,"code":"    it('returns a tile coord given a key', function () {\n      const tileCoord = [1, 2, 3];\n      const key = getKey(tileCoord);\n      const returned = fromKey(key);\n      expect(returned).to.eql(tileCoord);\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"produces different hashes for different tile coords","suites":["ol.TileCoord","hash"],"updatePoint":{"line":27,"column":59,"index":981},"line":27,"code":"    it('produces different hashes for different tile coords', function () {\n      const tileCoord1 = [3, 2, 1];\n      const tileCoord2 = [3, 1, 1];\n      expect(hash(tileCoord1)).not.to.eql(hash(tileCoord2));\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"restricts by z","suites":["ol.TileCoord","withinExtentAndZ"],"updatePoint":{"line":34,"column":22,"index":1212},"line":34,"code":"    it('restricts by z', function () {\n      const tileGrid = new TileGrid({\n        extent: [10, 20, 30, 40],\n        tileSize: 10,\n        resolutions: [2, 1],\n        minZoom: 1\n      });\n      expect(withinExtentAndZ([0, 0, 0], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([1, 0, 0], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([2, 0, 0], tileGrid)).to.be(false);\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"restricts by extent when extent defines tile ranges","suites":["ol.TileCoord","withinExtentAndZ"],"updatePoint":{"line":45,"column":59,"index":1645},"line":45,"code":"    it('restricts by extent when extent defines tile ranges', function () {\n      const tileGrid = new TileGrid({\n        extent: [10, 20, 30, 40],\n        sizes: [[3, 3]],\n        tileSize: 10,\n        resolutions: [1]\n      });\n      expect(withinExtentAndZ([0, 1, 1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 2, 0], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 0, 2], tileGrid)).to.be(false);\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"restricts by extent when sizes define tile ranges","suites":["ol.TileCoord","withinExtentAndZ"],"updatePoint":{"line":56,"column":57,"index":2078},"line":56,"code":"    it('restricts by extent when sizes define tile ranges', function () {\n      const tileGrid = new TileGrid({\n        origin: [10, 20],\n        sizes: [[3, 3]],\n        tileSize: 10,\n        resolutions: [1]\n      });\n      expect(withinExtentAndZ([0, 0, 0], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 1, 0], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 2, 0], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 0, 1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 1, 1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 2, 1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 0, 2], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 1, 2], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 2, 2], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 0, -1], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 1, -1], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 2, -1], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, -1, 0], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 3, 0], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, -1, 1], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 3, 1], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, -1, 2], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 3, 2], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 0, 3], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 1, 3], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 2, 3], tileGrid)).to.be(false);\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"restricts by extent when sizes (neg y) define tile ranges","suites":["ol.TileCoord","withinExtentAndZ"],"updatePoint":{"line":85,"column":65,"index":3697},"line":85,"code":"    it('restricts by extent when sizes (neg y) define tile ranges', function () {\n      const tileGrid = new TileGrid({\n        origin: [10, 40],\n        sizes: [[3, -3]],\n        tileSize: 10,\n        resolutions: [1]\n      });\n      expect(withinExtentAndZ([0, 0, -1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 1, -1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 2, -1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 0, -2], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 1, -2], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 2, -2], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 0, -3], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 1, -3], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 2, -3], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 0, 0], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 1, 0], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 2, 0], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, -1, -1], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 3, -1], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, -1, -2], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 3, -2], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, -1, -3], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 3, -3], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 0, -4], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 1, -4], tileGrid)).to.be(false);\n      expect(withinExtentAndZ([0, 2, -4], tileGrid)).to.be(false);\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"does not restrict by extent with no extent or sizes","suites":["ol.TileCoord","withinExtentAndZ"],"updatePoint":{"line":114,"column":59,"index":5326},"line":114,"code":"    it('does not restrict by extent with no extent or sizes', function () {\n      const tileGrid = new TileGrid({\n        origin: [10, 20],\n        tileSize: 10,\n        resolutions: [1]\n      });\n      expect(withinExtentAndZ([0, Infinity, -1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 0, Infinity], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, -Infinity, -1], tileGrid)).to.be(true);\n      expect(withinExtentAndZ([0, 0, Infinity], tileGrid)).to.be(true);\n    });","file":"browser/spec/ol/tilecoord.test.js","skipped":false,"dir":"test"},{"name":"can create tileGrid for EPSG:3857","suites":["ol.tilegrid.WMTS","when creating tileGrid from capabilities"],"updatePoint":{"line":17,"column":41,"index":635},"line":17,"code":"    it('can create tileGrid for EPSG:3857', function () {\n      const matrixSetObj = capabilities.Contents.TileMatrixSet[0];\n      const tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj);\n      expect(tileGrid.matrixIds_).to.be.an('array');\n      expect(tileGrid.matrixIds_).to.have.length(20);\n      expect(tileGrid.matrixIds_).to.eql(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']);\n      expect(tileGrid.resolutions_).to.be.an('array');\n      expect(tileGrid.resolutions_).to.have.length(20);\n      expect(tileGrid.resolutions_).to.eql([156543.03392811998, 78271.51696419998, 39135.758481959994, 19567.879241008, 9783.939620504, 4891.969810252, 2445.984905126, 1222.9924525644, 611.4962262807999, 305.74811314039994, 152.87405657047998, 76.43702828523999, 38.21851414248, 19.109257071295996, 9.554628535647998, 4.777314267823999, 2.3886571339119995, 1.1943285669559998, 0.5971642834779999, 0.29858214174039993]);\n      expect(tileGrid.origins_).to.be.an('array');\n      expect(tileGrid.origins_).to.have.length(20);\n      expect(tileGrid.origins_).to.eql(Array.apply(null, Array(20)).map(Array.prototype.valueOf, [-20037508.3428, 20037508.3428]));\n      expect(tileGrid.tileSizes_).to.be.an('array');\n      expect(tileGrid.tileSizes_).to.have.length(20);\n      expect(tileGrid.tileSizes_).to.eql(Array.apply(null, Array(20)).map(Number.prototype.valueOf, 256));\n    });","file":"browser/spec/ol/tilegrid/wmts.test.js","skipped":false,"dir":"test"},{"name":"can create tileGrid for EPSG:3857 without matrixLimits","suites":["ol.tilegrid.WMTS","when creating tileGrid from capabilities with and without TileMatrixSetLimits"],"updatePoint":{"line":47,"column":62,"index":2516},"line":47,"code":"    it('can create tileGrid for EPSG:3857 without matrixLimits', function () {\n      const matrixSetObj = capabilities.Contents.TileMatrixSet[0];\n      const tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj);\n      expect(tileGrid.matrixIds_).to.be.an('array');\n      expect(tileGrid.matrixIds_).to.have.length(22);\n      expect(tileGrid.matrixIds_).to.eql(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']);\n      expect(tileGrid.resolutions_).to.be.an('array');\n      expect(tileGrid.resolutions_).to.have.length(22);\n      expect(tileGrid.resolutions_).to.eql([156543.033928041, 78271.51696402048, 39135.758482010235, 19567.87924100512, 9783.93962050256, 4891.96981025128, 2445.98490512564, 1222.99245256282, 611.49622628141, 305.7481131407048, 152.8740565703525, 76.43702828517624, 38.21851414258813, 19.10925707129406, 9.554628535647032, 4.777314267823516, 2.388657133911758, 1.194328566955879, 0.5971642834779395, 0.2985821417389697, 0.1492910708694849, 0.0746455354347424]);\n      expect(tileGrid.origins_).to.be.an('array');\n      expect(tileGrid.origins_).to.have.length(22);\n      expect(tileGrid.origins_).to.eql(Array.apply(null, Array(22)).map(Array.prototype.valueOf, [-20037508, 20037508]));\n      expect(tileGrid.tileSizes_).to.be.an('array');\n      expect(tileGrid.tileSizes_).to.have.length(22);\n      expect(tileGrid.tileSizes_).to.eql(Array.apply(null, Array(22)).map(Number.prototype.valueOf, 256));\n    });","file":"browser/spec/ol/tilegrid/wmts.test.js","skipped":false,"dir":"test"},{"name":"can create tileGrid for EPSG:3857 with matrixLimits","suites":["ol.tilegrid.WMTS","when creating tileGrid from capabilities with and without TileMatrixSetLimits"],"updatePoint":{"line":63,"column":59,"index":4022},"line":63,"code":"    it('can create tileGrid for EPSG:3857 with matrixLimits', function () {\n      const matrixSetObj = capabilities.Contents.TileMatrixSet[0];\n      const matrixLimitArray = capabilities.Contents.Layer[0].TileMatrixSetLink[0].TileMatrixSetLimits;\n      const tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, undefined, matrixLimitArray);\n      expect(tileGrid.matrixIds_).to.be.an('array');\n      expect(tileGrid.matrixIds_).to.have.length(20);\n      expect(tileGrid.matrixIds_).to.eql(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']);\n      expect(tileGrid.resolutions_).to.be.an('array');\n      expect(tileGrid.resolutions_).to.have.length(20);\n      expect(tileGrid.resolutions_).to.eql([156543.033928041, 78271.51696402048, 39135.758482010235, 19567.87924100512, 9783.93962050256, 4891.96981025128, 2445.98490512564, 1222.99245256282, 611.49622628141, 305.7481131407048, 152.8740565703525, 76.43702828517624, 38.21851414258813, 19.10925707129406, 9.554628535647032, 4.777314267823516, 2.388657133911758, 1.194328566955879, 0.5971642834779395, 0.2985821417389697]);\n      expect(tileGrid.origins_).to.be.an('array');\n      expect(tileGrid.origins_).to.have.length(20);\n      expect(tileGrid.origins_).to.eql(Array.apply(null, Array(20)).map(Array.prototype.valueOf, [-20037508, 20037508]));\n      expect(tileGrid.tileSizes_).to.be.an('array');\n      expect(tileGrid.tileSizes_).to.have.length(20);\n      expect(tileGrid.tileSizes_).to.eql(Array.apply(null, Array(20)).map(Number.prototype.valueOf, 256));\n    });","file":"browser/spec/ol/tilegrid/wmts.test.js","skipped":false,"dir":"test"},{"name":"can use prefixed matrixLimits","suites":["ol.tilegrid.WMTS","when creating tileGrid from capabilities with and without TileMatrixSetLimits"],"updatePoint":{"line":80,"column":37,"index":5587},"line":80,"code":"    it('can use prefixed matrixLimits', function () {\n      const matrixSetObj = capabilities.Contents.TileMatrixSet[1];\n      const matrixLimitArray = capabilities.Contents.Layer[0].TileMatrixSetLink[1].TileMatrixSetLimits;\n      const tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, undefined, matrixLimitArray);\n      expect(tileGrid.matrixIds_).to.be.an('array');\n      expect(tileGrid.matrixIds_).to.have.length(2);\n      expect(tileGrid.matrixIds_).to.eql(['0', '1']);\n      expect(tileGrid.resolutions_).to.be.an('array');\n      expect(tileGrid.resolutions_).to.have.length(2);\n      expect(tileGrid.resolutions_).to.eql([156543.033928041, 78271.51696402048]);\n      expect(tileGrid.origins_).to.be.an('array');\n      expect(tileGrid.origins_).to.have.length(2);\n      expect(tileGrid.origins_).to.eql(Array.apply(null, Array(2)).map(Array.prototype.valueOf, [-20037508, 20037508]));\n      expect(tileGrid.tileSizes_).to.be.an('array');\n      expect(tileGrid.tileSizes_).to.have.length(2);\n      expect(tileGrid.tileSizes_).to.eql(Array.apply(null, Array(2)).map(Number.prototype.valueOf, 256));\n    });","file":"browser/spec/ol/tilegrid/wmts.test.js","skipped":false,"dir":"test"},{"name":"works when tile queues share tiles","suites":["ol.TileQueue","#loadMoreTiles()"],"updatePoint":{"line":33,"column":42,"index":1580},"line":33,"code":"    it('works when tile queues share tiles', function (done) {\n      const q1 = new TileQueue(noop, noop);\n      const q2 = new TileQueue(noop, noop);\n      const numTiles = 20;\n      const maxLoading = numTiles / 2;\n      let processedTiles = 0;\n      for (let i = 0; i < numTiles; ++i) {\n        const tile = createImageTile();\n        tile.addEventListener('change', function processed() {\n          const state = tile.getState();\n          if (state === TileState.LOADED || state === TileState.ERROR) {\n            tile.removeEventListener('change', processed);\n            ++processedTiles;\n          }\n          if (processedTiles === numTiles) {\n            setTimeout(finish, 0);\n          }\n        });\n        q1.enqueue([tile]);\n        q2.enqueue([tile]);\n      }\n\n      // Initially, both have all tiles.\n      expect(q1.getCount()).to.equal(numTiles);\n      expect(q2.getCount()).to.equal(numTiles);\n\n      // and nothing is loading\n      expect(q1.getTilesLoading()).to.equal(0);\n      expect(q2.getTilesLoading()).to.equal(0);\n\n      // ask both to load\n      q1.loadMoreTiles(maxLoading, maxLoading);\n      q2.loadMoreTiles(maxLoading, maxLoading);\n\n      // both tiles will be loading the max\n      expect(q1.getTilesLoading()).to.equal(maxLoading);\n      expect(q2.getTilesLoading()).to.equal(maxLoading);\n\n      // the second queue will be empty now\n      expect(q1.getCount()).to.equal(numTiles - maxLoading);\n      expect(q2.getCount()).to.equal(0);\n\n      // let all tiles load\n      function finish() {\n        expect(q1.getTilesLoading()).to.equal(0);\n        expect(q2.getTilesLoading()).to.equal(0);\n\n        // ask both to load, this should clear q1\n        q1.loadMoreTiles(maxLoading, maxLoading);\n        q2.loadMoreTiles(maxLoading, maxLoading);\n        expect(q1.getCount()).to.equal(0);\n        expect(q2.getCount()).to.equal(0);\n        done();\n      }\n    });","file":"browser/spec/ol/tilequeue.test.js","skipped":false,"dir":"test"},{"name":"does convert an arbitrary array into a heap","suites":["ol.TileQueue","heapify"],"updatePoint":{"line":90,"column":51,"index":3527},"line":90,"code":"    it('does convert an arbitrary array into a heap', function () {\n      const tq = new TileQueue(function () {});\n      addRandomPriorityTiles(tq, 100);\n      tq.heapify_();\n    });","file":"browser/spec/ol/tilequeue.test.js","skipped":false,"dir":"test"},{"name":"does reprioritize the array","suites":["ol.TileQueue","reprioritize"],"updatePoint":{"line":97,"column":35,"index":3742},"line":97,"code":"    it('does reprioritize the array', function () {\n      const tq = new TileQueue(function () {});\n      addRandomPriorityTiles(tq, 100);\n      tq.heapify_();\n\n      // now reprioritize, changing the priority of 50 tiles and removing the\n      // rest\n\n      let i = 0;\n      tq.priorityFunction_ = function () {\n        if (i++ % 2 === 0) {\n          return DROP;\n        }\n        return Math.floor(Math.random() * 100);\n      };\n      tq.reprioritize();\n      expect(tq.elements_.length).to.eql(50);\n      expect(tq.priorities_.length).to.eql(50);\n    });","file":"browser/spec/ol/tilequeue.test.js","skipped":false,"dir":"test"},{"name":"loaded tiles","suites":["ol.TileQueue","tile change event"],"updatePoint":{"line":119,"column":20,"index":4372},"line":119,"code":"    it('loaded tiles', function () {\n      const tq = new TileQueue(noop, noop);\n      const tile = createImageTile();\n      expect(tile.hasListener('change')).to.be(false);\n      tq.enqueue([tile]);\n      expect(tile.hasListener('change')).to.be(true);\n      tile.setState(TileState.LOADED);\n      expect(tile.hasListener('change')).to.be(false);\n    });","file":"browser/spec/ol/tilequeue.test.js","skipped":false,"dir":"test"},{"name":"error tiles - with retry","suites":["ol.TileQueue","tile change event"],"updatePoint":{"line":128,"column":32,"index":4740},"line":128,"code":"    it('error tiles - with retry', function (done) {\n      const tq = new TileQueue(noop, noop);\n      const tile = createImageTile(noop);\n      tq.enqueue([tile]);\n      tq.loadMoreTiles(Infinity, Infinity);\n      expect(tq.getTilesLoading()).to.eql(1);\n      expect(tile.getState()).to.eql(1); // LOADING\n\n      tile.setState(TileState.ERROR);\n      expect(tq.getTilesLoading()).to.eql(0);\n      expect(tile.hasListener('change')).to.be(true);\n      tile.setState(TileState.IDLE);\n      setTimeout(() => tile.setState(TileState.LOADING), 100);\n      setTimeout(() => tile.setState(TileState.LOADED), 200);\n      setTimeout(() => {\n        try {\n          expect(tq.getTilesLoading()).to.eql(0);\n          expect(tile.hasListener('change')).to.be(false);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      }, 300);\n    });","file":"browser/spec/ol/tilequeue.test.js","skipped":false,"dir":"test"},{"name":"error tiles - without retry","suites":["ol.TileQueue","tile change event"],"updatePoint":{"line":152,"column":35,"index":5591},"line":152,"code":"    it('error tiles - without retry', function (done) {\n      const tq = new TileQueue(noop, noop);\n      const tile = createImageTile(noop);\n      const tileCache = new TileCache();\n      tileCache.set(tile.getTileCoord().toString(), tile);\n      tq.enqueue([tile]);\n      tq.loadMoreTiles(Infinity, Infinity);\n      expect(tq.getTilesLoading()).to.eql(1);\n      expect(tile.getState()).to.eql(1); // LOADING\n\n      tile.setState(TileState.ERROR);\n      expect(tq.getTilesLoading()).to.eql(0);\n      expect(tile.hasListener('change')).to.be(true);\n      setTimeout(() => tileCache.clear(), 100);\n      setTimeout(() => {\n        try {\n          expect(tq.getTilesLoading()).to.eql(0);\n          expect(tile.hasListener('change')).to.be(false);\n          done();\n        } catch (e) {\n          done(e);\n        }\n      }, 200);\n    });","file":"browser/spec/ol/tilequeue.test.js","skipped":false,"dir":"test"},{"name":"creates a range","suites":["ol.TileRange","constructor"],"updatePoint":{"line":4,"column":23,"index":160},"line":4,"code":"    it('creates a range', function () {\n      const range = new TileRange(1, 3, 2, 4);\n      expect(range).to.be.a(TileRange);\n    });","file":"browser/spec/ol/tilerange.test.js","skipped":false,"dir":"test"},{"name":"can represent a range of one tile","suites":["ol.TileRange","constructor"],"updatePoint":{"line":8,"column":41,"index":313},"line":8,"code":"    it('can represent a range of one tile', function () {\n      const range = new TileRange(2, 2, 3, 3);\n      expect(range).to.be.a(TileRange);\n      expect(range.getHeight()).to.be(1);\n      expect(range.getWidth()).to.be(1);\n    });","file":"browser/spec/ol/tilerange.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol.TileRange","contains"],"updatePoint":{"line":16,"column":34,"index":585},"line":16,"code":"    it('returns the expected value', function () {\n      const tileRange = new TileRange(1, 3, 1, 3);\n      expect(tileRange.contains([0, 0, 0])).to.not.be();\n      expect(tileRange.contains([0, 0, 1])).to.not.be();\n      expect(tileRange.contains([0, 0, 2])).to.not.be();\n      expect(tileRange.contains([0, 0, 3])).to.not.be();\n      expect(tileRange.contains([0, 0, 4])).to.not.be();\n      expect(tileRange.contains([0, 1, 0])).to.not.be();\n      expect(tileRange.contains([0, 1, 1])).to.be.ok();\n      expect(tileRange.contains([0, 1, 2])).to.be.ok();\n      expect(tileRange.contains([0, 1, 3])).to.be.ok();\n      expect(tileRange.contains([0, 1, 4])).to.not.be();\n      expect(tileRange.contains([0, 2, 0])).to.not.be();\n      expect(tileRange.contains([0, 2, 1])).to.be.ok();\n      expect(tileRange.contains([0, 2, 2])).to.be.ok();\n      expect(tileRange.contains([0, 2, 3])).to.be.ok();\n      expect(tileRange.contains([0, 2, 4])).to.not.be();\n      expect(tileRange.contains([0, 3, 0])).to.not.be();\n      expect(tileRange.contains([0, 3, 1])).to.be.ok();\n      expect(tileRange.contains([0, 3, 2])).to.be.ok();\n      expect(tileRange.contains([0, 3, 3])).to.be.ok();\n      expect(tileRange.contains([0, 3, 4])).to.not.be();\n      expect(tileRange.contains([0, 4, 0])).to.not.be();\n      expect(tileRange.contains([0, 4, 1])).to.not.be();\n      expect(tileRange.contains([0, 4, 2])).to.not.be();\n      expect(tileRange.contains([0, 4, 3])).to.not.be();\n      expect(tileRange.contains([0, 4, 4])).to.not.be();\n    });","file":"browser/spec/ol/tilerange.test.js","skipped":false,"dir":"test"},{"name":"determines equivalence of two ranges","suites":["ol.TileRange","equals"],"updatePoint":{"line":46,"column":44,"index":2162},"line":46,"code":"    it('determines equivalence of two ranges', function () {\n      const one = new TileRange(0, 2, 1, 4);\n      const same = new TileRange(0, 2, 1, 4);\n      const diff1 = new TileRange(0, 2, 1, 5);\n      const diff2 = new TileRange(0, 3, 1, 4);\n      const diff3 = new TileRange(0, 2, 2, 4);\n      const diff4 = new TileRange(1, 2, 1, 4);\n      expect(one.equals(same)).to.be(true);\n      expect(one.equals(diff1)).to.be(false);\n      expect(one.equals(diff2)).to.be(false);\n      expect(one.equals(diff3)).to.be(false);\n      expect(one.equals(diff4)).to.be(false);\n    });","file":"browser/spec/ol/tilerange.test.js","skipped":false,"dir":"test"},{"name":"modifies range so it includes another","suites":["ol.TileRange","extent"],"updatePoint":{"line":61,"column":45,"index":2780},"line":61,"code":"    it('modifies range so it includes another', function () {\n      const one = new TileRange(0, 2, 1, 4);\n      const other = new TileRange(-1, -3, 10, 12);\n      one.extend(other);\n      expect(one.minX).to.be(-1);\n      expect(one.maxX).to.be(2);\n      expect(one.minY).to.be(1);\n      expect(one.maxY).to.be(12);\n    });","file":"browser/spec/ol/tilerange.test.js","skipped":false,"dir":"test"},{"name":"returns the expected size","suites":["ol.TileRange","getSize"],"updatePoint":{"line":72,"column":33,"index":3135},"line":72,"code":"    it('returns the expected size', function () {\n      const tileRange = new TileRange(0, 2, 1, 4);\n      const size = tileRange.getSize();\n      expect(size).to.eql([3, 4]);\n    });","file":"browser/spec/ol/tilerange.test.js","skipped":false,"dir":"test"},{"name":"determines if two ranges overlap","suites":["ol.TileRange","intersects"],"updatePoint":{"line":79,"column":40,"index":3371},"line":79,"code":"    it('determines if two ranges overlap', function () {\n      const one = new TileRange(0, 2, 1, 4);\n      const overlapsRight = new TileRange(2, 4, 1, 4);\n      const overlapsLeft = new TileRange(-3, 0, 1, 4);\n      const overlapsTop = new TileRange(0, 2, 4, 5);\n      const overlapsBottom = new TileRange(0, 2, -3, 1);\n      expect(one.intersects(overlapsLeft)).to.be(true);\n      expect(one.intersects(overlapsRight)).to.be(true);\n      expect(one.intersects(overlapsTop)).to.be(true);\n      expect(one.intersects(overlapsBottom)).to.be(true);\n      const right = new TileRange(3, 5, 1, 4);\n      const left = new TileRange(-3, -1, 1, 4);\n      const above = new TileRange(0, 2, 5, 6);\n      const below = new TileRange(0, 2, -3, 0);\n      expect(one.intersects(right)).to.be(false);\n      expect(one.intersects(left)).to.be(false);\n      expect(one.intersects(above)).to.be(false);\n      expect(one.intersects(below)).to.be(false);\n    });","file":"browser/spec/ol/tilerange.test.js","skipped":false,"dir":"test"},{"name":"creates expected URLs","suites":["ol.TileUrlFunction","expandUrl","with number range"],"updatePoint":{"line":7,"column":31,"index":423},"line":7,"code":"      it('creates expected URLs', function () {\n        const template = 'http://tile-{1-3}/{z}/{x}/{y}';\n        const urls = expandUrl(template);\n        expect(urls).to.eql(['http://tile-1/{z}/{x}/{y}', 'http://tile-2/{z}/{x}/{y}', 'http://tile-3/{z}/{x}/{y}']);\n      });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"creates expected URLs","suites":["ol.TileUrlFunction","expandUrl","with number range"],"updatePoint":{"line":12,"column":31,"index":699},"line":12,"code":"      it('creates expected URLs', function () {\n        const template = 'http://tile-{9-11}/{z}/{x}/{y}';\n        const urls = expandUrl(template);\n        expect(urls).to.eql(['http://tile-9/{z}/{x}/{y}', 'http://tile-10/{z}/{x}/{y}', 'http://tile-11/{z}/{x}/{y}']);\n      });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"creates expected URLs","suites":["ol.TileUrlFunction","expandUrl","with character range"],"updatePoint":{"line":19,"column":31,"index":1037},"line":19,"code":"      it('creates expected URLs', function () {\n        const template = 'http://tile-{c-e}/{z}/{x}/{y}';\n        const urls = expandUrl(template);\n        expect(urls).to.eql(['http://tile-c/{z}/{x}/{y}', 'http://tile-d/{z}/{x}/{y}', 'http://tile-e/{z}/{x}/{y}']);\n      });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"creates expected URLs","suites":["ol.TileUrlFunction","expandUrl","without range"],"updatePoint":{"line":26,"column":31,"index":1365},"line":26,"code":"      it('creates expected URLs', function () {\n        const template = 'http://tiles.example.com/{z}/{x}/{y}';\n        const urls = expandUrl(template);\n        expect(urls).to.eql(['http://tiles.example.com/{z}/{x}/{y}']);\n      });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"creates expected URL","suites":["ol.TileUrlFunction","createFromTemplate"],"updatePoint":{"line":35,"column":28,"index":1693},"line":35,"code":"    it('creates expected URL', function () {\n      const tileUrl = createFromTemplate('{z}/{x}/{y}', tileGrid);\n      expect(tileUrl([3, 2, 1])).to.eql('3/2/1');\n      expect(tileUrl(null)).to.be(undefined);\n    });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"accepts {-y} placeholder","suites":["ol.TileUrlFunction","createFromTemplate"],"updatePoint":{"line":40,"column":32,"index":1913},"line":40,"code":"    it('accepts {-y} placeholder', function () {\n      const tileUrl = createFromTemplate('{z}/{x}/{-y}', tileGrid);\n      expect(tileUrl([3, 2, 2])).to.eql('3/2/5');\n    });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"returns correct value for {-y} with custom tile grids","suites":["ol.TileUrlFunction","createFromTemplate"],"updatePoint":{"line":44,"column":61,"index":2117},"line":44,"code":"    it('returns correct value for {-y} with custom tile grids', function () {\n      const customTileGrid = new TileGrid({\n        extent: [-180, -90, 180, 90],\n        origin: [-180, -90],\n        resolutions: [360 / 256, 360 / 512, 360 / 1024, 360 / 2048]\n      });\n      const tileUrl = createFromTemplate('{z}/{x}/{-y}', customTileGrid);\n      expect(tileUrl([3, 2, 2])).to.eql('3/2/1');\n    });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"replaces multiple placeholder occurrences","suites":["ol.TileUrlFunction","createFromTemplate"],"updatePoint":{"line":53,"column":49,"index":2504},"line":53,"code":"    it('replaces multiple placeholder occurrences', function () {\n      const tileUrl = createFromTemplate('{z}/{z}{x}{y}', tileGrid);\n      expect(tileUrl([3, 2, 1])).to.eql('3/321');\n    });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"creates expected URL","suites":["ol.TileUrlFunction","createFromTemplates"],"updatePoint":{"line":60,"column":28,"index":2764},"line":60,"code":"    it('creates expected URL', function () {\n      const templates = ['http://tile-1/{z}/{x}/{y}'];\n      const tileUrlFunction = createFromTemplates(templates, tileGrid);\n      const tileCoord = [3, 2, 1];\n      expect(tileUrlFunction(tileCoord)).to.eql('http://tile-1/3/2/1');\n    });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"creates expected URL","suites":["ol.TileUrlFunction","createFromTileUrlFunctions"],"updatePoint":{"line":69,"column":28,"index":3146},"line":69,"code":"    it('creates expected URL', function () {\n      const tileUrl = createFromTileUrlFunctions([createFromTemplate('a', tileGrid), createFromTemplate('b', tileGrid)]);\n      const tileUrl1 = tileUrl([1, 0, 0]);\n      const tileUrl2 = tileUrl([1, 0, 1]);\n      expect(tileUrl1).not.to.be(tileUrl2);\n      expect(tileUrl(null)).to.be(undefined);\n    });","file":"browser/spec/ol/tileurlfunction.test.js","skipped":false,"dir":"test"},{"name":"creates an identity transform","suites":["ol.transform","create()"],"updatePoint":{"line":9,"column":37,"index":437},"line":9,"code":"    it('creates an identity transform', function () {\n      expect(create()).to.eql([1, 0, 0, 1, 0, 0]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"resets tansform to an identity transform","suites":["ol.transform","reset()"],"updatePoint":{"line":14,"column":48,"index":603},"line":14,"code":"    it('resets tansform to an identity transform', function () {\n      const transform = [1, 2, 3, 4, 5, 6];\n      expect(reset(transform)).to.eql([1, 0, 0, 1, 0, 0]);\n      expect(transform).to.eql([1, 0, 0, 1, 0, 0]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"sets the given values","suites":["ol.transform","set()"],"updatePoint":{"line":21,"column":29,"index":852},"line":21,"code":"    it('sets the given values', function () {\n      const transform = create();\n      expect(set(transform, 1, 2, 3, 4, 5, 6)).to.eql([1, 2, 3, 4, 5, 6]);\n      expect(transform).to.eql([1, 2, 3, 4, 5, 6]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"sets values of 2nd transform on 1st transform","suites":["ol.transform","setFromArray()"],"updatePoint":{"line":28,"column":53,"index":1140},"line":28,"code":"    it('sets values of 2nd transform on 1st transform', function () {\n      const transform1 = create();\n      const transform2 = [1, 2, 3, 4, 5, 6];\n      expect(setFromArray(transform1, transform2)).to.eql(transform2);\n      expect(transform1).to.eql(transform2);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"applies translation to a transform","suites":["ol.transform","translate()"],"updatePoint":{"line":36,"column":42,"index":1449},"line":36,"code":"    it('applies translation to a transform', function () {\n      const transform = create();\n      expect(translate(transform, 3, 4)).to.eql([1, 0, 0, 1, 3, 4]);\n      expect(transform).to.eql([1, 0, 0, 1, 3, 4]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"applies scaling to a transform","suites":["ol.transform","scale()"],"updatePoint":{"line":43,"column":38,"index":1709},"line":43,"code":"    it('applies scaling to a transform', function () {\n      const transform = create();\n      expect(scale(transform, 3, 4)).to.eql([3, 0, 0, 4, 0, 0]);\n      expect(transform).to.eql([3, 0, 0, 4, 0, 0]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"creates a scale transform","suites":["ol.transform","makeScale()"],"updatePoint":{"line":50,"column":33,"index":1964},"line":50,"code":"    it('creates a scale transform', function () {\n      const target = create();\n      makeScale(target, 2, 3);\n      expect(target).to.eql([2, 0, 0, 3, 0, 0]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"returns the target","suites":["ol.transform","makeScale()"],"updatePoint":{"line":55,"column":26,"index":2126},"line":55,"code":"    it('returns the target', function () {\n      const target = create();\n      const transform = makeScale(target, 2, 3);\n      expect(transform).to.be(target);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"applies rotation to a transform","suites":["ol.transform","rotate()"],"updatePoint":{"line":62,"column":39,"index":2352},"line":62,"code":"    it('applies rotation to a transform', function () {\n      const transform = create();\n      assertRoughlyEqual(rotate(transform, Math.PI / 2), [0, 1, -1, 0, 0, 0]);\n      assertRoughlyEqual(transform, [0, 1, -1, 0, 0, 0]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"multiplies two transforms","suites":["ol.transform","multiply()"],"updatePoint":{"line":69,"column":33,"index":2626},"line":69,"code":"    it('multiplies two transforms', function () {\n      const transform1 = [1, 2, 1, 2, 1, 2];\n      const transform2 = [1, 2, 1, 2, 1, 2];\n      expect(multiply(transform1, transform2)).to.eql([3, 6, 3, 6, 4, 8]);\n      expect(transform1).to.eql([3, 6, 3, 6, 4, 8]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"composes a translate, scale, rotate, translate transform","suites":["ol.transform","compose()"],"updatePoint":{"line":77,"column":64,"index":2977},"line":77,"code":"    it('composes a translate, scale, rotate, translate transform', function () {\n      const dx1 = 3;\n      const dy1 = 4;\n      const sx = 1.5;\n      const sy = -1.5;\n      const angle = Math.PI / 3;\n      const dx2 = -dx1 / 2;\n      const dy2 = -dy1 / 2;\n      const expected = create();\n      translate(expected, dx1, dy1);\n      scale(expected, sx, sy);\n      rotate(expected, angle);\n      translate(expected, dx2, dy2);\n      const composed = create();\n      const composedReturn = compose(composed, dx1, dy1, sx, sy, angle, dx2, dy2);\n      expect(composed).to.equal(composedReturn);\n      expect(composed).to.eql(expected);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"inverts a transform","suites":["ol.transform","invert()"],"updatePoint":{"line":97,"column":27,"index":3623},"line":97,"code":"    it('inverts a transform', function () {\n      const transform = [1, 1, 1, 2, 2, 0];\n      expect(invert(transform)).to.eql([2, -1, -1, 1, -4, 2]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"throws if the transform cannot be inverted","suites":["ol.transform","invert()"],"updatePoint":{"line":101,"column":50,"index":3805},"line":101,"code":"    it('throws if the transform cannot be inverted', function () {\n      const indeterminant = [1, 0, 1, 0, 1, 0];\n      expect(function () {\n        invert(indeterminant);\n      }).to.throwException();\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"modifies the source","suites":["ol.transform","invert()"],"updatePoint":{"line":107,"column":27,"index":3993},"line":107,"code":"    it('modifies the source', function () {\n      const source = [1, 1, 1, 2, 2, 0];\n      const inverted = invert(source);\n      expect(inverted).to.eql([2, -1, -1, 1, -4, 2]);\n      expect(source).to.be(inverted);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"makes the target the inverse of the source","suites":["ol.transform","makeInverse()"],"updatePoint":{"line":115,"column":50,"index":4288},"line":115,"code":"    it('makes the target the inverse of the source', function () {\n      const source = [1, 1, 1, 2, 2, 0];\n      const target = [1, 0, 0, 1, 0, 0];\n      makeInverse(target, source);\n      expect(source).to.eql([1, 1, 1, 2, 2, 0]);\n      expect(target).to.eql([2, -1, -1, 1, -4, 2]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"returns the target","suites":["ol.transform","makeInverse()"],"updatePoint":{"line":122,"column":26,"index":4557},"line":122,"code":"    it('returns the target', function () {\n      const source = [1, 1, 1, 2, 2, 0];\n      const target = [1, 0, 0, 1, 0, 0];\n      const inverted = makeInverse(target, source);\n      expect(target).to.be(inverted);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"applies a transform to a 2d vector","suites":["ol.transform","apply()"],"updatePoint":{"line":130,"column":42,"index":4838},"line":130,"code":"    it('applies a transform to a 2d vector', function () {\n      const transform = translate(create(), 2, 3);\n      const point = [1, 2];\n      expect(apply(transform, point)).to.eql([3, 5]);\n      expect(point).to.eql([3, 5]);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"compares with value read back from node","suites":["ol.transform","toString()"],"updatePoint":{"line":138,"column":47,"index":5124},"line":138,"code":"    it('compares with value read back from node', function () {\n      const mat = [1 / 3, 0, 0, 1 / 3, 0, 0];\n      const node = document.createElement('div');\n      node.style.transform = 'matrix(' + mat.join(',') + ')';\n      expect(toString(mat)).to.be(node.style.transform);\n    });","file":"browser/spec/ol/transform.test.js","skipped":false,"dir":"test"},{"name":"should append empty STYLES with =","suites":["ol.uri.appendParams()"],"updatePoint":{"line":3,"column":39,"index":146},"line":3,"code":"  it('should append empty STYLES with =', function () {\n    const url = appendParams('http://example.com/foo', {\n      SERVICE: 'WMS',\n      STYLES: ''\n    });\n    expect(url).to.equal('http://example.com/foo?SERVICE=WMS&STYLES=');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"should URL encode values but not names","suites":["ol.uri.appendParams()"],"updatePoint":{"line":10,"column":44,"index":389},"line":10,"code":"  it('should URL encode values but not names', function () {\n    const url = appendParams('http://example.com/foo', {\n      'k ': 'v '\n    });\n    expect(url).to.equal('http://example.com/foo?k =v%20');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"should append to simple base URL","suites":["ol.uri.appendParams()"],"updatePoint":{"line":16,"column":38,"index":592},"line":16,"code":"  it('should append to simple base URL', function () {\n    const url = appendParams('http://example.com/foo', {\n      k: 'v'\n    });\n    expect(url).to.equal('http://example.com/foo?k=v');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"should append to base URL with ?","suites":["ol.uri.appendParams()"],"updatePoint":{"line":22,"column":38,"index":787},"line":22,"code":"  it('should append to base URL with ?', function () {\n    const url = appendParams('http://example.com/foo?', {\n      k: 'v'\n    });\n    expect(url).to.equal('http://example.com/foo?k=v');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"should append to base URL with single existing param","suites":["ol.uri.appendParams()"],"updatePoint":{"line":28,"column":58,"index":1003},"line":28,"code":"  it('should append to base URL with single existing param', function () {\n    const url = appendParams('http://example.com/foo?bar=bam', {\n      k: 'v'\n    });\n    expect(url).to.equal('http://example.com/foo?bar=bam&k=v');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"should append to base URL with single existing param and extraneous &","suites":["ol.uri.appendParams()"],"updatePoint":{"line":34,"column":75,"index":1251},"line":34,"code":"  it('should append to base URL with single existing param and extraneous &', function () {\n    const url = appendParams('http://example.com/foo?bar=bam&', {\n      k: 'v'\n    });\n    expect(url).to.equal('http://example.com/foo?bar=bam&k=v');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"should append to base URL with two existing params","suites":["ol.uri.appendParams()"],"updatePoint":{"line":40,"column":56,"index":1481},"line":40,"code":"  it('should append to base URL with two existing params', function () {\n    const url = appendParams('http://example.com/foo?bar=bam&baz=bat', {\n      k: 'v'\n    });\n    expect(url).to.equal('http://example.com/foo?bar=bam&baz=bat&k=v');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"should append to base URL with three existing params last one empty","suites":["ol.uri.appendParams()"],"updatePoint":{"line":46,"column":73,"index":1743},"line":46,"code":"  it('should append to base URL with three existing params last one empty', function () {\n    const url = appendParams('http://example.com/foo?bar=bam&baz=bat&bop=', {\n      k: 'v'\n    });\n    expect(url).to.equal('http://example.com/foo?bar=bam&baz=bat&bop=&k=v');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"should not append null or undefined parameters to the url","suites":["ol.uri.appendParams()"],"updatePoint":{"line":52,"column":63,"index":2005},"line":52,"code":"  it('should not append null or undefined parameters to the url', function () {\n    const url = appendParams('http://example.com/foo', {\n      a: '1',\n      b: null,\n      c: undefined\n    });\n    expect(url).to.equal('http://example.com/foo?a=1');\n  });","file":"browser/spec/ol/uri.test.js","skipped":false,"dir":"test"},{"name":"triggers \"change\" when previously failed source tiles are loaded","suites":["ol.VectorRenderTile"],"updatePoint":{"line":8,"column":70,"index":529},"line":8,"code":"  it('triggers \"change\" when previously failed source tiles are loaded', function (done) {\n    let sourceTile;\n    const source = new VectorTileSource({\n      format: new GeoJSON(),\n      url: 'spec/ol/data/unavailable.json',\n      tileLoadFunction: function (tile, url) {\n        sourceTile = tile;\n        defaultLoadFunction(tile, url);\n      }\n    });\n    const tile = source.getTile(0, 0, 0, 1, source.getProjection());\n    tile.load();\n    let calls = 0;\n    listen(tile, 'change', function (e) {\n      ++calls;\n      if (calls === 1) {\n        expect(tile.getState()).to.be(TileState.ERROR);\n        setTimeout(function () {\n          sourceTile.setState(TileState.LOADED);\n        }, 0);\n      } else if (calls === 2) {\n        expect(tile.getState()).to.be(TileState.LOADED);\n        done();\n      }\n    });\n  });","file":"browser/spec/ol/vectorrendertile.test.js","skipped":false,"dir":"test"},{"name":"sets ERROR state when source tiles fail to load","suites":["ol.VectorRenderTile"],"updatePoint":{"line":34,"column":53,"index":1335},"line":34,"code":"  it('sets ERROR state when source tiles fail to load', function (done) {\n    const source = new VectorTileSource({\n      format: new GeoJSON(),\n      url: 'spec/ol/data/unavailable.json'\n    });\n    const tile = source.getTile(0, 0, 0, 1, source.getProjection());\n    tile.load();\n    listen(tile, 'change', function (e) {\n      expect(tile.getState()).to.be(TileState.ERROR);\n      done();\n    });\n  });","file":"browser/spec/ol/vectorrendertile.test.js","skipped":false,"dir":"test"},{"name":"sets EMPTY state when tile has only empty source tiles","suites":["ol.VectorRenderTile"],"updatePoint":{"line":46,"column":60,"index":1748},"line":46,"code":"  it('sets EMPTY state when tile has only empty source tiles', function () {\n    const source = new VectorTileSource({\n      format: new GeoJSON(),\n      url: ''\n    });\n    const tile = source.getTile(0, 0, 0, 1, source.getProjection());\n    tile.load();\n    expect(tile.getState()).to.be(TileState.EMPTY);\n  });","file":"browser/spec/ol/vectorrendertile.test.js","skipped":false,"dir":"test"},{"name":"only loads tiles within the source tileGrid's extent","suites":["ol.VectorRenderTile"],"updatePoint":{"line":55,"column":58,"index":2060},"line":55,"code":"  it(\"only loads tiles within the source tileGrid's extent\", function (done) {\n    let tile;\n    const url = 'spec/ol/data/point.json';\n    const source = new VectorTileSource({\n      projection: 'EPSG:4326',\n      format: new GeoJSON(),\n      tileGrid: new TileGrid({\n        resolutions: [0.02197265625, 0.010986328125, 0.0054931640625],\n        origin: [-180, 90],\n        extent: [-88, 35, -87, 36]\n      }),\n      tileUrlFunction: function (zxy) {\n        return url;\n      },\n      url: url\n    });\n    tile = source.getTile(0, 0, 0, 1, source.getProjection());\n    expect(tile.getState()).to.be(TileState.EMPTY);\n    tile = source.getTile(0, 16, 9, 1, source.getProjection());\n    expect(tile.getState()).to.be(TileState.IDLE);\n    tile.load();\n    const key = listen(tile, EventType.CHANGE, function () {\n      if (tile.getState() === TileState.LOADED) {\n        unlistenByKey(key);\n        const sourceTiles = source.getSourceTiles(1, source.getProjection(), tile);\n        expect(sourceTiles.length).to.be(1);\n        expect(sourceTiles[0].tileCoord).to.eql([0, 16, 9]);\n        done();\n      }\n    });\n  });","file":"browser/spec/ol/vectorrendertile.test.js","skipped":false,"dir":"test"},{"name":"loader reprojects GeoJSON features","suites":["ol.VectorTile"],"updatePoint":{"line":9,"column":40,"index":513},"line":9,"code":"  it('loader reprojects GeoJSON features', function (done) {\n    const format = new GeoJSON();\n    const tile = new VectorTile([0, 0, 0], null, null, format);\n    const url = 'spec/ol/data/point.json';\n    defaultLoadFunction(tile, url);\n    const loader = tile.loader_;\n    listen(tile, 'change', function (e) {\n      expect(tile.getFeatures()[0].getGeometry().getFlatCoordinates()).to.eql([-9724792.346778862, 4164041.638405114]);\n      done();\n    });\n    loader.call(tile, [], 1, getProjection('EPSG:3857'));\n  });","file":"browser/spec/ol/vectortile.test.js","skipped":false,"dir":"test"},{"name":"loader reprojects MVT features","suites":["ol.VectorTile"],"updatePoint":{"line":21,"column":36,"index":1028},"line":21,"code":"  it('loader reprojects MVT features', function (done) {\n    const format = new MVT();\n    const tileGrid = createXYZ({\n      tileSize: 512\n    });\n    const tile = new VectorTile([14, 8938, 5680], null, null, format);\n    const url = 'spec/ol/data/14-8938-5680.vector.pbf';\n    defaultLoadFunction(tile, url);\n    const loader = tile.loader_;\n    listen(tile, 'change', function (e) {\n      expect(tile.getFeatures()[1246].getGeometry().getFlatCoordinates()).to.eql([1827804.0218549764, 6144812.116688028]);\n      done();\n    });\n    const extent = tileGrid.getTileCoordExtent(tile.tileCoord);\n    loader.call(tile, extent, 1, getProjection('EPSG:3857'));\n  });","file":"browser/spec/ol/vectortile.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol/View","constructor (defaults)"],"updatePoint":{"line":15,"column":27,"index":750},"line":15,"code":"    it('creates an instance', function () {\n      expect(view).to.be.a(View);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"provides default rotation","suites":["ol/View","constructor (defaults)"],"updatePoint":{"line":18,"column":33,"index":842},"line":18,"code":"    it('provides default rotation', function () {\n      expect(view.getRotation()).to.be(0);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly handles max resolution constraint","suites":["ol/View","parameter initialization with resolution/zoom constraints"],"updatePoint":{"line":23,"column":51,"index":1053},"line":23,"code":"    it('correctly handles max resolution constraint', function () {\n      const view = new View({\n        maxResolution: 1000,\n        resolution: 1200\n      });\n      view.setViewportSize();\n      expect(view.getResolution()).to.eql(1000);\n      expect(view.targetResolution_).to.eql(1000);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly handles min resolution constraint","suites":["ol/View","parameter initialization with resolution/zoom constraints"],"updatePoint":{"line":32,"column":51,"index":1353},"line":32,"code":"    it('correctly handles min resolution constraint', function () {\n      const view = new View({\n        maxResolution: 1024,\n        minResolution: 128,\n        resolution: 50\n      });\n      view.setViewportSize();\n      expect(view.getResolution()).to.eql(128);\n      expect(view.targetResolution_).to.eql(128);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly handles resolutions array constraint","suites":["ol/View","parameter initialization with resolution/zoom constraints"],"updatePoint":{"line":42,"column":54,"index":1680},"line":42,"code":"    it('correctly handles resolutions array constraint', function () {\n      let view = new View({\n        resolutions: [1024, 512, 256, 128, 64, 32],\n        resolution: 1200\n      });\n      view.setViewportSize();\n      expect(view.getResolution()).to.eql(1024);\n      expect(view.targetResolution_).to.eql(1024);\n      view = new View({\n        resolutions: [1024, 512, 256, 128, 64, 32],\n        resolution: 10\n      });\n      view.setViewportSize();\n      expect(view.getResolution()).to.eql(32);\n      expect(view.targetResolution_).to.eql(32);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly handles min zoom constraint","suites":["ol/View","parameter initialization with resolution/zoom constraints"],"updatePoint":{"line":58,"column":45,"index":2230},"line":58,"code":"    it('correctly handles min zoom constraint', function () {\n      const view = new View({\n        minZoom: 3,\n        zoom: 2\n      });\n      view.setViewportSize();\n      expect(view.getZoom()).to.eql(3);\n      expect(view.targetResolution_).to.eql(view.getMaxResolution());\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly handles max zoom constraint","suites":["ol/View","parameter initialization with resolution/zoom constraints"],"updatePoint":{"line":67,"column":45,"index":2516},"line":67,"code":"    it('correctly handles max zoom constraint', function () {\n      const view = new View({\n        maxZoom: 4,\n        zoom: 5\n      });\n      view.setViewportSize();\n      expect(view.getZoom()).to.eql(4);\n      expect(view.targetResolution_).to.eql(view.getMaxResolution() / Math.pow(2, 4));\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly handles extent constraint","suites":["ol/View","parameter initialization with resolution/zoom constraints"],"updatePoint":{"line":76,"column":43,"index":2817},"line":76,"code":"    it('correctly handles extent constraint', function () {\n      // default viewport size is 100x100\n      const view = new View({\n        extent: [0, 0, 50, 50],\n        resolution: 1\n      });\n      view.setViewportSize();\n      expect(view.getResolution()).to.eql(0.5);\n      expect(view.targetResolution_).to.eql(0.5);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives a correct center constraint function","suites":["ol/View","create constraints","create center constraint","with no options"],"updatePoint":{"line":90,"column":54,"index":3316},"line":90,"code":"        it('gives a correct center constraint function', function () {\n          const options = {};\n          const size = [512, 256];\n          const resolution = 1e5;\n          const fn = createCenterConstraint(options);\n          expect(fn([0, 0], resolution, size)).to.eql([0, 0]);\n          expect(fn([42, -100], resolution, size)).to.eql([42, -100]);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"disallows going north off the world","suites":["ol/View","create constraints","create center constraint","panning off the edge of the world"],"updatePoint":{"line":100,"column":47,"index":3755},"line":100,"code":"        it('disallows going north off the world', function () {\n          const options = {\n            projection: 'EPSG:4326'\n          };\n          const size = [360, 180];\n          const resolution = 0.5;\n          const fn = createCenterConstraint(options);\n          expect(fn([0, 0], resolution, size)).to.eql([0, 0]);\n          expect(fn([0, 60], resolution, size)).to.eql([0, 45]);\n          expect(fn([180, 60], resolution, size)).to.eql([180, 45]);\n          expect(fn([-180, 60], resolution, size)).to.eql([-180, 45]);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"disallows going south off the world","suites":["ol/View","create constraints","create center constraint","panning off the edge of the world"],"updatePoint":{"line":112,"column":47,"index":4299},"line":112,"code":"        it('disallows going south off the world', function () {\n          const options = {\n            projection: 'EPSG:4326'\n          };\n          const size = [360, 180];\n          const resolution = 0.5;\n          const fn = createCenterConstraint(options);\n          expect(fn([0, 0], resolution, size)).to.eql([0, 0]);\n          expect(fn([0, -60], resolution, size)).to.eql([0, -45]);\n          expect(fn([180, -60], resolution, size)).to.eql([180, -45]);\n          expect(fn([-180, -60], resolution, size)).to.eql([-180, -45]);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives a correct center constraint function","suites":["ol/View","create constraints","create center constraint","with multiWorld: true"],"updatePoint":{"line":126,"column":54,"index":4920},"line":126,"code":"        it('gives a correct center constraint function', function () {\n          const options = {\n            multiWorld: true\n          };\n          const size = [512, 256];\n          const resolution = 1e5;\n          const fn = createCenterConstraint(options);\n          expect(fn([0, 0], resolution, size)).to.eql([0, 0]);\n          expect(fn([42, -100], resolution, size)).to.eql([42, -100]);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives a correct center constraint function","suites":["ol/View","create constraints","create center constraint","with extent option and center only"],"updatePoint":{"line":138,"column":54,"index":5407},"line":138,"code":"        it('gives a correct center constraint function', function () {\n          const options = {\n            extent: [0, 0, 1, 1],\n            constrainOnlyCenter: true\n          };\n          const fn = createCenterConstraint(options);\n          expect(fn([0, 0])).to.eql([0, 0]);\n          expect(fn([-10, 0])).to.eql([0, 0]);\n          expect(fn([100, 100])).to.eql([1, 1]);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives a correct center constraint function","suites":["ol/View","create constraints","create center constraint","with extent option"],"updatePoint":{"line":150,"column":54,"index":5859},"line":150,"code":"        it('gives a correct center constraint function', function () {\n          const options = {\n            extent: [0, 0, 1, 1]\n          };\n          const fn = createCenterConstraint(options);\n          const res = 1;\n          const size = [0.15, 0.1];\n          expect(fn([0, 0], res, size)).to.eql([0.075, 0.05]);\n          expect(fn([0.5, 0.5], res, size)).to.eql([0.5, 0.5]);\n          expect(fn([10, 10], res, size)).to.eql([0.925, 0.95]);\n          const overshootCenter = fn([10, 10], res, size, true);\n          expect(overshootCenter[0] > 0.925).to.eql(true);\n          expect(overshootCenter[1] > 0.95).to.eql(true);\n          expect(overshootCenter[0] < 9).to.eql(true);\n          expect(overshootCenter[1] < 9).to.eql(true);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives a correct resolution constraint function","suites":["ol/View","create constraints","create resolution constraint","with no options"],"updatePoint":{"line":171,"column":58,"index":6777},"line":171,"code":"        it('gives a correct resolution constraint function', function () {\n          const options = {};\n          const fn = createResolutionConstraint(options).constraint;\n          expect(fn(156543.03392804097, 0, size)).to.roughlyEqual(156543.03392804097, 1e-9);\n          expect(fn(78271.51696402048, 0, size)).to.roughlyEqual(78271.51696402048, 1e-10);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives a correct resolution constraint function","suites":["ol/View","create constraints","create resolution constraint","with maxResolution, maxZoom, and zoomFactor options"],"updatePoint":{"line":180,"column":58,"index":7275},"line":180,"code":"        it('gives a correct resolution constraint function', function () {\n          const options = {\n            maxResolution: 81,\n            maxZoom: 3,\n            zoomFactor: 3\n          };\n          const info = createResolutionConstraint(options);\n          const maxResolution = info.maxResolution;\n          expect(maxResolution).to.eql(81);\n          const minResolution = info.minResolution;\n          expect(minResolution).to.eql(3);\n          const fn = info.constraint;\n          expect(fn(82, 0, size)).to.eql(81);\n          expect(fn(81, 0, size)).to.eql(81);\n          expect(fn(27, 0, size)).to.eql(27);\n          expect(fn(9, 0, size)).to.eql(9);\n          expect(fn(3, 0, size)).to.eql(3);\n          expect(fn(2, 0, size)).to.eql(3);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives a correct resolution constraint function","suites":["ol/View","create constraints","create resolution constraint","with resolutions"],"updatePoint":{"line":202,"column":58,"index":8135},"line":202,"code":"        it('gives a correct resolution constraint function', function () {\n          const options = {\n            resolutions: [97, 76, 65, 54, 0.45]\n          };\n          const info = createResolutionConstraint(options);\n          const maxResolution = info.maxResolution;\n          expect(maxResolution).to.eql(97);\n          const minResolution = info.minResolution;\n          expect(minResolution).to.eql(0.45);\n          const fn = info.constraint;\n          expect(fn(97, 0, size)).to.eql(97);\n          expect(fn(76, 0, size)).to.eql(76);\n          expect(fn(65, 0, size)).to.eql(65);\n          expect(fn(54, 0, size)).to.eql(54);\n          expect(fn(0.45, 0, size)).to.eql(0.45);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works with only maxZoom","suites":["ol/View","create constraints","create resolution constraint","with zoom related options"],"updatePoint":{"line":225,"column":35,"index":9082},"line":225,"code":"        it('works with only maxZoom', function () {\n          const maxZoom = 10;\n          const constraint = getConstraint({\n            maxZoom: maxZoom\n          });\n          expect(constraint(defaultMaxRes, 0, size)).to.roughlyEqual(defaultMaxRes, 1e-9);\n          expect(constraint(0, 0, size)).to.roughlyEqual(defaultMaxRes / Math.pow(2, maxZoom), 1e-9);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works with only minZoom","suites":["ol/View","create constraints","create resolution constraint","with zoom related options"],"updatePoint":{"line":233,"column":35,"index":9457},"line":233,"code":"        it('works with only minZoom', function () {\n          const minZoom = 5;\n          const constraint = getConstraint({\n            minZoom: minZoom\n          });\n          expect(constraint(defaultMaxRes, 0, size)).to.roughlyEqual(defaultMaxRes / Math.pow(2, minZoom), 1e-9);\n          expect(constraint(0, 0, size)).to.roughlyEqual(defaultMaxRes / Math.pow(2, 28), 1e-9);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works with maxZoom and minZoom","suites":["ol/View","create constraints","create resolution constraint","with zoom related options"],"updatePoint":{"line":241,"column":42,"index":9856},"line":241,"code":"        it('works with maxZoom and minZoom', function () {\n          const minZoom = 2;\n          const maxZoom = 11;\n          const constraint = getConstraint({\n            minZoom: minZoom,\n            maxZoom: maxZoom\n          });\n          expect(constraint(defaultMaxRes, 0, size)).to.roughlyEqual(defaultMaxRes / Math.pow(2, minZoom), 1e-9);\n          expect(constraint(0, 0, size)).to.roughlyEqual(defaultMaxRes / Math.pow(2, maxZoom), 1e-9);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works with maxZoom, minZoom, and zoomFactor","suites":["ol/View","create constraints","create resolution constraint","with zoom related options"],"updatePoint":{"line":251,"column":55,"index":10333},"line":251,"code":"        it('works with maxZoom, minZoom, and zoomFactor', function () {\n          const minZoom = 4;\n          const maxZoom = 8;\n          const zoomFactor = 3;\n          const constraint = getConstraint({\n            minZoom: minZoom,\n            maxZoom: maxZoom,\n            zoomFactor: zoomFactor\n          });\n          expect(constraint(defaultMaxRes, 0, size)).to.roughlyEqual(defaultMaxRes / Math.pow(zoomFactor, minZoom), 1e-9);\n          expect(constraint(0, 0, size)).to.roughlyEqual(defaultMaxRes / Math.pow(zoomFactor, maxZoom), 1e-9);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works with only maxResolution","suites":["ol/View","create constraints","create resolution constraint","with resolution related options"],"updatePoint":{"line":270,"column":41,"index":11155},"line":270,"code":"        it('works with only maxResolution', function () {\n          const maxResolution = 10e6;\n          const constraint = getConstraint({\n            multiWorld: true,\n            maxResolution: maxResolution\n          });\n          expect(constraint(maxResolution * 3, 0, size)).to.roughlyEqual(maxResolution, 1e-9);\n          const minResolution = constraint(0, 0, size);\n          const defaultMinRes = defaultMaxRes / Math.pow(2, 28);\n          expect(minResolution).to.be.greaterThan(defaultMinRes);\n          expect(minResolution / defaultMinRes).to.be.lessThan(2);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works with only minResolution","suites":["ol/View","create constraints","create resolution constraint","with resolution related options"],"updatePoint":{"line":282,"column":41,"index":11742},"line":282,"code":"        it('works with only minResolution', function () {\n          const minResolution = 100;\n          const constraint = getConstraint({\n            minResolution: minResolution\n          });\n          expect(constraint(defaultMaxRes, 0, size)).to.roughlyEqual(defaultMaxRes, 1e-9);\n          const constrainedMinRes = constraint(0, 0, size);\n          expect(constrainedMinRes).to.be.greaterThan(minResolution);\n          expect(constrainedMinRes / minResolution).to.be.lessThan(2);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works with minResolution and maxResolution","suites":["ol/View","create constraints","create resolution constraint","with resolution related options"],"updatePoint":{"line":292,"column":54,"index":12254},"line":292,"code":"        it('works with minResolution and maxResolution', function () {\n          const constraint = getConstraint({\n            maxResolution: 500,\n            minResolution: 100,\n            constrainResolution: true\n          });\n          expect(constraint(600, 0, size)).to.be(500);\n          expect(constraint(500, 0, size)).to.be(500);\n          expect(constraint(400, 0, size)).to.be(500);\n          expect(constraint(300, 0, size)).to.be(250);\n          expect(constraint(200, 0, size)).to.be(250);\n          expect(constraint(100, 0, size)).to.be(125);\n          expect(constraint(0, 0, size)).to.be(125);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"accepts minResolution, maxResolution, and zoomFactor","suites":["ol/View","create constraints","create resolution constraint","with resolution related options"],"updatePoint":{"line":306,"column":64,"index":12891},"line":306,"code":"        it('accepts minResolution, maxResolution, and zoomFactor', function () {\n          const constraint = getConstraint({\n            maxResolution: 500,\n            minResolution: 1,\n            zoomFactor: 10,\n            constrainResolution: true\n          });\n          expect(constraint(1000, 0, size)).to.be(500);\n          expect(constraint(500, 0, size)).to.be(500);\n          expect(constraint(100, 0, size)).to.be(50);\n          expect(constraint(50, 0, size)).to.be(50);\n          expect(constraint(10, 0, size)).to.be(5);\n          expect(constraint(1, 0, size)).to.be(5);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"accepts extent and uses the smallest value","suites":["ol/View","create constraints","create resolution constraint","with resolution related options"],"updatePoint":{"line":320,"column":54,"index":13482},"line":320,"code":"        it('accepts extent and uses the smallest value', function () {\n          const constraint = getConstraint({\n            extent: [0, 0, 4000, 6000]\n          });\n          expect(constraint(1000, 0, size)).to.be(20);\n          expect(constraint(500, 0, size)).to.be(20);\n          expect(constraint(100, 0, size)).to.be(20);\n          expect(constraint(50, 0, size)).to.be(20);\n          expect(constraint(10, 0, size)).to.be(10);\n          expect(constraint(1, 0, size)).to.be(1);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"accepts extent and showFullExtent and uses the larger value","suites":["ol/View","create constraints","create resolution constraint","with resolution related options"],"updatePoint":{"line":331,"column":71,"index":14000},"line":331,"code":"        it('accepts extent and showFullExtent and uses the larger value', function () {\n          const constraint = getConstraint({\n            extent: [0, 0, 4000, 6000],\n            showFullExtent: true\n          });\n          expect(constraint(1000, 0, size)).to.be(30);\n          expect(constraint(500, 0, size)).to.be(30);\n          expect(constraint(100, 0, size)).to.be(30);\n          expect(constraint(50, 0, size)).to.be(30);\n          expect(constraint(10, 0, size)).to.be(10);\n          expect(constraint(1, 0, size)).to.be(1);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"respects maxResolution over minZoom","suites":["ol/View","create constraints","create resolution constraint","overspecified options (prefers resolution)"],"updatePoint":{"line":350,"column":47,"index":14813},"line":350,"code":"        it('respects maxResolution over minZoom', function () {\n          const maxResolution = 10e6;\n          const minZoom = 8;\n          const constraint = getConstraint({\n            multiWorld: true,\n            maxResolution: maxResolution,\n            minZoom: minZoom\n          });\n          expect(constraint(maxResolution * 3, 0, size)).to.roughlyEqual(maxResolution, 1e-9);\n          const minResolution = constraint(0, 0, size);\n          const defaultMinRes = defaultMaxRes / Math.pow(2, 28);\n          expect(minResolution).to.be.greaterThan(defaultMinRes);\n          expect(minResolution / defaultMinRes).to.be.lessThan(2);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"respects minResolution over maxZoom","suites":["ol/View","create constraints","create resolution constraint","overspecified options (prefers resolution)"],"updatePoint":{"line":364,"column":47,"index":15465},"line":364,"code":"        it('respects minResolution over maxZoom', function () {\n          const minResolution = 100;\n          const maxZoom = 50;\n          const constraint = getConstraint({\n            minResolution: minResolution,\n            maxZoom: maxZoom\n          });\n          expect(constraint(defaultMaxRes, 0, size)).to.roughlyEqual(defaultMaxRes, 1e-9);\n          const constrainedMinRes = constraint(0, 0, size);\n          expect(constrainedMinRes).to.be.greaterThan(minResolution);\n          expect(constrainedMinRes / minResolution).to.be.lessThan(2);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"are disabled by default","suites":["ol/View","create constraints","create resolution constraint","Map views that show more than one world"],"updatePoint":{"line":385,"column":35,"index":16410},"line":385,"code":"        it('are disabled by default', function () {\n          const fn = getConstraint({});\n          expect(fn(defaultMaxRes, 0, size)).to.be(defaultMaxRes / 2);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"can be enabled by setting multiWorld to true","suites":["ol/View","create constraints","create resolution constraint","Map views that show more than one world"],"updatePoint":{"line":389,"column":56,"index":16606},"line":389,"code":"        it('can be enabled by setting multiWorld to true', function () {\n          const fn = getConstraint({\n            multiWorld: true\n          });\n          expect(fn(defaultMaxRes, 0, size)).to.be(defaultMaxRes);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"disabled, with constrainResolution","suites":["ol/View","create constraints","create resolution constraint","Map views that show more than one world"],"updatePoint":{"line":395,"column":46,"index":16828},"line":395,"code":"        it('disabled, with constrainResolution', function () {\n          const fn = getConstraint({\n            maxResolution: maxResolution,\n            constrainResolution: true\n          });\n          expect(fn(defaultMaxRes, 0, size)).to.be(maxResolution / 4);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"enabled, with constrainResolution","suites":["ol/View","create constraints","create resolution constraint","Map views that show more than one world"],"updatePoint":{"line":402,"column":45,"index":17104},"line":402,"code":"        it('enabled, with constrainResolution', function () {\n          const fn = getConstraint({\n            maxResolution: maxResolution,\n            constrainResolution: true,\n            multiWorld: true\n          });\n          expect(fn(defaultMaxRes, 0, size)).to.be(maxResolution);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"disabled, with resolutions array","suites":["ol/View","create constraints","create resolution constraint","Map views that show more than one world"],"updatePoint":{"line":410,"column":44,"index":17405},"line":410,"code":"        it('disabled, with resolutions array', function () {\n          const fn = getConstraint({\n            resolutions: resolutions\n          });\n          expect(fn(defaultMaxRes, 0, size)).to.be(defaultMaxRes / 2);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"enabled, with resolutions array","suites":["ol/View","create constraints","create resolution constraint","Map views that show more than one world"],"updatePoint":{"line":416,"column":43,"index":17636},"line":416,"code":"        it('enabled, with resolutions array', function () {\n          const fn = getConstraint({\n            resolutions: resolutions,\n            multiWorld: true\n          });\n          expect(fn(defaultMaxRes, 0, size)).to.be(defaultMaxRes);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"disabled, with resolutions array and constrainResolution","suites":["ol/View","create constraints","create resolution constraint","Map views that show more than one world"],"updatePoint":{"line":423,"column":68,"index":17918},"line":423,"code":"        it('disabled, with resolutions array and constrainResolution', function () {\n          const fn = getConstraint({\n            resolutions: resolutions,\n            constrainResolution: true\n          });\n          expect(fn(defaultMaxRes, 0, size)).to.be(resolutions[2]);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"enabled, with resolutions array and constrainResolution","suites":["ol/View","create constraints","create resolution constraint","Map views that show more than one world"],"updatePoint":{"line":430,"column":67,"index":18209},"line":430,"code":"        it('enabled, with resolutions array and constrainResolution', function () {\n          const fn = getConstraint({\n            resolutions: resolutions,\n            constrainResolution: true,\n            multiWorld: true\n          });\n          expect(fn(defaultMaxRes, 0, size)).to.be(resolutions[0]);\n        });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives a correct rotation constraint function","suites":["ol/View","create constraints","create rotation constraint"],"updatePoint":{"line":441,"column":54,"index":18592},"line":441,"code":"      it('gives a correct rotation constraint function', function () {\n        const options = {};\n        const fn = createRotationConstraint(options);\n        expect(fn(0.01, 0)).to.eql(0);\n        expect(fn(0.15, 0)).to.eql(0.15);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"does not change center when set to undefined","suites":["ol/View","#setResolution()"],"updatePoint":{"line":450,"column":52,"index":18893},"line":450,"code":"    it('does not change center when set to undefined', function () {\n      const center = [1, 1];\n      const view = new View({\n        center: center.slice(),\n        resolution: 1\n      });\n      view.setResolution(undefined);\n      expect(view.getCenter()).to.eql(center);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"allows setting undefined center","suites":["ol/View","#setCenter()"],"updatePoint":{"line":461,"column":39,"index":19211},"line":461,"code":"    it('allows setting undefined center', function () {\n      const view = new View({\n        center: [0, 0],\n        resolution: 1\n      });\n      view.setCenter(undefined);\n      expect(view.getCenter()).to.be(undefined);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes a view hint","suites":["ol/View","#setHint()"],"updatePoint":{"line":471,"column":27,"index":19476},"line":471,"code":"    it('changes a view hint', function () {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      expect(view.getHints()).to.eql([0, 0]);\n      expect(view.getInteracting()).to.eql(false);\n      view.setHint(ViewHint.INTERACTING, 1);\n      expect(view.getHints()).to.eql([0, 1]);\n      expect(view.getInteracting()).to.eql(true);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"triggers the change event","suites":["ol/View","#setHint()"],"updatePoint":{"line":482,"column":33,"index":19852},"line":482,"code":"    it('triggers the change event', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      view.on('change', function () {\n        expect(view.getHints()).to.eql([0, 1]);\n        expect(view.getInteracting()).to.eql(true);\n        done();\n      });\n      view.setHint(ViewHint.INTERACTING, 1);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"applies minZoom to constructor options","suites":["ol/View","#getUpdatedOptions_()"],"updatePoint":{"line":496,"column":46,"index":20272},"line":496,"code":"    it('applies minZoom to constructor options', function () {\n      const view = new View({\n        center: [0, 0],\n        minZoom: 2,\n        zoom: 10\n      });\n      const options = view.getUpdatedOptions_({\n        minZoom: 3\n      });\n      expect(options.center).to.eql([0, 0]);\n      expect(options.minZoom).to.eql(3);\n      expect(options.zoom).to.eql(10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns the current properties with getProperties()","suites":["ol/View","#getUpdatedOptions_()"],"updatePoint":{"line":509,"column":59,"index":20659},"line":509,"code":"    it('returns the current properties with getProperties()', function () {\n      const view = new View({\n        center: [0, 0],\n        minZoom: 2,\n        zoom: 10\n      });\n      view.setZoom(8);\n      view.setCenter([1, 2]);\n      view.setRotation(1);\n      const options = view.getProperties();\n      expect(options.minZoom).to.eql(2);\n      expect(options.zoom).to.eql(8);\n      expect(options.center).to.eql([1, 2]);\n      expect(options.rotation).to.eql(1);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"applies the current zoom","suites":["ol/View","#getUpdatedOptions_()"],"updatePoint":{"line":524,"column":32,"index":21107},"line":524,"code":"    it('applies the current zoom', function () {\n      const view = new View({\n        center: [0, 0],\n        zoom: 10\n      });\n      view.setZoom(8);\n      const options = view.getUpdatedOptions_();\n      expect(options.center).to.eql([0, 0]);\n      expect(options.zoom).to.eql(8);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"applies the current resolution if resolution was originally supplied","suites":["ol/View","#getUpdatedOptions_()"],"updatePoint":{"line":534,"column":76,"index":21444},"line":534,"code":"    it('applies the current resolution if resolution was originally supplied', function () {\n      const view = new View({\n        center: [0, 0],\n        maxResolution: 2000,\n        resolution: 1000\n      });\n      view.setResolution(500);\n      const options = view.getUpdatedOptions_();\n      expect(options.center).to.eql([0, 0]);\n      expect(options.resolution).to.eql(500);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"applies the current center","suites":["ol/View","#getUpdatedOptions_()"],"updatePoint":{"line":545,"column":34,"index":21792},"line":545,"code":"    it('applies the current center', function () {\n      const view = new View({\n        center: [0, 0],\n        zoom: 10\n      });\n      view.setCenter([1, 2]);\n      const options = view.getUpdatedOptions_();\n      expect(options.center).to.eql([1, 2]);\n      expect(options.zoom).to.eql(10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"applies the current rotation","suites":["ol/View","#getUpdatedOptions_()"],"updatePoint":{"line":555,"column":36,"index":22097},"line":555,"code":"    it('applies the current rotation', function () {\n      const view = new View({\n        center: [0, 0],\n        zoom: 10\n      });\n      view.setRotation(Math.PI / 6);\n      const options = view.getUpdatedOptions_();\n      expect(options.center).to.eql([0, 0]);\n      expect(options.zoom).to.eql(10);\n      expect(options.rotation).to.eql(Math.PI / 6);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"can be called to animate view properties","suites":["ol/View","#animate()"],"updatePoint":{"line":582,"column":48,"index":23071},"line":582,"code":"    it('can be called to animate view properties', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 5\n      });\n      view.animate({\n        zoom: 4,\n        duration: 25\n      }, function (complete) {\n        expect(complete).to.be(true);\n        expect(isNaN(view.nextResolution_)).to.be(true);\n        expect(view.getCenter()).to.eql([0, 0]);\n        expect(view.getZoom()).to.eql(4);\n        expect(view.getAnimating()).to.be(false);\n        done();\n      });\n      expect(view.getAnimating()).to.eql(true);\n      expect(isNaN(view.nextResolution_)).to.be(false);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"allows duration to be zero","suites":["ol/View","#animate()"],"updatePoint":{"line":601,"column":34,"index":23670},"line":601,"code":"    it('allows duration to be zero', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 5\n      });\n      view.animate({\n        zoom: 4,\n        duration: 0\n      }, function (complete) {\n        expect(complete).to.be(true);\n        expect(view.getCenter()).to.eql([0, 0]);\n        expect(view.getZoom()).to.eql(4);\n        expect(view.getAnimating()).to.eql(false);\n        done();\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"immediately completes for no-op animations","suites":["ol/View","#animate()"],"updatePoint":{"line":617,"column":50,"index":24124},"line":617,"code":"    it('immediately completes for no-op animations', function () {\n      const view = new View({\n        center: [0, 0],\n        zoom: 5\n      });\n      view.animate({\n        zoom: 5,\n        center: [0, 0],\n        duration: 25\n      });\n      expect(view.getAnimating()).to.eql(false);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"immediately completes if view is not defined before","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":630,"column":61,"index":24512},"line":630,"code":"      it('immediately completes if view is not defined before', function () {\n        const view = new View();\n        const center = [1, 2];\n        const zoom = 3;\n        const rotation = 0.4;\n        view.animate({\n          zoom: zoom,\n          center: center,\n          rotation: rotation,\n          duration: 25\n        });\n        expect(view.getAnimating()).to.eql(false);\n        expect(view.getCenter()).to.eql(center);\n        expect(view.getZoom()).to.eql(zoom);\n        expect(view.getRotation()).to.eql(rotation);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"prefers zoom over resolution","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":646,"column":38,"index":25029},"line":646,"code":"      it('prefers zoom over resolution', function () {\n        const view = new View();\n        const zoom = 1;\n        view.animate({\n          center: [0, 0],\n          zoom: zoom,\n          resolution: 1\n        });\n        expect(view.getZoom()).to.eql(zoom);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"uses all animation steps to get final state","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":656,"column":53,"index":25318},"line":656,"code":"      it('uses all animation steps to get final state', function () {\n        const view = new View();\n        const center = [1, 2];\n        const resolution = 3;\n        const rotation = 0.4;\n        view.animate({\n          center: [2, 3]\n        }, {\n          center: center,\n          rotation: 4\n        }, {\n          rotation: rotation\n        }, {\n          resolution: resolution\n        });\n        expect(view.getAnimating()).to.be(false);\n        expect(view.getCenter()).to.eql(center);\n        expect(view.getResolution()).to.be(resolution);\n        expect(view.getRotation()).to.be(rotation);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"animates remaining steps after it becomes defined","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":676,"column":59,"index":25944},"line":676,"code":"      it('animates remaining steps after it becomes defined', function () {\n        const view = new View();\n        const center = [1, 2];\n        const resolution = 3;\n        view.animate({\n          center: [2, 3]\n        }, {\n          resolution: resolution,\n          center: center\n        }, {\n          rotation: 2,\n          duration: 25\n        });\n        expect(view.getAnimating()).to.be(true);\n        expect(view.getCenter()).to.eql(center);\n        expect(view.getResolution()).to.be(resolution);\n        expect(view.getRotation()).to.roughlyEqual(0, 0.02);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"prefers zoom over resolution","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":695,"column":36,"index":26515},"line":695,"code":"    it('prefers zoom over resolution', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 5\n      });\n      view.animate({\n        zoom: 4,\n        resolution: view.getResolution() * 3,\n        duration: 25\n      }, function (complete) {\n        expect(complete).to.be(true);\n        expect(view.getZoom()).to.be(4);\n        done();\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"avoids going under minResolution","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":710,"column":40,"index":26905},"line":710,"code":"    it('avoids going under minResolution', function (done) {\n      const maxZoom = 14;\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        maxZoom: maxZoom\n      });\n      const minResolution = view.getMinResolution();\n      view.animate({\n        resolution: minResolution,\n        duration: 10\n      }, function (complete) {\n        expect(complete).to.be(true);\n        expect(view.getResolution()).to.be(minResolution);\n        expect(view.getZoom()).to.be(maxZoom);\n        done();\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"takes the shortest arc to the target rotation","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":728,"column":53,"index":27450},"line":728,"code":"    it('takes the shortest arc to the target rotation', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: Math.PI / 180 * 1\n      });\n      view.animate({\n        rotation: Math.PI / 180 * 359,\n        duration: 0\n      }, function (complete) {\n        expect(complete).to.be(true);\n        expect(view.getRotation()).to.roughlyEqual(Math.PI / 180 * -1, 1e-12);\n        done();\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"normalizes rotation to angles between -180 and 180 degrees after the anmiation","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":743,"column":86,"index":27936},"line":743,"code":"    it('normalizes rotation to angles between -180 and 180 degrees after the anmiation', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: Math.PI / 180 * 1\n      });\n      view.animate({\n        rotation: Math.PI / 180 * -181,\n        duration: 0\n      }, function (complete) {\n        expect(complete).to.be(true);\n        expect(view.getRotation()).to.roughlyEqual(Math.PI / 180 * 179, 1e-12);\n        done();\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"calls a callback when animation completes","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":758,"column":49,"index":28387},"line":758,"code":"    it('calls a callback when animation completes', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      view.animate({\n        zoom: 1,\n        duration: 25\n      }, function (complete) {\n        expect(complete).to.be(true);\n        done();\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"allows the callback to trigger another animation","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":771,"column":56,"index":28706},"line":771,"code":"    it('allows the callback to trigger another animation', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      function firstCallback(complete) {\n        expect(complete).to.be(true);\n        view.animate({\n          zoom: 2,\n          duration: 10\n        }, secondCallback);\n      }\n      function secondCallback(complete) {\n        expect(complete).to.be(true);\n        done();\n      }\n      view.animate({\n        zoom: 1,\n        duration: 25\n      }, firstCallback);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"calls callback with false when animation is interrupted","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":792,"column":63,"index":29246},"line":792,"code":"    it('calls callback with false when animation is interrupted', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      view.animate({\n        zoom: 1,\n        duration: 25\n      }, function (complete) {\n        expect(complete).to.be(false);\n        done();\n      });\n      view.setCenter([1, 2]); // interrupt the animation\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"calls a callback even if animation is a no-op","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":807,"column":53,"index":29621},"line":807,"code":"    it('calls a callback even if animation is a no-op', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      view.animate({\n        zoom: 0,\n        duration: 25\n      }, function (complete) {\n        expect(complete).to.be(true);\n        done();\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"calls a callback if view is not defined before","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":820,"column":54,"index":29938},"line":820,"code":"    it('calls a callback if view is not defined before', function (done) {\n      const view = new View();\n      view.animate({\n        zoom: 10,\n        duration: 25\n      }, function (complete) {\n        expect(view.getZoom()).to.be(10);\n        expect(complete).to.be(true);\n        done();\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"can run multiple animations in series","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":831,"column":45,"index":30240},"line":831,"code":"    it('can run multiple animations in series', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      let checked = false;\n      view.animate({\n        zoom: 2,\n        duration: 25\n      }, {\n        center: [10, 10],\n        duration: 25\n      }, function (complete) {\n        expect(checked).to.be(true);\n        expect(view.getZoom()).to.roughlyEqual(2, 1e-5);\n        expect(view.getCenter()).to.eql([10, 10]);\n        expect(complete).to.be(true);\n        done();\n      });\n      setTimeout(function () {\n        expect(view.getCenter()).to.eql([0, 0]);\n        checked = true;\n      }, 10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"properly sets the ANIMATING hint","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":855,"column":40,"index":30891},"line":855,"code":"    it('properly sets the ANIMATING hint', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: 0\n      });\n      let count = 3;\n      function decrement() {\n        --count;\n        if (count === 0) {\n          expect(view.getHints()[ViewHint.ANIMATING]).to.be(0);\n          done();\n        }\n      }\n      view.animate({\n        center: [1, 2],\n        duration: 25\n      }, decrement);\n      expect(view.getHints()[ViewHint.ANIMATING]).to.be(1);\n      view.animate({\n        zoom: 1,\n        duration: 25\n      }, decrement);\n      expect(view.getHints()[ViewHint.ANIMATING]).to.be(2);\n      view.animate({\n        rotation: Math.PI,\n        duration: 25\n      }, decrement);\n      expect(view.getHints()[ViewHint.ANIMATING]).to.be(3);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"clears the ANIMATING hint when animations are cancelled","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":885,"column":63,"index":31715},"line":885,"code":"    it('clears the ANIMATING hint when animations are cancelled', function () {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: 0\n      });\n      view.animate({\n        center: [1, 2],\n        duration: 25\n      });\n      expect(view.getHints()[ViewHint.ANIMATING]).to.be(1);\n      view.animate({\n        zoom: 1,\n        duration: 25\n      });\n      expect(view.getHints()[ViewHint.ANIMATING]).to.be(2);\n      view.animate({\n        rotation: Math.PI,\n        duration: 25\n      });\n      expect(view.getHints()[ViewHint.ANIMATING]).to.be(3);\n\n      // cancel animations\n      view.setCenter([10, 20]);\n      expect(view.getHints()[ViewHint.ANIMATING]).to.be(0);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"completes multiple staggered animations run in parallel","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":911,"column":63,"index":32428},"line":911,"code":"    it('completes multiple staggered animations run in parallel', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      let calls = 0;\n      view.animate({\n        zoom: 1,\n        duration: 25\n      }, function () {\n        ++calls;\n      });\n      setTimeout(function () {\n        expect(view.getZoom() > 0).to.be(true);\n        expect(view.getZoom() < 1).to.be(true);\n        expect(view.getAnimating()).to.be(true);\n        view.animate({\n          zoom: 2,\n          duration: 50\n        }, function () {\n          expect(calls).to.be(1);\n          expect(view.getZoom()).to.be(2);\n          expect(view.getAnimating()).to.be(false);\n          done();\n        });\n      }, 10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"completes complex animation using resolution","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":938,"column":52,"index":33158},"line":938,"code":"    it('completes complex animation using resolution', function (done) {\n      const view = new View({\n        center: [0, 0],\n        resolution: 2\n      });\n      let calls = 0;\n      function onAnimateEnd() {\n        if (calls == 2) {\n          expect(view.getAnimating()).to.be(false);\n          done();\n        }\n      }\n      view.animate({\n        center: [100, 100],\n        duration: 50\n      }, function () {\n        ++calls;\n        expect(view.getCenter()).to.eql([100, 100]);\n        onAnimateEnd();\n      });\n      view.animate({\n        resolution: 2000,\n        duration: 25\n      }, {\n        resolution: 2,\n        duration: 25\n      }, function () {\n        ++calls;\n        expect(view.getResolution()).to.be(2);\n        onAnimateEnd();\n      });\n      setTimeout(function () {\n        expect(view.getResolution() > 2).to.be(true);\n        expect(view.getResolution() < 2000).to.be(true);\n        expect(view.getAnimating()).to.be(true);\n      }, 10);\n      setTimeout(function () {\n        expect(view.getResolution() > 2).to.be(true);\n        expect(view.getResolution() < 2000).to.be(true);\n        expect(view.getAnimating()).to.be(true);\n      }, 40);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"completes even though Map#setSize is called","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":980,"column":51,"index":34342},"line":980,"code":"    it('completes even though Map#setSize is called', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      const map = new Map({\n        view\n      });\n      map.setSize([110, 90]);\n      view.animate({\n        zoom: 1,\n        duration: 25\n      }, function () {\n        expect(view.getZoom()).to.be(1);\n        done();\n      });\n      setTimeout(function () {\n        map.setSize([100, 100]);\n      }, 10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"completes even though Map#updateSize is called","suites":["ol/View","#animate()","Set final animation state if view is not defined."],"updatePoint":{"line":1000,"column":54,"index":34813},"line":1000,"code":"    it('completes even though Map#updateSize is called', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      const map = new Map({\n        view\n      });\n      view.animate({\n        zoom: 1,\n        duration: 25\n      }, function () {\n        expect(view.getZoom()).to.be(1);\n        done();\n      });\n      setTimeout(function () {\n        map.updateSize();\n      }, 10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"cancels a currently running animation","suites":["ol/View","#cancelAnimations()"],"updatePoint":{"line":1035,"column":45,"index":35845},"line":1035,"code":"    it('cancels a currently running animation', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: 0\n      });\n      view.animate({\n        rotation: 10,\n        duration: 50\n      });\n      setTimeout(function () {\n        expect(view.getAnimating()).to.be(true);\n        view.once('change', function () {\n          expect(view.getAnimating()).to.be(false);\n          done();\n        });\n        view.cancelAnimations();\n      }, 10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"cancels a multiple animations","suites":["ol/View","#cancelAnimations()"],"updatePoint":{"line":1054,"column":37,"index":36337},"line":1054,"code":"    it('cancels a multiple animations', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0,\n        rotation: 0\n      });\n      view.animate({\n        rotation: 10,\n        duration: 50\n      }, {\n        zoom: 10,\n        duration: 50\n      });\n      view.animate({\n        center: [10, 30],\n        duration: 100\n      });\n      setTimeout(function () {\n        expect(view.getAnimating()).to.be(true);\n        view.once('change', function () {\n          expect(view.getAnimating()).to.be(false);\n          done();\n        });\n        view.cancelAnimations();\n      }, 10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"calls callbacks with false to indicate animations did not complete","suites":["ol/View","#cancelAnimations()"],"updatePoint":{"line":1080,"column":74,"index":36995},"line":1080,"code":"    it('calls callbacks with false to indicate animations did not complete', function (done) {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      view.animate({\n        zoom: 10,\n        duration: 50\n      }, function (complete) {\n        expect(view.getAnimating()).to.be(false);\n        expect(complete).to.be(false);\n        done();\n      });\n      setTimeout(function () {\n        expect(view.getAnimating()).to.be(true);\n        view.cancelAnimations();\n      }, 10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns correct resolutions","suites":["ol/View","#getResolutions"],"updatePoint":{"line":1102,"column":35,"index":37589},"line":1102,"code":"    it('returns correct resolutions', function () {\n      view = new View({\n        resolutions: resolutions\n      });\n      expect(view.getResolutions()).to.be(resolutions);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns resolutions as undefined","suites":["ol/View","#getResolutions"],"updatePoint":{"line":1108,"column":40,"index":37777},"line":1108,"code":"    it('returns resolutions as undefined', function () {\n      view = new View();\n      expect(view.getResolutions()).to.be(undefined);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns correct zoom levels (with resolutions array)","suites":["ol/View","#getZoom"],"updatePoint":{"line":1120,"column":60,"index":38127},"line":1120,"code":"    it('returns correct zoom levels (with resolutions array)', function () {\n      view.setResolution(undefined);\n      expect(view.getZoom()).to.be(undefined);\n      view.setResolution(513);\n      expect(view.getZoom()).to.roughlyEqual(Math.log(1024 / 513) / Math.LN2, 1e-9);\n      view.setResolution(512);\n      expect(view.getZoom()).to.be(1);\n      view.setResolution(100);\n      expect(view.getZoom()).to.roughlyEqual(3.35614, 1e-5);\n      view.setResolution(65);\n      expect(view.getZoom()).to.roughlyEqual(3.97763, 1e-5);\n      view.setResolution(64);\n      expect(view.getZoom()).to.be(4);\n      view.setResolution(16);\n      expect(view.getZoom()).to.be(6);\n      view.setResolution(15);\n      expect(view.getZoom()).to.roughlyEqual(Math.log(1024 / 15) / Math.LN2, 1e-9);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works for resolution arrays with variable zoom factors","suites":["ol/View","#getZoom"],"updatePoint":{"line":1138,"column":62,"index":38919},"line":1138,"code":"    it('works for resolution arrays with variable zoom factors', function () {\n      const view = new View({\n        resolutions: [10, 5, 2, 1]\n      });\n      view.setZoom(1);\n      expect(view.getZoom()).to.be(1);\n      view.setZoom(1.3);\n      expect(view.getZoom()).to.be(1.3);\n      view.setZoom(2);\n      expect(view.getZoom()).to.be(2);\n      view.setZoom(2.7);\n      expect(view.getZoom()).to.be(2.7);\n      view.setZoom(3);\n      expect(view.getZoom()).to.be(3);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns correct zoom levels","suites":["ol/View","#getZoom() - constrained"],"updatePoint":{"line":1155,"column":35,"index":39431},"line":1155,"code":"    it('returns correct zoom levels', function () {\n      const view = new View({\n        minZoom: 10,\n        maxZoom: 20\n      });\n      view.setZoom(5);\n      expect(view.getZoom()).to.be(10);\n      view.setZoom(10);\n      expect(view.getZoom()).to.be(10);\n      view.setZoom(15);\n      expect(view.getZoom()).to.be(15);\n      view.setZoom(15.3);\n      expect(view.getZoom()).to.be(15.3);\n      view.setZoom(20);\n      expect(view.getZoom()).to.be(20);\n      view.setZoom(25);\n      expect(view.getZoom()).to.be(20);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"gives maxResolution precedence over minZoom","suites":["ol/View","#getZoom() - overspecified"],"updatePoint":{"line":1175,"column":51,"index":40036},"line":1175,"code":"    it('gives maxResolution precedence over minZoom', function () {\n      const view = new View({\n        maxResolution: 100,\n        minZoom: 2 // this should get ignored\n      });\n\n      view.setResolution(100);\n      expect(view.getZoom()).to.be(0);\n      view.setZoom(0);\n      expect(view.getResolution()).to.be(100);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns correct zoom levels","suites":["ol/View","#getZoomForResolution"],"updatePoint":{"line":1188,"column":35,"index":40407},"line":1188,"code":"    it('returns correct zoom levels', function () {\n      const view = new View();\n      const max = view.getMaxResolution();\n      expect(view.getZoomForResolution(max)).to.be(0);\n      expect(view.getZoomForResolution(max / 2)).to.be(1);\n      expect(view.getZoomForResolution(max / 4)).to.be(2);\n      expect(view.getZoomForResolution(2 * max)).to.be(-1);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns correct zoom levels for specifically configured resolutions","suites":["ol/View","#getZoomForResolution"],"updatePoint":{"line":1196,"column":75,"index":40814},"line":1196,"code":"    it('returns correct zoom levels for specifically configured resolutions', function () {\n      const view = new View({\n        resolutions: [10, 8, 6, 4, 2]\n      });\n      expect(view.getZoomForResolution(10)).to.be(0);\n      expect(view.getZoomForResolution(8)).to.be(1);\n      expect(view.getZoomForResolution(6)).to.be(2);\n      expect(view.getZoomForResolution(4)).to.be(3);\n      expect(view.getZoomForResolution(2)).to.be(4);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns correct zoom resolution","suites":["ol/View","#getResolutionForZoom"],"updatePoint":{"line":1208,"column":39,"index":41278},"line":1208,"code":"    it('returns correct zoom resolution', function () {\n      const view = new View();\n      const max = view.getMaxZoom();\n      const min = view.getMinZoom();\n      expect(view.getResolutionForZoom(max)).to.be(view.getMinResolution());\n      expect(view.getResolutionForZoom(max + 1)).to.be(view.getMinResolution() / 2);\n      expect(view.getResolutionForZoom(min)).to.be(view.getMaxResolution());\n      expect(view.getResolutionForZoom(min - 1)).to.be(view.getMaxResolution() * 2);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns correct zoom levels for specifically configured resolutions","suites":["ol/View","#getResolutionForZoom"],"updatePoint":{"line":1217,"column":75,"index":41807},"line":1217,"code":"    it('returns correct zoom levels for specifically configured resolutions', function () {\n      const view = new View({\n        resolutions: [10, 8, 6, 4, 2]\n      });\n      expect(view.getResolutionForZoom(-1)).to.be(10);\n      expect(view.getResolutionForZoom(0)).to.be(10);\n      expect(view.getResolutionForZoom(1)).to.be(8);\n      expect(view.getResolutionForZoom(2)).to.be(6);\n      expect(view.getResolutionForZoom(3)).to.be(4);\n      expect(view.getResolutionForZoom(4)).to.be(2);\n      expect(view.getResolutionForZoom(5)).to.be(2);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns correct zoom levels for resolutions with variable zoom levels","suites":["ol/View","#getResolutionForZoom"],"updatePoint":{"line":1229,"column":77,"index":42361},"line":1229,"code":"    it('returns correct zoom levels for resolutions with variable zoom levels', function () {\n      const view = new View({\n        resolutions: [50, 10, 5, 2.5, 1.25, 0.625]\n      });\n      expect(view.getResolutionForZoom(-1)).to.be(50);\n      expect(view.getResolutionForZoom(0)).to.be(50);\n      expect(view.getResolutionForZoom(0.5)).to.be(50 / Math.pow(5, 0.5));\n      expect(view.getResolutionForZoom(1)).to.be(10);\n      expect(view.getResolutionForZoom(2)).to.be(5);\n      expect(view.getResolutionForZoom(2.75)).to.be(5 / Math.pow(2, 0.75));\n      expect(view.getResolutionForZoom(3)).to.be(2.5);\n      expect(view.getResolutionForZoom(4)).to.be(1.25);\n      expect(view.getResolutionForZoom(5)).to.be(0.625);\n      expect(view.getResolutionForZoom(6)).to.be(0.625);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns the zoom level for the min resolution","suites":["ol/View","#getMaxZoom"],"updatePoint":{"line":1246,"column":53,"index":43168},"line":1246,"code":"    it('returns the zoom level for the min resolution', function () {\n      const view = new View();\n      expect(view.getMaxZoom()).to.be(view.getZoomForResolution(view.getMinResolution()));\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works for a view configured with a maxZoom","suites":["ol/View","#getMaxZoom"],"updatePoint":{"line":1250,"column":50,"index":43365},"line":1250,"code":"    it('works for a view configured with a maxZoom', function () {\n      const view = new View({\n        maxZoom: 10\n      });\n      expect(view.getMaxZoom()).to.be(10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns the zoom level for the max resolution","suites":["ol/View","#getMinZoom"],"updatePoint":{"line":1258,"column":53,"index":43592},"line":1258,"code":"    it('returns the zoom level for the max resolution', function () {\n      const view = new View();\n      expect(view.getMinZoom()).to.be(view.getZoomForResolution(view.getMaxResolution()));\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works for views configured with a minZoom","suites":["ol/View","#getMinZoom"],"updatePoint":{"line":1262,"column":49,"index":43788},"line":1262,"code":"    it('works for views configured with a minZoom', function () {\n      const view = new View({\n        minZoom: 3\n      });\n      expect(view.getMinZoom()).to.be(3);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes the zoom level when the level is over max zoom","suites":["ol/View","#setMaxZoom","with resolutions property in view"],"updatePoint":{"line":1271,"column":64,"index":44088},"line":1271,"code":"      it('changes the zoom level when the level is over max zoom', function () {\n        const view = new View({\n          resolutions: [100000, 50000, 25000, 12500, 6250, 3125],\n          zoom: 4\n        });\n        view.setMaxZoom(2);\n        expect(view.getZoom()).to.be(2);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes the zoom level when the level is over max zoom","suites":["ol/View","#setMaxZoom","with no resolutions property in view"],"updatePoint":{"line":1281,"column":64,"index":44451},"line":1281,"code":"      it('changes the zoom level when the level is over max zoom', function () {\n        const view = new View({\n          zoom: 4\n        });\n        view.setMaxZoom(2);\n        expect(view.getZoom()).to.be(2);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes the zoom level when the level is under min zoom","suites":["ol/View","#setMinZoom","with resolutions property in view"],"updatePoint":{"line":1292,"column":65,"index":44792},"line":1292,"code":"      it('changes the zoom level when the level is under min zoom', function () {\n        const view = new View({\n          resolutions: [100000, 50000, 25000, 12500, 6250, 3125],\n          zoom: 4\n        });\n        view.setMinZoom(5);\n        expect(view.getZoom()).to.be(5);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes the zoom level when the level is under min zoom","suites":["ol/View","#setMinZoom","with no resolutions property in view"],"updatePoint":{"line":1302,"column":65,"index":45156},"line":1302,"code":"      it('changes the zoom level when the level is under min zoom', function () {\n        const view = new View({\n          zoom: 4\n        });\n        view.setMinZoom(5);\n        expect(view.getZoom()).to.be(5);\n      });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns the expected extent","suites":["ol/View","#calculateExtent"],"updatePoint":{"line":1312,"column":35,"index":45408},"line":1312,"code":"    it('returns the expected extent', function () {\n      const view = new View({\n        resolutions: [512],\n        zoom: 0,\n        center: [0, 0]\n      });\n      const extent = view.calculateExtent([100, 200]);\n      expect(extent[0]).to.be(-25600);\n      expect(extent[1]).to.be(-51200);\n      expect(extent[2]).to.be(25600);\n      expect(extent[3]).to.be(51200);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"returns the expected extent with rotation","suites":["ol/View","#calculateExtent"],"updatePoint":{"line":1324,"column":49,"index":45799},"line":1324,"code":"    it('returns the expected extent with rotation', function () {\n      const view = new View({\n        resolutions: [512],\n        zoom: 0,\n        center: [0, 0],\n        rotation: Math.PI / 2\n      });\n      const extent = view.calculateExtent([100, 200]);\n      expect(extent[0]).to.roughlyEqual(-51200, 1e-9);\n      expect(extent[1]).to.roughlyEqual(-25600, 1e-9);\n      expect(extent[2]).to.roughlyEqual(51200, 1e-9);\n      expect(extent[3]).to.roughlyEqual(25600, 1e-9);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works with a view padding","suites":["ol/View","#calculateExtent"],"updatePoint":{"line":1337,"column":33,"index":46269},"line":1337,"code":"    it('works with a view padding', function () {\n      const view = new View({\n        resolutions: [1],\n        zoom: 0,\n        center: [0, 0],\n        padding: [10, 20, 30, 40]\n      });\n      let extent = view.calculateExtent();\n      expect(extent).to.eql([-20, -30, 20, 30]);\n      view.padding = [0, 0, 0, 0];\n      extent = view.calculateExtent();\n      expect(extent).to.eql([-60, -60, 40, 40]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly initializes the viewport size","suites":["ol/View","#getViewportSize_()"],"updatePoint":{"line":1366,"column":47,"index":47128},"line":1366,"code":"    it('correctly initializes the viewport size', function () {\n      const size = map.getView().getViewportSize_();\n      expect(size).to.eql([200, 150]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly updates the viewport size","suites":["ol/View","#getViewportSize_()"],"updatePoint":{"line":1370,"column":43,"index":47288},"line":1370,"code":"    it('correctly updates the viewport size', function () {\n      target.style.width = '300px';\n      target.style.height = '200px';\n      map.updateSize();\n      const size = map.getView().getViewportSize_();\n      expect(size).to.eql([300, 200]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"calculates the size correctly","suites":["ol/View","#getViewportSize_()"],"updatePoint":{"line":1377,"column":37,"index":47539},"line":1377,"code":"    it('calculates the size correctly', function () {\n      let size = map.getView().getViewportSize_(Math.PI / 2);\n      expect(size[0]).to.roughlyEqual(150, 1e-9);\n      expect(size[1]).to.roughlyEqual(200, 1e-9);\n      size = map.getView().getViewportSize_(Math.PI);\n      expect(size[0]).to.roughlyEqual(200, 1e-9);\n      expect(size[1]).to.roughlyEqual(150, 1e-9);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"same as getViewportSize_ when no padding is set","suites":["ol/View","#getViewportSizeMinusPadding_()"],"updatePoint":{"line":1401,"column":55,"index":48378},"line":1401,"code":"    it('same as getViewportSize_ when no padding is set', function () {\n      const size = map.getView().getViewportSizeMinusPadding_();\n      expect(size).to.eql(map.getView().getViewportSize_());\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly updates when the padding is changed","suites":["ol/View","#getViewportSizeMinusPadding_()"],"updatePoint":{"line":1405,"column":53,"index":48582},"line":1405,"code":"    it('correctly updates when the padding is changed', function () {\n      map.getView().padding = [1, 2, 3, 4];\n      const size = map.getView().getViewportSizeMinusPadding_();\n      expect(size).to.eql([194, 146]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"fits correctly to the geometry (with unconstrained resolution)","suites":["ol/View","fit"],"updatePoint":{"line":1434,"column":70,"index":49595},"line":1434,"code":"    it('fits correctly to the geometry (with unconstrained resolution)', function () {\n      view.fit(new LineString([[6000, 46000], [6000, 47100], [7000, 46000]]), {\n        size: [200, 200],\n        padding: [100, 0, 0, 100]\n      });\n      expect(view.getResolution()).to.be(11);\n      expect(view.getCenter()[0]).to.be(5950);\n      expect(view.getCenter()[1]).to.be(47100);\n      view.fit(new Circle([6000, 46000], 1000), {\n        size: [200, 200]\n      });\n      expect(view.getResolution()).to.be(10);\n      expect(view.getCenter()[0]).to.be(6000);\n      expect(view.getCenter()[1]).to.be(46000);\n      view.setRotation(Math.PI / 8);\n      view.fit(new Circle([6000, 46000], 1000), {\n        size: [200, 200]\n      });\n      expect(view.getResolution()).to.roughlyEqual(10, 1e-9);\n      expect(view.getCenter()[0]).to.roughlyEqual(6000, 1e-9);\n      expect(view.getCenter()[1]).to.roughlyEqual(46000, 1e-9);\n      view.setRotation(Math.PI / 4);\n      view.fit(new LineString([[6000, 46000], [6000, 47100], [7000, 46000]]), {\n        size: [200, 200],\n        padding: [100, 0, 0, 100]\n      });\n      expect(view.getResolution()).to.roughlyEqual(14.849242404917458, 1e-9);\n      expect(view.getCenter()[0]).to.roughlyEqual(5200, 1e-9);\n      expect(view.getCenter()[1]).to.roughlyEqual(46300, 1e-9);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"fits correctly to the geometry","suites":["ol/View","fit"],"updatePoint":{"line":1464,"column":38,"index":50878},"line":1464,"code":"    it('fits correctly to the geometry', function () {\n      view.setConstrainResolution(true);\n      view.fit(new LineString([[6000, 46000], [6000, 47100], [7000, 46000]]), {\n        size: [200, 200],\n        padding: [100, 0, 0, 100]\n      });\n      expect(view.getResolution()).to.be(20);\n      expect(view.getCenter()[0]).to.be(5500);\n      expect(view.getCenter()[1]).to.be(47550);\n      view.fit(new LineString([[6000, 46000], [6000, 47100], [7000, 46000]]), {\n        size: [200, 200],\n        padding: [100, 0, 0, 100],\n        nearest: true\n      });\n      expect(view.getResolution()).to.be(10);\n      expect(view.getCenter()[0]).to.be(6000);\n      expect(view.getCenter()[1]).to.be(47050);\n      view.fit(new Point([6000, 46000]), {\n        size: [200, 200],\n        padding: [100, 0, 0, 100],\n        minResolution: 2\n      });\n      expect(view.getResolution()).to.be(2);\n      expect(view.getCenter()[0]).to.be(5900);\n      expect(view.getCenter()[1]).to.be(46100);\n      view.fit(new Point([6000, 46000]), {\n        size: [200, 200],\n        padding: [100, 0, 0, 100],\n        maxZoom: 6\n      });\n      expect(view.getResolution()).to.be(2);\n      expect(view.getZoom()).to.be(6);\n      expect(view.getCenter()[0]).to.be(5900);\n      expect(view.getCenter()[1]).to.be(46100);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"fits correctly to the extent","suites":["ol/View","fit"],"updatePoint":{"line":1499,"column":36,"index":52176},"line":1499,"code":"    it('fits correctly to the extent', function () {\n      view.fit([1000, 1000, 2000, 2000], {\n        size: [200, 200]\n      });\n      expect(view.getResolution()).to.be(5);\n      expect(view.getCenter()[0]).to.be(1500);\n      expect(view.getCenter()[1]).to.be(1500);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"fits correctly to the extent when a padding is configured","suites":["ol/View","fit"],"updatePoint":{"line":1507,"column":65,"index":52483},"line":1507,"code":"    it('fits correctly to the extent when a padding is configured', function () {\n      view.padding = [100, 0, 0, 100];\n      view.setViewportSize([200, 200]);\n      view.fit([1000, 1000, 2000, 2000]);\n      expect(view.getResolution()).to.be(10);\n      expect(view.getCenter()[0]).to.be(1500);\n      expect(view.getCenter()[1]).to.be(1500);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"fits correctly to the extent when a view extent is configured","suites":["ol/View","fit"],"updatePoint":{"line":1515,"column":69,"index":52838},"line":1515,"code":"    it('fits correctly to the extent when a view extent is configured', function () {\n      view.set('extent', [1500, 0, 2500, 10000]);\n      view.applyOptions_(view.getProperties());\n      view.fit([1000, 1000, 2000, 2000]);\n      expect(view.calculateExtent()).eql([1500, 1000, 2500, 2000]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"throws on invalid geometry/extent value","suites":["ol/View","fit"],"updatePoint":{"line":1521,"column":47,"index":53118},"line":1521,"code":"    it('throws on invalid geometry/extent value', function () {\n      expect(function () {\n        view.fit(true, [200, 200]);\n      }).to.throwException();\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"throws on empty extent","suites":["ol/View","fit"],"updatePoint":{"line":1526,"column":30,"index":53266},"line":1526,"code":"    it('throws on empty extent', function () {\n      expect(function () {\n        view.fit(createEmpty());\n      }).to.throwException();\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"animates when duration is defined","suites":["ol/View","fit"],"updatePoint":{"line":1531,"column":41,"index":53422},"line":1531,"code":"    it('animates when duration is defined', function (done) {\n      view.fit(new LineString([[6000, 46000], [6000, 47100], [7000, 46000]]), {\n        size: [200, 200],\n        padding: [100, 0, 0, 100],\n        duration: 25\n      });\n      expect(view.getAnimating()).to.eql(true);\n      setTimeout(function () {\n        expect(view.getResolution()).to.be(11);\n        expect(view.getCenter()[0]).to.be(5950);\n        expect(view.getCenter()[1]).to.be(47100);\n        expect(view.getAnimating()).to.eql(false);\n        done();\n      }, 50);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"calls a callback when duration is not defined","suites":["ol/View","fit"],"updatePoint":{"line":1546,"column":53,"index":53983},"line":1546,"code":"    it('calls a callback when duration is not defined', function (done) {\n      view.fit(new LineString([[6000, 46000], [6000, 47100], [7000, 46000]]), {\n        callback: function (complete) {\n          expect(complete).to.be(true);\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"calls a callback when animation completes","suites":["ol/View","fit"],"updatePoint":{"line":1554,"column":49,"index":54259},"line":1554,"code":"    it('calls a callback when animation completes', function (done) {\n      view.fit(new LineString([[6000, 46000], [6000, 47100], [7000, 46000]]), {\n        duration: 25,\n        callback: function (complete) {\n          expect(complete).to.be(true);\n          done();\n        }\n      });\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"fit correctly to the coordinates","suites":["ol/View","centerOn"],"updatePoint":{"line":1571,"column":40,"index":54729},"line":1571,"code":"    it('fit correctly to the coordinates', function () {\n      view.setResolution(10);\n      view.centerOn([6000, 46000], [400, 400], [300, 300]);\n      expect(view.getCenter()[0]).to.be(5000);\n      expect(view.getCenter()[1]).to.be(47000);\n      view.setRotation(Math.PI / 4);\n      view.centerOn([6000, 46000], [400, 400], [300, 300]);\n      expect(view.getCenter()[0]).to.roughlyEqual(4585.78643762691, 1e-9);\n      expect(view.getCenter()[1]).to.roughlyEqual(46000, 1e-9);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"correctly changes the view hint","suites":["ol/View","#beginInteraction() and endInteraction()"],"updatePoint":{"line":1587,"column":39,"index":55365},"line":1587,"code":"    it('correctly changes the view hint', function () {\n      view.beginInteraction();\n      expect(view.getHints()[1]).to.be(1);\n      view.beginInteraction();\n      expect(view.getHints()[1]).to.be(2);\n      view.endInteraction();\n      view.endInteraction();\n      expect(view.getHints()[1]).to.be(0);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"does not allow hint value to become negative","suites":["ol/View","#beginInteraction() and endInteraction()"],"updatePoint":{"line":1596,"column":52,"index":55691},"line":1596,"code":"    it('does not allow hint value to become negative', function () {\n      view.beginInteraction();\n      view.endInteraction();\n      view.endInteraction();\n      expect(view.getHints()[1]).to.be(0);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works correctly without constraint","suites":["ol/View","#getConstrainedZoom()"],"updatePoint":{"line":1605,"column":42,"index":55960},"line":1605,"code":"    it('works correctly without constraint', function () {\n      view = new View({\n        zoom: 0\n      });\n      expect(view.getConstrainedZoom(3)).to.be(3);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works correctly with resolution constraints","suites":["ol/View","#getConstrainedZoom()"],"updatePoint":{"line":1611,"column":51,"index":56137},"line":1611,"code":"    it('works correctly with resolution constraints', function () {\n      view = new View({\n        zoom: 4,\n        minZoom: 4,\n        maxZoom: 8\n      });\n      expect(view.getConstrainedZoom(3)).to.be(4);\n      expect(view.getConstrainedZoom(10)).to.be(8);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works correctly with a specific resolution set","suites":["ol/View","#getConstrainedZoom()"],"updatePoint":{"line":1620,"column":54,"index":56409},"line":1620,"code":"    it('works correctly with a specific resolution set', function () {\n      view = new View({\n        zoom: 0,\n        resolutions: [512, 256, 128, 64, 32, 16, 8]\n      });\n      expect(view.getConstrainedZoom(0)).to.be(0);\n      expect(view.getConstrainedZoom(4)).to.be(4);\n      expect(view.getConstrainedZoom(8)).to.be(6);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works correctly by snapping to power of 2","suites":["ol/View","#getConstrainedResolution()"],"updatePoint":{"line":1633,"column":49,"index":56861},"line":1633,"code":"    it('works correctly by snapping to power of 2', function () {\n      view = new View();\n      expect(view.getConstrainedResolution(1000000)).to.be(defaultMaxRes);\n      expect(view.getConstrainedResolution(defaultMaxRes / 8)).to.be(defaultMaxRes / 8);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works correctly by snapping to a custom zoom factor","suites":["ol/View","#getConstrainedResolution()"],"updatePoint":{"line":1638,"column":59,"index":57134},"line":1638,"code":"    it('works correctly by snapping to a custom zoom factor', function () {\n      view = new View({\n        maxResolution: 2500,\n        zoomFactor: 5,\n        maxZoom: 4,\n        constrainResolution: true\n      });\n      expect(view.getConstrainedResolution(90, 1)).to.be(100);\n      expect(view.getConstrainedResolution(90, -1)).to.be(20);\n      expect(view.getConstrainedResolution(20)).to.be(20);\n      expect(view.getConstrainedResolution(5)).to.be(4);\n      expect(view.getConstrainedResolution(1)).to.be(4);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works correctly with a specific resolution set","suites":["ol/View","#getConstrainedResolution()"],"updatePoint":{"line":1651,"column":54,"index":57652},"line":1651,"code":"    it('works correctly with a specific resolution set', function () {\n      view = new View({\n        zoom: 0,\n        resolutions: [512, 256, 128, 64, 32, 16, 8],\n        constrainResolution: true\n      });\n      expect(view.getConstrainedResolution(1000, 1)).to.be(512);\n      expect(view.getConstrainedResolution(260, 1)).to.be(512);\n      expect(view.getConstrainedResolution(260)).to.be(256);\n      expect(view.getConstrainedResolution(30)).to.be(32);\n      expect(view.getConstrainedResolution(30, -1)).to.be(16);\n      expect(view.getConstrainedResolution(4, -1)).to.be(8);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes view rotation with anchor","suites":["ol/View","#adjustRotation()"],"updatePoint":{"line":1666,"column":41,"index":58281},"line":1666,"code":"    it('changes view rotation with anchor', function () {\n      const view = new View({\n        resolution: 1,\n        center: [0, 0]\n      });\n      view.adjustRotation(Math.PI / 2);\n      expect(view.getRotation()).to.be(Math.PI / 2);\n      expect(view.getCenter()).to.eql([0, 0]);\n      view.adjustRotation(-Math.PI);\n      expect(view.getRotation()).to.be(-Math.PI / 2);\n      expect(view.getCenter()).to.eql([0, 0]);\n      view.adjustRotation(Math.PI / 3, [50, 0]);\n      expect(view.getRotation()).to.roughlyEqual(-Math.PI / 6, 1e-9);\n      expect(view.getCenter()[0]).to.roughlyEqual(50 * (1 - Math.cos(Math.PI / 3)), 1e-9);\n      expect(view.getCenter()[1]).to.roughlyEqual(-50 * Math.sin(Math.PI / 3), 1e-9);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"does not change view parameters if rotation is disabled","suites":["ol/View","#adjustRotation()"],"updatePoint":{"line":1682,"column":63,"index":59029},"line":1682,"code":"    it('does not change view parameters if rotation is disabled', function () {\n      const view = new View({\n        resolution: 1,\n        enableRotation: false,\n        center: [0, 0]\n      });\n      view.adjustRotation(Math.PI / 2);\n      expect(view.getRotation()).to.be(0);\n      expect(view.getCenter()).to.eql([0, 0]);\n      view.adjustRotation(-Math.PI * 3, [-50, 0]);\n      expect(view.getRotation()).to.be(0);\n      expect(view.getCenter()).to.eql([0, 0]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes view resolution","suites":["ol/View","#adjustZoom()"],"updatePoint":{"line":1697,"column":31,"index":59521},"line":1697,"code":"    it('changes view resolution', function () {\n      const view = new View({\n        resolution: 1,\n        resolutions: [4, 2, 1, 0.5, 0.25]\n      });\n      view.adjustZoom(1);\n      expect(view.getResolution()).to.be(0.5);\n      view.adjustZoom(-1);\n      expect(view.getResolution()).to.be(1);\n      view.adjustZoom(2);\n      expect(view.getResolution()).to.be(0.25);\n      view.adjustZoom(-2);\n      expect(view.getResolution()).to.be(1);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes view resolution and center relative to the anchor","suites":["ol/View","#adjustZoom()"],"updatePoint":{"line":1711,"column":65,"index":60007},"line":1711,"code":"    it('changes view resolution and center relative to the anchor', function () {\n      const view = new View({\n        center: [0, 0],\n        resolution: 1,\n        resolutions: [4, 2, 1, 0.5, 0.25]\n      });\n      view.adjustZoom(1, [10, 10]);\n      expect(view.getCenter()).to.eql([5, 5]);\n      view.adjustZoom(-1, [0, 0]);\n      expect(view.getCenter()).to.eql([10, 10]);\n      view.adjustZoom(2, [0, 0]);\n      expect(view.getCenter()).to.eql([2.5, 2.5]);\n      view.adjustZoom(-2, [0, 0]);\n      expect(view.getCenter()).to.eql([10, 10]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes view resolution and center relative to the anchor, while respecting the extent (center only)","suites":["ol/View","#adjustZoom()"],"updatePoint":{"line":1726,"column":108,"index":60605},"line":1726,"code":"    it('changes view resolution and center relative to the anchor, while respecting the extent (center only)', function () {\n      const view = new View({\n        center: [0, 0],\n        extent: [-2.5, -2.5, 2.5, 2.5],\n        constrainOnlyCenter: true,\n        resolution: 1,\n        resolutions: [4, 2, 1, 0.5, 0.25]\n      });\n      view.adjustZoom(1, [10, 10]);\n      expect(view.getCenter()).to.eql([2.5, 2.5]);\n      view.adjustZoom(-1, [0, 0]);\n      expect(view.getCenter()).to.eql([2.5, 2.5]);\n      view.adjustZoom(2, [10, 10]);\n      expect(view.getCenter()).to.eql([2.5, 2.5]);\n      view.adjustZoom(-2, [0, 0]);\n      expect(view.getCenter()).to.eql([2.5, 2.5]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes view resolution and center relative to the anchor, while respecting the extent","suites":["ol/View","#adjustZoom()"],"updatePoint":{"line":1743,"column":94,"index":61274},"line":1743,"code":"    it('changes view resolution and center relative to the anchor, while respecting the extent', function () {\n      const map = new Map({});\n      const view = new View({\n        center: [50, 50],\n        extent: [0, 0, 100, 100],\n        resolution: 1,\n        resolutions: [4, 2, 1, 0.5, 0.25, 0.125]\n      });\n      map.setView(view);\n      view.adjustZoom(1, [100, 100]);\n      expect(view.getCenter()).to.eql([75, 75]);\n      view.adjustZoom(-1, [75, 75]);\n      expect(view.getCenter()).to.eql([50, 50]);\n      view.adjustZoom(2, [100, 100]);\n      expect(view.getCenter()).to.eql([87.5, 87.5]);\n      view.adjustZoom(-3, [0, 0]);\n      expect(view.getCenter()).to.eql([50, 50]);\n      expect(view.getResolution()).to.eql(1);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes view resolution and center relative to the anchor, while respecting the extent (rotated)","suites":["ol/View","#adjustZoom()"],"updatePoint":{"line":1762,"column":104,"index":62025},"line":1762,"code":"    it('changes view resolution and center relative to the anchor, while respecting the extent (rotated)', function () {\n      const map = new Map({});\n      const view = new View({\n        center: [50, 50],\n        extent: [-100, -100, 100, 100],\n        resolution: 1,\n        resolutions: [2, 1, 0.5, 0.25, 0.125],\n        rotation: Math.PI / 4\n      });\n      map.setView(view);\n      const halfSize = 100 * Math.SQRT1_2;\n      view.adjustZoom(1, [100, 100]);\n      expect(view.getCenter()).to.eql([100 - halfSize / 2, 100 - halfSize / 2]);\n      view.setCenter([0, 50]);\n      view.adjustZoom(-1, [0, 0]);\n      expect(view.getCenter()).to.eql([0, 100 - halfSize]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes view resolution","suites":["ol/View","#adjustZoom() - useGeographic"],"updatePoint":{"line":1783,"column":31,"index":62756},"line":1783,"code":"    it('changes view resolution', () => {\n      const view = new View({\n        resolution: 1,\n        resolutions: [4, 2, 1, 0.5, 0.25]\n      });\n      view.adjustZoom(1);\n      expect(view.getResolution()).to.be(0.5);\n      view.adjustZoom(-1);\n      expect(view.getResolution()).to.be(1);\n      view.adjustZoom(2);\n      expect(view.getResolution()).to.be(0.25);\n      view.adjustZoom(-2);\n      expect(view.getResolution()).to.be(1);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"changes view resolution and center relative to the anchor","suites":["ol/View","#adjustZoom() - useGeographic"],"updatePoint":{"line":1797,"column":65,"index":63236},"line":1797,"code":"    it('changes view resolution and center relative to the anchor', function () {\n      const view = new View({\n        center: [0, 0],\n        zoom: 0\n      });\n      let center;\n      view.adjustZoom(1, [90, 45]);\n      center = view.getCenter();\n      expect(center[0]).to.be(45);\n      expect(center[1]).to.roughlyEqual(24.4698, 1e-4);\n      view.adjustZoom(-1, [90, 45]);\n      center = view.getCenter();\n      expect(center[0]).to.roughlyEqual(0, 1e-10);\n      expect(center[1]).to.roughlyEqual(0, 1e-10);\n      view.adjustZoom(2, [-90, -45]);\n      center = view.getCenter();\n      expect(center[0]).to.be(-67.5);\n      expect(center[1]).to.roughlyEqual(-35.3836, 1e-4);\n      view.adjustZoom(-2, [-90, -45]);\n      center = view.getCenter();\n      expect(center[0]).to.roughlyEqual(0, 1e-10);\n      expect(center[1]).to.roughlyEqual(0, 1e-10);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"Correctly shifts the viewport center when a padding is set","suites":["ol/View","#getCenter"],"updatePoint":{"line":1831,"column":66,"index":64333},"line":1831,"code":"    it('Correctly shifts the viewport center when a padding is set', function () {\n      view.padding = [50, 0, 0, 50];\n      expect(view.getCenter()).to.eql([25, -25]);\n    });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works when initialized with #setCenter() and #setZoom()","suites":["does not start unexpected animations during interaction"],"updatePoint":{"line":1847,"column":61,"index":64760},"line":1847,"code":"  it('works when initialized with #setCenter() and #setZoom()', function (done) {\n    const view = map.getView();\n    let callCount = 0;\n    view.on('change:resolution', function () {\n      ++callCount;\n    });\n    view.setCenter([0, 0]);\n    view.setZoom(0);\n    view.beginInteraction();\n    view.endInteraction();\n    setTimeout(function () {\n      expect(callCount).to.be(1);\n      done();\n    }, 500);\n  });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"works when initialized with #animate()","suites":["does not start unexpected animations during interaction"],"updatePoint":{"line":1862,"column":44,"index":65155},"line":1862,"code":"  it('works when initialized with #animate()', function (done) {\n    const view = map.getView();\n    let callCount = 0;\n    view.on('change:resolution', function () {\n      ++callCount;\n    });\n    view.animate({\n      center: [0, 0],\n      zoom: 0\n    });\n    view.beginInteraction();\n    view.endInteraction();\n    setTimeout(function () {\n      expect(callCount).to.be(1);\n      done();\n    }, 500);\n  });","file":"browser/spec/ol/View.test.js","skipped":false,"dir":"test"},{"name":"sets the default usage when not specified","suites":["ol.webgl.Buffer","constructor"],"updatePoint":{"line":5,"column":49,"index":339},"line":5,"code":"    it('sets the default usage when not specified', function () {\n      const b = new WebGLArrayBuffer(ARRAY_BUFFER);\n      expect(b.getUsage()).to.be(STATIC_DRAW);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"sets the given usage when specified","suites":["ol.webgl.Buffer","constructor"],"updatePoint":{"line":9,"column":43,"index":506},"line":9,"code":"    it('sets the given usage when specified', function () {\n      const b = new WebGLArrayBuffer(ARRAY_BUFFER, STREAM_DRAW);\n      expect(b.getUsage()).to.be(STREAM_DRAW);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"raises an error if an incorrect type is used","suites":["ol.webgl.Buffer","constructor"],"updatePoint":{"line":13,"column":52,"index":695},"line":13,"code":"    it('raises an error if an incorrect type is used', function (done) {\n      try {\n        new WebGLArrayBuffer(1234);\n      } catch (e) {\n        done();\n      }\n      done(true);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"returns the correct typed array constructor","suites":["ol.webgl.Buffer","#getArrayClassForType"],"updatePoint":{"line":23,"column":51,"index":941},"line":23,"code":"    it('returns the correct typed array constructor', function () {\n      expect(getArrayClassForType(ARRAY_BUFFER)).to.be(Float32Array);\n      expect(getArrayClassForType(ELEMENT_ARRAY_BUFFER)).to.be(Uint32Array);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"initializes the array using a size","suites":["ol.webgl.Buffer","populate methods"],"updatePoint":{"line":33,"column":42,"index":1300},"line":33,"code":"    it('initializes the array using a size', function () {\n      b.ofSize(12);\n      expect(b.getArray().length).to.be(12);\n      expect(b.getArray()[0]).to.be(0);\n      expect(b.getArray()[11]).to.be(0);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"initializes the array using an array","suites":["ol.webgl.Buffer","populate methods"],"updatePoint":{"line":39,"column":44,"index":1515},"line":39,"code":"    it('initializes the array using an array', function () {\n      b.fromArray([1, 2, 3, 4, 5]);\n      expect(b.getArray().length).to.be(5);\n      expect(b.getArray()[0]).to.be(1);\n      expect(b.getArray()[1]).to.be(2);\n      expect(b.getArray()[2]).to.be(3);\n      expect(b.getArray()[3]).to.be(4);\n      expect(b.getArray()[4]).to.be(5);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"initializes the array using a size","suites":["ol.webgl.Buffer","populate methods"],"updatePoint":{"line":48,"column":42,"index":1862},"line":48,"code":"    it('initializes the array using a size', function () {\n      const a = Float32Array.of(1, 2, 3, 4, 5);\n      b.fromArrayBuffer(a.buffer);\n      expect(b.getArray().length).to.be(5);\n      expect(b.getArray()[0]).to.be(1);\n      expect(b.getArray()[1]).to.be(2);\n      expect(b.getArray()[2]).to.be(3);\n      expect(b.getArray()[3]).to.be(4);\n      expect(b.getArray()[4]).to.be(5);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"returns 0 when the buffer array is not initialized","suites":["ol.webgl.Buffer","#getSize"],"updatePoint":{"line":64,"column":58,"index":2409},"line":64,"code":"    it('returns 0 when the buffer array is not initialized', function () {\n      expect(b.getSize()).to.be(0);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"returns the size of the array otherwise","suites":["ol.webgl.Buffer","#getSize"],"updatePoint":{"line":67,"column":47,"index":2517},"line":67,"code":"    it('returns the size of the array otherwise', function () {\n      b.ofSize(12);\n      expect(b.getSize()).to.be(12);\n    });","file":"browser/spec/ol/webgl/buffer.test.js","skipped":false,"dir":"test"},{"name":"initialized WebGL context & canvas","suites":["ol/webgl/WebGLHelper","constructor","without an argument"],"updatePoint":{"line":67,"column":44,"index":1822},"line":67,"code":"      it('initialized WebGL context & canvas', function () {\n        expect(h.getGL() instanceof WebGLRenderingContext).to.eql(true);\n        expect(h.getCanvas() instanceof HTMLCanvasElement).to.eql(true);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"has a default rendering pass","suites":["ol/webgl/WebGLHelper","constructor","without an argument"],"updatePoint":{"line":71,"column":38,"index":2033},"line":71,"code":"      it('has a default rendering pass', function () {\n        expect(h.postProcessPasses_.length).to.eql(1);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"has instantiated post-processing passes","suites":["ol/webgl/WebGLHelper","constructor","with post process passes"],"updatePoint":{"line":87,"column":49,"index":2456},"line":87,"code":"      it('has instantiated post-processing passes', function () {\n        expect(h.postProcessPasses_.length).to.eql(2);\n        expect(h.postProcessPasses_[0].scaleRatio_).to.eql(0.5);\n        expect(h.postProcessPasses_[0].uniforms_.length).to.eql(0);\n        expect(h.postProcessPasses_[1].scaleRatio_).to.eql(1);\n        expect(h.postProcessPasses_[1].uniforms_.length).to.eql(1);\n        expect(h.postProcessPasses_[1].uniforms_[0].value).to.eql(4);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"has resized the canvas","suites":["ol/webgl/WebGLHelper","operations","prepare draw"],"updatePoint":{"line":121,"column":32,"index":3601},"line":121,"code":"      it('has resized the canvas', function () {\n        expect(h.getCanvas().width).to.eql(100);\n        expect(h.getCanvas().height).to.eql(160);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"has processed default uniforms","suites":["ol/webgl/WebGLHelper","operations","prepare draw"],"updatePoint":{"line":125,"column":40,"index":3767},"line":125,"code":"      it('has processed default uniforms', function () {\n        const uniformLocations = h.uniformLocationsByProgram_[getUid(program)];\n        expect(uniformLocations[DefaultUniform.OFFSET_ROTATION_MATRIX]).not.to.eql(undefined);\n        expect(uniformLocations[DefaultUniform.OFFSET_SCALE_MATRIX]).not.to.eql(undefined);\n        expect(uniformLocations[DefaultUniform.TIME]).not.to.eql(undefined);\n        expect(uniformLocations[DefaultUniform.ZOOM]).not.to.eql(undefined);\n        expect(uniformLocations[DefaultUniform.RESOLUTION]).not.to.eql(undefined);\n        expect(uniformLocations[DefaultUniform.VIEWPORT_SIZE_PX]).not.to.eql(undefined);\n        expect(uniformLocations[DefaultUniform.PIXEL_RATIO]).not.to.eql(undefined);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"has processed uniforms","suites":["ol/webgl/WebGLHelper","operations","prepare draw"],"updatePoint":{"line":135,"column":32,"index":4503},"line":135,"code":"      it('has processed uniforms', function () {\n        expect(h.uniforms_.length).to.eql(4);\n        expect(h.uniforms_[0].name).to.eql('u_test1');\n        expect(h.uniforms_[1].name).to.eql('u_test2');\n        expect(h.uniforms_[2].name).to.eql('u_test3');\n        expect(h.uniforms_[3].name).to.eql('u_test4');\n        expect(h.uniforms_[0].location).to.not.eql(-1);\n        expect(h.uniforms_[1].location).to.not.eql(-1);\n        expect(h.uniforms_[2].location).to.not.eql(-1);\n        expect(h.uniforms_[3].location).to.not.eql(-1);\n        expect(h.uniforms_[2].texture).to.not.eql(undefined);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"does not resize the canvas","suites":["ol/webgl/WebGLHelper","operations","prepare draw","avoid resizing the canvas if not required"],"updatePoint":{"line":163,"column":38,"index":5658},"line":163,"code":"        it('does not resize the canvas', function () {\n          expect(widthSpy.set.callCount).to.be(0);\n          expect(heightSpy.set.callCount).to.be(0);\n        });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"has saved the program","suites":["ol/webgl/WebGLHelper","operations","valid shader compiling"],"updatePoint":{"line":176,"column":31,"index":6079},"line":176,"code":"      it('has saved the program', function () {\n        expect(h.currentProgram_).to.eql(p);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"has no shader compilation error","suites":["ol/webgl/WebGLHelper","operations","valid shader compiling"],"updatePoint":{"line":179,"column":41,"index":6192},"line":179,"code":"      it('has no shader compilation error', function () {\n        expect(h.shaderCompileErrors_).to.eql(null);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"can find the uniform location","suites":["ol/webgl/WebGLHelper","operations","valid shader compiling"],"updatePoint":{"line":182,"column":39,"index":6311},"line":182,"code":"      it('can find the uniform location', function () {\n        expect(h.getUniformLocation('u_test')).to.not.eql(null);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"can find the attribute location","suites":["ol/webgl/WebGLHelper","operations","valid shader compiling"],"updatePoint":{"line":185,"column":41,"index":6444},"line":185,"code":"      it('can find the attribute location', function () {\n        expect(h.getAttributeLocation('a_test')).to.not.eql(-1);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"cannot find an unknown attribute location","suites":["ol/webgl/WebGLHelper","operations","valid shader compiling"],"updatePoint":{"line":188,"column":51,"index":6587},"line":188,"code":"      it('cannot find an unknown attribute location', function () {\n        expect(h.getAttributeLocation('a_test_missing')).to.eql(-1);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"throws for an invalid vertex shader","suites":["ol/webgl/WebGLHelper","operations","invalid shader compiling"],"updatePoint":{"line":193,"column":45,"index":6791},"line":193,"code":"      it('throws for an invalid vertex shader', function () {\n        h = new WebGLHelper();\n        expect(() => h.getProgram(FRAGMENT_SHADER, INVALID_VERTEX_SHADER)).to.throwException(/Vertex shader compilation failed: ERROR: 0:10: 'bla' : syntax error/);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"throws for an invalid fragment shader","suites":["ol/webgl/WebGLHelper","operations","invalid shader compiling"],"updatePoint":{"line":197,"column":47,"index":7061},"line":197,"code":"      it('throws for an invalid fragment shader', function () {\n        h = new WebGLHelper();\n        expect(() => h.getProgram(INVALID_FRAGMENT_SHADER, VERTEX_SHADER)).to.throwException(/Fragment shader compilation failed: ERROR: 0:5: 'oops' : undeclared identifier/);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"gives out the correct transform","suites":["ol/webgl/WebGLHelper","operations","#makeProjectionTransform"],"updatePoint":{"line":206,"column":41,"index":7471},"line":206,"code":"      it('gives out the correct transform', function () {\n        const scaleX = 2 / SAMPLE_FRAMESTATE.size[0] / SAMPLE_FRAMESTATE.viewState.resolution;\n        const scaleY = 2 / SAMPLE_FRAMESTATE.size[1] / SAMPLE_FRAMESTATE.viewState.resolution;\n        const given = createTransform();\n        const expected = createTransform();\n        scaleTransform(expected, scaleX, scaleY);\n        rotateTransform(expected, -SAMPLE_FRAMESTATE.viewState.rotation);\n        translateTransform(expected, -SAMPLE_FRAMESTATE.viewState.center[0], -SAMPLE_FRAMESTATE.viewState.center[1]);\n        h.makeProjectionTransform(SAMPLE_FRAMESTATE, given);\n        expect(given.map(val => val.toFixed(15))).to.eql(expected.map(val => val.toFixed(15)));\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"can be called to free up buffer resources","suites":["ol/webgl/WebGLHelper","operations","deleteBuffer()"],"updatePoint":{"line":219,"column":51,"index":8276},"line":219,"code":"      it('can be called to free up buffer resources', function () {\n        h = new WebGLHelper();\n        const buffer = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n        buffer.fromArray([0, 1, 2, 3]);\n        h.flushBufferData(buffer);\n        const bufferKey = getUid(buffer);\n        expect(h.bufferCache_).to.have.property(bufferKey);\n        h.deleteBuffer(buffer);\n        expect(h.bufferCache_).to.not.have.property(bufferKey);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"creates an empty texture from scratch","suites":["ol/webgl/WebGLHelper","operations","#createTexture"],"updatePoint":{"line":234,"column":47,"index":8851},"line":234,"code":"      it('creates an empty texture from scratch', function () {\n        const width = 4;\n        const height = 4;\n        const t = h.createTexture([width, height]);\n        const gl = h.getGL();\n        const fb = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, t, 0);\n        const data = new Uint8Array(width * height * 4);\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);\n        gl.deleteFramebuffer(fb);\n        expect(data[0]).to.eql(0);\n        expect(data[1]).to.eql(0);\n        expect(data[2]).to.eql(0);\n        expect(data[3]).to.eql(0);\n        expect(data[4]).to.eql(0);\n        expect(data[5]).to.eql(0);\n        expect(data[6]).to.eql(0);\n        expect(data[7]).to.eql(0);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"creates a texture from image data","suites":["ol/webgl/WebGLHelper","operations","#createTexture"],"updatePoint":{"line":254,"column":43,"index":9685},"line":254,"code":"      it('creates a texture from image data', function () {\n        const width = 4;\n        const height = 4;\n        const canvas = document.createElement('canvas');\n        const image = canvas.getContext('2d').createImageData(width, height);\n        for (let i = 0; i < image.data.length; i += 4) {\n          image.data[i] = 100;\n          image.data[i + 1] = 150;\n          image.data[i + 2] = 200;\n          image.data[i + 3] = 250;\n        }\n        const t = h.createTexture([width, height], image);\n        const gl = h.getGL();\n        const fb = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, t, 0);\n        const data = new Uint8Array(width * height * 4);\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);\n        gl.deleteFramebuffer(fb);\n        expect(data[0]).to.eql(100);\n        expect(data[1]).to.eql(150);\n        expect(data[2]).to.eql(200);\n        expect(data[3]).to.eql(250);\n        expect(data[4]).to.eql(100);\n        expect(data[5]).to.eql(150);\n        expect(data[6]).to.eql(200);\n        expect(data[7]).to.eql(250);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"reuses a given texture","suites":["ol/webgl/WebGLHelper","operations","#createTexture"],"updatePoint":{"line":282,"column":32,"index":10869},"line":282,"code":"      it('reuses a given texture', function () {\n        const width = 4;\n        const height = 4;\n        const gl = h.getGL();\n        const t1 = gl.createTexture();\n        const t2 = h.createTexture([width, height], undefined, t1);\n        expect(t1).to.be(t2);\n      });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"enables attributes based on the given array (FLOAT)","suites":["ol/webgl/WebGLHelper","#enableAttributes"],"updatePoint":{"line":322,"column":59,"index":11936},"line":322,"code":"    it('enables attributes based on the given array (FLOAT)', function () {\n      const spy = sinon.spy(h, 'enableAttributeArray_');\n      h.enableAttributes(baseAttrs);\n      const bytesPerFloat = Float32Array.BYTES_PER_ELEMENT;\n      expect(spy.callCount).to.eql(3);\n      expect(spy.getCall(0).args[0]).to.eql('attr1');\n      expect(spy.getCall(0).args[1]).to.eql(3);\n      expect(spy.getCall(0).args[2]).to.eql(FLOAT);\n      expect(spy.getCall(0).args[3]).to.eql(6 * bytesPerFloat);\n      expect(spy.getCall(0).args[4]).to.eql(0);\n      expect(spy.getCall(1).args[0]).to.eql('attr2');\n      expect(spy.getCall(1).args[1]).to.eql(2);\n      expect(spy.getCall(1).args[2]).to.eql(FLOAT);\n      expect(spy.getCall(1).args[3]).to.eql(6 * bytesPerFloat);\n      expect(spy.getCall(1).args[4]).to.eql(3 * bytesPerFloat);\n      expect(spy.getCall(2).args[0]).to.eql('attr3');\n      expect(spy.getCall(2).args[1]).to.eql(1);\n      expect(spy.getCall(2).args[2]).to.eql(FLOAT);\n      expect(spy.getCall(2).args[3]).to.eql(6 * bytesPerFloat);\n      expect(spy.getCall(2).args[4]).to.eql(5 * bytesPerFloat);\n    });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"sets the default uniforms according the frame state","suites":["ol/webgl/WebGLHelper","#applyFrameState"],"updatePoint":{"line":362,"column":59,"index":13634},"line":362,"code":"    it('sets the default uniforms according the frame state', function () {\n      expect(stubMatrix.getCall(0).args).to.eql([DefaultUniform.OFFSET_SCALE_MATRIX, [0.9210609940028851, -0.3894183423086505, 0, 0, 0.3894183423086505, 0.9210609940028851, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]]);\n      expect(stubMatrix.getCall(1).args).to.eql([DefaultUniform.OFFSET_ROTATION_MATRIX, [0.9210609940028851, -0.3894183423086505, 0, 0, 0.3894183423086505, 0.9210609940028851, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]]);\n      expect(stubFloat.getCall(0).args).to.eql([DefaultUniform.TIME, 1]);\n      expect(stubFloat.getCall(1).args).to.eql([DefaultUniform.ZOOM, 3]);\n      expect(stubFloat.getCall(2).args).to.eql([DefaultUniform.RESOLUTION, 2]);\n      expect(stubFloat.getCall(3).args).to.eql([DefaultUniform.PIXEL_RATIO, 2]);\n      expect(stubVec2.getCall(0).args).to.eql([DefaultUniform.VIEWPORT_SIZE_PX, [100, 150]]);\n    });","file":"browser/spec/ol/webgl/helper.test.js","skipped":false,"dir":"test"},{"name":"creates a target of size 1x1","suites":["ol.webgl.RenderTarget","constructor"],"updatePoint":{"line":20,"column":36,"index":786},"line":20,"code":"    it('creates a target of size 1x1', function () {\n      const rt = new WebGLRenderTarget(helper);\n      expect(rt.getSize()).to.eql([1, 1]);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"creates a target of specified size","suites":["ol.webgl.RenderTarget","constructor"],"updatePoint":{"line":24,"column":42,"index":944},"line":24,"code":"    it('creates a target of specified size', function () {\n      const rt = new WebGLRenderTarget(helper, [12, 34]);\n      expect(rt.getSize()).to.eql([12, 34]);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"updates the target size","suites":["ol.webgl.RenderTarget","#setSize"],"updatePoint":{"line":30,"column":31,"index":1146},"line":30,"code":"    it('updates the target size', function () {\n      const rt = new WebGLRenderTarget(helper, [12, 34]);\n      expect(rt.getSize()).to.eql([12, 34]);\n      rt.setSize([45, 67]);\n      expect(rt.getSize()).to.eql([45, 67]);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"does nothing if the size has not changed","suites":["ol.webgl.RenderTarget","#setSize"],"updatePoint":{"line":36,"column":48,"index":1395},"line":36,"code":"    it('does nothing if the size has not changed', function () {\n      const rt = new WebGLRenderTarget(helper, [12, 34]);\n      const spy = sinon.spy(rt, 'updateSize_');\n      rt.setSize([12, 34]);\n      expect(spy.called).to.be(false);\n      rt.setSize([12, 345]);\n      expect(spy.called).to.be(true);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"returns 1-pixel data with the default options","suites":["ol.webgl.RenderTarget","#readAll"],"updatePoint":{"line":46,"column":53,"index":1756},"line":46,"code":"    it('returns 1-pixel data with the default options', function () {\n      const rt = new WebGLRenderTarget(helper);\n      expect(rt.readAll().length).to.eql(4);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"returns the content of the texture","suites":["ol.webgl.RenderTarget","#readAll"],"updatePoint":{"line":50,"column":42,"index":1916},"line":50,"code":"    it('returns the content of the texture', function () {\n      const rt = new WebGLRenderTarget(helper, [4, 4]);\n      helper.createTexture([4, 4], testImage_4x4, rt.getTexture());\n      const data = rt.readAll();\n      expect(data[0]).to.eql(100);\n      expect(data[1]).to.eql(100);\n      expect(data[2]).to.eql(200);\n      expect(data[3]).to.eql(200);\n      expect(data[4]).to.eql(101);\n      expect(data[5]).to.eql(101);\n      expect(data[6]).to.eql(201);\n      expect(data[7]).to.eql(201);\n      expect(data.length).to.eql(4 * 4 * 4);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"does not call gl.readPixels again when #clearCachedData is not called","suites":["ol.webgl.RenderTarget","#readAll"],"updatePoint":{"line":64,"column":77,"index":2500},"line":64,"code":"    it('does not call gl.readPixels again when #clearCachedData is not called', function () {\n      const rt = new WebGLRenderTarget(helper, [4, 4]);\n      helper.createTexture([4, 4], testImage_4x4, rt.getTexture());\n      const spy = sinon.spy(rt.helper_.getGL(), 'readPixels');\n      rt.readAll();\n      expect(spy.callCount).to.eql(1);\n      rt.readAll();\n      expect(spy.callCount).to.eql(1);\n      rt.clearCachedData();\n      rt.readAll();\n      expect(spy.callCount).to.eql(2);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"returns the content of one pixel","suites":["ol.webgl.RenderTarget","#readPixel"],"updatePoint":{"line":78,"column":40,"index":3002},"line":78,"code":"    it('returns the content of one pixel', function () {\n      const rt = new WebGLRenderTarget(helper, [4, 4]);\n      helper.createTexture([4, 4], testImage_4x4, rt.getTexture());\n      let data = rt.readPixel(0, 0);\n      expect(data[0]).to.eql(112);\n      expect(data[1]).to.eql(112);\n      expect(data[2]).to.eql(212);\n      expect(data[3]).to.eql(212);\n      data = rt.readPixel(3, 3);\n      expect(data[0]).to.eql(103);\n      expect(data[1]).to.eql(103);\n      expect(data[2]).to.eql(203);\n      expect(data[3]).to.eql(203);\n      expect(data.length).to.eql(4);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"does not call gl.readPixels again when #clearCachedData is not called","suites":["ol.webgl.RenderTarget","#readPixel"],"updatePoint":{"line":93,"column":77,"index":3615},"line":93,"code":"    it('does not call gl.readPixels again when #clearCachedData is not called', function () {\n      const rt = new WebGLRenderTarget(helper, [4, 4]);\n      helper.createTexture([4, 4], testImage_4x4, rt.getTexture());\n      const spy = sinon.spy(rt.helper_.getGL(), 'readPixels');\n      rt.readPixel(0, 0);\n      expect(spy.callCount).to.eql(1);\n      rt.readPixel(1, 1);\n      expect(spy.callCount).to.eql(1);\n      rt.clearCachedData();\n      rt.readPixel(2, 2);\n      expect(spy.callCount).to.eql(2);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"returns an array filled with 0 if outside of range","suites":["ol.webgl.RenderTarget","#readPixel"],"updatePoint":{"line":105,"column":58,"index":4108},"line":105,"code":"    it('returns an array filled with 0 if outside of range', function () {\n      const rt = new WebGLRenderTarget(helper, [4, 4]);\n      helper.createTexture([4, 4], testImage_4x4, rt.getTexture());\n      let data = rt.readPixel(-1, 0);\n      expect(data).to.eql([0, 0, 0, 0]);\n      data = rt.readPixel(3, -1);\n      expect(data).to.eql([0, 0, 0, 0]);\n      data = rt.readPixel(6, 2);\n      expect(data).to.eql([0, 0, 0, 0]);\n      data = rt.readPixel(2, 7);\n      expect(data).to.eql([0, 0, 0, 0]);\n      data = rt.readPixel(2, 3);\n      expect(data).not.to.eql([0, 0, 0, 0]);\n    });","file":"browser/spec/ol/webgl/rendertarget.test.js","skipped":false,"dir":"test"},{"name":"generates a symbol vertex shader (with varying)","suites":["ol.webgl.ShaderBuilder","getSymbolVertexShader"],"updatePoint":{"line":5,"column":55,"index":334},"line":5,"code":"    it('generates a symbol vertex shader (with varying)', function () {\n      const builder = new ShaderBuilder();\n      builder.addVarying('v_opacity', 'float', numberToGlsl(0.4));\n      builder.addVarying('v_test', 'vec3', arrayToGlsl([1, 2, 3]));\n      builder.setSymbolSizeExpression(`vec2(${numberToGlsl(6)})`);\n      builder.setSymbolOffsetExpression(arrayToGlsl([5, -7]));\n      builder.setSymbolColorExpression(colorToGlsl([80, 0, 255, 1]));\n      builder.setTextureCoordinateExpression(arrayToGlsl([0, 0.5, 0.5, 1]));\n      expect(builder.getSymbolVertexShader()).to.eql(`precision mediump float;\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform mediump int u_hitDetection;\n\n\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_hitColor;\n\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_hitColor;\nvarying float v_opacity;\nvarying vec3 v_test;\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix;\n  vec2 halfSize = vec2(6.0) * 0.5;\n  vec2 offset = vec2(5.0, -7.0);\n  float angle = 0.0;\n  float offsetX;\n  float offsetY;\n  if (a_index == 0.0) {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  } else if (a_index == 1.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else if (a_index == 2.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  }\n  vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  vec4 texCoord = vec4(0.0, 0.5, 0.5, 1.0);\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v = a_index == 2.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v_quadCoord = vec2(u, v);\n  v_hitColor = a_hitColor;\n  v_opacity = 0.4;\n  v_test = vec3(1.0, 2.0, 3.0);\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a symbol vertex shader (with uniforms and attributes)","suites":["ol.webgl.ShaderBuilder","getSymbolVertexShader"],"updatePoint":{"line":67,"column":71,"index":2963},"line":67,"code":"    it('generates a symbol vertex shader (with uniforms and attributes)', function () {\n      const builder = new ShaderBuilder();\n      builder.addUniform('float u_myUniform');\n      builder.addAttribute('vec2 a_myAttr');\n      builder.setSymbolSizeExpression(`vec2(${numberToGlsl(6)})`);\n      builder.setSymbolOffsetExpression(arrayToGlsl([5, -7]));\n      builder.setSymbolColorExpression(colorToGlsl([80, 0, 255, 1]));\n      builder.setTextureCoordinateExpression(arrayToGlsl([0, 0.5, 0.5, 1]));\n      expect(builder.getSymbolVertexShader()).to.eql(`precision mediump float;\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform mediump int u_hitDetection;\n\nuniform float u_myUniform;\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_hitColor;\nattribute vec2 a_myAttr;\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_hitColor;\n\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix;\n  vec2 halfSize = vec2(6.0) * 0.5;\n  vec2 offset = vec2(5.0, -7.0);\n  float angle = 0.0;\n  float offsetX;\n  float offsetY;\n  if (a_index == 0.0) {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  } else if (a_index == 1.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else if (a_index == 2.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  }\n  vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  vec4 texCoord = vec4(0.0, 0.5, 0.5, 1.0);\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v = a_index == 2.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v_quadCoord = vec2(u, v);\n  v_hitColor = a_hitColor;\n\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a symbol vertex shader (with rotateWithView)","suites":["ol.webgl.ShaderBuilder","getSymbolVertexShader"],"updatePoint":{"line":127,"column":62,"index":5495},"line":127,"code":"    it('generates a symbol vertex shader (with rotateWithView)', function () {\n      const builder = new ShaderBuilder();\n      builder.setSymbolSizeExpression(`vec2(${numberToGlsl(6)})`);\n      builder.setSymbolOffsetExpression(arrayToGlsl([5, -7]));\n      builder.setSymbolColorExpression(colorToGlsl([80, 0, 255, 1]));\n      builder.setTextureCoordinateExpression(arrayToGlsl([0, 0.5, 0.5, 1]));\n      builder.setSymbolRotateWithView(true);\n      expect(builder.getSymbolVertexShader()).to.eql(`precision mediump float;\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform mediump int u_hitDetection;\n\n\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_hitColor;\n\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_hitColor;\n\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  vec2 halfSize = vec2(6.0) * 0.5;\n  vec2 offset = vec2(5.0, -7.0);\n  float angle = 0.0;\n  float offsetX;\n  float offsetY;\n  if (a_index == 0.0) {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  } else if (a_index == 1.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else if (a_index == 2.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  }\n  vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  vec4 texCoord = vec4(0.0, 0.5, 0.5, 1.0);\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v = a_index == 2.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v_quadCoord = vec2(u, v);\n  v_hitColor = a_hitColor;\n\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a symbol vertex shader (with a rotation expression)","suites":["ol.webgl.ShaderBuilder","getSymbolVertexShader"],"updatePoint":{"line":186,"column":69,"index":7960},"line":186,"code":"    it('generates a symbol vertex shader (with a rotation expression)', function () {\n      const builder = new ShaderBuilder();\n      builder.setSymbolSizeExpression(`vec2(${numberToGlsl(6)})`);\n      builder.setSymbolOffsetExpression(arrayToGlsl([5, -7]));\n      builder.setSymbolRotationExpression('u_time * 0.2');\n      expect(builder.getSymbolVertexShader()).to.eql(`precision mediump float;\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform mediump int u_hitDetection;\n\n\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_hitColor;\n\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_hitColor;\n\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix;\n  vec2 halfSize = vec2(6.0) * 0.5;\n  vec2 offset = vec2(5.0, -7.0);\n  float angle = u_time * 0.2;\n  float offsetX;\n  float offsetY;\n  if (a_index == 0.0) {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  } else if (a_index == 1.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else if (a_index == 2.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  }\n  vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  vec4 texCoord = vec4(0.0, 0.0, 1.0, 1.0);\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v = a_index == 2.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v_quadCoord = vec2(u, v);\n  v_hitColor = a_hitColor;\n\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"returns null if no color or size specified","suites":["ol.webgl.ShaderBuilder","getSymbolVertexShader"],"updatePoint":{"line":243,"column":50,"index":10259},"line":243,"code":"    it('returns null if no color or size specified', function () {\n      const builder = new ShaderBuilder();\n      builder.setSymbolRotationExpression('1.0');\n      builder.setSymbolOffsetExpression('vec2(1.0)');\n      builder.setSymbolRotateWithView('0.0');\n      expect(builder.getSymbolVertexShader()).to.be(null);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a symbol fragment shader (with varying)","suites":["ol.webgl.ShaderBuilder","getSymbolFragmentShader"],"updatePoint":{"line":252,"column":57,"index":10651},"line":252,"code":"    it('generates a symbol fragment shader (with varying)', function () {\n      const builder = new ShaderBuilder();\n      builder.addVarying('v_opacity', 'float', numberToGlsl(0.4));\n      builder.addVarying('v_test', 'vec3', arrayToGlsl([1, 2, 3]));\n      builder.setSymbolSizeExpression(`vec2(${numberToGlsl(6)})`);\n      builder.setSymbolOffsetExpression(arrayToGlsl([5, -7]));\n      builder.setSymbolColorExpression(colorToGlsl([80, 0, 255]));\n      builder.setTextureCoordinateExpression(arrayToGlsl([0, 0.5, 0.5, 1]));\n      expect(builder.getSymbolFragmentShader()).to.eql(`precision mediump float;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform mediump int u_hitDetection;\n\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_hitColor;\nvarying float v_opacity;\nvarying vec3 v_test;\n\nvoid main(void) {\n  if (false) { discard; }\n  gl_FragColor = vec4(0.3137254901960784, 0.0, 1.0, 1.0);\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a symbol fragment shader (with uniforms)","suites":["ol.webgl.ShaderBuilder","getSymbolFragmentShader"],"updatePoint":{"line":282,"column":58,"index":11751},"line":282,"code":"    it('generates a symbol fragment shader (with uniforms)', function () {\n      const builder = new ShaderBuilder();\n      builder.addUniform('float u_myUniform');\n      builder.addUniform('vec2 u_myUniform2');\n      builder.setSymbolSizeExpression(`vec2(${numberToGlsl(6)})`);\n      builder.setSymbolOffsetExpression(arrayToGlsl([5, -7]));\n      builder.setSymbolColorExpression(colorToGlsl([255, 255, 255, 1]));\n      builder.setTextureCoordinateExpression(arrayToGlsl([0, 0.5, 0.5, 1]));\n      builder.setFragmentDiscardExpression('u_myUniform > 0.5');\n      expect(builder.getSymbolFragmentShader()).to.eql(`precision mediump float;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform mediump int u_hitDetection;\nuniform float u_myUniform;\nuniform vec2 u_myUniform2;\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_hitColor;\n\n\nvoid main(void) {\n  if (u_myUniform > 0.5) { discard; }\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"returns null if no color or size specified","suites":["ol.webgl.ShaderBuilder","getSymbolFragmentShader"],"updatePoint":{"line":313,"column":50,"index":12878},"line":313,"code":"    it('returns null if no color or size specified', function () {\n      const builder = new ShaderBuilder();\n      builder.setSymbolRotationExpression('1.0');\n      builder.setSymbolOffsetExpression('vec2(1.0)');\n      builder.setSymbolRotateWithView('0.0');\n      expect(builder.getSymbolFragmentShader()).to.be(null);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a stroke vertex shader (with uniforms, varying and attributes)","suites":["ol.webgl.ShaderBuilder","getStrokeVertexShader"],"updatePoint":{"line":322,"column":80,"index":13293},"line":322,"code":"    it('generates a stroke vertex shader (with uniforms, varying and attributes)', function () {\n      const builder = new ShaderBuilder();\n      builder.addVarying('v_opacity', 'float', numberToGlsl(0.4));\n      builder.addVarying('v_test', 'vec3', arrayToGlsl([1, 2, 3]));\n      builder.addUniform('float u_myUniform');\n      builder.addAttribute('vec2 a_myAttr');\n      builder.setStrokeWidthExpression(numberToGlsl(4));\n      builder.setStrokeColorExpression(colorToGlsl([80, 0, 255, 1]));\n      expect(builder.getStrokeVertexShader()).to.eql(`#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform vec4 u_renderExtent;\nuniform mediump int u_hitDetection;\n\nuniform float u_myUniform;\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec2 a_segmentStart;\nattribute vec2 a_segmentEnd;\nattribute float a_parameters;\nattribute vec4 a_hitColor;\nattribute vec2 a_myAttr;\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_hitColor;\nvarying float v_opacity;\nvarying vec3 v_test;\n\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvec4 pxToScreen(vec2 pxPos) {\n  vec2 screenPos = pxPos * 4.0 / u_viewportSizePx;\n  return vec4(screenPos.xy, 0.0, 0.0);\n}\n\nvec2 getOffsetDirection(vec2 normalPx, vec2 tangentPx, float joinAngle) {\n  if (cos(joinAngle) > 0.93) return normalPx - tangentPx;\n  float halfAngle = joinAngle / 2.0;\n  vec2 angleBisectorNormal = vec2(\n    sin(halfAngle) * normalPx.x + cos(halfAngle) * normalPx.y,\n    -cos(halfAngle) * normalPx.x + sin(halfAngle) * normalPx.y\n  );\n  float length = 1.0 / sin(halfAngle);\n  return angleBisectorNormal * length;\n}\n\nvoid main(void) {\n  float lineWidth = 4.0;\n  float anglePrecision = 1500.0;\n  float paramShift = 10000.0;\n  v_angleStart = fract(a_parameters / paramShift) * paramShift / anglePrecision;\n  v_angleEnd = fract(floor(a_parameters / paramShift + 0.5) / paramShift) * paramShift / anglePrecision;\n  float vertexNumber = floor(a_parameters / paramShift / paramShift + 0.0001);\n  vec2 tangentPx = worldToPx(a_segmentEnd) - worldToPx(a_segmentStart);\n  tangentPx = normalize(tangentPx);\n  vec2 normalPx = vec2(-tangentPx.y, tangentPx.x);\n  float normalDir = vertexNumber < 0.5 || (vertexNumber > 1.5 && vertexNumber < 2.5) ? 1.0 : -1.0;\n  float tangentDir = vertexNumber < 1.5 ? 1.0 : -1.0;\n  float angle = vertexNumber < 1.5 ? v_angleStart : v_angleEnd;\n  vec2 offsetPx = getOffsetDirection(normalPx * normalDir, tangentDir * tangentPx, angle) * lineWidth * 0.5;\n  vec2 position =  vertexNumber < 1.5 ? a_segmentStart : a_segmentEnd;\n  gl_Position = u_projectionMatrix * vec4(position, 0.0, 1.0) + pxToScreen(offsetPx);\n  v_segmentStart = worldToPx(a_segmentStart);\n  v_segmentEnd = worldToPx(a_segmentEnd);\n  v_width = lineWidth;\n  v_hitColor = a_hitColor;\n  v_opacity = 0.4;\n  v_test = vec3(1.0, 2.0, 3.0);\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"returns null if no color or size specified","suites":["ol.webgl.ShaderBuilder","getStrokeVertexShader"],"updatePoint":{"line":408,"column":50,"index":16538},"line":408,"code":"    it('returns null if no color or size specified', function () {\n      const builder = new ShaderBuilder();\n      expect(builder.getStrokeVertexShader()).to.be(null);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a stroke fragment shader (with varying, attribute and uniform)","suites":["ol.webgl.ShaderBuilder","getStrokeFragmentShader"],"updatePoint":{"line":414,"column":80,"index":16803},"line":414,"code":"    it('generates a stroke fragment shader (with varying, attribute and uniform)', function () {\n      const builder = new ShaderBuilder();\n      builder.addVarying('v_opacity', 'float', numberToGlsl(0.4));\n      builder.addVarying('v_test', 'vec3', arrayToGlsl([1, 2, 3]));\n      builder.addUniform('float u_myUniform');\n      builder.addAttribute('vec2 a_myAttr');\n      builder.setStrokeWidthExpression(numberToGlsl(4));\n      builder.setStrokeColorExpression(colorToGlsl([80, 0, 255, 1]));\n      builder.setFragmentDiscardExpression('u_myUniform > 0.5');\n      expect(builder.getStrokeFragmentShader()).to.eql(`#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform vec4 u_renderExtent;\nuniform mediump int u_hitDetection;\n\nuniform float u_myUniform;\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_hitColor;\nvarying float v_opacity;\nvarying vec3 v_test;\n\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nfloat segmentDistanceField(vec2 point, vec2 start, vec2 end, float radius) {\n  vec2 startToPoint = point - start;\n  vec2 startToEnd = end - start;\n  float ratio = clamp(dot(startToPoint, startToEnd) / dot(startToEnd, startToEnd), 0.0, 1.0);\n  float dist = length(startToPoint - ratio * startToEnd);\n  return 1.0 - smoothstep(radius - 1.0, radius, dist);\n}\n\nvoid main(void) {\n  vec2 v_currentPoint = gl_FragCoord.xy / u_pixelRatio;\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 v_worldPos = pxToWorld(v_currentPoint);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      v_worldPos[0] < u_renderExtent[0] ||\n      v_worldPos[1] < u_renderExtent[1] ||\n      v_worldPos[0] > u_renderExtent[2] ||\n      v_worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (u_myUniform > 0.5) { discard; }\n  gl_FragColor = vec4(0.3137254901960784, 0.0, 1.0, 1.0) * u_globalAlpha;\n  gl_FragColor *= segmentDistanceField(v_currentPoint, v_segmentStart, v_segmentEnd, v_width);\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"returns null if no color or size specified","suites":["ol.webgl.ShaderBuilder","getStrokeFragmentShader"],"updatePoint":{"line":486,"column":50,"index":19277},"line":486,"code":"    it('returns null if no color or size specified', function () {\n      const builder = new ShaderBuilder();\n      expect(builder.getStrokeFragmentShader()).to.be(null);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a fill vertex shader (with varying, attribute and uniform)","suites":["ol.webgl.ShaderBuilder","getFillVertexShader"],"updatePoint":{"line":492,"column":76,"index":19536},"line":492,"code":"    it('generates a fill vertex shader (with varying, attribute and uniform)', function () {\n      const builder = new ShaderBuilder();\n      builder.addVarying('v_opacity', 'float', numberToGlsl(0.4));\n      builder.addVarying('v_test', 'vec3', arrayToGlsl([1, 2, 3]));\n      builder.addUniform('float u_myUniform');\n      builder.addAttribute('vec2 a_myAttr');\n      builder.setFillColorExpression(colorToGlsl([80, 0, 255, 1]));\n      builder.setFragmentDiscardExpression('u_myUniform > 0.5');\n      expect(builder.getFillVertexShader()).to.eql(`#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform vec4 u_renderExtent;\nuniform mediump int u_hitDetection;\n\nuniform float u_myUniform;\nattribute vec2 a_position;\nattribute vec4 a_hitColor;\nattribute vec2 a_myAttr;\nvarying vec4 v_hitColor;\nvarying float v_opacity;\nvarying vec3 v_test;\n\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  v_opacity = 0.4;\n  v_test = vec3(1.0, 2.0, 3.0);\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"returns null if no color specified","suites":["ol.webgl.ShaderBuilder","getFillVertexShader"],"updatePoint":{"line":530,"column":42,"index":20765},"line":530,"code":"    it('returns null if no color specified', function () {\n      const builder = new ShaderBuilder();\n      expect(builder.getFillVertexShader()).to.be(null);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"generates a fill fragment shader (with varying, attribute and uniform)","suites":["ol.webgl.ShaderBuilder","getFillFragmentShader"],"updatePoint":{"line":536,"column":78,"index":21024},"line":536,"code":"    it('generates a fill fragment shader (with varying, attribute and uniform)', function () {\n      const builder = new ShaderBuilder();\n      builder.addVarying('v_opacity', 'float', numberToGlsl(0.4));\n      builder.addVarying('v_test', 'vec3', arrayToGlsl([1, 2, 3]));\n      builder.addUniform('float u_myUniform');\n      builder.addAttribute('vec2 a_myAttr');\n      builder.setFillColorExpression(colorToGlsl([80, 0, 255, 1]));\n      builder.setFragmentDiscardExpression('u_myUniform > 0.5');\n      expect(builder.getFillFragmentShader()).to.eql(`#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform vec4 u_renderExtent;\nuniform mediump int u_hitDetection;\n\nuniform float u_myUniform;\nvarying vec4 v_hitColor;\nvarying float v_opacity;\nvarying vec3 v_test;\n\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nvoid main(void) {\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 v_worldPos = pxToWorld(gl_FragCoord.xy / u_pixelRatio);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      v_worldPos[0] < u_renderExtent[0] ||\n      v_worldPos[1] < u_renderExtent[1] ||\n      v_worldPos[0] > u_renderExtent[2] ||\n      v_worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (u_myUniform > 0.5) { discard; }\n  gl_FragColor = vec4(0.3137254901960784, 0.0, 1.0, 1.0) * u_globalAlpha;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"returns null if no color specified","suites":["ol.webgl.ShaderBuilder","getFillFragmentShader"],"updatePoint":{"line":592,"column":42,"index":22804},"line":592,"code":"    it('returns null if no color specified', function () {\n      const builder = new ShaderBuilder();\n      expect(builder.getFillFragmentShader()).to.be(null);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"adds the function in all vertex shaders","suites":["ol.webgl.ShaderBuilder","addVertexShaderFunction"],"updatePoint":{"line":607,"column":47,"index":23386},"line":607,"code":"    it('adds the function in all vertex shaders', () => {\n      expect(builder.getFillVertexShader()).to.contain(FN1);\n      expect(builder.getStrokeVertexShader()).to.contain(FN1);\n      expect(builder.getSymbolVertexShader()).to.contain(FN1);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"adds the function in all vertex shaders","suites":["ol.webgl.ShaderBuilder","addFragmentShaderFunction"],"updatePoint":{"line":623,"column":47,"index":24036},"line":623,"code":"    it('adds the function in all vertex shaders', () => {\n      expect(builder.getFillFragmentShader()).to.contain(FN2);\n      expect(builder.getStrokeFragmentShader()).to.contain(FN2);\n      expect(builder.getSymbolFragmentShader()).to.contain(FN2);\n    });","file":"browser/spec/ol/webgl/shaderbuilder.test.js","skipped":false,"dir":"test"},{"name":"parses a style with variables","suites":["ol.webgl.styleparser","parseLiteralStyle"],"updatePoint":{"line":7,"column":37,"index":421},"line":7,"code":"    it('parses a style with variables', function () {\n      const result = parseLiteralStyle({\n        variables: {\n          lower: 100,\n          higher: 400\n        },\n        symbol: {\n          symbolType: 'square',\n          size: ['interpolate', ['linear'], ['get', 'population'], ['var', 'lower'], 4, ['var', 'higher'], 8],\n          color: '#336699',\n          opacity: 0.5\n        }\n      });\n      const lowerUniformName = uniformNameForVariable('lower');\n      const higherUniformName = uniformNameForVariable('higher');\n      expect(result.builder.uniforms_).to.eql([`float ${lowerUniformName}`, `float ${higherUniformName}`]);\n      expect(result.builder.attributes_).to.eql(['float a_population']);\n      expect(result.builder.varyings_).to.eql([{\n        name: 'v_population',\n        type: 'float',\n        expression: 'a_population'\n      }]);\n      expect(result.builder.symbolColorExpression_).to.eql('vec4(vec4(0.2, 0.4, 0.6, 1.0).rgb, vec4(0.2, 0.4, 0.6, 1.0).a * 0.5) * vec4(1.0, 1.0, 1.0, 1.0)');\n      expect(result.builder.symbolSizeExpression_).to.eql(`vec2(mix(4.0, 8.0, clamp((a_population - ${lowerUniformName}) / (${higherUniformName} - ${lowerUniformName}), 0.0, 1.0)))`);\n      expect(Object.keys(result.attributes).length).to.eql(1);\n      expect(result.attributes).to.have.property('population');\n      expect(result.uniforms).to.have.property(lowerUniformName);\n      expect(result.uniforms).to.have.property(higherUniformName);\n    });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"parses a style with a filter","suites":["ol.webgl.styleparser","parseLiteralStyle"],"updatePoint":{"line":36,"column":36,"index":1893},"line":36,"code":"    it('parses a style with a filter', function () {\n      const result = parseLiteralStyle({\n        filter: ['between', ['get', 'attr0'], 0, 10],\n        symbol: {\n          symbolType: 'square',\n          size: 6,\n          color: '#336699'\n        }\n      });\n      expect(result.builder.attributes_).to.eql(['float a_attr0']);\n      expect(result.builder.varyings_).to.eql([{\n        name: 'v_attr0',\n        type: 'float',\n        expression: 'a_attr0'\n      }]);\n      expect(result.builder.symbolColorExpression_).to.eql('vec4(vec4(0.2, 0.4, 0.6, 1.0).rgb, vec4(0.2, 0.4, 0.6, 1.0).a * 1.0) * vec4(1.0, 1.0, 1.0, 1.0)');\n      expect(result.builder.symbolSizeExpression_).to.eql('vec2(6.0)');\n      expect(result.builder.discardExpression_).to.eql('!(v_attr0 >= 0.0 && v_attr0 <= 10.0)');\n      expect(Object.keys(result.attributes).length).to.eql(1);\n      expect(result.attributes).to.have.property('attr0');\n    });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"correctly adds string variables to the string literals mapping","suites":["ol.webgl.styleparser","parseLiteralStyle"],"updatePoint":{"line":57,"column":70,"index":2854},"line":57,"code":"    it('correctly adds string variables to the string literals mapping', function () {\n      const varName = 'mySize';\n      const uniformName = uniformNameForVariable(varName);\n      const result = parseLiteralStyle({\n        variables: {\n          mySize: 'abcdef'\n        },\n        symbol: {\n          symbolType: 'square',\n          size: ['match', ['var', varName], 'abc', 10, 'def', 20, 30],\n          color: 'red'\n        }\n      });\n      expect(result.uniforms[uniformName]()).to.be.greaterThan(0);\n    });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"without expressions","suites":["ol.webgl.styleparser","parseLiteralStyle","symbol style"],"updatePoint":{"line":73,"column":29,"index":3373},"line":73,"code":"      it('without expressions', function () {\n        const result = parseLiteralStyle({\n          symbol: {\n            symbolType: 'square',\n            size: [4, 8],\n            color: '#ff0000',\n            rotateWithView: true\n          }\n        });\n        expect(result.builder.uniforms_).to.eql([]);\n        expect(result.builder.attributes_).to.eql([]);\n        expect(result.builder.varyings_).to.eql([]);\n        expect(result.builder.symbolColorExpression_).to.eql('vec4(vec4(1.0, 0.0, 0.0, 1.0).rgb, vec4(1.0, 0.0, 0.0, 1.0).a * 1.0) * vec4(1.0, 1.0, 1.0, 1.0)');\n        expect(result.builder.symbolSizeExpression_).to.eql('vec2(vec2(4.0, 8.0))');\n        expect(result.builder.symbolRotateWithView_).to.eql(true);\n        expect(result.attributes).to.eql([]);\n        expect(result.uniforms).to.eql({});\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"with expressions","suites":["ol.webgl.styleparser","parseLiteralStyle","symbol style"],"updatePoint":{"line":91,"column":26,"index":4200},"line":91,"code":"      it('with expressions', function () {\n        const result = parseLiteralStyle({\n          symbol: {\n            symbolType: 'square',\n            size: ['get', 'attr1', 'number'],\n            color: [255, 127.5, 63.75, 0.25],\n            textureCoord: [0.5, 0.5, 0.5, 1],\n            offset: ['match', ['get', 'attr3'], 'red', [6, 0], 'green', [3, 0], [0, 0]]\n          }\n        });\n        expect(result.builder.uniforms_).to.eql([]);\n        expect(result.builder.attributes_).to.eql(['float a_attr1', 'float a_attr3']);\n        expect(result.builder.varyings_).to.eql([{\n          name: 'v_attr1',\n          type: 'float',\n          expression: 'a_attr1'\n        }]);\n        expect(result.builder.symbolColorExpression_).to.eql('vec4(vec4(0.25, 0.125, 0.0625, 0.25).rgb, vec4(0.25, 0.125, 0.0625, 0.25).a * 1.0) * vec4(1.0, 1.0, 1.0, 1.0)');\n        expect(result.builder.symbolSizeExpression_).to.eql('vec2(a_attr1)');\n        expect(result.builder.symbolOffsetExpression_).to.eql('(a_attr3 == 1.0 ? vec2(6.0, 0.0) : (a_attr3 == 0.0 ? vec2(3.0, 0.0) : vec2(0.0, 0.0)))');\n        expect(result.builder.texCoordExpression_).to.eql('vec4(0.5, 0.5, 0.5, 1.0)');\n        expect(result.builder.symbolRotateWithView_).to.eql(false);\n        expect(Object.keys(result.attributes).length).to.eql(2);\n        expect(result.attributes).to.have.property('attr1');\n        expect(result.attributes).to.have.property('attr3');\n        expect(result.uniforms).to.eql({});\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"with a uniform (texture)","suites":["ol.webgl.styleparser","parseLiteralStyle","symbol style"],"updatePoint":{"line":118,"column":34,"index":5688},"line":118,"code":"      it('with a uniform (texture)', function () {\n        const result = parseLiteralStyle({\n          symbol: {\n            symbolType: 'image',\n            src: '../data/image.png',\n            size: 6,\n            color: '#336699',\n            opacity: 0.5\n          }\n        });\n        expect(result.builder.uniforms_).to.eql(['sampler2D u_texture']);\n        expect(result.builder.attributes_).to.eql([]);\n        expect(result.builder.varyings_).to.eql([]);\n        expect(result.builder.symbolColorExpression_).to.eql('vec4(vec4(0.2, 0.4, 0.6, 1.0).rgb, vec4(0.2, 0.4, 0.6, 1.0).a * 0.5) * texture2D(u_texture, v_texCoord)');\n        expect(result.builder.symbolSizeExpression_).to.eql('vec2(6.0)');\n        expect(result.builder.symbolRotateWithView_).to.eql(false);\n        expect(result.attributes).to.eql([]);\n        expect(result.uniforms).to.have.property('u_texture');\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"with a color interpolation","suites":["ol.webgl.styleparser","parseLiteralStyle","symbol style"],"updatePoint":{"line":137,"column":36,"index":6587},"line":137,"code":"      it('with a color interpolation', function () {\n        const varName = 'ratio';\n        const uniformName = uniformNameForVariable(varName);\n        const result = parseLiteralStyle({\n          variables: {\n            [varName]: 0.5\n          },\n          symbol: {\n            symbolType: 'square',\n            size: 6,\n            color: ['interpolate', ['linear'], ['var', varName], 0, [255, 255, 0], 1, 'red']\n          }\n        });\n        expect(result.builder.attributes_).to.eql([]);\n        expect(result.builder.varyings_).to.eql([]);\n        expect(result.builder.symbolColorExpression_).to.eql(`vec4(mix(vec4(1.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0), clamp((u_var_ratio - 0.0) / (1.0 - 0.0), 0.0, 1.0)).rgb, mix(vec4(1.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0), clamp((u_var_ratio - 0.0) / (1.0 - 0.0), 0.0, 1.0)).a * 1.0) * vec4(1.0, 1.0, 1.0, 1.0)`);\n        expect(result.builder.symbolSizeExpression_).to.eql('vec2(6.0)');\n        expect(result.attributes).to.eql([]);\n        expect(result.uniforms).to.have.property(uniformName);\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"with a rotation expression using an attribute","suites":["ol.webgl.styleparser","parseLiteralStyle","symbol style"],"updatePoint":{"line":157,"column":55,"index":7679},"line":157,"code":"      it('with a rotation expression using an attribute', function () {\n        const result = parseLiteralStyle({\n          symbol: {\n            symbolType: 'square',\n            size: 6,\n            rotation: ['get', 'heading']\n          }\n        });\n        expect(result.builder.attributes_).to.eql(['float a_heading']);\n        expect(result.builder.varyings_).to.eql([]);\n        expect(result.builder.symbolRotationExpression_).to.eql('a_heading');\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"parses style","suites":["ol.webgl.styleparser","parseLiteralStyle","stroke style"],"updatePoint":{"line":171,"column":22,"index":8165},"line":171,"code":"      it('parses style', function () {\n        const result = parseLiteralStyle({\n          variables: {\n            width: 1\n          },\n          ['stroke-color']: ['interpolate', ['linear'], ['get', 'intensity'], 0, 'blue', 1, 'red'],\n          ['stroke-width']: ['*', ['var', 'width'], 3]\n        });\n        expect(result.builder.uniforms_).to.eql(['float u_var_width']);\n        expect(result.builder.attributes_).to.eql(['float a_intensity']);\n        expect(result.builder.varyings_).to.eql([{\n          name: 'v_intensity',\n          type: 'float',\n          expression: 'a_intensity'\n        }]);\n        expect(result.builder.strokeColorExpression_).to.eql('mix(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0), clamp((v_intensity - 0.0) / (1.0 - 0.0), 0.0, 1.0))');\n        expect(result.builder.strokeWidthExpression_).to.eql('(u_var_width * 3.0)');\n        expect(Object.keys(result.attributes).length).to.eql(1);\n        expect(result.attributes).to.have.property('intensity');\n        expect(result.uniforms).to.have.property('u_var_width');\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"parses style","suites":["ol.webgl.styleparser","parseLiteralStyle","fill style"],"updatePoint":{"line":194,"column":22,"index":9285},"line":194,"code":"      it('parses style', function () {\n        const result = parseLiteralStyle({\n          variables: {\n            scale: 10\n          },\n          ['fill-color']: ['interpolate', ['linear'], ['*', ['get', 'intensity'], ['var', 'scale']], 0, 'blue', 10, 'red']\n        });\n        expect(result.builder.uniforms_).to.eql(['float u_var_scale']);\n        expect(result.builder.attributes_).to.eql(['float a_intensity']);\n        expect(result.builder.varyings_).to.eql([{\n          name: 'v_intensity',\n          type: 'float',\n          expression: 'a_intensity'\n        }]);\n        expect(result.builder.fillColorExpression_).to.eql('mix(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0), clamp(((v_intensity * u_var_scale) - 0.0) / (10.0 - 0.0), 0.0, 1.0))');\n        expect(Object.keys(result.attributes).length).to.eql(1);\n        expect(result.attributes).to.have.property('intensity');\n        expect(result.uniforms).to.have.property('u_var_scale');\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"adds attributes to the shader builder","suites":["ol.webgl.styleparser","parseLiteralStyle","handle attributes of types other that number"],"updatePoint":{"line":227,"column":47,"index":10853},"line":227,"code":"      it('adds attributes to the shader builder', () => {\n        expect(parseResult.builder.attributes_).to.eql(['vec4 a_iconSize', 'float a_lineType', 'float a_lineWidth', 'vec2 a_color', 'vec2 a_fillColor', 'float a_transparent']);\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"adds varyings to the shader builder","suites":["ol.webgl.styleparser","parseLiteralStyle","handle attributes of types other that number"],"updatePoint":{"line":230,"column":45,"index":11096},"line":230,"code":"      it('adds varyings to the shader builder', () => {\n        expect(parseResult.builder.varyings_).to.eql([{\n          name: 'v_color',\n          type: 'vec4',\n          expression: 'unpackColor(a_color)'\n        }, {\n          name: 'v_iconSize',\n          type: 'vec4',\n          expression: 'a_iconSize'\n        }, {\n          name: 'v_fillColor',\n          type: 'vec4',\n          expression: 'unpackColor(a_fillColor)'\n        }, {\n          name: 'v_transparent',\n          type: 'float',\n          expression: 'a_transparent'\n        }]);\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"adds unpack color function to the shader builder","suites":["ol.webgl.styleparser","parseLiteralStyle","handle attributes of types other that number"],"updatePoint":{"line":249,"column":58,"index":11668},"line":249,"code":"      it('adds unpack color function to the shader builder', () => {\n        expect(parseResult.builder.vertexShaderFunctions_.length).to.eql(1);\n        expect(parseResult.builder.vertexShaderFunctions_[0]).to.contain('vec4 unpackColor(');\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"returns attributes with their callbacks in the result","suites":["ol.webgl.styleparser","parseLiteralStyle","handle attributes of types other that number"],"updatePoint":{"line":253,"column":63,"index":11924},"line":253,"code":"      it('returns attributes with their callbacks in the result', () => {\n        expect(parseResult.attributes).to.eql({\n          iconSize: {\n            size: 4,\n            callback: {}\n          },\n          color: {\n            size: 2,\n            callback: {}\n          },\n          lineType: {\n            size: 1,\n            callback: {}\n          },\n          lineWidth: {\n            size: 1,\n            callback: {}\n          },\n          fillColor: {\n            size: 2,\n            callback: {}\n          },\n          transparent: {\n            size: 1,\n            callback: {}\n          }\n        });\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"processes the feature attributes according to their types","suites":["ol.webgl.styleparser","parseLiteralStyle","handle attributes of types other that number"],"updatePoint":{"line":281,"column":67,"index":12559},"line":281,"code":"      it('processes the feature attributes according to their types', () => {\n        const feature = new Feature({\n          iconSize: [12, 18],\n          color: 'pink',\n          lineType: 'low',\n          lineWidth: 0.5,\n          fillColor: 'rgba(123, 240, 100, 0.3)',\n          transparent: true\n        });\n        expect(parseResult.attributes['iconSize'].callback(feature)).to.eql([12, 18]);\n        expect(parseResult.attributes['color'].callback(feature)).to.eql(packColor(asArray('pink')));\n        expect(parseResult.attributes['lineType'].callback(feature)).to.be.a('number');\n        expect(parseResult.attributes['lineWidth'].callback(feature)).to.eql(0.5);\n        expect(parseResult.attributes['fillColor'].callback(feature)).to.eql(packColor(asArray('rgba(123, 240, 100, 0.3)')));\n        expect(parseResult.attributes['transparent'].callback(feature)).to.eql(1);\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"adds uniforms to the shader builder","suites":["ol.webgl.styleparser","parseLiteralStyle","handle uniforms of types other that number"],"updatePoint":{"line":319,"column":45,"index":14221},"line":319,"code":"      it('adds uniforms to the shader builder', () => {\n        expect(parseResult.builder.uniforms_).to.eql(['vec2 u_var_color', 'vec4 u_var_iconSize', 'float u_var_lineType', 'float u_var_lineWidth', 'vec2 u_var_fillColor', 'float u_var_transparent']);\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"returns uniforms in the result","suites":["ol.webgl.styleparser","parseLiteralStyle","handle uniforms of types other that number"],"updatePoint":{"line":322,"column":40,"index":14481},"line":322,"code":"      it('returns uniforms in the result', () => {\n        expect(Object.keys(parseResult.uniforms)).to.eql(['u_var_color', 'u_var_iconSize', 'u_var_lineType', 'u_var_lineWidth', 'u_var_fillColor', 'u_var_transparent']);\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"processes uniforms according to their types","suites":["ol.webgl.styleparser","parseLiteralStyle","handle uniforms of types other that number"],"updatePoint":{"line":325,"column":53,"index":14725},"line":325,"code":"      it('processes uniforms according to their types', () => {\n        expect(parseResult.uniforms['u_var_iconSize']()).to.eql([12, 18]);\n        expect(parseResult.uniforms['u_var_color']()).to.eql(packColor(asArray('pink')));\n        expect(parseResult.uniforms['u_var_lineType']()).to.be.a('number');\n        expect(parseResult.uniforms['u_var_lineWidth']()).to.eql(0.5);\n        expect(parseResult.uniforms['u_var_fillColor']()).to.eql(packColor(asArray('rgba(123, 240, 100, 0.3)')));\n        expect(parseResult.uniforms['u_var_transparent']()).to.eql(1);\n      });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"compresses all the components of a color into a [number, number] array","suites":["ol.webgl.styleparser","packColor"],"updatePoint":{"line":336,"column":78,"index":15367},"line":336,"code":"    it('compresses all the components of a color into a [number, number] array', () => {\n      expect(packColor(asArray('red'))).to.eql([65280, 255]);\n      expect(packColor(asArray('rgba(0, 255, 255, 0.5)'))).to.eql([255, 65408]);\n    });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"adds shader functions in the vertex and fragment shaders","suites":["ol.webgl.styleparser","shader functions"],"updatePoint":{"line":342,"column":64,"index":15638},"line":342,"code":"    it('adds shader functions in the vertex and fragment shaders', () => {\n      const result = parseLiteralStyle({\n        ['stroke-width']: 2,\n        filter: ['in', ['get', 'type'], ['literal', ['road', 'path', 'street']]]\n      });\n      expect(result.builder.vertexShaderFunctions_).to.eql([]);\n      expect(result.builder.fragmentShaderFunctions_).to.contain(`bool operator_in_0(float inputValue) {\n  if (inputValue == 0.0) { return true; }\n  if (inputValue == 1.0) { return true; }\n  if (inputValue == 2.0) { return true; }\n  return false;\n}`);\n    });","file":"browser/spec/ol/webgl/styleparser.test.js","skipped":false,"dir":"test"},{"name":"assigns the given tile","suites":["ol/webgl/TileGeometry","tile provided initially"],"updatePoint":{"line":42,"column":30,"index":1599},"line":42,"code":"    it('assigns the given tile', () => {\n      expect(tileGeometry.tile).to.be.a(VectorRenderTile);\n    });","file":"browser/spec/ol/webgl/TileGeometry.test.js","skipped":false,"dir":"test"},{"name":"creates a new geometry batch","suites":["ol/webgl/TileGeometry","tile provided initially"],"updatePoint":{"line":45,"column":36,"index":1713},"line":45,"code":"    it('creates a new geometry batch', () => {\n      expect(tileGeometry.batch_).to.be.a(MixedGeometryBatch);\n    });","file":"browser/spec/ol/webgl/TileGeometry.test.js","skipped":false,"dir":"test"},{"name":"first clears the geometry batch","suites":["ol/webgl/TileGeometry","tile provided asynchronously"],"updatePoint":{"line":67,"column":39,"index":2619},"line":67,"code":"    it('first clears the geometry batch', () => {\n      expect(tileGeometry.batch_.clear.calledOnce).to.be(true);\n    });","file":"browser/spec/ol/webgl/TileGeometry.test.js","skipped":false,"dir":"test"},{"name":"adds all features from the source tiles into the batch","suites":["ol/webgl/TileGeometry","tile provided asynchronously"],"updatePoint":{"line":70,"column":62,"index":2764},"line":70,"code":"    it('adds all features from the source tiles into the batch', () => {\n      expect(tileGeometry.batch_.addFeatures.calledOnce).to.be(true);\n      expect(tileGeometry.batch_.addFeatures.calledWith(features)).to.be(true);\n    });","file":"browser/spec/ol/webgl/TileGeometry.test.js","skipped":false,"dir":"test"},{"name":"calls generateBuffers for each renderer with the tile origin as transform","suites":["ol/webgl/TileGeometry","tile provided asynchronously"],"updatePoint":{"line":74,"column":81,"index":3014},"line":74,"code":"    it('calls generateBuffers for each renderer with the tile origin as transform', () => {\n      const originTransform = [1, 0, 0, 1, 100, 200];\n      expect(styleRenderers[0].generateBuffers.callCount).to.be(1);\n      expect(styleRenderers[0].generateBuffers.getCall(0).args[1]).to.eql(originTransform);\n      expect(styleRenderers[1].generateBuffers.callCount).to.be(1);\n      expect(styleRenderers[1].generateBuffers.getCall(0).args[1]).to.eql(originTransform);\n    });","file":"browser/spec/ol/webgl/TileGeometry.test.js","skipped":false,"dir":"test"},{"name":"becomes ready when each of the renderers have finished generating buffers","suites":["ol/webgl/TileGeometry","tile provided asynchronously"],"updatePoint":{"line":81,"column":81,"index":3488},"line":81,"code":"    it('becomes ready when each of the renderers have finished generating buffers', async () => {\n      expect(tileGeometry.ready).to.be(false);\n      styleRenderers[0].endGenerate_();\n      expect(tileGeometry.ready).to.be(false);\n      styleRenderers[1].endGenerate_();\n      await new Promise(resolve => setTimeout(resolve));\n      expect(tileGeometry.ready).to.be(true);\n    });","file":"browser/spec/ol/webgl/TileGeometry.test.js","skipped":false,"dir":"test"},{"name":"constructor","suites":["ol/webgl/TileTexture"],"updatePoint":{"line":50,"column":17,"index":1868},"line":50,"code":"  it('constructor', function () {\n    expect(tileTexture.tile.tileCoord).to.eql([3, 2, 1]);\n    expect(tileTexture.coords).to.be.a(WebGLArrayBuffer);\n  });","file":"browser/spec/ol/webgl/TileTexture.test.js","skipped":false,"dir":"test"},{"name":"handles data tiles","suites":["ol/webgl/TileTexture"],"updatePoint":{"line":54,"column":24,"index":2031},"line":54,"code":"  it('handles data tiles', function (done) {\n    const dataTile = tileTexture.tile;\n    expect(tileTexture.loaded).to.be(false);\n    expect(dataTile.getState()).to.be(TileState.IDLE);\n    tileTexture.addEventListener('change', () => {\n      if (dataTile.getState() === TileState.LOADED) {\n        expect(tileTexture.loaded).to.be(true);\n        done();\n      }\n    });\n    dataTile.load();\n  });","file":"browser/spec/ol/webgl/TileTexture.test.js","skipped":false,"dir":"test"},{"name":"handles image tiles","suites":["ol/webgl/TileTexture"],"updatePoint":{"line":66,"column":25,"index":2428},"line":66,"code":"  it('handles image tiles', function () {\n    const imageTile = new ImageTile([0, 0, 0], TileState.LOADED);\n    tileTexture.setTile(imageTile);\n    expect(tileTexture.loaded).to.be(true);\n  });","file":"browser/spec/ol/webgl/TileTexture.test.js","skipped":false,"dir":"test"},{"name":"sets anonymous cors mode for image tiles by default","suites":["ol/webgl/TileTexture"],"updatePoint":{"line":71,"column":57,"index":2654},"line":71,"code":"  it('sets anonymous cors mode for image tiles by default', function () {\n    const tile = new ImageTile([0, 0, 0], TileState.IDLE);\n    tileTexture.setTile(tile);\n    const image = tile.getImage();\n    expect(image.crossOrigin).to.be('anonymous');\n  });","file":"browser/spec/ol/webgl/TileTexture.test.js","skipped":false,"dir":"test"},{"name":"resepects any existing cors mode","suites":["ol/webgl/TileTexture"],"updatePoint":{"line":77,"column":38,"index":2890},"line":77,"code":"  it('resepects any existing cors mode', function () {\n    const tile = new ImageTile([0, 0, 0], TileState.IDLE, 'https://example.com/tile.png', 'use-credentials');\n    tileTexture.setTile(tile);\n    const image = tile.getImage();\n    expect(image.crossOrigin).to.be('use-credentials');\n  });","file":"browser/spec/ol/webgl/TileTexture.test.js","skipped":false,"dir":"test"},{"name":"registers and unregisters change listener","suites":["ol/webgl/TileTexture"],"updatePoint":{"line":83,"column":47,"index":3192},"line":83,"code":"  it('registers and unregisters change listener', function () {\n    const tile = tileTexture.tile;\n    expect(tile.getListeners('change').length).to.be(2);\n    tileTexture.dispose();\n    expect(tile.getListeners('change').length).to.be(1);\n  });","file":"browser/spec/ol/webgl/TileTexture.test.js","skipped":false,"dir":"test"},{"name":"updates metadata and unregisters change listener when setting a different tile","suites":["ol/webgl/TileTexture"],"updatePoint":{"line":89,"column":84,"index":3475},"line":89,"code":"  it('updates metadata and unregisters change listener when setting a different tile', function (done) {\n    const tile = tileTexture.tile;\n    expect(tile.getListeners('change').length).to.be(2);\n    const differentTile = new DataTile({\n      tileCoord: [1, 0, 1],\n      loader(z, x, y) {\n        return Promise.resolve(new Uint8Array(256 * 256 * 3));\n      }\n    });\n    tileTexture.setTile(differentTile);\n    expect(tile.getListeners('change').length).to.be(1);\n    tileTexture.addEventListener('change', () => {\n      expect(tileTexture.bandCount).to.be(3);\n      done();\n    });\n    differentTile.load();\n  });","file":"browser/spec/ol/webgl/TileTexture.test.js","skipped":false,"dir":"test"},{"name":"responds with info passed in the message","suites":["ol/worker/webgl","messaging","GENERATE_POINT_BUFFERS"],"updatePoint":{"line":41,"column":50,"index":1374},"line":41,"code":"      it('responds with info passed in the message', function () {\n        expect(responseData.type).to.eql(WebGLWorkerMessageType.GENERATE_POINT_BUFFERS);\n        expect(responseData.renderInstructions.byteLength).to.greaterThan(0);\n        expect(responseData.testInt).to.be(101);\n        expect(responseData.testString).to.be('abcd');\n      });","file":"browser/spec/ol/worker/webgl.test.js","skipped":false,"dir":"test"},{"name":"responds with buffer data","suites":["ol/worker/webgl","messaging","GENERATE_POINT_BUFFERS"],"updatePoint":{"line":47,"column":35,"index":1707},"line":47,"code":"      it('responds with buffer data', function () {\n        const indices = Array.from(new Uint32Array(responseData.indexBuffer));\n        const vertices = Array.from(new Float32Array(responseData.vertexBuffer));\n        expect(indices).to.eql([0, 1, 3, 1, 2, 3, 4, 5, 7, 5, 6, 7]);\n        expect(vertices).to.eql([0, 10, 0, 111, 0, 10, 1, 111, 0, 10, 2, 111, 0, 10, 3, 111, 20, 30, 0, 222, 20, 30, 1, 222, 20, 30, 2, 222, 20, 30, 3, 222]);\n      });","file":"browser/spec/ol/worker/webgl.test.js","skipped":false,"dir":"test"},{"name":"responds with info passed in the message","suites":["ol/worker/webgl","messaging","GENERATE_LINE_STRING_BUFFERS"],"updatePoint":{"line":78,"column":50,"index":3047},"line":78,"code":"      it('responds with info passed in the message', function () {\n        expect(responseData.type).to.eql(WebGLWorkerMessageType.GENERATE_LINE_STRING_BUFFERS);\n        expect(responseData.renderInstructions.byteLength).to.greaterThan(0);\n        expect(responseData.testInt).to.be(101);\n        expect(responseData.testString).to.be('abcd');\n      });","file":"browser/spec/ol/worker/webgl.test.js","skipped":false,"dir":"test"},{"name":"responds with buffer data","suites":["ol/worker/webgl","messaging","GENERATE_LINE_STRING_BUFFERS"],"updatePoint":{"line":84,"column":35,"index":3386},"line":84,"code":"      it('responds with buffer data', function () {\n        const indices = Array.from(new Uint32Array(responseData.indexBuffer));\n        const vertices = Array.from(new Float32Array(responseData.vertexBuffer));\n        expect(indices).to.eql([0, 1, 2, 1, 3, 2, 4, 5, 6, 5, 7, 6, 8, 9, 10, 9, 11, 10]);\n        expect(vertices).to.eql([20, 30, 40, 50, 1750000, 111, 20, 30, 40, 50, 101750000, 111, 20, 30, 40, 50, 201750000, 111, 20, 30, 40, 50, 301750016, 111, 40, 50, 6, 7, 93369248, 111, 40, 50, 6, 7, 193369248, 111, 40, 50, 6, 7, 293369248, 111, 40, 50, 6, 7, 393369248, 111, 6, 7, 80, 90, 89, 111, 6, 7, 80, 90, 100000088, 111, 6, 7, 80, 90, 200000096, 111, 6, 7, 80, 90, 300000096, 111]);\n      });","file":"browser/spec/ol/worker/webgl.test.js","skipped":false,"dir":"test"},{"name":"responds with info passed in the message","suites":["ol/worker/webgl","messaging","GENERATE_POLYGON_BUFFERS"],"updatePoint":{"line":113,"column":50,"index":4919},"line":113,"code":"      it('responds with info passed in the message', function () {\n        expect(responseData.type).to.eql(WebGLWorkerMessageType.GENERATE_POLYGON_BUFFERS);\n        expect(responseData.renderInstructions.byteLength).to.greaterThan(0);\n        expect(responseData.testInt).to.be(101);\n        expect(responseData.testString).to.be('abcd');\n      });","file":"browser/spec/ol/worker/webgl.test.js","skipped":false,"dir":"test"},{"name":"responds with buffer data","suites":["ol/worker/webgl","messaging","GENERATE_POLYGON_BUFFERS"],"updatePoint":{"line":119,"column":35,"index":5254},"line":119,"code":"      it('responds with buffer data', function () {\n        const indices = Array.from(new Uint32Array(responseData.indexBuffer));\n        const vertices = Array.from(new Float32Array(responseData.vertexBuffer));\n        expect(indices).to.have.length(27);\n        expect(vertices).to.have.length(33);\n      });","file":"browser/spec/ol/worker/webgl.test.js","skipped":false,"dir":"test"},{"name":"should find '1000' at index 0","suites":["ol/array.js","binarySearch","default comparison on array of String(s)"],"updatePoint":{"line":13,"column":39,"index":707},"line":13,"code":"      it(\"should find '1000' at index 0\", function () {\n        expect(binarySearch(a, '1000')).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find 'C' at index 10","suites":["ol/array.js","binarySearch","default comparison on array of String(s)"],"updatePoint":{"line":19,"column":37,"index":962},"line":19,"code":"      it(\"should find 'C' at index 10\", function () {\n        expect(binarySearch(a, 'C')).to.be(10);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find 'B' at index 7 || 8 || 9","suites":["ol/array.js","binarySearch","default comparison on array of String(s)"],"updatePoint":{"line":22,"column":46,"index":1083},"line":22,"code":"      it(\"should find 'B' at index 7 || 8 || 9\", function () {\n        const pos = binarySearch(a, 'B');\n        expect(pos == 7 || pos == 8 || pos == 9).to.be.ok();\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find '100'","suites":["ol/array.js","binarySearch","default comparison on array of String(s)"],"updatePoint":{"line":26,"column":31,"index":1244},"line":26,"code":"      it(\"should not find '100'\", function () {\n        const pos = binarySearch(a, '100');\n        expect(pos < 0).to.be.ok();\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 0 for '100'","suites":["ol/array.js","binarySearch","default comparison on array of String(s)"],"updatePoint":{"line":30,"column":55,"index":1406},"line":30,"code":"      it(\"should have an insertion point of 0 for '100'\", function () {\n        const pos = binarySearch(a, '100');\n        expect(insertionPoint(pos)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 'zzz0'","suites":["ol/array.js","binarySearch","default comparison on array of String(s)"],"updatePoint":{"line":34,"column":32,"index":1555},"line":34,"code":"      it(\"should not find 'zzz0'\", function () {\n        const pos = binarySearch(a, 'zzz0');\n        expect(pos < 0).to.be.ok();\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 'BA'","suites":["ol/array.js","binarySearch","default comparison on array of String(s)"],"updatePoint":{"line":42,"column":30,"index":1889},"line":42,"code":"      it(\"should not find 'BA'\", function () {\n        const pos = binarySearch(a, 'zzz0');\n        expect(pos < 0).to.be.ok();\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 10 for 'BA'","suites":["ol/array.js","binarySearch","default comparison on array of String(s)"],"updatePoint":{"line":46,"column":55,"index":2052},"line":46,"code":"      it(\"should have an insertion point of 10 for 'BA'\", function () {\n        const pos = binarySearch(a, 'BA');\n        expect(insertionPoint(pos)).to.be(10);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 'a'","suites":["ol/array.js","binarySearch","0 length array with default comparison"],"updatePoint":{"line":53,"column":29,"index":2295},"line":53,"code":"      it(\"should not find 'a'\", function () {\n        expect(binarySearch(b, 'a') < 0).to.be.ok();\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 0 for 'a'","suites":["ol/array.js","binarySearch","0 length array with default comparison"],"updatePoint":{"line":56,"column":53,"index":2428},"line":56,"code":"      it(\"should have an insertion point of 0 for 'a'\", function () {\n        const pos = binarySearch(b, 'a');\n        expect(insertionPoint(pos)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find 'only item' at index 0","suites":["ol/array.js","binarySearch","single element array with default lexiographical comparison"],"updatePoint":{"line":63,"column":44,"index":2716},"line":63,"code":"      it(\"should find 'only item' at index 0\", function () {\n        expect(binarySearch(c, 'only item')).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 'a'","suites":["ol/array.js","binarySearch","single element array with default lexiographical comparison"],"updatePoint":{"line":66,"column":29,"index":2827},"line":66,"code":"      it(\"should not find 'a'\", function () {\n        expect(binarySearch(c, 'a') < 0).to.be.ok();\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 0 for 'a'","suites":["ol/array.js","binarySearch","single element array with default lexiographical comparison"],"updatePoint":{"line":69,"column":53,"index":2960},"line":69,"code":"      it(\"should have an insertion point of 0 for 'a'\", function () {\n        const pos = binarySearch(c, 'a');\n        expect(insertionPoint(pos)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 'z'","suites":["ol/array.js","binarySearch","single element array with default lexiographical comparison"],"updatePoint":{"line":73,"column":29,"index":3104},"line":73,"code":"      it(\"should not find 'z'\", function () {\n        expect(binarySearch(c, 'z') < 0).to.be.ok();\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 1 for 'z'","suites":["ol/array.js","binarySearch","single element array with default lexiographical comparison"],"updatePoint":{"line":76,"column":53,"index":3237},"line":76,"code":"      it(\"should have an insertion point of 1 for 'z'\", function () {\n        const pos = binarySearch(c, 'z');\n        expect(insertionPoint(pos)).to.be(1);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find -897123.9 at index 0","suites":["ol/array.js","binarySearch","default comparison on array of Number(s)"],"updatePoint":{"line":83,"column":42,"index":3600},"line":83,"code":"      it('should find -897123.9 at index 0', function () {\n        expect(binarySearch(d, -897123.9)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find -3 at index 5","suites":["ol/array.js","binarySearch","default comparison on array of Number(s)"],"updatePoint":{"line":89,"column":35,"index":3856},"line":89,"code":"      it('should find -3 at index 5', function () {\n        expect(binarySearch(d, -3)).to.be(5);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find 0 at index 6 || 7 || 8","suites":["ol/array.js","binarySearch","default comparison on array of Number(s)"],"updatePoint":{"line":92,"column":44,"index":3973},"line":92,"code":"      it('should find 0 at index 6 || 7 || 8', function () {\n        const pos = binarySearch(d, 0);\n        expect(pos == 6 || pos == 7 || pos == 8).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find -900000","suites":["ol/array.js","binarySearch","default comparison on array of Number(s)"],"updatePoint":{"line":96,"column":33,"index":4135},"line":96,"code":"      it('should not find -900000', function () {\n        const pos = binarySearch(d, -900000);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 0 for -900000","suites":["ol/array.js","binarySearch","default comparison on array of Number(s)"],"updatePoint":{"line":100,"column":57,"index":4302},"line":100,"code":"      it('should have an insertion point of 0 for -900000', function () {\n        const pos = binarySearch(d, -900000);\n        expect(insertionPoint(pos)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 54255","suites":["ol/array.js","binarySearch","default comparison on array of Number(s)"],"updatePoint":{"line":104,"column":31,"index":4452},"line":104,"code":"      it('should not find 54255', function () {\n        const pos = binarySearch(d, 54255);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 1.1","suites":["ol/array.js","binarySearch","default comparison on array of Number(s)"],"updatePoint":{"line":112,"column":29,"index":4783},"line":112,"code":"      it('should not find 1.1', function () {\n        const pos = binarySearch(d, 1.1);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 10 for 1.1","suites":["ol/array.js","binarySearch","default comparison on array of Number(s)"],"updatePoint":{"line":116,"column":54,"index":4943},"line":116,"code":"      it('should have an insertion point of 10 for 1.1', function () {\n        const pos = binarySearch(d, 1.1);\n        expect(insertionPoint(pos)).to.be(10);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find 54254 at index 0","suites":["ol/array.js","binarySearch","custom comparison function, which reverse orders numbers"],"updatePoint":{"line":123,"column":38,"index":5319},"line":123,"code":"      it('should find 54254 at index 0', function () {\n        const pos = binarySearch(e, 54254, revNumCompare);\n        expect(pos).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find -3 at index 10","suites":["ol/array.js","binarySearch","custom comparison function, which reverse orders numbers"],"updatePoint":{"line":131,"column":36,"index":5660},"line":131,"code":"      it('should find -3 at index 10', function () {\n        const pos = binarySearch(e, -3, revNumCompare);\n        expect(pos).to.be(10);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find 0 at index 7 || 8 || 9","suites":["ol/array.js","binarySearch","custom comparison function, which reverse orders numbers"],"updatePoint":{"line":135,"column":44,"index":5818},"line":135,"code":"      it('should find 0 at index 7 || 8 || 9', function () {\n        const pos = binarySearch(e, 0, revNumCompare);\n        expect(pos == 7 || pos == 8 || pos == 9).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 54254.1","suites":["ol/array.js","binarySearch","custom comparison function, which reverse orders numbers"],"updatePoint":{"line":139,"column":33,"index":5995},"line":139,"code":"      it('should not find 54254.1', function () {\n        const pos = binarySearch(e, 54254.1, revNumCompare);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 0 for 54254.1","suites":["ol/array.js","binarySearch","custom comparison function, which reverse orders numbers"],"updatePoint":{"line":143,"column":57,"index":6177},"line":143,"code":"      it('should have an insertion point of 0 for 54254.1', function () {\n        const pos = binarySearch(e, 54254.1, revNumCompare);\n        expect(insertionPoint(pos)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find -897124","suites":["ol/array.js","binarySearch","custom comparison function, which reverse orders numbers"],"updatePoint":{"line":147,"column":33,"index":6344},"line":147,"code":"      it('should not find -897124', function () {\n        const pos = binarySearch(e, -897124, revNumCompare);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 1.1","suites":["ol/array.js","binarySearch","custom comparison function, which reverse orders numbers"],"updatePoint":{"line":155,"column":29,"index":6711},"line":155,"code":"      it('should not find 1.1', function () {\n        const pos = binarySearch(e, 1.1, revNumCompare);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 0 for 1.1","suites":["ol/array.js","binarySearch","custom comparison function, which reverse orders numbers"],"updatePoint":{"line":159,"column":53,"index":6885},"line":159,"code":"      it('should have an insertion point of 0 for 1.1', function () {\n        const pos = binarySearch(e, 1.1, revNumCompare);\n        expect(insertionPoint(pos)).to.be(6);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 0","suites":["ol/array.js","binarySearch","0 length array with custom comparison function"],"updatePoint":{"line":166,"column":27,"index":7147},"line":166,"code":"      it('should not find 0', function () {\n        const pos = binarySearch(f, 0, revNumCompare);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 0 for 0","suites":["ol/array.js","binarySearch","0 length array with custom comparison function"],"updatePoint":{"line":170,"column":51,"index":7317},"line":170,"code":"      it('should have an insertion point of 0 for 0', function () {\n        const pos = binarySearch(f, 0, revNumCompare);\n        expect(insertionPoint(pos)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find 1 at index 0","suites":["ol/array.js","binarySearch","single element array with custom comparison function"],"updatePoint":{"line":177,"column":34,"index":7591},"line":177,"code":"      it('should find 1 at index 0', function () {\n        const pos = binarySearch(g, 1, revNumCompare);\n        expect(pos).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 2","suites":["ol/array.js","binarySearch","single element array with custom comparison function"],"updatePoint":{"line":181,"column":27,"index":7730},"line":181,"code":"      it('should not find 2', function () {\n        const pos = binarySearch(g, 2, revNumCompare);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 0 for 2","suites":["ol/array.js","binarySearch","single element array with custom comparison function"],"updatePoint":{"line":185,"column":51,"index":7900},"line":185,"code":"      it('should have an insertion point of 0 for 2', function () {\n        const pos = binarySearch(g, 2, revNumCompare);\n        expect(insertionPoint(pos)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should not find 0","suites":["ol/array.js","binarySearch","single element array with custom comparison function"],"updatePoint":{"line":189,"column":27,"index":8055},"line":189,"code":"      it('should not find 0', function () {\n        const pos = binarySearch(g, 0, revNumCompare);\n        expect(pos < 0).to.be(true);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should have an insertion point of 1 for 0","suites":["ol/array.js","binarySearch","single element array with custom comparison function"],"updatePoint":{"line":193,"column":51,"index":8225},"line":193,"code":"      it('should have an insertion point of 1 for 0', function () {\n        const pos = binarySearch(g, 0, revNumCompare);\n        expect(insertionPoint(pos)).to.be(1);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find the index of the first 0","suites":["ol/array.js","binarySearch","finding first index when multiple candidates"],"updatePoint":{"line":199,"column":46,"index":8482},"line":199,"code":"      it('should find the index of the first 0', function () {\n        expect(binarySearch([0, 0, 1], 0)).to.be(0);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should find the index of the first 1","suites":["ol/array.js","binarySearch","finding first index when multiple candidates"],"updatePoint":{"line":202,"column":46,"index":8608},"line":202,"code":"      it('should find the index of the first 1', function () {\n        expect(binarySearch([0, 1, 1], 1)).to.be(1);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"does not use potentially slow methods (default & custom compare)","suites":["ol/array.js","binarySearch","Don't use Array#slice, Function#apply and Function#call"],"updatePoint":{"line":216,"column":74,"index":9143},"line":216,"code":"      it('does not use potentially slow methods (default & custom compare)', function () {\n        // Mockup (I failed to use sinon.spy and beforeEach-hooks)\n        origArraySlice = Array.prototype.slice;\n        origFunctionApply = Function.prototype.apply;\n        origFunctionCall = Function.prototype.call;\n        Array.prototype.slice = function () {\n          calls['Array#slice'] = true;\n        };\n        Function.prototype.apply = function () {\n          calls['Function#apply'] = true;\n        };\n        Function.prototype.call = function () {\n          calls['Function#call'] = true;\n        };\n\n        // Now actually call and test the method twice\n        binarySearch(a, 48);\n        binarySearch(a, 13, function (a, b) {\n          return a > b ? 1 : a < b ? -1 : 0;\n        });\n\n        // Restore mocked up methods\n        Array.prototype.slice = origArraySlice;\n        Function.prototype.apply = origFunctionApply;\n        Function.prototype.call = origFunctionCall;\n\n        // Expectations\n        expect(calls['Array#slice']).to.be(false);\n        expect(calls['Function#apply']).to.be(false);\n        expect(calls['Function#call']).to.be(false);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should return the index of where the item would go plus one, negated, if the item is not found","suites":["ol/array.js","binarySearch","when items are not found"],"updatePoint":{"line":250,"column":104,"index":10460},"line":250,"code":"      it('should return the index of where the item would go plus one, negated, if the item is not found', function () {\n        expect(binarySearch(arr, 4)).to.equal(-6);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should work even on empty arrays","suites":["ol/array.js","binarySearch","when items are not found"],"updatePoint":{"line":253,"column":42,"index":10580},"line":253,"code":"      it('should work even on empty arrays', function () {\n        expect(binarySearch([], 42)).to.equal(-1);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"should work even on arrays of doubles","suites":["ol/array.js","binarySearch","when items are not found"],"updatePoint":{"line":256,"column":47,"index":10705},"line":256,"code":"      it('should work even on arrays of doubles', function () {\n        expect(binarySearch([0.0, 0.1, 0.2, 0.3, 0.4], 0.25)).to.equal(-4);\n      });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns true for [] == []","suites":["ol/array.js","equals"],"updatePoint":{"line":262,"column":33,"index":10890},"line":262,"code":"    it('returns true for [] == []', function () {\n      expect(equals([], [])).to.be(true);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns true for [1] == [1]","suites":["ol/array.js","equals"],"updatePoint":{"line":265,"column":35,"index":10992},"line":265,"code":"    it('returns true for [1] == [1]', function () {\n      expect(equals([1], [1])).to.be(true);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns true for ['1'] == ['1']","suites":["ol/array.js","equals"],"updatePoint":{"line":268,"column":39,"index":11100},"line":268,"code":"    it(\"returns true for ['1'] == ['1']\", function () {\n      expect(equals(['1'], ['1'])).to.be(true);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns false for [1] == ['1']","suites":["ol/array.js","equals"],"updatePoint":{"line":271,"column":38,"index":11211},"line":271,"code":"    it(\"returns false for [1] == ['1']\", function () {\n      expect(equals([1], ['1'])).to.be(false);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns true for [null] == [null]","suites":["ol/array.js","equals"],"updatePoint":{"line":274,"column":41,"index":11324},"line":274,"code":"    it('returns true for [null] == [null]', function () {\n      expect(equals([null], [null])).to.be(true);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns false for [null] == [undefined]","suites":["ol/array.js","equals"],"updatePoint":{"line":277,"column":47,"index":11446},"line":277,"code":"    it('returns false for [null] == [undefined]', function () {\n      expect(equals([null], [undefined])).to.be(false);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns true for [1, 2] == [1, 2]","suites":["ol/array.js","equals"],"updatePoint":{"line":280,"column":41,"index":11568},"line":280,"code":"    it('returns true for [1, 2] == [1, 2]', function () {\n      expect(equals([1, 2], [1, 2])).to.be(true);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns false for [1, 2] == [2, 1]","suites":["ol/array.js","equals"],"updatePoint":{"line":283,"column":42,"index":11685},"line":283,"code":"    it('returns false for [1, 2] == [2, 1]', function () {\n      expect(equals([1, 2], [2, 1])).to.be(false);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns false for [1, 2] == [1]","suites":["ol/array.js","equals"],"updatePoint":{"line":286,"column":39,"index":11800},"line":286,"code":"    it('returns false for [1, 2] == [1]', function () {\n      expect(equals([1, 2], [1])).to.be(false);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns false for [1] == [1, 2]","suites":["ol/array.js","equals"],"updatePoint":{"line":289,"column":39,"index":11912},"line":289,"code":"    it('returns false for [1] == [1, 2]', function () {\n      expect(equals([1], [1, 2])).to.be(false);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns false for [{}] == [{}]","suites":["ol/array.js","equals"],"updatePoint":{"line":292,"column":38,"index":12023},"line":292,"code":"    it('returns false for [{}] == [{}]', function () {\n      expect(equals([{}], [{}])).to.be(false);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"extends an array in place with an array","suites":["ol/array.js","extend"],"updatePoint":{"line":297,"column":47,"index":12183},"line":297,"code":"    it('extends an array in place with an array', function () {\n      const a = [0, 1];\n      extend(a, [2, 3]);\n      expect(a).to.eql([0, 1, 2, 3]);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"extends an array in place with a number","suites":["ol/array.js","extend"],"updatePoint":{"line":302,"column":47,"index":12342},"line":302,"code":"    it('extends an array in place with a number', function () {\n      const a = [0, 1];\n      extend(a, 2);\n      expect(a).to.eql([0, 1, 2]);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"extends an array in place with a big array","suites":["ol/array.js","extend"],"updatePoint":{"line":307,"column":50,"index":12496},"line":307,"code":"    it('extends an array in place with a big array', function () {\n      const a = [];\n      let i = 250000; // original test has 1.000.000, but that was too slow\n      const bigArray = Array(i);\n      while (i--) {\n        bigArray[i] = i;\n      }\n      extend(a, bigArray);\n      expect(a).to.eql(bigArray);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"works with just an array as argument","suites":["ol/array.js","isSorted"],"updatePoint":{"line":319,"column":44,"index":12851},"line":319,"code":"    it('works with just an array as argument', function () {\n      expect(isSorted([1, 2, 3])).to.be(true);\n      expect(isSorted([1, 2, 2])).to.be(true);\n      expect(isSorted([1, 2, 1])).to.be(false);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"works with strict comparison without compare function","suites":["ol/array.js","isSorted"],"updatePoint":{"line":324,"column":61,"index":13079},"line":324,"code":"    it('works with strict comparison without compare function', function () {\n      expect(isSorted([1, 2, 3], null, true)).to.be(true);\n      expect(isSorted([1, 2, 2], null, true)).to.be(false);\n      expect(isSorted([1, 2, 1], null, true)).to.be(false);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"works with a compare function","suites":["ol/array.js","isSorted"],"updatePoint":{"line":329,"column":37,"index":13320},"line":329,"code":"    it('works with a compare function', function () {\n      function compare(a, b) {\n        return b - a;\n      }\n      expect(isSorted([1, 2, 3], compare)).to.be(false);\n      expect(isSorted([3, 2, 2], compare)).to.be(true);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/array.js","linearFindNearest"],"updatePoint":{"line":338,"column":30,"index":13601},"line":338,"code":"    it('returns expected value', function () {\n      const arr = [1000, 500, 100];\n      expect(linearFindNearest(arr, 10000, 0)).to.eql(0);\n      expect(linearFindNearest(arr, 10000, 1)).to.eql(0);\n      expect(linearFindNearest(arr, 10000, -1)).to.eql(0);\n      expect(linearFindNearest(arr, 1000, 0)).to.eql(0);\n      expect(linearFindNearest(arr, 1000, 1)).to.eql(0);\n      expect(linearFindNearest(arr, 1000, -1)).to.eql(0);\n      expect(linearFindNearest(arr, 999, -1)).to.eql(1);\n      expect(linearFindNearest(arr, 901, function (value, high, low) {\n        return value - (low + (high - low) * 0.8);\n      })).to.eql(0);\n      expect(linearFindNearest(arr, 900, function (value, high, low) {\n        return value - (low + (high - low) * 0.8);\n      })).to.eql(1);\n      expect(linearFindNearest(arr, 900, 0)).to.eql(0);\n      expect(linearFindNearest(arr, 900, 1)).to.eql(0);\n      expect(linearFindNearest(arr, 900, -1)).to.eql(1);\n      expect(linearFindNearest(arr, 751, 0)).to.eql(0);\n      expect(linearFindNearest(arr, 750, 0)).to.eql(1);\n      expect(linearFindNearest(arr, 750, 1)).to.eql(0);\n      expect(linearFindNearest(arr, 750, -1)).to.eql(1);\n      expect(linearFindNearest(arr, 551, function (value, high, low) {\n        return value - (low + (high - low) * 0.1);\n      })).to.eql(0);\n      expect(linearFindNearest(arr, 550, function (value, high, low) {\n        return value - (low + (high - low) * 0.1);\n      })).to.eql(1);\n      expect(linearFindNearest(arr, 550, 0)).to.eql(1);\n      expect(linearFindNearest(arr, 550, 1)).to.eql(0);\n      expect(linearFindNearest(arr, 550, -1)).to.eql(1);\n      expect(linearFindNearest(arr, 501, 1)).to.eql(0);\n      expect(linearFindNearest(arr, 500, 0)).to.eql(1);\n      expect(linearFindNearest(arr, 500, 1)).to.eql(1);\n      expect(linearFindNearest(arr, 500, -1)).to.eql(1);\n      expect(linearFindNearest(arr, 499, -1)).to.eql(2);\n      expect(linearFindNearest(arr, 451, function (value, high, low) {\n        return value - (low + (high - low) * 0.875);\n      })).to.eql(1);\n      expect(linearFindNearest(arr, 450, function (value, high, low) {\n        return value - (low + (high - low) * 0.875);\n      })).to.eql(2);\n      expect(linearFindNearest(arr, 450, 0)).to.eql(1);\n      expect(linearFindNearest(arr, 450, 1)).to.eql(1);\n      expect(linearFindNearest(arr, 450, -1)).to.eql(2);\n      expect(linearFindNearest(arr, 301, 0)).to.eql(1);\n      expect(linearFindNearest(arr, 300, 0)).to.eql(2);\n      expect(linearFindNearest(arr, 300, 1)).to.eql(1);\n      expect(linearFindNearest(arr, 300, -1)).to.eql(2);\n      expect(linearFindNearest(arr, 201, function (value, high, low) {\n        return value - (low + (high - low) * 0.25);\n      })).to.eql(1);\n      expect(linearFindNearest(arr, 200, function (value, high, low) {\n        return value - (low + (high - low) * 0.25);\n      })).to.eql(2);\n      expect(linearFindNearest(arr, 200, 0)).to.eql(2);\n      expect(linearFindNearest(arr, 200, 1)).to.eql(1);\n      expect(linearFindNearest(arr, 200, -1)).to.eql(2);\n      expect(linearFindNearest(arr, 101, 1)).to.eql(1);\n      expect(linearFindNearest(arr, 100, 0)).to.eql(2);\n      expect(linearFindNearest(arr, 100, 1)).to.eql(2);\n      expect(linearFindNearest(arr, 100, -1)).to.eql(2);\n      expect(linearFindNearest(arr, 50, 0)).to.eql(2);\n      expect(linearFindNearest(arr, 50, 1)).to.eql(2);\n      expect(linearFindNearest(arr, 50, -1)).to.eql(2);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"sorts integers in ascending order","suites":["ol/array.js","ascending"],"updatePoint":{"line":406,"column":41,"index":17100},"line":406,"code":"    it('sorts integers in ascending order', function () {\n      const arr = [3000, 40, 200];\n      arr.sort(ascending);\n      // default sort would yield [200, 3000, 40]\n      expect(arr).to.eql([40, 200, 3000]);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"sorts floats in ascending order","suites":["ol/array.js","ascending"],"updatePoint":{"line":412,"column":39,"index":17319},"line":412,"code":"    it('sorts floats in ascending order', function () {\n      const arr = [-2.0, -2.1, -1.9];\n      arr.sort(ascending);\n      expect(arr).to.eql([-2.1, -2.0, -1.9]);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"sorts strings in ascending order","suites":["ol/array.js","ascending"],"updatePoint":{"line":417,"column":40,"index":17495},"line":417,"code":"    it('sorts strings in ascending order', function () {\n      const arr = ['bravo', 'alpha', 'delta'];\n      arr.sort(ascending);\n      expect(arr).to.eql(['alpha', 'bravo', 'delta']);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"removes elements from an array","suites":["ol/array.js","remove"],"updatePoint":{"line":424,"column":38,"index":17728},"line":424,"code":"    it('removes elements from an array', function () {\n      const a = ['a', 'b', 'c', 'd'];\n      remove(a, 'c');\n      expect(a).to.eql(['a', 'b', 'd']);\n      remove(a, 'x');\n      expect(a).to.eql(['a', 'b', 'd']);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/array.js","reverseSubArray"],"updatePoint":{"line":433,"column":30,"index":17997},"line":433,"code":"    it('returns expected value', function () {\n      let arr;\n      const expected = [1, 2, 3, 4, 5, 6];\n      arr = [1, 5, 4, 3, 2, 6];\n      reverseSubArray(arr, 1, 4);\n      expect(arr).to.eql(expected);\n      arr = [3, 2, 1, 4, 5, 6];\n      reverseSubArray(arr, 0, 2);\n      expect(arr).to.eql(expected);\n      arr = [1, 2, 3, 6, 5, 4];\n      reverseSubArray(arr, 3, 5);\n      expect(arr).to.eql(expected);\n      arr = [6, 5, 4, 3, 2, 1];\n      reverseSubArray(arr, 0, 5);\n      expect(arr).to.eql(expected);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"works on an array with custom comparison function","suites":["ol/array.js","stableSort"],"updatePoint":{"line":471,"column":57,"index":18948},"line":471,"code":"    it('works on an array with custom comparison function', function () {\n      function comparisonFn(obj1, obj2) {\n        return obj1.key - obj2.key;\n      }\n      stableSort(arr, comparisonFn);\n      const sortedValues = [];\n      for (let i = 0; i < arr.length; i++) {\n        sortedValues.push(arr[i].val);\n      }\n      expect(wantedSortedValues).to.eql(sortedValues);\n    });","file":"node/ol/array.test.js","skipped":false,"dir":"test"},{"name":"generates an error","suites":["ol/AssertionError.js"],"updatePoint":{"line":4,"column":24,"index":171},"line":4,"code":"  it('generates an error', function () {\n    const error = new AssertionError(42);\n    expect(error).to.be.an(Error);\n  });","file":"node/ol/AssertionError.test.js","skipped":false,"dir":"test"},{"name":"generates a message with a versioned url","suites":["ol/AssertionError.js"],"updatePoint":{"line":8,"column":46,"index":317},"line":8,"code":"  it('generates a message with a versioned url', function () {\n    const error = new AssertionError(42);\n    expect(error.message).to.be('Question unknown, the answer is 42');\n  });","file":"node/ol/AssertionError.test.js","skipped":false,"dir":"test"},{"name":"has an error code","suites":["ol/AssertionError.js"],"updatePoint":{"line":12,"column":23,"index":476},"line":12,"code":"  it('has an error code', function () {\n    const error = new AssertionError(42);\n    expect(error.code).to.be(42);\n  });","file":"node/ol/AssertionError.test.js","skipped":false,"dir":"test"},{"name":"has a name","suites":["ol/AssertionError.js"],"updatePoint":{"line":16,"column":16,"index":591},"line":16,"code":"  it('has a name', function () {\n    const error = new AssertionError(42);\n    expect(error.name).to.be('AssertionError');\n  });","file":"node/ol/AssertionError.test.js","skipped":false,"dir":"test"},{"name":"is instanceof Error and AssertionError","suites":["ol/AssertionError.js"],"updatePoint":{"line":20,"column":44,"index":748},"line":20,"code":"  it('is instanceof Error and AssertionError', function () {\n    const error = new AssertionError(42);\n    expect(error instanceof Error).to.be(true);\n    expect(error instanceof AssertionError).to.be(true);\n  });","file":"node/ol/AssertionError.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/asserts.js","assert"],"updatePoint":{"line":5,"column":27,"index":191},"line":5,"code":"    it('throws an exception', function () {\n      expect(function () {\n        assert(false, 42);\n      }).to.throwException();\n    });","file":"node/ol/asserts.test.js","skipped":false,"dir":"test"},{"name":"creates an empty collection","suites":["ol/Collection.js","create an empty collection"],"updatePoint":{"line":13,"column":35,"index":492},"line":13,"code":"    it('creates an empty collection', function () {\n      expect(collection.getLength()).to.eql(0);\n      expect(collection.getArray()).to.be.empty();\n      expect(collection.item(0)).to.be(undefined);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"creates the expected collection","suites":["ol/Collection.js","create a collection from an array"],"updatePoint":{"line":20,"column":39,"index":774},"line":20,"code":"    it('creates the expected collection', function () {\n      const array = [0, 1, 2];\n      const collection = new Collection(array);\n      expect(collection.item(0)).to.eql(0);\n      expect(collection.item(1)).to.eql(1);\n      expect(collection.item(2)).to.eql(2);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"adds elements to the collection","suites":["ol/Collection.js","push to a collection"],"updatePoint":{"line":29,"column":39,"index":1104},"line":29,"code":"    it('adds elements to the collection', function () {\n      const length = collection.push(1);\n      expect(collection.getLength()).to.eql(length);\n      expect(collection.getArray()).to.eql([1]);\n      expect(collection.item(0)).to.eql(1);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"returns the correct new length of the collection","suites":["ol/Collection.js","push to a collection"],"updatePoint":{"line":35,"column":56,"index":1372},"line":35,"code":"    it('returns the correct new length of the collection', function () {\n      let length;\n      listen(collection, 'add', function (event) {\n        if (event.element === 'remove_me') {\n          collection.remove(event.element);\n        }\n      });\n      length = collection.push('keep_me');\n      expect(collection.getLength()).to.eql(length);\n      length = collection.push('remove_me');\n      expect(collection.getLength()).to.eql(length);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"removes elements from the collection","suites":["ol/Collection.js","pop from a collection"],"updatePoint":{"line":49,"column":44,"index":1869},"line":49,"code":"    it('removes elements from the collection', function () {\n      collection.push(1);\n      collection.pop();\n      expect(collection.getLength()).to.eql(0);\n      expect(collection.getArray()).to.be.empty();\n      expect(collection.item(0)).to.be(undefined);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"inserts elements at the correct location","suites":["ol/Collection.js","insertAt"],"updatePoint":{"line":58,"column":48,"index":2185},"line":58,"code":"    it('inserts elements at the correct location', function () {\n      collection = new Collection([0, 2]);\n      collection.insertAt(1, 1);\n      expect(collection.item(0)).to.eql(0);\n      expect(collection.item(1)).to.eql(1);\n      expect(collection.item(2)).to.eql(2);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"sets at the correct location","suites":["ol/Collection.js","setAt"],"updatePoint":{"line":67,"column":36,"index":2494},"line":67,"code":"    it('sets at the correct location', function () {\n      collection.setAt(0, 1);\n      collection.setAt(1, 2);\n      expect(collection.getLength()).to.be(2);\n      expect(collection.item(0)).to.be(1);\n      expect(collection.item(1)).to.be(2);\n      collection.setAt(0, 3);\n      expect(collection.getLength()).to.be(2);\n      expect(collection.item(0)).to.be(3);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"removes elements at the correction","suites":["ol/Collection.js","removeAt"],"updatePoint":{"line":79,"column":42,"index":2917},"line":79,"code":"    it('removes elements at the correction', function () {\n      const collection = new Collection([0, 1, 2]);\n      collection.removeAt(1);\n      expect(collection.item(0)).to.eql(0);\n      expect(collection.item(1)).to.eql(2);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does not fire event for invalid index","suites":["ol/Collection.js","removeAt"],"updatePoint":{"line":85,"column":45,"index":3157},"line":85,"code":"    it('does not fire event for invalid index', function () {\n      const collection = new Collection([0, 1, 2]);\n      collection.on('remove', function () {\n        throw new Error('Should not fire event for invalid index');\n      });\n      expect(collection.removeAt(3)).to.be(undefined);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does not call the callback","suites":["ol/Collection.js","forEach","on an empty collection"],"updatePoint":{"line":99,"column":36,"index":3615},"line":99,"code":"      it('does not call the callback', function () {\n        collection.forEach(cb);\n        expect(cb.called).to.be(false);\n      });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does call the callback","suites":["ol/Collection.js","forEach","on a non-empty collection"],"updatePoint":{"line":105,"column":32,"index":3810},"line":105,"code":"      it('does call the callback', function () {\n        collection.push(1);\n        collection.push(2);\n        collection.forEach(cb);\n        expect(cb.callCount).to.eql(2);\n      });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"removes the first matching element","suites":["ol/Collection.js","remove"],"updatePoint":{"line":114,"column":42,"index":4056},"line":114,"code":"    it('removes the first matching element', function () {\n      const collection = new Collection([0, 1, 2]);\n      expect(collection.remove(1)).to.eql(1);\n      expect(collection.getArray()).to.eql([0, 2]);\n      expect(collection.getLength()).to.eql(2);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"fires a remove event","suites":["ol/Collection.js","remove"],"updatePoint":{"line":120,"column":28,"index":4307},"line":120,"code":"    it('fires a remove event', function () {\n      const collection = new Collection([0, 1, 2]);\n      const cb = sinon.spy();\n      listen(collection, CollectionEventType.REMOVE, cb);\n      expect(collection.remove(1)).to.eql(1);\n      expect(cb.called).to.be(true);\n      expect(cb.lastCall.args[0].element).to.eql(1);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does not remove more than one matching element","suites":["ol/Collection.js","remove"],"updatePoint":{"line":128,"column":54,"index":4662},"line":128,"code":"    it('does not remove more than one matching element', function () {\n      const collection = new Collection([0, 1, 1, 2]);\n      expect(collection.remove(1)).to.eql(1);\n      expect(collection.getArray()).to.eql([0, 1, 2]);\n      expect(collection.getLength()).to.eql(3);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"returns undefined if the element is not found","suites":["ol/Collection.js","remove"],"updatePoint":{"line":134,"column":53,"index":4944},"line":134,"code":"    it('returns undefined if the element is not found', function () {\n      const collection = new Collection([0, 1, 2]);\n      expect(collection.remove(3)).to.be(undefined);\n      expect(collection.getArray()).to.eql([0, 1, 2]);\n      expect(collection.getLength()).to.eql(3);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does dispatch events","suites":["ol/Collection.js","setAt and event"],"updatePoint":{"line":142,"column":28,"index":5255},"line":142,"code":"    it('does dispatch events', function () {\n      const collection = new Collection(['a', 'b']);\n      let added, removed, addedIndex, removedIndex;\n      listen(collection, CollectionEventType.ADD, function (e) {\n        added = e.element;\n        addedIndex = e.index;\n      });\n      listen(collection, CollectionEventType.REMOVE, function (e) {\n        removed = e.element;\n        removedIndex = e.index;\n      });\n      collection.setAt(1, 1);\n      expect(added).to.eql(1);\n      expect(addedIndex).to.eql(1);\n      expect(removed).to.eql('b');\n      expect(removedIndex).to.eql(1);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does dispatch events","suites":["ol/Collection.js","removeAt and event"],"updatePoint":{"line":161,"column":28,"index":5907},"line":161,"code":"    it('does dispatch events', function () {\n      const collection = new Collection(['a']);\n      let removed, removedIndex;\n      listen(collection, CollectionEventType.REMOVE, function (e) {\n        removed = e.element;\n        removedIndex = e.index;\n      });\n      collection.pop();\n      expect(removed).to.eql('a');\n      expect(removedIndex).to.eql(0);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does dispatch events","suites":["ol/Collection.js","insertAt and event"],"updatePoint":{"line":174,"column":28,"index":6330},"line":174,"code":"    it('does dispatch events', function () {\n      const collection = new Collection([0, 2]);\n      let added, addedIndex;\n      listen(collection, CollectionEventType.ADD, function (e) {\n        added = e.element;\n        addedIndex = e.index;\n      });\n      collection.insertAt(1, 1);\n      expect(added).to.eql(1);\n      expect(addedIndex).to.eql(1);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does not allow setting invalid index","suites":["ol/Collection.js","setAt beyond end"],"updatePoint":{"line":187,"column":44,"index":6760},"line":187,"code":"    it('does not allow setting invalid index', function () {\n      try {\n        collection.setAt(1, 1);\n      } catch (e) {\n        return;\n      }\n      throw new Error('Collection should throw');\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"triggers events properly","suites":["ol/Collection.js","setAt beyond end"],"updatePoint":{"line":195,"column":32,"index":6955},"line":195,"code":"    it('triggers events properly', function () {\n      const added = [];\n      const addedIndexes = [];\n      listen(collection, CollectionEventType.ADD, function (e) {\n        added.push(e.element);\n        addedIndexes.push(e.index);\n      });\n      collection.setAt(0, 0);\n      collection.setAt(1, 1);\n      collection.setAt(0, 2);\n      expect(collection.getLength()).to.be(2);\n      expect(collection.item(0)).to.be(2);\n      expect(collection.item(1)).to.be(1);\n      expect(added.length).to.be(3);\n      expect(added[0]).to.be(0);\n      expect(added[1]).to.be(1);\n      expect(added[2]).to.be(2);\n      expect(addedIndexes).to.eql([0, 1, 0]);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"triggers change:length event","suites":["ol/Collection.js","change:length event","insertAt"],"updatePoint":{"line":223,"column":38,"index":7891},"line":223,"code":"      it('triggers change:length event', function () {\n        collection.insertAt(2, 3);\n        expect(cb.called).to.be(true);\n      });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"triggers change:length event","suites":["ol/Collection.js","change:length event","removeAt"],"updatePoint":{"line":229,"column":38,"index":8077},"line":229,"code":"      it('triggers change:length event', function () {\n        collection.removeAt(0);\n        expect(cb.called).to.be(true);\n      });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"does not trigger change:length event","suites":["ol/Collection.js","change:length event","setAt"],"updatePoint":{"line":235,"column":46,"index":8265},"line":235,"code":"      it('does not trigger change:length event', function () {\n        collection.setAt(1, 1);\n        expect(cb.called).to.be(false);\n      });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"triggers add when pushing","suites":["ol/Collection.js","add event"],"updatePoint":{"line":242,"column":33,"index":8449},"line":242,"code":"    it('triggers add when pushing', function () {\n      const collection = new Collection();\n      let elem, addedIndex;\n      listen(collection, CollectionEventType.ADD, function (e) {\n        elem = e.element;\n        addedIndex = e.index;\n      });\n      const length = collection.push(1);\n      expect(elem).to.eql(length);\n      expect(addedIndex).to.eql(0);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"triggers remove","suites":["ol/Collection.js","remove event","setAt"],"updatePoint":{"line":262,"column":25,"index":9053},"line":262,"code":"      it('triggers remove', function () {\n        listen(collection, CollectionEventType.ADD, cb1);\n        listen(collection, CollectionEventType.REMOVE, cb2);\n        collection.setAt(0, 2);\n        expect(cb2.lastCall.args[0].element).to.eql(1);\n        expect(cb1.lastCall.args[0].element).to.eql(2);\n      });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"triggers remove","suites":["ol/Collection.js","remove event","pop"],"updatePoint":{"line":271,"column":25,"index":9410},"line":271,"code":"      it('triggers remove', function () {\n        listen(collection, CollectionEventType.REMOVE, cb1);\n        collection.pop();\n        expect(cb1.lastCall.args[0].element).to.eql(1);\n      });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"adds elements to end of the collection","suites":["ol/Collection.js","extending a collection"],"updatePoint":{"line":279,"column":46,"index":9691},"line":279,"code":"    it('adds elements to end of the collection', function () {\n      collection.extend([1, 2]);\n      expect(collection.getLength()).to.eql(2);\n      expect(collection.getArray()).to.eql([1, 2]);\n      expect(collection.item(0)).to.eql(1);\n      expect(collection.item(1)).to.eql(2);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"fires events","suites":["ol/Collection.js","extending a collection"],"updatePoint":{"line":286,"column":20,"index":9957},"line":286,"code":"    it('fires events', function () {\n      const collection = new Collection();\n      const elems = [],\n        addedIndexes = [];\n      listen(collection, CollectionEventType.ADD, function (e) {\n        elems.push(e.element);\n        addedIndexes.push(e.index);\n      });\n      collection.extend([1, 2]);\n      expect(elems).to.eql([1, 2]);\n      expect(addedIndexes).to.eql([0, 1]);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"allows unique items in the constructor","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":300,"column":46,"index":10428},"line":300,"code":"    it('allows unique items in the constructor', function () {\n      new Collection([{}, {}, {}], {\n        unique: true\n      });\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"throws if duplicate items are passed to the constructor","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":305,"column":63,"index":10584},"line":305,"code":"    it('throws if duplicate items are passed to the constructor', function () {\n      const item = {};\n      const call = function () {\n        new Collection([item, item], {\n          unique: true\n        });\n      };\n      expect(call).to.throwException();\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"allows unique items to be added via push","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":314,"column":48,"index":10836},"line":314,"code":"    it('allows unique items to be added via push', function () {\n      const unique = new Collection(undefined, {\n        unique: true\n      });\n      unique.push({});\n      unique.push({});\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"throws if duplicate items are added via push","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":321,"column":52,"index":11039},"line":321,"code":"    it('throws if duplicate items are added via push', function () {\n      const unique = new Collection(undefined, {\n        unique: true\n      });\n      const item = {};\n      unique.push(item);\n      const call = function () {\n        unique.push(item);\n      };\n      expect(call).to.throwException();\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"allows unique items to be added via insertAt","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":332,"column":52,"index":11353},"line":332,"code":"    it('allows unique items to be added via insertAt', function () {\n      const unique = new Collection(undefined, {\n        unique: true\n      });\n      unique.insertAt(0, {});\n      unique.insertAt(0, {});\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"throws if duplicate items are added via insertAt","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":339,"column":56,"index":11574},"line":339,"code":"    it('throws if duplicate items are added via insertAt', function () {\n      const unique = new Collection(undefined, {\n        unique: true\n      });\n      const item = {};\n      unique.insertAt(0, item);\n      const call = function () {\n        unique.insertAt(0, item);\n      };\n      expect(call).to.throwException();\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"allows unique items to be added via setAt","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":350,"column":49,"index":11899},"line":350,"code":"    it('allows unique items to be added via setAt', function () {\n      const unique = new Collection(undefined, {\n        unique: true\n      });\n      unique.setAt(0, {});\n      unique.setAt(1, {});\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"allows items to be reset via setAt","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":357,"column":42,"index":12100},"line":357,"code":"    it('allows items to be reset via setAt', function () {\n      const unique = new Collection(undefined, {\n        unique: true\n      });\n      const item = {};\n      unique.setAt(0, item);\n      unique.setAt(0, item);\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"throws if duplicate items are added via setAt","suites":["ol/Collection.js","unique collection"],"updatePoint":{"line":365,"column":53,"index":12339},"line":365,"code":"    it('throws if duplicate items are added via setAt', function () {\n      const unique = new Collection(undefined, {\n        unique: true\n      });\n      const item = {};\n      unique.setAt(0, item);\n      const call = function () {\n        unique.setAt(1, item);\n      };\n      expect(call).to.throwException();\n    });","file":"node/ol/Collection.test.js","skipped":false,"dir":"test"},{"name":"returns a coordinate","suites":["ol/coordinate.js","#add"],"updatePoint":{"line":13,"column":28,"index":732},"line":13,"code":"    it('returns a coordinate', function () {\n      const returnedCoordinate = addCoordinate(coordinate, delta);\n      expect(returnedCoordinate).to.be.an('array');\n      expect(returnedCoordinate).to.have.length(2);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"adds the delta","suites":["ol/coordinate.js","#add"],"updatePoint":{"line":18,"column":22,"index":950},"line":18,"code":"    it('adds the delta', function () {\n      const returnedCoordinate = addCoordinate(coordinate, delta);\n      expect(returnedCoordinate[0]).to.eql(48.73);\n      expect(returnedCoordinate[1]).to.eql(10.1);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"modifies in place","suites":["ol/coordinate.js","#add"],"updatePoint":{"line":23,"column":25,"index":1168},"line":23,"code":"    it('modifies in place', function () {\n      addCoordinate(coordinate, delta);\n      expect(coordinate[0]).to.eql(48.73);\n      expect(coordinate[1]).to.eql(10.1);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"does not produce unexpected results with string delta values","suites":["ol/coordinate.js","#add"],"updatePoint":{"line":28,"column":68,"index":1386},"line":28,"code":"    it('does not produce unexpected results with string delta values', function () {\n      addCoordinate(coordinate, delta.map(function (n) {\n        return String(n);\n      }));\n      expect(coordinate[0]).to.eql(48.73);\n      expect(coordinate[1]).to.eql(10.1);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"compares correctly","suites":["ol/coordinate.js","#equals"],"updatePoint":{"line":40,"column":26,"index":1760},"line":40,"code":"    it('compares correctly', function () {\n      const bonnEqualsBonn = coordinatesEqual(bonn1, bonn2);\n      const bonnEqualsCologne = coordinatesEqual(bonn1, cologne);\n      expect(bonnEqualsBonn).to.be(true);\n      expect(bonnEqualsCologne).to.be(false);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"rounds the values","suites":["ol/coordinate.js","#format"],"updatePoint":{"line":52,"column":25,"index":2162},"line":52,"code":"    it('rounds the values', function () {\n      const string = formatCoordinate(coordinate, '{x} {y}', 0);\n      expect(string).to.eql('7 47');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"handles the optional fractionDigits param","suites":["ol/coordinate.js","#format"],"updatePoint":{"line":56,"column":49,"index":2338},"line":56,"code":"    it('handles the optional fractionDigits param', function () {\n      const string = formatCoordinate(coordinate, '{x} {y}', 3);\n      expect(string).to.eql('6.612 46.792');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"returns a CoordinateFormatType","suites":["ol/coordinate.js","#createStringXY"],"updatePoint":{"line":68,"column":38,"index":2722},"line":68,"code":"    it('returns a CoordinateFormatType', function () {\n      created = createStringXY();\n      expect(created).to.be.a('function');\n      formatted = created(coordinate);\n      expect(formatted).to.be.a('string');\n      expect(formatted).to.eql('7, 47');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"respects opt_fractionDigits","suites":["ol/coordinate.js","#createStringXY"],"updatePoint":{"line":75,"column":35,"index":2982},"line":75,"code":"    it('respects opt_fractionDigits', function () {\n      created = createStringXY(3);\n      expect(created).to.be.a('function');\n      formatted = created(coordinate);\n      expect(formatted).to.be.a('string');\n      expect(formatted).to.eql('6.612, 46.792');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can find the closest point on circle","suites":["ol/coordinate.js","#closestOnCircle"],"updatePoint":{"line":86,"column":44,"index":3382},"line":86,"code":"    it('can find the closest point on circle', function () {\n      expect(closestOnCircle([-20, 10], circle)).to.eql([-5, 10]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can handle coordinate equal circle center","suites":["ol/coordinate.js","#closestOnCircle"],"updatePoint":{"line":89,"column":49,"index":3523},"line":89,"code":"    it('can handle coordinate equal circle center', function () {\n      expect(closestOnCircle(center, circle)).to.eql([15, 10]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can handle points where the foot of the perpendicular is closest","suites":["ol/coordinate.js","#closestOnSegment"],"updatePoint":{"line":94,"column":72,"index":3736},"line":94,"code":"    it('can handle points where the foot of the perpendicular is closest', function () {\n      const point = [2, 5];\n      const segment = [[-5, 0], [10, 0]];\n      expect(closestOnSegment(point, segment)).to.eql([2, 0]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can handle points where the foot of the perpendicular is not closest","suites":["ol/coordinate.js","#closestOnSegment"],"updatePoint":{"line":99,"column":76,"index":3970},"line":99,"code":"    it('can handle points where the foot of the perpendicular is not closest', function () {\n      const point = [0, -6];\n      const segment = [[-5, 0], [0, -1]];\n      expect(closestOnSegment(point, segment)).to.eql([0, -1]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can deal with undefined coordinate","suites":["ol/coordinate.js","#format"],"updatePoint":{"line":106,"column":42,"index":4214},"line":106,"code":"    it('can deal with undefined coordinate', function () {\n      expect(formatCoordinate()).to.be('');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"formats a coordinate into a template (default precision is 0)","suites":["ol/coordinate.js","#format"],"updatePoint":{"line":109,"column":69,"index":4352},"line":109,"code":"    it('formats a coordinate into a template (default precision is 0)', function () {\n      const coord = [7.85, 47.983333];\n      const template = 'Coordinate is ({x}|{y}).';\n      const got = formatCoordinate(coord, template);\n      const expected = 'Coordinate is (8|48).';\n      expect(got).to.be(expected);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"formats a coordinate into a template and respects precision)","suites":["ol/coordinate.js","#format"],"updatePoint":{"line":116,"column":68,"index":4671},"line":116,"code":"    it('formats a coordinate into a template and respects precision)', function () {\n      const coord = [7.85, 47.983333];\n      const template = 'Coordinate is ({x}|{y}).';\n      const got = formatCoordinate(coord, template, 2);\n      const expected = 'Coordinate is (7.85|47.98).';\n      expect(got).to.be(expected);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can rotate point in place","suites":["ol/coordinate.js","#rotate"],"updatePoint":{"line":125,"column":33,"index":5006},"line":125,"code":"    it('can rotate point in place', function () {\n      const coord = [7.85, 47.983333];\n      const rotateRadians = Math.PI / 2; // 90 degrees\n      rotateCoordinate(coord, rotateRadians);\n      expect(coord[0].toFixed(6)).to.eql('-47.983333');\n      expect(coord[1].toFixed(6)).to.eql('7.850000');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"returns the rotated point","suites":["ol/coordinate.js","#rotate"],"updatePoint":{"line":132,"column":33,"index":5314},"line":132,"code":"    it('returns the rotated point', function () {\n      const coord = [7.85, 47.983333];\n      const rotateRadians = Math.PI / 2; // 90 degrees\n      const rotated = rotateCoordinate(coord, rotateRadians);\n      expect(rotated[0].toFixed(7)).to.eql('-47.9833330');\n      expect(rotated[1].toFixed(7)).to.eql('7.8500000');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can scale point in place","suites":["ol/coordinate.js","#scale"],"updatePoint":{"line":141,"column":32,"index":5684},"line":141,"code":"    it('can scale point in place', function () {\n      const coord = [7.85, 47.983333];\n      const scale = 1.2;\n      scaleCoordinate(coord, scale);\n      expect(coord[0].toFixed(7)).to.eql('9.4200000');\n      expect(coord[1].toFixed(7)).to.eql('57.5799996');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"returns the scaled point","suites":["ol/coordinate.js","#scale"],"updatePoint":{"line":148,"column":32,"index":5953},"line":148,"code":"    it('returns the scaled point', function () {\n      const coord = [7.85, 47.983333];\n      const scale = 1.2;\n      const scaledCoord = scaleCoordinate(coord, scale);\n      expect(scaledCoord[0].toFixed(7)).to.eql('9.4200000');\n      expect(scaledCoord[1].toFixed(7)).to.eql('57.5799996');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can handle points where the foot of the perpendicular is closest","suites":["ol/coordinate.js","#squaredDistanceToSegment"],"updatePoint":{"line":157,"column":72,"index":6354},"line":157,"code":"    it('can handle points where the foot of the perpendicular is closest', function () {\n      const point = [2, 5];\n      const segment = [[-5, 0], [10, 0]];\n      expect(squaredDistanceToSegment(point, segment)).to.eql(25);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"can handle points where the foot of the perpendicular is not closest","suites":["ol/coordinate.js","#squaredDistanceToSegment"],"updatePoint":{"line":162,"column":76,"index":6592},"line":162,"code":"    it('can handle points where the foot of the perpendicular is not closest', function () {\n      const point = [0, -6];\n      const segment = [[-5, 0], [0, -1]];\n      expect(squaredDistanceToSegment(point, segment)).to.eql(25);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"includes minutes and seconds if non-zero","suites":["ol/coordinate.js","degreesToStringHDMS"],"updatePoint":{"line":169,"column":48,"index":6851},"line":169,"code":"    it('includes minutes and seconds if non-zero', () => {\n      expect(degreesToStringHDMS('NS', 10 + 30 / 60 + 30 / 3600)).to.be('10° 30′ 30″ N');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"omits minutes if zero","suites":["ol/coordinate.js","degreesToStringHDMS"],"updatePoint":{"line":172,"column":29,"index":6989},"line":172,"code":"    it('omits minutes if zero', () => {\n      expect(degreesToStringHDMS('NS', 10)).to.be('10° N');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"includes minutes if seconds are non-zero","suites":["ol/coordinate.js","degreesToStringHDMS"],"updatePoint":{"line":175,"column":48,"index":7116},"line":175,"code":"    it('includes minutes if seconds are non-zero', () => {\n      expect(degreesToStringHDMS('NS', 10 + 30 / 3600)).to.be('10° 00′ 30″ N');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"omits seconds if zero","suites":["ol/coordinate.js","degreesToStringHDMS"],"updatePoint":{"line":178,"column":29,"index":7244},"line":178,"code":"    it('omits seconds if zero', () => {\n      expect(degreesToStringHDMS('NS', 10.5)).to.be('10° 30′ N');\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"returns the empty string on undefined input","suites":["ol/coordinate.js","#toStringHDMS"],"updatePoint":{"line":183,"column":51,"index":7428},"line":183,"code":"    it('returns the empty string on undefined input', function () {\n      const got = toStringHDMS();\n      const expected = '';\n      expect(got).to.be(expected);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"formats with zero fractional digits as default","suites":["ol/coordinate.js","#toStringHDMS"],"updatePoint":{"line":188,"column":54,"index":7603},"line":188,"code":"    it('formats with zero fractional digits as default', function () {\n      const coord = [7.85, 47.983333];\n      const got = toStringHDMS(coord);\n      const expected = '47° 59′ N 7° 51′ E';\n      expect(got).to.be(expected);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"formats with given fractional digits, if passed","suites":["ol/coordinate.js","#toStringHDMS"],"updatePoint":{"line":194,"column":55,"index":7841},"line":194,"code":"    it('formats with given fractional digits, if passed', function () {\n      const coord = [10 + 20 / 60 + 0.3456 / 3600, 20 + 30 / 60 + 0.4321 / 3600];\n      const got = toStringHDMS(coord, 3);\n      const expected = '20° 30′ 00.432″ N 10° 20′ 00.346″ E';\n      expect(got).to.be(expected);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"formats with zero fractional digits as default","suites":["ol/coordinate.js","#toStringXY"],"updatePoint":{"line":202,"column":54,"index":8187},"line":202,"code":"    it('formats with zero fractional digits as default', function () {\n      const coord = [7.85, 47.983333];\n      const got = toStringXY(coord);\n      const expected = '8, 48';\n      expect(got).to.be(expected);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"formats with given fractional digits, if passed","suites":["ol/coordinate.js","#toStringXY"],"updatePoint":{"line":208,"column":55,"index":8410},"line":208,"code":"    it('formats with given fractional digits, if passed', function () {\n      const coord = [7.85, 47.983333];\n      const got = toStringXY(coord, 2);\n      const expected = '7.85, 47.98';\n      expect(got).to.be(expected);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"leaves real world coordinate untouched","suites":["ol/coordinate.js","wrapX()"],"updatePoint":{"line":217,"column":46,"index":8716},"line":217,"code":"    it('leaves real world coordinate untouched', function () {\n      expect(wrapX([16, 48], projection)).to.eql([16, 48]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"moves left world coordinate to real world","suites":["ol/coordinate.js","wrapX()"],"updatePoint":{"line":220,"column":49,"index":8850},"line":220,"code":"    it('moves left world coordinate to real world', function () {\n      expect(wrapX([-344, 48], projection)).to.eql([16, 48]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"moves right world coordinate to real world","suites":["ol/coordinate.js","wrapX()"],"updatePoint":{"line":223,"column":50,"index":8987},"line":223,"code":"    it('moves right world coordinate to real world', function () {\n      expect(wrapX([376, 48], projection)).to.eql([16, 48]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"moves far off left coordinate to real world","suites":["ol/coordinate.js","wrapX()"],"updatePoint":{"line":226,"column":51,"index":9124},"line":226,"code":"    it('moves far off left coordinate to real world', function () {\n      expect(wrapX([-1064, 48], projection)).to.eql([16, 48]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"moves far off right coordinate to real world","suites":["ol/coordinate.js","wrapX()"],"updatePoint":{"line":229,"column":52,"index":9264},"line":229,"code":"    it('moves far off right coordinate to real world', function () {\n      expect(wrapX([1096, 48], projection)).to.eql([16, 48]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"leaves non-global projection coordinates untouched","suites":["ol/coordinate.js","wrapX()"],"updatePoint":{"line":236,"column":58,"index":9495},"line":236,"code":"    it('leaves non-global projection coordinates untouched', function () {\n      expect(wrapX([1096, 48], swiss)).to.eql([1096, 48]);\n    });","file":"node/ol/coordinate.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol/Disposable.js","constructor"],"updatePoint":{"line":6,"column":27,"index":229},"line":6,"code":"    it('creates an instance', function () {\n      const disposable = new Disposable();\n      expect(disposable).to.be.a(Disposable);\n    });","file":"node/ol/Disposable.test.js","skipped":false,"dir":"test"},{"name":"is initially false","suites":["ol/Disposable.js","#disposed"],"updatePoint":{"line":12,"column":26,"index":413},"line":12,"code":"    it('is initially false', function () {\n      const disposable = new Disposable();\n      expect(disposable.disposed).to.be(false);\n    });","file":"node/ol/Disposable.test.js","skipped":false,"dir":"test"},{"name":"is true after a call to dispose","suites":["ol/Disposable.js","#disposed"],"updatePoint":{"line":16,"column":39,"index":568},"line":16,"code":"    it('is true after a call to dispose', function () {\n      const disposable = new Disposable();\n      disposable.dispose();\n      expect(disposable.disposed).to.be(true);\n    });","file":"node/ol/Disposable.test.js","skipped":false,"dir":"test"},{"name":"calls disposeInternal only once","suites":["ol/Disposable.js","#dispose()"],"updatePoint":{"line":23,"column":39,"index":795},"line":23,"code":"    it('calls disposeInternal only once', function () {\n      const disposable = new Disposable();\n      sinon.spy(disposable, 'disposeInternal');\n      expect(disposable.disposeInternal.called).to.be(false);\n      disposable.dispose();\n      expect(disposable.disposeInternal.callCount).to.be(1);\n      disposable.dispose();\n      expect(disposable.disposeInternal.callCount).to.be(1);\n    });","file":"node/ol/Disposable.test.js","skipped":false,"dir":"test"},{"name":"calls addEventListener on the target","suites":["ol/events.js","listen()"],"updatePoint":{"line":15,"column":44,"index":526},"line":15,"code":"    it('calls addEventListener on the target', function () {\n      listen(target, 'foo', function () {});\n      expect(add.callCount).to.be(1);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"returns a key","suites":["ol/events.js","listen()"],"updatePoint":{"line":19,"column":21,"index":655},"line":19,"code":"    it('returns a key', function () {\n      const key = listen(target, 'foo', function () {});\n      expect(key).to.be.a(Object);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"does not add the same listener twice","suites":["ol/events.js","listen()"],"updatePoint":{"line":23,"column":44,"index":816},"line":23,"code":"    it('does not add the same listener twice', function () {\n      const listener = function () {};\n      listen(target, 'foo', listener);\n      listen(target, 'foo', listener);\n      expect(target.listeners_['foo'].length).to.be(1);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"only treats listeners as same when all args are equal","suites":["ol/events.js","listen()"],"updatePoint":{"line":29,"column":61,"index":1075},"line":29,"code":"    it('only treats listeners as same when all args are equal', function () {\n      const listener = function () {};\n      listen(target, 'foo', listener, {});\n      listen(target, 'foo', listener, {});\n      listen(target, 'foo', listener, undefined);\n      expect(target.listeners_['foo'].length).to.be(3);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"creates a one-off listener","suites":["ol/events.js","listenOnce()"],"updatePoint":{"line":38,"column":34,"index":1412},"line":38,"code":"    it('creates a one-off listener', function () {\n      const target = new EventTarget();\n      const listener = sinon.spy();\n      listenOnce(target, 'foo', listener);\n      target.dispatchEvent('foo');\n      expect(listener.callCount).to.be(1);\n      target.dispatchEvent('foo');\n      expect(listener.callCount).to.be(1);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"Adds the same listener twice","suites":["ol/events.js","listenOnce()"],"updatePoint":{"line":47,"column":36,"index":1748},"line":47,"code":"    it('Adds the same listener twice', function () {\n      const listener = sinon.spy();\n      listenOnce(target, 'foo', listener);\n      listenOnce(target, 'foo', listener);\n      target.dispatchEvent('foo');\n      target.dispatchEvent('foo');\n      target.dispatchEvent('foo');\n      expect(listener.callCount).to.be(2);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"unregisters previously registered listeners","suites":["ol/events.js","unlistenByKey()"],"updatePoint":{"line":58,"column":51,"index":2144},"line":58,"code":"    it('unregisters previously registered listeners', function () {\n      const key = listen(target, 'foo', function () {});\n      unlistenByKey(key);\n      expect(target.listeners_['foo']).to.be(undefined);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"works with multiple types","suites":["ol/events.js","unlistenByKey()"],"updatePoint":{"line":63,"column":33,"index":2342},"line":63,"code":"    it('works with multiple types', function () {\n      const key = listen(target, ['foo', 'bar'], function () {});\n      unlistenByKey(key);\n      expect(target.listeners_['foo']).to.be(undefined);\n      expect(target.listeners_['bar']).to.be(undefined);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"does not register duplicated listeners","suites":["ol/events.js","Listener keys"],"updatePoint":{"line":71,"column":46,"index":2667},"line":71,"code":"    it('does not register duplicated listeners', function () {\n      const target = new EventTarget();\n      const listener = function () {};\n      const key1 = listen(target, 'foo', listener);\n      expect(target.listeners_['foo']).to.eql([listener]);\n      const key2 = listen(target, 'foo', listener);\n      expect(target.listeners_['foo']).to.eql([listener]);\n      expect(key1.listener).to.equal(key2.listener);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"registers multiple listeners if this object is different","suites":["ol/events.js","Listener keys"],"updatePoint":{"line":80,"column":64,"index":3110},"line":80,"code":"    it('registers multiple listeners if this object is different', function () {\n      const target = new EventTarget();\n      const listener = function () {};\n      const key1 = listen(target, 'foo', listener, {});\n      const key2 = listen(target, 'foo', listener, {});\n      expect(key1.listener).to.not.equal(key2.listener);\n      expect(target.listeners_['foo']).to.eql([key1.listener, key2.listener]);\n    });","file":"node/ol/events.test.js","skipped":false,"dir":"test"},{"name":"takes a type as argument","suites":["ol/events/Event.js","constructor"],"updatePoint":{"line":6,"column":32,"index":276},"line":6,"code":"    it('takes a type as argument', function () {\n      const event = new Event('foo');\n      expect(event.type).to.be('foo');\n    });","file":"node/ol/events/event.test.js","skipped":false,"dir":"test"},{"name":"does not set the propagationStopped flag","suites":["ol/events/Event.js","constructor"],"updatePoint":{"line":10,"column":48,"index":426},"line":10,"code":"    it('does not set the propagationStopped flag', function () {\n      const event = new Event('foo');\n      expect(event.propagationStopped).to.be(undefined);\n    });","file":"node/ol/events/event.test.js","skipped":false,"dir":"test"},{"name":"sets the defaultPrevented flag","suites":["ol/events/Event.js","#preventDefault"],"updatePoint":{"line":16,"column":38,"index":634},"line":16,"code":"    it('sets the defaultPrevented flag', function () {\n      const event = new Event('foo');\n      event.preventDefault();\n      expect(event.defaultPrevented).to.be(true);\n    });","file":"node/ol/events/event.test.js","skipped":false,"dir":"test"},{"name":"does the same as #stopPropagation","suites":["ol/events/Event.js","#preventDefault"],"updatePoint":{"line":21,"column":41,"index":818},"line":21,"code":"    it('does the same as #stopPropagation', function () {\n      const event = new Event('foo');\n      expect(event.stopPropagation()).to.equal(event.preventDefault());\n    });","file":"node/ol/events/event.test.js","skipped":false,"dir":"test"},{"name":"calls preventDefault on the event object","suites":["ol/events/Event.js","ol.events.Event.preventDefault"],"updatePoint":{"line":27,"column":48,"index":1066},"line":27,"code":"    it('calls preventDefault on the event object', function () {\n      const event = {\n        preventDefault: sinon.spy()\n      };\n      preventDefault(event);\n      expect(event.preventDefault.called).to.be(true);\n    });","file":"node/ol/events/event.test.js","skipped":false,"dir":"test"},{"name":"calls preventDefault on the event object","suites":["ol/events/Event.js","ol.events.Event.stopPropagation"],"updatePoint":{"line":36,"column":48,"index":1356},"line":36,"code":"    it('calls preventDefault on the event object', function () {\n      const event = {\n        stopPropagation: sinon.spy()\n      };\n      stopPropagation(event);\n      expect(event.stopPropagation.called).to.be(true);\n    });","file":"node/ol/events/event.test.js","skipped":false,"dir":"test"},{"name":"creates an instance","suites":["ol/events/Target.js","constructor"],"updatePoint":{"line":27,"column":27,"index":750},"line":27,"code":"    it('creates an instance', function () {\n      expect(eventTarget).to.be.a(EventTarget);\n      expect(eventTarget).to.be.a(Disposable);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"accepts a default target","suites":["ol/events/Target.js","constructor"],"updatePoint":{"line":31,"column":32,"index":902},"line":31,"code":"    it('accepts a default target', function (done) {\n      const defaultTarget = {};\n      const target = new EventTarget(defaultTarget);\n      target.addEventListener('my-event', function (event) {\n        expect(event.target).to.eql(defaultTarget);\n        done();\n      });\n      target.dispatchEvent('my-event');\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"does not initialize objects in advance","suites":["ol/events/Target.js","constructor"],"updatePoint":{"line":40,"column":46,"index":1241},"line":40,"code":"    it('does not initialize objects in advance', function () {\n      expect(eventTarget.pendingRemovals_).to.be(null);\n      expect(eventTarget.dispatching_).to.be(null);\n      expect(eventTarget.listeners_).to.be(null);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"reports any listeners when called without argument","suites":["ol/events/Target.js","#hasListener"],"updatePoint":{"line":47,"column":58,"index":1529},"line":47,"code":"    it('reports any listeners when called without argument', function () {\n      expect(eventTarget.hasListener()).to.be(false);\n      eventTarget.addEventListener('foo', function () {});\n      expect(eventTarget.hasListener()).to.be(true);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"reports listeners for the type passed as argument","suites":["ol/events/Target.js","#hasListener"],"updatePoint":{"line":52,"column":57,"index":1777},"line":52,"code":"    it('reports listeners for the type passed as argument', function () {\n      eventTarget.addEventListener('foo', function () {});\n      expect(eventTarget.hasListener('foo')).to.be(true);\n      expect(eventTarget.hasListener('bar')).to.be(false);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"has listeners for each registered type","suites":["ol/events/Target.js","#addEventListener()"],"updatePoint":{"line":59,"column":46,"index":2078},"line":59,"code":"    it('has listeners for each registered type', function () {\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.addEventListener('bar', spy2);\n      expect(eventTarget.hasListener('foo')).to.be(true);\n      expect(eventTarget.hasListener('bar')).to.be(true);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"keeps the listeners registry clean","suites":["ol/events/Target.js","#removeEventListener()"],"updatePoint":{"line":67,"column":42,"index":2416},"line":67,"code":"    it('keeps the listeners registry clean', function () {\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.removeEventListener('foo', spy1);\n      expect(eventTarget.hasListener('foo')).to.be(false);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"removes added listeners from the listeners registry","suites":["ol/events/Target.js","#removeEventListener()"],"updatePoint":{"line":72,"column":59,"index":2660},"line":72,"code":"    it('removes added listeners from the listeners registry', function () {\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.addEventListener('foo', spy2);\n      eventTarget.removeEventListener('foo', spy1, false);\n      expect(eventTarget.listeners_['foo']).to.have.length(1);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"does not remove listeners when the specified listener is not found","suites":["ol/events/Target.js","#removeEventListener()"],"updatePoint":{"line":78,"column":74,"index":2979},"line":78,"code":"    it('does not remove listeners when the specified listener is not found', function () {\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.addEventListener('foo', spy2);\n      eventTarget.removeEventListener('foo', undefined);\n      eventTarget.removeEventListener('foo', spy2);\n      eventTarget.removeEventListener('foo', spy2);\n      expect(eventTarget.listeners_['foo']).to.eql([spy1]);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"calls listeners in the correct order","suites":["ol/events/Target.js","#dispatchEvent()"],"updatePoint":{"line":88,"column":44,"index":3418},"line":88,"code":"    it('calls listeners in the correct order', function () {\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.addEventListener('foo', spy2);\n      eventTarget.dispatchEvent('foo');\n      expect(called).to.eql([1, 2]);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"stops propagation when listeners return false","suites":["ol/events/Target.js","#dispatchEvent()"],"updatePoint":{"line":94,"column":53,"index":3671},"line":94,"code":"    it('stops propagation when listeners return false', function () {\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.addEventListener('foo', function (evt) {\n        spy2();\n        return false;\n      }, false);\n      eventTarget.addEventListener('foo', spy3);\n      eventTarget.dispatchEvent('foo');\n      expect(called).to.eql([1, 2]);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"stops propagation when listeners call stopPropagation()","suites":["ol/events/Target.js","#dispatchEvent()"],"updatePoint":{"line":104,"column":63,"index":4048},"line":104,"code":"    it('stops propagation when listeners call stopPropagation()', function () {\n      eventTarget.addEventListener('foo', function (evt) {\n        spy2();\n        evt.stopPropagation();\n      });\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.dispatchEvent('foo');\n      expect(called).to.eql([2]);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"passes a default ol.events.Event object to listeners","suites":["ol/events/Target.js","#dispatchEvent()"],"updatePoint":{"line":113,"column":60,"index":4372},"line":113,"code":"    it('passes a default ol.events.Event object to listeners', function () {\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.dispatchEvent('foo');\n      expect(events[0]).to.be.a(Event);\n      expect(events[0].type).to.be('foo');\n      expect(events[0].target).to.equal(eventTarget);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"passes a custom event object with target to listeners","suites":["ol/events/Target.js","#dispatchEvent()"],"updatePoint":{"line":120,"column":61,"index":4684},"line":120,"code":"    it('passes a custom event object with target to listeners', function () {\n      eventTarget.addEventListener('foo', spy1);\n      const event = {\n        type: 'foo'\n      };\n      eventTarget.dispatchEvent(event);\n      expect(events[0]).to.equal(event);\n      expect(events[0].target).to.equal(eventTarget);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"is safe to remove listeners in listeners","suites":["ol/events/Target.js","#dispatchEvent()"],"updatePoint":{"line":129,"column":48,"index":4992},"line":129,"code":"    it('is safe to remove listeners in listeners', function () {\n      eventTarget.addEventListener('foo', spy3);\n      eventTarget.addEventListener('foo', function () {\n        eventTarget.removeEventListener('foo', spy1);\n        eventTarget.removeEventListener('foo', spy2);\n        eventTarget.removeEventListener('foo', spy3);\n      });\n      eventTarget.addEventListener('foo', spy1);\n      eventTarget.addEventListener('foo', spy2);\n      expect(function () {\n        eventTarget.dispatchEvent('foo');\n      }).not.to.throwException();\n      expect(called).to.eql([3]);\n      expect(eventTarget.listeners_['foo']).to.have.length(1);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"is safe to do weird things in listeners","suites":["ol/events/Target.js","#dispatchEvent()"],"updatePoint":{"line":144,"column":47,"index":5639},"line":144,"code":"    it('is safe to do weird things in listeners', function () {\n      eventTarget.addEventListener('foo', spy2);\n      eventTarget.addEventListener('foo', function weird(evt) {\n        eventTarget.removeEventListener('foo', weird);\n        eventTarget.removeEventListener('foo', spy1);\n        eventTarget.dispatchEvent('foo');\n        eventTarget.removeEventListener('foo', spy2);\n        eventTarget.dispatchEvent('foo');\n        evt.preventDefault();\n      });\n      eventTarget.addEventListener('foo', spy1);\n      expect(function () {\n        eventTarget.dispatchEvent('foo');\n      }).not.to.throwException();\n      expect(called).to.eql([2, 2]);\n      expect(eventTarget.listeners_['foo']).to.be(undefined);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"cleans up foreign references","suites":["ol/events/Target.js","#dispose()"],"updatePoint":{"line":163,"column":36,"index":6396},"line":163,"code":"    it('cleans up foreign references', function () {\n      listen(eventTarget, 'foo', spy1);\n      expect(eventTarget.hasListener('foo')).to.be(true);\n      eventTarget.dispose();\n      expect(eventTarget.hasListener('foo')).to.be(false);\n    });","file":"node/ol/events/Target.test.js","skipped":false,"dir":"test"},{"name":"buffers an extent by some value","suites":["ol/extent.js","buffer"],"updatePoint":{"line":9,"column":39,"index":380},"line":9,"code":"    it('buffers an extent by some value', function () {\n      const extent = [-10, -20, 10, 20];\n      expect(_ol_extent_.buffer(extent, 15)).to.eql([-25, -35, 25, 35]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"creates a copy of an extent","suites":["ol/extent.js","clone"],"updatePoint":{"line":15,"column":35,"index":594},"line":15,"code":"    it('creates a copy of an extent', function () {\n      const extent = _ol_extent_.createOrUpdate(1, 2, 3, 4);\n      const clone = _ol_extent_.clone(extent);\n      expect(_ol_extent_.equals(extent, clone)).to.be(true);\n      _ol_extent_.extendCoordinate(extent, [10, 20]);\n      expect(_ol_extent_.equals(extent, clone)).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns correct result when x left of extent","suites":["ol/extent.js","closestSquaredDistanceXY"],"updatePoint":{"line":24,"column":52,"index":1015},"line":24,"code":"    it('returns correct result when x left of extent', function () {\n      const extent = _ol_extent_.createOrUpdate(0, 0, 1, 1);\n      const x = -2;\n      const y = 0;\n      expect(_ol_extent_.closestSquaredDistanceXY(extent, x, y)).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns correct result when x right of extent","suites":["ol/extent.js","closestSquaredDistanceXY"],"updatePoint":{"line":30,"column":53,"index":1268},"line":30,"code":"    it('returns correct result when x right of extent', function () {\n      const extent = _ol_extent_.createOrUpdate(0, 0, 1, 1);\n      const x = 3;\n      const y = 0;\n      expect(_ol_extent_.closestSquaredDistanceXY(extent, x, y)).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns correct result for other x values","suites":["ol/extent.js","closestSquaredDistanceXY"],"updatePoint":{"line":36,"column":49,"index":1516},"line":36,"code":"    it('returns correct result for other x values', function () {\n      const extent = _ol_extent_.createOrUpdate(0, 0, 1, 1);\n      const x = 0.5;\n      const y = 3;\n      expect(_ol_extent_.closestSquaredDistanceXY(extent, x, y)).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns correct result when y below extent","suites":["ol/extent.js","closestSquaredDistanceXY"],"updatePoint":{"line":42,"column":50,"index":1767},"line":42,"code":"    it('returns correct result when y below extent', function () {\n      const extent = _ol_extent_.createOrUpdate(0, 0, 1, 1);\n      const x = 0;\n      const y = -2;\n      expect(_ol_extent_.closestSquaredDistanceXY(extent, x, y)).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns correct result when y above extent","suites":["ol/extent.js","closestSquaredDistanceXY"],"updatePoint":{"line":48,"column":50,"index":2017},"line":48,"code":"    it('returns correct result when y above extent', function () {\n      const extent = _ol_extent_.createOrUpdate(0, 0, 1, 1);\n      const x = 0;\n      const y = 3;\n      expect(_ol_extent_.closestSquaredDistanceXY(extent, x, y)).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns correct result for other y values","suites":["ol/extent.js","closestSquaredDistanceXY"],"updatePoint":{"line":54,"column":49,"index":2265},"line":54,"code":"    it('returns correct result for other y values', function () {\n      const extent = _ol_extent_.createOrUpdate(0, 0, 1, 1);\n      const x = 3;\n      const y = 0.5;\n      expect(_ol_extent_.closestSquaredDistanceXY(extent, x, y)).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works when no extent passed","suites":["ol/extent.js","createOrUpdateFromCoordinate"],"updatePoint":{"line":62,"column":35,"index":2564},"line":62,"code":"    it('works when no extent passed', function () {\n      const coords = [0, 1];\n      const expected = [0, 1, 0, 1];\n      const got = _ol_extent_.createOrUpdateFromCoordinate(coords);\n      expect(got).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"updates a passed extent","suites":["ol/extent.js","createOrUpdateFromCoordinate"],"updatePoint":{"line":68,"column":31,"index":2790},"line":68,"code":"    it('updates a passed extent', function () {\n      const extent = _ol_extent_.createOrUpdate(-4, -7, -3, -6);\n      const coords = [0, 1];\n      const expected = [0, 1, 0, 1];\n      _ol_extent_.createOrUpdateFromCoordinate(coords, extent);\n      expect(extent).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works when single coordinate and no extent passed","suites":["ol/extent.js","createOrUpdateFromCoordinates"],"updatePoint":{"line":77,"column":57,"index":3170},"line":77,"code":"    it('works when single coordinate and no extent passed', function () {\n      const coords = [[0, 1]];\n      const expected = [0, 1, 0, 1];\n      const got = _ol_extent_.createOrUpdateFromCoordinates(coords);\n      expect(got).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"changes the passed extent when single coordinate","suites":["ol/extent.js","createOrUpdateFromCoordinates"],"updatePoint":{"line":83,"column":56,"index":3424},"line":83,"code":"    it('changes the passed extent when single coordinate', function () {\n      const extent = _ol_extent_.createOrUpdate(-4, -7, -3, -6);\n      const coords = [[0, 1]];\n      const expected = [0, 1, 0, 1];\n      _ol_extent_.createOrUpdateFromCoordinates(coords, extent);\n      expect(extent).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works when multiple coordinates and no extent passed","suites":["ol/extent.js","createOrUpdateFromCoordinates"],"updatePoint":{"line":90,"column":60,"index":3746},"line":90,"code":"    it('works when multiple coordinates and no extent passed', function () {\n      const coords = [[0, 1], [2, 3]];\n      const expected = [0, 1, 2, 3];\n      const got = _ol_extent_.createOrUpdateFromCoordinates(coords);\n      expect(got).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"changes the passed extent when multiple coordinates given","suites":["ol/extent.js","createOrUpdateFromCoordinates"],"updatePoint":{"line":96,"column":65,"index":4017},"line":96,"code":"    it('changes the passed extent when multiple coordinates given', function () {\n      const extent = _ol_extent_.createOrUpdate(-4, -7, -3, -6);\n      const coords = [[0, 1], [-2, -1]];\n      const expected = [-2, -1, 0, 1];\n      _ol_extent_.createOrUpdateFromCoordinates(coords, extent);\n      expect(extent).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works when single ring and no extent passed","suites":["ol/extent.js","createOrUpdateFromRings"],"updatePoint":{"line":105,"column":51,"index":4400},"line":105,"code":"    it('works when single ring and no extent passed', function () {\n      const ring = [[0, 0], [0, 2], [2, 2], [2, 0], [0, 0]];\n      const rings = [ring];\n      const expected = [0, 0, 2, 2];\n      const got = _ol_extent_.createOrUpdateFromRings(rings);\n      expect(got).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"changes the passed extent when single ring given","suites":["ol/extent.js","createOrUpdateFromRings"],"updatePoint":{"line":112,"column":56,"index":4705},"line":112,"code":"    it('changes the passed extent when single ring given', function () {\n      const ring = [[0, 0], [0, 2], [2, 2], [2, 0], [0, 0]];\n      const rings = [ring];\n      const extent = [1, 1, 4, 7];\n      const expected = [0, 0, 2, 2];\n      _ol_extent_.createOrUpdateFromRings(rings, extent);\n      expect(extent).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works when multiple rings and no extent passed","suites":["ol/extent.js","createOrUpdateFromRings"],"updatePoint":{"line":120,"column":54,"index":5042},"line":120,"code":"    it('works when multiple rings and no extent passed', function () {\n      const ring1 = [[0, 0], [0, 2], [2, 2], [2, 0], [0, 0]];\n      const ring2 = [[1, 1], [1, 3], [3, 3], [3, 1], [1, 1]];\n      const rings = [ring1, ring2];\n      const expected = [0, 0, 3, 3];\n      const got = _ol_extent_.createOrUpdateFromRings(rings);\n      expect(got).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"changes the passed extent when multiple rings given","suites":["ol/extent.js","createOrUpdateFromRings"],"updatePoint":{"line":128,"column":59,"index":5421},"line":128,"code":"    it('changes the passed extent when multiple rings given', function () {\n      const ring1 = [[0, 0], [0, 2], [2, 2], [2, 0], [0, 0]];\n      const ring2 = [[1, 1], [1, 3], [3, 3], [3, 1], [1, 1]];\n      const rings = [ring1, ring2];\n      const extent = [1, 1, 4, 7];\n      const expected = [0, 0, 3, 3];\n      _ol_extent_.createOrUpdateFromRings(rings, extent);\n      expect(extent).to.eql(expected);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"calls the passed callback for each corner","suites":["ol/extent.js","forEachCorner"],"updatePoint":{"line":149,"column":49,"index":6108},"line":149,"code":"    it('calls the passed callback for each corner', function () {\n      const extent = [1, 2, 3, 4];\n      _ol_extent_.forEachCorner(extent, callbackFalse);\n      expect(callbackFalse.callCount).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"calls the passed callback with each corner","suites":["ol/extent.js","forEachCorner"],"updatePoint":{"line":154,"column":50,"index":6322},"line":154,"code":"    it('calls the passed callback with each corner', function () {\n      const extent = [1, 2, 3, 4];\n      _ol_extent_.forEachCorner(extent, callbackFalse);\n      const firstCallFirstArg = callbackFalse.args[0][0];\n      const secondCallFirstArg = callbackFalse.args[1][0];\n      const thirdCallFirstArg = callbackFalse.args[2][0];\n      const fourthCallFirstArg = callbackFalse.args[3][0];\n      expect(firstCallFirstArg).to.eql([1, 2]); // bl\n      expect(secondCallFirstArg).to.eql([3, 2]); // br\n      expect(thirdCallFirstArg).to.eql([3, 4]); // tr\n      expect(fourthCallFirstArg).to.eql([1, 4]); // tl\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"calls a truthy callback only once","suites":["ol/extent.js","forEachCorner"],"updatePoint":{"line":167,"column":41,"index":6932},"line":167,"code":"    it('calls a truthy callback only once', function () {\n      const extent = [1, 2, 3, 4];\n      _ol_extent_.forEachCorner(extent, callbackTrue);\n      expect(callbackTrue.callCount).to.be(1);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"ensures that any corner can cancel the callback execution","suites":["ol/extent.js","forEachCorner"],"updatePoint":{"line":172,"column":65,"index":7159},"line":172,"code":"    it('ensures that any corner can cancel the callback execution', function () {\n      const extent = [1, 2, 3, 4];\n      const bottomLeftSpy = sinon.spy(function (corner) {\n        return corner[0] === 1 && corner[1] === 2 ? true : false;\n      });\n      const bottomRightSpy = sinon.spy(function (corner) {\n        return corner[0] === 3 && corner[1] === 2 ? true : false;\n      });\n      const topRightSpy = sinon.spy(function (corner) {\n        return corner[0] === 3 && corner[1] === 4 ? true : false;\n      });\n      const topLeftSpy = sinon.spy(function (corner) {\n        return corner[0] === 1 && corner[1] === 4 ? true : false;\n      });\n      _ol_extent_.forEachCorner(extent, bottomLeftSpy);\n      _ol_extent_.forEachCorner(extent, bottomRightSpy);\n      _ol_extent_.forEachCorner(extent, topRightSpy);\n      _ol_extent_.forEachCorner(extent, topLeftSpy);\n      expect(bottomLeftSpy.callCount).to.be(1);\n      expect(bottomRightSpy.callCount).to.be(2);\n      expect(topRightSpy.callCount).to.be(3);\n      expect(topLeftSpy.callCount).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns false eventually, if no invocation returned a truthy value","suites":["ol/extent.js","forEachCorner"],"updatePoint":{"line":195,"column":74,"index":8233},"line":195,"code":"    it('returns false eventually, if no invocation returned a truthy value', function () {\n      const extent = [1, 2, 3, 4];\n      const spy = sinon.spy(); // will return undefined for each corner\n      const got = _ol_extent_.forEachCorner(extent, spy);\n      expect(spy.callCount).to.be(4);\n      expect(got).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns zero for empty extents","suites":["ol/extent.js","getArea"],"updatePoint":{"line":204,"column":38,"index":8573},"line":204,"code":"    it('returns zero for empty extents', function () {\n      const emptyExtent = _ol_extent_.createEmpty();\n      const areaEmpty = _ol_extent_.getArea(emptyExtent);\n      expect(areaEmpty).to.be(0);\n      const extentDeltaXZero = [45, 67, 45, 78];\n      const areaDeltaXZero = _ol_extent_.getArea(extentDeltaXZero);\n      expect(areaDeltaXZero).to.be(0);\n      const extentDeltaYZero = [11, 67, 45, 67];\n      const areaDeltaYZero = _ol_extent_.getArea(extentDeltaYZero);\n      expect(areaDeltaYZero).to.be(0);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"calculates correct area for other extents","suites":["ol/extent.js","getArea"],"updatePoint":{"line":215,"column":49,"index":9104},"line":215,"code":"    it('calculates correct area for other extents', function () {\n      const extent = [0, 0, 10, 10];\n      const area = _ol_extent_.getArea(extent);\n      expect(area).to.be(100);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns the intersection of two extents","suites":["ol/extent.js","getIntersection()"],"updatePoint":{"line":222,"column":47,"index":9344},"line":222,"code":"    it('returns the intersection of two extents', function () {\n      const world = [-180, -90, 180, 90];\n      const north = [-180, 0, 180, 90];\n      const farNorth = [-180, 45, 180, 90];\n      const east = [0, -90, 180, 90];\n      const farEast = [90, -90, 180, 90];\n      const south = [-180, -90, 180, 0];\n      const farSouth = [-180, -90, 180, -45];\n      const west = [-180, -90, 0, 90];\n      const farWest = [-180, -90, -90, 90];\n      const none = _ol_extent_.createEmpty();\n      expect(_ol_extent_.getIntersection(world, none)).to.eql(none);\n      expect(_ol_extent_.getIntersection(world, north)).to.eql(north);\n      expect(_ol_extent_.getIntersection(world, east)).to.eql(east);\n      expect(_ol_extent_.getIntersection(world, south)).to.eql(south);\n      expect(_ol_extent_.getIntersection(world, west)).to.eql(west);\n      expect(_ol_extent_.getIntersection(farEast, farWest)).to.eql(none);\n      expect(_ol_extent_.getIntersection(farNorth, farSouth)).to.eql(none);\n      expect(_ol_extent_.getIntersection(north, west)).to.eql([-180, 0, 0, 90]);\n      expect(_ol_extent_.getIntersection(east, south)).to.eql([0, -90, 180, 0]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"can take an destination extent","suites":["ol/extent.js","getIntersection()"],"updatePoint":{"line":243,"column":38,"index":10490},"line":243,"code":"    it('can take an destination extent', function () {\n      const world = [-180, -90, 180, 90];\n      const north = [-180, 0, 180, 90];\n      const none = _ol_extent_.createEmpty();\n      let tmpExtent = [-180, 45, 180, 90];\n      expect(_ol_extent_.getIntersection(world, north, tmpExtent)).to.eql(north);\n      expect(_ol_extent_.getIntersection(world, none, tmpExtent)).to.eql(none);\n      tmpExtent = [-180, -90, 180, 90];\n      expect(_ol_extent_.getIntersection(tmpExtent, north, tmpExtent)).to.eql(north);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/extent.js","containsCoordinate","positive"],"updatePoint":{"line":256,"column":22,"index":11088},"line":256,"code":"      it('returns true', function () {\n        const extent = [1, 2, 3, 4];\n        expect(_ol_extent_.containsCoordinate(extent, [1, 2])).to.be.ok();\n        expect(_ol_extent_.containsCoordinate(extent, [1, 3])).to.be.ok();\n        expect(_ol_extent_.containsCoordinate(extent, [1, 4])).to.be.ok();\n        expect(_ol_extent_.containsCoordinate(extent, [2, 2])).to.be.ok();\n        expect(_ol_extent_.containsCoordinate(extent, [2, 3])).to.be.ok();\n        expect(_ol_extent_.containsCoordinate(extent, [2, 4])).to.be.ok();\n        expect(_ol_extent_.containsCoordinate(extent, [3, 2])).to.be.ok();\n        expect(_ol_extent_.containsCoordinate(extent, [3, 3])).to.be.ok();\n        expect(_ol_extent_.containsCoordinate(extent, [3, 4])).to.be.ok();\n      });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/extent.js","containsCoordinate","negative"],"updatePoint":{"line":270,"column":23,"index":11897},"line":270,"code":"      it('returns false', function () {\n        const extent = [1, 2, 3, 4];\n        expect(_ol_extent_.containsCoordinate(extent, [0, 1])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [0, 2])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [0, 3])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [0, 4])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [0, 5])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [1, 1])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [1, 5])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [2, 1])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [2, 5])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [3, 1])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [3, 5])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [4, 1])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [4, 2])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [4, 3])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [4, 4])).to.not.be();\n        expect(_ol_extent_.containsCoordinate(extent, [4, 5])).to.not.be();\n      });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns intersecting for within","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":298,"column":39,"index":13436},"line":298,"code":"    it('returns intersecting for within', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [0, 0]);\n      expect(rel).to.be(INTERSECTING);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns intersecting for touching top","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":302,"column":45,"index":13615},"line":302,"code":"    it('returns intersecting for touching top', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [0, 90]);\n      expect(rel).to.be(INTERSECTING);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns intersecting for touching right","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":306,"column":47,"index":13797},"line":306,"code":"    it('returns intersecting for touching right', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [180, 0]);\n      expect(rel).to.be(INTERSECTING);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns intersecting for touching bottom","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":310,"column":48,"index":13981},"line":310,"code":"    it('returns intersecting for touching bottom', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [0, -90]);\n      expect(rel).to.be(INTERSECTING);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns intersecting for touching left","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":314,"column":46,"index":14163},"line":314,"code":"    it('returns intersecting for touching left', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [-180, 0]);\n      expect(rel).to.be(INTERSECTING);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"above for north","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":318,"column":23,"index":14323},"line":318,"code":"    it('above for north', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [0, 100]);\n      expect(rel).to.be(ABOVE);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"above and right for northeast","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":322,"column":37,"index":14489},"line":322,"code":"    it('above and right for northeast', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [190, 100]);\n      expect(rel & ABOVE).to.be(ABOVE);\n      expect(rel & RIGHT).to.be(RIGHT);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"right for east","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":327,"column":22,"index":14690},"line":327,"code":"    it('right for east', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [190, 0]);\n      expect(rel).to.be(RIGHT);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"below and right for southeast","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":331,"column":37,"index":14856},"line":331,"code":"    it('below and right for southeast', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [190, -100]);\n      expect(rel & BELOW).to.be(BELOW);\n      expect(rel & RIGHT).to.be(RIGHT);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"below for south","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":336,"column":23,"index":15059},"line":336,"code":"    it('below for south', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [0, -100]);\n      expect(rel).to.be(BELOW);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"below and left for southwest","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":340,"column":36,"index":15225},"line":340,"code":"    it('below and left for southwest', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [-190, -100]);\n      expect(rel & BELOW).to.be(BELOW);\n      expect(rel & LEFT).to.be(LEFT);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"left for west","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":345,"column":21,"index":15425},"line":345,"code":"    it('left for west', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [-190, 0]);\n      expect(rel).to.be(LEFT);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"above and left for northwest","suites":["ol/extent.js","coordinateRelationship()"],"updatePoint":{"line":349,"column":36,"index":15590},"line":349,"code":"    it('above and left for northwest', function () {\n      const rel = _ol_extent_.coordinateRelationship(extent, [-190, 100]);\n      expect(rel & ABOVE).to.be(ABOVE);\n      expect(rel & LEFT).to.be(LEFT);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns the expected center","suites":["ol/extent.js","getCenter"],"updatePoint":{"line":356,"column":35,"index":15847},"line":356,"code":"    it('returns the expected center', function () {\n      const extent = [1, 2, 3, 4];\n      const center = _ol_extent_.getCenter(extent);\n      expect(center[0]).to.eql(2);\n      expect(center[1]).to.eql(3);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns [NaN, NaN] for empty extents","suites":["ol/extent.js","getCenter"],"updatePoint":{"line":362,"column":44,"index":16073},"line":362,"code":"    it('returns [NaN, NaN] for empty extents', function () {\n      const extent = _ol_extent_.createEmpty();\n      const center = _ol_extent_.getCenter(extent);\n      expect('' + center[0]).to.be('NaN');\n      expect('' + center[1]).to.be('NaN');\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"gets the bottom left","suites":["ol/extent.js","getCorner"],"updatePoint":{"line":371,"column":28,"index":16389},"line":371,"code":"    it('gets the bottom left', function () {\n      const corner = 'bottom-left';\n      expect(_ol_extent_.getCorner(extent, corner)).to.eql([1, 2]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"gets the bottom right","suites":["ol/extent.js","getCorner"],"updatePoint":{"line":375,"column":29,"index":16547},"line":375,"code":"    it('gets the bottom right', function () {\n      const corner = 'bottom-right';\n      expect(_ol_extent_.getCorner(extent, corner)).to.eql([3, 2]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"gets the top left","suites":["ol/extent.js","getCorner"],"updatePoint":{"line":379,"column":25,"index":16702},"line":379,"code":"    it('gets the top left', function () {\n      const corner = 'top-left';\n      expect(_ol_extent_.getCorner(extent, corner)).to.eql([1, 4]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"gets the top right","suites":["ol/extent.js","getCorner"],"updatePoint":{"line":383,"column":26,"index":16854},"line":383,"code":"    it('gets the top right', function () {\n      const corner = 'top-right';\n      expect(_ol_extent_.getCorner(extent, corner)).to.eql([3, 4]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"throws exception for unexpected corner","suites":["ol/extent.js","getCorner"],"updatePoint":{"line":387,"column":46,"index":17027},"line":387,"code":"    it('throws exception for unexpected corner', function () {\n      expect(function () {\n        _ol_extent_.getCorner(extent, 'foobar');\n      }).to.throwException();\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns enlarged area of two extents","suites":["ol/extent.js","getEnlargedArea"],"updatePoint":{"line":394,"column":44,"index":17252},"line":394,"code":"    it('returns enlarged area of two extents', function () {\n      const extent1 = [-1, -1, 0, 0];\n      const extent2 = [0, 0, 1, 1];\n      const enlargedArea = _ol_extent_.getEnlargedArea(extent1, extent2);\n      expect(enlargedArea).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for a unit square","suites":["ol/extent.js","getForViewAndSize"],"updatePoint":{"line":402,"column":31,"index":17545},"line":402,"code":"    it('works for a unit square', function () {\n      const extent = _ol_extent_.getForViewAndSize([0, 0], 1, 0, [1, 1]);\n      expect(extent[0]).to.be(-0.5);\n      expect(extent[2]).to.be(0.5);\n      expect(extent[1]).to.be(-0.5);\n      expect(extent[3]).to.be(0.5);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for center","suites":["ol/extent.js","getForViewAndSize"],"updatePoint":{"line":409,"column":24,"index":17814},"line":409,"code":"    it('works for center', function () {\n      const extent = _ol_extent_.getForViewAndSize([5, 10], 1, 0, [1, 1]);\n      expect(extent[0]).to.be(4.5);\n      expect(extent[2]).to.be(5.5);\n      expect(extent[1]).to.be(9.5);\n      expect(extent[3]).to.be(10.5);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for rotation","suites":["ol/extent.js","getForViewAndSize"],"updatePoint":{"line":416,"column":26,"index":18085},"line":416,"code":"    it('works for rotation', function () {\n      const extent = _ol_extent_.getForViewAndSize([0, 0], 1, Math.PI / 4, [1, 1]);\n      expect(extent[0]).to.roughlyEqual(-Math.sqrt(0.5), 1e-9);\n      expect(extent[2]).to.roughlyEqual(Math.sqrt(0.5), 1e-9);\n      expect(extent[1]).to.roughlyEqual(-Math.sqrt(0.5), 1e-9);\n      expect(extent[3]).to.roughlyEqual(Math.sqrt(0.5), 1e-9);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for resolution","suites":["ol/extent.js","getForViewAndSize"],"updatePoint":{"line":423,"column":28,"index":18476},"line":423,"code":"    it('works for resolution', function () {\n      const extent = _ol_extent_.getForViewAndSize([0, 0], 2, 0, [1, 1]);\n      expect(extent[0]).to.be(-1);\n      expect(extent[2]).to.be(1);\n      expect(extent[1]).to.be(-1);\n      expect(extent[3]).to.be(1);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for size","suites":["ol/extent.js","getForViewAndSize"],"updatePoint":{"line":430,"column":22,"index":18735},"line":430,"code":"    it('works for size', function () {\n      const extent = _ol_extent_.getForViewAndSize([0, 0], 1, 0, [10, 5]);\n      expect(extent[0]).to.be(-5);\n      expect(extent[2]).to.be(5);\n      expect(extent[1]).to.be(-2.5);\n      expect(extent[3]).to.be(2.5);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns the expected size","suites":["ol/extent.js","getSize"],"updatePoint":{"line":439,"column":33,"index":19052},"line":439,"code":"    it('returns the expected size', function () {\n      const extent = [0, 1, 2, 4];\n      const size = _ol_extent_.getSize(extent);\n      expect(size).to.eql([2, 3]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns correct area when extents intersect","suites":["ol/extent.js","getIntersectionArea"],"updatePoint":{"line":446,"column":51,"index":19300},"line":446,"code":"    it('returns correct area when extents intersect', function () {\n      const extent1 = [0, 0, 2, 2];\n      const extent2 = [1, 1, 3, 3];\n      const intersectionArea = _ol_extent_.getIntersectionArea(extent1, extent2);\n      expect(intersectionArea).to.be(1);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns 0 when extents do not intersect","suites":["ol/extent.js","getIntersectionArea"],"updatePoint":{"line":452,"column":47,"index":19567},"line":452,"code":"    it('returns 0 when extents do not intersect', function () {\n      const extent1 = [0, 0, 1, 1];\n      const extent2 = [2, 2, 3, 3];\n      const intersectionArea = _ol_extent_.getIntersectionArea(extent1, extent2);\n      expect(intersectionArea).to.be(0);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns the correct margin (sum of width and height)","suites":["ol/extent.js","getMargin"],"updatePoint":{"line":460,"column":60,"index":19891},"line":460,"code":"    it('returns the correct margin (sum of width and height)', function () {\n      const extent = [1, 2, 3, 4];\n      expect(_ol_extent_.getMargin(extent)).to.be(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/extent.js","intersects"],"updatePoint":{"line":466,"column":34,"index":20084},"line":466,"code":"    it('returns the expected value', function () {\n      const intersects = _ol_extent_.intersects;\n      const extent = [50, 50, 100, 100];\n      expect(intersects(extent, extent)).to.be(true);\n      expect(intersects(extent, [20, 20, 80, 80])).to.be(true);\n      expect(intersects(extent, [20, 50, 80, 100])).to.be(true);\n      expect(intersects(extent, [20, 80, 80, 120])).to.be(true);\n      expect(intersects(extent, [50, 20, 100, 80])).to.be(true);\n      expect(intersects(extent, [50, 80, 100, 120])).to.be(true);\n      expect(intersects(extent, [80, 20, 120, 80])).to.be(true);\n      expect(intersects(extent, [80, 50, 120, 100])).to.be(true);\n      expect(intersects(extent, [80, 80, 120, 120])).to.be(true);\n      expect(intersects(extent, [20, 20, 120, 120])).to.be(true);\n      expect(intersects(extent, [70, 70, 80, 80])).to.be(true);\n      expect(intersects(extent, [10, 10, 30, 30])).to.be(false);\n      expect(intersects(extent, [30, 10, 70, 30])).to.be(false);\n      expect(intersects(extent, [50, 10, 100, 30])).to.be(false);\n      expect(intersects(extent, [80, 10, 120, 30])).to.be(false);\n      expect(intersects(extent, [120, 10, 140, 30])).to.be(false);\n      expect(intersects(extent, [10, 30, 30, 70])).to.be(false);\n      expect(intersects(extent, [120, 30, 140, 70])).to.be(false);\n      expect(intersects(extent, [10, 50, 30, 100])).to.be(false);\n      expect(intersects(extent, [120, 50, 140, 100])).to.be(false);\n      expect(intersects(extent, [10, 80, 30, 120])).to.be(false);\n      expect(intersects(extent, [120, 80, 140, 120])).to.be(false);\n      expect(intersects(extent, [10, 120, 30, 140])).to.be(false);\n      expect(intersects(extent, [30, 120, 70, 140])).to.be(false);\n      expect(intersects(extent, [50, 120, 100, 140])).to.be(false);\n      expect(intersects(extent, [80, 120, 120, 140])).to.be(false);\n      expect(intersects(extent, [120, 120, 140, 140])).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"scales the extent from its center","suites":["ol/extent.js","scaleFromCenter"],"updatePoint":{"line":499,"column":41,"index":22064},"line":499,"code":"    it('scales the extent from its center', function () {\n      const extent = [1, 1, 3, 3];\n      _ol_extent_.scaleFromCenter(extent, 2);\n      expect(extent[0]).to.eql(0);\n      expect(extent[2]).to.eql(4);\n      expect(extent[1]).to.eql(0);\n      expect(extent[3]).to.eql(4);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if contained","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":524,"column":33,"index":22856},"line":524,"code":"    it('returns true if contained', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, center, inside);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses top","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":528,"column":35,"index":23034},"line":528,"code":"    it('returns true if crosses top', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, center, north);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses right","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":532,"column":37,"index":23213},"line":532,"code":"    it('returns true if crosses right', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, center, east);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses bottom","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":536,"column":38,"index":23392},"line":536,"code":"    it('returns true if crosses bottom', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, center, south);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses left","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":540,"column":36,"index":23570},"line":540,"code":"    it('returns true if crosses left', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, center, west);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns false if above","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":544,"column":30,"index":23741},"line":544,"code":"    it('returns false if above', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, northwest, north);\n      expect(intersects).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns false if right","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":548,"column":30,"index":23917},"line":548,"code":"    it('returns false if right', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, northeast, east);\n      expect(intersects).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns false if below","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":552,"column":30,"index":24092},"line":552,"code":"    it('returns false if below', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, south, southwest);\n      expect(intersects).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns false if left","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":556,"column":29,"index":24267},"line":556,"code":"    it('returns false if left', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, west, southwest);\n      expect(intersects).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses top to bottom","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":560,"column":45,"index":24457},"line":560,"code":"    it('returns true if crosses top to bottom', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, north, south);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses bottom to top","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":564,"column":45,"index":24643},"line":564,"code":"    it('returns true if crosses bottom to top', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, south, north);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses left to right","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":568,"column":45,"index":24829},"line":568,"code":"    it('returns true if crosses left to right', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, west, east);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses right to left","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":572,"column":45,"index":25013},"line":572,"code":"    it('returns true if crosses right to left', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, east, west);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses northwest to east","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":576,"column":49,"index":25201},"line":576,"code":"    it('returns true if crosses northwest to east', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, northwest, east);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if crosses south to west","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":580,"column":45,"index":25390},"line":580,"code":"    it('returns true if crosses south to west', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, south, west);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if touches top","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":584,"column":35,"index":25565},"line":584,"code":"    it('returns true if touches top', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, northwest, top);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if touches right","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":588,"column":37,"index":25745},"line":588,"code":"    it('returns true if touches right', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, southeast, right);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if touches bottom","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":592,"column":38,"index":25928},"line":592,"code":"    it('returns true if touches bottom', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, bottom, south);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true if touches left","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":596,"column":36,"index":26106},"line":596,"code":"    it('returns true if touches left', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, left, west);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for zero length inside","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":600,"column":36,"index":26281},"line":600,"code":"    it('works for zero length inside', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, center, center);\n      expect(intersects).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for zero length outside","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":604,"column":37,"index":26461},"line":604,"code":"    it('works for zero length outside', function () {\n      const intersects = _ol_extent_.intersectsSegment(extent, north, north);\n      expect(intersects).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for left/right intersection spanning top to bottom","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":608,"column":64,"index":26667},"line":608,"code":"    it('works for left/right intersection spanning top to bottom', function () {\n      const extent = [2, 1, 3, 4];\n      const start = [0, 0];\n      const end = [5, 5];\n      expect(_ol_extent_.intersectsSegment(extent, start, end)).to.be(true);\n      expect(_ol_extent_.intersectsSegment(extent, end, start)).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"works for top/bottom intersection spanning left to right","suites":["ol/extent.js","intersectsSegment()"],"updatePoint":{"line":615,"column":64,"index":26999},"line":615,"code":"    it('works for top/bottom intersection spanning left to right', function () {\n      const extent = [1, 2, 4, 3];\n      const start = [0, 0];\n      const end = [5, 5];\n      expect(_ol_extent_.intersectsSegment(extent, start, end)).to.be(true);\n      expect(_ol_extent_.intersectsSegment(extent, end, start)).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns empty for empty extents","suites":["ol/extent.js","#applyTransform()"],"updatePoint":{"line":624,"column":39,"index":27358},"line":624,"code":"    it('returns empty for empty extents', function () {\n      const transformFn = getTransform('EPSG:4326', 'EPSG:3857');\n      const emptyExtent = _ol_extent_.createEmpty();\n      const destEmpty = _ol_extent_.applyTransform(emptyExtent, transformFn);\n      expect(destEmpty).to.eql(emptyExtent);\n      const extentDeltaXNeg = [45, 67, 44, 78];\n      const destDeltaXNeg = _ol_extent_.applyTransform(extentDeltaXNeg, transformFn);\n      expect(destDeltaXNeg).to.eql(emptyExtent);\n      const extentDeltaYNeg = [11, 67, 44, 66];\n      const destDeltaYNeg = _ol_extent_.applyTransform(extentDeltaYNeg, transformFn);\n      expect(destDeltaYNeg).to.eql(emptyExtent);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"does transform","suites":["ol/extent.js","#applyTransform()"],"updatePoint":{"line":636,"column":22,"index":28013},"line":636,"code":"    it('does transform', function () {\n      const transformFn = getTransform('EPSG:4326', 'EPSG:3857');\n      const sourceExtent = [-15, -30, 45, 60];\n      const destinationExtent = _ol_extent_.applyTransform(sourceExtent, transformFn);\n      expect(destinationExtent).not.to.be(undefined);\n      expect(destinationExtent).not.to.be(null);\n      // FIXME check values with third-party tool\n      expect(destinationExtent[0]).to.roughlyEqual(-1669792.3618991037, 1e-9);\n      expect(destinationExtent[2]).to.roughlyEqual(5009377.085697311, 1e-9);\n      expect(destinationExtent[1]).to.roughlyEqual(-3503549.843504376, 1e-8);\n      expect(destinationExtent[3]).to.roughlyEqual(8399737.889818361, 1e-8);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"does not treat a single point as empty","suites":["ol/extent.js","#applyTransform()"],"updatePoint":{"line":648,"column":46,"index":28748},"line":648,"code":"    it('does not treat a single point as empty', function () {\n      const transformFn = getTransform('EPSG:4326', 'EPSG:3857');\n      const sourceExtent = _ol_extent_.boundingExtent([[45, 60]]);\n      const destinationExtent = _ol_extent_.applyTransform(sourceExtent, transformFn);\n      expect(destinationExtent).not.to.be(undefined);\n      expect(destinationExtent).not.to.be(null);\n      expect(destinationExtent[0]).to.roughlyEqual(5009377.085697311, 1e-9);\n      expect(destinationExtent[2]).to.eql(destinationExtent[0]);\n      expect(destinationExtent[1]).to.roughlyEqual(8399737.889818361, 1e-8);\n      expect(destinationExtent[3]).to.eql(destinationExtent[1]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"takes arbitrary function","suites":["ol/extent.js","#applyTransform()"],"updatePoint":{"line":659,"column":32,"index":29412},"line":659,"code":"    it('takes arbitrary function', function () {\n      const transformFn = function (input, output, opt_dimension) {\n        const dimension = opt_dimension !== undefined ? opt_dimension : 2;\n        if (output === undefined) {\n          output = new Array(input.length);\n        }\n        const n = input.length;\n        let i;\n        for (i = 0; i < n; i += dimension) {\n          output[i] = -input[i];\n          output[i + 1] = -input[i + 1];\n        }\n        return output;\n      };\n      const sourceExtent = [-15, -30, 45, 60];\n      const destinationExtent = _ol_extent_.applyTransform(sourceExtent, transformFn);\n      expect(destinationExtent).not.to.be(undefined);\n      expect(destinationExtent).not.to.be(null);\n      expect(destinationExtent[0]).to.be(-45);\n      expect(destinationExtent[2]).to.be(15);\n      expect(destinationExtent[1]).to.be(-60);\n      expect(destinationExtent[3]).to.be(30);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"can use the stops option","suites":["ol/extent.js","#applyTransform()"],"updatePoint":{"line":682,"column":32,"index":30333},"line":682,"code":"    it('can use the stops option', function () {\n      proj4.defs('EPSG:32632', '+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs');\n      register(proj4);\n      const transformFn = getTransform('EPSG:4326', 'EPSG:32632');\n      const sourceExtentN = [6, 0, 12, 84];\n      const destinationExtentN = _ol_extent_.applyTransform(sourceExtentN, transformFn);\n      expect(destinationExtentN).not.to.be(undefined);\n      expect(destinationExtentN).not.to.be(null);\n      expect(destinationExtentN[0]).to.roughlyEqual(166021.44308053964, 1e-8);\n      expect(destinationExtentN[2]).to.roughlyEqual(833978.5569194605, 1e-8);\n      expect(destinationExtentN[1]).to.roughlyEqual(0, 1e-8);\n      expect(destinationExtentN[3]).to.roughlyEqual(9329005.182447437, 1e-8);\n      const sourceExtentNS = [6, -84, 12, 84];\n      const destinationExtentNS = _ol_extent_.applyTransform(sourceExtentNS, transformFn);\n      expect(destinationExtentNS).not.to.be(undefined);\n      expect(destinationExtentNS).not.to.be(null);\n      expect(destinationExtentNS[0]).to.roughlyEqual(465005.34493886377, 1e-8);\n      expect(destinationExtentNS[2]).to.roughlyEqual(534994.6550611362, 1e-8);\n      expect(destinationExtentNS[1]).to.roughlyEqual(-destinationExtentN[3], 1e-8);\n      expect(destinationExtentNS[3]).to.roughlyEqual(destinationExtentN[3], 1e-8);\n      const destinationExtentNS2 = _ol_extent_.applyTransform(sourceExtentNS, transformFn, undefined, 2);\n      expect(destinationExtentNS2).not.to.be(undefined);\n      expect(destinationExtentNS2).not.to.be(null);\n      expect(destinationExtentNS2[0]).to.roughlyEqual(destinationExtentN[0], 1e-8);\n      expect(destinationExtentNS2[2]).to.roughlyEqual(destinationExtentN[2], 1e-8);\n      expect(destinationExtentNS2[1]).to.roughlyEqual(-destinationExtentN[3], 1e-8);\n      expect(destinationExtentNS2[3]).to.roughlyEqual(destinationExtentN[3], 1e-8);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"leaves real world extent untouched","suites":["ol/extent.js","wrapX()"],"updatePoint":{"line":713,"column":42,"index":32316},"line":713,"code":"    it('leaves real world extent untouched', function () {\n      expect(_ol_extent_.wrapX([16, 48, 18, 49], projection)).to.eql([16, 48, 18, 49]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"moves left world extent to real world","suites":["ol/extent.js","wrapX()"],"updatePoint":{"line":716,"column":45,"index":32474},"line":716,"code":"    it('moves left world extent to real world', function () {\n      expect(_ol_extent_.wrapX([-344, 48, -342, 49], projection)).to.eql([16, 48, 18, 49]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"moves right world extent to real world","suites":["ol/extent.js","wrapX()"],"updatePoint":{"line":719,"column":46,"index":32637},"line":719,"code":"    it('moves right world extent to real world', function () {\n      expect(_ol_extent_.wrapX([376, 48, 378, 49], projection)).to.eql([16, 48, 18, 49]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"moves far off left extent to real world","suites":["ol/extent.js","wrapX()"],"updatePoint":{"line":722,"column":47,"index":32799},"line":722,"code":"    it('moves far off left extent to real world', function () {\n      expect(_ol_extent_.wrapX([-1064, 48, -1062, 49], projection)).to.eql([16, 48, 18, 49]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"moves far off right extent to real world","suites":["ol/extent.js","wrapX()"],"updatePoint":{"line":725,"column":48,"index":32966},"line":725,"code":"    it('moves far off right extent to real world', function () {\n      expect(_ol_extent_.wrapX([1096, 48, 1098, 49], projection)).to.eql([16, 48, 18, 49]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"leaves -180 crossing extent with real world center untouched","suites":["ol/extent.js","wrapX()"],"updatePoint":{"line":728,"column":68,"index":33151},"line":728,"code":"    it('leaves -180 crossing extent with real world center untouched', function () {\n      expect(_ol_extent_.wrapX([-184, 48, 16, 49], projection)).to.eql([-184, 48, 16, 49]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"moves +180 crossing extent with off-world center to the real world","suites":["ol/extent.js","wrapX()"],"updatePoint":{"line":731,"column":74,"index":33342},"line":731,"code":"    it('moves +180 crossing extent with off-world center to the real world', function () {\n      expect(_ol_extent_.wrapX([300, 48, 376, 49], projection)).to.eql([-60, 48, 16, 49]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"produces the same real world extent for shifted extents with center at +/-180","suites":["ol/extent.js","wrapX()"],"updatePoint":{"line":734,"column":85,"index":33543},"line":734,"code":"    it('produces the same real world extent for shifted extents with center at +/-180', function () {\n      expect(_ol_extent_.wrapX([360, -90, 720, 90], projection)).to.eql([-360, -90, 0, 90]);\n      expect(_ol_extent_.wrapX([0, -90, 360, 90], projection)).to.eql([-360, -90, 0, 90]);\n      expect(_ol_extent_.wrapX([-360, -90, 0, 90], projection)).to.eql([-360, -90, 0, 90]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns true when within tolerance","suites":["ol/extent.js","approximatelyEquals"],"updatePoint":{"line":741,"column":42,"index":33940},"line":741,"code":"    it('returns true when within tolerance', function () {\n      expect(_ol_extent_.approximatelyEquals([16, 48, 17, 49], [16.09, 48, 17, 49], 0.1)).to.be(true);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"returns false when not within tolerance","suites":["ol/extent.js","approximatelyEquals"],"updatePoint":{"line":744,"column":47,"index":34115},"line":744,"code":"    it('returns false when not within tolerance', function () {\n      expect(_ol_extent_.approximatelyEquals([16, 48, 17, 49], [16.11, 48, 17, 49], 0.1)).to.be(false);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"leaves real world extent untouched","suites":["ol/extent.js","wrapAndSliceX"],"updatePoint":{"line":750,"column":42,"index":34375},"line":750,"code":"    it('leaves real world extent untouched', function () {\n      expect(_ol_extent_.wrapAndSliceX([16, 48, 18, 49], projection)).to.eql([[16, 48, 18, 49]]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"slices +180 crossing extents","suites":["ol/extent.js","wrapAndSliceX"],"updatePoint":{"line":753,"column":36,"index":34534},"line":753,"code":"    it('slices +180 crossing extents', function () {\n      expect(_ol_extent_.wrapAndSliceX([164, 48, 198, 49], projection)).to.eql([[164, 48, 180, 49], [-180, 48, -162, 49]]);\n      expect(_ol_extent_.wrapAndSliceX([178, 48, 198, 49], projection)).to.eql([[178, 48, 180, 49], [-180, 48, -162, 49]]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"slices -180 crossing extents","suites":["ol/extent.js","wrapAndSliceX"],"updatePoint":{"line":757,"column":36,"index":34843},"line":757,"code":"    it('slices -180 crossing extents', function () {\n      expect(_ol_extent_.wrapAndSliceX([-198, 48, -160, 49], projection)).to.eql([[162, 48, 180, 49], [-180, 48, -160, 49]]);\n      expect(_ol_extent_.wrapAndSliceX([-202, 48, -160, 49], projection)).to.eql([[158, 48, 180, 49], [-180, 48, -160, 49]]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"fits infinite extents to the projection extent","suites":["ol/extent.js","wrapAndSliceX"],"updatePoint":{"line":761,"column":54,"index":35174},"line":761,"code":"    it('fits infinite extents to the projection extent', function () {\n      expect(_ol_extent_.wrapAndSliceX([-Infinity, 48, -160, 49], projection)).to.eql([[-180, 48, 180, 49]]);\n      expect(_ol_extent_.wrapAndSliceX([-198, 48, Infinity, 49], projection)).to.eql([[-180, 48, 180, 49]]);\n    });","file":"node/ol/extent.test.js","skipped":false,"dir":"test"},{"name":"creates a new feature","suites":["ol/Feature.js","constructor"],"updatePoint":{"line":9,"column":29,"index":400},"line":9,"code":"    it('creates a new feature', function () {\n      const feature = new Feature();\n      expect(feature).to.be.a(Feature);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"takes properties","suites":["ol/Feature.js","constructor"],"updatePoint":{"line":13,"column":24,"index":526},"line":13,"code":"    it('takes properties', function () {\n      const feature = new Feature({\n        foo: 'bar'\n      });\n      expect(feature.get('foo')).to.be('bar');\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"can store the feature's commonly used id","suites":["ol/Feature.js","constructor"],"updatePoint":{"line":19,"column":48,"index":711},"line":19,"code":"    it(\"can store the feature's commonly used id\", function () {\n      const feature = new Feature();\n      feature.setId('foo');\n      expect(feature.getId()).to.be('foo');\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"will set the default geometry","suites":["ol/Feature.js","constructor"],"updatePoint":{"line":24,"column":37,"index":882},"line":24,"code":"    it('will set the default geometry', function () {\n      const feature = new Feature({\n        geometry: new Point([10, 20]),\n        foo: 'bar'\n      });\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.a(Point);\n      expect(feature.get('geometry')).to.be(geometry);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns values set at construction","suites":["ol/Feature.js","#get()"],"updatePoint":{"line":35,"column":42,"index":1234},"line":35,"code":"    it('returns values set at construction', function () {\n      const feature = new Feature({\n        a: 'first',\n        b: 'second'\n      });\n      expect(feature.get('a')).to.be('first');\n      expect(feature.get('b')).to.be('second');\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns undefined for unset attributes","suites":["ol/Feature.js","#get()"],"updatePoint":{"line":43,"column":46,"index":1486},"line":43,"code":"    it('returns undefined for unset attributes', function () {\n      const feature = new Feature();\n      expect(feature.get('a')).to.be(undefined);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns values set by set","suites":["ol/Feature.js","#get()"],"updatePoint":{"line":47,"column":33,"index":1630},"line":47,"code":"    it('returns values set by set', function () {\n      const feature = new Feature();\n      feature.set('a', 'b');\n      expect(feature.get('a')).to.be('b');\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns an object with all attributes","suites":["ol/Feature.js","#getProperties()"],"updatePoint":{"line":54,"column":45,"index":1860},"line":54,"code":"    it('returns an object with all attributes', function () {\n      const point = new Point([15, 30]);\n      const feature = new Feature({\n        foo: 'bar',\n        ten: 10,\n        geometry: point\n      });\n      const attributes = feature.getProperties();\n      const keys = Object.keys(attributes);\n      expect(keys.sort()).to.eql(['foo', 'geometry', 'ten']);\n      expect(attributes.foo).to.be('bar');\n      expect(attributes.geometry).to.be(point);\n      expect(attributes.ten).to.be(10);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"is empty by default","suites":["ol/Feature.js","#getProperties()"],"updatePoint":{"line":68,"column":27,"index":2347},"line":68,"code":"    it('is empty by default', function () {\n      const feature = new Feature();\n      const properties = feature.getProperties();\n      expect(isEmpty(properties)).to.be(true);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns undefined for unset geometry","suites":["ol/Feature.js","#getGeometry()"],"updatePoint":{"line":76,"column":44,"index":2638},"line":76,"code":"    it('returns undefined for unset geometry', function () {\n      const feature = new Feature();\n      expect(feature.getGeometry()).to.be(undefined);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns null for null geometry (constructor)","suites":["ol/Feature.js","#getGeometry()"],"updatePoint":{"line":80,"column":52,"index":2806},"line":80,"code":"    it('returns null for null geometry (constructor)', function () {\n      const feature = new Feature(null);\n      expect(feature.getGeometry()).to.be(undefined);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns null for null geometry (setGeometry())","suites":["ol/Feature.js","#getGeometry()"],"updatePoint":{"line":84,"column":54,"index":2980},"line":84,"code":"    it('returns null for null geometry (setGeometry())', function () {\n      const feature = new Feature();\n      feature.setGeometry(null);\n      expect(feature.getGeometry()).to.be(null);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"gets the geometry set at construction","suites":["ol/Feature.js","#getGeometry()"],"updatePoint":{"line":89,"column":45,"index":3169},"line":89,"code":"    it('gets the geometry set at construction', function () {\n      const feature = new Feature({\n        geometry: point\n      });\n      expect(feature.getGeometry()).to.be(point);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"gets any geometry set by setGeometry","suites":["ol/Feature.js","#getGeometry()"],"updatePoint":{"line":95,"column":44,"index":3358},"line":95,"code":"    it('gets any geometry set by setGeometry', function () {\n      const feature = new Feature();\n      feature.setGeometry(point);\n      expect(feature.getGeometry()).to.be(point);\n      const point2 = new Point([1, 2]);\n      feature.setGeometry(point2);\n      expect(feature.getGeometry()).to.be(point2);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"sets values","suites":["ol/Feature.js","#set()"],"updatePoint":{"line":105,"column":19,"index":3690},"line":105,"code":"    it('sets values', function () {\n      const feature = new Feature({\n        a: 'first',\n        b: 'second'\n      });\n      feature.set('a', 'new');\n      expect(feature.get('a')).to.be('new');\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"can be used to set the geometry","suites":["ol/Feature.js","#set()"],"updatePoint":{"line":113,"column":39,"index":3916},"line":113,"code":"    it('can be used to set the geometry', function () {\n      const point = new Point([3, 4]);\n      const feature = new Feature({\n        geometry: new Point([1, 2])\n      });\n      feature.set('geometry', point);\n      expect(feature.get('geometry')).to.be(point);\n      expect(feature.getGeometry()).to.be(point);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"can be used to set attributes with arbitrary names","suites":["ol/Feature.js","#set()"],"updatePoint":{"line":122,"column":58,"index":4260},"line":122,"code":"    it('can be used to set attributes with arbitrary names', function () {\n      const feature = new Feature();\n      feature.set('toString', 'string');\n      expect(feature.get('toString')).to.be('string');\n      expect(typeof feature.toString).to.be('function');\n      feature.set('getGeometry', 'x');\n      expect(feature.get('getGeometry')).to.be('x');\n      feature.set('geometry', new Point([1, 2]));\n      expect(feature.getGeometry()).to.be.a(Point);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"sets the default geometry","suites":["ol/Feature.js","#setGeometry()"],"updatePoint":{"line":135,"column":33,"index":4790},"line":135,"code":"    it('sets the default geometry', function () {\n      const feature = new Feature();\n      feature.setGeometry(point);\n      expect(feature.get('geometry')).to.be(point);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"replaces previous default geometry","suites":["ol/Feature.js","#setGeometry()"],"updatePoint":{"line":140,"column":42,"index":4980},"line":140,"code":"    it('replaces previous default geometry', function () {\n      const feature = new Feature({\n        geometry: point\n      });\n      expect(feature.getGeometry()).to.be(point);\n      const point2 = new Point([1, 2]);\n      feature.setGeometry(point2);\n      expect(feature.getGeometry()).to.be(point2);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"sets property where to to look at geometry","suites":["ol/Feature.js","#setGeometryName()"],"updatePoint":{"line":152,"column":50,"index":5393},"line":152,"code":"    it('sets property where to to look at geometry', function () {\n      const feature = new Feature();\n      feature.setGeometry(point);\n      expect(feature.getGeometry()).to.be(point);\n      const point2 = new Point([1, 2]);\n      feature.set('altGeometry', point2);\n      expect(feature.getGeometry()).to.be(point);\n      feature.setGeometryName('altGeometry');\n      expect(feature.getGeometry()).to.be(point2);\n      feature.on('change', function () {\n        expect().fail();\n      });\n      point.setCoordinates([0, 2]);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"changes property listener","suites":["ol/Feature.js","#setGeometryName()"],"updatePoint":{"line":166,"column":33,"index":5913},"line":166,"code":"    it('changes property listener', function () {\n      const feature = new Feature();\n      feature.setGeometry(point);\n      const point2 = new Point([1, 2]);\n      feature.set('altGeometry', point2);\n      feature.setGeometryName('altGeometry');\n      const spy = sinon.spy();\n      feature.on('change', spy);\n      point2.setCoordinates([0, 2]);\n      expect(spy.callCount).to.be(1);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"can use a different geometry name","suites":["ol/Feature.js","#setGeometryName()"],"updatePoint":{"line":177,"column":41,"index":6317},"line":177,"code":"    it('can use a different geometry name', function () {\n      const feature = new Feature();\n      feature.setGeometryName('foo');\n      const point = new Point([10, 20]);\n      feature.setGeometry(point);\n      expect(feature.getGeometry()).to.be(point);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"sets the feature identifier","suites":["ol/Feature.js","#setId()"],"updatePoint":{"line":186,"column":35,"index":6620},"line":186,"code":"    it('sets the feature identifier', function () {\n      const feature = new Feature();\n      expect(feature.getId()).to.be(undefined);\n      feature.setId('foo');\n      expect(feature.getId()).to.be('foo');\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"accepts a string or number","suites":["ol/Feature.js","#setId()"],"updatePoint":{"line":192,"column":34,"index":6836},"line":192,"code":"    it('accepts a string or number', function () {\n      const feature = new Feature();\n      feature.setId('foo');\n      expect(feature.getId()).to.be('foo');\n      feature.setId(2);\n      expect(feature.getId()).to.be(2);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"dispatches the \"change\" event","suites":["ol/Feature.js","#setId()"],"updatePoint":{"line":199,"column":37,"index":7071},"line":199,"code":"    it('dispatches the \"change\" event', function (done) {\n      const feature = new Feature();\n      feature.on('change', function () {\n        expect(feature.getId()).to.be('foo');\n        done();\n      });\n      feature.setId('foo');\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns undefined after construction","suites":["ol/Feature.js","#getStyleFunction()"],"updatePoint":{"line":212,"column":44,"index":7461},"line":212,"code":"    it('returns undefined after construction', function () {\n      const feature = new Feature();\n      expect(feature.getStyleFunction()).to.be(undefined);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns the function passed to setStyle","suites":["ol/Feature.js","#getStyleFunction()"],"updatePoint":{"line":216,"column":47,"index":7629},"line":216,"code":"    it('returns the function passed to setStyle', function () {\n      const feature = new Feature();\n      feature.setStyle(styleFunction);\n      expect(feature.getStyleFunction()).to.be(styleFunction);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"does not get confused with user \"styleFunction\" property","suites":["ol/Feature.js","#getStyleFunction()"],"updatePoint":{"line":221,"column":64,"index":7857},"line":221,"code":"    it('does not get confused with user \"styleFunction\" property', function () {\n      const feature = new Feature();\n      feature.set('styleFunction', 'foo');\n      expect(feature.getStyleFunction()).to.be(undefined);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"does not get confused with \"styleFunction\" option","suites":["ol/Feature.js","#getStyleFunction()"],"updatePoint":{"line":226,"column":57,"index":8078},"line":226,"code":"    it('does not get confused with \"styleFunction\" option', function () {\n      const feature = new Feature({\n        styleFunction: 'foo'\n      });\n      expect(feature.getStyleFunction()).to.be(undefined);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"accepts a single style","suites":["ol/Feature.js","#setStyle()"],"updatePoint":{"line":238,"column":30,"index":8435},"line":238,"code":"    it('accepts a single style', function () {\n      const feature = new Feature();\n      feature.setStyle(style);\n      const func = feature.getStyleFunction();\n      expect(func()).to.eql([style]);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"accepts an array of styles","suites":["ol/Feature.js","#setStyle()"],"updatePoint":{"line":244,"column":34,"index":8647},"line":244,"code":"    it('accepts an array of styles', function () {\n      const feature = new Feature();\n      feature.setStyle([style]);\n      const func = feature.getStyleFunction();\n      expect(func()).to.eql([style]);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"accepts a style function","suites":["ol/Feature.js","#setStyle()"],"updatePoint":{"line":250,"column":32,"index":8859},"line":250,"code":"    it('accepts a style function', function () {\n      const feature = new Feature();\n      feature.setStyle(styleFunction);\n      expect(feature.getStyleFunction()).to.be(styleFunction);\n      expect(feature.getStyleFunction()(feature, 42)).to.be(42);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"accepts null","suites":["ol/Feature.js","#setStyle()"],"updatePoint":{"line":256,"column":20,"index":9108},"line":256,"code":"    it('accepts null', function () {\n      const feature = new Feature();\n      feature.setStyle(style);\n      feature.setStyle(null);\n      expect(feature.getStyle()).to.be(null);\n      expect(feature.getStyleFunction()).to.be(undefined);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"dispatches a change event","suites":["ol/Feature.js","#setStyle()"],"updatePoint":{"line":263,"column":33,"index":9369},"line":263,"code":"    it('dispatches a change event', function () {\n      const feature = new Feature();\n      const spy = sinon.spy();\n      feature.on('change', spy);\n      feature.setStyle(style);\n      expect(spy.callCount).to.be(1);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"returns what is passed to setStyle","suites":["ol/Feature.js","#getStyle()"],"updatePoint":{"line":276,"column":42,"index":9768},"line":276,"code":"    it('returns what is passed to setStyle', function () {\n      const feature = new Feature();\n      expect(feature.getStyle()).to.be(null);\n      feature.setStyle(style);\n      expect(feature.getStyle()).to.be(style);\n      feature.setStyle([style]);\n      expect(feature.getStyle()).to.eql([style]);\n      feature.setStyle(styleFunction);\n      expect(feature.getStyle()).to.be(styleFunction);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"does not get confused with \"style\" option to constructor","suites":["ol/Feature.js","#getStyle()"],"updatePoint":{"line":286,"column":64,"index":10195},"line":286,"code":"    it('does not get confused with \"style\" option to constructor', function () {\n      const feature = new Feature({\n        style: 'foo'\n      });\n      expect(feature.getStyle()).to.be(null);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"does not get confused with user set \"style\" property","suites":["ol/Feature.js","#getStyle()"],"updatePoint":{"line":292,"column":60,"index":10393},"line":292,"code":"    it('does not get confused with user set \"style\" property', function () {\n      const feature = new Feature();\n      feature.set('style', 'foo');\n      expect(feature.getStyle()).to.be(null);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"correctly clones features","suites":["ol/Feature.js","#clone"],"updatePoint":{"line":299,"column":33,"index":10610},"line":299,"code":"    it('correctly clones features', function () {\n      const feature = new Feature();\n      feature.setProperties({\n        'fookey': 'fooval'\n      });\n      feature.setId(1);\n      feature.setGeometryName('geom');\n      const geometry = new Point([1, 2]);\n      feature.setGeometry(geometry);\n      const style = new Style({});\n      feature.setStyle(style);\n      feature.set('barkey', 'barval');\n      const clone = feature.clone();\n      expect(clone.get('fookey')).to.be('fooval');\n      expect(clone.getId()).to.be(undefined);\n      expect(clone.getGeometryName()).to.be('geom');\n      const geometryClone = clone.getGeometry();\n      expect(geometryClone).not.to.be(geometry);\n      const coordinates = geometryClone.getFlatCoordinates();\n      expect(coordinates[0]).to.be(1);\n      expect(coordinates[1]).to.be(2);\n      expect(clone.getStyle()).to.be(style);\n      expect(clone.get('barkey')).to.be('barval');\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"correctly clones features with no geometry and no style","suites":["ol/Feature.js","#clone"],"updatePoint":{"line":323,"column":63,"index":11570},"line":323,"code":"    it('correctly clones features with no geometry and no style', function () {\n      const feature = new Feature();\n      feature.set('fookey', 'fooval');\n      const clone = feature.clone();\n      expect(clone.get('fookey')).to.be('fooval');\n      expect(clone.getGeometry()).to.be(undefined);\n      expect(clone.getStyle()).to.be(null);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"dispatches a change event when geometry is set to null","suites":["ol/Feature.js","#setGeometry()"],"updatePoint":{"line":333,"column":62,"index":11966},"line":333,"code":"    it('dispatches a change event when geometry is set to null', function () {\n      const feature = new Feature({\n        geometry: new Point([0, 0])\n      });\n      const spy = sinon.spy();\n      feature.on('change', spy);\n      feature.setGeometry(null);\n      expect(spy.callCount).to.be(1);\n    });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a feature style function from a single style","suites":["ol.Feature.createStyleFunction()"],"updatePoint":{"line":346,"column":58,"index":12364},"line":346,"code":"  it('creates a feature style function from a single style', function () {\n    const styleFunction = createStyleFunction(style);\n    expect(styleFunction()).to.eql([style]);\n  });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a feature style function from an array of styles","suites":["ol.Feature.createStyleFunction()"],"updatePoint":{"line":350,"column":62,"index":12548},"line":350,"code":"  it('creates a feature style function from an array of styles', function () {\n    const styleFunction = createStyleFunction([style]);\n    expect(styleFunction()).to.eql([style]);\n  });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"passes through a function","suites":["ol.Feature.createStyleFunction()"],"updatePoint":{"line":354,"column":31,"index":12703},"line":354,"code":"  it('passes through a function', function () {\n    const original = function (feature, resolution) {\n      return [style];\n    };\n    const styleFunction = createStyleFunction(original);\n    expect(styleFunction).to.be(original);\n  });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"throws on (some) unexpected input","suites":["ol.Feature.createStyleFunction()"],"updatePoint":{"line":361,"column":39,"index":12948},"line":361,"code":"  it('throws on (some) unexpected input', function () {\n    expect(function () {\n      createStyleFunction({\n        bogus: 'input'\n      });\n    }).to.throwException();\n  });","file":"node/ol/Feature.test.js","skipped":false,"dir":"test"},{"name":"can read a single point feature","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":120,"column":39,"index":3478},"line":120,"code":"    it('can read a single point feature', function () {\n      const feature = format.readFeature(pointEsriJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(Point);\n      expect(geometry.getCoordinates()).to.eql([102.0, 0.5]);\n      expect(feature.get('prop0')).to.be('value0');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a single multipoint feature","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":128,"column":44,"index":3845},"line":128,"code":"    it('can read a single multipoint feature', function () {\n      const feature = format.readFeature(multiPointEsriJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(MultiPoint);\n      expect(geometry.getCoordinates()).to.eql([[102.0, 0.0], [103.0, 1.0]]);\n      expect(feature.get('prop0')).to.be('value0');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a single line string feature","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":136,"column":45,"index":4239},"line":136,"code":"    it('can read a single line string feature', function () {\n      const feature = format.readFeature(lineStringEsriJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(LineString);\n      expect(geometry.getCoordinates()).to.eql([[102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]]);\n      expect(feature.get('prop0')).to.be('value0');\n      expect(feature.get('prop1')).to.be(0.0);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a multi line string feature","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":145,"column":44,"index":4707},"line":145,"code":"    it('can read a multi line string feature', function () {\n      const feature = format.readFeature(multiLineStringEsriJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(MultiLineString);\n      expect(geometry.getCoordinates()).to.eql([[[102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]], [[105.0, 3.0], [106.0, 4.0], [107.0, 3.0], [108.0, 4.0]]]);\n      expect(feature.get('prop0')).to.be('value0');\n      expect(feature.get('prop1')).to.be(0.0);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a single polygon feature","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":154,"column":41,"index":5242},"line":154,"code":"    it('can read a single polygon feature', function () {\n      const feature = format.readFeature(polygonEsriJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0]]]);\n      expect(feature.get('prop0')).to.be('value0');\n      expect(feature.get('prop1')).to.eql({\n        'this': 'that'\n      });\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a multi polygon feature","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":165,"column":40,"index":5732},"line":165,"code":"    it('can read a multi polygon feature', function () {\n      const feature = format.readFeature(multiPolygonEsriJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(MultiPolygon);\n      expect(geometry.getCoordinates()).to.eql([[[[0, 1], [1, 4], [4, 3], [3, 0]], [[2, 2], [3, 2], [3, 3], [2, 3]]], [[[10, 1], [11, 5], [14, 3], [13, 0]]]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a feature collection","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":172,"column":37,"index":6152},"line":172,"code":"    it('can read a feature collection', function () {\n      const features = format.readFeatures(featureCollectionEsriJSON);\n      expect(features).to.have.length(3);\n      expect(features[0].getGeometry()).to.be.an(Point);\n      expect(features[1].getGeometry()).to.be.an(LineString);\n      expect(features[2].getGeometry()).to.be.an(Polygon);\n      expect(features[0].getId()).to.eql('value0');\n      expect(features[1].getId()).to.eql('value0');\n      expect(features[2].getId()).to.eql('value0');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read and transform a point","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":182,"column":38,"index":6662},"line":182,"code":"    it('can read and transform a point', function () {\n      const feature = format.readFeatures(pointEsriJSON, {\n        featureProjection: 'EPSG:3857',\n        dataProjection: 'EPSG:4326'\n      });\n      expect(feature[0].getGeometry()).to.be.an(Point);\n      expect(feature[0].getGeometry().getCoordinates()).to.eql(transform([102.0, 0.5], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read and transform a feature collection","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":190,"column":51,"index":7054},"line":190,"code":"    it('can read and transform a feature collection', function () {\n      const features = format.readFeatures(featureCollectionEsriJSON, {\n        featureProjection: 'EPSG:3857',\n        dataProjection: 'EPSG:4326'\n      });\n      expect(features[0].getGeometry()).to.be.an(Point);\n      expect(features[0].getGeometry().getCoordinates()).to.eql(transform([102.0, 0.5], 'EPSG:4326', 'EPSG:3857'));\n      expect(features[1].getGeometry().getCoordinates()).to.eql([transform([102.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([103.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([104.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([105.0, 1.0], 'EPSG:4326', 'EPSG:3857')]);\n      expect(features[2].getGeometry().getCoordinates()).to.eql([[transform([100.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([100.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([101.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([101.0, 0.0], 'EPSG:4326', 'EPSG:3857')]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can create a feature with a specific geometryName","suites":["ol/format/EsriJSON.js","#readFeature"],"updatePoint":{"line":200,"column":57,"index":8011},"line":200,"code":"    it('can create a feature with a specific geometryName', function () {\n      const feature = new EsriJSON({\n        geometryName: 'the_geom'\n      }).readFeature(pointEsriJSON);\n      expect(feature.getGeometryName()).to.be('the_geom');\n      expect(feature.getGeometry()).to.be.an(Point);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses feature collection","suites":["ol/format/EsriJSON.js","#readFeatures"],"updatePoint":{"line":209,"column":33,"index":8336},"line":209,"code":"    it('parses feature collection', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      expect(array.length).to.be(2);\n      const first = array[0];\n      expect(first).to.be.a(Feature);\n      expect(first.get('LINK_ID')).to.be(573730499);\n      const firstGeom = first.getGeometry();\n      expect(firstGeom).to.be.a(LineString);\n      const second = array[1];\n      expect(second).to.be.a(Feature);\n      expect(second.get('ST_NAME')).to.be('BRUNNSGATAN');\n      const secondGeom = second.getGeometry();\n      expect(secondGeom).to.be.a(LineString);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses ksfields.geojson","suites":["ol/format/EsriJSON.js","#readFeatures"],"updatePoint":{"line":224,"column":31,"index":8947},"line":224,"code":"    it('parses ksfields.geojson', async () => {\n      const text = await fse.readFile('test/node/ol/format/EsriJSON/ksfields.json', {\n        encoding: 'utf8'\n      });\n      const result = format.readFeatures(text);\n      expect(result.length).to.be(9);\n      const first = result[0];\n      expect(first).to.be.a(Feature);\n      expect(first.get('field_name')).to.be('EUDORA');\n      expect(first.getId()).to.be(6406);\n      const firstGeom = first.getGeometry();\n      expect(firstGeom).to.be.a(Polygon);\n      expect(equals(firstGeom.getExtent(), [-10585772.743554419, 4712365.161160459, -10579560.16462974, 4716567.373073828])).to.be(true);\n      const last = result[8];\n      expect(last).to.be.a(Feature);\n      expect(last.get('field_name')).to.be('FEAGINS');\n      expect(last.getId()).to.be(6030);\n      const lastGeom = last.getGeometry();\n      expect(lastGeom).to.be.a(Polygon);\n      expect(equals(lastGeom.getExtent(), [-10555714.026858449, 4576511.565880965, -10553671.199322715, 4578554.9934867555])).to.be(true);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses point","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":247,"column":20,"index":10022},"line":247,"code":"    it('parses point', function () {\n      const str = JSON.stringify({\n        x: 10,\n        y: 20\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Point);\n      expect(obj.getCoordinates()).to.eql([10, 20]);\n      expect(obj.getLayout()).to.eql('XY');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZ point","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":257,"column":24,"index":10320},"line":257,"code":"    it('parses XYZ point', function () {\n      const str = JSON.stringify({\n        x: 10,\n        y: 20,\n        z: 10\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Point);\n      expect(obj.getCoordinates()).to.eql([10, 20, 10]);\n      expect(obj.getLayout()).to.eql('XYZ');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYM point","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":268,"column":24,"index":10638},"line":268,"code":"    it('parses XYM point', function () {\n      const str = JSON.stringify({\n        x: 10,\n        y: 20,\n        m: 10\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Point);\n      expect(obj.getCoordinates()).to.eql([10, 20, 10]);\n      expect(obj.getLayout()).to.eql('XYM');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZM point","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":279,"column":25,"index":10957},"line":279,"code":"    it('parses XYZM point', function () {\n      const str = JSON.stringify({\n        x: 10,\n        y: 20,\n        z: 0,\n        m: 10\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Point);\n      expect(obj.getCoordinates()).to.eql([10, 20, 0, 10]);\n      expect(obj.getLayout()).to.eql('XYZM');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses multipoint","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":291,"column":25,"index":11294},"line":291,"code":"    it('parses multipoint', function () {\n      const str = JSON.stringify({\n        points: [[10, 20], [20, 30]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiPoint);\n      expect(obj.getCoordinates()).to.eql([[10, 20], [20, 30]]);\n      expect(obj.getLayout()).to.eql('XY');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZ multipoint","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":300,"column":29,"index":11622},"line":300,"code":"    it('parses XYZ multipoint', function () {\n      const str = JSON.stringify({\n        points: [[10, 20, 0], [20, 30, 0]],\n        hasZ: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiPoint);\n      expect(obj.getCoordinates()).to.eql([[10, 20, 0], [20, 30, 0]]);\n      expect(obj.getLayout()).to.eql('XYZ');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYM multipoint","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":310,"column":29,"index":11983},"line":310,"code":"    it('parses XYM multipoint', function () {\n      const str = JSON.stringify({\n        points: [[10, 20, 0], [20, 30, 0]],\n        hasM: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiPoint);\n      expect(obj.getCoordinates()).to.eql([[10, 20, 0], [20, 30, 0]]);\n      expect(obj.getLayout()).to.eql('XYM');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZM multipoint","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":320,"column":30,"index":12345},"line":320,"code":"    it('parses XYZM multipoint', function () {\n      const str = JSON.stringify({\n        points: [[10, 20, 0, 1], [20, 30, 0, 1]],\n        hasZ: true,\n        hasM: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiPoint);\n      expect(obj.getCoordinates()).to.eql([[10, 20, 0, 1], [20, 30, 0, 1]]);\n      expect(obj.getLayout()).to.eql('XYZM');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses linestring","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":331,"column":25,"index":12735},"line":331,"code":"    it('parses linestring', function () {\n      const str = JSON.stringify({\n        paths: [[[10, 20], [30, 40]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(LineString);\n      expect(obj.getCoordinates()).to.eql([[10, 20], [30, 40]]);\n      expect(obj.getLayout()).to.eql('XY');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZ linestring","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":340,"column":29,"index":13064},"line":340,"code":"    it('parses XYZ linestring', function () {\n      const str = JSON.stringify({\n        hasZ: true,\n        paths: [[[10, 20, 1534], [30, 40, 1420]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(LineString);\n      expect(obj.getLayout()).to.eql('XYZ');\n      expect(obj.getCoordinates()).to.eql([[10, 20, 1534], [30, 40, 1420]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYM linestring","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":350,"column":29,"index":13438},"line":350,"code":"    it('parses XYM linestring', function () {\n      const str = JSON.stringify({\n        hasM: true,\n        paths: [[[10, 20, 1534], [30, 40, 1420]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(LineString);\n      expect(obj.getLayout()).to.eql('XYM');\n      expect(obj.getCoordinates()).to.eql([[10, 20, 1534], [30, 40, 1420]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZM linestring","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":360,"column":30,"index":13813},"line":360,"code":"    it('parses XYZM linestring', function () {\n      const str = JSON.stringify({\n        hasZ: true,\n        hasM: true,\n        paths: [[[10, 20, 1534, 1], [30, 40, 1420, 2]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(LineString);\n      expect(obj.getLayout()).to.eql('XYZM');\n      expect(obj.getCoordinates()).to.eql([[10, 20, 1534, 1], [30, 40, 1420, 2]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses multilinestring","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":371,"column":30,"index":14221},"line":371,"code":"    it('parses multilinestring', function () {\n      const str = JSON.stringify({\n        paths: [[[102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]], [[105.0, 3.0], [106.0, 4.0], [107.0, 3.0], [108.0, 4.0]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiLineString);\n      expect(obj.getCoordinates()).to.eql([[[102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]], [[105.0, 3.0], [106.0, 4.0], [107.0, 3.0], [108.0, 4.0]]]);\n      expect(obj.getLayout()).to.eql('XY');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZ multilinestring","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":380,"column":34,"index":14750},"line":380,"code":"    it('parses XYZ multilinestring', function () {\n      const str = JSON.stringify({\n        hasZ: true,\n        paths: [[[102.0, 0.0, 1], [103.0, 1.0, 1], [104.0, 0.0, 1], [105.0, 1.0, 1]], [[105.0, 3.0, 1], [106.0, 4.0, 1], [107.0, 3.0, 1], [108.0, 4.0, 1]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiLineString);\n      expect(obj.getCoordinates()).to.eql([[[102.0, 0.0, 1], [103.0, 1.0, 1], [104.0, 0.0, 1], [105.0, 1.0, 1]], [[105.0, 3.0, 1], [106.0, 4.0, 1], [107.0, 3.0, 1], [108.0, 4.0, 1]]]);\n      expect(obj.getLayout()).to.eql('XYZ');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYM multilinestring","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":390,"column":34,"index":15348},"line":390,"code":"    it('parses XYM multilinestring', function () {\n      const str = JSON.stringify({\n        hasM: true,\n        paths: [[[102.0, 0.0, 1], [103.0, 1.0, 1], [104.0, 0.0, 1], [105.0, 1.0, 1]], [[105.0, 3.0, 1], [106.0, 4.0, 1], [107.0, 3.0, 1], [108.0, 4.0, 1]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiLineString);\n      expect(obj.getCoordinates()).to.eql([[[102.0, 0.0, 1], [103.0, 1.0, 1], [104.0, 0.0, 1], [105.0, 1.0, 1]], [[105.0, 3.0, 1], [106.0, 4.0, 1], [107.0, 3.0, 1], [108.0, 4.0, 1]]]);\n      expect(obj.getLayout()).to.eql('XYM');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZM multilinestring","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":400,"column":35,"index":15947},"line":400,"code":"    it('parses XYZM multilinestring', function () {\n      const str = JSON.stringify({\n        hasM: true,\n        hasZ: true,\n        paths: [[[102, 0, 1, 2], [103, 1, 1, 2], [104, 0, 1, 2], [105, 1, 1, 2]], [[105, 3, 1, 2], [106, 4, 1, 2], [107, 3, 1, 2], [108, 4, 1, 2]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiLineString);\n      expect(obj.getCoordinates()).to.eql([[[102, 0, 1, 2], [103, 1, 1, 2], [104, 0, 1, 2], [105, 1, 1, 2]], [[105, 3, 1, 2], [106, 4, 1, 2], [107, 3, 1, 2], [108, 4, 1, 2]]]);\n      expect(obj.getLayout()).to.eql('XYZM');\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses polygon","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":411,"column":22,"index":16538},"line":411,"code":"    it('parses polygon', function () {\n      const outer = [[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]];\n      const inner1 = [[1, 1], [2, 1], [2, 2], [1, 2], [1, 1]];\n      const inner2 = [[8, 8], [9, 8], [9, 9], [8, 9], [8, 8]];\n      const str = JSON.stringify({\n        rings: [outer, inner1, inner2]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Polygon);\n      expect(obj.getLayout()).to.eql('XY');\n      const rings = obj.getLinearRings();\n      expect(rings.length).to.be(3);\n      expect(rings[0].getCoordinates()[0].length).to.equal(2);\n      expect(rings[0]).to.be.a(LinearRing);\n      expect(rings[1]).to.be.a(LinearRing);\n      expect(rings[2]).to.be.a(LinearRing);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZ polygon","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":428,"column":26,"index":17263},"line":428,"code":"    it('parses XYZ polygon', function () {\n      const outer = [[0, 0, 5], [0, 10, 5], [10, 10, 5], [10, 0, 5], [0, 0, 5]];\n      const inner1 = [[1, 1, 3], [2, 1, 3], [2, 2, 3], [1, 2, 3], [1, 1, 3]];\n      const inner2 = [[8, 8, 2], [9, 8, 2], [9, 9, 2], [8, 9, 2], [8, 8, 2]];\n      const str = JSON.stringify({\n        rings: [outer, inner1, inner2],\n        hasZ: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Polygon);\n      expect(obj.getLayout()).to.eql('XYZ');\n      const rings = obj.getLinearRings();\n      expect(rings.length).to.be(3);\n      expect(rings[0].getCoordinates()[0].length).to.equal(3);\n      expect(rings[0]).to.be.a(LinearRing);\n      expect(rings[1]).to.be.a(LinearRing);\n      expect(rings[2]).to.be.a(LinearRing);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYM polygon","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":446,"column":26,"index":18054},"line":446,"code":"    it('parses XYM polygon', function () {\n      const outer = [[0, 0, 5], [0, 10, 5], [10, 10, 5], [10, 0, 5], [0, 0, 5]];\n      const inner1 = [[1, 1, 3], [2, 1, 3], [2, 2, 3], [1, 2, 3], [1, 1, 3]];\n      const inner2 = [[8, 8, 2], [9, 8, 2], [9, 9, 2], [8, 9, 2], [8, 8, 2]];\n      const str = JSON.stringify({\n        rings: [outer, inner1, inner2],\n        hasM: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Polygon);\n      expect(obj.getLayout()).to.eql('XYM');\n      const rings = obj.getLinearRings();\n      expect(rings.length).to.be(3);\n      expect(rings[0].getCoordinates()[0].length).to.equal(3);\n      expect(rings[0]).to.be.a(LinearRing);\n      expect(rings[1]).to.be.a(LinearRing);\n      expect(rings[2]).to.be.a(LinearRing);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZM polygon","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":464,"column":27,"index":18846},"line":464,"code":"    it('parses XYZM polygon', function () {\n      const outer = [[0, 0, 5, 1], [0, 10, 5, 1], [10, 10, 5, 1], [10, 0, 5, 1], [0, 0, 5, 1]];\n      const inner1 = [[1, 1, 3, 2], [2, 1, 3, 2], [2, 2, 3, 2], [1, 2, 3, 2], [1, 1, 3, 2]];\n      const inner2 = [[8, 8, 2, 1], [9, 8, 2, 1], [9, 9, 2, 1], [8, 9, 2, 1], [8, 8, 2, 1]];\n      const str = JSON.stringify({\n        rings: [outer, inner1, inner2],\n        hasZ: true,\n        hasM: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Polygon);\n      expect(obj.getLayout()).to.eql('XYZM');\n      const rings = obj.getLinearRings();\n      expect(rings.length).to.be(3);\n      expect(rings[0].getCoordinates()[0].length).to.equal(4);\n      expect(rings[0]).to.be.a(LinearRing);\n      expect(rings[1]).to.be.a(LinearRing);\n      expect(rings[2]).to.be.a(LinearRing);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XY multipolygon","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":483,"column":30,"index":19707},"line":483,"code":"    it('parses XY multipolygon', function () {\n      const str = JSON.stringify({\n        rings: [[[0, 1], [1, 4], [4, 3], [3, 0]], [[2, 2], [3, 2], [3, 3], [2, 3]], [[10, 1], [11, 5], [14, 3], [13, 0]]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiPolygon);\n      expect(obj.getLayout()).to.eql('XY');\n      expect(obj.getCoordinates()).to.eql([[[[0, 1], [1, 4], [4, 3], [3, 0]], [[2, 2], [3, 2], [3, 3], [2, 3]]], [[[10, 1], [11, 5], [14, 3], [13, 0]]]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZ multipolygon","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":492,"column":31,"index":20214},"line":492,"code":"    it('parses XYZ multipolygon', function () {\n      const str = JSON.stringify({\n        rings: [[[0, 1, 0], [1, 4, 0], [4, 3, 0], [3, 0, 0]], [[2, 2, 0], [3, 2, 0], [3, 3, 0], [2, 3, 0]], [[10, 1, 0], [11, 5, 0], [14, 3, 0], [13, 0, 0]]],\n        hasZ: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiPolygon);\n      expect(obj.getLayout()).to.eql('XYZ');\n      expect(obj.getCoordinates()).to.eql([[[[0, 1, 0], [1, 4, 0], [4, 3, 0], [3, 0, 0]], [[2, 2, 0], [3, 2, 0], [3, 3, 0], [2, 3, 0]]], [[[10, 1, 0], [11, 5, 0], [14, 3, 0], [13, 0, 0]]]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYM multipolygon","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":502,"column":31,"index":20814},"line":502,"code":"    it('parses XYM multipolygon', function () {\n      const str = JSON.stringify({\n        rings: [[[0, 1, 0], [1, 4, 0], [4, 3, 0], [3, 0, 0]], [[2, 2, 0], [3, 2, 0], [3, 3, 0], [2, 3, 0]], [[10, 1, 0], [11, 5, 0], [14, 3, 0], [13, 0, 0]]],\n        hasM: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiPolygon);\n      expect(obj.getLayout()).to.eql('XYM');\n      expect(obj.getCoordinates()).to.eql([[[[0, 1, 0], [1, 4, 0], [4, 3, 0], [3, 0, 0]], [[2, 2, 0], [3, 2, 0], [3, 3, 0], [2, 3, 0]]], [[[10, 1, 0], [11, 5, 0], [14, 3, 0], [13, 0, 0]]]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZM multipolygon","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":512,"column":32,"index":21415},"line":512,"code":"    it('parses XYZM multipolygon', function () {\n      const str = JSON.stringify({\n        rings: [[[0, 1, 0, 1], [1, 4, 0, 1], [4, 3, 0, 1], [3, 0, 0, 1]], [[2, 2, 0, 1], [3, 2, 0, 1], [3, 3, 0, 1], [2, 3, 0, 1]], [[10, 1, 0, 1], [11, 5, 0, 1], [14, 3, 0, 1], [13, 0, 0, 1]]],\n        hasZ: true,\n        hasM: true\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(MultiPolygon);\n      expect(obj.getLayout()).to.eql('XYZM');\n      expect(obj.getCoordinates()).to.eql([[[[0, 1, 0, 1], [1, 4, 0, 1], [4, 3, 0, 1], [3, 0, 0, 1]], [[2, 2, 0, 1], [3, 2, 0, 1], [3, 3, 0, 1], [2, 3, 0, 1]]], [[[10, 1, 0, 1], [11, 5, 0, 1], [14, 3, 0, 1], [13, 0, 0, 1]]]]);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"should not mutate input","suites":["ol/format/EsriJSON.js","#readGeometry"],"updatePoint":{"line":523,"column":31,"index":22108},"line":523,"code":"    it('should not mutate input', function () {\n      const input = {\n        rings: [[[0, 1, 0, 1], [1, 4, 0, 1], [4, 3, 0, 1], [3, 0, 0, 1]], [[2, 2, 0, 1], [3, 2, 0, 1], [3, 3, 0, 1], [2, 3, 0, 1]], [[10, 1, 0, 1], [11, 5, 0, 1], [14, 3, 0, 1], [13, 0, 0, 1]]],\n        hasZ: true,\n        hasM: true\n      };\n      const str = JSON.stringify(input);\n      const obj = format.readGeometry(input);\n      expect(obj).to.be.a(MultiPolygon);\n      expect(str).to.eql(JSON.stringify(input));\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"reads named crs from top-level object","suites":["ol/format/EsriJSON.js","#readProjection"],"updatePoint":{"line":536,"column":45,"index":22670},"line":536,"code":"    it('reads named crs from top-level object', function () {\n      const json = {\n        spatialReference: {\n          wkid: 3857\n        },\n        features: [{\n          attributes: {\n            foo: 'bar'\n          },\n          geometry: {\n            x: 1,\n            y: 2\n          }\n        }, {\n          attributes: {\n            bam: 'baz'\n          },\n          geometry: {\n            paths: [[[1, 2], [3, 4]]]\n          }\n        }]\n      };\n      const features = format.readFeatures(json);\n      expect(features.length).to.be(2);\n      const first = features[0];\n      expect(first).to.be.a(Feature);\n      expect(first.get('foo')).to.be('bar');\n      expect(first.getGeometry()).to.be.a(Point);\n      const second = features[1];\n      expect(second).to.be.a(Feature);\n      expect(second.get('bam')).to.be('baz');\n      expect(second.getGeometry()).to.be.a(LineString);\n      expect(format.readProjection(json)).to.be(getProjection('EPSG:3857'));\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes point","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":572,"column":21,"index":23669},"line":572,"code":"    it('encodes point', function () {\n      const point = new Point([10, 20]);\n      const esrijson = format.writeGeometry(point);\n      expect(point.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZ point","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":577,"column":25,"index":23905},"line":577,"code":"    it('encodes XYZ point', function () {\n      const point = new Point([10, 20, 0], 'XYZ');\n      const esrijson = format.writeGeometry(point);\n      expect(point.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYM point","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":582,"column":25,"index":24151},"line":582,"code":"    it('encodes XYM point', function () {\n      const point = new Point([10, 20, 0], 'XYM');\n      const esrijson = format.writeGeometry(point);\n      expect(point.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZM point","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":587,"column":26,"index":24398},"line":587,"code":"    it('encodes XYZM point', function () {\n      const point = new Point([10, 20, 5, 0], 'XYZM');\n      const esrijson = format.writeGeometry(point);\n      expect(point.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes linestring","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":592,"column":26,"index":24649},"line":592,"code":"    it('encodes linestring', function () {\n      const linestring = new LineString([[10, 20], [30, 40]]);\n      const esrijson = format.writeGeometry(linestring);\n      expect(linestring.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZ linestring","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":597,"column":30,"index":24922},"line":597,"code":"    it('encodes XYZ linestring', function () {\n      const linestring = new LineString([[10, 20, 1534], [30, 40, 1420]], 'XYZ');\n      const esrijson = format.writeGeometry(linestring);\n      expect(linestring.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYM linestring","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":602,"column":30,"index":25214},"line":602,"code":"    it('encodes XYM linestring', function () {\n      const linestring = new LineString([[10, 20, 1534], [30, 40, 1420]], 'XYM');\n      const esrijson = format.writeGeometry(linestring);\n      expect(linestring.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZM linestring","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":607,"column":31,"index":25507},"line":607,"code":"    it('encodes XYZM linestring', function () {\n      const linestring = new LineString([[10, 20, 1534, 1], [30, 40, 1420, 1]], 'XYZM');\n      const esrijson = format.writeGeometry(linestring);\n      expect(linestring.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes polygon","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":612,"column":23,"index":25799},"line":612,"code":"    it('encodes polygon', function () {\n      const outer = [[0, 0], [10, 0], [10, 10], [0, 10], [0, 0]];\n      const inner1 = [[1, 1], [2, 1], [2, 2], [1, 2], [1, 1]];\n      const inner2 = [[8, 8], [9, 8], [9, 9], [8, 9], [8, 8]];\n      const polygon = new Polygon([outer, inner1, inner2]);\n      const esrijson = format.writeGeometry(polygon);\n      expect(polygon.getCoordinates(false)).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZ polygon","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":620,"column":27,"index":26257},"line":620,"code":"    it('encodes XYZ polygon', function () {\n      const outer = [[0, 0, 5], [0, 10, 5], [10, 10, 5], [10, 0, 5], [0, 0, 5]];\n      const inner1 = [[1, 1, 3], [2, 1, 3], [2, 2, 3], [1, 2, 3], [1, 1, 3]];\n      const inner2 = [[8, 8, 2], [9, 8, 2], [9, 9, 2], [8, 9, 2], [8, 8, 2]];\n      const polygon = new Polygon([outer, inner1, inner2], 'XYZ');\n      const esrijson = format.writeGeometry(polygon);\n      expect(polygon.getCoordinates(false)).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYM polygon","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":628,"column":27,"index":26767},"line":628,"code":"    it('encodes XYM polygon', function () {\n      const outer = [[0, 0, 5], [0, 10, 5], [10, 10, 5], [10, 0, 5], [0, 0, 5]];\n      const inner1 = [[1, 1, 3], [2, 1, 3], [2, 2, 3], [1, 2, 3], [1, 1, 3]];\n      const inner2 = [[8, 8, 2], [9, 8, 2], [9, 9, 2], [8, 9, 2], [8, 8, 2]];\n      const polygon = new Polygon([outer, inner1, inner2], 'XYM');\n      const esrijson = format.writeGeometry(polygon);\n      expect(polygon.getCoordinates(false)).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZM polygon","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":636,"column":28,"index":27278},"line":636,"code":"    it('encodes XYZM polygon', function () {\n      const outer = [[0, 0, 5, 1], [0, 10, 5, 2], [10, 10, 5, 1], [10, 0, 5, 1], [0, 0, 5, 1]];\n      const inner1 = [[1, 1, 3, 1], [2, 1, 3, 2], [2, 2, 3, 1], [1, 2, 3, 1], [1, 1, 3, 1]];\n      const inner2 = [[8, 8, 2, 1], [9, 8, 2, 2], [9, 9, 2, 1], [8, 9, 2, 1], [8, 8, 2, 1]];\n      const polygon = new Polygon([outer, inner1, inner2], 'XYZM');\n      const esrijson = format.writeGeometry(polygon);\n      expect(polygon.getCoordinates(false)).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes multipoint","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":644,"column":26,"index":27833},"line":644,"code":"    it('encodes multipoint', function () {\n      const multipoint = new MultiPoint([[102.0, 0.0], [103.0, 1.0]]);\n      const esrijson = format.writeGeometry(multipoint);\n      expect(multipoint.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZ multipoint","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":649,"column":30,"index":28114},"line":649,"code":"    it('encodes XYZ multipoint', function () {\n      const multipoint = new MultiPoint([[102.0, 0.0, 3], [103.0, 1.0, 4]], 'XYZ');\n      const esrijson = format.writeGeometry(multipoint);\n      expect(multipoint.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYM multipoint","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":654,"column":30,"index":28408},"line":654,"code":"    it('encodes XYM multipoint', function () {\n      const multipoint = new MultiPoint([[102.0, 0.0, 3], [103.0, 1.0, 4]], 'XYM');\n      const esrijson = format.writeGeometry(multipoint);\n      expect(multipoint.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZM multipoint","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":659,"column":31,"index":28703},"line":659,"code":"    it('encodes XYZM multipoint', function () {\n      const multipoint = new MultiPoint([[102.0, 0.0, 3, 1], [103.0, 1.0, 4, 1]], 'XYZM');\n      const esrijson = format.writeGeometry(multipoint);\n      expect(multipoint.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes multilinestring","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":664,"column":31,"index":29005},"line":664,"code":"    it('encodes multilinestring', function () {\n      const multilinestring = new MultiLineString([[[102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]], [[105.0, 3.0], [106.0, 4.0], [107.0, 3.0], [108.0, 4.0]]]);\n      const esrijson = format.writeGeometry(multilinestring);\n      expect(multilinestring.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZ multilinestring","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":669,"column":35,"index":29399},"line":669,"code":"    it('encodes XYZ multilinestring', function () {\n      const multilinestring = new MultiLineString([[[102.0, 0.0, 1], [103.0, 1.0, 2], [104.0, 0.0, 3], [105.0, 1.0, 4]], [[105.0, 3.0, 1], [106.0, 4.0, 2], [107.0, 3.0, 3], [108.0, 4.0, 4]]], 'XYZ');\n      const esrijson = format.writeGeometry(multilinestring);\n      expect(multilinestring.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYM multilinestring","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":674,"column":35,"index":29824},"line":674,"code":"    it('encodes XYM multilinestring', function () {\n      const multilinestring = new MultiLineString([[[102.0, 0.0, 1], [103.0, 1.0, 2], [104.0, 0.0, 3], [105.0, 1.0, 4]], [[105.0, 3.0, 1], [106.0, 4.0, 2], [107.0, 3.0, 3], [108.0, 4.0, 4]]], 'XYM');\n      const esrijson = format.writeGeometry(multilinestring);\n      expect(multilinestring.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZM multilinestring","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":679,"column":36,"index":30250},"line":679,"code":"    it('encodes XYZM multilinestring', function () {\n      const multilinestring = new MultiLineString([[[102.0, 0.0, 1, 0], [103.0, 1.0, 2, 2], [104.0, 0.0, 3, 1], [105.0, 1.0, 4, 2]], [[105.0, 3.0, 1, 0], [106.0, 4.0, 2, 1], [107.0, 3.0, 3, 1], [108.0, 4.0, 4, 2]]], 'XYZM');\n      const esrijson = format.writeGeometry(multilinestring);\n      expect(multilinestring.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes multipolygon","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":684,"column":28,"index":30693},"line":684,"code":"    it('encodes multipolygon', function () {\n      const multipolygon = new MultiPolygon([[[[0, 1], [1, 4], [4, 3], [3, 0]], [[2, 2], [3, 2], [3, 3], [2, 3]]], [[[10, 1], [11, 5], [14, 3], [13, 0]]]]);\n      const esrijson = format.writeGeometry(multipolygon);\n      expect(multipolygon.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZ multipolygon","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":689,"column":32,"index":31066},"line":689,"code":"    it('encodes XYZ multipolygon', function () {\n      const multipolygon = new MultiPolygon([[[[0, 1, 0], [1, 4, 0], [4, 3, 0], [3, 0, 0]], [[2, 2, 0], [3, 2, 0], [3, 3, 0], [2, 3, 0]]], [[[10, 1, 0], [11, 5, 0], [14, 3, 0], [13, 0, 0]]]], 'XYZ');\n      const esrijson = format.writeGeometry(multipolygon);\n      expect(multipolygon.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYM multipolygon","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":694,"column":32,"index":31482},"line":694,"code":"    it('encodes XYM multipolygon', function () {\n      const multipolygon = new MultiPolygon([[[[0, 1, 0], [1, 4, 0], [4, 3, 0], [3, 0, 0]], [[2, 2, 0], [3, 2, 0], [3, 3, 0], [2, 3, 0]]], [[[10, 1, 0], [11, 5, 0], [14, 3, 0], [13, 0, 0]]]], 'XYM');\n      const esrijson = format.writeGeometry(multipolygon);\n      expect(multipolygon.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes XYZM multipolygon","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":699,"column":33,"index":31899},"line":699,"code":"    it('encodes XYZM multipolygon', function () {\n      const multipolygon = new MultiPolygon([[[[0, 1, 0, 1], [1, 4, 0, 1], [4, 3, 0, 3], [3, 0, 0, 3]], [[2, 2, 0, 3], [3, 2, 0, 4], [3, 3, 0, 1], [2, 3, 0, 1]]], [[[10, 1, 0, 1], [11, 5, 0, 2], [14, 3, 0, 3], [13, 0, 0, 3]]]], 'XYZM');\n      const esrijson = format.writeGeometry(multipolygon);\n      expect(multipolygon.getCoordinates()).to.eql(format.readGeometry(esrijson).getCoordinates());\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"transforms and encodes a point","suites":["ol/format/EsriJSON.js","#writeGeometry"],"updatePoint":{"line":704,"column":38,"index":32358},"line":704,"code":"    it('transforms and encodes a point', function () {\n      const point = new Point([2, 3]);\n      const esrijson = format.writeGeometry(point, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const newPoint = format.readGeometry(esrijson, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      expect(point.getCoordinates()[0]).to.roughlyEqual(newPoint.getCoordinates()[0], 1e-8);\n      expect(Math.abs(point.getCoordinates()[1] - newPoint.getCoordinates()[1])).to.be.lessThan(0.0000001);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes feature collection","suites":["ol/format/EsriJSON.js","#writeFeatures"],"updatePoint":{"line":719,"column":34,"index":32986},"line":719,"code":"    it('encodes feature collection', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      const esrijson = format.writeFeaturesObject(array);\n      const result = format.readFeatures(esrijson);\n      expect(array.length).to.equal(result.length);\n      let got, exp, gotProp, expProp;\n      for (let i = 0, ii = array.length; i < ii; ++i) {\n        got = array[i];\n        exp = result[i];\n        expect(got.getGeometry().getCoordinates()).to.eql(exp.getGeometry().getCoordinates());\n        gotProp = got.getProperties();\n        delete gotProp.geometry;\n        expProp = exp.getProperties();\n        delete expProp.geometry;\n        expect(gotProp).to.eql(expProp);\n      }\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"transforms and encodes feature collection","suites":["ol/format/EsriJSON.js","#writeFeatures"],"updatePoint":{"line":737,"column":49,"index":33739},"line":737,"code":"    it('transforms and encodes feature collection', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      const esrijson = format.writeFeatures(array, {\n        featureProjection: 'EPSG:3857',\n        dataProjection: 'EPSG:4326'\n      });\n      const result = format.readFeatures(esrijson);\n      let got, exp;\n      for (let i = 0, ii = array.length; i < ii; ++i) {\n        got = array[i];\n        exp = result[i];\n        expect(got.getGeometry().transform('EPSG:3857', 'EPSG:4326').getCoordinates()).to.eql(exp.getGeometry().getCoordinates());\n      }\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"writes out a feature with a different geometryName correctly","suites":["ol/format/EsriJSON.js","#writeFeatures"],"updatePoint":{"line":752,"column":68,"index":34373},"line":752,"code":"    it('writes out a feature with a different geometryName correctly', function () {\n      const feature = new Feature({\n        'foo': 'bar'\n      });\n      feature.setGeometryName('mygeom');\n      feature.setGeometry(new Point([5, 10]));\n      const esrijson = format.writeFeaturesObject([feature]);\n      expect(esrijson.features[0].attributes.mygeom).to.eql(undefined);\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"writes out a feature without properties correctly","suites":["ol/format/EsriJSON.js","#writeFeatures"],"updatePoint":{"line":761,"column":57,"index":34744},"line":761,"code":"    it('writes out a feature without properties correctly', function () {\n      const feature = new Feature(new Point([5, 10]));\n      const esrijson = format.writeFeatureObject(feature);\n      expect(esrijson.attributes).to.eql({});\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"adds the projection inside the geometry correctly when featureProjection is set","suites":["ol/format/EsriJSON.js","#writeFeatures"],"updatePoint":{"line":766,"column":87,"index":35016},"line":766,"code":"    it('adds the projection inside the geometry correctly when featureProjection is set', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      const esrijson = format.writeFeaturesObject(array, {\n        featureProjection: 'EPSG:3857'\n      });\n      esrijson.features.forEach(function (feature, i) {\n        const spatialReference = feature.geometry.spatialReference;\n        expect(Number(spatialReference.wkid)).to.equal(3857);\n        expect(feature.geometry.paths[0]).to.eql(array[i].getGeometry().getCoordinates());\n      });\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"adds the projection inside the geometry correctly when dataProjection is set","suites":["ol/format/EsriJSON.js","#writeFeatures"],"updatePoint":{"line":778,"column":84,"index":35606},"line":778,"code":"    it('adds the projection inside the geometry correctly when dataProjection is set', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      const esrijson = format.writeFeaturesObject(array, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      esrijson.features.forEach(function (feature, i) {\n        const spatialReference = feature.geometry.spatialReference;\n        expect(Number(spatialReference.wkid)).to.equal(4326);\n        expect(feature.geometry.paths[0]).to.eql(array[i].getGeometry().clone().transform('EPSG:3857', 'EPSG:4326').getCoordinates());\n      });\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"does not add the projection inside the geometry when neither featurProjection nor dataProjection are set","suites":["ol/format/EsriJSON.js","#writeFeatures"],"updatePoint":{"line":791,"column":112,"index":36305},"line":791,"code":"    it('does not add the projection inside the geometry when neither featurProjection nor dataProjection are set', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      const esrijson = format.writeFeaturesObject(array);\n      esrijson.features.forEach(function (feature, i) {\n        expect(feature.geometry.spatialReference).to.be(undefined);\n        expect(feature.geometry.paths[0]).to.eql(array[i].getGeometry().getCoordinates());\n      });\n    });","file":"node/ol/format/EsriJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a single point feature","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":123,"column":39,"index":3520},"line":123,"code":"    it('can read a single point feature', function () {\n      const feature = format.readFeature(pointGeoJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(Point);\n      expect(geometry.getCoordinates()).to.eql([102.0, 0.5]);\n      expect(feature.get('prop0')).to.be('value0');\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a single point geometry as a feature","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":131,"column":53,"index":3895},"line":131,"code":"    it('can read a single point geometry as a feature', function () {\n      const feature = format.readFeature(pointGeoJSON.geometry);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(Point);\n      expect(geometry.getCoordinates()).to.eql([102.0, 0.5]);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a single line string feature","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":138,"column":45,"index":4219},"line":138,"code":"    it('can read a single line string feature', function () {\n      const feature = format.readFeature(lineStringGeoJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(LineString);\n      expect(geometry.getCoordinates()).to.eql([[102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]]);\n      expect(feature.get('prop0')).to.be('value0');\n      expect(feature.get('prop1')).to.be(0.0);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a single polygon feature","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":147,"column":41,"index":4683},"line":147,"code":"    it('can read a single polygon feature', function () {\n      const feature = format.readFeature(polygonGeoJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(Polygon);\n      expect(geometry.getCoordinates()).to.eql([[[100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0]]]);\n      expect(feature.get('prop0')).to.be('value0');\n      expect(feature.get('prop1')).to.eql({\n        'this': 'that'\n      });\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a feature with null geometry","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":158,"column":45,"index":5177},"line":158,"code":"    it('can read a feature with null geometry', function () {\n      const feature = format.readFeature(nullGeometryGeoJSON);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.eql(null);\n      expect(feature.get('prop0')).to.be('value0');\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a feature with id equal to 0","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":165,"column":45,"index":5486},"line":165,"code":"    it('can read a feature with id equal to 0', function () {\n      const feature = format.readFeature(zeroIdGeoJSON);\n      expect(feature).to.be.an(Feature);\n      expect(feature.getId()).to.be(0);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a feature collection","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":170,"column":37,"index":5686},"line":170,"code":"    it('can read a feature collection', function () {\n      const features = format.readFeatures(featureCollectionGeoJSON);\n      expect(features).to.have.length(3);\n      expect(features[0].getGeometry()).to.be.an(Point);\n      expect(features[1].getGeometry()).to.be.an(LineString);\n      expect(features[2].getGeometry()).to.be.an(Polygon);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read and transform a point","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":177,"column":38,"index":6039},"line":177,"code":"    it('can read and transform a point', function () {\n      const feature = format.readFeatures(pointGeoJSON, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(feature[0].getGeometry()).to.be.an(Point);\n      expect(feature[0].getGeometry().getCoordinates()).to.eql(transform([102.0, 0.5], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"uses featureProjection passed to the constructor","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":184,"column":56,"index":6398},"line":184,"code":"    it('uses featureProjection passed to the constructor', function () {\n      const format = new GeoJSON({\n        featureProjection: 'EPSG:3857'\n      });\n      const feature = format.readFeatures(pointGeoJSON);\n      expect(feature[0].getGeometry()).to.be.an(Point);\n      expect(feature[0].getGeometry().getCoordinates()).to.eql(transform([102.0, 0.5], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"gives precedence to options passed to the read method","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":192,"column":61,"index":6796},"line":192,"code":"    it('gives precedence to options passed to the read method', function () {\n      const format = new GeoJSON({\n        featureProjection: 'EPSG:1234'\n      });\n      const feature = format.readFeatures(pointGeoJSON, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(feature[0].getGeometry()).to.be.an(Point);\n      expect(feature[0].getGeometry().getCoordinates()).to.eql(transform([102.0, 0.5], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read and transform a feature collection","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":202,"column":51,"index":7234},"line":202,"code":"    it('can read and transform a feature collection', function () {\n      const features = format.readFeatures(featureCollectionGeoJSON, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(features[0].getGeometry()).to.be.an(Point);\n      expect(features[0].getGeometry().getCoordinates()).to.eql(transform([102.0, 0.5], 'EPSG:4326', 'EPSG:3857'));\n      expect(features[1].getGeometry().getCoordinates()).to.eql([transform([102.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([103.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([104.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([105.0, 1.0], 'EPSG:4326', 'EPSG:3857')]);\n      expect(features[2].getGeometry().getCoordinates()).to.eql([[transform([100.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([100.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([101.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([101.0, 0.0], 'EPSG:4326', 'EPSG:3857')]]);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can create a feature with a specific geometryName","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":211,"column":57,"index":8153},"line":211,"code":"    it('can create a feature with a specific geometryName', function () {\n      const feature = new GeoJSON({\n        geometryName: 'the_geom'\n      }).readFeature(pointGeoJSON);\n      expect(feature.getGeometryName()).to.be('the_geom');\n      expect(feature.getGeometry()).to.be.an(Point);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"transforms tile pixel coordinates","suites":["ol/format/GeoJSON.js","#readFeature"],"updatePoint":{"line":218,"column":41,"index":8436},"line":218,"code":"    it('transforms tile pixel coordinates', function () {\n      const geojson = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [1024, 1024]\n        }\n      };\n      const format = new GeoJSON({\n        dataProjection: new Projection({\n          code: '',\n          units: 'tile-pixels',\n          extent: [0, 0, 4096, 4096]\n        })\n      });\n      const feature = format.readFeature(geojson, {\n        extent: [-180, -90, 180, 90],\n        featureProjection: 'EPSG:3857'\n      });\n      expect(feature.getGeometry().getCoordinates()).to.eql([-135, 45]);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses feature collection","suites":["ol/format/GeoJSON.js","#readFeatures"],"updatePoint":{"line":241,"column":33,"index":9089},"line":241,"code":"    it('parses feature collection', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      expect(array.length).to.be(2);\n      const first = array[0];\n      expect(first).to.be.a(Feature);\n      expect(first.get('LINK_ID')).to.be(573730499);\n      const firstGeom = first.getGeometry();\n      expect(firstGeom).to.be.a(LineString);\n      const second = array[1];\n      expect(second).to.be.a(Feature);\n      expect(second.get('ST_NAME')).to.be('BRUNNSGATAN');\n      const secondGeom = second.getGeometry();\n      expect(secondGeom).to.be.a(LineString);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"can parse a polygon geometry as an array of one feature","suites":["ol/format/GeoJSON.js","#readFeatures"],"updatePoint":{"line":256,"column":63,"index":9732},"line":256,"code":"    it('can parse a polygon geometry as an array of one feature', function () {\n      const features = format.readFeatures(polygonGeoJSON);\n      expect(features).to.be.an(Array);\n      expect(features).to.have.length(1);\n      const geometry = features[0].getGeometry();\n      expect(geometry).to.be.an(Polygon);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses countries.geojson","suites":["ol/format/GeoJSON.js","#readFeatures"],"updatePoint":{"line":263,"column":32,"index":10023},"line":263,"code":"    it('parses countries.geojson', async () => {\n      const text = await fse.readFile('test/node/ol/format/GeoJSON/countries.geojson', {\n        encoding: 'utf8'\n      });\n      const result = format.readFeatures(text);\n      expect(result.length).to.be(179);\n      const first = result[0];\n      expect(first).to.be.a(Feature);\n      expect(first.get('name')).to.be('Afghanistan');\n      expect(first.getId()).to.be('AFG');\n      const firstGeom = first.getGeometry();\n      expect(firstGeom).to.be.a(Polygon);\n      expect(equals(firstGeom.getExtent(), [60.52843, 29.318572, 75.158028, 38.486282])).to.be(true);\n      const last = result[178];\n      expect(last).to.be.a(Feature);\n      expect(last.get('name')).to.be('Zimbabwe');\n      expect(last.getId()).to.be('ZWE');\n      const lastGeom = last.getGeometry();\n      expect(lastGeom).to.be.a(Polygon);\n      expect(equals(lastGeom.getExtent(), [25.264226, -22.271612, 32.849861, -15.507787])).to.be(true);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"generates an array of features for Feature","suites":["ol/format/GeoJSON.js","#readFeatures"],"updatePoint":{"line":284,"column":50,"index":11012},"line":284,"code":"    it('generates an array of features for Feature', function () {\n      const format = new GeoJSON();\n      const json = {\n        type: 'Feature',\n        properties: {\n          bam: 'baz'\n        },\n        geometry: {\n          type: 'LineString',\n          coordinates: [[1, 2], [3, 4]]\n        }\n      };\n      const features = format.readFeatures(json);\n      expect(features.length).to.be(1);\n      const first = features[0];\n      expect(first).to.be.a(Feature);\n      expect(first.get('bam')).to.be('baz');\n      expect(first.getGeometry()).to.be.a(LineString);\n      expect(format.readProjection(json)).to.be(getProjection('EPSG:4326'));\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses point","suites":["ol/format/GeoJSON.js","#readGeometry"],"updatePoint":{"line":306,"column":20,"index":11688},"line":306,"code":"    it('parses point', function () {\n      const str = JSON.stringify({\n        type: 'Point',\n        coordinates: [10, 20]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Point);\n      expect(obj.getCoordinates()).to.eql([10, 20]);\n      expect(obj.getLayout()).to.eql('XY');\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses linestring","suites":["ol/format/GeoJSON.js","#readGeometry"],"updatePoint":{"line":316,"column":25,"index":12011},"line":316,"code":"    it('parses linestring', function () {\n      const str = JSON.stringify({\n        type: 'LineString',\n        coordinates: [[10, 20], [30, 40]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(LineString);\n      expect(obj.getCoordinates()).to.eql([[10, 20], [30, 40]]);\n      expect(obj.getLayout()).to.eql('XY');\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses XYZ linestring","suites":["ol/format/GeoJSON.js","#readGeometry"],"updatePoint":{"line":326,"column":29,"index":12372},"line":326,"code":"    it('parses XYZ linestring', function () {\n      const str = JSON.stringify({\n        type: 'LineString',\n        coordinates: [[10, 20, 1534], [30, 40, 1420]]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(LineString);\n      expect(obj.getLayout()).to.eql('XYZ');\n      expect(obj.getCoordinates()).to.eql([[10, 20, 1534], [30, 40, 1420]]);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses polygon","suites":["ol/format/GeoJSON.js","#readGeometry"],"updatePoint":{"line":336,"column":22,"index":12751},"line":336,"code":"    it('parses polygon', function () {\n      const outer = [[0, 0], [10, 0], [10, 10], [0, 10], [0, 0]];\n      const inner1 = [[1, 1], [2, 1], [2, 2], [1, 2], [1, 1]];\n      const inner2 = [[8, 8], [9, 8], [9, 9], [8, 9], [8, 8]];\n      const str = JSON.stringify({\n        type: 'Polygon',\n        coordinates: [outer, inner1, inner2]\n      });\n      const obj = format.readGeometry(str);\n      expect(obj).to.be.a(Polygon);\n      expect(obj.getLayout()).to.eql('XY');\n      const rings = obj.getLinearRings();\n      expect(rings.length).to.be(3);\n      expect(rings[0]).to.be.a(LinearRing);\n      expect(rings[1]).to.be.a(LinearRing);\n      expect(rings[2]).to.be.a(LinearRing);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses geometry collection","suites":["ol/format/GeoJSON.js","#readGeometry"],"updatePoint":{"line":353,"column":34,"index":13452},"line":353,"code":"    it('parses geometry collection', function () {\n      const str = JSON.stringify({\n        type: 'GeometryCollection',\n        geometries: [{\n          type: 'Point',\n          coordinates: [10, 20]\n        }, {\n          type: 'LineString',\n          coordinates: [[30, 40], [50, 60]]\n        }]\n      });\n      const geometryCollection = format.readGeometry(str);\n      expect(geometryCollection).to.be.an(GeometryCollection);\n      const array = geometryCollection.getGeometries();\n      expect(array.length).to.be(2);\n      expect(array[0]).to.be.a(Point);\n      expect(array[0].getLayout()).to.eql('XY');\n      expect(array[1]).to.be.a(LineString);\n      expect(array[1].getLayout()).to.eql('XY');\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"works with empty coordinate arrays","suites":["ol/format/GeoJSON.js","#readGeometry"],"updatePoint":{"line":373,"column":42,"index":14174},"line":373,"code":"    it('works with empty coordinate arrays', function () {\n      const coordinates = [[[[1, 2], [3, 4], [5, 6], [1, 2]]], []];\n      const geojson = {\n        type: 'MultiPolygon',\n        coordinates: coordinates\n      };\n      const geometry = format.readGeometry(geojson);\n      expect(geometry.getCoordinates()).to.eql(coordinates);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"reads named crs from top-level object","suites":["ol/format/GeoJSON.js","#readProjection"],"updatePoint":{"line":384,"column":45,"index":14572},"line":384,"code":"    it('reads named crs from top-level object', function () {\n      const json = {\n        type: 'FeatureCollection',\n        crs: {\n          type: 'name',\n          properties: {\n            name: 'EPSG:3857'\n          }\n        },\n        features: [{\n          type: 'Feature',\n          properties: {\n            foo: 'bar'\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: [1, 2]\n          }\n        }, {\n          type: 'Feature',\n          properties: {\n            bam: 'baz'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [[1, 2], [3, 4]]\n          }\n        }]\n      };\n      const features = format.readFeatures(json);\n      expect(features.length).to.be(2);\n      const first = features[0];\n      expect(first).to.be.a(Feature);\n      expect(first.get('foo')).to.be('bar');\n      expect(first.getGeometry()).to.be.a(Point);\n      const second = features[1];\n      expect(second).to.be.a(Feature);\n      expect(second.get('bam')).to.be('baz');\n      expect(second.getGeometry()).to.be.a(LineString);\n      expect(format.readProjection(json)).to.be(getProjection('EPSG:3857'));\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"accepts null crs","suites":["ol/format/GeoJSON.js","#readProjection"],"updatePoint":{"line":425,"column":24,"index":15730},"line":425,"code":"    it('accepts null crs', function () {\n      const json = {\n        type: 'FeatureCollection',\n        crs: null,\n        features: [{\n          type: 'Feature',\n          properties: {\n            foo: 'bar'\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: [1, 2]\n          }\n        }, {\n          type: 'Feature',\n          properties: {\n            bam: 'baz'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [[1, 2], [3, 4]]\n          }\n        }]\n      };\n      const features = format.readFeatures(json);\n      expect(features.length).to.be(2);\n      const first = features[0];\n      expect(first).to.be.a(Feature);\n      expect(first.get('foo')).to.be('bar');\n      expect(first.getGeometry()).to.be.a(Point);\n      const second = features[1];\n      expect(second).to.be.a(Feature);\n      expect(second.get('bam')).to.be('baz');\n      expect(second.getGeometry()).to.be.a(LineString);\n      expect(format.readProjection(json)).to.be(getProjection('EPSG:4326'));\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes feature collection","suites":["ol/format/GeoJSON.js","#writeFeatures"],"updatePoint":{"line":463,"column":34,"index":16850},"line":463,"code":"    it('encodes feature collection', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      const geojson = format.writeFeaturesObject(array);\n      const result = format.readFeatures(geojson);\n      expect(array.length).to.equal(result.length);\n      let got, exp, gotProp, expProp;\n      for (let i = 0, ii = array.length; i < ii; ++i) {\n        got = array[i];\n        exp = result[i];\n        expect(got.getGeometry().getCoordinates()).to.eql(exp.getGeometry().getCoordinates());\n        gotProp = got.getProperties();\n        delete gotProp.geometry;\n        expProp = exp.getProperties();\n        delete expProp.geometry;\n        expect(gotProp).to.eql(expProp);\n      }\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"transforms and encodes feature collection","suites":["ol/format/GeoJSON.js","#writeFeatures"],"updatePoint":{"line":481,"column":49,"index":17601},"line":481,"code":"    it('transforms and encodes feature collection', function () {\n      const str = JSON.stringify(data);\n      const array = format.readFeatures(str);\n      const geojson = format.writeFeatures(array, {\n        featureProjection: 'EPSG:3857'\n      });\n      const result = format.readFeatures(geojson);\n      let got, exp;\n      for (let i = 0, ii = array.length; i < ii; ++i) {\n        got = array[i];\n        exp = result[i];\n        expect(got.getGeometry().transform('EPSG:3857', 'EPSG:4326').getCoordinates()).to.eql(exp.getGeometry().getCoordinates());\n      }\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"writes out a feature with a different geometryName correctly","suites":["ol/format/GeoJSON.js","#writeFeatures"],"updatePoint":{"line":495,"column":68,"index":18196},"line":495,"code":"    it('writes out a feature with a different geometryName correctly', function () {\n      const feature = new Feature({\n        'foo': 'bar'\n      });\n      feature.setGeometryName('mygeom');\n      feature.setGeometry(new Point([5, 10]));\n      const geojson = format.writeFeaturesObject([feature]);\n      expect(geojson.features[0].properties.mygeom).to.eql(undefined);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"writes out a feature without properties correctly","suites":["ol/format/GeoJSON.js","#writeFeatures"],"updatePoint":{"line":504,"column":57,"index":18565},"line":504,"code":"    it('writes out a feature without properties correctly', function () {\n      const feature = new Feature(new Point([5, 10]));\n      const geojson = format.writeFeatureObject(feature);\n      expect(geojson.properties).to.eql(null);\n      expect(geojson.geometry).to.eql({\n        type: 'Point',\n        coordinates: [5, 10]\n      });\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"writes out a feature with only non-geometry properties correctly","suites":["ol/format/GeoJSON.js","#writeFeatures"],"updatePoint":{"line":513,"column":72,"index":18924},"line":513,"code":"    it('writes out a feature with only non-geometry properties correctly', function () {\n      const feature = new Feature({\n        foo: 'bar'\n      });\n      const geojson = format.writeFeatureObject(feature);\n      expect(geojson.geometry).to.eql(null);\n      expect(geojson.properties).to.eql({\n        foo: 'bar'\n      });\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"writes out a feature with deleted properties correctly","suites":["ol/format/GeoJSON.js","#writeFeatures"],"updatePoint":{"line":523,"column":62,"index":19250},"line":523,"code":"    it('writes out a feature with deleted properties correctly', function () {\n      const feature = new Feature({\n        foo: 'bar'\n      });\n      feature.unset('foo');\n      const geojson = format.writeFeatureObject(feature);\n      expect(geojson.geometry).to.eql(null);\n      expect(geojson.properties).to.eql(null);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"writes out a feature without geometry correctly","suites":["ol/format/GeoJSON.js","#writeFeatures"],"updatePoint":{"line":532,"column":55,"index":19573},"line":532,"code":"    it('writes out a feature without geometry correctly', function () {\n      const feature = new Feature();\n      const geojson = format.writeFeatureObject(feature);\n      expect(geojson.geometry).to.eql(null);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"writes out a feature with id equal to 0 correctly","suites":["ol/format/GeoJSON.js","#writeFeatures"],"updatePoint":{"line":537,"column":57,"index":19795},"line":537,"code":"    it('writes out a feature with id equal to 0 correctly', function () {\n      const feature = new Feature();\n      feature.setId(0);\n      const geojson = format.writeFeatureObject(feature);\n      expect(geojson.id).to.eql(0);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes point","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":545,"column":21,"index":20045},"line":545,"code":"    it('encodes point', function () {\n      const point = new Point([10, 20]);\n      const geojson = format.writeGeometry(point);\n      expect(point.getCoordinates()).to.eql(format.readGeometry(geojson).getCoordinates());\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"accepts featureProjection","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":550,"column":33,"index":20287},"line":550,"code":"    it('accepts featureProjection', function () {\n      const point = new Point(fromLonLat([10, 20]));\n      const geojson = format.writeGeometry(point, {\n        featureProjection: 'EPSG:3857'\n      });\n      const obj = JSON.parse(geojson);\n      expect(obj.coordinates).to.eql(toLonLat(point.getCoordinates()));\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"respects featureProjection passed to constructor","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":558,"column":56,"index":20633},"line":558,"code":"    it('respects featureProjection passed to constructor', function () {\n      const format = new GeoJSON({\n        featureProjection: 'EPSG:3857'\n      });\n      const point = new Point(fromLonLat([10, 20]));\n      const geojson = format.writeGeometry(point);\n      const obj = JSON.parse(geojson);\n      expect(obj.coordinates).to.eql(toLonLat(point.getCoordinates()));\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes linestring","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":567,"column":26,"index":20983},"line":567,"code":"    it('encodes linestring', function () {\n      const linestring = new LineString([[10, 20], [30, 40]]);\n      const geojson = format.writeGeometry(linestring);\n      expect(linestring.getCoordinates()).to.eql(format.readGeometry(geojson).getCoordinates());\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes polygon","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":572,"column":23,"index":21247},"line":572,"code":"    it('encodes polygon', function () {\n      const outer = [[0, 0], [10, 0], [10, 10], [0, 10], [0, 0]];\n      const inner1 = [[1, 1], [2, 1], [2, 2], [1, 2], [1, 1]];\n      const inner2 = [[8, 8], [9, 8], [9, 9], [8, 9], [8, 8]];\n      const polygon = new Polygon([outer, inner1, inner2]);\n      const geojson = format.writeGeometry(polygon);\n      expect(polygon.getCoordinates()).to.eql(format.readGeometry(geojson).getCoordinates());\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"maintains coordinate order by default","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":580,"column":45,"index":21716},"line":580,"code":"    it('maintains coordinate order by default', function () {\n      const cw = [[-180, -90], [-180, 90], [180, 90], [180, -90], [-180, -90]];\n      const ccw = [[-180, -90], [180, -90], [180, 90], [-180, 90], [-180, -90]];\n      const right = new Polygon([ccw, cw]);\n      const rightMulti = new MultiPolygon([[ccw, cw]]);\n      const left = new Polygon([cw, ccw]);\n      const leftMulti = new MultiPolygon([[cw, ccw]]);\n      const rightObj = {\n        type: 'Polygon',\n        coordinates: [ccw, cw]\n      };\n      const rightMultiObj = {\n        type: 'MultiPolygon',\n        coordinates: [[ccw, cw]]\n      };\n      const leftObj = {\n        type: 'Polygon',\n        coordinates: [cw, ccw]\n      };\n      const leftMultiObj = {\n        type: 'MultiPolygon',\n        coordinates: [[cw, ccw]]\n      };\n      expect(JSON.parse(format.writeGeometry(right))).to.eql(rightObj);\n      expect(JSON.parse(format.writeGeometry(rightMulti))).to.eql(rightMultiObj);\n      expect(JSON.parse(format.writeGeometry(left))).to.eql(leftObj);\n      expect(JSON.parse(format.writeGeometry(leftMulti))).to.eql(leftMultiObj);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"allows serializing following the right-hand rule","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":608,"column":56,"index":22842},"line":608,"code":"    it('allows serializing following the right-hand rule', function () {\n      const cw = [[-180, -90], [-180, 90], [180, 90], [180, -90], [-180, -90]];\n      const ccw = [[-180, -90], [180, -90], [180, 90], [-180, 90], [-180, -90]];\n      const right = new Polygon([ccw, cw]);\n      const rightMulti = new MultiPolygon([[ccw, cw]]);\n      const left = new Polygon([cw, ccw]);\n      const leftMulti = new MultiPolygon([[cw, ccw]]);\n      const rightObj = {\n        type: 'Polygon',\n        coordinates: [ccw, cw]\n      };\n      const rightMultiObj = {\n        type: 'MultiPolygon',\n        coordinates: [[ccw, cw]]\n      };\n      let json = format.writeGeometry(right, {\n        rightHanded: true\n      });\n      expect(JSON.parse(json)).to.eql(rightObj);\n      json = format.writeGeometry(rightMulti, {\n        rightHanded: true\n      });\n      expect(JSON.parse(json)).to.eql(rightMultiObj);\n      json = format.writeGeometry(left, {\n        rightHanded: true\n      });\n      expect(JSON.parse(json)).to.eql(rightObj);\n      json = format.writeGeometry(leftMulti, {\n        rightHanded: true\n      });\n      expect(JSON.parse(json)).to.eql(rightMultiObj);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"allows serializing following the left-hand rule","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":640,"column":55,"index":24007},"line":640,"code":"    it('allows serializing following the left-hand rule', function () {\n      const cw = [[-180, -90], [-180, 90], [180, 90], [180, -90], [-180, -90]];\n      const ccw = [[-180, -90], [180, -90], [180, 90], [-180, 90], [-180, -90]];\n      const right = new Polygon([ccw, cw]);\n      const rightMulti = new MultiPolygon([[ccw, cw]]);\n      const left = new Polygon([cw, ccw]);\n      const leftMulti = new MultiPolygon([[cw, ccw]]);\n      const leftObj = {\n        type: 'Polygon',\n        coordinates: [cw, ccw]\n      };\n      const leftMultiObj = {\n        type: 'MultiPolygon',\n        coordinates: [[cw, ccw]]\n      };\n      let json = format.writeGeometry(right, {\n        rightHanded: false\n      });\n      expect(JSON.parse(json)).to.eql(leftObj);\n      json = format.writeGeometry(rightMulti, {\n        rightHanded: false\n      });\n      expect(JSON.parse(json)).to.eql(leftMultiObj);\n      json = format.writeGeometry(left, {\n        rightHanded: false\n      });\n      expect(JSON.parse(json)).to.eql(leftObj);\n      json = format.writeGeometry(leftMulti, {\n        rightHanded: false\n      });\n      expect(JSON.parse(json)).to.eql(leftMultiObj);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes geometry collection","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":672,"column":35,"index":25150},"line":672,"code":"    it('encodes geometry collection', function () {\n      const collection = new GeometryCollection([new Point([10, 20]), new LineString([[30, 40], [50, 60]])]);\n      const geojson = format.writeGeometry(collection);\n      const got = format.readGeometry(geojson);\n      expect(got).to.be.an(GeometryCollection);\n      const gotGeometries = got.getGeometries();\n      const geometries = collection.getGeometries();\n      expect(geometries.length).to.equal(gotGeometries.length);\n      for (let i = 0, ii = geometries.length; i < ii; ++i) {\n        expect(geometries[i].getCoordinates()).to.eql(gotGeometries[i].getCoordinates());\n      }\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"encodes a circle as an empty geometry collection","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":684,"column":56,"index":25818},"line":684,"code":"    it('encodes a circle as an empty geometry collection', function () {\n      const circle = new Circle([0, 0], 1);\n      const geojson = format.writeGeometryObject(circle);\n      expect(geojson).to.eql({\n        'type': 'GeometryCollection',\n        'geometries': []\n      });\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"transforms and encodes a point","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":692,"column":38,"index":26087},"line":692,"code":"    it('transforms and encodes a point', function () {\n      const point = new Point([2, 3]);\n      const geojson = format.writeGeometry(point, {\n        featureProjection: 'EPSG:3857'\n      });\n      const newPoint = format.readGeometry(geojson, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(point.getCoordinates()[0]).to.roughlyEqual(newPoint.getCoordinates()[0], 1e-8);\n      expect(point.getCoordinates()[1]).to.roughlyEqual(newPoint.getCoordinates()[1], 1e-8);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"transforms and encodes geometry collection","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":703,"column":50,"index":26591},"line":703,"code":"    it('transforms and encodes geometry collection', function () {\n      const collection = new GeometryCollection([new Point([2, 3]), new LineString([[3, 2], [2, 1]])]);\n      const geojson = format.writeGeometry(collection, {\n        featureProjection: 'EPSG:3857'\n      });\n      const got = format.readGeometry(geojson, {\n        featureProjection: 'EPSG:3857'\n      });\n      const gotGeometries = got.getGeometries();\n      const geometries = collection.getGeometries();\n      expect(geometries[0].getCoordinates()[0]).to.roughlyEqual(gotGeometries[0].getCoordinates()[0], 1e-8);\n      expect(geometries[0].getCoordinates()[1]).to.roughlyEqual(gotGeometries[0].getCoordinates()[1], 1e-8);\n      expect(geometries[1].getCoordinates()[0][0]).to.roughlyEqual(gotGeometries[1].getCoordinates()[0][0], 1e-8);\n      expect(geometries[1].getCoordinates()[0][1]).to.roughlyEqual(gotGeometries[1].getCoordinates()[0][1], 1e-8);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"truncates transformed point with decimals option","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":718,"column":56,"index":27530},"line":718,"code":"    it('truncates transformed point with decimals option', function () {\n      const point = new Point([2, 3]).transform('EPSG:4326', 'EPSG:3857');\n      const geojson = format.writeGeometry(point, {\n        featureProjection: 'EPSG:3857',\n        decimals: 2\n      });\n      expect(format.readGeometry(geojson).getCoordinates()).to.eql([2, 3]);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"truncates a linestring with decimals option","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":726,"column":51,"index":27879},"line":726,"code":"    it('truncates a linestring with decimals option', function () {\n      const linestring = new LineString([[42.123456789, 38.987654321], [43, 39]]);\n      const geojson = format.writeGeometry(linestring, {\n        decimals: 6\n      });\n      expect(format.readGeometry(geojson).getCoordinates()).to.eql([[42.123457, 38.987654], [43, 39]]);\n      expect(linestring.getCoordinates()).to.eql([[42.123456789, 38.987654321], [43, 39]]);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"rounds a linestring with decimals option = 0","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":734,"column":52,"index":28322},"line":734,"code":"    it('rounds a linestring with decimals option = 0', function () {\n      const linestring = new LineString([[42.123456789, 38.987654321], [43, 39]]);\n      const geojson = format.writeGeometry(linestring, {\n        decimals: 0\n      });\n      expect(format.readGeometry(geojson).getCoordinates()).to.eql([[42, 39], [43, 39]]);\n      expect(linestring.getCoordinates()).to.eql([[42.123456789, 38.987654321], [43, 39]]);\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"works with empty coordinate arrays","suites":["ol/format/GeoJSON.js","#writeGeometry"],"updatePoint":{"line":742,"column":42,"index":28741},"line":742,"code":"    it('works with empty coordinate arrays', function () {\n      const coordinates = [[[[1, 2], [3, 4], [5, 6], [1, 2]]], []];\n      const geometry = new MultiPolygon([new Polygon(coordinates[0]), new Polygon(coordinates[1])]);\n      const geojson = format.writeGeometryObject(geometry);\n      expect(geojson).to.eql({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n      });\n    });","file":"node/ol/format/GeoJSON.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection","suites":["ol/format/Polyline.js","#readProjectionFromText"],"updatePoint":{"line":33,"column":38,"index":1588},"line":33,"code":"    it('returns the default projection', function () {\n      const projection = format.readProjectionFromText(encodedFlatPoints);\n      expect(projection).to.eql(getProjection('EPSG:4326'));\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","encodeDeltas"],"updatePoint":{"line":39,"column":30,"index":1826},"line":39,"code":"    it('returns expected value', function () {\n      const encodeDeltas = polyline.encodeDeltas;\n      expect(encodeDeltas(flippedFlatPoints, 2)).to.eql(encodedFlatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","decodeDeltas"],"updatePoint":{"line":45,"column":30,"index":2054},"line":45,"code":"    it('returns expected value', function () {\n      const decodeDeltas = polyline.decodeDeltas;\n      expect(decodeDeltas(encodedFlatPoints, 2)).to.eql(flippedFlatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","encodeFloats"],"updatePoint":{"line":51,"column":30,"index":2282},"line":51,"code":"    it('returns expected value', function () {\n      const encodeFloats = polyline.encodeFloats;\n      expect(encodeFloats(smallFloats)).to.eql(encodedFloats);\n      resetTestingData();\n      expect(encodeFloats(smallFloats, 1e5)).to.eql(encodedFloats);\n      expect(encodeFloats(floats, 1e2)).to.eql(encodedFloats);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","decodeFloats"],"updatePoint":{"line":60,"column":30,"index":2654},"line":60,"code":"    it('returns expected value', function () {\n      const decodeFloats = polyline.decodeFloats;\n      expect(decodeFloats(encodedFloats)).to.eql(smallFloats);\n      expect(decodeFloats(encodedFloats, 1e5)).to.eql(smallFloats);\n      expect(decodeFloats(encodedFloats, 1e2)).to.eql(floats);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","encodeSignedIntegers"],"updatePoint":{"line":68,"column":30,"index":3008},"line":68,"code":"    it('returns expected value', function () {\n      const encodeSignedIntegers = polyline.encodeSignedIntegers;\n      expect(encodeSignedIntegers(signedIntegers)).to.eql(encodedSignedIntegers);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","decodeSignedIntegers"],"updatePoint":{"line":74,"column":30,"index":3266},"line":74,"code":"    it('returns expected value', function () {\n      const decodeSignedIntegers = polyline.decodeSignedIntegers;\n      expect(decodeSignedIntegers(encodedSignedIntegers)).to.eql(signedIntegers);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","encodeUnsignedIntegers"],"updatePoint":{"line":80,"column":30,"index":3526},"line":80,"code":"    it('returns expected value', function () {\n      const encodeUnsignedIntegers = polyline.encodeUnsignedIntegers;\n      expect(encodeUnsignedIntegers(unsignedIntegers)).to.eql(encodedUnsignedIntegers);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","decodeUnsignedIntegers"],"updatePoint":{"line":86,"column":30,"index":3796},"line":86,"code":"    it('returns expected value', function () {\n      const decodeUnsignedIntegers = polyline.decodeUnsignedIntegers;\n      expect(decodeUnsignedIntegers(encodedUnsignedIntegers)).to.eql(unsignedIntegers);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","encodeFloat"],"updatePoint":{"line":92,"column":30,"index":4055},"line":92,"code":"    it('returns expected value', function () {\n      const encodeFloats = polyline.encodeFloats;\n      expect(encodeFloats([0.0])).to.eql('?');\n      expect(encodeFloats([-0.00001])).to.eql('@');\n      expect(encodeFloats([0.00001])).to.eql('A');\n      expect(encodeFloats([-0.00002])).to.eql('B');\n      expect(encodeFloats([0.00002])).to.eql('C');\n      expect(encodeFloats([0.00015])).to.eql(']');\n      expect(encodeFloats([-0.00016])).to.eql('^');\n      expect(encodeFloats([-0.1], 10)).to.eql('@');\n      expect(encodeFloats([0.1], 10)).to.eql('A');\n      expect(encodeFloats([16 * 32 / 1e5])).to.eql('__@');\n      expect(encodeFloats([16 * 32 * 32 / 1e5])).to.eql('___@');\n\n      // from the \"Encoded Polyline Algorithm Format\" page at Google\n      expect(encodeFloats([-179.9832104])).to.eql('`~oia@');\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","decodeFloat"],"updatePoint":{"line":111,"column":30,"index":4920},"line":111,"code":"    it('returns expected value', function () {\n      const decodeFloats = polyline.decodeFloats;\n      expect(decodeFloats('?')).to.eql([0.0]);\n      expect(decodeFloats('@')).to.eql([-0.00001]);\n      expect(decodeFloats('A')).to.eql([0.00001]);\n      expect(decodeFloats('B')).to.eql([-0.00002]);\n      expect(decodeFloats('C')).to.eql([0.00002]);\n      expect(decodeFloats(']')).to.eql([0.00015]);\n      expect(decodeFloats('^')).to.eql([-0.00016]);\n      expect(decodeFloats('@', 10)).to.eql([-0.1]);\n      expect(decodeFloats('A', 10)).to.eql([0.1]);\n      expect(decodeFloats('__@')).to.eql([16 * 32 / 1e5]);\n      expect(decodeFloats('___@')).to.eql([16 * 32 * 32 / 1e5]);\n\n      // from the \"Encoded Polyline Algorithm Format\" page at Google\n      expect(decodeFloats('`~oia@')).to.eql([-179.98321]);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","encodeSignedInteger"],"updatePoint":{"line":130,"column":30,"index":5791},"line":130,"code":"    it('returns expected value', function () {\n      const encodeSignedIntegers = polyline.encodeSignedIntegers;\n      expect(encodeSignedIntegers([0])).to.eql('?');\n      expect(encodeSignedIntegers([-1])).to.eql('@');\n      expect(encodeSignedIntegers([1])).to.eql('A');\n      expect(encodeSignedIntegers([-2])).to.eql('B');\n      expect(encodeSignedIntegers([2])).to.eql('C');\n      expect(encodeSignedIntegers([15])).to.eql(']');\n      expect(encodeSignedIntegers([-16])).to.eql('^');\n      expect(encodeSignedIntegers([16])).to.eql('_@');\n      expect(encodeSignedIntegers([16 * 32])).to.eql('__@');\n      expect(encodeSignedIntegers([16 * 32 * 32])).to.eql('___@');\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","decodeSignedInteger"],"updatePoint":{"line":145,"column":30,"index":6525},"line":145,"code":"    it('returns expected value', function () {\n      const decodeSignedIntegers = polyline.decodeSignedIntegers;\n      expect(decodeSignedIntegers('?')).to.eql([0]);\n      expect(decodeSignedIntegers('@')).to.eql([-1]);\n      expect(decodeSignedIntegers('A')).to.eql([1]);\n      expect(decodeSignedIntegers('B')).to.eql([-2]);\n      expect(decodeSignedIntegers('C')).to.eql([2]);\n      expect(decodeSignedIntegers(']')).to.eql([15]);\n      expect(decodeSignedIntegers('^')).to.eql([-16]);\n      expect(decodeSignedIntegers('_@')).to.eql([16]);\n      expect(decodeSignedIntegers('__@')).to.eql([16 * 32]);\n      expect(decodeSignedIntegers('___@')).to.eql([16 * 32 * 32]);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","encodeUnsignedInteger"],"updatePoint":{"line":160,"column":30,"index":7261},"line":160,"code":"    it('returns expected value', function () {\n      const encodeUnsignedInteger = polyline.encodeUnsignedInteger;\n      expect(encodeUnsignedInteger(0)).to.eql('?');\n      expect(encodeUnsignedInteger(1)).to.eql('@');\n      expect(encodeUnsignedInteger(2)).to.eql('A');\n      expect(encodeUnsignedInteger(30)).to.eql(']');\n      expect(encodeUnsignedInteger(31)).to.eql('^');\n      expect(encodeUnsignedInteger(32)).to.eql('_@');\n      expect(encodeUnsignedInteger(32 * 32)).to.eql('__@');\n      expect(encodeUnsignedInteger(5 * 32 * 32)).to.eql('__D');\n      expect(encodeUnsignedInteger(32 * 32 * 32)).to.eql('___@');\n\n      // from the \"Encoded Polyline Algorithm Format\" page at Google\n      expect(encodeUnsignedInteger(174)).to.eql('mD');\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/format/Polyline.js","decodeUnsignedInteger"],"updatePoint":{"line":177,"column":30,"index":8071},"line":177,"code":"    it('returns expected value', function () {\n      const decodeUnsignedIntegers = polyline.decodeUnsignedIntegers;\n      expect(decodeUnsignedIntegers('?')).to.eql([0]);\n      expect(decodeUnsignedIntegers('@')).to.eql([1]);\n      expect(decodeUnsignedIntegers('A')).to.eql([2]);\n      expect(decodeUnsignedIntegers(']')).to.eql([30]);\n      expect(decodeUnsignedIntegers('^')).to.eql([31]);\n      expect(decodeUnsignedIntegers('_@')).to.eql([32]);\n      expect(decodeUnsignedIntegers('__@')).to.eql([32 * 32]);\n      expect(decodeUnsignedIntegers('__D')).to.eql([5 * 32 * 32]);\n      expect(decodeUnsignedIntegers('___@')).to.eql([32 * 32 * 32]);\n\n      // from the \"Encoded Polyline Algorithm Format\" page at Google\n      expect(decodeUnsignedIntegers('mD')).to.eql([174]);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns the expected feature","suites":["ol/format/Polyline.js","#readFeature"],"updatePoint":{"line":194,"column":36,"index":8910},"line":194,"code":"    it('returns the expected feature', function () {\n      const feature = format.readFeature(encodedFlatPoints);\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(LineString);\n      expect(geometry.getFlatCoordinates()).to.eql(flatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"transforms and returns the expected feature","suites":["ol/format/Polyline.js","#readFeature"],"updatePoint":{"line":201,"column":51,"index":9243},"line":201,"code":"    it('transforms and returns the expected feature', function () {\n      const feature = format.readFeature(encodedFlatPoints, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(LineString);\n      expect(geometry.getCoordinates()).to.eql(points3857);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns the expected feature","suites":["ol/format/Polyline.js","#readFeatures"],"updatePoint":{"line":212,"column":36,"index":9655},"line":212,"code":"    it('returns the expected feature', function () {\n      const features = format.readFeatures(encodedFlatPoints);\n      expect(features).to.be.an(Array);\n      expect(features).to.have.length(1);\n      const feature = features[0];\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(LineString);\n      expect(geometry.getFlatCoordinates()).to.eql(flatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"transforms and returns the expected features","suites":["ol/format/Polyline.js","#readFeatures"],"updatePoint":{"line":222,"column":52,"index":10108},"line":222,"code":"    it('transforms and returns the expected features', function () {\n      const features = format.readFeatures(encodedFlatPoints, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(features).to.be.an(Array);\n      expect(features).to.have.length(1);\n      const feature = features[0];\n      expect(feature).to.be.an(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.an(LineString);\n      expect(geometry.getCoordinates()).to.eql(points3857);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns the expected geometry","suites":["ol/format/Polyline.js","#readGeometry"],"updatePoint":{"line":236,"column":37,"index":10640},"line":236,"code":"    it('returns the expected geometry', function () {\n      const geometry = format.readGeometry(encodedFlatPoints);\n      expect(geometry).to.be.an(LineString);\n      expect(geometry.getFlatCoordinates()).to.eql(flatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"parses XYZ linestring","suites":["ol/format/Polyline.js","#readGeometry"],"updatePoint":{"line":241,"column":29,"index":10866},"line":241,"code":"    it('parses XYZ linestring', function () {\n      const xyz = polyline.encodeDeltas([38.5, -120.2, 100, 40.7, -120.95, 200, 43.252, -126.453, 20], 3);\n      const format = new Polyline({\n        geometryLayout: 'XYZ'\n      });\n      const geometry = format.readGeometry(xyz);\n      expect(geometry.getLayout()).to.eql('XYZ');\n      expect(geometry.getCoordinates()).to.eql([[-120.2, 38.5, 100], [-120.95, 40.7, 200], [-126.453, 43.252, 20]]);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"transforms and returns the expected geometry","suites":["ol/format/Polyline.js","#readGeometry"],"updatePoint":{"line":250,"column":52,"index":11342},"line":250,"code":"    it('transforms and returns the expected geometry', function () {\n      const geometry = format.readGeometry(encodedFlatPoints, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(geometry).to.be.an(LineString);\n      expect(geometry.getCoordinates()).to.eql(points3857);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns the expected projection","suites":["ol/format/Polyline.js","#readProjection"],"updatePoint":{"line":259,"column":39,"index":11674},"line":259,"code":"    it('returns the expected projection', function () {\n      const projection = format.readProjection(encodedFlatPoints);\n      expect(projection).to.be(getProjection('EPSG:4326'));\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns the expected text","suites":["ol/format/Polyline.js","#writeFeature"],"updatePoint":{"line":265,"column":33,"index":11907},"line":265,"code":"    it('returns the expected text', function () {\n      const feature = new Feature(new LineString(points));\n      expect(format.writeFeature(feature)).to.be(encodedFlatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"transforms and returns the expected text","suites":["ol/format/Polyline.js","#writeFeature"],"updatePoint":{"line":269,"column":48,"index":12108},"line":269,"code":"    it('transforms and returns the expected text', function () {\n      const feature = new Feature(new LineString(points3857));\n      expect(format.writeFeature(feature, {\n        featureProjection: 'EPSG:3857'\n      })).to.be(encodedFlatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns the expected text","suites":["ol/format/Polyline.js","#writeFeature"],"updatePoint":{"line":277,"column":33,"index":12396},"line":277,"code":"    it('returns the expected text', function () {\n      const features = [new Feature(new LineString(points))];\n      expect(format.writeFeatures(features)).to.be(encodedFlatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"transforms and returns the expected text","suites":["ol/format/Polyline.js","#writeFeature"],"updatePoint":{"line":281,"column":48,"index":12602},"line":281,"code":"    it('transforms and returns the expected text', function () {\n      const features = [new Feature(new LineString(points3857))];\n      expect(format.writeFeatures(features, {\n        featureProjection: 'EPSG:3857'\n      })).to.be(encodedFlatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"returns the expected text","suites":["ol/format/Polyline.js","#writeGeometry"],"updatePoint":{"line":289,"column":33,"index":12896},"line":289,"code":"    it('returns the expected text', function () {\n      const geometry = new LineString(points);\n      expect(format.writeGeometry(geometry)).to.be(encodedFlatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"transforms and returns the expected text","suites":["ol/format/Polyline.js","#writeGeometry"],"updatePoint":{"line":293,"column":48,"index":13087},"line":293,"code":"    it('transforms and returns the expected text', function () {\n      const geometry = new LineString(points3857);\n      expect(format.writeGeometry(geometry, {\n        featureProjection: 'EPSG:3857'\n      })).to.be(encodedFlatPoints);\n    });","file":"node/ol/format/Polyline.test.js","skipped":false,"dir":"test"},{"name":"creates a new format","suites":["ol/format/TopoJSON.js","constructor"],"updatePoint":{"line":55,"column":28,"index":1332},"line":55,"code":"    it('creates a new format', function () {\n      expect(format).to.be.a(FeatureFormat);\n      expect(format).to.be.a(TopoJSON);\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"creates an array of features from a topology","suites":["ol/format/TopoJSON.js","#readFeaturesFromTopology_()"],"updatePoint":{"line":61,"column":52,"index":1557},"line":61,"code":"    it('creates an array of features from a topology', function () {\n      const features = format.readFeaturesFromObject(aruba);\n      expect(features).to.have.length(1);\n      const feature = features[0];\n      expect(feature).to.be.a(Feature);\n      const geometry = feature.getGeometry();\n      expect(geometry).to.be.a(Polygon);\n\n      // Parses identifier\n      expect(feature.getId()).to.be(533);\n      // Parses properties\n      expect(feature.get('prop0')).to.be('value0');\n      expect(geometry.getExtent()).to.eql([-70.08100810081008, 12.417091709170947, -69.9009900990099, 12.608069195591469]);\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a feature with id equal to 0","suites":["ol/format/TopoJSON.js","#readFeaturesFromTopology_()"],"updatePoint":{"line":75,"column":45,"index":2165},"line":75,"code":"    it('can read a feature with id equal to 0', function () {\n      const features = format.readFeaturesFromObject(zeroId);\n      expect(features).to.have.length(1);\n      const feature = features[0];\n      expect(feature).to.be.a(Feature);\n      expect(feature.getId()).to.be(0);\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"can read a feature with null geometry","suites":["ol/format/TopoJSON.js","#readFeaturesFromTopology_()"],"updatePoint":{"line":82,"column":45,"index":2454},"line":82,"code":"    it('can read a feature with null geometry', function () {\n      const features = format.readFeaturesFromObject(nullGeometry);\n      expect(features).to.have.length(1);\n      const feature = features[0];\n      expect(feature).to.be.a(Feature);\n      expect(feature.getGeometry()).to.be(null);\n      expect(feature.getId()).to.be(533);\n      expect(feature.get('prop0')).to.be('value0');\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses simple.json","suites":["ol/format/TopoJSON.js","#readFeatures()"],"updatePoint":{"line":93,"column":26,"index":2883},"line":93,"code":"    it('parses simple.json', async () => {\n      const text = await fse.readFile('test/node/ol/format/TopoJSON/simple.json', {\n        encoding: 'utf8'\n      });\n      const features = format.readFeatures(text);\n      expect(features.length).to.be(3);\n      const point = features[0].getGeometry();\n      expect(point.getType()).to.be('Point');\n      expect(point.getFlatCoordinates()).to.eql([102, 0.5]);\n      const line = features[1].getGeometry();\n      expect(line.getType()).to.be('LineString');\n      expect(line.getFlatCoordinates()).to.eql([102, 0, 103, 1, 104, 0, 105, 1]);\n      const polygon = features[2].getGeometry();\n      expect(polygon.getType()).to.be('Polygon');\n      expect(polygon.getFlatCoordinates()).to.eql([100, 0, 100, 1, 101, 1, 101, 0, 100, 0]);\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses simple.json and transforms","suites":["ol/format/TopoJSON.js","#readFeatures()"],"updatePoint":{"line":109,"column":41,"index":3682},"line":109,"code":"    it('parses simple.json and transforms', async () => {\n      const text = await fse.readFile('test/node/ol/format/TopoJSON/simple.json', {\n        encoding: 'utf8'\n      });\n      const features = format.readFeatures(text, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(features.length).to.be(3);\n      const point = features[0].getGeometry();\n      expect(point.getType()).to.be('Point');\n      expect(features[0].getGeometry().getCoordinates()).to.eql(transform([102.0, 0.5], 'EPSG:4326', 'EPSG:3857'));\n      const line = features[1].getGeometry();\n      expect(line.getType()).to.be('LineString');\n      expect(line.getCoordinates()).to.eql([transform([102.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([103.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([104.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([105.0, 1.0], 'EPSG:4326', 'EPSG:3857')]);\n      const polygon = features[2].getGeometry();\n      expect(polygon.getType()).to.be('Polygon');\n      expect(polygon.getCoordinates()).to.eql([[transform([100.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([100.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([101.0, 1.0], 'EPSG:4326', 'EPSG:3857'), transform([101.0, 0.0], 'EPSG:4326', 'EPSG:3857'), transform([100.0, 0.0], 'EPSG:4326', 'EPSG:3857')]]);\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"parses world-110m.json","suites":["ol/format/TopoJSON.js","#readFeatures()"],"updatePoint":{"line":127,"column":30,"index":4956},"line":127,"code":"    it('parses world-110m.json', async () => {\n      const text = await fse.readFile('test/node/ol/format/TopoJSON/world-110m.json', {\n        encoding: 'utf8'\n      });\n      const features = format.readFeatures(text);\n      expect(features.length).to.be(178);\n      const first = features[0];\n      expect(first).to.be.a(Feature);\n      const firstGeom = first.getGeometry();\n      expect(firstGeom).to.be.a(MultiPolygon);\n      expect(firstGeom.getExtent()).to.eql([-180, -85.60903777459777, 180, 83.64513000000002]);\n      const last = features[177];\n      expect(last).to.be.a(Feature);\n      const lastGeom = last.getGeometry();\n      expect(lastGeom).to.be.a(Polygon);\n      expect(lastGeom.getExtent()).to.eql([25.26325263252633, -22.271802279310577, 32.848528485284874, -15.50833810039586]);\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"sets the topology's child names as feature property","suites":["ol/format/TopoJSON.js","#readFeatures()"],"updatePoint":{"line":144,"column":59,"index":5794},"line":144,"code":"    it(\"sets the topology's child names as feature property\", async () => {\n      const text = await fse.readFile('test/node/ol/format/TopoJSON/world-110m.json', {\n        encoding: 'utf8'\n      });\n      const format = new TopoJSON({\n        layerName: 'layer'\n      });\n      const features = format.readFeatures(text);\n      expect(features[0].get('layer')).to.be('land');\n      expect(features[177].get('layer')).to.be('countries');\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"only parses features from specified topology's children","suites":["ol/format/TopoJSON.js","#readFeatures()"],"updatePoint":{"line":155,"column":63,"index":6243},"line":155,"code":"    it(\"only parses features from specified topology's children\", async () => {\n      const text = await fse.readFile('test/node/ol/format/TopoJSON/world-110m.json', {\n        encoding: 'utf8'\n      });\n      const format = new TopoJSON({\n        layers: ['land']\n      });\n      const features = format.readFeatures(text);\n      expect(features.length).to.be(1);\n    });","file":"node/ol/format/TopoJSON.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection","suites":["ol/format/WKB.js","#readProjection(string)"],"updatePoint":{"line":773,"column":38,"index":49111},"line":773,"code":"    it('returns the default projection', function () {\n      const wkb = '0101000000000000000000F03F0000000000000040'; // POINT(1 2)\n      const projection = format.readProjection(wkb);\n      expect(projection).to.be(undefined);\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"returns an embed projection","suites":["ol/format/WKB.js","#readProjection(string)"],"updatePoint":{"line":778,"column":35,"index":49345},"line":778,"code":"    it('returns an embed projection', function () {\n      const wkb = '0101000020E6100000000000000000F03F0000000000000040'; // SRID=4326;POINT(1 2)\n      const projection = format.readProjection(wkb);\n      expect(projection.getCode()).to.be('EPSG:4326');\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection","suites":["ol/format/WKB.js","#readProjection(Uint8Array)"],"updatePoint":{"line":785,"column":38,"index":49674},"line":785,"code":"    it('returns the default projection', function () {\n      const wkb = new Uint8Array([\n      // POINT(1 2)\n      0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40]);\n      const projection = format.readProjection(wkb);\n      expect(projection).to.be(undefined);\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"returns an embed projection","suites":["ol/format/WKB.js","#readProjection(Uint8Array)"],"updatePoint":{"line":792,"column":35,"index":50019},"line":792,"code":"    it('returns an embed projection', function () {\n      const wkb = new Uint8Array([\n      // SRID=4326;POINT(1 2)\n      0x01, 0x01, 0x00, 0x00, 0x20, 0xe6, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40]);\n      const projection = format.readProjection(wkb);\n      expect(projection.getCode()).to.be('EPSG:4326');\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKB.js","#readGeometry(string)"],"updatePoint":{"line":801,"column":60,"index":50491},"line":801,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const wkb = '0101000000000000000000F03F0000000000000040'; // POINT(1 2)\n      const geom = format.readGeometry(wkb, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      expect(geom.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with auto detection of dataProjection","suites":["ol/format/WKB.js","#readGeometry(string)"],"updatePoint":{"line":809,"column":56,"index":50871},"line":809,"code":"    it('transforms with auto detection of dataProjection', function () {\n      const wkb = '0101000020E6100000000000000000F03F0000000000000040'; // SRID=4326;POINT(1 2)\n      const geom = format.readGeometry(wkb, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(geom.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKB.js","#readGeometry(Uint8Array)"],"updatePoint":{"line":818,"column":60,"index":51296},"line":818,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const wkb = new Uint8Array([\n      // POINT(1 2)\n      0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40]);\n      const geom = format.readGeometry(wkb, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      expect(geom.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with auto detection of dataProjection","suites":["ol/format/WKB.js","#readGeometry(Uint8Array)"],"updatePoint":{"line":828,"column":56,"index":51787},"line":828,"code":"    it('transforms with auto detection of dataProjection', function () {\n      const wkb = new Uint8Array([\n      // SRID=4326;POINT(1 2)\n      0x01, 0x01, 0x00, 0x00, 0x20, 0xe6, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40]);\n      const geom = format.readGeometry(wkb, {\n        featureProjection: 'EPSG:3857'\n      });\n      expect(geom.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKB.js","#writeGeometry()"],"updatePoint":{"line":873,"column":60,"index":53647},"line":873,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const geom = new Point([1, 2]).transform('EPSG:4326', 'EPSG:3857');\n      const wkb = format.writeGeometry(geom, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const got = format.readGeometry(wkb).getCoordinates();\n      expect(got[0]).to.roughlyEqual(1, 1e-6);\n      expect(got[1]).to.roughlyEqual(2, 1e-6);\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"returns proper representation for 3D/4D point","suites":["ol/format/WKB.js","#writeGeometry()"],"updatePoint":{"line":897,"column":53,"index":54615},"line":897,"code":"    it('returns proper representation for 3D/4D point', function () {\n      const testPatterns = [['01e9030000000000000000f87f000000000000f87f000000000000f87f', 'POINT Z EMPTY', {\n        littleEndian: true,\n        ewkb: false,\n        geometryLayout: 'XYZ'\n      }], ['00000003e97ff80000000000007ff80000000000007ff8000000000000', 'POINT Z EMPTY', {\n        littleEndian: false,\n        ewkb: false,\n        geometryLayout: 'XYZ'\n      }], ['0101000080000000000000f87f000000000000f87f000000000000f87f', 'POINT Z EMPTY', {\n        littleEndian: true,\n        ewkb: true,\n        geometryLayout: 'XYZ'\n      }], ['00800000017ff80000000000007ff80000000000007ff8000000000000', 'POINT Z EMPTY', {\n        littleEndian: false,\n        ewkb: true,\n        geometryLayout: 'XYZ'\n      }], ['01d1070000000000000000f87f000000000000f87f000000000000f87f', 'POINT M EMPTY', {\n        littleEndian: true,\n        ewkb: false,\n        geometryLayout: 'XYM'\n      }], ['00000007d17ff80000000000007ff80000000000007ff8000000000000', 'POINT M EMPTY', {\n        littleEndian: false,\n        ewkb: false,\n        geometryLayout: 'XYM'\n      }], ['0101000040000000000000f87f000000000000f87f000000000000f87f', 'POINT M EMPTY', {\n        littleEndian: true,\n        ewkb: true,\n        geometryLayout: 'XYM'\n      }], ['00400000017ff80000000000007ff80000000000007ff8000000000000', 'POINT M EMPTY', {\n        littleEndian: false,\n        ewkb: true,\n        geometryLayout: 'XYM'\n      }], ['01b90b0000000000000000f87f000000000000f87f000000000000f87f000000000000f87f', 'POINT ZM EMPTY', {\n        littleEndian: true,\n        ewkb: false,\n        geometryLayout: 'XYZM'\n      }], ['0000000bb97ff80000000000007ff80000000000007ff80000000000007ff8000000000000', 'POINT ZM EMPTY', {\n        littleEndian: false,\n        ewkb: false,\n        geometryLayout: 'XYZM'\n      }], ['01010000c0000000000000f87f000000000000f87f000000000000f87f000000000000f87f', 'POINT ZM EMPTY', {\n        littleEndian: true,\n        ewkb: true,\n        geometryLayout: 'XYZM'\n      }], ['00c00000017ff80000000000007ff80000000000007ff80000000000007ff8000000000000', 'POINT ZM EMPTY', {\n        littleEndian: false,\n        ewkb: true,\n        geometryLayout: 'XYZM'\n      }]];\n      for (const item of testPatterns) {\n        const wkb = item[0];\n        const opts = item[2];\n        const geom = new Point([], opts.geometryLayout);\n        expect(new WKB(opts).writeGeometry(geom).toLowerCase()).to.eql(wkb);\n      }\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"detects geometry dimension automatically (common case)","suites":["ol/format/WKB.js","#writeGeometry()"],"updatePoint":{"line":954,"column":62,"index":57097},"line":954,"code":"    it('detects geometry dimension automatically (common case)', function () {\n      const geom = new GeometryCollection([new Point([1, 2, 3], 'XYZ'), new Point([1, 2, 4], 'XYZM'), new Point([1, 2, 3, 4], 'XYZM')]);\n      const wkb = new WKB().writeGeometry(geom);\n      const geoms = new WKB().readGeometry(wkb).getGeometries();\n      for (let i = 0; i < geoms.length; i++) {\n        expect(geoms[i].getLayout()).to.eql('XYZ');\n      }\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"detects geometry dimension automatically (incompatible case)","suites":["ol/format/WKB.js","#writeGeometry()"],"updatePoint":{"line":962,"column":68,"index":57548},"line":962,"code":"    it('detects geometry dimension automatically (incompatible case)', function () {\n      const geom = new GeometryCollection([new Point([1, 2, 3], 'XYZ'), new Point([1, 2, 4], 'XYM'), new Point([1, 2, 3, 4], 'XYZM')]);\n      const wkb = new WKB().writeGeometry(geom);\n      const geoms = new WKB().readGeometry(wkb).getGeometries();\n      for (let i = 0; i < geoms.length; i++) {\n        expect(geoms[i].getLayout()).to.eql('XY');\n      }\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"interpolates missing Z value","suites":["ol/format/WKB.js","#writeGeometry()"],"updatePoint":{"line":970,"column":36,"index":57965},"line":970,"code":"    it('interpolates missing Z value', function () {\n      const geom = new GeometryCollection([new Point([1, 2, 3], 'XY'),\n      // 3rd coord is intentional\n      new Point([1, 2, 4], 'XYM'), new Point([1, 2, 3, 4], 'XYZM')]);\n      const wkb = new WKB({\n        nodataZ: 98,\n        geometryLayout: 'XYZ'\n      }).writeGeometry(geom);\n\n      // GEOMETRYCOLLECTION Z (POINT Z (1 2 98),POINT Z (1 2 98),POINT Z (1 2 3))\n      expect(wkb).to.eql('0107000080030000000101000080000000000000F03F000000000000004000000000008058400101000080000000000000F03F000000000000004000000000008058400101000080000000000000F03F00000000000000400000000000000840');\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"interpolates missing M value","suites":["ol/format/WKB.js","#writeGeometry()"],"updatePoint":{"line":982,"column":36,"index":58615},"line":982,"code":"    it('interpolates missing M value', function () {\n      const geom = new GeometryCollection([new Point([1, 2, 3], 'XY'),\n      // 3rd coord is intentional\n      new Point([1, 2, 4], 'XYM'), new Point([1, 2, 3, 4], 'XYZM')]);\n      const wkb = new WKB({\n        nodataM: 99,\n        geometryLayout: 'XYM'\n      }).writeGeometry(geom);\n\n      // GEOMETRYCOLLECTION M (POINT M (1 2 99),POINT M (1 2 4),POINT M (1 2 4))\n      expect(wkb).to.eql('0107000040030000000101000040000000000000F03F00000000000000400000000000C058400101000040000000000000F03F000000000000004000000000000010400101000040000000000000F03F00000000000000400000000000001040');\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"interpolates missing Z and M value","suites":["ol/format/WKB.js","#writeGeometry()"],"updatePoint":{"line":994,"column":42,"index":59270},"line":994,"code":"    it('interpolates missing Z and M value', function () {\n      const geom = new GeometryCollection([new Point([1, 2, 3], 'XY'),\n      // 3rd coord is intentional\n      new Point([1, 2, 4], 'XYM'), new Point([1, 2, 3, 4], 'XYZM')]);\n      const wkb = new WKB({\n        nodataZ: 98,\n        nodataM: 99,\n        geometryLayout: 'XYZM'\n      }).writeGeometry(geom);\n\n      // GEOMETRYCOLLECTION ZM (POINT ZM (1 2 98 99),POINT ZM (1 2 98 4),POINT ZM (1 2 3 4))\n      expect(wkb).to.eql('01070000C00300000001010000C0000000000000F03F000000000000004000000000008058400000000000C0584001010000C0000000000000F03F00000000000000400000000000805840000000000000104001010000C0000000000000F03F000000000000004000000000000008400000000000001040');\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKB.js","#readFeature()"],"updatePoint":{"line":1009,"column":60,"index":60074},"line":1009,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const wkb = '0101000000000000000000F03F0000000000000040'; // POINT(1 2)\n      const feature = format.readFeature(wkb, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const geom = feature.getGeometry();\n      expect(geom.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKB.js","#writeFeature()"],"updatePoint":{"line":1020,"column":60,"index":60552},"line":1020,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const feature = new Feature(new Point([1, 2]).transform('EPSG:4326', 'EPSG:3857'));\n      const wkt = format.writeFeature(feature, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const gotFeature = format.readFeature(wkt);\n      expect(gotFeature).to.be.a(Feature);\n      const got = gotFeature.getGeometry().getCoordinates();\n      expect(got[0]).to.roughlyEqual(1, 1e-6);\n      expect(got[1]).to.roughlyEqual(2, 1e-6);\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKB.js","#readFeatures()"],"updatePoint":{"line":1037,"column":60,"index":61225},"line":1037,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const wkb = '0107000000020000000101000000000000000000F03F0000000000000040010100000000000000000010400000000000001440'; // GEOMETRYCOLLECTION(POINT(1 2),POINT(4 5))\n      const features = format.readFeatures(wkb, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      expect(features.length).to.eql(2);\n      const point1 = features[0].getGeometry();\n      const point2 = features[1].getGeometry();\n      expect(point1.getType()).to.eql('Point');\n      expect(point2.getType()).to.eql('Point');\n      expect(point1.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n      expect(point2.getCoordinates()).to.eql(transform([4, 5], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKB.js","#writeFeatures()"],"updatePoint":{"line":1056,"column":60,"index":62146},"line":1056,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const features = [new Feature(new Point([1, 2]).transform('EPSG:4326', 'EPSG:3857')), new Feature(new Point([4, 5]).transform('EPSG:4326', 'EPSG:3857'))];\n      const wkt = format.writeFeatures(features, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const gotFeatures = format.readFeatures(wkt);\n      expect(gotFeatures).to.have.length(2);\n      expect(gotFeatures[0].getGeometry().getCoordinates()[0]).to.roughlyEqual(1, 1e-6);\n      expect(gotFeatures[0].getGeometry().getCoordinates()[1]).to.roughlyEqual(2, 1e-6);\n      expect(gotFeatures[1].getGeometry().getCoordinates()[0]).to.roughlyEqual(4, 1e-6);\n      expect(gotFeatures[1].getGeometry().getCoordinates()[1]).to.roughlyEqual(5, 1e-6);\n    });","file":"node/ol/format/WKB.test.js","skipped":false,"dir":"test"},{"name":"returns the default projection","suites":["ol/format/WKT.js","#readProjectionFromText"],"updatePoint":{"line":9,"column":38,"index":413},"line":9,"code":"    it('returns the default projection', function () {\n      const projection = format.readProjectionFromText('POINT(1 2)');\n      expect(projection).to.be(undefined);\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKT.js","#readGeometry()"],"updatePoint":{"line":15,"column":60,"index":661},"line":15,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const wkt = 'POINT(1 2)';\n      const geom = format.readGeometry(wkt, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      expect(geom.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKT.js","#writeGeometry()"],"updatePoint":{"line":25,"column":60,"index":1050},"line":25,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const geom = new Point([1, 2]).transform('EPSG:4326', 'EPSG:3857');\n      const wkt = format.writeGeometry(geom, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const got = format.readGeometry(wkt).getCoordinates();\n      expect(got[0]).to.roughlyEqual(1, 1e-6);\n      expect(got[1]).to.roughlyEqual(2, 1e-6);\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKT.js","#readFeature()"],"updatePoint":{"line":37,"column":60,"index":1546},"line":37,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const wkt = 'POINT(1 2)';\n      const feature = format.readFeature(wkt, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const geom = feature.getGeometry();\n      expect(geom.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKT.js","#writeFeature()"],"updatePoint":{"line":48,"column":60,"index":1978},"line":48,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const feature = new Feature(new Point([1, 2]).transform('EPSG:4326', 'EPSG:3857'));\n      const wkt = format.writeFeature(feature, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const gotFeature = format.readFeature(wkt);\n      expect(gotFeature).to.be.a(Feature);\n      const got = gotFeature.getGeometry().getCoordinates();\n      expect(got[0]).to.roughlyEqual(1, 1e-6);\n      expect(got[1]).to.roughlyEqual(2, 1e-6);\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKT.js","#readFeatures()"],"updatePoint":{"line":62,"column":60,"index":2586},"line":62,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const wkt = 'GEOMETRYCOLLECTION(POINT(1 2),POINT(4 5))';\n      const features = format.readFeatures(wkt, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      expect(features.length).to.eql(2);\n      const point1 = features[0].getGeometry();\n      const point2 = features[1].getGeometry();\n      expect(point1.getType()).to.eql('Point');\n      expect(point2.getType()).to.eql('Point');\n      expect(point1.getCoordinates()).to.eql(transform([1, 2], 'EPSG:4326', 'EPSG:3857'));\n      expect(point2.getCoordinates()).to.eql(transform([4, 5], 'EPSG:4326', 'EPSG:3857'));\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"transforms with dataProjection and featureProjection","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":78,"column":60,"index":3336},"line":78,"code":"    it('transforms with dataProjection and featureProjection', function () {\n      const features = [new Feature(new Point([1, 2]).transform('EPSG:4326', 'EPSG:3857')), new Feature(new Point([4, 5]).transform('EPSG:4326', 'EPSG:3857'))];\n      const wkt = format.writeFeatures(features, {\n        dataProjection: 'EPSG:4326',\n        featureProjection: 'EPSG:3857'\n      });\n      const gotFeatures = format.readFeatures(wkt);\n      expect(gotFeatures).to.have.length(2);\n      expect(gotFeatures[0].getGeometry().getCoordinates()[0]).to.roughlyEqual(1, 1e-6);\n      expect(gotFeatures[0].getGeometry().getCoordinates()[1]).to.roughlyEqual(2, 1e-6);\n      expect(gotFeatures[1].getGeometry().getCoordinates()[0]).to.roughlyEqual(4, 1e-6);\n      expect(gotFeatures[1].getGeometry().getCoordinates()[1]).to.roughlyEqual(5, 1e-6);\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Point read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":92,"column":36,"index":4154},"line":92,"code":"  it('Point read / written correctly', function () {\n    let wkt = 'POINT(30 10)';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getCoordinates()).to.eql([30, 10]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'POINT (30 10)';\n    geom = format.readGeometry(wkt);\n    expect(geom.getCoordinates()).to.eql([30, 10]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Point Z read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":102,"column":38,"index":4542},"line":102,"code":"  it('Point Z read / written correctly', function () {\n    let wkt = 'POINT Z(30 10 5)';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getCoordinates()).to.eql([30, 10, 5]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'POINT Z (30 10 5)';\n    geom = format.readGeometry(wkt);\n    expect(geom.getCoordinates()).to.eql([30, 10, 5]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Point M read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":112,"column":38,"index":4944},"line":112,"code":"  it('Point M read / written correctly', function () {\n    let wkt = 'POINT M(30 10 5)';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getCoordinates()).to.eql([30, 10, 5]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'POINT M (30 10 5)';\n    geom = format.readGeometry(wkt);\n    expect(geom.getCoordinates()).to.eql([30, 10, 5]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Point ZM read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":122,"column":39,"index":5347},"line":122,"code":"  it('Point ZM read / written correctly', function () {\n    let wkt = 'POINT ZM(30 10 5 0.1)';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getCoordinates()).to.eql([30, 10, 5, 0.1]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'POINT ZM (30 10 5 0.1)';\n    geom = format.readGeometry(wkt);\n    expect(geom.getCoordinates()).to.eql([30, 10, 5, 0.1]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiPoint read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":132,"column":41,"index":5772},"line":132,"code":"  it('MultiPoint read / written correctly', function () {\n    // there are two forms to test\n    let wkt = 'MULTIPOINT((10 40),(40 30),(20 20),(30 10))';\n    let geom = format.readGeometry(wkt);\n    let points = geom.getPoints();\n    expect(points.length).to.eql(4);\n    expect(points[0].getCoordinates()).to.eql([10, 40]);\n    expect(points[1].getCoordinates()).to.eql([40, 30]);\n    expect(points[2].getCoordinates()).to.eql([20, 20]);\n    expect(points[3].getCoordinates()).to.eql([30, 10]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // this has whitespace\n    wkt = 'MULTIPOINT (10 40, 40 30, 20 20, 30 10)';\n    geom = format.readGeometry(wkt);\n    points = geom.getPoints();\n    expect(points.length).to.eql(4);\n    expect(points[0].getCoordinates()).to.eql([10, 40]);\n    expect(points[1].getCoordinates()).to.eql([40, 30]);\n    expect(points[2].getCoordinates()).to.eql([20, 20]);\n    expect(points[3].getCoordinates()).to.eql([30, 10]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiPoint Z read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":153,"column":43,"index":6740},"line":153,"code":"  it('MultiPoint Z read / written correctly', function () {\n    // there are two forms to test\n    let wkt = 'MULTIPOINT Z((10 40 1),(40 30 2),(20 20 3),(30 10 4))';\n    let geom = format.readGeometry(wkt);\n    let points = geom.getPoints();\n    expect(points.length).to.eql(4);\n    expect(points[0].getCoordinates()).to.eql([10, 40, 1]);\n    expect(points[1].getCoordinates()).to.eql([40, 30, 2]);\n    expect(points[2].getCoordinates()).to.eql([20, 20, 3]);\n    expect(points[3].getCoordinates()).to.eql([30, 10, 4]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // this has whitespace and no standardized parentheses\n    wkt = 'MULTIPOINT Z (10 40 1, 40 30 2, 20 20 3, 30 10 4)';\n    geom = format.readGeometry(wkt);\n    points = geom.getPoints();\n    expect(points.length).to.eql(4);\n    expect(points[0].getCoordinates()).to.eql([10, 40, 1]);\n    expect(points[1].getCoordinates()).to.eql([40, 30, 2]);\n    expect(points[2].getCoordinates()).to.eql([20, 20, 3]);\n    expect(points[3].getCoordinates()).to.eql([30, 10, 4]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiPoint M read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":174,"column":43,"index":7784},"line":174,"code":"  it('MultiPoint M read / written correctly', function () {\n    // there are two forms to test\n    let wkt = 'MULTIPOINT M((10 40 1),(40 30 2),(20 20 3),(30 10 4))';\n    let geom = format.readGeometry(wkt);\n    let points = geom.getPoints();\n    expect(points.length).to.eql(4);\n    expect(points[0].getCoordinates()).to.eql([10, 40, 1]);\n    expect(points[1].getCoordinates()).to.eql([40, 30, 2]);\n    expect(points[2].getCoordinates()).to.eql([20, 20, 3]);\n    expect(points[3].getCoordinates()).to.eql([30, 10, 4]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // this has whitespace and no standardized parentheses\n    wkt = 'MULTIPOINT M (10 40 1, 40 30 2, 20 20 3, 30 10 4)';\n    geom = format.readGeometry(wkt);\n    points = geom.getPoints();\n    expect(points.length).to.eql(4);\n    expect(points[0].getCoordinates()).to.eql([10, 40, 1]);\n    expect(points[1].getCoordinates()).to.eql([40, 30, 2]);\n    expect(points[2].getCoordinates()).to.eql([20, 20, 3]);\n    expect(points[3].getCoordinates()).to.eql([30, 10, 4]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiPoint ZM read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":195,"column":44,"index":8829},"line":195,"code":"  it('MultiPoint ZM read / written correctly', function () {\n    // there are two forms to test\n    let wkt = 'MULTIPOINT ZM((10 40 1 0.1),(40 30 2 0.1),(20 20 3 0.1),(30 10 4 0.1))';\n    let geom = format.readGeometry(wkt);\n    let points = geom.getPoints();\n    expect(points.length).to.eql(4);\n    expect(points[0].getCoordinates()).to.eql([10, 40, 1, 0.1]);\n    expect(points[1].getCoordinates()).to.eql([40, 30, 2, 0.1]);\n    expect(points[2].getCoordinates()).to.eql([20, 20, 3, 0.1]);\n    expect(points[3].getCoordinates()).to.eql([30, 10, 4, 0.1]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // this has whitespace and no standardized parentheses\n    wkt = 'MULTIPOINT ZM (10 40 1 0.1,40 30 2 0.1,20 20 3 0.1,30 10 4 0.1)';\n    geom = format.readGeometry(wkt);\n    points = geom.getPoints();\n    expect(points.length).to.eql(4);\n    expect(points[0].getCoordinates()).to.eql([10, 40, 1, 0.1]);\n    expect(points[1].getCoordinates()).to.eql([40, 30, 2, 0.1]);\n    expect(points[2].getCoordinates()).to.eql([20, 20, 3, 0.1]);\n    expect(points[3].getCoordinates()).to.eql([30, 10, 4, 0.1]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"LineString read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":216,"column":41,"index":9942},"line":216,"code":"  it('LineString read / written correctly', function () {\n    let wkt = 'LINESTRING(30 10,10 30,40 40)';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('LineString');\n    expect(geom.getCoordinates()).to.eql([[30, 10], [10, 30], [40, 40]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'LINESTRING (30 10, 10 30, 40 40)';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('LineString');\n    expect(geom.getCoordinates()).to.eql([[30, 10], [10, 30], [40, 40]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"LineString Z read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":228,"column":43,"index":10513},"line":228,"code":"  it('LineString Z read / written correctly', function () {\n    let wkt = 'LINESTRING Z(30 10 1,10 30 2,40 40 3)';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('LineString');\n    expect(geom.getCoordinates()).to.eql([[30, 10, 1], [10, 30, 2], [40, 40, 3]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'LINESTRING Z (30 10 1, 10 30 2, 40 40 3)';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('LineString');\n    expect(geom.getCoordinates()).to.eql([[30, 10, 1], [10, 30, 2], [40, 40, 3]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"LineString M read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":240,"column":43,"index":11118},"line":240,"code":"  it('LineString M read / written correctly', function () {\n    let wkt = 'LINESTRING M(30 10 1,10 30 2,40 40 3)';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('LineString');\n    expect(geom.getCoordinates()).to.eql([[30, 10, 1], [10, 30, 2], [40, 40, 3]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'LINESTRING M (30 10 1, 10 30 2, 40 40 3)';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('LineString');\n    expect(geom.getCoordinates()).to.eql([[30, 10, 1], [10, 30, 2], [40, 40, 3]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"LineString ZM read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":252,"column":44,"index":11724},"line":252,"code":"  it('LineString ZM read / written correctly', function () {\n    let wkt = 'LINESTRING ZM(30 10 1 0.1,10 30 2 0.1,40 40 3 0.1)';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('LineString');\n    expect(geom.getCoordinates()).to.eql([[30, 10, 1, 0.1], [10, 30, 2, 0.1], [40, 40, 3, 0.1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'LINESTRING ZM (30 10 1 0.1, 10 30 2 0.1, 40 40 3 0.1)';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('LineString');\n    expect(geom.getCoordinates()).to.eql([[30, 10, 1, 0.1], [10, 30, 2, 0.1], [40, 40, 3, 0.1]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiLineString read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":264,"column":46,"index":12388},"line":264,"code":"  it('MultiLineString read / written correctly', function () {\n    let wkt = 'MULTILINESTRING((10 10,20 20,10 40),' + '(40 40,30 30,40 20,30 10))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiLineString');\n    let linestrings = geom.getLineStrings();\n    expect(linestrings.length).to.eql(2);\n    expect(linestrings[0].getType()).to.eql('LineString');\n    expect(linestrings[0].getCoordinates()).to.eql([[10, 10], [20, 20], [10, 40]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'MULTILINESTRING ( (10 10, 20 20, 10 40), ' + '(40 40, 30 30, 40 20, 30 10) )';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiLineString');\n    linestrings = geom.getLineStrings();\n    expect(linestrings.length).to.eql(2);\n    expect(linestrings[0].getType()).to.eql('LineString');\n    expect(linestrings[0].getCoordinates()).to.eql([[10, 10], [20, 20], [10, 40]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiLineString Z read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":282,"column":48,"index":13364},"line":282,"code":"  it('MultiLineString Z read / written correctly', function () {\n    let wkt = 'MULTILINESTRING Z((10 10 1,20 20 2,10 40 3),' + '(40 40 1,30 30 2,40 20 3,30 10 4))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiLineString');\n    let linestrings = geom.getLineStrings();\n    expect(linestrings.length).to.eql(2);\n    expect(linestrings[0].getType()).to.eql('LineString');\n    expect(linestrings[0].getCoordinates()).to.eql([[10, 10, 1], [20, 20, 2], [10, 40, 3]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'MULTILINESTRING Z ( (10 10 1, 20 20 2, 10 40 3), ' + '(40 40 1, 30 30 2, 40 20 3, 30 10 4) )';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiLineString');\n    linestrings = geom.getLineStrings();\n    expect(linestrings.length).to.eql(2);\n    expect(linestrings[0].getType()).to.eql('LineString');\n    expect(linestrings[0].getCoordinates()).to.eql([[10, 10, 1], [20, 20, 2], [10, 40, 3]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiLineString M read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":300,"column":48,"index":14390},"line":300,"code":"  it('MultiLineString M read / written correctly', function () {\n    let wkt = 'MULTILINESTRING M((10 10 1,20 20 2,10 40 3),' + '(40 40 1,30 30 2,40 20 3,30 10 4))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiLineString');\n    let linestrings = geom.getLineStrings();\n    expect(linestrings.length).to.eql(2);\n    expect(linestrings[0].getType()).to.eql('LineString');\n    expect(linestrings[0].getCoordinates()).to.eql([[10, 10, 1], [20, 20, 2], [10, 40, 3]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'MULTILINESTRING M ( (10 10 1, 20 20 2, 10 40 3), ' + '(40 40 1, 30 30 2, 40 20 3, 30 10 4) )';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiLineString');\n    linestrings = geom.getLineStrings();\n    expect(linestrings.length).to.eql(2);\n    expect(linestrings[0].getType()).to.eql('LineString');\n    expect(linestrings[0].getCoordinates()).to.eql([[10, 10, 1], [20, 20, 2], [10, 40, 3]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiLineString ZM read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":318,"column":49,"index":15417},"line":318,"code":"  it('MultiLineString ZM read / written correctly', function () {\n    let wkt = 'MULTILINESTRING ZM((10 10 1 0.1,20 20 2 0.1,10 40 3 0.1),' + '(40 40 1 0.1,30 30 2 0.1,40 20 3 0.1,30 10 4 0.1))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiLineString');\n    let linestrings = geom.getLineStrings();\n    expect(linestrings.length).to.eql(2);\n    expect(linestrings[0].getType()).to.eql('LineString');\n    expect(linestrings[0].getCoordinates()).to.eql([[10, 10, 1, 0.1], [20, 20, 2, 0.1], [10, 40, 3, 0.1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'MULTILINESTRING ZM ( (10 10 1 0.1, 20 20 2 0.1, 10 40 3 0.1), ' + '(40 40 1 0.1, 30 30 2 0.1, 40 20 3 0.1, 30 10 4 0.1) )';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiLineString');\n    linestrings = geom.getLineStrings();\n    expect(linestrings.length).to.eql(2);\n    expect(linestrings[0].getType()).to.eql('LineString');\n    expect(linestrings[0].getCoordinates()).to.eql([[10, 10, 1, 0.1], [20, 20, 2, 0.1], [10, 40, 3, 0.1]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Polygon read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":336,"column":38,"index":16521},"line":336,"code":"  it('Polygon read / written correctly', function () {\n    let wkt = 'POLYGON((30 10,10 20,20 40,40 40,30 10))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    let rings = geom.getLinearRings();\n    expect(rings.length).to.eql(1);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[30, 10], [10, 20], [20, 40], [40, 40], [30, 10]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // note that WKT doesn't care about winding order, we do\n    wkt = 'POLYGON((35 10,10 20,15 40,45 45,35 10),(20 30,30 20,35 35,20 30))';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    rings = geom.getLinearRings();\n    expect(rings.length).to.eql(2);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[1].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[35, 10], [10, 20], [15, 40], [45, 45], [35, 10]]);\n    expect(rings[1].getCoordinates()).to.eql([[20, 30], [30, 20], [35, 35], [20, 30]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // test whitespace when reading\n    wkt = 'POLYGON ( (30 10, 10 20, 20 40, 40 40, 30 10) )';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    rings = geom.getLinearRings();\n    expect(rings.length).to.eql(1);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[30, 10], [10, 20], [20, 40], [40, 40], [30, 10]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Polygon Z read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":367,"column":40,"index":18050},"line":367,"code":"  it('Polygon Z read / written correctly', function () {\n    let wkt = 'POLYGON Z((30 10 1,10 20 2,20 40 3,40 40 4,30 10 1))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    let rings = geom.getLinearRings();\n    expect(rings.length).to.eql(1);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[30, 10, 1], [10, 20, 2], [20, 40, 3], [40, 40, 4], [30, 10, 1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // note that WKT doesn't care about winding order, we do\n    wkt = 'POLYGON Z((35 10 1,10 20 2,15 40 3,45 45 4,35 10 1),(20 30 1,30 20 2,35 35 3,20 30 1))';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    rings = geom.getLinearRings();\n    expect(rings.length).to.eql(2);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[1].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[35, 10, 1], [10, 20, 2], [15, 40, 3], [45, 45, 4], [35, 10, 1]]);\n    expect(rings[1].getCoordinates()).to.eql([[20, 30, 1], [30, 20, 2], [35, 35, 3], [20, 30, 1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // test whitespace when reading\n    wkt = 'POLYGON  Z ( (30 10 1, 10 20 2, 20 40 3, 40 40 4, 30 10 1) )';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    rings = geom.getLinearRings();\n    expect(rings.length).to.eql(1);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[30, 10, 1], [10, 20, 2], [20, 40, 3], [40, 40, 4], [30, 10, 1]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Polygon M read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":398,"column":40,"index":19681},"line":398,"code":"  it('Polygon M read / written correctly', function () {\n    let wkt = 'POLYGON M((30 10 1,10 20 2,20 40 3,40 40 4,30 10 1))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    let rings = geom.getLinearRings();\n    expect(rings.length).to.eql(1);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[30, 10, 1], [10, 20, 2], [20, 40, 3], [40, 40, 4], [30, 10, 1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // note that WKT doesn't care about winding order, we do\n    wkt = 'POLYGON M((35 10 1,10 20 2,15 40 3,45 45 4,35 10 1),(20 30 1,30 20 2,35 35 3,20 30 1))';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    rings = geom.getLinearRings();\n    expect(rings.length).to.eql(2);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[1].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[35, 10, 1], [10, 20, 2], [15, 40, 3], [45, 45, 4], [35, 10, 1]]);\n    expect(rings[1].getCoordinates()).to.eql([[20, 30, 1], [30, 20, 2], [35, 35, 3], [20, 30, 1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // test whitespace when reading\n    wkt = 'POLYGON  M ( (30 10 1, 10 20 2, 20 40 3, 40 40 4, 30 10 1) )';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    rings = geom.getLinearRings();\n    expect(rings.length).to.eql(1);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[30, 10, 1], [10, 20, 2], [20, 40, 3], [40, 40, 4], [30, 10, 1]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Polygon ZM read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":429,"column":41,"index":21313},"line":429,"code":"  it('Polygon ZM read / written correctly', function () {\n    let wkt = 'POLYGON ZM((30 10 1 0.1,10 20 2 0.1,20 40 3 0.1,40 40 4 0.1,30 10 1 0.1))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    let rings = geom.getLinearRings();\n    expect(rings.length).to.eql(1);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[30, 10, 1, 0.1], [10, 20, 2, 0.1], [20, 40, 3, 0.1], [40, 40, 4, 0.1], [30, 10, 1, 0.1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // note that WKT doesn't care about winding order, we do\n    wkt = 'POLYGON ZM((35 10 1 0.1,10 20 2 0.1,15 40 3 0.1,45 45 4 0.1,35 10 1 0.1),(20 30 1 0.1,30 20 2 0.1,35 35 3 0.1,20 30 1 0.1))';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    rings = geom.getLinearRings();\n    expect(rings.length).to.eql(2);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[1].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[35, 10, 1, 0.1], [10, 20, 2, 0.1], [15, 40, 3, 0.1], [45, 45, 4, 0.1], [35, 10, 1, 0.1]]);\n    expect(rings[1].getCoordinates()).to.eql([[20, 30, 1, 0.1], [30, 20, 2, 0.1], [35, 35, 3, 0.1], [20, 30, 1, 0.1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // test whitespace when reading\n    wkt = 'POLYGON  ZM ( (30 10 1 0.1, 10 20 2 0.1, 20 40 3 0.1, 40 40 4 0.1, 30 10 1 0.1) )';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('Polygon');\n    rings = geom.getLinearRings();\n    expect(rings.length).to.eql(1);\n    expect(rings[0].getType()).to.eql('LinearRing');\n    expect(rings[0].getCoordinates()).to.eql([[30, 10, 1, 0.1], [10, 20, 2, 0.1], [20, 40, 3, 0.1], [40, 40, 4, 0.1], [30, 10, 1, 0.1]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiPolygon read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":460,"column":43,"index":23121},"line":460,"code":"  it('MultiPolygon read / written correctly', function () {\n    // note that WKT doesn't care about winding order, we do\n    let wkt = 'MULTIPOLYGON(((40 40,45 30,20 45,40 40)),' + '((20 35,45 20,30 5,10 10,10 30,20 35),(30 20,20 25,20 15,30 20)))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiPolygon');\n    let polygons = geom.getPolygons();\n    expect(polygons.length).to.eql(2);\n    expect(polygons[0].getType()).to.eql('Polygon');\n    expect(polygons[1].getType()).to.eql('Polygon');\n    expect(polygons[0].getLinearRings().length).to.eql(1);\n    expect(polygons[1].getLinearRings().length).to.eql(2);\n    expect(polygons[0].getLinearRings()[0].getCoordinates()).to.eql([[40, 40], [45, 30], [20, 45], [40, 40]]);\n    expect(polygons[1].getLinearRings()[0].getCoordinates()).to.eql([[20, 35], [45, 20], [30, 5], [10, 10], [10, 30], [20, 35]]);\n    expect(polygons[1].getLinearRings()[1].getCoordinates()).to.eql([[30, 20], [20, 25], [20, 15], [30, 20]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // test whitespace when reading\n    wkt = 'MULTIPOLYGON( ( ( 40 40,45 30, 20 45 ,40 40 )) ,' + '( (20 35, 45 20,30 5,10 10,10 30,20 35), ' + '( 30 20,  20 25,20 15  ,30 20 ) ))';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiPolygon');\n    polygons = geom.getPolygons();\n    expect(polygons.length).to.eql(2);\n    expect(polygons[0].getType()).to.eql('Polygon');\n    expect(polygons[1].getType()).to.eql('Polygon');\n    expect(polygons[0].getLinearRings().length).to.eql(1);\n    expect(polygons[1].getLinearRings().length).to.eql(2);\n    expect(polygons[0].getLinearRings()[0].getCoordinates()).to.eql([[40, 40], [45, 30], [20, 45], [40, 40]]);\n    expect(polygons[1].getLinearRings()[0].getCoordinates()).to.eql([[20, 35], [45, 20], [30, 5], [10, 10], [10, 30], [20, 35]]);\n    expect(polygons[1].getLinearRings()[1].getCoordinates()).to.eql([[30, 20], [20, 25], [20, 15], [30, 20]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiPolygon Z read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":490,"column":45,"index":25099},"line":490,"code":"  it('MultiPolygon Z read / written correctly', function () {\n    // note that WKT doesn't care about winding order, we do\n    let wkt = 'MULTIPOLYGON Z(((40 40 1,45 30 2,20 45 3,40 40 1)),' + '((20 35 1,45 20 2,30 5 3,10 10 4,10 30 5,20 35 1),(30 20 1,20 25 2,20 15 3,30 20 1)))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiPolygon');\n    let polygons = geom.getPolygons();\n    expect(polygons.length).to.eql(2);\n    expect(polygons[0].getType()).to.eql('Polygon');\n    expect(polygons[1].getType()).to.eql('Polygon');\n    expect(polygons[0].getLinearRings().length).to.eql(1);\n    expect(polygons[1].getLinearRings().length).to.eql(2);\n    expect(polygons[0].getLinearRings()[0].getCoordinates()).to.eql([[40, 40, 1], [45, 30, 2], [20, 45, 3], [40, 40, 1]]);\n    expect(polygons[1].getLinearRings()[0].getCoordinates()).to.eql([[20, 35, 1], [45, 20, 2], [30, 5, 3], [10, 10, 4], [10, 30, 5], [20, 35, 1]]);\n    expect(polygons[1].getLinearRings()[1].getCoordinates()).to.eql([[30, 20, 1], [20, 25, 2], [20, 15, 3], [30, 20, 1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // test whitespace when reading\n    wkt = 'MULTIPOLYGON Z ( ( ( 40 40 1,45 30 2, 20 45 3 ,40 40 1 )) ,' + '( (20 35 1, 45 20 2,30 5 3,10 10 4,10 30 5,20 35 1), ' + '( 30 20 1,  20 25 2,20 15 3  ,30 20 1 ) ))';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiPolygon');\n    polygons = geom.getPolygons();\n    expect(polygons.length).to.eql(2);\n    expect(polygons[0].getType()).to.eql('Polygon');\n    expect(polygons[1].getType()).to.eql('Polygon');\n    expect(polygons[0].getLinearRings().length).to.eql(1);\n    expect(polygons[1].getLinearRings().length).to.eql(2);\n    expect(polygons[0].getLinearRings()[0].getCoordinates()).to.eql([[40, 40, 1], [45, 30, 2], [20, 45, 3], [40, 40, 1]]);\n    expect(polygons[1].getLinearRings()[0].getCoordinates()).to.eql([[20, 35, 1], [45, 20, 2], [30, 5, 3], [10, 10, 4], [10, 30, 5], [20, 35, 1]]);\n    expect(polygons[1].getLinearRings()[1].getCoordinates()).to.eql([[30, 20, 1], [20, 25, 2], [20, 15, 3], [30, 20, 1]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiPolygon M read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":520,"column":45,"index":27222},"line":520,"code":"  it('MultiPolygon M read / written correctly', function () {\n    // note that WKT doesn't care about winding order, we do\n    let wkt = 'MULTIPOLYGON M(((40 40 1,45 30 2,20 45 3,40 40 1)),' + '((20 35 1,45 20 2,30 5 3,10 10 4,10 30 5,20 35 1),(30 20 1,20 25 2,20 15 3,30 20 1)))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiPolygon');\n    let polygons = geom.getPolygons();\n    expect(polygons.length).to.eql(2);\n    expect(polygons[0].getType()).to.eql('Polygon');\n    expect(polygons[1].getType()).to.eql('Polygon');\n    expect(polygons[0].getLinearRings().length).to.eql(1);\n    expect(polygons[1].getLinearRings().length).to.eql(2);\n    expect(polygons[0].getLinearRings()[0].getCoordinates()).to.eql([[40, 40, 1], [45, 30, 2], [20, 45, 3], [40, 40, 1]]);\n    expect(polygons[1].getLinearRings()[0].getCoordinates()).to.eql([[20, 35, 1], [45, 20, 2], [30, 5, 3], [10, 10, 4], [10, 30, 5], [20, 35, 1]]);\n    expect(polygons[1].getLinearRings()[1].getCoordinates()).to.eql([[30, 20, 1], [20, 25, 2], [20, 15, 3], [30, 20, 1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // test whitespace when reading\n    wkt = 'MULTIPOLYGON M ( ( ( 40 40 1,45 30 2, 20 45 3 ,40 40 1 )) ,' + '( (20 35 1, 45 20 2,30 5 3,10 10 4,10 30 5,20 35 1), ' + '( 30 20 1,  20 25 2,20 15 3  ,30 20 1 ) ))';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiPolygon');\n    polygons = geom.getPolygons();\n    expect(polygons.length).to.eql(2);\n    expect(polygons[0].getType()).to.eql('Polygon');\n    expect(polygons[1].getType()).to.eql('Polygon');\n    expect(polygons[0].getLinearRings().length).to.eql(1);\n    expect(polygons[1].getLinearRings().length).to.eql(2);\n    expect(polygons[0].getLinearRings()[0].getCoordinates()).to.eql([[40, 40, 1], [45, 30, 2], [20, 45, 3], [40, 40, 1]]);\n    expect(polygons[1].getLinearRings()[0].getCoordinates()).to.eql([[20, 35, 1], [45, 20, 2], [30, 5, 3], [10, 10, 4], [10, 30, 5], [20, 35, 1]]);\n    expect(polygons[1].getLinearRings()[1].getCoordinates()).to.eql([[30, 20, 1], [20, 25, 2], [20, 15, 3], [30, 20, 1]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"MultiPolygon ZM read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":550,"column":46,"index":29346},"line":550,"code":"  it('MultiPolygon ZM read / written correctly', function () {\n    // note that WKT doesn't care about winding order, we do\n    let wkt = 'MULTIPOLYGON ZM(((40 40 1 0.1,45 30 2 0.1,20 45 3 0.1,40 40 1 0.1)),' + '((20 35 1 0.1,45 20 2 0.1,30 5 3 0.1,10 10 4 0.1,10 30 5 0.1,20 35 1 0.1),(30 20 1 0.1,20 25 2 0.1,20 15 3 0.1,30 20 1 0.1)))';\n    let geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiPolygon');\n    let polygons = geom.getPolygons();\n    expect(polygons.length).to.eql(2);\n    expect(polygons[0].getType()).to.eql('Polygon');\n    expect(polygons[1].getType()).to.eql('Polygon');\n    expect(polygons[0].getLinearRings().length).to.eql(1);\n    expect(polygons[1].getLinearRings().length).to.eql(2);\n    expect(polygons[0].getLinearRings()[0].getCoordinates()).to.eql([[40, 40, 1, 0.1], [45, 30, 2, 0.1], [20, 45, 3, 0.1], [40, 40, 1, 0.1]]);\n    expect(polygons[1].getLinearRings()[0].getCoordinates()).to.eql([[20, 35, 1, 0.1], [45, 20, 2, 0.1], [30, 5, 3, 0.1], [10, 10, 4, 0.1], [10, 30, 5, 0.1], [20, 35, 1, 0.1]]);\n    expect(polygons[1].getLinearRings()[1].getCoordinates()).to.eql([[30, 20, 1, 0.1], [20, 25, 2, 0.1], [20, 15, 3, 0.1], [30, 20, 1, 0.1]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n\n    // test whitespace when reading\n    wkt = 'MULTIPOLYGON ZM ( ( ( 40 40 1 0.1,45 30 2 0.1, 20 45 3 0.1 ,40 40 1  0.1 )) ,' + '( (20 35 1 0.1, 45 20 2 0.1,30 5 3 0.1,10 10 4 0.1,10 30 5 0.1,20 35 1 0.1), ' + '( 30 20 1 0.1,  20 25 2 0.1,20 15 3 0.1  ,30 20 1 0.1 ) ))';\n    geom = format.readGeometry(wkt);\n    expect(geom.getType()).to.eql('MultiPolygon');\n    polygons = geom.getPolygons();\n    expect(polygons.length).to.eql(2);\n    expect(polygons[0].getType()).to.eql('Polygon');\n    expect(polygons[1].getType()).to.eql('Polygon');\n    expect(polygons[0].getLinearRings().length).to.eql(1);\n    expect(polygons[1].getLinearRings().length).to.eql(2);\n    expect(polygons[0].getLinearRings()[0].getCoordinates()).to.eql([[40, 40, 1, 0.1], [45, 30, 2, 0.1], [20, 45, 3, 0.1], [40, 40, 1, 0.1]]);\n    expect(polygons[1].getLinearRings()[0].getCoordinates()).to.eql([[20, 35, 1, 0.1], [45, 20, 2, 0.1], [30, 5, 3, 0.1], [10, 10, 4, 0.1], [10, 30, 5, 0.1], [20, 35, 1, 0.1]]);\n    expect(polygons[1].getLinearRings()[1].getCoordinates()).to.eql([[30, 20, 1, 0.1], [20, 25, 2, 0.1], [20, 15, 3, 0.1], [30, 20, 1, 0.1]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Empty geometries read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":580,"column":47,"index":31726},"line":580,"code":"  it('Empty geometries read / written correctly', function () {\n    const wkt = 'POINT EMPTY';\n    const geom = format.readGeometry(wkt);\n    const coordinates = geom.getCoordinates();\n    expect(coordinates.length).to.be(2);\n    expect(isNaN(coordinates[0])).to.be(true);\n    expect(isNaN(coordinates[1])).to.be(true);\n    const wkts = ['LINESTRING', 'POLYGON', 'MULTIPOINT', 'MULTILINESTRING', 'MULTIPOLYGON'];\n    for (let i = 0, ii = wkts.length; i < ii; ++i) {\n      const wkt = wkts[i] + ' EMPTY';\n      const geom = format.readGeometry(wkt);\n      expect(geom.getCoordinates()).to.eql([]);\n      expect(format.writeGeometry(geom)).to.eql(wkt);\n    }\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Invalid geometries detected correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":595,"column":43,"index":32385},"line":595,"code":"  it('Invalid geometries detected correctly', function () {\n    expect(function () {\n      format.readGeometry('POINT(1,2)');\n    }).to.throwException();\n    expect(function () {\n      format.readGeometry('LINESTRING(1 2,3 4');\n    }).to.throwException();\n    expect(function () {\n      format.readGeometry('POLYGON(1 2,3 4))');\n    }).to.throwException();\n    expect(function () {\n      format.readGeometry('POLGON((1 2,3 4))');\n    }).to.throwException();\n    expect(function () {\n      format.readGeometry('LINESTRING(1.2,3 4');\n    }).to.throwException();\n    expect(function () {\n      format.readGeometry('MULTIPOINT((1 2),3 4))');\n    }).to.throwException();\n    expect(function () {\n      format.readGeometry('MULTIPOLYGON((1 2,3 4))');\n    }).to.throwException();\n    expect(function () {\n      format.readGeometry('GEOMETRYCOLLECTION(1 2,3 4)');\n    }).to.throwException();\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"GeometryCollection read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":621,"column":49,"index":33281},"line":621,"code":"  it('GeometryCollection read / written correctly', function () {\n    let wkt = 'GEOMETRYCOLLECTION(POINT(4 6),LINESTRING(4 6,7 10))';\n    let geom = format.readGeometry(wkt);\n    let geoms = geom.getGeometries();\n    expect(geoms.length).to.eql(2);\n    expect(geom.getType()).to.eql('GeometryCollection');\n    expect(geoms[0].getType()).to.eql('Point');\n    expect(geoms[1].getType()).to.eql('LineString');\n    expect(geoms[0].getCoordinates()).to.eql([4, 6]);\n    expect(geoms[1].getCoordinates()).to.eql([[4, 6], [7, 10]]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n    // test whitespace when reading\n    wkt = 'GEOMETRYCOLLECTION ( POINT (4 6), LINESTRING (4 6, 7 10) )';\n    geom = format.readGeometry(wkt);\n    geoms = geom.getGeometries();\n    expect(geoms.length).to.eql(2);\n    expect(geom.getType()).to.eql('GeometryCollection');\n    expect(geoms[0].getType()).to.eql('Point');\n    expect(geoms[1].getType()).to.eql('LineString');\n    expect(geoms[0].getCoordinates()).to.eql([4, 6]);\n    expect(geoms[1].getCoordinates()).to.eql([[4, 6], [7, 10]]);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Empty GeometryCollection read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":643,"column":55,"index":34364},"line":643,"code":"  it('Empty GeometryCollection read / written correctly', function () {\n    const wkt = 'GEOMETRYCOLLECTION EMPTY';\n    const geom = format.readGeometry(wkt);\n    expect(geom.getGeometries()).to.eql([]);\n    expect(format.writeGeometry(geom)).to.eql(wkt);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"GeometryCollection split / merged correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":649,"column":49,"index":34620},"line":649,"code":"  it('GeometryCollection split / merged correctly', function () {\n    format = new WKT({\n      splitCollection: true\n    });\n    const wkt = 'GEOMETRYCOLLECTION(POINT(4 6),LINESTRING(4 6,7 10))';\n    const features = format.readFeatures(wkt);\n    expect(features.length).to.eql(2);\n    const geoms = [features[0].getGeometry(), features[1].getGeometry()];\n    expect(geoms[0].getType()).to.eql('Point');\n    expect(geoms[1].getType()).to.eql('LineString');\n    expect(geoms[0].getCoordinates()).to.eql([4, 6]);\n    expect(geoms[1].getCoordinates()).to.eql([[4, 6], [7, 10]]);\n    expect(format.writeFeatures(features)).to.eql(wkt);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Point feature read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":663,"column":44,"index":35253},"line":663,"code":"  it('Point feature read / written correctly', function () {\n    const wkt = 'POINT(30 10)';\n    const feature = format.readFeature(wkt);\n    const geom = feature.getGeometry();\n    expect(geom.getCoordinates()).to.eql([30, 10]);\n    expect(format.writeFeature(feature)).to.eql(wkt);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"Features read / written correctly","suites":["ol/format/WKT.js","#writeFeatures()"],"updatePoint":{"line":670,"column":39,"index":35538},"line":670,"code":"  it('Features read / written correctly', function () {\n    const wkt = 'GEOMETRYCOLLECTION(POINT(1 2),POINT(3 4))';\n    const features = format.readFeatures(wkt);\n    expect(features.length).to.eql(2);\n    const point1 = features[0].getGeometry();\n    const point2 = features[1].getGeometry();\n    expect(point1.getType()).to.eql('Point');\n    expect(point2.getType()).to.eql('Point');\n    expect(point1.getCoordinates()).to.eql([1, 2]);\n    expect(point2.getCoordinates()).to.eql([3, 4]);\n    expect(format.writeFeatures(features)).to.eql(wkt);\n  });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"handles scientific notation correctly","suites":["ol/format/WKT.js","scientific notation supported"],"updatePoint":{"line":683,"column":45,"index":36155},"line":683,"code":"    it('handles scientific notation correctly', function () {\n      const wkt = 'POINT(3e1 1e1)';\n      const geom = format.readGeometry(wkt);\n      expect(geom.getCoordinates()).to.eql([30, 10]);\n      expect(format.writeGeometry(geom)).to.eql('POINT(30 10)');\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"works with with negative exponent","suites":["ol/format/WKT.js","scientific notation supported"],"updatePoint":{"line":689,"column":41,"index":36421},"line":689,"code":"    it('works with with negative exponent', function () {\n      const wkt = 'POINT(3e-1 1e-1)';\n      const geom = format.readGeometry(wkt);\n      expect(geom.getCoordinates()).to.eql([0.3, 0.1]);\n      expect(format.writeGeometry(geom)).to.eql('POINT(0.3 0.1)');\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"works with with explicitly positive exponent","suites":["ol/format/WKT.js","scientific notation supported"],"updatePoint":{"line":695,"column":52,"index":36704},"line":695,"code":"    it('works with with explicitly positive exponent', function () {\n      const wkt = 'POINT(3e+1 1e+1)';\n      const geom = format.readGeometry(wkt);\n      expect(geom.getCoordinates()).to.eql([30, 10]);\n      expect(format.writeGeometry(geom)).to.eql('POINT(30 10)');\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"handles very small numbers in scientific notation","suites":["ol/format/WKT.js","scientific notation supported"],"updatePoint":{"line":701,"column":57,"index":36988},"line":701,"code":"    it('handles very small numbers in scientific notation', function () {\n      // very small numbers keep the scientific notation, both when reading and\n      // writing\n      const wkt = 'POINT(3e-9 1e-9)';\n      const geom = format.readGeometry(wkt);\n      expect(geom.getCoordinates()).to.eql([3e-9, 1e-9]);\n      expect(format.writeGeometry(geom)).to.eql('POINT(3e-9 1e-9)');\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"handles very big numbers in scientific notation","suites":["ol/format/WKT.js","scientific notation supported"],"updatePoint":{"line":709,"column":55,"index":37375},"line":709,"code":"    it('handles very big numbers in scientific notation', function () {\n      // very big numbers keep the scientific notation, both when reading and\n      // writing\n      const wkt = 'POINT(3e25 1e25)';\n      const geom = format.readGeometry(wkt);\n      expect(geom.getCoordinates()).to.eql([3e25, 1e25]);\n      expect(format.writeGeometry(geom)).to.eql('POINT(3e+25 1e+25)');\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"works case insensitively (e / E)","suites":["ol/format/WKT.js","scientific notation supported"],"updatePoint":{"line":717,"column":40,"index":37747},"line":717,"code":"    it('works case insensitively (e / E)', function () {\n      const wkt = 'POINT(3E1 1E1)';\n      const geom = format.readGeometry(wkt);\n      expect(geom.getCoordinates()).to.eql([30, 10]);\n      expect(format.writeGeometry(geom)).to.eql('POINT(30 10)');\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"detects invalid scientific notation","suites":["ol/format/WKT.js","scientific notation supported"],"updatePoint":{"line":723,"column":43,"index":38015},"line":723,"code":"    it('detects invalid scientific notation', function () {\n      expect(function () {\n        // note the double 'e'\n        format.readGeometry('POINT(3ee1 10)');\n      }).to.throwException();\n    });","file":"node/ol/format/WKT.test.js","skipped":false,"dir":"test"},{"name":"returns a promise given a getter for a value","suites":["ol/functions.js","toPromise()"],"updatePoint":{"line":5,"column":52,"index":234},"line":5,"code":"    it('returns a promise given a getter for a value', done => {\n      const getter = () => 'a value';\n      const promise = toPromise(getter);\n      expect(promise).to.be.a(Promise);\n      promise.then(value => {\n        expect(value).to.be('a value');\n        done();\n      }, done);\n    });","file":"node/ol/functions.test.js","skipped":false,"dir":"test"},{"name":"returns a promise given a getter for a promise that resolves","suites":["ol/functions.js","toPromise()"],"updatePoint":{"line":14,"column":68,"index":544},"line":14,"code":"    it('returns a promise given a getter for a promise that resolves', done => {\n      const getter = () => Promise.resolve('a value');\n      const promise = toPromise(getter);\n      expect(promise).to.be.a(Promise);\n      promise.then(value => {\n        expect(value).to.be('a value');\n        done();\n      }, done);\n    });","file":"node/ol/functions.test.js","skipped":false,"dir":"test"},{"name":"returns a promise that rejects given a getter that throws","suites":["ol/functions.js","toPromise()"],"updatePoint":{"line":23,"column":65,"index":868},"line":23,"code":"    it('returns a promise that rejects given a getter that throws', done => {\n      const getter = () => {\n        throw new Error('an error');\n      };\n      const promise = toPromise(getter);\n      expect(promise).to.be.a(Promise);\n      promise.then(value => {\n        done(new Error(`expected promise to reject, got ${value}`));\n      }, err => {\n        expect(err).to.be.an(Error);\n        expect(err.message).to.be('an error');\n        done();\n      });\n    });","file":"node/ol/functions.test.js","skipped":false,"dir":"test"},{"name":"returns a promise that rejects given a getter for a promse that rejects","suites":["ol/functions.js","toPromise()"],"updatePoint":{"line":37,"column":79,"index":1351},"line":37,"code":"    it('returns a promise that rejects given a getter for a promse that rejects', done => {\n      const getter = () => Promise.reject(new Error('an error'));\n      const promise = toPromise(getter);\n      expect(promise).to.be.a(Promise);\n      promise.then(value => {\n        done(new Error(`expected promise to reject, got ${value}`));\n      }, err => {\n        expect(err).to.be.an(Error);\n        expect(err.message).to.be('an error');\n        done();\n      });\n    });","file":"node/ol/functions.test.js","skipped":false,"dir":"test"},{"name":"returns the result from the first call when called a second time with the same args","suites":["ol/functions.js","memoizeOne()"],"updatePoint":{"line":51,"column":91,"index":1884},"line":51,"code":"    it('returns the result from the first call when called a second time with the same args', function () {\n      const arg1 = {};\n      const arg2 = {};\n      const arg3 = {};\n      function call(a1, a2, a3) {\n        return {};\n      }\n      const memoized = memoizeOne(call);\n      const result = memoized(arg1, arg2, arg3);\n      expect(memoized(arg1, arg2, arg3)).to.be(result);\n    });","file":"node/ol/functions.test.js","skipped":false,"dir":"test"},{"name":"returns the result from the first call when called a second time with the same this object","suites":["ol/functions.js","memoizeOne()"],"updatePoint":{"line":62,"column":98,"index":2283},"line":62,"code":"    it('returns the result from the first call when called a second time with the same this object', function () {\n      const arg1 = {};\n      const arg2 = {};\n      const arg3 = {};\n      function call(a1, a2, a3) {\n        return {};\n      }\n      const memoized = memoizeOne(call);\n      const thisObj = {};\n      const result = memoized.call(thisObj, arg1, arg2, arg3);\n      expect(memoized.call(thisObj, arg1, arg2, arg3)).to.be(result);\n    });","file":"node/ol/functions.test.js","skipped":false,"dir":"test"},{"name":"returns a different result when called a second time with the different args","suites":["ol/functions.js","memoizeOne()"],"updatePoint":{"line":74,"column":84,"index":2722},"line":74,"code":"    it('returns a different result when called a second time with the different args', function () {\n      const arg1 = {};\n      const arg2 = {};\n      const arg3 = {};\n      function call(a1, a2, a3) {\n        return {};\n      }\n      const memoized = memoizeOne(call);\n      const result = memoized(arg1, arg2, arg3);\n      expect(memoized(arg3, arg2, arg1)).not.to.be(result);\n    });","file":"node/ol/functions.test.js","skipped":false,"dir":"test"},{"name":"returns a different result when called a second time with a different this object","suites":["ol/functions.js","memoizeOne()"],"updatePoint":{"line":85,"column":89,"index":3116},"line":85,"code":"    it('returns a different result when called a second time with a different this object', function () {\n      const arg1 = {};\n      const arg2 = {};\n      const arg3 = {};\n      function call(a1, a2, a3) {\n        return {};\n      }\n      const firstThis = {};\n      const secondThis = {};\n      const memoized = memoizeOne(call);\n      const result = memoized.call(firstThis, arg1, arg2, arg3);\n      expect(memoized.call(secondThis, arg1, arg2, arg3)).not.to.be(result);\n    });","file":"node/ol/functions.test.js","skipped":false,"dir":"test"},{"name":"returns a clone","suites":["ol/geom/Circle.js","with a unit circle","#clone"],"updatePoint":{"line":11,"column":25,"index":366},"line":11,"code":"      it('returns a clone', function () {\n        circle.setProperties({\n          foo: 'bar',\n          baz: null\n        });\n        const clone = circle.clone();\n        expect(clone).to.be.an(Circle);\n        expect(clone.getCenter()).to.eql(circle.getCenter());\n        expect(clone.getCenter()).not.to.be(circle.getCenter());\n        expect(clone.getRadius()).to.be(circle.getRadius());\n        expect(clone.getProperties()).to.eql({\n          foo: 'bar',\n          baz: null\n        });\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"contains the center","suites":["ol/geom/Circle.js","with a unit circle","#intersectsCoordinate"],"updatePoint":{"line":28,"column":29,"index":934},"line":28,"code":"      it('contains the center', function () {\n        expect(circle.intersectsCoordinate([0, 0])).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"contains points inside the perimeter","suites":["ol/geom/Circle.js","with a unit circle","#intersectsCoordinate"],"updatePoint":{"line":31,"column":46,"index":1072},"line":31,"code":"      it('contains points inside the perimeter', function () {\n        expect(circle.intersectsCoordinate([0.5, 0.5])).to.be(true);\n        expect(circle.intersectsCoordinate([-0.5, 0.5])).to.be(true);\n        expect(circle.intersectsCoordinate([-0.5, -0.5])).to.be(true);\n        expect(circle.intersectsCoordinate([0.5, -0.5])).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"contains points on the perimeter","suites":["ol/geom/Circle.js","with a unit circle","#intersectsCoordinate"],"updatePoint":{"line":37,"column":42,"index":1421},"line":37,"code":"      it('contains points on the perimeter', function () {\n        expect(circle.intersectsCoordinate([1, 0])).to.be(true);\n        expect(circle.intersectsCoordinate([0, 1])).to.be(true);\n        expect(circle.intersectsCoordinate([-1, 0])).to.be(true);\n        expect(circle.intersectsCoordinate([0, -1])).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"does not contain points outside the perimeter","suites":["ol/geom/Circle.js","with a unit circle","#intersectsCoordinate"],"updatePoint":{"line":43,"column":55,"index":1765},"line":43,"code":"      it('does not contain points outside the perimeter', function () {\n        expect(circle.intersectsCoordinate([2, 0])).to.be(false);\n        expect(circle.intersectsCoordinate([1, 1])).to.be(false);\n        expect(circle.intersectsCoordinate([-2, 0])).to.be(false);\n        expect(circle.intersectsCoordinate([0, -2])).to.be(false);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/Circle.js","with a unit circle","#getCenter"],"updatePoint":{"line":51,"column":36,"index":2143},"line":51,"code":"      it('returns the expected value', function () {\n        expect(circle.getCenter()).to.eql([0, 0]);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns the closest point on the perimeter","suites":["ol/geom/Circle.js","with a unit circle","#getClosestPoint"],"updatePoint":{"line":56,"column":52,"index":2328},"line":56,"code":"      it('returns the closest point on the perimeter', function () {\n        let closestPoint;\n        closestPoint = circle.getClosestPoint([2, 0]);\n        expect(closestPoint[0]).to.roughlyEqual(1, 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(0, 1e-15);\n        closestPoint = circle.getClosestPoint([2, 2]);\n        expect(closestPoint[0]).to.roughlyEqual(Math.sqrt(0.5), 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(Math.sqrt(0.5), 1e-15);\n        closestPoint = circle.getClosestPoint([0, 2]);\n        expect(closestPoint[0]).to.roughlyEqual(0, 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(1, 1e-15);\n        closestPoint = circle.getClosestPoint([-2, 2]);\n        expect(closestPoint[0]).to.roughlyEqual(-Math.sqrt(0.5), 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(Math.sqrt(0.5), 1e-15);\n        closestPoint = circle.getClosestPoint([-2, 0]);\n        expect(closestPoint[0]).to.roughlyEqual(-1, 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(0, 1e-15);\n        closestPoint = circle.getClosestPoint([-2, -2]);\n        expect(closestPoint[0]).to.roughlyEqual(-Math.sqrt(0.5), 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(-Math.sqrt(0.5), 1e-15);\n        closestPoint = circle.getClosestPoint([0, -2]);\n        expect(closestPoint[0]).to.roughlyEqual(0, 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(-1, 1e-15);\n        closestPoint = circle.getClosestPoint([2, -2]);\n        expect(closestPoint[0]).to.roughlyEqual(Math.sqrt(0.5), 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(-Math.sqrt(0.5), 1e-15);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"maintains Z coordinates","suites":["ol/geom/Circle.js","with a unit circle","#getClosestPoint"],"updatePoint":{"line":83,"column":33,"index":3914},"line":83,"code":"      it('maintains Z coordinates', function () {\n        const circle = new Circle([0, 0, 1], 1);\n        expect(circle.getLayout()).to.be('XYZ');\n        const closestPoint = circle.getClosestPoint([2, 0]);\n        expect(closestPoint).to.have.length(3);\n        expect(closestPoint[0]).to.roughlyEqual(1, 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(0, 1e-15);\n        expect(closestPoint[2]).to.be(1);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"maintains M coordinates","suites":["ol/geom/Circle.js","with a unit circle","#getClosestPoint"],"updatePoint":{"line":92,"column":33,"index":4341},"line":92,"code":"      it('maintains M coordinates', function () {\n        const circle = new Circle([0, 0, 2], 1, 'XYM');\n        const closestPoint = circle.getClosestPoint([2, 0]);\n        expect(closestPoint).to.have.length(3);\n        expect(closestPoint[0]).to.roughlyEqual(1, 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(0, 1e-15);\n        expect(closestPoint[2]).to.be(2);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"maintains Z and M coordinates","suites":["ol/geom/Circle.js","with a unit circle","#getClosestPoint"],"updatePoint":{"line":100,"column":39,"index":4732},"line":100,"code":"      it('maintains Z and M coordinates', function () {\n        const circle = new Circle([0, 0, 1, 2], 1);\n        expect(circle.getLayout()).to.be('XYZM');\n        const closestPoint = circle.getClosestPoint([2, 0]);\n        expect(closestPoint).to.have.length(4);\n        expect(closestPoint[0]).to.roughlyEqual(1, 1e-15);\n        expect(closestPoint[1]).to.roughlyEqual(0, 1e-15);\n        expect(closestPoint[2]).to.be(1);\n        expect(closestPoint[3]).to.be(2);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/Circle.js","with a unit circle","#getExtent"],"updatePoint":{"line":112,"column":36,"index":5257},"line":112,"code":"      it('returns the expected value', function () {\n        expect(circle.getExtent()).to.eql([-1, -1, 1, 1]);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/Circle.js","with a unit circle","#getRadius"],"updatePoint":{"line":117,"column":36,"index":5428},"line":117,"code":"      it('returns the expected value', function () {\n        expect(circle.getRadius()).to.be(1);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns the same geometry","suites":["ol/geom/Circle.js","with a unit circle","#getSimplifiedGeometry"],"updatePoint":{"line":122,"column":35,"index":5596},"line":122,"code":"      it('returns the same geometry', function () {\n        expect(circle.getSimplifiedGeometry(1)).to.be(circle);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/Circle.js","with a unit circle","#getType"],"updatePoint":{"line":127,"column":36,"index":5769},"line":127,"code":"      it('returns the expected value', function () {\n        expect(circle.getType()).to.be('Circle');\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"sets the center","suites":["ol/geom/Circle.js","with a unit circle","#setCenter"],"updatePoint":{"line":132,"column":25,"index":5920},"line":132,"code":"      it('sets the center', function () {\n        circle.setCenter([1, 2]);\n        expect(circle.getCenter()).to.eql([1, 2]);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"fires a change event","suites":["ol/geom/Circle.js","with a unit circle","#setCenter"],"updatePoint":{"line":136,"column":30,"index":6062},"line":136,"code":"      it('fires a change event', function () {\n        const spy = sinon.spy();\n        circle.on('change', spy);\n        circle.setCenter([1, 2]);\n        expect(spy.calledOnce).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"sets both center and radius","suites":["ol/geom/Circle.js","with a unit circle","#setFlatCoordinates"],"updatePoint":{"line":144,"column":37,"index":6329},"line":144,"code":"      it('sets both center and radius', function () {\n        circle.setFlatCoordinates('XY', [1, 2, 4, 2]);\n        expect(circle.getCenter()).to.eql([1, 2]);\n        expect(circle.getRadius()).to.be(3);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"sets the radius","suites":["ol/geom/Circle.js","with a unit circle","#setRadius"],"updatePoint":{"line":151,"column":25,"index":6581},"line":151,"code":"      it('sets the radius', function () {\n        circle.setRadius(2);\n        expect(circle.getRadius()).to.be(2);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"fires a change event","suites":["ol/geom/Circle.js","with a unit circle","#setRadius"],"updatePoint":{"line":155,"column":30,"index":6712},"line":155,"code":"      it('fires a change event', function () {\n        const spy = sinon.spy();\n        circle.on('change', spy);\n        circle.setRadius(2);\n        expect(spy.calledOnce).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns false for non-intersecting extents (wide outside own bbox)","suites":["ol/geom/Circle.js","with a unit circle","#intersectsExtent"],"updatePoint":{"line":163,"column":76,"index":7011},"line":163,"code":"      it('returns false for non-intersecting extents (wide outside own bbox)', function () {\n        const wideOutsideLeftTop = [-3, 2, -2, 3];\n        const wideOutsideRightTop = [2, 2, 3, 3];\n        const wideOutsideRightBottom = [2, -3, 3, -2];\n        const wideOutsideLeftBottom = [-3, -3, -2, -2];\n        expect(circle.intersectsExtent(wideOutsideLeftTop)).to.be(false);\n        expect(circle.intersectsExtent(wideOutsideRightTop)).to.be(false);\n        expect(circle.intersectsExtent(wideOutsideRightBottom)).to.be(false);\n        expect(circle.intersectsExtent(wideOutsideLeftBottom)).to.be(false);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns false for non-intersecting extents (inside own bbox)","suites":["ol/geom/Circle.js","with a unit circle","#intersectsExtent"],"updatePoint":{"line":173,"column":70,"index":7624},"line":173,"code":"      it('returns false for non-intersecting extents (inside own bbox)', function () {\n        const nearOutsideLeftTop = [-1, 0.9, -0.9, 1];\n        const nearOutsideRightTop = [0.9, 0.9, 1, 1];\n        const nearOutsideRightBottom = [0.9, -1, 1, -0.9];\n        const nearOutsideLeftBottom = [-1, -1, -0.9, -0.9];\n        expect(circle.intersectsExtent(nearOutsideLeftTop)).to.be(false);\n        expect(circle.intersectsExtent(nearOutsideRightTop)).to.be(false);\n        expect(circle.intersectsExtent(nearOutsideRightBottom)).to.be(false);\n        expect(circle.intersectsExtent(nearOutsideLeftBottom)).to.be(false);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns true for extents that intersect clearly","suites":["ol/geom/Circle.js","with a unit circle","#intersectsExtent"],"updatePoint":{"line":183,"column":57,"index":8240},"line":183,"code":"      it('returns true for extents that intersect clearly', function () {\n        const intersectingLeftTop = [-1.5, 0.5, -0.5, 1.5];\n        const intersectingRightTop = [0.5, 0.5, 1.5, 1.5];\n        const intersectingRightBottom = [0.5, -1.5, 1.5, -0.5];\n        const intersectingLeftBottom = [-1.5, -1.5, -0.5, -0.5];\n        expect(circle.intersectsExtent(intersectingLeftTop)).to.be(true);\n        expect(circle.intersectsExtent(intersectingRightTop)).to.be(true);\n        expect(circle.intersectsExtent(intersectingRightBottom)).to.be(true);\n        expect(circle.intersectsExtent(intersectingLeftBottom)).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns true for extents that touch the circumference","suites":["ol/geom/Circle.js","with a unit circle","#intersectsExtent"],"updatePoint":{"line":193,"column":63,"index":8882},"line":193,"code":"      it('returns true for extents that touch the circumference', function () {\n        const touchCircumferenceLeft = [-2, 0, -1, 1];\n        const touchCircumferenceTop = [0, 1, 1, 2];\n        const touchCircumferenceRight = [1, -1, 2, 0];\n        const touchCircumferenceBottom = [-1, -2, 0, -1];\n        expect(circle.intersectsExtent(touchCircumferenceLeft)).to.be(true);\n        expect(circle.intersectsExtent(touchCircumferenceTop)).to.be(true);\n        expect(circle.intersectsExtent(touchCircumferenceRight)).to.be(true);\n        expect(circle.intersectsExtent(touchCircumferenceBottom)).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns true for a contained extent","suites":["ol/geom/Circle.js","with a unit circle","#intersectsExtent"],"updatePoint":{"line":203,"column":45,"index":9484},"line":203,"code":"      it('returns true for a contained extent', function () {\n        const containedExtent = [-0.5, -0.5, 0.5, 0.5];\n        expect(circle.intersectsExtent(containedExtent)).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns true for a covering extent","suites":["ol/geom/Circle.js","with a unit circle","#intersectsExtent"],"updatePoint":{"line":207,"column":44,"index":9681},"line":207,"code":"      it('returns true for a covering extent', function () {\n        const bigCoveringExtent = [-5, -5, 5, 5];\n        expect(circle.intersectsExtent(bigCoveringExtent)).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"returns true for the geom's own extent","suites":["ol/geom/Circle.js","with a unit circle","#intersectsExtent"],"updatePoint":{"line":211,"column":48,"index":9878},"line":211,"code":"      it(\"returns true for the geom's own extent\", function () {\n        const circleExtent = circle.getExtent();\n        expect(circle.intersectsExtent(circleExtent)).to.be(true);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"rotates the center around the anchor","suites":["ol/geom/Circle.js","with a unit circle","#rotate"],"updatePoint":{"line":217,"column":46,"index":10113},"line":217,"code":"      it('rotates the center around the anchor', function () {\n        circle.setCenter([1, 0]);\n        circle.rotate(Math.PI / 2, [2, 0]);\n        expect(circle.getCenter()).to.eql([2, -1]);\n        expect(circle.getExtent()).to.eql([1, -2, 3, 0]);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"does not change if the anchor equals the center","suites":["ol/geom/Circle.js","with a unit circle","#rotate"],"updatePoint":{"line":223,"column":57,"index":10385},"line":223,"code":"      it('does not change if the anchor equals the center', function () {\n        const center = [1, 0];\n        circle.setCenter(center);\n        const extent = circle.getExtent();\n        circle.rotate(Math.PI / 2, center);\n        expect(circle.getCenter()).to.eql(center);\n        expect(circle.getExtent()).to.eql(extent);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"translates the circle","suites":["ol/geom/Circle.js","with a unit circle","#translate"],"updatePoint":{"line":233,"column":31,"index":10746},"line":233,"code":"      it('translates the circle', function () {\n        circle.setCenter([1, 1]);\n        circle.translate(5, 10);\n        expect(circle.getCenter()).to.eql([6, 11]);\n        expect(circle.getExtent()).to.eql([5, 10, 7, 12]);\n      });","file":"node/ol/geom/Circle.test.js","skipped":false,"dir":"test"},{"name":"calculates the area of a triangle","suites":["ol/geom/flat/area.js","linearRing"],"updatePoint":{"line":5,"column":41,"index":252},"line":5,"code":"    it('calculates the area of a triangle', function () {\n      const area = linearRing([0, 0, 0.5, 1, 1, 0], 0, 6, 2);\n      expect(area).to.be(0.5);\n    });","file":"node/ol/geom/flat/area.test.js","skipped":false,"dir":"test"},{"name":"calculates the area of a unit square","suites":["ol/geom/flat/area.js","linearRing"],"updatePoint":{"line":9,"column":44,"index":414},"line":9,"code":"    it('calculates the area of a unit square', function () {\n      const area = linearRing([0, 0, 0, 1, 1, 1, 1, 0], 0, 8, 2);\n      expect(area).to.be(1);\n    });","file":"node/ol/geom/flat/area.test.js","skipped":false,"dir":"test"},{"name":"calculates the area with holes","suites":["ol/geom/flat/area.js","linearRings"],"updatePoint":{"line":15,"column":38,"index":618},"line":15,"code":"    it('calculates the area with holes', function () {\n      const area = linearRings([0, 0, 0, 3, 3, 3, 3, 0, 1, 1, 2, 1, 2, 2, 1, 2], 0, [8, 16], 2);\n      expect(area).to.be(8);\n    });","file":"node/ol/geom/flat/area.test.js","skipped":false,"dir":"test"},{"name":"calculates the center of a square","suites":["ol/geom/flat/center.js","linearRingss"],"updatePoint":{"line":6,"column":41,"index":340},"line":6,"code":"    it('calculates the center of a square', function () {\n      const squareMultiPoly = new MultiPolygon([[[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]]]);\n      const got = linearRingssCenter(squareMultiPoly.flatCoordinates, 0, squareMultiPoly.endss_, 2);\n      expect(got).to.eql([0.5, 0.5]);\n    });","file":"node/ol/geom/flat/center.test.js","skipped":false,"dir":"test"},{"name":"calculates the centers of two squares","suites":["ol/geom/flat/center.js","linearRingss"],"updatePoint":{"line":11,"column":45,"index":643},"line":11,"code":"    it('calculates the centers of two squares', function () {\n      const squareMultiPoly = new MultiPolygon([[[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], [[[3, 0], [3, 1], [4, 1], [4, 0], [3, 0]]]]);\n      const got = linearRingssCenter(squareMultiPoly.flatCoordinates, 0, squareMultiPoly.endss_, 2);\n      expect(got).to.eql([0.5, 0.5, 3.5, 0.5]);\n    });","file":"node/ol/geom/flat/center.test.js","skipped":false,"dir":"test"},{"name":"does not care about holes","suites":["ol/geom/flat/center.js","linearRingss"],"updatePoint":{"line":16,"column":33,"index":988},"line":16,"code":"    it('does not care about holes', function () {\n      const polywithHole = new MultiPolygon([[[[0, 0], [0, 5], [5, 5], [5, 0], [0, 0]], [[1, 1], [1, 4], [4, 4], [4, 1], [1, 1]]]]);\n      const got = linearRingssCenter(polywithHole.flatCoordinates, 0, polywithHole.endss_, 2);\n      expect(got).to.eql([2.5, 2.5]);\n    });","file":"node/ol/geom/flat/center.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value in simple cases","suites":["ol/geom/flat/closest.js","with simple data","maxSquaredDelta"],"updatePoint":{"line":7,"column":52,"index":406},"line":7,"code":"      it('returns the expected value in simple cases', function () {\n        expect(maxSquaredDelta(flatCoordinates, 0, flatCoordinates.length, 2, 0)).to.be(9);\n      });","file":"node/ol/geom/flat/closest.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/flat/closest.js","with simple data","assignClosestPoint"],"updatePoint":{"line":12,"column":36,"index":618},"line":12,"code":"      it('returns the expected value', function () {\n        const maxDelta = Math.sqrt(maxSquaredDelta(flatCoordinates, 0, flatCoordinates.length, 2, 0));\n        expect(maxDelta).to.be(3);\n        const closestPoint = [NaN, NaN];\n        expect(assignClosestPoint(flatCoordinates, 0, flatCoordinates.length, 2, maxDelta, false, 0, 0, closestPoint, Infinity)).to.be(0);\n        expect(closestPoint).to.eql([0, 0]);\n        expect(assignClosestPoint(flatCoordinates, 0, flatCoordinates.length, 2, maxDelta, false, 4, 1, closestPoint, Infinity)).to.be(1);\n        expect(closestPoint).to.eql([4, 0]);\n        expect(assignClosestPoint(flatCoordinates, 0, flatCoordinates.length, 2, maxDelta, false, 5, 2, closestPoint, Infinity)).to.be(4);\n        expect(closestPoint).to.eql([5, 0]);\n        expect(assignClosestPoint(flatCoordinates, 0, flatCoordinates.length, 2, maxDelta, false, 10, 100, closestPoint, Infinity)).to.be(10000);\n        expect(closestPoint).to.eql([10, 0]);\n      });","file":"node/ol/geom/flat/closest.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/flat/closest.js","with real data","maxSquaredDelta"],"updatePoint":{"line":30,"column":36,"index":3319},"line":30,"code":"      it('returns the expected value', function () {\n        expect(maxSquaredDelta(flatCoordinates, 0, flatCoordinates.length, 2, 0)).to.roughlyEqual(1389.1058, 1e-9);\n      });","file":"node/ol/geom/flat/closest.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/flat/closest.js","with real data","assignClosestPoint"],"updatePoint":{"line":35,"column":36,"index":3555},"line":35,"code":"      it('returns the expected value', function () {\n        const maxDelta = Math.sqrt(maxSquaredDelta(flatCoordinates, 0, flatCoordinates.length, 2, 0));\n        expect(maxDelta).to.roughlyEqual(Math.sqrt(1389.1058), 1e-9);\n        const closestPoint = [NaN, NaN];\n        expect(assignClosestPoint(flatCoordinates, 0, flatCoordinates.length, 2, maxDelta, false, 0, 0, closestPoint, Infinity)).to.roughlyEqual(110902.405, 1e-9);\n        expect(closestPoint).to.eql([292.41, 159.37]);\n        expect(assignClosestPoint(flatCoordinates, 0, flatCoordinates.length, 2, maxDelta, false, 500, 500, closestPoint, Infinity)).to.roughlyEqual(106407.905, 1e-9);\n        expect(closestPoint).to.eql([671.55, 222.55]);\n        expect(assignClosestPoint(flatCoordinates, 0, flatCoordinates.length, 2, maxDelta, false, 1000, 500, closestPoint, Infinity)).to.roughlyEqual(18229.4425, 1e-9);\n        expect(closestPoint).to.eql([866.36, 480.77]);\n      });","file":"node/ol/geom/flat/closest.test.js","skipped":false,"dir":"test"},{"name":"interpolates M coordinates","suites":["ol/geom/flat/closest.js","with multi-dimensional data","assignClosestPoint"],"updatePoint":{"line":52,"column":36,"index":4699},"line":52,"code":"      it('interpolates M coordinates', function () {\n        const maxDelta = Math.sqrt(maxSquaredDelta(flatCoordinates, 0, flatCoordinates.length, stride, 0));\n        expect(maxDelta).to.roughlyEqual(Math.sqrt(8), 1e-9);\n        const closestPoint = [NaN, NaN];\n        expect(assignClosestPoint(flatCoordinates, 0, flatCoordinates.length, stride, maxDelta, false, 1, 1, closestPoint, Infinity)).to.roughlyEqual(0, 1e-9);\n        expect(closestPoint).to.have.length(stride);\n        expect(closestPoint[0]).to.be(1);\n        expect(closestPoint[1]).to.be(1);\n        expect(closestPoint[2]).to.be(20);\n        expect(closestPoint[3]).to.be(-15);\n      });","file":"node/ol/geom/flat/closest.test.js","skipped":false,"dir":"test"},{"name":"returns true for point inside a simple polygon","suites":["ol/geom/flat/contains.js","with simple data","linearRingContainsXY"],"updatePoint":{"line":8,"column":56,"index":488},"line":8,"code":"      it('returns true for point inside a simple polygon', function () {\n        expect(linearRingContainsXY(flatCoordinatesSimple, 0, flatCoordinatesSimple.length, 2, 0.5, 0.5)).to.be(true);\n      });","file":"node/ol/geom/flat/contains.test.js","skipped":false,"dir":"test"},{"name":"returns false for point outside a simple polygon","suites":["ol/geom/flat/contains.js","with simple data","linearRingContainsXY"],"updatePoint":{"line":11,"column":58,"index":692},"line":11,"code":"      it('returns false for point outside a simple polygon', function () {\n        expect(linearRingContainsXY(flatCoordinatesSimple, 0, flatCoordinatesSimple.length, 2, 1.5, 1.5)).to.be(false);\n      });","file":"node/ol/geom/flat/contains.test.js","skipped":false,"dir":"test"},{"name":"returns true for point inside a non-simple polygon","suites":["ol/geom/flat/contains.js","with simple data","linearRingContainsXY"],"updatePoint":{"line":14,"column":60,"index":899},"line":14,"code":"      it('returns true for point inside a non-simple polygon', function () {\n        expect(linearRingContainsXY(flatCoordinatesNonSimple, 0, flatCoordinatesNonSimple.length, 2, 1, 1)).to.be(true);\n      });","file":"node/ol/geom/flat/contains.test.js","skipped":false,"dir":"test"},{"name":"returns true for point inside an overlap of a non-simple polygon","suites":["ol/geom/flat/contains.js","with simple data","linearRingContainsXY"],"updatePoint":{"line":17,"column":74,"index":1121},"line":17,"code":"      it('returns true for point inside an overlap of a non-simple polygon', function () {\n        expect(linearRingContainsXY(flatCoordinatesNonSimple, 0, flatCoordinatesNonSimple.length, 2, 1.5, 2.5)).to.be(true);\n      });","file":"node/ol/geom/flat/contains.test.js","skipped":false,"dir":"test"},{"name":"returns false for a point inside a hole of a non-simple polygon","suites":["ol/geom/flat/contains.js","with simple data","linearRingContainsXY"],"updatePoint":{"line":20,"column":73,"index":1346},"line":20,"code":"      it('returns false for a point inside a hole of a non-simple polygon', function () {\n        expect(linearRingContainsXY(flatCoordinatesNonSimple, 0, flatCoordinatesNonSimple.length, 2, 2.5, 1.5)).to.be(false);\n      });","file":"node/ol/geom/flat/contains.test.js","skipped":false,"dir":"test"},{"name":"flattens coordinates","suites":["ol/geom/flat/deflate.js","deflateCoordinates"],"updatePoint":{"line":9,"column":28,"index":363},"line":9,"code":"    it('flattens coordinates', function () {\n      const offset = deflateCoordinates(flatCoordinates, 0, [[1, 2], [3, 4]], 2);\n      expect(offset).to.be(4);\n      expect(flatCoordinates).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/flat/deflate.test.js","skipped":false,"dir":"test"},{"name":"flattens arrays of coordinates","suites":["ol/geom/flat/deflate.js","deflateCoordinatesArray"],"updatePoint":{"line":20,"column":38,"index":739},"line":20,"code":"    it('flattens arrays of coordinates', function () {\n      const ends = deflateCoordinatesArray(flatCoordinates, 0, [[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 2);\n      expect(ends).to.eql([4, 8]);\n      expect(flatCoordinates).to.eql([1, 2, 3, 4, 5, 6, 7, 8]);\n    });","file":"node/ol/geom/flat/deflate.test.js","skipped":false,"dir":"test"},{"name":"can flip XY coordinates","suites":["ol/geom/flat/flip.js","flipXY"],"updatePoint":{"line":5,"column":31,"index":221},"line":5,"code":"    it('can flip XY coordinates', function () {\n      const flatCoordinates = flipXY([1, 2, 3, 4], 0, 4, 2);\n      expect(flatCoordinates).to.eql([2, 1, 4, 3]);\n    });","file":"node/ol/geom/flat/flip.test.js","skipped":false,"dir":"test"},{"name":"can flip XY coordinates while preserving other dimensions","suites":["ol/geom/flat/flip.js","flipXY"],"updatePoint":{"line":9,"column":65,"index":424},"line":9,"code":"    it('can flip XY coordinates while preserving other dimensions', function () {\n      const flatCoordinates = flipXY([1, 2, 3, 4, 5, 6, 7, 8], 0, 8, 4);\n      expect(flatCoordinates).to.eql([2, 1, 3, 4, 6, 5, 7, 8]);\n    });","file":"node/ol/geom/flat/flip.test.js","skipped":false,"dir":"test"},{"name":"can flip XY coordinates in place","suites":["ol/geom/flat/flip.js","flipXY"],"updatePoint":{"line":13,"column":40,"index":626},"line":13,"code":"    it('can flip XY coordinates in place', function () {\n      const flatCoordinates = [1, 2, 3, 4];\n      expect(flipXY(flatCoordinates, 0, 4, 2, flatCoordinates)).to.be(flatCoordinates);\n      expect(flatCoordinates).to.eql([2, 1, 4, 3]);\n    });","file":"node/ol/geom/flat/flip.test.js","skipped":false,"dir":"test"},{"name":"can flip XY coordinates in place while preserving other dimensions","suites":["ol/geom/flat/flip.js","flipXY"],"updatePoint":{"line":18,"column":74,"index":909},"line":18,"code":"    it('can flip XY coordinates in place while preserving other dimensions', function () {\n      const flatCoordinates = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n      expect(flipXY(flatCoordinates, 0, 9, 3, flatCoordinates)).to.be(flatCoordinates);\n      expect(flatCoordinates).to.eql([2, 1, 3, 5, 4, 6, 8, 7, 9]);\n    });","file":"node/ol/geom/flat/flip.test.js","skipped":false,"dir":"test"},{"name":"inflates coordinates","suites":["ol/geom/flat/inflate.js","inflateCoordinates"],"updatePoint":{"line":5,"column":28,"index":273},"line":5,"code":"    it('inflates coordinates', function () {\n      const coordinates = inflateCoordinates([1, 2, 3, 4], 0, 4, 2);\n      expect(coordinates).to.eql([[1, 2], [3, 4]]);\n    });","file":"node/ol/geom/flat/inflate.test.js","skipped":false,"dir":"test"},{"name":"inflates arrays of coordinates","suites":["ol/geom/flat/inflate.js","inflateCoordinatesArray"],"updatePoint":{"line":11,"column":38,"index":515},"line":11,"code":"    it('inflates arrays of coordinates', function () {\n      const coordinatess = inflateCoordinatesArray([1, 2, 3, 4, 5, 6, 7, 8], 0, [4, 8], 2);\n      expect(coordinatess).to.eql([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]);\n    });","file":"node/ol/geom/flat/inflate.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value for single points","suites":["ol/geom/flat/interpolate.js","interpolatePoint"],"updatePoint":{"line":5,"column":52,"index":276},"line":5,"code":"    it('returns the expected value for single points', function () {\n      const flatCoordinates = [0, 1];\n      const point = interpolatePoint(flatCoordinates, 0, 2, 2, 0.5);\n      expect(point).to.eql([0, 1]);\n    });","file":"node/ol/geom/flat/interpolate.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value for simple line segments","suites":["ol/geom/flat/interpolate.js","interpolatePoint"],"updatePoint":{"line":10,"column":59,"index":503},"line":10,"code":"    it('returns the expected value for simple line segments', function () {\n      const flatCoordinates = [0, 1, 2, 3];\n      const point = interpolatePoint(flatCoordinates, 0, 4, 2, 0.5);\n      expect(point).to.eql([1, 2]);\n    });","file":"node/ol/geom/flat/interpolate.test.js","skipped":false,"dir":"test"},{"name":"also when vertices are repeated","suites":["ol/geom/flat/interpolate.js","interpolatePoint"],"updatePoint":{"line":20,"column":39,"index":980},"line":20,"code":"    it('also when vertices are repeated', function () {\n      const flatCoordinates = [0, 1, 2, 3, 2, 3, 4, 5];\n      const point = interpolatePoint(flatCoordinates, 0, 8, 2, 0.5);\n      expect(point).to.eql([2, 3]);\n    });","file":"node/ol/geom/flat/interpolate.test.js","skipped":false,"dir":"test"},{"name":"also when vertices are repeated","suites":["ol/geom/flat/interpolate.js","interpolatePoint"],"updatePoint":{"line":30,"column":39,"index":1495},"line":30,"code":"    it('also when vertices are repeated', function () {\n      const flatCoordinates = [0, 1, 2, 3, 2, 3, 4, 5, 6, 7];\n      const point = interpolatePoint(flatCoordinates, 0, 10, 2, 0.5);\n      expect(point).to.eql([3, 4]);\n    });","file":"node/ol/geom/flat/interpolate.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value when the coordinates are not evenly spaced","suites":["ol/geom/flat/interpolate.js","interpolatePoint"],"updatePoint":{"line":35,"column":77,"index":1765},"line":35,"code":"    it('returns the expected value when the coordinates are not evenly spaced', function () {\n      const flatCoordinates = [0, 1, 2, 3, 6, 7];\n      const point = interpolatePoint(flatCoordinates, 0, 6, 2, 0.5);\n      expect(point).to.eql([3, 4]);\n    });","file":"node/ol/geom/flat/interpolate.test.js","skipped":false,"dir":"test"},{"name":"also when vertices are repeated","suites":["ol/geom/flat/interpolate.js","interpolatePoint"],"updatePoint":{"line":40,"column":39,"index":1984},"line":40,"code":"    it('also when vertices are repeated', function () {\n      const flatCoordinates = [0, 1, 2, 3, 2, 3, 6, 7];\n      const point = interpolatePoint(flatCoordinates, 0, 8, 2, 0.5);\n      expect(point).to.eql([3, 4]);\n    });","file":"node/ol/geom/flat/interpolate.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value when using opt_dest","suites":["ol/geom/flat/interpolate.js","interpolatePoint"],"updatePoint":{"line":45,"column":54,"index":2224},"line":45,"code":"    it('returns the expected value when using opt_dest', function () {\n      const flatCoordinates = [0, 1, 2, 3, 6, 7];\n      const point = interpolatePoint(flatCoordinates, 0, 6, 2, 0.5, [0, 0]);\n      expect(point).to.eql([3, 4]);\n    });","file":"node/ol/geom/flat/interpolate.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/geom/flat/intersectsextent.js","intersectsLineString","linestring envelope does not intersect the extent"],"updatePoint":{"line":10,"column":23,"index":500},"line":10,"code":"      it('returns false', function () {\n        const extent = [3, 3, 4, 4];\n        const r = intersectsLineString(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(false);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/geom/flat/intersectsextent.js","intersectsLineString","linestring envelope within the extent"],"updatePoint":{"line":17,"column":22,"index":789},"line":17,"code":"      it('returns true', function () {\n        const extent = [-1, -1, 3, 3];\n        const r = intersectsLineString(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(true);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/geom/flat/intersectsextent.js","intersectsLineString","linestring envelope bisected by an edge of the extent"],"updatePoint":{"line":24,"column":22,"index":1095},"line":24,"code":"      it('returns true', function () {\n        const extent = [-0.1, 0.1, 2.1, 0.1];\n        const r = intersectsLineString(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(true);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/geom/flat/intersectsextent.js","intersectsLineString","a segment intersects the extent"],"updatePoint":{"line":31,"column":22,"index":1386},"line":31,"code":"      it('returns true', function () {\n        const extent = [-0.5, -0.5, 0.5, 0.5];\n        const r = intersectsLineString(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(true);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/geom/flat/intersectsextent.js","intersectsLineString","no segments intersect the extent"],"updatePoint":{"line":38,"column":23,"index":1680},"line":38,"code":"      it('returns false', function () {\n        const extent = [0.5, 1.5, 1, 1.75];\n        const r = intersectsLineString(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(false);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/geom/flat/intersectsextent.js","intersectsLineString","no segments intersect the extent"],"updatePoint":{"line":43,"column":23,"index":1901},"line":43,"code":"      it('returns false', function () {\n        const extent = [1, 0.25, 1.5, 0.5];\n        const r = intersectsLineString(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(false);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/geom/flat/intersectsextent.js","intersectsLinearRing","boundary intersects the extent"],"updatePoint":{"line":56,"column":22,"index":2364},"line":56,"code":"      it('returns true', function () {\n        const extent = [1.5, 0.0, 2.5, 1.0];\n        const r = intersectsLinearRing(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(true);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/geom/flat/intersectsextent.js","intersectsLinearRing","boundary intersects the extent"],"updatePoint":{"line":63,"column":23,"index":2716},"line":63,"code":"      it('returns false', function () {\n        const extent = [2.0, 0.5, 3, 1.5];\n        const r = intersectsLinearRing(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(false);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/geom/flat/intersectsextent.js","intersectsLinearRing","ring contains the extent"],"updatePoint":{"line":70,"column":22,"index":2998},"line":70,"code":"      it('returns true', function () {\n        const extent = [0.75, -0.25, 1.25, 0.25];\n        const r = intersectsLinearRing(flatCoordinates, 0, flatCoordinates.length, 2, extent);\n        expect(r).to.be(true);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/geom/flat/intersectsextent.js","intersectsLinearRingArray","ring with hole where hole contains the extent"],"updatePoint":{"line":85,"column":22,"index":3602},"line":85,"code":"      it('returns true', function () {\n        const extent = [3, 3, 3.5, 3.5];\n        const r = intersectsLinearRingArray(flatCoordinates, 0, ends, 2, extent);\n        expect(r).to.be(false);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/geom/flat/intersectsextent.js","intersectsLinearRingArray","ring with hole intersects the extent"],"updatePoint":{"line":92,"column":22,"index":3881},"line":92,"code":"      it('returns true', function () {\n        const extent = [3, 3, 6, 6];\n        const r = intersectsLinearRingArray(flatCoordinates, 0, ends, 2, extent);\n        expect(r).to.be(true);\n      });","file":"node/ol/geom/flat/intersectsextent.test.js","skipped":false,"dir":"test"},{"name":"calculates the total length of a lineString","suites":["ol/geom/flat/length.js","lineStringLength","stride = 2"],"updatePoint":{"line":8,"column":53,"index":401},"line":8,"code":"      it('calculates the total length of a lineString', function () {\n        const offset = 0;\n        const end = 8;\n        const expected = 3;\n        const got = lineStringLength(flatCoords, offset, end, stride);\n        expect(got).to.be(expected);\n      });","file":"node/ol/geom/flat/length.test.js","skipped":false,"dir":"test"},{"name":"calculates a partwise length of a lineString (offset)","suites":["ol/geom/flat/length.js","lineStringLength","stride = 2"],"updatePoint":{"line":15,"column":63,"index":676},"line":15,"code":"      it('calculates a partwise length of a lineString (offset)', function () {\n        const offset = 2;\n        const end = 8;\n        const expected = 2;\n        const got = lineStringLength(flatCoords, offset, end, stride);\n        expect(got).to.be(expected);\n      });","file":"node/ol/geom/flat/length.test.js","skipped":false,"dir":"test"},{"name":"calculates a partwise length of a lineString (end)","suites":["ol/geom/flat/length.js","lineStringLength","stride = 2"],"updatePoint":{"line":22,"column":60,"index":948},"line":22,"code":"      it('calculates a partwise length of a lineString (end)', function () {\n        const offset = 0;\n        const end = 4;\n        const expected = 1;\n        const got = lineStringLength(flatCoords, offset, end, stride);\n        expect(got).to.be(expected);\n      });","file":"node/ol/geom/flat/length.test.js","skipped":false,"dir":"test"},{"name":"calculates the total length of a lineString","suites":["ol/geom/flat/length.js","lineStringLength","stride = 3"],"updatePoint":{"line":33,"column":53,"index":1353},"line":33,"code":"      it('calculates the total length of a lineString', function () {\n        const offset = 0;\n        const end = 12;\n        const expected = 3;\n        const got = lineStringLength(flatCoords, offset, end, stride);\n        expect(got).to.be(expected);\n      });","file":"node/ol/geom/flat/length.test.js","skipped":false,"dir":"test"},{"name":"calculates a partwise length of a lineString (offset)","suites":["ol/geom/flat/length.js","lineStringLength","stride = 3"],"updatePoint":{"line":40,"column":63,"index":1629},"line":40,"code":"      it('calculates a partwise length of a lineString (offset)', function () {\n        const offset = 3;\n        const end = 12;\n        const expected = 2;\n        const got = lineStringLength(flatCoords, offset, end, stride);\n        expect(got).to.be(expected);\n      });","file":"node/ol/geom/flat/length.test.js","skipped":false,"dir":"test"},{"name":"calculates a partwise length of a lineString (end)","suites":["ol/geom/flat/length.js","lineStringLength","stride = 3"],"updatePoint":{"line":47,"column":60,"index":1902},"line":47,"code":"      it('calculates a partwise length of a lineString (end)', function () {\n        const offset = 0;\n        const end = 6;\n        const expected = 1;\n        const got = lineStringLength(flatCoords, offset, end, stride);\n        expect(got).to.be(expected);\n      });","file":"node/ol/geom/flat/length.test.js","skipped":false,"dir":"test"},{"name":"calculates the total length of a simple linearRing","suites":["ol/geom/flat/length.js","linearRingLength"],"updatePoint":{"line":57,"column":58,"index":2231},"line":57,"code":"    it('calculates the total length of a simple linearRing', function () {\n      const flatCoords = [0, 0, 1, 0, 1, 1, 0, 1];\n      const stride = 2;\n      const offset = 0;\n      const end = 8;\n      const expected = 4;\n      const got = linearRingLength(flatCoords, offset, end, stride);\n      expect(got).to.be(expected);\n    });","file":"node/ol/geom/flat/length.test.js","skipped":false,"dir":"test"},{"name":"calculates the total length of a figure-8 linearRing","suites":["ol/geom/flat/length.js","linearRingLength"],"updatePoint":{"line":66,"column":60,"index":2566},"line":66,"code":"    it('calculates the total length of a figure-8 linearRing', function () {\n      const flatCoords = [0, 0, 1, 0, 1, 1, 0, 1, 0, -1, -1, -1, -1, 0];\n      const stride = 2;\n      const offset = 0;\n      const end = 14;\n      const expected = 8;\n      const got = linearRingLength(flatCoords, offset, end, stride);\n      expect(got).to.be(expected);\n    });","file":"node/ol/geom/flat/length.test.js","skipped":false,"dir":"test"},{"name":"works with a single segment geometry longer than the desired chunks","suites":["ol/geom/flat/linechunk.js"],"updatePoint":{"line":4,"column":73,"index":241},"line":4,"code":"  it('works with a single segment geometry longer than the desired chunks', function () {\n    const flatCoordinates = [0, 0, 10, 0];\n    const result = lineChunk(3, flatCoordinates, 0, flatCoordinates.length, 2);\n    expect(result).to.eql([[0, 0, 3, 0], [3, 0, 6, 0], [6, 0, 9, 0], [9, 0, 10, 0]]);\n  });","file":"node/ol/geom/flat/linechunk.test.js","skipped":false,"dir":"test"},{"name":"works with a single segment geometry shorter than the desired chunks","suites":["ol/geom/flat/linechunk.js"],"updatePoint":{"line":9,"column":74,"index":547},"line":9,"code":"  it('works with a single segment geometry shorter than the desired chunks', function () {\n    const flatCoordinates = [0, 0, 2, 0];\n    const result = lineChunk(3, flatCoordinates, 0, flatCoordinates.length, 2);\n    expect(result).to.eql([[0, 0, 2, 0]]);\n  });","file":"node/ol/geom/flat/linechunk.test.js","skipped":false,"dir":"test"},{"name":"works with an arbitrary geometry","suites":["ol/geom/flat/linechunk.js"],"updatePoint":{"line":14,"column":38,"index":773},"line":14,"code":"  it('works with an arbitrary geometry', function () {\n    const flatCoordinates = [0, 0, 0, 2, 2, 2, 2, 4, 4, 4, 4, 6, 6, 6, 6, 8, 10, 8];\n    const result = lineChunk(3, flatCoordinates, 0, flatCoordinates.length, 2);\n    expect(result).to.eql([[0, 0, 0, 2, 1, 2], [1, 2, 2, 2, 2, 4], [2, 4, 4, 4, 4, 5], [4, 5, 4, 6, 6, 6], [6, 6, 6, 8, 7, 8], [7, 8, 10, 8]]);\n  });","file":"node/ol/geom/flat/linechunk.test.js","skipped":false,"dir":"test"},{"name":"identifies clockwise rings","suites":["ol/geom/flat/orient.js","linearRingIsClockwise"],"updatePoint":{"line":5,"column":34,"index":350},"line":5,"code":"    it('identifies clockwise rings', function () {\n      const flatCoordinates = [0, 1, 1, 4, 4, 3, 3, 0];\n      const isClockwise = linearRingIsClockwise(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClockwise).to.be(true);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"identifies anti-clockwise rings","suites":["ol/geom/flat/orient.js","linearRingIsClockwise"],"updatePoint":{"line":10,"column":39,"index":605},"line":10,"code":"    it('identifies anti-clockwise rings', function () {\n      const flatCoordinates = [2, 2, 3, 2, 3, 3, 2, 3];\n      const isClockwise = linearRingIsClockwise(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClockwise).to.be(false);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"identifies clockwise with duplicated coordinates","suites":["ol/geom/flat/orient.js","linearRingIsClockwise"],"updatePoint":{"line":15,"column":56,"index":878},"line":15,"code":"    it('identifies clockwise with duplicated coordinates', function () {\n      const flatCoordinates = [0, 1, 0, 1, 1, 4, 1, 4, 4, 3, 4, 3, 3, 0, 3, 0];\n      const isClockwise = linearRingIsClockwise(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClockwise).to.be(true);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"identifies anti-clockwise with duplicated coordinates","suites":["ol/geom/flat/orient.js","linearRingIsClockwise"],"updatePoint":{"line":20,"column":61,"index":1179},"line":20,"code":"    it('identifies anti-clockwise with duplicated coordinates', function () {\n      const flatCoordinates = [2, 2, 2, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 3, 2, 3];\n      const isClockwise = linearRingIsClockwise(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClockwise).to.be(false);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"identifies clockwise when last coordinate equals first","suites":["ol/geom/flat/orient.js","linearRingIsClockwise"],"updatePoint":{"line":25,"column":62,"index":1482},"line":25,"code":"    it('identifies clockwise when last coordinate equals first', function () {\n      const flatCoordinates = [0, 1, 1, 4, 4, 3, 3, 0, 0, 1];\n      const isClockwise = linearRingIsClockwise(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClockwise).to.be(true);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"identifies anti-clockwise when last coordinate equals first","suites":["ol/geom/flat/orient.js","linearRingIsClockwise"],"updatePoint":{"line":30,"column":67,"index":1771},"line":30,"code":"    it('identifies anti-clockwise when last coordinate equals first', function () {\n      const flatCoordinates = [2, 2, 3, 2, 3, 3, 2, 3, 2, 2];\n      const isClockwise = linearRingIsClockwise(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClockwise).to.be(false);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"returns undefined when ring has too few vertices","suites":["ol/geom/flat/orient.js","linearRingIsClockwise"],"updatePoint":{"line":35,"column":56,"index":2050},"line":35,"code":"    it('returns undefined when ring has too few vertices', function () {\n      const flatCoordinates = [2, 2, 3, 2];\n      const isClockwise = linearRingIsClockwise(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClockwise).to.be(undefined);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"checks for left-hand orientation by default","suites":["ol/geom/flat/orient.js","linearRingsAreOriented"],"updatePoint":{"line":46,"column":51,"index":2694},"line":46,"code":"    it('checks for left-hand orientation by default', function () {\n      expect(oriented(rightCoords, 0, ends, 2)).to.be(false);\n      expect(oriented(leftCoords, 0, ends, 2)).to.be(true);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"can check for right-hand orientation","suites":["ol/geom/flat/orient.js","linearRingsAreOriented"],"updatePoint":{"line":50,"column":44,"index":2885},"line":50,"code":"    it('can check for right-hand orientation', function () {\n      expect(oriented(rightCoords, 0, ends, 2, true)).to.be(true);\n      expect(oriented(leftCoords, 0, ends, 2, true)).to.be(false);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"checks for left-hand orientation by default","suites":["ol/geom/flat/orient.js","linearRingssAreOriented"],"updatePoint":{"line":60,"column":51,"index":3697},"line":60,"code":"    it('checks for left-hand orientation by default', function () {\n      expect(oriented(rightCoords, 0, ends, 2)).to.be(false);\n      expect(oriented(leftCoords, 0, ends, 2)).to.be(true);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"can check for right-hand orientation","suites":["ol/geom/flat/orient.js","linearRingssAreOriented"],"updatePoint":{"line":64,"column":44,"index":3888},"line":64,"code":"    it('can check for right-hand orientation', function () {\n      expect(oriented(rightCoords, 0, ends, 2, true)).to.be(true);\n      expect(oriented(leftCoords, 0, ends, 2, true)).to.be(false);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"orients using the left-hand rule by default","suites":["ol/geom/flat/orient.js","orientLinearRings"],"updatePoint":{"line":74,"column":51,"index":4470},"line":74,"code":"    it('orients using the left-hand rule by default', function () {\n      const rightClone = rightCoords.slice();\n      orient(rightClone, 0, ends, 2);\n      expect(rightClone).to.eql(leftCoords);\n      const leftClone = leftCoords.slice();\n      orient(leftClone, 0, ends, 2);\n      expect(leftClone).to.eql(leftCoords);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"can orient using the right-hand rule","suites":["ol/geom/flat/orient.js","orientLinearRings"],"updatePoint":{"line":82,"column":44,"index":4793},"line":82,"code":"    it('can orient using the right-hand rule', function () {\n      const rightClone = rightCoords.slice();\n      orient(rightClone, 0, ends, 2, true);\n      expect(rightClone).to.eql(rightCoords);\n      const leftClone = leftCoords.slice();\n      orient(leftClone, 0, ends, 2, true);\n      expect(leftClone).to.eql(rightCoords);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"orients using the left-hand rule by default","suites":["ol/geom/flat/orient.js","orientLinearRingsArray"],"updatePoint":{"line":96,"column":51,"index":5735},"line":96,"code":"    it('orients using the left-hand rule by default', function () {\n      const rightClone = rightCoords.slice();\n      orient(rightClone, 0, ends, 2);\n      expect(rightClone).to.eql(leftCoords);\n      const leftClone = leftCoords.slice();\n      orient(leftClone, 0, ends, 2);\n      expect(leftClone).to.eql(leftCoords);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"can orient using the right-hand rule","suites":["ol/geom/flat/orient.js","orientLinearRingsArray"],"updatePoint":{"line":104,"column":44,"index":6058},"line":104,"code":"    it('can orient using the right-hand rule', function () {\n      const rightClone = rightCoords.slice();\n      orient(rightClone, 0, ends, 2, true);\n      expect(rightClone).to.eql(rightCoords);\n      const leftClone = leftCoords.slice();\n      orient(leftClone, 0, ends, 2, true);\n      expect(leftClone).to.eql(rightCoords);\n    });","file":"node/ol/geom/flat/orient.test.js","skipped":false,"dir":"test"},{"name":"can reverse empty flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 2"],"updatePoint":{"line":6,"column":44,"index":321},"line":6,"code":"      it('can reverse empty flat coordinates', function () {\n        const flatCoordinates = [];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 2);\n        expect(flatCoordinates).to.be.empty();\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse one flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 2"],"updatePoint":{"line":11,"column":42,"index":548},"line":11,"code":"      it('can reverse one flat coordinates', function () {\n        const flatCoordinates = [1, 2];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 2);\n        expect(flatCoordinates).to.eql([1, 2]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse two flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 2"],"updatePoint":{"line":16,"column":42,"index":780},"line":16,"code":"      it('can reverse two flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 2);\n        expect(flatCoordinates).to.eql([3, 4, 1, 2]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse three flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 2"],"updatePoint":{"line":21,"column":44,"index":1026},"line":21,"code":"      it('can reverse three flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4, 5, 6];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 2);\n        expect(flatCoordinates).to.eql([5, 6, 3, 4, 1, 2]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse four flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 2"],"updatePoint":{"line":26,"column":43,"index":1283},"line":26,"code":"      it('can reverse four flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4, 5, 6, 7, 8];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 2);\n        expect(flatCoordinates).to.eql([7, 8, 5, 6, 3, 4, 1, 2]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse empty flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 3"],"updatePoint":{"line":33,"column":44,"index":1610},"line":33,"code":"      it('can reverse empty flat coordinates', function () {\n        const flatCoordinates = [];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 3);\n        expect(flatCoordinates).to.be.empty();\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse one flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 3"],"updatePoint":{"line":38,"column":42,"index":1837},"line":38,"code":"      it('can reverse one flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 3);\n        expect(flatCoordinates).to.eql([1, 2, 3]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse two flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 3"],"updatePoint":{"line":43,"column":42,"index":2075},"line":43,"code":"      it('can reverse two flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4, 5, 6];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 3);\n        expect(flatCoordinates).to.eql([4, 5, 6, 1, 2, 3]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse three flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 3"],"updatePoint":{"line":48,"column":44,"index":2333},"line":48,"code":"      it('can reverse three flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 3);\n        expect(flatCoordinates).to.eql([7, 8, 9, 4, 5, 6, 1, 2, 3]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse four flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 3"],"updatePoint":{"line":53,"column":43,"index":2608},"line":53,"code":"      it('can reverse four flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 3);\n        expect(flatCoordinates).to.eql([10, 11, 12, 7, 8, 9, 4, 5, 6, 1, 2, 3]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse empty flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 4"],"updatePoint":{"line":60,"column":44,"index":2965},"line":60,"code":"      it('can reverse empty flat coordinates', function () {\n        const flatCoordinates = [];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 4);\n        expect(flatCoordinates).to.be.empty();\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse one flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 4"],"updatePoint":{"line":65,"column":42,"index":3192},"line":65,"code":"      it('can reverse one flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 4);\n        expect(flatCoordinates).to.eql([1, 2, 3, 4]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse two flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 4"],"updatePoint":{"line":70,"column":42,"index":3436},"line":70,"code":"      it('can reverse two flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4, 5, 6, 7, 8];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 4);\n        expect(flatCoordinates).to.eql([5, 6, 7, 8, 1, 2, 3, 4]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse three flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 4"],"updatePoint":{"line":75,"column":44,"index":3706},"line":75,"code":"      it('can reverse three flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 4);\n        expect(flatCoordinates).to.eql([9, 10, 11, 12, 5, 6, 7, 8, 1, 2, 3, 4]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"can reverse four flat coordinates","suites":["ol/geom/flat/reverse.js","coordinates","with a stride of 4"],"updatePoint":{"line":80,"column":43,"index":4005},"line":80,"code":"      it('can reverse four flat coordinates', function () {\n        const flatCoordinates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n        reverseCoordinates(flatCoordinates, 0, flatCoordinates.length, 4);\n        expect(flatCoordinates).to.eql([13, 14, 15, 16, 9, 10, 11, 12, 5, 6, 7, 8, 1, 2, 3, 4]);\n      });","file":"node/ol/geom/flat/reverse.test.js","skipped":false,"dir":"test"},{"name":"executes the callback for each segment","suites":["ol/geom/flat/segments.js","forEach","callback returns undefined"],"updatePoint":{"line":14,"column":48,"index":534},"line":14,"code":"      it('executes the callback for each segment', function () {\n        const args = [];\n        const spy = sinon.spy(function (point1, point2) {\n          args.push([point1[0], point1[1], point2[0], point2[1]]);\n        });\n        const ret = forEachSegment(flatCoordinates, offset, end, stride, spy);\n        expect(spy.callCount).to.be(3);\n        expect(args[0][0]).to.be(0);\n        expect(args[0][1]).to.be(0);\n        expect(args[0][2]).to.be(1);\n        expect(args[0][3]).to.be(1);\n        expect(args[1][0]).to.be(1);\n        expect(args[1][1]).to.be(1);\n        expect(args[1][2]).to.be(2);\n        expect(args[1][3]).to.be(2);\n        expect(args[2][0]).to.be(2);\n        expect(args[2][1]).to.be(2);\n        expect(args[2][2]).to.be(3);\n        expect(args[2][3]).to.be(3);\n        expect(ret).to.be(false);\n      });","file":"node/ol/geom/flat/segments.test.js","skipped":false,"dir":"test"},{"name":"executes the callback for the first segment","suites":["ol/geom/flat/segments.js","forEach","callback returns true"],"updatePoint":{"line":37,"column":53,"index":1433},"line":37,"code":"      it('executes the callback for the first segment', function () {\n        const args = [];\n        const spy = sinon.spy(function (point1, point2) {\n          args.push([point1[0], point1[1], point2[0], point2[1]]);\n          return true;\n        });\n        const ret = forEachSegment(flatCoordinates, offset, end, stride, spy);\n        expect(spy.callCount).to.be(1);\n        expect(args[0][0]).to.be(0);\n        expect(args[0][1]).to.be(0);\n        expect(args[0][2]).to.be(1);\n        expect(args[0][3]).to.be(1);\n        expect(ret).to.be(true);\n      });","file":"node/ol/geom/flat/segments.test.js","skipped":false,"dir":"test"},{"name":"returns coordinates with the correct stride","suites":["ol/geom/flat/segments.js","forEach","callback returns true"],"updatePoint":{"line":52,"column":51,"index":2004},"line":52,"code":"    it('returns coordinates with the correct stride', function () {\n      const spy = sinon.spy();\n      forEachSegment([0, 0, 0, 1, 1, 1, 2, 2, 2], 0, 9, 3, spy);\n      expect(spy.callCount).to.be(2);\n      expect(spy.firstCall.args).to.eql([[0, 0, 0], [1, 1, 1]]);\n      expect(spy.secondCall.args).to.eql([[1, 1, 1], [2, 2, 2]]);\n    });","file":"node/ol/geom/flat/segments.test.js","skipped":false,"dir":"test"},{"name":"works with empty line strings","suites":["ol/geom/flat/simplify.js","simplifyLineString"],"updatePoint":{"line":9,"column":37,"index":4524},"line":9,"code":"    it('works with empty line strings', function () {\n      expect(simplifyLineString([], 0, 0, 2, 1, true)).to.eql([]);\n      expect(simplifyLineString([], 0, 0, 2, 1, false)).to.eql([]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works with a line string with a single point","suites":["ol/geom/flat/simplify.js","simplifyLineString"],"updatePoint":{"line":13,"column":52,"index":4736},"line":13,"code":"    it('works with a line string with a single point', function () {\n      expect(simplifyLineString([1, 2], 0, 2, 2, 1, true)).to.eql([1, 2]);\n      expect(simplifyLineString([1, 2], 0, 2, 2, 1, false)).to.eql([1, 2]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"returns the expected result with low quality","suites":["ol/geom/flat/simplify.js","simplifyLineString"],"updatePoint":{"line":17,"column":52,"index":4964},"line":17,"code":"    it('returns the expected result with low quality', function () {\n      const result = simplifyLineString(flatCoordinates, 0, flatCoordinates.length, 2, 25, false);\n      expect(result.length).to.be(simplifiedFlatCoordinates.length);\n      expect(result).to.eql(simplifiedFlatCoordinates);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"returns the expected result with high quality","suites":["ol/geom/flat/simplify.js","simplifyLineString"],"updatePoint":{"line":22,"column":53,"index":5266},"line":22,"code":"    it('returns the expected result with high quality', function () {\n      const result = simplifyLineString(flatCoordinates, 0, flatCoordinates.length, 2, 25, true);\n      expect(result.length).to.be(simplifiedHighQualityFlatCoordinates.length);\n      expect(result).to.eql(simplifiedHighQualityFlatCoordinates);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works with empty line strings","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":33,"column":37,"index":5690},"line":33,"code":"    it('works with empty line strings', function () {\n      expect(radialDistance([], 0, 0, 2, 1, dest, 0)).to.be(0);\n      expect(dest).to.eql([]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works with a line string with a single point","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":37,"column":52,"index":5862},"line":37,"code":"    it('works with a line string with a single point', function () {\n      expect(radialDistance([1, 2], 0, 2, 2, 1, dest, 0)).to.be(2);\n      expect(dest).to.eql([1, 2]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works with a line string with two points","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":41,"column":48,"index":6038},"line":41,"code":"    it('works with a line string with two points', function () {\n      expect(radialDistance([1, 2, 3, 4], 0, 4, 2, 1, dest, 0)).to.be(4);\n      expect(dest).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the points are widely spaced","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":45,"column":47,"index":6225},"line":45,"code":"    it('works when the points are widely spaced', function () {\n      expect(radialDistance([0, 0, 1, 0, 2, 0, 3, 0], 0, 8, 2, 0.5, dest, 0)).to.be(8);\n      expect(dest).to.eql([0, 0, 1, 0, 2, 0, 3, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the spacing matches the tolerance","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":49,"column":52,"index":6443},"line":49,"code":"    it('works when the spacing matches the tolerance', function () {\n      expect(radialDistance([0, 0, 1, 0, 2, 0, 3, 0], 0, 8, 2, 1, dest, 0)).to.be(6);\n      expect(dest).to.eql([0, 0, 2, 0, 3, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the points are closely spaced","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":53,"column":48,"index":6649},"line":53,"code":"    it('works when the points are closely spaced', function () {\n      expect(radialDistance([0, 0, 1, 0, 2, 0, 3, 0], 0, 8, 2, 1.5, dest, 0)).to.be(6);\n      expect(dest).to.eql([0, 0, 2, 0, 3, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the line oscillates with widely spaced points","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":57,"column":64,"index":6873},"line":57,"code":"    it('works when the line oscillates with widely spaced points', function () {\n      expect(radialDistance([0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], 0, 12, 2, 1, dest, 0)).to.be(12);\n      expect(dest).to.eql([0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the line oscillates with closely spaced points","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":61,"column":65,"index":7128},"line":61,"code":"    it('works when the line oscillates with closely spaced points', function () {\n      expect(radialDistance([0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], 0, 12, 2, 2, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 1, 1]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the line oscillates within the tolerance","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":65,"column":59,"index":7352},"line":65,"code":"    it('works when the line oscillates within the tolerance', function () {\n      expect(radialDistance([0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], 0, 14, 2, 2, dest, 0)).to.be(2);\n      expect(dest).to.eql([0, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works with real data","suites":["ol/geom/flat/simplify.js","radialDistance"],"updatePoint":{"line":69,"column":28,"index":7545},"line":69,"code":"    it('works with real data', function () {\n      expect(radialDistance(flatCoordinates, 0, flatCoordinates.length, 2, 25, dest, 0)).to.be(simplifiedRadiallyFlatCoordinates.length);\n      expect(dest).to.eql(simplifiedRadiallyFlatCoordinates);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works with empty line strings","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":79,"column":37,"index":7924},"line":79,"code":"    it('works with empty line strings', function () {\n      expect(douglasPeucker([], 0, 0, 2, 1, dest, 0)).to.be(0);\n      expect(dest).to.eql([]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works with a line string with a single point","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":83,"column":52,"index":8096},"line":83,"code":"    it('works with a line string with a single point', function () {\n      expect(douglasPeucker([1, 2], 0, 2, 2, 1, dest, 0)).to.be(2);\n      expect(dest).to.eql([1, 2]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works with a line string with two points","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":87,"column":48,"index":8272},"line":87,"code":"    it('works with a line string with two points', function () {\n      expect(douglasPeucker([1, 2, 3, 4], 0, 4, 2, 1, dest, 0)).to.be(4);\n      expect(dest).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the points are widely spaced","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":91,"column":47,"index":8459},"line":91,"code":"    it('works when the points are widely spaced', function () {\n      expect(douglasPeucker([0, 0, 1, 0, 2, 0, 3, 0], 0, 8, 2, 0.5, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 3, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the spacing matches the tolerance","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":95,"column":52,"index":8665},"line":95,"code":"    it('works when the spacing matches the tolerance', function () {\n      expect(douglasPeucker([0, 0, 1, 0, 2, 0, 3, 0], 0, 8, 2, 1, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 3, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the points are closely spaced","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":99,"column":48,"index":8865},"line":99,"code":"    it('works when the points are closely spaced', function () {\n      expect(douglasPeucker([0, 0, 1, 0, 2, 0, 3, 0], 0, 8, 2, 1.5, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 3, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"does not elimnate points outside the tolerance","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":103,"column":54,"index":9073},"line":103,"code":"    it('does not elimnate points outside the tolerance', function () {\n      expect(douglasPeucker([0, 0, 1, 1, 2, 0], 0, 6, 2, 0.5, dest, 0)).to.be(6);\n      expect(dest).to.eql([0, 0, 1, 1, 2, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"does eliminate points within the tolerance","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":107,"column":50,"index":9277},"line":107,"code":"    it('does eliminate points within the tolerance', function () {\n      expect(douglasPeucker([0, 0, 1, 1, 2, 0], 0, 6, 2, 2, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 2, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"does not eliminate multiple points outside the tolerance","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":111,"column":64,"index":9487},"line":111,"code":"    it('does not eliminate multiple points outside the tolerance', function () {\n      expect(douglasPeucker([0, 0, 1, 1, 1, -1, 2, 0], 0, 8, 2, 0.5, dest, 0)).to.be(8);\n      expect(dest).to.eql([0, 0, 1, 1, 1, -1, 2, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"does eliminate multiple points within the tolerance","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":115,"column":59,"index":9714},"line":115,"code":"    it('does eliminate multiple points within the tolerance', function () {\n      expect(douglasPeucker([0, 0, 1, 1, 1, -1, 2, 0], 0, 8, 2, 2, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 2, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the line oscillates with widely spaced points","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":119,"column":64,"index":9931},"line":119,"code":"    it('works when the line oscillates with widely spaced points', function () {\n      expect(douglasPeucker([0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], 0, 12, 2, 1, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 1, 1]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the line oscillates with closely spaced points","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":123,"column":65,"index":10161},"line":123,"code":"    it('works when the line oscillates with closely spaced points', function () {\n      expect(douglasPeucker([0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], 0, 12, 2, 2, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 1, 1]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works when the line oscillates within the tolerance","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":127,"column":59,"index":10385},"line":127,"code":"    it('works when the line oscillates within the tolerance', function () {\n      expect(douglasPeucker([0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], 0, 14, 2, 2, dest, 0)).to.be(4);\n      expect(dest).to.eql([0, 0, 0, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"works on small triangles","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":131,"column":32,"index":10588},"line":131,"code":"    it('works on small triangles', function () {\n      expect(douglasPeucker([3, 0, 4, 1, 5, 2, 5, 0], 0, 8, 2, 1, dest, 0)).to.be(6);\n      expect(dest).to.eql([3, 0, 5, 2, 5, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"is the same as high quality simplification","suites":["ol/geom/flat/simplify.js","douglasPeucker"],"updatePoint":{"line":135,"column":50,"index":10796},"line":135,"code":"    it('is the same as high quality simplification', function () {\n      expect(douglasPeucker(flatCoordinates, 0, flatCoordinates.length, 2, 25, dest, 0)).to.be(simplifiedHighQualityFlatCoordinates.length);\n      expect(dest).to.eql(simplifiedHighQualityFlatCoordinates);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"handles empty coordinates","suites":["ol/geom/flat/simplify.js","quantize"],"updatePoint":{"line":141,"column":33,"index":11103},"line":141,"code":"    it('handles empty coordinates', function () {\n      const simplifiedFlatCoordinates = [];\n      expect(quantize([], 0, 0, 2, 2, simplifiedFlatCoordinates, 0)).to.be(0);\n      expect(simplifiedFlatCoordinates).to.be.empty();\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"expands points to a zero-length line","suites":["ol/geom/flat/simplify.js","quantize"],"updatePoint":{"line":146,"column":44,"index":11350},"line":146,"code":"    it('expands points to a zero-length line', function () {\n      const simplifiedFlatCoordinates = [];\n      expect(quantize([0, 0, 0, 0], 0, 4, 2, 2, simplifiedFlatCoordinates, 0)).to.be(4);\n      expect(simplifiedFlatCoordinates).to.eql([0, 0, 0, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"snaps near-by points to the same value","suites":["ol/geom/flat/simplify.js","quantize"],"updatePoint":{"line":151,"column":46,"index":11616},"line":151,"code":"    it('snaps near-by points to the same value', function () {\n      const simplifiedFlatCoordinates = [];\n      expect(quantize([0.1, 0, 0, 0.1], 0, 4, 2, 2, simplifiedFlatCoordinates, 0)).to.be(4);\n      expect(simplifiedFlatCoordinates).to.eql([0, 0, 0, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"eliminates duplicate snapped points","suites":["ol/geom/flat/simplify.js","quantize"],"updatePoint":{"line":156,"column":43,"index":11883},"line":156,"code":"    it('eliminates duplicate snapped points', function () {\n      const simplifiedFlatCoordinates = [];\n      expect(quantize([0.1, 0, 2, 0, 2.1, 0, 2, 0.1, 1.9, 0, 2, -0.1], 0, 12, 2, 2, simplifiedFlatCoordinates, 0)).to.be(4);\n      expect(simplifiedFlatCoordinates).to.eql([0, 0, 2, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"eliminates horizontal colinear points","suites":["ol/geom/flat/simplify.js","quantize"],"updatePoint":{"line":161,"column":45,"index":12184},"line":161,"code":"    it('eliminates horizontal colinear points', function () {\n      const simplifiedFlatCoordinates = [];\n      expect(quantize([0, 0, 2, 0, 4, 0, 6, 0], 0, 8, 2, 2, simplifiedFlatCoordinates, 0)).to.be(4);\n      expect(simplifiedFlatCoordinates).to.eql([0, 0, 6, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"eliminates vertical colinear points","suites":["ol/geom/flat/simplify.js","quantize"],"updatePoint":{"line":166,"column":43,"index":12459},"line":166,"code":"    it('eliminates vertical colinear points', function () {\n      const simplifiedFlatCoordinates = [];\n      expect(quantize([0, 0, 0, -2, 0, -4, 0, -6], 0, 8, 2, 2, simplifiedFlatCoordinates, 0)).to.be(4);\n      expect(simplifiedFlatCoordinates).to.eql([0, 0, 0, -6]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"eliminates diagonal colinear points","suites":["ol/geom/flat/simplify.js","quantize"],"updatePoint":{"line":171,"column":43,"index":12738},"line":171,"code":"    it('eliminates diagonal colinear points', function () {\n      const simplifiedFlatCoordinates = [];\n      expect(quantize([0, 0, 2, -2, 4, -4, 6, -6], 0, 8, 2, 2, simplifiedFlatCoordinates, 0)).to.be(4);\n      expect(simplifiedFlatCoordinates).to.eql([0, 0, 6, -6]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"handles switchbacks","suites":["ol/geom/flat/simplify.js","quantize"],"updatePoint":{"line":176,"column":27,"index":13001},"line":176,"code":"    it('handles switchbacks', function () {\n      const simplifiedFlatCoordinates = [];\n      expect(quantize([0, 0, 2, 0, 0, 0, 4, 0], 0, 8, 2, 2, simplifiedFlatCoordinates, 0)).to.be(8);\n      expect(simplifiedFlatCoordinates).to.eql([0, 0, 2, 0, 0, 0, 4, 0]);\n    });","file":"node/ol/geom/flat/simplify.test.js","skipped":false,"dir":"test"},{"name":"returns whole line with angle delta","suites":["ol/geom/flat/straightchunk.js","matchingChunk","single segment with stride == 3"],"updatePoint":{"line":8,"column":45,"index":400},"line":8,"code":"      it('returns whole line with angle delta', function () {\n        const got = matchingChunk(Math.PI / 4, flatCoords, 0, 6, stride);\n        expect(got).to.eql([0, 6]);\n      });","file":"node/ol/geom/flat/straightchunk.test.js","skipped":false,"dir":"test"},{"name":"returns whole line with zero angle delta","suites":["ol/geom/flat/straightchunk.js","matchingChunk","single segment with stride == 3"],"updatePoint":{"line":12,"column":50,"index":587},"line":12,"code":"      it('returns whole line with zero angle delta', function () {\n        const got = matchingChunk(0, flatCoords, 0, 6, stride);\n        expect(got).to.eql([0, 6]);\n      });","file":"node/ol/geom/flat/straightchunk.test.js","skipped":false,"dir":"test"},{"name":"returns whole line if straight enough","suites":["ol/geom/flat/straightchunk.js","matchingChunk","short line string"],"updatePoint":{"line":20,"column":47,"index":892},"line":20,"code":"      it('returns whole line if straight enough', function () {\n        const got = matchingChunk(Math.PI, flatCoords, 0, 8, stride);\n        expect(got).to.eql([0, 8]);\n      });","file":"node/ol/geom/flat/straightchunk.test.js","skipped":false,"dir":"test"},{"name":"returns first matching chunk if all chunk lengths are the same","suites":["ol/geom/flat/straightchunk.js","matchingChunk","short line string"],"updatePoint":{"line":24,"column":72,"index":1097},"line":24,"code":"      it('returns first matching chunk if all chunk lengths are the same', function () {\n        const got = matchingChunk(Math.PI / 4, flatCoords, 0, 8, stride);\n        expect(got).to.eql([0, 4]);\n      });","file":"node/ol/geom/flat/straightchunk.test.js","skipped":false,"dir":"test"},{"name":"returns stright chunk from within the linestring","suites":["ol/geom/flat/straightchunk.js","matchingChunk","longer line string"],"updatePoint":{"line":32,"column":58,"index":1460},"line":32,"code":"      it('returns stright chunk from within the linestring', function () {\n        const got = matchingChunk(0, flatCoords, 0, 18, stride);\n        expect(got).to.eql([10, 16]);\n      });","file":"node/ol/geom/flat/straightchunk.test.js","skipped":false,"dir":"test"},{"name":"returns long chunk at the end if angle and length within threshold","suites":["ol/geom/flat/straightchunk.js","matchingChunk","longer line string"],"updatePoint":{"line":36,"column":76,"index":1666},"line":36,"code":"      it('returns long chunk at the end if angle and length within threshold', function () {\n        const got = matchingChunk(Math.PI / 4, flatCoords, 0, 18, stride);\n        expect(got).to.eql([10, 18]);\n      });","file":"node/ol/geom/flat/straightchunk.test.js","skipped":false,"dir":"test"},{"name":"center-aligns text on a horizontal line","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":14,"column":45,"index":658},"line":14,"code":"  it('center-aligns text on a horizontal line', function () {\n    const startM = 50 - 15;\n    const instructions = drawTextOnPath(horizontal, 0, horizontal.length, 2, 'foo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions).to.eql([[50, 0, 15, 0, 'foo']]);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"left-aligns text on a horizontal line","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":19,"column":43,"index":950},"line":19,"code":"  it('left-aligns text on a horizontal line', function () {\n    const instructions = drawTextOnPath(horizontal, 0, horizontal.length, 2, 'foo', 0, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions).to.eql([[15, 0, 15, 0, 'foo']]);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"right-aligns text on a horizontal line","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":23,"column":44,"index":1210},"line":23,"code":"  it('right-aligns text on a horizontal line', function () {\n    const startM = 100 - 30;\n    const instructions = drawTextOnPath(horizontal, 0, horizontal.length, 2, 'foo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions).to.eql([[85, 0, 15, 0, 'foo']]);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"draws text on a vertical line","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":28,"column":35,"index":1495},"line":28,"code":"  it('draws text on a vertical line', function () {\n    const startM = 50 - 15;\n    const instructions = drawTextOnPath(vertical, 0, vertical.length, 2, 'foo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    const a = 90 * Math.PI / 180;\n    expect(instructions).to.eql([[0, 50, 15, a, 'foo']]);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"draws text on a diagonal line","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":34,"column":35,"index":1809},"line":34,"code":"  it('draws text on a diagonal line', function () {\n    const startM = Math.sqrt(2) * 50 - 15;\n    const instructions = drawTextOnPath(diagonal, 0, diagonal.length, 2, 'foo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions[0][3]).to.be(45 * Math.PI / 180);\n    expect(instructions.length).to.be(1);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"draws reverse text on a diagonal line","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":40,"column":43,"index":2154},"line":40,"code":"  it('draws reverse text on a diagonal line', function () {\n    const startM = Math.sqrt(2) * 50 - 15;\n    const instructions = drawTextOnPath(reverse, 0, reverse.length, 2, 'foo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions[0][3]).to.be(-45 * Math.PI / 180);\n    expect(instructions.length).to.be(1);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"renders long text with extrapolation","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":46,"column":42,"index":2497},"line":46,"code":"  it('renders long text with extrapolation', function () {\n    const startM = 50 - 75;\n    const instructions = drawTextOnPath(horizontal, 0, horizontal.length, 2, 'foo-foo-foo-foo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions[0]).to.eql([50, 0, 75, 0, 'foo-foo-foo-foo']);\n    expect(instructions.length).to.be(1);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"renders angled text","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":52,"column":25,"index":2838},"line":52,"code":"  it('renders angled text', function () {\n    const length = lineStringLength(angled, 0, angled.length, 2);\n    const startM = length / 2 - 20;\n    const instructions = drawTextOnPath(angled, 0, angled.length, 2, 'fooo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions[0][3]).to.eql(45 * Math.PI / 180);\n    expect(instructions[0][4]).to.be('fo');\n    expect(instructions[1][3]).to.eql(-45 * Math.PI / 180);\n    expect(instructions[1][4]).to.be('oo');\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"respects maxAngle","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":61,"column":23,"index":3326},"line":61,"code":"  it('respects maxAngle', function () {\n    const length = lineStringLength(angled, 0, angled.length, 2);\n    const startM = length / 2 - 15;\n    const instructions = drawTextOnPath(angled, 0, angled.length, 2, 'foo', startM, Math.PI / 4, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions).to.be(null);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"uses the smallest angle for maxAngleDelta","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":67,"column":47,"index":3671},"line":67,"code":"  it('uses the smallest angle for maxAngleDelta', function () {\n    const length = lineStringLength(reverseangled, 0, reverseangled.length, 2);\n    const startM = length / 2 - 15;\n    const instructions = drawTextOnPath(reverseangled, 0, reverseangled.length, 2, 'foo', startM, Math.PI, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions).to.not.be(undefined);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"respects the offset option","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":73,"column":32,"index":4034},"line":73,"code":"  it('respects the offset option', function () {\n    const length = lineStringLength(angled, 2, angled.length, 2);\n    const startM = length / 2 - 15;\n    const instructions = drawTextOnPath(angled, 2, angled.length, 2, 'foo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions[0][3]).to.be(-45 * Math.PI / 180);\n    expect(instructions.length).to.be(1);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"respects the end option","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":80,"column":29,"index":4421},"line":80,"code":"  it('respects the end option', function () {\n    const length = lineStringLength(angled, 0, 4, 2);\n    const startM = length / 2 - 15;\n    const instructions = drawTextOnPath(angled, 0, 4, 2, 'foo', startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions[0][3]).to.be(45 * Math.PI / 180);\n    expect(instructions.length).to.be(1);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"renders multi-line in one segment","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":87,"column":39,"index":4793},"line":87,"code":"  it('renders multi-line in one segment', function () {\n    const foo = 'foo';\n    const bar = 'bar';\n    const text = foo + '\\n' + bar;\n    const pathLength = lineStringLength(angled, 2, angled.length, 2);\n    const textLength = measureAndCacheTextWidth('', bar);\n    const textAlign = 0.5;\n    const startM = (pathLength - textLength) * textAlign;\n    const instructions = drawTextOnPath(angled, 0, angled.length, 2, text, startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions[0][3]).to.be(45 * Math.PI / 180);\n    expect(instructions[0][4]).to.be(text);\n    expect(instructions.length).to.be(1);\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"renders multi-line as single-line across segments","suites":["ol/geom/flat/drawTextOnPath.js"],"updatePoint":{"line":100,"column":55,"index":5440},"line":100,"code":"  it('renders multi-line as single-line across segments', function () {\n    const foo = 'foo-foo-foo';\n    const bar = 'bar-bar-bar-bar-bar-bar-bar';\n    const text = foo + '\\n' + bar;\n    const pathLength = lineStringLength(angled, 2, angled.length, 2);\n    const textLength = measureAndCacheTextWidth('', bar);\n    const textAlign = 0.5;\n    const startM = (pathLength - textLength) * textAlign;\n    const instructions = drawTextOnPath(angled, 0, angled.length, 2, text, startM, Infinity, 1, measureAndCacheTextWidth, '', {});\n    expect(instructions[0][3]).to.be(45 * Math.PI / 180);\n    expect(instructions[0][4]).to.be('foo-foo-foo bar-bar-b');\n    expect(instructions.length).to.be(2);\n    expect(instructions[1][3]).to.be(-45 * Math.PI / 180);\n    expect(instructions[1][4]).to.be('ar-bar-bar-bar-bar');\n  });","file":"node/ol/geom/flat/textpath.test.js","skipped":false,"dir":"test"},{"name":"identifies closed lines aka boundaries","suites":["ol/geom/flat/topology.js","lineStringIsClosed"],"updatePoint":{"line":5,"column":46,"index":268},"line":5,"code":"    it('identifies closed lines aka boundaries', function () {\n      const flatCoordinates = [0, 0, 3, 0, 0, 3, 0, 0];\n      const isClosed = lineStringIsClosed(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClosed).to.be(true);\n    });","file":"node/ol/geom/flat/topologyflatgeom.test.js","skipped":false,"dir":"test"},{"name":"identifies regular linestrings","suites":["ol/geom/flat/topology.js","lineStringIsClosed"],"updatePoint":{"line":10,"column":38,"index":513},"line":10,"code":"    it('identifies regular linestrings', function () {\n      const flatCoordinates = [0, 0, 3, 0, 0, 3, 5, 2];\n      const isClosed = lineStringIsClosed(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClosed).to.be(false);\n    });","file":"node/ol/geom/flat/topologyflatgeom.test.js","skipped":false,"dir":"test"},{"name":"identifies degenerate boundaries","suites":["ol/geom/flat/topology.js","lineStringIsClosed"],"updatePoint":{"line":15,"column":40,"index":761},"line":15,"code":"    it('identifies degenerate boundaries', function () {\n      let flatCoordinates = [0, 0, 3, 0, 0, 0];\n      let isClosed = lineStringIsClosed(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClosed).to.be(false);\n      flatCoordinates = [0, 0, 1, 1, 3, 3, 5, 5, 0, 0];\n      isClosed = lineStringIsClosed(flatCoordinates, 0, flatCoordinates.length, 2);\n      expect(isClosed).to.be(false);\n    });","file":"node/ol/geom/flat/topologyflatgeom.test.js","skipped":false,"dir":"test"},{"name":"transforms a Simple Geometry to 2D","suites":["ol/geom/flat/transform.js","transform2D"],"updatePoint":{"line":7,"column":42,"index":409},"line":7,"code":"    it('transforms a Simple Geometry to 2D', function () {\n      const multiPolygonGeometry = new MultiPolygon([[[[-80.736061, 28.788576000000006, 0], [-80.763557, 28.821799999999996, 0], [-80.817406, 28.895123999999996, 0], [-80.891304, 29.013130000000004, 0], [-80.916512, 29.071560000000005, 0], [-80.899323, 29.061249000000004, 0], [-80.862663, 28.991361999999995, 0], [-80.736061, 28.788576000000006, 0]]], [[[-82.102127, 26.585724, 0], [-82.067139, 26.497208, 0], [-82.097641, 26.493585999999993, 0], [-82.135895, 26.642279000000002, 0], [-82.183495, 26.683082999999996, 0], [-82.128838, 26.693342, 0], [-82.102127, 26.585724, 0]]]]).transform('EPSG:4326', 'EPSG:3857');\n      const transform = [0.0004088332670837288, 0, 0, -0.0004088332670837288, 4480.991370439071, 1529.5752568707105];\n      const pixelCoordinates = transformGeom2D(multiPolygonGeometry, transform, []);\n      expect(pixelCoordinates[0]).to.roughlyEqual(806.6035275946265, 1e-9);\n      expect(pixelCoordinates[1]).to.roughlyEqual(160.48916296287916, 1e-9);\n      expect(pixelCoordinates[2]).to.roughlyEqual(805.3521540835154, 1e-9);\n      expect(pixelCoordinates[3]).to.roughlyEqual(158.76358389011807, 1e-9);\n      expect(pixelCoordinates[4]).to.roughlyEqual(802.9014262612932, 1e-9);\n      expect(pixelCoordinates[5]).to.roughlyEqual(154.95335187132082, 1e-9);\n      expect(pixelCoordinates[6]).to.roughlyEqual(799.5382461724039, 1e-9);\n      expect(pixelCoordinates[7]).to.roughlyEqual(148.815592819916, 1e-9);\n      expect(pixelCoordinates[8]).to.roughlyEqual(798.3910020835165, 1e-9);\n      expect(pixelCoordinates[9]).to.roughlyEqual(145.77392230456553, 1e-9);\n      expect(pixelCoordinates[10]).to.roughlyEqual(799.1732925724045, 1e-9);\n      expect(pixelCoordinates[11]).to.roughlyEqual(146.31080369865776, 1e-9);\n      expect(pixelCoordinates[12]).to.roughlyEqual(800.8417299057378, 1e-9);\n      expect(pixelCoordinates[13]).to.roughlyEqual(149.94832216046188, 1e-9);\n      expect(pixelCoordinates[14]).to.roughlyEqual(806.6035275946265, 1e-9);\n      expect(pixelCoordinates[15]).to.roughlyEqual(160.48916296287916, 1e-9);\n      expect(pixelCoordinates[16]).to.roughlyEqual(744.4323460835158, 1e-9);\n      expect(pixelCoordinates[17]).to.roughlyEqual(273.7179168205373, 1e-9);\n      expect(pixelCoordinates[18]).to.roughlyEqual(746.0246888390716, 1e-9);\n      expect(pixelCoordinates[19]).to.roughlyEqual(278.22094795365365, 1e-9);\n      expect(pixelCoordinates[20]).to.roughlyEqual(744.6365089279602, 1e-9);\n      expect(pixelCoordinates[21]).to.roughlyEqual(278.40513424671826, 1e-9);\n      expect(pixelCoordinates[22]).to.roughlyEqual(742.8955268835157, 1e-9);\n      expect(pixelCoordinates[23]).to.roughlyEqual(270.83899948444764, 1e-9);\n      expect(pixelCoordinates[24]).to.roughlyEqual(740.7291979946272, 1e-9);\n      expect(pixelCoordinates[25]).to.roughlyEqual(268.76099731369345, 1e-9);\n      expect(pixelCoordinates[26]).to.roughlyEqual(743.2166987946266, 1e-9);\n      expect(pixelCoordinates[27]).to.roughlyEqual(268.23842607400616, 1e-9);\n      expect(pixelCoordinates[28]).to.roughlyEqual(744.4323460835158, 1e-9);\n      expect(pixelCoordinates[29]).to.roughlyEqual(273.7179168205373, 1e-9);\n    });","file":"node/ol/geom/flat/transform.test.js","skipped":false,"dir":"test"},{"name":"translates the coordinates array","suites":["ol/geom/flat/transform.js","translate"],"updatePoint":{"line":44,"column":40,"index":3650},"line":44,"code":"    it('translates the coordinates array', function () {\n      const multiPolygon = new MultiPolygon([[[[0, 0, 2], [0, 1, 2], [1, 1, 2], [1, 0, 2], [0, 0, 2]]], [[[2, 2, 3], [2, 3, 3], [3, 3, 3], [3, 2, 3], [2, 2, 3]]]]);\n      const flatCoordinates = multiPolygon.getFlatCoordinates();\n      const deltaX = 1;\n      const deltaY = 2;\n      translate(flatCoordinates, 0, flatCoordinates.length, multiPolygon.getStride(), deltaX, deltaY, flatCoordinates);\n      expect(flatCoordinates).to.eql([1, 2, 2, 1, 3, 2, 2, 3, 2, 2, 2, 2, 1, 2, 2, 3, 4, 3, 3, 5, 3, 4, 5, 3, 4, 4, 3, 3, 4, 3]);\n    });","file":"node/ol/geom/flat/transform.test.js","skipped":false,"dir":"test"},{"name":"rotates the coordinates array","suites":["ol/geom/flat/transform.js","rotate"],"updatePoint":{"line":54,"column":37,"index":4281},"line":54,"code":"    it('rotates the coordinates array', function () {\n      const multiPolygon = new MultiPolygon([[[[0, 0, 2], [0, 1, 2], [1, 1, 2], [1, 0, 2], [0, 0, 2]]], [[[2, 2, 3], [2, 3, 3], [3, 3, 3], [3, 2, 3], [2, 2, 3]]]]);\n      const flatCoordinates = multiPolygon.getFlatCoordinates();\n      const angle = Math.PI / 2;\n      const anchor = [0, 1];\n      rotate(flatCoordinates, 0, flatCoordinates.length, multiPolygon.getStride(), angle, anchor, flatCoordinates);\n      expect(flatCoordinates[0]).to.roughlyEqual(1, 1e-9);\n      expect(flatCoordinates[1]).to.roughlyEqual(1, 1e-9);\n      expect(flatCoordinates[2]).to.roughlyEqual(2, 1e-9);\n      expect(flatCoordinates[3]).to.roughlyEqual(0, 1e-9);\n      expect(flatCoordinates[4]).to.roughlyEqual(1, 1e-9);\n      expect(flatCoordinates[5]).to.roughlyEqual(2, 1e-9);\n      expect(flatCoordinates[6]).to.roughlyEqual(Math.cos(angle), 1e-9);\n      expect(flatCoordinates[7]).to.roughlyEqual(2, 1e-9);\n      expect(flatCoordinates[8]).to.roughlyEqual(2, 1e-9);\n      expect(flatCoordinates[9]).to.roughlyEqual(1, 1e-9);\n      expect(flatCoordinates[10]).to.roughlyEqual(2, 1e-9);\n      expect(flatCoordinates[11]).to.roughlyEqual(2, 1e-9);\n      expect(flatCoordinates[12]).to.roughlyEqual(1, 1e-9);\n      expect(flatCoordinates[13]).to.roughlyEqual(1, 1e-9);\n      expect(flatCoordinates[14]).to.roughlyEqual(2, 1e-9);\n      expect(flatCoordinates[15]).to.roughlyEqual(-1, 1e-9);\n      expect(flatCoordinates[16]).to.roughlyEqual(3, 1e-9);\n      expect(flatCoordinates[17]).to.roughlyEqual(3, 1e-9);\n      expect(flatCoordinates[18]).to.roughlyEqual(-2, 1e-9);\n      expect(flatCoordinates[19]).to.roughlyEqual(3, 1e-9);\n      expect(flatCoordinates[20]).to.roughlyEqual(3, 1e-9);\n      expect(flatCoordinates[21]).to.roughlyEqual(-2, 1e-9);\n      expect(flatCoordinates[22]).to.roughlyEqual(4, 1e-9);\n      expect(flatCoordinates[23]).to.roughlyEqual(3, 1e-9);\n      expect(flatCoordinates[24]).to.roughlyEqual(-1, 1e-9);\n      expect(flatCoordinates[25]).to.roughlyEqual(4, 1e-9);\n      expect(flatCoordinates[26]).to.roughlyEqual(3, 1e-9);\n      expect(flatCoordinates[27]).to.roughlyEqual(-1, 1e-9);\n      expect(flatCoordinates[28]).to.roughlyEqual(3, 1e-9);\n      expect(flatCoordinates[29]).to.roughlyEqual(3, 1e-9);\n    });","file":"node/ol/geom/flat/transform.test.js","skipped":false,"dir":"test"},{"name":"creates a geometry collection from an array of geometries","suites":["ol/geom/GeometryCollection.js","constructor"],"updatePoint":{"line":20,"column":65,"index":990},"line":20,"code":"    it('creates a geometry collection from an array of geometries', function () {\n      expect(multi).to.be.a(GeometryCollection);\n      expect(multi).to.be.a(Geometry);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"fires a change event when one of its component changes","suites":["ol/geom/GeometryCollection.js","constructor"],"updatePoint":{"line":24,"column":62,"index":1165},"line":24,"code":"    it('fires a change event when one of its component changes', function (done) {\n      multi.on('change', function () {\n        done();\n      });\n      point.setCoordinates([10, 10]);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"deregister old components","suites":["ol/geom/GeometryCollection.js","constructor"],"updatePoint":{"line":30,"column":33,"index":1330},"line":30,"code":"    it('deregister old components', function () {\n      multi.setGeometries([poly]);\n      multi.on('change', function () {\n        expect().fail();\n      });\n      point.setCoordinates([10, 10]);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"register new components","suites":["ol/geom/GeometryCollection.js","constructor"],"updatePoint":{"line":37,"column":31,"index":1533},"line":37,"code":"    it('register new components', function (done) {\n      const point2 = new Point([10, 20]);\n      multi.setGeometriesArray([point2]);\n      multi.on('change', function () {\n        done();\n      });\n      point2.setCoordinates([10, 10]);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"returns a collection of geometries","suites":["ol/geom/GeometryCollection.js","#getGeometries"],"updatePoint":{"line":47,"column":42,"index":1841},"line":47,"code":"    it('returns a collection of geometries', function () {\n      const point = new Point([10, 20]);\n      const line = new LineString([[10, 20], [30, 40]]);\n      const poly = new Polygon([outer, inner1, inner2]);\n      const multi = new GeometryCollection([point, line, poly]);\n      const geometries = multi.getGeometries();\n      expect(geometries).to.be.an(Array);\n      expect(geometries).to.have.length(3);\n      expect(geometries[0]).to.be.a(Point);\n      expect(geometries[1]).to.be.a(LineString);\n      expect(geometries[2]).to.be.a(Polygon);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"has a working clone method","suites":["ol/geom/GeometryCollection.js","#clone()"],"updatePoint":{"line":61,"column":34,"index":2436},"line":61,"code":"    it('has a working clone method', function () {\n      const point = new Point([10, 20]);\n      const line = new LineString([[10, 20], [30, 40]]);\n      const poly = new Polygon([outer, inner1, inner2]);\n      const multi = new GeometryCollection([point, line, poly]);\n      multi.setProperties({\n        foo: 'bar',\n        baz: null\n      });\n      const clone = multi.clone();\n      expect(clone).to.not.be(multi);\n      const geometries = clone.getGeometries();\n      expect(geometries[0].getCoordinates()).to.eql([10, 20]);\n      expect(geometries[1].getCoordinates()).to.eql([[10, 20], [30, 40]]);\n      expect(geometries[2].getCoordinates()).to.eql([outer, inner1, inner2]);\n      expect(clone.getProperties()).to.eql({\n        foo: 'bar',\n        baz: null\n      });\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"does a deep clone","suites":["ol/geom/GeometryCollection.js","#clone()"],"updatePoint":{"line":81,"column":25,"index":3212},"line":81,"code":"    it('does a deep clone', function () {\n      const point = new Point([30, 40]);\n      const originalGeometries = [point];\n      const multi = new GeometryCollection(originalGeometries);\n      const clone = multi.clone();\n      const clonedGeometries = clone.getGeometries();\n      expect(clonedGeometries).not.to.be(originalGeometries);\n      expect(clonedGeometries).to.have.length(originalGeometries.length);\n      expect(clonedGeometries).to.have.length(1);\n      expect(clonedGeometries[0]).not.to.be(originalGeometries[0]);\n      expect(clonedGeometries[0].getCoordinates()).to.eql(originalGeometries[0].getCoordinates());\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"returns the bounding extent","suites":["ol/geom/GeometryCollection.js","#getExtent()"],"updatePoint":{"line":95,"column":35,"index":3908},"line":95,"code":"    it('returns the bounding extent', function () {\n      const point = new Point([10, 2]);\n      const line = new LineString([[1, 20], [30, 40]]);\n      const multi = new GeometryCollection([point, line]);\n      const extent = multi.getExtent();\n      expect(extent[0]).to.be(1);\n      expect(extent[2]).to.be(30);\n      expect(extent[1]).to.be(2);\n      expect(extent[3]).to.be(40);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"returns true for intersecting point","suites":["ol/geom/GeometryCollection.js","#intersectsExtent()"],"updatePoint":{"line":114,"column":43,"index":4629},"line":114,"code":"    it('returns true for intersecting point', function () {\n      expect(multi.intersectsExtent([5, 20, 5, 20])).to.be(true);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"returns true for intersecting part of lineString","suites":["ol/geom/GeometryCollection.js","#intersectsExtent()"],"updatePoint":{"line":117,"column":56,"index":4776},"line":117,"code":"    it('returns true for intersecting part of lineString', function () {\n      expect(multi.intersectsExtent([25, 35, 30, 40])).to.be(true);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"returns true for intersecting part of polygon","suites":["ol/geom/GeometryCollection.js","#intersectsExtent()"],"updatePoint":{"line":120,"column":53,"index":4922},"line":120,"code":"    it('returns true for intersecting part of polygon', function () {\n      expect(multi.intersectsExtent([0, 0, 5, 5])).to.be(true);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"returns false for non-matching extent within own extent","suites":["ol/geom/GeometryCollection.js","#intersectsExtent()"],"updatePoint":{"line":123,"column":63,"index":5074},"line":123,"code":"    it('returns false for non-matching extent within own extent', function () {\n      const extent = [0, 35, 5, 40];\n      expect(poly.intersectsExtent(extent)).to.be(false);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"fires a change event","suites":["ol/geom/GeometryCollection.js","#setGeometries"],"updatePoint":{"line":136,"column":28,"index":5538},"line":136,"code":"    it('fires a change event', function () {\n      const listener = sinon.spy();\n      multi.on('change', listener);\n      multi.setGeometries([point, line, poly]);\n      expect(listener.calledOnce).to.be(true);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"updates the extent","suites":["ol/geom/GeometryCollection.js","#setGeometries"],"updatePoint":{"line":142,"column":26,"index":5756},"line":142,"code":"    it('updates the extent', function () {\n      expect(multi.getExtent()).to.eql([0, 0, 30, 40]);\n      line.setCoordinates([[10, 20], [300, 400]]);\n      expect(multi.getExtent()).to.eql([0, 0, 300, 400]);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"scales a collection","suites":["ol/geom/GeometryCollection.js","#scale()"],"updatePoint":{"line":149,"column":27,"index":6016},"line":149,"code":"    it('scales a collection', function () {\n      const geom = new GeometryCollection([new Point([-1, -2]), new LineString([[0, 0], [1, 2]])]);\n      geom.scale(10);\n      const geometries = geom.getGeometries();\n      expect(geometries[0].getCoordinates()).to.eql([-10, -20]);\n      expect(geometries[1].getCoordinates()).to.eql([[0, 0], [10, 20]]);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"accepts sx and sy","suites":["ol/geom/GeometryCollection.js","#scale()"],"updatePoint":{"line":156,"column":25,"index":6373},"line":156,"code":"    it('accepts sx and sy', function () {\n      const geom = new GeometryCollection([new Point([-1, -2]), new LineString([[0, 0], [1, 2]])]);\n      geom.scale(2, 3);\n      const geometries = geom.getGeometries();\n      expect(geometries[0].getCoordinates()).to.eql([-2, -6]);\n      expect(geometries[1].getCoordinates()).to.eql([[0, 0], [2, 6]]);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"accepts an anchor","suites":["ol/geom/GeometryCollection.js","#scale()"],"updatePoint":{"line":163,"column":25,"index":6728},"line":163,"code":"    it('accepts an anchor', function () {\n      const geom = new GeometryCollection([new Point([-1, -2]), new LineString([[0, 0], [1, 2]])]);\n      geom.scale(10, 15, [-1, -2]);\n      const geometries = geom.getGeometries();\n      expect(geometries[0].getCoordinates()).to.eql([-1, -2]);\n      expect(geometries[1].getCoordinates()).to.eql([[9, 28], [19, 58]]);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"transforms all geometries","suites":["ol/geom/GeometryCollection.js","#transform()"],"updatePoint":{"line":178,"column":33,"index":7357},"line":178,"code":"    it('transforms all geometries', function () {\n      multi.transform('EPSG:4326', 'EPSG:3857');\n      const geometries = multi.getGeometries();\n      expect(geometries[0]).to.be.a(Point);\n      expect(geometries[1]).to.be.a(LineString);\n      let coords = geometries[0].getCoordinates();\n      expect(coords[0]).to.roughlyEqual(1113194.9, 1e-2);\n      expect(coords[1]).to.roughlyEqual(2273030.92, 1e-2);\n      coords = geometries[1].getCoordinates();\n      expect(coords[0][0]).to.roughlyEqual(1113194.9, 1e-2);\n      expect(coords[0][1]).to.roughlyEqual(2273030.92, 1e-2);\n      expect(coords[1][0]).to.roughlyEqual(3339584.72, 1e-2);\n      expect(coords[1][1]).to.roughlyEqual(4865942.27, 1e-2);\n    });","file":"node/ol/geom/GeometryCollection.test.js","skipped":false,"dir":"test"},{"name":"cannot be constructed with a null geometry","suites":["ol/geom/LineString.js"],"updatePoint":{"line":6,"column":48,"index":282},"line":6,"code":"  it('cannot be constructed with a null geometry', function () {\n    expect(function () {\n      return new LineString(null);\n    }).to.throwException();\n  });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"defaults to layout XY","suites":["ol/geom/LineString.js","construct empty"],"updatePoint":{"line":16,"column":29,"index":562},"line":16,"code":"    it('defaults to layout XY', function () {\n      expect(lineString.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has empty coordinates","suites":["ol/geom/LineString.js","construct empty"],"updatePoint":{"line":19,"column":29,"index":666},"line":19,"code":"    it('has empty coordinates', function () {\n      expect(lineString.getCoordinates()).to.be.empty();\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has an empty extent","suites":["ol/geom/LineString.js","construct empty"],"updatePoint":{"line":22,"column":27,"index":775},"line":22,"code":"    it('has an empty extent', function () {\n      expect(isEmpty(lineString.getExtent())).to.be(true);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has empty flat coordinates","suites":["ol/geom/LineString.js","construct empty"],"updatePoint":{"line":25,"column":34,"index":893},"line":25,"code":"    it('has empty flat coordinates', function () {\n      expect(lineString.getFlatCoordinates()).to.be.empty();\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/LineString.js","construct empty"],"updatePoint":{"line":28,"column":38,"index":1017},"line":28,"code":"    it('has stride the expected stride', function () {\n      expect(lineString.getStride()).to.be(2);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"can append coordinates","suites":["ol/geom/LineString.js","construct empty"],"updatePoint":{"line":31,"column":30,"index":1119},"line":31,"code":"    it('can append coordinates', function () {\n      lineString.appendCoordinate([1, 2]);\n      expect(lineString.getCoordinates()).to.eql([[1, 2]]);\n      lineString.appendCoordinate([3, 4]);\n      expect(lineString.getCoordinates()).to.eql([[1, 2], [3, 4]]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/LineString.js","construct with 2D coordinates"],"updatePoint":{"line":43,"column":31,"index":1563},"line":43,"code":"    it('has the expected layout', function () {\n      expect(lineString.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/LineString.js","construct with 2D coordinates"],"updatePoint":{"line":46,"column":36,"index":1674},"line":46,"code":"    it('has the expected coordinates', function () {\n      expect(lineString.getCoordinates()).to.eql([[1, 2], [3, 4]]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/LineString.js","construct with 2D coordinates"],"updatePoint":{"line":49,"column":31,"index":1798},"line":49,"code":"    it('has the expected extent', function () {\n      expect(lineString.getExtent()).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/LineString.js","construct with 2D coordinates"],"updatePoint":{"line":52,"column":41,"index":1923},"line":52,"code":"    it('has the expected flat coordinates', function () {\n      expect(lineString.getFlatCoordinates()).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/LineString.js","construct with 2D coordinates"],"updatePoint":{"line":55,"column":38,"index":2054},"line":55,"code":"    it('has stride the expected stride', function () {\n      expect(lineString.getStride()).to.be(2);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns true for an intersecting coordinate","suites":["ol/geom/LineString.js","construct with 2D coordinates","#intersectsCoordinate"],"updatePoint":{"line":59,"column":53,"index":2231},"line":59,"code":"      it('returns true for an intersecting coordinate', function () {\n        expect(lineString.intersectsCoordinate([1.5, 2.5])).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return false for non matching extent","suites":["ol/geom/LineString.js","construct with 2D coordinates","#intersectsExtent"],"updatePoint":{"line":64,"column":46,"index":2433},"line":64,"code":"      it('return false for non matching extent', function () {\n        expect(lineString.intersectsExtent([1, 3, 1.9, 4])).to.be(false);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return true for extent on midpoint","suites":["ol/geom/LineString.js","construct with 2D coordinates","#intersectsExtent"],"updatePoint":{"line":67,"column":44,"index":2578},"line":67,"code":"      it('return true for extent on midpoint', function () {\n        expect(lineString.intersectsExtent([2, 3, 4, 3])).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns true for the geom's own extent","suites":["ol/geom/LineString.js","construct with 2D coordinates","#intersectsExtent"],"updatePoint":{"line":70,"column":48,"index":2724},"line":70,"code":"      it(\"returns true for the geom's own extent\", function () {\n        expect(lineString.intersectsExtent(lineString.getExtent())).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"detects intersecting coordinates","suites":["ol/geom/LineString.js","construct with 2D coordinates","#intersectsCoordinate"],"updatePoint":{"line":75,"column":42,"index":2934},"line":75,"code":"      it('detects intersecting coordinates', function () {\n        expect(lineString.intersectsCoordinate([1, 2])).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"uses existing vertices","suites":["ol/geom/LineString.js","construct with 2D coordinates","#getClosestPoint"],"updatePoint":{"line":80,"column":32,"index":3117},"line":80,"code":"      it('uses existing vertices', function () {\n        const closestPoint = lineString.getClosestPoint([0.9, 1.8]);\n        expect(closestPoint).to.eql([1, 2]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return the first point when fraction is 0","suites":["ol/geom/LineString.js","construct with 2D coordinates","#getCoordinateAt"],"updatePoint":{"line":86,"column":51,"index":3364},"line":86,"code":"      it('return the first point when fraction is 0', function () {\n        expect(lineString.getCoordinateAt(0)).to.eql([1, 2]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return the last point when fraction is 1","suites":["ol/geom/LineString.js","construct with 2D coordinates","#getCoordinateAt"],"updatePoint":{"line":89,"column":50,"index":3503},"line":89,"code":"      it('return the last point when fraction is 1', function () {\n        expect(lineString.getCoordinateAt(1)).to.eql([3, 4]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return the mid point when fraction is 0.5","suites":["ol/geom/LineString.js","construct with 2D coordinates","#getCoordinateAt"],"updatePoint":{"line":92,"column":51,"index":3643},"line":92,"code":"      it('return the mid point when fraction is 0.5', function () {\n        expect(lineString.getCoordinateAt(0.5)).to.eql([2, 3]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/LineString.js","construct with 3D coordinates"],"updatePoint":{"line":102,"column":31,"index":3953},"line":102,"code":"    it('has the expected layout', function () {\n      expect(lineString.getLayout()).to.be('XYZ');\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/LineString.js","construct with 3D coordinates"],"updatePoint":{"line":105,"column":36,"index":4065},"line":105,"code":"    it('has the expected coordinates', function () {\n      expect(lineString.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/LineString.js","construct with 3D coordinates"],"updatePoint":{"line":108,"column":31,"index":4195},"line":108,"code":"    it('has the expected extent', function () {\n      expect(lineString.getExtent()).to.eql([1, 2, 4, 5]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/LineString.js","construct with 3D coordinates"],"updatePoint":{"line":111,"column":41,"index":4320},"line":111,"code":"    it('has the expected flat coordinates', function () {\n      expect(lineString.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected stride","suites":["ol/geom/LineString.js","construct with 3D coordinates"],"updatePoint":{"line":114,"column":31,"index":4450},"line":114,"code":"    it('has the expected stride', function () {\n      expect(lineString.getStride()).to.be(3);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return false for non matching extent","suites":["ol/geom/LineString.js","construct with 3D coordinates","#intersectsExtent"],"updatePoint":{"line":118,"column":46,"index":4616},"line":118,"code":"      it('return false for non matching extent', function () {\n        expect(lineString.intersectsExtent([1, 3, 1.9, 4])).to.be(false);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return true for extent on midpoint","suites":["ol/geom/LineString.js","construct with 3D coordinates","#intersectsExtent"],"updatePoint":{"line":121,"column":44,"index":4761},"line":121,"code":"      it('return true for extent on midpoint', function () {\n        expect(lineString.intersectsExtent([2, 3, 4, 3])).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns true for the geom's own extent","suites":["ol/geom/LineString.js","construct with 3D coordinates","#intersectsExtent"],"updatePoint":{"line":124,"column":48,"index":4907},"line":124,"code":"      it(\"returns true for the geom's own extent\", function () {\n        expect(lineString.intersectsExtent(lineString.getExtent())).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/LineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":134,"column":31,"index":5256},"line":134,"code":"    it('has the expected layout', function () {\n      expect(lineString.getLayout()).to.be('XYM');\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/LineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":137,"column":36,"index":5368},"line":137,"code":"    it('has the expected coordinates', function () {\n      expect(lineString.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/LineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":140,"column":31,"index":5498},"line":140,"code":"    it('has the expected extent', function () {\n      expect(lineString.getExtent()).to.eql([1, 2, 4, 5]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/LineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":143,"column":41,"index":5623},"line":143,"code":"    it('has the expected flat coordinates', function () {\n      expect(lineString.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected stride","suites":["ol/geom/LineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":146,"column":31,"index":5753},"line":146,"code":"    it('has the expected stride', function () {\n      expect(lineString.getStride()).to.be(3);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return false for non matching extent","suites":["ol/geom/LineString.js","construct with 3D coordinates and layout XYM","#intersectsExtent"],"updatePoint":{"line":150,"column":46,"index":5919},"line":150,"code":"      it('return false for non matching extent', function () {\n        expect(lineString.intersectsExtent([1, 3, 1.9, 4])).to.be(false);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return true for extent on midpoint","suites":["ol/geom/LineString.js","construct with 3D coordinates and layout XYM","#intersectsExtent"],"updatePoint":{"line":153,"column":44,"index":6064},"line":153,"code":"      it('return true for extent on midpoint', function () {\n        expect(lineString.intersectsExtent([2, 3, 4, 3])).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns true for the geom's own extent","suites":["ol/geom/LineString.js","construct with 3D coordinates and layout XYM","#intersectsExtent"],"updatePoint":{"line":156,"column":48,"index":6210},"line":156,"code":"      it(\"returns true for the geom's own extent\", function () {\n        expect(lineString.intersectsExtent(lineString.getExtent())).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/LineString.js","construct with 4D coordinates"],"updatePoint":{"line":166,"column":31,"index":6543},"line":166,"code":"    it('has the expected layout', function () {\n      expect(lineString.getLayout()).to.be('XYZM');\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/LineString.js","construct with 4D coordinates"],"updatePoint":{"line":169,"column":36,"index":6656},"line":169,"code":"    it('has the expected coordinates', function () {\n      expect(lineString.getCoordinates()).to.eql([[1, 2, 3, 4], [5, 6, 7, 8]]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/LineString.js","construct with 4D coordinates"],"updatePoint":{"line":172,"column":31,"index":6792},"line":172,"code":"    it('has the expected extent', function () {\n      expect(lineString.getExtent()).to.eql([1, 2, 5, 6]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/LineString.js","construct with 4D coordinates"],"updatePoint":{"line":175,"column":41,"index":6917},"line":175,"code":"    it('has the expected flat coordinates', function () {\n      expect(lineString.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6, 7, 8]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected stride","suites":["ol/geom/LineString.js","construct with 4D coordinates"],"updatePoint":{"line":178,"column":31,"index":7053},"line":178,"code":"    it('has the expected stride', function () {\n      expect(lineString.getStride()).to.be(4);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return false for non matching extent","suites":["ol/geom/LineString.js","construct with 4D coordinates","#intersectsExtent"],"updatePoint":{"line":182,"column":46,"index":7219},"line":182,"code":"      it('return false for non matching extent', function () {\n        expect(lineString.intersectsExtent([1, 3, 1.9, 4])).to.be(false);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return true for extent on midpoint","suites":["ol/geom/LineString.js","construct with 4D coordinates","#intersectsExtent"],"updatePoint":{"line":185,"column":44,"index":7364},"line":185,"code":"      it('return true for extent on midpoint', function () {\n        expect(lineString.intersectsExtent([2, 3, 4, 3])).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns true for the geom's own extent","suites":["ol/geom/LineString.js","construct with 4D coordinates","#intersectsExtent"],"updatePoint":{"line":188,"column":48,"index":7510},"line":188,"code":"      it(\"returns true for the geom's own extent\", function () {\n        expect(lineString.intersectsExtent(lineString.getExtent())).to.be(true);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"scales a linestring","suites":["ol/geom/LineString.js","#scale()"],"updatePoint":{"line":194,"column":27,"index":7696},"line":194,"code":"    it('scales a linestring', function () {\n      const geom = new LineString([[-10, -20], [10, 20]]);\n      geom.scale(10);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[-100, -200], [100, 200]]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"accepts sx and sy","suites":["ol/geom/LineString.js","#scale()"],"updatePoint":{"line":200,"column":25,"index":7938},"line":200,"code":"    it('accepts sx and sy', function () {\n      const geom = new LineString([[-10, -20], [10, 20]]);\n      geom.scale(2, 3);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[-20, -60], [20, 60]]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"accepts an anchor","suites":["ol/geom/LineString.js","#scale()"],"updatePoint":{"line":206,"column":25,"index":8178},"line":206,"code":"    it('accepts an anchor', function () {\n      const geom = new LineString([[-10, -20], [10, 20]]);\n      geom.scale(3, 2, [10, 20]);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[-50, -60], [10, 20]]);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected result","suites":["ol/geom/LineString.js","with a simple line string","#getFirstCoordinate"],"updatePoint":{"line":219,"column":37,"index":8696},"line":219,"code":"      it('returns the expected result', function () {\n        expect(lineString.getFirstCoordinate()).to.eql([0, 0]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected result","suites":["ol/geom/LineString.js","with a simple line string","#getFlatMidpoint"],"updatePoint":{"line":224,"column":37,"index":8879},"line":224,"code":"      it('returns the expected result', function () {\n        const midpoint = lineString.getFlatMidpoint();\n        expect(midpoint).to.be.an(Array);\n        expect(midpoint).to.have.length(2);\n        expect(midpoint[0]).to.roughlyEqual(4, 1e-1);\n        expect(midpoint[1]).to.roughlyEqual(2, 1e-1);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected result","suites":["ol/geom/LineString.js","with a simple line string","#getLastCoordinate"],"updatePoint":{"line":233,"column":37,"index":9249},"line":233,"code":"      it('returns the expected result', function () {\n        expect(lineString.getLastCoordinate()).to.eql([7, 5]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns a simplified geometry","suites":["ol/geom/LineString.js","with a simple line string","#simplify"],"updatePoint":{"line":238,"column":39,"index":9426},"line":238,"code":"      it('returns a simplified geometry', function () {\n        const simplified = lineString.simplify(1);\n        expect(simplified).to.be.an(LineString);\n        expect(simplified.getCoordinates()).to.eql([[0, 0], [3, 3], [5, 1], [7, 5]]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"does not modify the original","suites":["ol/geom/LineString.js","with a simple line string","#simplify"],"updatePoint":{"line":243,"column":38,"index":9677},"line":243,"code":"      it('does not modify the original', function () {\n        lineString.simplify(1);\n        expect(lineString.getCoordinates()).to.eql([[0, 0], [1.5, 1], [3, 3], [5, 1], [6, 3.5], [7, 5]]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"delegates to the internal method","suites":["ol/geom/LineString.js","with a simple line string","#simplify"],"updatePoint":{"line":247,"column":42,"index":9884},"line":247,"code":"      it('delegates to the internal method', function () {\n        const simplified = lineString.simplify(2);\n        const internal = lineString.getSimplifiedGeometry(4);\n        expect(simplified.getCoordinates()).to.eql(internal.getCoordinates());\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expectedResult","suites":["ol/geom/LineString.js","with a simple line string","#getSimplifiedGeometry"],"updatePoint":{"line":254,"column":36,"index":10200},"line":254,"code":"      it('returns the expectedResult', function () {\n        const simplifiedGeometry = lineString.getSimplifiedGeometry(1);\n        expect(simplifiedGeometry).to.be.an(LineString);\n        expect(simplifiedGeometry.getCoordinates()).to.eql([[0, 0], [3, 3], [5, 1], [7, 5]]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"remembers the minimum squared tolerance","suites":["ol/geom/LineString.js","with a simple line string","#getSimplifiedGeometry"],"updatePoint":{"line":259,"column":49,"index":10499},"line":259,"code":"      it('remembers the minimum squared tolerance', function () {\n        sinon.spy(lineString, 'getSimplifiedGeometryInternal');\n        const simplifiedGeometry1 = lineString.getSimplifiedGeometry(0.05);\n        expect(lineString.getSimplifiedGeometryInternal.callCount).to.be(1);\n        expect(simplifiedGeometry1).to.be(lineString);\n        const simplifiedGeometry2 = lineString.getSimplifiedGeometry(0.01);\n        expect(lineString.getSimplifiedGeometryInternal.callCount).to.be(1);\n        expect(simplifiedGeometry2).to.be(lineString);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return the first point when fraction is 0","suites":["ol/geom/LineString.js","with a simple line string","#getCoordinateAt"],"updatePoint":{"line":270,"column":51,"index":11112},"line":270,"code":"      it('return the first point when fraction is 0', function () {\n        expect(lineString.getCoordinateAt(0)).to.eql([0, 0]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return the last point when fraction is 1","suites":["ol/geom/LineString.js","with a simple line string","#getCoordinateAt"],"updatePoint":{"line":273,"column":50,"index":11251},"line":273,"code":"      it('return the last point when fraction is 1', function () {\n        expect(lineString.getCoordinateAt(1)).to.eql([7, 5]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"return the mid point when fraction is 0.5","suites":["ol/geom/LineString.js","with a simple line string","#getCoordinateAt"],"updatePoint":{"line":276,"column":51,"index":11391},"line":276,"code":"      it('return the mid point when fraction is 0.5', function () {\n        const midpoint = lineString.getFlatMidpoint();\n        expect(lineString.getCoordinateAt(0.5)).to.eql(midpoint);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/LineString.js","with a simple XYM coordinates","#getCoordinateAt"],"updatePoint":{"line":288,"column":36,"index":11817},"line":288,"code":"      it('returns the expected value', function () {\n        expect(lineString.getCoordinateAt(0.5)).to.eql([2.5, 3.5, 4.5]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/LineString.js","with a simple XYM coordinates","#getCoordinateAtM"],"updatePoint":{"line":293,"column":36,"index":12009},"line":293,"code":"      it('returns the expected value', function () {\n        expect(lineString.getCoordinateAtM(2, false)).to.be(null);\n        expect(lineString.getCoordinateAtM(2, true)).to.eql([1, 2, 2]);\n        expect(lineString.getCoordinateAtM(3, false)).to.eql([1, 2, 3]);\n        expect(lineString.getCoordinateAtM(3, true)).to.eql([1, 2, 3]);\n        expect(lineString.getCoordinateAtM(4, false)).to.eql([2, 3, 4]);\n        expect(lineString.getCoordinateAtM(4, true)).to.eql([2, 3, 4]);\n        expect(lineString.getCoordinateAtM(5, false)).to.eql([3, 4, 5]);\n        expect(lineString.getCoordinateAtM(5, true)).to.eql([3, 4, 5]);\n        expect(lineString.getCoordinateAtM(6, false)).to.eql([4, 5, 6]);\n        expect(lineString.getCoordinateAtM(6, true)).to.eql([4, 5, 6]);\n        expect(lineString.getCoordinateAtM(7, false)).to.eql(null);\n        expect(lineString.getCoordinateAtM(7, true)).to.eql([4, 5, 7]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/LineString.js","with several XYZM coordinates","#getCoordinateAt"],"updatePoint":{"line":315,"column":36,"index":13333},"line":315,"code":"      it('returns the expected value', function () {\n        expect(lineString.getCoordinateAt(0.5)).to.eql([11, -11, 22, 11]);\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/LineString.js","with several XYZM coordinates","#getCoordinateAtM"],"updatePoint":{"line":320,"column":36,"index":13527},"line":320,"code":"      it('returns the expected value', function () {\n        expect(lineString.getLayout()).to.be('XYZM');\n        let m;\n        for (m = 0; m <= 22; m += 0.5) {\n          expect(lineString.getCoordinateAtM(m, true)).to.eql([m, -m, 2 * m, m]);\n        }\n      });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"does contain XY","suites":["ol/geom/LineString.js","#containsXY()"],"updatePoint":{"line":334,"column":23,"index":14118},"line":334,"code":"    it('does contain XY', function () {\n      expect(lineString.containsXY(1, -1)).to.be(true);\n      expect(lineString.containsXY(16, -16)).to.be(true);\n      expect(lineString.containsXY(3, -3)).to.be(true);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"does not contain XY","suites":["ol/geom/LineString.js","#containsXY()"],"updatePoint":{"line":339,"column":27,"index":14340},"line":339,"code":"    it('does not contain XY', function () {\n      expect(lineString.containsXY(1, 3)).to.be(false);\n      expect(lineString.containsXY(2, 2)).to.be(false);\n      expect(lineString.containsXY(2, 3)).to.be(false);\n    });","file":"node/ol/geom/LineString.test.js","skipped":false,"dir":"test"},{"name":"cannot be constructed with a null geometry","suites":["ol/geom/MultiLineString.js"],"updatePoint":{"line":6,"column":48,"index":334},"line":6,"code":"  it('cannot be constructed with a null geometry', function () {\n    expect(function () {\n      return new MultiLineString(null);\n    }).to.throwException();\n  });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"defaults to layout XY","suites":["ol/geom/MultiLineString.js","construct empty"],"updatePoint":{"line":16,"column":29,"index":634},"line":16,"code":"    it('defaults to layout XY', function () {\n      expect(multiLineString.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has empty coordinates","suites":["ol/geom/MultiLineString.js","construct empty"],"updatePoint":{"line":19,"column":29,"index":743},"line":19,"code":"    it('has empty coordinates', function () {\n      expect(multiLineString.getCoordinates()).to.be.empty();\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has an empty extent","suites":["ol/geom/MultiLineString.js","construct empty"],"updatePoint":{"line":22,"column":27,"index":857},"line":22,"code":"    it('has an empty extent', function () {\n      expect(isEmpty(multiLineString.getExtent())).to.be(true);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has empty flat coordinates","suites":["ol/geom/MultiLineString.js","construct empty"],"updatePoint":{"line":25,"column":34,"index":980},"line":25,"code":"    it('has empty flat coordinates', function () {\n      expect(multiLineString.getFlatCoordinates()).to.be.empty();\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/MultiLineString.js","construct empty"],"updatePoint":{"line":28,"column":38,"index":1109},"line":28,"code":"    it('has stride the expected stride', function () {\n      expect(multiLineString.getStride()).to.be(2);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"can append line strings","suites":["ol/geom/MultiLineString.js","construct empty"],"updatePoint":{"line":31,"column":31,"index":1217},"line":31,"code":"    it('can append line strings', function () {\n      multiLineString.appendLineString(new LineString([[1, 2], [3, 4]]));\n      expect(multiLineString.getCoordinates()).to.eql([[[1, 2], [3, 4]]]);\n      multiLineString.appendLineString(new LineString([[5, 6], [7, 8]]));\n      expect(multiLineString.getCoordinates()).to.eql([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/MultiLineString.js","construct with 2D coordinates"],"updatePoint":{"line":43,"column":31,"index":1798},"line":43,"code":"    it('has the expected layout', function () {\n      expect(multiLineString.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/MultiLineString.js","construct with 2D coordinates"],"updatePoint":{"line":46,"column":36,"index":1914},"line":46,"code":"    it('has the expected coordinates', function () {\n      expect(multiLineString.getCoordinates()).to.eql([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/MultiLineString.js","construct with 2D coordinates"],"updatePoint":{"line":49,"column":31,"index":2063},"line":49,"code":"    it('has the expected extent', function () {\n      expect(multiLineString.getExtent()).to.eql([1, 2, 7, 8]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/MultiLineString.js","construct with 2D coordinates"],"updatePoint":{"line":52,"column":41,"index":2193},"line":52,"code":"    it('has the expected flat coordinates', function () {\n      expect(multiLineString.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6, 7, 8]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/MultiLineString.js","construct with 2D coordinates"],"updatePoint":{"line":55,"column":38,"index":2341},"line":55,"code":"    it('has stride the expected stride', function () {\n      expect(multiLineString.getStride()).to.be(2);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected result","suites":["ol/geom/MultiLineString.js","construct with 2D coordinates","#getFlatMidpoints"],"updatePoint":{"line":59,"column":37,"index":2503},"line":59,"code":"      it('returns the expected result', function () {\n        expect(multiLineString.getFlatMidpoints()).to.eql([2, 3, 6, 7]);\n      });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"returns true for intersecting part of lineString","suites":["ol/geom/MultiLineString.js","construct with 2D coordinates","#intersectsExtent()"],"updatePoint":{"line":64,"column":58,"index":2719},"line":64,"code":"      it('returns true for intersecting part of lineString', function () {\n        expect(multiLineString.intersectsExtent([1, 2, 2, 3])).to.be(true);\n      });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"returns false for non-matching extent within own extent","suites":["ol/geom/MultiLineString.js","construct with 2D coordinates","#intersectsExtent()"],"updatePoint":{"line":67,"column":65,"index":2887},"line":67,"code":"      it('returns false for non-matching extent within own extent', function () {\n        expect(multiLineString.intersectsExtent([1, 7, 2, 8])).to.be(false);\n      });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates"],"updatePoint":{"line":77,"column":31,"index":3254},"line":77,"code":"    it('has the expected layout', function () {\n      expect(multiLineString.getLayout()).to.be('XYZ');\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates"],"updatePoint":{"line":80,"column":36,"index":3371},"line":80,"code":"    it('has the expected coordinates', function () {\n      expect(multiLineString.getCoordinates()).to.eql([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates"],"updatePoint":{"line":83,"column":31,"index":3535},"line":83,"code":"    it('has the expected extent', function () {\n      expect(multiLineString.getExtent()).to.eql([1, 2, 10, 11]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates"],"updatePoint":{"line":86,"column":41,"index":3667},"line":86,"code":"    it('has the expected flat coordinates', function () {\n      expect(multiLineString.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates"],"updatePoint":{"line":89,"column":38,"index":3830},"line":89,"code":"    it('has stride the expected stride', function () {\n      expect(multiLineString.getStride()).to.be(3);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":98,"column":31,"index":4184},"line":98,"code":"    it('has the expected layout', function () {\n      expect(multiLineString.getLayout()).to.be('XYM');\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":101,"column":36,"index":4301},"line":101,"code":"    it('has the expected coordinates', function () {\n      expect(multiLineString.getCoordinates()).to.eql([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":104,"column":31,"index":4465},"line":104,"code":"    it('has the expected extent', function () {\n      expect(multiLineString.getExtent()).to.eql([1, 2, 10, 11]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":107,"column":41,"index":4597},"line":107,"code":"    it('has the expected flat coordinates', function () {\n      expect(multiLineString.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":110,"column":38,"index":4760},"line":110,"code":"    it('has stride the expected stride', function () {\n      expect(multiLineString.getStride()).to.be(3);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"can return individual line strings","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":113,"column":42,"index":4879},"line":113,"code":"    it('can return individual line strings', function () {\n      const lineString0 = multiLineString.getLineString(0);\n      expect(lineString0).to.be.an(LineString);\n      expect(lineString0.getLayout()).to.be('XYM');\n      expect(lineString0.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n      const lineString1 = multiLineString.getLineString(1);\n      expect(lineString1).to.be.an(LineString);\n      expect(lineString1.getLayout()).to.be('XYM');\n      expect(lineString1.getCoordinates()).to.eql([[7, 8, 9], [10, 11, 12]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM","#getCoordinateAtM","with extrapolation and interpolation"],"updatePoint":{"line":125,"column":38,"index":5532},"line":125,"code":"        it('returns the expected value', function () {\n          expect(multiLineString.getCoordinateAtM(0, true, true)).to.eql([1, 2, 0]);\n          expect(multiLineString.getCoordinateAtM(3, true, true)).to.eql([1, 2, 3]);\n          expect(multiLineString.getCoordinateAtM(4.5, true, true)).to.eql([2.5, 3.5, 4.5]);\n          expect(multiLineString.getCoordinateAtM(6, true, true)).to.eql([4, 5, 6]);\n          expect(multiLineString.getCoordinateAtM(7.5, true, true)).to.eql([5.5, 6.5, 7.5]);\n          expect(multiLineString.getCoordinateAtM(9, true, true)).to.eql([7, 8, 9]);\n          expect(multiLineString.getCoordinateAtM(10.5, true, true)).to.eql([8.5, 9.5, 10.5]);\n          expect(multiLineString.getCoordinateAtM(12, true, true)).to.eql([10, 11, 12]);\n          expect(multiLineString.getCoordinateAtM(15, true, true)).to.eql([10, 11, 15]);\n        });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM","#getCoordinateAtM","with extrapolation and no interpolation"],"updatePoint":{"line":138,"column":38,"index":6480},"line":138,"code":"        it('returns the expected value', function () {\n          expect(multiLineString.getCoordinateAtM(0, true, false)).to.eql([1, 2, 0]);\n          expect(multiLineString.getCoordinateAtM(3, true, false)).to.eql([1, 2, 3]);\n          expect(multiLineString.getCoordinateAtM(4.5, true, false)).to.eql([2.5, 3.5, 4.5]);\n          expect(multiLineString.getCoordinateAtM(6, true, false)).to.eql([4, 5, 6]);\n          expect(multiLineString.getCoordinateAtM(7.5, true, false)).to.be(null);\n          expect(multiLineString.getCoordinateAtM(9, true, false)).to.eql([7, 8, 9]);\n          expect(multiLineString.getCoordinateAtM(10.5, true, false)).to.eql([8.5, 9.5, 10.5]);\n          expect(multiLineString.getCoordinateAtM(12, true, false)).to.eql([10, 11, 12]);\n          expect(multiLineString.getCoordinateAtM(15, true, false)).to.eql([10, 11, 15]);\n        });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM","#getCoordinateAtM","with no extrapolation and interpolation"],"updatePoint":{"line":151,"column":38,"index":7425},"line":151,"code":"        it('returns the expected value', function () {\n          expect(multiLineString.getCoordinateAtM(0, false, true)).to.eql(null);\n          expect(multiLineString.getCoordinateAtM(3, false, true)).to.eql([1, 2, 3]);\n          expect(multiLineString.getCoordinateAtM(4.5, false, true)).to.eql([2.5, 3.5, 4.5]);\n          expect(multiLineString.getCoordinateAtM(6, false, true)).to.eql([4, 5, 6]);\n          expect(multiLineString.getCoordinateAtM(7.5, false, true)).to.eql([5.5, 6.5, 7.5]);\n          expect(multiLineString.getCoordinateAtM(9, false, true)).to.eql([7, 8, 9]);\n          expect(multiLineString.getCoordinateAtM(10.5, false, true)).to.eql([8.5, 9.5, 10.5]);\n          expect(multiLineString.getCoordinateAtM(12, false, true)).to.eql([10, 11, 12]);\n          expect(multiLineString.getCoordinateAtM(15, false, true)).to.eql(null);\n        });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"returns the expected value","suites":["ol/geom/MultiLineString.js","construct with 3D coordinates and layout XYM","#getCoordinateAtM","with no extrapolation or interpolation"],"updatePoint":{"line":164,"column":38,"index":8368},"line":164,"code":"        it('returns the expected value', function () {\n          expect(multiLineString.getCoordinateAtM(0, false, false)).to.eql(null);\n          expect(multiLineString.getCoordinateAtM(3, false, false)).to.eql([1, 2, 3]);\n          expect(multiLineString.getCoordinateAtM(4.5, false, false)).to.eql([2.5, 3.5, 4.5]);\n          expect(multiLineString.getCoordinateAtM(6, false, false)).to.eql([4, 5, 6]);\n          expect(multiLineString.getCoordinateAtM(7.5, false, false)).to.eql(null);\n          expect(multiLineString.getCoordinateAtM(9, false, false)).to.eql([7, 8, 9]);\n          expect(multiLineString.getCoordinateAtM(10.5, false, false)).to.eql([8.5, 9.5, 10.5]);\n          expect(multiLineString.getCoordinateAtM(12, false, false)).to.eql([10, 11, 12]);\n          expect(multiLineString.getCoordinateAtM(15, false, false)).to.eql(null);\n        });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/MultiLineString.js","construct with 4D coordinates"],"updatePoint":{"line":183,"column":31,"index":9479},"line":183,"code":"    it('has the expected layout', function () {\n      expect(multiLineString.getLayout()).to.be('XYZM');\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/MultiLineString.js","construct with 4D coordinates"],"updatePoint":{"line":186,"column":36,"index":9597},"line":186,"code":"    it('has the expected coordinates', function () {\n      expect(multiLineString.getCoordinates()).to.eql([[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/MultiLineString.js","construct with 4D coordinates"],"updatePoint":{"line":189,"column":31,"index":9777},"line":189,"code":"    it('has the expected extent', function () {\n      expect(multiLineString.getExtent()).to.eql([1, 2, 13, 14]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/MultiLineString.js","construct with 4D coordinates"],"updatePoint":{"line":192,"column":41,"index":9909},"line":192,"code":"    it('has the expected flat coordinates', function () {\n      expect(multiLineString.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/MultiLineString.js","construct with 4D coordinates"],"updatePoint":{"line":195,"column":38,"index":10088},"line":195,"code":"    it('has stride the expected stride', function () {\n      expect(multiLineString.getStride()).to.be(4);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"scales a multi-linestring","suites":["ol/geom/MultiLineString.js","#scale()"],"updatePoint":{"line":200,"column":33,"index":10241},"line":200,"code":"    it('scales a multi-linestring', function () {\n      const geom = new MultiLineString([[[-10, -20], [10, 20]], [[5, -10], [-5, 10]]]);\n      geom.scale(10);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[-100, -200], [100, 200]], [[50, -100], [-50, 100]]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"accepts sx and sy","suites":["ol/geom/MultiLineString.js","#scale()"],"updatePoint":{"line":206,"column":25,"index":10540},"line":206,"code":"    it('accepts sx and sy', function () {\n      const geom = new MultiLineString([[[-10, -20], [10, 20]], [[5, -10], [-5, 10]]]);\n      geom.scale(2, 3);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[-20, -60], [20, 60]], [[10, -30], [-10, 30]]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"accepts an anchor","suites":["ol/geom/MultiLineString.js","#scale()"],"updatePoint":{"line":212,"column":25,"index":10835},"line":212,"code":"    it('accepts an anchor', function () {\n      const geom = new MultiLineString([[[-10, -20], [10, 20]], [[5, -10], [-5, 10]]]);\n      geom.scale(3, 2, [10, 20]);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[-50, -60], [10, 20]], [[-5, -40], [-35, 0]]]);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"sets the line strings","suites":["ol/geom/MultiLineString.js","#setLineStrings"],"updatePoint":{"line":220,"column":29,"index":11193},"line":220,"code":"    it('sets the line strings', function () {\n      const lineString1 = new LineString([[1, 2], [3, 4]]);\n      const lineString2 = new LineString([[5, 6], [7, 8]]);\n      const multiLineString = new MultiLineString([lineString1, lineString2]);\n      expect(multiLineString.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6, 7, 8]);\n      expect(multiLineString.getEnds()).to.eql([4, 8]);\n      const coordinates = multiLineString.getCoordinates();\n      expect(coordinates[0]).to.eql(lineString1.getCoordinates());\n      expect(coordinates[1]).to.eql(lineString2.getCoordinates());\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"does contain XY","suites":["ol/geom/MultiLineString.js","#containsXY()"],"updatePoint":{"line":236,"column":23,"index":11983},"line":236,"code":"    it('does contain XY', function () {\n      expect(multiLineString.containsXY(1, 2)).to.be(true);\n      expect(multiLineString.containsXY(4, 5)).to.be(true);\n      expect(multiLineString.containsXY(3, 4)).to.be(true);\n      expect(multiLineString.containsXY(-1, -1)).to.be(true);\n      expect(multiLineString.containsXY(2, 2)).to.be(true);\n      expect(multiLineString.containsXY(0, 0)).to.be(true);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"does not contain XY","suites":["ol/geom/MultiLineString.js","#containsXY()"],"updatePoint":{"line":244,"column":27,"index":12397},"line":244,"code":"    it('does not contain XY', function () {\n      expect(multiLineString.containsXY(1, 3)).to.be(false);\n      expect(multiLineString.containsXY(2, 11)).to.be(false);\n      expect(multiLineString.containsXY(-2, 3)).to.be(false);\n    });","file":"node/ol/geom/MultiLineString.test.js","skipped":false,"dir":"test"},{"name":"cannot be constructed with a null geometry","suites":["ol/geom/MultiPoint.js"],"updatePoint":{"line":7,"column":48,"index":336},"line":7,"code":"  it('cannot be constructed with a null geometry', function () {\n    expect(function () {\n      return new MultiPoint(null);\n    }).to.throwException();\n  });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"defaults to layout XY","suites":["ol/geom/MultiPoint.js","construct empty"],"updatePoint":{"line":17,"column":29,"index":616},"line":17,"code":"    it('defaults to layout XY', function () {\n      expect(multiPoint.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has empty coordinates","suites":["ol/geom/MultiPoint.js","construct empty"],"updatePoint":{"line":20,"column":29,"index":720},"line":20,"code":"    it('has empty coordinates', function () {\n      expect(multiPoint.getCoordinates()).to.be.empty();\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has an empty extent","suites":["ol/geom/MultiPoint.js","construct empty"],"updatePoint":{"line":23,"column":27,"index":829},"line":23,"code":"    it('has an empty extent', function () {\n      expect(isEmpty(multiPoint.getExtent())).to.be(true);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has empty flat coordinates","suites":["ol/geom/MultiPoint.js","construct empty"],"updatePoint":{"line":26,"column":34,"index":947},"line":26,"code":"    it('has empty flat coordinates', function () {\n      expect(multiPoint.getFlatCoordinates()).to.be.empty();\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/MultiPoint.js","construct empty"],"updatePoint":{"line":29,"column":38,"index":1071},"line":29,"code":"    it('has stride the expected stride', function () {\n      expect(multiPoint.getStride()).to.be(2);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"can append points","suites":["ol/geom/MultiPoint.js","construct empty"],"updatePoint":{"line":32,"column":25,"index":1168},"line":32,"code":"    it('can append points', function () {\n      multiPoint.appendPoint(new Point([1, 2]));\n      expect(multiPoint.getCoordinates()).to.eql([[1, 2]]);\n      multiPoint.appendPoint(new Point([3, 4]));\n      expect(multiPoint.getCoordinates()).to.eql([[1, 2], [3, 4]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/MultiPoint.js","construct with 2D coordinates"],"updatePoint":{"line":44,"column":31,"index":1624},"line":44,"code":"    it('has the expected layout', function () {\n      expect(multiPoint.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/MultiPoint.js","construct with 2D coordinates"],"updatePoint":{"line":47,"column":36,"index":1735},"line":47,"code":"    it('has the expected coordinates', function () {\n      expect(multiPoint.getCoordinates()).to.eql([[1, 2], [3, 4]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/MultiPoint.js","construct with 2D coordinates"],"updatePoint":{"line":50,"column":31,"index":1859},"line":50,"code":"    it('has the expected extent', function () {\n      expect(multiPoint.getExtent()).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/MultiPoint.js","construct with 2D coordinates"],"updatePoint":{"line":53,"column":41,"index":1984},"line":53,"code":"    it('has the expected flat coordinates', function () {\n      expect(multiPoint.getFlatCoordinates()).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/MultiPoint.js","construct with 2D coordinates"],"updatePoint":{"line":56,"column":38,"index":2115},"line":56,"code":"    it('has stride the expected stride', function () {\n      expect(multiPoint.getStride()).to.be(2);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"returns true for extent covering a point","suites":["ol/geom/MultiPoint.js","construct with 2D coordinates","#intersectsExtent()"],"updatePoint":{"line":60,"column":50,"index":2287},"line":60,"code":"      it('returns true for extent covering a point', function () {\n        expect(multiPoint.intersectsExtent([1, 2, 2, 2])).to.be(true);\n      });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"returns false for non-matching extent within own extent","suites":["ol/geom/MultiPoint.js","construct with 2D coordinates","#intersectsExtent()"],"updatePoint":{"line":63,"column":65,"index":2450},"line":63,"code":"      it('returns false for non-matching extent within own extent', function () {\n        expect(multiPoint.intersectsExtent([2, 3, 2, 4])).to.be(false);\n      });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates"],"updatePoint":{"line":73,"column":31,"index":2768},"line":73,"code":"    it('has the expected layout', function () {\n      expect(multiPoint.getLayout()).to.be('XYZ');\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates"],"updatePoint":{"line":76,"column":36,"index":2880},"line":76,"code":"    it('has the expected coordinates', function () {\n      expect(multiPoint.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates"],"updatePoint":{"line":79,"column":31,"index":3010},"line":79,"code":"    it('has the expected extent', function () {\n      expect(multiPoint.getExtent()).to.eql([1, 2, 4, 5]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates"],"updatePoint":{"line":82,"column":41,"index":3135},"line":82,"code":"    it('has the expected flat coordinates', function () {\n      expect(multiPoint.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected stride","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates"],"updatePoint":{"line":85,"column":31,"index":3265},"line":85,"code":"    it('has the expected stride', function () {\n      expect(multiPoint.getStride()).to.be(3);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":94,"column":31,"index":3570},"line":94,"code":"    it('has the expected layout', function () {\n      expect(multiPoint.getLayout()).to.be('XYM');\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":97,"column":36,"index":3682},"line":97,"code":"    it('has the expected coordinates', function () {\n      expect(multiPoint.getCoordinates()).to.eql([[1, 2, 3], [4, 5, 6]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":100,"column":31,"index":3812},"line":100,"code":"    it('has the expected extent', function () {\n      expect(multiPoint.getExtent()).to.eql([1, 2, 4, 5]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":103,"column":41,"index":3937},"line":103,"code":"    it('has the expected flat coordinates', function () {\n      expect(multiPoint.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected stride","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":106,"column":31,"index":4067},"line":106,"code":"    it('has the expected stride', function () {\n      expect(multiPoint.getStride()).to.be(3);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"can return individual points","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":109,"column":36,"index":4175},"line":109,"code":"    it('can return individual points', function () {\n      const point0 = multiPoint.getPoint(0);\n      expect(point0.getLayout()).to.be('XYM');\n      expect(point0.getCoordinates()).to.eql([1, 2, 3]);\n      const point1 = multiPoint.getPoint(1);\n      expect(point1.getLayout()).to.be('XYM');\n      expect(point1.getCoordinates()).to.eql([4, 5, 6]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"can return all points","suites":["ol/geom/MultiPoint.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":117,"column":29,"index":4527},"line":117,"code":"    it('can return all points', function () {\n      const points = multiPoint.getPoints();\n      expect(points).to.have.length(2);\n      expect(points[0]).to.be.an(Point);\n      expect(points[0].getLayout()).to.be('XYM');\n      expect(points[0].getCoordinates()).to.eql([1, 2, 3]);\n      expect(points[1]).to.be.an(Point);\n      expect(points[1].getLayout()).to.be('XYM');\n      expect(points[1].getCoordinates()).to.eql([4, 5, 6]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/MultiPoint.js","construct with 4D coordinates"],"updatePoint":{"line":133,"column":31,"index":5156},"line":133,"code":"    it('has the expected layout', function () {\n      expect(multiPoint.getLayout()).to.be('XYZM');\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/MultiPoint.js","construct with 4D coordinates"],"updatePoint":{"line":136,"column":36,"index":5269},"line":136,"code":"    it('has the expected coordinates', function () {\n      expect(multiPoint.getCoordinates()).to.eql([[1, 2, 3, 4], [5, 6, 7, 8]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/MultiPoint.js","construct with 4D coordinates"],"updatePoint":{"line":139,"column":31,"index":5405},"line":139,"code":"    it('has the expected extent', function () {\n      expect(multiPoint.getExtent()).to.eql([1, 2, 5, 6]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/MultiPoint.js","construct with 4D coordinates"],"updatePoint":{"line":142,"column":41,"index":5530},"line":142,"code":"    it('has the expected flat coordinates', function () {\n      expect(multiPoint.getFlatCoordinates()).to.eql([1, 2, 3, 4, 5, 6, 7, 8]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"has the expected stride","suites":["ol/geom/MultiPoint.js","construct with 4D coordinates"],"updatePoint":{"line":145,"column":31,"index":5666},"line":145,"code":"    it('has the expected stride', function () {\n      expect(multiPoint.getStride()).to.be(4);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"preserves extra dimensions","suites":["ol/geom/MultiPoint.js","construct with 4D coordinates","#getClosestPoint"],"updatePoint":{"line":149,"column":36,"index":5821},"line":149,"code":"      it('preserves extra dimensions', function () {\n        const closestPoint = multiPoint.getClosestPoint([6, 6]);\n        expect(closestPoint).to.eql([5, 6, 7, 8]);\n      });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"scales a multi-point","suites":["ol/geom/MultiPoint.js","#scale()"],"updatePoint":{"line":156,"column":28,"index":6043},"line":156,"code":"    it('scales a multi-point', function () {\n      const geom = new MultiPoint([[-10, -20], [10, 20]]);\n      geom.scale(10);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[-100, -200], [100, 200]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"accepts sx and sy","suites":["ol/geom/MultiPoint.js","#scale()"],"updatePoint":{"line":162,"column":25,"index":6285},"line":162,"code":"    it('accepts sx and sy', function () {\n      const geom = new MultiPoint([[-10, -20], [10, 20]]);\n      geom.scale(2, 3);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[-20, -60], [20, 60]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"accepts an anchor","suites":["ol/geom/MultiPoint.js","#scale()"],"updatePoint":{"line":168,"column":25,"index":6525},"line":168,"code":"    it('accepts an anchor', function () {\n      const geom = new MultiPoint([[-10, -20], [10, 20]]);\n      geom.scale(3, 2, [-10, -20]);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[-10, -20], [50, 60]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"calls a transform function","suites":["ol/geom/MultiPoint.js","#applyTransform()"],"updatePoint":{"line":181,"column":34,"index":6980},"line":181,"code":"    it('calls a transform function', function () {\n      multi.applyTransform(transform);\n      expect(transform.calledOnce).to.be(true);\n      const args = transform.firstCall.args;\n      expect(args).to.have.length(3);\n      expect(args[0]).to.be(multi.getFlatCoordinates()); // input coords\n      expect(args[1]).to.be(multi.getFlatCoordinates()); // output coords\n      expect(args[2]).to.be(2); // dimension\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"allows for modification of coordinates","suites":["ol/geom/MultiPoint.js","#applyTransform()"],"updatePoint":{"line":191,"column":46,"index":7414},"line":191,"code":"    it('allows for modification of coordinates', function () {\n      const mod = function (input, output, dimension) {\n        const copy = input.slice();\n        for (let i = 0, ii = copy.length; i < ii; i += dimension) {\n          output[i] = copy[i + 1];\n          output[i + 1] = copy[i];\n        }\n      };\n      multi.applyTransform(mod);\n      expect(multi.getCoordinates()).to.eql([[2, 1], [4, 3]]);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"returns undefined","suites":["ol/geom/MultiPoint.js","#applyTransform()"],"updatePoint":{"line":202,"column":25,"index":7809},"line":202,"code":"    it('returns undefined', function () {\n      const got = multi.applyTransform(transform);\n      expect(got).to.be(undefined);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"transforms a geometry given CRS identifiers","suites":["ol/geom/MultiPoint.js","#transform()"],"updatePoint":{"line":208,"column":51,"index":8019},"line":208,"code":"    it('transforms a geometry given CRS identifiers', function () {\n      const multi = new MultiPoint([[-111, 45], [111, -45]]).transform('EPSG:4326', 'EPSG:3857');\n      expect(multi).to.be.a(MultiPoint);\n      const coords = multi.getCoordinates();\n      expect(coords[0][0]).to.roughlyEqual(-12356463.47, 1e-2);\n      expect(coords[0][1]).to.roughlyEqual(5621521.48, 1e-2);\n      expect(coords[1][0]).to.roughlyEqual(12356463.47, 1e-2);\n      expect(coords[1][1]).to.roughlyEqual(-5621521.48, 1e-2);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"does contain XY","suites":["ol/geom/MultiPoint.js","#containsXY()"],"updatePoint":{"line":219,"column":23,"index":8551},"line":219,"code":"    it('does contain XY', function () {\n      const multi = new MultiPoint([[1, 2], [10, 20]]);\n      expect(multi.containsXY(1, 2)).to.be(true);\n      expect(multi.containsXY(10, 20)).to.be(true);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"does not contain XY","suites":["ol/geom/MultiPoint.js","#containsXY()"],"updatePoint":{"line":224,"column":27,"index":8761},"line":224,"code":"    it('does not contain XY', function () {\n      const multi = new MultiPoint([[1, 2], [10, 20]]);\n      expect(multi.containsXY(1, 3)).to.be(false);\n      expect(multi.containsXY(2, 2)).to.be(false);\n      expect(multi.containsXY(2, 3)).to.be(false);\n      expect(multi.containsXY(10, 30)).to.be(false);\n      expect(multi.containsXY(20, 20)).to.be(false);\n      expect(multi.containsXY(20, 30)).to.be(false);\n    });","file":"node/ol/geom/MultiPoint.test.js","skipped":false,"dir":"test"},{"name":"cannot be constructed with a null geometry","suites":["ol/geom/MultiPolygon.js"],"updatePoint":{"line":5,"column":48,"index":263},"line":5,"code":"  it('cannot be constructed with a null geometry', function () {\n    expect(function () {\n      return new MultiPolygon(null);\n    }).to.throwException();\n  });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"can append polygons","suites":["ol/geom/MultiPolygon.js","with a null MultiPolygon"],"updatePoint":{"line":11,"column":27,"index":456},"line":11,"code":"    it('can append polygons', function () {\n      const multiPolygon = new MultiPolygon([new Polygon([[[0, 0], [0, 2], [1, 1], [2, 0]]])]);\n      expect(multiPolygon.getCoordinates()).to.eql([[[[0, 0], [0, 2], [1, 1], [2, 0]]]]);\n      multiPolygon.appendPolygon(new Polygon([[[3, 0], [4, 1], [5, 2], [5, 0]]]));\n      expect(multiPolygon.getCoordinates()).to.eql([[[[0, 0], [0, 2], [1, 1], [2, 0]]], [[[3, 0], [4, 1], [5, 2], [5, 0]]]]);\n      expect(multiPolygon.getPolygons().length).to.eql(2);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"can append polygons","suites":["ol/geom/MultiPolygon.js","with an empty MultiPolygon"],"updatePoint":{"line":24,"column":27,"index":1125},"line":24,"code":"    it('can append polygons', function () {\n      multiPolygon.appendPolygon(new Polygon([[[0, 0], [0, 2], [1, 1], [2, 0]]]));\n      expect(multiPolygon.getCoordinates()).to.eql([[[[0, 0], [0, 2], [1, 1], [2, 0]]]]);\n      multiPolygon.appendPolygon(new Polygon([[[3, 0], [4, 1], [5, 2], [5, 0]]]));\n      expect(multiPolygon.getCoordinates()).to.eql([[[[0, 0], [0, 2], [1, 1], [2, 0]]], [[[3, 0], [4, 1], [5, 2], [5, 0]]]]);\n      expect(multiPolygon.getPolygons().length).to.eql(2);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"scales a multi-polygon","suites":["ol/geom/MultiPolygon.js","#scale()"],"updatePoint":{"line":33,"column":30,"index":1664},"line":33,"code":"    it('scales a multi-polygon', function () {\n      const geom = new MultiPolygon([[[[-1, -2], [1, -2], [1, 2], [-1, 2], [-1, -2]]]]);\n      geom.scale(10);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[[-10, -20], [10, -20], [10, 20], [-10, 20], [-10, -20]]]]);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"accepts sx and sy","suites":["ol/geom/MultiPolygon.js","#scale()"],"updatePoint":{"line":39,"column":25,"index":1970},"line":39,"code":"    it('accepts sx and sy', function () {\n      const geom = new MultiPolygon([[[[-1, -2], [1, -2], [1, 2], [-1, 2], [-1, -2]]]]);\n      geom.scale(2, 3);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[[-2, -6], [2, -6], [2, 6], [-2, 6], [-2, -6]]]]);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"accepts an anchor","suites":["ol/geom/MultiPolygon.js","#scale()"],"updatePoint":{"line":45,"column":25,"index":2268},"line":45,"code":"    it('accepts an anchor', function () {\n      const geom = new MultiPolygon([[[[-1, -2], [1, -2], [1, 2], [-1, 2], [-1, -2]]]]);\n      geom.scale(3, 2, [-1, -2]);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[[-1, -2], [5, -2], [5, 6], [-1, 6], [-1, -2]]]]);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"can return individual polygons","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon"],"updatePoint":{"line":57,"column":38,"index":2822},"line":57,"code":"    it('can return individual polygons', function () {\n      const polygon0 = multiPolygon.getPolygon(0);\n      expect(polygon0).to.be.an(Polygon);\n      expect(polygon0.getCoordinates()).to.eql([[[0, 0], [0, 2], [1, 1], [2, 0]]]);\n      const polygon1 = multiPolygon.getPolygon(1);\n      expect(polygon1).to.be.an(Polygon);\n      expect(polygon1.getCoordinates()).to.eql([[[3, 0], [4, 1], [5, 2], [5, 0]]]);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"can return all polygons","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon"],"updatePoint":{"line":65,"column":31,"index":3232},"line":65,"code":"    it('can return all polygons', function () {\n      const polygons = multiPolygon.getPolygons();\n      expect(polygons).to.be.an(Array);\n      expect(polygons).to.have.length(2);\n      expect(polygons[0]).to.be.an(Polygon);\n      expect(polygons[0].getCoordinates()).to.eql([[[0, 0], [0, 2], [1, 1], [2, 0]]]);\n      expect(polygons[1]).to.be.an(Polygon);\n      expect(polygons[1].getCoordinates()).to.eql([[[3, 0], [4, 1], [5, 2], [5, 0]]]);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected endss_","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon","#clone()"],"updatePoint":{"line":75,"column":33,"index":3726},"line":75,"code":"      it('has the expected endss_', function () {\n        multiPolygon.setProperties({\n          foo: 'bar',\n          baz: null\n        });\n        const clone = multiPolygon.clone();\n        expect(multiPolygon.endss_).to.eql(clone.endss_);\n        expect(clone.getProperties()).to.eql({\n          foo: 'bar',\n          baz: null\n        });\n      });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"returns coordinates as they were constructed","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon","#getCoordinates()"],"updatePoint":{"line":96,"column":54,"index":4670},"line":96,"code":"      it('returns coordinates as they were constructed', function () {\n        expect(right.getCoordinates()).to.eql([[ccw, cw], [ccw2, cw2]]);\n        expect(left.getCoordinates()).to.eql([[cw, ccw], [cw2, ccw2]]);\n        expect(withEmptyPolygon.getCoordinates()).to.eql([[ccw], []]);\n      });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"can return coordinates with right-hand orientation","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon","#getCoordinates()"],"updatePoint":{"line":101,"column":60,"index":4973},"line":101,"code":"      it('can return coordinates with right-hand orientation', function () {\n        expect(right.getCoordinates(true)).to.eql([[ccw, cw], [ccw2, cw2]]);\n        expect(left.getCoordinates(true)).to.eql([[ccw, cw], [ccw2, cw2]]);\n      });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"can return coordinates with left-hand orientation","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon","#getCoordinates()"],"updatePoint":{"line":105,"column":59,"index":5212},"line":105,"code":"      it('can return coordinates with left-hand orientation', function () {\n        expect(right.getCoordinates(false)).to.eql([[cw, ccw], [cw2, ccw2]]);\n        expect(left.getCoordinates(false)).to.eql([[cw, ccw], [cw2, ccw2]]);\n      });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"returns expected result","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon","#getExtent()"],"updatePoint":{"line":111,"column":33,"index":5478},"line":111,"code":"      it('returns expected result', function () {\n        expect(multiPolygon.getExtent()).to.eql([0, 0, 5, 2]);\n      });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"returns the expected result","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon","#getSimplifiedGeometry"],"updatePoint":{"line":116,"column":37,"index":5666},"line":116,"code":"      it('returns the expected result', function () {\n        const simplifiedGeometry = multiPolygon.getSimplifiedGeometry(1);\n        expect(simplifiedGeometry).to.be.an(MultiPolygon);\n        expect(simplifiedGeometry.getCoordinates()).to.eql([[[[0, 0], [0, 2], [2, 0]]], [[[3, 0], [5, 2], [5, 0]]]]);\n      });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"returns true for extent of of each polygon","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon","#intersectsExtent()"],"updatePoint":{"line":123,"column":52,"index":6054},"line":123,"code":"      it('returns true for extent of of each polygon', function () {\n        const polygons = multiPolygon.getPolygons();\n        for (let i = 0; i < polygons.length; i++) {\n          expect(multiPolygon.intersectsExtent(polygons[i].getExtent())).to.be(true);\n        }\n      });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"returns false for non-matching extent within own extent","suites":["ol/geom/MultiPolygon.js","with a simple MultiPolygon","#intersectsExtent()"],"updatePoint":{"line":129,"column":65,"index":6347},"line":129,"code":"      it('returns false for non-matching extent within own extent', function () {\n        expect(multiPolygon.intersectsExtent([2.1, 0, 2.9, 2])).to.be(false);\n      });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"works with a clockwise and a counterclockwise Polygon","suites":["ol/geom/MultiPolygon.js","#getArea"],"updatePoint":{"line":135,"column":61,"index":6564},"line":135,"code":"    it('works with a clockwise and a counterclockwise Polygon', function () {\n      const multiPolygon = new MultiPolygon([[[[1, 3], [1, 2], [0, 2], [1, 3]]],\n      // clockwise polygon with area 0.5\n      [[[2, 1], [2, 0.5], [3, 1], [2, 1]]] // counterclockwise polygon with area 0.25\n      ]);\n\n      expect(multiPolygon.getArea()).to.be(0.75);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"returns XYM multipoint with intersection width as M","suites":["ol/geom/MultiPolygon.js","#getInteriorPoints"],"updatePoint":{"line":145,"column":59,"index":6970},"line":145,"code":"    it('returns XYM multipoint with intersection width as M', function () {\n      const geom = new MultiPolygon([[[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], [[[1, 1], [1, 2], [2, 2], [2, 1], [1, 1]]]]);\n      const interiorPoints = geom.getInteriorPoints();\n      expect(interiorPoints.getType()).to.be('MultiPoint');\n      expect(interiorPoints.layout).to.be('XYM');\n      expect(interiorPoints.getCoordinates()).to.eql([[0.5, 0.5, 1], [1.5, 1.5, 1]]);\n    });","file":"node/ol/geom/MultiPolygon.test.js","skipped":false,"dir":"test"},{"name":"cannot be constructed with a null geometry","suites":["ol/geom/Point.js"],"updatePoint":{"line":6,"column":48,"index":307},"line":6,"code":"  it('cannot be constructed with a null geometry', function () {\n    expect(function () {\n      return new Point(null);\n    }).to.throwException();\n  });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/Point.js","construct with 2D coordinates"],"updatePoint":{"line":16,"column":31,"index":587},"line":16,"code":"    it('has the expected layout', function () {\n      expect(point.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/Point.js","construct with 2D coordinates"],"updatePoint":{"line":19,"column":36,"index":693},"line":19,"code":"    it('has the expected coordinates', function () {\n      expect(point.getCoordinates()).to.eql([1, 2]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/Point.js","construct with 2D coordinates"],"updatePoint":{"line":22,"column":31,"index":802},"line":22,"code":"    it('has the expected extent', function () {\n      expect(point.getExtent()).to.eql([1, 2, 1, 2]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/Point.js","construct with 2D coordinates"],"updatePoint":{"line":25,"column":41,"index":922},"line":25,"code":"    it('has the expected flat coordinates', function () {\n      expect(point.getFlatCoordinates()).to.eql([1, 2]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/Point.js","construct with 2D coordinates"],"updatePoint":{"line":28,"column":38,"index":1042},"line":28,"code":"    it('has stride the expected stride', function () {\n      expect(point.getStride()).to.be(2);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"does not intersect non matching extent","suites":["ol/geom/Point.js","construct with 2D coordinates"],"updatePoint":{"line":31,"column":46,"index":1155},"line":31,"code":"    it('does not intersect non matching extent', function () {\n      expect(point.intersectsExtent([0, 0, 10, 0.5])).to.be(false);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"does intersect it's extent","suites":["ol/geom/Point.js","construct with 2D coordinates"],"updatePoint":{"line":34,"column":34,"index":1282},"line":34,"code":"    it(\"does intersect it's extent\", function () {\n      expect(point.intersectsExtent(point.getExtent())).to.be(true);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/Point.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":43,"column":31,"index":1581},"line":43,"code":"    it('has the expected layout', function () {\n      expect(point.getLayout()).to.be('XYM');\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/Point.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":46,"column":36,"index":1688},"line":46,"code":"    it('has the expected coordinates', function () {\n      expect(point.getCoordinates()).to.eql([1, 2, 3]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/Point.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":49,"column":31,"index":1800},"line":49,"code":"    it('has the expected extent', function () {\n      expect(point.getExtent()).to.eql([1, 2, 1, 2]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/Point.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":52,"column":41,"index":1920},"line":52,"code":"    it('has the expected flat coordinates', function () {\n      expect(point.getFlatCoordinates()).to.eql([1, 2, 3]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected stride","suites":["ol/geom/Point.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":55,"column":31,"index":2036},"line":55,"code":"    it('has the expected stride', function () {\n      expect(point.getStride()).to.be(3);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"does not intersect non matching extent","suites":["ol/geom/Point.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":58,"column":46,"index":2149},"line":58,"code":"    it('does not intersect non matching extent', function () {\n      expect(point.intersectsExtent([0, 0, 10, 0.5])).to.be(false);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"does intersect it's extent","suites":["ol/geom/Point.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":61,"column":34,"index":2276},"line":61,"code":"    it(\"does intersect it's extent\", function () {\n      expect(point.intersectsExtent(point.getExtent())).to.be(true);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/Point.js","construct with 4D coordinates"],"updatePoint":{"line":70,"column":31,"index":2556},"line":70,"code":"    it('has the expected layout', function () {\n      expect(point.getLayout()).to.be('XYZM');\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/Point.js","construct with 4D coordinates"],"updatePoint":{"line":73,"column":36,"index":2664},"line":73,"code":"    it('has the expected coordinates', function () {\n      expect(point.getCoordinates()).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/Point.js","construct with 4D coordinates"],"updatePoint":{"line":76,"column":31,"index":2779},"line":76,"code":"    it('has the expected extent', function () {\n      expect(point.getExtent()).to.eql([1, 2, 1, 2]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/Point.js","construct with 4D coordinates"],"updatePoint":{"line":79,"column":41,"index":2899},"line":79,"code":"    it('has the expected flat coordinates', function () {\n      expect(point.getFlatCoordinates()).to.eql([1, 2, 3, 4]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"has the expected stride","suites":["ol/geom/Point.js","construct with 4D coordinates"],"updatePoint":{"line":82,"column":31,"index":3018},"line":82,"code":"    it('has the expected stride', function () {\n      expect(point.getStride()).to.be(4);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"does not intersect non matching extent","suites":["ol/geom/Point.js","construct with 4D coordinates"],"updatePoint":{"line":85,"column":46,"index":3131},"line":85,"code":"    it('does not intersect non matching extent', function () {\n      expect(point.intersectsExtent([0, 0, 10, 0.5])).to.be(false);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"does intersect it's extent","suites":["ol/geom/Point.js","construct with 4D coordinates"],"updatePoint":{"line":88,"column":34,"index":3258},"line":88,"code":"    it(\"does intersect it's extent\", function () {\n      expect(point.intersectsExtent(point.getExtent())).to.be(true);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"preseves extra dimensions","suites":["ol/geom/Point.js","construct with 4D coordinates","#getClosestPoint"],"updatePoint":{"line":92,"column":35,"index":3434},"line":92,"code":"      it('preseves extra dimensions', function () {\n        const closestPoint = point.getClosestPoint([0, 0]);\n        expect(closestPoint).to.eql([1, 2, 3, 4]);\n      });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"scales a point","suites":["ol/geom/Point.js","#scale()"],"updatePoint":{"line":99,"column":22,"index":3645},"line":99,"code":"    it('scales a point', function () {\n      const geom = new Point([1, 2]);\n      geom.scale(10e6);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([1, 2]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"accepts sx and sy","suites":["ol/geom/Point.js","#scale()"],"updatePoint":{"line":105,"column":25,"index":3848},"line":105,"code":"    it('accepts sx and sy', function () {\n      const geom = new Point([1, 2]);\n      geom.scale(1e6, -42);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([1, 2]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"accepts an anchor","suites":["ol/geom/Point.js","#scale()"],"updatePoint":{"line":111,"column":25,"index":4055},"line":111,"code":"    it('accepts an anchor', function () {\n      const geom = new Point([1, 2]);\n      geom.scale(10, 15, [0, 0]);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([10, 30]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"returns the same result if called twice with the same arguments","suites":["ol/geom/Point.js","#simplifyTransformed()"],"updatePoint":{"line":119,"column":71,"index":4373},"line":119,"code":"    it('returns the same result if called twice with the same arguments', function () {\n      const geom = new Point([1, 2]);\n      const source = getProjection('EPSG:4326');\n      const dest = getProjection('EPSG:3857');\n      const transform = getTransformFromProjections(source, dest);\n      const squaredTolerance = 0.5;\n      const first = geom.simplifyTransformed(squaredTolerance, transform);\n      const second = geom.simplifyTransformed(squaredTolerance, transform);\n      expect(second).to.be(first);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"returns a different result if called with a different tolerance","suites":["ol/geom/Point.js","#simplifyTransformed()"],"updatePoint":{"line":129,"column":71,"index":4892},"line":129,"code":"    it('returns a different result if called with a different tolerance', function () {\n      const geom = new Point([1, 2]);\n      const source = getProjection('EPSG:4326');\n      const dest = getProjection('EPSG:3857');\n      const transform = getTransformFromProjections(source, dest);\n      const squaredTolerance = 0.5;\n      const first = geom.simplifyTransformed(squaredTolerance, transform);\n      const second = geom.simplifyTransformed(squaredTolerance * 2, transform);\n      expect(second).not.to.be(first);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"returns a different result if called after geometry modification","suites":["ol/geom/Point.js","#simplifyTransformed()"],"updatePoint":{"line":139,"column":72,"index":5420},"line":139,"code":"    it('returns a different result if called after geometry modification', function () {\n      const geom = new Point([1, 2]);\n      const source = getProjection('EPSG:4326');\n      const dest = getProjection('EPSG:3857');\n      const transform = getTransformFromProjections(source, dest);\n      const squaredTolerance = 0.5;\n      const first = geom.simplifyTransformed(squaredTolerance, transform);\n      geom.setCoordinates([3, 4]);\n      const second = geom.simplifyTransformed(squaredTolerance * 2, transform);\n      expect(second).not.to.be(first);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"calls a transform function","suites":["ol/geom/Point.js","#applyTransform()"],"updatePoint":{"line":157,"column":34,"index":6124},"line":157,"code":"    it('calls a transform function', function () {\n      point.applyTransform(transform);\n      expect(transform.calledOnce).to.be(true);\n      const args = transform.firstCall.args;\n      expect(args).to.have.length(3);\n      expect(args[0]).to.be(point.getFlatCoordinates()); // input coords\n      expect(args[1]).to.be(point.getFlatCoordinates()); // output coords\n      expect(args[2]).to.be(2); // dimension\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"allows for modification of coordinates","suites":["ol/geom/Point.js","#applyTransform()"],"updatePoint":{"line":167,"column":46,"index":6558},"line":167,"code":"    it('allows for modification of coordinates', function () {\n      const mod = function (input, output, dimension) {\n        const copy = input.slice();\n        output[1] = copy[0];\n        output[0] = copy[1];\n      };\n      point.applyTransform(mod);\n      expect(point.getCoordinates()).to.eql([2, 1]);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"returns undefined","suites":["ol/geom/Point.js","#applyTransform()"],"updatePoint":{"line":176,"column":25,"index":6853},"line":176,"code":"    it('returns undefined', function () {\n      const got = point.applyTransform(transform);\n      expect(got).to.be(undefined);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"transforms a geometry given CRS identifiers","suites":["ol/geom/Point.js","#transform()"],"updatePoint":{"line":182,"column":51,"index":7063},"line":182,"code":"    it('transforms a geometry given CRS identifiers', function () {\n      const point = new Point([-111, 45]).transform('EPSG:4326', 'EPSG:3857');\n      expect(point).to.be.a(Point);\n      const coords = point.getCoordinates();\n      expect(coords[0]).to.roughlyEqual(-12356463.47, 1e-2);\n      expect(coords[1]).to.roughlyEqual(5621521.48, 1e-2);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"modifies the original","suites":["ol/geom/Point.js","#transform()"],"updatePoint":{"line":189,"column":29,"index":7397},"line":189,"code":"    it('modifies the original', function () {\n      const point = new Point([-111, 45]);\n      point.transform('EPSG:4326', 'EPSG:3857');\n      const coords = point.getCoordinates();\n      expect(coords[0]).to.roughlyEqual(-12356463.47, 1e-2);\n      expect(coords[1]).to.roughlyEqual(5621521.48, 1e-2);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"does contain XY","suites":["ol/geom/Point.js","#containsXY()"],"updatePoint":{"line":198,"column":23,"index":7750},"line":198,"code":"    it('does contain XY', function () {\n      const point = new Point([1, 2]);\n      expect(point.containsXY(1, 2)).to.be(true);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"does not contain XY","suites":["ol/geom/Point.js","#containsXY()"],"updatePoint":{"line":202,"column":27,"index":7891},"line":202,"code":"    it('does not contain XY', function () {\n      const point = new Point([1, 2]);\n      expect(point.containsXY(1, 3)).to.be(false);\n      expect(point.containsXY(2, 2)).to.be(false);\n      expect(point.containsXY(2, 3)).to.be(false);\n    });","file":"node/ol/geom/Point.test.js","skipped":false,"dir":"test"},{"name":"cannot be constructed with a null geometry","suites":["ol/geom/Polygon.js"],"updatePoint":{"line":7,"column":48,"index":423},"line":7,"code":"  it('cannot be constructed with a null geometry', function () {\n    expect(function () {\n      return new Polygon(null);\n    }).to.throwException();\n  });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"defaults to layout XY","suites":["ol/geom/Polygon.js","construct empty"],"updatePoint":{"line":17,"column":29,"index":691},"line":17,"code":"    it('defaults to layout XY', function () {\n      expect(polygon.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has empty coordinates","suites":["ol/geom/Polygon.js","construct empty"],"updatePoint":{"line":20,"column":29,"index":792},"line":20,"code":"    it('has empty coordinates', function () {\n      expect(polygon.getCoordinates()).to.be.empty();\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has an empty extent","suites":["ol/geom/Polygon.js","construct empty"],"updatePoint":{"line":23,"column":27,"index":898},"line":23,"code":"    it('has an empty extent', function () {\n      expect(isEmpty(polygon.getExtent())).to.be(true);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has empty flat coordinates","suites":["ol/geom/Polygon.js","construct empty"],"updatePoint":{"line":26,"column":34,"index":1013},"line":26,"code":"    it('has empty flat coordinates', function () {\n      expect(polygon.getFlatCoordinates()).to.be.empty();\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/Polygon.js","construct empty"],"updatePoint":{"line":29,"column":38,"index":1134},"line":29,"code":"    it('has stride the expected stride', function () {\n      expect(polygon.getStride()).to.be(2);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"can append linear rings","suites":["ol/geom/Polygon.js","construct empty"],"updatePoint":{"line":32,"column":31,"index":1234},"line":32,"code":"    it('can append linear rings', function () {\n      polygon.appendLinearRing(new LinearRing([[1, 2], [3, 4], [5, 6]]));\n      expect(polygon.getCoordinates()).to.eql([[[1, 2], [3, 4], [5, 6]]]);\n      polygon.appendLinearRing(new LinearRing([[7, 8], [9, 10], [11, 12]]));\n      expect(polygon.getCoordinates()).to.eql([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":51,"column":31,"index":2139},"line":51,"code":"    it('has the expected layout', function () {\n      expect(polygon.getLayout()).to.be('XY');\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":54,"column":36,"index":2247},"line":54,"code":"    it('has the expected coordinates', function () {\n      expect(polygon.getCoordinates()).to.eql([outerRing, innerRing]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":57,"column":31,"index":2374},"line":57,"code":"    it('has the expected extent', function () {\n      expect(polygon.getExtent()).to.eql([0, 0, 4, 4]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":60,"column":41,"index":2496},"line":60,"code":"    it('has the expected flat coordinates', function () {\n      expect(polygon.getFlatCoordinates()).to.eql(flatCoordinates);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":63,"column":38,"index":2627},"line":63,"code":"    it('has stride the expected stride', function () {\n      expect(polygon.getStride()).to.be(2);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"can return individual rings","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":66,"column":35,"index":2731},"line":66,"code":"    it('can return individual rings', function () {\n      expect(polygon.getLinearRing(0).getCoordinates()).to.eql(outerRing);\n      expect(polygon.getLinearRing(1).getCoordinates()).to.eql(innerRing);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected rings","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":70,"column":30,"index":2936},"line":70,"code":"    it('has the expected rings', function () {\n      const linearRings = polygon.getLinearRings();\n      expect(linearRings).to.be.an(Array);\n      expect(linearRings).to.have.length(2);\n      expect(linearRings[0]).to.be.an(LinearRing);\n      expect(linearRings[0].getCoordinates()).to.eql(outerRing);\n      expect(linearRings[1]).to.be.an(LinearRing);\n      expect(linearRings[1].getCoordinates()).to.eql(innerRing);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not reverse any rings","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":79,"column":34,"index":3367},"line":79,"code":"    it('does not reverse any rings', function () {\n      outerRing.reverse();\n      innerRing.reverse();\n      polygon = new Polygon([outerRing, innerRing]);\n      const coordinates = polygon.getCoordinates();\n      expect(coordinates[0]).to.eql(outerRing);\n      expect(coordinates[1]).to.eql(innerRing);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not contain outside coordinates","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":87,"column":44,"index":3691},"line":87,"code":"    it('does not contain outside coordinates', function () {\n      expect(polygon.intersectsCoordinate(outsideOuter)).to.be(false);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does contain inside coordinates","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":90,"column":39,"index":3826},"line":90,"code":"    it('does contain inside coordinates', function () {\n      expect(polygon.intersectsCoordinate(inside)).to.be(true);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not contain inside inner coordinates","suites":["ol/geom/Polygon.js","construct with 2D coordinates"],"updatePoint":{"line":93,"column":49,"index":3964},"line":93,"code":"    it('does not contain inside inner coordinates', function () {\n      expect(polygon.intersectsCoordinate(insideInner)).to.be(false);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"returns coordinates as they were constructed","suites":["ol/geom/Polygon.js","construct with 2D coordinates","#getCoordinates()"],"updatePoint":{"line":101,"column":54,"index":4409},"line":101,"code":"      it('returns coordinates as they were constructed', function () {\n        expect(right.getCoordinates()).to.eql([ccw, cw]);\n        expect(left.getCoordinates()).to.eql([cw, ccw]);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"can return coordinates with right-hand orientation","suites":["ol/geom/Polygon.js","construct with 2D coordinates","#getCoordinates()"],"updatePoint":{"line":105,"column":60,"index":4611},"line":105,"code":"      it('can return coordinates with right-hand orientation', function () {\n        expect(right.getCoordinates(true)).to.eql([ccw, cw]);\n        expect(left.getCoordinates(true)).to.eql([ccw, cw]);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"can return coordinates with left-hand orientation","suites":["ol/geom/Polygon.js","construct with 2D coordinates","#getCoordinates()"],"updatePoint":{"line":109,"column":59,"index":4820},"line":109,"code":"      it('can return coordinates with left-hand orientation', function () {\n        expect(right.getCoordinates(false)).to.eql([cw, ccw]);\n        expect(left.getCoordinates(false)).to.eql([cw, ccw]);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses the outer ring if necessary","suites":["ol/geom/Polygon.js","construct with 2D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":115,"column":46,"index":5084},"line":115,"code":"      it('reverses the outer ring if necessary', function () {\n        outerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses inner rings if necessary","suites":["ol/geom/Polygon.js","construct with 2D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":120,"column":43,"index":5316},"line":120,"code":"      it('reverses inner rings if necessary', function () {\n        innerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses all rings if necessary","suites":["ol/geom/Polygon.js","construct with 2D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":125,"column":41,"index":5546},"line":125,"code":"      it('reverses all rings if necessary', function () {\n        outerRing.reverse();\n        innerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/Polygon.js","construct with 3D coordinates"],"updatePoint":{"line":145,"column":31,"index":6330},"line":145,"code":"    it('has the expected layout', function () {\n      expect(polygon.getLayout()).to.be('XYZ');\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates"],"updatePoint":{"line":148,"column":36,"index":6439},"line":148,"code":"    it('has the expected coordinates', function () {\n      expect(polygon.getCoordinates()).to.eql([outerRing, innerRing]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/Polygon.js","construct with 3D coordinates"],"updatePoint":{"line":151,"column":31,"index":6566},"line":151,"code":"    it('has the expected extent', function () {\n      expect(polygon.getExtent()).to.eql([0, 0, 4, 4]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates"],"updatePoint":{"line":154,"column":41,"index":6688},"line":154,"code":"    it('has the expected flat coordinates', function () {\n      expect(polygon.getFlatCoordinates()).to.eql(flatCoordinates);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/Polygon.js","construct with 3D coordinates"],"updatePoint":{"line":157,"column":38,"index":6819},"line":157,"code":"    it('has stride the expected stride', function () {\n      expect(polygon.getStride()).to.be(3);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not contain outside coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates"],"updatePoint":{"line":160,"column":44,"index":6932},"line":160,"code":"    it('does not contain outside coordinates', function () {\n      expect(polygon.intersectsCoordinate(outsideOuter)).to.be(false);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does contain inside coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates"],"updatePoint":{"line":163,"column":39,"index":7067},"line":163,"code":"    it('does contain inside coordinates', function () {\n      expect(polygon.intersectsCoordinate(inside)).to.be(true);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not contain inside inner coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates"],"updatePoint":{"line":166,"column":49,"index":7205},"line":166,"code":"    it('does not contain inside inner coordinates', function () {\n      expect(polygon.intersectsCoordinate(insideInner)).to.be(false);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not intersect outside extent","suites":["ol/geom/Polygon.js","construct with 3D coordinates","#intersectsExtent"],"updatePoint":{"line":170,"column":43,"index":7391},"line":170,"code":"      it('does not intersect outside extent', function () {\n        expect(polygon.intersectsExtent(boundingExtent([outsideOuter]))).to.be(false);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does intersect inside extent","suites":["ol/geom/Polygon.js","construct with 3D coordinates","#intersectsExtent"],"updatePoint":{"line":173,"column":38,"index":7543},"line":173,"code":"      it('does intersect inside extent', function () {\n        expect(polygon.intersectsExtent(boundingExtent([inside]))).to.be(true);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does intersect boundary extent","suites":["ol/geom/Polygon.js","construct with 3D coordinates","#intersectsExtent"],"updatePoint":{"line":176,"column":40,"index":7690},"line":176,"code":"      it('does intersect boundary extent', function () {\n        const firstMidX = (outerRing[0][0] + outerRing[1][0]) / 2;\n        const firstMidY = (outerRing[0][1] + outerRing[1][1]) / 2;\n        expect(polygon.intersectsExtent(boundingExtent([[firstMidX, firstMidY]]))).to.be(true);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not intersect extent fully contained by inner ring","suites":["ol/geom/Polygon.js","construct with 3D coordinates","#intersectsExtent"],"updatePoint":{"line":181,"column":65,"index":8012},"line":181,"code":"      it('does not intersect extent fully contained by inner ring', function () {\n        expect(polygon.intersectsExtent(boundingExtent([insideInner]))).to.be(false);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses the outer ring if necessary","suites":["ol/geom/Polygon.js","construct with 3D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":186,"column":46,"index":8237},"line":186,"code":"      it('reverses the outer ring if necessary', function () {\n        outerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses inner rings if necessary","suites":["ol/geom/Polygon.js","construct with 3D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":191,"column":43,"index":8469},"line":191,"code":"      it('reverses inner rings if necessary', function () {\n        innerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses all rings if necessary","suites":["ol/geom/Polygon.js","construct with 3D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":196,"column":41,"index":8699},"line":196,"code":"      it('reverses all rings if necessary', function () {\n        outerRing.reverse();\n        innerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":216,"column":31,"index":9505},"line":216,"code":"    it('has the expected layout', function () {\n      expect(polygon.getLayout()).to.be('XYM');\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":219,"column":36,"index":9614},"line":219,"code":"    it('has the expected coordinates', function () {\n      expect(polygon.getCoordinates()).to.eql([outerRing, innerRing]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":222,"column":31,"index":9741},"line":222,"code":"    it('has the expected extent', function () {\n      expect(polygon.getExtent()).to.eql([0, 0, 4, 4]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":225,"column":41,"index":9863},"line":225,"code":"    it('has the expected flat coordinates', function () {\n      expect(polygon.getFlatCoordinates()).to.eql(flatCoordinates);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":228,"column":38,"index":9994},"line":228,"code":"    it('has stride the expected stride', function () {\n      expect(polygon.getStride()).to.be(3);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not contain outside coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":231,"column":44,"index":10107},"line":231,"code":"    it('does not contain outside coordinates', function () {\n      expect(polygon.intersectsCoordinate(outsideOuter)).to.be(false);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does contain inside coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":234,"column":39,"index":10242},"line":234,"code":"    it('does contain inside coordinates', function () {\n      expect(polygon.intersectsCoordinate(inside)).to.be(true);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not contain inside inner coordinates","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM"],"updatePoint":{"line":237,"column":49,"index":10380},"line":237,"code":"    it('does not contain inside inner coordinates', function () {\n      expect(polygon.intersectsCoordinate(insideInner)).to.be(false);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not intersect outside extent","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM","#intersectsExtent"],"updatePoint":{"line":241,"column":43,"index":10566},"line":241,"code":"      it('does not intersect outside extent', function () {\n        expect(polygon.intersectsExtent(boundingExtent([outsideOuter]))).to.be(false);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does intersect inside extent","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM","#intersectsExtent"],"updatePoint":{"line":244,"column":38,"index":10718},"line":244,"code":"      it('does intersect inside extent', function () {\n        expect(polygon.intersectsExtent(boundingExtent([inside]))).to.be(true);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does intersect boundary extent","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM","#intersectsExtent"],"updatePoint":{"line":247,"column":40,"index":10865},"line":247,"code":"      it('does intersect boundary extent', function () {\n        const firstMidX = (outerRing[0][0] + outerRing[1][0]) / 2;\n        const firstMidY = (outerRing[0][1] + outerRing[1][1]) / 2;\n        expect(polygon.intersectsExtent(boundingExtent([[firstMidX, firstMidY]]))).to.be(true);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not intersect extent fully contained by inner ring","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM","#intersectsExtent"],"updatePoint":{"line":252,"column":65,"index":11187},"line":252,"code":"      it('does not intersect extent fully contained by inner ring', function () {\n        expect(polygon.intersectsExtent(boundingExtent([insideInner]))).to.be(false);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses the outer ring if necessary","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM","#getOrientedFlatCoordinates"],"updatePoint":{"line":257,"column":46,"index":11412},"line":257,"code":"      it('reverses the outer ring if necessary', function () {\n        outerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses inner rings if necessary","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM","#getOrientedFlatCoordinates"],"updatePoint":{"line":262,"column":43,"index":11644},"line":262,"code":"      it('reverses inner rings if necessary', function () {\n        innerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses all rings if necessary","suites":["ol/geom/Polygon.js","construct with 3D coordinates and layout XYM","#getOrientedFlatCoordinates"],"updatePoint":{"line":267,"column":41,"index":11874},"line":267,"code":"      it('reverses all rings if necessary', function () {\n        outerRing.reverse();\n        innerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected layout","suites":["ol/geom/Polygon.js","construct with 4D coordinates"],"updatePoint":{"line":289,"column":31,"index":12911},"line":289,"code":"    it('has the expected layout', function () {\n      expect(polygon.getLayout()).to.be('XYZM');\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected coordinates","suites":["ol/geom/Polygon.js","construct with 4D coordinates"],"updatePoint":{"line":292,"column":36,"index":13021},"line":292,"code":"    it('has the expected coordinates', function () {\n      expect(polygon.getCoordinates()).to.eql([outerRing, innerRing1, innerRing2]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected extent","suites":["ol/geom/Polygon.js","construct with 4D coordinates"],"updatePoint":{"line":295,"column":31,"index":13161},"line":295,"code":"    it('has the expected extent', function () {\n      expect(polygon.getExtent()).to.eql([0, 0, 6, 6]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has the expected flat coordinates","suites":["ol/geom/Polygon.js","construct with 4D coordinates"],"updatePoint":{"line":298,"column":41,"index":13283},"line":298,"code":"    it('has the expected flat coordinates', function () {\n      expect(polygon.getFlatCoordinates()).to.eql(flatCoordinates);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"has stride the expected stride","suites":["ol/geom/Polygon.js","construct with 4D coordinates"],"updatePoint":{"line":301,"column":38,"index":13414},"line":301,"code":"    it('has stride the expected stride', function () {\n      expect(polygon.getStride()).to.be(4);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not contain outside coordinates","suites":["ol/geom/Polygon.js","construct with 4D coordinates"],"updatePoint":{"line":304,"column":44,"index":13527},"line":304,"code":"    it('does not contain outside coordinates', function () {\n      expect(polygon.intersectsCoordinate(outsideOuter)).to.be(false);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does contain inside coordinates","suites":["ol/geom/Polygon.js","construct with 4D coordinates"],"updatePoint":{"line":307,"column":39,"index":13662},"line":307,"code":"    it('does contain inside coordinates', function () {\n      expect(polygon.intersectsCoordinate(inside)).to.be(true);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not contain inside inner coordinates","suites":["ol/geom/Polygon.js","construct with 4D coordinates"],"updatePoint":{"line":310,"column":49,"index":13800},"line":310,"code":"    it('does not contain inside inner coordinates', function () {\n      expect(polygon.intersectsCoordinate(insideInner1)).to.be(false);\n      expect(polygon.intersectsCoordinate(insideInner2)).to.be(false);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not intersect outside extent","suites":["ol/geom/Polygon.js","construct with 4D coordinates","#intersectsExtent"],"updatePoint":{"line":315,"column":43,"index":14058},"line":315,"code":"      it('does not intersect outside extent', function () {\n        expect(polygon.intersectsExtent(boundingExtent([outsideOuter]))).to.be(false);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does intersect inside extent","suites":["ol/geom/Polygon.js","construct with 4D coordinates","#intersectsExtent"],"updatePoint":{"line":318,"column":38,"index":14210},"line":318,"code":"      it('does intersect inside extent', function () {\n        expect(polygon.intersectsExtent(boundingExtent([inside]))).to.be(true);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does intersect boundary extent","suites":["ol/geom/Polygon.js","construct with 4D coordinates","#intersectsExtent"],"updatePoint":{"line":321,"column":40,"index":14357},"line":321,"code":"      it('does intersect boundary extent', function () {\n        const firstMidX = (outerRing[0][0] + outerRing[1][0]) / 2;\n        const firstMidY = (outerRing[0][1] + outerRing[1][1]) / 2;\n        expect(polygon.intersectsExtent(boundingExtent([[firstMidX, firstMidY]]))).to.be(true);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"does not intersect extent fully contained by inner ring","suites":["ol/geom/Polygon.js","construct with 4D coordinates","#intersectsExtent"],"updatePoint":{"line":326,"column":65,"index":14679},"line":326,"code":"      it('does not intersect extent fully contained by inner ring', function () {\n        expect(polygon.intersectsExtent(boundingExtent([insideInner1]))).to.be(false);\n        expect(polygon.intersectsExtent(boundingExtent([insideInner2]))).to.be(false);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses the outer ring if necessary","suites":["ol/geom/Polygon.js","construct with 4D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":332,"column":46,"index":14992},"line":332,"code":"      it('reverses the outer ring if necessary', function () {\n        outerRing.reverse();\n        polygon = new Polygon([outerRing, innerRing1, innerRing2]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses inner rings if necessary","suites":["ol/geom/Polygon.js","construct with 4D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":337,"column":43,"index":15237},"line":337,"code":"      it('reverses inner rings if necessary', function () {\n        innerRing1.reverse();\n        innerRing2.reverse();\n        polygon = new Polygon([outerRing, innerRing1, innerRing2]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"reverses all rings if necessary","suites":["ol/geom/Polygon.js","construct with 4D coordinates","#getOrientedFlatCoordinates"],"updatePoint":{"line":343,"column":41,"index":15511},"line":343,"code":"      it('reverses all rings if necessary', function () {\n        outerRing.reverse();\n        innerRing1.reverse();\n        innerRing2.reverse();\n        polygon = new Polygon([outerRing, innerRing1, innerRing2]);\n        expect(polygon.getOrientedFlatCoordinates()).to.eql(flatCoordinates);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"returns the expected result","suites":["ol/geom/Polygon.js","with a simple polygon","#getSimplifiedGeometry"],"updatePoint":{"line":358,"column":37,"index":16078},"line":358,"code":"      it('returns the expected result', function () {\n        const simplifiedGeometry = polygon.getSimplifiedGeometry(9);\n        expect(simplifiedGeometry).to.be.an(Polygon);\n        expect(simplifiedGeometry.getCoordinates()).to.eql([[[3, 0], [0, 3], [0, 6], [6, 6], [3, 3]]]);\n      });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"scales a polygon","suites":["ol/geom/Polygon.js","#scale()"],"updatePoint":{"line":366,"column":24,"index":16407},"line":366,"code":"    it('scales a polygon', function () {\n      const geom = new Polygon([[[-1, -2], [1, -2], [1, 2], [-1, 2], [-1, -2]]]);\n      geom.scale(10);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[-10, -20], [10, -20], [10, 20], [-10, 20], [-10, -20]]]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"accepts sx and sy","suites":["ol/geom/Polygon.js","#scale()"],"updatePoint":{"line":372,"column":25,"index":16704},"line":372,"code":"    it('accepts sx and sy', function () {\n      const geom = new Polygon([[[-1, -2], [1, -2], [1, 2], [-1, 2], [-1, -2]]]);\n      geom.scale(2, 3);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[-2, -6], [2, -6], [2, 6], [-2, 6], [-2, -6]]]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"accepts an anchor","suites":["ol/geom/Polygon.js","#scale()"],"updatePoint":{"line":378,"column":25,"index":16993},"line":378,"code":"    it('accepts an anchor', function () {\n      const geom = new Polygon([[[-1, -2], [1, -2], [1, 2], [-1, 2], [-1, -2]]]);\n      geom.scale(3, 2, [-1, -2]);\n      const coordinates = geom.getCoordinates();\n      expect(coordinates).to.eql([[[-1, -2], [5, -2], [5, 6], [-1, 6], [-1, -2]]]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"returns XYM point with intersection width as M","suites":["ol/geom/Polygon.js","#getInteriorPoint"],"updatePoint":{"line":386,"column":54,"index":17373},"line":386,"code":"    it('returns XYM point with intersection width as M', function () {\n      const geom = new Polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]]);\n      const interiorPoint = geom.getInteriorPoint();\n      expect(interiorPoint.getType()).to.be('Point');\n      expect(interiorPoint.layout).to.be('XYM');\n      expect(interiorPoint.getCoordinates()).to.eql([0.5, 0.5, 1]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"returns XYM point for donut polygons","suites":["ol/geom/Polygon.js","#getInteriorPoint"],"updatePoint":{"line":393,"column":44,"index":17742},"line":393,"code":"    it('returns XYM point for donut polygons', function () {\n      const geom = new Polygon([[[0.5, 0.5], [0.5, 2.5], [2.5, 2.5], [2.5, 0.5], [0.5, 0.5]], [[1, 1], [2, 1], [2, 2], [1, 2], [1, 1]]]);\n      const interiorPoint = geom.getInteriorPoint();\n      expect(interiorPoint.getType()).to.be('Point');\n      expect(interiorPoint.layout).to.be('XYM');\n      expect(interiorPoint.getCoordinates()).to.eql([0.75, 1.5, 0.5]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"creates the correct polygon","suites":["ol/geom/Polygon.js","fromExtent()"],"updatePoint":{"line":402,"column":35,"index":18214},"line":402,"code":"    it('creates the correct polygon', function () {\n      const extent = [1, 2, 3, 5];\n      const polygon = fromExtent(extent);\n      const flatCoordinates = polygon.getFlatCoordinates();\n      expect(flatCoordinates).to.eql([1, 2, 1, 5, 3, 5, 3, 2, 1, 2]);\n      const orientedFlatCoordinates = polygon.getOrientedFlatCoordinates();\n      expect(orientedFlatCoordinates).to.eql([1, 2, 1, 5, 3, 5, 3, 2, 1, 2]);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"throws on empty extent","suites":["ol/geom/Polygon.js","fromExtent()"],"updatePoint":{"line":410,"column":30,"index":18630},"line":410,"code":"    it('throws on empty extent', function () {\n      expect(function () {\n        fromExtent(createEmpty());\n      }).to.throwException();\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"creates a regular polygon","suites":["ol/geom/Polygon.js","fromCircle()"],"updatePoint":{"line":417,"column":33,"index":18827},"line":417,"code":"    it('creates a regular polygon', function () {\n      const circle = new Circle([0, 0, 0], 1, 'XYZ');\n      const polygon = fromCircle(circle);\n      const coordinates = polygon.getLinearRing(0).getCoordinates();\n      expect(coordinates[0].length).to.eql(3);\n      expect(coordinates[0][2]).to.eql(0);\n      expect(coordinates[32]).to.eql(coordinates[0]);\n      // east\n      expect(coordinates[0][0]).to.roughlyEqual(1, 1e-9);\n      expect(coordinates[0][1]).to.roughlyEqual(0, 1e-9);\n      // south\n      expect(coordinates[8][0]).to.roughlyEqual(0, 1e-9);\n      expect(coordinates[8][1]).to.roughlyEqual(1, 1e-9);\n      // west\n      expect(coordinates[16][0]).to.roughlyEqual(-1, 1e-9);\n      expect(coordinates[16][1]).to.roughlyEqual(0, 1e-9);\n      // north\n      expect(coordinates[24][0]).to.roughlyEqual(0, 1e-9);\n      expect(coordinates[24][1]).to.roughlyEqual(-1, 1e-9);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"creates a regular polygon with custom sides and angle","suites":["ol/geom/Polygon.js","fromCircle()"],"updatePoint":{"line":437,"column":61,"index":19750},"line":437,"code":"    it('creates a regular polygon with custom sides and angle', function () {\n      const circle = new Circle([0, 0], 1);\n      const polygon = fromCircle(circle, 4, Math.PI / 2);\n      const coordinates = polygon.getLinearRing(0).getCoordinates();\n      expect(coordinates[4]).to.eql(coordinates[0]);\n      expect(coordinates[0][0]).to.roughlyEqual(0, 1e-9);\n      expect(coordinates[0][1]).to.roughlyEqual(1, 1e-9);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"creates a regular polygon, maintaining ZM values","suites":["ol/geom/Polygon.js","fromCircle()"],"updatePoint":{"line":445,"column":56,"index":20171},"line":445,"code":"    it('creates a regular polygon, maintaining ZM values', () => {\n      const circle = new Circle([0, 0, 1, 1], 1, 'XYZM');\n      const polygon = fromCircle(circle);\n      const coordinates = polygon.getLinearRing(0).getCoordinates();\n      expect(coordinates[0][2]).to.eql(1);\n      expect(coordinates[0][3]).to.eql(1);\n    });","file":"node/ol/geom/Polygon.test.js","skipped":false,"dir":"test"},{"name":"is dispatched when the source is ready","suites":["ol/layer/Layer.js","sourceready event"],"updatePoint":{"line":12,"column":46,"index":428},"line":12,"code":"    it('is dispatched when the source is ready', done => {\n      const source = new Source({\n        state: 'loading'\n      });\n      const layer = new Layer({\n        source: source\n      });\n      function handler(event) {\n        expect(event).to.be.a(BaseEvent);\n        expect(event.target).to.be(layer);\n        done();\n      }\n      layer.on('sourceready', handler);\n      source.setState('ready');\n    });","file":"node/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is dispatched even if the source is ready at construction","suites":["ol/layer/Layer.js","sourceready event"],"updatePoint":{"line":27,"column":65,"index":861},"line":27,"code":"    it('is dispatched even if the source is ready at construction', done => {\n      const source = new Source({});\n      const layer = new Layer({\n        source: source\n      });\n      function handler(event) {\n        expect(event).to.be.a(BaseEvent);\n        expect(event.target).to.be(layer);\n        done();\n      }\n      layer.on('sourceready', handler);\n    });","file":"node/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is not dispatched twice","suites":["ol/layer/Layer.js","sourceready event"],"updatePoint":{"line":39,"column":31,"index":1196},"line":39,"code":"    it('is not dispatched twice', async () => {\n      const source = new Source({\n        state: 'loading'\n      });\n      const layer = new Layer({\n        source: source\n      });\n      let calls = 0;\n      function handler(event) {\n        calls += 1;\n      }\n      layer.on('sourceready', handler);\n      layer.changed();\n      await delay(5);\n      source.setState('ready');\n      await delay(5);\n      source.changed();\n      await delay(5);\n      expect(calls).to.be(1);\n    });","file":"node/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is not dispatched after source is removed","suites":["ol/layer/Layer.js","sourceready event"],"updatePoint":{"line":59,"column":49,"index":1700},"line":59,"code":"    it('is not dispatched after source is removed', async () => {\n      const source = new Source({\n        state: 'loading'\n      });\n      const layer = new Layer({\n        source: source\n      });\n      let calls = 0;\n      function handler(event) {\n        calls += 1;\n      }\n      layer.on('sourceready', handler);\n      layer.setSource(null);\n      source.setState('ready');\n      await delay(5);\n      expect(calls).to.be(0);\n    });","file":"node/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is dispatched if source is added later","suites":["ol/layer/Layer.js","sourceready event"],"updatePoint":{"line":76,"column":46,"index":2139},"line":76,"code":"    it('is dispatched if source is added later', async () => {\n      const layer = new Layer({});\n      let calls = 0;\n      function handler(event) {\n        calls += 1;\n      }\n      layer.on('sourceready', handler);\n      const source = new Source({\n        state: 'ready'\n      });\n      layer.setSource(source);\n      await delay(5);\n      expect(calls).to.be(1);\n    });","file":"node/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"is dispatched if new source is set","suites":["ol/layer/Layer.js","sourceready event"],"updatePoint":{"line":90,"column":42,"index":2512},"line":90,"code":"    it('is dispatched if new source is set', async () => {\n      const layer = new Layer({\n        source: new Source({})\n      });\n      let calls = 0;\n      function handler(event) {\n        calls += 1;\n      }\n      layer.on('sourceready', handler);\n      await delay(5);\n      expect(calls).to.be(1);\n      const source = new Source({\n        state: 'ready'\n      });\n      layer.setSource(source);\n      await delay(5);\n      expect(calls).to.be(2);\n    });","file":"node/ol/layer/Layer.test.js","skipped":false,"dir":"test"},{"name":"accepts a flat style","suites":["ol/layer/Vector.js","setStyle()"],"updatePoint":{"line":8,"column":28,"index":361},"line":8,"code":"    it('accepts a flat style', () => {\n      const layer = new Vector();\n      layer.setStyle({\n        'fill-color': 'red'\n      });\n      const style = layer.getStyle();\n      expect(style).to.be.a(Style);\n      const fill = style.getFill();\n      expect(fill).to.be.a(Fill);\n      expect(fill.getColor()).to.be('red');\n    });","file":"node/ol/layer/Vector.test.js","skipped":false,"dir":"test"},{"name":"accepts an array of flat styles","suites":["ol/layer/Vector.js","setStyle()"],"updatePoint":{"line":19,"column":39,"index":702},"line":19,"code":"    it('accepts an array of flat styles', () => {\n      const layer = new Vector();\n      layer.setStyle([{\n        'stroke-color': 'red',\n        'stroke-width': 10\n      }, {\n        'stroke-color': 'yellow',\n        'stroke-width': 5\n      }]);\n      const style = layer.getStyle();\n      expect(Array.isArray(style)).to.be(true);\n      expect(style).to.have.length(2);\n      const first = style[0];\n      expect(first).to.be.a(Style);\n      const firstStroke = first.getStroke();\n      expect(firstStroke).to.be.a(Stroke);\n      expect(firstStroke.getColor()).to.be('red');\n      expect(firstStroke.getWidth()).to.be(10);\n      const second = style[1];\n      expect(second).to.be.a(Style);\n      const secondStroke = second.getStroke();\n      expect(secondStroke).to.be.a(Stroke);\n      expect(secondStroke.getColor()).to.be('yellow');\n      expect(secondStroke.getWidth()).to.be(5);\n    });","file":"node/ol/layer/Vector.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at -Infinity","suites":["ol/math.js","clamp"],"updatePoint":{"line":5,"column":46,"index":280},"line":5,"code":"    it('returns the correct value at -Infinity', function () {\n      expect(clamp(-Infinity, 10, 20)).to.eql(10);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at min","suites":["ol/math.js","clamp"],"updatePoint":{"line":8,"column":40,"index":396},"line":8,"code":"    it('returns the correct value at min', function () {\n      expect(clamp(10, 10, 20)).to.eql(10);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at mid point","suites":["ol/math.js","clamp"],"updatePoint":{"line":11,"column":46,"index":511},"line":11,"code":"    it('returns the correct value at mid point', function () {\n      expect(clamp(15, 10, 20)).to.eql(15);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at max","suites":["ol/math.js","clamp"],"updatePoint":{"line":14,"column":40,"index":620},"line":14,"code":"    it('returns the correct value at max', function () {\n      expect(clamp(20, 10, 20)).to.eql(20);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at Infinity","suites":["ol/math.js","clamp"],"updatePoint":{"line":17,"column":45,"index":734},"line":17,"code":"    it('returns the correct value at Infinity', function () {\n      expect(clamp(Infinity, 10, 20)).to.eql(20);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"calculates correctly","suites":["ol/math.js","solveLinearSystem"],"updatePoint":{"line":22,"column":28,"index":889},"line":22,"code":"    it('calculates correctly', function () {\n      const result = solveLinearSystem([[2, 1, 3, 1], [2, 6, 8, 3], [6, 8, 18, 5]]);\n      expect(result[0]).to.roughlyEqual(0.3, 1e-9);\n      expect(result[1]).to.roughlyEqual(0.4, 1e-9);\n      expect(result[2]).to.roughlyEqual(0, 1e-9);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"can handle singular matrix","suites":["ol/math.js","solveLinearSystem"],"updatePoint":{"line":28,"column":34,"index":1187},"line":28,"code":"    it('can handle singular matrix', function () {\n      const result = solveLinearSystem([[2, 1, 3, 1], [2, 6, 8, 3], [2, 1, 3, 1]]);\n      expect(result).to.be(null);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at -π","suites":["ol/math.js","toDegrees"],"updatePoint":{"line":34,"column":39,"index":1413},"line":34,"code":"    it('returns the correct value at -π', function () {\n      expect(toDegrees(-Math.PI)).to.be(-180);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at 0","suites":["ol/math.js","toDegrees"],"updatePoint":{"line":37,"column":38,"index":1523},"line":37,"code":"    it('returns the correct value at 0', function () {\n      expect(toDegrees(0)).to.be(0);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at π","suites":["ol/math.js","toDegrees"],"updatePoint":{"line":40,"column":38,"index":1623},"line":40,"code":"    it('returns the correct value at π', function () {\n      expect(toDegrees(Math.PI)).to.be(180);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at -180","suites":["ol/math.js","toRadians"],"updatePoint":{"line":45,"column":41,"index":1778},"line":45,"code":"    it('returns the correct value at -180', function () {\n      expect(toRadians(-180)).to.be(-Math.PI);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at 0","suites":["ol/math.js","toRadians"],"updatePoint":{"line":48,"column":38,"index":1888},"line":48,"code":"    it('returns the correct value at 0', function () {\n      expect(toRadians(0)).to.be(0);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns the correct value at 180","suites":["ol/math.js","toRadians"],"updatePoint":{"line":51,"column":40,"index":1990},"line":51,"code":"    it('returns the correct value at 180', function () {\n      expect(toRadians(180)).to.be(Math.PI);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"256 / 8 returns 0","suites":["ol/math.js","modulo"],"updatePoint":{"line":56,"column":25,"index":2126},"line":56,"code":"    it('256 / 8 returns 0', function () {\n      expect(modulo(256, 8)).to.be(0);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"positive and positive returns a positive ","suites":["ol/math.js","modulo"],"updatePoint":{"line":59,"column":49,"index":2239},"line":59,"code":"    it('positive and positive returns a positive ', function () {\n      expect(modulo(7, 8)).to.be(7);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"same Dividend and Divisor returns 0","suites":["ol/math.js","modulo"],"updatePoint":{"line":62,"column":43,"index":2344},"line":62,"code":"    it('same Dividend and Divisor returns 0', function () {\n      expect(modulo(4, 4)).to.be(0);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"negative and positive returns positive","suites":["ol/math.js","modulo"],"updatePoint":{"line":65,"column":46,"index":2452},"line":65,"code":"    it('negative and positive returns positive', function () {\n      expect(modulo(-3, 4)).to.be(1);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"negative and negative returns negative","suites":["ol/math.js","modulo"],"updatePoint":{"line":68,"column":46,"index":2561},"line":68,"code":"    it('negative and negative returns negative', function () {\n      expect(modulo(-4, -5)).to.be(-4);\n      expect(modulo(-3, -4)).to.be(-3);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"positive and negative returns negative","suites":["ol/math.js","modulo"],"updatePoint":{"line":72,"column":46,"index":2712},"line":72,"code":"    it('positive and negative returns negative', function () {\n      expect(modulo(3, -4)).to.be(-1);\n      expect(modulo(1, -5)).to.be(-4);\n      expect(modulo(6, -5)).to.be(-4);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"correctly interpolated numbers","suites":["ol/math.js","lerp"],"updatePoint":{"line":79,"column":38,"index":2931},"line":79,"code":"    it('correctly interpolated numbers', function () {\n      expect(lerp(0, 0, 0)).to.be(0);\n      expect(lerp(0, 1, 0)).to.be(0);\n      expect(lerp(1, 11, 5)).to.be(51);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"correctly interpolates floats","suites":["ol/math.js","lerp"],"updatePoint":{"line":84,"column":37,"index":3109},"line":84,"code":"    it('correctly interpolates floats', function () {\n      expect(lerp(0, 1, 0.5)).to.be(0.5);\n      expect(lerp(0.25, 0.75, 0.5)).to.be(0.5);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"returns a number with a limited number of decimals","suites":["ol/math.js","toFixed"],"updatePoint":{"line":90,"column":58,"index":3318},"line":90,"code":"    it('returns a number with a limited number of decimals', () => {\n      expect(toFixed(0.123456789, 3)).to.be(0.123);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"rounds up","suites":["ol/math.js","toFixed"],"updatePoint":{"line":93,"column":17,"index":3406},"line":93,"code":"    it('rounds up', () => {\n      expect(toFixed(0.123456789, 4)).to.be(0.1235);\n    });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"provides numeric equivalent of ().toFixed()","suites":["ol/math.js","toFixed"],"updatePoint":{"line":98,"column":67,"index":3782},"line":98,"code":"      it(`provides numeric equivalent of (${c[0]}).toFixed(${c[1]})`, () => {\n        const string = c[0].toFixed(c[1]);\n        const expected = parseFloat(string);\n        const actual = toFixed(c[0], c[1]);\n        expect(actual).to.be(expected);\n      });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"works for round(, )","suites":["ol/math.js","round"],"updatePoint":{"line":109,"column":43,"index":4181},"line":109,"code":"      it(`works for round(${c[0]}, ${c[1]})`, () => {\n        expect(round(c[0], c[1])).to.be(c[2]);\n      });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"works for floor(, )","suites":["ol/math.js","floor"],"updatePoint":{"line":117,"column":43,"index":4443},"line":117,"code":"      it(`works for floor(${c[0]}, ${c[1]})`, () => {\n        expect(floor(c[0], c[1])).to.be(c[2]);\n      });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"works for ceil(, )","suites":["ol/math.js","ceil"],"updatePoint":{"line":125,"column":42,"index":4703},"line":125,"code":"      it(`works for ceil(${c[0]}, ${c[1]})`, () => {\n        expect(ceil(c[0], c[1])).to.be(c[2]);\n      });","file":"node/ol/math.test.js","skipped":false,"dir":"test"},{"name":"removes all properties from an object","suites":["ol/obj.js","clear()"],"updatePoint":{"line":5,"column":45,"index":204},"line":5,"code":"    it('removes all properties from an object', function () {\n      expect(isEmpty(clear({\n        foo: 'bar'\n      }))).to.be(true);\n      expect(isEmpty(clear({\n        foo: 'bar',\n        num: 42\n      }))).to.be(true);\n      expect(isEmpty(clear({}))).to.be(true);\n      expect(isEmpty(clear(null))).to.be(true);\n    });","file":"node/ol/obj.test.js","skipped":false,"dir":"test"},{"name":"checks if an object has any properties","suites":["ol/obj.js","isEmpty()"],"updatePoint":{"line":18,"column":46,"index":574},"line":18,"code":"    it('checks if an object has any properties', function () {\n      expect(isEmpty({})).to.be(true);\n      expect(isEmpty(null)).to.be(true);\n      expect(isEmpty({\n        foo: 'bar'\n      })).to.be(false);\n      expect(isEmpty({\n        foo: false\n      })).to.be(false);\n    });","file":"node/ol/obj.test.js","skipped":false,"dir":"test"},{"name":"returns undefined","suites":["ol/Object.js","get, set and unset","get an unset property"],"updatePoint":{"line":16,"column":27,"index":478},"line":16,"code":"      it('returns undefined', function () {\n        expect(v).to.be(undefined);\n      });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/Object.js","get, set and unset","get a set property"],"updatePoint":{"line":26,"column":32,"index":731},"line":26,"code":"      it('returns expected value', function () {\n        expect(v).to.eql(1);\n      });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"returns undefined","suites":["ol/Object.js","get, set and unset","unset a set property"],"updatePoint":{"line":34,"column":27,"index":937},"line":34,"code":"      it('returns undefined', function () {\n        const v = o.unset('k');\n        expect(v).to.be(undefined);\n      });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"does not return values that are not explicitly set","suites":["ol/Object.js","#get()"],"updatePoint":{"line":41,"column":58,"index":1139},"line":41,"code":"    it('does not return values that are not explicitly set', function () {\n      const o = new BaseObject();\n      expect(o.get('constructor')).to.be(undefined);\n      expect(o.get('hasOwnProperty')).to.be(undefined);\n      expect(o.get('isPrototypeOf')).to.be(undefined);\n      expect(o.get('propertyIsEnumerable')).to.be(undefined);\n      expect(o.get('toLocaleString')).to.be(undefined);\n      expect(o.get('toString')).to.be(undefined);\n      expect(o.get('valueOf')).to.be(undefined);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"can be used with arbitrary names","suites":["ol/Object.js","#set()"],"updatePoint":{"line":53,"column":40,"index":1660},"line":53,"code":"    it('can be used with arbitrary names', function () {\n      const o = new BaseObject();\n      o.set('set', 'sat');\n      expect(o.get('set')).to.be('sat');\n      o.set('get', 'got');\n      expect(o.get('get')).to.be('got');\n      o.set('toString', 'string');\n      expect(o.get('toString')).to.be('string');\n      expect(typeof o.toString).to.be('function');\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"returns property names set at construction","suites":["ol/Object.js","#getKeys()"],"updatePoint":{"line":65,"column":50,"index":2085},"line":65,"code":"    it('returns property names set at construction', function () {\n      const o = new BaseObject({\n        prop1: 'val1',\n        prop2: 'val2',\n        toString: 'string',\n        get: 'foo'\n      });\n      const keys = o.getKeys();\n      expect(keys.length).to.be(4);\n      expect(keys.sort()).to.eql(['get', 'prop1', 'prop2', 'toString']);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"sets multiple values at once","suites":["ol/Object.js","setProperties"],"updatePoint":{"line":78,"column":36,"index":2471},"line":78,"code":"    it('sets multiple values at once', function () {\n      o.setProperties({\n        k1: 1,\n        k2: 2\n      });\n      expect(o.get('k1')).to.eql(1);\n      expect(o.get('k2')).to.eql(2);\n      const keys = o.getKeys().sort();\n      expect(keys).to.eql(['k1', 'k2']);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"has no properties after creation","suites":["ol/Object.js","hasProperties"],"updatePoint":{"line":90,"column":40,"index":2801},"line":90,"code":"    it('has no properties after creation', function () {\n      expect(o.hasProperties()).to.eql(false);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"has properties after set","suites":["ol/Object.js","hasProperties"],"updatePoint":{"line":93,"column":32,"index":2905},"line":93,"code":"    it('has properties after set', function () {\n      o.set('foo', 1);\n      expect(o.hasProperties()).to.eql(true);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"has no properties after unset all","suites":["ol/Object.js","hasProperties"],"updatePoint":{"line":97,"column":41,"index":3040},"line":97,"code":"    it('has no properties after unset all', function () {\n      o.unset('foo');\n      expect(o.hasProperties()).to.eql(false);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"dispatches events","suites":["ol/Object.js","notify"],"updatePoint":{"line":110,"column":25,"index":3415},"line":110,"code":"    it('dispatches events', function () {\n      o.notify('k', 1);\n      expect(listener1.calledOnce).to.be(true);\n      const args = listener1.firstCall.args;\n      expect(args).to.have.length(1);\n      const event = args[0];\n      expect(event.key).to.be('k');\n      expect(event.oldValue).to.be(1);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"dispatches generic change events to bound objects","suites":["ol/Object.js","notify"],"updatePoint":{"line":119,"column":57,"index":3756},"line":119,"code":"    it('dispatches generic change events to bound objects', function () {\n      o.notify('k', 1);\n      expect(listener2.calledOnce).to.be(true);\n      const args = listener2.firstCall.args;\n      expect(args).to.have.length(1);\n      const event = args[0];\n      expect(event.key).to.be('k');\n      expect(event.oldValue).to.be(1);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"dispatches events to object","suites":["ol/Object.js","set"],"updatePoint":{"line":137,"column":35,"index":4328},"line":137,"code":"    it('dispatches events to object', function () {\n      o.set('k', 1);\n      expect(listener1.called).to.be(true);\n      expect(o.getKeys()).to.eql(['k']);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"dispatches generic change events to object","suites":["ol/Object.js","set"],"updatePoint":{"line":142,"column":50,"index":4509},"line":142,"code":"    it('dispatches generic change events to object', function () {\n      o.set('k', 1);\n      expect(listener2.calledOnce).to.be(true);\n      const args = listener2.firstCall.args;\n      expect(args).to.have.length(1);\n      const event = args[0];\n      expect(event.key).to.be('k');\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"dispatches events only if the value is different","suites":["ol/Object.js","set"],"updatePoint":{"line":150,"column":56,"index":4807},"line":150,"code":"    it('dispatches events only if the value is different', function () {\n      o.set('k', 1);\n      o.set('k', 1);\n      expect(listener1.calledOnce).to.be(true);\n      expect(listener2.calledOnce).to.be(true);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"does not call the setter","suites":["ol/Object.js","setter"],"updatePoint":{"line":164,"column":32,"index":5173},"line":164,"code":"    it('does not call the setter', function () {\n      o.set('x', 1);\n      expect(o.get('x')).to.eql(1);\n      expect(o.setX.called).to.be(false);\n      expect(o.getKeys()).to.eql(['x']);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"does not call the getter","suites":["ol/Object.js","getter"],"updatePoint":{"line":178,"column":32,"index":5532},"line":178,"code":"    it('does not call the getter', function () {\n      expect(o.get('x')).to.be(undefined);\n      expect(o.getX.called).to.be(false);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"sets the property","suites":["ol/Object.js","create with options"],"updatePoint":{"line":184,"column":25,"index":5721},"line":184,"code":"    it('sets the property', function () {\n      const o = new BaseObject({\n        k: 1\n      });\n      expect(o.get('k')).to.eql(1);\n      expect(o.getKeys()).to.eql(['k']);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"dispatches the expected event","suites":["ol/Object.js","case sensitivity"],"updatePoint":{"line":200,"column":37,"index":6176},"line":200,"code":"    it('dispatches the expected event', function () {\n      o.set('K', 1);\n      expect(listener1.called).to.be(false);\n      expect(listener2.called).to.be(true);\n      expect(o.getKeys()).to.eql(['K']);\n    });","file":"node/ol/Object.test.js","skipped":false,"dir":"test"},{"name":"creates a new observable","suites":["ol/Observable.js","constructor"],"updatePoint":{"line":7,"column":32,"index":307},"line":7,"code":"    it('creates a new observable', function () {\n      const observable = new Observable();\n      expect(observable).to.be.a(Observable);\n      expect(observable).to.be.a(EventTarget);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"registers a listener for events of the given type","suites":["ol/Observable.js","#on()"],"updatePoint":{"line":19,"column":57,"index":699},"line":19,"code":"    it('registers a listener for events of the given type', function () {\n      observable.on('foo', listener);\n      observable.dispatchEvent('foo');\n      expect(listener.calledOnce).to.be(true);\n      observable.dispatchEvent('foo');\n      expect(listener.callCount).to.be(2);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"accepts an array of event types","suites":["ol/Observable.js","#on()"],"updatePoint":{"line":26,"column":39,"index":969},"line":26,"code":"    it('accepts an array of event types', function () {\n      observable.on(['foo', 'bar'], listener);\n      observable.dispatchEvent('foo');\n      expect(listener.calledOnce).to.be(true);\n      observable.dispatchEvent('bar');\n      expect(listener.callCount).to.be(2);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"returns a listener key","suites":["ol/Observable.js","#on()"],"updatePoint":{"line":33,"column":30,"index":1239},"line":33,"code":"    it('returns a listener key', function () {\n      const key = observable.on('foo', listener);\n      expect(typeof key).to.be('object');\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"registers a listener that is only called once","suites":["ol/Observable.js","#once()"],"updatePoint":{"line":44,"column":53,"index":1585},"line":44,"code":"    it('registers a listener that is only called once', function () {\n      observable.once('foo', listener);\n      observable.dispatchEvent('foo');\n      expect(listener.calledOnce).to.be(true);\n      observable.dispatchEvent('foo');\n      expect(listener.callCount).to.be(1);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"is safe to dispatch events of same type in a once listener","suites":["ol/Observable.js","#once()"],"updatePoint":{"line":51,"column":66,"index":1884},"line":51,"code":"    it('is safe to dispatch events of same type in a once listener', function () {\n      let callCount = 0;\n      observable.once('change', function () {\n        observable.changed();\n        observable.changed();\n      });\n      observable.on('change', function () {\n        ++callCount;\n      });\n      expect(function () {\n        observable.changed();\n      }).to.not.throwException();\n      expect(callCount).to.be(3);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"accepts an array of event types (called once for each)","suites":["ol/Observable.js","#once()"],"updatePoint":{"line":65,"column":62,"index":2312},"line":65,"code":"    it('accepts an array of event types (called once for each)', function () {\n      observable.once(['foo', 'bar'], listener);\n      observable.dispatchEvent('foo');\n      expect(listener.calledOnce).to.be(true);\n      observable.dispatchEvent('foo');\n      expect(listener.callCount).to.be(1);\n      observable.dispatchEvent('bar');\n      expect(listener.callCount).to.be(2);\n      observable.dispatchEvent('bar');\n      expect(listener.callCount).to.be(2);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"returns a listener key","suites":["ol/Observable.js","#once()"],"updatePoint":{"line":76,"column":30,"index":2748},"line":76,"code":"    it('returns a listener key', function () {\n      const key = observable.once('foo', listener);\n      expect(typeof key).to.be('object');\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"can be unregistered with un()","suites":["ol/Observable.js","#once()"],"updatePoint":{"line":80,"column":37,"index":2904},"line":80,"code":"    it('can be unregistered with un()', function () {\n      observable.once('foo', listener);\n      observable.un('foo', listener);\n      observable.dispatchEvent('foo');\n      expect(listener.callCount).to.be(0);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"unregisters a previously registered listener","suites":["ol/Observable.js","#un()"],"updatePoint":{"line":93,"column":52,"index":3315},"line":93,"code":"    it('unregisters a previously registered listener', function () {\n      observable.on('foo', listener);\n      observable.dispatchEvent('foo');\n      expect(listener.calledOnce).to.be(true);\n      observable.un('foo', listener);\n      observable.dispatchEvent('foo');\n      expect(listener.calledOnce).to.be(true);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"unregisters a listener given the key returned by `on`","suites":["ol/Observable.js","ol.Observable.unByKey()"],"updatePoint":{"line":108,"column":61,"index":3841},"line":108,"code":"    it('unregisters a listener given the key returned by `on`', function () {\n      const key = observable.on('foo', listener);\n      observable.dispatchEvent('foo');\n      expect(listener.calledOnce).to.be(true);\n      unByKey(key);\n      observable.dispatchEvent('foo');\n      expect(listener.callCount).to.be(1);\n    });","file":"node/ol/Observable.test.js","skipped":false,"dir":"test"},{"name":"sets the user projection to Geographic/WGS-84","suites":["ol/proj.js","useGeographic()"],"updatePoint":{"line":16,"column":53,"index":1081},"line":16,"code":"    it('sets the user projection to Geographic/WGS-84', function () {\n      useGeographic();\n      const projection = getUserProjection();\n      expect(projection).to.be(getProjection('EPSG:4326'));\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns null by default","suites":["ol/proj.js","getUserProjection()"],"updatePoint":{"line":23,"column":31,"index":1320},"line":23,"code":"    it('returns null by default', function () {\n      expect(getUserProjection()).to.be(null);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the user projection if set","suites":["ol/proj.js","getUserProjection()"],"updatePoint":{"line":26,"column":42,"index":1434},"line":26,"code":"    it('returns the user projection if set', function () {\n      const projection = getProjection('EPSG:4326');\n      setUserProjection(projection);\n      expect(getUserProjection()).to.be(projection);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"accepts a string identifier","suites":["ol/proj.js","setUserProjection()"],"updatePoint":{"line":33,"column":35,"index":1691},"line":33,"code":"    it('accepts a string identifier', function () {\n      const projection = getProjection('EPSG:4326');\n      setUserProjection('EPSG:4326');\n      expect(getUserProjection()).to.be(projection);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"clears the user projection","suites":["ol/proj.js","clearUserProjection()"],"updatePoint":{"line":40,"column":34,"index":1950},"line":40,"code":"    it('clears the user projection', function () {\n      useGeographic();\n      clearUserProjection();\n      expect(getUserProjection()).to.be(null);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms a point to the user projection","suites":["ol/proj.js","toUserCoordinate()"],"updatePoint":{"line":47,"column":49,"index":2176},"line":47,"code":"    it('transforms a point to the user projection', function () {\n      useGeographic();\n      const coordinate = fromLonLat([-110, 45]);\n      const user = toUserCoordinate(coordinate, 'EPSG:3857');\n      const transformed = transform(coordinate, 'EPSG:3857', 'EPSG:4326');\n      expect(user).to.eql(transformed);\n      expect(user).not.to.eql(coordinate);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the original if no user projection is set","suites":["ol/proj.js","toUserCoordinate()"],"updatePoint":{"line":55,"column":57,"index":2550},"line":55,"code":"    it('returns the original if no user projection is set', function () {\n      const coordinate = fromLonLat([-110, 45]);\n      const user = toUserCoordinate(coordinate, 'EPSG:3857');\n      expect(user).to.be(coordinate);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms a point from the user projection","suites":["ol/proj.js","fromUserCoordinate()"],"updatePoint":{"line":62,"column":51,"index":2830},"line":62,"code":"    it('transforms a point from the user projection', function () {\n      useGeographic();\n      const user = [-110, 45];\n      const coordinate = fromUserCoordinate(user, 'EPSG:3857');\n      const transformed = transform(user, 'EPSG:4326', 'EPSG:3857');\n      expect(coordinate).to.eql(transformed);\n      expect(user).not.to.eql(coordinate);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the original if no user projection is set","suites":["ol/proj.js","fromUserCoordinate()"],"updatePoint":{"line":70,"column":57,"index":3188},"line":70,"code":"    it('returns the original if no user projection is set', function () {\n      const user = fromLonLat([-110, 45]);\n      const coordinate = fromUserCoordinate(user, 'EPSG:3857');\n      expect(coordinate).to.be(user);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms an extent to the user projection","suites":["ol/proj.js","toUserExtent()"],"updatePoint":{"line":77,"column":51,"index":3458},"line":77,"code":"    it('transforms an extent to the user projection', function () {\n      useGeographic();\n      const extent = transformExtent([-110, 45, -100, 50], 'EPSG:4326', 'EPSG:3857');\n      const user = toUserExtent(extent, 'EPSG:3857');\n      const transformed = transformExtent(extent, 'EPSG:3857', 'EPSG:4326');\n      expect(user).to.eql(transformed);\n      expect(user).not.to.eql(extent);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the original if no user projection is set","suites":["ol/proj.js","toUserExtent()"],"updatePoint":{"line":85,"column":57,"index":3859},"line":85,"code":"    it('returns the original if no user projection is set', function () {\n      const extent = transformExtent([-110, 45, -100, 50], 'EPSG:4326', 'EPSG:3857');\n      const user = toUserExtent(extent, 'EPSG:3857');\n      expect(user).to.be(extent);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms an extent from the user projection","suites":["ol/proj.js","fromUserExtent()"],"updatePoint":{"line":92,"column":53,"index":4162},"line":92,"code":"    it('transforms an extent from the user projection', function () {\n      useGeographic();\n      const user = [-110, 45, -100, 50];\n      const extent = fromUserExtent(user, 'EPSG:3857');\n      const transformed = transformExtent(user, 'EPSG:4326', 'EPSG:3857');\n      expect(extent).to.eql(transformed);\n      expect(extent).not.to.eql(user);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the original if no user projection is set","suites":["ol/proj.js","fromUserExtent()"],"updatePoint":{"line":100,"column":57,"index":4520},"line":100,"code":"    it('returns the original if no user projection is set', function () {\n      const user = transformExtent([-110, 45, -100, 50], 'EPSG:4326', 'EPSG:3857');\n      const extent = fromUserExtent(user, 'EPSG:3857');\n      expect(extent).to.be(user);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"adjusts a resolution for the user projection's units","suites":["ol/proj.js","fromUserResolution()"],"updatePoint":{"line":107,"column":60,"index":4834},"line":107,"code":"    it(\"adjusts a resolution for the user projection's units\", function () {\n      useGeographic();\n      const user = 1 / METERS_PER_UNIT.degrees;\n      const resolution = fromUserResolution(user, 'EPSG:3857');\n      expect(resolution).to.roughlyEqual(1, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the original if no user projection is set","suites":["ol/proj.js","fromUserResolution()"],"updatePoint":{"line":113,"column":57,"index":5102},"line":113,"code":"    it('returns the original if no user projection is set', function () {\n      const user = METERS_PER_UNIT.meters;\n      const resolution = fromUserResolution(user, 'EPSG:3857');\n      expect(resolution).to.eql(user);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"adjusts a resolution for the user projection's units","suites":["ol/proj.js","toUserResolution()"],"updatePoint":{"line":120,"column":60,"index":5386},"line":120,"code":"    it(\"adjusts a resolution for the user projection's units\", function () {\n      useGeographic();\n      const dest = 1;\n      const resolution = toUserResolution(dest, 'EPSG:3857');\n      expect(resolution).to.eql(1 / METERS_PER_UNIT.degrees);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the original if no user projection is set","suites":["ol/proj.js","toUserResolution()"],"updatePoint":{"line":126,"column":57,"index":5637},"line":126,"code":"    it('returns the original if no user projection is set', function () {\n      const dest = METERS_PER_UNIT.degrees;\n      const resolution = toUserResolution(dest, 'EPSG:3857');\n      expect(resolution).to.eql(dest);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"treats EPSG:3857 variants as equivalent","suites":["ol/proj.js","projection equivalence"],"updatePoint":{"line":163,"column":47,"index":6858},"line":163,"code":"    it('treats EPSG:3857 variants as equivalent', function () {\n      _testAllEquivalent(['EPSG:3857', 'EPSG:102100', 'EPSG:102113', 'EPSG:900913', 'http://www.opengis.net/def/crs/EPSG/0/3857', 'http://www.opengis.net/gml/srs/epsg.xml#3857']);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"gives that custom 3413 is equivalent to self","suites":["ol/proj.js","projection equivalence"],"updatePoint":{"line":166,"column":52,"index":7115},"line":166,"code":"    it('gives that custom 3413 is equivalent to self', function () {\n      const code = 'EPSG:3413';\n      const source = new Projection({\n        code: code\n      });\n      const destination = new Projection({\n        code: code\n      });\n      expect(equivalent(source, destination)).to.be.ok();\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"gives that default 3857 is equivalent to self","suites":["ol/proj.js","projection equivalence"],"updatePoint":{"line":176,"column":53,"index":7422},"line":176,"code":"    it('gives that default 3857 is equivalent to self', function () {\n      _testAllEquivalent(['EPSG:3857', 'EPSG:3857']);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"treats EPSG:4326 variants as equivalent","suites":["ol/proj.js","projection equivalence"],"updatePoint":{"line":179,"column":47,"index":7548},"line":179,"code":"    it('treats EPSG:4326 variants as equivalent', function () {\n      _testAllEquivalent(['CRS:84', 'urn:ogc:def:crs:EPSG:6.6:4326', 'urn:x-ogc:def:crs:EPSG:6.6:4326', 'EPSG:4326', 'http://www.opengis.net/def/crs/OGC/1.3/CRS84', 'http://www.opengis.net/gml/srs/epsg.xml#4326', 'http://www.opengis.net/def/crs/EPSG/0/4326']);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"requires code and units to be equal for projection evquivalence","suites":["ol/proj.js","projection equivalence"],"updatePoint":{"line":182,"column":71,"index":7905},"line":182,"code":"    it('requires code and units to be equal for projection evquivalence', function () {\n      const proj1 = new Projection({\n        code: 'EPSG:3857',\n        units: 'm'\n      });\n      const proj2 = new Projection({\n        code: 'EPSG:3857',\n        units: 'tile-pixels'\n      });\n      expect(equivalent(proj1, proj2)).to.not.be.ok();\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns a new object, with same coord values","suites":["ol/proj.js","identify transform"],"updatePoint":{"line":195,"column":52,"index":8286},"line":195,"code":"    it('returns a new object, with same coord values', function () {\n      const epsg4326 = getProjection('EPSG:4326');\n      const uniqueObject = {};\n      const sourcePoint = [uniqueObject, uniqueObject];\n      const destinationPoint = transform(sourcePoint, epsg4326, epsg4326);\n      expect(sourcePoint === destinationPoint).to.not.be();\n      expect(destinationPoint[0] === sourcePoint[0]).to.be.ok();\n      expect(destinationPoint[1] === sourcePoint[1]).to.be.ok();\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/proj.js","transform 0,0 from 4326 to 3857"],"updatePoint":{"line":206,"column":30,"index":8810},"line":206,"code":"    it('returns expected value', function () {\n      const point = transform([0, 0], 'EPSG:4326', 'EPSG:3857');\n      expect(point).not.to.be(undefined);\n      expect(point).not.to.be(null);\n      expect(point[1]).to.roughlyEqual(0, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns expected value","suites":["ol/proj.js","transform 0,0 from 3857 to 4326"],"updatePoint":{"line":214,"column":30,"index":9124},"line":214,"code":"    it('returns expected value', function () {\n      const point = transform([0, 0], 'EPSG:3857', 'EPSG:4326');\n      expect(point).not.to.be(undefined);\n      expect(point).not.to.be(null);\n      expect(point[0]).to.eql(0);\n      expect(point[1]).to.eql(0);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns expected value using ol.proj.transform","suites":["ol/proj.js","transform from 4326 to 3857 (Alastaira)"],"updatePoint":{"line":225,"column":54,"index":9597},"line":225,"code":"    it('returns expected value using ol.proj.transform', function () {\n      const point = transform([-5.625, 52.4827802220782], 'EPSG:4326', 'EPSG:900913');\n      expect(point).not.to.be(undefined);\n      expect(point).not.to.be(null);\n      expect(point[0]).to.roughlyEqual(-626172.13571216376, 1e-9);\n      expect(point[1]).to.roughlyEqual(6887893.4928337997, 1e-8);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns expected value using ol.proj.fromLonLat","suites":["ol/proj.js","transform from 4326 to 3857 (Alastaira)"],"updatePoint":{"line":232,"column":55,"index":9976},"line":232,"code":"    it('returns expected value using ol.proj.fromLonLat', function () {\n      const point = fromLonLat([-5.625, 52.4827802220782]);\n      expect(point).not.to.be(undefined);\n      expect(point).not.to.be(null);\n      expect(point[0]).to.roughlyEqual(-626172.13571216376, 1e-9);\n      expect(point[1]).to.roughlyEqual(6887893.4928337997, 1e-8);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns expected value using ol.proj.transform","suites":["ol/proj.js","transform from 3857 to 4326 (Alastaira)"],"updatePoint":{"line":243,"column":54,"index":10509},"line":243,"code":"    it('returns expected value using ol.proj.transform', function () {\n      const point = transform([-626172.13571216376, 6887893.4928337997], 'EPSG:900913', 'EPSG:4326');\n      expect(point).not.to.be(undefined);\n      expect(point).not.to.be(null);\n      expect(point[0]).to.roughlyEqual(-5.625, 1e-9);\n      expect(point[1]).to.roughlyEqual(52.4827802220782, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns expected value using ol.proj.toLonLat","suites":["ol/proj.js","transform from 3857 to 4326 (Alastaira)"],"updatePoint":{"line":250,"column":53,"index":10886},"line":250,"code":"    it('returns expected value using ol.proj.toLonLat', function () {\n      const point = toLonLat([-626172.13571216376, 6887893.4928337997]);\n      expect(point).not.to.be(undefined);\n      expect(point).not.to.be(null);\n      expect(point[0]).to.roughlyEqual(-5.625, 1e-9);\n      expect(point[1]).to.roughlyEqual(52.4827802220782, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"requires an extent for allowing wrapX","suites":["ol/proj.js","canWrapX()"],"updatePoint":{"line":259,"column":45,"index":11271},"line":259,"code":"    it('requires an extent for allowing wrapX', function () {\n      let proj = new Projection({\n        code: 'foo',\n        global: true\n      });\n      expect(proj.canWrapX()).to.be(false);\n      proj.setExtent([1, 2, 3, 4]);\n      expect(proj.canWrapX()).to.be(true);\n      proj = new Projection({\n        code: 'foo',\n        global: true,\n        extent: [1, 2, 3, 4]\n      });\n      expect(proj.canWrapX()).to.be(true);\n      proj.setExtent(null);\n      expect(proj.canWrapX()).to.be(false);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"requires global to be true for allowing wrapX","suites":["ol/proj.js","canWrapX()"],"updatePoint":{"line":276,"column":53,"index":11785},"line":276,"code":"    it('requires global to be true for allowing wrapX', function () {\n      let proj = new Projection({\n        code: 'foo',\n        extent: [1, 2, 3, 4]\n      });\n      expect(proj.canWrapX()).to.be(false);\n      proj.setGlobal(true);\n      expect(proj.canWrapX()).to.be(true);\n      proj = new Projection({\n        code: 'foo',\n        global: true,\n        extent: [1, 2, 3, 4]\n      });\n      expect(proj.canWrapX()).to.be(true);\n      proj.setGlobal(false);\n      expect(proj.canWrapX()).to.be(false);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms an extent given projection identifiers","suites":["ol/proj.js","transformExtent()"],"updatePoint":{"line":295,"column":57,"index":12356},"line":295,"code":"    it('transforms an extent given projection identifiers', function () {\n      const sourceExtent = [-15, -30, 45, 60];\n      const destinationExtent = transformExtent(sourceExtent, 'EPSG:4326', 'EPSG:3857');\n      expect(destinationExtent).not.to.be(undefined);\n      expect(destinationExtent).not.to.be(null);\n      expect(destinationExtent[0]).to.roughlyEqual(-1669792.3618991037, 1e-9);\n      expect(destinationExtent[2]).to.roughlyEqual(5009377.085697311, 1e-9);\n      expect(destinationExtent[1]).to.roughlyEqual(-3503549.843504376, 1e-8);\n      expect(destinationExtent[3]).to.roughlyEqual(8399737.889818361, 1e-8);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the correct point resolution for EPSG:4326","suites":["ol/proj.js","getPointResolution()"],"updatePoint":{"line":307,"column":58,"index":13044},"line":307,"code":"    it('returns the correct point resolution for EPSG:4326', function () {\n      let pointResolution = getPointResolution('EPSG:4326', 1, [0, 0]);\n      expect(pointResolution).to.be(1);\n      pointResolution = getPointResolution('EPSG:4326', 1, [0, 52]);\n      expect(pointResolution).to.be(1);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the correct point resolution for EPSG:4326 with custom units","suites":["ol/proj.js","getPointResolution()"],"updatePoint":{"line":313,"column":76,"index":13366},"line":313,"code":"    it('returns the correct point resolution for EPSG:4326 with custom units', function () {\n      let pointResolution = getPointResolution('EPSG:4326', 1, [0, 0], 'm');\n      expect(pointResolution).to.roughlyEqual(111195.0802335329, 1e-5);\n      pointResolution = getPointResolution('EPSG:4326', 1, [0, 52], 'm');\n      expect(pointResolution).to.roughlyEqual(89826.53390979706, 1e-5);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the correct point resolution for EPSG:3857","suites":["ol/proj.js","getPointResolution()"],"updatePoint":{"line":319,"column":58,"index":13744},"line":319,"code":"    it('returns the correct point resolution for EPSG:3857', function () {\n      let pointResolution = getPointResolution('EPSG:3857', 1, [0, 0]);\n      expect(pointResolution).to.be(1);\n      pointResolution = getPointResolution('EPSG:3857', 1, fromLonLat([0, 52]));\n      expect(pointResolution).to.roughlyEqual(0.615661, 1e-5);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the correct point resolution for EPSG:3857 with custom units","suites":["ol/proj.js","getPointResolution()"],"updatePoint":{"line":325,"column":76,"index":14101},"line":325,"code":"    it('returns the correct point resolution for EPSG:3857 with custom units', function () {\n      let pointResolution = getPointResolution('EPSG:3857', METERS_PER_UNIT.degrees, [0, 0], 'degrees');\n      expect(pointResolution).to.be(1);\n      pointResolution = getPointResolution('EPSG:4326', 1, fromLonLat([0, 52]), 'degrees');\n      expect(pointResolution).to.be(1);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns the nominal resolution for projections without transforms","suites":["ol/proj.js","getPointResolution()"],"updatePoint":{"line":331,"column":73,"index":14476},"line":331,"code":"    it('returns the nominal resolution for projections without transforms', function () {\n      const projection = new Projection({\n        code: 'foo',\n        units: 'ft'\n      });\n      let pointResolution = getPointResolution(projection, 2, [0, 0]);\n      expect(pointResolution).to.be(2);\n      pointResolution = getPointResolution(projection, 2, [0, 0], 'm');\n      expect(pointResolution).to.be(0.6096);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"creates ol.proj.Projection instance from EPSG:21781","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":348,"column":59,"index":15058},"line":348,"code":"    it('creates ol.proj.Projection instance from EPSG:21781', function () {\n      proj4.defs('EPSG:21781', '+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 ' + '+k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel ' + '+towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs');\n      register(proj4);\n      const proj = getProjection('EPSG:21781');\n      expect(proj.getCode()).to.eql('EPSG:21781');\n      expect(proj.getUnits()).to.eql('m');\n      expect(proj.getMetersPerUnit()).to.eql(1);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"creates ol.proj.Projection instance from EPSG:3739","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":356,"column":58,"index":15566},"line":356,"code":"    it('creates ol.proj.Projection instance from EPSG:3739', function () {\n      proj4.defs('EPSG:3739', '+proj=tmerc +lat_0=40.5 +lon_0=-110.0833333333333 +k=0.9999375 ' + '+x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 ' + '+towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs');\n      register(proj4);\n      const proj = getProjection('EPSG:3739');\n      expect(proj.getCode()).to.eql('EPSG:3739');\n      expect(proj.getUnits()).to.eql('us-ft');\n      expect(proj.getMetersPerUnit()).to.eql(1200 / 3937);\n      delete proj4.defs['EPSG:3739'];\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"creates ol.proj.Projection instance from EPSG:4258","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":365,"column":58,"index":16124},"line":365,"code":"    it('creates ol.proj.Projection instance from EPSG:4258', function () {\n      proj4.defs('EPSG:4258', '+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs');\n      register(proj4);\n      const proj = getProjection('EPSG:4258');\n      expect(proj.getCode()).to.eql('EPSG:4258');\n      expect(proj.getUnits()).to.eql('degrees');\n      expect(proj.getMetersPerUnit()).to.eql(METERS_PER_UNIT.degrees);\n      delete proj4.defs['EPSG:4258'];\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"allows Proj4js projections to be used transparently","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":374,"column":59,"index":16579},"line":374,"code":"    it('allows Proj4js projections to be used transparently', function () {\n      register(proj4);\n      const point = transform([-626172.13571216376, 6887893.4928337997], 'GOOGLE', 'WGS84');\n      expect(point[0]).to.roughlyEqual(-5.625, 1e-9);\n      expect(point[1]).to.roughlyEqual(52.4827802220782, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"allows new Proj4js projections to be defined","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":380,"column":52,"index":16890},"line":380,"code":"    it('allows new Proj4js projections to be defined', function () {\n      proj4.defs('EPSG:21781', '+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 ' + '+k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel ' + '+towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs');\n      register(proj4);\n      const point = transform([7.439583333333333, 46.95240555555556], 'EPSG:4326', 'EPSG:21781');\n      expect(point[0]).to.roughlyEqual(600072.3, 1);\n      expect(point[1]).to.roughlyEqual(200146.976, 1);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works with ol.proj.fromLonLat and ol.proj.toLonLat","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":387,"column":58,"index":17413},"line":387,"code":"    it('works with ol.proj.fromLonLat and ol.proj.toLonLat', function () {\n      proj4.defs('EPSG:21781', '+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 ' + '+k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel ' + '+towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs');\n      register(proj4);\n      const lonLat = [7.439583333333333, 46.95240555555556];\n      let point = fromLonLat(lonLat, 'EPSG:21781');\n      expect(point[0]).to.roughlyEqual(600072.3, 1);\n      expect(point[1]).to.roughlyEqual(200146.976, 1);\n      point = toLonLat(point, 'EPSG:21781');\n      expect(point[0]).to.roughlyEqual(lonLat[0], 1);\n      expect(point[1]).to.roughlyEqual(lonLat[1], 1);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"caches the new Proj4js projections given their srsCode","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":398,"column":62,"index":18108},"line":398,"code":"    it('caches the new Proj4js projections given their srsCode', function () {\n      proj4.defs('EPSG:21781', '+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 ' + '+k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel ' + '+towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs');\n      const code = 'urn:ogc:def:crs:EPSG:21781';\n      const srsCode = 'EPSG:21781';\n      proj4.defs(code, proj4.defs(srsCode));\n      register(proj4);\n      const proj = getProjection(code);\n      const proj2 = getProjection(srsCode);\n      expect(equivalent(proj2, proj)).to.be(true);\n      delete proj4.defs[code];\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"numerically estimates point scale at the equator","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":409,"column":56,"index":18719},"line":409,"code":"    it('numerically estimates point scale at the equator', function () {\n      register(proj4);\n      const googleProjection = getProjection('GOOGLE');\n      expect(getPointResolution(googleProjection, 1, [0, 0])).to.roughlyEqual(1, 1e-1);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"numerically estimates point scale at various latitudes","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":414,"column":62,"index":18973},"line":414,"code":"    it('numerically estimates point scale at various latitudes', function () {\n      register(proj4);\n      const epsg3857Projection = getProjection('EPSG:3857');\n      const googleProjection = getProjection('GOOGLE');\n      let point, y;\n      for (y = -20; y <= 20; ++y) {\n        point = [0, 1000000 * y];\n        expect(getPointResolution(googleProjection, 1, point)).to.roughlyEqual(getPointResolution(epsg3857Projection, 1, point), 1e-1);\n      }\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"numerically estimates point scale at various points","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":424,"column":59,"index":19431},"line":424,"code":"    it('numerically estimates point scale at various points', function () {\n      register(proj4);\n      const epsg3857Projection = getProjection('EPSG:3857');\n      const googleProjection = getProjection('GOOGLE');\n      let point, x, y;\n      for (x = -20; x <= 20; x += 2) {\n        for (y = -20; y <= 20; y += 2) {\n          point = [1000000 * x, 1000000 * y];\n          expect(getPointResolution(googleProjection, 1, point)).to.roughlyEqual(getPointResolution(epsg3857Projection, 1, point), 1e-1);\n        }\n      }\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"does not overwrite existing projections in the registry","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":436,"column":63,"index":19964},"line":436,"code":"    it('does not overwrite existing projections in the registry', function () {\n      register(proj4);\n      const epsg4326 = getProjection('EPSG:4326');\n      new Projection({\n        code: 'EPSG:4326',\n        units: 'degrees',\n        extent: [-45, -45, 45, 45]\n      });\n      expect(getProjection('EPSG:4326')).to.equal(epsg4326);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"uses safe transform functions","suites":["ol/proj.js","Proj4js integration"],"updatePoint":{"line":446,"column":37,"index":20282},"line":446,"code":"    it('uses safe transform functions', function () {\n      register(proj4);\n      const wgs84 = getProjection('WGS84');\n      const epsg4326 = getProjection('EPSG:4326');\n      wgs84.setExtent(epsg4326.getExtent());\n      wgs84.setGlobal(true);\n      const google = getProjection('GOOGLE');\n      const epsg3857 = getProjection('EPSG:3857');\n      google.setExtent(epsg3857.getExtent());\n      google.setGlobal(true);\n      const coord = [-190, 85];\n      let expected = transform(coord, wgs84, google);\n      let got = transform(coord, epsg4326, epsg3857);\n      expect(got[0]).to.roughlyEqual(expected[0], 1e-7);\n      expect(got[1]).to.roughlyEqual(expected[1], 1e-7);\n      expected = transform(expected, google, wgs84);\n      got = transform(got, epsg3857, epsg4326);\n      expect(got[0]).to.roughlyEqual(expected[0], 1e-7);\n      expect(got[1]).to.roughlyEqual(expected[1], 1e-7);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns a transform function","suites":["ol/proj.js","ol.proj.getTransformFromProjections()"],"updatePoint":{"line":471,"column":36,"index":21309},"line":471,"code":"    it('returns a transform function', function () {\n      const transform = getTransformFromProjections(getProjection('GOOGLE'), getProjection('EPSG:4326'));\n      expect(typeof transform).to.be('function');\n      const output = transform([-12000000, 5000000]);\n      expect(output[0]).to.roughlyEqual(-107.79783409434258, 1e-9);\n      expect(output[1]).to.roughlyEqual(40.91627447067577, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works for longer arrays","suites":["ol/proj.js","ol.proj.getTransformFromProjections()"],"updatePoint":{"line":478,"column":31,"index":21709},"line":478,"code":"    it('works for longer arrays', function () {\n      const transform = getTransformFromProjections(getProjection('GOOGLE'), getProjection('EPSG:4326'));\n      expect(typeof transform).to.be('function');\n      const output = transform([-12000000, 5000000, -12000000, 5000000]);\n      expect(output[0]).to.roughlyEqual(-107.79783409434258, 1e-9);\n      expect(output[1]).to.roughlyEqual(40.91627447067577, 1e-9);\n      expect(output[2]).to.roughlyEqual(-107.79783409434258, 1e-9);\n      expect(output[3]).to.roughlyEqual(40.91627447067577, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns a function","suites":["ol/proj.js","ol.proj.getTransform()"],"updatePoint":{"line":492,"column":26,"index":22375},"line":492,"code":"    it('returns a function', function () {\n      const transform = getTransform('GOOGLE', 'EPSG:4326');\n      expect(typeof transform).to.be('function');\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns a transform function","suites":["ol/proj.js","ol.proj.getTransform()"],"updatePoint":{"line":496,"column":36,"index":22547},"line":496,"code":"    it('returns a transform function', function () {\n      const transform = getTransform('GOOGLE', 'EPSG:4326');\n      expect(typeof transform).to.be('function');\n      const output = transform([-626172.13571216376, 6887893.4928337997]);\n      expect(output[0]).to.roughlyEqual(-5.625, 1e-9);\n      expect(output[1]).to.roughlyEqual(52.4827802220782, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works for longer arrays of coordinate values","suites":["ol/proj.js","ol.proj.getTransform()"],"updatePoint":{"line":503,"column":52,"index":22930},"line":503,"code":"    it('works for longer arrays of coordinate values', function () {\n      const transform = getTransform('GOOGLE', 'EPSG:4326');\n      expect(typeof transform).to.be('function');\n      const output = transform([-626172.13571216376, 6887893.4928337997, -12000000, 5000000, -626172.13571216376, 6887893.4928337997]);\n      expect(output[0]).to.roughlyEqual(-5.625, 1e-9);\n      expect(output[1]).to.roughlyEqual(52.4827802220782, 1e-9);\n      expect(output[2]).to.roughlyEqual(-107.79783409434258, 1e-9);\n      expect(output[3]).to.roughlyEqual(40.91627447067577, 1e-9);\n      expect(output[4]).to.roughlyEqual(-5.625, 1e-9);\n      expect(output[5]).to.roughlyEqual(52.4827802220782, 1e-9);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"accepts an optional destination array","suites":["ol/proj.js","ol.proj.getTransform()"],"updatePoint":{"line":514,"column":45,"index":23621},"line":514,"code":"    it('accepts an optional destination array', function () {\n      const transform = getTransform('EPSG:3857', 'EPSG:4326');\n      const input = [-12000000, 5000000];\n      const output = [];\n      const got = transform(input, output);\n      expect(got).to.be(output);\n      expect(output[0]).to.roughlyEqual(-107.79783409434258, 1e-9);\n      expect(output[1]).to.roughlyEqual(40.91627447067577, 1e-9);\n      expect(input).to.eql([-12000000, 5000000]);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"accepts a dimension","suites":["ol/proj.js","ol.proj.getTransform()"],"updatePoint":{"line":524,"column":27,"index":24065},"line":524,"code":"    it('accepts a dimension', function () {\n      const transform = getTransform('GOOGLE', 'EPSG:4326');\n      expect(typeof transform).to.be('function');\n      const dimension = 3;\n      const output = transform([-626172.13571216376, 6887893.4928337997, 100, -12000000, 5000000, 200, -626172.13571216376, 6887893.4928337997, 300], undefined, dimension);\n      expect(output[0]).to.roughlyEqual(-5.625, 1e-9);\n      expect(output[1]).to.roughlyEqual(52.4827802220782, 1e-9);\n      expect(output[2]).to.be(100);\n      expect(output[3]).to.roughlyEqual(-107.79783409434258, 1e-9);\n      expect(output[4]).to.roughlyEqual(40.91627447067577, 1e-9);\n      expect(output[5]).to.be(200);\n      expect(output[6]).to.roughlyEqual(-5.625, 1e-9);\n      expect(output[7]).to.roughlyEqual(52.4827802220782, 1e-9);\n      expect(output[8]).to.be(300);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms a 2d coordinate","suites":["ol/proj.js","ol.proj.transform()"],"updatePoint":{"line":541,"column":34,"index":24971},"line":541,"code":"    it('transforms a 2d coordinate', function () {\n      const got = transform([-10, -20], 'EPSG:4326', 'EPSG:3857');\n      expect(got).to.have.length(2);\n      expect(got[0]).to.roughlyEqual(-1113194.9079327357, 1e-3);\n      expect(got[1]).to.roughlyEqual(-2273030.92698769, 1e-3);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms a 3d coordinate","suites":["ol/proj.js","ol.proj.transform()"],"updatePoint":{"line":547,"column":34,"index":25262},"line":547,"code":"    it('transforms a 3d coordinate', function () {\n      const got = transform([-10, -20, 3], 'EPSG:4326', 'EPSG:3857');\n      expect(got).to.have.length(3);\n      expect(got[0]).to.roughlyEqual(-1113194.9079327357, 1e-3);\n      expect(got[1]).to.roughlyEqual(-2273030.92698769, 1e-3);\n      expect(got[2]).to.be(3);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms a 3d coordinate with 2-dimension transform","suites":["ol/proj.js","ol.proj.transform()"],"updatePoint":{"line":554,"column":61,"index":25614},"line":554,"code":"    it('transforms a 3d coordinate with 2-dimension transform', function () {\n      const latlon = new Projection({\n        code: 'latlon'\n      });\n      addCoordinateTransforms('EPSG:4326', latlon, function (coordinate) {\n        return coordinate.slice(0, 2).reverse();\n      }, function (coordinate) {\n        return coordinate.slice(0, 2).reverse();\n      });\n      const got = transform([-10, -20, 3], 'EPSG:4326', latlon);\n      expect(got).to.have.length(3);\n      expect(got).to.eql([-20, -10, 3]);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"transforms a 4d coordinate","suites":["ol/proj.js","ol.proj.transform()"],"updatePoint":{"line":567,"column":34,"index":26103},"line":567,"code":"    it('transforms a 4d coordinate', function () {\n      const got = transform([-10, -20, 3, 4], 'EPSG:4326', 'EPSG:3857');\n      expect(got).to.have.length(4);\n      expect(got[0]).to.roughlyEqual(-1113194.9079327357, 1e-3);\n      expect(got[1]).to.roughlyEqual(-2273030.92698769, 1e-3);\n      expect(got[2]).to.be(3);\n      expect(got[3]).to.be(4);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works with 3d points and proj4 defs","suites":["ol/proj.js","ol.proj.transform()"],"updatePoint":{"line":575,"column":43,"index":26471},"line":575,"code":"    it('works with 3d points and proj4 defs', function () {\n      proj4.defs('custom', '+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 ' + '+k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel ' + '+towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs');\n      register(proj4);\n      const got = transform([-111, 45.5, 123], 'EPSG:4326', 'custom');\n      expect(got).to.have.length(3);\n      expect(got[0]).to.roughlyEqual(-6601512.194209638, 1);\n      expect(got[1]).to.roughlyEqual(6145843.802742112, 1);\n      expect(got[2]).to.be(123);\n      delete proj4.defs.custom;\n      clearAllProjections();\n      addCommon();\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works with 3d points and proj4 defs for 3d transforms","suites":["ol/proj.js","ol.proj.transform()"],"updatePoint":{"line":587,"column":61,"index":27129},"line":587,"code":"    it('works with 3d points and proj4 defs for 3d transforms', function () {\n      proj4.defs('geocent', '+proj=geocent +datum=WGS84 +ellps=WGS84 +units=m +no_defs');\n      register(proj4);\n      const got = transform([5584000, 2844000, 3448000], 'geocent', 'EPSG:4326');\n      expect(got).to.have.length(3);\n      expect(got[0]).to.roughlyEqual(26.990304649234826, 1e-9);\n      expect(got[1]).to.roughlyEqual(28.965718227798618, 1e-9);\n      expect(got[2]).to.roughlyEqual(779337.8584198505, 1e-9);\n      delete proj4.defs.geocent;\n      clearAllProjections();\n      addCommon();\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works with 3d points and proj4 defs for 3d transforms with clamped extent","suites":["ol/proj.js","ol.proj.transform()"],"updatePoint":{"line":599,"column":81,"index":27739},"line":599,"code":"    it('works with 3d points and proj4 defs for 3d transforms with clamped extent', function () {\n      proj4.defs('geocent', '+proj=geocent +datum=WGS84 +ellps=WGS84 +units=m +no_defs');\n      register(proj4);\n      const got = transform([-7.56234, 38.96618, 0], 'EPSG:4326', 'geocent');\n      expect(got).to.have.length(3);\n      expect(got[0]).to.roughlyEqual(4922499, 1);\n      expect(got[1]).to.roughlyEqual(-653508, 1);\n      expect(got[2]).to.roughlyEqual(3989398, 1);\n      delete proj4.defs.geocent;\n      clearAllProjections();\n      addCommon();\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"does not flip axis order","suites":["ol/proj.js","ol.proj.transform()"],"updatePoint":{"line":611,"column":32,"index":28255},"line":611,"code":"    it('does not flip axis order', function () {\n      proj4.defs('enu', '+proj=longlat');\n      proj4.defs('neu', '+proj=longlat +axis=neu');\n      register(proj4);\n      const got = transform([1, 2], 'neu', 'enu');\n      expect(got).to.eql([1, 2]);\n      delete proj4.defs.enu;\n      delete proj4.defs.neu;\n      clearAllProjections();\n      addCommon();\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns value in meters","suites":["ol/proj.js","ol.proj.Projection.prototype.getMetersPerUnit()"],"updatePoint":{"line":639,"column":31,"index":30115},"line":639,"code":"    it('returns value in meters', function () {\n      const epsg4326 = getProjection('EPSG:4326');\n      expect(epsg4326.getMetersPerUnit()).to.eql(metersPerDegree);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works for proj4js projections without units","suites":["ol/proj.js","ol.proj.Projection.prototype.getMetersPerUnit()"],"updatePoint":{"line":643,"column":51,"index":30309},"line":643,"code":"    it('works for proj4js projections without units', function () {\n      const epsg26782 = getProjection('EPSG:26782');\n      expect(epsg26782.getMetersPerUnit()).to.eql(0.3048006096012192);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works for proj4js projections with units other than m","suites":["ol/proj.js","ol.proj.Projection.prototype.getMetersPerUnit()"],"updatePoint":{"line":647,"column":61,"index":30519},"line":647,"code":"    it('works for proj4js projections with units other than m', function () {\n      const epsg3739 = getProjection('EPSG:3739');\n      expect(epsg3739.getMetersPerUnit()).to.eql(1200 / 3937);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"works for proj4js OGC WKT GEOGCS projections","suites":["ol/proj.js","ol.proj.Projection.prototype.getMetersPerUnit()"],"updatePoint":{"line":651,"column":52,"index":30710},"line":651,"code":"    it('works for proj4js OGC WKT GEOGCS projections', function () {\n      const epsg4269 = getProjection('EPSG:4269');\n      expect(epsg4269.getMetersPerUnit()).to.eql(6378137 * 0.01745329251994328);\n      const epsg4279 = getProjection('EPSG:4279');\n      expect(epsg4279.getMetersPerUnit()).to.eql(6377563.396 * 0.01745329251994328);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"is shown once when suspicious coordinates are used","suites":["ol/proj.js","Console info about `setUserProjection`"],"updatePoint":{"line":673,"column":58,"index":31491},"line":673,"code":"    it('is shown once when suspicious coordinates are used', function () {\n      const view = new View({\n        center: [16, 48]\n      });\n      view.setCenter([15, 47]);\n      expect(callCount).to.be(1);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"is not shown when fromLonLat() is used","suites":["ol/proj.js","Console info about `setUserProjection`"],"updatePoint":{"line":680,"column":46,"index":31693},"line":680,"code":"    it('is not shown when fromLonLat() is used', function () {\n      const view = new View({\n        center: fromLonLat([16, 48])\n      });\n      view.setCenter(fromLonLat([15, 47]));\n      expect(callCount).to.be(0);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"is not shown when useGeographic() is used","suites":["ol/proj.js","Console info about `setUserProjection`"],"updatePoint":{"line":687,"column":49,"index":31922},"line":687,"code":"    it('is not shown when useGeographic() is used', function () {\n      useGeographic();\n      const view = new View({\n        center: [16, 48]\n      });\n      view.setCenter([15, 47]);\n      expect(callCount).to.be(0);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"is not shown when view projection is configured","suites":["ol/proj.js","Console info about `setUserProjection`"],"updatePoint":{"line":695,"column":55,"index":32156},"line":695,"code":"    it('is not shown when view projection is configured', function () {\n      const view = new View({\n        projection: 'EPSG:4326',\n        center: [16, 48]\n      });\n      view.setCenter([15, 47]);\n      expect(callCount).to.be(0);\n    });","file":"node/ol/proj.test.js","skipped":false,"dir":"test"},{"name":"returns true if register has been called","suites":["ol/proj/proj4.js","isRegistered"],"updatePoint":{"line":28,"column":48,"index":1010},"line":28,"code":"    it('returns true if register has been called', () => {\n      register(proj4);\n      expect(isRegistered()).to.be(true);\n    });","file":"node/ol/proj/proj4.test.js","skipped":false,"dir":"test"},{"name":"returns false if register has not been called","suites":["ol/proj/proj4.js","isRegistered"],"updatePoint":{"line":32,"column":53,"index":1147},"line":32,"code":"    it('returns false if register has not been called', () => {\n      expect(isRegistered()).to.be(false);\n    });","file":"node/ol/proj/proj4.test.js","skipped":false,"dir":"test"},{"name":"unregisters proj4","suites":["ol/proj/proj4.js","unregister"],"updatePoint":{"line":37,"column":25,"index":1273},"line":37,"code":"    it('unregisters proj4', () => {\n      register(proj4);\n      expect(isRegistered()).to.be(true);\n      unregister();\n      expect(isRegistered()).to.be(false);\n    });","file":"node/ol/proj/proj4.test.js","skipped":false,"dir":"test"},{"name":"can be called to provide a custom lookup function","suites":["ol/proj/proj4.js","setEPSGLookup"],"updatePoint":{"line":45,"column":57,"index":1519},"line":45,"code":"    it('can be called to provide a custom lookup function', async () => {\n      let called = false;\n      function lookup(code) {\n        called = true;\n        return Promise.resolve(epsgDefinitions[code]);\n      }\n      register(proj4);\n      setEPSGLookup(lookup);\n      await fromEPSGCode(32612);\n      expect(called).to.be(true);\n    });","file":"node/ol/proj/proj4.test.js","skipped":false,"dir":"test"},{"name":"fetches the proj4 definition and returns a promise for a projection","suites":["ol/proj/proj4.js","fromEPSGCode"],"updatePoint":{"line":61,"column":75,"index":1989},"line":61,"code":"    it('fetches the proj4 definition and returns a promise for a projection', async () => {\n      register(proj4);\n      const code = 'EPSG:32721';\n      const projection = await fromEPSGCode(code);\n      expect(projection).to.be.a(Projection);\n      expect(projection.getCode()).to.be(code);\n      const center = [500000.0, 5572242.78];\n      const transformed = transform(center, code, 'EPSG:4326');\n      expect(transformed[0]).to.roughlyEqual(-57, 1e-7);\n      expect(transformed[1]).to.roughlyEqual(-40, 1e-7);\n    });","file":"node/ol/proj/proj4.test.js","skipped":false,"dir":"test"},{"name":"accepts a number in addition to a string","suites":["ol/proj/proj4.js","fromEPSGCode"],"updatePoint":{"line":72,"column":48,"index":2486},"line":72,"code":"    it('accepts a number in addition to a string', async () => {\n      register(proj4);\n      const number = 32721;\n      const code = 'EPSG:' + number;\n      const projection = await fromEPSGCode(number);\n      expect(projection).to.be.a(Projection);\n      expect(projection.getCode()).to.be(code);\n      const center = [500000.0, 5572242.78];\n      const transformed = transform(center, code, 'EPSG:4326');\n      expect(transformed[0]).to.roughlyEqual(-57, 1e-7);\n      expect(transformed[1]).to.roughlyEqual(-40, 1e-7);\n    });","file":"node/ol/proj/proj4.test.js","skipped":false,"dir":"test"},{"name":"throws if the definition is not found","suites":["ol/proj/proj4.js","fromEPSGCode"],"updatePoint":{"line":84,"column":45,"index":3014},"line":84,"code":"    it('throws if the definition is not found', async () => {\n      register(proj4);\n      let error;\n      try {\n        await fromEPSGCode('EPSG:404');\n      } catch (err) {\n        error = err;\n      }\n      expect(error).to.be.an(Error);\n      expect(error.message).to.be('Unexpected response from epsg.io: 404');\n    });","file":"node/ol/proj/proj4.test.js","skipped":false,"dir":"test"},{"name":"throws if proj4 is not already registered","suites":["ol/proj/proj4.js","fromEPSGCode"],"updatePoint":{"line":95,"column":49,"index":3344},"line":95,"code":"    it('throws if proj4 is not already registered', async () => {\n      let error;\n      try {\n        await fromEPSGCode('EPSG:32721');\n      } catch (err) {\n        error = err;\n      }\n      expect(error).to.be.an(Error);\n      expect(error.message).to.be('Proj4 must be registered first with register(proj4)');\n    });","file":"node/ol/proj/proj4.test.js","skipped":false,"dir":"test"},{"name":"creates a Point","suites":["ol/render/Feature","ol/render/Feature.toGeometry()"],"updatePoint":{"line":6,"column":23,"index":374},"line":6,"code":"    it('creates a Point', function () {\n      const geometry = new Point([0, 0]);\n      const renderFeature = new RenderFeature(geometry.getType(), geometry.getFlatCoordinates().slice(), []);\n      const converted = toGeometry(renderFeature);\n      expect(converted).to.be.a(Point);\n      expect(converted.getFlatCoordinates()).to.eql(geometry.getFlatCoordinates());\n      expect(converted.getProperties()).to.eql({});\n    });","file":"node/ol/render/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a MultiPoint","suites":["ol/render/Feature","ol/render/Feature.toGeometry()"],"updatePoint":{"line":14,"column":28,"index":806},"line":14,"code":"    it('creates a MultiPoint', function () {\n      const geometry = new MultiPoint([[0, 0], [4, 5]]);\n      const renderFeature = new RenderFeature(geometry.getType(), geometry.getFlatCoordinates().slice(), []);\n      const converted = toGeometry(renderFeature);\n      expect(converted).to.be.a(MultiPoint);\n      expect(converted.getFlatCoordinates()).to.eql(geometry.getFlatCoordinates());\n      expect(converted.getProperties()).to.eql({});\n    });","file":"node/ol/render/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a LineString","suites":["ol/render/Feature","ol/render/Feature.toGeometry()"],"updatePoint":{"line":22,"column":28,"index":1258},"line":22,"code":"    it('creates a LineString', function () {\n      const geometry = new LineString([[0, 0], [4, 5]]);\n      const renderFeature = new RenderFeature(geometry.getType(), geometry.getFlatCoordinates().slice(), []);\n      const converted = toGeometry(renderFeature);\n      expect(converted).to.be.a(LineString);\n      expect(converted.getFlatCoordinates()).to.eql(geometry.getFlatCoordinates());\n      expect(converted.getProperties()).to.eql({});\n    });","file":"node/ol/render/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a MultiLineString","suites":["ol/render/Feature","ol/render/Feature.toGeometry()"],"updatePoint":{"line":30,"column":33,"index":1715},"line":30,"code":"    it('creates a MultiLineString', function () {\n      const geometry = new MultiLineString([[[0, 0], [4, 5]], [[0, 0], [4, 5]]]);\n      const renderFeature = new RenderFeature(geometry.getType(), geometry.getFlatCoordinates().slice(), geometry.getEnds().slice());\n      const converted = toGeometry(renderFeature);\n      expect(converted).to.be.a(MultiLineString);\n      expect(converted.getFlatCoordinates()).to.eql(geometry.getFlatCoordinates());\n      expect(converted.getEnds()).to.eql(geometry.getEnds());\n      expect(converted.getProperties()).to.eql({});\n    });","file":"node/ol/render/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a Polygon","suites":["ol/render/Feature","ol/render/Feature.toGeometry()"],"updatePoint":{"line":39,"column":25,"index":2280},"line":39,"code":"    it('creates a Polygon', function () {\n      const geometry = new Polygon([[[0, 0], [5, 0], [5, 5], [0, 0]], [[1, 1], [4, 4], [4, 1], [1, 1]]]);\n      const renderFeature = new RenderFeature(geometry.getType(), geometry.getFlatCoordinates().slice(), geometry.getEnds().slice());\n      const converted = toGeometry(renderFeature);\n      expect(converted).to.be.a(Polygon);\n      expect(converted.getFlatCoordinates()).to.eql(geometry.getFlatCoordinates());\n      expect(converted.getEnds()).to.eql(geometry.getEnds());\n      expect(converted.getProperties()).to.eql({});\n    });","file":"node/ol/render/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a MultiPolygon from oriented polygon rings","suites":["ol/render/Feature","ol/render/Feature.toGeometry()"],"updatePoint":{"line":48,"column":58,"index":2894},"line":48,"code":"    it('creates a MultiPolygon from oriented polygon rings', function () {\n      const geometry = new MultiPolygon([[[[0, 0], [5, 0], [5, 5], [0, 0]], [[1, 1], [4, 4], [4, 1], [1, 1]]], [[[-0, -0], [-5, -0], [-5, -5], [-0, -0]]]]);\n      const renderFeature = new RenderFeature('Polygon', geometry.getFlatCoordinates().slice(), geometry.getEndss().flat(1));\n      const converted = toGeometry(renderFeature);\n      expect(converted).to.be.a(MultiPolygon);\n      expect(converted.getFlatCoordinates()).to.eql(geometry.getFlatCoordinates());\n      expect(converted.getEndss()).to.eql(geometry.getEndss());\n      expect(converted.getProperties()).to.eql({});\n    });","file":"node/ol/render/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a Feature<Point>","suites":["ol/render/Feature","ol/render/Feature.toFeature()"],"updatePoint":{"line":59,"column":32,"index":3596},"line":59,"code":"    it('creates a Feature<Point>', function () {\n      const id = 'asdf';\n      const properties = {\n        test: '123'\n      };\n      const geometry = new Point([0, 0]);\n      const renderFeature = new RenderFeature(geometry.getType(), geometry.getFlatCoordinates().slice(), [], properties, id);\n      const feature = toFeature(renderFeature);\n      const converted = feature.getGeometry();\n      expect(converted).to.be.a(Point);\n      expect(converted.getFlatCoordinates()).to.eql(geometry.getFlatCoordinates());\n      expect(feature.getId()).to.be(id);\n      const props = feature.getProperties();\n      delete props.geometry;\n      expect(props).to.eql(properties);\n    });","file":"node/ol/render/Feature.test.js","skipped":false,"dir":"test"},{"name":"creates a Feature<LineString> with non-default geometry name","suites":["ol/render/Feature","ol/render/Feature.toFeature()"],"updatePoint":{"line":76,"column":66,"index":4316},"line":76,"code":"  it('creates a Feature<LineString> with non-default geometry name', function () {\n    const id = 'asdf';\n    const properties = {\n      geometry: '123'\n    };\n    const geometry = new LineString([[0, 0], [5, 5]]);\n    const renderFeature = new RenderFeature(geometry.getType(), geometry.getFlatCoordinates().slice(), [], properties, id);\n    const geometryName = 'geom';\n    const feature = toFeature(renderFeature, geometryName);\n    const converted = feature.getGeometry();\n    expect(converted).to.be.a(LineString);\n    expect(feature.get(geometryName)).to.be(converted);\n    expect(converted.getFlatCoordinates()).to.eql(geometry.getFlatCoordinates());\n    expect(feature.getId()).to.be(id);\n    const props = feature.getProperties();\n    delete props.geom;\n    expect(props).to.eql(properties);\n  });","file":"node/ol/render/Feature.test.js","skipped":false,"dir":"test"},{"name":"fetches and parses map tile info","suites":["ol/source/ogcTileUtil.js","getTileSetInfo()"],"updatePoint":{"line":55,"column":40,"index":1558},"line":55,"code":"    it('fetches and parses map tile info', async () => {\n      baseUrl = 'https://maps.ecere.com/';\n      const sourceInfo = {\n        url: 'https://maps.ecere.com/ogcapi/collections/blueMarble/map/tiles/WebMercatorQuad'\n      };\n      const tileInfo = await getTileSetInfo(sourceInfo);\n      expect(tileInfo).to.be.an(Object);\n      expect(tileInfo.urlTemplate).to.be('/ogcapi/collections/blueMarble/map/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.jpg');\n      expect(tileInfo.grid).to.be.a(TileGrid);\n      expect(tileInfo.grid.getTileSize(0)).to.eql([256, 256]);\n      expect(tileInfo.grid.getResolutions()).to.have.length(10);\n      expect(tileInfo.urlFunction).to.be.a(Function);\n      expect(tileInfo.urlFunction([3, 2, 1])).to.be('https://maps.ecere.com/ogcapi/collections/blueMarble/map/tiles/WebMercatorQuad/3/1/2.jpg');\n      expect(tileInfo.urlFunction([3, -1, 0])).to.be(undefined); // below min x\n      expect(tileInfo.urlFunction([3, 8, 0])).to.be(undefined); // above max x\n      expect(tileInfo.urlFunction([3, 0, -1])).to.be(undefined); // below min y\n      expect(tileInfo.urlFunction([3, 0, 8])).to.be(undefined); // above max y\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"allows preferred media type to be configured","suites":["ol/source/ogcTileUtil.js","getTileSetInfo()"],"updatePoint":{"line":74,"column":52,"index":2738},"line":74,"code":"    it('allows preferred media type to be configured', async () => {\n      baseUrl = 'https://maps.ecere.com/';\n      const sourceInfo = {\n        url: 'https://maps.ecere.com/ogcapi/collections/blueMarble/map/tiles/WebMercatorQuad',\n        mediaType: 'image/png'\n      };\n      const tileInfo = await getTileSetInfo(sourceInfo);\n      expect(tileInfo).to.be.an(Object);\n      expect(tileInfo.urlTemplate).to.be('/ogcapi/collections/blueMarble/map/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.png');\n      expect(tileInfo.urlFunction).to.be.a(Function);\n      expect(tileInfo.urlFunction([3, 2, 1])).to.be('https://maps.ecere.com/ogcapi/collections/blueMarble/map/tiles/WebMercatorQuad/3/1/2.png');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"fetches and parses vector tile info","suites":["ol/source/ogcTileUtil.js","getTileSetInfo()"],"updatePoint":{"line":86,"column":43,"index":3447},"line":86,"code":"    it('fetches and parses vector tile info', async () => {\n      baseUrl = 'https://maps.ecere.com/';\n      const sourceInfo = {\n        url: 'https://maps.ecere.com/ogcapi/collections/ne_10m_admin_0_countries/tiles/WebMercatorQuad'\n      };\n      const tileInfo = await getTileSetInfo(sourceInfo);\n      expect(tileInfo).to.be.an(Object);\n      expect(tileInfo.urlTemplate).to.be('/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.json');\n      expect(tileInfo.grid).to.be.a(TileGrid);\n      expect(tileInfo.grid.getTileSize(0)).to.eql([256, 256]);\n      expect(tileInfo.grid.getResolutions()).to.have.length(8);\n      expect(tileInfo.urlFunction).to.be.a(Function);\n      expect(tileInfo.urlFunction([3, 2, 1])).to.be('https://maps.ecere.com/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/3/1/2.json');\n      expect(tileInfo.urlFunction([2, -1, 0])).to.be(undefined); // below min x\n      expect(tileInfo.urlFunction([2, 4, 0])).to.be(undefined); // above max x\n      expect(tileInfo.urlFunction([2, 0, -1])).to.be(undefined); // below min y\n      expect(tileInfo.urlFunction([2, 0, 4])).to.be(undefined); // above max y\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"allows preferred media type to be configured","suites":["ol/source/ogcTileUtil.js","getTileSetInfo()"],"updatePoint":{"line":105,"column":52,"index":4702},"line":105,"code":"    it('allows preferred media type to be configured', async () => {\n      baseUrl = 'https://maps.ecere.com/';\n      const sourceInfo = {\n        url: 'https://maps.ecere.com/ogcapi/collections/ne_10m_admin_0_countries/tiles/WebMercatorQuad',\n        mediaType: 'application/vnd.mapbox-vector-tile'\n      };\n      const tileInfo = await getTileSetInfo(sourceInfo);\n      expect(tileInfo).to.be.an(Object);\n      expect(tileInfo.urlTemplate).to.be('/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.mvt');\n      expect(tileInfo.urlFunction).to.be.a(Function);\n      expect(tileInfo.urlFunction([3, 2, 1])).to.be('https://maps.ecere.com/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/3/1/2.mvt');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"uses supported media types if available","suites":["ol/source/ogcTileUtil.js","getTileSetInfo()"],"updatePoint":{"line":117,"column":47,"index":5514},"line":117,"code":"    it('uses supported media types if available', async () => {\n      baseUrl = 'https://maps.ecere.com/';\n      const sourceInfo = {\n        url: 'https://maps.ecere.com/ogcapi/collections/ne_10m_admin_0_countries/tiles/WebMercatorQuad',\n        supportedMediaTypes: ['bogus-media-type', 'application/vnd.mapbox-vector-tile', 'application/geo+json' // should not be used\n        ]\n      };\n\n      const tileInfo = await getTileSetInfo(sourceInfo);\n      expect(tileInfo).to.be.an(Object);\n      expect(tileInfo.urlTemplate).to.be('/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.mvt');\n      expect(tileInfo.urlFunction).to.be.a(Function);\n      expect(tileInfo.urlFunction([3, 2, 1])).to.be('https://maps.ecere.com/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/3/1/2.mvt');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"treats supported media types in descending order of priority","suites":["ol/source/ogcTileUtil.js","getTileSetInfo()"],"updatePoint":{"line":131,"column":68,"index":6435},"line":131,"code":"    it('treats supported media types in descending order of priority', async () => {\n      baseUrl = 'https://maps.ecere.com/';\n      const sourceInfo = {\n        url: 'https://maps.ecere.com/ogcapi/collections/ne_10m_admin_0_countries/tiles/WebMercatorQuad',\n        supportedMediaTypes: ['bogus-media-type', 'application/geo+json',\n        // should be preferred\n        'application/vnd.mapbox-vector-tile']\n      };\n      const tileInfo = await getTileSetInfo(sourceInfo);\n      expect(tileInfo).to.be.an(Object);\n      expect(tileInfo.urlTemplate).to.be('/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.json');\n      expect(tileInfo.urlFunction).to.be.a(Function);\n      expect(tileInfo.urlFunction([3, 2, 1])).to.be('https://maps.ecere.com/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/3/1/2.json');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"gets the last known vector type if the preferred media type is absent","suites":["ol/source/ogcTileUtil.js","getVectorTileUrlTemplate()"],"updatePoint":{"line":153,"column":77,"index":7670},"line":153,"code":"    it('gets the last known vector type if the preferred media type is absent', () => {\n      const urlTemplate = getVectorTileUrlTemplate(links);\n      expect(urlTemplate).to.be('/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.json');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"gets the preferred media type if given","suites":["ol/source/ogcTileUtil.js","getVectorTileUrlTemplate()"],"updatePoint":{"line":157,"column":46,"index":7957},"line":157,"code":"    it('gets the preferred media type if given', () => {\n      const urlTemplate = getVectorTileUrlTemplate(links, 'application/vnd.mapbox-vector-tile');\n      expect(urlTemplate).to.be('/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.mvt');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"uses supported media types is preferred media type is not given","suites":["ol/source/ogcTileUtil.js","getVectorTileUrlTemplate()"],"updatePoint":{"line":161,"column":71,"index":8306},"line":161,"code":"    it('uses supported media types is preferred media type is not given', () => {\n      const urlTemplate = getVectorTileUrlTemplate(links, undefined, ['application/vnd.mapbox-vector-tile']);\n      expect(urlTemplate).to.be('/ogcapi/collections/NaturalEarth:cultural:ne_10m_admin_0_countries/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.mvt');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"throws if it cannot find preferred media type or a known fallback","suites":["ol/source/ogcTileUtil.js","getVectorTileUrlTemplate()"],"updatePoint":{"line":165,"column":73,"index":8670},"line":165,"code":"    it('throws if it cannot find preferred media type or a known fallback', () => {\n      function call() {\n        getVectorTileUrlTemplate([], 'application/vnd.mapbox-vector-tile');\n      }\n      expect(call).to.throwException('Could not find \"item\" link');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"gets the last known image type if the preferred media type is absent","suites":["ol/source/ogcTileUtil.js","getMapTileUrlTemplate()"],"updatePoint":{"line":179,"column":76,"index":9224},"line":179,"code":"    it('gets the last known image type if the preferred media type is absent', () => {\n      const urlTemplate = getMapTileUrlTemplate(links);\n      expect(urlTemplate).to.be('/ogcapi/collections/blueMarble/map/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.jpg');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"gets the preferred media type if given","suites":["ol/source/ogcTileUtil.js","getMapTileUrlTemplate()"],"updatePoint":{"line":183,"column":46,"index":9475},"line":183,"code":"    it('gets the preferred media type if given', () => {\n      const urlTemplate = getMapTileUrlTemplate(links, 'image/png');\n      expect(urlTemplate).to.be('/ogcapi/collections/blueMarble/map/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}.png');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"throws if it cannot find preferred media type or a known fallback","suites":["ol/source/ogcTileUtil.js","getMapTileUrlTemplate()"],"updatePoint":{"line":187,"column":73,"index":9766},"line":187,"code":"    it('throws if it cannot find preferred media type or a known fallback', () => {\n      function call() {\n        getMapTileUrlTemplate([], 'image/png');\n      }\n      expect(call).to.throwException('Could not find \"item\" link');\n    });","file":"node/ol/source/ogcTileUtil.test.js","skipped":false,"dir":"test"},{"name":"defaults to circular","suites":["ol/structs/LinkedList.js"],"updatePoint":{"line":10,"column":26,"index":292},"line":10,"code":"  it('defaults to circular', function () {\n    expect(ll.circular_).to.be(true);\n  });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"creates an empty list","suites":["ol/structs/LinkedList.js"],"updatePoint":{"line":13,"column":27,"index":380},"line":13,"code":"  it('creates an empty list', function () {\n    expect(ll.length_).to.be(0);\n    expect(ll.first_).to.be(undefined);\n    expect(ll.last_).to.be(undefined);\n    expect(ll.head_).to.be(undefined);\n  });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"inserts an item into the list","suites":["ol/structs/LinkedList.js","#insertItem"],"updatePoint":{"line":23,"column":37,"index":695},"line":23,"code":"    it('inserts an item into the list', function () {\n      expect(ll.length_).to.be(1);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"sets the cursor to the inserted item","suites":["ol/structs/LinkedList.js","#insertItem"],"updatePoint":{"line":26,"column":44,"index":799},"line":26,"code":"    it('sets the cursor to the inserted item', function () {\n      expect(ll.head_.data).to.be(item);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"links the previous item to the new one","suites":["ol/structs/LinkedList.js","#insertItem"],"updatePoint":{"line":29,"column":46,"index":911},"line":29,"code":"    it('links the previous item to the new one', function () {\n      ll.insertItem(item2);\n      expect(ll.head_.prev.data).to.be(item);\n      expect(ll.head_.prev.next.data).to.be(item2);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"removes the current item","suites":["ol/structs/LinkedList.js","#removeItem"],"updatePoint":{"line":42,"column":32,"index":1282},"line":42,"code":"    it('removes the current item', function () {\n      ll.removeItem();\n      expect(ll.length_).to.be(2);\n      expect(ll.head_.data).not.to.be(item3);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"sets the cursor to the next item if possible","suites":["ol/structs/LinkedList.js","#removeItem"],"updatePoint":{"line":47,"column":52,"index":1463},"line":47,"code":"    it('sets the cursor to the next item if possible', function () {\n      ll.removeItem();\n      expect(ll.head_.data).to.be(item);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"otherwise sets the cursor to the previous item","suites":["ol/structs/LinkedList.js","#removeItem"],"updatePoint":{"line":51,"column":54,"index":1606},"line":51,"code":"    it('otherwise sets the cursor to the previous item', function () {\n      ll = new LinkedList(false);\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      ll.insertItem(item3);\n      ll.removeItem();\n      expect(ll.head_.data).to.be(item2);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"empties a list with only one item","suites":["ol/structs/LinkedList.js","#removeItem"],"updatePoint":{"line":59,"column":41,"index":1854},"line":59,"code":"    it('empties a list with only one item', function () {\n      ll = new LinkedList();\n      ll.insertItem(item);\n      ll.removeItem();\n      expect(ll.length_).to.be(0);\n      expect(ll.head_).to.be(undefined);\n      expect(ll.first_).to.be(undefined);\n      expect(ll.last_).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"sets the cursor to the first item and returns its data","suites":["ol/structs/LinkedList.js","#firstItem"],"updatePoint":{"line":70,"column":62,"index":2224},"line":70,"code":"    it('sets the cursor to the first item and returns its data', function () {\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      const i = ll.firstItem();\n      expect(i).to.be(item);\n      expect(ll.head_.data).to.be(item);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns undefined on empty list","suites":["ol/structs/LinkedList.js","#firstItem"],"updatePoint":{"line":77,"column":39,"index":2445},"line":77,"code":"    it('returns undefined on empty list', function () {\n      const i = ll.firstItem();\n      expect(i).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"sets the cursor to the last item and returns its data","suites":["ol/structs/LinkedList.js","#lastItem"],"updatePoint":{"line":83,"column":61,"index":2641},"line":83,"code":"    it('sets the cursor to the last item and returns its data', function () {\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      ll.firstItem();\n      const i = ll.lastItem();\n      expect(i).to.be(item2);\n      expect(ll.head_.data).to.be(item2);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns undefined on empty list","suites":["ol/structs/LinkedList.js","#lastItem"],"updatePoint":{"line":91,"column":39,"index":2885},"line":91,"code":"    it('returns undefined on empty list', function () {\n      const i = ll.lastItem();\n      expect(i).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"sets the cursor to the next item and returns its data","suites":["ol/structs/LinkedList.js","#nextItem"],"updatePoint":{"line":97,"column":61,"index":3080},"line":97,"code":"    it('sets the cursor to the next item and returns its data', function () {\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      ll.firstItem();\n      const i = ll.nextItem();\n      expect(i).to.be(item2);\n      expect(ll.head_.data).to.be(item2);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns undefined on empty list","suites":["ol/structs/LinkedList.js","#nextItem"],"updatePoint":{"line":105,"column":39,"index":3324},"line":105,"code":"    it('returns undefined on empty list', function () {\n      const i = ll.nextItem();\n      expect(i).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"sets the cursor to the previous item and returns its data","suites":["ol/structs/LinkedList.js","#prevItem"],"updatePoint":{"line":111,"column":65,"index":3523},"line":111,"code":"    it('sets the cursor to the previous item and returns its data', function () {\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      const i = ll.prevItem();\n      expect(i).to.be(item);\n      expect(ll.head_.data).to.be(item);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns undefined on empty list","suites":["ol/structs/LinkedList.js","#prevItem"],"updatePoint":{"line":118,"column":39,"index":3743},"line":118,"code":"    it('returns undefined on empty list', function () {\n      const i = ll.prevItem();\n      expect(i).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns the data of the next item without stepping the cursor","suites":["ol/structs/LinkedList.js","#getNextItem"],"updatePoint":{"line":124,"column":69,"index":3949},"line":124,"code":"    it('returns the data of the next item without stepping the cursor', function () {\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      ll.firstItem();\n      const i = ll.getNextItem();\n      expect(i).to.be(item2);\n      expect(ll.head_.data).to.be(item);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns undefined on empty list","suites":["ol/structs/LinkedList.js","#getNextItem"],"updatePoint":{"line":132,"column":39,"index":4195},"line":132,"code":"    it('returns undefined on empty list', function () {\n      const i = ll.getNextItem();\n      expect(i).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns the data of the previous item without stepping the cursor","suites":["ol/structs/LinkedList.js","#getPrevItem"],"updatePoint":{"line":138,"column":73,"index":4408},"line":138,"code":"    it('returns the data of the previous item without stepping the cursor', function () {\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      const i = ll.getPrevItem();\n      expect(i).to.be(item);\n      expect(ll.head_.data).to.be(item2);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns undefined on empty list","suites":["ol/structs/LinkedList.js","#getPrevItem"],"updatePoint":{"line":145,"column":39,"index":4632},"line":145,"code":"    it('returns undefined on empty list', function () {\n      const i = ll.getPrevItem();\n      expect(i).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns the data of the current item","suites":["ol/structs/LinkedList.js","#getCurrItem"],"updatePoint":{"line":151,"column":44,"index":4816},"line":151,"code":"    it('returns the data of the current item', function () {\n      const item3 = {};\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      ll.insertItem(item3);\n      ll.prevItem();\n      const i = ll.getCurrItem();\n      expect(i).to.be(item2);\n      expect(ll.head_.data).to.be(item2);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns undefined on empty list","suites":["ol/structs/LinkedList.js","#getCurrItem"],"updatePoint":{"line":161,"column":39,"index":5114},"line":161,"code":"    it('returns undefined on empty list', function () {\n      const i = ll.getCurrItem();\n      expect(i).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"returns the length of the list","suites":["ol/structs/LinkedList.js","#getLength"],"updatePoint":{"line":167,"column":38,"index":5290},"line":167,"code":"    it('returns the length of the list', function () {\n      ll.insertItem(item);\n      ll.insertItem(item2);\n      const l = ll.getLength();\n      expect(l).to.be(2);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"concatenates a second list with the current one","suites":["ol/structs/LinkedList.js","#concat"],"updatePoint":{"line":183,"column":55,"index":5716},"line":183,"code":"    it('concatenates a second list with the current one', function () {\n      const item4 = {};\n      const item5 = {};\n      const item6 = {};\n      ll.insertItem(item4);\n      ll.insertItem(item5);\n      ll.insertItem(item6);\n      ll.prevItem();\n      ll.concat(ll2);\n      expect(ll.length_).to.be(6);\n      expect(ll.head_.data).to.be(item5);\n      expect(ll.head_.next.data).to.be(item);\n      expect(ll.head_.next.next.next.next.data).to.be(item6);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"receives the second list if the current one is empty","suites":["ol/structs/LinkedList.js","#concat"],"updatePoint":{"line":197,"column":60,"index":6185},"line":197,"code":"    it('receives the second list if the current one is empty', function () {\n      ll.concat(ll2);\n      expect(ll.length_).to.be(3);\n      expect(ll.first_.data).to.be(item);\n      expect(ll.last_.data).to.be(item3);\n      expect(ll.head_.data).to.be(item3);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"destroys the second list","suites":["ol/structs/LinkedList.js","#concat"],"updatePoint":{"line":204,"column":32,"index":6425},"line":204,"code":"    it('destroys the second list', function () {\n      ll.concat(ll2);\n      expect(ll2.length_).to.be(0);\n      expect(ll2.first_).to.be(undefined);\n      expect(ll2.last_).to.be(undefined);\n      expect(ll2.head_).to.be(undefined);\n    });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"initializes the list in a circular way","suites":["ol/structs/LinkedList.js","when circular","#insertItem"],"updatePoint":{"line":218,"column":48,"index":6866},"line":218,"code":"      it('initializes the list in a circular way', function () {\n        expect(ll.head_.prev.data).to.be(item);\n        expect(ll.head_.next.data).to.be(item);\n      });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"resets the first item to the current one","suites":["ol/structs/LinkedList.js","when circular","#setFirstItem"],"updatePoint":{"line":224,"column":50,"index":7091},"line":224,"code":"      it('resets the first item to the current one', function () {\n        ll.insertItem(item2);\n        ll.setFirstItem();\n        expect(ll.first_.data).to.be(item2);\n        expect(ll.last_.data).to.be(item);\n      });","file":"node/ol/structs/linkedlist.test.js","skipped":false,"dir":"test"},{"name":"has size zero","suites":["ol/structs/LRUCache.js","empty cache"],"updatePoint":{"line":15,"column":21,"index":436},"line":15,"code":"    it('has size zero', function () {\n      expect(lruCache.getCount()).to.eql(0);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"has no keys","suites":["ol/structs/LRUCache.js","empty cache"],"updatePoint":{"line":18,"column":19,"index":525},"line":18,"code":"    it('has no keys', function () {\n      expect(lruCache.getKeys()).to.eql([]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"has no values","suites":["ol/structs/LRUCache.js","empty cache"],"updatePoint":{"line":21,"column":21,"index":616},"line":21,"code":"    it('has no values', function () {\n      expect(lruCache.getValues()).to.eql([]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"returns the correct size","suites":["ol/structs/LRUCache.js","populating"],"updatePoint":{"line":26,"column":32,"index":765},"line":26,"code":"    it('returns the correct size', function () {\n      fillLRUCache(lruCache);\n      expect(lruCache.getCount()).to.eql(4);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"contains the correct keys in the correct order","suites":["ol/structs/LRUCache.js","populating"],"updatePoint":{"line":30,"column":54,"index":919},"line":30,"code":"    it('contains the correct keys in the correct order', function () {\n      fillLRUCache(lruCache);\n      expect(lruCache.getKeys()).to.eql(['d', 'c', 'b', 'a']);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"contains the correct values in the correct order","suites":["ol/structs/LRUCache.js","populating"],"updatePoint":{"line":34,"column":56,"index":1093},"line":34,"code":"    it('contains the correct values in the correct order', function () {\n      fillLRUCache(lruCache);\n      expect(lruCache.getValues()).to.eql([3, 2, 1, 0]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"reports which keys are contained","suites":["ol/structs/LRUCache.js","populating"],"updatePoint":{"line":38,"column":40,"index":1245},"line":38,"code":"    it('reports which keys are contained', function () {\n      fillLRUCache(lruCache);\n      expect(lruCache.containsKey('a')).to.be.ok();\n      expect(lruCache.containsKey('b')).to.be.ok();\n      expect(lruCache.containsKey('c')).to.be.ok();\n      expect(lruCache.containsKey('d')).to.be.ok();\n      expect(lruCache.containsKey('e')).to.not.be();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"moves the key to newest position","suites":["ol/structs/LRUCache.js","getting the oldest key"],"updatePoint":{"line":48,"column":40,"index":1658},"line":48,"code":"    it('moves the key to newest position', function () {\n      fillLRUCache(lruCache);\n      lruCache.get('a');\n      expect(lruCache.getCount()).to.eql(4);\n      expect(lruCache.getKeys()).to.eql(['a', 'd', 'c', 'b']);\n      expect(lruCache.getValues()).to.eql([0, 3, 2, 1]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"moves the key to newest position","suites":["ol/structs/LRUCache.js","getting a key in the middle"],"updatePoint":{"line":57,"column":40,"index":2005},"line":57,"code":"    it('moves the key to newest position', function () {\n      fillLRUCache(lruCache);\n      lruCache.get('b');\n      expect(lruCache.getCount()).to.eql(4);\n      expect(lruCache.getKeys()).to.eql(['b', 'd', 'c', 'a']);\n      expect(lruCache.getValues()).to.eql([1, 3, 2, 0]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"maintains the key to newest position","suites":["ol/structs/LRUCache.js","getting the newest key"],"updatePoint":{"line":66,"column":44,"index":2351},"line":66,"code":"    it('maintains the key to newest position', function () {\n      fillLRUCache(lruCache);\n      lruCache.get('d');\n      expect(lruCache.getCount()).to.eql(4);\n      expect(lruCache.getKeys()).to.eql(['d', 'c', 'b', 'a']);\n      expect(lruCache.getValues()).to.eql([3, 2, 1, 0]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"moves the key to newest position","suites":["ol/structs/LRUCache.js","replacing value of a key"],"updatePoint":{"line":75,"column":40,"index":2695},"line":75,"code":"    it('moves the key to newest position', function () {\n      fillLRUCache(lruCache);\n      lruCache.replace('b', 4);\n      expect(lruCache.getCount()).to.eql(4);\n      expect(lruCache.getKeys()).to.eql(['b', 'd', 'c', 'a']);\n      expect(lruCache.getValues()).to.eql([4, 3, 2, 0]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"adds it as the newest value","suites":["ol/structs/LRUCache.js","setting a new value"],"updatePoint":{"line":84,"column":35,"index":3036},"line":84,"code":"    it('adds it as the newest value', function () {\n      fillLRUCache(lruCache);\n      lruCache.set('e', 4);\n      expect(lruCache.getKeys()).to.eql(['e', 'd', 'c', 'b', 'a']);\n      expect(lruCache.getValues()).to.eql([4, 3, 2, 1, 0]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"raises an exception","suites":["ol/structs/LRUCache.js","setting an existing value"],"updatePoint":{"line":92,"column":27,"index":3334},"line":92,"code":"    it('raises an exception', function () {\n      fillLRUCache(lruCache);\n      expect(function () {\n        lruCache.set('a', 0);\n      }).to.throwException();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"setting raises an exception","suites":["ol/structs/LRUCache.js","disallowed keys"],"updatePoint":{"line":100,"column":35,"index":3561},"line":100,"code":"    it('setting raises an exception', function () {\n      expect(function () {\n        lruCache.set('constructor', 0);\n      }).to.throwException();\n      expect(function () {\n        lruCache.set('hasOwnProperty', 0);\n      }).to.throwException();\n      expect(function () {\n        lruCache.set('isPrototypeOf', 0);\n      }).to.throwException();\n      expect(function () {\n        lruCache.set('propertyIsEnumerable', 0);\n      }).to.throwException();\n      expect(function () {\n        lruCache.set('toLocaleString', 0);\n      }).to.throwException();\n      expect(function () {\n        lruCache.set('toString', 0);\n      }).to.throwException();\n      expect(function () {\n        lruCache.set('valueOf', 0);\n      }).to.throwException();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"getting returns false","suites":["ol/structs/LRUCache.js","disallowed keys"],"updatePoint":{"line":123,"column":29,"index":4304},"line":123,"code":"    it('getting returns false', function () {\n      expect(lruCache.containsKey('constructor')).to.not.be();\n      expect(lruCache.containsKey('hasOwnProperty')).to.not.be();\n      expect(lruCache.containsKey('isPrototypeOf')).to.not.be();\n      expect(lruCache.containsKey('propertyIsEnumerable')).to.not.be();\n      expect(lruCache.containsKey('toLocaleString')).to.not.be();\n      expect(lruCache.containsKey('toString')).to.not.be();\n      expect(lruCache.containsKey('valueOf')).to.not.be();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"returns the least-recent-used value","suites":["ol/structs/LRUCache.js","popping a value"],"updatePoint":{"line":134,"column":43,"index":4873},"line":134,"code":"    it('returns the least-recent-used value', function () {\n      fillLRUCache(lruCache);\n      expect(lruCache.pop()).to.eql(0);\n      expect(lruCache.getCount()).to.eql(3);\n      expect(lruCache.containsKey('a')).to.not.be();\n      expect(lruCache.pop()).to.eql(1);\n      expect(lruCache.getCount()).to.eql(2);\n      expect(lruCache.containsKey('b')).to.not.be();\n      expect(lruCache.pop()).to.eql(2);\n      expect(lruCache.getCount()).to.eql(1);\n      expect(lruCache.containsKey('c')).to.not.be();\n      expect(lruCache.pop()).to.eql(3);\n      expect(lruCache.getCount()).to.eql(0);\n      expect(lruCache.containsKey('d')).to.not.be();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"returns the newest key in the cache","suites":["ol/structs/LRUCache.js","#peekFirstKey()"],"updatePoint":{"line":151,"column":43,"index":5573},"line":151,"code":"    it('returns the newest key in the cache', function () {\n      const cache = new LRUCache();\n      cache.set('oldest', 'oldest');\n      cache.set('oldish', 'oldish');\n      cache.set('newish', 'newish');\n      cache.set('newest', 'newest');\n      expect(cache.peekFirstKey()).to.eql('newest');\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"works if the cache has one item","suites":["ol/structs/LRUCache.js","#peekFirstKey()"],"updatePoint":{"line":159,"column":39,"index":5874},"line":159,"code":"    it('works if the cache has one item', function () {\n      const cache = new LRUCache();\n      cache.set('key', 'value');\n      expect(cache.peekFirstKey()).to.eql('key');\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"throws if the cache is empty","suites":["ol/structs/LRUCache.js","#peekFirstKey()"],"updatePoint":{"line":164,"column":36,"index":6054},"line":164,"code":"    it('throws if the cache is empty', function () {\n      const cache = new LRUCache();\n      expect(function () {\n        cache.peekFirstKey();\n      }).to.throwException();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"returns the last key","suites":["ol/structs/LRUCache.js","peeking at the last value"],"updatePoint":{"line":172,"column":28,"index":6290},"line":172,"code":"    it('returns the last key', function () {\n      fillLRUCache(lruCache);\n      expect(lruCache.peekLast()).to.eql(0);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"throws an exception when the cache is empty","suites":["ol/structs/LRUCache.js","peeking at the last value"],"updatePoint":{"line":176,"column":51,"index":6441},"line":176,"code":"    it('throws an exception when the cache is empty', function () {\n      expect(function () {\n        lruCache.peekLast();\n      }).to.throwException();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"returns the last key","suites":["ol/structs/LRUCache.js","peeking at the last key"],"updatePoint":{"line":183,"column":28,"index":6638},"line":183,"code":"    it('returns the last key', function () {\n      fillLRUCache(lruCache);\n      expect(lruCache.peekLastKey()).to.eql('a');\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"throws an exception when the cache is empty","suites":["ol/structs/LRUCache.js","peeking at the last key"],"updatePoint":{"line":187,"column":51,"index":6794},"line":187,"code":"    it('throws an exception when the cache is empty', function () {\n      expect(function () {\n        lruCache.peekLastKey();\n      }).to.throwException();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"removes an item from the cache","suites":["ol/structs/LRUCache.js","#remove()"],"updatePoint":{"line":194,"column":38,"index":6990},"line":194,"code":"    it('removes an item from the cache', function () {\n      const cache = new LRUCache();\n      cache.set('oldest', 'oldest');\n      cache.set('oldish', 'oldish');\n      cache.set('newish', 'newish');\n      cache.set('newest', 'newest');\n      cache.remove('oldish');\n      expect(cache.getCount()).to.eql(3);\n      expect(cache.getValues()).to.eql(['newest', 'newish', 'oldest']);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"works when removing the oldest item","suites":["ol/structs/LRUCache.js","#remove()"],"updatePoint":{"line":204,"column":43,"index":7386},"line":204,"code":"    it('works when removing the oldest item', function () {\n      const cache = new LRUCache();\n      cache.set('oldest', 'oldest');\n      cache.set('oldish', 'oldish');\n      cache.set('newish', 'newish');\n      cache.set('newest', 'newest');\n      cache.remove('oldest');\n      expect(cache.getCount()).to.eql(3);\n      expect(cache.peekLastKey()).to.eql('oldish');\n      expect(cache.getValues()).to.eql(['newest', 'newish', 'oldish']);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"works when removing the newest item","suites":["ol/structs/LRUCache.js","#remove()"],"updatePoint":{"line":215,"column":43,"index":7834},"line":215,"code":"    it('works when removing the newest item', function () {\n      const cache = new LRUCache();\n      cache.set('oldest', 'oldest');\n      cache.set('oldish', 'oldish');\n      cache.set('newish', 'newish');\n      cache.set('newest', 'newest');\n      cache.remove('newest');\n      expect(cache.getCount()).to.eql(3);\n      expect(cache.peekFirstKey()).to.eql('newish');\n      expect(cache.getValues()).to.eql(['newish', 'oldish', 'oldest']);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"returns the removed item","suites":["ol/structs/LRUCache.js","#remove()"],"updatePoint":{"line":226,"column":32,"index":8272},"line":226,"code":"    it('returns the removed item', function () {\n      const cache = new LRUCache();\n      const item = {};\n      cache.set('key', item);\n      const returned = cache.remove('key');\n      expect(returned).to.be(item);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"throws if the key does not exist","suites":["ol/structs/LRUCache.js","#remove()"],"updatePoint":{"line":233,"column":40,"index":8506},"line":233,"code":"    it('throws if the key does not exist', function () {\n      const cache = new LRUCache();\n      cache.set('foo', 'foo');\n      cache.set('bar', 'bar');\n      const call = function () {\n        cache.remove('bam');\n      };\n      expect(call).to.throwException();\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"clears the cache","suites":["ol/structs/LRUCache.js","clearing the cache"],"updatePoint":{"line":244,"column":24,"index":8817},"line":244,"code":"    it('clears the cache', function () {\n      fillLRUCache(lruCache);\n      lruCache.clear();\n      expect(lruCache.getCount()).to.eql(0);\n      expect(lruCache.getKeys()).to.eql([]);\n      expect(lruCache.getValues()).to.eql([]);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"sets the cache size","suites":["ol/structs/LRUCache.js","setting the cache size"],"updatePoint":{"line":253,"column":27,"index":9117},"line":253,"code":"    it('sets the cache size', function () {\n      lruCache.setSize(2);\n      expect(lruCache.highWaterMark).to.be(2);\n      fillLRUCache(lruCache);\n      while (lruCache.canExpireCache()) {\n        lruCache.pop();\n      }\n      expect(lruCache.getKeys().length).to.be(2);\n    });","file":"node/ol/structs/lrucache.test.js","skipped":false,"dir":"test"},{"name":"is empty","suites":["ol/structs/PriorityQueue.js","when empty"],"updatePoint":{"line":12,"column":16,"index":383},"line":12,"code":"    it('is empty', function () {\n      expect(pq.isEmpty()).to.be(true);\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"enqueue adds an element","suites":["ol/structs/PriorityQueue.js","when empty"],"updatePoint":{"line":15,"column":31,"index":479},"line":15,"code":"    it('enqueue adds an element', function () {\n      const added = pq.enqueue(0);\n      expect(added).to.be(true);\n      expect(pq.elements_).to.eql([0]);\n      expect(pq.priorities_).to.eql([0]);\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"do not enqueue element with DROP priority","suites":["ol/structs/PriorityQueue.js","when empty"],"updatePoint":{"line":21,"column":49,"index":703},"line":21,"code":"    it('do not enqueue element with DROP priority', function () {\n      const added = pq.enqueue(Infinity);\n      expect(added).to.be(false);\n      expect(pq.elements_).to.eql([]);\n      expect(pq.priorities_).to.eql([]);\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"dequeues elements in the correct order","suites":["ol/structs/PriorityQueue.js","when populated"],"updatePoint":{"line":40,"column":46,"index":1266},"line":40,"code":"    it('dequeues elements in the correct order', function () {\n      elements.sort();\n      let i;\n      for (i = 0; i < elements.length; ++i) {\n        expect(pq.dequeue()).to.be(elements[i]);\n      }\n      expect(pq.isEmpty()).to.be(true);\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"dequeue elements in the correct order","suites":["ol/structs/PriorityQueue.js","with an impure priority function"],"updatePoint":{"line":61,"column":45,"index":1861},"line":61,"code":"    it('dequeue elements in the correct order', function () {\n      let lastDelta = 0;\n      let delta;\n      while (!pq.isEmpty()) {\n        delta = Math.abs(pq.dequeue() - target);\n        expect(lastDelta <= delta).to.be(true);\n        lastDelta = delta;\n      }\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"allows reprioritization","suites":["ol/structs/PriorityQueue.js","with an impure priority function"],"updatePoint":{"line":70,"column":31,"index":2121},"line":70,"code":"    it('allows reprioritization', function () {\n      const target = 0.5;\n      pq.reprioritize();\n      let lastDelta = 0;\n      let delta;\n      while (!pq.isEmpty()) {\n        delta = Math.abs(pq.dequeue() - target);\n        expect(lastDelta <= delta).to.be(true);\n        lastDelta = delta;\n      }\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"allows dropping during reprioritization","suites":["ol/structs/PriorityQueue.js","with an impure priority function"],"updatePoint":{"line":81,"column":47,"index":2448},"line":81,"code":"    it('allows dropping during reprioritization', function () {\n      const target = 0.5;\n      let i = 0;\n      pq.priorityFunction_ = function (element) {\n        if (i++ % 2 === 0) {\n          return Math.abs(element - target);\n        }\n        return DROP;\n      };\n      pq.reprioritize();\n      expect(pq.getCount()).to.be(16);\n      let lastDelta = 0;\n      let delta;\n      while (!pq.isEmpty()) {\n        delta = Math.abs(pq.dequeue() - target);\n        expect(lastDelta <= delta).to.be(true);\n        lastDelta = delta;\n      }\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"tracks which elements have been queued","suites":["ol/structs/PriorityQueue.js","tracks elements in the queue"],"updatePoint":{"line":109,"column":46,"index":3225},"line":109,"code":"    it('tracks which elements have been queued', function () {\n      expect(pq.isQueued('a')).to.be(true);\n      expect(pq.isQueued('b')).to.be(true);\n      expect(pq.isQueued('c')).to.be(true);\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"tracks which elements have not been queued","suites":["ol/structs/PriorityQueue.js","tracks elements in the queue"],"updatePoint":{"line":114,"column":50,"index":3432},"line":114,"code":"    it('tracks which elements have not been queued', function () {\n      expect(pq.isQueued('d')).to.be(false);\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"raises an error when an queued element is re-queued","suites":["ol/structs/PriorityQueue.js","tracks elements in the queue"],"updatePoint":{"line":117,"column":59,"index":3561},"line":117,"code":"    it('raises an error when an queued element is re-queued', function () {\n      expect(function () {\n        pq.enqueue('a');\n      }).to.throwException();\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"tracks which elements have be dequeued","suites":["ol/structs/PriorityQueue.js","tracks elements in the queue"],"updatePoint":{"line":122,"column":46,"index":3714},"line":122,"code":"    it('tracks which elements have be dequeued', function () {\n      expect(pq.isQueued('a')).to.be(true);\n      expect(pq.isQueued('b')).to.be(true);\n      expect(pq.isQueued('c')).to.be(true);\n      expect(pq.dequeue()).to.be('a');\n      expect(pq.isQueued('a')).to.be(false);\n      expect(pq.isQueued('b')).to.be(true);\n      expect(pq.isQueued('c')).to.be(true);\n      expect(pq.dequeue()).to.be('b');\n      expect(pq.isQueued('a')).to.be(false);\n      expect(pq.isQueued('b')).to.be(false);\n      expect(pq.isQueued('c')).to.be(true);\n      expect(pq.dequeue()).to.be('c');\n      expect(pq.isQueued('a')).to.be(false);\n      expect(pq.isQueued('b')).to.be(false);\n      expect(pq.isQueued('c')).to.be(false);\n    });","file":"node/ol/structs/priorityqueue.test.js","skipped":false,"dir":"test"},{"name":"returns the expected number of objects","suites":["ol/structs/RBush.js","when empty","#getAll"],"updatePoint":{"line":10,"column":48,"index":338},"line":10,"code":"      it('returns the expected number of objects', function () {\n        expect(rBush.getAll()).to.be.empty();\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["ol/structs/RBush.js","when empty","#isEmpty"],"updatePoint":{"line":15,"column":22,"index":480},"line":15,"code":"      it('returns true', function () {\n        expect(rBush.isEmpty()).to.be(true);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"can update the object","suites":["ol/structs/RBush.js","with a single object"],"updatePoint":{"line":26,"column":29,"index":749},"line":26,"code":"    it('can update the object', function () {\n      expect(rBush.getInExtent([0, 0, 1, 1])).to.eql([obj]);\n      rBush.update([2, 2, 3, 3], obj);\n      expect(rBush.getInExtent([0, 0, 1, 1])).to.be.empty();\n      expect(rBush.getAll()).to.eql([obj]);\n      expect(rBush.getInExtent([2, 2, 3, 3])).to.eql([obj]);\n    });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"don't throws an exception if the extent is not modified","suites":["ol/structs/RBush.js","with a single object"],"updatePoint":{"line":33,"column":63,"index":1103},"line":33,"code":"    it(\"don't throws an exception if the extent is not modified\", function () {\n      expect(function () {\n        rBush.forEach(function (value) {\n          rBush.update([0, 0, 1, 1], obj);\n        });\n      }).not.to.throwException();\n    });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"called for all the objects","suites":["ol/structs/RBush.js","with a few objects","#forEach"],"updatePoint":{"line":58,"column":36,"index":2029},"line":58,"code":"      it('called for all the objects', function () {\n        let i = 0;\n        rBush.forEach(function () {\n          ++i;\n        });\n        expect(i).to.be(objs.length);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"stops when the function returns true","suites":["ol/structs/RBush.js","with a few objects","#forEach"],"updatePoint":{"line":65,"column":46,"index":2222},"line":65,"code":"      it('stops when the function returns true', function () {\n        let i = 0;\n        const result = rBush.forEach(function () {\n          return ++i >= 4;\n        });\n        expect(i).to.be(4);\n        expect(result).to.be(true);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns the expected objects","suites":["ol/structs/RBush.js","with a few objects","#getInExtent"],"updatePoint":{"line":75,"column":38,"index":2511},"line":75,"code":"      it('returns the expected objects', function () {\n        let result;\n        result = rBush.getInExtent([2, 2, 3, 3]);\n        expect(result).to.contain(objs[1]);\n        expect(result).to.contain(objs[2]);\n        expect(result.length).to.be(2);\n        result = rBush.getInExtent([-1, -1, 2, 2]);\n        expect(result).to.contain(objs[0]);\n        expect(result).to.contain(objs[1]);\n        expect(result).to.contain(objs[2]);\n        expect(result).to.contain(objs[4]);\n        expect(result.length).to.be(4);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns an empty array when given a disjoint extent","suites":["ol/structs/RBush.js","with a few objects","#getInExtent"],"updatePoint":{"line":88,"column":61,"index":3065},"line":88,"code":"      it('returns an empty array when given a disjoint extent', function () {\n        expect(rBush.getInExtent([5, 5, 6, 6]).length).to.be(0);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/structs/RBush.js","with a few objects","#isEmpty"],"updatePoint":{"line":93,"column":23,"index":3227},"line":93,"code":"      it('returns false', function () {\n        expect(rBush.isEmpty()).to.be(false);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"can remove each object","suites":["ol/structs/RBush.js","with a few objects","#remove"],"updatePoint":{"line":98,"column":32,"index":3378},"line":98,"code":"      it('can remove each object', function () {\n        let i, ii;\n        for (i = 0, ii = objs.length; i < ii; ++i) {\n          expect(rBush.getAll()).to.contain(objs[i]);\n          rBush.remove(objs[i]);\n          expect(rBush.getAll()).not.to.contain(objs[i]);\n        }\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns the expected objects","suites":["ol/structs/RBush.js","with 100 objects","#getInExtent"],"updatePoint":{"line":123,"column":38,"index":4073},"line":123,"code":"      it('returns the expected objects', function () {\n        let i, ii;\n        for (i = 0, ii = objs.length; i < ii; ++i) {\n          expect(rBush.getInExtent(extents[i])).to.eql([objs[i]]);\n        }\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/structs/RBush.js","with 100 objects","#isEmpty"],"updatePoint":{"line":131,"column":23,"index":4319},"line":131,"code":"      it('returns false', function () {\n        expect(rBush.isEmpty()).to.be(false);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"can remove each object in turn","suites":["ol/structs/RBush.js","with 100 objects","#remove"],"updatePoint":{"line":136,"column":40,"index":4478},"line":136,"code":"      it('can remove each object in turn', function () {\n        let i, ii;\n        for (i = 0, ii = objs.length; i < ii; ++i) {\n          expect(rBush.getInExtent(extents[i])).to.eql([objs[i]]);\n          rBush.remove(objs[i]);\n          expect(rBush.getInExtent(extents[i])).to.be.empty();\n        }\n        expect(rBush.getAll()).to.be.empty();\n        expect(rBush.isEmpty()).to.be(true);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"can remove objects in random order","suites":["ol/structs/RBush.js","with 100 objects","#remove"],"updatePoint":{"line":146,"column":44,"index":4885},"line":146,"code":"      it('can remove objects in random order', function () {\n        let i, ii, j;\n        // https://en.wikipedia.org/wiki/Random_permutation\n        const indexes = [];\n        for (i = 0, ii = objs.length; i < ii; ++i) {\n          j = Math.floor(Math.random() * (i + 1));\n          indexes[i] = indexes[j];\n          indexes[j] = i;\n        }\n        for (i = 0, ii = objs.length; i < ii; ++i) {\n          const index = indexes[i];\n          expect(rBush.getInExtent(extents[index])).to.eql([objs[index]]);\n          rBush.remove(objs[index]);\n          expect(rBush.getInExtent(extents[index])).to.be.empty();\n        }\n        expect(rBush.getAll()).to.be.empty();\n        expect(rBush.isEmpty()).to.be(true);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns the expected number of objects","suites":["ol/structs/RBush.js","with 1000 objects","#getAll"],"updatePoint":{"line":179,"column":48,"index":6071},"line":179,"code":"      it('returns the expected number of objects', function () {\n        expect(rBush.getAll().length).to.be(1000);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns the expected number of objects","suites":["ol/structs/RBush.js","with 1000 objects","#getInExtent"],"updatePoint":{"line":184,"column":48,"index":6248},"line":184,"code":"      it('returns the expected number of objects', function () {\n        expect(rBush.getInExtent([0, 0, 10600, 10600]).length).to.be(1000);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"can perform 1000 in-extent searches","suites":["ol/structs/RBush.js","with 1000 objects","#getInExtent"],"updatePoint":{"line":187,"column":45,"index":6396},"line":187,"code":"      it('can perform 1000 in-extent searches', function () {\n        let n = 0;\n        let i;\n        for (i = 0; i < 1000; ++i) {\n          const min = [Math.random() * 10000, Math.random() * 10000];\n          const max = [min[0] + Math.random() * 500, min[1] + Math.random() * 500];\n          const extent = [min[0], min[1], max[0], max[1]];\n          n += rBush.getInExtent(extent).length;\n        }\n        expect(n).not.to.be(0);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"can perform 1000 out-of-extent searches","suites":["ol/structs/RBush.js","with 1000 objects","#getInExtent"],"updatePoint":{"line":198,"column":49,"index":6847},"line":198,"code":"      it('can perform 1000 out-of-extent searches', function () {\n        let n = 0;\n        let i;\n        for (i = 0; i < 1000; ++i) {\n          const min = [-(Math.random() * 10000 + 501), -(Math.random() * 10000 + 501)];\n          const max = [min[0] + Math.random() * 500, min[1] + Math.random() * 500];\n          const extent = [min[0], min[1], max[0], max[1]];\n          n += rBush.getInExtent(extent).length;\n        }\n        expect(n).to.be(0);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"can insert another 1000 objects","suites":["ol/structs/RBush.js","with 1000 objects","#insert"],"updatePoint":{"line":211,"column":41,"index":7350},"line":211,"code":"      it('can insert another 1000 objects', function () {\n        let i;\n        for (i = 1000; i < 2000; ++i) {\n          const min = [Math.random() * 10000, Math.random() * 10000];\n          const max = [min[0] + Math.random() * 500, min[1] + Math.random() * 500];\n          const extent = [min[0], min[1], max[0], max[1]];\n          rBush.insert(extent, {\n            id: i\n          });\n        }\n        expect(rBush.getInExtent([0, 0, 10600, 10600]).length).to.be(2000);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["ol/structs/RBush.js","with 1000 objects","#isEmpty"],"updatePoint":{"line":225,"column":23,"index":7866},"line":225,"code":"      it('returns false', function () {\n        expect(rBush.isEmpty()).to.be(false);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"can remove all 1000 objects","suites":["ol/structs/RBush.js","with 1000 objects","#remove"],"updatePoint":{"line":230,"column":37,"index":8022},"line":230,"code":"      it('can remove all 1000 objects', function () {\n        const objs = rBush.getAll();\n        let i, value;\n        for (i = objs.length - 1; i >= 0; --i) {\n          value = objs[i];\n          rBush.remove(value);\n        }\n        expect(rBush.isEmpty()).to.be(true);\n      });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"gets the extent","suites":["ol/structs/RBush.js","#getExtent"],"updatePoint":{"line":242,"column":23,"index":8346},"line":242,"code":"    it('gets the extent', function () {\n      const obj = {};\n      rBush.insert([0, 0, 1, 1], obj);\n      expect(rBush.getExtent()).to.eql([0, 0, 1, 1]);\n    });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"concatenates two RBush objects","suites":["ol/structs/RBush.js","#concat"],"updatePoint":{"line":249,"column":38,"index":8566},"line":249,"code":"    it('concatenates two RBush objects', function () {\n      const obj1 = {};\n      const obj2 = {};\n      const rBush2 = new RBush();\n      rBush.insert([0, 0, 1, 1], obj1);\n      rBush2.insert([0, 0, 2, 2], obj2);\n      rBush.concat(rBush2);\n      expect(rBush.getExtent()).to.eql([0, 0, 2, 2]);\n      expect(rBush.getAll().length).to.be(2);\n    });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"preserves the concatenated object's references","suites":["ol/structs/RBush.js","#concat"],"updatePoint":{"line":259,"column":54,"index":8934},"line":259,"code":"    it(\"preserves the concatenated object's references\", function () {\n      const obj1 = {};\n      const obj2 = {};\n      const rBush2 = new RBush();\n      rBush.insert([0, 0, 1, 1], obj1);\n      rBush2.insert([0, 0, 2, 2], obj2);\n      rBush.concat(rBush2);\n      rBush.update([0, 0, 3, 3], obj2);\n      expect(rBush.getExtent()).to.eql([0, 0, 3, 3]);\n    });","file":"node/ol/structs/rbush.test.js","skipped":false,"dir":"test"},{"name":"creates a style with a fill","suites":["ol/style/flat.js","toStyle()"],"updatePoint":{"line":11,"column":35,"index":543},"line":11,"code":"    it('creates a style with a fill', () => {\n      const style = toStyle({\n        'fill-color': 'red'\n      });\n      expect(style).to.be.a(Style);\n      const fill = style.getFill();\n      expect(fill).to.be.a(Fill);\n      expect(fill.getColor()).to.be('red');\n      expect(style.getStroke()).to.be(null);\n      expect(style.getText()).to.be(null);\n      expect(style.getImage()).to.be(null);\n    });","file":"node/ol/style/flat.test.js","skipped":false,"dir":"test"},{"name":"creates a style with a stroke","suites":["ol/style/flat.js","toStyle()"],"updatePoint":{"line":23,"column":37,"index":949},"line":23,"code":"    it('creates a style with a stroke', () => {\n      const style = toStyle({\n        'stroke-width': 2\n      });\n      expect(style).to.be.a(Style);\n      const stroke = style.getStroke();\n      expect(stroke).to.be.a(Stroke);\n      expect(stroke.getWidth()).to.be(2);\n      expect(style.getFill()).to.be(null);\n      expect(style.getText()).to.be(null);\n      expect(style.getImage()).to.be(null);\n    });","file":"node/ol/style/flat.test.js","skipped":false,"dir":"test"},{"name":"creates a style with a text","suites":["ol/style/flat.js","toStyle()"],"updatePoint":{"line":35,"column":35,"index":1355},"line":35,"code":"    it('creates a style with a text', () => {\n      const style = toStyle({\n        'text-value': 'foo',\n        'text-fill-color': 'blue',\n        'text-stroke-width': 2,\n        'text-repeat': 250\n      });\n      expect(style).to.be.a(Style);\n      const text = style.getText();\n      expect(text).to.be.a(Text);\n      expect(text.getText()).to.be('foo');\n      expect(text.getRepeat()).to.be(250);\n      const textFill = text.getFill();\n      expect(textFill).to.be.a(Fill);\n      expect(textFill.getColor()).to.be('blue');\n      const textStroke = text.getStroke();\n      expect(textStroke).to.be.a(Stroke);\n      expect(textStroke.getWidth()).to.be(2);\n      expect(style.getFill()).to.be(null);\n      expect(style.getStroke()).to.be(null);\n      expect(style.getImage()).to.be(null);\n    });","file":"node/ol/style/flat.test.js","skipped":false,"dir":"test"},{"name":"creates a style with an icon","suites":["ol/style/flat.js","toStyle()"],"updatePoint":{"line":57,"column":36,"index":2154},"line":57,"code":"    it('creates a style with an icon', () => {\n      const style = toStyle({\n        'icon-src': 'https://example.com/icon.png'\n      });\n      expect(style).to.be.a(Style);\n      const icon = style.getImage();\n      expect(icon).to.be.a(Icon);\n      expect(style.getFill()).to.be(null);\n      expect(style.getStroke()).to.be(null);\n      expect(style.getText()).to.be(null);\n    });","file":"node/ol/style/flat.test.js","skipped":false,"dir":"test"},{"name":"creates a style with a regular shape","suites":["ol/style/flat.js","toStyle()"],"updatePoint":{"line":68,"column":44,"index":2546},"line":68,"code":"    it('creates a style with a regular shape', () => {\n      const style = toStyle({\n        'shape-points': 10,\n        'shape-radius': 42,\n        'shape-fill-color': 'red',\n        'shape-stroke-color': 'blue'\n      });\n      expect(style).to.be.a(Style);\n      const shape = style.getImage();\n      expect(shape).to.be.a(RegularShape);\n      expect(shape.getPoints()).to.be(10);\n      expect(shape.getRadius()).to.be(42);\n      const shapeFill = shape.getFill();\n      expect(shapeFill).to.be.a(Fill);\n      expect(shapeFill.getColor()).to.be('red');\n      const shapeStroke = shape.getStroke();\n      expect(shapeStroke).to.be.a(Stroke);\n      expect(shapeStroke.getColor()).to.be('blue');\n      expect(style.getFill()).to.be(null);\n      expect(style.getStroke()).to.be(null);\n      expect(style.getText()).to.be(null);\n    });","file":"node/ol/style/flat.test.js","skipped":false,"dir":"test"},{"name":"creates a style with a circle","suites":["ol/style/flat.js","toStyle()"],"updatePoint":{"line":90,"column":37,"index":3373},"line":90,"code":"    it('creates a style with a circle', () => {\n      const style = toStyle({\n        'circle-radius': 42,\n        'circle-fill-color': 'red',\n        'circle-stroke-color': 'blue'\n      });\n      expect(style).to.be.a(Style);\n      const circle = style.getImage();\n      expect(circle).to.be.a(RegularShape);\n      expect(circle.getRadius()).to.be(42);\n      const circleFill = circle.getFill();\n      expect(circleFill).to.be.a(Fill);\n      expect(circleFill.getColor()).to.be('red');\n      const circleStroke = circle.getStroke();\n      expect(circleStroke).to.be.a(Stroke);\n      expect(circleStroke.getColor()).to.be('blue');\n      expect(style.getFill()).to.be(null);\n      expect(style.getStroke()).to.be(null);\n      expect(style.getText()).to.be(null);\n    });","file":"node/ol/style/flat.test.js","skipped":false,"dir":"test"},{"name":"creates a style with a fill and stroke","suites":["ol/style/flat.js","toStyle()"],"updatePoint":{"line":110,"column":46,"index":4152},"line":110,"code":"    it('creates a style with a fill and stroke', () => {\n      const style = toStyle({\n        'fill-color': 'red',\n        'stroke-width': 2,\n        'stroke-color': 'green'\n      });\n      expect(style).to.be.a(Style);\n      const fill = style.getFill();\n      expect(fill).to.be.a(Fill);\n      expect(fill.getColor()).to.be('red');\n      const stroke = style.getStroke();\n      expect(stroke).to.be.a(Stroke);\n      expect(stroke.getWidth()).to.be(2);\n      expect(stroke.getColor()).to.be('green');\n      expect(style.getText()).to.be(null);\n      expect(style.getImage()).to.be(null);\n    });","file":"node/ol/style/flat.test.js","skipped":false,"dir":"test"},{"name":"does not throw an exception","suites":["ol/tilegrid/TileGrid.js","create valid"],"updatePoint":{"line":20,"column":35,"index":963},"line":20,"code":"    it('does not throw an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: resolutions,\n          origin: origin,\n          tileSize: tileSize\n        });\n      }).not.to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/tilegrid/TileGrid.js","create with duplicate resolutions"],"updatePoint":{"line":31,"column":27,"index":1277},"line":31,"code":"    it('throws an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 50, 25, 10],\n          origin: origin,\n          tileSize: tileSize\n        });\n      }).to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/tilegrid/TileGrid.js","create with out of order resolutions"],"updatePoint":{"line":42,"column":27,"index":1600},"line":42,"code":"    it('throws an exception', function () {\n      const resolutions = [100, 25, 50, 10];\n      expect(function () {\n        return new TileGrid({\n          resolutions: resolutions,\n          origin: origin,\n          tileSize: tileSize\n        });\n      }).to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"does not throw an exception","suites":["ol/tilegrid/TileGrid.js","create with multiple origins"],"updatePoint":{"line":54,"column":35,"index":1958},"line":54,"code":"    it('does not throw an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 25, 10],\n          origins: [origin, origin, origin, origin],\n          tileSize: tileSize\n        });\n      }).not.to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/tilegrid/TileGrid.js","create with both origin and multiple origins"],"updatePoint":{"line":65,"column":27,"index":2316},"line":65,"code":"    it('throws an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 25, 10],\n          origins: [origin, origin, origin, origin],\n          origin: origin,\n          tileSize: tileSize\n        });\n      }).to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/tilegrid/TileGrid.js","create with too few origins"],"updatePoint":{"line":77,"column":27,"index":2679},"line":77,"code":"    it('throws an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 25, 10],\n          origins: [origin, origin, origin],\n          tileSize: tileSize\n        });\n      }).to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/tilegrid/TileGrid.js","create with too many origins"],"updatePoint":{"line":88,"column":27,"index":3009},"line":88,"code":"    it('throws an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 25, 10],\n          origins: [origin, origin, origin, origin, origin],\n          tileSize: tileSize\n        });\n      }).to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"does not throw an exception","suites":["ol/tilegrid/TileGrid.js","create with multiple tileSizes"],"updatePoint":{"line":99,"column":35,"index":3365},"line":99,"code":"    it('does not throw an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 25, 10],\n          tileSizes: [tileSize, tileSize, tileSize, tileSize],\n          origin: origin\n        });\n      }).not.to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/tilegrid/TileGrid.js","create with both tileSize and multiple tileSizes"],"updatePoint":{"line":110,"column":27,"index":3733},"line":110,"code":"    it('throws an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 25, 10],\n          tileSizes: [tileSize, tileSize, tileSize, tileSize],\n          tileSize: tileSize,\n          origin: origin\n        });\n      }).to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/tilegrid/TileGrid.js","create with too few tileSizes"],"updatePoint":{"line":122,"column":27,"index":4108},"line":122,"code":"    it('throws an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 25, 10],\n          tileSizes: [tileSize, tileSize, tileSize],\n          origin: origin\n        });\n      }).to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"throws an exception","suites":["ol/tilegrid/TileGrid.js","create with too many tileSizes"],"updatePoint":{"line":133,"column":27,"index":4444},"line":133,"code":"    it('throws an exception', function () {\n      expect(function () {\n        return new TileGrid({\n          resolutions: [100, 50, 25, 10],\n          tileSizes: [tileSize, tileSize, tileSize, tileSize, tileSize],\n          origin: origin\n        });\n      }).to.throwException();\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the configured origin","suites":["ol/tilegrid/TileGrid.js","create with origin"],"updatePoint":{"line":152,"column":37,"index":4968},"line":152,"code":"    it('returns the configured origin', function () {\n      expect(tileGrid.getOrigin()).to.eql([10, 20]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns null for an unknown extent","suites":["ol/tilegrid/TileGrid.js","create with origin"],"updatePoint":{"line":155,"column":42,"index":5088},"line":155,"code":"    it('returns null for an unknown extent', function () {\n      expect(tileGrid.getExtent()).to.equal(null);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns null for an unknown full tile range","suites":["ol/tilegrid/TileGrid.js","create with origin"],"updatePoint":{"line":158,"column":51,"index":5215},"line":158,"code":"    it('returns null for an unknown full tile range', function () {\n      expect(tileGrid.getFullTileRange(0)).to.equal(null);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"assumes top left corner of extent as origin","suites":["ol/tilegrid/TileGrid.js","create with extent"],"updatePoint":{"line":171,"column":51,"index":5581},"line":171,"code":"    it('assumes top left corner of extent as origin', function () {\n      expect(tileGrid.getOrigin()).to.eql([10, 40]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"calculates full tile ranges from extent","suites":["ol/tilegrid/TileGrid.js","create with extent"],"updatePoint":{"line":174,"column":47,"index":5706},"line":174,"code":"    it('calculates full tile ranges from extent', function () {\n      const fullTileRange = tileGrid.getFullTileRange(0);\n      expect(fullTileRange.minX).to.equal(0);\n      expect(fullTileRange.maxX).to.equal(1);\n      expect(fullTileRange.minY).to.equal(0);\n      expect(fullTileRange.maxY).to.equal(1);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"calculates full tile ranges from sizes","suites":["ol/tilegrid/TileGrid.js","create with sizes"],"updatePoint":{"line":192,"column":46,"index":6266},"line":192,"code":"    it('calculates full tile ranges from sizes', function () {\n      const fullTileRange = tileGrid.getFullTileRange(0);\n      expect(fullTileRange.minX).to.equal(0);\n      expect(fullTileRange.maxX).to.equal(2);\n      expect(fullTileRange.minY).to.equal(0);\n      expect(fullTileRange.maxY).to.equal(2);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the configured extent","suites":["ol/tilegrid/TileGrid.js","create with extent and sizes"],"updatePoint":{"line":210,"column":37,"index":6836},"line":210,"code":"    it('returns the configured extent', function () {\n      expect(tileGrid.getExtent()).to.eql([10, 20, 30, 40]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"calculates full tile ranges from sizes, further limited by extent","suites":["ol/tilegrid/TileGrid.js","create with extent and sizes"],"updatePoint":{"line":213,"column":73,"index":6995},"line":213,"code":"    it('calculates full tile ranges from sizes, further limited by extent', function () {\n      const fullTileRange = tileGrid.getFullTileRange(0);\n      expect(fullTileRange.minX).to.equal(0);\n      expect(fullTileRange.maxX).to.equal(1);\n      expect(fullTileRange.minY).to.equal(0);\n      expect(fullTileRange.maxY).to.equal(1);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"calculates full tile ranges from extent","suites":["ol/tilegrid/TileGrid.js","create with extent"],"updatePoint":{"line":230,"column":47,"index":7540},"line":230,"code":"    it('calculates full tile ranges from extent', function () {\n      const fullTileRange = tileGrid.getFullTileRange(0);\n      expect(fullTileRange.minX).to.equal(0);\n      expect(fullTileRange.maxX).to.equal(1);\n      expect(fullTileRange.minY).to.equal(0);\n      expect(fullTileRange.maxY).to.equal(1);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"calculates correct minY and maxY for positive heights","suites":["ol/tilegrid/TileGrid.js","create with top-left origin and sizes"],"updatePoint":{"line":248,"column":61,"index":8135},"line":248,"code":"    it('calculates correct minY and maxY for positive heights', function () {\n      const fullTileRange = tileGrid.getFullTileRange(0);\n      expect(fullTileRange.minY).to.equal(0);\n      expect(fullTileRange.maxY).to.equal(2);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"calculates correct minX and maxX for negative heights","suites":["ol/tilegrid/TileGrid.js","create with bottom-left origin and sizes"],"updatePoint":{"line":264,"column":61,"index":8642},"line":264,"code":"    it('calculates correct minX and maxX for negative heights', function () {\n      const fullTileRange = tileGrid.getFullTileRange(0);\n      expect(fullTileRange.minY).to.equal(-3);\n      expect(fullTileRange.maxY).to.equal(-1);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"uses both origin and extent","suites":["ol/tilegrid/TileGrid.js","create with extent and origin"],"updatePoint":{"line":271,"column":35,"index":8918},"line":271,"code":"    it('uses both origin and extent', function () {\n      const tileGrid = new TileGrid({\n        origin: [0, 0],\n        extent: [10, 20, 30, 40],\n        tileSize: 10,\n        resolutions: [1]\n      });\n      expect(tileGrid.getOrigin()).to.eql([0, 0]);\n      expect(tileGrid.getExtent()).to.eql([10, 20, 30, 40]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"creates correct tile ranges","suites":["ol/tilegrid/TileGrid.js","create with complex configuration"],"updatePoint":{"line":292,"column":35,"index":9724},"line":292,"code":"    it('creates correct tile ranges', function () {\n      const tileRanges = [{\n        minX: 0,\n        maxX: 0,\n        minY: 0,\n        maxY: 1\n      }, {\n        minX: 0,\n        maxX: 1,\n        minY: 0,\n        maxY: 3\n      }, {\n        minX: 0,\n        maxX: 1,\n        minY: 0,\n        maxY: 3\n      }, {\n        minX: 0,\n        maxX: 10,\n        minY: 0,\n        maxY: 15\n      }];\n      for (let z = 0; z <= 3; ++z) {\n        const zTileRange = tileGrid.getFullTileRange(z);\n        for (const property in tileRanges[z]) {\n          expect(zTileRange[property]).to.be(tileRanges[z][property]);\n        }\n      }\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns correct withinExtentAndZ results with containsXY","suites":["ol/tilegrid/TileGrid.js","create with complex configuration"],"updatePoint":{"line":321,"column":64,"index":10385},"line":321,"code":"    it('returns correct withinExtentAndZ results with containsXY', function () {\n      const outOfRangeTileCoords = [[1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3]];\n      outOfRangeTileCoords.forEach(function (tileCoord) {\n        const tileRange = tileGrid.getFullTileRange(tileCoord[0]);\n        expect(tileRange.containsXY(tileCoord[1], tileCoord[2])).to.be(false);\n      });\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"allows creation of tile grid from extent","suites":["ol/tilegrid/TileGrid.js","createForExtent"],"updatePoint":{"line":330,"column":48,"index":10803},"line":330,"code":"    it('allows creation of tile grid from extent', function () {\n      const extent = createOrUpdate(-100, -100, 100, 100);\n      const grid = createForExtent(extent);\n      expect(grid).to.be.a(TileGrid);\n      const resolutions = grid.getResolutions();\n      expect(resolutions.length).to.be(DEFAULT_MAX_ZOOM + 1);\n      expect(grid.getOrigin()).to.eql([-100, 100]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"is set for a consistent zoom factor","suites":["ol/tilegrid/TileGrid.js","#zoomFactor_"],"updatePoint":{"line":340,"column":43,"index":11222},"line":340,"code":"    it('is set for a consistent zoom factor', function () {\n      const grid = new TileGrid({\n        resolutions: [10, 5, 2.5, 1.25],\n        origin: origin,\n        tileSize: tileSize\n      });\n      expect(grid.zoomFactor_).to.be(2);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"is not set for an inconsistent zoom factor","suites":["ol/tilegrid/TileGrid.js","#zoomFactor_"],"updatePoint":{"line":348,"column":50,"index":11474},"line":348,"code":"    it('is not set for an inconsistent zoom factor', function () {\n      const grid = new TileGrid({\n        resolutions: [10, 5, 3, 1.25],\n        origin: origin,\n        tileSize: tileSize\n      });\n      expect(grid.zoomFactor_).to.be(undefined);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"allows easier creation of a tile grid","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":358,"column":45,"index":11781},"line":358,"code":"    it('allows easier creation of a tile grid', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = createForProjection(projection);\n      expect(grid).to.be.a(TileGrid);\n      const resolutions = grid.getResolutions();\n      expect(resolutions.length).to.be(DEFAULT_MAX_ZOOM + 1);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"accepts a number of zoom levels","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":365,"column":39,"index":12099},"line":365,"code":"    it('accepts a number of zoom levels', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = createForProjection(projection, 18);\n      expect(grid).to.be.a(TileGrid);\n      const resolutions = grid.getResolutions();\n      expect(resolutions.length).to.be(19);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"accepts a big number of zoom levels","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":372,"column":43,"index":12407},"line":372,"code":"    it('accepts a big number of zoom levels', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = createForProjection(projection, 23);\n      expect(grid).to.be.a(TileGrid);\n      const resolutions = grid.getResolutions();\n      expect(resolutions.length).to.be(24);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"works for projections unknown to the client","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":379,"column":51,"index":12723},"line":379,"code":"    it('works for projections unknown to the client', function () {\n      const projection = new Projection({\n        code: 'EPSG:31287',\n        units: 'm'\n      });\n      const grid = createForProjection(projection);\n      const resolutions = grid.getResolutions();\n      expect(resolutions[5]).to.be(360 * METERS_PER_UNIT.degrees / DEFAULT_TILE_SIZE / Math.pow(2, 5));\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"assumes origin is top-left","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":388,"column":34,"index":13086},"line":388,"code":"    it('assumes origin is top-left', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = createForProjection(projection);\n      const origin = grid.getOrigin();\n      const half = HALF_SIZE;\n      expect(origin).to.eql([-half, half]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"accepts bottom-left as corner","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":395,"column":37,"index":13366},"line":395,"code":"    it('accepts bottom-left as corner', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = createForProjection(projection, undefined, undefined, 'bottom-left');\n      const origin = grid.getOrigin();\n      const half = HALF_SIZE;\n      expect(origin).to.eql([-half, -half]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"accepts bottom-right as corner","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":402,"column":38,"index":13685},"line":402,"code":"    it('accepts bottom-right as corner', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = createForProjection(projection, undefined, undefined, 'bottom-right');\n      const origin = grid.getOrigin();\n      const half = HALF_SIZE;\n      expect(origin).to.eql([half, -half]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"accepts top-left as corner","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":409,"column":34,"index":14000},"line":409,"code":"    it('accepts top-left as corner', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = createForProjection(projection, undefined, undefined, 'top-left');\n      const origin = grid.getOrigin();\n      const half = HALF_SIZE;\n      expect(origin).to.eql([-half, half]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"accepts top-right as corner","suites":["ol/tilegrid/TileGrid.js","createForProjection"],"updatePoint":{"line":416,"column":35,"index":14312},"line":416,"code":"    it('accepts top-right as corner', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = createForProjection(projection, undefined, undefined, 'top-right');\n      const origin = grid.getOrigin();\n      const half = HALF_SIZE;\n      expect(origin).to.eql([half, half]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"uses defaults","suites":["ol/tilegrid/TileGrid.js","createXYZ()"],"updatePoint":{"line":425,"column":21,"index":14656},"line":425,"code":"    it('uses defaults', function () {\n      const tileGrid = createXYZ();\n      expect(tileGrid.getExtent()).to.eql(getProjection('EPSG:3857').getExtent());\n      expect(tileGrid.getMinZoom()).to.equal(0);\n      expect(tileGrid.getMaxZoom()).to.equal(DEFAULT_MAX_ZOOM);\n      expect(tileGrid.getTileSize()).to.equal(DEFAULT_TILE_SIZE);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"respects configuration options","suites":["ol/tilegrid/TileGrid.js","createXYZ()"],"updatePoint":{"line":432,"column":38,"index":15017},"line":432,"code":"    it('respects configuration options', function () {\n      const tileGrid = createXYZ({\n        extent: [10, 20, 30, 40],\n        maxResolution: 10 / 128,\n        minZoom: 1,\n        maxZoom: 2,\n        tileSize: 128\n      });\n      expect(tileGrid.getExtent()).to.eql([10, 20, 30, 40]);\n      expect(tileGrid.getResolutions()).to.eql([10 / 128, 5 / 128, 2.5 / 128]);\n      expect(tileGrid.getMinZoom()).to.equal(1);\n      expect(tileGrid.getMaxZoom()).to.equal(2);\n      expect(tileGrid.getTileSize()).to.equal(128);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"gets the default tile grid for a projection","suites":["ol/tilegrid/TileGrid.js","getForProjection"],"updatePoint":{"line":448,"column":51,"index":15609},"line":448,"code":"    it('gets the default tile grid for a projection', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = getTileGridForProjection(projection);\n      expect(grid).to.be.a(TileGrid);\n      const resolutions = grid.getResolutions();\n      expect(resolutions.length).to.be(DEFAULT_MAX_ZOOM + 1);\n      expect(grid.getTileSize()).to.eql(256);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"stores the default tile grid on a projection","suites":["ol/tilegrid/TileGrid.js","getForProjection"],"updatePoint":{"line":456,"column":52,"index":15991},"line":456,"code":"    it('stores the default tile grid on a projection', function () {\n      const projection = getProjection('EPSG:3857');\n      const grid = getTileGridForProjection(projection);\n      const gridAgain = getTileGridForProjection(projection);\n      expect(grid).to.be(gridAgain);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the tile range for one zoom level deeper","suites":["ol/tilegrid/TileGrid.js","#getTileCoordChildTileRange()"],"updatePoint":{"line":468,"column":56,"index":16478},"line":468,"code":"    it('returns the tile range for one zoom level deeper', function () {\n      let range;\n      range = tileGrid.getTileCoordChildTileRange([0, 0, 0]);\n      expect(range.minX).to.be(0);\n      expect(range.maxX).to.be(1);\n      expect(range.minY).to.be(0);\n      expect(range.maxY).to.be(1);\n      range = tileGrid.getTileCoordChildTileRange([0, 1, 0]);\n      expect(range.minX).to.be(2);\n      expect(range.maxX).to.be(3);\n      expect(range.minY).to.be(0);\n      expect(range.maxY).to.be(1);\n      range = tileGrid.getTileCoordChildTileRange([0, 0, 1]);\n      expect(range.minX).to.be(0);\n      expect(range.maxX).to.be(1);\n      expect(range.minY).to.be(2);\n      expect(range.maxY).to.be(3);\n      range = tileGrid.getTileCoordChildTileRange([0, -1, 0]);\n      expect(range.minX).to.be(-2);\n      expect(range.maxX).to.be(-1);\n      expect(range.minY).to.be(0);\n      expect(range.maxY).to.be(1);\n      range = tileGrid.getTileCoordChildTileRange([0, 0, -1]);\n      expect(range.minX).to.be(0);\n      expect(range.maxX).to.be(1);\n      expect(range.minY).to.be(-2);\n      expect(range.maxY).to.be(-1);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns null for z > maxZoom","suites":["ol/tilegrid/TileGrid.js","#getTileCoordChildTileRange()"],"updatePoint":{"line":496,"column":36,"index":17572},"line":496,"code":"    it('returns null for z > maxZoom', function () {\n      const max = tileGrid.maxZoom;\n      const range = tileGrid.getTileCoordChildTileRange([max + 1, 0, 0]);\n      expect(range).to.be(null);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"iterates as expected","suites":["ol/tilegrid/TileGrid.js","#forEachTileCoordParentTileRange()"],"updatePoint":{"line":507,"column":28,"index":17970},"line":507,"code":"    it('iterates as expected', function () {\n      const tileCoord = [5, 11, 21];\n      const zs = [];\n      const tileRanges = [];\n      tileGrid.forEachTileCoordParentTileRange(tileCoord, function (z, tileRange) {\n        zs.push(z);\n        tileRanges.push(new TileRange(tileRange.minX, tileRange.maxX, tileRange.minY, tileRange.maxY));\n        return false;\n      });\n      expect(zs.length).to.eql(5);\n      expect(tileRanges.length).to.eql(5);\n      expect(zs[0]).to.eql(4);\n      expect(tileRanges[0].minX).to.eql(5);\n      expect(tileRanges[0].maxX).to.eql(5);\n      expect(tileRanges[0].minY).to.eql(10);\n      expect(tileRanges[0].maxY).to.eql(10);\n      expect(zs[1]).to.eql(3);\n      expect(tileRanges[1].minX).to.eql(2);\n      expect(tileRanges[1].maxX).to.eql(2);\n      expect(tileRanges[1].minY).to.eql(5);\n      expect(tileRanges[1].maxY).to.eql(5);\n      expect(zs[2]).to.eql(2);\n      expect(tileRanges[2].minX).to.eql(1);\n      expect(tileRanges[2].maxX).to.eql(1);\n      expect(tileRanges[2].minY).to.eql(2);\n      expect(tileRanges[2].maxY).to.eql(2);\n      expect(zs[3]).to.eql(1);\n      expect(tileRanges[3].minX).to.eql(0);\n      expect(tileRanges[3].maxX).to.eql(0);\n      expect(tileRanges[3].minY).to.eql(1);\n      expect(tileRanges[3].maxY).to.eql(1);\n      expect(zs[4]).to.eql(0);\n      expect(tileRanges[4].minX).to.eql(0);\n      expect(tileRanges[4].maxX).to.eql(0);\n      expect(tileRanges[4].minY).to.eql(0);\n      expect(tileRanges[4].maxY).to.eql(0);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the correct resolution at the equator","suites":["ol/tilegrid/TileGrid.js","getResolution"],"updatePoint":{"line":550,"column":53,"index":19671},"line":550,"code":"    it('returns the correct resolution at the equator', function () {\n      // @see https://docs.microsoft.com/en-us/bingmaps/articles/understanding-scale-and-resolution\n      expect(tileGrid.getResolution(0)).to.roughlyEqual(156543.04, 1e-2);\n      expect(tileGrid.getResolution(1)).to.roughlyEqual(78271.52, 1e-2);\n      expect(tileGrid.getResolution(2)).to.roughlyEqual(39135.76, 1e-2);\n      expect(tileGrid.getResolution(3)).to.roughlyEqual(19567.88, 1e-2);\n      expect(tileGrid.getResolution(4)).to.roughlyEqual(9783.94, 1e-2);\n      expect(tileGrid.getResolution(5)).to.roughlyEqual(4891.97, 1e-2);\n      expect(tileGrid.getResolution(6)).to.roughlyEqual(2445.98, 1e-2);\n      expect(tileGrid.getResolution(7)).to.roughlyEqual(1222.99, 1e-2);\n      expect(tileGrid.getResolution(8)).to.roughlyEqual(611.5, 1e-2);\n      expect(tileGrid.getResolution(9)).to.roughlyEqual(305.75, 1e-2);\n      expect(tileGrid.getResolution(10)).to.roughlyEqual(152.87, 1e-2);\n      expect(tileGrid.getResolution(11)).to.roughlyEqual(76.44, 1e-2);\n      expect(tileGrid.getResolution(12)).to.roughlyEqual(38.22, 1e-2);\n      expect(tileGrid.getResolution(13)).to.roughlyEqual(19.11, 1e-2);\n      expect(tileGrid.getResolution(14)).to.roughlyEqual(9.55, 1e-2);\n      expect(tileGrid.getResolution(15)).to.roughlyEqual(4.78, 1e-2);\n      expect(tileGrid.getResolution(16)).to.roughlyEqual(2.39, 1e-2);\n      expect(tileGrid.getResolution(17)).to.roughlyEqual(1.19, 1e-2);\n      expect(tileGrid.getResolution(18)).to.roughlyEqual(0.6, 1e-2);\n      expect(tileGrid.getResolution(19)).to.roughlyEqual(0.3, 1e-2);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected TileCoord","suites":["ol/tilegrid/TileGrid.js","#getTileCoordFromCoordAndZ()","Y North, X East"],"updatePoint":{"line":576,"column":40,"index":21370},"line":576,"code":"      it('returns the expected TileCoord', function () {\n        origin = [0, 0];\n        const tileGrid = new TileGrid({\n          resolutions: resolutions,\n          origin: origin,\n          tileSize: tileSize\n        });\n        let tileCoord;\n        tileCoord = tileGrid.getTileCoordForCoordAndZ([0, 0], 3);\n        expect(tileCoord[0]).to.eql(3);\n        expect(tileCoord[1]).to.eql(0);\n        expect(tileCoord[2]).to.eql(0);\n        tileCoord = tileGrid.getTileCoordForCoordAndZ([0, 100000], 3);\n        expect(tileCoord[0]).to.eql(3);\n        expect(tileCoord[1]).to.eql(0);\n        expect(tileCoord[2]).to.eql(-10);\n        tileCoord = tileGrid.getTileCoordForCoordAndZ([100000, 0], 3);\n        expect(tileCoord[0]).to.eql(3);\n        expect(tileCoord[1]).to.eql(10);\n        expect(tileCoord[2]).to.eql(0);\n        tileCoord = tileGrid.getTileCoordForCoordAndZ([100000, 100000], 3);\n        expect(tileCoord[0]).to.eql(3);\n        expect(tileCoord[1]).to.eql(10);\n        expect(tileCoord[2]).to.eql(-10);\n      });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected TileCoord","suites":["ol/tilegrid/TileGrid.js","#getTileCoordFromCoordAndZ()","Y South, X East"],"updatePoint":{"line":603,"column":40,"index":22452},"line":603,"code":"      it('returns the expected TileCoord', function () {\n        origin = [0, 100000];\n        const tileGrid = new TileGrid({\n          resolutions: resolutions,\n          origin: origin,\n          tileSize: tileSize\n        });\n        let tileCoord;\n        tileCoord = tileGrid.getTileCoordForCoordAndZ([0, 0], 3);\n        expect(tileCoord[0]).to.eql(3);\n        expect(tileCoord[1]).to.eql(0);\n        expect(tileCoord[2]).to.eql(10);\n        tileCoord = tileGrid.getTileCoordForCoordAndZ([0, 100000], 3);\n        expect(tileCoord[0]).to.eql(3);\n        expect(tileCoord[1]).to.eql(0);\n        expect(tileCoord[2]).to.eql(0);\n        tileCoord = tileGrid.getTileCoordForCoordAndZ([100000, 0], 3);\n        expect(tileCoord[0]).to.eql(3);\n        expect(tileCoord[1]).to.eql(10);\n        expect(tileCoord[2]).to.eql(10);\n        tileCoord = tileGrid.getTileCoordForCoordAndZ([100000, 100000], 3);\n        expect(tileCoord[0]).to.eql(3);\n        expect(tileCoord[1]).to.eql(10);\n        expect(tileCoord[2]).to.eql(0);\n      });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected TileCoord","suites":["ol/tilegrid/TileGrid.js","getTileCoordForCoordAndResolution"],"updatePoint":{"line":631,"column":38,"index":23557},"line":631,"code":"    it('returns the expected TileCoord', function () {\n      const tileSize = 256;\n      const tileGrid = new TileGrid({\n        resolutions: [10],\n        origin: origin,\n        tileSize: tileSize\n      });\n      let coordinate;\n      let tileCoord;\n\n      // gets the first tile at the origin\n      coordinate = [0, 0];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(0);\n      expect(tileCoord[2]).to.eql(0);\n\n      // gets one tile northwest of the origin\n      coordinate = [-1280, 1280];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(-1);\n      expect(tileCoord[2]).to.eql(-1);\n\n      // gets one tile northeast of the origin\n      coordinate = [1280, 1280];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(0);\n      expect(tileCoord[2]).to.eql(-1);\n\n      // gets one tile southeast of the origin\n      coordinate = [1280, -1280];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(0);\n      expect(tileCoord[2]).to.eql(0);\n\n      // gets one tile southwest of the origin\n      coordinate = [-1280, -1280];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(-1);\n      expect(tileCoord[2]).to.eql(0);\n\n      // gets the tile to the east when on the edge\n      coordinate = [2560, -1280];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(1);\n      expect(tileCoord[2]).to.eql(0);\n\n      // gets the tile to the south when on the edge\n      coordinate = [1280, -2560];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(0);\n      expect(tileCoord[2]).to.eql(1);\n\n      // pixels are top aligned to the origin\n      coordinate = [1280, -2549.999];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(0);\n      expect(tileCoord[2]).to.eql(0);\n\n      // pixels are left aligned to the origin\n      coordinate = [2549.999, -1280];\n      tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, 10);\n      expect(tileCoord[0]).to.eql(0);\n      expect(tileCoord[1]).to.eql(0);\n      expect(tileCoord[2]).to.eql(0);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns higher tile coord for intersections by default","suites":["ol/tilegrid/TileGrid.js","getTileCoordForXYAndResolution_"],"updatePoint":{"line":706,"column":62,"index":26384},"line":706,"code":"    it('returns higher tile coord for intersections by default', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      let tileCoord;\n\n      // gets higher tile for edge intersection\n      tileCoord = tileGrid.getTileCoordForXYAndResolution_(0, 0, 100, false);\n      expect(tileCoord[0]).to.eql(3);\n      expect(tileCoord[1]).to.eql(0);\n      expect(tileCoord[2]).to.eql(0);\n\n      // gets higher tile for edge intersection\n      tileCoord = tileGrid.getTileCoordForXYAndResolution_(100000, 100000, 100, false);\n      expect(tileCoord[0]).to.eql(3);\n      expect(tileCoord[1]).to.eql(10);\n      expect(tileCoord[2]).to.eql(-10);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"handles alt intersection policy","suites":["ol/tilegrid/TileGrid.js","getTileCoordForXYAndResolution_"],"updatePoint":{"line":726,"column":39,"index":27097},"line":726,"code":"    it('handles alt intersection policy', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      let tileCoord;\n\n      // can get lower tile for edge intersection\n      tileCoord = tileGrid.getTileCoordForXYAndResolution_(0, 0, 100, true);\n      expect(tileCoord[0]).to.eql(3);\n      expect(tileCoord[1]).to.eql(-1);\n      expect(tileCoord[2]).to.eql(-1);\n\n      // can get lower tile for edge intersection\n      tileCoord = tileGrid.getTileCoordForXYAndResolution_(100000, 100000, 100, true);\n      expect(tileCoord[0]).to.eql(3);\n      expect(tileCoord[1]).to.eql(9);\n      expect(tileCoord[2]).to.eql(-11);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected center","suites":["ol/tilegrid/TileGrid.js","getTileCoordCenter"],"updatePoint":{"line":748,"column":35,"index":27862},"line":748,"code":"    it('returns the expected center', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      let center;\n      center = tileGrid.getTileCoordCenter([0, 0, 0]);\n      expect(center[0]).to.eql(50000);\n      expect(center[1]).to.eql(-50000);\n      center = tileGrid.getTileCoordCenter([3, 0, 0]);\n      expect(center[0]).to.eql(5000);\n      expect(center[1]).to.eql(-5000);\n      center = tileGrid.getTileCoordCenter([3, 9, 9]);\n      expect(center[0]).to.eql(95000);\n      expect(center[1]).to.eql(-95000);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected extend","suites":["ol/tilegrid/TileGrid.js","getTileCoordExtent"],"updatePoint":{"line":767,"column":35,"index":28526},"line":767,"code":"    it('returns the expected extend', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      let tileCoordExtent;\n      tileCoordExtent = tileGrid.getTileCoordExtent([0, 0, 0]);\n      expect(tileCoordExtent[0]).to.eql(0);\n      expect(tileCoordExtent[1]).to.eql(-100000);\n      expect(tileCoordExtent[2]).to.eql(100000);\n      expect(tileCoordExtent[3]).to.eql(0);\n      tileCoordExtent = tileGrid.getTileCoordExtent([3, 9, 0]);\n      expect(tileCoordExtent[0]).to.eql(90000);\n      expect(tileCoordExtent[1]).to.eql(-10000);\n      expect(tileCoordExtent[2]).to.eql(100000);\n      expect(tileCoordExtent[3]).to.eql(0);\n      tileCoordExtent = tileGrid.getTileCoordExtent([3, 0, 9]);\n      expect(tileCoordExtent[0]).to.eql(0);\n      expect(tileCoordExtent[1]).to.eql(-100000);\n      expect(tileCoordExtent[2]).to.eql(10000);\n      expect(tileCoordExtent[3]).to.eql(-90000);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"includes a tile even if a fraction of a pixel is covered","suites":["ol/tilegrid/TileGrid.js","getTileRangeForExtentAndZ"],"updatePoint":{"line":792,"column":64,"index":29595},"line":792,"code":"    it('includes a tile even if a fraction of a pixel is covered', function () {\n      const tileGrid = new TileGrid({\n        resolutions: [1],\n        origin: [0, 10],\n        tileSize: 10\n      });\n      let tileRange;\n\n      // overlaps to the right\n      tileRange = tileGrid.getTileRangeForExtentAndZ([0, 0, 10.1, 10], 0);\n      expect(tileRange.minX).to.be(0);\n      expect(tileRange.maxX).to.be(1);\n      expect(tileRange.minY).to.be(0);\n      expect(tileRange.maxY).to.be(0);\n\n      // overlaps to the bottom\n      tileRange = tileGrid.getTileRangeForExtentAndZ([0, -0.1, 10, 10], 0);\n      expect(tileRange.minX).to.be(0);\n      expect(tileRange.maxX).to.be(0);\n      expect(tileRange.minY).to.be(0);\n      expect(tileRange.maxY).to.be(1);\n\n      // overlaps to the left\n      tileRange = tileGrid.getTileRangeForExtentAndZ([-0.1, 0, 10, 10], 0);\n      expect(tileRange.minX).to.be(-1);\n      expect(tileRange.maxX).to.be(0);\n      expect(tileRange.minY).to.be(0);\n      expect(tileRange.maxY).to.be(0);\n\n      // overlaps to the top\n      tileRange = tileGrid.getTileRangeForExtentAndZ([0, 0, 10, 10.1], 0);\n      expect(tileRange.minX).to.be(0);\n      expect(tileRange.maxX).to.be(0);\n      expect(tileRange.minY).to.be(-1);\n      expect(tileRange.maxY).to.be(0);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected TileRange","suites":["ol/tilegrid/TileGrid.js","getTileRangeForExtentAndZ"],"updatePoint":{"line":828,"column":38,"index":30853},"line":828,"code":"    it('returns the expected TileRange', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      const e = [45000, 5000, 55000, 15000];\n      let tileRange;\n      tileRange = tileGrid.getTileRangeForExtentAndZ(e, 0);\n      expect(tileRange.minY).to.eql(-1);\n      expect(tileRange.minX).to.eql(0);\n      expect(tileRange.maxX).to.eql(0);\n      expect(tileRange.maxY).to.eql(-1);\n      tileRange = tileGrid.getTileRangeForExtentAndZ(e, 1);\n      expect(tileRange.minX).to.eql(0);\n      expect(tileRange.minY).to.eql(-1);\n      expect(tileRange.maxX).to.eql(1);\n      expect(tileRange.maxY).to.eql(-1);\n      tileRange = tileGrid.getTileRangeForExtentAndZ(e, 2);\n      expect(tileRange.minX).to.eql(1);\n      expect(tileRange.minY).to.eql(-1);\n      expect(tileRange.maxX).to.eql(2);\n      expect(tileRange.maxY).to.eql(-1);\n      tileRange = tileGrid.getTileRangeForExtentAndZ(e, 3);\n      expect(tileRange.minX).to.eql(4);\n      expect(tileRange.minY).to.eql(-2);\n      expect(tileRange.maxX).to.eql(5);\n      expect(tileRange.maxY).to.eql(-1);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"works with one tile size as number","suites":["ol/tilegrid/TileGrid.js","getTileSize"],"updatePoint":{"line":861,"column":42,"index":32127},"line":861,"code":"    it('works with one tile size as number', function () {\n      const tileGrid = new TileGrid({\n        tileSize: 256,\n        resolutions: resolutions,\n        origin: origin\n      });\n      expect(tileGrid.getTileSize(0)).to.equal(256);\n      expect(tileGrid.getTileSize(3)).to.equal(256);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"works with one tile size as array","suites":["ol/tilegrid/TileGrid.js","getTileSize"],"updatePoint":{"line":870,"column":41,"index":32427},"line":870,"code":"    it('works with one tile size as array', function () {\n      const tileGrid = new TileGrid({\n        tileSize: [512, 256],\n        resolutions: resolutions,\n        origin: origin\n      });\n      expect(tileGrid.getTileSize(0)).to.eql([512, 256]);\n      expect(tileGrid.getTileSize(3)).to.eql([512, 256]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"works with multiple tile sizes as number","suites":["ol/tilegrid/TileGrid.js","getTileSize"],"updatePoint":{"line":879,"column":48,"index":32751},"line":879,"code":"    it('works with multiple tile sizes as number', function () {\n      const tileGrid = new TileGrid({\n        tileSizes: [256, 256, 256, 512],\n        resolutions: resolutions,\n        origin: origin\n      });\n      expect(tileGrid.getTileSize(0)).to.equal(256);\n      expect(tileGrid.getTileSize(3)).to.equal(512);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"works with multiple tile sizes as array","suites":["ol/tilegrid/TileGrid.js","getTileSize"],"updatePoint":{"line":888,"column":47,"index":33075},"line":888,"code":"    it('works with multiple tile sizes as array', function () {\n      const tileGrid = new TileGrid({\n        tileSizes: [[512, 256], [512, 256], [512, 256], [640, 320]],\n        resolutions: resolutions,\n        origin: origin\n      });\n      expect(tileGrid.getTileSize(0)).to.eql([512, 256]);\n      expect(tileGrid.getTileSize(3)).to.eql([640, 320]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"calls the provided function with each tile coordinate","suites":["ol/tilegrid/TileGrid.js","forEachTileCoord"],"updatePoint":{"line":899,"column":61,"index":33502},"line":899,"code":"    it('calls the provided function with each tile coordinate', function () {\n      const tileGrid = createXYZ({\n        extent: [-180, -90, 180, 90]\n      });\n      const tileCoords = [];\n      tileGrid.forEachTileCoord([15, 47, 16, 48], 8, function (tileCoord) {\n        tileCoords.push(tileCoord);\n      });\n      expect(tileCoords).to.eql([[8, 138, 29], [8, 138, 30], [8, 139, 29], [8, 139, 30]]);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"iterates as expected","suites":["ol/tilegrid/TileGrid.js","forEachTileCoordParentTileRange"],"updatePoint":{"line":911,"column":28,"index":33945},"line":911,"code":"    it('iterates as expected', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      const zs = [];\n      const tileRanges = [];\n      tileGrid.forEachTileCoordParentTileRange([3, 7, 3], function (z, tileRange) {\n        zs.push(z);\n        tileRanges.push(tileRange);\n        return false;\n      });\n      expect(zs.length).to.eql(3);\n      expect(tileRanges.length).to.eql(3);\n      expect(zs[0]).to.eql(2);\n      expect(tileRanges[0].minX).to.eql(2);\n      expect(tileRanges[0].minY).to.eql(1);\n      expect(tileRanges[0].maxX).to.eql(3);\n      expect(tileRanges[0].maxY).to.eql(1);\n      expect(zs[1]).to.eql(1);\n      expect(tileRanges[1].minX).to.eql(1);\n      expect(tileRanges[1].minY).to.eql(0);\n      expect(tileRanges[1].maxX).to.eql(1);\n      expect(tileRanges[1].maxY).to.eql(0);\n      expect(zs[2]).to.eql(0);\n      expect(tileRanges[2].minX).to.eql(0);\n      expect(tileRanges[2].minY).to.eql(0);\n      expect(tileRanges[2].maxX).to.eql(0);\n      expect(tileRanges[2].maxY).to.eql(0);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected z value","suites":["ol/tilegrid/TileGrid.js","getZForResolution (exact)"],"updatePoint":{"line":944,"column":36,"index":35120},"line":944,"code":"    it('returns the expected z value', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      expect(tileGrid.getZForResolution(1000)).to.eql(0);\n      expect(tileGrid.getZForResolution(500)).to.eql(1);\n      expect(tileGrid.getZForResolution(250)).to.eql(2);\n      expect(tileGrid.getZForResolution(100)).to.eql(3);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected z value","suites":["ol/tilegrid/TileGrid.js","getZForResolution (approximate)"],"updatePoint":{"line":957,"column":36,"index":35609},"line":957,"code":"    it('returns the expected z value', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      expect(tileGrid.getZForResolution(2000)).to.eql(0);\n      expect(tileGrid.getZForResolution(1000)).to.eql(0);\n      expect(tileGrid.getZForResolution(900)).to.eql(0);\n      expect(tileGrid.getZForResolution(750)).to.eql(1);\n      expect(tileGrid.getZForResolution(625)).to.eql(1);\n      expect(tileGrid.getZForResolution(500)).to.eql(1);\n      expect(tileGrid.getZForResolution(475)).to.eql(1);\n      expect(tileGrid.getZForResolution(375)).to.eql(2);\n      expect(tileGrid.getZForResolution(250)).to.eql(2);\n      expect(tileGrid.getZForResolution(200)).to.eql(2);\n      expect(tileGrid.getZForResolution(125)).to.eql(3);\n      expect(tileGrid.getZForResolution(100)).to.eql(3);\n      expect(tileGrid.getZForResolution(50)).to.eql(3);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected z value","suites":["ol/tilegrid/TileGrid.js","getZForResolution (lower)"],"updatePoint":{"line":979,"column":36,"index":36605},"line":979,"code":"    it('returns the expected z value', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      expect(tileGrid.getZForResolution(2000, 1)).to.eql(0);\n      expect(tileGrid.getZForResolution(1000, 1)).to.eql(0);\n      expect(tileGrid.getZForResolution(900, 1)).to.eql(0);\n      expect(tileGrid.getZForResolution(750, 1)).to.eql(0);\n      expect(tileGrid.getZForResolution(625, 1)).to.eql(0);\n      expect(tileGrid.getZForResolution(500, 1)).to.eql(1);\n      expect(tileGrid.getZForResolution(475, 1)).to.eql(1);\n      expect(tileGrid.getZForResolution(375, 1)).to.eql(1);\n      expect(tileGrid.getZForResolution(250, 1)).to.eql(2);\n      expect(tileGrid.getZForResolution(200, 1)).to.eql(2);\n      expect(tileGrid.getZForResolution(125, 1)).to.eql(2);\n      expect(tileGrid.getZForResolution(100, 1)).to.eql(3);\n      expect(tileGrid.getZForResolution(50, 1)).to.eql(3);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected z value","suites":["ol/tilegrid/TileGrid.js","getZForResolution (higher)"],"updatePoint":{"line":1001,"column":36,"index":37641},"line":1001,"code":"    it('returns the expected z value', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      expect(tileGrid.getZForResolution(2000, -1)).to.eql(0);\n      expect(tileGrid.getZForResolution(1000, -1)).to.eql(0);\n      expect(tileGrid.getZForResolution(900, -1)).to.eql(1);\n      expect(tileGrid.getZForResolution(750, -1)).to.eql(1);\n      expect(tileGrid.getZForResolution(625, -1)).to.eql(1);\n      expect(tileGrid.getZForResolution(500, -1)).to.eql(1);\n      expect(tileGrid.getZForResolution(475, -1)).to.eql(2);\n      expect(tileGrid.getZForResolution(375, -1)).to.eql(2);\n      expect(tileGrid.getZForResolution(250, -1)).to.eql(2);\n      expect(tileGrid.getZForResolution(200, -1)).to.eql(3);\n      expect(tileGrid.getZForResolution(125, -1)).to.eql(3);\n      expect(tileGrid.getZForResolution(100, -1)).to.eql(3);\n      expect(tileGrid.getZForResolution(50, -1)).to.eql(3);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"returns the expected z value","suites":["ol/tilegrid/TileGrid.js","getZForResolution (NearestDirectionFunction)"],"updatePoint":{"line":1023,"column":36,"index":38708},"line":1023,"code":"    it('returns the expected z value', function () {\n      const tileGrid = new TileGrid({\n        resolutions: resolutions,\n        origin: origin,\n        tileSize: tileSize\n      });\n      expect(tileGrid.getZForResolution(626, function (value, high, low) {\n        return value - (low + (high - low) * 0.25);\n      })).to.eql(0);\n      expect(tileGrid.getZForResolution(625, function (value, high, low) {\n        return value - (low + (high - low) * 0.25);\n      })).to.eql(1);\n      expect(tileGrid.getZForResolution(476, function (value, high, low) {\n        return value - (low + (high - low) * 0.9);\n      })).to.eql(1);\n      expect(tileGrid.getZForResolution(475, function (value, high, low) {\n        return value - (low + (high - low) * 0.9);\n      })).to.eql(2);\n      expect(tileGrid.getZForResolution(201, function (value, high, low) {\n        return value - (low + (high - low) * 0.666666667);\n      })).to.eql(2);\n      expect(tileGrid.getZForResolution(200, function (value, high, low) {\n        return value - (low + (high - low) * 0.666666667);\n      })).to.eql(3);\n      expect(tileGrid.getZForResolution(126, function (value, high, low) {\n        return value - (low + (high - low) * 0.166666667);\n      })).to.eql(2);\n      expect(tileGrid.getZForResolution(125, function (value, high, low) {\n        return value - (low + (high - low) * 0.166666667);\n      })).to.eql(3);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"can be used to get the child tile range","suites":["ol/tilegrid/TileGrid.js","getTileRangeForTileCoordAndZ()"],"updatePoint":{"line":1057,"column":47,"index":40270},"line":1057,"code":"    it('can be used to get the child tile range', function () {\n      const range = tileGrid.getTileRangeForTileCoordAndZ([0, 0, 0], 1);\n      expect(range.minX).to.be(0);\n      expect(range.maxX).to.be(1);\n      expect(range.minY).to.be(0);\n      expect(range.maxY).to.be(1);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"can be used to get the range of a deeper level","suites":["ol/tilegrid/TileGrid.js","getTileRangeForTileCoordAndZ()"],"updatePoint":{"line":1064,"column":54,"index":40562},"line":1064,"code":"    it('can be used to get the range of a deeper level', function () {\n      const range = tileGrid.getTileRangeForTileCoordAndZ([0, 0, 0], 3);\n      expect(range.minX).to.be(0);\n      expect(range.maxX).to.be(7);\n      expect(range.minY).to.be(0);\n      expect(range.maxY).to.be(7);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"can be used to get the parent tile range","suites":["ol/tilegrid/TileGrid.js","getTileRangeForTileCoordAndZ()"],"updatePoint":{"line":1071,"column":48,"index":40848},"line":1071,"code":"    it('can be used to get the parent tile range', function () {\n      const range = tileGrid.getTileRangeForTileCoordAndZ([1, 1, 0], 0);\n      expect(range.minX).to.be(0);\n      expect(range.maxX).to.be(0);\n      expect(range.minY).to.be(0);\n      expect(range.maxY).to.be(0);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"can be used to get the range of a shallower level","suites":["ol/tilegrid/TileGrid.js","getTileRangeForTileCoordAndZ()"],"updatePoint":{"line":1078,"column":57,"index":41143},"line":1078,"code":"    it('can be used to get the range of a shallower level', function () {\n      const range = tileGrid.getTileRangeForTileCoordAndZ([3, 1, 6], 0);\n      expect(range.minX).to.be(0);\n      expect(range.maxX).to.be(0);\n      expect(range.minY).to.be(0);\n      expect(range.maxY).to.be(0);\n    });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"works for level ","suites":["ol/tilegrid/TileGrid.js","getTileRangeForTileCoordAndZ()"],"updatePoint":{"line":1087,"column":30,"index":41534},"line":1087,"code":"      it(`works for level ${z}`, function () {\n        const range = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, z);\n        expect(range.minX).to.be(tileRange.minX);\n        expect(range.maxX).to.be(tileRange.maxX);\n        expect(range.minY).to.be(tileRange.minY);\n        expect(range.maxY).to.be(tileRange.maxY);\n      });","file":"node/ol/tilegrid/TileGrid.test.js","skipped":false,"dir":"test"},{"name":"is constant once generated","suites":["ol/util.js","getUid()"],"updatePoint":{"line":5,"column":34,"index":188},"line":5,"code":"    it('is constant once generated', function () {\n      const a = {};\n      expect(getUid(a)).to.be(getUid(a));\n    });","file":"node/ol/util.test.js","skipped":false,"dir":"test"},{"name":"generates a strictly increasing sequence","suites":["ol/util.js","getUid()"],"updatePoint":{"line":9,"column":48,"index":323},"line":9,"code":"    it('generates a strictly increasing sequence', function () {\n      const a = {};\n      const b = {};\n      const c = {};\n      getUid(a);\n      getUid(c);\n      getUid(b);\n\n      // uid order should be a < c < b\n      expect(getUid(a)).to.be.lessThan(getUid(c));\n      expect(getUid(c)).to.be.lessThan(getUid(b));\n      expect(getUid(a)).to.be.lessThan(getUid(b));\n    });","file":"node/ol/util.test.js","skipped":false,"dir":"test"},{"name":"returns the expected matrix","suites":["ol/vec/mat4.js","create()"],"updatePoint":{"line":5,"column":35,"index":224},"line":5,"code":"    it('returns the expected matrix', function () {\n      expect(create()).to.eql([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    });","file":"node/ol/vec/mat4.test.js","skipped":false,"dir":"test"},{"name":"sets the expected transform on the matrix","suites":["ol/vec/mat4.js","fromTransform()"],"updatePoint":{"line":10,"column":49,"index":429},"line":10,"code":"    it('sets the expected transform on the matrix', function () {\n      const transform = [1, 2, 3, 4, 5, 6];\n      const result = create();\n      expect(fromTransform(result, transform)).to.eql([1, 2, 0, 0, 3, 4, 0, 0, 0, 0, 1, 0, 5, 6, 0, 1]);\n      expect(result).to.eql([1, 2, 0, 0, 3, 4, 0, 0, 0, 0, 1, 0, 5, 6, 0, 1]);\n    });","file":"node/ol/vec/mat4.test.js","skipped":false,"dir":"test"},{"name":"returns the same coordinates after padding reset","suites":["ol/View.js","padding"],"updatePoint":{"line":11,"column":56,"index":422},"line":11,"code":"    it('returns the same coordinates after padding reset', function () {\n      useGeographic();\n      const view = new View({\n        center: [135, 35],\n        zoom: 6\n      });\n      const center = view.getCenter();\n      view.padding = [0, 0, 0, 0];\n      const point = view.getCenter();\n      expect(point[0]).to.roughlyEqual(center[0], 1e-9);\n      expect(point[1]).to.roughlyEqual(center[1], 1e-9);\n    });","file":"node/ol/View.test.js","skipped":false,"dir":"test"}]}