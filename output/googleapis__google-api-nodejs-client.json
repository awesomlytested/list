{
    "repo": "googleapis/google-api-nodejs-client",
    "url": "https://github.com/googleapis/google-api-nodejs-client",
    "branch": "main",
    "configs": [
        {
            "package": "googleapis",
            "lang": "ts",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "googleapis-samples",
            "lang": "js",
            "dir": "samples/test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should include auth APIKEY as key=<APIKEY>",
            "suites": [
                "API key"
            ],
            "updatePoint": {
                "line": 96,
                "column": 48
            },
            "line": 96,
            "code": "  it('should include auth APIKEY as key=<APIKEY>', async () => {\n    await testGet(localDrive);\n    await testGet(remoteDrive);\n  });",
            "file": "test.apikey.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly escape params E.g. API KEY to API%20KEY",
            "suites": [
                "API key"
            ],
            "updatePoint": {
                "line": 101,
                "column": 61
            },
            "line": 101,
            "code": "  it('should properly escape params E.g. API KEY to API%20KEY', async () => {\n    await testParams2(localDrive);\n    await testParams2(remoteDrive);\n  });",
            "file": "test.apikey.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use key param over auth apikey param if both provided",
            "suites": [
                "API key"
            ],
            "updatePoint": {
                "line": 106,
                "column": 66
            },
            "line": 106,
            "code": "  it('should use key param over auth apikey param if both provided', async () => {\n    await testKeyParam(localDrive);\n    await testKeyParam(remoteDrive);\n  });",
            "file": "test.apikey.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set API key parameter if it is present",
            "suites": [
                "API key"
            ],
            "updatePoint": {
                "line": 111,
                "column": 51
            },
            "line": 111,
            "code": "  it('should set API key parameter if it is present', async () => {\n    await testAuthKey(localBlogger);\n    await testAuthKey(remoteBlogger);\n  });",
            "file": "test.apikey.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should expose the default auth module",
            "suites": [
                "JWT client"
            ],
            "updatePoint": {
                "line": 35,
                "column": 45
            },
            "line": 35,
            "code": "    it('should expose the default auth module', () => {\n      assert(googleapis.auth.getApplicationDefault);\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should create a jwt through googleapis",
            "suites": [
                "JWT client"
            ],
            "updatePoint": {
                "line": 39,
                "column": 46
            },
            "line": 39,
            "code": "    it('should create a jwt through googleapis', () => {\n      const jwt = new googleapis.auth.JWT(\n        'someone@somewhere.com',\n        'file1',\n        'key1',\n        'scope1',\n        'subject1'\n      );\n      assert.strictEqual(jwt.email, 'someone@somewhere.com');\n      assert.strictEqual(jwt.keyFile, 'file1');\n      assert.strictEqual(jwt.key, 'key1');\n      assert.strictEqual(jwt.scopes, 'scope1');\n      assert.strictEqual(jwt.subject, 'subject1');\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should create a computeclient",
            "suites": [
                "Compute client"
            ],
            "updatePoint": {
                "line": 56,
                "column": 37
            },
            "line": 56,
            "code": "    it('should create a computeclient', () => {\n      new googleapis.auth.Compute();\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should create a BaseExternalAccountClient through googleapis",
            "suites": [
                "ExternalAccount client"
            ],
            "updatePoint": {
                "line": 62,
                "column": 68
            },
            "line": 62,
            "code": "    it('should create a BaseExternalAccountClient through googleapis', () => {\n      const config = {\n        type: 'external_account',\n        audience:\n          '//iam.googleapis.com/projects/123//locations/global/' +\n          'workloadIdentityPools/456',\n        subject_token_type: 'urn:ietf:params:oauth:token-type:jwt',\n        token_url: 'https://sts.googleapis.com/v1/token',\n        credential_source: {\n          file: 'external-subject-token.txt',\n        },\n      };\n      new googleapis.auth.IdentityPoolClient(config);\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return err if no access or refresh token is set",
            "suites": [
                "OAuth2 client"
            ],
            "updatePoint": {
                "line": 152,
                "column": 62
            },
            "line": 152,
            "code": "    it('should return err if no access or refresh token is set', async () => {\n      const oauth2client = new googleapis.auth.OAuth2(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        REDIRECT_URI\n      );\n      await testNoTokens(localBlogger, oauth2client);\n      await testNoTokens(remoteBlogger, oauth2client);\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not error if only refresh token is set",
            "suites": [
                "OAuth2 client"
            ],
            "updatePoint": {
                "line": 162,
                "column": 53
            },
            "line": 162,
            "code": "    it('should not error if only refresh token is set', () => {\n      const oauth2client = new googleapis.auth.OAuth2(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        REDIRECT_URI\n      );\n      oauth2client.credentials = {refresh_token: 'refresh_token'};\n      assert.doesNotThrow(() => {\n        const options = {auth: oauth2client, blogId: '...'};\n        localBlogger.pages.get(options, Utils.noop);\n        remoteBlogger.pages.get(options, Utils.noop);\n      });\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set access token type to Bearer if none is set",
            "suites": [
                "OAuth2 client"
            ],
            "updatePoint": {
                "line": 176,
                "column": 61
            },
            "line": 176,
            "code": "    it('should set access token type to Bearer if none is set', async () => {\n      const oauth2client = new googleapis.auth.OAuth2(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        REDIRECT_URI\n      );\n      oauth2client.credentials = {access_token: 'foo', refresh_token: ''};\n      const scope = nock('https://blogger.googleapis.com')\n        .get('/v3/blogs/abc123/pages')\n        .times(2)\n        .reply(200);\n      await testNoBearer(localBlogger, oauth2client);\n      await testNoBearer(remoteBlogger, oauth2client);\n      scope.done();\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should refresh if access token is expired",
            "suites": [
                "OAuth2 client"
            ],
            "updatePoint": {
                "line": 192,
                "column": 49
            },
            "line": 192,
            "code": "    it('should refresh if access token is expired', async () => {\n      const scope = nock('https://oauth2.googleapis.com')\n        .post('/token')\n        .times(2)\n        .reply(200, {access_token: 'abc123', expires_in: 1});\n      let oauth2client = new googleapis.auth.OAuth2(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        REDIRECT_URI\n      );\n      let now = new Date().getTime();\n      let twoSecondsAgo = now - 2000;\n      oauth2client.credentials = {\n        refresh_token: 'abc',\n        expiry_date: twoSecondsAgo,\n      };\n      await testExpired(localDrive, oauth2client, now);\n      oauth2client = new googleapis.auth.OAuth2(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        REDIRECT_URI\n      );\n      now = new Date().getTime();\n      twoSecondsAgo = now - 2000;\n      oauth2client.credentials = {\n        refresh_token: 'abc',\n        expiry_date: twoSecondsAgo,\n      };\n      await testExpired(remoteDrive, oauth2client, now);\n      scope.done();\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should make request if access token not expired",
            "suites": [
                "OAuth2 client"
            ],
            "updatePoint": {
                "line": 224,
                "column": 55
            },
            "line": 224,
            "code": "    it('should make request if access token not expired', async () => {\n      const scope = nock('https://www.googleapis.com')\n        .post('/oauth2/v4/token')\n        .times(2)\n        .reply(200, {access_token: 'abc123', expires_in: 10000});\n      let oauth2client = new googleapis.auth.OAuth2(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        REDIRECT_URI\n      );\n      let now = new Date().getTime();\n      let tenMinutesFromNow = now + 1000 * 60 * 10;\n      oauth2client.credentials = {\n        access_token: 'abc123',\n        refresh_token: 'abc',\n        expiry_date: tenMinutesFromNow,\n      };\n\n      nock(Utils.baseUrl).get('/drive/v2/files/wat').reply(200);\n      await localDrive.files.get({fileId: 'wat', auth: oauth2client});\n      assert.strictEqual(\n        JSON.stringify(oauth2client.credentials),\n        JSON.stringify({\n          access_token: 'abc123',\n          refresh_token: 'abc',\n          expiry_date: tenMinutesFromNow,\n          token_type: 'Bearer',\n        })\n      );\n\n      assert.throws(() => {\n        scope.done();\n      }, 'AssertionError');\n      oauth2client = new googleapis.auth.OAuth2(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        REDIRECT_URI\n      );\n      now = new Date().getTime();\n      tenMinutesFromNow = now + 1000 * 60 * 10;\n      oauth2client.credentials = {\n        access_token: 'abc123',\n        refresh_token: 'abc',\n        expiry_date: tenMinutesFromNow,\n      };\n\n      nock(Utils.baseUrl).get('/drive/v2/files/wat').reply(200);\n      await remoteDrive.files.get({fileId: 'wat', auth: oauth2client});\n      assert.strictEqual(\n        JSON.stringify(oauth2client.credentials),\n        JSON.stringify({\n          access_token: 'abc123',\n          refresh_token: 'abc',\n          expiry_date: tenMinutesFromNow,\n          token_type: 'Bearer',\n        })\n      );\n\n      assert.throws(() => {\n        scope.done();\n      }, 'AssertionError');\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should refresh if have refresh token but no access token",
            "suites": [
                "OAuth2 client"
            ],
            "updatePoint": {
                "line": 287,
                "column": 64
            },
            "line": 287,
            "code": "    it('should refresh if have refresh token but no access token', async () => {\n      const scope = nock('https://oauth2.googleapis.com')\n        .post('/token')\n        .times(2)\n        .reply(200, {access_token: 'abc123', expires_in: 1});\n      const oauth2client = new googleapis.auth.OAuth2(\n        CLIENT_ID,\n        CLIENT_SECRET,\n        REDIRECT_URI\n      );\n      let now = new Date().getTime();\n      oauth2client.credentials = {refresh_token: 'abc'};\n      await testNoAccessToken(localDrive, oauth2client, now);\n      now = new Date().getTime();\n      oauth2client.credentials = {refresh_token: 'abc'};\n      await testNoAccessToken(remoteDrive, oauth2client, now);\n      scope.done();\n    });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should revoke credentials if access token present",
            "suites": [
                "OAuth2 client",
                "revokeCredentials()"
            ],
            "updatePoint": {
                "line": 307,
                "column": 59
            },
            "line": 307,
            "code": "      it('should revoke credentials if access token present', async () => {\n        const scope = nock('https://oauth2.googleapis.com')\n          .post('/revoke?token=abc')\n          .reply(200, {success: true});\n        const oauth2client = new googleapis.auth.OAuth2(\n          CLIENT_ID,\n          CLIENT_SECRET,\n          REDIRECT_URI\n        );\n        oauth2client.credentials = {access_token: 'abc', refresh_token: 'abc'};\n        const res = await oauth2client.revokeCredentials();\n        scope.done();\n        assert.strictEqual(res.data.success, true);\n        assert.deepStrictEqual(oauth2client.credentials, {});\n      });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should clear credentials and return error if no access token to revoke",
            "suites": [
                "OAuth2 client",
                "revokeCredentials()"
            ],
            "updatePoint": {
                "line": 323,
                "column": 80
            },
            "line": 323,
            "code": "      it('should clear credentials and return error if no access token to revoke', async () => {\n        const oauth2client = new googleapis.auth.OAuth2(\n          CLIENT_ID,\n          CLIENT_SECRET,\n          REDIRECT_URI\n        );\n        oauth2client.credentials = {refresh_token: 'abc'};\n        await assert.rejects(\n          oauth2client.revokeCredentials(),\n          /Error: No access token to revoke./\n        );\n        assert.deepStrictEqual(oauth2client.credentials, {});\n      });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return expiry_date",
            "suites": [
                "OAuth2 client",
                "getToken()"
            ],
            "updatePoint": {
                "line": 339,
                "column": 35
            },
            "line": 339,
            "code": "      it('should return expiry_date', async () => {\n        const now = new Date().getTime();\n        const scope = nock('https://oauth2.googleapis.com')\n          .post('/token')\n          .reply(200, {\n            access_token: 'abc',\n            refresh_token: '123',\n            expires_in: 10,\n          });\n        const oauth2client = new googleapis.auth.OAuth2(\n          CLIENT_ID,\n          CLIENT_SECRET,\n          REDIRECT_URI\n        );\n        const res = await oauth2client.getToken('code here');\n        assert(res.tokens.expiry_date! >= now + 10 * 1000);\n        assert(res.tokens.expiry_date! <= now + 15 * 1000);\n        scope.done();\n      });",
            "file": "test.auth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should load API versions with a dot in the name",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 53,
                "column": 53
            },
            "line": 53,
            "code": "  it('should load API versions with a dot in the name', async () => {\n    const google = new GoogleApis();\n    const ads = google.adsense('v1.4');\n    assert.ok(ads);\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should create request helpers according to resource on discovery API response",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 59,
                "column": 83
            },
            "line": 59,
            "code": "  it('should create request helpers according to resource on discovery API response', () => {\n    let blogger = localBlogger;\n    assert.strictEqual(typeof blogger.pages.list, 'function');\n    blogger = remoteBlogger;\n    assert.strictEqual(typeof blogger.pages.list, 'function');\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be able to gen top level methods",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 66,
                "column": 45
            },
            "line": 66,
            "code": "  it('should be able to gen top level methods', () => {\n    assert.strictEqual(typeof localOauth2.tokeninfo, 'function');\n    assert.strictEqual(typeof remoteOauth2.tokeninfo, 'function');\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be able to gen top level methods and resources",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 71,
                "column": 59
            },
            "line": 71,
            "code": "  it('should be able to gen top level methods and resources', () => {\n    let oauth2 = localOauth2;\n    assert.strictEqual(typeof oauth2.tokeninfo, 'function');\n    assert.strictEqual(typeof oauth2.userinfo, 'object');\n    oauth2 = remoteOauth2;\n    assert.strictEqual(typeof oauth2.tokeninfo, 'function');\n    assert.strictEqual(typeof oauth2.userinfo, 'object');\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be able to gen nested resources and methods",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 80,
                "column": 56
            },
            "line": 80,
            "code": "  it('should be able to gen nested resources and methods', () => {\n    let oauth2 = localOauth2;\n    assert.strictEqual(typeof oauth2.userinfo, 'object');\n    assert.strictEqual(typeof oauth2.userinfo.v2, 'object');\n    assert.strictEqual(typeof oauth2.userinfo.v2.me, 'object');\n    assert.strictEqual(typeof oauth2.userinfo.v2.me.get, 'function');\n    oauth2 = remoteOauth2;\n    assert.strictEqual(typeof oauth2.userinfo, 'object');\n    assert.strictEqual(typeof oauth2.userinfo.v2, 'object');\n    assert.strictEqual(typeof oauth2.userinfo.v2.me, 'object');\n    assert.strictEqual(typeof oauth2.userinfo.v2.me.get, 'function');\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support default params",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 93,
                "column": 35
            },
            "line": 93,
            "code": "  it('should support default params', async () => {\n    const google = new GoogleApis();\n    const datastore = google.datastore({\n      version: 'v1',\n      params: {myParam: '123'},\n    });\n    createNock('myParam=123');\n    const res = await datastore.projects.lookup({projectId: 'test-project-id'});\n    // If the default param handling is broken, query might be undefined, thus\n    // concealing the assertion message with some generic \"cannot call .indexOf\n    // of undefined\"\n    const query = Utils.getQs(res) || '';\n    assert.notStrictEqual(\n      query.indexOf('myParam=123'),\n      -1,\n      'Default param in query'\n    );\n    const datastore2 = await Utils.loadApi(google, 'datastore', 'v1', {\n      params: {myParam: '123'},\n    });\n    nock.disableNetConnect();\n    createNock('myParam=123');\n    const res2 =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      await (datastore2 as any).projects.lookup({\n        projectId: 'test-project-id',\n      });\n    const query2 = Utils.getQs(res2) || '';\n    assert.notStrictEqual(\n      query2.indexOf('myParam=123'),\n      -1,\n      'Default param in query'\n    );\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow default params to be overriden per-request",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 128,
                "column": 61
            },
            "line": 128,
            "code": "  it('should allow default params to be overriden per-request', async () => {\n    const google = new GoogleApis();\n    const datastore = google.datastore({\n      version: 'v1',\n      params: {myParam: '123'},\n    });\n    // Override the default datasetId param for this particular API call\n    createNock('myParam=456');\n    const res = await datastore.projects.lookup(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      {projectId: 'test-project-id', myParam: '456'} as any\n    );\n    // If the default param handling is broken, query might be undefined, thus\n    // concealing the assertion message with some generic \"cannot call .indexOf\n    // of undefined\"\n    const query = Utils.getQs(res) || '';\n    assert.notStrictEqual(\n      query.indexOf('myParam=456'),\n      -1,\n      'Default param not found in query'\n    );\n    const datastore2 = await Utils.loadApi(google, 'datastore', 'v1', {\n      params: {myParam: '123'},\n    });\n    nock.disableNetConnect();\n    // Override the default datasetId param for this particular API call\n    createNock('myParam=456');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const res2 = await (datastore2 as any).projects.lookup({\n      projectId: 'test-project-id',\n      myParam: '456',\n    });\n    // If the default param handling is broken, query might be undefined,\n    // thus concealing the assertion message with some generic \"cannot\n    // call .indexOf of undefined\"\n    const query2 = Utils.getQs(res2) || '';\n    assert.notStrictEqual(\n      query2.indexOf('myParam=456'),\n      -1,\n      'Default param not found in query'\n    );\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should include default params when only callback is provided to API call",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 171,
                "column": 78
            },
            "line": 171,
            "code": "  it('should include default params when only callback is provided to API call', async () => {\n    const google = new GoogleApis();\n    const datastore = google.datastore({\n      version: 'v1',\n      params: {\n        // We must set this here - it is a required param\n        projectId: 'test-project-id',\n        myParam: '123',\n      },\n    });\n    // No params given - only callback\n    createNock('myParam=123');\n    const res = await datastore.projects.lookup();\n    // If the default param handling is broken, req or query might be\n    // undefined, thus concealing the assertion message with some generic\n    // \"cannot call .indexOf of undefined\"\n    const query = Utils.getQs(res) || '';\n\n    assert.notStrictEqual(\n      query.indexOf('myParam=123'),\n      -1,\n      'Default param not found in query'\n    );\n    const datastore2 = await Utils.loadApi(google, 'datastore', 'v1', {\n      params: {\n        projectId: 'test-project-id', // We must set this here - it is a\n        // required param\n        myParam: '123',\n      },\n    });\n\n    nock.disableNetConnect();\n\n    // No params given - only callback\n    createNock('myParam=123');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const res3 = await (datastore2 as any).projects.lookup();\n    // If the default param handling is broken, req or query might be\n    // undefined, thus concealing the assertion message with some\n    // generic \"cannot call .indexOf of undefined\"\n    const query2 = Utils.getQs(res3) || '';\n    assert.notStrictEqual(\n      query2.indexOf('myParam=123'),\n      -1,\n      'Default param not found in query'\n    );\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass eslint for a given client",
            "suites": [
                "Clients"
            ],
            "updatePoint": {
                "line": 219,
                "column": 43
            },
            "line": 219,
            "code": "  it('should pass eslint for a given client', () => {\n    execSync('npx eslint --no-ignore src/apis/youtube/*.ts');\n  });",
            "file": "test.clients.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update disclaimers",
            "suites": [],
            "updatePoint": {
                "line": 49,
                "column": 31
            },
            "line": 49,
            "code": "  it('should update disclaimers', async () => {\n    const url = new URL(disclaimer.libraryListUrl);\n    const scope = nock(url.origin).get(url.pathname).reply(200, mockResponse);\n    const expected = [\n      {\n        api: 'cloudasset',\n        package: '@google-cloud/asset',\n      },\n    ];\n    const stub = sandbox\n      .stub(disclaimer.gfs, 'writeFileSync')\n      .callsFake((path, content) => {\n        assert.ok(path);\n        assert.strictEqual(\n          JSON.stringify(JSON.parse(content as string)),\n          JSON.stringify(expected)\n        );\n      });\n    await disclaimer.main();\n    assert.ok(stub.calledOnce);\n    scope.done();\n  });",
            "file": "test.disclaimer.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get a list of supported apis",
            "suites": [
                "GoogleApis#discover"
            ],
            "updatePoint": {
                "line": 32,
                "column": 41
            },
            "line": 32,
            "code": "  it('should get a list of supported apis', () => {\n    const google = new GoogleApis();\n    const apis = google.getSupportedAPIs();\n    assert.strictEqual(Object.keys(apis).length, Object.keys(APIS).length);\n    assert(apis.drive.indexOf('v2') > -1);\n  });",
            "file": "test.discover.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should generate all apis",
            "suites": [
                "GoogleApis#discover"
            ],
            "line": 39,
            "code": "  it.skip('should generate all apis', async () => {",
            "file": "test.discover.ts",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "should generate docs",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 26
            },
            "line": 25,
            "code": "  it('should generate docs', async () => {\n    const writeStub = sandbox.stub(docs.gfs, 'writeFile').resolves();\n    const execStub = sandbox.stub(docs.gfs, 'execa').resolves();\n    await docs.main();\n    assert.ok(writeStub.called);\n    assert.ok(execStub);\n  });",
            "file": "test.docs.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should sort an object by key order",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 40
            },
            "line": 33,
            "code": "  it('should sort an object by key order', () => {\n    const unsorted = {\n      b: 2,\n      a: {\n        d: 1,\n        c: 2,\n        e: ['b', 'a'],\n      },\n    };\n    const sorted = {\n      a: {\n        c: 2,\n        d: 1,\n        e: ['b', 'a'],\n      },\n      b: 2,\n    };\n    const result = dn.sortKeys(unsorted);\n    assert.strictEqual(JSON.stringify(sorted), JSON.stringify(result));\n  });",
            "file": "test.download.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not ignore real schema changes",
            "suites": [],
            "updatePoint": {
                "line": 54,
                "column": 43
            },
            "line": 54,
            "code": "  it('should not ignore real schema changes', () => {\n    const newDoc = {\n      revision: '1234',\n      api: 'ch-ch-changes',\n    };\n    const oldDoc = {\n      revision: '1234',\n      api: 'steady',\n    };\n    const shouldUpdate = dn.shouldUpdate(newDoc, oldDoc);\n    assert.strictEqual(shouldUpdate, true);\n  });",
            "file": "test.download.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ignore schema changes that only touch revision",
            "suites": [],
            "updatePoint": {
                "line": 67,
                "column": 59
            },
            "line": 67,
            "code": "  it('should ignore schema changes that only touch revision', () => {\n    const newDoc = {\n      revision: '1234',\n      api: 'steady',\n    };\n    const oldDoc = {\n      revision: 'abcd',\n      api: 'steady',\n    };\n    const shouldUpdate = dn.shouldUpdate(newDoc, oldDoc);\n    assert.strictEqual(shouldUpdate, false);\n  });",
            "file": "test.download.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should download the discovery docs",
            "suites": [],
            "updatePoint": {
                "line": 80,
                "column": 40
            },
            "line": 80,
            "code": "  it('should download the discovery docs', async () => {\n    const scopes = [\n      nock('https://www.googleapis.com')\n        .get('/discovery/v1/apis/')\n        .replyWithFile(200, fakeIndexPath),\n      nock('http://localhost:3030').get('/path').reply(200, {}),\n    ];\n    const mkdirpStub = sandbox.stub(dn.gfs, 'mkdir').resolves();\n    const writeFileStub = sandbox.stub(dn.gfs, 'writeFile');\n    const readFileStub = sandbox.stub(dn.gfs, 'readFile');\n    const downloadPath = path.join(__dirname, '../../discovery');\n    await dn.downloadDiscoveryDocs({discoveryUrl, downloadPath});\n    assert(mkdirpStub.calledOnce);\n    assert(writeFileStub.calledTwice);\n    assert(readFileStub.calledOnce);\n    scopes.forEach(s => s.done());\n  });",
            "file": "test.download.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ignore changes to schemas that only have revision changes",
            "suites": [],
            "updatePoint": {
                "line": 98,
                "column": 70
            },
            "line": 98,
            "code": "  it('should ignore changes to schemas that only have revision changes', async () => {\n    const scopes = [\n      nock('https://www.googleapis.com')\n        .get('/discovery/v1/apis/')\n        .replyWithFile(200, fakeIndexPath),\n      nock('http://localhost:3030').get('/path').reply(200, {\n        revision: '1234',\n      }),\n    ];\n    const writeFileStub = sandbox.stub(dn.gfs, 'writeFile');\n    const readFileStub = sandbox.stub(dn.gfs, 'readFile').callsFake(() => {\n      return JSON.stringify(\n        {\n          revision: 'abcd',\n        },\n        null,\n        2\n      );\n    });\n    const downloadPath = path.join(__dirname, '../../discovery');\n    await dn.downloadDiscoveryDocs({discoveryUrl, downloadPath});\n    assert(writeFileStub.calledOnce);\n    assert(readFileStub.calledOnce);\n    scopes.forEach(s => s.done());\n  });",
            "file": "test.download.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be invokable from the CLI",
            "suites": [],
            "updatePoint": {
                "line": 124,
                "column": 38
            },
            "line": 124,
            "code": "  it('should be invokable from the CLI', async () => {\n    const port = 3030;\n    const server = http\n      .createServer((req, res) => {\n        res.writeHead(200);\n        const indexPath = path.join(\n          __dirname,\n          '../../test/fixtures/index.json'\n        );\n        fs.readFile(indexPath, (err, data) => {\n          if (err) {\n            res.writeHead(404);\n            res.end(JSON.stringify(err));\n            return;\n          }\n          res.writeHead(200);\n          res.end(data);\n        });\n      })\n      .listen(port);\n    const downloadPath = 'build/test/temp';\n    await execa('node', [\n      './build/src/generator/download',\n      '--download-path',\n      downloadPath,\n      '--discovery-url',\n      `http://localhost:${port}/`,\n    ]);\n    assert.ok(fs.existsSync('build/test/temp'));\n    server.close();\n  });",
            "file": "test.download.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should flatten an object schema",
            "suites": [],
            "updatePoint": {
                "line": 156,
                "column": 37
            },
            "line": 156,
            "code": "  it('should flatten an object schema', () => {\n    const input = {\n      a: {\n        b: {\n          c: [1, 2, 3],\n        },\n        d: 'test',\n      },\n      e: 5,\n    };\n    const expected = {\n      'a.b.c': [1, 2, 3],\n      'a.d': 'test',\n      e: 5,\n    };\n    const result = dn.flattenObject(input);\n    assert.deepStrictEqual(result, expected);\n  });",
            "file": "test.download.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get the diff between two flattened lists",
            "suites": [],
            "updatePoint": {
                "line": 175,
                "column": 53
            },
            "line": 175,
            "code": "  it('should get the diff between two flattened lists', () => {\n    const oldDoc = {\n      a: 1,\n      b: 2,\n      c: [1, 2, 3],\n    };\n    const newDoc = {\n      a: 1,\n      c: [1, 2, 4],\n      d: 5,\n    };\n    const expected = [\n      {\n        action: 'DELETED',\n        keyName: 'b',\n      },\n      {\n        action: 'ADDED',\n        keyName: 'd',\n      },\n      {\n        action: 'CHANGED',\n        keyName: 'c',\n      },\n    ];\n    const result = dn.getDiffs(oldDoc, newDoc);\n    assert.deepStrictEqual(result, expected);\n  });",
            "file": "test.download.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should exist",
            "suites": [
                "drive:v2"
            ],
            "updatePoint": {
                "line": 41,
                "column": 18
            },
            "line": 41,
            "code": "  it('should exist', done => {\n    assert.notStrictEqual(typeof googleapis.drive, null);\n    done();\n  });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a function",
            "suites": [
                "drive:v2"
            ],
            "updatePoint": {
                "line": 46,
                "column": 26
            },
            "line": 46,
            "code": "  it('should be a function', done => {\n    assert.strictEqual(typeof googleapis.drive, 'function');\n    done();\n  });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should create a drive object",
            "suites": [
                "drive:v2"
            ],
            "updatePoint": {
                "line": 51,
                "column": 34
            },
            "line": 51,
            "code": "  it('should create a drive object', done => {\n    assert.notStrictEqual(typeof localDrive, 'undefined');\n    assert.notStrictEqual(typeof remoteDrive, 'undefined');\n    done();\n  });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be frozen (immutable)",
            "suites": [
                "drive:v2"
            ],
            "updatePoint": {
                "line": 57,
                "column": 34
            },
            "line": 57,
            "code": "  it('should be frozen (immutable)', done => {\n    assert.strictEqual(Object.isFrozen(localDrive), true);\n    assert.strictEqual(Object.isFrozen(remoteDrive), true);\n    done();\n  });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should exist",
            "suites": [
                "drive:v2",
                ".files"
            ],
            "updatePoint": {
                "line": 64,
                "column": 20
            },
            "line": 64,
            "code": "    it('should exist', done => {\n      assert.notStrictEqual(typeof localDrive.files, 'undefined');\n      assert.notStrictEqual(typeof remoteDrive.files, 'undefined');\n      done();\n    });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be an object",
            "suites": [
                "drive:v2",
                ".files"
            ],
            "updatePoint": {
                "line": 70,
                "column": 27
            },
            "line": 70,
            "code": "    it('should be an object', done => {\n      assert.strictEqual(typeof localDrive.files, 'object');\n      assert.strictEqual(typeof remoteDrive.files, 'object');\n      done();\n    });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should exist",
            "suites": [
                "drive:v2",
                ".files",
                ".insert"
            ],
            "updatePoint": {
                "line": 77,
                "column": 22
            },
            "line": 77,
            "code": "      it('should exist', done => {\n        assert.notStrictEqual(typeof localDrive.files.insert, 'undefined');\n        assert.notStrictEqual(typeof remoteDrive.files.insert, 'undefined');\n        done();\n      });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a function",
            "suites": [
                "drive:v2",
                ".files",
                ".insert"
            ],
            "updatePoint": {
                "line": 83,
                "column": 30
            },
            "line": 83,
            "code": "      it('should be a function', done => {\n        assert.strictEqual(typeof localDrive.files.insert, 'function');\n        assert.strictEqual(typeof remoteDrive.files.insert, 'function');\n        done();\n      });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not return a Request object",
            "suites": [
                "drive:v2",
                ".files",
                ".insert"
            ],
            "updatePoint": {
                "line": 89,
                "column": 44
            },
            "line": 89,
            "code": "      it('should not return a Request object', done => {\n        let req = localDrive.files.insert(Utils.noop);\n        assert.strictEqual(req, undefined);\n        req = remoteDrive.files.insert(Utils.noop);\n        assert.strictEqual(req, undefined);\n        done();\n      });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should exist",
            "suites": [
                "drive:v2",
                ".files",
                ".get"
            ],
            "updatePoint": {
                "line": 99,
                "column": 22
            },
            "line": 99,
            "code": "      it('should exist', () => {\n        assert.notStrictEqual(typeof localDrive.files.get, 'undefined');\n        assert.notStrictEqual(typeof remoteDrive.files.get, 'undefined');\n      });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a function",
            "suites": [
                "drive:v2",
                ".files",
                ".get"
            ],
            "updatePoint": {
                "line": 104,
                "column": 30
            },
            "line": 104,
            "code": "      it('should be a function', () => {\n        assert.strictEqual(typeof localDrive.files.get, 'function');\n        assert.strictEqual(typeof remoteDrive.files.get, 'function');\n      });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not return a Request object",
            "suites": [
                "drive:v2",
                ".files",
                ".get"
            ],
            "updatePoint": {
                "line": 109,
                "column": 44
            },
            "line": 109,
            "code": "      it('should not return a Request object', () => {\n        let req = localDrive.files.get({fileId: '123'}, Utils.noop);\n        assert.strictEqual(req, undefined);\n        req = remoteDrive.files.get({fileId: '123'}, Utils.noop);\n        assert.strictEqual(req, undefined);\n      });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not return missing param error",
            "suites": [
                "drive:v2",
                ".files.list()"
            ],
            "updatePoint": {
                "line": 119,
                "column": 45
            },
            "line": 119,
            "code": "    it('should not return missing param error', async () => {\n      nock(Utils.baseUrl).get('/drive/v2/files?q=hello').times(2).reply(200);\n      await localDrive.files.list({q: 'hello'});\n      await remoteDrive.files.list({q: 'hello'});\n    });",
            "file": "test.drive.v2.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should convert a dashed word to camelcase",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 47
            },
            "line": 21,
            "code": "  it('should convert a dashed word to camelcase', () => {\n    const param = 'well-known';\n    const expected = 'wellKnown';\n    const result = filters.camelify(param);\n    assert.strictEqual(result, expected);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should strip /* comments from disco",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 41
            },
            "line": 28,
            "code": "  it('should strip /* comments from disco', () => {\n    const param = 'This would /* cause problems */ for sure';\n    const expected = 'This would /x cause problems x/ for sure';\n    const result = filters.cleanComments(param);\n    assert.strictEqual(result, expected);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should strip reserved characters property names",
            "suites": [],
            "updatePoint": {
                "line": 35,
                "column": 53
            },
            "line": 35,
            "code": "  it('should strip reserved characters property names', () => {\n    const param = 'property-name';\n    const expected = \"'property-name'\";\n    const result = filters.cleanPropertyName(param);\n    assert.strictEqual(result, expected);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should check for simple types",
            "suites": [],
            "updatePoint": {
                "line": 42,
                "column": 35
            },
            "line": 42,
            "code": "  it('should check for simple types', () => {\n    assert.strictEqual(filters.isSimpleType('{}'), false);\n    assert.strictEqual(filters.isSimpleType('1'), true);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should convert regex paths to examples",
            "suites": [],
            "updatePoint": {
                "line": 47,
                "column": 44
            },
            "line": 47,
            "code": "  it('should convert regex paths to examples', () => {\n    const path = '^projects/[^/]+$';\n    const expected = 'projects/my-project';\n    const result = filters.unRegex(path);\n    assert.strictEqual(result, expected);\n    assert.strictEqual(filters.unRegex(1 as {} as string), '');\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should remove double slashes from urls",
            "suites": [],
            "updatePoint": {
                "line": 55,
                "column": 44
            },
            "line": 55,
            "code": "  it('should remove double slashes from urls', () => {\n    const original = 'https://github.com//googleapis//google-cloud-node';\n    const expected = \"'https://github.com/googleapis/google-cloud-node'\";\n    assert.strictEqual(filters.buildurl(original), expected);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should find resource params",
            "suites": [],
            "updatePoint": {
                "line": 61,
                "column": 33
            },
            "line": 61,
            "code": "  it('should find resource params', () => {\n    const withResource = {\n      parameters: {\n        resource: {},\n      },\n    } as {} as SchemaMethod;\n    assert.strictEqual(filters.hasResourceParam(withResource), true);\n    const withoutResource1 = {} as SchemaMethod;\n    assert.strictEqual(filters.hasResourceParam(withoutResource1), false);\n    const withoutResource2 = {\n      parameters: {},\n    } as SchemaMethod;\n    assert.strictEqual(filters.hasResourceParam(withoutResource2), false);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get safe param name",
            "suites": [],
            "updatePoint": {
                "line": 76,
                "column": 32
            },
            "line": 76,
            "code": "  it('should get safe param name', () => {\n    const original = 'resource';\n    const expected = 'resource_';\n    assert.strictEqual(filters.getSafeParamName(original), expected);\n    assert.strictEqual(filters.getSafeParamName('ok'), 'ok');\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get path parameters",
            "suites": [],
            "updatePoint": {
                "line": 83,
                "column": 32
            },
            "line": 83,
            "code": "  it('should get path parameters', () => {\n    let emptyParams: SchemaParameters;\n    assert.deepStrictEqual(filters.getPathParams(emptyParams!), []);\n\n    const params = {\n      1: {\n        location: 'path',\n      },\n      2: {},\n    } as {} as SchemaParameters;\n    const expected = ['1'];\n    assert.deepStrictEqual(filters.getPathParams(params), expected);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get a ref type",
            "suites": [],
            "updatePoint": {
                "line": 97,
                "column": 27
            },
            "line": 97,
            "code": "  it('should get a ref type', () => {\n    const item1 = {\n      $ref: 'Food',\n    };\n    const expected1 = 'Schema$Food';\n    assert.strictEqual(filters.getType(item1), expected1);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get an integer type",
            "suites": [],
            "updatePoint": {
                "line": 105,
                "column": 32
            },
            "line": 105,
            "code": "  it('should get an integer type', () => {\n    const item2 = {\n      type: 'integer',\n    } as SchemaItem;\n    const expected2 = 'number';\n    assert.strictEqual(filters.getType(item2), expected2);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get a boolean type",
            "suites": [],
            "updatePoint": {
                "line": 113,
                "column": 31
            },
            "line": 113,
            "code": "  it('should get a boolean type', () => {\n    const item3 = {\n      type: 'boolean',\n    } as SchemaItem;\n    const expected3 = 'boolean';\n    assert.strictEqual(filters.getType(item3), expected3);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get object type for any",
            "suites": [],
            "updatePoint": {
                "line": 121,
                "column": 36
            },
            "line": 121,
            "code": "  it('should get object type for any', () => {\n    assert.strictEqual(filters.getObjectType({}), 'any');\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get object type for item.properties",
            "suites": [],
            "updatePoint": {
                "line": 125,
                "column": 48
            },
            "line": 125,
            "code": "  it('should get object type for item.properties', () => {\n    const item = {\n      properties: {\n        count: {\n          type: 'integer',\n        },\n      },\n    } as SchemaItem;\n    assert.strictEqual(filters.getObjectType(item), '{ count?: number; }');\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get object type for item.additionalProperties",
            "suites": [],
            "updatePoint": {
                "line": 136,
                "column": 58
            },
            "line": 136,
            "code": "  it('should get object type for item.additionalProperties', () => {\n    const item = {\n      additionalProperties: {\n        type: 'any',\n      },\n    } as SchemaItem;\n    const expected = '{ [key: string]: any; }';\n    assert.strictEqual(filters.getObjectType(item), expected);\n  });",
            "file": "test.filters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should read from cache if flag is passed",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 46
            },
            "line": 28,
            "code": "  it('should read from cache if flag is passed', async () => {\n    // This test relies on the disabled network being enabled\n    const generator = new gen.Generator();\n    const genStub = sandbox.stub(generator, 'generateAPI').resolves();\n    const idxStub = sandbox.stub(generator, 'generateIndex').resolves();\n    await generator.generateAllAPIs('', true);\n    assert.ok(genStub.called);\n    assert.ok(idxStub.calledOnce);\n  });",
            "file": "test.generator.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should read from disco if flag is passed",
            "suites": [],
            "updatePoint": {
                "line": 38,
                "column": 46
            },
            "line": 38,
            "code": "  it('should read from disco if flag is passed', async () => {\n    let downloadCalled = false;\n    const {Generator} = proxyquire('../src/generator/generator', {\n      './download': {\n        downloadDiscoveryDocs: async () => {\n          downloadCalled = true;\n        },\n      },\n    });\n    const generator = new Generator();\n    const genStub = sandbox.stub(generator, 'generateAPI').resolves();\n    const idxStub = sandbox.stub(generator, 'generateIndex').resolves();\n    const discoUrl = 'https://www.googleapis.com/discovery/v1/apis/';\n    await generator.generateAllAPIs(discoUrl, false);\n    assert.ok(genStub.called);\n    assert.ok(idxStub.calledOnce);\n    assert.ok(downloadCalled);\n  });",
            "file": "test.generator.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loads existing version from package.json",
            "suites": [],
            "updatePoint": {
                "line": 57,
                "column": 46
            },
            "line": 57,
            "code": "  it('loads existing version from package.json', async () => {\n    const generator = new gen.Generator();\n    const [pkgPath, pkgData] = await generator.getPkgPathAndData(\n      'src/apis/',\n      'bigquery',\n      'look I am bigquery',\n      '1.2.3'\n    );\n    assert.ok(pkgPath.endsWith('package.json'));\n    assert.strictEqual(pkgData.version, '0.1.0');\n    assert.strictEqual(pkgData.name, 'bigquery');\n    assert.strictEqual(pkgData.desc, 'look I am bigquery');\n  });",
            "file": "test.generator.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses default version if no package.json found",
            "suites": [],
            "updatePoint": {
                "line": 71,
                "column": 51
            },
            "line": 71,
            "code": "  it('uses default version if no package.json found', async () => {\n    const generator = new gen.Generator();\n    const [pkgPath, pkgData] = await generator.getPkgPathAndData(\n      'src/apis/',\n      'fake-api',\n      'look I am fake'\n    );\n    assert.ok(pkgPath.endsWith('package.json'));\n    assert.strictEqual(pkgData.version, '0.1.0');\n    assert.strictEqual(pkgData.name, 'fake-api');\n    assert.strictEqual(pkgData.desc, 'look I am fake');\n  });",
            "file": "test.generator.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should export bundled package interfaces",
            "suites": [],
            "updatePoint": {
                "line": 20,
                "column": 46
            },
            "line": 20,
            "code": "  it('should export bundled package interfaces', () => {\n    let p: Auth.OAuth2Client;\n    let q: Auth.Credentials;\n    let t: Common.StreamMethodOptions;\n    let v: Common.SchemaResource;\n  });",
            "file": "test.index.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should post progress for uploads",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 108,
                "column": 38
            },
            "line": 108,
            "code": "  it('should post progress for uploads', async () => {\n    const scope = nock('https://youtube.googleapis.com')\n      .post(\n        '/upload/youtube/v3/videos?part=id&part=snippet&notifySubscribers=false&uploadType=multipart'\n      )\n      .reply(200);\n    const fileName = path.join(__dirname, '../../test/fixtures/mediabody.txt');\n    const fileSize = fs.statSync(fileName).size;\n    const google = new GoogleApis();\n    const youtube = google.youtube('v3');\n    const progressEvents = new Array<number>();\n    await youtube.videos.insert(\n      {\n        part: ['id', 'snippet'],\n        notifySubscribers: false,\n        requestBody: {\n          snippet: {\n            title: 'Node.js YouTube Upload Test',\n            description:\n              'Testing YouTube upload via Google APIs Node.js Client',\n          },\n        },\n        media: {body: fs.createReadStream(fileName)},\n      },\n      {\n        onUploadProgress: (evt: {bytesRead: number}) => {\n          progressEvents.push(evt.bytesRead);\n        },\n      }\n    );\n    assert(progressEvents.length > 0);\n    assert.strictEqual(progressEvents[0], fileSize);\n    scope.done();\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should post progress for uploads, for APIs with empty requestBody",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 144,
                "column": 71
            },
            "line": 144,
            "code": "  it('should post progress for uploads, for APIs with empty requestBody', async () => {\n    const scope = nock('https://youtube.googleapis.com')\n      .post(\n        '/upload/youtube/v3/thumbnails/set?videoId=abc123&uploadType=multipart'\n      )\n      .reply(200);\n    const fileName = path.join(__dirname, '../../test/fixtures/mediabody.txt');\n    const fileSize = fs.statSync(fileName).size;\n    const google = new GoogleApis();\n    const youtube = google.youtube('v3');\n    const progressEvents = new Array<number>();\n    await youtube.thumbnails.set(\n      {\n        videoId: 'abc123',\n        requestBody: {},\n        media: {\n          mimeType: 'image/jpeg',\n          body: fs.createReadStream(fileName),\n        },\n      },\n      {\n        onUploadProgress: (evt: {bytesRead: number}) => {\n          progressEvents.push(evt.bytesRead);\n        },\n      }\n    );\n    assert(progressEvents.length > 0);\n    assert.strictEqual(progressEvents[0], fileSize);\n    scope.done();\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should post with uploadType=multipart if resource and media set",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 175,
                "column": 69
            },
            "line": 175,
            "code": "  it('should post with uploadType=multipart if resource and media set', async () => {\n    nock(Utils.baseUrl)\n      .post('/upload/drive/v2/files?uploadType=multipart')\n      .times(2)\n      .reply(200, {fileId: 'abc123'});\n\n    const res = await localDrive.files.insert({\n      requestBody: {},\n      media: {body: 'hello'},\n    });\n    assert.strictEqual(\n      JSON.stringify(res.data),\n      JSON.stringify({fileId: 'abc123'})\n    );\n    const res2 = await remoteDrive.files.insert({\n      requestBody: {},\n      media: {body: 'hello'},\n    });\n    assert.strictEqual(\n      JSON.stringify(res2.data),\n      JSON.stringify({fileId: 'abc123'})\n    );\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should post with uploadType=media media set but not resource",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 199,
                "column": 66
            },
            "line": 199,
            "code": "  it('should post with uploadType=media media set but not resource', async () => {\n    nock(Utils.baseUrl)\n      .post('/upload/drive/v2/files?uploadType=media')\n      .times(2)\n      .reply(200, {fileId: 'abc123'});\n    const res = await localDrive.files.insert({media: {body: 'hello'}});\n    assert.strictEqual(\n      JSON.stringify(res.data),\n      JSON.stringify({fileId: 'abc123'})\n    );\n    const res2 = await remoteDrive.files.insert({media: {body: 'hello'}});\n    assert.strictEqual(\n      JSON.stringify(res2.data),\n      JSON.stringify({fileId: 'abc123'})\n    );\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should generate a valid media upload if media is set, metadata is not set",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 216,
                "column": 79
            },
            "line": 216,
            "code": "  it('should generate a valid media upload if media is set, metadata is not set', async () => {\n    nock(Utils.baseUrl)\n      .post('/upload/drive/v2/files?uploadType=media')\n      .times(2)\n      .reply(201, (uri: string, reqBody: {}) => {\n        return reqBody; // return request body as response\n        // for testing purposes\n      });\n    const media = {body: 'hey'};\n    const res = await localDrive.files.insert({media});\n    assert.strictEqual(res.config.method!.toLowerCase(), 'post');\n    const url = new URL(res.config.url!);\n    assert.strictEqual(url.search, '?uploadType=media');\n    assert.strictEqual(url.pathname, '/upload/drive/v2/files');\n    assert.strictEqual(media.body, res.data);\n    const res2 = await remoteDrive.files.insert({media});\n    const url2 = new URL(res2.config.url!);\n    assert.strictEqual(res2.config.method!.toLowerCase(), 'post');\n    assert.strictEqual(url2.pathname, '/upload/drive/v2/files');\n    assert.strictEqual(url2.search, '?uploadType=media');\n    assert.strictEqual(media.body, res2.data);\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should generate valid multipart upload if media and metadata are both set",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 239,
                "column": 79
            },
            "line": 239,
            "code": "  it('should generate valid multipart upload if media and metadata are both set', async () => {\n    nock(Utils.baseUrl)\n      .post('/upload/drive/v2/files?uploadType=multipart')\n      .times(2)\n      .reply(201, (uri: string, reqBody: {}) => {\n        return reqBody; // return request body as response\n        // for testing purposes\n      });\n    await testMultpart(localDrive);\n    await testMultpart(remoteDrive);\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not require parameters for insertion requests",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 251,
                "column": 58
            },
            "line": 251,
            "code": "  it('should not require parameters for insertion requests', async () => {\n    nock(Utils.baseUrl)\n      .post('/upload/drive/v2/files?visibility=someValue&uploadType=media')\n      .twice()\n      .reply(200);\n    const res = await localDrive.files.insert({\n      visibility: 'someValue',\n      media: {body: 'wat'},\n    });\n    assert.strictEqual(\n      Utils.getQs(res),\n      'visibility=someValue&uploadType=media'\n    );\n    const res2 = await remoteDrive.files.insert({\n      visibility: 'someValue',\n      media: {body: 'wat'},\n    });\n    assert.strictEqual(\n      Utils.getQs(res2),\n      'visibility=someValue&uploadType=media'\n    );\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not multipart upload if no media body given",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 274,
                "column": 56
            },
            "line": 274,
            "code": "  it('should not multipart upload if no media body given', async () => {\n    nock(Utils.baseUrl)\n      .post('/drive/v2/files?visibility=someValue')\n      .twice()\n      .reply(200);\n    const res = await localDrive.files.insert({visibility: 'someValue'});\n    assert.strictEqual(Utils.getQs(res), 'visibility=someValue');\n    const res2 = await remoteDrive.files.insert({visibility: 'someValue'});\n    assert.strictEqual(Utils.getQs(res2), 'visibility=someValue');\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set text/plain when passed a string as media body",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 285,
                "column": 62
            },
            "line": 285,
            "code": "  it('should set text/plain when passed a string as media body', async () => {\n    nock(Utils.baseUrl)\n      .post('/upload/drive/v2/files?uploadType=multipart')\n      .times(2)\n      .reply(201, (uri: string, reqBody: {}) => {\n        return reqBody; // return request body as response for\n        // testing purposes\n      });\n\n    await testMediaBody(localDrive);\n    await testMediaBody(remoteDrive);\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle metadata-only media requests properly",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 298,
                "column": 57
            },
            "line": 298,
            "code": "  it('should handle metadata-only media requests properly', async () => {\n    nock(Utils.gmailUrl)\n      .post('/gmail/v1/users/me/drafts')\n      .times(2)\n      .reply(201, (uri: string, reqBody: {}) => {\n        return reqBody; // return request body as response for\n        // testing purposes\n      });\n    const requestBody = {\n      message: {raw: Buffer.from('hello', 'binary').toString('base64')},\n    };\n    const res = await localGmail.users.drafts.create({\n      userId: 'me',\n      requestBody,\n      media: {mimeType: 'message/rfc822'},\n    } as gmail_v1.Params$Resource$Users$Drafts$Create);\n    assert.strictEqual(\n      res.config.headers!['Content-Type'].indexOf('application/json'),\n      0\n    );\n    assert.strictEqual(JSON.stringify(res.data), JSON.stringify(requestBody));\n    const res2 = await remoteGmail.users.drafts.create({\n      userId: 'me',\n      requestBody,\n      media: {mimeType: 'message/rfc822'},\n    } as gmail_v1.Params$Resource$Users$Drafts$Create);\n    assert.strictEqual(\n      res2.config.headers!['Content-Type'].indexOf('application/json'),\n      0\n    );\n    assert.deepStrictEqual(res2.data, requestBody);\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept readable stream as media body without metadata",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 331,
                "column": 66
            },
            "line": 331,
            "code": "  it('should accept readable stream as media body without metadata', async () => {\n    nock(Utils.gmailUrl)\n      .post('/upload/gmail/v1/users/me/drafts?uploadType=media')\n      .times(2)\n      .reply(201, (uri: string, reqBody: {}) => {\n        return reqBody; // return request body as response for\n        // testing purposes\n      });\n    let body = fs.createReadStream(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt')\n    );\n    let expectedBody = fs.readFileSync(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt'),\n      'utf8'\n    );\n    const res = await localGmail.users.drafts.create({\n      userId: 'me',\n      media: {mimeType: 'message/rfc822', body},\n    } as gmail_v1.Params$Resource$Users$Drafts$Create);\n    assert.strictEqual(res.data, expectedBody);\n    body = fs.createReadStream(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt')\n    );\n    expectedBody = fs.readFileSync(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt'),\n      'utf8'\n    );\n    const res2 = await remoteGmail.users.drafts.create({\n      userId: 'me',\n      media: {mimeType: 'message/rfc822', body},\n    } as gmail_v1.Params$Resource$Users$Drafts$Create);\n    assert.strictEqual(res2.data, expectedBody);\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept readable stream as media body with metadata",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 365,
                "column": 63
            },
            "line": 365,
            "code": "  it('should accept readable stream as media body with metadata', async () => {\n    nock(Utils.gmailUrl)\n      .post('/upload/gmail/v1/users/me/drafts?uploadType=multipart')\n      .times(2)\n      .reply(201, (uri: string, reqBody: {}) => {\n        return reqBody; // return request body as response for testing\n        // purposes\n      });\n\n    let requestBody = {\n      message: {raw: Buffer.from('hello', 'binary').toString('base64')},\n    };\n    let body = fs.createReadStream(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt')\n    );\n    let bodyString = fs.readFileSync(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt'),\n      {encoding: 'utf8'}\n    );\n    let media = {mimeType: 'message/rfc822', body};\n    let expectedBody = fs.readFileSync(\n      path.join(__dirname, '../../test/fixtures/media-response.txt'),\n      {encoding: 'utf8'}\n    );\n    const res = await localGmail.users.drafts.create({\n      userId: 'me',\n      requestBody,\n      media,\n    });\n    const boundary = res.config.headers!['content-type'].replace(\n      boundaryPrefix,\n      ''\n    );\n    expectedBody = expectedBody\n      .replace(/\\r?\\n/g, '\\r\\n')\n      .replace(/\\$boundary/g, boundary)\n      .replace('$media', bodyString)\n      .replace('$resource', JSON.stringify(requestBody))\n      .replace('$mimeType', 'message/rfc822')\n      .trim();\n    assert.strictEqual(expectedBody, res.data);\n    requestBody = {\n      message: {raw: Buffer.from('hello', 'binary').toString('base64')},\n    };\n    body = fs.createReadStream(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt')\n    );\n    bodyString = fs.readFileSync(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt'),\n      {encoding: 'utf8'}\n    );\n    media = {mimeType: 'message/rfc822', body};\n    expectedBody = fs.readFileSync(\n      path.join(__dirname, '../../test/fixtures/media-response.txt'),\n      {encoding: 'utf8'}\n    );\n    const res2 = await remoteGmail.users.drafts.create({\n      userId: 'me',\n      requestBody,\n      media,\n    });\n    const boundary2 = res2.config.headers!['content-type'].replace(\n      boundaryPrefix,\n      ''\n    );\n    expectedBody = expectedBody\n      .replace(/\\r?\\n/g, '\\r\\n')\n      .replace(/\\$boundary/g, boundary2)\n      .replace('$media', bodyString)\n      .replace('$resource', JSON.stringify(requestBody))\n      .replace('$mimeType', 'message/rfc822')\n      .trim();\n    assert.strictEqual(expectedBody, res2.data);\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return err, {object}body, resp for streaming media requests",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 440,
                "column": 72
            },
            "line": 440,
            "code": "  it('should return err, {object}body, resp for streaming media requests', async () => {\n    nock(Utils.gmailUrl)\n      .post('/upload/gmail/v1/users/me/drafts?uploadType=multipart')\n      .times(2)\n      .reply(201, () => {\n        return JSON.stringify({hello: 'world'});\n      });\n\n    let requestBody = {\n      message: {raw: Buffer.from('hello', 'binary').toString('base64')},\n    };\n    const body = fs.createReadStream(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt')\n    );\n    let media = {mimeType: 'message/rfc822', body};\n    const res = await localGmail.users.drafts.create({\n      userId: 'me',\n      requestBody,\n      media,\n    });\n    assert.strictEqual(typeof res.data, 'object');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assert.strictEqual((res.data as any).hello, 'world');\n    assert.strictEqual(typeof res, 'object');\n    requestBody = {\n      message: {raw: Buffer.from('hello', 'binary').toString('base64')},\n    };\n    const body2 = fs.createReadStream(\n      path.join(__dirname, '../../test/fixtures/mediabody.txt')\n    );\n    media = {mimeType: 'message/rfc822', body: body2};\n    const res2 = await remoteGmail.users.drafts.create({\n      userId: 'me',\n      requestBody,\n      media,\n    });\n    assert.strictEqual(typeof res2.data, 'object');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assert.strictEqual((res2.data as any).hello, 'world');\n    assert.strictEqual(typeof res2, 'object');\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should provide unknown return types for media downloads",
            "suites": [
                "Media"
            ],
            "updatePoint": {
                "line": 482,
                "column": 61
            },
            "line": 482,
            "code": "  it('should provide unknown return types for media downloads', async () => {\n    const google = new GoogleApis();\n    const drive = google.drive('v3');\n    const scope = nock(Utils.baseUrl)\n      .get('/drive/v3/files/fileId/export?mimeType=mimeType')\n      .reply(200, '👋');\n    const res = await drive.files.export({\n      fileId: 'fileId',\n      mimeType: 'mimeType',\n    });\n    // this is just verifying that we can directly cast `res.data` from\n    // `unknown` to a string without type gymnastics\n    res.data as string;\n    scope.done();\n  });",
            "file": "test.media.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a function",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 50,
                "column": 26
            },
            "line": 50,
            "code": "  it('should be a function', () => {\n    const google = new GoogleApis();\n    assert.strictEqual(typeof google.options, 'function');\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should expose _options",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 55,
                "column": 28
            },
            "line": 55,
            "code": "  it('should expose _options', () => {\n    const google = new GoogleApis();\n    google.options({params: {hello: 'world'}});\n    assert.deepStrictEqual(google._options, {params: {hello: 'world'}});\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should expose _options values",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 61,
                "column": 35
            },
            "line": 61,
            "code": "  it('should expose _options values', () => {\n    const google = new GoogleApis();\n    google.options({params: {hello: 'world'}});\n    assert.deepStrictEqual(google._options.params.hello, 'world');\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should promote endpoint options over global options",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 67,
                "column": 57
            },
            "line": 67,
            "code": "  it('should promote endpoint options over global options', async () => {\n    const google = new GoogleApis();\n    google.options({params: {hello: 'world'}});\n    const drive = google.drive({version: 'v2', params: {hello: 'changed'}});\n    createNock('/drive/v2/files/123?hello=changed');\n    const res = await drive.files.get({fileId: '123'});\n    assert.strictEqual(res.config.params.hello, 'changed');\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support global request params",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 76,
                "column": 42
            },
            "line": 76,
            "code": "  it('should support global request params', async () => {\n    const google = new GoogleApis();\n    google.options({params: {myParam: '123'}});\n    const drive = google.drive('v2');\n    nock(Utils.baseUrl).get('/drive/v2/files/123?myParam=123').reply(200);\n    const res = await drive.files.get({fileId: '123'});\n    // If the default param handling is broken, query might be undefined, thus\n    // concealing the assertion message with some generic \"cannot call\n    // .indexOf of undefined\"\n    let query = Utils.getQs(res) || '';\n    assert.notStrictEqual(\n      query.indexOf('myParam=123'),\n      -1,\n      'Default param not found in query'\n    );\n    const d = await Utils.loadApi(google, 'drive', 'v2');\n    nock(Utils.baseUrl).get('/drive/v2/files/123?myParam=123').reply(200);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const res3 = await (d as any).files.get({fileId: '123'});\n    // If the default param handling is broken, query might be undefined,\n    // thus concealing the assertion message with some generic \"cannot\n    // call .indexOf of undefined\"\n    query = Utils.getQs(res3) || '';\n    assert.notStrictEqual(\n      query.indexOf('myParam=123'),\n      -1,\n      'Default param not found in query'\n    );\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should promote auth apikey options on request basis",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 106,
                "column": 57
            },
            "line": 106,
            "code": "  it('should promote auth apikey options on request basis', async () => {\n    const google = new GoogleApis();\n    google.options({auth: 'apikey1'});\n    const drive = google.drive({version: 'v2', auth: 'apikey2'});\n    createNock('/drive/v2/files/woot?key=apikey3');\n    const res = await drive.files.get({auth: 'apikey3', fileId: 'woot'});\n    assert.strictEqual(Utils.getQs(res), 'key=apikey3');\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use the same per-API setting twice",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 115,
                "column": 47
            },
            "line": 115,
            "code": "  it('should use the same per-API setting twice', async () => {\n    const google = new GoogleApis();\n    google.options({auth: 'apikey1'});\n    const drive = google.drive({version: 'v2', auth: 'apikey2'});\n    const scope = nock(Utils.baseUrl)\n      .get('/drive/v2/files/woot?key=apikey3')\n      .twice()\n      .reply(200);\n    for (let i = 0; i < 2; i++) {\n      const res = await drive.files.get({auth: 'apikey3', fileId: 'woot'});\n      assert.strictEqual(Utils.getQs(res), 'key=apikey3');\n    }\n    scope.done();\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should apply google options to request object like timeout",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 130,
                "column": 64
            },
            "line": 130,
            "code": "  it('should apply google options to request object like timeout', async () => {\n    const google = new GoogleApis();\n    google.options({timeout: 12345});\n    const drive = google.drive({version: 'v2', auth: 'apikey2'});\n    createNock('/drive/v2/files/woot?key=apikey3');\n    const res = await drive.files.get({auth: 'apikey3', fileId: 'woot'});\n    assert.strictEqual(res.config.timeout, 12345);\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should respect global options for user agent directives",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 139,
                "column": 61
            },
            "line": 139,
            "code": "  it('should respect global options for user agent directives', async () => {\n    const google = new GoogleApis();\n    const product = 'product';\n    const version = 'version';\n    google.options({\n      userAgentDirectives: [\n        {\n          product,\n          version,\n        },\n      ],\n    });\n    const drive = google.drive({version: 'v2', auth: 'apikey2'});\n    createNockRequestHeaders(\n      '/drive/v2/files/woot?key=apikey3',\n      'user-agent',\n      new RegExp(/product\\/version google-api-nodejs-client\\/.*[\\s\\S](gzip)/)\n    );\n    await drive.files.get({auth: 'apikey3', fileId: 'woot'});\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should NOT respect global options for root url",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 160,
                "column": 52
            },
            "line": 160,
            "code": "  it('should NOT respect global options for root url', async () => {\n    const google = new GoogleApis();\n    google.options({\n      rootUrl: 'http.example.com',\n    });\n    const drive = google.drive({version: 'v2', auth: 'apikey2'});\n    createNockRequestHeaders(\n      '/drive/v2/files/woot?key=apikey3',\n      'rootUrl',\n      'http.example.com'\n    );\n    assert.rejects(async () => {\n      await drive.files.get({auth: 'apikey3', fileId: 'woot'});\n    }, /reason: Nock: No match for request/);\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should apply endpoint options to request object like timeout",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 176,
                "column": 66
            },
            "line": 176,
            "code": "  it('should apply endpoint options to request object like timeout', async () => {\n    const google = new GoogleApis();\n    const drive = google.drive({\n      version: 'v2',\n      auth: 'apikey2',\n      timeout: 23456,\n    });\n    createNock('/drive/v2/files/woot?key=apikey3');\n    const res = await drive.files.get({auth: 'apikey3', fileId: 'woot'});\n    assert.strictEqual(res.config.timeout, 23456);\n    assert.strictEqual(Utils.getQs(res), 'key=apikey3');\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow overriding endpoint options",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 189,
                "column": 46
            },
            "line": 189,
            "code": "  it('should allow overriding endpoint options', async () => {\n    const google = new GoogleApis();\n    const drive = google.drive('v3');\n    const host = 'https://myproxy.com';\n    nock(host).get('/drive/v3/files/woot').reply(200);\n    const res = await drive.files.get(\n      {fileId: 'woot'},\n      {url: 'https://myproxy.com/drive/v3/files/{fileId}', timeout: 12345}\n    );\n\n    const url = new URL(res.config.url!);\n    assert.strictEqual(\n      url.pathname,\n      '/drive/v3/files/woot',\n      'Request used overridden url.'\n    );\n    assert.strictEqual(url.host, 'myproxy.com');\n    assert.strictEqual(\n      res.config.timeout,\n      12345,\n      'Axios used overridden timeout.'\n    );\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should apply endpoint options like timeout to oauth transporter",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 213,
                "column": 69
            },
            "line": 213,
            "code": "  it('should apply endpoint options like timeout to oauth transporter', async () => {\n    const google = new GoogleApis();\n    const OAuth2 = google.auth.OAuth2;\n    const authClient = new OAuth2('CLIENTID', 'CLIENTSECRET', 'REDIRECTURI');\n    authClient.credentials = {access_token: 'abc'};\n    const drive = google.drive({\n      version: 'v2',\n      auth: 'apikey2',\n      timeout: 12345,\n    });\n    createNock('/drive/v2/files/woot');\n    const res = await drive.files.get({auth: authClient, fileId: 'woot'});\n    assert.strictEqual(res.config.timeout, 12345);\n    assert.strictEqual(res.config.headers!.Authorization, 'Bearer abc');\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow overriding rootUrl via options",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 229,
                "column": 49
            },
            "line": 229,
            "code": "  it('should allow overriding rootUrl via options', async () => {\n    const google = new GoogleApis();\n    const drive = google.drive('v3');\n    const fileId = 'woot';\n    const rootUrl = 'https://myrooturl.com';\n    nock(rootUrl).get('/drive/v3/files/woot').reply(200);\n    const res = await drive.files.get({fileId}, {rootUrl});\n    assert.strictEqual(\n      res.config.url,\n      'https://myrooturl.com/drive/v3/files/woot',\n      'Request used overridden rootUrl with trailing slash.'\n    );\n\n    nock(rootUrl).get('/drive/v3/files/woot').reply(200);\n    await drive.files.get({fileId}, {rootUrl});\n    assert.strictEqual(\n      res.config.url,\n      'https://myrooturl.com/drive/v3/files/woot',\n      'Request used overridden rootUrl.'\n    );\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow overriding validateStatus",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 251,
                "column": 44
            },
            "line": 251,
            "code": "  it('should allow overriding validateStatus', async () => {\n    const scope = nock(Utils.baseUrl).get('/drive/v2/files').reply(500);\n    const google = new GoogleApis();\n    const drive = google.drive('v2');\n    const res = await drive.files.list({}, {validateStatus: () => true});\n    assert.strictEqual(res.status, 500);\n    scope.done();\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should provide properly typed responses",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 260,
                "column": 45
            },
            "line": 260,
            "code": "  it('should provide properly typed responses', async () => {\n    const scope = nock(Utils.baseUrl)\n      .get('/drive/v2/files')\n      .times(5)\n      .reply(200, {etag: '12345'});\n    const google = new GoogleApis();\n    const drive = google.drive('v2');\n\n    // typed response for json\n    const res1 = await drive.files.list({});\n    assert.ok(res1.data.etag);\n\n    // readable stream\n    const res2 = await drive.files.list({}, {responseType: 'stream'});\n    assert.ok(res2.data.resume);\n\n    // callback for json\n    await new Promise(resolve => {\n      drive.files.list({}, (err, res) => {\n        assert.ok(res?.data.etag);\n        resolve();\n      });\n    });\n\n    // callback with no params\n    await new Promise(resolve => {\n      drive.files.list((err, res) => {\n        assert.ok(res?.data.etag);\n        resolve();\n      });\n    });\n\n    await new Promise(resolve => {\n      drive.files.list({}, {responseType: 'stream'}, (err, res) => {\n        assert.ok(res?.data.resume);\n        resolve();\n      });\n    });\n\n    scope.done();\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow using a GoogleAuth object for auth",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 302,
                "column": 53
            },
            "line": 302,
            "code": "  it('should allow using a GoogleAuth object for auth', async () => {\n    const google = new GoogleApis();\n    const auth = new GoogleAuth();\n    const stub = sandbox.stub(auth, 'request').resolves({} as GaxiosResponse);\n    // global options\n    google.options({auth});\n    // per-API options\n    const drive = google.drive({version: 'v3', auth});\n    // per-call options\n    await drive.files.list({auth});\n    assert(stub.calledOnce);\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow using a Gaxios adapter",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 315,
                "column": 41
            },
            "line": 315,
            "code": "  it('should allow using a Gaxios adapter', async () => {\n    const scope = nock(Utils.baseUrl).get('/drive/v2/files').reply(500);\n    const google = new GoogleApis();\n    let count = 0;\n    google.options({\n      adapter: async (opts, defaultAdapter) => {\n        count++;\n        const reply = await defaultAdapter(opts);\n        count++;\n        return reply;\n      },\n    });\n    const drive = google.drive('v2');\n    const res = await drive.files.list({}, {validateStatus: () => true});\n    assert.strictEqual(res.status, 500);\n    assert.strictEqual(count, 2);\n    scope.done();\n  });",
            "file": "test.options.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not throw error if not included and required",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 40,
                "column": 57
            },
            "line": 40,
            "code": "  it('should not throw error if not included and required', done => {\n    assert.doesNotThrow(() => {\n      localDrive.files.get({}, Utils.noop);\n      remoteDrive.files.get({}, Utils.noop);\n      done();\n    });\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return an err object if not included and required",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 48,
                "column": 62
            },
            "line": 48,
            "code": "  it('should return an err object if not included and required', done => {\n    localDrive.files.get({}, (err: Error) => {\n      assert.notStrictEqual(err, null);\n      remoteDrive.files.get({}, (e: Error) => {\n        assert.notStrictEqual(e, null);\n        done();\n      });\n    });\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be mentioned in err.message when missing",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 58,
                "column": 53
            },
            "line": 58,
            "code": "  it('should be mentioned in err.message when missing', done => {\n    localDrive.files.get({}, (err: Error) => {\n      assert.notStrictEqual(\n        err.message.indexOf('fileId'),\n        -1,\n        'Missing param not mentioned in error'\n      );\n      remoteDrive.files.get({}, (e: Error) => {\n        assert.notStrictEqual(\n          e.message.indexOf('fileId'),\n          -1,\n          'Missing param not mentioned in error'\n        );\n        done();\n      });\n    });\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return null response object if not included and required",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 76,
                "column": 69
            },
            "line": 76,
            "code": "  it('should return null response object if not included and required', done => {\n    localDrive.files.get({}, (err: Error, resp: {}) => {\n      assert(err);\n      assert.strictEqual(resp, undefined);\n      remoteDrive.files.get({}, (e: Error, resp2: {}) => {\n        assert(e);\n        assert.strictEqual(resp2, undefined);\n        done();\n      });\n    });\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return null request object if not included and required",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 88,
                "column": 68
            },
            "line": 88,
            "code": "  it('should return null request object if not included and required', () => {\n    let req = localDrive.files.get({}, Utils.noop);\n    assert.strictEqual(req, undefined);\n    req = remoteDrive.files.get({}, Utils.noop);\n    assert.strictEqual(req, undefined);\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return null request object if not included and required and no callback",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 95,
                "column": 84
            },
            "line": 95,
            "code": "  it('should return null request object if not included and required and no callback', () => {\n    let req = localDrive.files.get({}, Utils.noop);\n    assert.strictEqual(req, undefined);\n    req = remoteDrive.files.get({}, Utils.noop);\n    assert.strictEqual(req, undefined);\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not be modifiable directly",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 102,
                "column": 39
            },
            "line": 102,
            "code": "  it('should not be modifiable directly', () => {\n    const options = {fileId: '123'};\n    assert.doesNotThrow(() => {\n      // should not modify options object\n      localDrive.files.get(options, Utils.noop);\n      localDrive.files.get(options, Utils.noop);\n      remoteDrive.files.get(options, Utils.noop);\n      remoteDrive.files.get(options, Utils.noop);\n    });\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be put in URL of path",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 113,
                "column": 34
            },
            "line": 113,
            "code": "  it('should be put in URL of path', done => {\n    const p = '/drive/v2/files/abc123';\n    nock(Utils.baseUrl).get(p).reply(200);\n    localDrive.files.get(\n      {fileId: 'abc123'},\n      (err: Error, res: GaxiosResponse) => {\n        if (err) {\n          return done(err);\n        }\n        assert.strictEqual(res.config.url, Utils.baseUrl + p);\n        nock(Utils.baseUrl).get(p).reply(200);\n        remoteDrive.files.get(\n          {fileId: 'abc123'},\n          (err2: Error, res2: GaxiosResponse) => {\n            if (err2) {\n              return done(err2);\n            }\n            assert.strictEqual(res2.config.url, Utils.baseUrl + p);\n            done();\n          }\n        );\n      }\n    );\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be put in URL of pathname",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 138,
                "column": 38
            },
            "line": 138,
            "code": "  it('should be put in URL of pathname', done => {\n    const p = '/drive/v2/files/123abc';\n    nock(Utils.baseUrl).get(p).reply(200);\n    localDrive.files.get(\n      {fileId: '123abc'},\n      (err: Error, res: GaxiosResponse) => {\n        if (err) {\n          return done(err);\n        }\n        assert.strictEqual(Utils.getPath(res), p);\n        nock(Utils.baseUrl).get(p).reply(200);\n        remoteDrive.files.get({fileId: '123abc'}, (err2: Error) => {\n          if (err2) {\n            return done(err2);\n          }\n          assert.strictEqual(Utils.getPath(res), p);\n          done();\n        });\n      }\n    );\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be urlencoded",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 160,
                "column": 26
            },
            "line": 160,
            "code": "  it('should be urlencoded', done => {\n    const p = `/drive/v2/files/${encodeURIComponent('p@ram')}`;\n    nock(Utils.baseUrl).get(p).reply(200);\n    localDrive.files.get(\n      {fileId: 'p@ram'},\n      (err: Error, res: GaxiosResponse) => {\n        if (err) {\n          return done(err);\n        }\n        const parm = Utils.getPath(res).split('/').pop();\n        assert.strictEqual(decodeURIComponent(parm!), 'p@ram');\n        nock(Utils.baseUrl).get(p).reply(200);\n        remoteDrive.files.get({fileId: 'p@ram'}, (err2: Error) => {\n          if (err2) {\n            return done(err2);\n          }\n          const parm = Utils.getPath(res).split('/').pop();\n          assert.strictEqual(decodeURIComponent(parm!), 'p@ram');\n          done();\n        });\n      }\n    );\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should keep query params null if only path params",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 184,
                "column": 55
            },
            "line": 184,
            "code": "  it('should keep query params null if only path params', done => {\n    const p = '/drive/v2/files/123abc';\n    nock(Utils.baseUrl).get(p).reply(200);\n    localDrive.files.get(\n      {fileId: '123abc'},\n      (err: Error, res: GaxiosResponse) => {\n        if (err) {\n          return done(err);\n        }\n        assert.strictEqual(Utils.getQs(res), null);\n        nock(Utils.baseUrl).get(p).reply(200);\n        remoteDrive.files.get(\n          {fileId: '123abc'},\n          (err2: Error, res2: GaxiosResponse) => {\n            if (err2) {\n              return done(err2);\n            }\n            assert.strictEqual(Utils.getQs(res2), null);\n            done();\n          }\n        );\n      }\n    );\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should keep query params as is",
            "suites": [
                "Path params"
            ],
            "updatePoint": {
                "line": 209,
                "column": 36
            },
            "line": 209,
            "code": "  it('should keep query params as is', done => {\n    const p = '/drive/v2/files/123abc?hello=world';\n    nock(Utils.baseUrl).get(p).reply(200);\n    localDrive.files.get(\n      {fileId: '123abc', hello: 'world'},\n      (err: Error, res: GaxiosResponse) => {\n        if (err) {\n          return done(err);\n        }\n        assert.strictEqual(Utils.getQs(res), 'hello=world');\n        nock(Utils.baseUrl).get(p).reply(200);\n        remoteDrive.files.get(\n          {fileId: '123abc', hello: 'world'},\n          (err2: Error) => {\n            if (err2) {\n              return done(err2);\n            }\n            assert.strictEqual(Utils.getQs(res), 'hello=world');\n            done();\n          }\n        );\n      }\n    );\n  });",
            "file": "test.path.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not append ? with no query parameters",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 47,
                "column": 50
            },
            "line": 47,
            "code": "  it('should not append ? with no query parameters', async () => {\n    nock(Utils.baseUrl).get('/drive/v2/files/ID').reply(200);\n    const res = await localDrive.files.get({fileId: 'ID'});\n    assert.strictEqual(-1, res.config.url.indexOf('?'));\n    nock(Utils.baseUrl).get('/drive/v2/files/ID').reply(200);\n    const res2 = await remoteDrive.files.get({fileId: 'ID'});\n    assert.strictEqual(-1, res2.config.url.indexOf('?'));\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be null if no object passed",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 56,
                "column": 40
            },
            "line": 56,
            "code": "  it('should be null if no object passed', async () => {\n    nock(Utils.baseUrl).get('/drive/v2/files').reply(200);\n    const res = await localDrive.files.list();\n    assert.strictEqual(Utils.getQs(res), null);\n    nock(Utils.baseUrl).get('/drive/v2/files').reply(200);\n    const res2 = await remoteDrive.files.list();\n    assert.strictEqual(Utils.getQs(res2), null);\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be null if params passed are in path",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 65,
                "column": 49
            },
            "line": 65,
            "code": "  it('should be null if params passed are in path', async () => {\n    nock(Utils.baseUrl).get('/drive/v2/files/123').reply(200);\n    const res = await localDrive.files.get({fileId: '123'});\n    assert.strictEqual(Utils.getQs(res), null);\n    nock(Utils.baseUrl).get('/drive/v2/files/123').reply(200);\n    await remoteDrive.files.get({fileId: '123'});\n    assert.strictEqual(Utils.getQs(res), null);\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be set if params passed are optional query params",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 74,
                "column": 62
            },
            "line": 74,
            "code": "  it('should be set if params passed are optional query params', async () => {\n    nock(Utils.baseUrl)\n      .get('/drive/v2/files/123?updateViewedDate=true')\n      .reply(200);\n    const res = await localDrive.files.get({\n      fileId: '123',\n      updateViewedDate: true,\n    });\n    assert.strictEqual(Utils.getQs(res), 'updateViewedDate=true');\n    nock(Utils.baseUrl)\n      .get('/drive/v2/files/123?updateViewedDate=true')\n      .reply(200);\n    const res2 = await remoteDrive.files.get({\n      fileId: '123',\n      updateViewedDate: true,\n    });\n    assert.strictEqual(Utils.getQs(res2), 'updateViewedDate=true');\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be set if params passed are unknown params",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 93,
                "column": 55
            },
            "line": 93,
            "code": "  it('should be set if params passed are unknown params', async () => {\n    nock(Utils.baseUrl).get('/drive/v2/files/123?madeThisUp=hello').reply(200);\n    const res = await localDrive.files.get({\n      fileId: '123',\n      madeThisUp: 'hello',\n    });\n    assert.strictEqual(Utils.getQs(res), 'madeThisUp=hello');\n    nock(Utils.baseUrl).get('/drive/v2/files/123?madeThisUp=hello').reply(200);\n    const res2 = await remoteDrive.files.get({\n      fileId: '123',\n      madeThisUp: 'hello',\n    });\n    assert.strictEqual(Utils.getQs(res2), 'madeThisUp=hello');\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be set if params passed are aliased names",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 108,
                "column": 54
            },
            "line": 108,
            "code": "  it('should be set if params passed are aliased names', async () => {\n    nock(Utils.baseUrl).get('/drive/v2/files/123?resource=hello').reply(200);\n    const res = await localDrive.files.get({fileId: '123', resource_: 'hello'});\n    assert.strictEqual(Utils.getQs(res), 'resource=hello');\n    nock(Utils.baseUrl).get('/drive/v2/files/123?resource=hello').reply(200);\n    const res2 = await remoteDrive.files.get({\n      fileId: '123',\n      resource_: 'hello',\n    });\n    assert.strictEqual(Utils.getQs(res2), 'resource=hello');\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be set if params passed are falsy",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 120,
                "column": 46
            },
            "line": 120,
            "code": "  it('should be set if params passed are falsy', async () => {\n    const computeRemoteUrl = 'https://compute.googleapis.com';\n    const r1 = nock(computeRemoteUrl)\n      .post(\n        '/compute/v1/projects//zones//instances//setDiskAutoDelete?autoDelete=false&deviceName='\n      )\n      .reply(200);\n    const res = await localCompute.instances.setDiskAutoDelete({\n      project: '',\n      zone: '',\n      instance: '',\n      autoDelete: false,\n      deviceName: '',\n    });\n    assert.strictEqual(Utils.getQs(res), 'autoDelete=false&deviceName=');\n    const r2 = nock(computeRemoteUrl)\n      .post(\n        '/compute/v1/projects//zones//instances//setDiskAutoDelete?autoDelete=false&deviceName='\n      )\n      .reply(200);\n    const res2 = await remoteCompute.instances.setDiskAutoDelete({\n      project: '',\n      zone: '',\n      instance: '',\n      autoDelete: false,\n      deviceName: '',\n    });\n    assert.strictEqual(Utils.getQs(res2), 'autoDelete=false&deviceName=');\n\n    const r3 = nock(computeRemoteUrl)\n      .post('/compute/v1/projects//zones//instanceGroupManagers//resize?size=0')\n      .reply(200);\n    const res3 = await localCompute.instanceGroupManagers.resize({\n      project: '',\n      zone: '',\n      instanceGroupManager: '',\n      size: 0,\n    });\n    assert.strictEqual(Utils.getQs(res3), 'size=0');\n\n    const r4 = nock(computeRemoteUrl)\n      .post('/compute/v1/projects//zones//instanceGroupManagers//resize?size=0')\n      .reply(200);\n    const res4 = await remoteCompute.instanceGroupManagers.resize({\n      project: '',\n      zone: '',\n      instanceGroupManager: '',\n      size: 0,\n    });\n    r1.done();\n    r2.done();\n    r3.done();\n    r4.done();\n    assert.strictEqual(Utils.getQs(res4), 'size=0');\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should chain together with & in order",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 176,
                "column": 43
            },
            "line": 176,
            "code": "  it('should chain together with & in order', async () => {\n    nock(Utils.baseUrl)\n      .get('/drive/v2/files/123?madeThisUp=hello&thisToo=world')\n      .reply(200);\n    const res = await localDrive.files.get({\n      fileId: '123',\n      madeThisUp: 'hello',\n      thisToo: 'world',\n    });\n    assert.strictEqual(Utils.getQs(res), 'madeThisUp=hello&thisToo=world');\n\n    nock(Utils.baseUrl)\n      .get('/drive/v2/files/123?madeThisUp=hello&thisToo=world')\n      .reply(200);\n    const res2 = await remoteDrive.files.get({\n      fileId: '123',\n      madeThisUp: 'hello',\n      thisToo: 'world',\n    });\n    assert.strictEqual(Utils.getQs(res2), 'madeThisUp=hello&thisToo=world');\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not include auth if auth is an OAuth2Client object",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 198,
                "column": 63
            },
            "line": 198,
            "code": "  it('should not include auth if auth is an OAuth2Client object', async () => {\n    const oauth2client = new google.auth.OAuth2(\n      'CLIENT_ID',\n      'CLIENT_SECRET',\n      'REDIRECT_URI'\n    );\n    oauth2client.credentials = {access_token: 'abc123'};\n\n    nock(Utils.baseUrl).get('/drive/v2/files/123').reply(200);\n    const res = await localDrive.files.get({fileId: '123', auth: oauth2client});\n    assert.strictEqual(Utils.getQs(res), null);\n\n    nock(Utils.baseUrl).get('/drive/v2/files/123').reply(200);\n    const res2 = await remoteDrive.files.get({\n      fileId: '123',\n      auth: oauth2client,\n    });\n    assert.strictEqual(Utils.getQs(res2), null);\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle multi-value query params properly",
            "suites": [
                "Query params"
            ],
            "updatePoint": {
                "line": 218,
                "column": 53
            },
            "line": 218,
            "code": "  it('should handle multi-value query params properly', async () => {\n    nock(Utils.gmailUrl)\n      .get(\n        '/gmail/v1/users/me/messages/abc123?metadataHeaders=To&metadataHeaders=Date'\n      )\n      .reply(200);\n    const res = await localGmail.users.messages.get({\n      userId: 'me',\n      id: 'abc123',\n      metadataHeaders: ['To', 'Date'],\n    });\n    assert.strictEqual(\n      Utils.getQs(res),\n      'metadataHeaders=To&metadataHeaders=Date'\n    );\n\n    nock(Utils.gmailUrl)\n      .get(\n        '/gmail/v1/users/me/messages/abc123?metadataHeaders=To&metadataHeaders=Date'\n      )\n      .reply(200);\n    const res2 = await remoteGmail.users.messages.get({\n      userId: 'me',\n      id: 'abc123',\n      metadataHeaders: ['To', 'Date'],\n    });\n    assert.strictEqual(\n      Utils.getQs(res2),\n      'metadataHeaders=To&metadataHeaders=Date'\n    );\n  });",
            "file": "test.query.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add fragments",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 26
            },
            "line": 23,
            "code": "  it('should add fragments', () => {\n    addFragments(schema);\n    const methods = getAllMethods(schema);\n    assert.strictEqual(methods.length, 1);\n    assert.ok(methods[0].fragment);\n  });",
            "file": "test.samplegen.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should run synth",
            "suites": [],
            "updatePoint": {
                "line": 56,
                "column": 22
            },
            "line": 56,
            "code": "  it('should run synth', async () => {\n    changeSets = [\n      {\n        api: {\n          id: 'blogger:v1',\n          name: 'blogger',\n        } as {} as Schema,\n        changes: [\n          {\n            action: 'ADDED',\n            keyName: 'key1',\n          },\n        ],\n      },\n    ];\n    stdout = `\n      On branch sub1\n      Changes not staged for commit:\n        (use \"git add <file>...\" to update what will be committed)\n        (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   src/apis/blogger/v1.ts\n    `;\n    process.env.GITHUB_TOKEN = '12345';\n    process.env.CODE_BOT_TOKEN = '12345';\n    const scope = nock('https://api.github.com')\n      .post('/repos/googleapis/google-api-nodejs-client/pulls')\n      .reply(200);\n    await synth.synth();\n    scope.done();\n  });",
            "file": "test.synth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should throw if no github token is provided",
            "suites": [],
            "updatePoint": {
                "line": 87,
                "column": 49
            },
            "line": 87,
            "code": "  it('should throw if no github token is provided', async () => {\n    process.env.GITHUB_TOKEN = '';\n    await assert.rejects(synth.synth, /please include a GITHUB_TOKEN/);\n  });",
            "file": "test.synth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should throw if no code bot token is provided",
            "suites": [],
            "updatePoint": {
                "line": 92,
                "column": 51
            },
            "line": 92,
            "code": "  it('should throw if no code bot token is provided', async () => {\n    process.env.CODE_BOT_TOKEN = '';\n    await assert.rejects(synth.synth, /please include a CODE_BOT_TOKEN/);\n  });",
            "file": "test.synth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should create a changelog",
            "suites": [],
            "updatePoint": {
                "line": 97,
                "column": 31
            },
            "line": 97,
            "code": "  it('should create a changelog', () => {\n    const changeSets: ChangeSet[] = [\n      {\n        api: {\n          id: 'fake',\n          name: 'fake',\n        } as {} as Schema,\n        changes: [\n          {\n            action: 'ADDED',\n            keyName: 'key1',\n          },\n        ],\n      },\n    ];\n    const {changelog} = synth.createChangelog(changeSets);\n    assert.ok(changelog.length > 0);\n  });",
            "file": "test.synth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get semverity for an add",
            "suites": [
                "semverity"
            ],
            "updatePoint": {
                "line": 117,
                "column": 39
            },
            "line": 117,
            "code": "    it('should get semverity for an add', async () => {\n      const changeSets: ChangeSet[] = [\n        {\n          api: {\n            id: 'fake',\n            name: 'fake',\n          } as {} as Schema,\n          changes: [\n            {\n              action: 'ADDED',\n              keyName: 'key1',\n            },\n          ],\n        },\n      ];\n      const semverity = synth.getSemverity(changeSets);\n      assert.strictEqual(semverity, synth.Semverity.MINOR);\n    });",
            "file": "test.synth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get semverity for a delete",
            "suites": [
                "semverity"
            ],
            "updatePoint": {
                "line": 136,
                "column": 41
            },
            "line": 136,
            "code": "    it('should get semverity for a delete', async () => {\n      const changeSets: ChangeSet[] = [\n        {\n          api: {\n            id: 'fake',\n            name: 'fake',\n          } as {} as Schema,\n          changes: [\n            {\n              action: 'DELETED',\n              keyName: 'key1',\n            },\n          ],\n        },\n      ];\n      const semverity = synth.getSemverity(changeSets);\n      assert.strictEqual(semverity, synth.Semverity.MAJOR);\n    });",
            "file": "test.synth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get semverity for an update",
            "suites": [
                "semverity"
            ],
            "updatePoint": {
                "line": 155,
                "column": 42
            },
            "line": 155,
            "code": "    it('should get semverity for an update', async () => {\n      const changeSets: ChangeSet[] = [\n        {\n          api: {\n            id: 'fake',\n            name: 'fake',\n          } as {} as Schema,\n          changes: [\n            {\n              action: 'CHANGED',\n              keyName: 'key1',\n            },\n          ],\n        },\n      ];\n      const semverity = synth.getSemverity(changeSets);\n      assert.strictEqual(semverity, synth.Semverity.PATCH);\n    });",
            "file": "test.synth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should choose the most impactful change",
            "suites": [
                "semverity"
            ],
            "updatePoint": {
                "line": 174,
                "column": 47
            },
            "line": 174,
            "code": "    it('should choose the most impactful change', async () => {\n      const changeSets: ChangeSet[] = [\n        {\n          api: {\n            id: 'fake',\n            name: 'fake',\n          } as {} as Schema,\n          changes: [\n            {\n              action: 'ADDED',\n              keyName: 'key1',\n            },\n            {\n              action: 'DELETED',\n              keyName: 'key2',\n            },\n          ],\n        },\n      ];\n      const semverity = synth.getSemverity(changeSets);\n      assert.strictEqual(semverity, synth.Semverity.MAJOR);\n    });",
            "file": "test.synth.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add headers to the request from params",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 192,
                "column": 51
            },
            "line": 192,
            "code": "  it('should add headers to the request from params', async () => {\n    await testHeaders(localDrive);\n    await testHeaders(remoteDrive);\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should automatically add content-type for POST requests",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 197,
                "column": 61
            },
            "line": 197,
            "code": "  it('should automatically add content-type for POST requests', async () => {\n    await testContentType(localDrive);\n    await testContentType(remoteDrive);\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add the proper gzip headers",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 202,
                "column": 40
            },
            "line": 202,
            "code": "  it('should add the proper gzip headers', async () => {\n    await testGzip(localDrive);\n    await testGzip(remoteDrive);\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not add body for GET requests",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 207,
                "column": 42
            },
            "line": 207,
            "code": "  it('should not add body for GET requests', async () => {\n    await testBody(localDrive);\n    await testBody(remoteDrive);\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not add body for DELETE requests",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 212,
                "column": 45
            },
            "line": 212,
            "code": "  it('should not add body for DELETE requests', async () => {\n    await testBodyDelete(localDrive);\n    await testBodyDelete(remoteDrive);\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return errors within response body as instances of Error",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 217,
                "column": 69
            },
            "line": 217,
            "code": "  it('should return errors within response body as instances of Error', async () => {\n    const scope = nock(Utils.baseUrl)\n      .get('/drive/v2/files?q=hello')\n      .times(2)\n      // Simulate an error returned via response body from\n      // Google's API endpoint\n      .reply(400, {error: {code: 400, message: 'Error!'}});\n    await testResponseError(localDrive);\n    await testResponseError(remoteDrive);\n    scope.done();\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return error message correctly when error is not an object",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 229,
                "column": 71
            },
            "line": 229,
            "code": "  it('should return error message correctly when error is not an object', async () => {\n    const scope = nock(Utils.baseUrl)\n      .post('/oauth2/v2/tokeninfo?access_token=hello')\n      .times(2)\n      // Simulate an error returned via response body from\n      // Google's tokeninfo endpoint\n      .reply(400, {\n        error: 'invalid_grant',\n        error_description: 'Code was already redeemed.',\n      });\n    await testNotObjectError(localOauth2);\n    await testNotObjectError(remoteOauth2);\n    scope.done();\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return 5xx responses as errors",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 244,
                "column": 43
            },
            "line": 244,
            "code": "  it('should return 5xx responses as errors', async () => {\n    const scope = nock('https://blogger.googleapis.com')\n      .post('/v3/blogs/abc123/posts/abc123/publish')\n      .times(2)\n      .reply(500, 'There was an error!');\n    await testBackendError(localBlogger);\n    await testBackendError(remoteBlogger);\n    scope.done();\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return 304 responses as success",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 254,
                "column": 44
            },
            "line": 254,
            "code": "  it('should return 304 responses as success', async () => {\n    const scope = nock(Utils.baseUrl).get('/drive/v2/files').reply(304);\n    const res = await localDrive.files.list();\n    assert.strictEqual(res.status, 304);\n    scope.done();\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle 5xx responses that include errors",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 261,
                "column": 53
            },
            "line": 261,
            "code": "  it('should handle 5xx responses that include errors', async () => {\n    const scope = nock('https://blogger.googleapis.com')\n      .post('/v3/blogs/abc123/posts/abc123/publish')\n      .times(2)\n      .reply(500, {\n        error: {message: 'There was an error!'},\n      });\n    await testBackendError(localBlogger);\n    await testBackendError(remoteBlogger);\n    scope.done();\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle a Backend Error",
            "suites": [
                "Transporters"
            ],
            "updatePoint": {
                "line": 273,
                "column": 35
            },
            "line": 273,
            "code": "  it('should handle a Backend Error', async () => {\n    const scope = nock('https://blogger.googleapis.com')\n      .post('/v3/blogs/abc123/posts/abc123/publish')\n      .times(2)\n      .reply(500, {\n        error: {\n          errors: [\n            {\n              domain: 'global',\n              reason: 'backendError',\n              message: 'There was an error!',\n            },\n          ],\n          code: 500,\n          message: 'There was an error!',\n        },\n      });\n    await testBackendError(localBlogger);\n    await testBackendError(remoteBlogger);\n    scope.done();\n  });",
            "file": "test.transporters.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should list all the VMs",
            "suites": [
                "Compute samples"
            ],
            "updatePoint": {
                "line": 25,
                "column": 29
            },
            "line": 25,
            "code": "  it('should list all the VMs', async () => {\n    const res = execa.sync('node compute/listVMs.js', {\n      shell: true\n    });\n    assert.ok(/VMs:/.test(res.stdout));\n  });",
            "file": "test.compute.samples.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should batchGet",
            "suites": [
                "analyticsReporting samples"
            ],
            "updatePoint": {
                "line": 47,
                "column": 21
            },
            "line": 47,
            "code": "  it('should batchGet', async () => {\n    const scope = nock(baseUrl).post('/v4/reports:batchGet').reply(200, {});\n    const data = await batchGet();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.analyticsReporting.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should support JWT",
            "suites": [
                "Auth samples"
            ],
            "updatePoint": {
                "line": 38,
                "column": 24
            },
            "line": 38,
            "code": "  it('should support JWT', async () => {\n    const scope = nock('https://www.googleapis.com').get('/drive/v2/files').reply(200, {}).post('/oauth2/v4/token').reply(200, {\n      access_token: 'not-a-token'\n    });\n    const fakePath = path.resolve('../test/fixtures/service.json');\n    const realPath = path.resolve('jwt.keys.json');\n    const exists = fs.existsSync(realPath);\n\n    if (!exists) {\n      const contents = fs.readFileSync(fakePath);\n      fs.writeFileSync(realPath, contents);\n    }\n\n    const data = await samples.jwt.runSample();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.auth.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should accept an access token header",
            "suites": [
                "Auth samples"
            ],
            "updatePoint": {
                "line": 55,
                "column": 42
            },
            "line": 55,
            "code": "  it('should accept an access token header', async () => {\n    const scope = nock('https://www.googleapis.com').get('/drive/v2/files').reply(200, {});\n    const res = await samples.accessToken.runSample(12345);\n    assert.strictEqual(res.config.headers['Authorization'], 'Bearer 12345');\n    scope.done();\n  });",
            "file": "test.samples.auth.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should insert a blog post",
            "suites": [
                "blogger samples"
            ],
            "updatePoint": {
                "line": 47,
                "column": 31
            },
            "line": 47,
            "code": "  it('should insert a blog post', async () => {\n    const scope = nock(baseUrl).post('/v3/blogs/4340475495955554224/posts').reply(200, {});\n    const data = await insert();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.blog.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should search",
            "suites": [
                "customsearch samples"
            ],
            "updatePoint": {
                "line": 34,
                "column": 19
            },
            "line": 34,
            "code": "  it('should search', async () => {\n    const scope = nock(baseUrl).get('/customsearch/v1?cx=cx&q=q').reply(200, {});\n    const options = {\n      cx: 'cx',\n      q: 'q',\n      auth: 'key'\n    };\n    const data = await samples.list.runSample(options);\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.customsearch.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should create a doc",
            "suites": [
                "docs samples"
            ],
            "updatePoint": {
                "line": 59,
                "column": 25
            },
            "line": 59,
            "code": "  it('should create a doc', async () => {\n    const scope = nock(baseUrl).post('/v1/documents').reply(200, {\n      documentId: 'toast'\n    }).post('/v1/documents/toast:batchUpdate').reply(200, {});\n    const data = await samples.create.runSample();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.docs.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should get a doc",
            "suites": [
                "docs samples"
            ],
            "updatePoint": {
                "line": 67,
                "column": 22
            },
            "line": 67,
            "code": "  it('should get a doc', async () => {\n    const documentId = '1XPbMENiP5bWP_cbqc0bEWbq78vmUf-rWQ6aB6FVZJyc';\n    const scope = nock(baseUrl).get(`/v1/documents/${documentId}`).reply(200, {});\n    const data = await samples.get.runSample();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.docs.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should download the file",
            "suites": [
                "Drive samples"
            ],
            "updatePoint": {
                "line": 72,
                "column": 30
            },
            "line": 72,
            "code": "  it('should download the file', async () => {\n    const fileId = '0B7l5uajXUzaFa0x6cjJfZEkzZVE';\n    const scope = nock(baseUrl).get(`/drive/v3/files/${fileId}?alt=media`).replyWithFile(200, someFile);\n    const filePath = await samples.download.runSample(fileId);\n    assert(fs.existsSync(filePath));\n    scope.done();\n  });",
            "file": "test.samples.drive.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should download the doc",
            "suites": [
                "Drive samples"
            ],
            "updatePoint": {
                "line": 79,
                "column": 29
            },
            "line": 79,
            "code": "  it('should download the doc', async () => {\n    const fileId = '1EkgdLY3T-_9hWml0VssdDWQZLEc8qqpMB77Nvsx6khA';\n    const scope = nock(baseUrl).get(`/drive/v3/files/${fileId}/export?mimeType=application%2Fpdf`).replyWithFile(200, someFile);\n    await samples.export.runSample();\n    assert(fs.existsSync(`${os.tmpdir()}/important.pdf`));\n    scope.done();\n  });",
            "file": "test.samples.drive.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should list all the docs",
            "suites": [
                "Drive samples"
            ],
            "updatePoint": {
                "line": 86,
                "column": 30
            },
            "line": 86,
            "code": "  it('should list all the docs', async () => {\n    const scope = nock(baseUrl).get('/drive/v3/files?pageSize=3').reply(200, {});\n    const data = await samples.list.runSample();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.drive.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should upload a file",
            "suites": [
                "Drive samples"
            ],
            "updatePoint": {
                "line": 92,
                "column": 26
            },
            "line": 92,
            "code": "  it('should upload a file', async () => {\n    const scope = nock(baseUrl).post('/upload/drive/v3/files?uploadType=multipart').reply(200, {});\n    const data = await samples.upload.runSample(someFile);\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.drive.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should list emails",
            "suites": [
                "gmail samples"
            ],
            "updatePoint": {
                "line": 65,
                "column": 24
            },
            "line": 65,
            "code": "  it('should list emails', async () => {\n    const scope = nock(gmailUrl).get('/gmail/v1/users/me/messages').reply(200, {});\n    const data = await samples.list.runSample();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.gmail.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should add a label",
            "suites": [
                "gmail samples"
            ],
            "updatePoint": {
                "line": 71,
                "column": 24
            },
            "line": 71,
            "code": "  it('should add a label', async () => {\n    const messageId = '12345';\n    const labelId = 'abcde';\n    const scope = nock(gmailUrl).post(`/gmail/v1/users/me/messages/${messageId}/modify`).reply(200, {});\n    const data = await samples.labels.runSample('add', messageId, labelId);\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.gmail.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should add a user watch",
            "suites": [
                "gmail samples"
            ],
            "updatePoint": {
                "line": 79,
                "column": 29
            },
            "line": 79,
            "code": "  it('should add a user watch', async () => {\n    const scope = nock(gmailUrl).post('/gmail/v1/users/me/watch').reply(200, {\n      data: true\n    });\n    const data = await samples.watch.runSample();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.gmail.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should send an email",
            "suites": [
                "gmail samples"
            ],
            "updatePoint": {
                "line": 87,
                "column": 26
            },
            "line": 87,
            "code": "  it('should send an email', async () => {\n    const scope = nock(gmailUrl).post('/gmail/v1/users/me/messages/send').reply(200, {});\n    const data = await samples.send.runSample();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.gmail.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should append values",
            "suites": [
                "sheets samples"
            ],
            "updatePoint": {
                "line": 56,
                "column": 26
            },
            "line": 56,
            "code": "  it('should append values', async () => {\n    const range = 'A1:A10';\n    const scope = nock(baseUrl).post(`/v4/spreadsheets/aSheetId/values/${encodeURIComponent(range)}:append?valueInputOption=USER_ENTERED`).reply(200, {});\n    const data = await samples.append.runSample('aSheetId', 'A1:A10');\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.sheets.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should query analytics",
            "suites": [
                "webmaster samples"
            ],
            "updatePoint": {
                "line": 55,
                "column": 28
            },
            "line": 55,
            "code": "  it('should query analytics', async () => {\n    const siteUrl = 'http://jbeckwith.com';\n    const path = `/webmasters/v3/sites/${encodeURIComponent(siteUrl)}/searchAnalytics/query`;\n    const scope = nock('https://www.googleapis.com').post(path).reply(200, {});\n    const data = await samples.query.runSample();\n    assert(data);\n    scope.done();\n  });",
            "file": "test.samples.webmasters.js",
            "skipped": false,
            "dir": "samples/test"
        },
        {
            "name": "should upload a video",
            "suites": [
                "YouTube samples"
            ],
            "updatePoint": {
                "line": 58,
                "column": 27
            },
            "line": 58,
            "code": "  it('should upload a video', async () => {\n    const scope = nock('https://youtube.googleapis.com').post('/upload/youtube/v3/videos?part=id%2Csnippet%2Cstatus&notifySubscribers=false&uploadType=multipart').reply(200, {\n      kind: 'youtube#video'\n    });\n    const data = await samples.upload.runSample(someFile);\n    assert(data);\n    assert.strictEqual(data.kind, 'youtube#video');\n    scope.done();\n  });",
            "file": "test.samples.youtube.js",
            "skipped": false,
            "dir": "samples/test"
        }
    ],
    "badge": "googleapis__google-api-nodejs-client.svg"
}