{"repo":"react-bootstrap/react-bootstrap","url":"https://github.com/react-bootstrap/react-bootstrap","branch":"master","configs":[{"package":"react-bootstrap","lang":"ts","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should add Modal","suites":["BootstrapModalManager"],"updatePoint":{"line":39,"column":22},"line":39,"code":"  it('should add Modal', () => {\n    const modal = createModal();\n\n    manager.add(modal);\n\n    expect(manager.modals.length).to.equal(1);\n    expect(manager.modals[0]).to.equal(modal);\n\n    expect(manager.state).to.eql({\n      scrollBarWidth: 0,\n      style: {\n        overflow: '',\n        paddingRight: '',\n      },\n    });\n  });","file":"BootstrapModalManagerSpec.ts","skipped":false,"dir":"test"},{"name":"should return a shared modal manager","suites":["BootstrapModalManager"],"updatePoint":{"line":56,"column":42},"line":56,"code":"  it('should return a shared modal manager', () => {\n    const localManager = getSharedManager();\n    localManager.should.exist;\n  });","file":"BootstrapModalManagerSpec.ts","skipped":false,"dir":"test"},{"name":"should return a same modal manager if called twice","suites":["BootstrapModalManager"],"updatePoint":{"line":61,"column":56},"line":61,"code":"  it('should return a same modal manager if called twice', () => {\n    let localManager = getSharedManager();\n    localManager.should.exist;\n\n    const modal = createModal();\n    localManager.add(modal as any);\n    localManager.modals.length.should.equal(1);\n\n    localManager = getSharedManager();\n    localManager.modals.length.should.equal(1);\n\n    localManager.remove(modal as any);\n  });","file":"BootstrapModalManagerSpec.ts","skipped":false,"dir":"test"},{"name":"should set padding to right side","suites":["BootstrapModalManager","container styles"],"updatePoint":{"line":92,"column":40},"line":92,"code":"    it('should set padding to right side', () => {\n      const modal = createModal();\n      manager.add(modal);\n\n      expect(document.body.style.paddingRight).to.equal(\n        `${getScrollbarSize() + 20}px`,\n      );\n    });","file":"BootstrapModalManagerSpec.ts","skipped":false,"dir":"test"},{"name":"should set padding to left side if RTL","suites":["BootstrapModalManager","container styles"],"updatePoint":{"line":101,"column":46},"line":101,"code":"    it('should set padding to left side if RTL', () => {\n      const modal = createModal();\n\n      new BootstrapModalManager({ isRTL: true }).add(modal as any);\n\n      expect(document.body.style.paddingLeft).to.equal(\n        `${getScrollbarSize() + 20}px`,\n      );\n    });","file":"BootstrapModalManagerSpec.ts","skipped":false,"dir":"test"},{"name":"should restore container overflow style","suites":["BootstrapModalManager","container styles"],"updatePoint":{"line":111,"column":47},"line":111,"code":"    it('should restore container overflow style', () => {\n      const modal = createModal();\n\n      document.body.style.overflow = 'scroll';\n\n      expect(document.body.style.overflow).to.equal('scroll');\n\n      manager.add(modal);\n      manager.remove(modal);\n\n      expect(document.body.style.overflow).to.equal('scroll');\n      document.body.style.overflow = '';\n    });","file":"BootstrapModalManagerSpec.ts","skipped":false,"dir":"test"},{"name":"should restore container overflow style for RTL","suites":["BootstrapModalManager","container styles"],"updatePoint":{"line":125,"column":55},"line":125,"code":"    it('should restore container overflow style for RTL', () => {\n      const modal = createModal();\n\n      document.body.style.overflow = 'scroll';\n\n      expect(document.body.style.overflow).to.equal('scroll');\n\n      const localManager = new BootstrapModalManager({ isRTL: true });\n      localManager.add(modal as any);\n      localManager.remove(modal as any);\n\n      expect(document.body.style.overflow).to.equal('scroll');\n      document.body.style.overflow = '';\n    });","file":"BootstrapModalManagerSpec.ts","skipped":false,"dir":"test"},{"name":"returns null with no arguments","suites":["createChainedFunction"],"updatePoint":{"line":7,"column":36},"line":7,"code":"  it('returns null with no arguments', () => {\n    expect(createChainedFunction()).to.equal(null);\n  });","file":"createChainedFunctionSpec.ts","skipped":false,"dir":"test"},{"name":"returns original function when single function is provided","suites":["createChainedFunction"],"updatePoint":{"line":11,"column":64},"line":11,"code":"  it('returns original function when single function is provided', () => {\n    const func1 = sinon.stub();\n    createChainedFunction(func1).should.equal(func1);\n  });","file":"createChainedFunctionSpec.ts","skipped":false,"dir":"test"},{"name":"wraps two functions with another that invokes both when called","suites":["createChainedFunction"],"updatePoint":{"line":16,"column":68},"line":16,"code":"  it('wraps two functions with another that invokes both when called', () => {\n    const func1 = sinon.stub();\n    const func2 = sinon.stub();\n    const chained = createChainedFunction(func1, func2);\n\n    chained.should.not.equal(func1).and.should.not.equal(func2);\n\n    func1.should.not.have.been.called;\n    func2.should.not.have.been.called;\n\n    chained();\n\n    func1.should.have.been.calledOnce;\n    func2.should.have.been.calledOnce;\n  });","file":"createChainedFunctionSpec.ts","skipped":false,"dir":"test"},{"name":"wraps multiple functions and invokes them in the order provided","suites":["createChainedFunction"],"updatePoint":{"line":32,"column":69},"line":32,"code":"  it('wraps multiple functions and invokes them in the order provided', () => {\n    const results: number[] = [];\n    const func1 = () => results.push(1);\n    const func2 = () => results.push(2);\n    const func3 = () => results.push(3);\n    const chained = createChainedFunction(func1, func2, func3);\n    chained();\n    results.should.eql([1, 2, 3]);\n  });","file":"createChainedFunctionSpec.ts","skipped":false,"dir":"test"},{"name":"forwards arguments to all chained functions","suites":["createChainedFunction"],"updatePoint":{"line":42,"column":49},"line":42,"code":"  it('forwards arguments to all chained functions', () => {\n    const in1 = 'herpa derpa';\n    const in2 = {\n      herpa: 'derpa',\n    };\n\n    const func = (arg1: any, arg2: any) => {\n      arg1.should.equal(in1);\n      arg2.should.equal(in2);\n    };\n\n    const chained = createChainedFunction(func, func, func);\n    chained(in1, in2);\n  });","file":"createChainedFunctionSpec.ts","skipped":false,"dir":"test"},{"name":"throws when func is not provided","suites":["createChainedFunction"],"updatePoint":{"line":57,"column":38},"line":57,"code":"  it('throws when func is not provided', () => {\n    expect(() => {\n      createChainedFunction({ herpa: 'derpa' });\n    }).to.throw(/Invalid Argument Type/);\n  });","file":"createChainedFunctionSpec.ts","skipped":false,"dir":"test"},{"name":"works with new Function call","suites":["createChainedFunction"],"updatePoint":{"line":63,"column":34},"line":63,"code":"  it('works with new Function call', () => {\n    const results = [];\n    const func1 = new Function('results', 'results.push(1);');\n    const func2 = new Function('results', 'results.push(2);');\n    const chained = createChainedFunction(func1, func2);\n    chained(results);\n    results.should.eql([1, 2]);\n  });","file":"createChainedFunctionSpec.ts","skipped":false,"dir":"test"},{"name":"should not create a class when value is not defined","suites":["createUtilityClassName"],"updatePoint":{"line":4,"column":57},"line":4,"code":"  it('should not create a class when value is not defined', () => {\n    const classList = createUtilityClasses({\n      gap: undefined,\n    });\n\n    classList.length.should.equal(0);\n  });","file":"createUtilityClassesSpec.ts","skipped":false,"dir":"test"},{"name":"should handle falsy values","suites":["createUtilityClassName"],"updatePoint":{"line":12,"column":32},"line":12,"code":"  it('should handle falsy values', () => {\n    const classList = createUtilityClasses({\n      gap: 0,\n    });\n\n    classList.length.should.equal(1);\n    classList.should.include.all.members(['gap-0']);\n  });","file":"createUtilityClassesSpec.ts","skipped":false,"dir":"test"},{"name":"should handle responsive falsy values","suites":["createUtilityClassName"],"updatePoint":{"line":21,"column":43},"line":21,"code":"  it('should handle responsive falsy values', () => {\n    const classList = createUtilityClasses({\n      gap: { xs: 0, md: 0 },\n    });\n\n    classList.length.should.equal(2);\n    classList.should.include.all.members(['gap-0', 'gap-md-0']);\n  });","file":"createUtilityClassesSpec.ts","skipped":false,"dir":"test"},{"name":"should return `utilityName-value` when value is a primitive","suites":["createUtilityClassName"],"updatePoint":{"line":30,"column":65},"line":30,"code":"  it('should return `utilityName-value` when value is a primitive', () => {\n    const classList = createUtilityClasses({\n      gap: 2,\n    });\n\n    classList.length.should.equal(1);\n    classList.should.include.all.members(['gap-2']);\n  });","file":"createUtilityClassesSpec.ts","skipped":false,"dir":"test"},{"name":"should return responsive class when value is a responsive type","suites":["createUtilityClassName"],"updatePoint":{"line":39,"column":68},"line":39,"code":"  it('should return responsive class when value is a responsive type', () => {\n    const classList = createUtilityClasses({\n      gap: { xs: 2, lg: 3, xxl: 4 },\n    });\n\n    classList.length.should.equal(3);\n    classList.should.include.all.members(['gap-2', 'gap-lg-3', 'gap-xxl-4']);\n  });","file":"createUtilityClassesSpec.ts","skipped":false,"dir":"test"},{"name":"should return multiple classes","suites":["createUtilityClassName"],"updatePoint":{"line":48,"column":36},"line":48,"code":"  it('should return multiple classes', () => {\n    const classList = createUtilityClasses({\n      gap: { xs: 2, lg: 3, xxl: 4 },\n      text: { xs: 'start', md: 'end', xl: 'start' },\n    });\n\n    classList.length.should.equal(6);\n    classList.should.include.all.members([\n      'gap-2',\n      'gap-lg-3',\n      'gap-xxl-4',\n      'text-start',\n      'text-md-end',\n      'text-xl-start',\n    ]);\n  });","file":"createUtilityClassesSpec.ts","skipped":false,"dir":"test"},{"name":"should handle custom breakpoints","suites":["createUtilityClassName"],"updatePoint":{"line":65,"column":38},"line":65,"code":"  it('should handle custom breakpoints', () => {\n    const classList = createUtilityClasses(\n      {\n        gap: { xs: 2, custom: 3 },\n      },\n      ['xs', 'custom'],\n    );\n\n    classList.length.should.equal(2);\n    classList.should.include.all.members(['gap-2', 'gap-custom-3']);\n  });","file":"createUtilityClassesSpec.ts","skipped":false,"dir":"test"},{"name":"defaults to absolute positioning when no strategy is provided","suites":["getInitialPopperStyles"],"updatePoint":{"line":5,"column":67},"line":5,"code":"  it('defaults to absolute positioning when no strategy is provided', () => {\n    expect(getInitialPopperStyles()).to.eql({\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      opacity: '0',\n      pointerEvents: 'none',\n    });\n  });","file":"getInitialPopperStylesSpec.ts","skipped":false,"dir":"test"},{"name":"sets the position to the provided strategy","suites":["getInitialPopperStyles"],"updatePoint":{"line":15,"column":48},"line":15,"code":"  it('sets the position to the provided strategy', () => {\n    expect(getInitialPopperStyles('fixed')).to.eql({\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      opacity: '0',\n      pointerEvents: 'none',\n    });\n  });","file":"getInitialPopperStylesSpec.ts","skipped":false,"dir":"test"},{"name":"should return start for left","suites":["Helpers","getOverlayDirection"],"updatePoint":{"line":5,"column":36},"line":5,"code":"    it('should return start for left', () => {\n      getOverlayDirection('left', false).should.equal('start');\n    });","file":"helpersSpec.ts","skipped":false,"dir":"test"},{"name":"should return end for left in RTL","suites":["Helpers","getOverlayDirection"],"updatePoint":{"line":9,"column":41},"line":9,"code":"    it('should return end for left in RTL', () => {\n      getOverlayDirection('left', true).should.equal('end');\n    });","file":"helpersSpec.ts","skipped":false,"dir":"test"},{"name":"should return end for right","suites":["Helpers","getOverlayDirection"],"updatePoint":{"line":13,"column":35},"line":13,"code":"    it('should return end for right', () => {\n      getOverlayDirection('right', false).should.equal('end');\n    });","file":"helpersSpec.ts","skipped":false,"dir":"test"},{"name":"should return start for right in RTL","suites":["Helpers","getOverlayDirection"],"updatePoint":{"line":17,"column":44},"line":17,"code":"    it('should return start for right in RTL', () => {\n      getOverlayDirection('right', true).should.equal('start');\n    });","file":"helpersSpec.ts","skipped":false,"dir":"test"},{"name":"should not be production for React console warnings","suites":["Process environment for tests"],"updatePoint":{"line":73,"column":57},"line":73,"code":"  it('should not be production for React console warnings', () => {\n    expect(process.env.NODE_ENV).to.not.equal('production');\n  });","file":"index.js","skipped":false,"dir":"test"}]}