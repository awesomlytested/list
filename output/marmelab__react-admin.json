{"repo":"marmelab/react-admin","url":"https://github.com/marmelab/react-admin","branch":"master","configs":[{"package":"react-admin-lerna","lang":"js","dir":"cypress","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should go to login page after logout","suites":["Authentication"],"updatePoint":{"line":6,"column":42,"index":280},"line":6,"code":"  it('should go to login page after logout', () => {\n    ListPage.navigate();\n    ListPage.logout();\n    cy.url().then(url => expect(url).to.contain('/#/login'));\n  });","file":"integration/auth.js","skipped":false,"dir":"cypress"},{"name":"should redirect to login page when not logged in","suites":["Authentication"],"updatePoint":{"line":11,"column":54,"index":461},"line":11,"code":"  it('should redirect to login page when not logged in', () => {\n    ListPage.navigate();\n    ListPage.logout();\n    ListPage.navigate();\n    cy.url().should('contain', '/#/login');\n  });","file":"integration/auth.js","skipped":false,"dir":"cypress"},{"name":"should not login with incorrect credentials","suites":["Authentication"],"updatePoint":{"line":17,"column":49,"index":644},"line":17,"code":"  it('should not login with incorrect credentials', () => {\n    ListPage.navigate();\n    ListPage.logout();\n    LoginPage.login('foo', 'bar');\n    cy.contains('Authentication failed, please retry');\n  });","file":"integration/auth.js","skipped":false,"dir":"cypress"},{"name":"should login with correct credentials","suites":["Authentication"],"updatePoint":{"line":23,"column":43,"index":843},"line":23,"code":"  it('should login with correct credentials', () => {\n    ListPage.navigate();\n    ListPage.logout();\n    LoginPage.login('login', 'password');\n    ListPage.navigate();\n    cy.url().then(url => expect(url).to.contain('/#/posts'));\n  });","file":"integration/auth.js","skipped":false,"dir":"cypress"},{"name":"should redirect to initial url keeping query string","suites":["Authentication"],"updatePoint":{"line":30,"column":57,"index":1094},"line":30,"code":"  it('should redirect to initial url keeping query string', () => {\n    let urlBeforeLogout;\n    ListPage.navigate();\n    ListPage.addCommentableFilter();\n    cy.url().then(url => {\n      urlBeforeLogout = url;\n    });\n    ListPage.setAsNonLogged();\n    cy.reload();\n    LoginPage.login('login', 'password');\n    cy.url().then(urlAfterLogin => {\n      expect(urlAfterLogin).to.contain(urlBeforeLogout);\n    });\n    ListPage.commentableFilter().should('exist');\n  });","file":"integration/auth.js","skipped":false,"dir":"cypress"},{"name":"should show the correct title in the appBar","suites":["Create Page"],"updatePoint":{"line":15,"column":49,"index":660},"line":15,"code":"  it('should show the correct title in the appBar', () => {\n    cy.get(CreatePage.elements.title).contains('Create Post');\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should put the current date in the field by default","suites":["Create Page"],"updatePoint":{"line":18,"column":57,"index":797},"line":18,"code":"  it('should put the current date in the field by default', () => {\n    const currentDate = new Date();\n    const currentDateString = currentDate.toISOString().slice(0, 10);\n    cy.get(CreatePage.elements.input('published_at')).should(el => expect(el).to.have.value(currentDateString));\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should put the ArrayInput default value","suites":["Create Page"],"updatePoint":{"line":23,"column":45,"index":1078},"line":23,"code":"  it('should put the ArrayInput default value', () => {\n    const currentDate = new Date();\n    const currentDateString = currentDate.toISOString().slice(0, 10);\n    cy.get(CreatePage.elements.input('backlinks.0.date')).should(el => expect(el).to.have.value(currentDateString));\n    cy.get(CreatePage.elements.input('backlinks.0.url')).should(el => expect(el).to.have.value('http://google.com'));\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should validate ArrayInput","suites":["Create Page"],"updatePoint":{"line":29,"column":32,"index":1468},"line":29,"code":"  it('should validate ArrayInput', () => {\n    const backlinksContainer = cy.get(CreatePage.elements.input('backlinks.0.date')).parents('.ra-input-backlinks');\n    backlinksContainer.contains('Remove').click();\n    CreatePage.setValues([{\n      type: 'input',\n      name: 'title',\n      value: 'foo'\n    }, {\n      type: 'textarea',\n      name: 'teaser',\n      value: 'foo'\n    }, {\n      type: 'rich-text-input',\n      name: 'body',\n      value: 'foo'\n    }]);\n    CreatePage.submit();\n    cy.get('.ra-input-backlinks').contains('Required');\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should have a working array input with references","suites":["Create Page"],"updatePoint":{"line":48,"column":55,"index":2040},"line":48,"code":"  it('should have a working array input with references', () => {\n    CreatePage.logout();\n    LoginPage.login('admin', 'password');\n    CreatePage.navigate();\n    CreatePage.waitUntilVisible();\n    cy.get(CreatePage.elements.addAuthor).click();\n    cy.get(CreatePage.elements.input('authors.0.user_id')).should(el => expect(el).to.exist);\n    cy.get(CreatePage.elements.input('authors.0.role')).should(el => expect(el).to.not.exist);\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should have a working array input with a scoped FormDataConsumer","suites":["Create Page"],"updatePoint":{"line":57,"column":70,"index":2496},"line":57,"code":"  it('should have a working array input with a scoped FormDataConsumer', () => {\n    CreatePage.logout();\n    LoginPage.login('admin', 'password');\n    CreatePage.navigate();\n    CreatePage.waitUntilVisible();\n    cy.get(CreatePage.elements.addAuthor).click();\n    CreatePage.setValues([{\n      type: 'input',\n      name: 'authors.0.user_id',\n      value: 'Annamarie Mayer'\n    }]);\n    cy.get('[role=\"option\"]:first').trigger('click');\n    cy.get(CreatePage.elements.input('authors.0.role')).should(el => expect(el).to.exist);\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should redirect to edit page after create success","suites":["Create Page"],"updatePoint":{"line":71,"column":55,"index":3015},"line":71,"code":"  it('should redirect to edit page after create success', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }, {\n      type: 'textarea',\n      name: 'teaser',\n      value: 'Test teaser'\n    }, {\n      type: 'rich-text-input',\n      name: 'body',\n      value: 'Test body'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submit();\n    EditPage.waitUntilVisible();\n    cy.get(EditPage.elements.input('title')).should(el => expect(el).to.have.value('Test title'));\n    cy.get(EditPage.elements.input('teaser')).should(el => expect(el).to.have.value('Test teaser'));\n    EditPage.delete();\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should redirect to edit page after submit on enter","suites":["Create Page"],"updatePoint":{"line":92,"column":56,"index":3668},"line":92,"code":"  it('should redirect to edit page after submit on enter', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }, {\n      type: 'textarea',\n      name: 'teaser',\n      value: 'Test teaser'\n    }, {\n      type: 'rich-text-input',\n      name: 'body',\n      value: 'Test body'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submitWithKeyboard();\n    EditPage.waitUntilVisible();\n    cy.get(EditPage.elements.input('title')).should(el => expect(el).to.have.value('Test title'));\n    cy.get(EditPage.elements.input('teaser')).should(el => expect(el).to.have.value('Test teaser'));\n    EditPage.delete();\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should redirect to show page after create success with \"Save and show\"","suites":["Create Page"],"updatePoint":{"line":113,"column":76,"index":4353},"line":113,"code":"  it('should redirect to show page after create success with \"Save and show\"', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }, {\n      type: 'textarea',\n      name: 'teaser',\n      value: 'Test teaser'\n    }, {\n      type: 'rich-text-input',\n      name: 'body',\n      value: 'Test body'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submitAndShow();\n    ShowPage.waitUntilVisible();\n    EditPage.navigate();\n    EditPage.delete();\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should stay at create page after create success with \"Save and add\"","suites":["Create Page"],"updatePoint":{"line":133,"column":73,"index":4855},"line":133,"code":"  it('should stay at create page after create success with \"Save and add\"', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }, {\n      type: 'textarea',\n      name: 'teaser',\n      value: 'Test teaser'\n    }, {\n      type: 'rich-text-input',\n      name: 'body',\n      value: 'Test body'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submitAndAdd();\n    cy.url().then(url => expect(url).to.contain('/#/posts/create'));\n    cy.get(CreatePage.elements.input('title')).should(el => expect(el).to.have.value('')); // new empty form\n\n    EditPage.navigate();\n    EditPage.delete();\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should allow to call a custom action updating values before submit","suites":["Create Page"],"updatePoint":{"line":155,"column":72,"index":5501},"line":155,"code":"  it('should allow to call a custom action updating values before submit', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }, {\n      type: 'textarea',\n      name: 'teaser',\n      value: 'Test teaser'\n    }, {\n      type: 'checkbox',\n      name: 'commentable',\n      value: 'false'\n    }, {\n      type: 'rich-text-input',\n      name: 'body',\n      value: 'Test body'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submitWithAverageNote();\n    ShowPage.waitUntilVisible();\n    ShowPage.gotoTab(3);\n    cy.contains('10');\n    EditPage.navigate();\n    EditPage.delete();\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should not accept creation without required fields","suites":["Create Page"],"updatePoint":{"line":181,"column":56,"index":6123},"line":181,"code":"  it('should not accept creation without required fields', () => {\n    const values = [{\n      type: 'textarea',\n      name: 'teaser',\n      value: 'Test teaser'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submit(false);\n    cy.contains('Required field');\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should not reset form values when an input with defaultValue is dynamically added","suites":["Create Page"],"updatePoint":{"line":191,"column":87,"index":6429},"line":191,"code":"  it('should not reset form values when an input with defaultValue is dynamically added', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }];\n    CreatePage.setValues(values);\n    cy.get(CreatePage.elements.input('average_note')).should(el => expect(el).to.have.value('0'));\n    cy.get(CreatePage.elements.input('title')).should(el => expect(el).to.have.value('Test title'));\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should not reset the form value when switching tabs","suites":["Create Page"],"updatePoint":{"line":201,"column":57,"index":6835},"line":201,"code":"  it('should not reset the form value when switching tabs', () => {\n    CreatePage.logout();\n    LoginPage.login('admin', 'password');\n    CreatePage.navigate();\n    CreatePage.waitUntilVisible();\n    UserCreatePage.navigate();\n    CreatePage.setValues([{\n      type: 'input',\n      name: 'name',\n      value: 'The real Slim Shady!'\n    }]);\n    CreatePage.gotoTab(2);\n    CreatePage.gotoTab(1);\n    cy.get(CreatePage.elements.input('name')).should(el => expect(el).to.have.value('The real Slim Shady!'));\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should not show rich text input error message when field is untouched","suites":["Create Page"],"updatePoint":{"line":216,"column":75,"index":7365},"line":216,"code":"  it('should not show rich text input error message when field is untouched', () => {\n    cy.get(CreatePage.elements.richTextInputError).should('not.exist');\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should show rich text input error message when form is submitted","suites":["Create Page"],"updatePoint":{"line":219,"column":70,"index":7524},"line":219,"code":"  it('should show rich text input error message when form is submitted', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }, {\n      type: 'textarea',\n      name: 'teaser',\n      value: 'Test teaser'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submit(false);\n    cy.get(CreatePage.elements.richTextInputError).should('exist').contains('Required');\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should not show rich text input error message when form is submitted and input is filled with text","suites":["Create Page"],"updatePoint":{"line":233,"column":104,"index":7978},"line":233,"code":"  it('should not show rich text input error message when form is submitted and input is filled with text', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submit(false);\n    cy.get(CreatePage.elements.richTextInputError).should('exist').contains('Required');\n    cy.get(CreatePage.elements.input('body', 'rich-text-input')).type('text').blur();\n    cy.get(CreatePage.elements.richTextInputError).should('not.exist');\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should show body in edit view after creating new post","suites":["Create Page"],"updatePoint":{"line":245,"column":59,"index":8463},"line":245,"code":"  it('should show body in edit view after creating new post', () => {\n    const values = [{\n      type: 'input',\n      name: 'title',\n      value: 'Test title'\n    }, {\n      type: 'textarea',\n      name: 'teaser',\n      value: 'Test teaser'\n    }, {\n      type: 'rich-text-input',\n      name: 'body',\n      value: 'Test body'\n    }];\n    CreatePage.setValues(values);\n    CreatePage.submit();\n    EditPage.gotoTab(2);\n    cy.get(EditPage.elements.input('body', 'rich-text-input')).contains('Test body');\n  });","file":"integration/create.js","skipped":false,"dir":"cypress"},{"name":"should allow to preview the selected post","suites":["Custom Forms"],"updatePoint":{"line":7,"column":47,"index":345},"line":7,"code":"  it('should allow to preview the selected post', () => {\n    cy.get(CreatePage.elements.postSelect).click();\n    cy.get(CreatePage.elements.postItem(12)).click();\n    cy.get(CreatePage.elements.showPostPreviewModalButton).click();\n    cy.contains('Qui tempore rerum et voluptates');\n    cy.contains('Occaecati rem perferendis dolor aut numquam cupiditate. At tenetur dolores pariatur et libero asperiores porro voluptas. Officiis corporis sed eos repellendus perferendis distinctio hic consequatur.');\n    cy.get(CreatePage.elements.modalCloseButton).click();\n  });","file":"integration/custom-forms.js","skipped":false,"dir":"cypress"},{"name":"should allow to create a new post","suites":["Custom Forms"],"updatePoint":{"line":15,"column":39,"index":904},"line":15,"code":"  it('should allow to create a new post', () => {\n    cy.get(CreatePage.elements.postSelect).click();\n    cy.get(CreatePage.elements.showPostCreateModalButton).click();\n    CreatePage.setInputValue('input', 'title', 'Bazinga!');\n    CreatePage.setInputValue('textarea', 'teaser', 'Bazingaaaaaaaa!');\n    cy.get(CreatePage.elements.modalSubmitButton).click();\n    cy.contains('Bazinga!');\n    EditPage.navigate();\n    EditPage.delete();\n  });","file":"integration/custom-forms.js","skipped":false,"dir":"cypress"},{"name":"should not display the layout","suites":["Custom Pages","Without Layout"],"updatePoint":{"line":6,"column":37,"index":288},"line":6,"code":"    it('should not display the layout', () => {\n      CustomPageNoLayout.navigate();\n      cy.get('main').should(el => expect(el).to.not.exist);\n    });","file":"integration/customPages.js","skipped":false,"dir":"cypress"},{"name":"should have retrieved the number of posts","suites":["Custom Pages","Without Layout"],"updatePoint":{"line":10,"column":49,"index":453},"line":10,"code":"    it('should have retrieved the number of posts', () => {\n      CustomPageNoLayout.navigate();\n      cy.contains('Found 13 posts !');\n    });","file":"integration/customPages.js","skipped":false,"dir":"cypress"},{"name":"should display the layout","suites":["Custom Pages","With Layout"],"updatePoint":{"line":16,"column":33,"index":621},"line":16,"code":"    it('should display the layout', () => {\n      CustomPageWithLayout.navigate();\n      cy.get('main').should(el => expect(el).to.exist);\n    });","file":"integration/customPages.js","skipped":false,"dir":"cypress"},{"name":"should have retrieved the number of posts","suites":["Custom Pages","With Layout"],"updatePoint":{"line":20,"column":49,"index":784},"line":20,"code":"    it('should have retrieved the number of posts', () => {\n      CustomPageWithLayout.navigate();\n      cy.contains('Found 13 posts !');\n    });","file":"integration/customPages.js","skipped":false,"dir":"cypress"},{"name":"should show the correct title in the appBar","suites":["Edit Page","Title"],"updatePoint":{"line":14,"column":51,"index":717},"line":14,"code":"    it('should show the correct title in the appBar', () => {\n      EditPostPage.navigate();\n      cy.get(EditPostPage.elements.title).contains('Post \"Sed quo et et fugiat modi\"');\n    });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should display the title in a TextField","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":21,"column":47,"index":988},"line":21,"code":"    it('should display the title in a TextField', () => {\n      cy.get(EditPostPage.elements.input('title')).should(el => expect(el).to.have.value('Sed quo et et fugiat modi'));\n    });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should allow to update elements","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":24,"column":39,"index":1166},"line":24,"code":"    it('should allow to update elements', () => {\n      // For some unknown reason, the click on submit didn't work in cypress\n      // so we submit with enter\n      EditPostPage.setInputValue('input', 'title', 'Lorem Ipsum{enter}'); // Ensure react-admin has handled the update as it will redirect to the list page\n      // once done\n\n      cy.url().should('match', /\\/#\\/posts$/);\n      EditPostPage.navigate();\n      cy.get(EditPostPage.elements.input('title')).should(el => expect(el).to.have.value('Lorem Ipsum'));\n    });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should redirect to list page after edit success","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":34,"column":55,"index":1710},"line":34,"code":"    it('should redirect to list page after edit success', () => {\n      // For some unknown reason, the click on submit didn't work in cypress\n      // so we submit with enter\n      EditPostPage.setInputValue('input', 'title', 'Lorem Ipsum{enter}');\n      cy.url().should('match', /\\/#\\/posts$/);\n    });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should allow to switch tabs","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":40,"column":35,"index":1995},"line":40,"code":"    it('should allow to switch tabs', () => {\n      EditPostPage.gotoTab(3);\n      cy.get(EditPostPage.elements.input('average_note')).should(el => expect(el).to.have.value('3'));\n    });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should keep DateInput value after opening datapicker","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":44,"column":60,"index":2208},"line":44,"code":"    it('should keep DateInput value after opening datapicker', () => {\n      EditPostPage.gotoTab(3);\n      const date = new Date('2012-08-05').toISOString().slice(0, 10);\n      cy.get(EditPostPage.elements.input('published_at')).should(el => expect(el).to.have.value(date));\n      EditPostPage.clickInput('published_at');\n      cy.get(EditPostPage.elements.input('published_at')).should(el => expect(el).to.have.value(date));\n    });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should validate inputs inside ArrayInput","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":51,"column":48,"index":2631},"line":51,"code":"    it('should validate inputs inside ArrayInput', () => {\n      EditPostPage.gotoTab(3);\n      cy.get(EditPostPage.elements.addBacklinkButton).click();\n      EditPostPage.clickInput('backlinks.0.url');\n      cy.get(EditPostPage.elements.input('backlinks.0.url')).blur();\n      EditPostPage.submit();\n      cy.contains('Required'); // FIXME: We navigate away from the page and confirm the unsaved changes\n      // This is needed because HashHistory would prevent further navigation\n\n      cy.window().then(win => {\n        cy.on('window:confirm', () => true);\n      });\n      cy.get('[role=\"menuitem\"]:first-child').click();\n    });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should change reference list correctly when changing filter","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":65,"column":67,"index":3283},"line":65,"code":"    it('should change reference list correctly when changing filter', () => {\n      const EditPostTagsPage = editPageFactory('/#/posts/13');\n      EditPostTagsPage.navigate();\n      EditPostTagsPage.gotoTab(3);\n      cy.wait(250); // Music is selected by default\n\n      cy.get(EditPostTagsPage.elements.input('tags', 'reference-array-input')).within(() => {\n        cy.get(`[role=button]`).contains('Music').should('exist');\n      });\n      EditPostTagsPage.clickInput('change-filter'); // Music should not be selected anymore after filter reset\n\n      cy.get(EditPostTagsPage.elements.input('tags', 'reference-array-input')).within(() => {\n        cy.get(`[role=button]`).should('not.exist');\n      });\n      cy.get(EditPostTagsPage.elements.input('tags', 'reference-array-input')).within(() => {\n        cy.get(`input`).click();\n      }); // Music should not be visible in the list after filter reset\n\n      cy.get('[role=\"listbox\"]').within(() => {\n        cy.contains('Music').should('not.exist');\n      });\n      cy.get('[role=\"listbox\"]').within(() => {\n        cy.contains('Photo').should('exist');\n      });\n    });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should fill form correctly even when switching from one form type to another","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":91,"column":82,"index":4428},"line":91,"code":"  it('should fill form correctly even when switching from one form type to another', () => {\n    EditCommentPage.navigate();\n    cy.get(EditPostPage.elements.input('author.name')).should(el => expect(el).to.have.value('Edmond Schulist')); // This validates that the current form values are not kept after we navigate\n\n    EditCommentPage.setInputValue('input', 'body', 'Test');\n    cy.on('window:confirm', message => {\n      expect(message).to.equal(\"Some of your changes weren't saved. Are you sure you want to ignore them?\");\n    }); // FIXME\n    // We can't navigate using cypress function as it would prevent the confirm dialog\n    // to appear. This is because react-router (history) cannot block history pushes that\n    // it didn't initiate.\n\n    cy.contains('Create post').click();\n    cy.get(CreatePostPage.elements.input('body', 'rich-text-input')).should(el => expect(el.text()).to.equal(''));\n  });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should allow to select an item from the AutocompleteInput without showing the choices again after","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":106,"column":103,"index":5360},"line":106,"code":"  it('should allow to select an item from the AutocompleteInput without showing the choices again after', () => {\n    EditCommentPage.navigate();\n    cy.get('[value=\"Accusantium qui nihil voluptatum quia voluptas maxime ab similique - 1\"]');\n    cy.wait(500);\n    cy.get(EditCommentPage.elements.input('post_id')).type('{selectall}').clear().type('Sed quo');\n    cy.contains('[role=\"option\"]', 'Sed quo et et fugiat modi').click();\n    cy.get('[role=\"option\"]').should(el => expect(el).to.not.exist); // Ensure it does not reappear a little after\n\n    cy.wait(500);\n    cy.get('[role=\"option\"]').should(el => expect(el).to.not.exist); // Ensure they still appear when needed though\n\n    cy.get(EditCommentPage.elements.input('post_id')).clear().type('Accusantium qui nihil'); // We select the original value so that the form stay pristine and we avoid the\n    // warning about unsaved changes that prevents the following tests to run\n\n    cy.contains('[role=\"option\"]', 'Accusantium qui nihil voluptatum quia voluptas maxime ab similique').click();\n  });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should reset the form correctly when switching from edit to create","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":122,"column":72,"index":6384},"line":122,"code":"  it('should reset the form correctly when switching from edit to create', () => {\n    EditPostPage.navigate();\n    cy.get(EditPostPage.elements.input('title')).should(el => expect(el).to.have.value('Sed quo et et fugiat modi')); // This validates that the current form values are not kept after we navigate\n\n    EditPostPage.setInputValue('input', 'title', 'Another title');\n    cy.on('window:confirm', message => {\n      expect(message).to.equal(\"Some of your changes weren't saved. Are you sure you want to ignore them?\");\n    }); // FIXME\n    // We can't navigate using cypress function as it would prevent the confirm dialog\n    // to appear. This is because react-router (history) cannot block history pushes that\n    // it didn't initiate.\n\n    cy.contains('Create').click();\n    cy.get(CreatePostPage.elements.input('title')).should(el => expect(el).to.have.value('')); // This validate the old record values are not kept after we navigated\n\n    const currentDate = new Date();\n    const currentDateString = currentDate.toISOString().slice(0, 10);\n    cy.get(CreatePostPage.elements.input('published_at')).should(el => expect(el).to.have.value(currentDateString));\n  });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should intialize the form correctly when cloning from edit","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":141,"column":64,"index":7555},"line":141,"code":"  it('should intialize the form correctly when cloning from edit', () => {\n    EditPostPage.navigate();\n    cy.get(EditPostPage.elements.input('title')).should(el => expect(el).to.have.value('Sed quo et et fugiat modi'));\n    EditPostPage.clone();\n    cy.url().then(url => expect(url).to.contain('/#/posts/create'));\n    cy.get(CreatePostPage.elements.input('title')).should(el => expect(el).to.have.value('Sed quo et et fugiat modi'));\n    const date = new Date('2012-08-05').toISOString().slice(0, 10);\n    cy.get(CreatePostPage.elements.input('published_at')).should(el => expect(el).to.have.value(date));\n  });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should not revert values when saving a record that was cloned","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":150,"column":67,"index":8173},"line":150,"code":"  it('should not revert values when saving a record that was cloned', () => {\n    EditPostPage.navigate();\n    cy.get(EditPostPage.elements.input('title')).should(el => expect(el).to.have.value('Sed quo et et fugiat modi'));\n    EditPostPage.clone();\n    CreatePostPage.setInputValue('input', 'title', 'Lorem Ipsum'); // The next assertion has to occur immediately, thus CreatePostPage.submit() is not used\n\n    cy.get(CreatePostPage.elements.submitButton).click();\n    cy.get(CreatePostPage.elements.input('title')).then(el => {\n      expect(el).to.have.value('Lorem Ipsum');\n    });\n  });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should not lose the cloned values when switching tabs","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":161,"column":59,"index":8756},"line":161,"code":"  it('should not lose the cloned values when switching tabs', () => {\n    EditPostPage.navigate();\n    EditPostPage.logout();\n    LoginPage.navigate();\n    LoginPage.login('admin', 'password');\n    EditUserPage.navigate();\n    cy.get(EditUserPage.elements.input('name')).should(el => expect(el).to.have.value('Annamarie Mayer'));\n    EditUserPage.clone();\n    cy.get(CreateUserPage.elements.input('name')).then(el => {\n      expect(el).to.have.value('Annamarie Mayer');\n    });\n    CreateUserPage.gotoTab(2);\n    CreateUserPage.gotoTab(1);\n    cy.get(CreateUserPage.elements.input('name')).then(el => {\n      expect(el).to.have.value('Annamarie Mayer');\n    });\n  });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should persit emptied inputs","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":178,"column":34,"index":9399},"line":178,"code":"  it('should persit emptied inputs', () => {\n    EditPostPage.navigate();\n    EditPostPage.gotoTab(3);\n    cy.contains('Tech').click();\n    cy.get('li[aria-label=\"Clear value\"]').click();\n    EditPostPage.setInputValue('input', 'average_note', '{enter}', false);\n    cy.url().should('match', /\\/#\\/posts$/);\n    ListPagePosts.waitUntilDataLoaded();\n    EditPostPage.navigate();\n    EditPostPage.gotoTab(3);\n    cy.get(EditPostPage.elements.input('category')).should(el => expect(el).to.have.value(''));\n  }); // FIXME unskip me when useGetList uses the react-query API","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should refresh the list when the update fails","suites":["Edit Page","TabbedForm"],"line":191,"code":"  it.skip('should refresh the list when the update fails', () => {","file":"integration/edit.js","skipped":true,"dir":"cypress"},{"name":"should not display a warning about unsaved changes when an array input has been updated","suites":["Edit Page","TabbedForm"],"updatePoint":{"line":205,"column":93,"index":10740},"line":205,"code":"  it('should not display a warning about unsaved changes when an array input has been updated', () => {\n    ListPagePosts.navigate();\n    ListPagePosts.nextPage(); // Ensure the record is visible in the table\n\n    EditPostPage.navigate(); // Select first notification input checkbox\n\n    cy.get(EditPostPage.elements.input('notifications', 'checkbox-group-input')).eq(0).click();\n    EditPostPage.submit(); // If the update succeeded without display a warning about unsaved changes,\n    // we should have been redirected to the list\n\n    cy.url().then(url => expect(url).to.contain('/#/posts'));\n  });","file":"integration/edit.js","skipped":false,"dir":"cypress"},{"name":"should show the correct title in the appBar","suites":["List Page","Title"],"updatePoint":{"line":12,"column":51,"index":460},"line":12,"code":"    it('should show the correct title in the appBar', () => {\n      cy.get(ListPagePosts.elements.title).contains('Posts');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should display paginated list of available posts","suites":["List Page","Pagination"],"updatePoint":{"line":17,"column":56,"index":636},"line":17,"code":"    it('should display paginated list of available posts', () => {\n      cy.contains('1-10 of 13');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should switch page when clicking on previous/next page buttons or page numbers","suites":["List Page","Pagination"],"updatePoint":{"line":20,"column":86,"index":774},"line":20,"code":"    it('should switch page when clicking on previous/next page buttons or page numbers', () => {\n      ListPagePosts.nextPage();\n      cy.contains('11-13 of 13');\n      ListPagePosts.previousPage();\n      cy.contains('1-10 of 13');\n      ListPagePosts.goToPage(2);\n      cy.contains('11-13 of 13');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should display `alwaysOn` filters by default","suites":["List Page","Filtering"],"updatePoint":{"line":30,"column":52,"index":1085},"line":30,"code":"    it('should display `alwaysOn` filters by default', () => {\n      cy.get(ListPagePosts.elements.filter('q')).should(el => expect(el).to.exist);\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should filter directly while typing (with some debounce)","suites":["List Page","Filtering"],"updatePoint":{"line":33,"column":64,"index":1252},"line":33,"code":"    it('should filter directly while typing (with some debounce)', () => {\n      ListPagePosts.setFilterValue('q', 'quis culpa impedit');\n      cy.get(ListPagePosts.elements.recordRows).should(el => expect(el).to.have.length(1));\n      cy.contains('Omnis voluptate enim similique est possimus');\n      cy.contains('1-1 of 1');\n      ListPagePosts.setFilterValue('q', '', true);\n      cy.contains('1-10 of 13');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should display new filter when clicking on \"Add Filter\"","suites":["List Page","Filtering"],"updatePoint":{"line":41,"column":63,"index":1670},"line":41,"code":"    it('should display new filter when clicking on \"Add Filter\"', () => {\n      ListPagePosts.showFilter('title');\n      cy.get(ListPagePosts.elements.filter('title')).should(el => expect(el).to.exist);\n      cy.contains('1-1 of 1');\n      ListPagePosts.hideFilter('title');\n      cy.contains('1-10 of 13');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should hide filter when clicking on hide button","suites":["List Page","Filtering"],"updatePoint":{"line":48,"column":55,"index":1978},"line":48,"code":"    it('should hide filter when clicking on hide button', () => {\n      ListPagePosts.showFilter('title');\n      cy.contains('1-1 of 1');\n      ListPagePosts.hideFilter('title');\n      cy.get(ListPagePosts.elements.filter('title')).should(el => expect(el).to.not.exist);\n      cy.contains('1-10 of 13');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should keep filters when navigating away and going back on given page","suites":["List Page","Filtering"],"updatePoint":{"line":55,"column":77,"index":2312},"line":55,"code":"    it('should keep filters when navigating away and going back on given page', () => {\n      ListPagePosts.logout();\n      LoginPage.login('admin', 'password');\n      ListPagePosts.navigate();\n      ListPagePosts.setFilterValue('q', 'quis culpa impedit');\n      cy.contains('1-1 of 1'); // This validates that defaultFilterValues on the user list is\n      // not kept for posts after navigation.\n      // See https://github.com/marmelab/react-admin/pull/2019\n\n      cy.get('[href=\"#/users\"]').click(); // Wait until the filter is actually applied (async because of hook-form)\n\n      cy.contains('1-2 of 2');\n      cy.get('[href=\"#/posts\"]').click();\n      cy.url().should('contain', '/posts');\n      cy.get(ListPagePosts.elements.filter('q')).should(el => expect(el).to.have.value('quis culpa impedit'));\n      cy.contains('1-1 of 1');\n      ListPagePosts.setFilterValue('q', '');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should keep added filters when emptying it after navigating away and back","suites":["List Page","Filtering"],"updatePoint":{"line":73,"column":81,"index":3206},"line":73,"code":"    it('should keep added filters when emptying it after navigating away and back', () => {\n      ListPagePosts.logout();\n      LoginPage.login('admin', 'password');\n      ListPagePosts.navigate();\n      ListPagePosts.showFilter('title');\n      ListPagePosts.setFilterValue('title', 'Omnis voluptate enim similique est possimus');\n      cy.contains('1-1 of 1'); // As we debounce filters, this ensures the filter has been applied\n\n      cy.url().should('contain', 'Omnis%20voluptate%20enim%20similique%20est%20possimus');\n      cy.get('[href=\"#/users\"]').click(); // Wait until the filter is actually applied (async because of hook-form)\n\n      cy.contains('1-2 of 2');\n      cy.get('[href=\"#/posts\"]').click();\n      cy.url().should('contain', '/posts');\n      cy.get(ListPagePosts.elements.filter('title')).should(el => expect(el).to.have.value('Omnis voluptate enim similique est possimus'));\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should allow to disable alwaysOn filters with default value","suites":["List Page","Filtering"],"updatePoint":{"line":89,"column":67,"index":4096},"line":89,"code":"    it('should allow to disable alwaysOn filters with default value', () => {\n      ListPagePosts.logout();\n      LoginPage.login('admin', 'password');\n      ListPageUsers.navigate(); // Wait until the filter is actually applied (async because of hook-form)\n\n      cy.contains('1-2 of 2');\n      cy.get('button[title=\"Remove this filter\"]').click();\n      cy.contains('1-3 of 3');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should allow to select all items on the current page","suites":["List Page","Bulk Actions"],"updatePoint":{"line":100,"column":60,"index":4519},"line":100,"code":"    it('should allow to select all items on the current page', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      ListPagePosts.toggleSelectAll();\n      cy.get(ListPagePosts.elements.bulkActionsToolbar).should('be.visible');\n      cy.contains('10 items selected');\n      cy.get(ListPagePosts.elements.selectedItem).should(els => expect(els).to.have.length(10));\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should allow to unselect all items on the current page","suites":["List Page","Bulk Actions"],"updatePoint":{"line":108,"column":62,"index":4905},"line":108,"code":"    it('should allow to unselect all items on the current page', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      ListPagePosts.toggleSelectAll();\n      cy.get(ListPagePosts.elements.bulkActionsToolbar).should('be.visible');\n      ListPagePosts.toggleSelectAll();\n      cy.get(ListPagePosts.elements.bulkActionsToolbar).should('not.be.visible');\n      cy.get(ListPagePosts.elements.selectedItem).should(els => expect(els).to.have.length(0));\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should allow to trigger a custom bulk action on selected items","suites":["List Page","Bulk Actions"],"updatePoint":{"line":117,"column":70,"index":5379},"line":117,"code":"    it('should allow to trigger a custom bulk action on selected items', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      ListPagePosts.toggleSelectAll();\n      ListPagePosts.applyUpdateBulkAction();\n      cy.get(ListPagePosts.elements.viewsColumn).should(els => expect(els).to.have.text('0000000000'));\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should have unselected all items after bulk action","suites":["List Page","Bulk Actions"],"updatePoint":{"line":124,"column":58,"index":5695},"line":124,"code":"    it('should have unselected all items after bulk action', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      ListPagePosts.toggleSelectAll();\n      ListPagePosts.applyUpdateBulkAction();\n      cy.get(ListPagePosts.elements.bulkActionsToolbar).should('not.be.visible');\n      cy.get(ListPagePosts.elements.selectedItem).should(els => expect(els).to.have.length(0));\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should allow to select multiple items on the current page","suites":["List Page","Bulk Actions"],"updatePoint":{"line":132,"column":65,"index":6092},"line":132,"code":"    it('should allow to select multiple items on the current page', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      ListPagePosts.toggleSelectSomeItems(3);\n      cy.get(ListPagePosts.elements.selectedItem).should(els => expect(els).to.have.length(3));\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should allow to trigger the delete bulk action on selected items","suites":["List Page","Bulk Actions"],"updatePoint":{"line":138,"column":72,"index":6376},"line":138,"code":"    it('should allow to trigger the delete bulk action on selected items', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      ListPagePosts.toggleSelectSomeItems(3);\n      ListPagePosts.applyDeleteBulkAction();\n      cy.contains('1-10 of 10');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should allow to select items with the shift key on different pages","suites":["List Page","Bulk Actions"],"updatePoint":{"line":145,"column":74,"index":6644},"line":145,"code":"    it('should allow to select items with the shift key on different pages', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      cy.get(ListPagePosts.elements.selectItem).eq(0).click();\n      cy.get(ListPagePosts.elements.selectItem).eq(2).click({\n        shiftKey: true\n      });\n      cy.contains('3 items selected');\n      ListPagePosts.nextPage();\n      cy.contains('11-13 of 13'); // wait for data\n\n      cy.get(ListPagePosts.elements.selectedItem).should(els => {\n        expect(els).to.have.length(0);\n      });\n      cy.get(ListPagePosts.elements.selectItem).eq(0).click();\n      cy.get(ListPagePosts.elements.selectItem).eq(2).click({\n        shiftKey: true\n      });\n      cy.contains('6 items selected');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should accept a function","suites":["List Page","rowClick"],"updatePoint":{"line":167,"column":32,"index":7376},"line":167,"code":"    it('should accept a function', () => {\n      cy.contains('Fusce massa lorem, pulvinar a posuere ut, accumsan ac nisi').parents('tr').click();\n      cy.contains('Summary').should(el => expect(el).to.exist);\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should accept a function returning a promise","suites":["List Page","rowClick"],"updatePoint":{"line":171,"column":52,"index":7614},"line":171,"code":"    it('should accept a function returning a promise', () => {\n      ListPagePosts.logout();\n      LoginPage.login('user', 'password');\n      ListPageUsers.navigate();\n      cy.contains('Annamarie Mayer').parents('tr').click();\n      cy.contains('Summary').should(el => expect(el).to.exist);\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should show an expand button opening the expand element","suites":["List Page","expand panel"],"updatePoint":{"line":180,"column":63,"index":7966},"line":180,"code":"    it('should show an expand button opening the expand element', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      cy.get('[aria-label=\"Expand\"]').eq(0).click().should(el => expect(el).to.have.attr('aria-expanded', 'true')).should(el => expect(el).to.have.attr('aria-label', 'Close'));\n      cy.get('#13-expand').should(el => expect(el).to.contain('Curabitur eu odio ullamcorper, pretium sem at, blandit libero. Nulla sodales facilisis libero, eu gravida tellus ultrices nec. In ut gravida mi. Vivamus finibus tortor tempus egestas lacinia. Cras eu arcu nisl. Donec pretium dolor ipsum, eget feugiat urna iaculis ut.'));\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should accept multiple expands","suites":["List Page","expand panel"],"updatePoint":{"line":186,"column":38,"index":8586},"line":186,"code":"    it('should accept multiple expands', () => {\n      cy.contains('1-10 of 13'); // wait for data\n\n      cy.get('[aria-label=\"Expand\"]').eq(0).click().should(el => expect(el).to.have.attr('aria-expanded', 'true')).should(el => expect(el).to.have.attr('aria-label', 'Close'));\n      cy.get('#13-expand').should(el => expect(el).to.exist);\n      cy.wait(500); // Ensure animations are done\n\n      cy.get('[aria-label=\"Expand\"]').eq(0) // We still target the first button labeled Expand because the previous one should now have a Close label\n      .click().should(el => expect(el).to.have.attr('aria-expanded', 'true')).should(el => expect(el).to.have.attr('aria-label', 'Close'));\n      cy.get('#12-expand').should(el => expect(el).to.exist);\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should display a sort arrow when clicking on a sortable column header","suites":["List Page","Sorting"],"updatePoint":{"line":199,"column":77,"index":9411},"line":199,"code":"    it('should display a sort arrow when clicking on a sortable column header', () => {\n      ListPagePosts.toggleColumnSort('id');\n      cy.get(ListPagePosts.elements.svg('id')).should('be.visible');\n      ListPagePosts.toggleColumnSort('tags.name');\n      cy.get(ListPagePosts.elements.svg('tags.name')).should('be.visible');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should hide the sort arrow when clicking on another sortable column header","suites":["List Page","Sorting"],"updatePoint":{"line":205,"column":82,"index":9752},"line":205,"code":"    it('should hide the sort arrow when clicking on another sortable column header', () => {\n      ListPagePosts.toggleColumnSort('published_at');\n      cy.get(ListPagePosts.elements.svg('id')).should('be.hidden');\n      cy.get(ListPagePosts.elements.svg('tags.name')).should('be.hidden');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should reverse the sort arrow when clicking on an already sorted column header","suites":["List Page","Sorting"],"updatePoint":{"line":210,"column":86,"index":10054},"line":210,"code":"    it('should reverse the sort arrow when clicking on an already sorted column header', () => {\n      ListPagePosts.toggleColumnSort('published_at');\n      ListPagePosts.toggleColumnSort('tags.name');\n      cy.get(ListPagePosts.elements.svg('tags.name', '[class*=iconDirectionAsc]')).should('exist');\n      ListPagePosts.toggleColumnSort('tags.name');\n      cy.get(ListPagePosts.elements.svg('tags.name', '[class*=iconDirectionDesc]')).should('exist');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should keep filters when sorting a column","suites":["List Page","Sorting"],"updatePoint":{"line":217,"column":49,"index":10479},"line":217,"code":"    it('should keep filters when sorting a column', () => {\n      ListPagePosts.setFilterValue('q', 'quis culpa impedit');\n      cy.get(ListPagePosts.elements.recordRows).should(el => expect(el).to.have.length(1));\n      ListPagePosts.toggleColumnSort('title');\n      ListPagePosts.waitUntilDataLoaded();\n      cy.get(ListPagePosts.elements.filter('q')).should('have.value', 'quis culpa impedit');\n    });","file":"integration/list.js","skipped":false,"dir":"cypress"},{"name":"should have tabbable menu items","suites":["Navigation","Sidebar"],"updatePoint":{"line":5,"column":39,"index":200},"line":5,"code":"    it('should have tabbable menu items', () => {\n      ListPage.navigate();\n      ListPage.waitUntilVisible();\n      cy.get(ListPage.elements.profile).focus().tab();\n      cy.get(`${ListPage.elements.menuItems}:first-child`).should('have.class', 'Mui-focusVisible');\n    });","file":"integration/navigation.js","skipped":false,"dir":"cypress"},{"name":"should appear when a user immediately tabs on the homepage","suites":["Navigation","Skip Navigation Button"],"updatePoint":{"line":13,"column":66,"index":554},"line":13,"code":"    it('should appear when a user immediately tabs on the homepage', () => {\n      ListPage.navigate();\n      ListPage.waitUntilVisible();\n      cy.get('body').tab();\n      cy.get(ListPage.elements.skipNavButton).should('exist');\n    });","file":"integration/navigation.js","skipped":false,"dir":"cypress"},{"name":"hides protected resources depending on permissions","suites":["Permissions","Resources"],"updatePoint":{"line":14,"column":58,"index":722},"line":14,"code":"    it('hides protected resources depending on permissions', () => {\n      ShowPage.navigate();\n      ShowPage.logout();\n      LoginPage.login('login', 'password');\n      cy.contains('Posts');\n      cy.contains('Comments');\n      cy.contains('Users').should(el => expect(el).to.not.exist);\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"shows protected resources depending on permissions","suites":["Permissions","Resources"],"updatePoint":{"line":22,"column":58,"index":1020},"line":22,"code":"    it('shows protected resources depending on permissions', () => {\n      ShowPage.navigate();\n      ShowPage.logout();\n      LoginPage.login('user', 'password');\n      cy.contains('Posts');\n      cy.contains('Comments');\n      cy.contains('Users');\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in List page with DataGrid","suites":["Permissions","hides protected data depending on permissions"],"updatePoint":{"line":38,"column":34,"index":1483},"line":38,"code":"    it('in List page with DataGrid', () => {\n      ListPage.navigate();\n      cy.contains('Id');\n      cy.contains('Name');\n      cy.contains('Role').should(el => expect(el).to.not.exist);\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in List page filters","suites":["Permissions","hides protected data depending on permissions"],"updatePoint":{"line":44,"column":28,"index":1674},"line":44,"code":"    it('in List page filters', () => {\n      ListPage.navigate();\n      ListPage.openFilters();\n      cy.get(ListPage.elements.filterMenuItem('name')).should(el => expect(el).to.exist);\n      cy.get(ListPage.elements.filter('role')).should(el => expect(el).to.not.exist);\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in Create page","suites":["Permissions","hides protected data depending on permissions"],"updatePoint":{"line":50,"column":22,"index":1948},"line":50,"code":"    it('in Create page', () => {\n      CreatePage.navigate();\n      cy.contains('Name');\n      cy.contains('Role').should(el => expect(el).to.not.exist);\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in Show page","suites":["Permissions","hides protected data depending on permissions"],"updatePoint":{"line":55,"column":20,"index":2108},"line":55,"code":"    it('in Show page', () => {\n      UserShowPage.navigate();\n      cy.contains('Id');\n      cy.contains('Name');\n      cy.contains('Role').should(el => expect(el).to.not.exist);\n      cy.contains('Summary');\n      cy.contains('Security').should(el => expect(el).to.not.exist);\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in Edit page","suites":["Permissions","hides protected data depending on permissions"],"updatePoint":{"line":63,"column":20,"index":2394},"line":63,"code":"    it('in Edit page', () => {\n      EditPage.navigate();\n      cy.contains('Name');\n      cy.contains('Summary');\n      cy.contains('Security').should(el => expect(el).to.not.exist);\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in List page with DataGrid","suites":["Permissions","shows protected data depending on permissions"],"updatePoint":{"line":77,"column":34,"index":2829},"line":77,"code":"    it('in List page with DataGrid', () => {\n      ListPage.navigate();\n      cy.contains('Id');\n      cy.contains('Name');\n      cy.contains('Role');\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in List page filters","suites":["Permissions","shows protected data depending on permissions"],"updatePoint":{"line":83,"column":28,"index":2982},"line":83,"code":"    it('in List page filters', () => {\n      ListPage.navigate();\n      ListPage.openFilters();\n      cy.get(ListPage.elements.filterMenuItem('name')).should(el => expect(el).to.exist);\n      cy.get(ListPage.elements.filter('role')).should(el => expect(el).to.exist);\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in Create page","suites":["Permissions","shows protected data depending on permissions"],"updatePoint":{"line":89,"column":22,"index":3252},"line":89,"code":"    it('in Create page', () => {\n      CreatePage.navigate();\n      cy.contains('Name');\n      cy.contains('Role');\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in Show page","suites":["Permissions","shows protected data depending on permissions"],"updatePoint":{"line":94,"column":20,"index":3374},"line":94,"code":"    it('in Show page', () => {\n      UserShowPage.navigate();\n      cy.contains('Id');\n      cy.contains('Name');\n      cy.contains('Summary');\n      cy.contains('Security');\n      UserShowPage.gotoTab(2);\n      cy.contains('Role');\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"in Edit page","suites":["Permissions","shows protected data depending on permissions"],"updatePoint":{"line":103,"column":20,"index":3615},"line":103,"code":"    it('in Edit page', () => {\n      EditPage.navigate();\n      cy.contains('Name');\n      cy.contains('Summary');\n      cy.contains('Security');\n      EditPage.gotoTab(1);\n      cy.contains('Role');\n    });","file":"integration/permissions.js","skipped":false,"dir":"cypress"},{"name":"should fill the page with data from the fetched record","suites":["Show Page"],"updatePoint":{"line":4,"column":60,"index":198},"line":4,"code":"  it('should fill the page with data from the fetched record', () => {\n    ShowPage.navigate();\n    cy.contains('Totam vel quasi a odio et nihil');\n  });","file":"integration/show.js","skipped":false,"dir":"cypress"},{"name":"allows to switch tabs using the buttons","suites":["Tabs with routing","in TabbedLayout component"],"updatePoint":{"line":17,"column":47,"index":695},"line":17,"code":"    it('allows to switch tabs using the buttons', () => {\n      cy.contains('Summary');\n      cy.contains('Security');\n      cy.contains('Id');\n      cy.contains('Name');\n      ShowPage.gotoTab(2);\n      cy.url().then(url => expect(url).to.match(/.*#\\/users\\/1\\/show\\/security/));\n      cy.contains('Role');\n      ShowPage.gotoTab(1);\n      cy.contains('Id');\n      cy.contains('Name');\n      cy.url().then(url => expect(url).to.match(/.*#\\/users\\/1\\/show/));\n    });","file":"integration/tabs-with-routing.js","skipped":false,"dir":"cypress"},{"name":"allows to switch tabs using the browser history","suites":["Tabs with routing","in TabbedLayout component"],"updatePoint":{"line":30,"column":55,"index":1171},"line":30,"code":"    it('allows to switch tabs using the browser history', () => {\n      cy.contains('Id');\n      cy.contains('Name');\n      ShowPage.gotoTab(2);\n      cy.url().then(url => expect(url).to.match(/.*#\\/users\\/1\\/show\\/security/));\n      cy.contains('Role');\n      cy.go('back');\n      cy.contains('Id');\n      cy.contains('Name');\n      cy.url().then(url => expect(url).to.match(/.*#\\/users\\/1\\/show/));\n    });","file":"integration/tabs-with-routing.js","skipped":false,"dir":"cypress"},{"name":"allows to switch tabs using the buttons","suites":["Tabs with routing","in TabbedForm component"],"updatePoint":{"line":44,"column":47,"index":1667},"line":44,"code":"    it('allows to switch tabs using the buttons', () => {\n      cy.contains('Summary');\n      cy.contains('Security');\n      cy.contains('Id');\n      cy.contains('Name');\n      EditPage.gotoTab(2);\n      cy.url().then(url => expect(url).to.match(/.*#\\/users\\/1\\/security/));\n      cy.contains('Role');\n      EditPage.gotoTab(1);\n      cy.contains('Id');\n      cy.contains('Name');\n      cy.url().then(url => expect(url).to.match(/.*#\\/users\\/1/));\n    });","file":"integration/tabs-with-routing.js","skipped":false,"dir":"cypress"},{"name":"allows to switch tabs using the browser history","suites":["Tabs with routing","in TabbedForm component"],"updatePoint":{"line":57,"column":55,"index":2131},"line":57,"code":"    it('allows to switch tabs using the browser history', () => {\n      cy.contains('Id');\n      cy.contains('Name');\n      EditPage.gotoTab(2);\n      cy.url().then(url => expect(url).to.match(/.*#\\/users\\/1\\/security/));\n      cy.contains('Role');\n      cy.go('back');\n      cy.contains('Id');\n      cy.contains('Name');\n      cy.url().then(url => expect(url).to.match(/.*#\\/users\\/1/));\n    });","file":"integration/tabs-with-routing.js","skipped":false,"dir":"cypress"}]}