{"repo":"barbajs/barba","url":"https://github.com/barbajs/barba","branch":"master","configs":[{"package":"root","lang":"js","dir":"cypress","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@barba/core","lang":"js","dir":"packages/core/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@barba/css","lang":"ts","dir":"packages/css/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@barba/prefetch","lang":"ts","dir":"packages/prefetch/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@barba/router","lang":"ts","dir":"packages/router/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"handle link enter","suites":[],"updatePoint":{"line":38,"column":21,"index":824},"line":38,"code":"it('handle link enter', () => {\n  link.href = 'foo';\n  span.dispatchEvent(mouseover);\n  expect(spyHas).toHaveBeenCalledTimes(1);\n  expect(spySet).toHaveBeenCalledTimes(1);\n});","file":"core/core.enter.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"handle link enter with same url","suites":[],"updatePoint":{"line":44,"column":35,"index":1014},"line":44,"code":"it('handle link enter with same url', () => {\n  barba.cache.set(sameUrl, Promise.resolve(sameHtml), 'init');\n  spySet.mockRestore();\n  link.href = sameUrl;\n  span.dispatchEvent(mouseover);\n  expect(spyHas).toHaveBeenCalledTimes(1);\n  expect(spySet).toHaveBeenCalledTimes(0);\n});","file":"core/core.enter.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"handle bad request","suites":[],"updatePoint":{"line":52,"column":22,"index":1280},"line":52,"code":"it('handle bad request', async () => {\n  barba.logger.error = jest.fn();\n  xhrMock.get('http://localhost/bad', (req, res) => res.status(500));\n  xhrMock.error(() => {}); // tslint:disable-line:no-empty\n  link.href = 'bad';\n  span.dispatchEvent(mouseover);\n  expect(spyHas).toHaveBeenCalledTimes(1);\n  expect(spySet).toHaveBeenCalledTimes(1);\n  await waitForExpect(() => {\n    expect(barba.logger.error).toHaveBeenCalledTimes(1);\n  });\n});","file":"core/core.enter.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"handle link enter with prevent link","suites":[],"updatePoint":{"line":64,"column":39,"index":1736},"line":64,"code":"it('handle link enter with prevent link', () => {\n  link.href = 'foo';\n  link.dataset.barbaPrevent = '';\n  span.dispatchEvent(mouseover);\n  expect(spyHas).toHaveBeenCalledTimes(0);\n  expect(spySet).toHaveBeenCalledTimes(0);\n});","file":"core/core.enter.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"handle link enter with prevent url","suites":[],"updatePoint":{"line":71,"column":38,"index":1963},"line":71,"code":"it('handle link enter with prevent url', () => {\n  barba.destroy();\n  barba.init({\n    prefetchIgnore: '/foo'\n  });\n  spyHas = jest.spyOn(barba.cache, 'has');\n  spySet = jest.spyOn(barba.cache, 'set');\n  link.href = '/foo';\n  span.dispatchEvent(mouseover);\n  expect(spyHas).toHaveBeenCalledTimes(0);\n  expect(spySet).toHaveBeenCalledTimes(0);\n});","file":"core/core.enter.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"force url change","suites":[],"updatePoint":{"line":2,"column":20,"index":52},"line":2,"code":"it('force url change', () => {\n  window.location.assign = jest.fn();\n  const url = 'http://localhost/foo.html';\n  barba.force(url);\n  expect(window.location.assign).toHaveBeenCalledTimes(1);\n});","file":"core/core.force.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has default level log","suites":[],"updatePoint":{"line":5,"column":25,"index":162},"line":5,"code":"it('has default level log', () => {\n  expect(Logger.getLevel()).toBe(0);\n});","file":"core/core.logger.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has debug level log","suites":[],"updatePoint":{"line":8,"column":23,"index":237},"line":8,"code":"it('has debug level log', () => {\n  barba.init({\n    debug: true\n  });\n  expect(Logger.getLevel()).toBe(4);\n});","file":"core/core.logger.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has custom level log","suites":[],"updatePoint":{"line":14,"column":24,"index":350},"line":14,"code":"it('has custom level log', () => {\n  barba.init({\n    logLevel: 'error'\n  });\n  expect(Logger.getLevel()).toBe(1);\n});","file":"core/core.logger.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"do once","suites":[],"updatePoint":{"line":14,"column":11,"index":323},"line":14,"code":"it('do once', async () => {\n  const t = {\n    once() {}\n  };\n  const spyOnce = jest.spyOn(barba.transitions, 'doOnce');\n  barba.transitions.store.add('transition', t);\n  await barba.once(data);\n  expect(spyOnce).toHaveBeenCalledTimes(1);\n  spyOnce.mockRestore();\n});","file":"core/core.once.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"handle popstate change","suites":[],"updatePoint":{"line":5,"column":26,"index":160},"line":5,"code":"it('handle popstate change', () => {\n  barba.go = jest.fn();\n  const popstate = document.createEvent('HTMLEvents');\n  popstate.initEvent('popstate', true, false);\n  window.dispatchEvent(popstate);\n  expect(barba.go).toHaveBeenCalledTimes(1);\n});","file":"core/core.popstate.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"prefetch url","suites":[],"updatePoint":{"line":19,"column":16,"index":414},"line":19,"code":"it('prefetch url', () => {\n  const url = 'http://localhost/foo.html';\n  barba.prefetch(url);\n  expect(spySet).toHaveBeenCalledWith(url, Promise.resolve(), 'prefetch');\n});","file":"core/core.prefetch.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"prefetch wrong url","suites":[],"updatePoint":{"line":24,"column":22,"index":592},"line":24,"code":"it('prefetch wrong url', async () => {\n  const url = 'http://localhost/bad';\n  barba.logger.error = jest.fn();\n  xhrMock.get(url, (req, res) => res.status(500));\n  xhrMock.error(() => {}); // tslint:disable-line:no-empty\n\n  barba.prefetch(url);\n  expect(spySet).toHaveBeenCalledTimes(1);\n  await waitForExpect(() => {\n    expect(barba.logger.error).toHaveBeenCalledTimes(1);\n  });\n});","file":"core/core.prefetch.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"forces URL on click","suites":[],"updatePoint":{"line":10,"column":23,"index":276},"line":10,"code":"it('forces URL on click', () => {\n  barba.cache.set(href, request, 'enter');\n  barba.onRequestError(trigger, href, error);\n  expect(barba.force).not.toHaveBeenCalled();\n  barba.cache.update(href, {\n    action: 'click'\n  });\n  barba.onRequestError(trigger, href, error);\n  expect(barba.force).toHaveBeenCalled();\n});","file":"core/core.requestError.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"calls custom request error","suites":[],"updatePoint":{"line":20,"column":30,"index":599},"line":20,"code":"it('calls custom request error', () => {\n  barba['_requestCustomError'] = jest.fn();\n  barba.cache.set(href, request, 'click');\n  barba.onRequestError(trigger, href, error);\n  expect(barba['_requestCustomError']).toHaveBeenCalledWith(trigger, 'click', href, error);\n  expect(barba.force).toHaveBeenCalled();\n});","file":"core/core.requestError.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"does not force URL with falsy custom request error","suites":[],"updatePoint":{"line":27,"column":54,"index":935},"line":27,"code":"it('does not force URL with falsy custom request error', () => {\n  barba['_requestCustomError'] = jest.fn(() => false);\n  barba.cache.set(href, request, 'click');\n  barba.onRequestError(trigger, href, error);\n  expect(barba['_requestCustomError']).toHaveBeenCalledWith(trigger, 'click', href, error);\n  expect(barba.force).not.toHaveBeenCalled();\n});","file":"core/core.requestError.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has defaults","suites":[],"updatePoint":{"line":8,"column":16,"index":347},"line":8,"code":"it('has defaults', () => {\n  expect(barba.version).toBe(version);\n  expect(barba.schemaPage).toBe(schemaPage);\n  expect(barba.hooks).toBe(hooks);\n  expect(barba.Logger).toBe(Logger);\n  expect(barba.logger).toBeInstanceOf(Logger);\n  expect(barba.dom).toBe(dom);\n  expect(barba.helpers).toBe(helpers);\n  expect(barba.request).toBe(request);\n  expect(barba.url).toBe(url);\n  expect(barba.plugins).toHaveLength(0);\n});","file":"core/core.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"sets, gets and has","suites":[],"updatePoint":{"line":10,"column":22,"index":220},"line":10,"code":"it('sets, gets and has', () => {\n  cache.set(key, request, action);\n  expect(cache.has(key)).toBeTruthy();\n  expect(cache.get(key)).toEqual(data);\n});","file":"modules/cache.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"gets action and request","suites":[],"updatePoint":{"line":15,"column":27,"index":376},"line":15,"code":"it('gets action and request', () => {\n  expect(cache.getAction(key)).toBe(action);\n  expect(cache.getRequest(key)).toBe(request);\n});","file":"modules/cache.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"update ","suites":[],"updatePoint":{"line":19,"column":11,"index":494},"line":19,"code":"it('update ', () => {\n  cache.update(key, {\n    action: 'click'\n  });\n  expect(cache.getAction(key)).toBe('click');\n});","file":"modules/cache.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"deletes ","suites":[],"updatePoint":{"line":25,"column":12,"index":615},"line":25,"code":"it('deletes ', () => {\n  cache.delete(key);\n  expect(cache.has(key)).toBeFalsy();\n});","file":"modules/cache.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"checks url ","suites":[],"updatePoint":{"line":29,"column":15,"index":704},"line":29,"code":"it('checks url ', () => {\n  cache.checkHref = jest.fn();\n  cache.has(key);\n  expect(cache.checkHref).toHaveBeenCalled();\n});","file":"modules/cache.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"uses cacheIgnore ","suites":[],"updatePoint":{"line":34,"column":21,"index":835},"line":34,"code":"it('uses cacheIgnore ', () => {\n  cache.checkHref = jest.fn().mockImplementation(() => true);\n  const res = cache.has(key);\n  expect(res).toBeFalsy();\n});","file":"modules/cache.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has defaults","suites":[],"updatePoint":{"line":3,"column":16,"index":108},"line":3,"code":"it('has defaults', () => {\n  const e = new BarbaError(err);\n  expect(e.name).toBe('BarbaError');\n  expect(e.label).toBe('Barba error');\n  expect(e.error).toBe(err);\n});","file":"modules/error.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has params","suites":[],"updatePoint":{"line":9,"column":14,"index":275},"line":9,"code":"it('has params', () => {\n  const e = new BarbaError(err, 'Label error', 'Message error');\n  expect(e.name).toBe('BarbaError');\n  expect(e.label).toBe('Label error');\n  expect(e.message).toBe('Message error');\n  expect(e.error).toBe(err);\n});","file":"modules/error.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"ignores none","suites":[],"updatePoint":{"line":6,"column":16,"index":201},"line":6,"code":"it('ignores none', () => {\n  ignore = new Ignore(false);\n  expect(ignore.checkHref(url)).toBeFalsy();\n});","file":"modules/ignore.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"ignores all","suites":[],"updatePoint":{"line":10,"column":15,"index":306},"line":10,"code":"it('ignores all', () => {\n  ignore = new Ignore(true);\n  expect(ignore.checkHref(url)).toBeTruthy();\n});","file":"modules/ignore.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"ignores URL ","suites":[],"updatePoint":{"line":14,"column":16,"index":412},"line":14,"code":"it('ignores URL ', () => {\n  ignore = new Ignore('/');\n  expect(ignore.checkHref(url)).toBeTruthy();\n  expect(ignore.checkHref(url2)).toBeFalsy();\n});","file":"modules/ignore.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"ignores URLs ","suites":[],"updatePoint":{"line":19,"column":17,"index":564},"line":19,"code":"it('ignores URLs ', () => {\n  ignore = new Ignore(['/', '/:segment/foo.html']);\n  expect(ignore.checkHref(url)).toBeTruthy();\n  expect(ignore.checkHref(url2)).toBeFalsy();\n  expect(ignore.checkHref(url3)).toBeTruthy();\n});","file":"modules/ignore.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"adds test ","suites":[],"updatePoint":{"line":3,"column":14,"index":107},"line":3,"code":"it('adds test ', () => {\n  const name = 'fake';\n  const check = () => true;\n  prevent.add(name, check);\n  expect(prevent.tests.get(name)).toBe(check);\n});","file":"modules/prevent/prevent.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"add rule","suites":[],"updatePoint":{"line":7,"column":12,"index":161},"line":7,"code":"it('add rule', () => {\n  const nb = store['_rules'].length;\n  const r = {\n    name: 'test',\n    type: 'strings'\n  };\n  store.add('rule', {\n    value: r\n  });\n  expect(store['_rules']).toHaveLength(nb + 1);\n  expect(store['_rules'][0]).toBe(r);\n});","file":"modules/store/store.add.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"add rule with position","suites":[],"updatePoint":{"line":19,"column":26,"index":423},"line":19,"code":"it('add rule with position', () => {\n  const nb = store['_rules'].length;\n  const r = {\n    name: 'test',\n    type: 'strings'\n  };\n  store.add('rule', {\n    position: 1,\n    value: r\n  });\n  expect(store['_rules']).toHaveLength(nb + 1);\n  expect(store['_rules'][1]).toBe(r);\n});","file":"modules/store/store.add.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"add transition","suites":[],"updatePoint":{"line":32,"column":18,"index":694},"line":32,"code":"it('add transition', () => {\n  const nb = store.all.length;\n  const t = {};\n  store.add('transition', t);\n  expect(store.all).toHaveLength(nb + 1);\n  expect(store.all[0]).toBe(t);\n});","file":"modules/store/store.add.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has debug info","suites":[],"updatePoint":{"line":4,"column":18,"index":181},"line":4,"code":"it('has debug info', () => {\n  const store = new Store([]);\n  Logger.setLevel('info');\n  store.logger.info = jest.fn();\n  store.resolve({\n    current: schemaPage,\n    next: schemaPage,\n    trigger: 'barba'\n  });\n  expect(store.logger.info).toHaveBeenCalledTimes(1);\n});","file":"modules/store/store.log.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has defaults","suites":[],"updatePoint":{"line":3,"column":16,"index":80},"line":3,"code":"it('has defaults', () => {\n  store = new Store([]);\n  expect(store.all).toHaveLength(0);\n  expect(store.once).toHaveLength(0);\n});","file":"modules/store/store.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"adds transitions","suites":[],"updatePoint":{"line":8,"column":20,"index":215},"line":8,"code":"it('adds transitions', () => {\n  store = new Store([{}]);\n  expect(store.all).toHaveLength(1);\n});","file":"modules/store/store.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"sort all","suites":[],"updatePoint":{"line":17,"column":14,"index":377},"line":17,"code":"  it('sort all', () => {\n    store = new Store(shuffle(transitions));\n    store.add('rule', {\n      position: 1,\n      value: r\n    });\n    expect(store.all).toHaveLength(transitions.length);\n    expect(store.all.map(t => t.name)).toEqual(expected);\n  });","file":"modules/store/store.update.sort.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"update all","suites":[],"updatePoint":{"line":8,"column":14,"index":149},"line":8,"code":"it('update all', () => {\n  store = new Store([{}]);\n  expect(store.all).toHaveLength(nb + 1);\n  expect(store.once).toHaveLength(0);\n});","file":"modules/store/store.update.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"update once","suites":[],"updatePoint":{"line":13,"column":15,"index":286},"line":13,"code":"it('update once', () => {\n  store = new Store([{\n    once() {}\n  }]);\n  expect(store.all).toHaveLength(nb + 1);\n  expect(store.once).toHaveLength(nb + 1);\n});","file":"modules/store/store.update.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"update page","suites":[],"updatePoint":{"line":20,"column":15,"index":445},"line":20,"code":"it('update page', () => {\n  store = new Store([{\n    enter() {}\n  }]);\n  expect(store.all).toHaveLength(nb + 1);\n  expect(store.once).toHaveLength(0);\n});","file":"modules/store/store.update.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"update once and page","suites":[],"updatePoint":{"line":27,"column":24,"index":609},"line":27,"code":"it('update once and page', () => {\n  store = new Store([{\n    once() {},\n    enter() {}\n  }]);\n  expect(store.all).toHaveLength(nb + 1);\n  expect(store.once).toHaveLength(nb + 1);\n});","file":"modules/store/store.update.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has defaults","suites":[],"updatePoint":{"line":3,"column":16,"index":98},"line":3,"code":"it('has defaults', () => {\n  transitions = new Transitions();\n  expect(transitions.hasOnce).toBeFalsy();\n  expect(transitions.shouldWait).toBeFalsy();\n  expect(transitions.isRunning).toBeFalsy();\n  expect(transitions.store).toBeDefined();\n});","file":"modules/transitions/transitions.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has once","suites":[],"updatePoint":{"line":10,"column":12,"index":337},"line":10,"code":"it('has once', () => {\n  transitions = new Transitions([{\n    once: () => Promise.resolve()\n  }]);\n  expect(transitions.hasOnce).toBeTruthy();\n});","file":"modules/transitions/transitions.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"should wait","suites":[],"updatePoint":{"line":16,"column":15,"index":487},"line":16,"code":"it('should wait', () => {\n  transitions = new Transitions([{\n    to: {\n      namespace: 'ns'\n    }\n  }]);\n  expect(transitions.shouldWait).toBeTruthy();\n  transitions = new Transitions([{\n    sync: true\n  }]);\n  expect(transitions.shouldWait).toBeTruthy();\n});","file":"modules/transitions/transitions.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has defaults","suites":[],"updatePoint":{"line":17,"column":16,"index":369},"line":17,"code":"it('has defaults', () => {\n  views = new Views([]);\n  expect(views.byNamespace.size).toBe(0);\n});","file":"modules/views.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"init views","suites":[],"updatePoint":{"line":21,"column":14,"index":465},"line":21,"code":"it('init views', () => {\n  views = new Views([{\n    namespace: 'foo',\n    name: 'overriden'\n  }, {\n    namespace: 'foo',\n    name: 'ok'\n  }, {\n    namespace: 'bar',\n    name: 'ok'\n  }]);\n  expect(views.byNamespace.get('foo')).toEqual({\n    name: 'ok',\n    namespace: 'foo'\n  });\n  expect(views.byNamespace.get('bar')).toEqual({\n    name: 'ok',\n    namespace: 'bar'\n  });\n});","file":"modules/views.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"register hooks","suites":[],"updatePoint":{"line":41,"column":18,"index":844},"line":41,"code":"it('register hooks', () => {\n  // No views, no hooks\n  views = new Views([]);\n  expect(hooks.registered.get('beforeLeave')).toBeUndefined();\n  expect(hooks.registered.get('afterLeave')).toBeUndefined();\n  expect(hooks.registered.get('beforeEnter')).toBeUndefined();\n  expect(hooks.registered.get('afterEnter')).toBeUndefined();\n  views = new Views([{\n    namespace: 'baz'\n  }]);\n  expect(hooks.registered.get('beforeLeave').size).toBe(1);\n  expect(hooks.registered.get('afterLeave').size).toBe(1);\n  expect(hooks.registered.get('beforeEnter').size).toBe(1);\n  expect(hooks.registered.get('afterEnter').size).toBe(1);\n});","file":"modules/views.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"do existing hooks for existing namespace","suites":[],"updatePoint":{"line":58,"column":44,"index":1538},"line":58,"code":"it('do existing hooks for existing namespace', async () => {\n  views = new Views([{\n    namespace: 'success',\n    beforeLeave,\n    afterLeave,\n    beforeEnter,\n    afterEnter\n  }]);\n  /* tslint:enable:object-literal-sort-keys */\n\n  const success = {\n    current: {\n      namespace: 'success'\n    },\n    next: {\n      namespace: 'success'\n    }\n  };\n  await hooks.do('beforeLeave', success);\n  await hooks.do('afterLeave', success);\n  await hooks.do('beforeEnter', success);\n  await hooks.do('afterEnter', success);\n  expect(beforeLeave).toHaveBeenCalledWith(success);\n  expect(afterLeave).toHaveBeenCalledWith(success);\n  expect(beforeEnter).toHaveBeenCalledWith(success);\n  expect(afterEnter).toHaveBeenCalledWith(success);\n});","file":"modules/views.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"do nothing for missing hooks","suites":[],"updatePoint":{"line":85,"column":32,"index":2255},"line":85,"code":"it('do nothing for missing hooks', () => {\n  views = new Views([{\n    namespace: 'success'\n  }]);\n  const success = {\n    current: {\n      namespace: 'success'\n    },\n    next: {\n      namespace: 'success'\n    }\n  };\n  hooks.do('beforeLeave', success);\n  hooks.do('afterLeave', success);\n  hooks.do('beforeEnter', success);\n  hooks.do('afterEnter', success);\n  expect(beforeLeave).not.toHaveBeenCalled();\n  expect(afterLeave).not.toHaveBeenCalled();\n  expect(beforeEnter).not.toHaveBeenCalled();\n  expect(afterEnter).not.toHaveBeenCalled();\n});","file":"modules/views.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"do nothing for missing namespace","suites":[],"updatePoint":{"line":106,"column":36,"index":2804},"line":106,"code":"it('do nothing for missing namespace', () => {\n  views = new Views([{\n    namespace: 'success',\n    beforeLeave,\n    afterLeave,\n    beforeEnter,\n    afterEnter\n  }]);\n  const fail = {\n    current: {\n      namespace: 'fail'\n    },\n    next: {\n      namespace: 'fail'\n    }\n  };\n  hooks.do('beforeLeave', fail);\n  hooks.do('afterLeave', fail);\n  hooks.do('beforeEnter', fail);\n  hooks.do('afterEnter', fail);\n  expect(beforeLeave).not.toHaveBeenCalled();\n  expect(afterLeave).not.toHaveBeenCalled();\n  expect(beforeEnter).not.toHaveBeenCalled();\n  expect(afterEnter).not.toHaveBeenCalled();\n});","file":"modules/views.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"has right context","suites":[],"updatePoint":{"line":131,"column":21,"index":3383},"line":131,"code":"it('has right context', async () => {\n  const v = {\n    bar: jest.fn(),\n    beforeEnter() {\n      this.bar(this.foo);\n    },\n    foo: 'foo',\n    namespace: 'success'\n  };\n  views = new Views([v]);\n  const success = {\n    next: {\n      namespace: 'success'\n    }\n  };\n  await hooks.do('beforeEnter', success);\n  expect(v.bar).toHaveBeenCalledWith(v.foo);\n});","file":"modules/views.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"add/remove class","suites":[],"updatePoint":{"line":7,"column":20},"line":7,"code":"it('add/remove class', () => {\n  css.add(container, step);\n\n  expect(container.classList.contains(`barba-${step}`)).toBeTruthy();\n\n  css.remove(container, step);\n\n  expect(container.classList.contains(`barba-${step}`)).toBeFalsy();\n});","file":"css.classes.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"do once hooks","suites":[],"updatePoint":{"line":36,"column":17},"line":36,"code":"it('do once hooks', async () => {\n  await barba.hooks.do('beforeOnce', data, t);\n  await barba.hooks.do('afterOnce', data, t);\n\n  expect(css.start).toHaveBeenCalledWith(next, 'once');\n  expect(css.end).toHaveBeenCalledWith(next, 'once');\n});","file":"css.hooks.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"do leave hooks","suites":[],"updatePoint":{"line":44,"column":18},"line":44,"code":"it('do leave hooks', async () => {\n  await barba.hooks.do('beforeLeave', data, t);\n  await barba.hooks.do('afterLeave', data, t);\n\n  expect(css.start).toHaveBeenCalledWith(current, 'leave');\n  expect(css.end).toHaveBeenCalledWith(current, 'leave');\n});","file":"css.hooks.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"do enter hooks on first load","suites":[],"updatePoint":{"line":52,"column":32},"line":52,"code":"it('do enter hooks on first load', async () => {\n  // Remove from history to simulate first page load.\n  barba.history.remove();\n\n  await barba.hooks.do('beforeEnter', data, t);\n  await barba.hooks.do('afterEnter', data, t);\n\n  expect(css.start).toHaveBeenCalledWith(next, 'enter');\n  expect(css.end).toHaveBeenCalledWith(next, 'enter');\n});","file":"css.hooks.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"do enter hooks","suites":[],"updatePoint":{"line":63,"column":18},"line":63,"code":"it('do enter hooks', async () => {\n  await barba.hooks.do('beforeEnter', data, t);\n  await barba.hooks.do('afterEnter', data, t);\n\n  expect(css.start).toHaveBeenCalledWith(next, 'enter');\n  expect(css.end).toHaveBeenCalledWith(next, 'enter');\n});","file":"css.hooks.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"override transitions","suites":[],"updatePoint":{"line":71,"column":24},"line":71,"code":"it('override transitions', async () => {\n  await barba.transitions.once(data, t);\n  await barba.transitions.leave(data, t);\n  await barba.transitions.enter(data, t);\n\n  expect(css.next).toHaveBeenNthCalledWith(1, next, 'once');\n  expect(css.next).toHaveBeenNthCalledWith(2, current, 'leave');\n  expect(css.next).toHaveBeenNthCalledWith(3, next, 'enter');\n});","file":"css.hooks.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"has defaults","suites":[],"updatePoint":{"line":16,"column":16},"line":16,"code":"it('has defaults', () => {\n  expect(css.version).toBe(version);\n  expect(css.prefix).toBe('barba');\n  expect(css.callbacks).toEqual({});\n});","file":"css.init.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"registers hooks","suites":[],"updatePoint":{"line":22,"column":19},"line":22,"code":"it('registers hooks', () => {\n  barba.use(css);\n  barba.init();\n\n  expect(barba.hooks.registered.get('before').size).toBe(1);\n  expect(barba.hooks.registered.get('beforeOnce').size).toBe(2);\n  expect(barba.hooks.registered.get('afterOnce').size).toBe(1);\n  expect(barba.hooks.registered.get('beforeLeave').size).toBe(1);\n  expect(barba.hooks.registered.get('afterLeave').size).toBe(1);\n  expect(barba.hooks.registered.get('beforeEnter').size).toBe(1);\n  expect(barba.hooks.registered.get('afterEnter').size).toBe(1);\n});","file":"css.init.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"overrides transitions","suites":[],"updatePoint":{"line":35,"column":25},"line":35,"code":"it('overrides transitions', () => {\n  expect(barba.transitions['once']).toBe(css['_once']);\n  expect(barba.transitions['leave']).toBe(css['_leave']);\n  expect(barba.transitions['enter']).toBe(css['_enter']);\n});","file":"css.init.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"prefixes with transition name","suites":[],"updatePoint":{"line":37,"column":33},"line":37,"code":"it('prefixes with transition name', async () => {\n  await barba.hooks.do('before', data, named);\n  expect(css.prefix).toBe(name);\n  css.prefix = null;\n  await barba.hooks.do('beforeOnce', data, named);\n  expect(css.prefix).toBe(name);\n});","file":"css.prefix.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"prefixes with default ","suites":[],"updatePoint":{"line":45,"column":26},"line":45,"code":"it('prefixes with default ', async () => {\n  await barba.hooks.do('before', data, unnamed);\n  expect(css.prefix).toBe('barba');\n  css.prefix = null;\n  await barba.hooks.do('beforeOnce', data, unnamed);\n  expect(css.prefix).toBe('barba');\n});","file":"css.prefix.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"do start","suites":[],"updatePoint":{"line":16,"column":12},"line":16,"code":"it('do start', async () => {\n  await css.start(container, kind);\n\n  expect(css.add).toHaveBeenNthCalledWith(1, container, kind);\n  expect(css.add).toHaveBeenNthCalledWith(2, container, `${kind}-active`);\n});","file":"css.states.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"do next","suites":[],"updatePoint":{"line":23,"column":11},"line":23,"code":"it('do next', async () => {\n  css['_checkTransition'] = jest.fn().mockReturnValue(true);\n  css.next(container, kind);\n\n  expect.assertions(4);\n  expect(css.callbacks[kind]).toBeDefined();\n  expect(container.addEventListener).toHaveBeenCalledTimes(1);\n\n  await barba.helpers.nextTick();\n\n  expect(css.remove).toHaveBeenNthCalledWith(1, container, kind);\n  expect(css.add).toHaveBeenCalledTimes(1);\n  // DEV not working?!??\n  // expect(css.add).toHaveBeenNthCalledWith(2, container, `${kind}-to`);\n});","file":"css.states.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"do end","suites":[],"updatePoint":{"line":39,"column":10},"line":39,"code":"it('do end', async () => {\n  await css.end(container, kind);\n\n  expect(css.remove).toHaveBeenNthCalledWith(1, container, `${kind}-to`);\n  expect(css.remove).toHaveBeenNthCalledWith(2, container, `${kind}-active`);\n  expect(container.removeEventListener).toHaveBeenCalledTimes(1);\n});","file":"css.states.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"do next with no CSS transition","suites":[],"updatePoint":{"line":47,"column":34},"line":47,"code":"it('do next with no CSS transition', async () => {\n  css['_checkTransition'] = jest.fn().mockReturnValue(false);\n  await css.next(container, kind);\n\n  expect(css.remove).toHaveBeenNthCalledWith(1, container, kind);\n  expect(css.add).toHaveBeenNthCalledWith(1, container, `${kind}-to`);\n  expect(container.removeEventListener).toHaveBeenCalledTimes(0);\n});","file":"css.states.test.ts","skipped":false,"dir":"packages/css/__tests__"},{"name":"has defaults","suites":[],"updatePoint":{"line":22,"column":16},"line":22,"code":"it('has defaults', () => {\n  expect(prefetch.name).toBe('@barba/prefetch');\n  expect(prefetch.version).toBe(version);\n});","file":"prefetch.init.test.ts","skipped":false,"dir":"packages/prefetch/__tests__"},{"name":"init with defaults","suites":[],"updatePoint":{"line":27,"column":22},"line":27,"code":"it('init with defaults', () => {\n  prefetch.observe = jest.fn();\n  barba.use(prefetch);\n  barba.init();\n\n  expect(prefetch.root).toBe(document.body);\n  expect(prefetch.timeout).toBe(2e3);\n  expect(prefetch.observe).toHaveBeenCalled();\n});","file":"prefetch.init.test.ts","skipped":false,"dir":"packages/prefetch/__tests__"},{"name":"init with options","suites":[],"updatePoint":{"line":37,"column":21},"line":37,"code":"it('init with options', () => {\n  prefetch.observe = jest.fn();\n  barba.destroy();\n  barba.use(prefetch, {\n    root: wrapper,\n    timeout: 0,\n  });\n  barba.init();\n\n  expect(prefetch.root).toBe(wrapper);\n  expect(prefetch.timeout).toBe(0);\n});","file":"prefetch.init.test.ts","skipped":false,"dir":"packages/prefetch/__tests__"},{"name":"registers hooks","suites":[],"updatePoint":{"line":50,"column":19},"line":50,"code":"it('registers hooks', () => {\n  expect(barba.hooks.registered.has('after')).toBeTruthy();\n});","file":"prefetch.init.test.ts","skipped":false,"dir":"packages/prefetch/__tests__"},{"name":"warns with cache/prefetch disabled","suites":[],"updatePoint":{"line":54,"column":38},"line":54,"code":"it('warns with cache/prefetch disabled', () => {\n  global.console.warn = jest.fn();\n  barba.use(prefetch);\n  barba.init({\n    cacheIgnore: false,\n    debug: true,\n    prefetchIgnore: true,\n  });\n\n  expect(global.console.warn).toHaveBeenCalledWith(\n    '[@barba/prefetch] ',\n    'barba.prefetchIgnore is enabled'\n  );\n\n  barba.init({\n    cacheIgnore: true,\n    debug: true,\n    prefetchIgnore: false,\n  });\n\n  expect(global.console.warn).toHaveBeenCalledWith(\n    '[@barba/prefetch] ',\n    'barba.cacheIgnore is enabled'\n  );\n});","file":"prefetch.init.test.ts","skipped":false,"dir":"packages/prefetch/__tests__"},{"name":"has defaults","suites":[],"updatePoint":{"line":27,"column":16},"line":27,"code":"it('has defaults', () => {\n  expect(router.name).toBe('@barba/router');\n  expect(router.version).toBe(version);\n  expect(router.routeNames).toHaveLength(0);\n  router.install(barba);\n  expect(router.routeNames).toHaveLength(0);\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"},{"name":"has routes","suites":[],"updatePoint":{"line":35,"column":14},"line":35,"code":"it('has routes', () => {\n  router.install(barba, {\n    routes,\n  });\n\n  expect([...router.routeNames]).toEqual(['home', 'foo']);\n  expect(router.routesByName.foo).toEqual({\n    keys: [\n      {\n        modifier: '',\n        name: 'bar',\n        pattern: '[^\\\\/#\\\\?]+?',\n        prefix: '/',\n        suffix: '',\n      },\n    ],\n    path: '/foo/:bar',\n    regex: /^\\/foo(?:\\/([^\\/#\\?]+?))[\\/#\\?]?$/i,\n  });\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"},{"name":"add rule","suites":[],"updatePoint":{"line":56,"column":12},"line":56,"code":"it('add rule', () => {\n  barba.init();\n  barba.transitions.store.add = jest.fn();\n\n  router.init();\n\n  expect(barba.transitions.store.add).toHaveBeenCalledTimes(1);\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"},{"name":"has duplicate routes","suites":[],"updatePoint":{"line":65,"column":24},"line":65,"code":"it('has duplicate routes', () => {\n  console.warn = jest.fn();\n\n  router.install(barba, {\n    routes,\n  });\n\n  expect(console.warn).toHaveBeenCalledTimes(2);\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"},{"name":"resolves url","suites":[],"updatePoint":{"line":75,"column":16},"line":75,"code":"it('resolves url', () => {\n  const result = router.resolveUrl('http://localhost/foo/something');\n\n  expect(result.name).toBe('foo');\n  expect(result.params.bar).toBe('something');\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"},{"name":"resolves unknown url","suites":[],"updatePoint":{"line":82,"column":24},"line":82,"code":"it('resolves unknown url', () => {\n  const result = router.resolveUrl('http://localhost/bar/something');\n\n  expect(result).toBeNull();\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"},{"name":"resolves data urls (home)","suites":[],"updatePoint":{"line":88,"column":29},"line":88,"code":"it('resolves data urls (home)', () => {\n  const data = {\n    current: { url: { href: 'http://localhost/' } },\n    next: { url: { href: 'http://localhost/' } },\n  } as ITransitionData;\n\n  router.resolveRoutes(data);\n\n  expect(data.current.route.name).toBe('home');\n  expect(data.next.route.name).toBe('home');\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"},{"name":"resolves data urls (foo)","suites":[],"updatePoint":{"line":100,"column":28},"line":100,"code":"it('resolves data urls (foo)', () => {\n  const data = {\n    current: { url: { href: 'http://localhost/foo/current' } },\n    next: { url: { href: 'http://localhost/foo/next' } },\n  } as ITransitionData;\n\n  router.resolveRoutes(data);\n\n  expect(data.current.route.name).toBe('foo');\n  expect(data.next.route.name).toBe('foo');\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"},{"name":"resolves unknown data urls","suites":[],"updatePoint":{"line":112,"column":30},"line":112,"code":"it('resolves unknown data urls', () => {\n  const data = {\n    current: { url: {} },\n    next: { url: {} },\n  } as ITransitionData;\n\n  router.resolveRoutes(data);\n\n  expect(data.current.route).toBeUndefined();\n  expect(data.next.route).toBeUndefined();\n});","file":"router.test.ts","skipped":false,"dir":"packages/router/__tests__"}]}