{
    "repo": "captbaritone/webamp",
    "url": "https://github.com/captbaritone/webamp",
    "branch": "master",
    "configs": [
        {
            "package": "ani-cursor",
            "lang": "ts",
            "dir": "packages/ani-cursor/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "webamp-modern",
            "lang": "js",
            "dir": "packages/webamp-modern/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "eqslid.cur",
            "suites": [
                "Super_Mario_Amp_2.wsz"
            ],
            "updatePoint": {
                "line": 20,
                "column": 18
            },
            "line": 20,
            "code": "  test(\"eqslid.cur\", async () => {\n    expect(readPathCss(\"Super_Mario_Amp_2/eqslid.cur\")).toMatchSnapshot();\n  });",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/ani-cursor/src/__tests__"
        },
        {
            "name": "close.cur",
            "suites": [
                "Super_Mario_Amp_2.wsz"
            ],
            "updatePoint": {
                "line": 23,
                "column": 17
            },
            "line": 23,
            "code": "  test(\"close.cur\", async () => {\n    expect(readPathCss(\"Super_Mario_Amp_2/close.cur\")).toMatchSnapshot();\n  });",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/ani-cursor/src/__tests__"
        },
        {
            "name": "eqslid.cur",
            "suites": [
                "Green Dimension v2.wsz"
            ],
            "updatePoint": {
                "line": 30,
                "column": 18
            },
            "line": 30,
            "code": "  test(\"eqslid.cur\", async () => {\n    expect(readPathCss(\"Green Dimension v2/eqslid.cur\")).toMatchSnapshot();\n  });",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/ani-cursor/src/__tests__"
        },
        {
            "name": "close.cur",
            "suites": [
                "AfterShock_Digital_2003.wsz"
            ],
            "updatePoint": {
                "line": 36,
                "column": 17
            },
            "line": 36,
            "code": "  test(\"close.cur\", async () => {\n    expect(readPathCss(\"AfterShock_Digital_2003/close.cur\")).toMatchSnapshot();\n  });",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/ani-cursor/src/__tests__"
        },
        {
            "name": "piano.ani",
            "suites": [
                "Edge cases"
            ],
            "updatePoint": {
                "line": 42,
                "column": 17
            },
            "line": 42,
            "code": "  test(\"piano.ani\", async () => {\n    expect(readPathCss(\"piano.ani\")).toMatchSnapshot();\n  });",
            "file": "parser.test.ts",
            "skipped": false,
            "dir": "packages/ani-cursor/src/__tests__"
        },
        {
            "name": "sameObject",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 16
            },
            "line": 8,
            "code": "test(\"sameObject\", async () => {\n  const messages = await runSkin(\"sameObject\");\n  expect(messages).toEqual([[\"empty object equal each other\", \"Success\", 0, \"\"], [\"same object equal each other\", \"Success\", 0, \"\"], [\"different objects do not equal each other\", \"Success\", 0, \"\"]]);\n});",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "simpleClick",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 17
            },
            "line": 12,
            "code": "test(\"simpleClick\", async () => {\n  const messages = await runSkin(\"simpleClick\");\n  expect(messages).toEqual([[\"onScriptLoaded\", \"Success\", 0, \"\"], [\"play_button.onLeftClick\", \"Success\", 0, \"\"]]);\n}); // Adapted from https://github.com/Stuk/jszip/issues/386#issuecomment-510802546",
            "file": "integration.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "getFormattedId() is reversable",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 36
            },
            "line": 3,
            "code": "test(\"getFormattedId() is reversable\", () => {\n  Object.keys(runtime).forEach(id => {\n    const formattedId = getFormattedId(id);\n    const inverse = getFormattedId(formattedId);\n    expect(inverse).toBe(id);\n  });\n  Object.keys(objects).map(id => id.toLowerCase()).forEach(id => {\n    const formattedId = getFormattedId(id);\n    const inverse = getFormattedId(formattedId);\n    expect(inverse).toBe(id);\n  });\n});",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "implements getclassname()",
            "suites": [
                ""
            ],
            "updatePoint": {
                "line": 23,
                "column": 35
            },
            "line": 23,
            "code": "    test(\"implements getclassname()\", () => {\n      expect(Klass.prototype.getclassname()).toBe(obj.name);\n    });",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "has the correct parent",
            "suites": [
                ""
            ],
            "updatePoint": {
                "line": 26,
                "column": 32
            },
            "line": 26,
            "code": "    test(\"has the correct parent\", () => {\n      const Parent = Object.getPrototypeOf(Klass);\n\n      if (Klass.prototype.getclassname() === \"Object\") {\n        expect(Parent.prototype).toBe(undefined);\n        return;\n      }\n\n      expect(Parent.prototype.getclassname()).toBe(obj.parent);\n    });",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "Has the method .",
            "suites": [
                "",
                "methods have the correct arity"
            ],
            "updatePoint": {
                "line": 43,
                "column": 53
            },
            "line": 43,
            "code": "        test(`Has the method ${obj.name}.${func.name}`, () => {\n          expect(hasMethodOnSelf).toBe(true);\n        });",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": ". has an arity of ",
            "suites": [
                "",
                "methods have the correct arity"
            ],
            "updatePoint": {
                "line": 52,
                "column": 64
            },
            "line": 52,
            "code": "        test(`${obj.name}.${func.name} has an arity of ${actual}`, () => {\n          expect(func.parameters.length).toBe(actual);\n        });",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "All classes are implemented",
            "suites": [
                "Maki classes"
            ],
            "updatePoint": {
                "line": 80,
                "column": 35
            },
            "line": 80,
            "code": "  test(\"All classes are implemented\", () => {\n    const getName = Klass => Klass.prototype.getclassname();\n\n    const actualNames = Object.keys(runtime).map(id => `${getName(runtime[id])} (${id})`);\n    const expectedNames = Object.keys(objects).map(id => `${objects[id].name} (${getFormattedId(id)})`);\n    expect(new Set(actualNames)).toEqual(new Set(expectedNames));\n  });",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "have no extra methods",
            "suites": [
                "Maki classes"
            ],
            "updatePoint": {
                "line": 87,
                "column": 29
            },
            "line": 87,
            "code": "  test(\"have no extra methods\", () => {\n    // getclassname _should_ be implemented on Object and let each class inherit\n    // it. However it's far easier to implement it on each class directly, so\n    // we'll allow that.\n    function isntGetClassname(method) {\n      return !/\\.getclassname$/.test(method);\n    }\n\n    function isntMakiMethod(method) {\n      return !objectMethods.has(method);\n    }\n\n    const extra = [...runtimeMethods].filter(isntMakiMethod).filter(isntGetClassname);\n    expect(extra).toEqual([]);\n  });",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "There are no missing methods",
            "suites": [
                "Maki classes"
            ],
            "updatePoint": {
                "line": 102,
                "column": 36
            },
            "line": 102,
            "code": "  test(\"There are no missing methods\", () => {\n    const missing = [...objectMethods].filter(x => !runtimeMethods.has(x));\n    expect(missing).toEqual([]);\n  });",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "Track unimplemented methods",
            "suites": [
                "Maki classes"
            ],
            "updatePoint": {
                "line": 106,
                "column": 35
            },
            "line": 106,
            "code": "  test(\"Track unimplemented methods\", () => {\n    // Write this as a newline delineated string to make it easier to other\n    // tools to extract from the `.snap` file.\n    const expected = Array.from(unimplementedRuntimeMethods).join(\"\\n\");\n    expect(expected).toMatchSnapshot();\n  });",
            "file": "objects.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "compiled with compiler version ",
            "suites": [
                "can parse without crashing",
                "script "
            ],
            "updatePoint": {
                "line": 19,
                "column": 55
            },
            "line": 19,
            "code": "        test(`compiled with compiler version ${version}`, () => {\n          expect(() => {\n            parseFile(`../../resources/maki_compiler/${version}/${script}`);\n          }).not.toThrow();\n        });",
            "file": "parser.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "minimal",
            "suites": [
                "regressions",
                "https://github.com/captbaritone/webamp/issues/898"
            ],
            "updatePoint": {
                "line": 30,
                "column": 17
            },
            "line": 30,
            "code": "    test(\"minimal\", () => {\n      parseFile(\"../../resources/fixtures/issue_898/minimal.maki\");\n    });",
            "file": "parser.test.js",
            "skipped": true,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "real world",
            "suites": [
                "regressions",
                "https://github.com/captbaritone/webamp/issues/898"
            ],
            "updatePoint": {
                "line": 33,
                "column": 20
            },
            "line": 33,
            "code": "    test(\"real world\", () => {});",
            "file": "parser.test.js",
            "skipped": true,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "CproTabs",
            "suites": [
                "regressions",
                "foo"
            ],
            "updatePoint": {
                "line": 36,
                "column": 18
            },
            "line": 36,
            "code": "    test(\"CproTabs\", () => {\n      parseFile(\"../../resources/fixtures/foo/CproTabs.maki\");\n    });",
            "file": "parser.test.js",
            "skipped": true,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "can read magic",
            "suites": [
                "standardframe.maki"
            ],
            "updatePoint": {
                "line": 46,
                "column": 22
            },
            "line": 46,
            "code": "  test(\"can read magic\", () => {\n    expect(maki.magic).toBe(\"FG\");\n  });",
            "file": "parser.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "can read classes",
            "suites": [
                "standardframe.maki"
            ],
            "updatePoint": {
                "line": 49,
                "column": 24
            },
            "line": 49,
            "code": "  test(\"can read classes\", () => {\n    expect(maki.classes.map(klass => getClass(klass).name)).toEqual([\"Object\", \"System\", \"Container\", \"Wac\", \"List\", \"Map\", \"PopupMenu\", \"Region\", \"Timer\", \"GuiObject\", \"Group\", \"Layout\", \"WindowHolder\", \"ComponentBucket\", \"Edit\", \"Slider\", \"Vis\", \"Browser\", \"EqVis\", \"Status\", \"Text\", \"Title\", \"Layer\", \"Button\", \"AnimatedLayer\", \"ToggleButton\", \"GroupList\", \"CfgGroup\", \"QueryList\", \"MouseRedir\", \"DropDownList\", \"LayoutStatus\", \"TabSheet\"]);\n  });",
            "file": "parser.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "can read methods",
            "suites": [
                "standardframe.maki"
            ],
            "updatePoint": {
                "line": 52,
                "column": 24
            },
            "line": 52,
            "code": "  test(\"can read methods\", () => {\n    expect(maki.methods.map(func => func.name)).toEqual([\"onScriptLoaded\", \"getScriptGroup\", \"getParam\", \"getToken\", \"onSetXuiParam\", \"findObject\", \"setXmlParam\", \"setXmlParam\", \"messagebox\", \"onNotify\", \"newGroup\", \"init\"]);\n    expect(maki.methods.every(func => func.typeOffset != null)).toBe(true);\n  });",
            "file": "parser.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "can read variables",
            "suites": [
                "standardframe.maki"
            ],
            "updatePoint": {
                "line": 56,
                "column": 26
            },
            "line": 56,
            "code": "  test(\"can read variables\", () => {\n    expect(maki.variables.length).toBe(56);\n    expect(maki.variables.map(variable => {\n      const {\n        typeName,\n        type\n      } = variable;\n\n      if (typeName === \"OBJECT\") {\n        return type;\n      }\n\n      return typeName;\n    })).toMatchInlineSnapshot(`\nArray [\n  \"d6f50f6449b793fa66baf193983eaeef\",\n  \"INT\",\n  \"45be95e5419120725fbb5c93fd17f1f9\",\n  \"45be95e5419120725fbb5c93fd17f1f9\",\n  \"45be95e5419120725fbb5c93fd17f1f9\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"5ab9fa1545579a7d5765c8aba97cc6a6\",\n  \"698eddcd4fec8f1e44f9129b45ff09f9\",\n  \"STRING\",\n  \"STRING\",\n  \"INT\",\n  \"INT\",\n  \"INT\",\n  \"INT\",\n  \"INT\",\n  \"INT\",\n  \"INT\",\n  \"INT\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"INT\",\n  \"INT\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n  \"STRING\",\n]\n`);\n    maki.variables.forEach(variable => {\n      expect(variable.type).not.toBe(undefined);\n    });\n  });",
            "file": "parser.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "can read bindings",
            "suites": [
                "standardframe.maki"
            ],
            "updatePoint": {
                "line": 133,
                "column": 25
            },
            "line": 133,
            "code": "  test(\"can read bindings\", () => {\n    expect(maki.bindings).toEqual([{\n      variableOffset: 0,\n      commandOffset: 0,\n      methodOffset: 0\n    }, {\n      variableOffset: 0,\n      commandOffset: 76,\n      methodOffset: 4\n    }, {\n      variableOffset: 2,\n      commandOffset: 143,\n      methodOffset: 9\n    }]);\n  }); // [opcode, size] as output by the Perl decompiler",
            "file": "parser.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "can read commands",
            "suites": [
                "standardframe.maki"
            ],
            "updatePoint": {
                "line": 152,
                "column": 25
            },
            "line": 152,
            "code": "  test(\"can read commands\", () => {\n    maki.commands.forEach((command, i) => {\n      const expectedOpcode = expectedCommands[i];\n\n      if (expectedOpcode !== command.opcode) {\n        throw new Error(`Command ${i} reported opcode ${command.opcode}. Expected ${expectedOpcode}`);\n      }\n    });\n    expect(maki.commands.length).toBe(expectedCommands.length);\n  }); // I don't know what either of these actually are.",
            "file": "parser.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "extracts version info",
            "suites": [
                "standardframe.maki"
            ],
            "updatePoint": {
                "line": 163,
                "column": 29
            },
            "line": 163,
            "code": "  test(\"extracts version info\", () => {\n    expect(maki.version).toBe(1027);\n    expect(maki.extraVersion).toBe(23);\n  });",
            "file": "parser.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "gets a file independent of case",
            "suites": [
                "getCaseInsensitiveFile"
            ],
            "updatePoint": {
                "line": 12,
                "column": 37
            },
            "line": 12,
            "code": "  it(\"gets a file independent of case\", async () => {\n    const zip = await getSkinZip();\n    expect(Utils.getCaseInsensitveFile(zip, \"SkIn.XmL\")).not.toEqual(null);\n  });",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "gets a file independent of case",
            "suites": [
                "readXml"
            ],
            "updatePoint": {
                "line": 18,
                "column": 37
            },
            "line": 18,
            "code": "  it(\"gets a file independent of case\", async () => {\n    const zip = await getSkinZip();\n    const xml = await Utils.readXml(zip, \"SkIn.XmL\");\n    expect(xml).toMatchSnapshot();\n  });",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "asyncTreeFlatMap",
            "suites": [
                "inlineIncludes"
            ],
            "updatePoint": {
                "line": 25,
                "column": 24
            },
            "line": 25,
            "code": "  test(\"asyncTreeFlatMap\", async () => {\n    const playerElements = {\n      name: \"player-elements\",\n      children: [{\n        name: \"player-elements-child\"\n      }]\n    };\n    const playerNormal = {\n      name: \"player-normal\",\n      children: [{\n        name: \"player-normal-child\"\n      }]\n    };\n    const player = {\n      name: \"player\",\n      children: [{\n        name: \"player-elements-include\",\n        include: playerElements\n      }, {\n        name: \"main-container\",\n        children: [{\n          name: \"player-normal-include\",\n          include: playerNormal\n        }]\n      }]\n    };\n    const xml = {\n      name: \"root\",\n      children: [{\n        name: \"meta\"\n      }, {\n        name: \"include player\",\n        include: player\n      }]\n    };\n\n    function resolveInclude(node) {\n      if (node.include) {\n        return node.include.children;\n      }\n\n      return node;\n    }\n\n    const resolved = await Utils.asyncTreeFlatMap(xml, resolveInclude);\n    expect(resolved).toEqual({\n      name: \"root\",\n      children: [{\n        name: \"meta\"\n      }, {\n        name: \"player-elements-child\"\n      }, {\n        name: \"main-container\",\n        children: [{\n          name: \"player-normal-child\"\n        }]\n      }]\n    });\n  });",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "inlines the contents of included files as children of the include node",
            "suites": [
                "inlineIncludes"
            ],
            "updatePoint": {
                "line": 84,
                "column": 78
            },
            "line": 84,
            "code": "  test(\"inlines the contents of included files as children of the include node\", async () => {\n    const zip = await getSkinZip();\n    const originalFile = zip.file;\n    zip.file = jest.fn(filePath => originalFile.call(zip, filePath));\n    const xml = await Utils.readXml(zip, \"SkIn.XmL\");\n    const resolvedXml = await Utils.inlineIncludes(xml, zip);\n    expect(resolvedXml).toMatchSnapshot();\n    expect(zip.file.mock.calls.map(args => args[0])).toMatchInlineSnapshot(`\nArray [\n  /SkIn\\\\.XmL/i,\n  /xml\\\\\\\\/system-colors\\\\.xml/i,\n  /xml\\\\\\\\/standardframe\\\\.xml/i,\n  /xml\\\\\\\\/player\\\\.xml/i,\n  /xml\\\\\\\\/pledit\\\\.xml/i,\n  /xml\\\\\\\\/video\\\\.xml/i,\n  /xml\\\\\\\\/eq\\\\.xml/i,\n  /xml\\\\\\\\/color-presets\\\\.xml/i,\n  /xml\\\\\\\\/color-themes\\\\.xml/i,\n  /studio-elements\\\\.xml/i,\n  /player-elements\\\\.xml/i,\n  /player-normal\\\\.xml/i,\n]\n`);\n  });",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "recurses",
            "suites": [
                "asyncFlatMap"
            ],
            "updatePoint": {
                "line": 110,
                "column": 16
            },
            "line": 110,
            "code": "  test(\"recurses\", async () => {\n    const start = [\"parent\", [\"child\", [\"grandchild\"], \"sibling\"], \"partner\"];\n    expect(await Utils.asyncFlatMap(start, v => Promise.resolve(v))).toEqual([\"parent\", \"child\", \"grandchild\", \"sibling\", \"partner\"]);\n  });",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "encounters children first",
            "suites": [
                "asyncTreeFlatMap"
            ],
            "updatePoint": {
                "line": 116,
                "column": 33
            },
            "line": 116,
            "code": "  test(\"encounters children first\", async () => {\n    const mapper = jest.fn(async node => {\n      if (node.replaceWithChildren) {\n        return node.children;\n      }\n\n      return { ...node,\n        name: node.name.toLowerCase()\n      };\n    });\n    const start = {\n      name: \"A\",\n      children: [{\n        name: \"B\"\n      }, {\n        name: \"C\",\n        children: [{\n          name: \"E\"\n        }, {\n          name: \"F\",\n          replaceWithChildren: true,\n          children: [{\n            name: \"G\"\n          }]\n        }],\n        replaceWithChildren: true\n      }, {\n        name: \"D\"\n      }]\n    };\n    expect(await Utils.asyncTreeFlatMap(start, mapper)).toEqual({\n      name: \"A\",\n      children: [{\n        name: \"b\"\n      }, {\n        name: \"e\"\n      }, {\n        name: \"g\"\n      }, {\n        name: \"d\"\n      }]\n    });\n    const callOrder = mapper.mock.calls.map(args => args[0].name);\n    expect(callOrder).toEqual([\"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]);\n  });",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "basicTests",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 16
            },
            "line": 28,
            "code": "test(\"basicTests\", () => {\n  expect(runScript(\"basicTests.maki\")).toMatchInlineSnapshot(`\n\"Success: 2 + 2 = 4\nSuccess: 2.2 + 2.2 = 4.4\nSuccess: 4 + 4.4 = 4.4 + 4 (not implict casting)\nSuccess: #t + #t = 2\nSuccess: 3 - 2 = 1\nSuccess: 3 - -2 = 5\nSuccess: 3.5 - 2 = 1.5\nSuccess: 2 * 3 = 6\nSuccess: 2 * 1.5 = 3\nSuccess: #t * 3 = 3\nSuccess: #f * 3 = 0\nSuccess: #t * 0.25 = 0.25\nSuccess: 0.25 * #t = 0.25\nSuccess: #f * 0.25 = 0\nSuccess: 6 / 3 = 2\nSuccess: 3 / 2 = 1.5\nSuccess: 5 % 2 = 1\nSuccess: 5.5 % 2 = 1 (implict casting)\nSuccess: 3 & 2 = 2\nSuccess: 3 | 2 = 3\nSuccess: 2 << 1 = 4\nSuccess: 4 >> 1 = 2\nSuccess: 2.5 << 1 = 4 (implict casting)\nSuccess: 4.5 >> 1 = 2 (implict casting)\nSuccess: 1 != 2\nSuccess: 1 < 2\nSuccess: 2 > 1\nSuccess: [int] 4 = [float] 4.4 (autocasting types)\nSuccess: ! [float] 4.4 = [int] 4 (not autocasting types)\nSuccess: [float] 4.4 != [int] 4 (not autocasting types)\nSuccess: ! [int] 4 != [float] 4.4 (autocasting types)\nSuccess: [int] 4 <= [float] 4.4 (autocasting types)\nSuccess: [int] 4 >= [float] 4.4 (autocasting types)\nSuccess: ! [float] 4.4 <= [int] 4 (not autocasting types)\nSuccess: [float] 4.4 >= [int] 4 (not autocasting types)\nSuccess: ! [int] 4 < [float] 4.4 (autocasting types)\nSuccess: ! [float] 4.4 < [int] 4 (not autocasting types)\nSuccess: ! [int] 4 > [float] 4.4 (autocasting types)\nSuccess: [float] 4.4 > [int] 4 (not autocasting types)\nSuccess: 1++ = 1\nSuccess: 1++ (after incremeent) = 2\nSuccess: 2-- = 2\nSuccess: 2-- (after decrement) = 1\nSuccess: ++1 = 2\nSuccess: !#f\nSuccess: !0\nSuccess: !1 == #f\nSuccess: 1 == #t\nSuccess: 0 == #f\nSuccess: #t && #t\nSuccess: !(#t && #f)\nSuccess: !(#f && #f)\nSuccess: #t || #t\nSuccess: #t || #f\nSuccess: #f || #t\nSuccess: !(#f || #f)\nSuccess: #t || ++n (doesn't short circuit)\nSuccess: !(#f && ++ n) (doesn't short circuit)\"\n`);\n});",
            "file": "virtualMachine.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        },
        {
            "name": "hello_world",
            "suites": [],
            "updatePoint": {
                "line": 90,
                "column": 17
            },
            "line": 90,
            "code": "test(\"hello_world\", () => {\n  expect(runScript(\"hello_world.maki\")).toMatchInlineSnapshot(`\"Hello Title: Hello World\"`);\n});",
            "file": "virtualMachine.test.js",
            "skipped": false,
            "dir": "packages/webamp-modern/src/__tests__"
        }
    ],
    "badge": "captbaritone__webamp.svg"
}