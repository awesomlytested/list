{"repo":"apollographql/apollo-server","url":"https://github.com/apollographql/apollo-server","branch":"main","configs":[{"package":"apollo-datasource-rest","lang":"ts","dir":"packages/apollo-datasource-rest/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-azure-functions","lang":"ts","dir":"packages/apollo-server-azure-functions/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-cache-memcached","lang":"ts","dir":"packages/apollo-server-cache-memcached/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-cache-redis","lang":"ts","dir":"packages/apollo-server-cache-redis/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-caching","lang":"ts","dir":"packages/apollo-server-caching/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-cloud-functions","lang":"ts","dir":"packages/apollo-server-cloud-functions/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-core","lang":"ts","dir":"packages/apollo-server-core/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-errors","lang":"ts","dir":"packages/apollo-server-errors/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-express","lang":"ts","dir":"packages/apollo-server-express/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-fastify","lang":"ts","dir":"packages/apollo-server-fastify/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-hapi","lang":"ts","dir":"packages/apollo-server-hapi/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-koa","lang":"ts","dir":"packages/apollo-server-koa/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-lambda","lang":"ts","dir":"packages/apollo-server-lambda/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-micro","lang":"ts","dir":"packages/apollo-server-micro/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-plugin-operation-registry","lang":"ts","dir":"packages/apollo-server-plugin-operation-registry/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server-plugin-response-cache","lang":"ts","dir":"packages/apollo-server-plugin-response-cache/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apollo-server","lang":"ts","dir":"packages/apollo-server/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"fetches a response from the origin when not cached","suites":["HTTPCache"],"updatePoint":{"line":28,"column":56},"line":28,"code":"  it('fetches a response from the origin when not cached', async () => {\n    fetch.mockJSONResponseOnce({ name: 'Ada Lovelace' });\n\n    const response = await httpCache.fetch(\n      new Request('https://api.example.com/people/1'),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(1);\n    expect(await response.json()).toEqual({ name: 'Ada Lovelace' });\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns a cached response when not expired","suites":["HTTPCache"],"updatePoint":{"line":39,"column":48},"line":39,"code":"  it('returns a cached response when not expired', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'max-age=30' },\n    );\n\n    await httpCache.fetch(new Request('https://api.example.com/people/1'));\n\n    clock.tick(10000);\n\n    const response = await httpCache.fetch(\n      new Request('https://api.example.com/people/1'),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(1);\n    expect(await response.json()).toEqual({ name: 'Ada Lovelace' });\n    expect(response.headers.get('Age')).toEqual('10');\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"fetches a fresh response from the origin when expired","suites":["HTTPCache"],"updatePoint":{"line":58,"column":59},"line":58,"code":"  it('fetches a fresh response from the origin when expired', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'max-age=30' },\n    );\n\n    await httpCache.fetch(new Request('https://api.example.com/people/1'));\n\n    clock.tick(30000);\n\n    fetch.mockJSONResponseOnce(\n      { name: 'Alan Turing' },\n      { 'Cache-Control': 'max-age=30' },\n    );\n\n    const response = await httpCache.fetch(\n      new Request('https://api.example.com/people/1'),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(2);\n\n    expect(await response.json()).toEqual({ name: 'Alan Turing' });\n    expect(response.headers.get('Age')).toEqual('0');\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns a cached response when the overridden TTL is not expired","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":84,"column":72},"line":84,"code":"    it('returns a cached response when the overridden TTL is not expired', async () => {\n      fetch.mockJSONResponseOnce(\n        { name: 'Ada Lovelace' },\n        {\n          'Cache-Control': 'private, no-cache',\n          'Set-Cookie': 'foo',\n        },\n      );\n\n      await httpCache.fetch(new Request('https://api.example.com/people/1'), {\n        cacheOptions: {\n          ttl: 30,\n        },\n      });\n\n      clock.tick(10000);\n\n      const response = await httpCache.fetch(\n        new Request('https://api.example.com/people/1'),\n      );\n\n      expect(fetch.mock.calls.length).toEqual(1);\n      expect(await response.json()).toEqual({ name: 'Ada Lovelace' });\n      expect(response.headers.get('Age')).toEqual('10');\n    });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"fetches a fresh response from the origin when the overridden TTL expired","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":110,"column":80},"line":110,"code":"    it('fetches a fresh response from the origin when the overridden TTL expired', async () => {\n      fetch.mockJSONResponseOnce(\n        { name: 'Ada Lovelace' },\n        {\n          'Cache-Control': 'private, no-cache',\n          'Set-Cookie': 'foo',\n        },\n      );\n\n      await httpCache.fetch(new Request('https://api.example.com/people/1'), {\n        cacheOptions: {\n          ttl: 30,\n        },\n      });\n\n      clock.tick(30000);\n\n      fetch.mockJSONResponseOnce(\n        { name: 'Alan Turing' },\n        {\n          'Cache-Control': 'private, no-cache',\n          'Set-Cookie': 'foo',\n        },\n      );\n\n      const response = await httpCache.fetch(\n        new Request('https://api.example.com/people/1'),\n      );\n\n      expect(fetch.mock.calls.length).toEqual(2);\n\n      expect(await response.json()).toEqual({ name: 'Alan Turing' });\n      expect(response.headers.get('Age')).toEqual('0');\n    });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"fetches a fresh response from the origin when the overridden TTL expired even if a longer max-age has been specified","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":145,"column":124},"line":145,"code":"    it('fetches a fresh response from the origin when the overridden TTL expired even if a longer max-age has been specified', async () => {\n      fetch.mockJSONResponseOnce(\n        { name: 'Ada Lovelace' },\n        { 'Cache-Control': 'max-age=30' },\n      );\n\n      await httpCache.fetch(new Request('https://api.example.com/people/1'), {\n        cacheOptions: {\n          ttl: 10,\n        },\n      });\n\n      clock.tick(10000);\n\n      fetch.mockJSONResponseOnce(\n        { name: 'Alan Turing' },\n        { 'Cache-Control': 'max-age=30' },\n      );\n\n      const response = await httpCache.fetch(\n        new Request('https://api.example.com/people/1'),\n      );\n\n      expect(fetch.mock.calls.length).toEqual(2);\n\n      expect(await response.json()).toEqual({ name: 'Alan Turing' });\n      expect(response.headers.get('Age')).toEqual('0');\n    });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not store a response with an overridden TTL and a non-success status code","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":174,"column":86},"line":174,"code":"    it('does not store a response with an overridden TTL and a non-success status code', async () => {\n      fetch.mockResponseOnce(\n        'Internal server error',\n        { 'Cache-Control': 'max-age=30' },\n        500,\n      );\n\n      await httpCache.fetch(new Request('https://api.example.com/people/1'), {\n        cacheOptions: {\n          ttl: 30,\n        },\n      });\n\n      expect(store.size).toEqual(0);\n    });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows overriding the TTL dynamically","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":190,"column":45},"line":190,"code":"    it('allows overriding the TTL dynamically', async () => {\n      fetch.mockJSONResponseOnce(\n        { name: 'Ada Lovelace' },\n        {\n          'Cache-Control': 'private, no-cache',\n          'Set-Cookie': 'foo',\n        },\n      );\n\n      await httpCache.fetch(new Request('https://api.example.com/people/1'), {\n        cacheOptions: () => ({\n          ttl: 30,\n        }),\n      });\n\n      clock.tick(10000);\n\n      const response = await httpCache.fetch(\n        new Request('https://api.example.com/people/1'),\n      );\n\n      expect(fetch.mock.calls.length).toEqual(1);\n      expect(await response.json()).toEqual({ name: 'Ada Lovelace' });\n      expect(response.headers.get('Age')).toEqual('10');\n    });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows disabling caching when the TTL is 0 (falsy)","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":216,"column":58},"line":216,"code":"    it('allows disabling caching when the TTL is 0 (falsy)', async () => {\n      fetch.mockJSONResponseOnce(\n        { name: 'Ada Lovelace' },\n        { 'Cache-Control': 'max-age=30' },\n      );\n\n      await httpCache.fetch(new Request('https://api.example.com/people/1'), {\n        cacheOptions: () => ({\n          ttl: 0,\n        }),\n      });\n\n      expect(store.size).toEqual(0);\n    });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows specifying a custom cache key","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":232,"column":42},"line":232,"code":"  it('allows specifying a custom cache key', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'max-age=30' },\n    );\n\n    await httpCache.fetch(\n      new Request('https://api.example.com/people/1?foo=bar'),\n      { cacheKey: 'https://api.example.com/people/1' },\n    );\n\n    const response = await httpCache.fetch(\n      new Request('https://api.example.com/people/1?foo=baz'),\n      { cacheKey: 'https://api.example.com/people/1' },\n    );\n\n    expect(fetch.mock.calls.length).toEqual(1);\n    expect(await response.json()).toEqual({ name: 'Ada Lovelace' });\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not store a response to a non-GET request","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":252,"column":52},"line":252,"code":"  it('does not store a response to a non-GET request', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'max-age=30' },\n    );\n\n    await httpCache.fetch(\n      new Request('https://api.example.com/people/1', { method: 'POST' }),\n    );\n\n    expect(store.size).toEqual(0);\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not store a response with a non-success status code","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":265,"column":62},"line":265,"code":"  it('does not store a response with a non-success status code', async () => {\n    fetch.mockResponseOnce(\n      'Internal server error',\n      { 'Cache-Control': 'max-age=30' },\n      500,\n    );\n\n    await httpCache.fetch(new Request('https://api.example.com/people/1'));\n\n    expect(store.size).toEqual(0);\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not store a response without Cache-Control header","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":277,"column":60},"line":277,"code":"  it('does not store a response without Cache-Control header', async () => {\n    fetch.mockJSONResponseOnce({ name: 'Ada Lovelace' });\n\n    await httpCache.fetch(new Request('https://api.example.com/people/1'));\n\n    expect(store.size).toEqual(0);\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not store a private response","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":285,"column":39},"line":285,"code":"  it('does not store a private response', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'private, max-age: 60' },\n    );\n\n    await httpCache.fetch(new Request('https://api.example.com/me'));\n\n    expect(store.size).toEqual(0);\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns a cached response when Vary header fields match","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":296,"column":61},"line":296,"code":"  it('returns a cached response when Vary header fields match', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'max-age=30', Vary: 'Accept-Language' },\n    );\n\n    await httpCache.fetch(\n      new Request('https://api.example.com/people/1', {\n        headers: { 'Accept-Language': 'en' },\n      }),\n    );\n\n    const response = await httpCache.fetch(\n      new Request('https://api.example.com/people/1', {\n        headers: { 'Accept-Language': 'en' },\n      }),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(1);\n    expect(await response.json()).toEqual({ name: 'Ada Lovelace' });\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not return a cached response when Vary header fields don't match","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":318,"column":75},"line":318,"code":"  it(`does not return a cached response when Vary header fields don't match`, async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'max-age=30', Vary: 'Accept-Language' },\n    );\n\n    await httpCache.fetch(\n      new Request('https://api.example.com/people/1', {\n        headers: { 'Accept-Language': 'en' },\n      }),\n    );\n\n    fetch.mockJSONResponseOnce(\n      { name: 'Alan Turing' },\n      { 'Cache-Control': 'max-age=30' },\n    );\n\n    const response = await httpCache.fetch(\n      new Request('https://api.example.com/people/1', {\n        headers: { 'Accept-Language': 'fr' },\n      }),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(2);\n    expect(await response.json()).toEqual({ name: 'Alan Turing' });\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"sets the TTL as max-age when the response does not contain revalidation headers","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":345,"column":85},"line":345,"code":"  it('sets the TTL as max-age when the response does not contain revalidation headers', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'max-age=30' },\n    );\n\n    const storeSet = jest.spyOn(store, 'set');\n\n    await httpCache.fetch(new Request('https://api.example.com/people/1'));\n\n    expect(storeSet).toHaveBeenCalledWith(\n      expect.any(String),\n      expect.any(String),\n      { ttl: 30 },\n    );\n    storeSet.mockRestore();\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"sets the TTL as 2 * max-age when the response contains an ETag header","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":363,"column":75},"line":363,"code":"  it('sets the TTL as 2 * max-age when the response contains an ETag header', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      { 'Cache-Control': 'max-age=30', ETag: 'foo' },\n    );\n\n    const storeSet = jest.spyOn(store, 'set');\n\n    await httpCache.fetch(new Request('https://api.example.com/people/1'));\n\n    expect(storeSet).toHaveBeenCalledWith(\n      expect.any(String),\n      expect.any(String),\n      { ttl: 60 },\n    );\n\n    storeSet.mockRestore();\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"revalidates a cached response when expired and returns the cached response when not modified","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":382,"column":98},"line":382,"code":"  it('revalidates a cached response when expired and returns the cached response when not modified', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      {\n        'Cache-Control': 'public, max-age=30',\n        ETag: 'foo',\n      },\n    );\n\n    await httpCache.fetch(new Request('https://api.example.com/people/1'));\n\n    clock.tick(30000);\n\n    fetch.mockResponseOnce(\n      null,\n      {\n        'Cache-Control': 'public, max-age=30',\n        ETag: 'foo',\n      },\n      304,\n    );\n\n    const response = await httpCache.fetch(\n      new Request('https://api.example.com/people/1'),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(2);\n    expect(\n      (fetch.mock.calls[1][0] as Request).headers.get('If-None-Match'),\n    ).toEqual('foo');\n\n    expect(response.status).toEqual(200);\n    expect(await response.json()).toEqual({ name: 'Ada Lovelace' });\n    expect(response.headers.get('Age')).toEqual('0');\n\n    clock.tick(10000);\n\n    const response2 = await httpCache.fetch(\n      new Request('https://api.example.com/people/1'),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(2);\n\n    expect(response2.status).toEqual(200);\n    expect(await response2.json()).toEqual({ name: 'Ada Lovelace' });\n    expect(response2.headers.get('Age')).toEqual('10');\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"revalidates a cached response when expired and returns and caches a fresh response when modified","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":430,"column":102},"line":430,"code":"  it('revalidates a cached response when expired and returns and caches a fresh response when modified', async () => {\n    fetch.mockJSONResponseOnce(\n      { name: 'Ada Lovelace' },\n      {\n        'Cache-Control': 'public, max-age=30',\n        ETag: 'foo',\n      },\n    );\n\n    await httpCache.fetch(new Request('https://api.example.com/people/1'));\n\n    clock.tick(30000);\n\n    fetch.mockJSONResponseOnce(\n      { name: 'Alan Turing' },\n      {\n        'Cache-Control': 'public, max-age=30',\n        ETag: 'bar',\n      },\n    );\n\n    const response = await httpCache.fetch(\n      new Request('https://api.example.com/people/1'),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(2);\n    expect(\n      (fetch.mock.calls[1][0] as Request).headers.get('If-None-Match'),\n    ).toEqual('foo');\n\n    expect(response.status).toEqual(200);\n    expect(await response.json()).toEqual({ name: 'Alan Turing' });\n\n    clock.tick(10000);\n\n    const response2 = await httpCache.fetch(\n      new Request('https://api.example.com/people/1'),\n    );\n\n    expect(fetch.mock.calls.length).toEqual(2);\n\n    expect(response2.status).toEqual(200);\n    expect(await response2.json()).toEqual({ name: 'Alan Turing' });\n    expect(response2.headers.get('Age')).toEqual('10');\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"fetches a response from the origin with a custom fetch function","suites":["HTTPCache","overriding TTL"],"updatePoint":{"line":476,"column":69},"line":476,"code":"  it('fetches a response from the origin with a custom fetch function', async () => {\n    fetch.mockJSONResponseOnce({ name: 'Ada Lovelace' });\n\n    const customFetch = jest.fn(fetch);\n    const customHttpCache = new HTTPCache(store as any, customFetch);\n\n    const response = await customHttpCache.fetch(\n      new Request('https://api.example.com/people/1'),\n    );\n\n    expect(customFetch.mock.calls.length).toEqual(1);\n    expect(await response.json()).toEqual({ name: 'Ada Lovelace' });\n  });","file":"HTTPCache.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"interprets paths relative to the base URL","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":25,"column":49},"line":25,"code":"    it('interprets paths relative to the base URL', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.getFoo();\n\n      expect(fetch).toBeCalledTimes(1);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/foo',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"interprets paths with a leading slash relative to the base URL","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":46,"column":70},"line":46,"code":"    it('interprets paths with a leading slash relative to the base URL', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com/bar';\n\n        getFoo() {\n          return this.get('/foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.getFoo();\n\n      expect(fetch).toBeCalledTimes(1);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/bar/foo',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"adds a trailing slash to the base URL if needed","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":67,"column":55},"line":67,"code":"    it('adds a trailing slash to the base URL if needed', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://example.com/api';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.getFoo();\n\n      expect(fetch).toBeCalledTimes(1);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://example.com/api/foo',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows resolving a base URL asynchronously","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":88,"column":50},"line":88,"code":"    it('allows resolving a base URL asynchronously', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override async resolveURL(request: RequestOptions) {\n          if (!this.baseURL) {\n            this.baseURL = 'https://api.example.com';\n          }\n          return super.resolveURL(request);\n        }\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n      await dataSource.getFoo();\n\n      expect(fetch).toBeCalledTimes(1);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/foo',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows passing in query string parameters","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":113,"column":49},"line":113,"code":"    it('allows passing in query string parameters', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getPostsForUser(\n          username: string,\n          params: { filter: string; limit: number; offset: number },\n        ) {\n          return this.get('posts', Object.assign({ username }, params));\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.getPostsForUser('beyoncé', {\n        filter: 'jalapeño',\n        limit: 10,\n        offset: 20,\n      });\n\n      expect(fetch).toBeCalledTimes(1);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/posts?username=beyonc%C3%A9&filter=jalape%C3%B1o&limit=10&offset=20',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows setting default query string parameters","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":141,"column":54},"line":141,"code":"    it('allows setting default query string parameters', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        override willSendRequest(request: RequestOptions) {\n          request.params.set('api_key', this.context.token);\n        }\n\n        getFoo() {\n          return this.get('foo', { a: 1 });\n        }\n      })();\n\n      dataSource.context = { token: 'secret' };\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.getFoo();\n\n      expect(fetch).toBeCalledTimes(1);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/foo?a=1&api_key=secret',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows setting default fetch options","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":167,"column":44},"line":167,"code":"    it('allows setting default fetch options', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        override willSendRequest(request: RequestOptions) {\n          request.credentials = 'include';\n        }\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.getFoo();\n\n      expect(fetch).toBeCalledTimes(1);\n      // TODO: request.credentials is not supported by node-fetch\n      // expect(fetch.mock.calls[0][0].credentials).toEqual('include');\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows setting request headers","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":191,"column":38},"line":191,"code":"    it('allows setting request headers', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        override willSendRequest(request: RequestOptions) {\n          request.headers.set('Authorization', this.context.token);\n        }\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.context = { token: 'secret' };\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.getFoo();\n\n      expect(fetch).toBeCalledTimes(1);\n      expect(\n        (fetch.mock.calls[0][0] as Request).headers.get('Authorization'),\n      ).toEqual('secret');\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"serializes a request body that is an object as JSON","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":229,"column":59},"line":229,"code":"    it('serializes a request body that is an object as JSON', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        postFoo(foo: object) {\n          return this.post('foo', foo);\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.postFoo({ foo: 'bar' });\n\n      expectJSONFetch('https://api.example.com/foo', { foo: 'bar' });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"serializes a request body that is an array as JSON","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":247,"column":58},"line":247,"code":"    it('serializes a request body that is an array as JSON', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        postFoo(foo: string[]) {\n          return this.post('foo', foo);\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.postFoo(['foo', 'bar']);\n\n      expectJSONFetch('https://api.example.com/foo', ['foo', 'bar']);\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"serializes a request body that has a toJSON method as JSON","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":265,"column":66},"line":265,"code":"    it('serializes a request body that has a toJSON method as JSON', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        postFoo(foo: Model) {\n          return this.post('foo', foo);\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      class Model {\n        constructor(public baz: any) {}\n\n        toJSON() {\n          return {\n            foo: this.baz,\n          };\n        }\n      }\n      const model = new Model('bar');\n\n      await dataSource.postFoo(model);\n\n      expectJSONFetch('https://api.example.com/foo', { foo: 'bar' });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not serialize a request body that is not an object","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":294,"column":63},"line":294,"code":"    it('does not serialize a request body that is not an object', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        postFoo(foo: FormData) {\n          return this.post('foo', foo);\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      class FormData {}\n      const form = new FormData();\n\n      await dataSource.postFoo(form);\n\n      expect(fetch).toBeCalledTimes(1);\n      const request = fetch.mock.calls[0][0] as Request;\n      expect(request.url).toEqual('https://api.example.com/foo');\n      // request.body is a node-fetch extension which we aren't properly\n      // capturing in our TS types.\n      expect((request as any).body.toString()).not.toEqual('{}');\n      expect(request.headers.get('Content-Type')).not.toEqual(\n        'application/json',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows performing  requests","suites":["RESTDataSource","constructing requests"],"updatePoint":{"line":348,"column":46},"line":348,"code":"      it(`allows performing ${method} requests`, async () => {\n        dataSource.httpCache = httpCache;\n\n        fetch.mockJSONResponseOnce({ foo: 'bar' });\n\n        const data = await (dataSource as any)[\n          `${method.toLocaleLowerCase()}Foo`\n        ]();\n\n        expect(data).toEqual({ foo: 'bar' });\n\n        expect(fetch).toBeCalledTimes(1);\n        expect((fetch.mock.calls[0][0] as Request).method).toEqual(method);\n      });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns data as parsed JSON when Content-Type is application/json","suites":["RESTDataSource","response parsing"],"updatePoint":{"line":366,"column":73},"line":366,"code":"    it('returns data as parsed JSON when Content-Type is application/json', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce(\n        { foo: 'bar' },\n        { 'Content-Type': 'application/json' },\n      );\n\n      const data = await dataSource.getFoo();\n\n      expect(data).toEqual({ foo: 'bar' });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns data as parsed JSON when Content-Type is application/hal+json","suites":["RESTDataSource","response parsing"],"updatePoint":{"line":387,"column":77},"line":387,"code":"    it('returns data as parsed JSON when Content-Type is application/hal+json', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce(\n        { foo: 'bar' },\n        { 'Content-Type': 'application/hal+json' },\n      );\n\n      const data = await dataSource.getFoo();\n\n      expect(data).toEqual({ foo: 'bar' });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns data as parsed JSON when Content-Type ends in +json","suites":["RESTDataSource","response parsing"],"updatePoint":{"line":408,"column":67},"line":408,"code":"    it('returns data as parsed JSON when Content-Type ends in +json', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce(\n        { foo: 'bar' },\n        { 'Content-Type': 'application/vnd.api+json' },\n      );\n\n      const data = await dataSource.getFoo();\n\n      expect(data).toEqual({ foo: 'bar' });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns data as a string when Content-Type is text/plain","suites":["RESTDataSource","response parsing"],"updatePoint":{"line":429,"column":64},"line":429,"code":"    it('returns data as a string when Content-Type is text/plain', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockResponseOnce('bar', { 'Content-Type': 'text/plain' });\n\n      const data = await dataSource.getFoo();\n\n      expect(data).toEqual('bar');\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"attempts to return data as a string when no Content-Type header is returned","suites":["RESTDataSource","response parsing"],"updatePoint":{"line":447,"column":83},"line":447,"code":"    it('attempts to return data as a string when no Content-Type header is returned', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockResponseOnce('bar');\n\n      const data = await dataSource.getFoo();\n\n      expect(data).toEqual('bar');\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns data as a string when response status code is 204 no content","suites":["RESTDataSource","response parsing"],"updatePoint":{"line":465,"column":76},"line":465,"code":"    it('returns data as a string when response status code is 204 no content', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockResponseOnce('', { 'Content-Type': 'application/json' }, 204);\n\n      const data = await dataSource.getFoo();\n\n      expect(data).toEqual('');\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"returns empty object when response content length is 0","suites":["RESTDataSource","response parsing"],"updatePoint":{"line":483,"column":62},"line":483,"code":"    it('returns empty object when response content length is 0', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockResponseOnce('', {\n        'Content-Type': 'application/json',\n        'Content-Length': '0',\n      });\n\n      const data = await dataSource.getFoo();\n\n      expect(data).toEqual('');\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"deduplicates requests with the same cache key","suites":["RESTDataSource","memoization"],"updatePoint":{"line":506,"column":53},"line":506,"code":"    it('deduplicates requests with the same cache key', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo(id: number) {\n          return this.get(`foo/${id}`);\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await Promise.all([dataSource.getFoo(1), dataSource.getFoo(1)]);\n\n      expect(fetch).toBeCalledTimes(1);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/foo/1',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not deduplicate requests with a different cache key","suites":["RESTDataSource","memoization"],"updatePoint":{"line":527,"column":64},"line":527,"code":"    it('does not deduplicate requests with a different cache key', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo(id: number) {\n          return this.get(`foo/${id}`);\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n      fetch.mockJSONResponseOnce();\n\n      await Promise.all([dataSource.getFoo(1), dataSource.getFoo(2)]);\n\n      expect(fetch.mock.calls.length).toEqual(2);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/foo/1',\n      );\n      expect((fetch.mock.calls[1][0] as Request).url).toEqual(\n        'https://api.example.com/foo/2',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"does not deduplicate non-GET requests","suites":["RESTDataSource","memoization"],"updatePoint":{"line":552,"column":45},"line":552,"code":"    it('does not deduplicate non-GET requests', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        postFoo(id: number) {\n          return this.post(`foo/${id}`);\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n      fetch.mockJSONResponseOnce();\n\n      await Promise.all([dataSource.postFoo(1), dataSource.postFoo(1)]);\n\n      expect(fetch.mock.calls.length).toEqual(2);\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"non-GET request removes memoized request with the same cache key","suites":["RESTDataSource","memoization"],"updatePoint":{"line":571,"column":72},"line":571,"code":"    it('non-GET request removes memoized request with the same cache key', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo(id: number) {\n          return this.get(`foo/${id}`);\n        }\n\n        postFoo(id: number) {\n          return this.post(`foo/${id}`);\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n      fetch.mockJSONResponseOnce();\n      fetch.mockJSONResponseOnce();\n\n      await Promise.all([\n        dataSource.getFoo(1),\n        dataSource.postFoo(1),\n        dataSource.getFoo(1),\n      ]);\n\n      expect(fetch.mock.calls.length).toEqual(3);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/foo/1',\n      );\n      expect((fetch.mock.calls[2][0] as Request).url).toEqual(\n        'https://api.example.com/foo/1',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"allows specifying a custom cache key","suites":["RESTDataSource","memoization"],"updatePoint":{"line":605,"column":44},"line":605,"code":"    it('allows specifying a custom cache key', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        override cacheKeyFor(request: Request) {\n          const url = new URL(request.url);\n          url.search = '';\n          return url.toString();\n        }\n\n        getFoo(id: number, apiKey: string) {\n          return this.get(`foo/${id}`, { api_key: apiKey });\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await Promise.all([\n        dataSource.getFoo(1, 'secret'),\n        dataSource.getFoo(1, 'anotherSecret'),\n      ]);\n\n      expect(fetch).toBeCalledTimes(1);\n      expect((fetch.mock.calls[0][0] as Request).url).toEqual(\n        'https://api.example.com/foo/1?api_key=secret',\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"throws an AuthenticationError when the response status is 401","suites":["RESTDataSource","error handling"],"updatePoint":{"line":637,"column":69},"line":637,"code":"    it('throws an AuthenticationError when the response status is 401', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockResponseOnce('Invalid token', undefined, 401);\n\n      const result = dataSource.getFoo();\n      await expect(result).rejects.toThrow(AuthenticationError);\n      await expect(result).rejects.toMatchObject({\n        extensions: {\n          code: 'UNAUTHENTICATED',\n          response: {\n            status: 401,\n            body: 'Invalid token',\n          },\n        },\n      });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"throws a ForbiddenError when the response status is 403","suites":["RESTDataSource","error handling"],"updatePoint":{"line":663,"column":63},"line":663,"code":"    it('throws a ForbiddenError when the response status is 403', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockResponseOnce('No access', undefined, 403);\n\n      const result = dataSource.getFoo();\n      await expect(result).rejects.toThrow(ForbiddenError);\n      await expect(result).rejects.toMatchObject({\n        extensions: {\n          code: 'FORBIDDEN',\n          response: {\n            status: 403,\n            body: 'No access',\n          },\n        },\n      });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"throws an ApolloError when the response status is 500","suites":["RESTDataSource","error handling"],"updatePoint":{"line":689,"column":61},"line":689,"code":"    it('throws an ApolloError when the response status is 500', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockResponseOnce('Oops', undefined, 500);\n\n      const result = dataSource.getFoo();\n      await expect(result).rejects.toThrow(ApolloError);\n      await expect(result).rejects.toMatchObject({\n        extensions: {\n          response: {\n            status: 500,\n            body: 'Oops',\n          },\n        },\n      });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"puts JSON error responses on the error as an object","suites":["RESTDataSource","error handling"],"updatePoint":{"line":714,"column":59},"line":714,"code":"    it('puts JSON error responses on the error as an object', async () => {\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockResponseOnce(\n        JSON.stringify({\n          errors: [\n            {\n              message: 'Houston, we have a problem.',\n            },\n          ],\n        }),\n        { 'Content-Type': 'application/json' },\n        500,\n      );\n\n      const result = dataSource.getFoo();\n      await expect(result).rejects.toThrow(ApolloError);\n      await expect(result).rejects.toMatchObject({\n        extensions: {\n          response: {\n            status: 500,\n            body: {\n              errors: [\n                {\n                  message: 'Houston, we have a problem.',\n                },\n              ],\n            },\n          },\n        },\n      });\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"is called once per request","suites":["RESTDataSource","trace"],"updatePoint":{"line":757,"column":34},"line":757,"code":"    it('is called once per request', async () => {\n      const traceMock = jest.fn();\n      const dataSource = new (class extends RESTDataSource {\n        override baseURL = 'https://api.example.com';\n\n        getFoo() {\n          return this.get('foo');\n        }\n\n        override trace = traceMock;\n      })();\n\n      dataSource.httpCache = httpCache;\n\n      fetch.mockJSONResponseOnce();\n\n      await dataSource.getFoo();\n\n      expect(traceMock).toBeCalledTimes(1);\n      expect(traceMock).toBeCalledWith(\n        expect.any(Object),\n        expect.any(Function),\n      );\n    });","file":"RESTDataSource.test.ts","skipped":false,"dir":"packages/apollo-datasource-rest/src/__tests__"},{"name":"can append CORS headers to GET request","suites":["integration:AzureFunctions"],"updatePoint":{"line":85,"column":44},"line":85,"code":"  it('can append CORS headers to GET request', async () => {\n    const server = new ApolloServer({ schema: Schema });\n    const handler = server.createHandler({\n      cors: {\n        origin: 'CORSOrigin',\n        methods: ['GET', 'POST', 'PUT'],\n        allowedHeaders: 'AllowedCORSHeader1,AllowedCORSHeader1',\n        exposedHeaders: 'ExposedCORSHeader1,ExposedCORSHeader2',\n        credentials: true,\n        maxAge: 42,\n      },\n    });\n    const expectedResult = {\n      testString: 'it works',\n    };\n    const query = {\n      query: 'query test{ testString }',\n    };\n    const request = {\n      method: 'GET',\n      body: null,\n      url: '/graphql',\n      query: query,\n      headers: {},\n    };\n    const context: any = {};\n    const p = new Promise((resolve, reject) => {\n      context.done = (error: Error, result: any) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      };\n    });\n    handler(context as any, request as any);\n    const result: any = await p;\n\n    expect(result.status).toEqual(200);\n    expect(result.body).toEqual(\n      JSON.stringify({ data: expectedResult }) + '\\n',\n    );\n    expect(result.headers['Access-Control-Allow-Origin']).toEqual('CORSOrigin');\n    expect(result.headers['Access-Control-Allow-Methods']).toEqual(\n      'GET,POST,PUT',\n    );\n    expect(result.headers['Access-Control-Allow-Headers']).toEqual(\n      'AllowedCORSHeader1,AllowedCORSHeader1',\n    );\n    expect(result.headers['Access-Control-Expose-Headers']).toEqual(\n      'ExposedCORSHeader1,ExposedCORSHeader2',\n    );\n    expect(result.headers['Access-Control-Allow-Credentials']).toEqual('true');\n    expect(result.headers['Access-Control-Max-Age']).toEqual(42);\n  });","file":"azureFunctionApollo.test.ts","skipped":false,"dir":"packages/apollo-server-azure-functions/src/__tests__"},{"name":"can handle OPTIONS request with CORS headers","suites":["integration:AzureFunctions"],"updatePoint":{"line":141,"column":50},"line":141,"code":"  it('can handle OPTIONS request with CORS headers', () => {\n    const server = new ApolloServer({ schema: Schema });\n    const handler = server.createHandler({\n      cors: {\n        allowedHeaders: 'AllowedCORSHeader1,AllowedCORSHeader1',\n      },\n    });\n    const request = {\n      method: 'OPTIONS',\n      body: null,\n      url: '/graphql',\n      query: null,\n      headers: {},\n    };\n    const context = {\n      done(error: any, result: any) {\n        if (error) throw error;\n        expect(result.status).toEqual(204);\n        expect(result.headers['Access-Control-Allow-Headers']).toEqual(\n          'AllowedCORSHeader1,AllowedCORSHeader1',\n        );\n      },\n    };\n    handler(context as any, request as any);\n  });","file":"azureFunctionApollo.test.ts","skipped":false,"dir":"packages/apollo-server-azure-functions/src/__tests__"},{"name":"can return landing page","suites":["integration:AzureFunctions"],"updatePoint":{"line":167,"column":29},"line":167,"code":"  it('can return landing page', (done) => {\n    const server = new ApolloServer({ schema: Schema });\n    const handler = server.createHandler({});\n    const request = {\n      method: 'GET',\n      body: null,\n      url: '/',\n      query: null,\n      headers: {\n        Accept: 'text/html',\n      },\n    };\n    const context = {\n      done(error: any, result: any) {\n        if (error) {\n          done(error);\n          return;\n        }\n        try {\n          expect(result.status).toEqual(200);\n          expect(result.body).toMatch(\n            /apollo-server-landing-page.cdn.apollographql.com\\/_latest/,\n          );\n          expect(result.headers['Content-Type']).toEqual('text/html');\n          done();\n        } catch (e) {\n          done(e);\n        }\n      },\n    };\n    handler(context as any, request as any);\n  });","file":"azureFunctionApollo.test.ts","skipped":false,"dir":"packages/apollo-server-azure-functions/src/__tests__"},{"name":"creates a health check endpoint","suites":["integration:AzureFunctions","health checks"],"updatePoint":{"line":201,"column":39},"line":201,"code":"    it('creates a health check endpoint', async () => {\n      const server = new ApolloServer({ schema: Schema });\n      const handler = server.createHandler({});\n\n      const context: any = {};\n      const p = new Promise((resolve, reject) => {\n        context.done = (error: Error, result: any) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        };\n      });\n\n      handler(context as any, healthCheckRequest as any);\n      const result: any = await p;\n      expect(result.status).toEqual(200);\n      expect(result.body).toEqual(JSON.stringify({ status: 'pass' }));\n      expect(result.headers['Content-Type']).toEqual('application/health+json');\n    });","file":"azureFunctionApollo.test.ts","skipped":false,"dir":"packages/apollo-server-azure-functions/src/__tests__"},{"name":"provides a callback for the health check","suites":["integration:AzureFunctions","health checks"],"updatePoint":{"line":223,"column":48},"line":223,"code":"    it('provides a callback for the health check', async () => {\n      const server = new ApolloServer({ schema: Schema });\n      const handler = server.createHandler({\n        onHealthCheck: async () => {\n          return new Promise((resolve) => {\n            return resolve('Success!');\n          });\n        },\n      });\n\n      const context: any = {};\n      const p = new Promise((resolve, reject) => {\n        context.done = (error: Error, result: any) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        };\n      });\n\n      handler(context as any, healthCheckRequest as any);\n      const result: any = await p;\n      expect(result.status).toEqual(200);\n      expect(result.body).toEqual(JSON.stringify({ status: 'pass' }));\n      expect(result.headers['Content-Type']).toEqual('application/health+json');\n    });","file":"azureFunctionApollo.test.ts","skipped":false,"dir":"packages/apollo-server-azure-functions/src/__tests__"},{"name":"returns a 503 if health check fails","suites":["integration:AzureFunctions","health checks"],"updatePoint":{"line":251,"column":43},"line":251,"code":"    it('returns a 503 if health check fails', async () => {\n      const server = new ApolloServer({ schema: Schema });\n      const handler = server.createHandler({\n        onHealthCheck: async () => {\n          return new Promise(() => {\n            throw new Error('Failed to connect!');\n          });\n        },\n      });\n\n      const context = {\n        done(error: any, result: any) {\n          if (error) throw error;\n          expect(result.status).toEqual(503);\n          expect(result.body).toEqual(JSON.stringify({ status: 'fail' }));\n          expect(result.headers['Content-Type']).toEqual(\n            'application/health+json',\n          );\n        },\n      };\n\n      handler(context as any, healthCheckRequest as any);\n    });","file":"azureFunctionApollo.test.ts","skipped":false,"dir":"packages/apollo-server-azure-functions/src/__tests__"},{"name":"handles requests with path set to null","suites":["googleCloudApollo"],"updatePoint":{"line":45,"column":44},"line":45,"code":"  it('handles requests with path set to null', async () => {\n    const app = await createCloudFunction(\n      {},\n      { expressGetMiddlewareOptions: { path: '/' } },\n    );\n    const res = await request(app).get('/').set('Accept', 'text/html');\n    expect(res.status).toEqual(200);\n  });","file":"googleCloudApollo.test.ts","skipped":false,"dir":"packages/apollo-server-cloud-functions/src/__tests__"},{"name":"succeeds when a valid configuration options are provided to typeDefs and resolvers","suites":["ApolloServerBase construction"],"updatePoint":{"line":31,"column":88},"line":31,"code":"  it('succeeds when a valid configuration options are provided to typeDefs and resolvers', () => {\n    expect(() => new ApolloServerBase({ typeDefs, resolvers })).not.toThrow();\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"succeeds when a valid GraphQLSchema is provided to the schema configuration option","suites":["ApolloServerBase construction"],"updatePoint":{"line":35,"column":88},"line":35,"code":"  it('succeeds when a valid GraphQLSchema is provided to the schema configuration option', () => {\n    expect(\n      () =>\n        new ApolloServerBase({\n          schema: buildServiceDefinition([{ typeDefs, resolvers }]).schema,\n        }),\n    ).not.toThrow();\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"succeeds when passed a graphVariant in construction","suites":["ApolloServerBase construction"],"updatePoint":{"line":44,"column":57},"line":44,"code":"  it('succeeds when passed a graphVariant in construction', () => {\n    const warn = jest.fn();\n    const logger: Logger = {\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn,\n      error: jest.fn(),\n    };\n    expect(\n      () =>\n        new ApolloServerBase({\n          typeDefs,\n          resolvers,\n          apollo: {\n            graphVariant: 'foo',\n            key: 'service:real:key',\n          },\n          logger,\n        }),\n    ).not.toThrow();\n    expect(warn).toHaveBeenCalledTimes(1);\n    expect(warn.mock.calls[0][0]).toMatch(\n      /Apollo key but have not specified a graph ref/,\n    );\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"throws when a GraphQLSchema is not provided to the schema configuration option","suites":["ApolloServerBase construction"],"updatePoint":{"line":70,"column":84},"line":70,"code":"  it('throws when a GraphQLSchema is not provided to the schema configuration option', () => {\n    expect(() => {\n      new ApolloServerBase({\n        schema: {} as GraphQLSchema,\n      });\n    }).toThrowErrorMatchingInlineSnapshot(\n      `\"Expected {} to be a GraphQL schema.\"`,\n    );\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"throws when the no schema configuration option is provided","suites":["ApolloServerBase construction"],"updatePoint":{"line":80,"column":64},"line":80,"code":"  it('throws when the no schema configuration option is provided', () => {\n    expect(() => {\n      new ApolloServerBase({});\n    }).toThrowErrorMatchingInlineSnapshot(\n      `\"Apollo Server requires either an existing schema, modules or typeDefs\"`,\n    );\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"start throws on startup error","suites":["ApolloServerBase start"],"updatePoint":{"line":98,"column":35},"line":98,"code":"  it('start throws on startup error', async () => {\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n      plugins: [failToStartPlugin],\n    });\n    await expect(server.start()).rejects.toThrow('nope');\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"stop throws on stop error","suites":["ApolloServerBase start"],"updatePoint":{"line":107,"column":31},"line":107,"code":"  it('stop throws on stop error', async () => {\n    let n = 1;\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n      plugins: [\n        {\n          async serverWillStart() {\n            return {\n              async serverWillStop() {\n                throw Error(`no way ${n++}`);\n              },\n            };\n          },\n        },\n      ],\n    });\n    await server.start();\n    const initialStopPromise = server.stop();\n    const concurrentStopPromise = server.stop();\n    await expect(initialStopPromise).rejects.toThrow('no way 1');\n    // A concurrent call will throw the same error again.\n    await expect(concurrentStopPromise).rejects.toThrow('no way 1');\n    // A subsequent call will throw the same error again.\n    await expect(server.stop()).rejects.toThrow('no way 1');\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"execute throws redacted message on serverless startup error","suites":["ApolloServerBase start"],"updatePoint":{"line":136,"column":65},"line":136,"code":"  it('execute throws redacted message on serverless startup error', async () => {\n    const error = jest.fn();\n    const logger: Logger = {\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error,\n    };\n\n    class ServerlessApolloServer extends ApolloServerBase {\n      override serverlessFramework() {\n        return true;\n      }\n    }\n\n    const server = new ServerlessApolloServer({\n      typeDefs,\n      resolvers,\n      plugins: [failToStartPlugin],\n      logger,\n    });\n    // Run the operation twice. We want to see the same error thrown and log\n    // message for the \"kick it off\" call as the subsequent call.\n    await expect(\n      server.executeOperation({ query: '{__typename}' }),\n    ).rejects.toThrow(redactedMessage);\n    await expect(\n      server.executeOperation({ query: '{__typename}' }),\n    ).rejects.toThrow(redactedMessage);\n\n    // Three times: once for the actual background _start call, twice for the\n    // two operations.\n    expect(error).toHaveBeenCalledTimes(3);\n    for (const [message] of error.mock.calls) {\n      expect(message).toBe(\n        'An error occurred during Apollo Server startup. All ' +\n          'GraphQL requests will now fail. The startup error was: nope',\n      );\n    }\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns error information without details by default","suites":["ApolloServerBase executeOperation"],"updatePoint":{"line":179,"column":58},"line":179,"code":"  it('returns error information without details by default', async () => {\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n    });\n    await server.start();\n\n    const result = await server.executeOperation({ query: 'query { error }' });\n\n    expect(result.errors).toHaveLength(1);\n    expect(result.errors?.[0].extensions).toStrictEqual({\n      code: 'INTERNAL_SERVER_ERROR',\n    });\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns error information with details when debug is enabled","suites":["ApolloServerBase executeOperation"],"updatePoint":{"line":194,"column":66},"line":194,"code":"  it('returns error information with details when debug is enabled', async () => {\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n      debug: true,\n    });\n    await server.start();\n\n    const result = await server.executeOperation({ query: 'query { error }' });\n\n    expect(result.errors).toHaveLength(1);\n    const extensions = result.errors?.[0].extensions;\n    expect(extensions).toHaveProperty('code', 'INTERNAL_SERVER_ERROR');\n    expect(extensions).toHaveProperty('exception.stacktrace');\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"works with string","suites":["ApolloServerBase executeOperation"],"updatePoint":{"line":210,"column":23},"line":210,"code":"  it('works with string', async () => {\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n    });\n    await server.start();\n\n    const result = await server.executeOperation({ query: '{ hello }' });\n    expect(result.errors).toBeUndefined();\n    expect(result.data?.hello).toBe('world');\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"works with AST","suites":["ApolloServerBase executeOperation"],"updatePoint":{"line":222,"column":20},"line":222,"code":"  it('works with AST', async () => {\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n    });\n    await server.start();\n\n    const result = await server.executeOperation({\n      query: gql`\n        {\n          hello\n        }\n      `,\n    });\n    expect(result.errors).toBeUndefined();\n    expect(result.data?.hello).toBe('world');\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"parse errors","suites":["ApolloServerBase executeOperation"],"updatePoint":{"line":240,"column":18},"line":240,"code":"  it('parse errors', async () => {\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n    });\n    await server.start();\n\n    const result = await server.executeOperation({ query: '{' });\n    expect(result.errors).toHaveLength(1);\n    expect(result.errors?.[0].extensions?.code).toBe('GRAPHQL_PARSE_FAILED');\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"passes its second argument to context function","suites":["ApolloServerBase executeOperation"],"updatePoint":{"line":252,"column":52},"line":252,"code":"  it('passes its second argument to context function', async () => {\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n      context: ({ fooIn }) => ({ foo: fooIn }),\n    });\n    await server.start();\n\n    const result = await server.executeOperation(\n      { query: '{ contextFoo }' },\n      { fooIn: 'bla' },\n    );\n    expect(result.errors).toBeUndefined();\n    expect(result.data?.contextFoo).toBe('bla');\n  });","file":"ApolloServerBase.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"starts uncacheable","suites":["newCachePolicy"],"updatePoint":{"line":10,"column":24},"line":10,"code":"  it('starts uncacheable', () => {\n    expect(cachePolicy.maxAge).toBeUndefined();\n    expect(cachePolicy.scope).toBeUndefined();\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"restricting maxAge positive makes restricted","suites":["newCachePolicy"],"updatePoint":{"line":15,"column":50},"line":15,"code":"  it('restricting maxAge positive makes restricted', () => {\n    cachePolicy.restrict({ maxAge: 10 });\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"restricting maxAge 0 makes restricted","suites":["newCachePolicy"],"updatePoint":{"line":19,"column":43},"line":19,"code":"  it('restricting maxAge 0 makes restricted', () => {\n    cachePolicy.restrict({ maxAge: 0 });\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"restricting scope to private makes restricted","suites":["newCachePolicy"],"updatePoint":{"line":23,"column":51},"line":23,"code":"  it('restricting scope to private makes restricted', () => {\n    cachePolicy.restrict({ scope: CacheScope.Private });\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns lowest max age value","suites":["newCachePolicy"],"updatePoint":{"line":27,"column":34},"line":27,"code":"  it('returns lowest max age value', () => {\n    cachePolicy.restrict({ maxAge: 10 });\n    cachePolicy.restrict({ maxAge: 20 });\n\n    expect(cachePolicy.maxAge).toBe(10);\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns lowest max age value in other order","suites":["newCachePolicy"],"updatePoint":{"line":34,"column":49},"line":34,"code":"  it('returns lowest max age value in other order', () => {\n    cachePolicy.restrict({ maxAge: 20 });\n    cachePolicy.restrict({ maxAge: 10 });\n\n    expect(cachePolicy.maxAge).toBe(10);\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"maxAge 0 if any cache hint has a maxAge of 0","suites":["newCachePolicy"],"updatePoint":{"line":41,"column":50},"line":41,"code":"  it('maxAge 0 if any cache hint has a maxAge of 0', () => {\n    cachePolicy.restrict({ maxAge: 120 });\n    cachePolicy.restrict({ maxAge: 0 });\n    cachePolicy.restrict({ maxAge: 20 });\n\n    expect(cachePolicy.maxAge).toBe(0);\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns undefined if first cache hint has a maxAge of 0","suites":["newCachePolicy"],"updatePoint":{"line":49,"column":61},"line":49,"code":"  it('returns undefined if first cache hint has a maxAge of 0', () => {\n    cachePolicy.restrict({ maxAge: 0 });\n    cachePolicy.restrict({ maxAge: 20 });\n\n    expect(cachePolicy.maxAge).toBe(0);\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"only restricting maxAge keeps scope undefined","suites":["newCachePolicy"],"updatePoint":{"line":56,"column":51},"line":56,"code":"  it('only restricting maxAge keeps scope undefined', () => {\n    cachePolicy.restrict({ maxAge: 10 });\n\n    expect(cachePolicy.scope).toBeUndefined();\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns PRIVATE scope if any cache hint has PRIVATE scope","suites":["newCachePolicy"],"updatePoint":{"line":62,"column":63},"line":62,"code":"  it('returns PRIVATE scope if any cache hint has PRIVATE scope', () => {\n    cachePolicy.restrict({\n      maxAge: 10,\n      scope: CacheScope.Public,\n    });\n    cachePolicy.restrict({\n      maxAge: 10,\n      scope: CacheScope.Private,\n    });\n\n    expect(cachePolicy).toHaveProperty('scope', CacheScope.Private);\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"policyIfCacheable","suites":["newCachePolicy"],"updatePoint":{"line":75,"column":23},"line":75,"code":"  it('policyIfCacheable', () => {\n    expect(cachePolicy.policyIfCacheable()).toBeNull();\n\n    cachePolicy.restrict({ scope: CacheScope.Private });\n    expect(cachePolicy.scope).toBe(CacheScope.Private);\n    expect(cachePolicy.policyIfCacheable()).toBeNull();\n\n    cachePolicy.restrict({ maxAge: 10 });\n    expect(cachePolicy).toMatchObject({\n      maxAge: 10,\n      scope: CacheScope.Private,\n    });\n    expect(cachePolicy.policyIfCacheable()).toStrictEqual({\n      maxAge: 10,\n      scope: CacheScope.Private,\n    });\n\n    cachePolicy.restrict({ maxAge: 0 });\n    expect(cachePolicy).toMatchObject({\n      maxAge: 0,\n      scope: CacheScope.Private,\n    });\n    expect(cachePolicy.policyIfCacheable()).toBeNull();\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"replace","suites":["newCachePolicy"],"updatePoint":{"line":100,"column":13},"line":100,"code":"  it('replace', () => {\n    cachePolicy.restrict({ maxAge: 10, scope: CacheScope.Private });\n    cachePolicy.replace({ maxAge: 20, scope: CacheScope.Public });\n\n    expect(cachePolicy).toMatchObject({\n      maxAge: 20,\n      scope: CacheScope.Public,\n    });\n  });","file":"cachePolicy.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"initializes synchronous datasources from a datasource creator function","suites":["ApolloServerBase dataSources"],"updatePoint":{"line":11,"column":76},"line":11,"code":"  it('initializes synchronous datasources from a datasource creator function', async () => {\n    const initialize = jest.fn();\n\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers: {\n        Query: {\n          hello() {\n            return 'world';\n          },\n        },\n      },\n      dataSources: () => ({ x: { initialize }, y: { initialize } }),\n    });\n    await server.start();\n\n    await server.executeOperation({ query: 'query { hello }' });\n\n    expect(initialize).toHaveBeenCalledTimes(2);\n  });","file":"dataSources.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"initializes all async and sync datasources before calling resolvers","suites":["ApolloServerBase dataSources"],"updatePoint":{"line":32,"column":73},"line":32,"code":"  it('initializes all async and sync datasources before calling resolvers', async () => {\n    const INITIALIZE = 'datasource initializer call';\n    const METHOD_CALL = 'datasource method call';\n\n    const expectedCallOrder = [INITIALIZE, INITIALIZE, INITIALIZE, METHOD_CALL];\n\n    const actualCallOrder: string[] = [];\n\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers: {\n        Query: {\n          hello(_, __, context) {\n            context.dataSources.x.getData();\n            return 'world';\n          },\n        },\n      },\n      dataSources: () => ({\n        x: {\n          initialize() {\n            return Promise.resolve().then(() => {\n              actualCallOrder.push(INITIALIZE);\n            });\n          },\n          getData() {\n            actualCallOrder.push(METHOD_CALL);\n          },\n        },\n        y: {\n          initialize() {\n            return new Promise((res) => {\n              setTimeout(() => {\n                actualCallOrder.push(INITIALIZE);\n                res();\n              }, 0);\n            });\n          },\n        },\n        z: {\n          initialize() {\n            actualCallOrder.push(INITIALIZE);\n          },\n        },\n      }),\n    });\n    await server.start();\n\n    await server.executeOperation({ query: 'query { hello }' });\n\n    expect(actualCallOrder).toEqual(expectedCallOrder);\n  });","file":"dataSources.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"makes datasources available on resolver contexts","suites":["ApolloServerBase dataSources"],"updatePoint":{"line":85,"column":54},"line":85,"code":"  it('makes datasources available on resolver contexts', async () => {\n    const message = 'hi from dataSource';\n    const getData = jest.fn(() => message);\n\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers: {\n        Query: {\n          hello(_, __, context) {\n            return context.dataSources.x.getData();\n          },\n        },\n      },\n      dataSources: () => ({ x: { initialize() {}, getData } }),\n    });\n    await server.start();\n\n    const res = await server.executeOperation({ query: 'query { hello }' });\n\n    expect(getData).toHaveBeenCalled();\n    expect(res.data?.hello).toBe(message);\n  });","file":"dataSources.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"documentStore - undefined","suites":["ApolloServerBase documentStore"],"updatePoint":{"line":46,"column":31},"line":46,"code":"  it('documentStore - undefined', async () => {\n    const server = new ApolloServerObservable({\n      typeDefs,\n      resolvers,\n    });\n\n    await server.start();\n\n    const options = await server.graphQLServerOptions();\n    const embeddedStore = options.documentStore;\n    assert(embeddedStore);\n    expect(embeddedStore).toBeInstanceOf(InMemoryLRUCache);\n\n    await server.executeOperation(operations.simple.op);\n\n    expect(await embeddedStore.get(operations.simple.hash)).toMatchObject(\n      documentNodeMatcher,\n    );\n  });","file":"documentStore.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"documentStore - custom","suites":["ApolloServerBase documentStore"],"updatePoint":{"line":66,"column":28},"line":66,"code":"  it('documentStore - custom', async () => {\n    const documentStore = {\n      get: async function (key: string) {\n        return cache[key];\n      },\n      set: async function (key: string, val: DocumentNode) {\n        cache[key] = val;\n      },\n      delete: async function () {},\n    };\n    const cache: Record<string, DocumentNode> = {};\n\n    const getSpy = jest.spyOn(documentStore, 'get');\n    const setSpy = jest.spyOn(documentStore, 'set');\n\n    const server = new ApolloServerBase({\n      typeDefs,\n      resolvers,\n      documentStore,\n    });\n    await server.start();\n\n    await server.executeOperation(operations.simple.op);\n\n    const keys = Object.keys(cache);\n    expect(keys).toHaveLength(1);\n    const theKey = keys[0];\n    expect(theKey.split(':')).toHaveLength(2);\n    expect(theKey.split(':')[1]).toEqual(operations.simple.hash);\n    expect(cache[theKey]).toMatchObject(documentNodeMatcher);\n\n    await server.executeOperation(operations.simple.op);\n\n    expect(Object.keys(cache)).toEqual([theKey]);\n\n    expect(getSpy.mock.calls.length).toBe(2);\n    expect(setSpy.mock.calls.length).toBe(1);\n  });","file":"documentStore.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"documentStore - null","suites":["ApolloServerBase documentStore"],"updatePoint":{"line":105,"column":26},"line":105,"code":"  it('documentStore - null', async () => {\n    const server = new ApolloServerObservable({\n      typeDefs,\n      resolvers,\n      documentStore: null,\n    });\n\n    await server.start();\n\n    const options = await server.graphQLServerOptions();\n    expect(options.documentStore).toBe(null);\n\n    const result = await server.executeOperation(operations.simple.op);\n\n    expect(result.data).toEqual({ hello: 'world' });\n  });","file":"documentStore.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"documentStore with changing schema","suites":["ApolloServerBase documentStore"],"updatePoint":{"line":122,"column":40},"line":122,"code":"  it('documentStore with changing schema', async () => {});","file":"documentStore.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"defaults code to INTERNAL_SERVER_ERROR","suites":["Errors","ApolloError"],"updatePoint":{"line":16,"column":46},"line":16,"code":"    it('defaults code to INTERNAL_SERVER_ERROR', () => {\n      const error = new ApolloError(message);\n      expect(error.message).toEqual(message);\n      expect(error.extensions.code).toBeUndefined();\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"allows code setting and additional properties","suites":["Errors","ApolloError"],"updatePoint":{"line":21,"column":53},"line":21,"code":"    it('allows code setting and additional properties', () => {\n      const code = 'CODE';\n      const key = 'value';\n      const error = new ApolloError(message, code, { key });\n      expect(error.message).toEqual(message);\n      expect(error.key).toBeUndefined();\n      expect(error.extensions.code).toEqual(code);\n      expect(error.extensions.key).toEqual(key);\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"exposes a stacktrace in debug mode","suites":["Errors","formatApolloErrors"],"updatePoint":{"line":67,"column":42},"line":67,"code":"    it('exposes a stacktrace in debug mode', () => {\n      const error = createFormattedError({ debug: true });\n      expect(error.message).toEqual(message);\n      expect(error.extensions.key).toEqual(key);\n      expect(error.extensions.exception.key).toBeUndefined();\n      expect(error.extensions.code).toEqual(code);\n      // stacktrace should exist under exception\n      expect(error.extensions.exception.stacktrace).toBeDefined();\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"hides stacktrace by default","suites":["Errors","formatApolloErrors"],"updatePoint":{"line":76,"column":35},"line":76,"code":"    it('hides stacktrace by default', () => {\n      const thrown = new Error(message);\n      (thrown as any).key = key;\n      const error = formatApolloErrors([\n        new GraphQLError(\n          thrown.message,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          thrown,\n        ),\n      ])[0];\n      expect(error.message).toEqual(message);\n      expect(error.extensions.code).toEqual('INTERNAL_SERVER_ERROR');\n      expect(error.extensions.exception).toHaveProperty('key', key);\n      // stacktrace should exist under exception\n      expect(error.extensions.exception).not.toHaveProperty('stacktrace');\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"exposes fields on error under exception field and provides code","suites":["Errors","formatApolloErrors"],"updatePoint":{"line":95,"column":71},"line":95,"code":"    it('exposes fields on error under exception field and provides code', () => {\n      const error = createFormattedError();\n      expect(error.message).toEqual(message);\n      expect(error.extensions.key).toEqual(key);\n      expect(error.extensions.exception).toBeUndefined();\n      expect(error.extensions.code).toEqual(code);\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"calls formatter after exposing the code and stacktrace","suites":["Errors","formatApolloErrors"],"updatePoint":{"line":102,"column":62},"line":102,"code":"    it('calls formatter after exposing the code and stacktrace', () => {\n      const error = new ApolloError(message, code, { key });\n      const formatter = jest.fn();\n      formatApolloErrors([error], {\n        formatter,\n        debug: true,\n      });\n      expect(error.message).toEqual(message);\n      expect(error.extensions.key).toEqual(key);\n      expect(error.key).toBeUndefined();\n      expect(error.extensions.code).toEqual(code);\n      expect(error instanceof ApolloError).toBe(true);\n      expect(formatter).toHaveBeenCalledTimes(1);\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"Formats native Errors in a JSON-compatible way","suites":["Errors","formatApolloErrors"],"updatePoint":{"line":116,"column":54},"line":116,"code":"    it('Formats native Errors in a JSON-compatible way', () => {\n      const error = new Error('Hello');\n      const [formattedError] = formatApolloErrors([error]);\n      expect(JSON.parse(JSON.stringify(formattedError)).message).toBe('Hello');\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"provides an authentication error","suites":["Errors","Named Errors"],"updatePoint":{"line":139,"column":40},"line":139,"code":"    it('provides an authentication error', () => {\n      verifyError(new AuthenticationError(message), {\n        code: 'UNAUTHENTICATED',\n        errorClass: AuthenticationError,\n        name: 'AuthenticationError',\n      });\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"provides a forbidden error","suites":["Errors","Named Errors"],"updatePoint":{"line":146,"column":34},"line":146,"code":"    it('provides a forbidden error', () => {\n      verifyError(new ForbiddenError(message), {\n        code: 'FORBIDDEN',\n        errorClass: ForbiddenError,\n        name: 'ForbiddenError',\n      });\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"provides a syntax error","suites":["Errors","Named Errors"],"updatePoint":{"line":153,"column":31},"line":153,"code":"    it('provides a syntax error', () => {\n      verifyError(new SyntaxError(message), {\n        code: 'GRAPHQL_PARSE_FAILED',\n        errorClass: SyntaxError,\n        name: 'SyntaxError',\n      });\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"provides a validation error","suites":["Errors","Named Errors"],"updatePoint":{"line":160,"column":35},"line":160,"code":"    it('provides a validation error', () => {\n      verifyError(new ValidationError(message), {\n        code: 'GRAPHQL_VALIDATION_FAILED',\n        errorClass: ValidationError,\n        name: 'ValidationError',\n      });\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"provides a user input error","suites":["Errors","Named Errors"],"updatePoint":{"line":167,"column":35},"line":167,"code":"    it('provides a user input error', () => {\n      const error = new UserInputError(message, {\n        field1: 'property1',\n        field2: 'property2',\n      });\n      verifyError(error, {\n        code: 'BAD_USER_INPUT',\n        errorClass: UserInputError,\n        name: 'UserInputError',\n      });\n\n      const formattedError = formatApolloErrors([\n        new GraphQLError(\n          error.message,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          error,\n        ),\n      ])[0];\n\n      expect(formattedError.extensions.field1).toEqual('property1');\n      expect(formattedError.extensions.field2).toEqual('property2');\n      expect(formattedError.extensions.exception).toBeUndefined();\n    });","file":"errors.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"uses internal loglevel logger by default","suites":["logger"],"updatePoint":{"line":8,"column":46},"line":8,"code":"  it('uses internal loglevel logger by default', async () => {\n    const server = new ApolloServerBase({\n      typeDefs: gql`\n        type Query {\n          field: String!\n        }\n      `,\n      plugins: [\n        {\n          async serverWillStart({ logger }) {\n            logger.debug(KNOWN_DEBUG_MESSAGE);\n          },\n        },\n      ],\n    });\n\n    const defaultLogger = server['logger'] as loglevel.Logger;\n    const debugSpy = jest.spyOn(defaultLogger, 'debug');\n    await server.start();\n\n    expect(debugSpy).toHaveBeenCalledWith(KNOWN_DEBUG_MESSAGE);\n    // checking the logger is the one from `loglevel`, we can't instance check\n    // this since loglevel doesn't uses classes.\n    expect(defaultLogger.levels).toEqual(loglevel.levels);\n  });","file":"logger.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"uses custom logger when configured","suites":["logger"],"updatePoint":{"line":34,"column":40},"line":34,"code":"  it('uses custom logger when configured', async () => {\n    const debugSpy = jest.fn();\n    const server = new ApolloServerBase({\n      typeDefs: gql`\n        type Query {\n          field: String!\n        }\n      `,\n      plugins: [\n        {\n          async serverWillStart({ logger }) {\n            logger.debug(KNOWN_DEBUG_MESSAGE);\n          },\n        },\n      ],\n      logger: {\n        debug: debugSpy,\n        info: () => {},\n        warn: () => {},\n        error: () => {},\n      },\n    });\n\n    await server.start();\n    expect(debugSpy).toHaveBeenCalledWith(KNOWN_DEBUG_MESSAGE);\n  });","file":"logger.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"bundles into es6 without circular dependencies issues","suites":["@rollup/plugin-commonjs"],"updatePoint":{"line":7,"column":59},"line":7,"code":"  it('bundles into es6 without circular dependencies issues', async () => {\n    const outputOptions = {\n      exports: 'named',\n      name: 'apollo',\n      format: 'umd',\n      sourcemapExcludeSources: false,\n    };\n    const bundle = await rollup.rollup({\n      input: path.resolve(__dirname, '..', '..', 'dist', 'index.js'),\n      plugins: [json(), commonjs()],\n      onwarn: () => {\n        /* suppress warnings */\n      },\n    });\n    const { output } = await bundle.generate(outputOptions);\n    const indexBundle = output[0].code;\n    var varDefinedAfterBundle;\n    eval(`${indexBundle}; varDefinedAfterBundle = 'foo';`);\n    expect(varDefinedAfterBundle).toEqual('foo');\n  });","file":"rollupCommonJs.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"raises a 400 error if the query is missing","suites":["runHttpQuery","handling a GET query"],"updatePoint":{"line":39,"column":50},"line":39,"code":"    it('raises a 400 error if the query is missing', () => {\n      const noQueryRequest = Object.assign({}, mockQueryRequest, {\n        query: 'foo',\n      });\n\n      expect.assertions(2);\n      return runHttpQuery([], noQueryRequest).catch((err: HttpQueryError) => {\n        expect(err.statusCode).toEqual(400);\n        expect(err.message).toEqual(\n          JSON.stringify({\n            errors: [\n              {\n                message:\n                  'GraphQL operations must contain a non-empty `query` or a `persistedQuery` extension.',\n                extensions: { code: 'INTERNAL_SERVER_ERROR' },\n              },\n            ],\n          }) + '\\n',\n        );\n      });\n    });","file":"runHttpQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"succeeds when there are no batched queries in the request","suites":["runHttpQuery","when allowBatchedHttpRequests is false"],"updatePoint":{"line":77,"column":65},"line":77,"code":"    it('succeeds when there are no batched queries in the request', async () => {\n      await expect(\n        runHttpQuery([], mockDisabledBatchQueryRequest),\n      ).resolves.not.toThrow();\n    });","file":"runHttpQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"throws when there are batched queries in the request","suites":["runHttpQuery","when allowBatchedHttpRequests is false"],"updatePoint":{"line":83,"column":60},"line":83,"code":"    it('throws when there are batched queries in the request', () => {\n      const batchedQueryRequest = Object.assign(\n        {},\n        mockDisabledBatchQueryRequest,\n        {\n          query: [\n            {\n              query: '{ testString }',\n            },\n            {\n              query: '{ testString }',\n            },\n          ],\n        },\n      );\n      return runHttpQuery([], batchedQueryRequest).catch(\n        (err: HttpQueryError) => {\n          expect(err.statusCode).toEqual(400);\n          expect(err.message).toEqual(\n            JSON.stringify({\n              errors: [\n                {\n                  message: 'Operation batching disabled.',\n                  extensions: { code: 'INTERNAL_SERVER_ERROR' },\n                },\n              ],\n            }) + '\\n',\n          );\n        },\n      );\n    });","file":"runHttpQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"succeeds when there are multiple queries in the request","suites":["runHttpQuery","when allowBatchedHttpRequests is true"],"updatePoint":{"line":131,"column":63},"line":131,"code":"    it('succeeds when there are multiple queries in the request', async () => {\n      const multipleQueryRequest = Object.assign(\n        {},\n        mockEnabledBatchQueryRequest,\n        {\n          query: [\n            {\n              query: '{ testString }',\n            },\n            {\n              query: '{ testString }',\n            },\n          ],\n        },\n      );\n\n      await expect(\n        runHttpQuery([], multipleQueryRequest),\n      ).resolves.not.toThrow();\n    });","file":"runHttpQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns the right result when query is a string","suites":["runQuery"],"updatePoint":{"line":151,"column":53},"line":151,"code":"  it('returns the right result when query is a string', () => {\n    const query = `{ testString }`;\n    const expected = { testString: 'it works' };\n    return runQuery({\n      schema,\n      queryString: query,\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns a syntax error if the query string contains one","suites":["runQuery"],"updatePoint":{"line":163,"column":61},"line":163,"code":"  it('returns a syntax error if the query string contains one', () => {\n    const query = `query { test `;\n    const expected = /Syntax Error/;\n    return runQuery({\n      schema,\n      queryString: query,\n      variables: { base: 1 },\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toBeUndefined();\n      expect(res.errors!.length).toEqual(1);\n      expect(res.errors![0].message).toMatch(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"does not call console.error if in an error occurs and debug mode is set","suites":["runQuery"],"updatePoint":{"line":178,"column":77},"line":178,"code":"  it('does not call console.error if in an error occurs and debug mode is set', () => {\n    const query = `query { testError }`;\n    const logStub = jest.spyOn(console, 'error');\n    return runQuery({\n      schema,\n      queryString: query,\n      debug: true,\n      request: new MockReq(),\n    }).then(() => {\n      logStub.mockRestore();\n      expect(logStub.mock.calls.length).toEqual(0);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"does not call console.error if in an error occurs and not in debug mode","suites":["runQuery"],"updatePoint":{"line":192,"column":77},"line":192,"code":"  it('does not call console.error if in an error occurs and not in debug mode', () => {\n    const query = `query { testError }`;\n    const logStub = jest.spyOn(console, 'error');\n    return runQuery({\n      schema,\n      queryString: query,\n      debug: false,\n      request: new MockReq(),\n    }).then(() => {\n      logStub.mockRestore();\n      expect(logStub.mock.calls.length).toEqual(0);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"returns a validation error if the query string does not pass validation","suites":["runQuery"],"updatePoint":{"line":206,"column":77},"line":206,"code":"  it('returns a validation error if the query string does not pass validation', () => {\n    const query = `query TestVar($base: String){ testArgumentValue(base: $base) }`;\n    const expected =\n      'Variable \"$base\" of type \"String\" used in position expecting type \"Int!\".';\n    return runQuery({\n      schema,\n      queryString: query,\n      variables: { base: 1 },\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toBeUndefined();\n      expect(res.errors!.length).toEqual(1);\n      expect(res.errors![0].message).toEqual(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"correctly passes in the rootValue","suites":["runQuery"],"updatePoint":{"line":222,"column":39},"line":222,"code":"  it('correctly passes in the rootValue', () => {\n    const query = `{ testRootValue }`;\n    const expected = { testRootValue: 'it also works' };\n    return runQuery({\n      schema,\n      queryString: query,\n      rootValue: 'it also',\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"correctly evaluates a rootValue function","suites":["runQuery"],"updatePoint":{"line":235,"column":46},"line":235,"code":"  it('correctly evaluates a rootValue function', () => {\n    const query = `{ testRootValue }`;\n    const expected = { testRootValue: 'it also works' };\n    return runQuery({\n      schema,\n      queryString: query,\n      rootValue: (doc: DocumentNode) => {\n        expect(doc.kind).toEqual('Document');\n        return 'it also';\n      },\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"correctly passes in the context","suites":["runQuery"],"updatePoint":{"line":251,"column":37},"line":251,"code":"  it('correctly passes in the context', () => {\n    const query = `{ testContextValue }`;\n    const expected = { testContextValue: 'it still works' };\n    return runQuery({\n      schema,\n      queryString: query,\n      context: { s: 'it still' },\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"passes the options to formatResponse","suites":["runQuery"],"updatePoint":{"line":264,"column":42},"line":264,"code":"  it('passes the options to formatResponse', () => {\n    const query = `{ testContextValue }`;\n    const expected = { testContextValue: 'it still works' };\n    return runQuery({\n      schema,\n      queryString: query,\n      context: { s: 'it still' },\n      formatResponse: (response: any, { context }: { context: any }) => {\n        response['extensions'] = context.s;\n        return response;\n      },\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toEqual(expected);\n      expect(res['extensions']).toEqual('it still');\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"correctly passes in variables (and arguments)","suites":["runQuery"],"updatePoint":{"line":282,"column":51},"line":282,"code":"  it('correctly passes in variables (and arguments)', () => {\n    const query = `query TestVar($base: Int!){ testArgumentValue(base: $base) }`;\n    const expected = { testArgumentValue: 6 };\n    return runQuery({\n      schema,\n      queryString: query,\n      variables: { base: 1 },\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"throws an error if there are missing variables","suites":["runQuery"],"updatePoint":{"line":295,"column":52},"line":295,"code":"  it('throws an error if there are missing variables', () => {\n    const query = `query TestVar($base: Int!){ testArgumentValue(base: $base) }`;\n    const expected =\n      'Variable \"$base\" of required type \"Int!\" was not provided.';\n    return runQuery({\n      schema,\n      queryString: query,\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.errors![0].message).toEqual(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"supports yielding resolver functions","suites":["runQuery"],"updatePoint":{"line":308,"column":42},"line":308,"code":"  it('supports yielding resolver functions', () => {\n    return runQuery({\n      schema,\n      queryString: `{ testAwaitedValue }`,\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toEqual({\n        testAwaitedValue: 'it works',\n      });\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"runs the correct operation when operationName is specified","suites":["runQuery"],"updatePoint":{"line":320,"column":64},"line":320,"code":"  it('runs the correct operation when operationName is specified', () => {\n    const query = `\n        query Q1 {\n            testString\n        }\n        query Q2 {\n            testRootValue\n        }`;\n    const expected = {\n      testString: 'it works',\n    };\n    return runQuery({\n      schema,\n      queryString: query,\n      operationName: 'Q1',\n      request: new MockReq(),\n    }).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"uses custom field resolver","suites":["runQuery"],"updatePoint":{"line":341,"column":32},"line":341,"code":"  it('uses custom field resolver', async () => {\n    const query = `\n        query Q1 {\n          testObject {\n            testString\n          }\n        }\n      `;\n\n    const result1 = await runQuery({\n      schema,\n      queryString: query,\n      operationName: 'Q1',\n      request: new MockReq(),\n    });\n\n    expect(result1.data).toEqual({\n      testObject: {\n        testString: 'a very test string',\n      },\n    });\n\n    const result2 = await runQuery({\n      schema,\n      queryString: query,\n      operationName: 'Q1',\n      fieldResolver: () => 'a very testful field resolver string',\n      request: new MockReq(),\n    });\n\n    expect(result2.data).toEqual({\n      testObject: {\n        testString: 'a very testful field resolver string',\n      },\n    });\n  });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called for each request","suites":["runQuery","request pipeline life-cycle hooks","requestDidStart"],"updatePoint":{"line":381,"column":33},"line":381,"code":"      it('called for each request', async () => {\n        const runOnce = () =>\n          runQuery({\n            schema,\n            queryString: '{ testString }',\n            plugins: [\n              {\n                requestDidStart,\n              },\n            ],\n            request: new MockReq(),\n          });\n\n        await runOnce();\n        expect(requestDidStart.mock.calls.length).toBe(1);\n        await runOnce();\n        expect(requestDidStart.mock.calls.length).toBe(2);\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"is called with the schema and schemaHash","suites":["runQuery","request pipeline life-cycle hooks","requestDidStart"],"updatePoint":{"line":400,"column":50},"line":400,"code":"      it('is called with the schema and schemaHash', async () => {\n        await runQuery({\n          schema,\n          queryString: '{ testString }',\n          plugins: [\n            {\n              requestDidStart,\n            },\n          ],\n          request: new MockReq(),\n        });\n\n        const invocation = requestDidStart.mock.calls[0][0];\n        expect(invocation).toHaveProperty('schema', schema);\n        expect(invocation).toHaveProperty('schemaHash', 'deprecated');\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called with the source","suites":["runQuery","request pipeline life-cycle hooks","didResolveSource"],"updatePoint":{"line":429,"column":32},"line":429,"code":"      it('called with the source', async () => {\n        await runQuery({\n          schema,\n          queryString: '{ testString }',\n          plugins: [\n            {\n              async requestDidStart() {\n                return {\n                  didResolveSource,\n                };\n              },\n            },\n          ],\n          request: new MockReq(),\n        });\n\n        expect(didResolveSource).toHaveBeenCalled();\n        expect(didResolveSource.mock.calls[0][0]).toHaveProperty(\n          'source',\n          '{ testString }',\n        );\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called when parsing will result in an error","suites":["runQuery","request pipeline life-cycle hooks","parsingDidStart"],"updatePoint":{"line":455,"column":53},"line":455,"code":"      it('called when parsing will result in an error', async () => {\n        await runQuery({\n          schema,\n          queryString: '{ testStringWithParseError: }',\n          plugins: [\n            {\n              async requestDidStart() {\n                return {\n                  parsingDidStart,\n                };\n              },\n            },\n          ],\n          request: new MockReq(),\n        });\n\n        expect(parsingDidStart).toBeCalled();\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called when a successful parse happens","suites":["runQuery","request pipeline life-cycle hooks","parsingDidStart"],"updatePoint":{"line":474,"column":48},"line":474,"code":"      it('called when a successful parse happens', async () => {\n        await runQuery({\n          schema,\n          queryString: '{ testString }',\n          plugins: [\n            {\n              async requestDidStart() {\n                return {\n                  parsingDidStart,\n                };\n              },\n            },\n          ],\n          request: new MockReq(),\n        });\n\n        expect(parsingDidStart).toBeCalled();\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called when execution starts","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart"],"updatePoint":{"line":495,"column":38},"line":495,"code":"      it('called when execution starts', async () => {\n        const executionDidStart = jest.fn();\n        await runQuery({\n          schema,\n          queryString: '{ testString }',\n          plugins: [\n            {\n              async requestDidStart() {\n                return {\n                  executionDidStart,\n                };\n              },\n            },\n          ],\n          request: new MockReq(),\n        });\n\n        expect(executionDidStart).toHaveBeenCalledTimes(1);\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"works as a listener on an object returned from \"executionDidStart\"","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","executionDidEnd"],"updatePoint":{"line":516,"column":78},"line":516,"code":"        it('works as a listener on an object returned from \"executionDidStart\"', async () => {\n          const executionDidEnd = jest.fn();\n          const executionDidStart = jest.fn(\n            async (): Promise<GraphQLRequestExecutionListener> => ({\n              executionDidEnd,\n            }),\n          );\n\n          await runQuery({\n            schema,\n            queryString: '{ testString }',\n            plugins: [\n              {\n                async requestDidStart() {\n                  return {\n                    executionDidStart,\n                  };\n                },\n              },\n            ],\n            request: new MockReq(),\n          });\n\n          expect(executionDidStart).toHaveBeenCalledTimes(1);\n          expect(executionDidEnd).toHaveBeenCalledTimes(1);\n        });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called when resolving a field starts","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField"],"updatePoint":{"line":545,"column":48},"line":545,"code":"        it('called when resolving a field starts', async () => {\n          const willResolveField = jest.fn();\n          const executionDidEnd = jest.fn();\n          const executionDidStart = jest.fn(\n            async (): Promise<GraphQLRequestExecutionListener> => ({\n              willResolveField,\n              executionDidEnd,\n            }),\n          );\n\n          await runQuery({\n            schema,\n            queryString: '{ testString }',\n            plugins: [\n              {\n                async requestDidStart() {\n                  return {\n                    executionDidStart,\n                  };\n                },\n              },\n            ],\n            request: new MockReq(),\n          });\n\n          expect(executionDidStart).toHaveBeenCalledTimes(1);\n          expect(willResolveField).toHaveBeenCalledTimes(1);\n          expect(executionDidEnd).toHaveBeenCalledTimes(1);\n        });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called once for each field being resolved","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField"],"updatePoint":{"line":575,"column":53},"line":575,"code":"        it('called once for each field being resolved', async () => {\n          const willResolveField = jest.fn();\n          const executionDidEnd = jest.fn();\n          const executionDidStart = jest.fn(\n            async (): Promise<GraphQLRequestExecutionListener> => ({\n              willResolveField,\n              executionDidEnd,\n            }),\n          );\n\n          await runQuery({\n            schema,\n            queryString: '{ testString again:testString }',\n            plugins: [\n              {\n                async requestDidStart() {\n                  return {\n                    executionDidStart,\n                  };\n                },\n              },\n            ],\n            request: new MockReq(),\n          });\n\n          expect(executionDidStart).toHaveBeenCalledTimes(1);\n          expect(willResolveField).toHaveBeenCalledTimes(2);\n          expect(executionDidEnd).toHaveBeenCalledTimes(1);\n        });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"receives undefined parent when there is no parent","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField","receives correct resolver parameter object"],"updatePoint":{"line":606,"column":63},"line":606,"code":"          it('receives undefined parent when there is no parent', async () => {\n            const willResolveField = jest.fn();\n\n            await runQuery({\n              schema,\n              queryString: '{ testString }',\n              plugins: [\n                {\n                  async requestDidStart() {\n                    return {\n                      executionDidStart: async () => ({\n                        willResolveField,\n                      }),\n                    };\n                  },\n                },\n              ],\n              request: new MockReq(),\n            });\n\n            // It is called only once.\n            expect(willResolveField).toHaveBeenCalledTimes(1);\n            const call = willResolveField.mock.calls[0];\n            expect(call[0]).toHaveProperty('source', undefined);\n            expect(call[0]).toHaveProperty('info.path.key', 'testString');\n            expect(call[0]).toHaveProperty('info.path.prev', undefined);\n          });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"receives the parent when there is one","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField","receives correct resolver parameter object"],"updatePoint":{"line":634,"column":51},"line":634,"code":"          it('receives the parent when there is one', async () => {\n            const willResolveField = jest.fn();\n\n            await runQuery({\n              schema,\n              queryString: '{ testObject { testString } }',\n              plugins: [\n                {\n                  async requestDidStart() {\n                    return {\n                      executionDidStart: async () => ({\n                        willResolveField,\n                      }),\n                    };\n                  },\n                },\n              ],\n              request: new MockReq(),\n            });\n\n            // It is called 1st for `testObject` and then 2nd for `testString`.\n            expect(willResolveField).toHaveBeenCalledTimes(2);\n            const [firstCall, secondCall] = willResolveField.mock.calls;\n            expect(firstCall[0]).toHaveProperty('source', undefined);\n            expect(firstCall[0]).toHaveProperty('info.path.key', 'testObject');\n            expect(firstCall[0]).toHaveProperty('info.path.prev', undefined);\n\n            expect(secondCall[0]).toHaveProperty('source', {\n              testString: 'a very test string',\n            });\n            expect(secondCall[0]).toHaveProperty('info.path.key', 'testString');\n            expect(secondCall[0]).toHaveProperty('info.path.prev', {\n              key: 'testObject',\n              prev: undefined,\n              typename: 'QueryType',\n            });\n          });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"receives context","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField","receives correct resolver parameter object"],"updatePoint":{"line":672,"column":30},"line":672,"code":"          it('receives context', async () => {\n            const willResolveField = jest.fn();\n\n            await runQuery({\n              schema,\n              context: { ourSpecialContext: true },\n              queryString: '{ testString }',\n              plugins: [\n                {\n                  async requestDidStart() {\n                    return {\n                      executionDidStart: async () => ({\n                        willResolveField,\n                      }),\n                    };\n                  },\n                },\n              ],\n              request: new MockReq(),\n            });\n\n            expect(willResolveField).toHaveBeenCalledTimes(1);\n            expect(willResolveField.mock.calls[0][0]).toHaveProperty(\n              'context',\n              expect.objectContaining({ ourSpecialContext: true }),\n            );\n          });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"receives arguments","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField","receives correct resolver parameter object"],"updatePoint":{"line":700,"column":32},"line":700,"code":"          it('receives arguments', async () => {\n            const willResolveField = jest.fn();\n\n            await runQuery({\n              schema,\n              queryString: '{ testArgumentValue(base: 99) }',\n              plugins: [\n                {\n                  async requestDidStart() {\n                    return {\n                      executionDidStart: async () => ({\n                        willResolveField,\n                      }),\n                    };\n                  },\n                },\n              ],\n              request: new MockReq(),\n            });\n\n            expect(willResolveField).toHaveBeenCalledTimes(1);\n            expect(willResolveField.mock.calls[0][0]).toHaveProperty(\n              'args.base',\n              99,\n            );\n          });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"calls the end handler","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField","receives correct resolver parameter object"],"updatePoint":{"line":728,"column":33},"line":728,"code":"        it('calls the end handler', async () => {\n          const didResolveField: GraphQLRequestListenerDidResolveField =\n            jest.fn();\n          const willResolveField = jest.fn(() => didResolveField);\n          const executionDidEnd = jest.fn();\n          const executionDidStart = jest.fn(\n            async (): Promise<GraphQLRequestExecutionListener> => ({\n              willResolveField,\n              executionDidEnd,\n            }),\n          );\n\n          await runQuery({\n            schema,\n            queryString: '{ testString }',\n            plugins: [\n              {\n                async requestDidStart() {\n                  return {\n                    executionDidStart,\n                  };\n                },\n              },\n            ],\n            request: new MockReq(),\n          });\n\n          expect(executionDidStart).toHaveBeenCalledTimes(1);\n          expect(willResolveField).toHaveBeenCalledTimes(1);\n          expect(didResolveField).toHaveBeenCalledTimes(1);\n          expect(executionDidEnd).toHaveBeenCalledTimes(1);\n        });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"calls the end handler for each field being resolved","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField","receives correct resolver parameter object"],"updatePoint":{"line":761,"column":63},"line":761,"code":"        it('calls the end handler for each field being resolved', async () => {\n          const didResolveField: GraphQLRequestListenerDidResolveField =\n            jest.fn();\n          const willResolveField = jest.fn(() => didResolveField);\n          const executionDidEnd = jest.fn();\n          const executionDidStart = jest.fn(\n            async (): Promise<GraphQLRequestExecutionListener> => ({\n              willResolveField,\n              executionDidEnd,\n            }),\n          );\n\n          await runQuery({\n            schema,\n            queryString: '{ testString again: testString }',\n            plugins: [\n              {\n                async requestDidStart() {\n                  return {\n                    executionDidStart,\n                  };\n                },\n              },\n            ],\n            request: new MockReq(),\n          });\n\n          expect(executionDidStart).toHaveBeenCalledTimes(1);\n          expect(willResolveField).toHaveBeenCalledTimes(2);\n          expect(didResolveField).toHaveBeenCalledTimes(2);\n          expect(executionDidEnd).toHaveBeenCalledTimes(1);\n        });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"uses the custom \"fieldResolver\" when defined","suites":["runQuery","request pipeline life-cycle hooks","executionDidStart","willResolveField","receives correct resolver parameter object"],"updatePoint":{"line":794,"column":56},"line":794,"code":"        it('uses the custom \"fieldResolver\" when defined', async () => {\n          const schemaWithResolver = new GraphQLSchema({\n            query: new GraphQLObjectType({\n              name: 'QueryType',\n              fields: {\n                testString: {\n                  type: GraphQLString,\n                  resolve() {\n                    return 'using schema-defined resolver';\n                  },\n                },\n              },\n            }),\n          });\n\n          const schemaWithoutResolver = new GraphQLSchema({\n            query: new GraphQLObjectType({\n              name: 'QueryType',\n              fields: {\n                testString: {\n                  type: GraphQLString,\n                },\n              },\n            }),\n          });\n\n          const differentFieldResolver = () =>\n            \"I'm different, ya, I'm different.\";\n\n          const queryString = `{ testString } `;\n\n          const didResolveField: GraphQLRequestListenerDidResolveField =\n            jest.fn();\n          const willResolveField = jest.fn(() => didResolveField);\n\n          const plugins: ApolloServerPlugin[] = [\n            {\n              requestDidStart: async () => ({\n                executionDidStart: async () => ({\n                  willResolveField,\n                }),\n              }),\n            },\n          ];\n\n          const resultFromSchemaWithResolver = await runQuery({\n            schema: schemaWithResolver,\n            queryString,\n            plugins,\n            request: new MockReq(),\n            fieldResolver: differentFieldResolver,\n          });\n\n          expect(willResolveField).toHaveBeenCalledTimes(1);\n          expect(didResolveField).toHaveBeenCalledTimes(1);\n\n          expect(resultFromSchemaWithResolver.data).toEqual({\n            testString: 'using schema-defined resolver',\n          });\n\n          const resultFromSchemaWithoutResolver = await runQuery({\n            schema: schemaWithoutResolver,\n            queryString,\n            plugins,\n            request: new MockReq(),\n            fieldResolver: differentFieldResolver,\n          });\n\n          expect(willResolveField).toHaveBeenCalledTimes(2);\n          expect(didResolveField).toHaveBeenCalledTimes(2);\n\n          expect(resultFromSchemaWithoutResolver.data).toEqual({\n            testString: \"I'm different, ya, I'm different.\",\n          });\n        });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called when an error occurs","suites":["runQuery","request pipeline life-cycle hooks","didEncounterErrors"],"updatePoint":{"line":882,"column":37},"line":882,"code":"      it('called when an error occurs', async () => {\n        await runQuery({\n          schema,\n          queryString: '{ testStringWithParseError: }',\n          plugins,\n          request: new MockReq(),\n        });\n\n        expect(didEncounterErrors).toBeCalledWith(\n          expect.objectContaining({\n            errors: expect.arrayContaining([expect.any(Error)]),\n          }),\n        );\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"called when an error occurs in execution","suites":["runQuery","request pipeline life-cycle hooks","didEncounterErrors"],"updatePoint":{"line":897,"column":50},"line":897,"code":"      it('called when an error occurs in execution', async () => {\n        const response = await runQuery({\n          schema,\n          queryString: '{ testError }',\n          plugins,\n          request: new MockReq(),\n        });\n\n        expect(response).toHaveProperty(\n          'errors.0.message',\n          'Secret error message',\n        );\n        expect(response).toHaveProperty('data.testError', null);\n\n        expect(didEncounterErrors).toBeCalledWith(\n          expect.objectContaining({\n            errors: expect.arrayContaining([\n              expect.objectContaining({\n                message: 'Secret error message',\n              }),\n            ]),\n          }),\n        );\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"not called when an error does not occur","suites":["runQuery","request pipeline life-cycle hooks","didEncounterErrors"],"updatePoint":{"line":922,"column":49},"line":922,"code":"      it('not called when an error does not occur', async () => {\n        await runQuery({\n          schema,\n          queryString: '{ testString }',\n          plugins,\n          request: new MockReq(),\n        });\n\n        expect(didEncounterErrors).not.toBeCalled();\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"calls hooks in the expected order","suites":["runQuery","request pipeline life-cycle hooks","ordering"],"updatePoint":{"line":935,"column":43},"line":935,"code":"      it('calls hooks in the expected order', async () => {\n        const callOrder: string[] = [];\n        let stopAwaiting: Function;\n        const toBeAwaited = new Promise((resolve) => (stopAwaiting = resolve));\n\n        const parsingDidEnd: GraphQLRequestListenerParsingDidEnd = jest.fn(\n          async () => {\n            callOrder.push('parsingDidEnd');\n          },\n        );\n        const parsingDidStart: GraphQLRequestListener['parsingDidStart'] =\n          jest.fn(async () => {\n            callOrder.push('parsingDidStart');\n            return parsingDidEnd;\n          });\n\n        const validationDidEnd: GraphQLRequestListenerValidationDidEnd =\n          jest.fn(async () => {\n            callOrder.push('validationDidEnd');\n          });\n        const validationDidStart: GraphQLRequestListener['validationDidStart'] =\n          jest.fn(async () => {\n            callOrder.push('validationDidStart');\n            return validationDidEnd;\n          });\n\n        const didResolveSource: GraphQLRequestListener['didResolveSource'] =\n          jest.fn(async () => {\n            callOrder.push('didResolveSource');\n          });\n\n        const didResolveField: GraphQLRequestListenerDidResolveField = jest.fn(\n          () => callOrder.push('didResolveField'),\n        );\n\n        const willResolveField = jest.fn(() => {\n          callOrder.push('willResolveField');\n          return didResolveField;\n        });\n\n        const executionDidEnd: GraphQLRequestListenerExecutionDidEnd = jest.fn(\n          async () => {\n            callOrder.push('executionDidEnd');\n          },\n        );\n\n        const executionDidStart = jest.fn(\n          async (): Promise<GraphQLRequestExecutionListener> => {\n            callOrder.push('executionDidStart');\n            return { willResolveField, executionDidEnd };\n          },\n        );\n\n        const schema = new GraphQLSchema({\n          query: new GraphQLObjectType({\n            name: 'QueryType',\n            fields: {\n              testString: {\n                type: GraphQLString,\n                async resolve() {\n                  callOrder.push('beforeAwaiting');\n                  await toBeAwaited;\n                  callOrder.push('afterAwaiting');\n                  return 'it works';\n                },\n              },\n            },\n          }),\n        });\n\n        Promise.resolve().then(() => stopAwaiting());\n\n        await runQuery({\n          schema,\n          queryString: '{ testString }',\n          plugins: [\n            {\n              async requestDidStart() {\n                return {\n                  parsingDidStart,\n                  validationDidStart,\n                  didResolveSource,\n                  executionDidStart,\n                };\n              },\n            },\n          ],\n          request: new MockReq(),\n        });\n\n        expect(parsingDidStart).toHaveBeenCalledTimes(1);\n        expect(parsingDidEnd).toHaveBeenCalledTimes(1);\n        expect(validationDidStart).toHaveBeenCalledTimes(1);\n        expect(validationDidEnd).toHaveBeenCalledTimes(1);\n        expect(executionDidStart).toHaveBeenCalledTimes(1);\n        expect(willResolveField).toHaveBeenCalledTimes(1);\n        expect(didResolveField).toHaveBeenCalledTimes(1);\n        expect(callOrder).toStrictEqual([\n          'didResolveSource',\n          'parsingDidStart',\n          'parsingDidEnd',\n          'validationDidStart',\n          'validationDidEnd',\n          'executionDidStart',\n          'willResolveField',\n          'beforeAwaiting',\n          'afterAwaiting',\n          'didResolveField',\n          'executionDidEnd',\n        ]);\n      });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"validates each time when the documentStore is not present","suites":["runQuery","parsing and validation cache"],"updatePoint":{"line":1106,"column":65},"line":1106,"code":"    it('validates each time when the documentStore is not present', async () => {\n      expect.assertions(4);\n\n      const {\n        plugins,\n        events: { parsingDidStart, validationDidStart },\n      } = createLifecyclePluginMocks();\n\n      // The first request will do a parse and validate. (1/1)\n      await runRequest({ plugins });\n      expect(parsingDidStart.mock.calls.length).toBe(1);\n      expect(validationDidStart.mock.calls.length).toBe(1);\n\n      // The second request should ALSO do a parse and validate. (2/2)\n      await runRequest({ plugins });\n      expect(parsingDidStart.mock.calls.length).toBe(2);\n      expect(validationDidStart.mock.calls.length).toBe(2);\n    });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"caches the DocumentNode in the documentStore when instrumented","suites":["runQuery","parsing and validation cache"],"updatePoint":{"line":1125,"column":70},"line":1125,"code":"    it('caches the DocumentNode in the documentStore when instrumented', async () => {\n      expect.assertions(4);\n      const documentStore = new InMemoryLRUCache<DocumentNode>();\n\n      const {\n        plugins,\n        events: { parsingDidStart, validationDidStart },\n      } = createLifecyclePluginMocks();\n\n      // An uncached request will have 1 parse and 1 validate call.\n      await runRequest({ plugins, documentStore });\n      expect(parsingDidStart.mock.calls.length).toBe(1);\n      expect(validationDidStart.mock.calls.length).toBe(1);\n\n      // The second request should still only have a 1 validate and 1 parse.\n      await runRequest({ plugins, documentStore });\n      expect(parsingDidStart.mock.calls.length).toBe(1);\n      expect(validationDidStart.mock.calls.length).toBe(1);\n    });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"the documentStore calculates the DocumentNode's length by its JSON.stringify'd representation","suites":["runQuery","parsing and validation cache"],"updatePoint":{"line":1145,"column":101},"line":1145,"code":"    it(\"the documentStore calculates the DocumentNode's length by its JSON.stringify'd representation\", async () => {\n      expect.assertions(14);\n      const {\n        plugins,\n        events: { parsingDidStart, validationDidStart },\n      } = createLifecyclePluginMocks();\n\n      const queryLarge = forgeLargerTestQuery(3, 'large');\n      const querySmall1 = forgeLargerTestQuery(1, 'small1');\n      const querySmall2 = forgeLargerTestQuery(1, 'small2');\n\n      // We're going to create a smaller-than-default cache which will be the\n      // size of the two smaller queries.  All three of these queries will never\n      // fit into this cache, so we'll roll through them all.\n      const maxSize =\n        InMemoryLRUCache.sizeCalculation(parse(querySmall1)) +\n        InMemoryLRUCache.sizeCalculation(parse(querySmall2));\n\n      const documentStore = new InMemoryLRUCache<DocumentNode>({\n        maxSize,\n        sizeCalculation: InMemoryLRUCache.sizeCalculation,\n      });\n\n      await runRequest({ plugins, documentStore, queryString: querySmall1 });\n      expect(parsingDidStart.mock.calls.length).toBe(1);\n      expect(validationDidStart.mock.calls.length).toBe(1);\n\n      await runRequest({ plugins, documentStore, queryString: querySmall2 });\n      expect(parsingDidStart.mock.calls.length).toBe(2);\n      expect(validationDidStart.mock.calls.length).toBe(2);\n\n      // This query should be large enough to evict both of the previous\n      // from the LRU cache since it's larger than the TOTAL limit of the cache\n      // (which is capped at the length of small1 + small2) — though this will\n      // still fit (barely).\n      await runRequest({ plugins, documentStore, queryString: queryLarge });\n      expect(parsingDidStart.mock.calls.length).toBe(3);\n      expect(validationDidStart.mock.calls.length).toBe(3);\n\n      // Make sure the large query is still cached (No incr. to parse/validate.)\n      await runRequest({ plugins, documentStore, queryString: queryLarge });\n      expect(parsingDidStart.mock.calls.length).toBe(3);\n      expect(validationDidStart.mock.calls.length).toBe(3);\n\n      // This small (and the other) should both trigger parse/validate since\n      // the cache had to have evicted them both after accommodating the larger.\n      await runRequest({ plugins, documentStore, queryString: querySmall1 });\n      expect(parsingDidStart.mock.calls.length).toBe(4);\n      expect(validationDidStart.mock.calls.length).toBe(4);\n\n      await runRequest({ plugins, documentStore, queryString: querySmall2 });\n      expect(parsingDidStart.mock.calls.length).toBe(5);\n      expect(validationDidStart.mock.calls.length).toBe(5);\n\n      // Finally, make sure that the large query is gone (it should be, after\n      // the last two have taken its spot again.)\n      await runRequest({ plugins, documentStore, queryString: queryLarge });\n      expect(parsingDidStart.mock.calls.length).toBe(6);\n      expect(validationDidStart.mock.calls.length).toBe(6);\n    });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"does not break async_hook call stack","suites":["runQuery","async_hooks"],"updatePoint":{"line":1229,"column":44},"line":1229,"code":"    it('does not break async_hook call stack', async () => {\n      const query = `\n        query Q1 {\n          testObject {\n            testString\n          }\n        }\n      `;\n\n      await runQuery({\n        schema,\n        queryString: query,\n        operationName: 'Q1',\n        request: new MockReq(),\n      });\n\n      // Expect there to be several async ids provided\n      expect(ids.length).toBeGreaterThanOrEqual(2);\n    });","file":"runQuery.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"basic get, set, delete","suites":["UnboundedCache"],"updatePoint":{"line":11,"column":28},"line":11,"code":"  it('basic get, set, delete', async () => {\n    const cache = new UnboundedCache();\n\n    await cache.set('key', 'value');\n    expect(await cache.get('key')).toBe('value');\n\n    await cache.delete('key');\n    expect(await cache.get('key')).toBeUndefined();\n  });","file":"UnboundedCache.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"get with ttl","suites":["UnboundedCache"],"updatePoint":{"line":21,"column":18},"line":21,"code":"  it('get with ttl', async () => {\n    const cache = new UnboundedCache();\n\n    // 1s, or 1000ms\n    await cache.set('key', 'value', { ttl: 1 });\n\n    // check that it's there at 999ms\n    jest.advanceTimersByTime(999);\n    expect(await cache.get('key')).toBe('value');\n\n    // expire\n    jest.advanceTimersByTime(1);\n    expect(await cache.get('key')).toBeUndefined();\n  });","file":"UnboundedCache.test.ts","skipped":false,"dir":"packages/apollo-server-core/src/__tests__"},{"name":"doesn't overwrite extensions when provided in the constructor","suites":["ApolloError"],"updatePoint":{"line":4,"column":67},"line":4,"code":"  it(\"doesn't overwrite extensions when provided in the constructor\", () => {\n    const error = new ApolloError('My message', 'A_CODE', {\n      arbitrary: 'user_data',\n    });\n\n    expect(error.extensions).toEqual({\n      code: 'A_CODE',\n      arbitrary: 'user_data',\n    });\n  });","file":"ApolloError.test.ts","skipped":false,"dir":"packages/apollo-server-errors/src/__tests__"},{"name":"a code property doesn't overwrite the code provided to the constructor","suites":["ApolloError"],"updatePoint":{"line":15,"column":76},"line":15,"code":"  it(\"a code property doesn't overwrite the code provided to the constructor\", () => {\n    const error = new ApolloError('My message', 'A_CODE', {\n      code: 'CANT_OVERWRITE',\n    });\n\n    expect(error.extensions).toEqual({\n      code: 'A_CODE',\n    });\n  });","file":"ApolloError.test.ts","skipped":false,"dir":"packages/apollo-server-errors/src/__tests__"},{"name":"a message property doesn't overwrite the message provided to the constructor","suites":["ApolloError"],"updatePoint":{"line":28,"column":82},"line":28,"code":"  it(\"a message property doesn't overwrite the message provided to the constructor\", () => {\n    const error = new ApolloError('My original message', 'A_CODE', {\n      message:\n        \"This message can't overwrite the original message, but it does end up in extensions\",\n    });\n\n    expect(error.message).toEqual('My original message');\n    expect(error.extensions.message).toEqual(\n      \"This message can't overwrite the original message, but it does end up in extensions\",\n    );\n  });","file":"ApolloError.test.ts","skipped":false,"dir":"packages/apollo-server-errors/src/__tests__"},{"name":"throws for users who use an extensions key in the third constructor argument","suites":["ApolloError"],"updatePoint":{"line":40,"column":82},"line":40,"code":"  it('throws for users who use an extensions key in the third constructor argument', () => {\n    expect(\n      () =>\n        new ApolloError('My original message', 'A_CODE', {\n          extensions: {\n            arbitrary: 'user_data',\n          },\n        }),\n    ).toThrow(/Pass extensions directly/);\n  });","file":"ApolloError.test.ts","skipped":false,"dir":"packages/apollo-server-errors/src/__tests__"},{"name":"provides toJSON method","suites":["ApolloError"],"updatePoint":{"line":51,"column":28},"line":51,"code":"  it('provides toJSON method', () => {\n    const error = new ApolloError('My original message', 'A_CODE', {\n      arbitrary: 'user_data',\n    });\n\n    expect(error.toJSON()).toEqual({\n      message: 'My original message',\n      extensions: {\n        code: 'A_CODE',\n        arbitrary: 'user_data',\n      },\n    });\n  });","file":"ApolloError.test.ts","skipped":false,"dir":"packages/apollo-server-errors/src/__tests__"},{"name":"provides toString method","suites":["ApolloError"],"updatePoint":{"line":65,"column":30},"line":65,"code":"  it('provides toString method', () => {\n    const error = new ApolloError('My original message', 'A_CODE', {\n      arbitrary: 'user_data',\n    });\n\n    expect(error.toString()).toEqual('My original message');\n  });","file":"ApolloError.test.ts","skipped":false,"dir":"packages/apollo-server-errors/src/__tests__"},{"name":"supports arbitrary data being passed","suites":["ForbiddenError"],"updatePoint":{"line":75,"column":42},"line":75,"code":"  it('supports arbitrary data being passed', () => {\n    const error = new ForbiddenError('My message', {\n      arbitrary: 'user_data',\n    });\n\n    expect(error.extensions).toEqual({\n      code: 'FORBIDDEN',\n      arbitrary: 'user_data',\n    });\n  });","file":"ApolloError.test.ts","skipped":false,"dir":"packages/apollo-server-errors/src/__tests__"},{"name":"supports arbitrary data being passed","suites":["AuthenticationError"],"updatePoint":{"line":88,"column":42},"line":88,"code":"  it('supports arbitrary data being passed', () => {\n    const error = new AuthenticationError('My message', {\n      arbitrary: 'user_data',\n    });\n\n    expect(error.extensions).toEqual({\n      code: 'UNAUTHENTICATED',\n      arbitrary: 'user_data',\n    });\n  });","file":"ApolloError.test.ts","skipped":false,"dir":"packages/apollo-server-errors/src/__tests__"},{"name":"accepts typeDefs and resolvers","suites":["apollo-server-express","constructor"],"updatePoint":{"line":101,"column":38},"line":101,"code":"    it('accepts typeDefs and resolvers', () => {\n      return createServer({ typeDefs, resolvers });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"can be queried","suites":["apollo-server-express","applyMiddleware"],"updatePoint":{"line":107,"column":22},"line":107,"code":"    it('can be queried', async () => {\n      const { url: uri } = await createServer({\n        typeDefs,\n        resolvers,\n      });\n      const apolloFetch = createApolloFetch({ uri });\n      const result = await apolloFetch({ query: '{hello}' });\n\n      expect(result.data).toEqual({ hello: 'hi' });\n      expect(result.errors).toBeUndefined();\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"renders landing page by default when browser requests","suites":["apollo-server-express","applyMiddleware"],"updatePoint":{"line":119,"column":61},"line":119,"code":"    it('renders landing page by default when browser requests', async () => {\n      const { httpServer } = await createServer({\n        typeDefs,\n        resolvers,\n        nodeEnv: '', // default landing page\n      });\n\n      await request(httpServer)\n        .get('/graphql')\n        .set(\n          'accept',\n          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n        )\n        .expect(\n          200,\n          /apollo-server-landing-page.cdn.apollographql.com\\/_latest/,\n        );\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"accepts cors configuration","suites":["apollo-server-express","applyMiddleware"],"updatePoint":{"line":138,"column":34},"line":138,"code":"    it('accepts cors configuration', async () => {\n      const { url: uri } = await createServer(\n        {\n          typeDefs,\n          resolvers,\n        },\n        {\n          cors: { origin: 'apollographql.com' },\n        },\n      );\n\n      const apolloFetch = createApolloFetch({ uri }).useAfter(\n        (response, next) => {\n          expect(\n            response.response.headers.get('access-control-allow-origin'),\n          ).toEqual('apollographql.com');\n          next();\n        },\n      );\n      await apolloFetch({ query: '{hello}' });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"accepts body parser configuration","suites":["apollo-server-express","applyMiddleware"],"updatePoint":{"line":160,"column":41},"line":160,"code":"    it('accepts body parser configuration', async () => {\n      const { url: uri } = await createServer(\n        {\n          typeDefs,\n          resolvers,\n        },\n        {\n          bodyParserConfig: { limit: 0 },\n        },\n      );\n\n      const apolloFetch = createApolloFetch({ uri });\n\n      return new Promise<void>((resolve, reject) => {\n        apolloFetch({ query: '{hello}' })\n          .then(reject)\n          .catch((error) => {\n            expect(error.response).toBeDefined();\n            expect(error.response.status).toEqual(413);\n            expect(error.toString()).toMatch('Payload Too Large');\n            resolve();\n          });\n      });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"gives helpful error if body is not parsed","suites":["apollo-server-express","applyMiddleware"],"updatePoint":{"line":185,"column":49},"line":185,"code":"    it('gives helpful error if body is not parsed', async () => {\n      const { server, httpServer } = await createServer(\n        {\n          typeDefs,\n          resolvers,\n        },\n        { bodyParserConfig: false },\n      );\n\n      await request(httpServer)\n        .post(server.graphqlPath)\n        .send({ query: '{hello}' })\n        .expect(500, /need to use `body-parser`/);\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"creates a health check endpoint","suites":["apollo-server-express","applyMiddleware","health checks"],"updatePoint":{"line":201,"column":41},"line":201,"code":"      it('creates a health check endpoint', async () => {\n        const { httpServer } = await createServer({\n          typeDefs,\n          resolvers,\n        });\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(200, { status: 'pass' });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"provides a callback for the health check","suites":["apollo-server-express","applyMiddleware","health checks"],"updatePoint":{"line":212,"column":50},"line":212,"code":"      it('provides a callback for the health check', async () => {\n        const { httpServer } = await createServer(\n          {\n            typeDefs,\n            resolvers,\n          },\n          {\n            onHealthCheck: async () => {\n              throw Error(\"can't connect to DB\");\n            },\n          },\n        );\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(503, { status: 'fail' });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"can disable the healthCheck","suites":["apollo-server-express","applyMiddleware","health checks"],"updatePoint":{"line":230,"column":37},"line":230,"code":"      it('can disable the healthCheck', async () => {\n        const { httpServer } = await createServer(\n          {\n            typeDefs,\n            resolvers,\n          },\n          {\n            disableHealthCheck: true,\n          },\n        );\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(404);\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"returns thrown context error as a valid graphql result","suites":["apollo-server-express","applyMiddleware","errors"],"updatePoint":{"line":248,"column":64},"line":248,"code":"      it('returns thrown context error as a valid graphql result', async () => {\n        const typeDefs = gql`\n          type Query {\n            hello: String\n          }\n        `;\n        const resolvers = {\n          Query: {\n            hello: () => {\n              throw Error('never get here');\n            },\n          },\n        };\n        const { url: uri } = await createServer({\n          typeDefs,\n          resolvers,\n          context: () => {\n            throw new AuthenticationError('valid result');\n          },\n          // Stack trace not included for NODE_ENV=test\n          nodeEnv: '',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: '{hello}' });\n        expect(result.errors.length).toEqual(1);\n        expect(result.data).toBeUndefined();\n\n        const e = result.errors[0];\n        expect(e.message).toMatch('valid result');\n        expect(e.extensions).toBeDefined();\n        expect(e.extensions.code).toEqual('UNAUTHENTICATED');\n        expect(e.extensions.exception.stacktrace).toBeDefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"propagates error codes in dev mode","suites":["apollo-server-express","applyMiddleware","errors"],"updatePoint":{"line":284,"column":44},"line":284,"code":"      it('propagates error codes in dev mode', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          // Stack trace not included for NODE_ENV=test\n          nodeEnv: '',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeDefined();\n        expect(result.data).toEqual({ error: null });\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeDefined();\n        expect(result.errors[0].extensions.exception.stacktrace).toBeDefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"propagates error codes in production","suites":["apollo-server-express","applyMiddleware","errors"],"updatePoint":{"line":315,"column":46},"line":315,"code":"      it('propagates error codes in production', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          nodeEnv: 'production',\n          cache: 'bounded',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeDefined();\n        expect(result.data).toEqual({ error: null });\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeUndefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"propagates error codes with null response in production","suites":["apollo-server-express","applyMiddleware","errors"],"updatePoint":{"line":345,"column":65},"line":345,"code":"      it('propagates error codes with null response in production', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String!\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          nodeEnv: 'production',\n          cache: 'bounded',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeNull();\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeUndefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"applies cacheControl Headers","suites":["apollo-server-express","extensions","Cache Control Headers"],"updatePoint":{"line":426,"column":38},"line":426,"code":"      it('applies cacheControl Headers', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toEqual(\n              'max-age=200, public',\n            );\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ cooks { title author } }`,\n        });\n        expect(result.data).toEqual({ cooks: books });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"contains no cacheControl Headers when uncacheable","suites":["apollo-server-express","extensions","Cache Control Headers"],"updatePoint":{"line":443,"column":59},"line":443,"code":"      it('contains no cacheControl Headers when uncacheable', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toBeNull();\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ books { title author } }`,\n        });\n        expect(result.data).toEqual({ books });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"contains private cacheControl Headers when scoped","suites":["apollo-server-express","extensions","Cache Control Headers"],"updatePoint":{"line":458,"column":59},"line":458,"code":"      it('contains private cacheControl Headers when scoped', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toEqual(\n              'max-age=20, private',\n            );\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ pooks { title books { title author } } }`,\n        });\n        expect(result.data).toEqual({\n          pooks: [{ title: 'pook', books }],\n        });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"runs when cache-control is disabled","suites":["apollo-server-express","extensions","Cache Control Headers"],"updatePoint":{"line":477,"column":45},"line":477,"code":"      it('runs when cache-control is disabled', async () => {\n        const { url: uri } = await createServer({\n          typeDefs,\n          resolvers,\n          plugins: [ApolloServerPluginCacheControlDisabled()],\n        });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toBeNull();\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ pooks { title books { title author } } }`,\n        });\n        expect(result.data).toEqual({\n          pooks: [{ title: 'pook', books }],\n        });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"uses the cache","suites":["apollo-server-express"],"updatePoint":{"line":98,"column":20},"line":98,"code":"  it('uses the cache', async () => {\n    server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () => ({\n        id: new (class extends IdAPI {\n          override baseURL = restUrl;\n        })(),\n      }),\n    });\n    await server.start();\n    const app = express();\n\n    server.applyMiddleware({ app });\n    httpServer = await new Promise<http.Server>((resolve) => {\n      const s: Server = app.listen({ port: 0 }, () => resolve(s));\n    });\n    const { url: uri } = createServerInfo(server, httpServer);\n\n    const apolloFetch = createApolloFetch({ uri });\n    const firstResult = await apolloFetch({ query: '{ id }' });\n\n    expect(firstResult.errors).toBeUndefined();\n    expect(firstResult.data).toEqual({ id: 'hi' });\n    expect(restCalls).toEqual(1);\n\n    const secondResult = await apolloFetch({ query: '{ id }' });\n\n    expect(secondResult.errors).toBeUndefined();\n    expect(secondResult.data).toEqual({ id: 'hi' });\n    expect(restCalls).toEqual(1);\n  });","file":"datasource.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"can cache a string from the backend","suites":["apollo-server-express"],"updatePoint":{"line":131,"column":41},"line":131,"code":"  it('can cache a string from the backend', async () => {\n    server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () => ({\n        id: new (class extends IdAPI {\n          override baseURL = restUrl;\n        })(),\n      }),\n    });\n    await server.start();\n    const app = express();\n\n    server.applyMiddleware({ app });\n    httpServer = await new Promise((resolve) => {\n      const s: Server = app.listen({ port: 0 }, () => resolve(s));\n    });\n    const { url: uri } = createServerInfo(server, httpServer);\n\n    const apolloFetch = createApolloFetch({ uri });\n    const firstResult = await apolloFetch({ query: '{ id: stringId }' });\n\n    expect(firstResult.errors).toBeUndefined();\n    expect(firstResult.data).toEqual({ id: 'hi' });\n    expect(restCalls).toEqual(1);\n\n    const secondResult = await apolloFetch({ query: '{ id: stringId }' });\n\n    expect(secondResult.errors).toBeUndefined();\n    expect(secondResult.data).toEqual({ id: 'hi' });\n    expect(restCalls).toEqual(1);\n  });","file":"datasource.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"throws error if called without schema","suites":["expressApollo"],"updatePoint":{"line":9,"column":43},"line":9,"code":"  it('throws error if called without schema', function () {\n    expect(() => new ApolloServer(undefined as any)).toThrow(\n      'ApolloServer requires options.',\n    );\n  });","file":"expressApollo.test.ts","skipped":false,"dir":"packages/apollo-server-express/src/__tests__"},{"name":"accepts typeDefs and resolvers","suites":["apollo-server-fastify","constructor"],"updatePoint":{"line":131,"column":38},"line":131,"code":"    it('accepts typeDefs and resolvers', () => {\n      return createServer({ typeDefs, resolvers });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"provides FastifyRequest and FastifyReply to ContextFunction","suites":["apollo-server-fastify","createGraphQLServerOptions"],"updatePoint":{"line":137,"column":67},"line":137,"code":"    it('provides FastifyRequest and FastifyReply to ContextFunction', async () => {\n      interface ContextArgs {\n        request: FastifyRequest & {\n          requestDecorator: () => any;\n        };\n        reply: FastifyReply & { replyDecorator: () => any };\n      }\n\n      const context = ({ request, reply }: ContextArgs) => {\n        request!.requestDecorator();\n        reply!.replyDecorator();\n        return {};\n      };\n\n      const { url: uri } = await createServer(\n        { typeDefs, resolvers, context },\n        {},\n        true,\n      );\n\n      const apolloFetch = createApolloFetch({ uri });\n      await apolloFetch({ query: '{hello}' });\n\n      expect(requestDecorator!.mock.calls.length).toEqual(1);\n      expect(replyDecorator!.mock.calls.length).toEqual(1);\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"can be queried","suites":["apollo-server-fastify","applyMiddleware"],"updatePoint":{"line":166,"column":22},"line":166,"code":"    it('can be queried', async () => {\n      const { url: uri } = await createServer({\n        typeDefs,\n        resolvers,\n      });\n      const apolloFetch = createApolloFetch({ uri });\n      const result = await apolloFetch({ query: '{hello}' });\n\n      expect(result.data).toEqual({ hello: 'hi' });\n      expect(result.errors).toBeUndefined();\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"renders landing page by default when browser requests","suites":["apollo-server-fastify","applyMiddleware"],"updatePoint":{"line":178,"column":61},"line":178,"code":"    it('renders landing page by default when browser requests', async () => {\n      const { httpServer } = await createServer({\n        typeDefs,\n        resolvers,\n        nodeEnv: '', // default landing page\n      });\n\n      await request(httpServer)\n        .get('/graphql')\n        .set(\n          'accept',\n          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n        )\n        .expect(\n          200,\n          /apollo-server-landing-page.cdn.apollographql.com\\/_latest/,\n        );\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"accepts cors configuration","suites":["apollo-server-fastify","applyMiddleware"],"updatePoint":{"line":197,"column":34},"line":197,"code":"    it('accepts cors configuration', async () => {\n      const { url: uri } = await createServer(\n        {\n          typeDefs,\n          resolvers,\n        },\n        {\n          cors: { origin: 'apollographql.com' },\n        },\n      );\n\n      const apolloFetch = createApolloFetch({ uri }).useAfter(\n        (response, next) => {\n          expect(\n            response.response.headers.get('access-control-allow-origin'),\n          ).toEqual('apollographql.com');\n          next();\n        },\n      );\n      await apolloFetch({ query: '{hello}' });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"creates a health check endpoint","suites":["apollo-server-fastify","applyMiddleware","health checks"],"updatePoint":{"line":220,"column":41},"line":220,"code":"      it('creates a health check endpoint', async () => {\n        const { httpServer } = await createServer({\n          typeDefs,\n          resolvers,\n        });\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(200, { status: 'pass' });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"provides a callback for the health check","suites":["apollo-server-fastify","applyMiddleware","health checks"],"updatePoint":{"line":231,"column":50},"line":231,"code":"      it('provides a callback for the health check', async () => {\n        const { httpServer } = await createServer(\n          {\n            typeDefs,\n            resolvers,\n          },\n          {\n            onHealthCheck: async () => {\n              throw Error(\"can't connect to DB\");\n            },\n          },\n        );\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(503, { status: 'fail' });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"can disable the healthCheck","suites":["apollo-server-fastify","applyMiddleware","health checks"],"updatePoint":{"line":249,"column":37},"line":249,"code":"      it('can disable the healthCheck', async () => {\n        const { httpServer } = await createServer(\n          {\n            typeDefs,\n            resolvers,\n          },\n          {\n            disableHealthCheck: true,\n          },\n        );\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(404);\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"returns thrown context error as a valid graphql result","suites":["apollo-server-fastify","applyMiddleware","errors"],"updatePoint":{"line":267,"column":64},"line":267,"code":"      it('returns thrown context error as a valid graphql result', async () => {\n        const typeDefs = gql`\n          type Query {\n            hello: String\n          }\n        `;\n        const resolvers = {\n          Query: {\n            hello: () => {\n              throw Error('never get here');\n            },\n          },\n        };\n        const { url: uri } = await createServer({\n          typeDefs,\n          resolvers,\n          context: () => {\n            throw new AuthenticationError('valid result');\n          },\n          // Stack trace not included for NODE_ENV=test\n          nodeEnv: '',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: '{hello}' });\n        expect(result.errors.length).toEqual(1);\n        expect(result.data).toBeUndefined();\n\n        const e = result.errors[0];\n        expect(e.message).toMatch('valid result');\n        expect(e.extensions).toBeDefined();\n        expect(e.extensions.code).toEqual('UNAUTHENTICATED');\n        expect(e.extensions.exception.stacktrace).toBeDefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"propagates error codes in dev mode","suites":["apollo-server-fastify","applyMiddleware","errors"],"updatePoint":{"line":303,"column":44},"line":303,"code":"      it('propagates error codes in dev mode', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          // Stack trace not included for NODE_ENV=test\n          nodeEnv: '',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeDefined();\n        expect(result.data).toEqual({ error: null });\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeDefined();\n        expect(result.errors[0].extensions.exception.stacktrace).toBeDefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"propagates error codes in production","suites":["apollo-server-fastify","applyMiddleware","errors"],"updatePoint":{"line":334,"column":46},"line":334,"code":"      it('propagates error codes in production', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          nodeEnv: 'production',\n          cache: 'bounded',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeDefined();\n        expect(result.data).toEqual({ error: null });\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeUndefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"propagates error codes with null response in production","suites":["apollo-server-fastify","applyMiddleware","errors"],"updatePoint":{"line":364,"column":65},"line":364,"code":"      it('propagates error codes with null response in production', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String!\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          nodeEnv: 'production',\n          cache: 'bounded',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeNull();\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeUndefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"applies cacheControl Headers","suites":["apollo-server-fastify","extensions","Cache Control Headers"],"updatePoint":{"line":445,"column":38},"line":445,"code":"      it('applies cacheControl Headers', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toEqual(\n              'max-age=200, public',\n            );\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ cooks { title author } }`,\n        });\n        expect(result.data).toEqual({ cooks: books });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"contains no cacheControl Headers when uncacheable","suites":["apollo-server-fastify","extensions","Cache Control Headers"],"updatePoint":{"line":462,"column":59},"line":462,"code":"      it('contains no cacheControl Headers when uncacheable', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toBeNull();\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ books { title author } }`,\n        });\n        expect(result.data).toEqual({ books });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"contains private cacheControl Headers when scoped","suites":["apollo-server-fastify","extensions","Cache Control Headers"],"updatePoint":{"line":477,"column":59},"line":477,"code":"      it('contains private cacheControl Headers when scoped', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toEqual(\n              'max-age=20, private',\n            );\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ pooks { title books { title author } } }`,\n        });\n        expect(result.data).toEqual({\n          pooks: [{ title: 'pook', books }],\n        });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"runs when cache-control is false","suites":["apollo-server-fastify","extensions","Cache Control Headers"],"updatePoint":{"line":496,"column":42},"line":496,"code":"      it('runs when cache-control is false', async () => {\n        const { url: uri } = await createServer({\n          typeDefs,\n          resolvers,\n          plugins: [ApolloServerPluginCacheControlDisabled()],\n        });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toBeNull();\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ pooks { title books { title author } } }`,\n        });\n        expect(result.data).toEqual({\n          pooks: [{ title: 'pook', books }],\n        });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"uses the cache","suites":["apollo-server-fastify"],"updatePoint":{"line":86,"column":20},"line":86,"code":"  it('uses the cache', async () => {\n    server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () => ({\n        id: new IdAPI(),\n      }),\n    });\n    await server.start();\n    app = fastify();\n\n    app.register(server.createHandler());\n    await app.listen(0);\n    const { url: uri } = createServerInfo(server, app.server);\n\n    const apolloFetch = createApolloFetch({ uri });\n    const firstResult = await apolloFetch({ query: '{ id }' });\n\n    expect(firstResult.data).toEqual({ id: 'hi' });\n    expect(firstResult.errors).toBeUndefined();\n    expect(restCalls).toEqual(1);\n\n    const secondResult = await apolloFetch({ query: '{ id }' });\n\n    expect(secondResult.data).toEqual({ id: 'hi' });\n    expect(secondResult.errors).toBeUndefined();\n    expect(restCalls).toEqual(1);\n  });","file":"datasource.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"can cache a string from the backend","suites":["apollo-server-fastify"],"updatePoint":{"line":115,"column":41},"line":115,"code":"  it('can cache a string from the backend', async () => {\n    server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () => ({\n        id: new IdAPI(),\n      }),\n    });\n    await server.start();\n    app = fastify();\n\n    app.register(server.createHandler());\n    await app.listen(0);\n    const { url: uri } = createServerInfo(server, app.server);\n\n    const apolloFetch = createApolloFetch({ uri });\n    const firstResult = await apolloFetch({ query: '{ id: stringId }' });\n\n    expect(firstResult.data).toEqual({ id: 'hi' });\n    expect(firstResult.errors).toBeUndefined();\n    expect(restCalls).toEqual(1);\n\n    const secondResult = await apolloFetch({ query: '{ id: stringId }' });\n\n    expect(secondResult.data).toEqual({ id: 'hi' });\n    expect(secondResult.errors).toBeUndefined();\n    expect(restCalls).toEqual(1);\n  });","file":"datasource.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"throws error if called without schema","suites":["fastifyApollo"],"updatePoint":{"line":11,"column":43},"line":11,"code":"  it('throws error if called without schema', function () {\n    expect(() => new ApolloServer(undefined as any)).toThrow(\n      'ApolloServer requires options.',\n    );\n  });","file":"fastifyApollo.test.ts","skipped":false,"dir":"packages/apollo-server-fastify/src/__tests__"},{"name":"accepts typeDefs and resolvers","suites":["non-integration tests","constructor"],"updatePoint":{"line":97,"column":38},"line":97,"code":"    it('accepts typeDefs and resolvers', async () => {\n      return createServer({ typeDefs, resolvers });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"can be queried","suites":["non-integration tests","applyMiddleware"],"updatePoint":{"line":103,"column":22},"line":103,"code":"    it('can be queried', async () => {\n      const { url: uri } = await createServer({\n        typeDefs,\n        resolvers,\n      });\n      const apolloFetch = createApolloFetch({ uri });\n      const result = await apolloFetch({ query: '{hello}' });\n\n      expect(result.data).toEqual({ hello: 'hi' });\n      expect(result.errors).toBeUndefined();\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"renders landing page by default when browser requests","suites":["non-integration tests","applyMiddleware"],"updatePoint":{"line":115,"column":61},"line":115,"code":"    it('renders landing page by default when browser requests', async () => {\n      const { httpServer } = await createServer({\n        typeDefs,\n        resolvers,\n        nodeEnv: '', // default landing page\n      });\n\n      await request(httpServer)\n        .get('/graphql')\n        .set(\n          'accept',\n          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n        )\n        .expect(\n          200,\n          /apollo-server-landing-page.cdn.apollographql.com\\/_latest/,\n        );\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"accepts cors configuration","suites":["non-integration tests","applyMiddleware"],"updatePoint":{"line":134,"column":34},"line":134,"code":"    it('accepts cors configuration', async () => {\n      const { url: uri } = await createServer(\n        {\n          typeDefs,\n          resolvers,\n        },\n        {\n          cors: {\n            additionalExposedHeaders: ['X-Apollo'],\n            exposedHeaders: [\n              'Accept',\n              'Authorization',\n              'Content-Type',\n              'If-None-Match',\n              'Another-One',\n            ],\n          },\n        },\n      );\n\n      const apolloFetch = createApolloFetch({ uri }).useAfter(\n        (response, next) => {\n          expect(\n            response.response.headers.get('access-control-expose-headers'),\n          ).toEqual(\n            'Accept,Authorization,Content-Type,If-None-Match,Another-One,X-Apollo',\n          );\n          next();\n        },\n      );\n      await apolloFetch({ query: '{hello}' });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"accepts custom route configuration","suites":["non-integration tests","applyMiddleware"],"updatePoint":{"line":167,"column":42},"line":167,"code":"    it('accepts custom route configuration', async () => {\n      const { url: uri } = await createServer(\n        {\n          typeDefs,\n          resolvers,\n        },\n        {\n          route: {\n            cors: {\n              additionalExposedHeaders: ['X-Apollo'],\n              exposedHeaders: [\n                'Accept',\n                'Authorization',\n                'Content-Type',\n                'If-None-Match',\n                'Another-One',\n              ],\n            },\n          },\n        },\n      );\n\n      const apolloFetch = createApolloFetch({ uri }).useAfter(\n        (response, next) => {\n          expect(\n            response.response.headers.get('access-control-expose-headers'),\n          ).toEqual(\n            'Accept,Authorization,Content-Type,If-None-Match,Another-One,X-Apollo',\n          );\n          next();\n        },\n      );\n\n      await apolloFetch({ query: '{hello}' });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"passes each request and response toolkit through to the context function","suites":["non-integration tests","applyMiddleware"],"updatePoint":{"line":203,"column":80},"line":203,"code":"    it('passes each request and response toolkit through to the context function', async () => {\n      const context = async ({ request, h }: any) => {\n        expect(request).toBeDefined();\n        expect(h).toBeDefined();\n        return {};\n      };\n\n      const { url: uri } = await createServer({\n        typeDefs,\n        resolvers,\n        context,\n      });\n\n      const apolloFetch = createApolloFetch({ uri });\n      const result = await apolloFetch({ query: '{hello}' });\n\n      expect(result.data).toEqual({ hello: 'hi' });\n      expect(result.errors).toBeUndefined();\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"creates a health check endpoint","suites":["non-integration tests","applyMiddleware","health checks"],"updatePoint":{"line":224,"column":41},"line":224,"code":"      it('creates a health check endpoint', async () => {\n        const { httpServer } = await createServer({\n          typeDefs,\n          resolvers,\n        });\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(200, { status: 'pass' });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"provides a callback for the health check","suites":["non-integration tests","applyMiddleware","health checks"],"updatePoint":{"line":235,"column":50},"line":235,"code":"      it('provides a callback for the health check', async () => {\n        const { httpServer } = await createServer(\n          {\n            typeDefs,\n            resolvers,\n          },\n          {\n            onHealthCheck: async () => {\n              throw Error(\"can't connect to DB\");\n            },\n          },\n        );\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(503, { status: 'fail' });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"can disable the healthCheck","suites":["non-integration tests","applyMiddleware","health checks"],"updatePoint":{"line":253,"column":37},"line":253,"code":"      it('can disable the healthCheck', async () => {\n        const { httpServer } = await createServer(\n          {\n            typeDefs,\n            resolvers,\n          },\n          {\n            disableHealthCheck: true,\n          },\n        );\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(404);\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"returns thrown context error as a valid graphql result","suites":["non-integration tests","applyMiddleware","errors"],"updatePoint":{"line":271,"column":64},"line":271,"code":"      it('returns thrown context error as a valid graphql result', async () => {\n        const typeDefs = gql`\n          type Query {\n            hello: String\n          }\n        `;\n        const resolvers = {\n          Query: {\n            hello: () => {\n              throw Error('never get here');\n            },\n          },\n        };\n        const { url: uri } = await createServer({\n          typeDefs,\n          resolvers,\n          context: () => {\n            throw new AuthenticationError('valid result');\n          },\n          // Stack trace not included for NODE_ENV=test\n          nodeEnv: '',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: '{hello}' });\n        expect(result.errors.length).toEqual(1);\n        expect(result.data).toBeUndefined();\n\n        const e = result.errors[0];\n        expect(e.message).toMatch('valid result');\n        expect(e.extensions).toBeDefined();\n        expect(e.extensions.code).toEqual('UNAUTHENTICATED');\n        expect(e.extensions.exception.stacktrace).toBeDefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"propagates error codes in dev mode","suites":["non-integration tests","applyMiddleware","errors"],"updatePoint":{"line":307,"column":44},"line":307,"code":"      it('propagates error codes in dev mode', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          // Stack trace not included for NODE_ENV=test\n          nodeEnv: '',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeDefined();\n        expect(result.data).toEqual({ error: null });\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeDefined();\n        expect(result.errors[0].extensions.exception.stacktrace).toBeDefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"propagates error codes in production","suites":["non-integration tests","applyMiddleware","errors"],"updatePoint":{"line":338,"column":46},"line":338,"code":"      it('propagates error codes in production', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          nodeEnv: 'production',\n          cache: 'bounded',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeDefined();\n        expect(result.data).toEqual({ error: null });\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeUndefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"propagates error codes with null response in production","suites":["non-integration tests","applyMiddleware","errors"],"updatePoint":{"line":368,"column":65},"line":368,"code":"      it('propagates error codes with null response in production', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String!\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          nodeEnv: 'production',\n          cache: 'bounded',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeNull();\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeUndefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-hapi/src/__tests__"},{"name":"accepts typeDefs and resolvers","suites":["apollo-server-koa","constructor"],"updatePoint":{"line":99,"column":38},"line":99,"code":"    it('accepts typeDefs and resolvers', () => {\n      return createServer({ typeDefs, resolvers });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"can be queried","suites":["apollo-server-koa","applyMiddleware"],"updatePoint":{"line":105,"column":22},"line":105,"code":"    it('can be queried', async () => {\n      const { url: uri } = await createServer({\n        typeDefs,\n        resolvers,\n      });\n      const apolloFetch = createApolloFetch({ uri });\n      const result = await apolloFetch({ query: '{hello}' });\n\n      expect(result.data).toEqual({ hello: 'hi' });\n      expect(result.errors).toBeUndefined();\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"renders landing page by default when browser requests","suites":["apollo-server-koa","applyMiddleware"],"updatePoint":{"line":117,"column":61},"line":117,"code":"    it('renders landing page by default when browser requests', async () => {\n      const { httpServer } = await createServer({\n        typeDefs,\n        resolvers,\n        nodeEnv: '', // default landing page\n      });\n\n      await request(httpServer)\n        .get('/graphql')\n        .set(\n          'accept',\n          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n        )\n        .expect(\n          200,\n          /apollo-server-landing-page.cdn.apollographql.com\\/_latest/,\n        );\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"accepts cors configuration","suites":["apollo-server-koa","applyMiddleware"],"updatePoint":{"line":135,"column":34},"line":135,"code":"    it('accepts cors configuration', async () => {\n      const { url: uri } = await createServer(\n        {\n          typeDefs,\n          resolvers,\n        },\n        {\n          cors: { origin: 'apollographql.com' },\n        },\n      );\n\n      const apolloFetch = createApolloFetch({ uri })\n        .use(({ options }, next) => {\n          if (!options.headers) {\n            options.headers = {}; // Create the headers object if needed.\n          }\n          (options.headers as any)['origin'] = 'apollographql.com';\n\n          next();\n        })\n        .useAfter((response, next) => {\n          expect(\n            response.response.headers.get('access-control-allow-origin'),\n          ).toEqual('apollographql.com');\n          next();\n        });\n      await apolloFetch({ query: '{hello}' });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"accepts body parser configuration","suites":["apollo-server-koa","applyMiddleware"],"updatePoint":{"line":164,"column":41},"line":164,"code":"    it('accepts body parser configuration', async () => {\n      const { url: uri } = await createServer(\n        {\n          typeDefs,\n          resolvers,\n        },\n        {\n          bodyParserConfig: { jsonLimit: '0' },\n        },\n      );\n\n      const apolloFetch = createApolloFetch({ uri });\n\n      return new Promise<void>((resolve, reject) => {\n        apolloFetch({ query: '{hello}' })\n          .then(reject)\n          .catch((error) => {\n            expect(error.response).toBeDefined();\n            expect(error.response.status).toEqual(413);\n            expect(error.toString()).toMatch('Payload Too Large');\n            resolve();\n          });\n      });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"creates a health check endpoint","suites":["apollo-server-koa","applyMiddleware","health checks"],"updatePoint":{"line":190,"column":41},"line":190,"code":"      it('creates a health check endpoint', async () => {\n        const { httpServer } = await createServer({\n          typeDefs,\n          resolvers,\n        });\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(200, { status: 'pass' });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"provides a callback for the health check","suites":["apollo-server-koa","applyMiddleware","health checks"],"updatePoint":{"line":201,"column":50},"line":201,"code":"      it('provides a callback for the health check', async () => {\n        const { httpServer } = await createServer(\n          {\n            typeDefs,\n            resolvers,\n          },\n          {\n            onHealthCheck: async () => {\n              throw Error(\"can't connect to DB\");\n            },\n          },\n        );\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(503, { status: 'fail' });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"can disable the healthCheck","suites":["apollo-server-koa","applyMiddleware","health checks"],"updatePoint":{"line":219,"column":37},"line":219,"code":"      it('can disable the healthCheck', async () => {\n        const { httpServer } = await createServer(\n          {\n            typeDefs,\n            resolvers,\n          },\n          {\n            disableHealthCheck: true,\n          },\n        );\n\n        await request(httpServer)\n          .get('/.well-known/apollo/server-health')\n          .expect(404);\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"returns thrown context error as a valid graphql result","suites":["apollo-server-koa","applyMiddleware","errors"],"updatePoint":{"line":237,"column":64},"line":237,"code":"      it('returns thrown context error as a valid graphql result', async () => {\n        const typeDefs = gql`\n          type Query {\n            hello: String\n          }\n        `;\n        const resolvers = {\n          Query: {\n            hello: () => {\n              throw Error('never get here');\n            },\n          },\n        };\n        const { url: uri } = await createServer({\n          typeDefs,\n          resolvers,\n          context: () => {\n            throw new AuthenticationError('valid result');\n          },\n          // Stack trace not included for NODE_ENV=test\n          nodeEnv: '',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: '{hello}' });\n        expect(result.errors.length).toEqual(1);\n        expect(result.data).toBeUndefined();\n\n        const e = result.errors[0];\n        expect(e.message).toMatch('valid result');\n        expect(e.extensions).toBeDefined();\n        expect(e.extensions.code).toEqual('UNAUTHENTICATED');\n        expect(e.extensions.exception.stacktrace).toBeDefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"propagates error codes in dev mode","suites":["apollo-server-koa","applyMiddleware","errors"],"updatePoint":{"line":273,"column":44},"line":273,"code":"      it('propagates error codes in dev mode', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          // Stack trace not included for NODE_ENV=test\n          nodeEnv: '',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeDefined();\n        expect(result.data).toEqual({ error: null });\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeDefined();\n        expect(result.errors[0].extensions.exception.stacktrace).toBeDefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"propagates error codes in production","suites":["apollo-server-koa","applyMiddleware","errors"],"updatePoint":{"line":304,"column":46},"line":304,"code":"      it('propagates error codes in production', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          nodeEnv: 'production',\n          cache: 'bounded',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeDefined();\n        expect(result.data).toEqual({ error: null });\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeUndefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"propagates error codes with null response in production","suites":["apollo-server-koa","applyMiddleware","errors"],"updatePoint":{"line":334,"column":65},"line":334,"code":"      it('propagates error codes with null response in production', async () => {\n        const { url: uri } = await createServer({\n          typeDefs: gql`\n            type Query {\n              error: String!\n            }\n          `,\n          resolvers: {\n            Query: {\n              error: () => {\n                throw new AuthenticationError('we the best music');\n              },\n            },\n          },\n          nodeEnv: 'production',\n          cache: 'bounded',\n        });\n\n        const apolloFetch = createApolloFetch({ uri });\n\n        const result = await apolloFetch({ query: `{error}` });\n        expect(result.data).toBeNull();\n\n        expect(result.errors).toBeDefined();\n        expect(result.errors.length).toEqual(1);\n        expect(result.errors[0].extensions.code).toEqual('UNAUTHENTICATED');\n        expect(result.errors[0].extensions.exception).toBeUndefined();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"applies cacheControl Headers","suites":["apollo-server-koa","extensions","Cache Control Headers"],"updatePoint":{"line":415,"column":38},"line":415,"code":"      it('applies cacheControl Headers', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toEqual(\n              'max-age=200, public',\n            );\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ cooks { title author } }`,\n        });\n        expect(result.data).toEqual({ cooks: books });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"contains no cacheControl Headers when uncacheable","suites":["apollo-server-koa","extensions","Cache Control Headers"],"updatePoint":{"line":432,"column":59},"line":432,"code":"      it('contains no cacheControl Headers when uncacheable', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toBeNull();\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ books { title author } }`,\n        });\n        expect(result.data).toEqual({ books });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"contains private cacheControl Headers when scoped","suites":["apollo-server-koa","extensions","Cache Control Headers"],"updatePoint":{"line":447,"column":59},"line":447,"code":"      it('contains private cacheControl Headers when scoped', async () => {\n        const { url: uri } = await createServer({ typeDefs, resolvers });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toEqual(\n              'max-age=20, private',\n            );\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ pooks { title books { title author } } }`,\n        });\n        expect(result.data).toEqual({\n          pooks: [{ title: 'pook', books }],\n        });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"runs when cache-control is false","suites":["apollo-server-koa","extensions","Cache Control Headers"],"updatePoint":{"line":466,"column":42},"line":466,"code":"      it('runs when cache-control is false', async () => {\n        const { url: uri } = await createServer({\n          typeDefs,\n          resolvers,\n          plugins: [ApolloServerPluginCacheControlDisabled()],\n        });\n\n        const apolloFetch = createApolloFetch({ uri }).useAfter(\n          (response, next) => {\n            expect(response.response.headers.get('cache-control')).toBeNull();\n            next();\n          },\n        );\n        const result = await apolloFetch({\n          query: `{ pooks { title books { title author } } }`,\n        });\n        expect(result.data).toEqual({\n          pooks: [{ title: 'pook', books }],\n        });\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"uses the cache","suites":["apollo-server-koa"],"updatePoint":{"line":99,"column":20},"line":99,"code":"  it('uses the cache', async () => {\n    server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () => ({\n        id: new (class extends IdAPI {\n          override baseURL = restUrl;\n        })(),\n      }),\n    });\n    await server.start();\n    const app = new Koa();\n\n    server.applyMiddleware({ app });\n    httpServer = await new Promise<http.Server>((resolve) => {\n      const s = app.listen({ port: 0 }, () => resolve(s));\n    });\n    const { url: uri } = createServerInfo(server, httpServer);\n\n    const apolloFetch = createApolloFetch({ uri });\n    const firstResult = await apolloFetch({ query: '{ id }' });\n\n    expect(firstResult.data).toEqual({ id: 'hi' });\n    expect(firstResult.errors).toBeUndefined();\n    expect(restCalls).toEqual(1);\n\n    const secondResult = await apolloFetch({ query: '{ id }' });\n\n    expect(secondResult.data).toEqual({ id: 'hi' });\n    expect(secondResult.errors).toBeUndefined();\n    expect(restCalls).toEqual(1);\n  });","file":"datasource.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"can cache a string from the backend","suites":["apollo-server-koa"],"updatePoint":{"line":132,"column":41},"line":132,"code":"  it('can cache a string from the backend', async () => {\n    server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () => ({\n        id: new (class extends IdAPI {\n          override baseURL = restUrl;\n        })(),\n      }),\n    });\n    await server.start();\n    const app = new Koa();\n\n    server.applyMiddleware({ app });\n    httpServer = await new Promise<http.Server>((resolve) => {\n      const s = app.listen({ port: 0 }, () => resolve(s));\n    });\n    const { url: uri } = createServerInfo(server, httpServer);\n\n    const apolloFetch = createApolloFetch({ uri });\n    const firstResult = await apolloFetch({ query: '{ id: stringId }' });\n\n    expect(firstResult.data).toEqual({ id: 'hi' });\n    expect(firstResult.errors).toBeUndefined();\n    expect(restCalls).toEqual(1);\n\n    const secondResult = await apolloFetch({ query: '{ id: stringId }' });\n\n    expect(secondResult.data).toEqual({ id: 'hi' });\n    expect(secondResult.errors).toBeUndefined();\n    expect(restCalls).toEqual(1);\n  });","file":"datasource.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"throws error if called without schema","suites":["koaApollo"],"updatePoint":{"line":35,"column":43},"line":35,"code":"  it('throws error if called without schema', function () {\n    expect(() => new ApolloServer(undefined as any)).toThrow(\n      'ApolloServer requires options.',\n    );\n  });","file":"koaApollo.test.ts","skipped":false,"dir":"packages/apollo-server-koa/src/__tests__"},{"name":"context functions typecheck","suites":["apollo-server-lambda","context"],"updatePoint":{"line":90,"column":35},"line":90,"code":"    it('context functions typecheck', async () => {\n      // We want to make sure that TS allows you to write the context function\n      // arguments. Note that the calls to createLambda that set context below\n      // are only good enough if we're confident that the declaration of the\n      // `config` argument on `createLambda` above matches the generics used in\n      // ApolloServer itself, so it's reasonable for us to validate against\n      // ApolloServer directly.\n      new ApolloServer({\n        typeDefs: 'type Query { x: Int }',\n        context({ event: _event, context: _context, express }) {\n          const { req: _req, res: _res } = express;\n        },\n      });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-lambda/src/__tests__"},{"name":"receives both Express and Lambda context","suites":["apollo-server-lambda","context"],"updatePoint":{"line":105,"column":48},"line":105,"code":"    it('receives both Express and Lambda context', async () => {\n      const app = createLambda(\n        {},\n        {\n          typeDefs: 'type Query { context: String }',\n          resolvers: {\n            Query: {\n              context: (_parent, _args, context) => JSON.stringify(context),\n            },\n          },\n          // Add something interesting from each context argument part to the\n          // context.\n          context({ event, context, express }) {\n            const { req, res } = express;\n            return {\n              reqHttpVersion: req.httpVersion,\n              resHasApp: !!res.app,\n              eventVersion: event.version,\n              contextFunctionName: context.functionName,\n            };\n          },\n        },\n      );\n      await request(app)\n        .post('/graphql')\n        .send({ query: '{context}' })\n        .expect(200)\n        .expect((res) => {\n          expect(typeof res.body.data.context).toBe('string');\n          const context = JSON.parse(res.body.data.context);\n          expect(context).toEqual({\n            reqHttpVersion: '1.1',\n            resHasApp: true,\n            eventVersion: '2.0',\n            contextFunctionName: 'someFunc',\n          });\n        });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-lambda/src/__tests__"},{"name":"expressAppFromMiddleware","suites":["apollo-server-lambda","context"],"updatePoint":{"line":145,"column":30},"line":145,"code":"  it('expressAppFromMiddleware', async () => {\n    const app = createLambda({\n      expressAppFromMiddleware(middleware) {\n        const app = express();\n        app.get('/lambda-test', (_req, res) => {\n          res.send('some body');\n        });\n        app.use(middleware);\n        return app;\n      },\n    });\n    await request(app).get('/lambda-test').expect(200, 'some body');\n  });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-lambda/src/__tests__"},{"name":"creates a health check endpoint","suites":["apollo-server-lambda","health checks"],"updatePoint":{"line":160,"column":39},"line":160,"code":"    it('creates a health check endpoint', async () => {\n      const app = createLambda();\n\n      const req = request(app).get('/.well-known/apollo/server-health');\n\n      return req.then((res: any) => {\n        expect(res.status).toEqual(200);\n        expect(res.body).toEqual({ status: 'pass' });\n        expect(res.headers['content-type']).toEqual(\n          'application/health+json; charset=utf-8',\n        );\n      });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-lambda/src/__tests__"},{"name":"provides a callback for the health check","suites":["apollo-server-lambda","health checks"],"updatePoint":{"line":174,"column":48},"line":174,"code":"    it('provides a callback for the health check', async () => {\n      const app = createLambda({\n        expressGetMiddlewareOptions: {\n          onHealthCheck: async () => {\n            return new Promise((resolve) => {\n              return resolve('Success!');\n            });\n          },\n        },\n      });\n\n      const req = request(app).get('/.well-known/apollo/server-health');\n\n      return req.then((res: any) => {\n        expect(res.status).toEqual(200);\n        expect(res.body).toEqual({ status: 'pass' });\n        expect(res.headers['content-type']).toEqual(\n          'application/health+json; charset=utf-8',\n        );\n      });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-lambda/src/__tests__"},{"name":"returns a 503 if health check fails","suites":["apollo-server-lambda","health checks"],"updatePoint":{"line":196,"column":43},"line":196,"code":"    it('returns a 503 if health check fails', async () => {\n      const app = createLambda({\n        expressGetMiddlewareOptions: {\n          onHealthCheck: async () => {\n            return new Promise(() => {\n              throw new Error('Failed to connect!');\n            });\n          },\n        },\n      });\n\n      const req = request(app).get('/.well-known/apollo/server-health');\n\n      return req.then((res: any) => {\n        expect(res.status).toEqual(503);\n        expect(res.body).toEqual({ status: 'fail' });\n        expect(res.headers['content-type']).toEqual(\n          'application/health+json; charset=utf-8',\n        );\n      });\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-lambda/src/__tests__"},{"name":"should accepts typeDefs and resolvers","suites":["apollo-server-micro","constructor"],"updatePoint":{"line":42,"column":45},"line":42,"code":"    it('should accepts typeDefs and resolvers', function () {\n      const apolloServer = new ApolloServer({ typeDefs, resolvers });\n      expect(apolloServer).toBeDefined();\n    });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-micro/src/__tests__"},{"name":"should be queryable using a custom path","suites":["apollo-server-micro","#createHandler","querying"],"updatePoint":{"line":79,"column":49},"line":79,"code":"      it('should be queryable using a custom path', async function () {\n        const { service, uri } = await createServer({ path: '/data' });\n        const apolloFetch = createApolloFetch({ uri: `${uri}/data` });\n        const result = await apolloFetch({ query: '{hello}' });\n        expect(result.data.hello).toEqual('hi');\n        service.close();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-micro/src/__tests__"},{"name":"should render a landing page when a browser sends in a request","suites":["apollo-server-micro","#createHandler","querying"],"updatePoint":{"line":87,"column":72},"line":87,"code":"      it('should render a landing page when a browser sends in a request', async function () {\n        const { service, uri } = await createServer({}, { nodeEnv: '' });\n\n        const body = await rp({\n          uri: `${uri}/graphql`,\n          method: 'GET',\n          headers: {\n            accept:\n              'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n          },\n        });\n        expect(body).toMatch(\n          /apollo-server-landing-page.cdn.apollographql.com\\/_latest/,\n        );\n        service.close();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-micro/src/__tests__"},{"name":"should create a health check endpoint","suites":["apollo-server-micro","#createHandler","health checks"],"updatePoint":{"line":106,"column":47},"line":106,"code":"      it('should create a health check endpoint', async function () {\n        const { service, uri } = await createServer();\n        const body = await rp(`${uri}/.well-known/apollo/server-health`);\n        expect(body).toEqual(JSON.stringify({ status: 'pass' }));\n        service.close();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-micro/src/__tests__"},{"name":"should support a health check callback","suites":["apollo-server-micro","#createHandler","health checks"],"updatePoint":{"line":113,"column":48},"line":113,"code":"      it('should support a health check callback', async function () {\n        const { service, uri } = await createServer({\n          async onHealthCheck() {\n            throw Error(\"can't connect to DB\");\n          },\n        });\n\n        let error: any;\n        try {\n          await rp(`${uri}/.well-known/apollo/server-health`);\n        } catch (err) {\n          error = err;\n        }\n        expect(error).toBeDefined();\n        expect(error.statusCode).toEqual(503);\n        expect(error.error).toEqual(JSON.stringify({ status: 'fail' }));\n        service.close();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-micro/src/__tests__"},{"name":"should be able to disable the health check","suites":["apollo-server-micro","#createHandler","health checks"],"updatePoint":{"line":132,"column":52},"line":132,"code":"      it('should be able to disable the health check', async function () {\n        const { service, uri } = await createServer({\n          disableHealthCheck: true,\n        });\n\n        let error: any;\n        try {\n          await rp(`${uri}/.well-known/apollo/server-health`);\n        } catch (err) {\n          error = err;\n        }\n        expect(error).toBeDefined();\n        expect(error.statusCode).toEqual(404);\n        service.close();\n      });","file":"ApolloServer.test.ts","skipped":false,"dir":"packages/apollo-server-micro/src/__tests__"},{"name":"should throw an error if called without a schema","suites":["microApollo"],"updatePoint":{"line":21,"column":54},"line":21,"code":"  it('should throw an error if called without a schema', function () {\n    expect(() => new ApolloServer(undefined as any)).toThrow(\n      'ApolloServer requires options.',\n    );\n  });","file":"microApollo.test.ts","skipped":false,"dir":"packages/apollo-server-micro/src/__tests__"},{"name":"will instantiate when not called with options","suites":["Response cache plugin"],"updatePoint":{"line":4,"column":51},"line":4,"code":"  it('will instantiate when not called with options', () => {\n    expect(plugin()).toHaveProperty('requestDidStart');\n  });","file":"ApolloServerPluginResponseCache.test.ts","skipped":false,"dir":"packages/apollo-server-plugin-response-cache/src/__tests__"},{"name":"accepts typeDefs and resolvers","suites":["apollo-server","constructor"],"updatePoint":{"line":23,"column":38},"line":23,"code":"    it('accepts typeDefs and resolvers', () => {\n      expect(() => new ApolloServer({ typeDefs, resolvers })).not.toThrow;\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"accepts typeDefs and mocks","suites":["apollo-server","constructor"],"updatePoint":{"line":27,"column":34},"line":27,"code":"    it('accepts typeDefs and mocks', () => {\n      expect(() => new ApolloServer({ typeDefs, mocks: true })).not.toThrow;\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"runs serverWillStart and serverWillStop","suites":["apollo-server","constructor"],"updatePoint":{"line":31,"column":47},"line":31,"code":"    it('runs serverWillStart and serverWillStop', async () => {\n      const fn = jest.fn();\n      const beAsync = () => new Promise<void>((res) => res());\n      const server = new ApolloServer({\n        typeDefs,\n        resolvers,\n        plugins: [\n          {\n            async serverWillStart() {\n              fn('a');\n              await beAsync();\n              fn('b');\n              return {\n                async serverWillStop() {\n                  fn('c');\n                  await beAsync();\n                  fn('d');\n                },\n              };\n            },\n          },\n        ],\n      });\n      await server.listen();\n      expect(fn.mock.calls).toEqual([['a'], ['b']]);\n      await server.stop();\n      expect(fn.mock.calls).toEqual([['a'], ['b'], ['c'], ['d']]);\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"all connections are idle","suites":["apollo-server","constructor","stops even with open HTTP connections"],"updatePoint":{"line":61,"column":34},"line":61,"code":"      it('all connections are idle', async () => {\n        const server = new ApolloServer({\n          typeDefs,\n          resolvers,\n          // Disable killing non-idle connections. This means the test will only\n          // pass if the fast graceful close of the idle connection works.\n          stopGracePeriodMillis: Infinity,\n        });\n        const { port } = await server.listen({ port: 0 });\n\n        // Open a TCP connection to the server, and let it dangle idle\n        // without starting a request.\n        const connectionBarrier = resolvable();\n        createConnection({ host: 'localhost', port: port as number }, () =>\n          connectionBarrier.resolve(),\n        );\n        await connectionBarrier;\n\n        // Stop the server. Before, when this was just net.Server.close, this\n        // would hang. Now that we use stoppable, the idle connection is immediately\n        // killed.\n        await server.stop();\n      });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"a connection with an active HTTP request","suites":["apollo-server","constructor","stops even with open HTTP connections"],"updatePoint":{"line":85,"column":50},"line":85,"code":"      it('a connection with an active HTTP request', async () => {\n        const gotToHangBarrier = resolvable();\n        const hangBarrier = resolvable();\n        const server = new ApolloServer({\n          typeDefs,\n          resolvers: {\n            ...resolvers,\n            Query: {\n              ...resolvers.Query,\n              async hang() {\n                gotToHangBarrier.resolve();\n                await hangBarrier; // never unblocks\n              },\n            },\n          },\n          // A short grace period, because we're going to actually let this\n          // strike.\n          stopGracePeriodMillis: 10,\n        });\n        const { url } = await server.listen({ port: 0 });\n\n        // Start an HTTP request that won't ever finish. (Ignore the very\n        // expected error that happens after the server is stopped.)\n        const apolloFetch = createApolloFetch({ uri: url });\n        apolloFetch({ query: '{hang}' }).catch(() => {});\n        await gotToHangBarrier;\n\n        // Stop the server. Before, when this was just net.Server.close, this\n        // would hang. Now that we use stoppable, the idle connection is immediately\n        // killed.\n        await server.stop();\n      });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"can accept and return `req`","suites":["apollo-server","constructor","context field","as a function"],"updatePoint":{"line":125,"column":39},"line":125,"code":"        it('can accept and return `req`', () => {\n          expect(\n            new ApolloServer({\n              typeDefs,\n              resolvers,\n              context: ({ req }) => ({ req }),\n            }),\n          ).not.toThrow;\n        });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"can accept nothing and return an empty object","suites":["apollo-server","constructor","context field","as a function"],"updatePoint":{"line":135,"column":57},"line":135,"code":"        it('can accept nothing and return an empty object', () => {\n          expect(\n            new ApolloServer({\n              typeDefs,\n              resolvers,\n              context: () => ({}),\n            }),\n          ).not.toThrow;\n        });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"can be an empty object","suites":["apollo-server","constructor","as an object"],"updatePoint":{"line":147,"column":32},"line":147,"code":"      it('can be an empty object', () => {\n        expect(\n          new ApolloServer({\n            typeDefs,\n            resolvers,\n            context: {},\n          }),\n        ).not.toThrow;\n      });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"can contain arbitrary values","suites":["apollo-server","constructor","as an object"],"updatePoint":{"line":157,"column":38},"line":157,"code":"      it('can contain arbitrary values', () => {\n        expect(\n          new ApolloServer({\n            typeDefs,\n            resolvers,\n            context: { value: 'arbitrary' },\n          }),\n        ).not.toThrow;\n      });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"can be queried","suites":["apollo-server","without registerServer"],"updatePoint":{"line":175,"column":22},"line":175,"code":"    it('can be queried', async () => {\n      server = new ApolloServer({\n        typeDefs,\n        resolvers,\n      });\n\n      const { url: uri } = await server.listen({ port: 0 });\n      const apolloFetch = createApolloFetch({ uri });\n      const result = await apolloFetch({ query: '{hello}' });\n\n      expect(result.data).toEqual({ hello: 'hi' });\n      expect(result.errors).toBeUndefined();\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"can use executeOperation","suites":["apollo-server","without registerServer"],"updatePoint":{"line":189,"column":32},"line":189,"code":"    it('can use executeOperation', async () => {\n      server = new ApolloServer({\n        typeDefs,\n        resolvers,\n      });\n      const result = await server.executeOperation({\n        query: '{hello}',\n      });\n      expect(result.errors).toBeUndefined();\n      expect(result.data).toEqual({ hello: 'hi' });\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"renders landing page when browser requests","suites":["apollo-server","without registerServer"],"updatePoint":{"line":201,"column":50},"line":201,"code":"    it('renders landing page when browser requests', async () => {\n      server = new ApolloServer({\n        typeDefs,\n        resolvers,\n        stopOnTerminationSignals: false,\n        nodeEnv: '',\n      });\n\n      const { server: httpServer } = await server.listen({ port: 0 });\n      await request(httpServer)\n        .get('/graphql')\n        .set(\n          'accept',\n          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n        )\n        .expect(\n          200,\n          /apollo-server-landing-page.cdn.apollographql.com\\/_latest/,\n        );\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"configures cors","suites":["apollo-server","without registerServer"],"updatePoint":{"line":222,"column":23},"line":222,"code":"    it('configures cors', async () => {\n      server = new ApolloServer({\n        typeDefs,\n        resolvers,\n      });\n\n      const { url: uri } = await server.listen({ port: 0 });\n\n      const apolloFetch = createApolloFetch({ uri }).useAfter(\n        (response, next) => {\n          expect(\n            response.response.headers.get('access-control-allow-origin'),\n          ).toEqual('*');\n          next();\n        },\n      );\n      await apolloFetch({ query: '{hello}' });\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"configures cors","suites":["apollo-server","without registerServer"],"updatePoint":{"line":241,"column":23},"line":241,"code":"    it('configures cors', async () => {\n      server = new ApolloServer({\n        typeDefs,\n        resolvers,\n        cors: { origin: 'localhost' },\n      });\n\n      const { url: uri } = await server.listen({ port: 0 });\n\n      const apolloFetch = createApolloFetch({ uri }).useAfter(\n        (response, next) => {\n          expect(\n            response.response.headers.get('access-control-allow-origin'),\n          ).toEqual('localhost');\n          next();\n        },\n      );\n      await apolloFetch({ query: '{hello}' });\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"},{"name":"creates a health check endpoint","suites":["apollo-server","without registerServer"],"updatePoint":{"line":261,"column":39},"line":261,"code":"    it('creates a health check endpoint', async () => {\n      server = new ApolloServer({\n        typeDefs,\n        resolvers,\n      });\n\n      const { server: httpServer } = await server.listen({ port: 0 });\n      await request(httpServer)\n        .get('/.well-known/apollo/server-health')\n        .expect(200, { status: 'pass' });\n    });","file":"index.test.ts","skipped":false,"dir":"packages/apollo-server/src/__tests__"}]}