{"repo":"withastro/astro","url":"https://github.com/withastro/astro","branch":"main","configs":[{"package":"astro","lang":"js","dir":"packages/astro/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"create-astro","lang":"js","dir":"packages/create-astro/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"HTML and CSS scoped correctly","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":32,"column":39,"index":1156},"line":32,"code":"      it('HTML and CSS scoped correctly', async () => {\n        const el1 = $('#dynamic-class');\n        const el2 = $('#dynamic-vis');\n        const classes = $('#class').attr('class').split(' ');\n        const scopedClass = classes.find(name => /^astro-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el1.attr('class')).to.equal(`blue ${scopedClass}`);\n        expect(el2.attr('class')).to.equal(`visible ${scopedClass}`); // 2. check CSS\n\n        const expected = `.blue.${scopedClass}{color:#b0e0e6}.color\\\\\\\\:blue.${scopedClass}{color:#b0e0e6}.visible.${scopedClass}{display:block}`;\n        expect(bundledCSS).to.include(expected);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Generated link tags are void elements","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":44,"column":47,"index":1825},"line":44,"code":"      it('Generated link tags are void elements', async () => {\n        expect(html).to.not.include('</link>');\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"No <style> skips scoping","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":47,"column":34,"index":1934},"line":47,"code":"      it('No <style> skips scoping', async () => {\n        // Astro component without <style> should not include scoped class\n        expect($('#no-scope').attr('class')).to.equal(undefined);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Child inheritance","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":51,"column":27,"index":2129},"line":51,"code":"      it('Child inheritance', async () => {\n        expect($('#passed-in').attr('class')).to.match(/outer astro-[A-Z0-9]+ astro-[A-Z0-9]+/);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Using hydrated components adds astro-island styles","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":54,"column":60,"index":2313},"line":54,"code":"      it('Using hydrated components adds astro-island styles', async () => {\n        const inline = $('style').html();\n        expect(inline).to.include('display:contents');\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":58,"column":29,"index":2466},"line":58,"code":"      it('<style lang=\"sass\">', async () => {\n        expect(bundledCSS).to.match(new RegExp('h1.astro-[^{]*{color:#90ee90}'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":61,"column":29,"index":2604},"line":61,"code":"      it('<style lang=\"scss\">', async () => {\n        expect(bundledCSS).to.match(new RegExp('h1.astro-[^{]*{color:#ff69b4}'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".css","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":66,"column":14,"index":2774},"line":66,"code":"      it('.css', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-css[^{]*{color:gold'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".sass","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":69,"column":15,"index":2896},"line":69,"code":"      it('.sass', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-sass[^{]*{color:#789'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".scss","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":72,"column":15,"index":3019},"line":72,"code":"      it('.scss', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-scss[^{]*{color:#6b8e23'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".css","suites":["CSS","build","JSX"],"updatePoint":{"line":77,"column":14,"index":3180},"line":77,"code":"      it('.css', async () => {\n        const el = $('#react-css'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-title'); // 2. check CSS\n\n        expect(bundledCSS).to.include('.react-title');\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.css","suites":["CSS","build","JSX"],"updatePoint":{"line":84,"column":21,"index":3414},"line":84,"code":"      it('.module.css', async () => {\n        const el = $('#react-module-css');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".sass","suites":["CSS","build","JSX"],"updatePoint":{"line":93,"column":15,"index":3825},"line":93,"code":"      it('.sass', async () => {\n        const el = $('#react-sass'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-sass-title'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.react-sass-title[^{]*{font-family:fantasy`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".scss","suites":["CSS","build","JSX"],"updatePoint":{"line":100,"column":15,"index":4099},"line":100,"code":"      it('.scss', async () => {\n        const el = $('#react-scss'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-scss-title'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.react-scss-title[^{]*{font-family:fantasy`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.sass","suites":["CSS","build","JSX"],"updatePoint":{"line":107,"column":22,"index":4380},"line":107,"code":"      it('.module.sass', async () => {\n        const el = $('#react-module-sass');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.scss","suites":["CSS","build","JSX"],"updatePoint":{"line":116,"column":22,"index":4799},"line":116,"code":"      it('.module.scss', async () => {\n        const el = $('#react-module-scss');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style>","suites":["CSS","build","Vue"],"updatePoint":{"line":127,"column":17,"index":5249},"line":127,"code":"      it('<style>', async () => {\n        const el = $('#vue-css'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-css'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-css[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style scoped>","suites":["CSS","build","Vue"],"updatePoint":{"line":134,"column":24,"index":5511},"line":134,"code":"      it('<style scoped>', async () => {\n        const el = $('#vue-scoped'); // find data-v-* attribute (how Vue CSS scoping works)\n\n        const {\n          attribs\n        } = el.get(0);\n        const scopeId = Object.keys(attribs).find(k => k.startsWith('data-v-'));\n        expect(scopeId).to.be.ok; // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-scoped'); // 2. check CSS\n\n        expect(bundledCSS).to.include(`.vue-scoped[${scopeId}]`);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style module>","suites":["CSS","build","Vue"],"updatePoint":{"line":147,"column":24,"index":5987},"line":147,"code":"      it('<style module>', async () => {\n        const el = $('#vue-modules');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Vue"],"updatePoint":{"line":156,"column":29,"index":6407},"line":156,"code":"      it('<style lang=\"sass\">', async () => {\n        const el = $('#vue-sass'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-sass'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-sass[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Vue"],"updatePoint":{"line":163,"column":29,"index":6677},"line":163,"code":"      it('<style lang=\"scss\">', async () => {\n        const el = $('#vue-scss'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-scss'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-scss[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style>","suites":["CSS","build","Svelte"],"updatePoint":{"line":172,"column":17,"index":6974},"line":172,"code":"      it('<style>', async () => {\n        const el = $('#svelte-css');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => name !== 'svelte-css' && /^svelte-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-css'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-css.${scopedClass}[^{]*{font-family:ComicSansMS`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Svelte"],"updatePoint":{"line":181,"column":29,"index":7433},"line":181,"code":"      it('<style lang=\"sass\">', async () => {\n        const el = $('#svelte-sass');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => name !== 'svelte-sass' && /^svelte-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-sass'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-sass.${scopedClass}[^{]*{font-family:ComicSansMS`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Svelte"],"updatePoint":{"line":190,"column":29,"index":7896},"line":190,"code":"      it('<style lang=\"scss\">', async () => {\n        const el = $('#svelte-scss');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => name !== 'svelte-scss' && /^svelte-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-scss'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-scss.${scopedClass}[^{]*{font-family:ComicSansMS`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS in public/","suites":["CSS","dev"],"updatePoint":{"line":213,"column":31,"index":8773},"line":213,"code":"    it('resolves CSS in public/', async () => {\n      const href = $('link[href=\"/global.css\"]').attr('href');\n      expect((await fixture.fetch(href)).status).to.equal(200);\n    }); // Skipped until upstream fix lands","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolved imported CSS with ?url","suites":["CSS","dev"],"line":221,"code":"    it.skip('resolved imported CSS with ?url', async () => {","file":"0-css.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"resolves ESM style imports","suites":["CSS","dev"],"updatePoint":{"line":226,"column":34,"index":9410},"line":226,"code":"    it('resolves ESM style imports', async () => {\n      const allInjectedStyles = $('style[data-astro-injected]').text().replace(/\\s*/g, '');\n      expect(allInjectedStyles, 'styles/imported-url.css').to.contain('.imported{');\n      expect(allInjectedStyles, 'styles/imported-url.sass').to.contain('.imported-sass{');\n      expect(allInjectedStyles, 'styles/imported-url.scss').to.contain('.imported-scss{');\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves Astro styles","suites":["CSS","dev"],"updatePoint":{"line":232,"column":29,"index":9823},"line":232,"code":"    it('resolves Astro styles', async () => {\n      const allInjectedStyles = $('style[data-astro-injected]').text();\n      expect(allInjectedStyles).to.contain('.linked-css.astro-');\n      expect(allInjectedStyles).to.contain('.linked-sass.astro-');\n      expect(allInjectedStyles).to.contain('.linked-scss.astro-');\n      expect(allInjectedStyles).to.contain('.wrapper.astro-');\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves Styles from React","suites":["CSS","dev"],"updatePoint":{"line":239,"column":34,"index":10217},"line":239,"code":"    it('resolves Styles from React', async () => {\n      const styles = ['ReactModules.module.css', 'ReactModules.module.scss', 'ReactModules.module.sass'];\n\n      for (const style of styles) {\n        const href = $(`link[href$=\"${style}\"]`).attr('href');\n        expect((await fixture.fetch(href)).status, style).to.equal(200);\n      }\n\n      const allInjectedStyles = $('style[data-astro-injected]').text().replace(/\\s*/g, '');\n      expect(allInjectedStyles).to.contain('.react-title{');\n      expect(allInjectedStyles).to.contain('.react-sass-title{');\n      expect(allInjectedStyles).to.contain('.react-scss-title{');\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS from Svelte","suites":["CSS","dev"],"updatePoint":{"line":252,"column":32,"index":10847},"line":252,"code":"    it('resolves CSS from Svelte', async () => {\n      const allInjectedStyles = $('style[data-astro-injected]').text();\n      expect(allInjectedStyles).to.contain('.svelte-css');\n      expect(allInjectedStyles).to.contain('.svelte-sass');\n      expect(allInjectedStyles).to.contain('.svelte-scss');\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS from Vue","suites":["CSS","dev"],"updatePoint":{"line":258,"column":29,"index":11152},"line":258,"code":"    it('resolves CSS from Vue', async () => {\n      const styles = ['VueModules.vue?vue&type=style&index=0&lang.module.scss'];\n\n      for (const style of styles) {\n        const href = $(`link[href$=\"${style}\"]`).attr('href');\n        expect((await fixture.fetch(href)).status, style).to.equal(200);\n      }\n\n      const allInjectedStyles = $('style[data-astro-injected]').text().replace(/\\s*/g, '');\n      expect(allInjectedStyles).to.contain('.vue-css{');\n      expect(allInjectedStyles).to.contain('.vue-sass{');\n      expect(allInjectedStyles).to.contain('.vue-scss{');\n      expect(allInjectedStyles).to.contain('.vue-scoped[data-v-');\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can load client components","suites":["Aliases with tsconfig.json","dev"],"updatePoint":{"line":20,"column":34,"index":549},"line":20,"code":"    it('can load client components', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html); // Should render aliased element\n\n      expect($('#client').text()).to.equal('test');\n      const scripts = $('script').toArray();\n      expect(scripts.length).to.be.greaterThan(0);\n    });","file":"alias-tsconfig.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can load client components","suites":["Aliases","dev"],"updatePoint":{"line":20,"column":34,"index":521},"line":20,"code":"    it('can load client components', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html); // Should render aliased element\n\n      expect($('#client').text()).to.equal('test');\n      const scripts = $('script').toArray();\n      expect(scripts.length).to.be.greaterThan(0);\n    });","file":"alias.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"two argument supported","suites":["API routes","Deprecated API"],"updatePoint":{"line":13,"column":30,"index":363},"line":13,"code":"    it('two argument supported', async () => {\n      const one = JSON.parse(await fixture.readFile('/old-api/twoarg/one.json'));\n      expect(one).to.deep.equal({\n        param: 'one',\n        pathname: '/old-api/twoarg/one.json'\n      });\n      const two = JSON.parse(await fixture.readFile('/old-api/twoarg/two.json'));\n      expect(two).to.deep.equal({\n        param: 'two',\n        pathname: '/old-api/twoarg/two.json'\n      });\n    });","file":"api-routes.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"param first argument is supported","suites":["API routes","Deprecated API"],"updatePoint":{"line":25,"column":41,"index":815},"line":25,"code":"    it('param first argument is supported', async () => {\n      const one = JSON.parse(await fixture.readFile('/old-api/onearg/one.json'));\n      expect(one).to.deep.equal({\n        param: 'one'\n      });\n    });","file":"api-routes.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Receives a context argument","suites":["API routes","1.0 API"],"updatePoint":{"line":33,"column":35,"index":1058},"line":33,"code":"    it('Receives a context argument', async () => {\n      const one = JSON.parse(await fixture.readFile('/context/data/one.json'));\n      expect(one).to.deep.equal({\n        param: 'one',\n        pathname: '/context/data/one.json'\n      });\n    });","file":"api-routes.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the base image","suites":["Assets"],"updatePoint":{"line":16,"column":26,"index":474},"line":16,"code":"  it('built the base image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const imgPath = $('img').attr('src');\n    const data = await fixture.readFile(imgPath);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the 2x image","suites":["Assets"],"updatePoint":{"line":23,"column":24,"index":738},"line":23,"code":"  it('built the 2x image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const srcset = $('img').attr('srcset');\n    const candidates = matchSrcset(srcset);\n    const match = candidates.find(a => a.density === 2);\n    const data = await fixture.readFile(match.url);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the 3x image","suites":["Assets"],"updatePoint":{"line":32,"column":24,"index":1107},"line":32,"code":"  it('built the 3x image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const srcset = $('img').attr('srcset');\n    const candidates = matchSrcset(srcset);\n    const match = candidates.find(a => a.density === 3);\n    const data = await fixture.readFile(match.url);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built image from an import specifier","suites":["Assets"],"updatePoint":{"line":41,"column":42,"index":1494},"line":41,"code":"  it('built image from an import specifier', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const src = $('#import-no-url').attr('src');\n    const data = await fixture.readFile(src);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built image from an import specifier using ?url","suites":["Assets"],"updatePoint":{"line":48,"column":53,"index":1790},"line":48,"code":"  it('built image from an import specifier using ?url', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const src = $('#import-url').attr('src');\n    const data = await fixture.readFile(src);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes attributes to elements as expected","suites":["Attributes"],"updatePoint":{"line":12,"column":47,"index":350},"line":12,"code":"  it('Passes attributes to elements as expected', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const attrs = {\n      'false-str': {\n        attribute: 'attr',\n        value: 'false'\n      },\n      'true-str': {\n        attribute: 'attr',\n        value: 'true'\n      },\n      false: {\n        attribute: 'attr',\n        value: undefined\n      },\n      true: {\n        attribute: 'attr',\n        value: 'true'\n      },\n      empty: {\n        attribute: 'attr',\n        value: ''\n      },\n      null: {\n        attribute: 'attr',\n        value: undefined\n      },\n      undefined: {\n        attribute: 'attr',\n        value: undefined\n      },\n      'html-boolean': {\n        attribute: 'async',\n        value: 'async'\n      },\n      'html-boolean-true': {\n        attribute: 'async',\n        value: 'async'\n      },\n      'html-boolean-false': {\n        attribute: 'async',\n        value: undefined\n      },\n      'html-enum': {\n        attribute: 'draggable',\n        value: 'true'\n      },\n      'html-enum-true': {\n        attribute: 'draggable',\n        value: 'true'\n      },\n      'html-enum-false': {\n        attribute: 'draggable',\n        value: 'false'\n      }\n    };\n\n    for (const id of Object.keys(attrs)) {\n      const {\n        attribute,\n        value\n      } = attrs[id];\n      const attr = $(`#${id}`).attr(attribute);\n      expect(attr).to.equal(value);\n    }\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes boolean attributes to components as expected","suites":["Attributes"],"updatePoint":{"line":79,"column":57,"index":1807},"line":79,"code":"  it('Passes boolean attributes to components as expected', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html);\n    expect($('#true').attr('attr')).to.equal('attr-true');\n    expect($('#true').attr('type')).to.equal('boolean');\n    expect($('#false').attr('attr')).to.equal('attr-false');\n    expect($('#false').attr('type')).to.equal('boolean');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes namespaced attributes as expected","suites":["Attributes"],"updatePoint":{"line":87,"column":46,"index":2211},"line":87,"code":"  it('Passes namespaced attributes as expected', async () => {\n    const html = await fixture.readFile('/namespaced/index.html');\n    const $ = cheerio.load(html);\n    expect($('div').attr('xmlns:happy')).to.equal('https://example.com/schemas/happy');\n    expect($('img').attr('happy:smile')).to.equal('sweet');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes namespaced attributes to components as expected","suites":["Attributes"],"updatePoint":{"line":93,"column":60,"index":2543},"line":93,"code":"  it('Passes namespaced attributes to components as expected', async () => {\n    const html = await fixture.readFile('/namespaced-component/index.html');\n    const $ = cheerio.load(html);\n    expect($('span').attr('on:click')).to.deep.equal('(event) => console.log(event)');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load page","suites":["Astro basics","build"],"updatePoint":{"line":19,"column":21,"index":540},"line":19,"code":"    it('Can load page', async () => {\n      const html = await fixture.readFile(`/index.html`);\n      const $ = cheerio.load(html);\n      expect($('h1').text()).to.equal('Hello world!');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Correctly serializes boolean attributes","suites":["Astro basics","build"],"updatePoint":{"line":24,"column":47,"index":761},"line":24,"code":"    it('Correctly serializes boolean attributes', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('h1').attr('data-something')).to.equal('');\n      expect($('h2').attr('not-data-ok')).to.equal('');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Selector with an empty body","suites":["Astro basics","build"],"updatePoint":{"line":30,"column":35,"index":1030},"line":30,"code":"    it('Selector with an empty body', async () => {\n      const html = await fixture.readFile('/empty-class/index.html');\n      const $ = cheerio.load(html);\n      expect($('.author')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows forward-slashes in mustache tags (#407)","suites":["Astro basics","build"],"updatePoint":{"line":35,"column":54,"index":1263},"line":35,"code":"    it('Allows forward-slashes in mustache tags (#407)', async () => {\n      const html = await fixture.readFile('/forward-slash/index.html');\n      const $ = cheerio.load(html);\n      expect($('a[href=\"/post/one\"]')).to.have.lengthOf(1);\n      expect($('a[href=\"/post/two\"]')).to.have.lengthOf(1);\n      expect($('a[href=\"/post/three\"]')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows spread attributes (#521)","suites":["Astro basics","build"],"updatePoint":{"line":42,"column":39,"index":1617},"line":42,"code":"    it('Allows spread attributes (#521)', async () => {\n      const html = await fixture.readFile('/spread/index.html');\n      const $ = cheerio.load(html);\n      expect($('#spread-leading')).to.have.lengthOf(1);\n      expect($('#spread-leading').attr('a')).to.equal('0');\n      expect($('#spread-leading').attr('b')).to.equal('1');\n      expect($('#spread-leading').attr('c')).to.equal('2');\n      expect($('#spread-trailing')).to.have.lengthOf(1);\n      expect($('#spread-trailing').attr('a')).to.equal('0');\n      expect($('#spread-trailing').attr('b')).to.equal('1');\n      expect($('#spread-trailing').attr('c')).to.equal('2');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows spread attributes with TypeScript (#521)","suites":["Astro basics","build"],"updatePoint":{"line":54,"column":55,"index":2274},"line":54,"code":"    it('Allows spread attributes with TypeScript (#521)', async () => {\n      const html = await fixture.readFile('/spread/index.html');\n      const $ = cheerio.load(html);\n      expect($('#spread-ts')).to.have.lengthOf(1);\n      expect($('#spread-ts').attr('a')).to.equal('0');\n      expect($('#spread-ts').attr('b')).to.equal('1');\n      expect($('#spread-ts').attr('c')).to.equal('2');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows scoped classes with spread","suites":["Astro basics","build"],"updatePoint":{"line":62,"column":41,"index":2657},"line":62,"code":"    it('Allows scoped classes with spread', async () => {\n      const html = await fixture.readFile('/spread-scope/index.html');\n      const $ = cheerio.load(html);\n      expect($('#spread-plain')).to.have.lengthOf(1);\n      expect($('#spread-plain').attr('class')).to.match(/astro-.*/);\n      expect($('#spread-class')).to.have.lengthOf(1);\n      expect($('#spread-class').attr('class')).to.match(/astro-.*/);\n      expect($('#spread-class-list')).to.have.lengthOf(1);\n      expect($('#spread-class-list').attr('class')).to.match(/astro-.*/);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows using the Fragment element to be used","suites":["Astro basics","build"],"updatePoint":{"line":72,"column":52,"index":3220},"line":72,"code":"    it('Allows using the Fragment element to be used', async () => {\n      const html = await fixture.readFile('/fragment/index.html');\n      const $ = cheerio.load(html); // will be 1 if element rendered correctly\n\n      expect($('#one')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"supports special chars in filename","suites":["Astro basics","build"],"updatePoint":{"line":78,"column":42,"index":3479},"line":78,"code":"    it('supports special chars in filename', async () => {\n      // will have already erred by now, but add test anyway\n      expect(await fixture.readFile('/special-“characters” -in-file/index.html')).to.be.ok;\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Supports void elements whose name is a string (#2062)","suites":["Astro basics","build"],"updatePoint":{"line":83,"column":59,"index":3722},"line":83,"code":"  it('Supports void elements whose name is a string (#2062)', async () => {\n    const html = await fixture.readFile('/input/index.html');\n    const $ = cheerio.load(html); // <Input />\n\n    expect($('body > :nth-child(1)').prop('outerHTML')).to.equal('<input>'); // <Input type=\"password\" />\n\n    expect($('body > :nth-child(2)').prop('outerHTML')).to.equal('<input type=\"password\">'); // <Input type=\"text\" />\n\n    expect($('body > :nth-child(3)').prop('outerHTML')).to.equal('<input type=\"text\">'); // <Input type=\"select\"><option>option</option></Input>\n\n    expect($('body > :nth-child(4)').prop('outerHTML')).to.equal('<select><option>option</option></select>'); // <Input type=\"textarea\">textarea</Input>\n\n    expect($('body > :nth-child(5)').prop('outerHTML')).to.equal('<textarea>textarea</textarea>');\n  });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns 200 for valid URLs","suites":["Astro basics","preview"],"updatePoint":{"line":98,"column":34,"index":4544},"line":98,"code":"    it('returns 200 for valid URLs', async () => {\n      const result = await fixture.fetch('/');\n      expect(result.status).to.equal(200);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns 404 for invalid URLs","suites":["Astro basics","preview"],"updatePoint":{"line":102,"column":36,"index":4695},"line":102,"code":"    it('returns 404 for invalid URLs', async () => {\n      const result = await fixture.fetch('/bad-url');\n      expect(result.status).to.equal(404);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes string children to framework components","suites":["Component children"],"updatePoint":{"line":12,"column":52,"index":360},"line":12,"code":"  it('Passes string children to framework components', async () => {\n    const html = await fixture.readFile('/strings/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass text to Preact components\n\n    const $preact = $('#preact');\n    expect($preact.text().trim()).to.equal('Hello world'); // test 2: Can pass text to Vue components\n\n    const $vue = $('#vue');\n    expect($vue.text().trim()).to.equal('Hello world'); // test 3: Can pass text to Svelte components\n\n    const $svelte = $('#svelte');\n    expect($svelte.text().trim()).to.equal('Hello world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes markup children to framework components","suites":["Component children"],"updatePoint":{"line":25,"column":52,"index":941},"line":25,"code":"  it('Passes markup children to framework components', async () => {\n    const html = await fixture.readFile('/markup/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass markup to Preact components\n\n    const $preact = $('#preact h1');\n    expect($preact.text().trim()).to.equal('Hello world'); // test 2: Can pass markup to Vue components\n\n    const $vue = $('#vue h1');\n    expect($vue.text().trim()).to.equal('Hello world'); // test 3: Can pass markup to Svelte components\n\n    const $svelte = $('#svelte h1');\n    expect($svelte.text().trim()).to.equal('Hello world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes multiple children to framework components","suites":["Component children"],"updatePoint":{"line":38,"column":54,"index":1538},"line":38,"code":"  it('Passes multiple children to framework components', async () => {\n    const html = await fixture.readFile('/multiple/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass multiple children to Preact components\n\n    const $preact = $('#preact');\n    expect($preact.children()).to.have.lengthOf(2);\n    expect($preact.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($preact.children(':last-child').text().trim()).to.equal('Goodbye world'); // test 2: Can pass multiple children to Vue components\n\n    const $vue = $('#vue');\n    expect($vue.children()).to.have.lengthOf(2);\n    expect($vue.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($vue.children(':last-child').text().trim()).to.equal('Goodbye world'); // test 3: Can pass multiple children to Svelte components\n\n    const $svelte = $('#svelte');\n    expect($svelte.children()).to.have.lengthOf(2);\n    expect($svelte.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($svelte.children(':last-child').text().trim()).to.equal('Goodbye world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders a template when children are not rendered for client components","suites":["Component children"],"updatePoint":{"line":57,"column":77,"index":2664},"line":57,"code":"  it('Renders a template when children are not rendered for client components', async () => {\n    const html = await fixture.readFile('/no-render/index.html');\n    const $ = cheerio.load(html); // test 1: If SSR only, no children are rendered.\n\n    expect($('#ssr-only').children()).to.have.lengthOf(0); // test 2: If client, and no children are rendered, a template is.\n\n    expect($('#client').parent().children()).to.have.lengthOf(2, 'rendered the client component and a template');\n    expect($('#client').parent().find('template[data-astro-template]')).to.have.lengthOf(1, 'Found 1 template'); // test 3: If client, and children are rendered, no template is.\n\n    expect($('#client-render').parent().children()).to.have.lengthOf(1);\n    expect($('#client-render').parent().find('template')).to.have.lengthOf(0); // test 4: If client and no children are provided, no template is.\n\n    expect($('#client-no-children').parent().children()).to.have.lengthOf(1);\n    expect($('#client-no-children').parent().find('template')).to.have.lengthOf(0);\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes class:list attributes as expected to elements","suites":["Class List"],"updatePoint":{"line":12,"column":58,"index":366},"line":12,"code":"  it('Passes class:list attributes as expected to elements', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('[class=\"test control\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test expression\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test true\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test truthy\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test set\"]')).to.have.lengthOf(1);\n    expect($('[class=\"hello goodbye world friend\"]')).to.have.lengthOf(1);\n    expect($('[class=\"foo baz\"]')).to.have.lengthOf(1);\n    expect($('span:not([class])')).to.have.lengthOf(1);\n    expect($('.false, .noshow1, .noshow2, .noshow3, .noshow4')).to.have.lengthOf(0);\n  });","file":"astro-class-list.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes class:list attributes as expected to components","suites":["Class List"],"updatePoint":{"line":25,"column":60,"index":1111},"line":25,"code":"  it('Passes class:list attributes as expected to components', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html);\n    expect($('[class=\"test control\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test expression\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test true\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test truthy\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test set\"]')).to.have.lengthOf(1);\n    expect($('[class=\"hello goodbye world friend\"]')).to.have.lengthOf(1);\n    expect($('[class=\"foo baz\"]')).to.have.lengthOf(1);\n    expect($('span:not([class])')).to.have.lengthOf(1);\n  });","file":"astro-class-list.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:only hydrator","suites":["Client only components"],"updatePoint":{"line":12,"column":44,"index":370},"line":12,"code":"  it('Loads pages using client:only hydrator', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html); // test 1: <astro-island> is empty\n\n    expect($('astro-island').html()).to.equal(''); // test 2: svelte renderer is on the page\n\n    expect($('astro-island').attr('renderer-url')).to.be.ok;\n  });","file":"astro-client-only.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Adds the CSS to the page","suites":["Client only components"],"updatePoint":{"line":20,"column":30,"index":703},"line":20,"code":"  it('Adds the CSS to the page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html);\n    const href = $('link[rel=stylesheet]').attr('href');\n    const css = await fixture.readFile(href);\n    expect(css).to.match(/yellowgreen/, 'Svelte styles are added');\n    expect(css).to.match(/Courier New/, 'Global styles are added');\n  });","file":"astro-client-only.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:only hydrator","suites":["Client only components subpath"],"updatePoint":{"line":39,"column":44,"index":1363},"line":39,"code":"  it('Loads pages using client:only hydrator', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html); // test 1: <astro-island> is empty\n\n    expect($('astro-island').html()).to.equal(''); // test 2: svelte renderer is on the page\n\n    expect($('astro-island').attr('renderer-url')).to.be.ok;\n  });","file":"astro-client-only.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Adds the CSS to the page","suites":["Client only components subpath"],"updatePoint":{"line":47,"column":30,"index":1696},"line":47,"code":"  it('Adds the CSS to the page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html);\n    const href = $('link[rel=stylesheet]').attr('href');\n    const css = await fixture.readFile(href.replace(/\\/blog/, ''));\n    expect(css).to.match(/yellowgreen/, 'Svelte styles are added');\n    expect(css).to.match(/Courier New/, 'Global styles are added');\n  });","file":"astro-client-only.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code> without lang or theme","suites":["<Code>"],"updatePoint":{"line":12,"column":34,"index":336},"line":12,"code":"  it('<Code> without lang or theme', async () => {\n    let html = await fixture.readFile('/no-lang/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto;', 'applies default and overflow');\n    expect($('pre > code')).to.have.lengthOf(1); // test: contains some generated spans\n\n    expect($('pre > code span').length).to.be.greaterThan(1);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code lang=\"...\">","suites":["<Code>"],"updatePoint":{"line":21,"column":23,"index":796},"line":21,"code":"  it('<Code lang=\"...\">', async () => {\n    let html = await fixture.readFile('/basic/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class'), 'astro-code');\n    expect($('pre > code')).to.have.lengthOf(1); // test: contains many generated spans\n\n    expect($('pre > code span').length).to.be.greaterThanOrEqual(6);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code theme=\"...\">","suites":["<Code>"],"updatePoint":{"line":30,"column":24,"index":1187},"line":30,"code":"  it('<Code theme=\"...\">', async () => {\n    let html = await fixture.readFile('/custom-theme/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class')).to.equal('astro-code');\n    expect($('pre').attr('style')).to.equal('background-color: #2e3440ff; overflow-x: auto;', 'applies custom theme');\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code wrap>","suites":["<Code>"],"updatePoint":{"line":37,"column":17,"index":1548},"line":37,"code":"  it('<Code wrap>', async () => {\n    {\n      let html = await fixture.readFile('/wrap-true/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;');\n    }\n    {\n      let html = await fixture.readFile('/wrap-false/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto;');\n    }\n    {\n      let html = await fixture.readFile('/wrap-null/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117');\n    }\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code lang=\"...\" theme=\"css-variables\">","suites":["<Code>"],"updatePoint":{"line":60,"column":45,"index":2499},"line":60,"code":"  it('<Code lang=\"...\" theme=\"css-variables\">', async () => {\n    let html = await fixture.readFile('/css-theme/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class')).to.equal('astro-code');\n    expect($('pre, pre span').map((i, f) => f.attribs ? f.attribs.style : 'no style found').toArray()).to.deep.equal(['background-color: var(--astro-code-color-background); overflow-x: auto;', 'color: var(--astro-code-token-constant)', 'color: var(--astro-code-token-function)', 'color: var(--astro-code-color-text)', 'color: var(--astro-code-token-string-expression)', 'color: var(--astro-code-color-text)']);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code> with custom theme and lang","suites":["<Code>"],"updatePoint":{"line":67,"column":39,"index":3171},"line":67,"code":"  it('<Code> with custom theme and lang', async () => {\n    let html = await fixture.readFile('/imported/index.html');\n    const $ = cheerio.load(html);\n    expect($('#theme > pre')).to.have.lengthOf(1);\n    expect($('#theme > pre').attr('style'), 'background-color: #FDFDFE; overflow-x: auto;');\n    expect($('#lang > pre')).to.have.lengthOf(1);\n    expect($('#lang > pre > code span').length).to.equal(3);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Bundles CSS","suites":["CSS Bundling"],"updatePoint":{"line":23,"column":17,"index":937},"line":23,"code":"  it('Bundles CSS', async () => {\n    const builtCSS = new Set(); // for all HTML files…\n\n    for (const [filepath, css] of Object.entries(EXPECTED_CSS)) {\n      const html = await fixture.readFile(filepath);\n      const $ = cheerio.load(html); // test 1: assert new bundled CSS is present\n\n      for (const href of css) {\n        const link = $(`link[rel=\"stylesheet\"][href^=\"${href}\"]`);\n        expect(link.length).to.be.greaterThanOrEqual(1);\n        const outHref = link.attr('href');\n        builtCSS.add(outHref.startsWith('../') ? outHref.slice(2) : outHref);\n      } // test 2: assert old CSS was removed\n\n\n      for (const href of UNEXPECTED_CSS) {\n        const link = $(`link[rel=\"stylesheet\"][href=\"${href}\"]`);\n        expect(link).to.have.lengthOf(0);\n      } // test 3: assert all bundled CSS was built and contains CSS\n\n\n      for (const url of builtCSS.keys()) {\n        const bundledCss = await fixture.readFile(url);\n        expect(bundledCss).to.be.ok;\n      }\n    }\n  });","file":"astro-css-bundling.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes define:vars to script elements","suites":["Directives"],"updatePoint":{"line":12,"column":43,"index":351},"line":12,"code":"  it('Passes define:vars to script elements', async () => {\n    const html = await fixture.readFile('/define-vars/index.html');\n    const $ = cheerio.load(html);\n    expect($('script')).to.have.lengthOf(3);\n    let i = 0;\n\n    for (const script of $('script').toArray()) {\n      // Wrap script in scope ({}) to avoid redeclaration errors\n      expect($(script).text().at(0)).to.equal('{');\n      expect($(script).text().at(-1)).to.equal('}');\n\n      if (i < 2) {\n        // Inline defined variables\n        expect($(script).toString()).to.include('let foo = \"bar\"');\n      } else {\n        // Convert invalid keys to valid identifiers\n        expect($(script).toString()).to.include('let dashCase = \"bar\"');\n      }\n\n      i++;\n    }\n  });","file":"astro-directives.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes define:vars to style elements","suites":["Directives"],"updatePoint":{"line":34,"column":42,"index":1090},"line":34,"code":"  it('Passes define:vars to style elements', async () => {\n    const html = await fixture.readFile('/define-vars/index.html');\n    const $ = cheerio.load(html);\n    expect($('style')).to.have.lengthOf(2); // Inject style attribute on top-level element in page\n\n    expect($('html').attr('style').toString()).to.include('--bg: white;');\n    expect($('html').attr('style').toString()).to.include('--fg: black;'); // Inject style attribute on top-level elements in component\n\n    expect($('h1').attr('style').toString()).to.include('--textColor: red;');\n  });","file":"astro-directives.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"set:html","suites":["Directives"],"updatePoint":{"line":44,"column":14,"index":1619},"line":44,"code":"  it('set:html', async () => {\n    const html = await fixture.readFile('/set-html/index.html');\n    const $ = cheerio.load(html);\n    expect($('#text')).to.have.lengthOf(1);\n    expect($('#text').text()).to.equal('a');\n    expect($('#zero')).to.have.lengthOf(1);\n    expect($('#zero').text()).to.equal('0');\n    expect($('#number')).to.have.lengthOf(1);\n    expect($('#number').text()).to.equal('1');\n    expect($('#undefined')).to.have.lengthOf(1);\n    expect($('#undefined').text()).to.equal('');\n    expect($('#null')).to.have.lengthOf(1);\n    expect($('#null').text()).to.equal('');\n    expect($('#false')).to.have.lengthOf(1);\n    expect($('#false').text()).to.equal('');\n    expect($('#true')).to.have.lengthOf(1);\n    expect($('#true').text()).to.equal('true');\n  });","file":"astro-directives.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Automatically prepends the standards mode doctype","suites":["Doctype"],"updatePoint":{"line":12,"column":55,"index":351},"line":12,"code":"  it('Automatically prepends the standards mode doctype', async () => {\n    const html = await fixture.readFile('/prepend/index.html'); // test that Doctype always included\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"No attributes added when doctype is provided by user","suites":["Doctype"],"updatePoint":{"line":17,"column":58,"index":582},"line":17,"code":"  it('No attributes added when doctype is provided by user', async () => {\n    const html = await fixture.readFile('/provided/index.html'); // test that Doctype always included\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Preserves user provided doctype","suites":["Doctype"],"updatePoint":{"line":22,"column":37,"index":793},"line":22,"code":"  it('Preserves user provided doctype', async () => {\n    const html = await fixture.readFile('/preserve/index.html'); // test that Doctype included was preserved\n\n    expect(html).to.match(new RegExp('^<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">', 'i'));\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"User provided doctype is case insensitive","suites":["Doctype"],"updatePoint":{"line":27,"column":47,"index":1124},"line":27,"code":"  it('User provided doctype is case insensitive', async () => {\n    const html = await fixture.readFile('/capital/index.html'); // test 1: Doctype left alone\n\n    expect(html).to.match(/^<!DOCTYPE html>/i); // test 2: no closing tag\n\n    expect(html).not.to.match(/<\\/!DOCTYPE>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doctype can be provided in a layout","suites":["Doctype"],"line":34,"code":"  it.skip('Doctype can be provided in a layout', async () => {","file":"astro-doctype.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Doctype is added in a layout without one","suites":["Doctype"],"updatePoint":{"line":42,"column":46,"index":1750},"line":42,"code":"  it('Doctype is added in a layout without one', async () => {\n    const html = await fixture.readFile('/in-layout-no-doctype/index.html'); // test that doctype is at the front\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doctype is added in a layout used with markdown pages","suites":["Doctype"],"updatePoint":{"line":47,"column":59,"index":1995},"line":47,"code":"  it('Doctype is added in a layout used with markdown pages', async () => {\n    const html = await fixture.readFile('/in-layout-article/index.html'); // test 1: doctype is at the front\n\n    expect(html).to.match(/^<!DOCTYPE html>/i); // test 2: A link inside of the head\n\n    const $ = cheerio.load(html);\n    expect($('head link')).to.have.lengthOf(1);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads packages that only run code in client","suites":["Dynamic components"],"updatePoint":{"line":12,"column":49,"index":356},"line":12,"code":"  it('Loads packages that only run code in client', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('script').length).to.eq(1);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:media hydrator","suites":["Dynamic components"],"updatePoint":{"line":17,"column":45,"index":555},"line":17,"code":"  it('Loads pages using client:media hydrator', async () => {\n    const root = new URL('http://example.com/media/index.html');\n    const html = await fixture.readFile('/media/index.html');\n    const $ = cheerio.load(html); // test 1: static value rendered\n\n    expect($('script').length).to.equal(1);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:only hydrator","suites":["Dynamic components"],"updatePoint":{"line":24,"column":44,"index":861},"line":24,"code":"  it('Loads pages using client:only hydrator', async () => {\n    const html = await fixture.readFile('/client-only/index.html');\n    const $ = cheerio.load(html); // test 1: <astro-island> is empty.\n\n    expect($('astro-island').html()).to.equal(''); // test 2: component url\n\n    const href = $('astro-island').attr('component-url');\n    expect(href).to.include(`/PersistentCounter`);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads packages that only run code in client","suites":["Dynamic components subpath"],"updatePoint":{"line":44,"column":49,"index":1515},"line":44,"code":"  it('Loads packages that only run code in client', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('script').length).to.eq(1);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:media hydrator","suites":["Dynamic components subpath"],"updatePoint":{"line":49,"column":45,"index":1714},"line":49,"code":"  it('Loads pages using client:media hydrator', async () => {\n    const html = await fixture.readFile('/media/index.html');\n    const $ = cheerio.load(html); // test 1: static value rendered\n\n    expect($('script').length).to.equal(1);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:only hydrator","suites":["Dynamic components subpath"],"updatePoint":{"line":55,"column":44,"index":1955},"line":55,"code":"  it('Loads pages using client:only hydrator', async () => {\n    const html = await fixture.readFile('/client-only/index.html');\n    const $ = cheerio.load(html); // test 1: <astro-island> is empty.\n\n    expect($('astro-island').html()).to.equal(''); // test 2: has component url\n\n    const attr = $('astro-island').attr('component-url');\n    expect(attr).to.include(`blog/PersistentCounter`);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"builds without throwing","suites":["Environment Variables","Build"],"updatePoint":{"line":16,"column":31,"index":449},"line":16,"code":"    it('builds without throwing', async () => {\n      expect(true).to.equal(true);\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render public env and private env","suites":["Environment Variables","Build"],"updatePoint":{"line":19,"column":46,"index":555},"line":19,"code":"    it('does render public env and private env', async () => {\n      let indexHtml = await fixture.readFile('/index.html');\n      expect(indexHtml).to.include('CLUB_33');\n      expect(indexHtml).to.include('BLUE_BAYOU');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render destructured public env and private env","suites":["Environment Variables","Build"],"updatePoint":{"line":24,"column":59,"index":797},"line":24,"code":"    it('does render destructured public env and private env', async () => {\n      let indexHtml = await fixture.readFile('/destructured/index.html');\n      expect(indexHtml).to.include('CLUB_33');\n      expect(indexHtml).to.include('BLUE_BAYOU');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render builtin SITE env","suites":["Environment Variables","Build"],"updatePoint":{"line":29,"column":36,"index":1029},"line":29,"code":"    it('does render builtin SITE env', async () => {\n      let indexHtml = await fixture.readFile('/index.html');\n      expect(indexHtml).to.include('http://example.com');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render destructured builtin SITE env","suites":["Environment Variables","Build"],"updatePoint":{"line":33,"column":49,"index":1222},"line":33,"code":"    it('does render destructured builtin SITE env', async () => {\n      let indexHtml = await fixture.readFile('/destructured/index.html');\n      expect(indexHtml).to.include('http://example.com');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render builtin BASE_URL env","suites":["Environment Variables","Build"],"updatePoint":{"line":37,"column":40,"index":1419},"line":37,"code":"    it('does render builtin BASE_URL env', async () => {\n      let indexHtml = await fixture.readFile('/index.html');\n      expect(indexHtml).to.include('/blog');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"includes public env in client-side JS","suites":["Environment Variables","Build"],"updatePoint":{"line":41,"column":45,"index":1595},"line":41,"code":"    it('includes public env in client-side JS', async () => {\n      let dirs = await fixture.readdir('/');\n      let found = false; // Look in all of the .js files to see if the public env is inlined.\n      // Testing this way prevents hardcoding expected js files.\n      // If we find it in any of them that's good enough to know its working.\n\n      await Promise.all(dirs.map(async path => {\n        if (path.endsWith('.js')) {\n          let js = await fixture.readFile(`/${path}`);\n\n          if (js.includes('BLUE_BAYOU')) {\n            found = true;\n          }\n        }\n      }));\n      expect(found).to.equal(true, 'found the public env variable in the JS build');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does not include private env in client-side JS","suites":["Environment Variables","Build"],"updatePoint":{"line":58,"column":54,"index":2285},"line":58,"code":"    it('does not include private env in client-side JS', async () => {\n      let dirs = await fixture.readdir('/');\n      let found = false; // Look in all of the .js files to see if the public env is inlined.\n      // Testing this way prevents hardcoding expected js files.\n      // If we find it in any of them that's good enough to know its NOT working.\n\n      await Promise.all(dirs.map(async path => {\n        if (path.endsWith('.js')) {\n          let js = await fixture.readFile(`/${path}`);\n\n          if (js.includes('CLUB_33')) {\n            found = true;\n          }\n        }\n      }));\n      expect(found).to.equal(false, 'found the private env variable in the JS build');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render builtin BASE_URL env","suites":["Environment Variables","Development"],"updatePoint":{"line":85,"column":40,"index":3220},"line":85,"code":"    it('does render builtin BASE_URL env', async () => {\n      let res = await fixture.fetch('/blog/');\n      expect(res.status).to.equal(200);\n      let indexHtml = await res.text();\n      let $ = cheerio.load(indexHtml);\n      expect($('#base-url').text()).to.equal('/blog/');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render destructured builtin SITE env","suites":["Environment Variables","Development"],"updatePoint":{"line":92,"column":49,"index":3516},"line":92,"code":"    it('does render destructured builtin SITE env', async () => {\n      let res = await fixture.fetch('/blog/destructured/');\n      expect(res.status).to.equal(200);\n      let indexHtml = await res.text();\n      let $ = cheerio.load(indexHtml);\n      expect($('#base-url').text()).to.equal('/blog/');\n    });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load page","suites":["Expressions"],"updatePoint":{"line":12,"column":19,"index":316},"line":12,"code":"  it('Can load page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of strings","suites":["Expressions"],"updatePoint":{"line":20,"column":42,"index":575},"line":20,"code":"  it('Ignores characters inside of strings', async () => {\n    const html = await fixture.readFile('/strings/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of line comments","suites":["Expressions"],"updatePoint":{"line":28,"column":48,"index":848},"line":28,"code":"  it('Ignores characters inside of line comments', async () => {\n    const html = await fixture.readFile('/line-comments/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of multiline comments","suites":["Expressions"],"updatePoint":{"line":36,"column":53,"index":1132},"line":36,"code":"  it('Ignores characters inside of multiline comments', async () => {\n    const html = await fixture.readFile('/multiline-comments/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows multiple JSX children in mustache","suites":["Expressions"],"updatePoint":{"line":44,"column":46,"index":1414},"line":44,"code":"  it('Allows multiple JSX children in mustache', async () => {\n    const html = await fixture.readFile('/multiple-children/index.html');\n    expect(html).to.include('#f');\n    expect(html).not.to.include('#t');\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows <> Fragments in expressions","suites":["Expressions"],"updatePoint":{"line":49,"column":40,"index":1625},"line":49,"code":"  it('Allows <> Fragments in expressions', async () => {\n    const html = await fixture.readFile('/multiple-children/index.html');\n    const $ = cheerio.load(html);\n    expect($('#fragment').children()).to.have.lengthOf(3);\n    expect($('#fragment').children('#a')).to.have.lengthOf(1);\n    expect($('#fragment').children('#b')).to.have.lengthOf(1);\n    expect($('#fragment').children('#c')).to.have.lengthOf(1);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not render falsy values using &&","suites":["Expressions"],"updatePoint":{"line":57,"column":43,"index":2047},"line":57,"code":"  it('Does not render falsy values using &&', async () => {\n    const html = await fixture.readFile('/falsy/index.html');\n    const $ = cheerio.load(html); // test 1: Expected {true && <span id=\"true\" />} to render\n\n    expect($('#true')).to.have.lengthOf(1); // test 2: Expected {0 && \"VALUE\"} to render \"0\"\n\n    expect($('#zero').text()).to.equal('0'); // test 3: Expected {false && <span id=\"false\" />} not to render\n\n    expect($('#false')).to.have.lengthOf(0); // test 4: Expected {null && <span id=\"null\" />} not to render\n\n    expect($('#null')).to.have.lengthOf(0); // test 5: Expected {undefined && <span id=\"undefined\" />} not to render\n\n    expect($('#undefined')).to.have.lengthOf(0); // Inside of a component\n    // test 6: Expected {true && <span id=\"true\" />} to render\n\n    expect($('#frag-true')).to.have.lengthOf(1); // test 7: Expected {false && <span id=\"false\" />} not to render\n\n    expect($('#frag-false')).to.have.lengthOf(0); // test 8: Expected {null && <span id=\"null\" />} not to render\n\n    expect($('#frag-null')).to.have.lengthOf(0); // test 9: Expected {undefined && <span id=\"undefined\" />} not to render\n\n    expect($('#frag-undefined')).to.have.lengthOf(0);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Escapes HTML by default","suites":["Expressions"],"updatePoint":{"line":80,"column":29,"index":3231},"line":80,"code":"  it('Escapes HTML by default', async () => {\n    const html = await fixture.readFile('/escape/index.html');\n    const $ = cheerio.load(html);\n    expect($('body').children()).to.have.lengthOf(2);\n    expect($('body').html()).to.include('&lt;script&gt;console.log(\"pwnd\")&lt;/script&gt;');\n    expect($('#trusted')).to.have.lengthOf(1);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not double-escape HTML","suites":["Expressions"],"updatePoint":{"line":87,"column":33,"index":3578},"line":87,"code":"  it('Does not double-escape HTML', async () => {\n    const html = await fixture.readFile('/escape/index.html');\n    const $ = cheerio.load(html);\n    expect($('#single-escape').html()).to.equal('Astro &amp; Vite');\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Handles switch statements","suites":["Expressions"],"updatePoint":{"line":92,"column":31,"index":3798},"line":92,"code":"  it('Handles switch statements', async () => {\n    const html = await fixture.readFile('/switch/index.html');\n    const $ = cheerio.load(html);\n    expect($('#red').length).to.equal(0);\n    expect($('#yellow').length).to.equal(1);\n    expect($('#blue').length).to.equal(0);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is skipped","suites":[],"line":21,"code":"it.skip('is skipped', () => {});","file":"astro-external-files.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Shows static content","suites":["Dynamic component fallback"],"updatePoint":{"line":12,"column":26,"index":341},"line":12,"code":"  it('Shows static content', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#fallback').text()).to.equal('static');\n  });","file":"astro-fallback.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is only called once during build","suites":["getStaticPaths - build calls"],"updatePoint":{"line":13,"column":38,"index":411},"line":13,"code":"  it('is only called once during build', () => {\n    // useless expect; if build() throws in setup then this test fails\n    expect(true).to.equal(true);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on matching static path - named params","suites":["getStaticPaths - 404 behavior"],"updatePoint":{"line":30,"column":57,"index":893},"line":30,"code":"  it('resolves 200 on matching static path - named params', async () => {\n    const res = await fixture.fetch('/pizza/provolone-sausage');\n    expect(res.status).to.equal(200);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 404 on pattern match without static path - named params","suites":["getStaticPaths - 404 behavior"],"updatePoint":{"line":34,"column":70,"index":1089},"line":34,"code":"  it('resolves 404 on pattern match without static path - named params', async () => {\n    const res = await fixture.fetch('/pizza/provolone-pineapple');\n    expect(res.status).to.equal(404);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on matching static path - rest params","suites":["getStaticPaths - 404 behavior"],"updatePoint":{"line":38,"column":56,"index":1273},"line":38,"code":"  it('resolves 200 on matching static path - rest params', async () => {\n    const res = await fixture.fetch('/pizza/grimaldis/new-york');\n    expect(res.status).to.equal(200);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 404 on pattern match without static path - rest params","suites":["getStaticPaths - 404 behavior"],"updatePoint":{"line":42,"column":69,"index":1469},"line":42,"code":"  it('resolves 404 on pattern match without static path - rest params', async () => {\n    const res = await fixture.fetch('/pizza/pizza-hut');\n    expect(res.status).to.equal(404);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on matching static path - string params","suites":["getStaticPaths - route params type validation"],"updatePoint":{"line":56,"column":58,"index":1915},"line":56,"code":"  it('resolves 200 on matching static path - string params', async () => {\n    // route provided with { params: { year: \"2022\", slug: \"post-2\" }}\n    const res = await fixture.fetch('/blog/2022/post-1');\n    expect(res.status).to.equal(200);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on matching static path - numeric params","suites":["getStaticPaths - route params type validation"],"updatePoint":{"line":61,"column":59,"index":2164},"line":61,"code":"  it('resolves 200 on matching static path - numeric params', async () => {\n    // route provided with { params: { year: 2022, slug: \"post-2\" }}\n    const res = await fixture.fetch('/blog/2022/post-2');\n    expect(res.status).to.equal(200);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves 200 on matching static paths","suites":["getStaticPaths - numeric route params"],"updatePoint":{"line":80,"column":43,"index":2748},"line":80,"code":"  it('resolves 200 on matching static paths', async () => {\n    // routes params provided for pages /posts/1, /posts/2, and /posts/3\n    for (const page of [1, 2, 3]) {\n      let res = await fixture.fetch(`/posts/${page}`);\n      expect(res.status).to.equal(200);\n      const html = await res.text();\n      const $ = cheerio.load(html);\n      const canonical = $('link[rel=canonical]');\n      expect(canonical.attr('href')).to.equal(`https://mysite.dev/posts/${page}`, `doesn't trim the /${page} route param`);\n    }\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.request.url","suites":["Astro Global","dev"],"updatePoint":{"line":24,"column":25,"index":671},"line":24,"code":"    it('Astro.request.url', async () => {\n      expect($('#pathname').text()).to.equal('/blog/');\n      expect($('#searchparams').text()).to.equal('{}');\n      expect($('#child-pathname').text()).to.equal('/blog/');\n      expect($('#nested-child-pathname').text()).to.equal('/blog/');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.request.url","suites":["Astro Global","build"],"updatePoint":{"line":35,"column":25,"index":1060},"line":35,"code":"    it('Astro.request.url', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#pathname').text()).to.equal('/blog/');\n      expect($('#searchparams').text()).to.equal('{}');\n      expect($('#child-pathname').text()).to.equal('/blog/');\n      expect($('#nested-child-pathname').text()).to.equal('/blog/');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.site","suites":["Astro Global","build"],"updatePoint":{"line":43,"column":18,"index":1440},"line":43,"code":"    it('Astro.site', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#site').attr('href')).to.equal('https://mysite.dev/blog/');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.glob() correctly returns an array of all posts","suites":["Astro Global","build"],"updatePoint":{"line":48,"column":60,"index":1695},"line":48,"code":"    it('Astro.glob() correctly returns an array of all posts', async () => {\n      const html = await fixture.readFile('/posts/1/index.html');\n      const $ = cheerio.load(html);\n      expect($('.post-url').attr('href')).to.equal('/blog/post/post-2');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.glob() correctly returns meta info for MD and Astro files","suites":["Astro Global","build"],"updatePoint":{"line":53,"column":71,"index":1966},"line":53,"code":"    it('Astro.glob() correctly returns meta info for MD and Astro files', async () => {\n      const html = await fixture.readFile('/glob/index.html');\n      const $ = cheerio.load(html);\n      expect($('[data-file]').length).to.equal(3);\n      expect($('.post-url[href]').length).to.equal(3);\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.request.url","suites":["Astro Global Defaults","dev"],"updatePoint":{"line":79,"column":25,"index":2710},"line":79,"code":"    it('Astro.request.url', async () => {\n      expect($('#pathname').text()).to.equal('');\n      expect($('#searchparams').text()).to.equal('');\n      expect($('#child-pathname').text()).to.equal('');\n      expect($('#nested-child-pathname').text()).to.equal('');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.request.url","suites":["Astro Global Defaults","build"],"updatePoint":{"line":90,"column":25,"index":3079},"line":90,"code":"    it('Astro.request.url', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#pathname').text()).to.equal('/');\n      expect($('#searchparams').text()).to.equal('{}');\n      expect($('#child-pathname').text()).to.equal('/');\n      expect($('#nested-child-pathname').text()).to.equal('/');\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.site","suites":["Astro Global Defaults","build"],"updatePoint":{"line":98,"column":18,"index":3444},"line":98,"code":"    it('Astro.site', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#site').attr('href')).to.equal(undefined);\n    });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Styles are appended to the head and not the body","suites":["Head in its own component"],"updatePoint":{"line":14,"column":54,"index":421},"line":14,"code":"  it('Styles are appended to the head and not the body', async () => {\n    let html = await fixture.readFile('/head-own-component/index.html');\n    let $ = cheerio.load(html);\n    expect($('link[rel=stylesheet]')).to.have.a.lengthOf(1, 'one stylesheet overall');\n    expect($('head link[rel=stylesheet]')).to.have.a.lengthOf(1, 'stylesheet is in the head');\n  });","file":"astro-head.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Compiles styles for Astro components within imported markdown","suites":["Imported markdown CSS","build"],"updatePoint":{"line":25,"column":69,"index":920},"line":25,"code":"    it('Compiles styles for Astro components within imported markdown', () => {\n      const importedAstroComponent = $(`#${IMPORTED_ASTRO_COMPONENT_ID}`)?.[0];\n      expect(importedAstroComponent?.name).to.equal('h2');\n      const cssClass = $(importedAstroComponent).attr('class')?.split(/\\s+/)?.[0];\n      expect(bundledCSS).to.match(new RegExp(`h2.${cssClass}{color:#00f}`));\n    });","file":"astro-markdown-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Compiles styles for Astro components within imported markdown","suites":["Imported markdown CSS","dev"],"updatePoint":{"line":44,"column":69,"index":1621},"line":44,"code":"    it('Compiles styles for Astro components within imported markdown', async () => {\n      const importedAstroComponent = $(`#${IMPORTED_ASTRO_COMPONENT_ID}`)?.[0];\n      expect(importedAstroComponent?.name).to.equal('h2');\n      const cssClass = $(importedAstroComponent).attr('class')?.split(/\\s+/)?.[0];\n      const allInjectedStyles = $('style[data-astro-injected]').text().replace(/\\s*/g, '');\n      expect(allInjectedStyles).to.match(new RegExp(`h2.${cssClass}{color:#00f}`));\n    });","file":"astro-markdown-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not render the draft post","suites":["Astro Markdown with draft posts disabled"],"updatePoint":{"line":12,"column":36,"index":373},"line":12,"code":"  it('Does not render the draft post', async () => {\n    let renderedDraft = false;\n\n    try {\n      await fixture.readFile('/wip/index.html');\n      renderedDraft = true;\n    } catch (err) {\n      expect(err.code).to.equal('ENOENT');\n    }\n\n    expect(renderedDraft).to.equal(false, 'Rendered a draft post');\n  });","file":"astro-markdown-drafts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders the draft post","suites":["Astro Markdown with draft posts enabled"],"updatePoint":{"line":36,"column":28,"index":954},"line":36,"code":"  it('Renders the draft post', async () => {\n    const html = await fixture.readFile('/wip/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').length).to.be.ok;\n    expect($('h1').text()).to.equal('WIP');\n  });","file":"astro-markdown-drafts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Leaves JSX expressions unprocessed","suites":["Astro Markdown - plain MD mode"],"updatePoint":{"line":12,"column":40,"index":368},"line":12,"code":"  it('Leaves JSX expressions unprocessed', async () => {\n    const html = await fixture.readFile('/jsx-expressions/index.html');\n    const $ = cheerio.load(html);\n    expect($('h2').html()).to.equal('{frontmatter.title}');\n  });","file":"astro-markdown-md-mode.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Leaves JSX components un-transformed","suites":["Astro Markdown - plain MD mode"],"updatePoint":{"line":17,"column":42,"index":599},"line":17,"code":"  it('Leaves JSX components un-transformed', async () => {\n    const html = await fixture.readFile('/components/index.html');\n    expect(html).to.include('<counter client:load=\"\" count=\"{0}\">');\n  });","file":"astro-markdown-md-mode.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"handles Shiki","suites":["Astro Markdown - plain MD mode","syntax highlighting"],"updatePoint":{"line":22,"column":21,"index":827},"line":22,"code":"    it('handles Shiki', async () => {\n      const html = await fixture.readFile('/code-in-md/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre.astro-code').length).to.not.equal(0);\n    });","file":"astro-markdown-md-mode.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"handles Prism","suites":["Astro Markdown - plain MD mode","syntax highlighting"],"updatePoint":{"line":27,"column":21,"index":1036},"line":27,"code":"    it('handles Prism', async () => {\n      fixture = await loadFixture({\n        root: './fixtures/astro-markdown-md-mode/',\n        markdown: {\n          syntaxHighlight: 'prism'\n        }\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/code-in-md/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre.language-html').length).to.not.equal(0);\n    });","file":"astro-markdown-md-mode.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with plugins","suites":["Astro Markdown plugins"],"updatePoint":{"line":23,"column":38,"index":739},"line":23,"code":"  it('Can render markdown with plugins', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html); // test 1: Added a TOC\n\n    expect($('.toc')).to.have.lengthOf(1); // teste 2: Added .title to h1\n\n    expect($('#hello-world').hasClass('title')).to.equal(true);\n  });","file":"astro-markdown-plugins.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with shiki","suites":["Astro Markdown Shiki","Render shiki"],"updatePoint":{"line":13,"column":38,"index":410},"line":13,"code":"    it('Can render markdown with shiki', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html); // There should be no HTML from Prism\n\n      expect($('.token')).to.have.lengthOf(0);\n      expect($('pre')).to.have.lengthOf(2);\n      expect($('pre').hasClass('astro-code')).to.equal(true);\n      expect($('pre').attr().style).to.equal('background-color: #0d1117; overflow-x: auto;');\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render diff syntax with \"user-select: none\"","suites":["Astro Markdown Shiki","Render shiki"],"updatePoint":{"line":22,"column":55,"index":870},"line":22,"code":"    it('Can render diff syntax with \"user-select: none\"', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const diffBlockHtml = $('pre').last().html();\n      expect(diffBlockHtml).to.contain(`<span style=\"user-select: none;\">+</span>`);\n      expect(diffBlockHtml).to.contain(`<span style=\"user-select: none;\">-</span>`);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Themes","Integrated theme"],"updatePoint":{"line":39,"column":23,"index":1522},"line":39,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #ffffff; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Themes","Custom theme"],"updatePoint":{"line":55,"column":23,"index":2129},"line":55,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #FDFDFE; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Custom langs"],"updatePoint":{"line":72,"column":21,"index":2710},"line":72,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const segments = $('.line').get(6).children;\n      expect(segments).to.have.lengthOf(3);\n      expect(segments[0].attribs.style).to.be.equal('color: #C9D1D9');\n      expect(segments[1].attribs.style).to.be.equal('color: #79C0FF');\n      expect(segments[2].attribs.style).to.be.equal('color: #C9D1D9');\n      const unknownLang = $('.line').last().html();\n      expect(unknownLang).to.be.equal('<span style=\"color: #c9d1d9\">This language does not exist</span>');\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Wrap","wrap = true"],"updatePoint":{"line":94,"column":23,"index":3700},"line":94,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').attr('style')).to.equal(style);\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","wrap = false"],"updatePoint":{"line":111,"column":21,"index":4248},"line":111,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1);\n      expect($('pre').attr('style')).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","wrap = null"],"updatePoint":{"line":127,"column":21,"index":4757},"line":127,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1);\n      expect($('pre').attr('style')).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: always","suites":["Astro Markdown URL","With subpath"],"updatePoint":{"line":7,"column":29,"index":285},"line":7,"code":"    it('trailingSlash: always', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/with-subpath-always/', import.meta.url),\n        base: '/my-cool-base',\n        trailingSlash: 'always'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl + '/');\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: never","suites":["Astro Markdown URL","With subpath"],"updatePoint":{"line":19,"column":28,"index":780},"line":19,"code":"    it('trailingSlash: never', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/with-subpath-never/', import.meta.url),\n        base: '/my-cool-base',\n        trailingSlash: 'never'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl);\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: ignore","suites":["Astro Markdown URL","With subpath"],"updatePoint":{"line":31,"column":29,"index":1268},"line":31,"code":"    it('trailingSlash: ignore', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/with-subpath-ignore/', import.meta.url),\n        base: '/my-cool-base',\n        trailingSlash: 'ignore'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl);\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: always","suites":["Astro Markdown URL","Without subpath"],"updatePoint":{"line":46,"column":29,"index":1856},"line":46,"code":"    it('trailingSlash: always', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/without-subpath-always/', import.meta.url),\n        trailingSlash: 'always'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl + '/');\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: never","suites":["Astro Markdown URL","Without subpath"],"updatePoint":{"line":57,"column":28,"index":2323},"line":57,"code":"    it('trailingSlash: never', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/without-subpath-never/', import.meta.url),\n        trailingSlash: 'never'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl);\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"trailingSlash: ignore","suites":["Astro Markdown URL","Without subpath"],"updatePoint":{"line":68,"column":29,"index":2783},"line":68,"code":"    it('trailingSlash: ignore', async () => {\n      let fixture = await loadFixture({\n        root: './fixtures/astro-markdown-url/',\n        outDir: new URL('./fixtures/astro-markdown-url/without-subpath-ignore/', import.meta.url),\n        trailingSlash: 'ignore'\n      });\n      await fixture.build();\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#url').attr('href')).to.equal(baseUrl);\n    });","file":"astro-markdown-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can parse JSX expressions in markdown pages","suites":["Astro Markdown"],"updatePoint":{"line":12,"column":49,"index":369},"line":12,"code":"  it('Can parse JSX expressions in markdown pages', async () => {\n    const html = await fixture.readFile('/jsx-expressions/index.html');\n    const $ = cheerio.load(html);\n    expect($('h2').html()).to.equal('Blog Post with JSX expressions');\n    expect(html).to.contain('JSX at the start of the line!');\n\n    for (let listItem of ['test-1', 'test-2', 'test-3']) {\n      expect($(`#${listItem}`).html()).to.equal(`${listItem}`);\n    }\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can handle slugs with JSX expressions in markdown pages","suites":["Astro Markdown"],"updatePoint":{"line":22,"column":61,"index":822},"line":22,"code":"  it('Can handle slugs with JSX expressions in markdown pages', async () => {\n    const html = await fixture.readFile('/slug/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').attr('id')).to.equal('my-blog-post');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can handle code elements without extra spacing","suites":["Astro Markdown"],"updatePoint":{"line":27,"column":52,"index":1049},"line":27,"code":"  it('Can handle code elements without extra spacing', async () => {\n    const html = await fixture.readFile('/code-element/index.html');\n    const $ = cheerio.load(html);\n    $('code').each((_, el) => {\n      expect($(el).html()).to.equal($(el).html().trim());\n    });\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can handle namespaced components in markdown","suites":["Astro Markdown"],"updatePoint":{"line":34,"column":50,"index":1323},"line":34,"code":"  it('Can handle namespaced components in markdown', async () => {\n    const html = await fixture.readFile('/namespace/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('Hello Namespace!');\n    expect($('button').length).to.equal(1);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Correctly handles component children in markdown pages (#3319)","suites":["Astro Markdown"],"updatePoint":{"line":40,"column":68,"index":1615},"line":40,"code":"  it('Correctly handles component children in markdown pages (#3319)', async () => {\n    const html = await fixture.readFile('/children/index.html');\n    expect(html).not.to.contain('<p></p>');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can handle HTML comments in markdown pages","suites":["Astro Markdown"],"updatePoint":{"line":44,"column":48,"index":1795},"line":44,"code":"  it('Can handle HTML comments in markdown pages', async () => {\n    const html = await fixture.readFile('/comment/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('It works!');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Prevents `*/` sequences from breaking HTML comments (#3476)","suites":["Astro Markdown"],"updatePoint":{"line":49,"column":65,"index":2031},"line":49,"code":"  it('Prevents `*/` sequences from breaking HTML comments (#3476)', async () => {\n    const html = await fixture.readFile('/comment-with-js/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('It still works!');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can handle HTML comments in inline code","suites":["Astro Markdown"],"updatePoint":{"line":54,"column":45,"index":2261},"line":54,"code":"  it('Can handle HTML comments in inline code', async () => {\n    const html = await fixture.readFile('/comment-with-js/index.html');\n    const $ = cheerio.load(html);\n    expect($('p code').text()).to.equal('<!-- HTML comments in code -->');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can handle HTML comments in code fences","suites":["Astro Markdown"],"updatePoint":{"line":59,"column":45,"index":2510},"line":59,"code":"  it('Can handle HTML comments in code fences', async () => {\n    const html = await fixture.readFile('/comment-with-js/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre > code').text()).to.equal('<!-- HTML comments in code fence -->');\n  }); // https://github.com/withastro/astro/issues/3254","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can handle scripts in markdown pages","suites":["Astro Markdown"],"updatePoint":{"line":65,"column":42,"index":2817},"line":65,"code":"  it('Can handle scripts in markdown pages', async () => {\n    const html = await fixture.readFile('/script/index.html');\n    expect(html).not.to.match(new RegExp('/src/scripts/test.js'));\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Empty code blocks do not fail","suites":["Astro Markdown"],"updatePoint":{"line":69,"column":35,"index":3005},"line":69,"code":"  it('Empty code blocks do not fail', async () => {\n    const html = await fixture.readFile('/empty-code/index.html');\n    const $ = cheerio.load(html); // test 1: There is not a `<code>` in the codeblock\n\n    expect($('pre')[0].children).to.have.lengthOf(1); // test 2: The empty `<pre>` failed to render\n\n    expect($('pre')[1].children).to.have.lengthOf(0);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with --- for horizontal rule","suites":["Astro Markdown"],"updatePoint":{"line":77,"column":54,"index":3391},"line":77,"code":"  it('Can render markdown with --- for horizontal rule', async () => {\n    const html = await fixture.readFile('/dash/index.html');\n    expect(!!html).to.equal(true);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Exposes raw markdown content","suites":["Astro Markdown"],"updatePoint":{"line":81,"column":34,"index":3544},"line":81,"code":"  it('Exposes raw markdown content', async () => {\n    const {\n      raw\n    } = JSON.parse(await fixture.readFile('/raw-content.json'));\n    expect(fixLineEndings(raw)).to.equal(`\\n## With components\\n\\n### Non-hydrated\\n\\n<Hello name=\"Astro Naut\" />\\n\\n### Hydrated\\n\\n<Counter client:load />\\n<SvelteButton client:load />\\n`);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Exposes HTML parser for raw markdown content","suites":["Astro Markdown"],"updatePoint":{"line":87,"column":50,"index":3896},"line":87,"code":"  it('Exposes HTML parser for raw markdown content', async () => {\n    const {\n      compiled\n    } = JSON.parse(await fixture.readFile('/raw-content.json'));\n    expect(fixLineEndings(compiled)).to.equal(`<h2 id=\"with-components\">With components</h2>\\n<h3 id=\"non-hydrated\">Non-hydrated</h3>\\n<Hello name=\"Astro Naut\" />\\n<h3 id=\"hydrated\">Hydrated</h3>\\n<Counter client:load />\\n<SvelteButton client:load />`);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows referencing Vite env var names in markdown (#3412)","suites":["Astro Markdown"],"updatePoint":{"line":93,"column":63,"index":4328},"line":93,"code":"  it('Allows referencing Vite env var names in markdown (#3412)', async () => {\n    const html = await fixture.readFile('/vite-env-vars/index.html');\n    const $ = cheerio.load(html); // test 1: referencing an existing var name\n\n    expect($('code').eq(0).text()).to.equal('import.meta.env.SITE');\n    expect($('li').eq(0).text()).to.equal('import.meta.env.SITE');\n    expect($('code').eq(3).text()).to.contain('site: import.meta.env.SITE');\n    expect($('blockquote').text()).to.contain('import.meta.env.SITE'); // test 2: referencing a non-existing var name\n\n    expect($('code').eq(1).text()).to.equal('import.meta.env.TITLE');\n    expect($('li').eq(1).text()).to.equal('import.meta.env.TITLE');\n    expect($('code').eq(3).text()).to.contain('title: import.meta.env.TITLE');\n    expect($('blockquote').text()).to.contain('import.meta.env.TITLE'); // test 3: referencing `import.meta.env` itself (without any var name)\n\n    expect($('code').eq(2).text()).to.equal('import.meta.env');\n    expect($('li').eq(2).text()).to.equal('import.meta.env');\n    expect($('code').eq(3).text()).to.contain('// Use Vite env vars with import.meta.env');\n    expect($('blockquote').text()).to.match(/import\\.meta\\.env\\s*$/);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Escapes HTML tags in code blocks","suites":["Astro Markdown"],"updatePoint":{"line":112,"column":38,"index":5519},"line":112,"code":"  it('Escapes HTML tags in code blocks', async () => {\n    const html = await fixture.readFile('/code-in-md/index.html');\n    const $ = cheerio.load(html);\n    expect($('code').eq(0).html()).to.equal('&lt;script&gt;');\n    expect($('blockquote').length).to.equal(1);\n    expect($('code').eq(1).html()).to.equal('&lt;/script&gt;');\n    expect($('pre').html()).to.contain('&gt;This should also work without any problems.&lt;');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows defining slot contents in component children","suites":["Astro Markdown"],"updatePoint":{"line":120,"column":57,"index":5970},"line":120,"code":"  it('Allows defining slot contents in component children', async () => {\n    const html = await fixture.readFile('/slots/index.html');\n    const $ = cheerio.load(html);\n    const slots = $('article').eq(0);\n    expect(slots.find('> .fragmentSlot > div').text()).to.contain('1:');\n    expect(slots.find('> .fragmentSlot > div + p').text()).to.contain('2:');\n    expect(slots.find('> .pSlot > p[title=\"hello\"]').text()).to.contain('3:');\n    expect(slots.find('> .defaultSlot').html()).to.match(new RegExp(`<div>4: Div in default slot</div>` + // Optional extra paragraph due to the line breaks between components\n    `(<p></p>)?` + `<p>5: Paragraph in fragment in default slot</p>` + // Optional whitespace due to the line breaks between components\n    `[\\s\\n]*` + `6: Regular text in default slot`));\n    const nestedSlots = $('article').eq(1);\n    expect(nestedSlots.find('> .fragmentSlot').html()).to.contain('1:');\n    expect(nestedSlots.find('> .pSlot > p').text()).to.contain('2:');\n    expect(nestedSlots.find('> .defaultSlot > article').text().replace(/\\s+/g, ' ')).to.equal(`\n\t\t\t3: nested fragmentSlot\n\t\t\t4: nested pSlot\n\t\t\t5: nested text in default slot\n\t\t`.replace(/\\s+/g, ' '));\n    expect($('article').eq(3).text().replace(/[^❌]/g, '')).to.equal('❌❌❌');\n    expect($('article').eq(4).text().replace(/[^❌]/g, '')).to.equal('❌❌❌');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Generate the right props for the layout","suites":["Astro Markdown"],"updatePoint":{"line":141,"column":45,"index":7307},"line":141,"code":"  it('Generate the right props for the layout', async () => {\n    const html = await fixture.readFile('/layout-props/index.html');\n    const $ = cheerio.load(html);\n    expect($('#title').text()).to.equal('Hello world!');\n    expect($('#url').text()).to.equal('/layout-props');\n    expect($('#file').text()).to.match(/.*\\/layout-props.md$/);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"outputs","suites":["build format"],"updatePoint":{"line":14,"column":13,"index":335},"line":14,"code":"  it('outputs', async () => {\n    expect(await fixture.readFile('/client.html')).to.be.ok;\n    expect(await fixture.readFile('/nested-md.html')).to.be.ok;\n    expect(await fixture.readFile('/nested-astro.html')).to.be.ok;\n  });","file":"astro-pageDirectoryUrl.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can find page with \"index\" at the end file name","suites":["Pages","Build"],"updatePoint":{"line":16,"column":55,"index":448},"line":16,"code":"    it('Can find page with \"index\" at the end file name', async () => {\n      const html = await fixture.readFile('/posts/name-with-index/index.html');\n      const $ = cheerio.load(html);\n      expect($('h1').text()).to.equal('Name with index');\n    });","file":"astro-pages.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is able to load md pages","suites":["Pages","Development"],"updatePoint":{"line":31,"column":32,"index":908},"line":31,"code":"    it('Is able to load md pages', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n      expect($('#testing').length).to.be.greaterThan(0);\n    });","file":"astro-pages.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"optional root page","suites":["Pagination"],"updatePoint":{"line":14,"column":24,"index":382},"line":14,"code":"  it('optional root page', async () => {\n    for (const file of ['/posts/optional-root-page/index.html', '/posts/optional-root-page/2/index.html', '/posts/optional-root-page/3/index.html']) {\n      expect(await fixture.readFile(file)).to.be.ok;\n    }\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"named root page","suites":["Pagination"],"updatePoint":{"line":19,"column":21,"index":636},"line":19,"code":"  it('named root page', async () => {\n    for (const file of ['/posts/named-root-page/1/index.html', '/posts/named-root-page/2/index.html', '/posts/named-root-page/3/index.html']) {\n      expect(await fixture.readFile(file)).to.be.ok;\n    }\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"multiple params","suites":["Pagination"],"updatePoint":{"line":24,"column":21,"index":883},"line":24,"code":"  it('multiple params', async () => {\n    const params = [{\n      color: 'red',\n      p: '1'\n    }, {\n      color: 'blue',\n      p: '1'\n    }, {\n      color: 'blue',\n      p: '2'\n    }];\n    await Promise.all(params.map(async ({\n      color,\n      p\n    }) => {\n      const html = await fixture.readFile(`/posts/${color}/${p}/index.html`);\n      const $ = cheerio.load(html);\n      expect($('#page-a').text()).to.equal(p);\n      expect($('#page-b').text()).to.equal(p);\n      expect($('#filter').text()).to.equal(color);\n    }));\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"injects Astro styles and scripts","suites":["Partial HTML"],"updatePoint":{"line":16,"column":38,"index":444},"line":16,"code":"  it('injects Astro styles and scripts', async () => {\n    const html = await fixture.fetch('/astro').then(res => res.text());\n    const $ = cheerio.load(html); // test 1: Doctype first\n\n    expect(html).to.match(/^<!DOCTYPE html/); // test 2: correct CSS present\n\n    const allInjectedStyles = $('style[data-astro-injected]').text();\n    expect(allInjectedStyles).to.match(/\\.astro-[^{]+{color:red}/);\n  });","file":"astro-partial-html.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"injects framework styles","suites":["Partial HTML"],"updatePoint":{"line":25,"column":30,"index":845},"line":25,"code":"  it('injects framework styles', async () => {\n    const html = await fixture.fetch('/jsx').then(res => res.text());\n    const $ = cheerio.load(html); // test 1: Doctype first\n\n    expect(html).to.match(/^<!DOCTYPE html/); // test 2: link tag present\n\n    const allInjectedStyles = $('style[data-astro-injected]').text().replace(/\\s*/g, '');\n    expect(allInjectedStyles).to.match(/h1{color:red;}/);\n  });","file":"astro-partial-html.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"pages with a head, injection happens inside","suites":["Partial HTML"],"updatePoint":{"line":34,"column":49,"index":1270},"line":34,"code":"  it('pages with a head, injection happens inside', async () => {\n    const html = await fixture.fetch('/with-head').then(res => res.text());\n    const $ = cheerio.load(html);\n    expect($('style')).to.have.lengthOf(1);\n  });","file":"astro-partial-html.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"css and js files do not get bundled","suites":["Public"],"updatePoint":{"line":11,"column":41,"index":299},"line":11,"code":"  it('css and js files do not get bundled', async () => {\n    let indexHtml = await fixture.readFile('/index.html');\n    expect(indexHtml).to.include('<script src=\"/example.js\"></script>');\n    expect(indexHtml).to.include('<link href=\"/example.css\" rel=\"stylesheet\">');\n    expect(indexHtml).to.include('<img src=\"/images/twitter.png\">');\n  });","file":"astro-public.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works from a page","suites":["Returning responses"],"updatePoint":{"line":19,"column":23,"index":507},"line":19,"code":"  it('Works from a page', async () => {\n    let response = await fixture.fetch('/not-found');\n    expect(response.status).to.equal(404);\n  });","file":"astro-response.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Moves external scripts up","suites":["Scripts (hoisted and not)","Build"],"updatePoint":{"line":20,"column":33,"index":491},"line":20,"code":"    it('Moves external scripts up', async () => {\n      const html = await fixture.readFile('/external/index.html');\n      const $ = cheerio.load(html);\n      expect($('head script[type=\"module\"]:not([src=\"/regular_script.js\"])')).to.have.lengthOf(1);\n      expect($('body script')).to.have.lengthOf(0);\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Moves inline scripts up","suites":["Scripts (hoisted and not)","Build"],"updatePoint":{"line":26,"column":31,"index":801},"line":26,"code":"    it('Moves inline scripts up', async () => {\n      const html = await fixture.readFile('/inline/index.html');\n      const $ = cheerio.load(html);\n      expect($('head script[type=\"module\"]')).to.have.lengthOf(1);\n      expect($('body script')).to.have.lengthOf(0);\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Inline page builds the scripts to a single bundle","suites":["Scripts (hoisted and not)","Build"],"updatePoint":{"line":32,"column":57,"index":1103},"line":32,"code":"    it('Inline page builds the scripts to a single bundle', async () => {\n      // Inline page\n      let inline = await fixture.readFile('/inline/index.html');\n      let $ = cheerio.load(inline);\n      let $el = $('script'); // test 1: Just one entry module\n\n      expect($el).to.have.lengthOf(1); // test 2: attr removed\n\n      expect($el.attr('data-astro')).to.equal(undefined);\n      expect($el.attr('src')).to.equal(undefined);\n      const inlineEntryJS = $el.text(); // test 3: the JS exists\n\n      expect(inlineEntryJS).to.be.ok; // test 4: Inline imported JS is included\n\n      expect(inlineEntryJS).to.contain('I AM IMPORTED INLINE', 'The inline imported JS is included in the bundle');\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Inline scripts that are shared by multiple pages create chunks, and aren't inlined into the HTML","suites":["Scripts (hoisted and not)","Build"],"updatePoint":{"line":48,"column":104,"index":1853},"line":48,"code":"    it(\"Inline scripts that are shared by multiple pages create chunks, and aren't inlined into the HTML\", async () => {\n      let html = await fixture.readFile('/inline-shared-one/index.html');\n      let $ = cheerio.load(html);\n      expect($('script')).to.have.lengthOf(1);\n      expect($('script').attr('src')).to.not.equal(undefined);\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page builds the hoisted scripts to a single bundle","suites":["Scripts (hoisted and not)","Build"],"updatePoint":{"line":54,"column":67,"index":2163},"line":54,"code":"    it('External page builds the hoisted scripts to a single bundle', async () => {\n      let external = await fixture.readFile('/external/index.html');\n      let $ = cheerio.load(external); // test 1: there are two scripts\n\n      expect($('script')).to.have.lengthOf(2);\n      let el = $('script').get(1);\n      expect($(el).attr('src')).to.equal(undefined, 'This should have been inlined');\n      let externalEntryJS = $(el).text(); // test 2: the JS exists\n\n      expect(externalEntryJS).to.be.ok;\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page using non-hoist scripts that are modules are built standalone","suites":["Scripts (hoisted and not)","Build"],"updatePoint":{"line":65,"column":83,"index":2688},"line":65,"code":"    it('External page using non-hoist scripts that are modules are built standalone', async () => {\n      let external = await fixture.readFile('/external-no-hoist/index.html');\n      let $ = cheerio.load(external); // test 1: there is 1 scripts\n\n      expect($('script')).to.have.lengthOf(1); // test 2: inside assets\n\n      let entryURL = $('script').attr('src');\n      expect(entryURL.includes('assets/')).to.equal(true);\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page using non-hoist scripts that are not modules are built standalone","suites":["Scripts (hoisted and not)","Build"],"updatePoint":{"line":74,"column":87,"index":3125},"line":74,"code":"    it('External page using non-hoist scripts that are not modules are built standalone', async () => {\n      let external = await fixture.readFile('/external-no-hoist-classic/index.html');\n      let $ = cheerio.load(external); // test 1: there is 1 scripts\n\n      expect($('script')).to.have.lengthOf(1); // test 2: inside assets\n\n      let entryURL = $('script').attr('src');\n      expect(entryURL.includes('assets/')).to.equal(true);\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Scripts added via Astro.glob are hoisted","suites":["Scripts (hoisted and not)","Build"],"updatePoint":{"line":83,"column":48,"index":3531},"line":83,"code":"    it('Scripts added via Astro.glob are hoisted', async () => {\n      let glob = await fixture.readFile('/glob/index.html');\n      let $ = cheerio.load(glob);\n      expect($('script[type=\"module\"]').length).to.be.greaterThan(0);\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Scripts added via Astro.glob are hoisted","suites":["Scripts (hoisted and not)","Dev"],"updatePoint":{"line":98,"column":48,"index":4017},"line":98,"code":"    it('Scripts added via Astro.glob are hoisted', async () => {\n      let res = await fixture.fetch('/glob');\n      let html = await res.text();\n      let $ = cheerio.load(html);\n      let found = 0;\n      let moduleScripts = $('[type=module]');\n      moduleScripts.each((i, el) => {\n        if ($(el).attr('src').includes('Glob/GlobComponent.astro?astro&type=script&index=0&lang.ts')) {\n          found++;\n        }\n      });\n      expect(found).to.equal(1);\n    });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Basic named slots work","suites":["Slots"],"updatePoint":{"line":12,"column":28,"index":320},"line":12,"code":"  it('Basic named slots work', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('A');\n    expect($('#b').text().trim()).to.equal('B');\n    expect($('#c').text().trim()).to.equal('C');\n    expect($('#default').text().trim()).to.equal('Default');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Dynamic named slots work","suites":["Slots"],"updatePoint":{"line":20,"column":30,"index":671},"line":20,"code":"  it('Dynamic named slots work', async () => {\n    const html = await fixture.readFile('/dynamic/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('A');\n    expect($('#b').text().trim()).to.equal('B');\n    expect($('#c').text().trim()).to.equal('C');\n    expect($('#default').text().trim()).to.equal('Default');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Conditional named slots work","suites":["Slots"],"updatePoint":{"line":28,"column":34,"index":1034},"line":28,"code":"  it('Conditional named slots work', async () => {\n    const html = await fixture.readFile('/conditional/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('A');\n    expect($('#b').text().trim()).to.equal('B');\n    expect($('#c').text().trim()).to.equal('C');\n    expect($('#default').text().trim()).to.equal('Default');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots render fallback content by default","suites":["Slots"],"updatePoint":{"line":36,"column":46,"index":1413},"line":36,"code":"  it('Slots render fallback content by default', async () => {\n    const html = await fixture.readFile('/fallback/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots override fallback content","suites":["Slots"],"updatePoint":{"line":41,"column":37,"index":1619},"line":41,"code":"  it('Slots override fallback content', async () => {\n    const html = await fixture.readFile('/fallback-override/index.html');\n    const $ = cheerio.load(html);\n    expect($('#override')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots work with multiple elements","suites":["Slots"],"updatePoint":{"line":46,"column":39,"index":1837},"line":46,"code":"  it('Slots work with multiple elements', async () => {\n    const html = await fixture.readFile('/multiple/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('ABC');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots work on Components","suites":["Slots"],"updatePoint":{"line":51,"column":30,"index":2040},"line":51,"code":"  it('Slots work on Components', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html); // test 1: #a renders\n\n    expect($('#a')).to.have.lengthOf(1); // test 2: Slotted component into #a\n\n    expect($('#a').children('astro-component')).to.have.lengthOf(1); // test 3: Slotted component into default slot\n\n    expect($('#default').children('astro-component')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots API work on Components","suites":["Slots"],"updatePoint":{"line":61,"column":34,"index":2491},"line":61,"code":"  it('Slots API work on Components', async () => {\n    // IDs will exist whether the slots are filled or not\n    {\n      const html = await fixture.readFile('/slottedapi-default/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(1);\n      expect($('#b')).to.have.lengthOf(1);\n      expect($('#c')).to.have.lengthOf(1);\n      expect($('#default')).to.have.lengthOf(1);\n    } // IDs will not exist because the slots are not filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-empty/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(0);\n      expect($('#b')).to.have.lengthOf(0);\n      expect($('#c')).to.have.lengthOf(0);\n      expect($('#default')).to.have.lengthOf(0);\n    } // IDs will exist because the slots are filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-filled/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(1);\n      expect($('#b')).to.have.lengthOf(1);\n      expect($('#c')).to.have.lengthOf(1);\n      expect($('#default')).to.have.lengthOf(0); // the default slot is not filled\n    } // Default ID will exist because the default slot is filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-default-filled/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(0);\n      expect($('#b')).to.have.lengthOf(0);\n      expect($('#c')).to.have.lengthOf(0);\n      expect($('#default')).to.have.lengthOf(1); // the default slot is filled\n    }\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots.render() API","suites":["Slots"],"updatePoint":{"line":99,"column":24,"index":4041},"line":99,"code":"  it('Slots.render() API', async () => {\n    // Simple imperative slot render\n    {\n      const html = await fixture.readFile('/slottedapi-render/index.html');\n      const $ = cheerio.load(html);\n      expect($('#render')).to.have.lengthOf(1);\n      expect($('#render').text()).to.equal('render');\n    } // Child function render without args\n\n    {\n      const html = await fixture.readFile('/slottedapi-render/index.html');\n      const $ = cheerio.load(html);\n      expect($('#render-fn')).to.have.lengthOf(1);\n      expect($('#render-fn').text()).to.equal('render-fn');\n    } // Child function render with args\n\n    {\n      const html = await fixture.readFile('/slottedapi-render/index.html');\n      const $ = cheerio.load(html);\n      expect($('#render-args')).to.have.lengthOf(1);\n      expect($('#render-args').text()).to.equal('render-args');\n    }\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro","suites":["astro cli"],"updatePoint":{"line":12,"column":11,"index":484},"line":12,"code":"  it('astro', async () => {\n    const proc = await cli();\n    expect(proc.stdout).to.include('Futuristic web development tool');\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro --version","suites":["astro cli"],"updatePoint":{"line":16,"column":21,"index":629},"line":16,"code":"  it('astro --version', async () => {\n    const pkgURL = new URL('../package.json', import.meta.url);\n    const pkgVersion = await fs.readFile(pkgURL, 'utf8').then(data => JSON.parse(data).version);\n    const proc = await cli('--version');\n    expect(proc.stdout).to.include(pkgVersion);\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro build","suites":["astro cli"],"updatePoint":{"line":22,"column":17,"index":919},"line":22,"code":"  it('astro build', async () => {\n    const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n    const proc = await cli('build', '--root', fileURLToPath(projectRootURL));\n    expect(proc.stdout).to.include('Complete');\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro check no errors","suites":["astro cli"],"updatePoint":{"line":27,"column":27,"index":1175},"line":27,"code":"  it('astro check no errors', async () => {\n    let proc = undefined;\n    const projectRootURL = new URL('./fixtures/astro-check-no-errors/', import.meta.url);\n\n    try {\n      proc = await cli('check', '--root', fileURLToPath(projectRootURL));\n    } catch (err) {}\n\n    expect(proc?.stdout).to.include('0 errors');\n  }).timeout(35000);","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro check has errors","suites":["astro cli"],"updatePoint":{"line":37,"column":28,"index":1513},"line":37,"code":"  it('astro check has errors', async () => {\n    let stdout = undefined;\n    const projectRootURL = new URL('./fixtures/astro-check-errors/', import.meta.url); // When `astro check` finds errors, it returns an error code. As such, we need to wrap this\n    // in a try/catch because otherwise Mocha will always report this test as a fail\n\n    try {\n      await cli('check', '--root', fileURLToPath(projectRootURL));\n    } catch (err) {\n      stdout = err.toString();\n    }\n\n    expect(stdout).to.include('1 error');\n  }).timeout(35000);","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro dev welcome","suites":["astro cli"],"updatePoint":{"line":50,"column":23,"index":2044},"line":50,"code":"  it('astro dev welcome', async () => {\n    const pkgURL = new URL('../package.json', import.meta.url);\n    const pkgVersion = await fs.readFile(pkgURL, 'utf8').then(data => JSON.parse(data).version);\n    const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n    const proc = cli('dev', '--root', fileURLToPath(projectRootURL));\n    const {\n      messages\n    } = await parseCliDevStart(proc);\n    expect(messages[0]).to.contain('astro');\n    expect(messages[0]).to.contain(pkgVersion);\n    expect(messages[0]).to.contain('started in');\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro    - network log","suites":["astro cli"],"updatePoint":{"line":65,"column":63,"index":2805},"line":65,"code":"      it(`astro ${cmd} ${flag} ${flagValue ?? ''} - network log`, async () => {\n        const {\n          local,\n          network\n        } = await cliServerLogSetupWithFixture(flagValue ? [flag, flagValue] : [flag], cmd);\n        expect(local).to.not.be.undefined;\n        expect(network).to.not.be.undefined;\n        const localURL = new URL(local);\n        const networkURL = new URL(network);\n        expect(localURL.hostname).to.be.equal(flagValue ?? 'localhost', `Expected local URL to be on localhost`); // Note: our tests run in parallel so this could be 3000+!\n\n        expect(Number.parseInt(localURL.port)).to.be.greaterThanOrEqual(3000, `Expected Port to be >= 3000`);\n        expect(networkURL.port).to.be.equal(localURL.port, `Expected local and network ports to be equal`);\n        expect(isIPv4(networkURL.hostname)).to.be.equal(true, `Expected network URL to respect --host flag`);\n      });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro    - host to expose","suites":["astro cli"],"updatePoint":{"line":83,"column":60,"index":3817},"line":83,"code":"      it(`astro ${cmd} ${flag} ${flagValue} - host to expose`, async () => {\n        const {\n          local,\n          network\n        } = await cliServerLogSetupWithFixture([flag, flagValue], cmd);\n        expect(local).to.not.be.undefined;\n        expect(network).to.not.be.undefined;\n        const localURL = new URL(local);\n        expect(localURL.hostname).to.be.equal('localhost', `Expected local URL to be on localhost`);\n        expect(() => new URL(networkURL)).to.throw();\n      });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro    - no network log","suites":["astro cli"],"updatePoint":{"line":97,"column":60,"index":4456},"line":97,"code":"      it(`astro ${cmd} ${flag} ${flagValue} - no network log`, async () => {\n        const {\n          local,\n          network\n        } = await cliServerLogSetupWithFixture([flag, flagValue], cmd);\n        expect(local).to.not.be.undefined;\n        expect(network).to.be.undefined;\n        const localURL = new URL(local);\n        expect(localURL.hostname).to.be.equal(flagValue, `Expected local URL to be on localhost`);\n      });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro does NOT throw on \"\" locales","suites":["astro cli i18n"],"updatePoint":{"line":113,"column":51,"index":5037},"line":113,"code":"    it(`astro does NOT throw on \"${locale}\" locales`, async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      let error = null;\n\n      try {\n        const proc = cli('dev', '--root', fileURLToPath(projectRootURL), {\n          env: {\n            LANG: locale\n          }\n        });\n        await parseCliDevStart(proc);\n      } catch (e) {\n        console.log(e);\n        error = e.message;\n      }\n\n      expect(error).to.be.null;\n    });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can get the address","suites":["Astro.clientAddress","SSR","Production"],"updatePoint":{"line":23,"column":29,"index":700},"line":23,"code":"      it('Can get the address', async () => {\n        const app = await fixture.loadTestAdapterApp();\n        const request = new Request('http://example.com/');\n        const response = await app.render(request);\n        const html = await response.text();\n        const $ = cheerio.load(html);\n        expect($('#address').text()).to.equal('0.0.0.0');\n      });","file":"client-address.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Gets the address","suites":["Astro.clientAddress","SSR","Development"],"updatePoint":{"line":41,"column":26,"index":1337},"line":41,"code":"      it('Gets the address', async () => {\n        let res = await fixture.fetch('/');\n        expect(res.status).to.equal(200);\n        let html = await res.text();\n        let $ = cheerio.load(html);\n        let address = $('#address'); // Just checking that something is here. Not specifying address as it\n        // might differ per machine.\n\n        expect(address.length).to.be.greaterThan(0);\n      });","file":"client-address.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Gets an error message","suites":["Astro.clientAddress","SSR adapter not implemented"],"updatePoint":{"line":68,"column":29,"index":2162},"line":68,"code":"    it('Gets an error message', async () => {\n      const app = await fixture.loadTestAdapterApp();\n      const request = new Request('http://example.com/');\n      const response = await app.render(request);\n      expect(response.status).to.equal(500);\n    });","file":"client-address.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"throws during generation","suites":["Astro.clientAddress","SSG","Build"],"updatePoint":{"line":84,"column":34,"index":2679},"line":84,"code":"      it('throws during generation', async () => {\n        try {\n          await fixture.build();\n          expect(false).to.equal(true, 'Build should not have completed');\n        } catch (err) {\n          expect(err.message).to.match(/Astro\\.clientAddress/, 'Error message mentions Astro.clientAddress');\n        }\n      });","file":"client-address.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is not accessible","suites":["Astro.clientAddress","SSG","Development"],"updatePoint":{"line":109,"column":27,"index":3456},"line":109,"code":"      it('is not accessible', async () => {\n        let res = await fixture.fetch('/');\n        expect(res.status).to.equal(500);\n      });","file":"client-address.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Debug component styles are not included in the page","suites":["Code component"],"updatePoint":{"line":13,"column":57,"index":409},"line":13,"code":"  it('Debug component styles are not included in the page', async () => {\n    let html = await fixture.readFile('/index.html');\n    let $ = cheerio.load(html);\n    expect($('link[rel=stylesheet]')).to.have.a.lengthOf(0, 'No styles should be built');\n    expect($('style')).to.have.a.lengthOf(0);\n  });","file":"code-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is:raw attribute not serialized","suites":["Code component"],"updatePoint":{"line":19,"column":37,"index":691},"line":19,"code":"  it('is:raw attribute not serialized', async () => {\n    let html = await fixture.readFile('/index.html');\n    let $ = cheerio.load(html);\n    expect($('pre').attr('is:raw')).to.equal(undefined);\n  });","file":"code-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Built .astro pages","suites":["Component Libraries","build"],"updatePoint":{"line":41,"column":26,"index":1077},"line":41,"code":"    it('Built .astro pages', async () => {\n      let html = await fixture.readFile('/with-astro/index.html');\n      expect(html).to.be.a('string');\n      html = await fixture.readFile('/with-react/index.html');\n      expect(html).to.be.a('string');\n      html = await fixture.readFile('/internal-hydration/index.html');\n      expect(html).to.be.a('string');\n    });","file":"component-library.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with .astro components","suites":["Component Libraries","build"],"updatePoint":{"line":49,"column":36,"index":1453},"line":49,"code":"    it('Works with .astro components', async () => {\n      const html = await fixture.readFile('/with-astro/index.html');\n      const $ = cheerioLoad(html);\n      expect($('button').text()).to.equal('Click me', \"Rendered the component's slot\");\n      const findEvidence = createFindEvidence(/border-radius:( )*1rem/);\n      expect(await findEvidence('with-astro/index.html')).to.equal(true, \"Included the .astro component's <style>\");\n    });","file":"component-library.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with react components","suites":["Component Libraries","build"],"updatePoint":{"line":56,"column":35,"index":1895},"line":56,"code":"    it('Works with react components', async () => {\n      const html = await fixture.readFile('/with-react/index.html');\n      const $ = cheerioLoad(html);\n      expect($('#react-static').text()).to.equal('Hello static!', 'Rendered the static component');\n      expect($('#react-idle').text()).to.equal('Hello idle!', 'Rendered the client hydrated component');\n      expect($('astro-island[uid]')).to.have.lengthOf(1, 'Included one hydration island');\n    });","file":"component-library.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with components hydrated internally","suites":["Component Libraries","build"],"updatePoint":{"line":63,"column":49,"index":2369},"line":63,"code":"    it('Works with components hydrated internally', async () => {\n      const html = await fixture.readFile('/internal-hydration/index.html');\n      const $ = cheerioLoad(html);\n      expect($('.counter').length).to.equal(1, 'Rendered the svelte counter');\n      expect($('.counter-message').text().trim()).to.equal('Hello, Svelte!', \"rendered the counter's slot\");\n      expect($('astro-island[uid]')).to.have.lengthOf(1, 'Included one hydration island');\n    });","file":"component-library.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with .astro components","suites":["Component Libraries","dev"],"updatePoint":{"line":107,"column":36,"index":3868},"line":107,"code":"    it('Works with .astro components', async () => {\n      const html = await fixture.fetch('/with-astro/').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('button').text()).to.equal('Click me', \"Rendered the component's slot\");\n      const findEvidence = createFindEvidence(/border-radius:( )*1rem/);\n      expect(await findEvidence('/with-astro/')).to.equal(true, \"Included the .astro component's <style>\");\n    });","file":"component-library.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with react components","suites":["Component Libraries","dev"],"updatePoint":{"line":114,"column":35,"index":4312},"line":114,"code":"    it('Works with react components', async () => {\n      const html = await fixture.fetch('/with-react/').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('#react-static').text()).to.equal('Hello static!', 'Rendered the static component');\n      expect($('#react-idle').text()).to.equal('Hello idle!', 'Rendered the client hydrated component');\n      expect($('astro-island[uid]')).to.have.lengthOf(1, 'Included one hydration island');\n    });","file":"component-library.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with components hydrated internally","suites":["Component Libraries","dev"],"updatePoint":{"line":121,"column":49,"index":4797},"line":121,"code":"    it('Works with components hydrated internally', async () => {\n      const html = await fixture.fetch('/internal-hydration/').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('.counter').length).to.equal(1, 'Rendered the svelte counter');\n      expect($('.counter-message').text().trim()).to.equal('Hello, Svelte!', \"rendered the counter's slot\");\n      expect($('astro-island[uid]')).to.have.lengthOf(1, 'Included one hydration island');\n    });","file":"component-library.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"empty user config is valid","suites":["Config Validation"],"updatePoint":{"line":7,"column":32,"index":289},"line":7,"code":"  it('empty user config is valid', async () => {\n    expect(() => validateConfig({}, process.cwd()).catch(err => err)).not.to.throw();\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Zod errors are returned when invalid config is used","suites":["Config Validation"],"updatePoint":{"line":10,"column":57,"index":455},"line":10,"code":"  it('Zod errors are returned when invalid config is used', async () => {\n    const configError = await validateConfig({\n      site: 42\n    }, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"A validation error can be formatted correctly","suites":["Config Validation"],"updatePoint":{"line":16,"column":51,"index":694},"line":16,"code":"  it('A validation error can be formatted correctly', async () => {\n    const configError = await validateConfig({\n      site: 42\n    }, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n    const formattedError = stripAnsi(formatConfigErrorMessage(configError));\n    expect(formattedError).to.equal(`[config] Astro found issue(s) with your configuration:\n  ! site  Expected string, received number.`);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Multiple validation errors can be formatted correctly","suites":["Config Validation"],"updatePoint":{"line":25,"column":59,"index":1157},"line":25,"code":"  it('Multiple validation errors can be formatted correctly', async () => {\n    const veryBadConfig = {\n      integrations: [42],\n      build: {\n        format: 'invalid'\n      }\n    };\n    const configError = await validateConfig(veryBadConfig, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n    const formattedError = stripAnsi(formatConfigErrorMessage(configError));\n    expect(formattedError).to.equal(`[config] Astro found issue(s) with your configuration:\n  ! integrations.0  Expected object, received number.\n  ! build.format  Invalid input.`);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores falsey \"integration\" values","suites":["Config Validation"],"updatePoint":{"line":39,"column":41,"index":1746},"line":39,"code":"  it('ignores falsey \"integration\" values', async () => {\n    const result = await validateConfig({\n      integrations: [0, false, null, undefined]\n    }, process.cwd());\n    expect(result.integrations).to.deep.equal([]);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"normalizes \"integration\" values","suites":["Config Validation"],"updatePoint":{"line":45,"column":37,"index":1970},"line":45,"code":"  it('normalizes \"integration\" values', async () => {\n    const result = await validateConfig({\n      integrations: [{\n        name: '@astrojs/a'\n      }]\n    }, process.cwd());\n    expect(result.integrations).to.deep.equal([{\n      name: '@astrojs/a',\n      hooks: {}\n    }]);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"flattens array \"integration\" values","suites":["Config Validation"],"updatePoint":{"line":56,"column":41,"index":2258},"line":56,"code":"  it('flattens array \"integration\" values', async () => {\n    const result = await validateConfig({\n      integrations: [{\n        name: '@astrojs/a'\n      }, [{\n        name: '@astrojs/b'\n      }, {\n        name: '@astrojs/c'\n      }]]\n    }, process.cwd());\n    expect(result.integrations).to.deep.equal([{\n      name: '@astrojs/a',\n      hooks: {}\n    }, {\n      name: '@astrojs/b',\n      hooks: {}\n    }, {\n      name: '@astrojs/c',\n      hooks: {}\n    }]);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores null or falsy \"integration\" values","suites":["Config Validation"],"updatePoint":{"line":77,"column":48,"index":2733},"line":77,"code":"  it('ignores null or falsy \"integration\" values', async () => {\n    const configError = await validateConfig({\n      integrations: [null, undefined, false, '', ``]\n    }, process.cwd()).catch(err => err);\n    expect(configError).to.be.not.instanceOf(Error);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows overriding bundle naming options in the build","suites":["Vite Config"],"updatePoint":{"line":12,"column":58,"index":362},"line":12,"code":"  it('Allows overriding bundle naming options in the build', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('link').attr('href')).to.match(/\\/assets\\/testing-[a-z0-9]+\\.css/);\n  });","file":"config-vite.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified in astro.config.mjs","suites":["config","host"],"updatePoint":{"line":22,"column":44,"index":592},"line":22,"code":"    it('can be specified in astro.config.mjs', async () => {\n      expect(hostFixture.config.server.host).to.equal(true);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified via --host flag","suites":["config","host"],"updatePoint":{"line":25,"column":40,"index":718},"line":25,"code":"    it('can be specified via --host flag', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const {\n        network\n      } = await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--host']);\n      const networkURL = new URL(network);\n      expect(isIPv4(networkURL.hostname)).to.be.equal(true, `Expected network URL to respect --host flag`);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be passed via --config","suites":["config","path"],"updatePoint":{"line":35,"column":34,"index":1161},"line":35,"code":"    it('can be passed via --config', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = new URL('./fixtures/config-path/config/my-config.mjs', import.meta.url);\n      const {\n        network\n      } = await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--config', configFileURL.pathname]);\n      const networkURL = new URL(network);\n      expect(isIPv4(networkURL.hostname)).to.be.equal(true, `Expected network URL to respect --host flag`);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be passed via relative --config","suites":["config","relative path"],"updatePoint":{"line":46,"column":43,"index":1749},"line":46,"code":"    it('can be passed via relative --config', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = 'my-config.mjs';\n      const {\n        local\n      } = await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--config', configFileURL]);\n      const localURL = new URL(local);\n      expect(localURL.port).to.equal('8080');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be passed via relative --config","suites":["config","relative path with leading ./"],"updatePoint":{"line":57,"column":43,"index":2220},"line":57,"code":"    it('can be passed via relative --config', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = './my-config.mjs';\n      const {\n        local\n      } = await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--config', configFileURL]);\n      const localURL = new URL(local);\n      expect(localURL.port).to.equal('8080');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"fails and exits when config does not exist","suites":["config","incorrect path"],"updatePoint":{"line":68,"column":50,"index":2685},"line":68,"code":"    it('fails and exits when config does not exist', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = './does-not-exist.mjs';\n      let exit = 0;\n\n      try {\n        await cliServerLogSetup(['--root', fileURLToPath(projectRootURL), '--config', configFileURL]);\n      } catch (e) {\n        if (e.message.includes('Unable to resolve --config')) {\n          exit = 1;\n        }\n      }\n\n      expect(exit).to.equal(1, 'Throws helpful error message when --config does not exist');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified in astro.config.mjs","suites":["config","port"],"updatePoint":{"line":85,"column":44,"index":3273},"line":85,"code":"    it('can be specified in astro.config.mjs', async () => {\n      expect(portFixture.config.server.port).to.deep.equal(5006);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Bundled CSS does not have __VITE_ASSET__","suites":["Assets in CSS"],"updatePoint":{"line":36,"column":46,"index":808},"line":36,"code":"  it('Bundled CSS does not have __VITE_ASSET__', async () => {\n    let css = await getCSSForPage('/one/index.html');\n    expect(css).to.not.contain('__VITE_ASSET__');\n    css = await getCSSForPage('/two/index.html');\n    expect(css).to.not.contain('__VITE_ASSET__');\n  });","file":"css-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Pages contain only their own CSS","suites":["Assets in CSS"],"updatePoint":{"line":42,"column":38,"index":1073},"line":42,"code":"  it('Pages contain only their own CSS', async () => {\n    let css = await getCSSForPage('/one/index.html');\n    expect(getAllMatches(/font-face/g, css)).to.equal(1);\n    css = await getCSSForPage('/two/index.html');\n    expect(getAllMatches(/font-face/g, css)).to.equal(1);\n  });","file":"css-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"renders /","suites":["Custom 404 Markdown","dev"],"updatePoint":{"line":20,"column":17,"index":499},"line":20,"code":"    it('renders /', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      $ = cheerio.load(html);\n      expect($('h1').text()).to.equal('Home');\n    });","file":"custom-404-md.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"renders 404 for /abc","suites":["Custom 404 Markdown","dev"],"updatePoint":{"line":25,"column":28,"index":698},"line":25,"code":"    it('renders 404 for /abc', async () => {\n      const html = await fixture.fetch('/a').then(res => res.text());\n      $ = cheerio.load(html);\n      expect($('h1').text()).to.equal('Page not found');\n    });","file":"custom-404-md.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"renders /","suites":["Custom 404","dev"],"updatePoint":{"line":21,"column":17,"index":521},"line":21,"code":"    it('renders /', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      $ = cheerio.load(html);\n      expect($('h1').text()).to.equal('Home');\n    });","file":"custom-404.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"renders 404 for /a","suites":["Custom 404","dev"],"updatePoint":{"line":26,"column":26,"index":718},"line":26,"code":"    it('renders 404 for /a', async () => {\n      const html = await fixture.fetch('/a').then(res => res.text());\n      $ = cheerio.load(html);\n      expect($('h1').text()).to.equal('Page not found');\n      expect($('p').text()).to.equal('/a');\n    });","file":"custom-404.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Work as constructors","suites":["Custom Elements"],"updatePoint":{"line":15,"column":26,"index":401},"line":15,"code":"  it('Work as constructors', async () => {\n    const html = await fixture.readFile('/ctr/index.html');\n    const $ = cheerioLoad(html); // test 1: Element rendered\n\n    expect($('my-element')).to.have.lengthOf(1); // test 2: shadow rendererd\n\n    expect($('my-element template[shadowroot=open]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with exported tagName","suites":["Custom Elements"],"updatePoint":{"line":23,"column":33,"index":732},"line":23,"code":"  it('Works with exported tagName', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html); // test 1: Element rendered\n\n    expect($('my-element')).to.have.lengthOf(1); // test 2: shadow rendered\n\n    expect($('my-element template[shadowroot=open]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Hydration works with exported tagName","suites":["Custom Elements"],"line":31,"code":"  it.skip('Hydration works with exported tagName', async () => {","file":"custom-elements.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Custom elements not claimed by renderer are rendered as regular HTML","suites":["Custom Elements"],"updatePoint":{"line":43,"column":74,"index":1580},"line":43,"code":"  it('Custom elements not claimed by renderer are rendered as regular HTML', async () => {\n    const html = await fixture.readFile('/nossr/index.html');\n    const $ = cheerioLoad(html); // test 1: Rendered the client-only element\n\n    expect($('client-element')).to.have.lengthOf(1); // No children\n\n    expect($('client-element').text()).to.equal('');\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can import a client-only element that is nested in JSX","suites":["Custom Elements"],"updatePoint":{"line":51,"column":60,"index":1925},"line":51,"code":"  it('Can import a client-only element that is nested in JSX', async () => {\n    const html = await fixture.readFile('/nested/index.html');\n    const $ = cheerioLoad(html); // test 1: Element rendered\n\n    expect($('client-only-element')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works in markdown pages","suites":["<Debug />"],"updatePoint":{"line":23,"column":29,"index":610},"line":23,"code":"  it('Works in markdown pages', async () => {\n    const response = await fixture.fetch('/posts/first');\n    expect(response.status).to.equal(200);\n  });","file":"debug-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /","suites":["Development Routing","No site config"],"updatePoint":{"line":20,"column":26,"index":596},"line":20,"code":"    it('200 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when adding search params","suites":["Development Routing","No site config"],"updatePoint":{"line":24,"column":37,"index":752},"line":24,"code":"    it('200 when adding search params', async () => {\n      const response = await fixture.fetch('/?foo=bar');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading non-root page","suites":["Development Routing","No site config"],"updatePoint":{"line":28,"column":38,"index":917},"line":28,"code":"    it('200 when loading non-root page', async () => {\n      const response = await fixture.fetch('/another');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","No site config"],"updatePoint":{"line":32,"column":38,"index":1081},"line":32,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/1');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Development Routing","No site config"],"updatePoint":{"line":36,"column":46,"index":1247},"line":36,"code":"    it('404 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/2');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /","suites":["Development Routing","No subpath used"],"updatePoint":{"line":58,"column":26,"index":1894},"line":58,"code":"    it('200 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading non-root page","suites":["Development Routing","No subpath used"],"updatePoint":{"line":62,"column":38,"index":2051},"line":62,"code":"    it('200 when loading non-root page', async () => {\n      const response = await fixture.fetch('/another');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","No subpath used"],"updatePoint":{"line":66,"column":38,"index":2215},"line":66,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/1');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Development Routing","No subpath used"],"updatePoint":{"line":70,"column":46,"index":2381},"line":70,"code":"    it('404 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/2');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":93,"column":26,"index":3062},"line":93,"code":"    it('404 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":97,"column":37,"index":3218},"line":97,"code":"    it('200 when loading subpath root', async () => {\n      const response = await fixture.fetch('/blog/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":101,"column":60,"index":3402},"line":101,"code":"    it('404 when loading subpath root without trailing slash', async () => {\n      const response = await fixture.fetch('/blog');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":105,"column":55,"index":3580},"line":105,"code":"    it('200 when loading another page with subpath used', async () => {\n      const response = await fixture.fetch('/blog/another/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":109,"column":38,"index":3750},"line":109,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/blog/1/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":113,"column":46,"index":3922},"line":113,"code":"    it('404 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/blog/2/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":135,"column":26,"index":4576},"line":135,"code":"    it('404 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":139,"column":57,"index":4752},"line":139,"code":"    it('200 when loading subpath root with trailing slash', async () => {\n      const response = await fixture.fetch('/blog/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":143,"column":60,"index":4936},"line":143,"code":"    it('404 when loading subpath root without trailing slash', async () => {\n      const response = await fixture.fetch('/blog');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":147,"column":55,"index":5114},"line":147,"code":"    it('200 when loading another page with subpath used', async () => {\n      const response = await fixture.fetch('/blog/another/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":151,"column":38,"index":5284},"line":151,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/blog/1/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":155,"column":46,"index":5456},"line":155,"code":"    it('404 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/blog/2/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /home.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":176,"column":35,"index":6077},"line":176,"code":"    it('200 when loading /home.json', async () => {\n      const response = await fixture.fetch('/home.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.title).to.equal('home');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /thing1.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":182,"column":37,"index":6358},"line":182,"code":"    it('200 when loading /thing1.json', async () => {\n      const response = await fixture.fetch('/thing1.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing1');\n      expect(body.title).to.equal('[slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /thing2.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":189,"column":37,"index":6687},"line":189,"code":"    it('200 when loading /thing2.json', async () => {\n      const response = await fixture.fetch('/thing2.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing2');\n      expect(body.title).to.equal('[slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /data/thing3.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":196,"column":42,"index":7021},"line":196,"code":"    it('200 when loading /data/thing3.json', async () => {\n      const response = await fixture.fetch('/data/thing3.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing3');\n      expect(body.title).to.equal('data [slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /data/thing4.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":203,"column":42,"index":7365},"line":203,"code":"    it('200 when loading /data/thing4.json', async () => {\n      const response = await fixture.fetch('/data/thing4.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing4');\n      expect(body.title).to.equal('data [slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /index.html","suites":["Development Routing","file format routing"],"updatePoint":{"line":227,"column":36,"index":8157},"line":227,"code":"    it('200 when loading /index.html', async () => {\n      const response = await fixture.fetch('/index.html');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /","suites":["Development Routing","file format routing"],"updatePoint":{"line":231,"column":26,"index":8312},"line":231,"code":"    it('200 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /another.html","suites":["Development Routing","file format routing"],"updatePoint":{"line":235,"column":38,"index":8469},"line":235,"code":"    it('200 when loading /another.html', async () => {\n      const response = await fixture.fetch('/another.html');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /another","suites":["Development Routing","file format routing"],"updatePoint":{"line":239,"column":33,"index":8633},"line":239,"code":"    it('200 when loading /another', async () => {\n      const response = await fixture.fetch('/another');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /1.html","suites":["Development Routing","file format routing"],"updatePoint":{"line":243,"column":32,"index":8791},"line":243,"code":"    it('200 when loading /1.html', async () => {\n      const response = await fixture.fetch('/1.html');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /1","suites":["Development Routing","file format routing"],"updatePoint":{"line":247,"column":27,"index":8943},"line":247,"code":"    it('200 when loading /1', async () => {\n      const response = await fixture.fetch('/1');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders correctly","suites":["vite.build.rollupOptions.entryFileNames"],"updatePoint":{"line":12,"column":23,"index":353},"line":12,"code":"  it('Renders correctly', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#hello')).to.have.a.lengthOf(1);\n  });","file":"entry-file-names.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Outputs a client module that was specified by the config","suites":["vite.build.rollupOptions.entryFileNames"],"updatePoint":{"line":17,"column":62,"index":575},"line":17,"code":"  it('Outputs a client module that was specified by the config', async () => {\n    const js = await fixture.readFile('/assets/js/Hello.js');\n    expect(js).to.be.a('string');\n    expect(js.length).to.be.greaterThan(0);\n  });","file":"entry-file-names.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"All top-level keys added","suites":["Events","eventCliSession()"],"updatePoint":{"line":6,"column":32,"index":240},"line":6,"code":"    it('All top-level keys added', () => {\n      const config = {\n        root: 1,\n        srcDir: 2,\n        publicDir: 3,\n        outDir: 4,\n        site: 5,\n        base: 6,\n        trailingSlash: 7,\n        experimental: 8\n      };\n      const expected = Object.keys(config);\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).to.deep.equal(expected);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"configKeys includes format","suites":["Events","eventCliSession()"],"updatePoint":{"line":25,"column":34,"index":699},"line":25,"code":"    it('configKeys includes format', () => {\n      const config = {\n        srcDir: 1,\n        build: {\n          format: 'file'\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).to.deep.equal(['srcDir', 'build', 'build.format']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"config.build.format","suites":["Events","eventCliSession()"],"updatePoint":{"line":39,"column":27,"index":1044},"line":39,"code":"    it('config.build.format', () => {\n      const config = {\n        srcDir: 1,\n        build: {\n          format: 'file'\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.config.build.format).to.equal('file');\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"configKeys includes server props","suites":["Events","eventCliSession()"],"updatePoint":{"line":53,"column":40,"index":1377},"line":53,"code":"    it('configKeys includes server props', () => {\n      const config = {\n        srcDir: 1,\n        server: {\n          host: 'example.com',\n          port: 8033\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).to.deep.equal(['srcDir', 'server', 'server.host', 'server.port']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"configKeys is deep","suites":["Events","eventCliSession()"],"updatePoint":{"line":68,"column":26,"index":1764},"line":68,"code":"    it('configKeys is deep', () => {\n      const config = {\n        publicDir: 1,\n        markdown: {\n          drafts: true,\n          shikiConfig: {\n            lang: 1,\n            theme: 2,\n            wrap: 3\n          },\n          syntaxHighlight: 'shiki',\n          remarkPlugins: [],\n          rehypePlugins: []\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).to.deep.equal(['publicDir', 'markdown', 'markdown.drafts', 'markdown.shikiConfig', 'markdown.shikiConfig.lang', 'markdown.shikiConfig.theme', 'markdown.shikiConfig.wrap', 'markdown.syntaxHighlight', 'markdown.remarkPlugins', 'markdown.rehypePlugins']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntaxHighlight","suites":["Events","eventCliSession()"],"updatePoint":{"line":90,"column":23,"index":2505},"line":90,"code":"    it('syntaxHighlight', () => {\n      const config = {\n        markdown: {\n          syntaxHighlight: 'shiki'\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.config.markdown.syntaxHighlight).to.equal('shiki');\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"top-level vite keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":103,"column":40,"index":2845},"line":103,"code":"    it('top-level vite keys are captured', async () => {\n      const config = {\n        root: 'some/thing',\n        vite: {\n          css: {\n            modules: []\n          },\n          base: 'a',\n          mode: 'b',\n          define: {\n            a: 'b'\n          },\n          publicDir: 'some/dir'\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['root', 'vite', 'vite.css', 'vite.css.modules', 'vite.base', 'vite.mode', 'vite.define', 'vite.publicDir']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"vite.resolve keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":125,"column":38,"index":3442},"line":125,"code":"    it('vite.resolve keys are captured', async () => {\n      const config = {\n        vite: {\n          resolve: {\n            alias: {\n              a: 'b'\n            },\n            dedupe: ['one', 'two']\n          }\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['vite', 'vite.resolve', 'vite.resolve.alias', 'vite.resolve.dedupe']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"vite.css keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":143,"column":34,"index":3914},"line":143,"code":"    it('vite.css keys are captured', async () => {\n      const config = {\n        vite: {\n          resolve: {\n            dedupe: ['one', 'two']\n          },\n          css: {\n            modules: [],\n            postcss: {}\n          }\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['vite', 'vite.resolve', 'vite.resolve.dedupe', 'vite.css', 'vite.css.modules', 'vite.css.postcss']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"vite.server keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":162,"column":37,"index":4441},"line":162,"code":"    it('vite.server keys are captured', async () => {\n      const config = {\n        vite: {\n          server: {\n            host: 'example.com',\n            open: true,\n            fs: {\n              strict: true,\n              allow: ['a', 'b']\n            }\n          }\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['vite', 'vite.server', 'vite.server.host', 'vite.server.open', 'vite.server.fs', 'vite.server.fs.strict', 'vite.server.fs.allow']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"vite.build keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":182,"column":36,"index":5032},"line":182,"code":"    it('vite.build keys are captured', async () => {\n      const config = {\n        vite: {\n          build: {\n            target: 'one',\n            outDir: 'some/dir',\n            cssTarget: {\n              one: 'two'\n            }\n          }\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['vite', 'vite.build', 'vite.build.target', 'vite.build.outDir', 'vite.build.cssTarget']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"vite.preview keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":201,"column":38,"index":5556},"line":201,"code":"    it('vite.preview keys are captured', async () => {\n      const config = {\n        vite: {\n          preview: {\n            host: 'example.com',\n            port: 8080,\n            another: {\n              a: 'b'\n            }\n          }\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['vite', 'vite.preview', 'vite.preview.host', 'vite.preview.port', 'vite.preview.another']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"vite.optimizeDeps keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":220,"column":43,"index":6081},"line":220,"code":"    it('vite.optimizeDeps keys are captured', async () => {\n      const config = {\n        vite: {\n          optimizeDeps: {\n            entries: ['one', 'two'],\n            exclude: ['secret', 'name']\n          }\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['vite', 'vite.optimizeDeps', 'vite.optimizeDeps.entries', 'vite.optimizeDeps.exclude']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"vite.ssr keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":236,"column":34,"index":6561},"line":236,"code":"    it('vite.ssr keys are captured', async () => {\n      const config = {\n        vite: {\n          ssr: {\n            external: ['a'],\n            target: {\n              one: 'two'\n            }\n          }\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['vite', 'vite.ssr', 'vite.ssr.external', 'vite.ssr.target']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"vite.worker keys are captured","suites":["Events","eventCliSession()"],"updatePoint":{"line":254,"column":37,"index":7021},"line":254,"code":"    it('vite.worker keys are captured', async () => {\n      const config = {\n        vite: {\n          worker: {\n            format: {\n              a: 'b'\n            },\n            plugins: ['a', 'b']\n          }\n        }\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.configKeys).is.deep.equal(['vite', 'vite.worker', 'vite.worker.format', 'vite.worker.plugins']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"falsy integrations","suites":["Events","eventCliSession()"],"updatePoint":{"line":272,"column":26,"index":7481},"line":272,"code":"    it('falsy integrations', () => {\n      const config = {\n        srcDir: 1,\n        integrations: [null, undefined, false]\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config);\n      expect(payload.config.integrations.length).to.equal(0);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"includes cli flags in payload","suites":["Events","eventCliSession()"],"updatePoint":{"line":284,"column":37,"index":7808},"line":284,"code":"    it('includes cli flags in payload', () => {\n      const config = {};\n      const flags = {\n        root: 'root',\n        site: 'http://example.com',\n        host: true,\n        port: 8080,\n        config: 'path/to/config.mjs',\n        experimentalSsr: true,\n        experimentalIntegrations: true,\n        drafts: true\n      };\n      const [{\n        payload\n      }] = events.eventCliSession({\n        cliCommand: 'dev'\n      }, config, flags);\n      expect(payload.flags).to.deep.equal(['root', 'site', 'host', 'port', 'config', 'experimentalSsr', 'experimentalIntegrations', 'drafts']);\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns the expected event and payload","suites":["Events","eventConfigError()"],"updatePoint":{"line":305,"column":46,"index":8466},"line":305,"code":"    it('returns the expected event and payload', () => {\n      const [event] = events.eventConfigError({\n        err: {\n          issues: [{\n            path: ['a', 'b', 'c']\n          }, {\n            path: ['d', 'e', 'f']\n          }]\n        },\n        cmd: 'COMMAND_NAME',\n        isFatal: true\n      });\n      expect(event).to.deep.equal({\n        eventName: 'ASTRO_CLI_ERROR',\n        payload: {\n          code: AstroErrorCodes.ConfigError,\n          isFatal: true,\n          isConfig: true,\n          cliCommand: 'COMMAND_NAME',\n          configErrorPaths: ['a.b.c', 'd.e.f']\n        }\n      });\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns the expected event payload with a detailed error object","suites":["Events","eventError()"],"updatePoint":{"line":330,"column":71,"index":9143},"line":330,"code":"    it('returns the expected event payload with a detailed error object', () => {\n      const errorWithFullMetadata = new Error('TEST ERROR MESSAGE');\n      errorWithFullMetadata.code = 1234;\n      errorWithFullMetadata.plugin = 'TEST PLUGIN';\n      const [event] = events.eventError({\n        err: errorWithFullMetadata,\n        cmd: 'COMMAND_NAME',\n        isFatal: true\n      });\n      expect(event).to.deep.equal({\n        eventName: 'ASTRO_CLI_ERROR',\n        payload: {\n          code: 1234,\n          plugin: 'TEST PLUGIN',\n          isFatal: true,\n          cliCommand: 'COMMAND_NAME',\n          anonymousMessageHint: 'TEST ERROR MESSAGE'\n        }\n      });\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns the expected event payload with a generic error","suites":["Events","eventError()"],"updatePoint":{"line":350,"column":63,"index":9810},"line":350,"code":"    it('returns the expected event payload with a generic error', () => {\n      const [event] = events.eventError({\n        err: new Error('TEST ERROR MESSAGE'),\n        cmd: 'COMMAND_NAME',\n        isFatal: false\n      });\n      expect(event).to.deep.equal({\n        eventName: 'ASTRO_CLI_ERROR',\n        payload: {\n          code: AstroErrorCodes.UnknownError,\n          plugin: undefined,\n          isFatal: false,\n          cliCommand: 'COMMAND_NAME',\n          anonymousMessageHint: 'TEST ERROR MESSAGE'\n        }\n      });\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"properly creates anonymousMessageHint from a basic error message","suites":["Events","eventError()"],"updatePoint":{"line":367,"column":72,"index":10356},"line":367,"code":"    it('properly creates anonymousMessageHint from a basic error message', () => {\n      const [event] = events.eventError({\n        err: new Error('TEST ERROR MESSAGE: Sensitive data is \"/Users/MYNAME/foo.astro\"'),\n        cmd: 'COMMAND_NAME',\n        isFatal: true\n      });\n      expect(event.payload.anonymousMessageHint).to.equal('TEST ERROR MESSAGE');\n    });","file":"events.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is available in Astro pages","suites":["Global Fetch"],"updatePoint":{"line":12,"column":33,"index":326},"line":12,"code":"  it('Is available in Astro pages', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#astro-page').text()).to.equal('function', 'Fetch supported in .astro page');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is available in Astro components","suites":["Global Fetch"],"updatePoint":{"line":17,"column":38,"index":569},"line":17,"code":"  it('Is available in Astro components', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#astro-component').text()).to.equal('function', 'Fetch supported in .astro components');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is available in non-Astro components","suites":["Global Fetch"],"updatePoint":{"line":22,"column":42,"index":827},"line":22,"code":"  it('Is available in non-Astro components', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#jsx').text()).to.equal('function', 'Fetch supported in .jsx');\n    expect($('#svelte').text()).to.equal('function', 'Fetch supported in .svelte');\n    expect($('#vue').text()).to.equal('function', 'Fetch supported in .vue');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Respects existing code","suites":["Global Fetch"],"updatePoint":{"line":29,"column":28,"index":1208},"line":29,"code":"  it('Respects existing code', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#already-imported').text()).to.equal('function', 'Existing fetch imports respected');\n    expect($('#custom-declaration').text()).to.equal('number', 'Custom fetch declarations respected');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be imported in frontmatter","suites":["@fontsource/* packages"],"updatePoint":{"line":12,"column":36,"index":352},"line":12,"code":"  it('can be imported in frontmatter', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const assetPath = $('link').attr('href');\n    const css = await fixture.readFile(assetPath);\n    expect(css).to.contain('Montserrat');\n  });","file":"fontsource.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works","suites":["HTML Component","build"],"updatePoint":{"line":15,"column":13,"index":380},"line":15,"code":"    it('works', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const h1 = $('h1');\n      const foo = $('#foo');\n      expect(h1.text()).to.equal('Hello component!');\n      expect(foo.text()).to.equal('bar');\n    });","file":"html-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works","suites":["HTML Component","dev"],"updatePoint":{"line":32,"column":13,"index":859},"line":32,"code":"    it('works', async () => {\n      const res = await fixture.fetch('/');\n      expect(res.status).to.equal(200);\n      const html = await res.text();\n      const $ = cheerio.load(html);\n      const h1 = $('h1');\n      const foo = $('#foo');\n      expect(h1.text()).to.equal('Hello component!');\n      expect(foo.text()).to.equal('bar');\n    });","file":"html-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works","suites":["HTML Escape","build"],"updatePoint":{"line":15,"column":13,"index":374},"line":15,"code":"    it('works', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const div = $('div');\n      expect(div.text()).to.equal('${foo}');\n      const span = $('span');\n      expect(span.attr('${attr}')).to.equal('');\n      const ce = $('custom-element');\n      expect(ce.attr('x-data')).to.equal('`${test}`');\n      const script = $('script');\n      expect(script.text()).to.equal('console.log(`hello ${\"world\"}!`)');\n    });","file":"html-escape.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works","suites":["HTML Escape","dev"],"updatePoint":{"line":36,"column":13,"index":1055},"line":36,"code":"    it('works', async () => {\n      const res = await fixture.fetch('/');\n      expect(res.status).to.equal(200);\n      const html = await res.text();\n      const $ = cheerio.load(html);\n      const div = $('div');\n      expect(div.text()).to.equal('${foo}');\n      const span = $('span');\n      expect(span.attr('${attr}')).to.equal('');\n      const ce = $('custom-element');\n      expect(ce.attr('x-data')).to.equal('`${test}`');\n      const script = $('script');\n      expect(script.text()).to.equal('console.log(`hello ${\"world\"}!`)');\n    });","file":"html-escape.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works","suites":["HTML Page","build"],"updatePoint":{"line":15,"column":13,"index":370},"line":15,"code":"    it('works', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const h1 = $('h1');\n      expect(h1.text()).to.equal('Hello page!');\n    });","file":"html-page.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works","suites":["HTML Page","dev"],"updatePoint":{"line":30,"column":13,"index":773},"line":30,"code":"    it('works', async () => {\n      const res = await fixture.fetch('/');\n      expect(res.status).to.equal(200);\n      const html = await res.text();\n      const $ = cheerio.load(html);\n      const h1 = $('h1');\n      expect(h1.text()).to.equal('Hello page!');\n    });","file":"html-page.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works","suites":["HTML Slots","build"],"updatePoint":{"line":15,"column":13,"index":372},"line":15,"code":"    it('works', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const slotDefault = $('#default');\n      expect(slotDefault.text()).to.equal('Default');\n      const a = $('#a');\n      expect(a.text().trim()).to.equal('A');\n      const b = $('#b');\n      expect(b.text().trim()).to.equal('B');\n      const c = $('#c');\n      expect(c.text().trim()).to.equal('C');\n      const inline = $('#inline');\n      expect(inline.html()).to.equal('<slot is:inline=\"\"></slot>');\n    });","file":"html-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works","suites":["HTML Slots","dev"],"updatePoint":{"line":38,"column":13,"index":1108},"line":38,"code":"    it('works', async () => {\n      const res = await fixture.fetch('/');\n      expect(res.status).to.equal(200);\n      const html = await res.text();\n      const $ = cheerio.load(html);\n      const slotDefault = $('#default');\n      expect(slotDefault.text()).to.equal('Default');\n      const a = $('#a');\n      expect(a.text().trim()).to.equal('A');\n      const b = $('#b');\n      expect(b.text().trim()).to.equal('B');\n      const c = $('#c');\n      expect(c.text().trim()).to.equal('C');\n      const inline = $('#inline');\n      expect(inline.html()).to.equal('<slot is:inline=\"\"></slot>');\n    });","file":"html-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in .astro files","suites":["Using .js extension on .ts file"],"updatePoint":{"line":13,"column":27,"index":399},"line":13,"code":"  it('works in .astro files', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('bar');\n  });","file":"import-ts-with-js.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in .md files","suites":["Using .js extension on .ts file"],"updatePoint":{"line":18,"column":24,"index":580},"line":18,"code":"  it('works in .md files', async () => {\n    const html = await fixture.readFile('/post/index.html');\n    const $ = cheerio.load(html);\n    expect($('h2').text()).to.equal('bar');\n  });","file":"import-ts-with-js.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"supports .mjs files","suites":["Integration addPageExtension"],"updatePoint":{"line":13,"column":25,"index":407},"line":13,"code":"  it('supports .mjs files', async () => {\n    const html = await fixture.readFile('/test/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('Hello world!');\n  });","file":"integration-add-page-extension.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load simple JSX components","suites":["jsx-runtime"],"updatePoint":{"line":12,"column":36,"index":326},"line":12,"code":"  it('Can load simple JSX components', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html);\n    expect($('#basic').text()).to.equal('Basic');\n    expect($('#named').text()).to.equal('Named');\n  });","file":"jsx.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Preact component inside Astro JSX","suites":["jsx-runtime"],"updatePoint":{"line":18,"column":48,"index":597},"line":18,"code":"  it('Can load Preact component inside Astro JSX', async () => {\n    const html = await fixture.readFile('/frameworks/index.html');\n    const $ = cheerio.load(html);\n    expect($('#has-preact #preact').length).to.equal(1);\n    expect($('#preact').text()).to.include('Preact');\n  });","file":"jsx.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load React component inside Astro JSX","suites":["jsx-runtime"],"updatePoint":{"line":24,"column":47,"index":879},"line":24,"code":"  it('Can load React component inside Astro JSX', async () => {\n    const html = await fixture.readFile('/frameworks/index.html');\n    const $ = cheerio.load(html);\n    expect($('#has-react #react').length).to.equal(1);\n    expect($('#react').text()).to.include('React');\n  });","file":"jsx.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Solid component inside Astro JSX","suites":["jsx-runtime"],"updatePoint":{"line":30,"column":47,"index":1157},"line":30,"code":"  it('Can load Solid component inside Astro JSX', async () => {\n    const html = await fixture.readFile('/frameworks/index.html');\n    const $ = cheerio.load(html);\n    expect($('#has-solid #solid').length).to.equal(1);\n    expect($('#solid').text()).to.include('Solid');\n  });","file":"jsx.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Svelte component inside Astro JSX","suites":["jsx-runtime"],"updatePoint":{"line":36,"column":48,"index":1436},"line":36,"code":"  it('Can load Svelte component inside Astro JSX', async () => {\n    const html = await fixture.readFile('/frameworks/index.html');\n    const $ = cheerio.load(html);\n    expect($('#has-svelte #svelte').length).to.equal(1);\n    expect($('#svelte').text()).to.include('Svelte');\n  });","file":"jsx.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Vue component inside Astro JSX","suites":["jsx-runtime"],"updatePoint":{"line":42,"column":45,"index":1716},"line":42,"code":"  it('Can load Vue component inside Astro JSX', async () => {\n    const html = await fixture.readFile('/frameworks/index.html');\n    const $ = cheerio.load(html);\n    expect($('#has-vue #vue').length).to.equal(1);\n    expect($('#vue').text()).to.include('Vue');\n  });","file":"jsx.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders a custom element by Constructor","suites":["LitElement test"],"updatePoint":{"line":22,"column":45,"index":621},"line":22,"code":"  it('Renders a custom element by Constructor', async () => {\n    // @lit-labs/ssr/ requires Node 13.9 or higher\n    if (NODE_VERSION < 13.9) {\n      return;\n    }\n\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html); // test 1: attributes rendered – non reactive properties\n\n    expect($('my-element').attr('foo')).to.equal('bar'); // test 2: shadow rendered\n\n    expect($('my-element').html()).to.include(`<div>Testing...</div>`); // test 3: string reactive property set\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"str\">initialized</div>`); // test 4: boolean reactive property correctly set\n    // <my-element bool=\"false\"> Lit will equate to true because it uses\n    // this.hasAttribute to determine its value\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"bool\">B</div>`); // test 5: object reactive property set\n    // by default objects will be stringifed to [object Object]\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"data\">data: 1</div>`); // test 6: reactive properties are not rendered as attributes\n\n    expect($('my-element').attr('obj')).to.equal(undefined);\n    expect($('my-element').attr('bool')).to.equal(undefined);\n    expect($('my-element').attr('str')).to.equal(undefined); // test 7: reflected reactive props are rendered as attributes\n\n    expect($('my-element').attr('reflectedbool')).to.equal('');\n    expect($('my-element').attr('reflected-str')).to.equal('default reflected string');\n    expect($('my-element').attr('reflected-str-prop')).to.equal('initialized reflected');\n  });","file":"lit-element.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Correctly passes child slots","suites":["LitElement test"],"updatePoint":{"line":52,"column":34,"index":2264},"line":52,"code":"  it('Correctly passes child slots', async () => {\n    // @lit-labs/ssr/ requires Node 13.9 or higher\n    if (NODE_VERSION < 13.9) {\n      return;\n    }\n\n    const html = await fixture.readFile('/slots/index.html');\n    const $ = cheerio.load(html);\n    expect($('my-element').length).to.equal(1);\n    const [defaultSlot, namedSlot] = $('template').siblings().toArray(); // has default slot content in lightdom\n\n    expect($(defaultSlot).text()).to.equal('default'); // has named slot content in lightdom\n\n    expect($(namedSlot).text()).to.equal('named');\n  });","file":"lit-element.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load a simple markdown page with Astro","suites":["Markdown tests"],"updatePoint":{"line":12,"column":48,"index":346},"line":12,"code":"  it('Can load a simple markdown page with Astro', async () => {\n    const html = await fixture.readFile('/post/index.html');\n    const $ = cheerio.load(html);\n    expect($('p').first().text()).to.equal('Hello world!');\n    expect($('#first').text()).to.equal('Some content');\n    expect($('#interesting-topic').text()).to.equal('Interesting Topic');\n  });","file":"markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load a realworld markdown page with Astro","suites":["Markdown tests"],"updatePoint":{"line":19,"column":51,"index":706},"line":19,"code":"  it('Can load a realworld markdown page with Astro', async () => {\n    const html = await fixture.readFile('/realworld/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(7);\n  });","file":"markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doesn't add page styles for a page without style imports","suites":["Page-level styles"],"updatePoint":{"line":13,"column":62,"index":402},"line":13,"code":"  it(\"Doesn't add page styles for a page without style imports\", async () => {\n    let html = await fixture.readFile('/index.html');\n    let $ = await cheerioLoad(html);\n    expect($('link').length).to.equal(0);\n  });","file":"page-level-styles.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does add page styles for pages with style imports (or deps)","suites":["Page-level styles"],"updatePoint":{"line":18,"column":65,"index":623},"line":18,"code":"  it('Does add page styles for pages with style imports (or deps)', async () => {\n    let html = await fixture.readFile('/blog/index.html');\n    let $ = await cheerioLoad(html);\n    expect($('link').length).to.equal(1);\n  });","file":"page-level-styles.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Astro page styles","suites":["PostCSS"],"updatePoint":{"line":24,"column":32,"index":942},"line":24,"code":"  it('works in Astro page styles', () => {\n    expect(bundledCSS).to.match(new RegExp(`\\.astro-page(\\.(\\w|-)*)*\\.nested`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Astro component styles","suites":["PostCSS"],"updatePoint":{"line":27,"column":37,"index":1077},"line":27,"code":"  it('works in Astro component styles', () => {\n    expect(bundledCSS).to.match(new RegExp(`\\.astro-component(\\.(\\w|-)*)*\\.nested`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in JSX","suites":["PostCSS"],"updatePoint":{"line":30,"column":18,"index":1198},"line":30,"code":"  it('works in JSX', () => {\n    expect(bundledCSS).to.match(new RegExp(`\\.solid(\\.(\\w|-)*)*\\.nested`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Vue","suites":["PostCSS"],"updatePoint":{"line":33,"column":18,"index":1309},"line":33,"code":"  it('works in Vue', () => {\n    expect(bundledCSS).to.match(new RegExp(`\\.vue(\\.(\\w|-)*)*\\.nested`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Svelte","suites":["PostCSS"],"updatePoint":{"line":36,"column":21,"index":1421},"line":36,"code":"  it('works in Svelte', () => {\n    expect(bundledCSS).to.match(new RegExp(`\\.svelte(\\.(\\w|-)*)*\\.nested`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores CSS in public/","suites":["PostCSS"],"updatePoint":{"line":39,"column":28,"index":1543},"line":39,"code":"  it('ignores CSS in public/', async () => {\n    const publicCSS = (await fixture.readFile('/global.css')).trim().replace(/\\s/g, '').replace('/n', ''); // neither minified nor prefixed\n\n    expect(eol.lf(publicCSS)).to.equal(`.global{appearance:none;}`);\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load class component","suites":["Preact component"],"updatePoint":{"line":12,"column":30,"index":338},"line":12,"code":"  it('Can load class component', async () => {\n    const html = await fixture.readFile('/class/index.html');\n    const $ = cheerio.load(html); // test 1: Can use class components\n\n    expect($('#class-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load function component","suites":["Preact component"],"updatePoint":{"line":18,"column":33,"index":582},"line":18,"code":"  it('Can load function component', async () => {\n    const html = await fixture.readFile('/fn/index.html');\n    const $ = cheerio.load(html); // test 1: Can use function components\n\n    expect($('#fn-component')).to.have.lengthOf(1); // test 2: Can use function components\n\n    expect($('#arrow-fn-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load TS component","suites":["Preact component"],"updatePoint":{"line":26,"column":27,"index":915},"line":26,"code":"  it('Can load TS component', async () => {\n    const html = await fixture.readFile('/ts-components/index.html');\n    const $ = cheerio.load(html); // test 1: Can use TS components\n\n    expect($('.ts-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use hooks","suites":["Preact component"],"updatePoint":{"line":32,"column":19,"index":1147},"line":32,"code":"  it('Can use hooks', async () => {\n    const html = await fixture.readFile('/hooks/index.html');\n    const $ = cheerio.load(html);\n    expect($('#world')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can export a Fragment","suites":["Preact component"],"updatePoint":{"line":37,"column":27,"index":1338},"line":37,"code":"  it('Can export a Fragment', async () => {\n    const html = await fixture.readFile('/frag/index.html');\n    const $ = cheerio.load(html); // test 1: nothing rendered but it didn’t throw\n\n    expect($('body').children()).to.have.lengthOf(0);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use a pragma comment","suites":["Preact component"],"updatePoint":{"line":43,"column":30,"index":1589},"line":43,"code":"  it('Can use a pragma comment', async () => {\n    const html = await fixture.readFile('/pragma-comment/index.html');\n    const $ = cheerio.load(html); // test 1: rendered the PragmaComment component\n\n    expect($('.pragma-comment')).to.have.lengthOf(1);\n    expect($('.pragma-comment-tsx')).to.have.lengthOf(1);\n  }); // In moving over to Vite, the jsx-runtime import is now obscured. TODO: update the method of finding this.","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Uses the new JSX transform","suites":["Preact component"],"line":51,"code":"  it.skip('Uses the new JSX transform', async () => {","file":"preact-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":30,"column":28,"index":1003},"line":30,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":34,"column":59,"index":1187},"line":34,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n        expect(response.redirected).to.equal(false);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":39,"column":62,"index":1432},"line":39,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":43,"column":57,"index":1618},"line":43,"code":"      it('404 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":47,"column":40,"index":1796},"line":47,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":51,"column":48,"index":1975},"line":51,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":78,"column":28,"index":2894},"line":78,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":82,"column":59,"index":3078},"line":82,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":86,"column":62,"index":3270},"line":86,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":90,"column":57,"index":3456},"line":90,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath not used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":94,"column":61,"index":3655},"line":94,"code":"      it('404 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":98,"column":40,"index":3832},"line":98,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":102,"column":48,"index":4012},"line":102,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":129,"column":28,"index":4932},"line":129,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":133,"column":59,"index":5116},"line":133,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":137,"column":62,"index":5308},"line":137,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":141,"column":57,"index":5494},"line":141,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath not used","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":145,"column":61,"index":5693},"line":145,"code":"      it('200 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":149,"column":40,"index":5870},"line":149,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":153,"column":48,"index":6050},"line":153,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":185,"column":28,"index":7074},"line":185,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":189,"column":59,"index":7258},"line":189,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n        expect(response.redirected).to.equal(false);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":194,"column":62,"index":7503},"line":194,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":198,"column":57,"index":7689},"line":198,"code":"      it('404 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":202,"column":40,"index":7867},"line":202,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":206,"column":48,"index":8046},"line":206,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":236,"column":28,"index":9024},"line":236,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":240,"column":59,"index":9208},"line":240,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":244,"column":62,"index":9400},"line":244,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":248,"column":57,"index":9586},"line":248,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath not used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":252,"column":61,"index":9785},"line":252,"code":"      it('404 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":256,"column":40,"index":9962},"line":256,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":260,"column":48,"index":10142},"line":260,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":290,"column":28,"index":11121},"line":290,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":294,"column":59,"index":11305},"line":294,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":298,"column":62,"index":11497},"line":298,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":302,"column":57,"index":11683},"line":302,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath not used","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":306,"column":61,"index":11882},"line":306,"code":"      it('200 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":310,"column":40,"index":12059},"line":310,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":314,"column":48,"index":12239},"line":314,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":344,"column":28,"index":13177},"line":344,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath with index.html","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":348,"column":50,"index":13352},"line":348,"code":"      it('200 when loading subpath with index.html', async () => {\n        const response = await fixture.fetch('/blog/index.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":352,"column":57,"index":13549},"line":352,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":356,"column":40,"index":13731},"line":356,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","build format: file","Exact file path"],"updatePoint":{"line":360,"column":48,"index":13915},"line":360,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2.html');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /@vite/client","suites":["Public dev with base"],"updatePoint":{"line":19,"column":36,"index":549},"line":19,"code":"  it('200 when loading /@vite/client', async () => {\n    const response = await fixture.fetch('/@vite/client', {\n      redirect: 'manual'\n    });\n    expect(response.status).to.equal(200);\n    const content = await response.text();\n    expect(content).to.contain('vite');\n  });","file":"public-base-404.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /blog/twitter.png","suites":["Public dev with base"],"updatePoint":{"line":27,"column":40,"index":831},"line":27,"code":"  it('200 when loading /blog/twitter.png', async () => {\n    const response = await fixture.fetch('/blog/twitter.png', {\n      redirect: 'manual'\n    });\n    expect(response.status).to.equal(200);\n  });","file":"public-base-404.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"custom 404 page when loading /blog/blog/","suites":["Public dev with base"],"updatePoint":{"line":33,"column":46,"index":1040},"line":33,"code":"  it('custom 404 page when loading /blog/blog/', async () => {\n    const response = await fixture.fetch('/blog/blog/');\n    const html = await response.text();\n    $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('404');\n  });","file":"public-base-404.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"default 404 hint page when loading /","suites":["Public dev with base"],"updatePoint":{"line":39,"column":42,"index":1274},"line":39,"code":"  it('default 404 hint page when loading /', async () => {\n    const response = await fixture.fetch('/');\n    expect(response.status).to.equal(404);\n    const html = await response.text();\n    $ = cheerio.load(html);\n    expect($('a').first().text()).to.equal('/blog/');\n  });","file":"public-base-404.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"default 404 page when loading /none/","suites":["Public dev with base"],"updatePoint":{"line":46,"column":42,"index":1551},"line":46,"code":"  it('default 404 page when loading /none/', async () => {\n    const response = await fixture.fetch('/none/', {\n      headers: {\n        accept: 'text/html,*/*'\n      }\n    });\n    expect(response.status).to.equal(404);\n    const html = await response.text();\n    $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('404:  Not found');\n    expect($('pre').text()).to.equal('Path: /none/');\n  });","file":"public-base-404.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load React","suites":["React Components","build"],"updatePoint":{"line":15,"column":22,"index":412},"line":15,"code":"    it('Can load React', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerioLoad(html); // test 1: basic component renders\n\n      expect($('#react-static').text()).to.equal('Hello static!'); // test 2: no reactroot\n\n      expect($('#react-static').attr('data-reactroot')).to.equal(undefined); // test 3: Can use function components\n\n      expect($('#arrow-fn-component')).to.have.lengthOf(1); // test 4: Can use spread for components\n\n      expect($('#component-spread-props')).to.have.lengthOf(1); // test 5: spread props renders\n\n      expect($('#component-spread-props').text(), 'Hello world!'); // test 6: Can use TS components\n\n      expect($('.ts-component')).to.have.lengthOf(1); // test 7: Can use Pure components\n\n      expect($('#pure')).to.have.lengthOf(1); // test 8: Check number of islands\n\n      expect($('astro-island[uid]')).to.have.lengthOf(5); // test 9: Check island deduplication\n\n      const uniqueRootUIDs = new Set($('astro-island').map((i, el) => $(el).attr('uid')));\n      expect(uniqueRootUIDs.size).to.equal(4);\n    });","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Vue","suites":["React Components","build"],"updatePoint":{"line":38,"column":20,"index":1502},"line":38,"code":"    it('Can load Vue', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerioLoad(html);\n      expect($('#vue-h2').text()).to.equal('Hasta la vista, baby');\n    });","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use a pragma comment","suites":["React Components","build"],"updatePoint":{"line":43,"column":32,"index":1720},"line":43,"code":"    it('Can use a pragma comment', async () => {\n      const html = await fixture.readFile('/pragma-comment/index.html');\n      const $ = cheerioLoad(html); // test 1: rendered the PragmaComment component\n\n      expect($('.pragma-comment')).to.have.lengthOf(2);\n    }); // TODO: is this still a relevant test?","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Includes reactroot on hydrating components","suites":["React Components","build"],"line":50,"code":"    it.skip('Includes reactroot on hydrating components', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Can load Suspense-using components","suites":["React Components","build"],"updatePoint":{"line":59,"column":42,"index":2420},"line":59,"code":"    it('Can load Suspense-using components', async () => {\n      const html = await fixture.readFile('/suspense/index.html');\n      const $ = cheerioLoad(html);\n      expect($('#client #lazy')).to.have.lengthOf(1);\n      expect($('#server #lazy')).to.have.lengthOf(1);\n    });","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["React Components","dev"],"updatePoint":{"line":75,"column":31,"index":2907},"line":75,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerioLoad(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    }); // TODO: move this to separate dev test?","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Throws helpful error message on window SSR","suites":["React Components","dev"],"line":88,"code":"    it.skip('Throws helpful error message on window SSR', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"uses the new JSX transform","suites":["React Components","dev"],"line":96,"code":"    it.skip('uses the new JSX transform', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Is able to build and renders and stuff","suites":["Re-exported astro components with client components"],"updatePoint":{"line":12,"column":44,"index":413},"line":12,"code":"  it('Is able to build and renders and stuff', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('astro-island').length).to.equal(1);\n    expect($('astro-island').attr('component-export')).to.equal('One');\n  });","file":"reexport-astro-containing-client-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Includes all styles on the page","suites":["Remote CSS"],"updatePoint":{"line":12,"column":37,"index":333},"line":12,"code":"  it('Includes all styles on the page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const relPath = $('link').attr('href');\n    const css = await fixture.readFile(relPath);\n    expect(css).to.match(/https:\\/\\/unpkg.com\\/open-props/);\n    expect(css).to.match(/body/);\n  });","file":"remote-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches / to index.astro","suites":["Routing priority","build"],"updatePoint":{"line":61,"column":32,"index":1170},"line":61,"code":"    it('matches / to index.astro', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('index.astro');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /posts/post-1 to posts/[pid].astro","suites":["Routing priority","build"],"updatePoint":{"line":66,"column":50,"index":1392},"line":66,"code":"    it('matches /posts/post-1 to posts/[pid].astro', async () => {\n      const html = await fixture.readFile('/posts/post-1/index.html');\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('posts/[pid].astro');\n      expect($('p').text()).to.equal('post-1');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /posts/1/2 to posts/[...slug].astro","suites":["Routing priority","build"],"updatePoint":{"line":72,"column":51,"index":1682},"line":72,"code":"    it('matches /posts/1/2 to posts/[...slug].astro', async () => {\n      const html = await fixture.readFile('/posts/1/2/index.html');\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('posts/[...slug].astro');\n      expect($('p').text()).to.equal('1/2');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /de to de/index.astro","suites":["Routing priority","build"],"updatePoint":{"line":78,"column":37,"index":1956},"line":78,"code":"    it('matches /de to de/index.astro', async () => {\n      const html = await fixture.readFile('/de/index.html');\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('de/index.astro');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /en to [lang]/index.astro","suites":["Routing priority","build"],"updatePoint":{"line":83,"column":41,"index":2175},"line":83,"code":"    it('matches /en to [lang]/index.astro', async () => {\n      const html = await fixture.readFile('/en/index.html');\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('[lang]/index.astro');\n      expect($('p').text()).to.equal('en');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /de/1/2 to [lang]/[...catchall].astro","suites":["Routing priority","build"],"updatePoint":{"line":89,"column":53,"index":2454},"line":89,"code":"    it('matches /de/1/2 to [lang]/[...catchall].astro', async () => {\n      const html = await fixture.readFile('/de/1/2/index.html');\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('[lang]/[...catchall].astro');\n      expect($('p').text()).to.equal('de | 1/2');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /en/1/2 to [lang]/[...catchall].astro","suites":["Routing priority","build"],"updatePoint":{"line":95,"column":53,"index":2751},"line":95,"code":"    it('matches /en/1/2 to [lang]/[...catchall].astro', async () => {\n      const html = await fixture.readFile('/en/1/2/index.html');\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('[lang]/[...catchall].astro');\n      expect($('p').text()).to.equal('en | 1/2');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches / to index.astro","suites":["Routing priority","dev"],"updatePoint":{"line":110,"column":32,"index":3223},"line":110,"code":"    it('matches / to index.astro', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('index.astro');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /posts/post-1 to /posts/[pid].astro","suites":["Routing priority","dev"],"updatePoint":{"line":115,"column":51,"index":3457},"line":115,"code":"    it('matches /posts/post-1 to /posts/[pid].astro', async () => {\n      const html = await fixture.fetch('/posts/post-1').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('posts/[pid].astro');\n      expect($('p').text()).to.equal('post-1');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /posts/1/2 to /posts/[...slug].astro","suites":["Routing priority","dev"],"updatePoint":{"line":121,"column":52,"index":3758},"line":121,"code":"    it('matches /posts/1/2 to /posts/[...slug].astro', async () => {\n      const html = await fixture.fetch('/posts/1/2').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('posts/[...slug].astro');\n      expect($('p').text()).to.equal('1/2');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /de to de/index.astro","suites":["Routing priority","dev"],"updatePoint":{"line":127,"column":37,"index":4042},"line":127,"code":"    it('matches /de to de/index.astro', async () => {\n      const html = await fixture.fetch('/de').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('de/index.astro');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /de to de/index.astro","suites":["Routing priority","dev"],"updatePoint":{"line":132,"column":37,"index":4267},"line":132,"code":"    it('matches /de to de/index.astro', async () => {\n      const html = await fixture.fetch('/de').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('de/index.astro');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /de/ to de/index.astro","suites":["Routing priority","dev"],"updatePoint":{"line":137,"column":38,"index":4493},"line":137,"code":"    it('matches /de/ to de/index.astro', async () => {\n      const html = await fixture.fetch('/de/').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('de/index.astro');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /de/index.html to de/index.astro","suites":["Routing priority","dev"],"updatePoint":{"line":142,"column":48,"index":4730},"line":142,"code":"    it('matches /de/index.html to de/index.astro', async () => {\n      const html = await fixture.fetch('/de/index.html').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('de/index.astro');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /en to [lang]/index.astro","suites":["Routing priority","dev"],"updatePoint":{"line":147,"column":41,"index":4970},"line":147,"code":"    it('matches /en to [lang]/index.astro', async () => {\n      const html = await fixture.fetch('/en').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('[lang]/index.astro');\n      expect($('p').text()).to.equal('en');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /en/ to [lang]/index.astro","suites":["Routing priority","dev"],"updatePoint":{"line":153,"column":42,"index":5248},"line":153,"code":"    it('matches /en/ to [lang]/index.astro', async () => {\n      const html = await fixture.fetch('/en/').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('[lang]/index.astro');\n      expect($('p').text()).to.equal('en');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /en/index.html to de/index.astro","suites":["Routing priority","dev"],"updatePoint":{"line":159,"column":48,"index":5533},"line":159,"code":"    it('matches /en/index.html to de/index.astro', async () => {\n      const html = await fixture.fetch('/en/index.html').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('[lang]/index.astro');\n      expect($('p').text()).to.equal('en');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /de/1/2 to [lang]/[...catchall].astro","suites":["Routing priority","dev"],"updatePoint":{"line":165,"column":53,"index":5833},"line":165,"code":"    it('matches /de/1/2 to [lang]/[...catchall].astro', async () => {\n      const html = await fixture.fetch('/de/1/2/index.html').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('[lang]/[...catchall].astro');\n      expect($('p').text()).to.equal('de | 1/2');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"matches /en/1/2 to [lang]/[...catchall].astro","suites":["Routing priority","dev"],"updatePoint":{"line":171,"column":53,"index":6151},"line":171,"code":"    it('matches /en/1/2 to [lang]/[...catchall].astro', async () => {\n      const html = await fixture.fetch('/en/1/2/index.html').then(res => res.text());\n      const $ = cheerioLoad(html);\n      expect($('h1').text()).to.equal('[lang]/[...catchall].astro');\n      expect($('p').text()).to.equal('en | 1/2');\n    });","file":"routing-priority.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Preact"],"updatePoint":{"line":12,"column":26,"index":327},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Preact"],"updatePoint":{"line":22,"column":24,"index":830},"line":22,"code":"  it('Renders named slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#named').text().trim()).to.equal('Fallback / Named');\n  });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Preact"],"updatePoint":{"line":27,"column":42,"index":1053},"line":27,"code":"  it('Converts dash-case slot to camelCase', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n  });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Preact","For Markdown Pages"],"updatePoint":{"line":33,"column":28,"index":1311},"line":33,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Preact","For Markdown Pages"],"updatePoint":{"line":38,"column":26,"index":1533},"line":38,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Preact","For Markdown Pages"],"updatePoint":{"line":43,"column":44,"index":1775},"line":43,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Preact","For MDX Pages"],"updatePoint":{"line":50,"column":28,"index":2051},"line":50,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Preact","For MDX Pages"],"updatePoint":{"line":55,"column":26,"index":2268},"line":55,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Preact","For MDX Pages"],"updatePoint":{"line":60,"column":44,"index":2505},"line":60,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: React"],"updatePoint":{"line":12,"column":26,"index":325},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: React"],"updatePoint":{"line":22,"column":24,"index":828},"line":22,"code":"  it('Renders named slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#named').text().trim()).to.equal('Fallback / Named');\n  });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: React"],"updatePoint":{"line":27,"column":42,"index":1051},"line":27,"code":"  it('Converts dash-case slot to camelCase', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n  });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: React","For Markdown Pages"],"updatePoint":{"line":33,"column":28,"index":1309},"line":33,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: React","For Markdown Pages"],"updatePoint":{"line":38,"column":26,"index":1531},"line":38,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: React","For Markdown Pages"],"updatePoint":{"line":43,"column":44,"index":1773},"line":43,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: React","For MDX Pages"],"updatePoint":{"line":50,"column":28,"index":2049},"line":50,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: React","For MDX Pages"],"updatePoint":{"line":55,"column":26,"index":2266},"line":55,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: React","For MDX Pages"],"updatePoint":{"line":60,"column":44,"index":2503},"line":60,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Solid"],"updatePoint":{"line":12,"column":26,"index":325},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Solid"],"updatePoint":{"line":22,"column":24,"index":828},"line":22,"code":"  it('Renders named slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#named').text().trim()).to.equal('Fallback / Named');\n  });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Solid"],"updatePoint":{"line":27,"column":42,"index":1051},"line":27,"code":"  it('Converts dash-case slot to camelCase', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n  });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Solid","For Markdown Pages"],"updatePoint":{"line":33,"column":28,"index":1309},"line":33,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Solid","For Markdown Pages"],"updatePoint":{"line":38,"column":26,"index":1531},"line":38,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Solid","For Markdown Pages"],"updatePoint":{"line":43,"column":44,"index":1773},"line":43,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Solid","For MDX Pages"],"updatePoint":{"line":50,"column":28,"index":2049},"line":50,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Solid","For MDX Pages"],"updatePoint":{"line":55,"column":26,"index":2266},"line":55,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Solid","For MDX Pages"],"updatePoint":{"line":60,"column":44,"index":2503},"line":60,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Svelte"],"updatePoint":{"line":12,"column":26,"index":327},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Svelte"],"updatePoint":{"line":22,"column":24,"index":830},"line":22,"code":"  it('Renders named slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#named').text().trim()).to.equal('Fallback / Named');\n  });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Preserves dash-case slot","suites":["Slots: Svelte"],"updatePoint":{"line":27,"column":30,"index":1041},"line":27,"code":"  it('Preserves dash-case slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n  });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Svelte","For Markdown Pages"],"updatePoint":{"line":33,"column":28,"index":1299},"line":33,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Svelte","For Markdown Pages"],"updatePoint":{"line":38,"column":26,"index":1521},"line":38,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Svelte","For Markdown Pages"],"updatePoint":{"line":43,"column":44,"index":1763},"line":43,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Svelte","For MDX Pages"],"updatePoint":{"line":50,"column":28,"index":2039},"line":50,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Svelte","For MDX Pages"],"updatePoint":{"line":55,"column":26,"index":2256},"line":55,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Preserves dash-case slot","suites":["Slots: Svelte","For MDX Pages"],"updatePoint":{"line":60,"column":32,"index":2481},"line":60,"code":"    it('Preserves dash-case slot', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Vue"],"updatePoint":{"line":12,"column":26,"index":321},"line":12,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Vue"],"updatePoint":{"line":22,"column":24,"index":824},"line":22,"code":"  it('Renders named slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#named').text().trim()).to.equal('Fallback / Named');\n  });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Preserves dash-case slot","suites":["Slots: Vue"],"updatePoint":{"line":27,"column":30,"index":1035},"line":27,"code":"  it('Preserves dash-case slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n  });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Vue","For Markdown Pages"],"updatePoint":{"line":33,"column":28,"index":1293},"line":33,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Vue","For Markdown Pages"],"updatePoint":{"line":38,"column":26,"index":1515},"line":38,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Vue","For Markdown Pages"],"updatePoint":{"line":43,"column":44,"index":1757},"line":43,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Vue","For MDX Pages"],"updatePoint":{"line":50,"column":28,"index":2033},"line":50,"code":"    it('Renders default slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#content').text().trim()).to.equal('Hello world!');\n    });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders named slot","suites":["Slots: Vue","For MDX Pages"],"updatePoint":{"line":55,"column":26,"index":2250},"line":55,"code":"    it('Renders named slot', async () => {\n      const html = await fixture.readFile('/mdx/index.html');\n      const $ = cheerio.load(html);\n      expect($('#named').text().trim()).to.equal('Fallback / Named');\n    });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Converts dash-case slot to camelCase","suites":["Slots: Vue","For MDX Pages"],"updatePoint":{"line":60,"column":44,"index":2487},"line":60,"code":"    it('Converts dash-case slot to camelCase', async () => {\n      const html = await fixture.readFile('/markdown/index.html');\n      const $ = cheerio.load(html);\n      expect($('#dash-case').text().trim()).to.equal('Fallback / Dash Case');\n    });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load a component","suites":["Solid component","build"],"updatePoint":{"line":15,"column":28,"index":408},"line":15,"code":"    it('Can load a component', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html); // test 1: Works\n\n      expect($('.hello')).to.have.lengthOf(1);\n    });","file":"solid-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Solid component","dev"],"updatePoint":{"line":31,"column":31,"index":844},"line":31,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"solid-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 page returned when a route does not match","suites":["404 and 500 pages"],"updatePoint":{"line":18,"column":51,"index":542},"line":18,"code":"  it('404 page returned when a route does not match', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/some/fake/route');\n    const response = await app.render(request);\n    expect(response.status).to.equal(404);\n    const html = await response.text();\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('Something went horribly wrong!');\n  });","file":"ssr-404-500-pages.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"500 page returned when there is an error","suites":["404 and 500 pages"],"updatePoint":{"line":27,"column":46,"index":970},"line":27,"code":"  it('500 page returned when there is an error', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/causes-error');\n    const response = await app.render(request);\n    expect(response.status).to.equal(500);\n    const html = await response.text();\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('This is an error page');\n  });","file":"ssr-404-500-pages.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Puts client files in the client folder","suites":["Integration buildConfig hook"],"updatePoint":{"line":66,"column":44,"index":2019},"line":66,"code":"  it('Puts client files in the client folder', async () => {\n    let data = await fixture.readFile('/.root/client/cars.json');\n    expect(data).to.not.be.undefined;\n  });","file":"ssr-adapter-build-config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Puts the server entry into the server folder","suites":["Integration buildConfig hook"],"updatePoint":{"line":70,"column":50,"index":2196},"line":70,"code":"  it('Puts the server entry into the server folder', async () => {\n    let data = await fixture.readFile('/.root/server/entry.mjs');\n    expect(data).to.not.be.undefined;\n  });","file":"ssr-adapter-build-config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Basic pages work","suites":["API routes in SSR"],"updatePoint":{"line":17,"column":22,"index":464},"line":17,"code":"  it('Basic pages work', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/');\n    const response = await app.render(request);\n    const html = await response.text();\n    expect(html).to.not.be.empty;\n  });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load the API route too","suites":["API routes in SSR"],"updatePoint":{"line":24,"column":32,"index":749},"line":24,"code":"  it('Can load the API route too', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/food.json');\n    const response = await app.render(request);\n    expect(response.status).to.equal(200);\n    expect(response.headers.get('Content-Type')).to.equal('application/json;charset=utf-8');\n    expect(response.headers.get('Content-Length')).to.not.be.empty;\n    const body = await response.json();\n    expect(body.length).to.equal(3);\n  });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can POST to API routes","suites":["API routes in SSR","API Routes - Dev"],"updatePoint":{"line":42,"column":30,"index":1451},"line":42,"code":"    it('Can POST to API routes', async () => {\n      const response = await fixture.fetch('/food.json', {\n        method: 'POST',\n        body: `some data`\n      });\n      expect(response.status).to.equal(200);\n      const text = await response.text();\n      expect(text).to.equal(`ok`);\n    });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Infer content type with charset for { body } shorthand","suites":["API routes in SSR","API Routes - Dev"],"updatePoint":{"line":51,"column":62,"index":1779},"line":51,"code":"    it('Infer content type with charset for { body } shorthand', async () => {\n      const response = await fixture.fetch('/food.json', {\n        method: 'GET'\n      });\n      expect(response.headers.get('Content-Type')).to.equal('application/json;charset=utf-8');\n    });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can set multiple headers of the same type","suites":["API routes in SSR","API Routes - Dev"],"updatePoint":{"line":57,"column":49,"index":2039},"line":57,"code":"    it('Can set multiple headers of the same type', async () => {\n      const response = await fixture.fetch('/login', {\n        method: 'POST'\n      });\n      const setCookie = response.headers.get('set-cookie');\n      expect(setCookie).to.equal('foo=foo; HttpOnly, bar=bar; HttpOnly');\n    });","file":"ssr-api-route.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Do not have to implement getStaticPaths","suites":["SSR Assets"],"updatePoint":{"line":17,"column":45,"index":477},"line":17,"code":"  it('Do not have to implement getStaticPaths', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    /** @type {Set<string>} */\n\n    const assets = app.manifest.assets;\n    expect(assets.size).to.equal(1);\n    expect(Array.from(assets)[0].endsWith('.css')).to.be.true;\n  });","file":"ssr-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Do not have to implement getStaticPaths","suites":["Dynamic pages in SSR"],"updatePoint":{"line":41,"column":45,"index":1241},"line":41,"code":"  it('Do not have to implement getStaticPaths', async () => {\n    const html = await fetchHTML('/123');\n    const $ = cheerioLoad(html);\n    expect($('h1').text()).to.equal('Item 123');\n  });","file":"ssr-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Includes page styles","suites":["Dynamic pages in SSR"],"updatePoint":{"line":46,"column":26,"index":1414},"line":46,"code":"  it('Includes page styles', async () => {\n    const html = await fetchHTML('/123');\n    const $ = cheerioLoad(html);\n    expect($('link').length).to.equal(1);\n  });","file":"ssr-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Dynamic API routes work","suites":["Dynamic pages in SSR"],"updatePoint":{"line":51,"column":29,"index":1583},"line":51,"code":"  it('Dynamic API routes work', async () => {\n    const json = await fetchJSON('/api/products/33');\n    expect(json.id).to.equal('33');\n  });","file":"ssr-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Public assets take priority","suites":["Dynamic pages in SSR"],"updatePoint":{"line":55,"column":33,"index":1729},"line":55,"code":"  it('Public assets take priority', async () => {\n    const favicon = await matchRoute('/favicon.ico');\n    expect(favicon).to.equal(undefined);\n  });","file":"ssr-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"import.meta.env.SSR is true","suites":["SSR Environment Variables"],"updatePoint":{"line":18,"column":33,"index":513},"line":18,"code":"  it('import.meta.env.SSR is true', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/ssr');\n    const response = await app.render(request);\n    const html = await response.text();\n    const $ = cheerio.load(html);\n    expect($('#ssr').text()).to.equal('true');\n  });","file":"ssr-env.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Inlined scripts get included","suites":["Hoisted scripts in SSR"],"updatePoint":{"line":27,"column":34,"index":793},"line":27,"code":"  it('Inlined scripts get included', async () => {\n    const html = await fetchHTML('/');\n    const $ = cheerioLoad(html);\n    expect($('script').length).to.equal(1);\n  });","file":"ssr-hoisted-script.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Using response.arrayBuffer() gets the right HTML","suites":["SSR with Large Array and client rendering"],"updatePoint":{"line":18,"column":54,"index":554},"line":18,"code":"  it('Using response.arrayBuffer() gets the right HTML', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/');\n    const response = await app.render(request);\n    const data = await response.arrayBuffer();\n    const html = new TextDecoder().decode(data);\n    const $ = cheerio.load(html);\n    expect($('head meta[name=\"viewport\"]')).to.have.a.lengthOf(1);\n    expect($('head link[rel=\"icon\"]')).to.have.a.lengthOf(1);\n    expect($('main')).to.have.a.lengthOf(1);\n    expect($('astro-island')).to.have.a.lengthOf(1);\n    expect($('h1').text()).to.equal('Hello, Solid!');\n  });","file":"ssr-large-array.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is able to load","suites":["Lit integration in SSR"],"updatePoint":{"line":27,"column":21,"index":773},"line":27,"code":"  it('Is able to load', async () => {\n    delete globalThis.window;\n    const html = await fetchHTML('/');\n    const $ = cheerioLoad(html);\n    expect($('#win').text()).to.equal('function');\n  });","file":"ssr-lit.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders markdown pages correctly","suites":["Markdown pages in SSR"],"updatePoint":{"line":27,"column":38,"index":790},"line":27,"code":"  it('Renders markdown pages correctly', async () => {\n    const html = await fetchHTML('/post');\n    const $ = cheerioLoad(html);\n    expect($('#subheading').text()).to.equal('Subheading');\n  });","file":"ssr-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Has the scripts in the page","suites":["Using the Partytown integration in SSR"],"updatePoint":{"line":18,"column":33,"index":543},"line":18,"code":"  it('Has the scripts in the page', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/');\n    const response = await app.render(request);\n    const html = await response.text();\n    const $ = cheerioLoad(html);\n    expect($('script')).to.have.a.lengthOf(1);\n  });","file":"ssr-partytown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"The partytown scripts are in the manifest","suites":["Using the Partytown integration in SSR"],"updatePoint":{"line":26,"column":47,"index":889},"line":26,"code":"  it('The partytown scripts are in the manifest', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    expect(app.manifest.assets).to.contain('/~partytown/partytown-sw.js');\n  });","file":"ssr-partytown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Returns a 302 status","suites":["Astro.redirect"],"updatePoint":{"line":17,"column":26,"index":464},"line":17,"code":"  it('Returns a 302 status', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/secret');\n    const response = await app.render(request);\n    expect(response.status).to.equal(302);\n    expect(response.headers.get('location')).to.equal('/login');\n  });","file":"ssr-redirect.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Gets the request pased in","suites":["Using Astro.request in SSR"],"updatePoint":{"line":18,"column":31,"index":527},"line":18,"code":"  it('Gets the request pased in', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/request');\n    const response = await app.render(request);\n    const html = await response.text();\n    const $ = cheerioLoad(html);\n    expect($('#origin').text()).to.equal('http://example.com');\n  });","file":"ssr-request.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"public file is copied over","suites":["Using Astro.request in SSR"],"updatePoint":{"line":26,"column":32,"index":882},"line":26,"code":"  it('public file is copied over', async () => {\n    const json = await fixture.readFile('/client/cars.json');\n    expect(json).to.not.be.undefined;\n  });","file":"ssr-request.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can set the status","suites":["Using Astro.response in SSR"],"updatePoint":{"line":18,"column":24,"index":522},"line":18,"code":"  it('Can set the status', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/status-code');\n    const response = await app.render(request);\n    expect(response.status).to.equal(404);\n  });","file":"ssr-response.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can set the statusText","suites":["Using Astro.response in SSR"],"updatePoint":{"line":24,"column":28,"index":783},"line":24,"code":"  it('Can set the statusText', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/status-code');\n    const response = await app.render(request);\n    expect(response.statusText).to.equal('Oops');\n  });","file":"ssr-response.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can add headers","suites":["Using Astro.response in SSR"],"updatePoint":{"line":30,"column":21,"index":1044},"line":30,"code":"  it('Can add headers', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    const request = new Request('http://example.com/some-header');\n    const response = await app.render(request);\n    const headers = response.headers;\n    expect(headers.get('one-two')).to.equal('three');\n    expect(headers.get('four-five')).to.equal('six');\n  });","file":"ssr-response.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Are included in the manifest.assets so that an adapter can know to serve static","suites":["SSR Hydrated component scripts"],"updatePoint":{"line":17,"column":85,"index":538},"line":17,"code":"  it('Are included in the manifest.assets so that an adapter can know to serve static', async () => {\n    const app = await fixture.loadTestAdapterApp();\n    /** @type {Set<string>} */\n\n    const assets = app.manifest.assets;\n    expect(assets.size).to.be.greaterThan(0);\n  });","file":"ssr-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is able to build successfully","suites":["Code component inside static build"],"updatePoint":{"line":12,"column":35,"index":372},"line":12,"code":"  it('Is able to build successfully', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre').length, 1, 'pre tag loaded');\n  });","file":"static-build-code-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"dir takes the URL path to the output directory","suites":["Static build: dir takes the URL path to the output directory"],"updatePoint":{"line":22,"column":52,"index":593},"line":22,"code":"  it('dir takes the URL path to the output directory', async () => {\n    const removeTrailingSlash = str => str.replace(/\\/$/, '');\n\n    expect(removeTrailingSlash(checkDir.toString())).to.be.equal(removeTrailingSlash(new URL('./fixtures/static-build-dir/dist', import.meta.url).toString()));\n  });","file":"static-build-dir.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build preact","suites":["Static build - frameworks"],"updatePoint":{"line":16,"column":22,"index":393},"line":16,"code":"  it('can build preact', async () => {\n    const html = await fixture.readFile('/preact/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build react","suites":["Static build - frameworks"],"updatePoint":{"line":20,"column":21,"index":536},"line":20,"code":"  it('can build react', async () => {\n    const html = await fixture.readFile('/react/index.html');\n    expect(html).to.be.a('string');\n  }); // SKIP: Lit polyfills the server in a way that breaks `sass` require/import","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build lit","suites":["Static build - frameworks"],"line":26,"code":"  it.skip('can build lit', async () => {","file":"static-build-frameworks.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"can build nested framework usage","suites":["Static build - frameworks"],"updatePoint":{"line":30,"column":38,"index":1001},"line":30,"code":"  it('can build nested framework usage', async () => {\n    const html = await fixture.readFile('/nested/index.html');\n    const $ = cheerio.load(html);\n    const counter = $('.nested-counter .counter');\n    expect(counter.length).to.equal(1, 'Found the counter');\n  });","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Pages routes have distURL","suites":["Static build: pages routes have distURL"],"updatePoint":{"line":23,"column":31,"index":651},"line":23,"code":"  it('Pages routes have distURL', async () => {\n    expect(checkRoutes).to.have.lengthOf.above(0, 'Pages not found: build end hook not being called');\n    checkRoutes.forEach(p => expect(p).to.have.property('distURL').that.is.a('URL', `${p.pathname} doesn't include distURL`));\n  });","file":"static-build-page-dist-url.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds pages in root","suites":["Static build - format: 'file'"],"updatePoint":{"line":17,"column":26,"index":447},"line":17,"code":"  it('Builds pages in root', async () => {\n    const html = await fixture.readFile('/one.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-page-url-format.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds pages in subfolders","suites":["Static build - format: 'file'"],"updatePoint":{"line":21,"column":32,"index":592},"line":21,"code":"  it('Builds pages in subfolders', async () => {\n    const html = await fixture.readFile('/sub/page.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-page-url-format.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .astro pages","suites":["Static build"],"updatePoint":{"line":42,"column":29,"index":958},"line":42,"code":"  it('Builds out .astro pages', async () => {\n    const html = await fixture.readFile('/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build pages using Astro.glob()","suites":["Static build"],"updatePoint":{"line":46,"column":40,"index":1113},"line":46,"code":"  it('can build pages using Astro.glob()', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html);\n    const link = $('.posts a');\n    const href = link.attr('href');\n    expect(href).to.be.equal('/subpath/posts/thoughts');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .md pages","suites":["Static build"],"updatePoint":{"line":53,"column":26,"index":1376},"line":53,"code":"  it('Builds out .md pages', async () => {\n    const html = await fixture.readFile('/posts/thoughts/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .json files","suites":["Static build"],"updatePoint":{"line":57,"column":28,"index":1534},"line":57,"code":"  it('Builds out .json files', async () => {\n    const content = await fixture.readFile('/company.json').then(text => JSON.parse(text));\n    expect(content.name).to.equal('Astro Technology Company');\n    expect(content.url).to.equal('https://astro.build/');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out async .json files","suites":["Static build"],"updatePoint":{"line":62,"column":34,"index":1804},"line":62,"code":"  it('Builds out async .json files', async () => {\n    const content = await fixture.readFile('/posts.json').then(text => JSON.parse(text));\n    expect(Array.isArray(content)).to.equal(true);\n    expect(content).deep.equal([{\n      filename: './posts/nested/more.md',\n      title: 'More post'\n    }, {\n      filename: './posts/thoughts.md',\n      title: 'Thoughts post'\n    }]);\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out dynamic .json files","suites":["Static build"],"updatePoint":{"line":73,"column":36,"index":2191},"line":73,"code":"  it('Builds out dynamic .json files', async () => {\n    const slugs = ['thing1', 'thing2'];\n\n    for (const slug of slugs) {\n      const content = await fixture.readFile(`/data/${slug}.json`).then(text => JSON.parse(text));\n      expect(content.name).to.equal('Astro Technology Company');\n      expect(content.url).to.equal('https://astro.build/');\n      expect(content.slug).to.equal(slug);\n    }\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Page level CSS is added","suites":["Static build","Page CSS"],"updatePoint":{"line":115,"column":31,"index":3623},"line":115,"code":"    it('Page level CSS is added', async () => {\n      const found = await findEvidence('/index.html');\n      expect(found).to.equal(true, 'Did not find page-level CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Included on the index page","suites":["Static build","Shared CSS"],"updatePoint":{"line":122,"column":34,"index":3915},"line":122,"code":"    it('Included on the index page', async () => {\n      const found = await findEvidence('/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Included on a md page","suites":["Static build","Shared CSS"],"updatePoint":{"line":126,"column":29,"index":4100},"line":126,"code":"    it('Included on a md page', async () => {\n      const found = await findEvidence('/posts/thoughts/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is included in the index CSS","suites":["Static build","CSS modules"],"updatePoint":{"line":133,"column":36,"index":4412},"line":133,"code":"    it('Is included in the index CSS', async () => {\n      const found = await findEvidence('/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS module code');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Get bundled together on the page","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":139,"column":40,"index":4651},"line":139,"code":"    it('Get bundled together on the page', async () => {\n      const html = await fixture.readFile('/hoisted/index.html');\n      const $ = cheerioLoad(html);\n      expect($('script[type=\"module\"]').length).to.equal(1, 'hoisted script added');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Do not get added to the wrong page","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":144,"column":42,"index":4904},"line":144,"code":"    it('Do not get added to the wrong page', async () => {\n      const hoistedHTML = await fixture.readFile('/hoisted/index.html');\n      const $ = cheerioLoad(hoistedHTML);\n      const href = $('script[type=\"module\"]').attr('src');\n      const indexHTML = await fixture.readFile('/index.html');\n      const $$ = cheerioLoad(indexHTML);\n      expect($$(`script[src=\"${href}\"]`).length).to.equal(0, 'no script added to different page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"honors ssr config","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":153,"column":23,"index":5335},"line":153,"code":"  it('honors ssr config', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerioLoad(html);\n    expect($('#ssr-config').text()).to.equal('testing');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"warns when accessing headers","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":158,"column":34,"index":5538},"line":158,"code":"  it('warns when accessing headers', async () => {\n    let found = false;\n\n    for (const log of logs) {\n      if (log.type === 'ssg' && /[hH]eaders are not exposed in static-site generation/.test(log.args[0])) {\n        found = true;\n      }\n    }\n\n    expect(found).to.equal(true, 'Found the log message');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Copies public files","suites":["Static build SSR"],"updatePoint":{"line":171,"column":25,"index":5885},"line":171,"code":"  it('Copies public files', async () => {\n    const fixture = await loadFixture({\n      root: './fixtures/static-build-ssr/'\n    });\n    await fixture.build();\n    const asset = await fixture.readFile('/client/nested/asset2.txt');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"builds to 404.html","suites":["Status Code Pages"],"updatePoint":{"line":12,"column":24,"index":311},"line":12,"code":"  it('builds to 404.html', async () => {\n    const html = await fixture.readFile('/404.html');\n    expect(html).to.be.ok;\n  });","file":"status-page.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Body is chunked","suites":["Streaming","Development"],"updatePoint":{"line":28,"column":23,"index":749},"line":28,"code":"    it('Body is chunked', async () => {\n      let res = await fixture.fetch('/');\n      let chunks = [];\n\n      for await (const bytes of res.body) {\n        let chunk = bytes.toString('utf-8');\n        chunks.push(chunk);\n      }\n\n      expect(chunks.length).to.be.greaterThan(1);\n    });","file":"streaming.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can get the full html body","suites":["Streaming","Production"],"updatePoint":{"line":44,"column":34,"index":1151},"line":44,"code":"    it('Can get the full html body', async () => {\n      const app = await fixture.loadTestAdapterApp();\n      const request = new Request('http://example.com/');\n      const response = await app.render(request);\n      const html = await response.text();\n      const $ = cheerio.load(html);\n      expect($('header h1')).to.have.a.lengthOf(1);\n      expect($('ul li')).to.have.a.lengthOf(10);\n    });","file":"streaming.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Body is chunked","suites":["Streaming","Production"],"updatePoint":{"line":53,"column":23,"index":1540},"line":53,"code":"    it('Body is chunked', async () => {\n      const app = await fixture.loadTestAdapterApp();\n      const request = new Request('http://example.com/');\n      const response = await app.render(request);\n      let chunks = [];\n      let decoder = new TextDecoder();\n\n      for await (const bytes of response.body) {\n        let chunk = decoder.decode(bytes);\n        chunks.push(chunk);\n      }\n\n      expect(chunks.length).to.be.greaterThan(1);\n    });","file":"streaming.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Body is chunked","suites":["Streaming disabled","Development"],"updatePoint":{"line":95,"column":23,"index":2616},"line":95,"code":"    it('Body is chunked', async () => {\n      let res = await fixture.fetch('/');\n      let chunks = [];\n\n      for await (const bytes of res.body) {\n        let chunk = bytes.toString('utf-8');\n        chunks.push(chunk);\n      }\n\n      expect(chunks.length).to.be.greaterThan(1);\n    });","file":"streaming.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can get the full html body","suites":["Streaming disabled","Production"],"updatePoint":{"line":114,"column":34,"index":3180},"line":114,"code":"    it('Can get the full html body', async () => {\n      const app = await fixture.loadTestAdapterApp(false);\n      const request = new Request('http://example.com/');\n      const response = await app.render(request);\n      expect(response.status).to.equal(200);\n      expect(response.headers.get('content-type')).to.equal('text/html');\n      expect(response.headers.has('content-length')).to.equal(true);\n      expect(parseInt(response.headers.get('content-length'))).to.be.greaterThan(0);\n      const html = await response.text();\n      const $ = cheerio.load(html);\n      expect($('header h1')).to.have.a.lengthOf(1);\n      expect($('ul li')).to.have.a.lengthOf(10);\n    });","file":"streaming.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with TypeScript","suites":["Svelte component","build"],"updatePoint":{"line":15,"column":29,"index":411},"line":15,"code":"    it('Works with TypeScript', async () => {\n      const html = await fixture.readFile('/typescript/index.html');\n      const $ = cheerio.load(html);\n      expect($('#svelte-ts').text()).to.equal('Hello, TypeScript');\n    });","file":"svelte-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with custom Svelte config","suites":["Svelte component","build"],"updatePoint":{"line":20,"column":39,"index":648},"line":20,"code":"    it('Works with custom Svelte config', async () => {\n      const html = await fixture.readFile('/typescript/index.html');\n      const $ = cheerio.load(html);\n      expect($('#svelte-custom-ext').text()).to.equal('Hello, Custom Extensions');\n    });","file":"svelte-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Svelte component","dev"],"updatePoint":{"line":35,"column":31,"index":1113},"line":35,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"svelte-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS in src/styles","suites":["Tailwind","build"],"updatePoint":{"line":23,"column":34,"index":774},"line":23,"code":"    it('resolves CSS in src/styles', async () => {\n      expect(bundledCSS, 'includes used component classes').to.match(/\\.bg-purple-600{/); // tests a random tailwind class that isn't used on the page\n\n      expect(bundledCSS, 'purges unused classes').not.to.match(/\\.bg-blue-600{/); // tailwind escapes colons, `lg:py-3` compiles to `lg\\:py-3`\n\n      expect(bundledCSS, 'includes responsive classes').to.match(/\\.lg\\\\:py-3{/); // tailwind escapes brackets, `font-[900]` compiles to `font-\\[900\\]`\n\n      expect(bundledCSS, 'supports arbitrary value classes').to.match(/\\.font-\\\\\\[900\\\\\\]{/); // custom theme colors were included\n\n      expect(bundledCSS, 'includes custom theme colors').to.match(/\\.text-midnight{/);\n      expect(bundledCSS, 'includes custom theme colors').to.match(/\\.bg-dawn{/);\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"maintains classes in HTML","suites":["Tailwind","build"],"updatePoint":{"line":35,"column":33,"index":1581},"line":35,"code":"    it('maintains classes in HTML', async () => {\n      const button = $('button');\n      expect(button.hasClass('text-white'), 'basic class').to.be.true;\n      expect(button.hasClass('lg:py-3'), 'responsive class').to.be.true;\n      expect(button.hasClass('font-[900]', 'arbitrary value')).to.be.true;\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"handles complex classes in HTML","suites":["Tailwind","build"],"updatePoint":{"line":41,"column":39,"index":1898},"line":41,"code":"    it('handles complex classes in HTML', async () => {\n      const button = $('#complex');\n      expect(button.hasClass('w-10/12'), 'solidus').to.be.true;\n      expect(button.hasClass('2xl:w-[80%]'), 'complex class').to.be.true;\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"handles Markdown pages","suites":["Tailwind","build"],"updatePoint":{"line":46,"column":30,"index":2127},"line":46,"code":"    it('handles Markdown pages', async () => {\n      const html = await fixture.readFile('/markdown-page/index.html');\n      const $md = cheerio.load(html);\n      const bundledCSSHREF = $md('link[rel=stylesheet][href^=/assets/]').attr('href');\n      const mdBundledCSS = await fixture.readFile(bundledCSSHREF.replace(/^\\/?/, '/'));\n      expect(mdBundledCSS, 'includes used component classes').to.match(/\\.bg-purple-600{/);\n    });","file":"tailwindcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows importing types from \"astro\"","suites":["Type Imports"],"updatePoint":{"line":11,"column":41,"index":310},"line":11,"code":"  it('Allows importing types from \"astro\"', async () => {\n    // if the build passes then the test succeeds\n    expect(true).to.be.true;\n  });","file":"type-imports.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is able to build with the slot missing","suites":["Unused slot"],"updatePoint":{"line":12,"column":44,"index":342},"line":12,"code":"  it('is able to build with the slot missing', async () => {\n    let html = await fixture.readFile('/index.html');\n    let $ = cheerio.load(html); // No children, slot rendered as empty\n\n    expect($('body p').children().length).to.equal(0);\n  });","file":"unused-slot.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Vue","suites":["Vue component","build"],"updatePoint":{"line":15,"column":20,"index":396},"line":15,"code":"    it('Can load Vue', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const allPreValues = $('pre').toArray().map(el => $(el).text()); // test 1: renders all components correctly\n\n      expect(allPreValues).to.deep.equal(['0', '1', '1', '1', '10', '100', '1000']); // test 2: renders 3 <astro-island>s\n\n      expect($('astro-island')).to.have.lengthOf(6); // test 3: all <astro-island>s have uid attributes\n\n      expect($('astro-island[uid]')).to.have.lengthOf(6); // test 4: treats <my-button> as a custom element\n\n      expect($('my-button')).to.have.lengthOf(7); // test 5: components with identical render output and props have been deduplicated\n\n      const uniqueRootUIDs = $('astro-island').map((i, el) => $(el).attr('uid'));\n      expect(new Set(uniqueRootUIDs).size).to.equal(5);\n    });","file":"vue-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Vue component","dev"],"updatePoint":{"line":41,"column":31,"index":1493},"line":41,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"vue-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"should prompt for directory when none is provided","suites":["[create-astro] select directory"],"updatePoint":{"line":11,"column":55,"index":489},"line":11,"code":"  it('should prompt for directory when none is provided', function () {\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout\n      } = setup();\n      stdout.on('data', chunk => {\n        if (chunk.includes(PROMPT_MESSAGES.directory)) {\n          resolve();\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should NOT proceed on a non-empty directory","suites":["[create-astro] select directory"],"updatePoint":{"line":23,"column":49,"index":793},"line":23,"code":"  it('should NOT proceed on a non-empty directory', function () {\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout\n      } = setup([inputs.nonEmptyDir]);\n      stdout.on('data', chunk => {\n        if (chunk.includes(PROMPT_MESSAGES.directory)) {\n          resolve();\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should proceed on an empty directory","suites":["[create-astro] select directory"],"updatePoint":{"line":35,"column":42,"index":1110},"line":35,"code":"  it('should proceed on an empty directory', async function () {\n    const resolvedEmptyDirPath = path.resolve(testDir, inputs.emptyDir);\n\n    if (!existsSync(resolvedEmptyDirPath)) {\n      await promises.mkdir(resolvedEmptyDirPath);\n    }\n\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout\n      } = setup([inputs.emptyDir]);\n      stdout.on('data', chunk => {\n        if (chunk.includes(PROMPT_MESSAGES.template)) {\n          resolve();\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should proceed when directory does not exist","suites":["[create-astro] select directory"],"updatePoint":{"line":53,"column":50,"index":1613},"line":53,"code":"  it('should proceed when directory does not exist', function () {\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout\n      } = setup([inputs.nonexistentDir]);\n      stdout.on('data', chunk => {\n        if (chunk.includes(PROMPT_MESSAGES.template)) {\n          resolve();\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"},{"name":"should error on bad directory selection in prompt","suites":["[create-astro] select directory"],"updatePoint":{"line":65,"column":55,"index":1945},"line":65,"code":"  it('should error on bad directory selection in prompt', function () {\n    return promiseWithTimeout(resolve => {\n      const {\n        stdout,\n        stdin\n      } = setup();\n      stdout.on('data', chunk => {\n        if (chunk.includes('is not empty!')) {\n          resolve();\n        }\n\n        if (chunk.includes(PROMPT_MESSAGES.directory)) {\n          stdin.write(`${inputs.nonEmptyDir}\\x0D`);\n        }\n      });\n    });\n  });","file":"directory-step.test.js","skipped":false,"dir":"packages/create-astro/test"}]}