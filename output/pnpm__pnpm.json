{
    "repo": "pnpm/pnpm",
    "url": "https://github.com/pnpm/pnpm",
    "branch": "main",
    "configs": [
        {
            "package": "@pnpm/audit",
            "lang": "ts",
            "dir": "packages/audit/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/cafs",
            "lang": "ts",
            "dir": "packages/cafs/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/client",
            "lang": "ts",
            "dir": "packages/client/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/config",
            "lang": "ts",
            "dir": "packages/config/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/core",
            "lang": "ts",
            "dir": "packages/core/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/default-reporter",
            "lang": "ts",
            "dir": "packages/default-reporter/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/default-resolver",
            "lang": "ts",
            "dir": "packages/default-resolver/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "dependencies-hierarchy",
            "lang": "ts",
            "dir": "packages/dependencies-hierarchy/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "dependency-path",
            "lang": "ts",
            "dir": "packages/dependency-path/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/directory-fetcher",
            "lang": "ts",
            "dir": "packages/directory-fetcher/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/exportable-manifest",
            "lang": "ts",
            "dir": "packages/exportable-manifest/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/fetch",
            "lang": "ts",
            "dir": "packages/fetch/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/file-reporter",
            "lang": "ts",
            "dir": "packages/file-reporter/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/filter-lockfile",
            "lang": "ts",
            "dir": "packages/filter-lockfile/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/filter-workspace-packages",
            "lang": "ts",
            "dir": "packages/filter-workspace-packages/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "find-packages",
            "lang": "ts",
            "dir": "packages/find-packages/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/find-workspace-dir",
            "lang": "ts",
            "dir": "packages/find-workspace-dir/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/find-workspace-packages",
            "lang": "ts",
            "dir": "packages/find-workspace-packages/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/git-fetcher",
            "lang": "ts",
            "dir": "packages/git-fetcher/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/git-resolver",
            "lang": "ts",
            "dir": "packages/git-resolver/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/global-bin-dir",
            "lang": "ts",
            "dir": "packages/global-bin-dir/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/headless",
            "lang": "ts",
            "dir": "packages/headless/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/lifecycle",
            "lang": "ts",
            "dir": "packages/lifecycle/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/link-bins",
            "lang": "ts",
            "dir": "packages/link-bins/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/list",
            "lang": "ts",
            "dir": "packages/list/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/local-resolver",
            "lang": "ts",
            "dir": "packages/local-resolver/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/lockfile-file",
            "lang": "ts",
            "dir": "packages/lockfile-file/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/lockfile-to-pnp",
            "lang": "ts",
            "dir": "packages/lockfile-to-pnp/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/lockfile-utils",
            "lang": "ts",
            "dir": "packages/lockfile-utils/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/make-dedicated-lockfile",
            "lang": "ts",
            "dir": "packages/make-dedicated-lockfile/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/manifest-utils",
            "lang": "ts",
            "dir": "packages/manifest-utils/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/matcher",
            "lang": "ts",
            "dir": "packages/matcher/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/merge-lockfile-changes",
            "lang": "ts",
            "dir": "packages/merge-lockfile-changes/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/modules-yaml",
            "lang": "ts",
            "dir": "packages/modules-yaml/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/mount-modules",
            "lang": "ts",
            "dir": "packages/mount-modules/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/npm-registry-agent",
            "lang": "ts",
            "dir": "packages/npm-registry-agent/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/npm-resolver",
            "lang": "ts",
            "dir": "packages/npm-resolver/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/outdated",
            "lang": "ts",
            "dir": "packages/outdated/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/package-bins",
            "lang": "ts",
            "dir": "packages/package-bins/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/package-is-installable",
            "lang": "ts",
            "dir": "packages/package-is-installable/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/package-requester",
            "lang": "ts",
            "dir": "packages/package-requester/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/package-store",
            "lang": "ts",
            "dir": "packages/package-store/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/parse-cli-args",
            "lang": "ts",
            "dir": "packages/parse-cli-args/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/parse-overrides",
            "lang": "ts",
            "dir": "packages/parse-overrides/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/pick-registry-for-package",
            "lang": "ts",
            "dir": "packages/pick-registry-for-package/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pkgs-graph",
            "lang": "ts",
            "dir": "packages/pkgs-graph/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/plugin-commands-audit",
            "lang": "ts",
            "dir": "packages/plugin-commands-audit/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/plugin-commands-env",
            "lang": "ts",
            "dir": "packages/plugin-commands-env/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/plugin-commands-installation",
            "lang": "ts",
            "dir": "packages/plugin-commands-installation/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/plugin-commands-listing",
            "lang": "ts",
            "dir": "packages/plugin-commands-listing/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/plugin-commands-outdated",
            "lang": "ts",
            "dir": "packages/plugin-commands-outdated/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/plugin-commands-publishing",
            "lang": "ts",
            "dir": "packages/plugin-commands-publishing/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/plugin-commands-rebuild",
            "lang": "ts",
            "dir": "packages/plugin-commands-rebuild/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/plugin-commands-script-runners",
            "lang": "ts",
            "dir": "packages/plugin-commands-script-runners/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/plugin-commands-setup",
            "lang": "ts",
            "dir": "packages/plugin-commands-setup/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/plugin-commands-store",
            "lang": "ts",
            "dir": "packages/plugin-commands-store/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "pnpm",
            "lang": "ts",
            "dir": "packages/pnpm/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/pnpmfile",
            "lang": "ts",
            "dir": "packages/pnpmfile/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/prune-lockfile",
            "lang": "ts",
            "dir": "packages/prune-lockfile/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/read-package-json",
            "lang": "ts",
            "dir": "packages/read-package-json/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/read-project-manifest",
            "lang": "ts",
            "dir": "packages/read-project-manifest/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/render-peer-issues",
            "lang": "ts",
            "dir": "packages/render-peer-issues/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/resolve-dependencies",
            "lang": "ts",
            "dir": "packages/resolve-dependencies/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@pnpm/server",
            "lang": "ts",
            "dir": "packages/server/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/tarball-fetcher",
            "lang": "ts",
            "dir": "packages/tarball-fetcher/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/tarball-resolver",
            "lang": "ts",
            "dir": "packages/tarball-resolver/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/which-version-is-pinned",
            "lang": "ts",
            "dir": "packages/which-version-is-pinned/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/write-project-manifest",
            "lang": "ts",
            "dir": "packages/write-project-manifest/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/assert-project",
            "lang": "ts",
            "dir": "privatePackages/assert-project/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@pnpm/assert-store",
            "lang": "ts",
            "dir": "privatePackages/assert-store/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "lockfileToAuditTree()",
            "suites": [
                "audit"
            ],
            "updatePoint": {
                "line": 8,
                "column": 29
            },
            "line": 8,
            "code": "  test('lockfileToAuditTree()', () => {\n    expect(lockfileToAuditTree({\n      importers: {\n        '.': {\n          dependencies: {\n            foo: '1.0.0',\n          },\n          specifiers: {\n            foo: '^1.0.0',\n          },\n        },\n      },\n      lockfileVersion: LOCKFILE_VERSION,\n      packages: {\n        '/bar/1.0.0': {\n          resolution: {\n            integrity: 'bar-integrity',\n          },\n        },\n        '/foo/1.0.0': {\n          dependencies: {\n            bar: '1.0.0',\n          },\n          resolution: {\n            integrity: 'foo-integrity',\n          },\n        },\n      },\n    })).toEqual({\n      name: undefined,\n      version: undefined,\n\n      dependencies: {\n        '.': {\n          dependencies: {\n            foo: {\n              dependencies: {\n                bar: {\n                  dev: false,\n                  integrity: 'bar-integrity',\n                  version: '1.0.0',\n                },\n              },\n              dev: false,\n              integrity: 'foo-integrity',\n              requires: {\n                bar: '1.0.0',\n              },\n              version: '1.0.0',\n            },\n          },\n          requires: {\n            foo: '1.0.0',\n          },\n          version: '0.0.0',\n        },\n      },\n      dev: false,\n      install: [],\n      integrity: undefined,\n      metadata: {},\n      remove: [],\n      requires: { '.': '0.0.0' },\n    })\n  })",
            "file": "index.ts",
            "skipped": false,
            "dir": "packages/audit/test"
        },
        {
            "name": "an error is thrown if the audit endpoint responds with a non-OK code",
            "suites": [
                "audit"
            ],
            "updatePoint": {
                "line": 74,
                "column": 76
            },
            "line": 74,
            "code": "  test('an error is thrown if the audit endpoint responds with a non-OK code', async () => {\n    const registry = 'http://registry.registry/'\n    const getAuthHeader = () => undefined\n    nock(registry, {\n      badheaders: ['authorization'],\n    })\n      .post('/-/npm/v1/security/audits')\n      .reply(500, { message: 'Something bad happened' })\n\n    let err!: PnpmError\n    try {\n      await audit({\n        importers: {},\n        lockfileVersion: 5,\n      },\n      getAuthHeader,\n      {\n        registry,\n        retry: {\n          retries: 0,\n        },\n      })\n    } catch (_err: any) { // eslint-disable-line\n      err = _err\n    }\n\n    expect(err).toBeDefined()\n    expect(err.code).toEqual('ERR_PNPM_AUDIT_BAD_RESPONSE')\n    expect(err.message).toEqual('The audit endpoint (at http://registry.registry/-/npm/v1/security/audits) responded with 500: {\"message\":\"Something bad happened\"}')\n  })",
            "file": "index.ts",
            "skipped": false,
            "dir": "packages/audit/test"
        },
        {
            "name": "unpack",
            "suites": [
                "cafs"
            ],
            "updatePoint": {
                "line": 13,
                "column": 12
            },
            "line": 13,
            "code": "  it('unpack', async () => {\n    const dest = tempy.directory()\n    const cafs = createCafs(dest)\n    const filesIndex = await cafs.addFilesFromTarball(\n      createReadStream(path.join(__dirname, '../__fixtures__/node-gyp-6.1.0.tgz'))\n    )\n    expect(Object.keys(filesIndex)).toHaveLength(121)\n    const pkgFile = filesIndex['package.json']\n    expect(pkgFile.size).toBe(1121)\n    expect(pkgFile.mode).toBe(420)\n    const { checkedAt, integrity } = await pkgFile.writeResult\n    expect(typeof checkedAt).toBe('number')\n    expect(integrity.toString()).toBe('sha512-8xCvrlC7W3TlwXxetv5CZTi53szYhmT7tmpXF/ttNthtTR9TC7Y7WJFPmJToHaSQ4uObuZyOARdOJYNYuTSbXA==')\n  })",
            "file": "index.ts",
            "skipped": false,
            "dir": "packages/cafs/test"
        },
        {
            "name": "replaces an already existing file, if the integrity of it was broken",
            "suites": [
                "cafs"
            ],
            "updatePoint": {
                "line": 28,
                "column": 74
            },
            "line": 28,
            "code": "  it('replaces an already existing file, if the integrity of it was broken', async () => {\n    const storeDir = tempy.directory()\n    const srcDir = path.join(__dirname, 'fixtures/one-file')\n    const manifest = pDefer<DependencyManifest>()\n    const addFiles = async () => createCafs(storeDir).addFilesFromDir(srcDir, manifest)\n\n    let filesIndex = await addFiles()\n    const { integrity } = await filesIndex['foo.txt'].writeResult\n\n    // Modifying the file in the store\n    const filePath = getFilePathInCafs(storeDir, integrity, 'nonexec')\n    await fs.appendFile(filePath, 'bar')\n\n    filesIndex = await addFiles()\n    await filesIndex['foo.txt'].writeResult\n    expect(await fs.readFile(filePath, 'utf8')).toBe('foo\\n')\n    expect(await manifest.promise).toEqual(undefined)\n  })",
            "file": "index.ts",
            "skipped": false,
            "dir": "packages/cafs/test"
        },
        {
            "name": "doesn't fail if file was removed from the store",
            "suites": [
                "checkFilesIntegrity()"
            ],
            "updatePoint": {
                "line": 49,
                "column": 53
            },
            "line": 49,
            "code": "  it(\"doesn't fail if file was removed from the store\", async () => {\n    const storeDir = tempy.directory()\n    expect(await checkFilesIntegrity(storeDir, {\n      foo: {\n        integrity: 'sha512-8xCvrlC7W3TlwXxetv5CZTi53szYhmT7tmpXF/ttNthtTR9TC7Y7WJFPmJToHaSQ4uObuZyOARdOJYNYuTSbXA==',\n        mode: 420,\n        size: 10,\n      },\n    })).toBeFalsy()\n  })",
            "file": "index.ts",
            "skipped": false,
            "dir": "packages/cafs/test"
        },
        {
            "name": "file names are normalized when unpacking a tarball",
            "suites": [
                "checkFilesIntegrity()"
            ],
            "updatePoint": {
                "line": 61,
                "column": 56
            },
            "line": 61,
            "code": "test('file names are normalized when unpacking a tarball', async () => {\n  const dest = tempy.directory()\n  const cafs = createCafs(dest)\n  const filesIndex = await cafs.addFilesFromTarball(\n    createReadStream(path.join(__dirname, 'fixtures/colorize-semver-diff.tgz'))\n  )\n  expect(Object.keys(filesIndex).sort()).toStrictEqual([\n    'LICENSE',\n    'README.md',\n    'lib/index.d.ts',\n    'lib/index.js',\n    'package.json',\n  ])\n})",
            "file": "index.ts",
            "skipped": false,
            "dir": "packages/cafs/test"
        },
        {
            "name": "createClient()",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 20
            },
            "line": 4,
            "code": "test('createClient()', () => {\n  const client = createClient({\n    authConfig: { registry: 'https://registry.npmjs.org/' },\n    cacheDir: '',\n  })\n  expect(typeof client === 'object').toBeTruthy()\n})",
            "file": "index.ts",
            "skipped": false,
            "dir": "packages/client/test"
        },
        {
            "name": "createResolver()",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 22
            },
            "line": 12,
            "code": "test('createResolver()', () => {\n  const resolver = createResolver({\n    authConfig: { registry: 'https://registry.npmjs.org/' },\n    cacheDir: '',\n  })\n  expect(typeof resolver === 'function').toBeTruthy()\n})",
            "file": "index.ts",
            "skipped": false,
            "dir": "packages/client/test"
        },
        {
            "name": "default workspace concurrency",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 35
            },
            "line": 6,
            "code": "test('default workspace concurrency', () => {\n  const n = getWorkspaceConcurrency(undefined)\n\n  expect(n).toBe(4)\n})",
            "file": "concurrency.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "get back positive amount",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 30
            },
            "line": 12,
            "code": "test('get back positive amount', () => {\n  expect(getWorkspaceConcurrency(5)).toBe(5)\n})",
            "file": "concurrency.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "match host cores amount",
            "suites": [],
            "updatePoint": {
                "line": 16,
                "column": 29
            },
            "line": 16,
            "code": "test('match host cores amount', () => {\n  const n = getWorkspaceConcurrency(0)\n\n  expect(n).toBe(hostCores)\n})",
            "file": "concurrency.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "host cores minus X",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 24
            },
            "line": 22,
            "code": "test('host cores minus X', () => {\n  const n1 = getWorkspaceConcurrency(-1)\n\n  expect(n1).toBe(Math.max(1, hostCores - 1))\n\n  const n2 = getWorkspaceConcurrency(-9999)\n\n  expect(n2).toBe(1)\n})",
            "file": "concurrency.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "getCacheDir()",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 19
            },
            "line": 5,
            "code": "test('getCacheDir()', () => {\n  expect(getCacheDir({\n    env: {\n      XDG_CACHE_HOME: '/home/foo/cache',\n    },\n    platform: 'linux',\n  })).toBe(path.join('/home/foo/cache', 'pnpm'))\n  expect(getCacheDir({\n    env: {},\n    platform: 'linux',\n  })).toBe(path.join(os.homedir(), '.cache/pnpm'))\n  expect(getCacheDir({\n    env: {},\n    platform: 'darwin',\n  })).toBe(path.join(os.homedir(), 'Library/Caches/pnpm'))\n  expect(getCacheDir({\n    env: {\n      LOCALAPPDATA: '/localappdata',\n    },\n    platform: 'win32',\n  })).toBe(path.join('/localappdata', 'pnpm-cache'))\n  expect(getCacheDir({\n    env: {},\n    platform: 'win32',\n  })).toBe(path.join(os.homedir(), '.pnpm-cache'))\n})",
            "file": "dirs.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "getStateDir()",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 19
            },
            "line": 32,
            "code": "test('getStateDir()', () => {\n  expect(getStateDir({\n    env: {\n      XDG_STATE_HOME: '/home/foo/state',\n    },\n    platform: 'linux',\n  })).toBe(path.join('/home/foo/state', 'pnpm'))\n  expect(getStateDir({\n    env: {},\n    platform: 'linux',\n  })).toBe(path.join(os.homedir(), '.local/state/pnpm'))\n  expect(getStateDir({\n    env: {},\n    platform: 'darwin',\n  })).toBe(path.join(os.homedir(), '.pnpm-state'))\n  expect(getStateDir({\n    env: {\n      LOCALAPPDATA: '/localappdata',\n    },\n    platform: 'win32',\n  })).toBe(path.join('/localappdata', 'pnpm-state'))\n  expect(getStateDir({\n    env: {},\n    platform: 'win32',\n  })).toBe(path.join(os.homedir(), '.pnpm-state'))\n})",
            "file": "dirs.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "getDataDir()",
            "suites": [],
            "updatePoint": {
                "line": 59,
                "column": 18
            },
            "line": 59,
            "code": "test('getDataDir()', () => {\n  expect(getDataDir({\n    env: {\n      XDG_DATA_HOME: '/home/foo/data',\n    },\n    platform: 'linux',\n  })).toBe(path.join('/home/foo/data', 'pnpm'))\n  expect(getDataDir({\n    env: {},\n    platform: 'linux',\n  })).toBe(path.join(os.homedir(), '.local/share/pnpm'))\n  expect(getDataDir({\n    env: {},\n    platform: 'darwin',\n  })).toBe(path.join(os.homedir(), 'Library/pnpm'))\n  expect(getDataDir({\n    env: {\n      LOCALAPPDATA: '/localappdata',\n    },\n    platform: 'win32',\n  })).toBe(path.join('/localappdata', 'pnpm'))\n  expect(getDataDir({\n    env: {},\n    platform: 'win32',\n  })).toBe(path.join(os.homedir(), '.pnpm'))\n})",
            "file": "dirs.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "getConfigDir()",
            "suites": [],
            "updatePoint": {
                "line": 86,
                "column": 20
            },
            "line": 86,
            "code": "test('getConfigDir()', () => {\n  expect(getConfigDir({\n    env: {\n      XDG_CONFIG_HOME: '/home/foo/config',\n    },\n    platform: 'linux',\n  })).toBe(path.join('/home/foo/config', 'pnpm'))\n  expect(getConfigDir({\n    env: {},\n    platform: 'linux',\n  })).toBe(path.join(os.homedir(), '.config/pnpm'))\n  expect(getConfigDir({\n    env: {},\n    platform: 'darwin',\n  })).toBe(path.join(os.homedir(), 'Library/Preferences/pnpm'))\n  expect(getConfigDir({\n    env: {\n      LOCALAPPDATA: '/localappdata',\n    },\n    platform: 'win32',\n  })).toBe(path.join('/localappdata', 'pnpm/config'))\n  expect(getConfigDir({\n    env: {},\n    platform: 'win32',\n  })).toBe(path.join(os.homedir(), '.config/pnpm'))\n})",
            "file": "dirs.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "respects global-bin-dir in npmrc",
            "suites": [],
            "updatePoint": {
                "line": 37,
                "column": 38
            },
            "line": 37,
            "code": "test('respects global-bin-dir in npmrc', async () => {\n  const { config } = await getConfig({\n    cliOptions: {\n      global: true,\n    },\n    env: {\n      [pathName]: `${globalBinDir}${path.delimiter}${process.env[pathName]!}`,\n    },\n    packageManager: {\n      name: 'pnpm',\n      version: '1.0.0',\n    },\n  })\n  expect(config.bin).toBe(globalBinDir)\n})",
            "file": "globalBinDir.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "respects global-bin-dir rather than dir",
            "suites": [],
            "updatePoint": {
                "line": 53,
                "column": 45
            },
            "line": 53,
            "code": "test('respects global-bin-dir rather than dir', async () => {\n  const { config } = await getConfig({\n    cliOptions: {\n      global: true,\n      dir: __dirname,\n    },\n    env: {\n      [pathName]: `${globalBinDir}${path.delimiter}${process.env[pathName]!}`,\n    },\n    packageManager: {\n      name: 'pnpm',\n      version: '1.0.0',\n    },\n  })\n  expect(config.bin).toBe(globalBinDir)\n})",
            "file": "globalBinDir.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "an exception is thrown when the global dir is not in PATH",
            "suites": [],
            "updatePoint": {
                "line": 70,
                "column": 63
            },
            "line": 70,
            "code": "test('an exception is thrown when the global dir is not in PATH', async () => {\n  await expect(\n    getConfig({\n      cliOptions: {\n        global: true,\n        dir: __dirname,\n      },\n      env: {\n        [pathName]: process.env[pathName],\n      },\n      packageManager: {\n        name: 'pnpm',\n        version: '1.0.0',\n      },\n    })\n  ).rejects.toThrow(/is not in PATH/)\n})",
            "file": "globalBinDir.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "the global directory may be a symlink to a directory that is in PATH",
            "suites": [],
            "updatePoint": {
                "line": 88,
                "column": 74
            },
            "line": 88,
            "code": "test('the global directory may be a symlink to a directory that is in PATH', async () => {\n  const tmp = tempDir()\n  const globalBinDirTarget = path.join(tmp, 'global-target')\n  fs.mkdirSync(globalBinDirTarget)\n  const globalBinDirSymlink = path.join(tmp, 'global-symlink')\n  await symlinkDir(globalBinDirTarget, globalBinDirSymlink)\n  const { config } = await getConfig({\n    cliOptions: {\n      global: true,\n      'global-bin-dir': globalBinDirSymlink,\n      dir: __dirname,\n    },\n    env: {\n      [pathName]: `${globalBinDirTarget}${path.delimiter}${process.env[pathName]!}`,\n    },\n    packageManager: {\n      name: 'pnpm',\n      version: '1.0.0',\n    },\n  })\n  expect(config.bin).toBe(globalBinDirSymlink)\n})",
            "file": "globalBinDir.test.ts",
            "skipped": false,
            "dir": "packages/config/test"
        },
        {
            "name": "allProjectsAreUpToDate(): works with packages linked through the workspace protocol using relative path",
            "suites": [],
            "updatePoint": {
                "line": 16,
                "column": 109
            },
            "line": 16,
            "code": "test('allProjectsAreUpToDate(): works with packages linked through the workspace protocol using relative path', async () => {\n  expect(await allProjectsAreUpToDate([\n    {\n      buildIndex: 0,\n      id: 'bar',\n      manifest: {\n        dependencies: {\n          foo: 'workspace:../foo',\n        },\n      },\n      rootDir: 'bar',\n    },\n    {\n      buildIndex: 0,\n      id: 'foo',\n      manifest: fooManifest,\n      rootDir: 'foo',\n    },\n  ], {\n    autoInstallPeers: false,\n    linkWorkspacePackages: true,\n    wantedLockfile: {\n      importers: {\n        bar: {\n          dependencies: {\n            foo: 'link:../foo',\n          },\n          specifiers: {\n            foo: 'workspace:../foo',\n          },\n        },\n        foo: {\n          specifiers: {},\n        },\n      },\n      lockfileVersion: 5,\n    },\n    workspacePackages,\n  })).toBeTruthy()\n})",
            "file": "allProjectsAreUpToDate.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "allProjectsAreUpToDate(): works with aliased local dependencies",
            "suites": [],
            "updatePoint": {
                "line": 57,
                "column": 69
            },
            "line": 57,
            "code": "test('allProjectsAreUpToDate(): works with aliased local dependencies', async () => {\n  expect(await allProjectsAreUpToDate([\n    {\n      buildIndex: 0,\n      id: 'bar',\n      manifest: {\n        dependencies: {\n          alias: 'npm:foo',\n        },\n      },\n      rootDir: 'bar',\n    },\n    {\n      buildIndex: 0,\n      id: 'foo',\n      manifest: fooManifest,\n      rootDir: 'foo',\n    },\n  ], {\n    autoInstallPeers: false,\n    linkWorkspacePackages: true,\n    wantedLockfile: {\n      importers: {\n        bar: {\n          dependencies: {\n            alias: 'link:../foo',\n          },\n          specifiers: {\n            alias: 'npm:foo',\n          },\n        },\n        foo: {\n          specifiers: {},\n        },\n      },\n      lockfileVersion: 5,\n    },\n    workspacePackages,\n  })).toBeTruthy()\n})",
            "file": "allProjectsAreUpToDate.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "allProjectsAreUpToDate(): works with aliased local dependencies that specify versions",
            "suites": [],
            "updatePoint": {
                "line": 98,
                "column": 91
            },
            "line": 98,
            "code": "test('allProjectsAreUpToDate(): works with aliased local dependencies that specify versions', async () => {\n  expect(await allProjectsAreUpToDate([\n    {\n      buildIndex: 0,\n      id: 'bar',\n      manifest: {\n        dependencies: {\n          alias: 'npm:foo@1',\n        },\n      },\n      rootDir: 'bar',\n    },\n    {\n      buildIndex: 0,\n      id: 'foo',\n      manifest: fooManifest,\n      rootDir: 'foo',\n    },\n  ], {\n    autoInstallPeers: false,\n    linkWorkspacePackages: true,\n    wantedLockfile: {\n      importers: {\n        bar: {\n          dependencies: {\n            alias: 'link:../foo',\n          },\n          specifiers: {\n            alias: 'npm:foo@1',\n          },\n        },\n        foo: {\n          specifiers: {},\n        },\n      },\n      lockfileVersion: 5,\n    },\n    workspacePackages,\n  })).toBeTruthy()\n})",
            "file": "allProjectsAreUpToDate.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "allProjectsAreUpToDate(): returns false if the aliased dependency version is out of date",
            "suites": [],
            "updatePoint": {
                "line": 139,
                "column": 94
            },
            "line": 139,
            "code": "test('allProjectsAreUpToDate(): returns false if the aliased dependency version is out of date', async () => {\n  expect(await allProjectsAreUpToDate([\n    {\n      buildIndex: 0,\n      id: 'bar',\n      manifest: {\n        dependencies: {\n          alias: 'npm:foo@0',\n        },\n      },\n      rootDir: 'bar',\n    },\n    {\n      buildIndex: 0,\n      id: 'foo',\n      manifest: fooManifest,\n      rootDir: 'foo',\n    },\n  ], {\n    autoInstallPeers: false,\n    linkWorkspacePackages: true,\n    wantedLockfile: {\n      importers: {\n        bar: {\n          dependencies: {\n            alias: 'link:../foo',\n          },\n          specifiers: {\n            alias: 'npm:foo@0',\n          },\n        },\n        foo: {\n          specifiers: {},\n        },\n      },\n      lockfileVersion: 5,\n    },\n    workspacePackages,\n  })).toBeFalsy()\n})",
            "file": "allProjectsAreUpToDate.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "allProjectsAreUpToDate(): use link and registry version if linkWorkspacePackages = false",
            "suites": [],
            "updatePoint": {
                "line": 180,
                "column": 94
            },
            "line": 180,
            "code": "test('allProjectsAreUpToDate(): use link and registry version if linkWorkspacePackages = false', async () => {\n  expect(\n    await allProjectsAreUpToDate(\n      [\n        {\n          buildIndex: 0,\n          id: 'bar',\n          manifest: {\n            dependencies: {\n              foo: 'workspace:*',\n              foo2: 'workspace:~',\n              foo3: 'workspace:^',\n            },\n          },\n          rootDir: 'bar',\n        },\n        {\n          buildIndex: 0,\n          id: 'bar2',\n          manifest: {\n            dependencies: {\n              foo: '1.0.0',\n            },\n          },\n          rootDir: 'bar2',\n        },\n        {\n          buildIndex: 0,\n          id: 'foo',\n          manifest: fooManifest,\n          rootDir: 'foo',\n        },\n        {\n          buildIndex: 0,\n          id: 'foo2',\n          manifest: {\n            name: 'foo2',\n            version: '1.0.0',\n          },\n          rootDir: 'foo2',\n        },\n        {\n          buildIndex: 0,\n          id: 'foo3',\n          manifest: {\n            name: 'foo3',\n            version: '1.0.0',\n          },\n          rootDir: 'foo3',\n        },\n      ],\n      {\n        autoInstallPeers: false,\n        linkWorkspacePackages: false,\n        wantedLockfile: {\n          importers: {\n            bar: {\n              dependencies: {\n                foo: 'link:../foo',\n                foo2: 'link:../foo2',\n                foo3: 'link:../foo3',\n              },\n              specifiers: {\n                foo: 'workspace:*',\n                foo2: 'workspace:~',\n                foo3: 'workspace:^',\n              },\n            },\n            bar2: {\n              dependencies: {\n                foo: '1.0.0',\n              },\n              specifiers: {\n                foo: '1.0.0',\n              },\n            },\n            foo: {\n              specifiers: {},\n            },\n            foo2: {\n              specifiers: {},\n            },\n            foo3: {\n              specifiers: {},\n            },\n          },\n          lockfileVersion: 5,\n        },\n        workspacePackages,\n      }\n    )\n  ).toBeTruthy()\n})",
            "file": "allProjectsAreUpToDate.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "allProjectsAreUpToDate(): returns false if dependenciesMeta differs",
            "suites": [],
            "updatePoint": {
                "line": 274,
                "column": 73
            },
            "line": 274,
            "code": "test('allProjectsAreUpToDate(): returns false if dependenciesMeta differs', async () => {\n  expect(await allProjectsAreUpToDate([\n    {\n      buildIndex: 0,\n      id: 'bar',\n      manifest: {\n        dependencies: {\n          foo: 'workspace:../foo',\n        },\n        dependenciesMeta: {\n          foo: {\n            injected: true,\n          },\n        },\n      },\n      rootDir: 'bar',\n    },\n    {\n      buildIndex: 0,\n      id: 'foo',\n      manifest: fooManifest,\n      rootDir: 'foo',\n    },\n  ], {\n    autoInstallPeers: false,\n    linkWorkspacePackages: true,\n    wantedLockfile: {\n      importers: {\n        bar: {\n          dependencies: {\n            foo: 'link:../foo',\n          },\n          specifiers: {\n            foo: 'workspace:../foo',\n          },\n        },\n        foo: {\n          specifiers: {},\n        },\n      },\n      lockfileVersion: 5,\n    },\n    workspacePackages,\n  })).toBeFalsy()\n})",
            "file": "allProjectsAreUpToDate.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "allProjectsAreUpToDate(): returns true if dependenciesMeta matches",
            "suites": [],
            "updatePoint": {
                "line": 320,
                "column": 72
            },
            "line": 320,
            "code": "test('allProjectsAreUpToDate(): returns true if dependenciesMeta matches', async () => {\n  expect(await allProjectsAreUpToDate([\n    {\n      buildIndex: 0,\n      id: 'bar',\n      manifest: {\n        dependencies: {\n          foo: 'workspace:../foo',\n        },\n        dependenciesMeta: {\n          foo: {\n            injected: true,\n          },\n        },\n      },\n      rootDir: 'bar',\n    },\n    {\n      buildIndex: 0,\n      id: 'foo',\n      manifest: fooManifest,\n      rootDir: 'foo',\n    },\n  ], {\n    autoInstallPeers: false,\n    linkWorkspacePackages: true,\n    wantedLockfile: {\n      importers: {\n        bar: {\n          dependencies: {\n            foo: 'link:../foo',\n          },\n          dependenciesMeta: {\n            foo: {\n              injected: true,\n            },\n          },\n          specifiers: {\n            foo: 'workspace:../foo',\n          },\n        },\n        foo: {\n          specifiers: {},\n        },\n      },\n      lockfileVersion: 5,\n    },\n    workspacePackages,\n  })).toBeTruthy()\n})",
            "file": "allProjectsAreUpToDate.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "cannot resolve peer dependency for top-level dependency",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 61
            },
            "line": 5,
            "code": "test('cannot resolve peer dependency for top-level dependency', async () => {\n  prepareEmpty()\n\n  const peerDependencyIssues = await getPeerDependencyIssues([\n    {\n      buildIndex: 0,\n      manifest: {\n        dependencies: {\n          'ajv-keywords': '1.5.0',\n        },\n      },\n      rootDir: process.cwd(),\n    },\n  ], await testDefaults())\n\n  expect(peerDependencyIssues['.'].missing).toHaveProperty('ajv')\n})",
            "file": "getPeerDependencyIssues.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "a conflict is detected when the same peer is required with ranges that do not overlap",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 91
            },
            "line": 23,
            "code": "test('a conflict is detected when the same peer is required with ranges that do not overlap', async () => {\n  prepareEmpty()\n\n  const peerDependencyIssues = await getPeerDependencyIssues([\n    {\n      buildIndex: 0,\n      manifest: {\n        dependencies: {\n          '@pnpm.e2e/has-foo100-peer': '1.0.0',\n          '@pnpm.e2e/has-foo101-peer': '1.0.0',\n        },\n      },\n      rootDir: process.cwd(),\n    },\n  ], await testDefaults())\n\n  expect(peerDependencyIssues['.'].conflicts.length).toBe(1)\n})",
            "file": "getPeerDependencyIssues.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "install with git-branch-lockfile = true",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 45
            },
            "line": 13,
            "code": "test('install with git-branch-lockfile = true', async () => {\n  prepareEmpty()\n\n  const branchName: string = 'main-branch'\n  getCurrentBranch['mockReturnValue'](branchName)\n\n  const opts = await testDefaults({\n    useGitBranchLockfile: true,\n  })\n\n  await install({\n    dependencies: {\n      'is-positive': '^3.0.0',\n    },\n  }, opts)\n\n  expect(fs.existsSync(`pnpm-lock.${branchName}.yaml`)).toBe(true)\n  expect(fs.existsSync(WANTED_LOCKFILE)).toBe(false)\n})",
            "file": "install/gitBranchLockfile.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "install with git-branch-lockfile = true and no lockfile changes",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 69
            },
            "line": 33,
            "code": "test('install with git-branch-lockfile = true and no lockfile changes', async () => {\n  prepareEmpty()\n\n  const branchName: string = 'main-branch'\n  getCurrentBranch['mockReturnValue'](branchName)\n\n  const manifest: ProjectManifest = {\n    dependencies: {\n      'is-positive': '^3.0.0',\n    },\n  }\n\n  const opts1 = await testDefaults({\n    useGitBranchLockfile: false,\n  })\n  await install(manifest, opts1)\n\n  expect(fs.existsSync(WANTED_LOCKFILE)).toBe(true)\n\n  const opts2 = await testDefaults({\n    useGitBranchLockfile: true,\n  })\n  await install(manifest, opts2)\n  expect(fs.existsSync(WANTED_LOCKFILE)).toBe(true)\n  // Git branch lockfile is created only if there are changes in the lockfile\n  expect(fs.existsSync(`pnpm-lock.${branchName}.yaml`)).toBe(false)\n})",
            "file": "install/gitBranchLockfile.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "install a workspace with git-branch-lockfile = true",
            "suites": [],
            "updatePoint": {
                "line": 61,
                "column": 57
            },
            "line": 61,
            "code": "test('install a workspace with git-branch-lockfile = true', async () => {\n  const rootManifest: ProjectManifest = {\n    name: 'root',\n  }\n  const project1Manifest: ProjectManifest = {\n    name: 'project-1',\n    dependencies: { 'is-positive': '1.0.0' },\n  }\n  const project2Manifest: ProjectManifest = {\n    name: 'project-2',\n    dependencies: { 'is-positive': '1.0.0' },\n  }\n  preparePackages([\n    {\n      location: '.',\n      package: rootManifest,\n    },\n    {\n      location: 'project-1',\n      package: project1Manifest,\n    },\n    {\n      location: 'project-2',\n      package: project2Manifest,\n    },\n  ])\n\n  const branchName: string = 'main-branch'\n  getCurrentBranch['mockReturnValue'](branchName)\n\n  const opts = await testDefaults({\n    useGitBranchLockfile: true,\n    allProjects: [\n      {\n        buildIndex: 0,\n        manifest: rootManifest,\n        rootDir: process.cwd(),\n      },\n      {\n        buildIndex: 0,\n        manifest: project1Manifest,\n        rootDir: path.resolve('project-1'),\n      },\n      {\n        buildIndex: 0,\n        manifest: project2Manifest,\n        rootDir: path.resolve('project-2'),\n      },\n    ],\n  })\n\n  await mutateModules([\n    {\n      mutation: 'install',\n      rootDir: process.cwd(),\n    },\n    {\n      mutation: 'install',\n      rootDir: path.resolve('project-1'),\n    },\n    {\n      mutation: 'install',\n      rootDir: path.resolve('project-2'),\n    },\n  ], opts)\n\n  expect(fs.existsSync(`pnpm-lock.${branchName}.yaml`)).toBe(true)\n  expect(fs.existsSync(WANTED_LOCKFILE)).toBe(false)\n})",
            "file": "install/gitBranchLockfile.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "install with --merge-git-branch-lockfiles",
            "suites": [],
            "updatePoint": {
                "line": 131,
                "column": 47
            },
            "line": 131,
            "code": "test('install with --merge-git-branch-lockfiles', async () => {\n  prepareEmpty()\n\n  const branchName: string = 'main-branch'\n  getCurrentBranch['mockReturnValue'](branchName)\n\n  const otherLockfilePath: string = path.resolve('pnpm-lock.other.yaml')\n  await writeYamlFile(otherLockfilePath, {\n    whatever: 'whatever',\n  })\n\n  expect(fs.existsSync(otherLockfilePath)).toBe(true)\n  expect(fs.existsSync(WANTED_LOCKFILE)).toBe(false)\n\n  const opts = await testDefaults({\n    useGitBranchLockfile: true,\n    mergeGitBranchLockfiles: true,\n  })\n  await install({\n    dependencies: {\n      'is-positive': '^3.0.0',\n    },\n  }, opts)\n\n  expect(fs.existsSync(otherLockfilePath)).toBe(false)\n  expect(fs.existsSync(WANTED_LOCKFILE)).toBe(true)\n})",
            "file": "install/gitBranchLockfile.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        },
        {
            "name": "install with --merge-git-branch-lockfiles when merged lockfile is up to date",
            "suites": [],
            "updatePoint": {
                "line": 159,
                "column": 82
            },
            "line": 159,
            "code": "test('install with --merge-git-branch-lockfiles when merged lockfile is up to date', async () => {\n  const project = prepareEmpty()\n\n  // @types/semver installed in the main branch\n  await writeYamlFile(WANTED_LOCKFILE, {\n    dependencies: {\n      '@types/semver': '5.3.31',\n    },\n    lockfileVersion: LOCKFILE_VERSION,\n    packages: {\n      '/@types/semver/5.3.31': {\n        resolution: {\n          integrity: 'sha512-WBv5F9HrWTyG800cB9M3veCVkFahqXN7KA7c3VUCYZm/xhNzzIFiXiq+rZmj75j7GvWelN3YNrLX7FjtqBvhMw==',\n        },\n      },\n    },\n    specifiers: {\n      '@types/semver': '5.3.31',\n    },\n  }, { lineWidth: 1000 })\n\n  const branchName: string = 'main-branch'\n  getCurrentBranch['mockReturnValue'](branchName)\n\n  // is-positive installed in the other branch\n  const otherLockfilePath: string = path.resolve('pnpm-lock.other.yaml')\n  const otherLockfileContent = {\n    dependencies: {\n      '@types/semver': '5.3.31',\n      'is-positive': '3.1.0',\n    },\n    lockfileVersion: LOCKFILE_VERSION,\n    packages: {\n      '/@types/semver/5.3.31': {\n        resolution: {\n          integrity: 'sha512-WBv5F9HrWTyG800cB9M3veCVkFahqXN7KA7c3VUCYZm/xhNzzIFiXiq+rZmj75j7GvWelN3YNrLX7FjtqBvhMw==',\n        },\n      },\n      '/is-positive/3.1.0': {\n        resolution: {\n          integrity: 'sha512-8ND1j3y9/HP94TOvGzr69/FgbkX2ruOldhLEsTWwcJVfo4oRjwemJmJxt7RJkKYH8tz7vYBP9JcKQY8CLuJ90Q==',\n        },\n      },\n    },\n    specifiers: {\n      '@types/semver': '5.3.31',\n      'is-positive': '^3.1.0',\n    },\n  }\n  await writeYamlFile(otherLockfilePath, otherLockfileContent, { lineWidth: 1000 })\n\n  // the other branch merged to the main branch\n  const projectManifest: ProjectManifest = {\n    dependencies: {\n      '@types/semver': '5.3.31',\n      'is-positive': '^3.1.0',\n    },\n  }\n  const opts = await testDefaults({\n    useGitBranchLockfile: true,\n    mergeGitBranchLockfiles: true,\n    frozenLockfile: true,\n  })\n  await install(projectManifest, opts)\n\n  expect(fs.existsSync(otherLockfilePath)).toBe(false)\n  expect(fs.existsSync(WANTED_LOCKFILE)).toBe(true)\n\n  const wantedLockfileAfterMergeOther = await project.readLockfile()\n  expect(wantedLockfileAfterMergeOther).toEqual(otherLockfileContent)\n})",
            "file": "install/gitBranchLockfile.test.ts",
            "skipped": false,
            "dir": "packages/core/test"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in index.ts:38\nRemove `.only` to restore test checks"
}