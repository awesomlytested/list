{"repo":"invertase/react-native-firebase","url":"https://github.com/invertase/react-native-firebase","branch":"main","configs":[{"package":"react-native-firebase","lang":"js","dir":"tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@react-native-firebase/analytics","lang":"ts","dir":"packages/analytics/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/app-check","lang":"ts","dir":"packages/app-check/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/app-distribution","lang":"ts","dir":"packages/app-distribution/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/auth","lang":"ts","dir":"packages/auth/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/crashlytics","lang":"ts","dir":"packages/crashlytics/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/database","lang":"ts","dir":"packages/database/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/firestore","lang":"ts","dir":"packages/firestore/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/functions","lang":"ts","dir":"packages/functions/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/installations","lang":"ts","dir":"packages/installations/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/perf","lang":"ts","dir":"packages/perf/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/remote-config","lang":"ts","dir":"packages/remote-config/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/storage","lang":"ts","dir":"packages/storage/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@react-native-firebase/_template_","lang":"ts","dir":"scripts/_TEMPLATE_/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"accessible from firebase.app()","suites":["Analytics","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.analytics).toBeDefined();\n      expect(app.analytics().app).toEqual(app);\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if non default app arg provided to firebase.analytics(APP)","suites":["Analytics","namespace"],"updatePoint":{"line":13,"column":73},"line":13,"code":"    it('throws if non default app arg provided to firebase.analytics(APP)', function () {\n      const app = firebase.app('secondaryFromNative');\n\n      const expectedError = [\n        'You attempted to call \"firebase.analytics(app)\" but; analytics does not support multiple Firebase Apps.',\n        '',\n        'Ensure the app provided is the default Firebase app only and not the \"secondaryFromNative\" app.',\n      ].join('\\r\\n');\n\n      // @ts-ignore test\n      expect(() => firebase.analytics(app)).toThrowError(expectedError);\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if analytics access from a non default app","suites":["Analytics","namespace"],"updatePoint":{"line":26,"column":57},"line":26,"code":"    it('throws if analytics access from a non default app', function () {\n      const app = firebase.app('secondaryFromNative');\n\n      const expectedError = [\n        'You attempted to call \"firebase.app(\\'secondaryFromNative\\').analytics\" but; analytics does not support multiple Firebase Apps.',\n        '',\n        'Ensure you access analytics from the default application only.',\n      ].join('\\r\\n');\n\n      expect(() => app.analytics()).toThrowError(expectedError);\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if milliseconds not a number","suites":["Analytics","namespace"],"updatePoint":{"line":51,"column":41},"line":51,"code":"  it('errors if milliseconds not a number', function () {\n    // @ts-ignore test\n    expect(() => firebase.analytics().setSessionTimeoutDuration('123')).toThrowError(\n      \"'milliseconds' expected a number value\",\n    );\n  });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if none string none null values","suites":["Analytics","namespace"],"updatePoint":{"line":58,"column":44},"line":58,"code":"  it('throws if none string none null values', function () {\n    // @ts-ignore test\n    expect(() => firebase.analytics().setUserId(123)).toThrowError(\"'id' expected a string value\");\n  });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if name is not a string","suites":["Analytics","namespace"],"updatePoint":{"line":63,"column":36},"line":63,"code":"  it('throws if name is not a string', function () {\n    // @ts-ignore test\n    expect(() => firebase.analytics().setUserProperty(1337, 'invertase')).toThrowError(\n      \"'name' expected a string value\",\n    );\n  });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if value is invalid","suites":["Analytics","namespace"],"updatePoint":{"line":69,"column":32},"line":69,"code":"  it('throws if value is invalid', function () {\n    // @ts-ignore test\n    expect(() => firebase.analytics().setUserProperty('invertase3', 33.3333)).toThrowError(\n      \"'value' expected a string value\",\n    );\n  });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if properties is not an object","suites":["Analytics","namespace"],"updatePoint":{"line":76,"column":43},"line":76,"code":"  it('throws if properties is not an object', function () {\n    // @ts-ignore test\n    expect(() => firebase.analytics().setUserProperties(1337)).toThrowError(\n      \"'properties' expected an object of key/value pairs\",\n    );\n  });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if property value is invalid","suites":["Analytics","namespace"],"updatePoint":{"line":82,"column":41},"line":82,"code":"  it('throws if property value is invalid', function () {\n    const props = {\n      test: '123',\n      foo: {\n        bar: 'baz',\n      },\n    };\n    // @ts-ignore test\n    expect(() => firebase.analytics().setUserProperties(props)).toThrowError(\n      \"'properties' value for parameter 'foo' is invalid\",\n    );\n  });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if value is a number","suites":["Analytics","namespace"],"updatePoint":{"line":94,"column":33},"line":94,"code":"  it('throws if value is a number', function () {\n    // @ts-ignore test\n    expect(() => firebase.analytics().setUserProperties({ invertase1: 123 })).toThrowError(\n      \"'properties' value for parameter 'invertase1' is invalid, expected a string.\",\n    );\n  });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when no parameters are set","suites":["Analytics","namespace"],"updatePoint":{"line":101,"column":39},"line":101,"code":"  it('errors when no parameters are set', function () {\n    // @ts-ignore test\n    expect(() => firebase.analytics().logSearch()).toThrowError(\n      'The supplied arg must be an object of key/values',\n    );\n  });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if name is not a string","suites":["Analytics","logEvent()"],"updatePoint":{"line":109,"column":38},"line":109,"code":"    it('errors if name is not a string', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logEvent(123)).toThrowError(\n        \"firebase.analytics().logEvent(*) 'name' expected a string value.\",\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if params is not an object","suites":["Analytics","logEvent()"],"updatePoint":{"line":116,"column":41},"line":116,"code":"    it('errors if params is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logEvent('invertase_event', 'foobar')).toThrowError(\n        \"firebase.analytics().logEvent(_, *) 'params' expected an object value.\",\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors on using a reserved name","suites":["Analytics","logEvent()"],"updatePoint":{"line":123,"column":39},"line":123,"code":"    it('errors on using a reserved name', function () {\n      expect(() => firebase.analytics().logEvent('session_start')).toThrowError(\n        \"firebase.analytics().logEvent(*) 'name' the event name 'session_start' is reserved and can not be used.\",\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if name not alphanumeric","suites":["Analytics","logEvent()"],"updatePoint":{"line":129,"column":39},"line":129,"code":"    it('errors if name not alphanumeric', function () {\n      expect(() => firebase.analytics().logEvent('!@£$%^&*')).toThrowError(\n        \"firebase.analytics().logEvent(*) 'name' invalid event name '!@£$%^&*'. Names should contain 1 to 40 alphanumeric characters or underscores.\",\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logEvent()","logScreenView()"],"updatePoint":{"line":136,"column":42},"line":136,"code":"      it('errors if param is not an object', function () {\n        // @ts-ignore test\n        expect(() => firebase.analytics().logScreenView(123)).toThrowError(\n          'firebase.analytics().logScreenView(*):',\n        );\n      });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"accepts arbitrary custom event parameters while rejecting defined parameters with wrong types","suites":["Analytics","logEvent()","logScreenView()"],"updatePoint":{"line":142,"column":103},"line":142,"code":"      it('accepts arbitrary custom event parameters while rejecting defined parameters with wrong types', function () {\n        expect(() => firebase.analytics().logScreenView({ foo: 'bar' })).not.toThrow();\n        expect(() =>\n          // @ts-ignore test\n          firebase.analytics().logScreenView({ screen_name: 123, foo: 'bar' }),\n        ).toThrowError('firebase.analytics().logScreenView(*):');\n      });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logEvent()","logAddPaymentInfo()"],"updatePoint":{"line":152,"column":42},"line":152,"code":"      it('errors if param is not an object', function () {\n        // @ts-ignore test\n        expect(() => firebase.analytics().logAddPaymentInfo(123)).toThrowError(\n          'firebase.analytics().logAddPaymentInfo(*):',\n        );\n      });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logEvent()","logAddPaymentInfo()"],"updatePoint":{"line":158,"column":49},"line":158,"code":"      it('errors when compound values are not set', function () {\n        expect(() =>\n          firebase.analytics().logAddPaymentInfo({\n            value: 123,\n          }),\n        ).toThrowError('firebase.analytics().logAddPaymentInfo(*):');\n      });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if params is not a object","suites":["Analytics","setDefaultEventParameters()"],"updatePoint":{"line":169,"column":40},"line":169,"code":"    it('errors if params is not a object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().setDefaultEventParameters('123')).toThrowError(\n        \"firebase.analytics().setDefaultEventParameters(*) 'params' expected an object value when it is defined.\",\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logAddToCart()"],"updatePoint":{"line":178,"column":40},"line":178,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logAddToCart(123)).toThrowError(\n        'firebase.analytics().logAddToCart(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logAddToCart()"],"updatePoint":{"line":184,"column":47},"line":184,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logAddToCart({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logAddToCart(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logAddShippingInfo()"],"updatePoint":{"line":194,"column":40},"line":194,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logAddShippingInfo(123)).toThrowError(\n        'firebase.analytics().logAddShippingInfo(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logAddShippingInfo()"],"updatePoint":{"line":200,"column":47},"line":200,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logAddShippingInfo({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logAddShippingInfo(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logAddToWishlist()"],"updatePoint":{"line":210,"column":40},"line":210,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logAddToWishlist(123)).toThrowError(\n        'firebase.analytics().logAddToWishlist(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logAddToWishlist()"],"updatePoint":{"line":216,"column":47},"line":216,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logAddToWishlist({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logAddToWishlist(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logBeginCheckout()"],"updatePoint":{"line":226,"column":40},"line":226,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logBeginCheckout(123)).toThrowError(\n        'firebase.analytics().logBeginCheckout(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logBeginCheckout()"],"updatePoint":{"line":232,"column":47},"line":232,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logBeginCheckout({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logBeginCheckout(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logGenerateLead()"],"updatePoint":{"line":242,"column":40},"line":242,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logGenerateLead(123)).toThrowError(\n        'firebase.analytics().logGenerateLead(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logGenerateLead()"],"updatePoint":{"line":248,"column":47},"line":248,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logGenerateLead({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logGenerateLead(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logCampaignDetails()"],"updatePoint":{"line":258,"column":40},"line":258,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logCampaignDetails(123)).toThrowError(\n        'firebase.analytics().logCampaignDetails(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logEarnVirtualCurrency()"],"updatePoint":{"line":267,"column":40},"line":267,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logEarnVirtualCurrency(123)).toThrowError(\n        'firebase.analytics().logEarnVirtualCurrency(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logJoinGroup()"],"updatePoint":{"line":276,"column":40},"line":276,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logJoinGroup(123)).toThrowError(\n        'firebase.analytics().logJoinGroup(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logLevelEnd()"],"updatePoint":{"line":285,"column":40},"line":285,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logLevelEnd(123)).toThrowError(\n        'firebase.analytics().logLevelEnd(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logLevelStart()"],"updatePoint":{"line":294,"column":40},"line":294,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logLevelStart(123)).toThrowError(\n        'firebase.analytics().logLevelStart(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logLevelUp()"],"updatePoint":{"line":303,"column":40},"line":303,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logLevelUp(123)).toThrowError(\n        'firebase.analytics().logLevelUp(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logLogin()"],"updatePoint":{"line":312,"column":40},"line":312,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logLogin(123)).toThrowError(\n        'firebase.analytics().logLogin(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logPostScore()"],"updatePoint":{"line":321,"column":40},"line":321,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logPostScore(123)).toThrowError(\n        'firebase.analytics().logPostScore(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logSelectContent()"],"updatePoint":{"line":330,"column":40},"line":330,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logSelectContent(123)).toThrowError(\n        'firebase.analytics().logSelectContent(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logSearch()"],"updatePoint":{"line":339,"column":40},"line":339,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logSearch(123)).toThrowError(\n        'firebase.analytics().logSearch(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logSelectItem()"],"updatePoint":{"line":348,"column":40},"line":348,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logSelectItem(123)).toThrowError(\n        'firebase.analytics().logSelectItem(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logSetCheckoutOption()"],"updatePoint":{"line":357,"column":40},"line":357,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logSetCheckoutOption(123)).toThrowError(\n        'firebase.analytics().logSetCheckoutOption(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logShare()"],"updatePoint":{"line":366,"column":40},"line":366,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logShare(123)).toThrowError(\n        'firebase.analytics().logShare(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logSignUp()"],"updatePoint":{"line":375,"column":40},"line":375,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logSignUp(123)).toThrowError(\n        'firebase.analytics().logSignUp(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logSelectPromotion()"],"updatePoint":{"line":384,"column":40},"line":384,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logSelectPromotion(123)).toThrowError(\n        'firebase.analytics().logSelectPromotion(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logSpendVirtualCurrency()"],"updatePoint":{"line":393,"column":40},"line":393,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logSpendVirtualCurrency(123)).toThrowError(\n        'firebase.analytics().logSpendVirtualCurrency(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logUnlockAchievement()"],"updatePoint":{"line":402,"column":40},"line":402,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logUnlockAchievement(123)).toThrowError(\n        'firebase.analytics().logUnlockAchievement(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logPurchase()"],"updatePoint":{"line":411,"column":40},"line":411,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logPurchase(123)).toThrowError(\n        'firebase.analytics().logPurchase(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logPurchase()"],"updatePoint":{"line":417,"column":47},"line":417,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logPurchase({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logPurchase(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logRefund()"],"updatePoint":{"line":427,"column":40},"line":427,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logRefund(123)).toThrowError(\n        'firebase.analytics().logRefund(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logRefund()"],"updatePoint":{"line":434,"column":47},"line":434,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logRefund({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logRefund(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logViewCart()"],"updatePoint":{"line":444,"column":40},"line":444,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logViewCart(123)).toThrowError(\n        'firebase.analytics().logViewCart(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logViewCart()"],"updatePoint":{"line":450,"column":47},"line":450,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logViewCart({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logViewCart(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logViewItem()"],"updatePoint":{"line":460,"column":40},"line":460,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logViewItem(123)).toThrowError(\n        'firebase.analytics().logViewItem(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logViewItem()"],"updatePoint":{"line":466,"column":47},"line":466,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logViewItem({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logViewItem(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logViewItemList()"],"updatePoint":{"line":476,"column":40},"line":476,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logViewItemList(123)).toThrowError(\n        'firebase.analytics().logViewItemList(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logRemoveFromCart()"],"updatePoint":{"line":485,"column":40},"line":485,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logRemoveFromCart(123)).toThrowError(\n        'firebase.analytics().logRemoveFromCart(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors when compound values are not set","suites":["Analytics","logRemoveFromCart()"],"updatePoint":{"line":491,"column":47},"line":491,"code":"    it('errors when compound values are not set', function () {\n      expect(() =>\n        firebase.analytics().logRemoveFromCart({\n          value: 123,\n        }),\n      ).toThrowError('firebase.analytics().logRemoveFromCart(*):');\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logViewPromotion()"],"updatePoint":{"line":501,"column":40},"line":501,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logViewPromotion(123)).toThrowError(\n        'firebase.analytics().logViewPromotion(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"errors if param is not an object","suites":["Analytics","logViewSearchResults()"],"updatePoint":{"line":510,"column":40},"line":510,"code":"    it('errors if param is not an object', function () {\n      // @ts-ignore test\n      expect(() => firebase.analytics().logViewSearchResults(123)).toThrowError(\n        'firebase.analytics().logViewSearchResults(*):',\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if not a boolean","suites":["Analytics","setAnalyticsCollectionEnabled()"],"updatePoint":{"line":519,"column":31},"line":519,"code":"    it('throws if not a boolean', function () {\n      // @ts-ignore\n      expect(() => firebase.analytics().setAnalyticsCollectionEnabled('foo')).toThrowError(\n        \"firebase.analytics().setAnalyticsCollectionEnabled(*) 'enabled' expected a boolean value.\",\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"throws if not a string","suites":["Analytics","initiateOnDeviceConversionMeasurementWithEmailAddress()"],"updatePoint":{"line":528,"column":30},"line":528,"code":"    it('throws if not a string', function () {\n      expect(() =>\n        // @ts-ignore\n        firebase.analytics().initiateOnDeviceConversionMeasurementWithEmailAddress(true),\n      ).toThrowError(\n        \"firebase.analytics().initiateOnDeviceConversionMeasurementWithEmailAddress(*) 'emailAddress' expected a string value.\",\n      );\n    });","file":"analytics.test.ts","skipped":false,"dir":"packages/analytics/__tests__"},{"name":"accessible from firebase.app()","suites":["appCheck()","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.appCheck).toBeDefined();\n      expect(app.appCheck().app).toEqual(app);\n    });","file":"appcheck.test.ts","skipped":false,"dir":"packages/app-check/__tests__"},{"name":"supports multiple apps","suites":["appCheck()","namespace"],"updatePoint":{"line":13,"column":30},"line":13,"code":"    it('supports multiple apps', async function () {\n      expect(firebase.appCheck().app.name).toEqual('[DEFAULT]');\n      expect(firebase.appCheck(firebase.app('secondaryFromNative')).app.name).toEqual(\n        'secondaryFromNative',\n      );\n      expect(firebase.app('secondaryFromNative').appCheck().app.name).toEqual(\n        'secondaryFromNative',\n      );\n    });","file":"appcheck.test.ts","skipped":false,"dir":"packages/app-check/__tests__"},{"name":"accessible from firebase.app()","suites":["appDistribution()","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.appDistribution).toBeDefined();\n      expect(app.appDistribution().app).toEqual(app);\n    });","file":"app-distribution.test.ts","skipped":false,"dir":"packages/app-distribution/__tests__"},{"name":"accessible from firebase.app()","suites":["Auth","namespace"],"updatePoint":{"line":10,"column":38},"line":10,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.auth).toBeDefined();\n      expect(app.auth().useEmulator).toBeDefined();\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"useEmulator requires a string url","suites":["Auth","useEmulator()"],"updatePoint":{"line":18,"column":41},"line":18,"code":"    it('useEmulator requires a string url', function () {\n      // @ts-ignore because we pass an invalid argument...\n      expect(() => auth().useEmulator()).toThrow(\n        'firebase.auth().useEmulator() takes a non-empty string',\n      );\n      expect(() => auth().useEmulator('')).toThrow(\n        'firebase.auth().useEmulator() takes a non-empty string',\n      );\n      // @ts-ignore because we pass an invalid argument...\n      expect(() => auth().useEmulator(123)).toThrow(\n        'firebase.auth().useEmulator() takes a non-empty string',\n      );\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"useEmulator requires a well-formed url","suites":["Auth","useEmulator()"],"updatePoint":{"line":32,"column":46},"line":32,"code":"    it('useEmulator requires a well-formed url', function () {\n      // No http://\n      expect(() => auth().useEmulator('localhost:9099')).toThrow(\n        'firebase.auth().useEmulator() takes a non-empty string URL',\n      );\n      // No port\n      expect(() => auth().useEmulator('http://localhost')).toThrow(\n        'firebase.auth().useEmulator() unable to parse host and port from URL',\n      );\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"useEmulator -> remaps Android loopback to host","suites":["Auth","useEmulator()"],"updatePoint":{"line":43,"column":54},"line":43,"code":"    it('useEmulator -> remaps Android loopback to host', function () {\n      const foo = auth().useEmulator('http://localhost:9099');\n      expect(foo).toEqual(['10.0.2.2', 9099]);\n\n      const bar = auth().useEmulator('http://127.0.0.1:9099');\n      expect(bar).toEqual(['10.0.2.2', 9099]);\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"useEmulator allows hyphens in the hostname","suites":["Auth","useEmulator()"],"updatePoint":{"line":51,"column":50},"line":51,"code":"    it('useEmulator allows hyphens in the hostname', function () {\n      const result = auth().useEmulator('http://my-host:9099');\n      expect(result).toEqual(['my-host', 9099]);\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"should be able to set tenantId ","suites":["Auth","tenantId"],"updatePoint":{"line":58,"column":39},"line":58,"code":"    it('should be able to set tenantId ', function () {\n      const auth = firebase.app().auth();\n      auth.setTenantId('test-id').then(() => {\n        expect(auth.tenantId).toBe('test-id');\n      });\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"should throw error when tenantId is a non string object ","suites":["Auth","tenantId"],"updatePoint":{"line":65,"column":64},"line":65,"code":"    it('should throw error when tenantId is a non string object ', async function () {\n      try {\n        await firebase.app().auth().setTenantId(Object());\n        return Promise.reject('It should throw an error');\n      } catch (e: any) {\n        expect(e.message).toBe(\"firebase.auth().setTenantId(*) expected 'tenantId' to be a string\");\n        return Promise.resolve('Error catched');\n      }\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"should return null if no resolver object is found","suites":["Auth","getMultiFactorResolver"],"updatePoint":{"line":77,"column":57},"line":77,"code":"    it('should return null if no resolver object is found', function () {\n      const unknownError = NativeFirebaseError.fromEvent(\n        {\n          code: 'unknown',\n        },\n        'auth',\n      );\n      const actual = auth.getMultiFactorResolver(auth(), unknownError);\n      expect(actual).toBe(null);\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"should return null if resolver object is null","suites":["Auth","getMultiFactorResolver"],"updatePoint":{"line":88,"column":53},"line":88,"code":"    it('should return null if resolver object is null', function () {\n      const unknownError = NativeFirebaseError.fromEvent(\n        {\n          code: 'unknown',\n          resolver: null,\n        },\n        'auth',\n      );\n      const actual = auth.getMultiFactorResolver(firebase.app().auth(), unknownError);\n      expect(actual).toBe(null);\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"should return the resolver object if its found","suites":["Auth","getMultiFactorResolver"],"updatePoint":{"line":100,"column":54},"line":100,"code":"    it('should return the resolver object if its found', function () {\n      const resolver = { session: '', hints: [] };\n      const errorWithResolver = NativeFirebaseError.fromEvent(\n        {\n          code: 'multi-factor-auth-required',\n          resolver,\n        },\n        'auth',\n      );\n      const actual = auth.getMultiFactorResolver(firebase.app().auth(), errorWithResolver);\n      // Using expect(actual).toEqual(resolver) causes unexpected errors:\n      //  You attempted to use \"firebase.app('[DEFAULT]').appCheck\" but this module could not be found.\n      expect(actual).not.toBeNull();\n      // @ts-ignore We know actual is not null\n      expect(actual.session).toEqual(resolver.session);\n      // @ts-ignore We know actual is not null\n      expect(actual.hints).toEqual(resolver.hints);\n      // @ts-ignore We know actual is not null\n      expect(actual._auth).not.toBeNull();\n    });","file":"auth.test.ts","skipped":false,"dir":"packages/auth/__tests__"},{"name":"accessible from firebase.app()","suites":["Crashlytics","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.crashlytics).toBeDefined();\n      expect(app.crashlytics().app).toEqual(app);\n    });","file":"crashlytics.test.ts","skipped":false,"dir":"packages/crashlytics/__tests__"},{"name":"accessible from firebase.app()","suites":["Database","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.database).toBeDefined();\n      expect(app.database().useEmulator).toBeDefined();\n    });","file":"database.test.ts","skipped":false,"dir":"packages/database/__tests__"},{"name":"useEmulator requires a string host","suites":["Database","useEmulator()"],"updatePoint":{"line":15,"column":42},"line":15,"code":"    it('useEmulator requires a string host', function () {\n      // @ts-ignore because we pass an invalid argument...\n      expect(() => database().useEmulator()).toThrow(\n        'firebase.database().useEmulator() takes a non-empty host',\n      );\n      expect(() => database().useEmulator('', -1)).toThrow(\n        'firebase.database().useEmulator() takes a non-empty host',\n      );\n      // @ts-ignore because we pass an invalid argument...\n      expect(() => database().useEmulator(123)).toThrow(\n        'firebase.database().useEmulator() takes a non-empty host',\n      );\n    });","file":"database.test.ts","skipped":false,"dir":"packages/database/__tests__"},{"name":"useEmulator requires a host and port","suites":["Database","useEmulator()"],"updatePoint":{"line":29,"column":44},"line":29,"code":"    it('useEmulator requires a host and port', function () {\n      expect(() => database().useEmulator('', 9000)).toThrow(\n        'firebase.database().useEmulator() takes a non-empty host and port',\n      );\n      // No port\n      // @ts-ignore because we pass an invalid argument...\n      expect(() => database().useEmulator('localhost')).toThrow(\n        'firebase.database().useEmulator() takes a non-empty host and port',\n      );\n    });","file":"database.test.ts","skipped":false,"dir":"packages/database/__tests__"},{"name":"useEmulator -> remaps Android loopback to host","suites":["Database","useEmulator()"],"updatePoint":{"line":40,"column":54},"line":40,"code":"    it('useEmulator -> remaps Android loopback to host', function () {\n      const foo = database().useEmulator('localhost', 9000);\n      expect(foo).toEqual(['10.0.2.2', 9000]);\n\n      const bar = database().useEmulator('127.0.0.1', 9000);\n      expect(bar).toEqual(['10.0.2.2', 9000]);\n    });","file":"database.test.ts","skipped":false,"dir":"packages/database/__tests__"},{"name":"accessible from firebase.app()","suites":["Storage","namespace"],"updatePoint":{"line":9,"column":38},"line":9,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.firestore).toBeDefined();\n      expect(app.firestore().settings).toBeDefined();\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"returns a new WriteBatch instance","suites":["Storage","batch()"],"updatePoint":{"line":17,"column":41},"line":17,"code":"    it('returns a new WriteBatch instance', function () {\n      const instance = firebase.firestore().batch();\n      return expect(instance.constructor.name).toEqual('FirestoreWriteBatch');\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if settings is not an object","suites":["Storage","settings"],"updatePoint":{"line":24,"column":43},"line":24,"code":"    it('throws if settings is not an object', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firebase.firestore().settings('foo');\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'settings' must be an object\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if passing an incorrect setting key","suites":["Storage","settings"],"updatePoint":{"line":34,"column":50},"line":34,"code":"    it('throws if passing an incorrect setting key', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firebase.firestore().settings({ foo: 'bar' });\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'settings.foo' is not a valid settings field\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if cacheSizeBytes is not a number","suites":["Storage","settings"],"updatePoint":{"line":44,"column":48},"line":44,"code":"    it('throws if cacheSizeBytes is not a number', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firebase.firestore().settings({ cacheSizeBytes: 'foo' });\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'settings.cacheSizeBytes' must be a number value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if cacheSizeBytes is less than 1MB","suites":["Storage","settings"],"updatePoint":{"line":54,"column":49},"line":54,"code":"    it('throws if cacheSizeBytes is less than 1MB', async function () {\n      try {\n        await firebase.firestore().settings({ cacheSizeBytes: 123 });\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'settings.cacheSizeBytes' the minimum cache size\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"accepts an unlimited cache size","suites":["Storage","settings"],"updatePoint":{"line":63,"column":39},"line":63,"code":"    it('accepts an unlimited cache size', async function () {\n      await firebase\n        .firestore()\n        .settings({ cacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED });\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if host is not a string","suites":["Storage","settings"],"updatePoint":{"line":69,"column":38},"line":69,"code":"    it('throws if host is not a string', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firebase.firestore().settings({ host: 123 });\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'settings.host' must be a string value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if host is an empty string","suites":["Storage","settings"],"updatePoint":{"line":79,"column":41},"line":79,"code":"    it('throws if host is an empty string', async function () {\n      try {\n        await firebase.firestore().settings({ host: '' });\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'settings.host' must not be an empty string\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if persistence is not a boolean","suites":["Storage","settings"],"updatePoint":{"line":88,"column":46},"line":88,"code":"    it('throws if persistence is not a boolean', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firebase.firestore().settings({ persistence: 'true' });\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'settings.persistence' must be a boolean value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if ssl is not a boolean","suites":["Storage","settings"],"updatePoint":{"line":98,"column":38},"line":98,"code":"    it('throws if ssl is not a boolean', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firebase.firestore().settings({ ssl: 'true' });\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'settings.ssl' must be a boolean value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if ignoreUndefinedProperties is not a boolean","suites":["Storage","settings"],"updatePoint":{"line":108,"column":60},"line":108,"code":"    it('throws if ignoreUndefinedProperties is not a boolean', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firestore().settings({ ignoreUndefinedProperties: 'bogus' });\n        return Promise.reject(new Error('Should throw'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"ignoreUndefinedProperties' must be a boolean value.\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if serverTimestampBehavior is not one of 'estimate', 'previous', 'none'","suites":["Storage","settings"],"updatePoint":{"line":118,"column":86},"line":118,"code":"    it(\"throws if serverTimestampBehavior is not one of 'estimate', 'previous', 'none'\", async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firestore().settings({ serverTimestampBehavior: 'bogus' });\n        return Promise.reject(new Error('Should throw'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\n          \"serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'\",\n        );\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if updateFunction is not a function","suites":["Storage","runTransaction()"],"updatePoint":{"line":132,"column":50},"line":132,"code":"    it('throws if updateFunction is not a function', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        await firebase.firestore().runTransaction('foo');\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'updateFunction' must be a function\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"returns a new query instance","suites":["Storage","collectionGroup()"],"updatePoint":{"line":144,"column":36},"line":144,"code":"    it('returns a new query instance', function () {\n      const query = firebase.firestore().collectionGroup(COLLECTION);\n      expect(query.constructor.name).toEqual('FirestoreQuery');\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if id is not a string","suites":["Storage","collectionGroup()"],"updatePoint":{"line":149,"column":36},"line":149,"code":"    it('throws if id is not a string', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        firebase.firestore().collectionGroup(123);\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'collectionId' must be a string value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if id is empty","suites":["Storage","collectionGroup()"],"updatePoint":{"line":159,"column":29},"line":159,"code":"    it('throws if id is empty', async function () {\n      try {\n        firebase.firestore().collectionGroup('');\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'collectionId' must be a non-empty string\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if id contains forward-slash","suites":["Storage","collectionGroup()"],"updatePoint":{"line":168,"column":43},"line":168,"code":"    it('throws if id contains forward-slash', async function () {\n      try {\n        firebase.firestore().collectionGroup(`someCollection/bar`);\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'collectionId' must not contain '/'\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if path is not a string","suites":["Storage","collection()"],"updatePoint":{"line":179,"column":38},"line":179,"code":"    it('throws if path is not a string', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        firebase.firestore().collection(123);\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'collectionPath' must be a string value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if path is empty string","suites":["Storage","collection()"],"updatePoint":{"line":189,"column":38},"line":189,"code":"    it('throws if path is empty string', async function () {\n      try {\n        firebase.firestore().collection('');\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'collectionPath' must be a non-empty string\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if path does not point to a collection","suites":["Storage","collection()"],"updatePoint":{"line":198,"column":53},"line":198,"code":"    it('throws if path does not point to a collection', async function () {\n      try {\n        firebase.firestore().collection(`firestore/bar`);\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'collectionPath' must point to a collection\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"returns a new CollectionReference","suites":["Storage","collection()"],"updatePoint":{"line":207,"column":41},"line":207,"code":"    it('returns a new CollectionReference', async function () {\n      const collectionReference = firebase.firestore().collection('firestore');\n      expect(collectionReference.constructor.name).toEqual('FirestoreCollectionReference');\n      expect(collectionReference.path).toEqual('firestore');\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if path is not a string","suites":["Storage","doc()"],"updatePoint":{"line":215,"column":38},"line":215,"code":"    it('throws if path is not a string', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        firebase.firestore().doc(123);\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'documentPath' must be a string value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if path is empty string","suites":["Storage","doc()"],"updatePoint":{"line":225,"column":38},"line":225,"code":"    it('throws if path is empty string', async function () {\n      try {\n        firebase.firestore().doc('');\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'documentPath' must be a non-empty string\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if path does not point to a document","suites":["Storage","doc()"],"updatePoint":{"line":234,"column":51},"line":234,"code":"    it('throws if path does not point to a document', async function () {\n      try {\n        firebase.firestore().doc(`${COLLECTION}/bar/baz`);\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'documentPath' must point to a document\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"returns a new DocumentReference","suites":["Storage","doc()"],"updatePoint":{"line":243,"column":39},"line":243,"code":"    it('returns a new DocumentReference', async function () {\n      const docRef = firebase.firestore().doc(`${COLLECTION}/bar`);\n      expect(docRef.constructor.name).toEqual('FirestoreDocumentReference');\n      expect(docRef.path).toEqual(`${COLLECTION}/bar`);\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws when undefined value provided and ignored undefined is false","suites":["Storage","doc()"],"updatePoint":{"line":249,"column":75},"line":249,"code":"    it('throws when undefined value provided and ignored undefined is false', async function () {\n      await firebase.firestore().settings({ ignoreUndefinedProperties: false });\n      const docRef = firebase.firestore().doc(`${COLLECTION}/bar`);\n      try {\n        await docRef.set({\n          field1: 1,\n          field2: undefined,\n        });\n\n        return Promise.reject(new Error('Expected set() to throw'));\n      } catch (e: any) {\n        return expect(e.message).toEqual('Unsupported field value: undefined');\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws when nested undefined object value provided and ignored undefined is false","suites":["Storage","doc()"],"updatePoint":{"line":264,"column":89},"line":264,"code":"    it('throws when nested undefined object value provided and ignored undefined is false', async function () {\n      await firebase.firestore().settings({ ignoreUndefinedProperties: false });\n      const docRef = firebase.firestore().doc(`${COLLECTION}/bar`);\n      try {\n        await docRef.set({\n          field1: 1,\n          field2: {\n            shouldNotWork: undefined,\n          },\n        });\n        return Promise.reject(new Error('Expected set() to throw'));\n      } catch (e: any) {\n        return expect(e.message).toEqual('Unsupported field value: undefined');\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws when nested undefined array value provided and ignored undefined is false","suites":["Storage","doc()"],"updatePoint":{"line":280,"column":88},"line":280,"code":"    it('throws when nested undefined array value provided and ignored undefined is false', async function () {\n      await firebase.firestore().settings({ ignoreUndefinedProperties: false });\n      const docRef = firebase.firestore().doc(`${COLLECTION}/bar`);\n      try {\n        await docRef.set({\n          myArray: [{ name: 'Tim', location: { state: undefined, country: 'United Kingdom' } }],\n        });\n        return Promise.reject(new Error('Expected set() to throw'));\n      } catch (e: any) {\n        return expect(e.message).toEqual('Unsupported field value: undefined');\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"does not throw when nested undefined array value provided and ignore undefined is true","suites":["Storage","doc()"],"updatePoint":{"line":293,"column":94},"line":293,"code":"    it('does not throw when nested undefined array value provided and ignore undefined is true', async function () {\n      await firebase.firestore().settings({ ignoreUndefinedProperties: true });\n      const docRef = firebase.firestore().doc(`${COLLECTION}/bar`);\n      await docRef.set({\n        myArray: [{ name: 'Tim', location: { state: undefined, country: 'United Kingdom' } }],\n      });\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"does not throw when nested undefined object value provided and ignore undefined is true","suites":["Storage","doc()"],"updatePoint":{"line":301,"column":95},"line":301,"code":"    it('does not throw when nested undefined object value provided and ignore undefined is true', async function () {\n      await firebase.firestore().settings({ ignoreUndefinedProperties: true });\n      const docRef = firebase.firestore().doc(`${COLLECTION}/bar`);\n      await docRef.set({\n        field1: 1,\n        field2: {\n          shouldNotWork: undefined,\n        },\n      });\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"does not throw when Date is provided instead of Timestamp","suites":["Storage","doc()"],"updatePoint":{"line":312,"column":65},"line":312,"code":"    it('does not throw when Date is provided instead of Timestamp', async function () {\n      type BarType = {\n        myDate: FirebaseFirestoreTypes.Timestamp;\n      };\n\n      const docRef = firebase.firestore().doc<BarType>(`${COLLECTION}/bar`);\n      await docRef.set({\n        myDate: new Date(),\n      });\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"does not throw when serverTimestamp is provided instead of Timestamp","suites":["Storage","doc()"],"updatePoint":{"line":323,"column":76},"line":323,"code":"    it('does not throw when serverTimestamp is provided instead of Timestamp', async function () {\n      type BarType = {\n        myDate: FirebaseFirestoreTypes.Timestamp;\n      };\n\n      const docRef = firebase.firestore().doc<BarType>(`${COLLECTION}/bar`);\n      await docRef.set({\n        myDate: firestore.FieldValue.serverTimestamp(),\n      });\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if bundle is not a string","suites":["Storage","loadBundle()"],"updatePoint":{"line":336,"column":40},"line":336,"code":"    it('throws if bundle is not a string', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        firebase.firestore().loadBundle(123);\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'bundle' must be a string value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if bundle is empty string","suites":["Storage","loadBundle()"],"updatePoint":{"line":346,"column":40},"line":346,"code":"    it('throws if bundle is empty string', async function () {\n      try {\n        firebase.firestore().loadBundle('');\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'bundle' must be a non-empty string\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if queryName is not a string","suites":["Storage","namedQuery()"],"updatePoint":{"line":357,"column":43},"line":357,"code":"    it('throws if queryName is not a string', async function () {\n      try {\n        // @ts-ignore the type is incorrect *on purpose* to test type checking in javascript\n        firebase.firestore().namedQuery(123);\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'queryName' must be a string value\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"throws if queryName is empty string","suites":["Storage","namedQuery()"],"updatePoint":{"line":367,"column":43},"line":367,"code":"    it('throws if queryName is empty string', async function () {\n      try {\n        firebase.firestore().namedQuery('');\n        return Promise.reject(new Error('Did not throw an Error.'));\n      } catch (e: any) {\n        return expect(e.message).toContain(\"'queryName' must be a non-empty string\");\n      }\n    });","file":"firestore.test.ts","skipped":false,"dir":"packages/firestore/__tests__"},{"name":"accessible from firebase.app()","suites":["Cloud Functions","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.functions).toBeDefined();\n      expect(app.functions().httpsCallable).toBeDefined();\n    });","file":"functions.test.ts","skipped":false,"dir":"packages/functions/__tests__"},{"name":"useFunctionsEmulator -> uses 10.0.2.2","suites":["Cloud Functions","useFunctionsEmulator()"],"updatePoint":{"line":15,"column":45},"line":15,"code":"    it('useFunctionsEmulator -> uses 10.0.2.2', function () {\n      functions().useEmulator('localhost', 5001);\n\n      // @ts-ignore\n      expect(functions()._useFunctionsEmulatorHost).toBe('10.0.2.2');\n\n      functions().useEmulator('127.0.0.1', 5001);\n\n      // @ts-ignore\n      expect(functions()._useFunctionsEmulatorHost).toBe('10.0.2.2');\n    });","file":"functions.test.ts","skipped":false,"dir":"packages/functions/__tests__"},{"name":"prefers emulator to custom domain","suites":["Cloud Functions","useFunctionsEmulator()"],"updatePoint":{"line":27,"column":41},"line":27,"code":"    it('prefers emulator to custom domain', function () {\n      const app = firebase.app();\n      const customUrl = 'https://test.com';\n      const functions = app.functions(customUrl);\n\n      functions.useFunctionsEmulator('http://10.0.2.2');\n\n      // @ts-ignore\n      expect(functions._useFunctionsEmulatorHost).toBe('10.0.2.2');\n    });","file":"functions.test.ts","skipped":false,"dir":"packages/functions/__tests__"},{"name":"throws an error with an incorrect timeout","suites":["Cloud Functions","httpcallable()"],"updatePoint":{"line":40,"column":49},"line":40,"code":"    it('throws an error with an incorrect timeout', function () {\n      const app = firebase.app();\n\n      // @ts-ignore\n      expect(() => app.functions().httpsCallable('example', { timeout: 'test' })).toThrow(\n        'HttpsCallableOptions.timeout expected a Number in milliseconds',\n      );\n    });","file":"functions.test.ts","skipped":false,"dir":"packages/functions/__tests__"},{"name":"accessible from firebase.app()","suites":["installations()","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.installations).toBeDefined();\n      expect(app.installations().app).toEqual(app);\n    });","file":"installations.test.ts","skipped":false,"dir":"packages/installations/__tests__"},{"name":"supports multiple apps","suites":["installations()","namespace"],"updatePoint":{"line":13,"column":30},"line":13,"code":"    it('supports multiple apps', async function () {\n      expect(firebase.installations().app.name).toEqual('[DEFAULT]');\n      expect(firebase.installations(firebase.app('secondaryFromNative')).app.name).toEqual(\n        'secondaryFromNative',\n      );\n      expect(firebase.app('secondaryFromNative').installations().app.name).toEqual(\n        'secondaryFromNative',\n      );\n    });","file":"installations.test.ts","skipped":false,"dir":"packages/installations/__tests__"},{"name":"accessible from firebase.app()","suites":["Performance Monitoring","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.perf).toBeDefined();\n      expect(app.perf().app).toEqual(app);\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"errors if not boolean","suites":["Performance Monitoring","setPerformanceCollectionEnabled"],"updatePoint":{"line":15,"column":29},"line":15,"code":"    it('errors if not boolean', function () {\n      expect(async () => {\n        // @ts-ignore\n        await perf().setPerformanceCollectionEnabled();\n      }).rejects.toThrow('must be a boolean');\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"returns an instance of Trace","suites":["Performance Monitoring","newTrace()"],"updatePoint":{"line":24,"column":36},"line":24,"code":"    it('returns an instance of Trace', function () {\n      const trace = perf().newTrace('invertase');\n      expect(trace.constructor.name).toEqual('Trace');\n\n      // @ts-ignore\n      expect(trace._identifier).toEqual('invertase');\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"errors if identifier not a string","suites":["Performance Monitoring","newTrace()"],"updatePoint":{"line":32,"column":41},"line":32,"code":"    it('errors if identifier not a string', function () {\n      try {\n        // @ts-ignore\n        perf().newTrace(1337);\n        return Promise.reject(new Error('Did not throw'));\n      } catch (e: any) {\n        expect(e.message).toEqual(\n          \"firebase.perf().newTrace(*) 'identifier' must be a string with a maximum length of 100 characters.\",\n        );\n        return Promise.resolve();\n      }\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"errors if identifier length > 100","suites":["Performance Monitoring","newTrace()"],"updatePoint":{"line":45,"column":41},"line":45,"code":"    it('errors if identifier length > 100', function () {\n      try {\n        perf().newTrace(new Array(101).fill('i').join(''));\n        return Promise.reject(new Error('Did not throw'));\n      } catch (e: any) {\n        expect(e.message).toEqual(\n          \"firebase.perf().newTrace(*) 'identifier' must be a string with a maximum length of 100 characters.\",\n        );\n        return Promise.resolve();\n      }\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"returns an instance of HttpMetric","suites":["Performance Monitoring","newHttpMetric()"],"updatePoint":{"line":59,"column":41},"line":59,"code":"    it('returns an instance of HttpMetric', async function () {\n      const metric = perf().newHttpMetric('https://invertase.io', 'GET');\n      expect(metric.constructor.name).toEqual('HttpMetric');\n\n      // @ts-ignore\n      expect(metric._url).toEqual('https://invertase.io');\n\n      // @ts-ignore\n      expect(metric._httpMethod).toEqual('GET');\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"errors if url not a string","suites":["Performance Monitoring","newHttpMetric()"],"updatePoint":{"line":70,"column":34},"line":70,"code":"    it('errors if url not a string', async function () {\n      try {\n        // @ts-ignore\n        perf().newHttpMetric(1337, 7331);\n        return Promise.reject(new Error('Did not throw'));\n      } catch (e: any) {\n        expect(e.message).toEqual(\"firebase.perf().newHttpMetric(*, _) 'url' must be a string.\");\n        return Promise.resolve();\n      }\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"errors if httpMethod not a string","suites":["Performance Monitoring","newHttpMetric()"],"updatePoint":{"line":81,"column":41},"line":81,"code":"    it('errors if httpMethod not a string', async function () {\n      try {\n        // @ts-ignore\n        perf().newHttpMetric('https://invertase.io', 1337);\n        return Promise.reject(new Error('Did not throw'));\n      } catch (e: any) {\n        expect(e.message).toEqual(\n          \"firebase.perf().newHttpMetric(_, *) 'httpMethod' must be one of CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE.\",\n        );\n        return Promise.resolve();\n      }\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"errors if httpMethod not a valid type","suites":["Performance Monitoring","newHttpMetric()"],"updatePoint":{"line":94,"column":45},"line":94,"code":"    it('errors if httpMethod not a valid type', async function () {\n      try {\n        // @ts-ignore\n        perf().newHttpMetric('https://invertase.io', 'FIRE');\n        return Promise.reject(new Error('Did not throw'));\n      } catch (e: any) {\n        expect(e.message).toEqual(\n          \"firebase.perf().newHttpMetric(_, *) 'httpMethod' must be one of CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE.\",\n        );\n        return Promise.resolve();\n      }\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"errors if not boolean","suites":["Performance Monitoring","setPerformanceCollectionEnabled()"],"updatePoint":{"line":109,"column":29},"line":109,"code":"    it('errors if not boolean', async function () {\n      try {\n        // @ts-ignore\n        await firebase.perf().setPerformanceCollectionEnabled();\n        return Promise.reject(new Error('Did not throw'));\n      } catch (e: any) {\n        expect(e.message).toEqual(\n          \"firebase.perf().setPerformanceCollectionEnabled(*) 'enabled' must be a boolean.\",\n        );\n        return Promise.resolve();\n      }\n    });","file":"perf.test.ts","skipped":false,"dir":"packages/perf/__tests__"},{"name":"accessible from firebase.app()","suites":["remoteConfig()","namespace"],"updatePoint":{"line":23,"column":38},"line":23,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.remoteConfig()).toBeDefined();\n      expect(app.remoteConfig().app).toEqual(app);\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"supports multiple apps","suites":["remoteConfig()","namespace"],"updatePoint":{"line":29,"column":30},"line":29,"code":"    it('supports multiple apps', async function () {\n      expect(firebase.remoteConfig().app.name).toEqual('[DEFAULT]');\n      expect(firebase.app('secondaryFromNative').remoteConfig().app.name).toEqual(\n        'secondaryFromNative',\n      );\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"LastFetchStatus","suites":["remoteConfig()","statics"],"updatePoint":{"line":38,"column":23},"line":38,"code":"    it('LastFetchStatus', function () {\n      expect(firebase.remoteConfig.LastFetchStatus).toBeDefined();\n      expect(firebase.remoteConfig.LastFetchStatus.FAILURE).toEqual('failure');\n      expect(firebase.remoteConfig.LastFetchStatus.SUCCESS).toEqual('success');\n      expect(firebase.remoteConfig.LastFetchStatus.NO_FETCH_YET).toEqual('no_fetch_yet');\n      expect(firebase.remoteConfig.LastFetchStatus.THROTTLED).toEqual('throttled');\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"ValueSource","suites":["remoteConfig()","statics"],"updatePoint":{"line":46,"column":19},"line":46,"code":"    it('ValueSource', function () {\n      expect(firebase.remoteConfig.ValueSource).toBeDefined();\n      expect(firebase.remoteConfig.ValueSource.REMOTE).toEqual('remote');\n      expect(firebase.remoteConfig.ValueSource.STATIC).toEqual('static');\n      expect(firebase.remoteConfig.ValueSource.DEFAULT).toEqual('default');\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"it throws if expiration is not a number","suites":["remoteConfig()","fetch()"],"updatePoint":{"line":55,"column":47},"line":55,"code":"    it('it throws if expiration is not a number', function () {\n      expect(() => {\n        // @ts-ignore - incorrect argument on purpose to check validation\n        firebase.remoteConfig().fetch('foo');\n      }).toThrow('must be a number value');\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"it throws if arg is not an object","suites":["remoteConfig()","setConfigSettings()"],"updatePoint":{"line":64,"column":41},"line":64,"code":"    it('it throws if arg is not an object', async function () {\n      expect(() => {\n        // @ts-ignore - incorrect argument on purpose to check validation\n        firebase.remoteConfig().setConfigSettings('not an object');\n      }).toThrow('must set an object');\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"throws if minimumFetchIntervalMillis is not a number","suites":["remoteConfig()","setConfigSettings()"],"updatePoint":{"line":71,"column":60},"line":71,"code":"    it('throws if minimumFetchIntervalMillis is not a number', async function () {\n      expect(() => {\n        // @ts-ignore - incorrect argument on purpose to check validation\n        firebase.remoteConfig().setConfigSettings({ minimumFetchIntervalMillis: 'potato' });\n      }).toThrow('must be a number type in milliseconds.');\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"throws if fetchTimeMillis is not a number","suites":["remoteConfig()","setConfigSettings()"],"updatePoint":{"line":78,"column":49},"line":78,"code":"    it('throws if fetchTimeMillis is not a number', function () {\n      expect(() => {\n        // @ts-ignore - incorrect argument on purpose to check validation\n        firebase.remoteConfig().setConfigSettings({ fetchTimeMillis: 'potato' });\n      }).toThrow('must be a number type in milliseconds.');\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"it throws if defaults object not provided","suites":["remoteConfig()","setDefaults()"],"updatePoint":{"line":87,"column":49},"line":87,"code":"    it('it throws if defaults object not provided', function () {\n      expect(() => {\n        // @ts-ignore - incorrect argument on purpose to check validation\n        firebase.remoteConfig().setDefaults('not an object');\n      }).toThrow('must be an object.');\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"throws if resourceName is not a string","suites":["remoteConfig()","setDefaultsFromResource()"],"updatePoint":{"line":96,"column":46},"line":96,"code":"    it('throws if resourceName is not a string', function () {\n      expect(() => {\n        // @ts-ignore - incorrect argument on purpose to check validation\n        firebase.remoteConfig().setDefaultsFromResource(1337);\n      }).toThrow('must be a string value');\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"should return an empty object pre-fetch, pre-defaults","suites":["remoteConfig()","getAll() should not crash"],"updatePoint":{"line":105,"column":61},"line":105,"code":"    it('should return an empty object pre-fetch, pre-defaults', function () {\n      const config = firebase.remoteConfig().getAll();\n      expect(config).toBeDefined();\n      expect(config).toEqual({});\n    });","file":"remote-config.test.ts","skipped":false,"dir":"packages/remote-config/__tests__"},{"name":"accessible from firebase.app()","suites":["Storage","namespace"],"updatePoint":{"line":7,"column":38},"line":7,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app.storage).toBeDefined();\n      expect(app.storage().useEmulator).toBeDefined();\n    });","file":"storage.test.ts","skipped":false,"dir":"packages/storage/__tests__"},{"name":"useEmulator requires a string host","suites":["Storage","useEmulator()"],"updatePoint":{"line":15,"column":42},"line":15,"code":"    it('useEmulator requires a string host', function () {\n      // @ts-ignore because we pass an invalid argument...\n      expect(() => storage().useEmulator()).toThrow(\n        'firebase.storage().useEmulator() takes a non-empty host',\n      );\n      expect(() => storage().useEmulator('', -1)).toThrow(\n        'firebase.storage().useEmulator() takes a non-empty host',\n      );\n      // @ts-ignore because we pass an invalid argument...\n      expect(() => storage().useEmulator(123)).toThrow(\n        'firebase.storage().useEmulator() takes a non-empty host',\n      );\n    });","file":"storage.test.ts","skipped":false,"dir":"packages/storage/__tests__"},{"name":"useEmulator requires a host and port","suites":["Storage","useEmulator()"],"updatePoint":{"line":29,"column":44},"line":29,"code":"    it('useEmulator requires a host and port', function () {\n      expect(() => storage().useEmulator('', 9000)).toThrow(\n        'firebase.storage().useEmulator() takes a non-empty host and port',\n      );\n      // No port\n      // @ts-ignore because we pass an invalid argument...\n      expect(() => storage().useEmulator('localhost')).toThrow(\n        'firebase.storage().useEmulator() takes a non-empty host and port',\n      );\n    });","file":"storage.test.ts","skipped":false,"dir":"packages/storage/__tests__"},{"name":"useEmulator -> remaps Android loopback to host","suites":["Storage","useEmulator()"],"updatePoint":{"line":40,"column":54},"line":40,"code":"    it('useEmulator -> remaps Android loopback to host', function () {\n      const foo = storage().useEmulator('localhost', 9000);\n      expect(foo).toEqual(['10.0.2.2', 9000]);\n\n      const bar = storage().useEmulator('127.0.0.1', 9000);\n      expect(bar).toEqual(['10.0.2.2', 9000]);\n    });","file":"storage.test.ts","skipped":false,"dir":"packages/storage/__tests__"},{"name":"accessible from firebase.app()","suites":["_template_()","namespace"],"updatePoint":{"line":5,"column":38},"line":5,"code":"    it('accessible from firebase.app()', function () {\n      const app = firebase.app();\n      expect(app._template_).toBeDefined();\n      expect(app._template_().app).toEqual(app);\n    });","file":"_template_.test.ts","skipped":false,"dir":"scripts/_TEMPLATE_/__tests__"}]}