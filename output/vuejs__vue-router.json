{"repo":"vuejs/vue-router","url":"https://github.com/vuejs/vue-router","branch":"dev","configs":[{"package":"vue-router","lang":"js","dir":"test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"run afterEach after initial navigation","suites":["abstract history"],"line":8,"updatePoint":{"line":8,"column":44,"index":238},"code":"  it('run afterEach after initial navigation', done => {\n    const router = new VueRouter({\n      mode: 'abstract'\n    });\n    const afterEach = jasmine.createSpy('afterEach');\n    const onReady = jasmine.createSpy('ready');\n    const onError = jasmine.createSpy('error');\n    router.afterEach(afterEach);\n    router.onReady(onReady, onError);\n    router.push('/').finally(() => {\n      expect(onReady).toHaveBeenCalled();\n      expect(onError).not.toHaveBeenCalled();\n      expect(afterEach).toHaveBeenCalled();\n      done();\n    });\n  });","file":"unit/specs/abstract-history.spec.js","skipped":false,"dir":"test"},{"name":"run afterEach after router.go","suites":["abstract history"],"line":24,"updatePoint":{"line":24,"column":35,"index":770},"code":"  it('run afterEach after router.go', done => {\n    const router = new VueRouter({\n      mode: 'abstract'\n    });\n    const afterEach = jasmine.createSpy('afterEach');\n    router.push('/').then(() => router.push('/foo')).then(() => {\n      router.afterEach(afterEach);\n      router.go(-1);\n      return delay(30);\n    }).finally(() => {\n      expect(afterEach).toHaveBeenCalled();\n      done();\n    });\n  });","file":"unit/specs/abstract-history.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["router.onReady"],"line":4,"updatePoint":{"line":4,"column":17,"index":117},"code":"  it('should work', done => {\n    const calls = [];\n    const router = new Router({\n      mode: 'abstract',\n      routes: [{\n        path: '/a',\n        component: {\n          name: 'A',\n          beforeRouteEnter: (to, from, next) => {\n            setTimeout(() => {\n              calls.push(2);\n              next();\n            }, 1);\n          }\n        }\n      }]\n    });\n    router.beforeEach((to, from, next) => {\n      setTimeout(() => {\n        calls.push(1);\n        next();\n      }, 1);\n    });\n    router.onReady(() => {\n      expect(calls).toEqual([1, 2]); // sync call when already ready\n\n      router.onReady(() => {\n        calls.push(3);\n      });\n      expect(calls).toEqual([1, 2, 3]);\n      done();\n    });\n    router.push('/a');\n    expect(calls).toEqual([]);\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"resolves parent params when using current route","suites":["route matching"],"line":41,"updatePoint":{"line":41,"column":53,"index":979},"code":"  it('resolves parent params when using current route', () => {\n    const router = new Router({\n      mode: 'abstract',\n      routes: [{\n        path: '/a/:id',\n        component: {\n          name: 'A'\n        },\n        children: [{\n          name: 'b',\n          path: 'b',\n          component: {\n            name: 'B'\n          }\n        }]\n      }]\n    });\n    router.push('/a/1');\n    const {\n      route,\n      resolved\n    } = router.resolve({\n      name: 'b'\n    });\n    expect(route.params).toEqual({\n      id: '1'\n    });\n    expect(resolved.params).toEqual({\n      id: '1'\n    });\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"can override currentRoute","suites":["route matching"],"line":72,"updatePoint":{"line":72,"column":31,"index":1555},"code":"  it('can override currentRoute', () => {\n    const router = new Router({\n      mode: 'abstract',\n      routes: [{\n        path: '/a/:id',\n        component: {\n          name: 'A'\n        },\n        children: [{\n          name: 'b',\n          path: 'b',\n          component: {\n            name: 'B'\n          }\n        }]\n      }]\n    });\n    router.push('/a/1');\n    const {\n      route,\n      resolved\n    } = router.resolve({\n      name: 'b'\n    }, {\n      params: {\n        id: '2'\n      },\n      path: '/a/2'\n    });\n    expect(route.params).toEqual({\n      id: '2'\n    });\n    expect(resolved.params).toEqual({\n      id: '2'\n    });\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["router.addRoutes"],"line":110,"updatePoint":{"line":110,"column":17,"index":2227},"code":"  it('should work', () => {\n    const router = new Router({\n      mode: 'abstract',\n      routes: [{\n        path: '/a',\n        component: {\n          name: 'A'\n        }\n      }]\n    });\n    router.push('/a');\n    let components = router.getMatchedComponents();\n    expect(components.length).toBe(1);\n    expect(components[0].name).toBe('A');\n    router.push('/b');\n    components = router.getMatchedComponents();\n    expect(components.length).toBe(0);\n    router.addRoutes([{\n      path: '/b',\n      component: {\n        name: 'B'\n      }\n    }]);\n    components = router.getMatchedComponents();\n    expect(components.length).toBe(1);\n    expect(components[0].name).toBe('B'); // make sure it preserves previous routes\n\n    router.push('/a');\n    components = router.getMatchedComponents();\n    expect(components.length).toBe(1);\n    expect(components[0].name).toBe('A');\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"allows navigating to the same as current location","suites":["router.addRoutes"],"line":142,"updatePoint":{"line":142,"column":55,"index":3146},"code":"  it('allows navigating to the same as current location', () => {\n    const router = new Router({\n      routes: [{\n        path: '/',\n        component: {}\n      }, {\n        path: '*',\n        component: {}\n      }]\n    });\n    router.push('/not-found');\n    expect(router.currentRoute.params).toEqual({\n      pathMatch: '/not-found'\n    });\n    router.addRoutes([{\n      path: '/not-found',\n      component: {}\n    }]); // the navigation should have changed locations\n\n    expect(router.currentRoute.params).toEqual({});\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"push does not return a Promise when a callback is passed","suites":["router.push/replace","callbacks"],"line":196,"updatePoint":{"line":196,"column":64,"index":4348},"code":"    it('push does not return a Promise when a callback is passed', done => {\n      expect(router.push('/foo', done)).toEqual(undefined);\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"push complete","suites":["router.push/replace","callbacks"],"line":199,"updatePoint":{"line":199,"column":21,"index":4450},"code":"    it('push complete', done => {\n      router.push('/foo', () => {\n        expect(calls).toEqual([1, 2, 3, 4]);\n        done();\n      });\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"push abort","suites":["router.push/replace","callbacks"],"line":205,"updatePoint":{"line":205,"column":18,"index":4594},"code":"    it('push abort', done => {\n      router.push('/foo', spy1, spy2);\n      router.push('/bar', () => {\n        expect(calls).toEqual([1, 1, 2, 2]);\n        expect(spy1).not.toHaveBeenCalled();\n        expect(spy2).toHaveBeenCalled();\n        done();\n      });\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"replace does not return a Promise when a callback is passed","suites":["router.push/replace","callbacks"],"line":214,"updatePoint":{"line":214,"column":67,"index":4912},"code":"    it('replace does not return a Promise when a callback is passed', done => {\n      expect(router.replace('/foo', done)).toEqual(undefined);\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"replace complete","suites":["router.push/replace","callbacks"],"line":217,"updatePoint":{"line":217,"column":24,"index":5020},"code":"    it('replace complete', done => {\n      router.replace('/foo', () => {\n        expect(calls).toEqual([1, 2, 3, 4]);\n        done();\n      });\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"replace abort","suites":["router.push/replace","callbacks"],"line":223,"updatePoint":{"line":223,"column":21,"index":5170},"code":"    it('replace abort', done => {\n      router.replace('/foo', spy1, spy2);\n      router.replace('/bar', () => {\n        expect(calls).toEqual([1, 1, 2, 2]);\n        expect(spy1).not.toHaveBeenCalled();\n        expect(spy2).toHaveBeenCalled();\n        done();\n      });\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"push complete","suites":["router.push/replace","promises"],"line":234,"updatePoint":{"line":234,"column":21,"index":5485},"code":"    it('push complete', done => {\n      router.push('/foo').then(spy1).finally(() => {\n        expect(calls).toEqual([1, 2, 3, 4]);\n        expect(spy1).toHaveBeenCalledWith(router.currentRoute);\n        done();\n      });\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"push abort","suites":["router.push/replace","promises"],"line":241,"updatePoint":{"line":241,"column":18,"index":5712},"code":"    it('push abort', done => {\n      router.push('/foo').catch(spy2);\n      router.push('/bar').finally(() => {\n        expect(calls).toEqual([1, 1, 2, 2]);\n        expect(spy1).not.toHaveBeenCalled();\n        expect(spy2).toHaveBeenCalled();\n        done();\n      });\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"replace complete","suites":["router.push/replace","promises"],"line":250,"updatePoint":{"line":250,"column":24,"index":5995},"code":"    it('replace complete', done => {\n      router.replace('/foo').then(spy1).finally(() => {\n        expect(calls).toEqual([1, 2, 3, 4]);\n        expect(spy1).toHaveBeenCalledWith(router.currentRoute);\n        done();\n      });\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"replace abort","suites":["router.push/replace","promises"],"line":257,"updatePoint":{"line":257,"column":21,"index":6228},"code":"    it('replace abort', done => {\n      router.replace('/foo').catch(spy2);\n      router.replace('/bar').finally(() => {\n        expect(calls).toEqual([1, 1, 2, 2]);\n        expect(spy1).not.toHaveBeenCalled();\n        expect(spy2).toHaveBeenCalled();\n        done();\n      });\n    });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"all apps point to the same router instance","suites":["router app destroy handling"],"line":309,"updatePoint":{"line":309,"column":48,"index":7168},"code":"  it('all apps point to the same router instance', () => {\n    expect(app1.$router).toBe(app2.$router);\n    expect(app2.$router).toBe(app3.$router);\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should have all 3 registered apps","suites":["router app destroy handling"],"line":313,"updatePoint":{"line":313,"column":39,"index":7314},"code":"  it('should have all 3 registered apps', () => {\n    expect(app1.$router.app).toBe(app1);\n    expect(app1.$router.apps.length).toBe(3);\n    expect(app1.$router.apps[0]).toBe(app1);\n    expect(app1.$router.apps[1]).toBe(app2);\n    expect(app1.$router.apps[2]).toBe(app3);\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should remove 2nd destroyed app from this.apps","suites":["router app destroy handling"],"line":320,"updatePoint":{"line":320,"column":52,"index":7605},"code":"  it('should remove 2nd destroyed app from this.apps', () => {\n    app2.$destroy();\n    expect(app1.$router.app).toBe(app1);\n    expect(app1.$router.apps.length).toBe(2);\n    expect(app1.$router.apps[0]).toBe(app1);\n    expect(app1.$router.apps[1]).toBe(app3);\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should remove 1st destroyed app and replace current app","suites":["router app destroy handling"],"line":327,"updatePoint":{"line":327,"column":61,"index":7881},"code":"  it('should remove 1st destroyed app and replace current app', () => {\n    app1.$destroy();\n    expect(app3.$router.app).toBe(app2);\n    expect(app3.$router.apps.length).toBe(2);\n    expect(app3.$router.apps[0]).toBe(app2);\n    expect(app1.$router.apps[1]).toBe(app3);\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should remove all apps","suites":["router app destroy handling"],"line":334,"updatePoint":{"line":334,"column":28,"index":8124},"code":"  it('should remove all apps', () => {\n    app1.$destroy();\n    app3.$destroy();\n    app2.$destroy();\n    expect(app3.$router.app).toBe(null);\n    expect(app3.$router.apps.length).toBe(0);\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should keep current app if already defined","suites":["router app destroy handling"],"line":341,"updatePoint":{"line":341,"column":48,"index":8339},"code":"  it('should keep current app if already defined', () => {\n    const app4 = new Vue({\n      router,\n\n      render(h) {\n        return h('div');\n      }\n\n    });\n    expect(app4.$router.app).toBe(app1);\n    expect(app4.$router.apps.length).toBe(4);\n    expect(app4.$router.apps[3]).toBe(app4);\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should replace current app if none is assigned when creating the app","suites":["router app destroy handling"],"line":354,"updatePoint":{"line":354,"column":74,"index":8664},"code":"  it('should replace current app if none is assigned when creating the app', () => {\n    app1.$destroy();\n    app3.$destroy();\n    app2.$destroy();\n    const app4 = new Vue({\n      router,\n\n      render(h) {\n        return h('div');\n      }\n\n    });\n    expect(router.app).toBe(app4);\n    expect(app4.$router).toBe(router);\n    expect(app4.$router.apps.length).toBe(1);\n    expect(app4.$router.apps[0]).toBe(app4);\n  });","file":"unit/specs/api.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Async utils","runQueue"],"line":4,"updatePoint":{"line":4,"column":19,"index":135},"code":"    it('should work', done => {\n      const calls = [];\n      const queue = [1, 2, 3, 4, 5].map(i => next => {\n        calls.push(i);\n        setTimeout(next, 0);\n      });\n      runQueue(queue, (fn, next) => fn(next), () => {\n        expect(calls).toEqual([1, 2, 3, 4, 5]);\n        done();\n      });\n    });","file":"unit/specs/async.spec.js","skipped":false,"dir":"test"},{"name":"has a pathMap object for default subroute at /bar/","suites":["Creating Route Map"],"line":65,"updatePoint":{"line":65,"column":56,"index":1281},"code":"  it('has a pathMap object for default subroute at /bar/', function () {\n    expect(maps.pathMap['/bar/']).not.toBeUndefined();\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"has a pathList which places wildcards at the end","suites":["Creating Route Map"],"line":68,"updatePoint":{"line":68,"column":54,"index":1413},"code":"  it('has a pathList which places wildcards at the end', () => {\n    expect(maps.pathList).toEqual(['', '/foo', '/bar/', '/bar', '/bar-redirect/', '/bar-redirect', '*']);\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"has a nameMap object for default subroute at 'bar.baz'","suites":["Creating Route Map"],"line":71,"updatePoint":{"line":71,"column":60,"index":1596},"code":"  it(\"has a nameMap object for default subroute at 'bar.baz'\", function () {\n    expect(maps.nameMap['bar.baz']).not.toBeUndefined();\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in development, has logged a warning concerning named route of parent and default subroute","suites":["Creating Route Map"],"line":74,"updatePoint":{"line":74,"column":96,"index":1772},"code":"  it('in development, has logged a warning concerning named route of parent and default subroute', function () {\n    process.env.NODE_ENV = 'development';\n    maps = createRouteMap(routes);\n    expect(console.warn).toHaveBeenCalledTimes(1);\n    expect(console.warn.calls.argsFor(0)[0]).toMatch(\"vue-router] Named Route 'bar'\");\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"warns about unencoded entities","suites":["Creating Route Map"],"line":80,"updatePoint":{"line":80,"column":36,"index":2046},"code":"  it('warns about unencoded entities', function () {\n    process.env.NODE_ENV = 'development';\n    maps = createRouteMap([{\n      path: '/é',\n      component: Home\n    }]);\n    expect(console.warn).toHaveBeenCalledTimes(1);\n    expect(console.warn.calls.argsFor(0)[0]).toMatch('vue-router] Route with path \"/é\"');\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in development, throws if path is missing","suites":["Creating Route Map"],"line":89,"updatePoint":{"line":89,"column":47,"index":2377},"code":"  it('in development, throws if path is missing', function () {\n    process.env.NODE_ENV = 'development';\n    expect(() => {\n      maps = createRouteMap([{\n        component: Bar\n      }]);\n    }).toThrowError(/\"path\" is required/);\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in production, it has not logged this warning","suites":["Creating Route Map"],"line":97,"updatePoint":{"line":97,"column":51,"index":2620},"code":"  it('in production, it has not logged this warning', function () {\n    maps = createRouteMap(routes);\n    expect(console.warn).not.toHaveBeenCalled();\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in development, warn duplicate param keys","suites":["Creating Route Map"],"line":101,"updatePoint":{"line":101,"column":47,"index":2774},"code":"  it('in development, warn duplicate param keys', () => {\n    process.env.NODE_ENV = 'development';\n    maps = createRouteMap([{\n      path: '/foo/:id',\n      component: Foo,\n      children: [{\n        path: 'bar/:id',\n        component: Bar\n      }]\n    }]);\n    expect(console.warn).toHaveBeenCalled();\n    expect(console.warn.calls.argsFor(0)[0]).toMatch('vue-router] Duplicate param keys in route with path: \"/foo/:id/bar/:id\"');\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in development, warns about alias and path having the same value","suites":["Creating Route Map"],"line":114,"updatePoint":{"line":114,"column":70,"index":3237},"code":"  it('in development, warns about alias and path having the same value', () => {\n    process.env.NODE_ENV = 'development';\n    maps = createRouteMap([{\n      path: '/foo-alias',\n      component: Foo,\n      alias: '/foo-alias'\n    }]);\n    expect(console.warn).toHaveBeenCalled();\n    expect(console.warn.calls.argsFor(0)[0]).toMatch('vue-router] Found an alias with the same value as the path: \"/foo-alias\"');\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in development, warns about one alias (in an array) having the same value as the path","suites":["Creating Route Map"],"line":124,"updatePoint":{"line":124,"column":91,"index":3674},"code":"  it('in development, warns about one alias (in an array) having the same value as the path', () => {\n    process.env.NODE_ENV = 'development';\n    maps = createRouteMap([{\n      path: '/foo-alias',\n      component: Foo,\n      alias: ['/bar', '/foo-alias']\n    }]);\n    expect(console.warn).toHaveBeenCalled();\n    expect(console.warn.calls.argsFor(0)[0]).toMatch('vue-router] Found an alias with the same value as the path: \"/foo-alias\"');\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in development, warn if a path is missing a leading slash","suites":["Creating Route Map"],"line":134,"updatePoint":{"line":134,"column":63,"index":4093},"code":"  it('in development, warn if a path is missing a leading slash', function () {\n    process.env.NODE_ENV = 'development';\n    maps = createRouteMap([{\n      path: 'bar',\n      name: 'bar',\n      component: Bar\n    }]);\n    expect(console.warn).toHaveBeenCalledTimes(1);\n    expect(console.warn.calls.argsFor(0)[0]).toEqual('[vue-router] Non-nested routes must include a leading slash character. Fix the following routes: \\n- bar');\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in development, it does not log the missing leading slash when routes are valid","suites":["Creating Route Map"],"line":144,"updatePoint":{"line":144,"column":85,"index":4553},"code":"  it('in development, it does not log the missing leading slash when routes are valid', function () {\n    process.env.NODE_ENV = 'development';\n    maps = createRouteMap([{\n      path: '/bar',\n      name: 'bar',\n      component: Bar\n    }]);\n    expect(console.warn).not.toHaveBeenCalled();\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"in production, it does not log the missing leading slash warning","suites":["Creating Route Map"],"line":153,"updatePoint":{"line":153,"column":70,"index":4835},"code":"  it('in production, it does not log the missing leading slash warning', function () {\n    process.env.NODE_ENV = 'production';\n    maps = createRouteMap([{\n      path: 'bar',\n      name: 'bar',\n      component: Bar\n    }]);\n    expect(console.warn).not.toHaveBeenCalled();\n  });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"caseSensitive option in route","suites":["Creating Route Map","path-to-regexp options"],"line":183,"updatePoint":{"line":183,"column":37,"index":5530},"code":"    it('caseSensitive option in route', function () {\n      const {\n        nameMap\n      } = createRouteMap(routes);\n      expect(nameMap.FooBar.regex.ignoreCase).toBe(false);\n      expect(nameMap.bar.regex.ignoreCase).toBe(true);\n      expect(nameMap.foo.regex.ignoreCase).toBe(true);\n    });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"pathToRegexpOptions option in route","suites":["Creating Route Map","path-to-regexp options"],"line":191,"updatePoint":{"line":191,"column":43,"index":5831},"code":"    it('pathToRegexpOptions option in route', function () {\n      const {\n        nameMap\n      } = createRouteMap([{\n        name: 'foo',\n        path: '/foo',\n        component: Foo,\n        pathToRegexpOptions: {\n          sensitive: true\n        }\n      }, {\n        name: 'bar',\n        path: '/bar',\n        component: Bar,\n        pathToRegexpOptions: {\n          sensitive: false\n        }\n      }]);\n      expect(nameMap.foo.regex.ignoreCase).toBe(false);\n      expect(nameMap.bar.regex.ignoreCase).toBe(true);\n    });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"caseSensitive over pathToRegexpOptions in route","suites":["Creating Route Map","path-to-regexp options"],"line":212,"updatePoint":{"line":212,"column":55,"index":6371},"code":"    it('caseSensitive over pathToRegexpOptions in route', function () {\n      const {\n        nameMap\n      } = createRouteMap([{\n        name: 'foo',\n        path: '/foo',\n        component: Foo,\n        caseSensitive: true,\n        pathToRegexpOptions: {\n          sensitive: false\n        }\n      }]);\n      expect(nameMap.foo.regex.ignoreCase).toBe(false);\n    });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"keeps trailing slashes with strict mode","suites":["Creating Route Map","path-to-regexp options"],"line":226,"updatePoint":{"line":226,"column":47,"index":6732},"code":"    it('keeps trailing slashes with strict mode', function () {\n      const {\n        pathList\n      } = createRouteMap([{\n        path: '/foo/',\n        component: Foo,\n        pathToRegexpOptions: {\n          strict: true\n        }\n      }, {\n        path: '/bar/',\n        component: Foo\n      }]);\n      expect(pathList).toEqual(['/foo/', '/bar']);\n    });","file":"unit/specs/create-map.spec.js","skipped":false,"dir":"test"},{"name":"can add nested routes","suites":["Creating Matcher"],"line":45,"updatePoint":{"line":45,"column":27,"index":792},"code":"  it('can add nested routes', function () {\n    const component = {\n      name: 'fake'\n    };\n    const matcher = createMatcher([{\n      path: '/p',\n      name: 'parent',\n      children: [{\n        path: 'a',\n        name: 'a',\n        component\n      }, {\n        path: 'c',\n        name: 'child',\n        component,\n        children: [{\n          path: 'n',\n          name: 'nested',\n          component\n        }]\n      }]\n    }, {\n      // easier to debug tests\n      path: '*',\n      name: 'not-found',\n      component\n    }]);\n    matcher.addRoute({\n      path: '/b',\n      name: 'b',\n      component\n    });\n    matcher.addRoute('parent', {\n      path: 'b',\n      name: 'p-b',\n      component\n    });\n    matcher.addRoute('child', {\n      path: 'b',\n      name: 'p-c-b',\n      component\n    });\n    expect(matcher.match('/b').name).toBe('b');\n    expect(matcher.match('/p/b').name).toBe('p-b');\n    expect(matcher.match('/p/c/b').name).toBe('p-c-b');\n    expect(matcher.match('/p/c/n').name).toBe('nested');\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"can get all routes","suites":["Creating Matcher"],"line":92,"updatePoint":{"line":92,"column":24,"index":1810},"code":"  it('can get all routes', function () {\n    const component = {\n      name: 'fake'\n    };\n    const matcher = createMatcher([]);\n    expect(matcher.getRoutes()).toEqual([]);\n    matcher.addRoute({\n      path: '/b',\n      name: 'b',\n      component\n    });\n    expect(matcher.getRoutes().length).toBe(1);\n    matcher.addRoute({\n      path: '/c',\n      name: 'c',\n      alias: ['/a', '/d'],\n      component\n    });\n    expect(matcher.getRoutes().length).toBe(4);\n    matcher.addRoute('b', {\n      path: 'd',\n      component\n    });\n    expect(matcher.getRoutes().length).toBe(5);\n    matcher.addRoute('c', {\n      path: 'd',\n      component\n    });\n    expect(matcher.getRoutes().length).toBe(8);\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"in development, has logged a warning if a named route does not exist","suites":["Creating Matcher"],"line":122,"updatePoint":{"line":122,"column":74,"index":2562},"code":"  it('in development, has logged a warning if a named route does not exist', function () {\n    process.env.NODE_ENV = 'development';\n    const {\n      name,\n      matched\n    } = match({\n      name: 'bar'\n    }, routes[0]);\n    expect(matched.length).toBe(0);\n    expect(name).toBe('bar');\n    expect(console.warn).toHaveBeenCalled();\n    expect(console.warn.calls.argsFor(0)[0]).toMatch(\"Route with name 'bar' does not exist\");\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"in production, it has not logged this warning","suites":["Creating Matcher"],"line":135,"updatePoint":{"line":135,"column":51,"index":2974},"code":"  it('in production, it has not logged this warning', function () {\n    match({\n      name: 'foo'\n    }, routes[0]);\n    expect(console.warn).not.toHaveBeenCalled();\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"matches named route with params without warning","suites":["Creating Matcher"],"line":141,"updatePoint":{"line":141,"column":53,"index":3148},"code":"  it('matches named route with params without warning', function () {\n    process.env.NODE_ENV = 'development';\n    const {\n      name,\n      path,\n      params\n    } = match({\n      name: 'baz',\n      params: {\n        testparam: 'testvalue'\n      }\n    });\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(name).toEqual('baz');\n    expect(path).toEqual('/baz/testvalue');\n    expect(params).toEqual({\n      testparam: 'testvalue'\n    });\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"matches asterisk routes with a default param name without warning","suites":["Creating Matcher"],"line":160,"updatePoint":{"line":160,"column":71,"index":3623},"code":"  it('matches asterisk routes with a default param name without warning', function () {\n    process.env.NODE_ENV = 'development';\n    const {\n      params\n    } = match({\n      name: 'notFound',\n      params: {\n        pathMatch: '/not-found'\n      }\n    }, routes[0]);\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(params).toEqual({\n      pathMatch: '/not-found'\n    });\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"matches partial asterisk routes with a default param name without warning","suites":["Creating Matcher"],"line":175,"updatePoint":{"line":175,"column":79,"index":4023},"code":"  it('matches partial asterisk routes with a default param name without warning', function () {\n    process.env.NODE_ENV = 'development';\n    const {\n      params,\n      path\n    } = match({\n      name: 'error',\n      params: {\n        pathMatch: 'some'\n      }\n    }, routes[0]);\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(params).toEqual({\n      pathMatch: 'some'\n    });\n    expect(path).toEqual('/error/some');\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"matches named catch-all route with empty pathMath param without warning","suites":["Creating Matcher"],"line":192,"updatePoint":{"line":192,"column":77,"index":4459},"code":"  it('matches named catch-all route with empty pathMath param without warning', function () {\n    process.env.NODE_ENV = 'development';\n    match({\n      name: 'notFound',\n      params: {\n        pathMatch: ''\n      }\n    }, routes[0]);\n    expect(console.warn).not.toHaveBeenCalled();\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"matches asterisk routes with a default param name","suites":["Creating Matcher"],"line":202,"updatePoint":{"line":202,"column":55,"index":4729},"code":"  it('matches asterisk routes with a default param name', function () {\n    const {\n      params\n    } = match({\n      path: '/not-found'\n    }, routes[0]);\n    expect(params).toEqual({\n      pathMatch: '/not-found'\n    });\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"allows an empty pathMatch","suites":["Creating Matcher"],"line":212,"updatePoint":{"line":212,"column":31,"index":4935},"code":"  it('allows an empty pathMatch', function () {\n    process.env.NODE_ENV = 'development';\n    const pathForErrorRoute = match({\n      name: 'error',\n      params: {\n        pathMatch: ''\n      }\n    }, routes[0]).path;\n    const pathForNotFoundRoute = match({\n      name: 'notFound',\n      params: {\n        pathMatch: ''\n      }\n    }, routes[0]).path;\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(pathForErrorRoute).toEqual('/error/');\n    expect(pathForNotFoundRoute).toEqual('/');\n  });","file":"unit/specs/create-matcher.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["custom query parse/stringify"],"line":5,"updatePoint":{"line":5,"column":17,"index":154},"code":"  it('should work', () => {\n    const router = new VueRouter({\n      parseQuery: () => ({\n        foo: 1\n      }),\n      stringifyQuery: () => '?foo=1'\n    });\n    router.push('/?bar=2');\n    expect(router.currentRoute.query).toEqual({\n      foo: 1\n    });\n    expect(router.currentRoute.fullPath).toEqual('/?foo=1');\n  });","file":"unit/specs/custom-query.spec.js","skipped":false,"dir":"test"},{"name":"updates $route on all instances","suites":["[Vue Instance].$route bindings","boundToSingleVueInstance"],"line":5,"updatePoint":{"line":5,"column":39,"index":205},"code":"    it('updates $route on all instances', () => {\n      const router = new VueRouter({\n        routes: [{\n          path: '/',\n          component: {\n            name: 'foo'\n          }\n        }, {\n          path: '/bar',\n          component: {\n            name: 'bar'\n          }\n        }]\n      });\n      const app1 = new Vue({\n        router\n      });\n      const app2 = new Vue({\n        router\n      });\n      expect(app1.$route.path).toBe('/');\n      expect(app2.$route.path).toBe('/');\n      router.push('/bar');\n      expect(app1.$route.path).toBe('/bar');\n      expect(app2.$route.path).toBe('/bar');\n    });","file":"unit/specs/discrete-components.spec.js","skipped":false,"dir":"test"},{"name":"onReady errors","suites":["error handling"],"line":9,"updatePoint":{"line":9,"column":20,"index":284},"code":"  it('onReady errors', done => {\n    const router = new VueRouter();\n    const err = new Error('foo');\n    router.beforeEach(() => {\n      throw err;\n    });\n    router.onError(() => {});\n    const onReady = jasmine.createSpy('ready');\n    const onError = jasmine.createSpy('error');\n    const onPromiseReject = jasmine.createSpy('promise reject');\n    router.onReady(onReady, onError);\n    router.push('/').catch(onPromiseReject).finally(() => {\n      expect(onReady).not.toHaveBeenCalled();\n      expect(onError).toHaveBeenCalledWith(err);\n      expect(onPromiseReject).toHaveBeenCalled();\n      done();\n    });\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"navigation errors","suites":["error handling"],"line":27,"updatePoint":{"line":27,"column":23,"index":907},"code":"  it('navigation errors', done => {\n    const router = new VueRouter();\n    const err = new Error('foo');\n    const spy = jasmine.createSpy('error');\n    const spy1 = jasmine.createSpy('promise reject');\n    router.onError(spy);\n    router.push('/');\n    router.beforeEach(() => {\n      throw err;\n    });\n    router.push('/foo').catch(spy1).finally(() => {\n      expect(spy).toHaveBeenCalledWith(err);\n      expect(spy1).toHaveBeenCalled();\n      done();\n    });\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"NavigationDuplicated error","suites":["error handling"],"line":43,"updatePoint":{"line":43,"column":32,"index":1386},"code":"  it('NavigationDuplicated error', done => {\n    const router = new VueRouter();\n    router.push('/foo');\n    router.push('/foo').catch(err => {\n      expect(err.type).toBe(NavigationFailureType.duplicated);\n      expect(VueRouter.isNavigationFailure(err)).toBe(true);\n      expect(VueRouter.isNavigationFailure(err, NavigationFailureType.duplicated)).toBe(true);\n      done();\n    });\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"NavigationCancelled error","suites":["error handling"],"line":53,"updatePoint":{"line":53,"column":31,"index":1777},"code":"  it('NavigationCancelled error', done => {\n    const router = new VueRouter();\n    router.beforeEach((to, from, next) => {\n      setTimeout(() => next(), 100);\n    });\n    router.push('/foo').catch(err => {\n      expect(err.type).toBe(NavigationFailureType.cancelled);\n      done();\n    });\n    router.push('/');\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"NavigationCancelled error for nested async navigation","suites":["error handling"],"line":64,"updatePoint":{"line":64,"column":59,"index":2125},"code":"  it('NavigationCancelled error for nested async navigation', done => {\n    const component = {\n      template: `<img />`,\n\n      beforeRouteEnter(to, from, next) {\n        setTimeout(() => next(), 100);\n      }\n\n    };\n    const router = new VueRouter({\n      routes: [{\n        path: '/a',\n        component\n      }]\n    });\n    router.push('/a').catch(err => {\n      expect(err.type).toBe(NavigationFailureType.cancelled);\n      done();\n    });\n    router.push('/');\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"NavigationRedirected error","suites":["error handling"],"line":85,"updatePoint":{"line":85,"column":32,"index":2574},"code":"  it('NavigationRedirected error', done => {\n    const router = new VueRouter();\n    router.beforeEach((to, from, next) => {\n      if (to.query.redirect) {\n        next(to.query.redirect);\n      }\n    });\n    router.push('/foo?redirect=/').catch(err => {\n      expect(err.type).toBe(NavigationFailureType.redirected);\n      expect(err.from.path).toBe('/');\n      expect(err.to.path).toBe('/foo');\n      done();\n    });\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"NavigationAborted error","suites":["error handling"],"line":99,"updatePoint":{"line":99,"column":29,"index":2996},"code":"  it('NavigationAborted error', done => {\n    const router = new VueRouter();\n    router.beforeEach((to, from, next) => {\n      next(false);\n    });\n    router.push('/foo').catch(err => {\n      expect(err.type).toBe(NavigationFailureType.aborted);\n      done();\n    });\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"async component errors","suites":["error handling"],"line":109,"updatePoint":{"line":109,"column":28,"index":3271},"code":"  it('async component errors', done => {\n    spyOn(console, 'warn');\n    const err = new Error('foo');\n    const spy1 = jasmine.createSpy('error');\n    const spy2 = jasmine.createSpy('error');\n    const spy3 = jasmine.createSpy('promise reject');\n\n    const Comp = () => {\n      throw err;\n    };\n\n    const router = new VueRouter({\n      routes: [{\n        path: '/',\n        component: Comp\n      }]\n    });\n    router.onError(spy1);\n    router.onReady(() => {}, spy2);\n    router.push('/').catch(spy3).finally(() => {\n      expect(spy1).toHaveBeenCalledWith(err);\n      expect(spy2).toHaveBeenCalledWith(err);\n      expect(spy3).toHaveBeenCalled();\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      done();\n    });\n  }); // https://github.com/vuejs/vue-router/issues/3225","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"should trigger onReady onSuccess when redirecting","suites":["error handling"],"line":137,"updatePoint":{"line":137,"column":55,"index":4083},"code":"  it('should trigger onReady onSuccess when redirecting', done => {\n    const router = new VueRouter({\n      routes: [{\n        path: '/',\n        component: {}\n      }, {\n        path: '/foo',\n        component: {}\n      }]\n    });\n    const onError = jasmine.createSpy('onError');\n    const onReadySuccess = jasmine.createSpy('onReadySuccess');\n    const onReadyFail = jasmine.createSpy('onReadyFail');\n    router.onError(onError);\n    router.onReady(onReadySuccess, onReadyFail);\n    router.beforeEach((to, from, next) => {\n      if (to.path === '/') next('/foo');else next();\n    });\n    const pushCatch = jasmine.createSpy('pushCatch'); // initial navigation\n\n    router.push('/').catch(pushCatch).finally(() => {\n      expect(router.currentRoute.path).toBe('/foo');\n      expect(onReadyFail).not.toHaveBeenCalled(); // in 3.2.0 it was called with undefined\n      // expect(pushCatch).not.toHaveBeenCalled()\n\n      expect(onError).not.toHaveBeenCalled();\n      expect(onReadySuccess).toHaveBeenCalled();\n      done();\n    });\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"should trigger onError if error is thrown inside redirect option","suites":["error handling"],"line":167,"updatePoint":{"line":167,"column":70,"index":5135},"code":"  it('should trigger onError if error is thrown inside redirect option', done => {\n    const error = new Error('foo');\n    const config = [{\n      path: '/oldpath/:part',\n      redirect: to => {\n        throw error;\n      }\n    }];\n    const router = new VueRouter({\n      routes: config\n    });\n    const onError = jasmine.createSpy('onError');\n    router.onError(onError);\n    const pushCatch = jasmine.createSpy('pushCatch');\n    router.push('/oldpath/test').catch(pushCatch).finally(() => {\n      expect(pushCatch).toHaveBeenCalledWith(error);\n      expect(onError).toHaveBeenCalledWith(error);\n      done();\n    });\n  });","file":"unit/specs/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"string","suites":["Location utils","normalizeLocation"],"line":4,"updatePoint":{"line":4,"column":14,"index":154},"code":"    it('string', () => {\n      const loc = normalizeLocation('/abc?foo=bar&baz=qux#hello');\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/abc');\n      expect(loc.hash).toBe('#hello');\n      expect(JSON.stringify(loc.query)).toBe(JSON.stringify({\n        foo: 'bar',\n        baz: 'qux'\n      }));\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"empty string","suites":["Location utils","normalizeLocation"],"line":14,"updatePoint":{"line":14,"column":20,"index":490},"code":"    it('empty string', function () {\n      const loc = normalizeLocation('', {\n        path: '/abc'\n      });\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/abc');\n      expect(loc.hash).toBe('');\n      expect(JSON.stringify(loc.query)).toBe(JSON.stringify({}));\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"undefined","suites":["Location utils","normalizeLocation"],"line":23,"updatePoint":{"line":23,"column":17,"index":783},"code":"    it('undefined', function () {\n      const loc = normalizeLocation({}, {\n        path: '/abc'\n      });\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/abc');\n      expect(loc.hash).toBe('');\n      expect(JSON.stringify(loc.query)).toBe(JSON.stringify({}));\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"relative","suites":["Location utils","normalizeLocation"],"line":32,"updatePoint":{"line":32,"column":16,"index":1075},"code":"    it('relative', () => {\n      const loc = normalizeLocation('abc?foo=bar&baz=qux#hello', {\n        path: '/root/next'\n      });\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/root/abc');\n      expect(loc.hash).toBe('#hello');\n      expect(JSON.stringify(loc.query)).toBe(JSON.stringify({\n        foo: 'bar',\n        baz: 'qux'\n      }));\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"relative append","suites":["Location utils","normalizeLocation"],"line":44,"updatePoint":{"line":44,"column":23,"index":1456},"code":"    it('relative append', () => {\n      const loc = normalizeLocation('abc?foo=bar&baz=qux#hello', {\n        path: '/root/next'\n      }, true);\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/root/next/abc');\n      expect(loc.hash).toBe('#hello');\n      expect(JSON.stringify(loc.query)).toBe(JSON.stringify({\n        foo: 'bar',\n        baz: 'qux'\n      }));\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"relative query & hash","suites":["Location utils","normalizeLocation"],"line":56,"updatePoint":{"line":56,"column":29,"index":1854},"code":"    it('relative query & hash', () => {\n      const loc = normalizeLocation('?foo=bar&baz=qux#hello', {\n        path: '/root/next'\n      });\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/root/next');\n      expect(loc.hash).toBe('#hello');\n      expect(JSON.stringify(loc.query)).toBe(JSON.stringify({\n        foo: 'bar',\n        baz: 'qux'\n      }));\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"relative params (named)","suites":["Location utils","normalizeLocation"],"line":68,"updatePoint":{"line":68,"column":31,"index":2241},"code":"    it('relative params (named)', () => {\n      const loc = normalizeLocation({\n        params: {\n          lang: 'fr'\n        }\n      }, {\n        name: 'hello',\n        params: {\n          lang: 'en',\n          id: 'foo'\n        }\n      });\n      expect(loc._normalized).toBe(true);\n      expect(loc.name).toBe('hello');\n      expect(loc.params).toEqual({\n        lang: 'fr',\n        id: 'foo'\n      });\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"relative params (non-named)","suites":["Location utils","normalizeLocation"],"line":87,"updatePoint":{"line":87,"column":35,"index":2659},"code":"    it('relative params (non-named)', () => {\n      const loc = normalizeLocation({\n        params: {\n          lang: 'fr'\n        }\n      }, {\n        path: '/en/foo',\n        params: {\n          lang: 'en',\n          id: 'foo'\n        },\n        matched: [{\n          path: '/:lang(en|fr)/:id'\n        }]\n      });\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/fr/foo');\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"custom regex can be case insensitive","suites":["Location utils","normalizeLocation"],"line":105,"updatePoint":{"line":105,"column":44,"index":3075},"code":"    it('custom regex can be case insensitive', () => {\n      const loc = normalizeLocation({\n        params: {\n          lang: 'FR'\n        }\n      }, {\n        path: '/en/foo',\n        params: {\n          lang: 'en',\n          id: 'foo'\n        },\n        matched: [{\n          path: '/:lang(en|fr)/:id'\n        }]\n      });\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/FR/foo');\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"relative append","suites":["Location utils","normalizeLocation"],"line":123,"updatePoint":{"line":123,"column":23,"index":3470},"code":"    it('relative append', () => {\n      const loc = normalizeLocation({\n        path: 'a'\n      }, {\n        path: '/b'\n      }, true);\n      expect(loc.path).toBe('/b/a');\n      const loc2 = normalizeLocation({\n        path: 'a',\n        append: true\n      }, {\n        path: '/b'\n      });\n      expect(loc2.path).toBe('/b/a');\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"object","suites":["Location utils","normalizeLocation"],"line":138,"updatePoint":{"line":138,"column":14,"index":3799},"code":"    it('object', () => {\n      const loc = normalizeLocation({\n        path: '/abc?foo=bar#hello',\n        query: {\n          baz: 'qux'\n        },\n        hash: 'lol'\n      });\n      expect(loc._normalized).toBe(true);\n      expect(loc.path).toBe('/abc');\n      expect(loc.hash).toBe('#lol');\n      expect(JSON.stringify(loc.query)).toBe(JSON.stringify({\n        foo: 'bar',\n        baz: 'qux'\n      }));\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"skip normalized","suites":["Location utils","normalizeLocation"],"line":154,"updatePoint":{"line":154,"column":23,"index":4222},"code":"    it('skip normalized', () => {\n      const loc1 = {\n        _normalized: true,\n        path: '/abc?foo=bar#hello',\n        query: {\n          baz: 'qux'\n        },\n        hash: 'lol'\n      };\n      const loc2 = normalizeLocation(loc1);\n      expect(loc1).toBe(loc2);\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"creates copies when not normalized","suites":["Location utils","normalizeLocation"],"line":166,"updatePoint":{"line":166,"column":42,"index":4520},"code":"    it('creates copies when not normalized', () => {\n      const l1 = {\n        name: 'foo'\n      };\n      expect(normalizeLocation(l1)).not.toBe(l1);\n      const l2 = {\n        path: '/foo'\n      };\n      expect(normalizeLocation(l2)).not.toBe(l2);\n      const l3 = {\n        path: '/foo',\n        query: {\n          foo: 'foo'\n        }\n      };\n      expect(normalizeLocation(l3)).not.toBe(l3);\n    });","file":"unit/specs/location.spec.js","skipped":false,"dir":"test"},{"name":"should be in abstract mode","suites":["Usage in Node"],"line":5,"updatePoint":{"line":5,"column":32,"index":154},"code":"  it('should be in abstract mode', () => {\n    const router = new VueRouter();\n    expect(router.mode).toBe('abstract');\n  });","file":"unit/specs/node.spec.js","skipped":false,"dir":"test"},{"name":"should be able to navigate without app instance","suites":["Usage in Node"],"line":9,"updatePoint":{"line":9,"column":53,"index":302},"code":"  it('should be able to navigate without app instance', () => {\n    const router = new VueRouter({\n      routes: [{\n        path: '/',\n        component: {\n          name: 'foo'\n        }\n      }, {\n        path: '/bar',\n        component: {\n          name: 'bar'\n        }\n      }]\n    });\n    router.push('/bar');\n    expect(router.history.current.path).toBe('/bar');\n  });","file":"unit/specs/node.spec.js","skipped":false,"dir":"test"},{"name":"getMatchedComponents","suites":["Usage in Node"],"line":26,"updatePoint":{"line":26,"column":26,"index":651},"code":"  it('getMatchedComponents', () => {\n    const Foo = {\n      name: 'foo'\n    };\n    const Bar = {\n      name: 'bar'\n    };\n    const Baz = {\n      name: 'baz'\n    };\n    const router = new VueRouter({\n      routes: [{\n        path: '/',\n        component: Foo\n      }, {\n        path: '/bar',\n        component: Bar,\n        children: [{\n          path: 'baz',\n          component: Baz\n        }]\n      }]\n    });\n    expect(router.getMatchedComponents('/')).toEqual([Foo]);\n    expect(router.getMatchedComponents('/bar/baz')).toEqual([Bar, Baz]);\n  });","file":"unit/specs/node.spec.js","skipped":false,"dir":"test"},{"name":"should navigate through history with same consecutive routes in history stack","suites":["Usage in Node"],"line":52,"updatePoint":{"line":52,"column":83,"index":1262},"code":"  it('should navigate through history with same consecutive routes in history stack', () => {\n    const success = jasmine.createSpy('complete');\n    const error = jasmine.createSpy('error');\n    const router = new VueRouter({\n      routes: [{\n        path: '/',\n        component: {\n          name: 'foo'\n        }\n      }, {\n        path: '/bar',\n        component: {\n          name: 'bar'\n        }\n      }]\n    });\n    router.push('/', success, error);\n    expect(success).toHaveBeenCalledTimes(1);\n    expect(error).toHaveBeenCalledTimes(0);\n    router.push('/bar', success, error);\n    expect(success).toHaveBeenCalledTimes(2);\n    expect(error).toHaveBeenCalledTimes(0);\n    router.push('/', success, error);\n    expect(success).toHaveBeenCalledTimes(3);\n    expect(error).toHaveBeenCalledTimes(0);\n    router.replace('/bar', success, error);\n    expect(success).toHaveBeenCalledTimes(4);\n    expect(error).toHaveBeenCalledTimes(0);\n    expect(router.history.current.path).toBe('/bar');\n    router.back();\n    expect(router.history.current.path).toBe('/bar');\n    router.back();\n    expect(router.history.current.path).toBe('/');\n  });","file":"unit/specs/node.spec.js","skipped":false,"dir":"test"},{"name":"should trigger onReady after push with redirect","suites":["onReady order"],"line":21,"updatePoint":{"line":21,"column":53,"index":425},"code":"  it('should trigger onReady after push with redirect', done => {\n    const {\n      router\n    } = factory();\n    let n = 0;\n    const count = 2;\n    router.onReady(() => {\n      expect(router.currentRoute.path).toBe('/foo');\n      if (++n === count) done();\n    });\n    router.beforeEach((to, from, next) => {\n      if (to.path === '/') next('/foo');else next();\n    });\n    router.push('/').catch(() => {\n      expect(router.currentRoute.path).toBe('/foo');\n      if (++n === count) done();\n    });\n  });","file":"unit/specs/onReady.spec.js","skipped":false,"dir":"test"},{"name":"absolute","suites":["Path utils","resolvePath"],"line":4,"updatePoint":{"line":4,"column":16,"index":158},"code":"    it('absolute', () => {\n      const path = resolvePath('/a', '/b');\n      expect(path).toBe('/a');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"relative","suites":["Path utils","resolvePath"],"line":8,"updatePoint":{"line":8,"column":16,"index":268},"code":"    it('relative', () => {\n      const path = resolvePath('c/d', '/b');\n      expect(path).toBe('/c/d');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"relative with append","suites":["Path utils","resolvePath"],"line":12,"updatePoint":{"line":12,"column":28,"index":393},"code":"    it('relative with append', () => {\n      const path = resolvePath('c/d', '/b', true);\n      expect(path).toBe('/b/c/d');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"relative parent","suites":["Path utils","resolvePath"],"line":16,"updatePoint":{"line":16,"column":23,"index":521},"code":"    it('relative parent', () => {\n      const path = resolvePath('../d', '/a/b/c');\n      expect(path).toBe('/a/d');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"relative parent with append","suites":["Path utils","resolvePath"],"line":20,"updatePoint":{"line":20,"column":35,"index":658},"code":"    it('relative parent with append', () => {\n      const path = resolvePath('../d', '/a/b/c', true);\n      expect(path).toBe('/a/b/d');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"relative query","suites":["Path utils","resolvePath"],"line":24,"updatePoint":{"line":24,"column":22,"index":790},"code":"    it('relative query', () => {\n      const path = resolvePath('?foo=bar', '/a/b');\n      expect(path).toBe('/a/b?foo=bar');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"relative hash","suites":["Path utils","resolvePath"],"line":28,"updatePoint":{"line":28,"column":21,"index":923},"code":"    it('relative hash', () => {\n      const path = resolvePath('#hi', '/a/b');\n      expect(path).toBe('/a/b#hi');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"plain","suites":["Path utils","parsePath"],"line":34,"updatePoint":{"line":34,"column":13,"index":1076},"code":"    it('plain', () => {\n      const res = parsePath('/a');\n      expect(res.path).toBe('/a');\n      expect(res.hash).toBe('');\n      expect(res.query).toBe('');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"query","suites":["Path utils","parsePath"],"line":40,"updatePoint":{"line":40,"column":13,"index":1245},"code":"    it('query', () => {\n      const res = parsePath('/a?foo=bar???');\n      expect(res.path).toBe('/a');\n      expect(res.hash).toBe('');\n      expect(res.query).toBe('foo=bar???');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"hash","suites":["Path utils","parsePath"],"line":46,"updatePoint":{"line":46,"column":12,"index":1434},"code":"    it('hash', () => {\n      const res = parsePath('/a#haha#hoho');\n      expect(res.path).toBe('/a');\n      expect(res.hash).toBe('#haha#hoho');\n      expect(res.query).toBe('');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"both","suites":["Path utils","parsePath"],"line":52,"updatePoint":{"line":52,"column":12,"index":1622},"code":"    it('both', () => {\n      const res = parsePath('/a?foo=bar#ok?baz=qux');\n      expect(res.path).toBe('/a');\n      expect(res.hash).toBe('#ok?baz=qux');\n      expect(res.query).toBe('foo=bar');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Path utils","cleanPath"],"line":60,"updatePoint":{"line":60,"column":19,"index":1872},"code":"    it('should work', () => {\n      const path = cleanPath('//a//b//d/');\n      expect(path).toBe('/a/b/d/');\n    });","file":"unit/specs/path.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Query utils","resolveQuery"],"line":4,"updatePoint":{"line":4,"column":19,"index":159},"code":"    it('should work', () => {\n      const query = resolveQuery('foo=bar&foo=k', {\n        baz: 'qux'\n      });\n      expect(JSON.stringify(query)).toBe(JSON.stringify({\n        foo: ['bar', 'k'],\n        baz: 'qux'\n      }));\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should turn empty params into null","suites":["Query utils","resolveQuery"],"line":13,"updatePoint":{"line":13,"column":42,"index":416},"code":"    it('should turn empty params into null', () => {\n      expect(resolveQuery('?foo&bar=&arr=1&arr&arr=2')).toEqual({\n        foo: null,\n        bar: '',\n        arr: ['1', null, '2']\n      });\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should keep undefined and null query values","suites":["Query utils","resolveQuery"],"line":20,"updatePoint":{"line":20,"column":51,"index":628},"code":"    it('should keep undefined and null query values', () => {\n      const query = resolveQuery('', {\n        a: undefined,\n        b: null\n      });\n      expect(query).toEqual({\n        a: undefined,\n        b: null\n      });\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should keep objects query values","suites":["Query utils","resolveQuery"],"line":30,"updatePoint":{"line":30,"column":40,"index":852},"code":"    it('should keep objects query values', () => {\n      const query = resolveQuery('', {\n        a: {\n          nested: 'o'\n        },\n        b: [{\n          a: true\n        }]\n      });\n      expect(query).toEqual({\n        a: {\n          nested: 'o'\n        },\n        b: [{\n          a: true\n        }]\n      });\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should keep null query values in arrays","suites":["Query utils","resolveQuery"],"line":48,"updatePoint":{"line":48,"column":47,"index":1185},"code":"    it('should keep null query values in arrays', () => {\n      const query = resolveQuery('', {\n        baz: [null, '2']\n      });\n      expect(query).toEqual({\n        baz: [null, '2']\n      });\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should cast query values into string","suites":["Query utils","resolveQuery"],"line":56,"updatePoint":{"line":56,"column":44,"index":1387},"code":"    it('should cast query values into string', () => {\n      const query = resolveQuery('foo=bar&foo=k', {\n        baz: 1\n      });\n      expect(query.baz).toBe('1');\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should cast query array values into string","suites":["Query utils","resolveQuery"],"line":62,"updatePoint":{"line":62,"column":50,"index":1568},"code":"    it('should cast query array values into string', () => {\n      const query = resolveQuery('foo=bar&foo=k', {\n        baz: [1, '2']\n      });\n      expect(query.baz).toEqual(['1', '2']);\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Query utils","stringifyQuery"],"line":70,"updatePoint":{"line":70,"column":19,"index":1778},"code":"    it('should work', () => {\n      expect(stringifyQuery({\n        foo: 'bar',\n        baz: 'qux',\n        arr: [1, 2]\n      })).toBe('?foo=bar&baz=qux&arr=1&arr=2');\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should add only the key with null","suites":["Query utils","stringifyQuery"],"line":77,"updatePoint":{"line":77,"column":41,"index":1976},"code":"    it('should add only the key with null', () => {\n      expect(stringifyQuery({\n        foo: null,\n        bar: '',\n        arr: [1, null, 3]\n      })).toBe('?foo&bar=&arr=1&arr&arr=3');\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should escape reserved chars","suites":["Query utils","stringifyQuery"],"line":84,"updatePoint":{"line":84,"column":36,"index":2168},"code":"    it('should escape reserved chars', () => {\n      expect(stringifyQuery({\n        a: '*()!'\n      })).toBe('?a=%2a%28%29%21');\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"should preserve commas","suites":["Query utils","stringifyQuery"],"line":89,"updatePoint":{"line":89,"column":30,"index":2300},"code":"    it('should preserve commas', () => {\n      expect(stringifyQuery({\n        list: '1,2,3'\n      })).toBe('?list=1,2,3');\n    });","file":"unit/specs/query.spec.js","skipped":false,"dir":"test"},{"name":"path","suites":["Route utils","isSameRoute"],"line":4,"updatePoint":{"line":4,"column":12,"index":151},"code":"    it('path', () => {\n      const a = {\n        path: '/a',\n        hash: '#hi',\n        query: {\n          foo: 'bar',\n          arr: [1, 2]\n        }\n      };\n      const b = {\n        path: '/a/',\n        // Allow trailing slash\n        hash: '#hi',\n        query: {\n          arr: ['1', '2'],\n          foo: 'bar'\n        }\n      };\n      expect(isSameRoute(a, b)).toBe(true);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"name","suites":["Route utils","isSameRoute"],"line":24,"updatePoint":{"line":24,"column":12,"index":541},"code":"    it('name', () => {\n      const a = {\n        path: '/abc',\n        name: 'a',\n        hash: '#hi',\n        query: {\n          foo: 'bar',\n          arr: [1, 2]\n        }\n      };\n      const b = {\n        name: 'a',\n        hash: '#hi',\n        query: {\n          arr: ['1', '2'],\n          foo: 'bar'\n        }\n      };\n      expect(isSameRoute(a, b)).toBe(true);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"nested query","suites":["Route utils","isSameRoute"],"line":44,"updatePoint":{"line":44,"column":20,"index":926},"code":"    it('nested query', () => {\n      const a = {\n        path: '/abc',\n        query: {\n          foo: {\n            bar: 'bar'\n          },\n          arr: [1, 2]\n        }\n      };\n      const b = {\n        path: '/abc',\n        query: {\n          arr: [1, 2],\n          foo: {\n            bar: 'bar'\n          }\n        }\n      };\n      const c = {\n        path: '/abc',\n        query: {\n          arr: [1, 2],\n          foo: {\n            bar: 'not bar'\n          }\n        }\n      };\n      expect(isSameRoute(a, b)).toBe(true);\n      expect(isSameRoute(a, c)).toBe(false);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"queries with null values","suites":["Route utils","isSameRoute"],"line":75,"updatePoint":{"line":75,"column":32,"index":1523},"code":"    it('queries with null values', () => {\n      const a = {\n        path: '/abc',\n        query: {\n          foo: null\n        }\n      };\n      const b = {\n        path: '/abc',\n        query: {\n          foo: null\n        }\n      };\n      const c = {\n        path: '/abc',\n        query: {\n          foo: 5\n        }\n      };\n      expect(() => isSameRoute(a, b)).not.toThrow();\n      expect(() => isSameRoute(a, c)).not.toThrow();\n      expect(isSameRoute(a, b)).toBe(true);\n      expect(isSameRoute(a, c)).toBe(false);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"queries with undefined values","suites":["Route utils","isSameRoute"],"line":99,"updatePoint":{"line":99,"column":37,"index":2059},"code":"    it('queries with undefined values', () => {\n      const a = {\n        path: '/abc',\n        query: {\n          a: 'x'\n        }\n      };\n      const b = {\n        path: '/abc',\n        query: {\n          id: undefined\n        }\n      };\n      const c = {\n        path: '/abc',\n        query: {}\n      };\n      expect(() => isSameRoute(a, b)).not.toThrow();\n      expect(() => isSameRoute(a, c)).not.toThrow();\n      expect(() => isSameRoute(b, c)).not.toThrow();\n      expect(isSameRoute(a, b)).toBe(false);\n      expect(isSameRoute(a, c)).toBe(false); // NOTE: in reality this should be true but because we check queries as\n      // objects, they are different objects. We should check queries as their\n      // string representation instead\n\n      expect(isSameRoute(b, c)).toBe(false);\n      expect(isSameRoute(c, b)).toBe(false);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"path","suites":["Route utils","isIncludedRoute"],"line":129,"updatePoint":{"line":129,"column":12,"index":2924},"code":"    it('path', () => {\n      const a = {\n        path: '/a/b'\n      };\n      const b = {\n        path: '/a'\n      };\n      const c = {\n        path: '/a/b/c'\n      };\n      const d = {\n        path: '/a/b/'\n      };\n      expect(isIncludedRoute(a, b)).toBe(true);\n      expect(isIncludedRoute(a, c)).toBe(false);\n      expect(isIncludedRoute(a, d)).toBe(true);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"with hash","suites":["Route utils","isIncludedRoute"],"line":146,"updatePoint":{"line":146,"column":17,"index":3298},"code":"    it('with hash', () => {\n      const a = {\n        path: '/a/b',\n        hash: '#a'\n      };\n      const b = {\n        path: '/a'\n      };\n      const c = {\n        path: '/a',\n        hash: '#a'\n      };\n      const d = {\n        path: '/a',\n        hash: '#b'\n      };\n      expect(isIncludedRoute(a, b)).toBe(true);\n      expect(isIncludedRoute(a, c)).toBe(true);\n      expect(isIncludedRoute(a, d)).toBe(false);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"with query","suites":["Route utils","isIncludedRoute"],"line":166,"updatePoint":{"line":166,"column":18,"index":3726},"code":"    it('with query', () => {\n      const a = {\n        path: '/a/b',\n        query: {\n          foo: 'bar',\n          baz: 'qux'\n        }\n      };\n      const b = {\n        path: '/a',\n        query: {}\n      };\n      const c = {\n        path: '/a',\n        query: {\n          foo: 'bar'\n        }\n      };\n      const d = {\n        path: '/a',\n        query: {\n          foo: 'bar',\n          a: 'b'\n        }\n      };\n      expect(isIncludedRoute(a, b)).toBe(true);\n      expect(isIncludedRoute(a, c)).toBe(true);\n      expect(isIncludedRoute(a, d)).toBe(false);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"with both","suites":["Route utils","isIncludedRoute"],"line":195,"updatePoint":{"line":195,"column":17,"index":4299},"code":"    it('with both', () => {\n      const a = {\n        path: '/a/b',\n        query: {\n          foo: 'bar',\n          baz: 'qux'\n        },\n        hash: '#a'\n      };\n      const b = {\n        path: '/a',\n        query: {}\n      };\n      const c = {\n        path: '/a',\n        query: {\n          foo: 'bar'\n        }\n      };\n      const d = {\n        path: '/a',\n        query: {\n          foo: 'bar'\n        },\n        hash: '#b'\n      };\n      const e = {\n        path: '/a',\n        query: {\n          a: 'b'\n        },\n        hash: '#a'\n      };\n      expect(isIncludedRoute(a, b)).toBe(true);\n      expect(isIncludedRoute(a, c)).toBe(true);\n      expect(isIncludedRoute(a, d)).toBe(false);\n      expect(isIncludedRoute(a, e)).toBe(false);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"},{"name":"trailing slash","suites":["Route utils","isIncludedRoute"],"line":233,"updatePoint":{"line":233,"column":22,"index":5059},"code":"    it('trailing slash', () => {\n      const a = {\n        path: '/users'\n      };\n      const b = {\n        path: '/user'\n      };\n      const c = {\n        path: '/users/'\n      };\n      expect(isIncludedRoute(a, b)).toBe(false);\n      expect(isIncludedRoute(a, c)).toBe(true);\n      const d = {\n        path: '/users/hello/world'\n      };\n      const e = {\n        path: '/users/hello'\n      };\n      const f = {\n        path: '/users/hello-world'\n      };\n      expect(isIncludedRoute(d, e)).toBe(true);\n      expect(isIncludedRoute(d, f)).toBe(false);\n    });","file":"unit/specs/route.spec.js","skipped":false,"dir":"test"}]}