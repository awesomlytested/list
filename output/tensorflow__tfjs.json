{"repo":"tensorflow/tfjs","url":"https://github.com/tensorflow/tfjs","branch":"master","configs":[{"package":"integration_rn59","lang":"ts","dir":"tfjs-react-native/integration_rn59/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"unit tests should pass","suites":["tfjs-core unit tests"],"updatePoint":{"line":8,"column":28},"line":8,"code":"  it('unit tests should pass', async () => {\n    const driver = browser;\n\n    const unitTestBtn = await driver.$('~unit-test-btn');\n    await unitTestBtn.waitForExist(\n        INITIAL_LOAD_TIMEOUT, false,\n        'Could not find unit test button. \\n' +\n            'The browserstacklocal tunnel was likely not established');\n    await unitTestBtn.waitForEnabled(INITIAL_LOAD_TIMEOUT);\n    await unitTestBtn.click();\n\n    const backendNameEl = await driver.$('~backendName');\n    await backendNameEl.waitForExist(DEFAULT_TIMEOUT);\n    const backendName = await backendNameEl.getText();\n    expect(backendName).toEqual('backend=rn-webgl');\n\n    // Wait for the unit tests to complete.\n    const testCompleteEl = await driver.$('~testComplete');\n    await driver.waitUntil(async () => {\n      const testStatus = await testCompleteEl.getText();\n      return testStatus === 'testsComplete=true';\n    }, TEST_RUN_TIMEOUT, 'Unit tests timed out', TEST_POLL_INTERVAL);\n\n    // Get the number of passed and run tests\n    const passedTestsEl = await driver.$('~passedTests');\n    await passedTestsEl.waitForExist(DEFAULT_TIMEOUT);\n    const passedTestsText = await passedTestsEl.getText();\n\n    const parts = passedTestsText.match(/(?<passed>\\d+) of (?<total>\\d+)/);\n    expect(parts).not.toBeNull();\n\n    if (parts != null && parts.groups != null) {\n      const passed = parseInt(parts.groups.passed, 10);\n      const total = parseInt(parts.groups.total, 10);\n      const failed = total - passed;\n\n      if (failed > 0) {\n        fail(`${failed} tests failed out of ${total}`);\n        const failureMessages = await driver.$('~failureMessages');\n        await failureMessages.waitForExist(DEFAULT_TIMEOUT);\n        const failureMessagesText = await failureMessages.getText();\n\n        const TEST_SEPARATOR = '###';\n        const TITLE_SEPARATOR = '%%%';\n\n        const testFailures = failureMessagesText.split(TEST_SEPARATOR);\n        for (let i = 0; i < testFailures.length; i++) {\n          const testFailure = testFailures[i];\n          const [title, messages] = testFailure.split(TITLE_SEPARATOR);\n\n          fail(`${title}\\n${messages}`);\n        }\n      }\n    }\n  }, TEST_RUN_TIMEOUT + INITIAL_LOAD_TIMEOUT);","file":"integration_test.ts","skipped":false,"dir":"tfjs-react-native/integration_rn59/test"}]}