{"repo":"FormidableLabs/webpack-dashboard","url":"https://github.com/FormidableLabs/webpack-dashboard","branch":"master","configs":[{"package":"webpack-dashboard","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"can invoke the dashboard cli","suites":["bin/webpack-dashboard"],"updatePoint":{"line":6,"column":34,"index":182},"line":6,"code":"  it(\"can invoke the dashboard cli\", () => {\n    expect(() => cli({\n      argv: [],\n      server: {\n        on: base.sandbox.spy()\n      }\n    })).to.not.throw();\n  });","file":"bin/webpack-dashboard.spec.js","skipped":false,"dir":"test"},{"name":"can create a new no option dashboard","suites":["dashboard"],"updatePoint":{"line":26,"column":42,"index":818},"line":26,"code":"  it(\"can create a new no option dashboard\", () => {\n    const dashboard = new Dashboard();\n    expect(dashboard).to.be.ok;\n    expect(dashboard.color).to.equal(\"green\");\n    expect(dashboard.minimal).to.be.false;\n    expect(dashboard.stats).to.be.null;\n  });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can create a new with options dashboard","suites":["dashboard"],"updatePoint":{"line":33,"column":45,"index":1081},"line":33,"code":"  it(\"can create a new with options dashboard\", () => {\n    const dashboardWithOptions = new Dashboard(options);\n    expect(dashboardWithOptions).to.be.ok;\n    expect(dashboardWithOptions.color).to.equal(\"red\");\n    expect(dashboardWithOptions.minimal).to.be.true;\n  });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setData","suites":["dashboard","set* methods","setData"],"updatePoint":{"line":52,"column":21,"index":1624},"line":52,"code":"      it(\"can setData\", () => {\n        expect(() => dashboard.setData(dataArray)).to.not.throw;\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setOperations","suites":["dashboard","set* methods","setOperations"],"updatePoint":{"line":60,"column":27,"index":1835},"line":60,"code":"      it(\"can setOperations\", () => {\n        expect(() => dashboard.setOperations(data)).to.not.throw;\n        dashboard.setOperations(data);\n        expect(dashboard.operations.setContent).to.have.been.calledWith(data.value);\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setStatus","suites":["dashboard","set* methods","setStatus"],"updatePoint":{"line":70,"column":23,"index":2166},"line":70,"code":"      it(\"can setStatus\", () => {\n        expect(() => dashboard.setStatus(data)).to.not.throw;\n        dashboard.setStatus(data);\n        expect(dashboard.status.setContent).to.have.been.calledWith(`{green-fg}{bold}${data.value}{/}`);\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"should display a failed status on build failure","suites":["dashboard","set* methods","setStatus"],"updatePoint":{"line":75,"column":57,"index":2446},"line":75,"code":"      it(\"should display a failed status on build failure\", () => {\n        data.value = \"Failed\";\n        expect(() => dashboard.setStatus(data)).to.not.throw;\n        dashboard.setStatus(data);\n        expect(dashboard.status.setContent).to.have.been.calledWith(`{red-fg}{bold}${data.value}{/}`);\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"should display any other status string without coloring","suites":["dashboard","set* methods","setStatus"],"updatePoint":{"line":81,"column":65,"index":2763},"line":81,"code":"      it(\"should display any other status string without coloring\", () => {\n        data.value = \"Unknown\";\n        expect(() => dashboard.setStatus(data)).to.not.throw;\n        dashboard.setStatus(data);\n        expect(dashboard.status.setContent).to.have.been.calledWith(`{bold}${data.value}{/}`);\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setProgress","suites":["dashboard","set* methods","setProgress"],"updatePoint":{"line":92,"column":25,"index":3127},"line":92,"code":"      it(\"can setProgress\", () => {\n        expect(() => dashboard.setProgress(data)).to.not.throw;\n        dashboard.setProgress(data);\n        expect(dashboard.progressbar.setProgress).to.have.been.calledOnce;\n        expect(dashboard.progressbar.setContent).to.have.been.called;\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"should call progressbar.setProgress twice if not in minimal mode\n      and percent is falsy","suites":["dashboard","set* methods","setProgress"],"updatePoint":{"line":99,"column":26,"index":3495},"line":98,"code":"      it(`should call progressbar.setProgress twice if not in minimal mode\n      and percent is falsy`, () => {\n        data.value = null;\n        expect(() => dashboard.setProgress(data)).to.not.throw;\n        dashboard.setProgress(data);\n        expect(dashboard.progressbar.setProgress).to.have.been.calledTwice;\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setStats","suites":["dashboard","set* methods","setStats"],"updatePoint":{"line":116,"column":22,"index":3943},"line":116,"code":"      it(\"can setStats\", () => {\n        expect(() => dashboard.setStats(data)).not.to.throw;\n        dashboard.setStats(data);\n        expect(dashboard.logText.log).to.have.been.called;\n        expect(dashboard.modulesMenu.setLabel).to.have.been.calledWith(chalk.yellow(\"Modules (loading...)\"));\n        expect(dashboard.assets.setLabel).to.have.been.calledWith(chalk.yellow(\"Assets (loading...)\"));\n        expect(dashboard.problemsMenu.setLabel).to.have.been.calledWith(chalk.yellow(\"Problems (loading...)\"));\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"should display stats errors if present","suites":["dashboard","set* methods","setStats"],"updatePoint":{"line":124,"column":48,"index":4492},"line":124,"code":"      it(\"should display stats errors if present\", () => {\n        data.value.errors = [\"error\"];\n        expect(() => dashboard.setStats(data)).not.to.throw;\n        dashboard.setStats(data);\n        expect(dashboard.status.setContent).to.have.been.calledWith(\"{red-fg}{bold}Failed{/}\");\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setSizes","suites":["dashboard","set* methods","setSizes"],"updatePoint":{"line":156,"column":22,"index":5311},"line":156,"code":"      it(\"can setSizes\", () => {\n        const formattedData = [[\"Name\", \"Size\"], [\"foo\", \"456 B\"], [\"bar\", \"123 B\"], [\"Total\", \"579 B\"]];\n        expect(() => dashboard.setSizes(data)).to.not.throw;\n        dashboard.setSizes(data);\n        expect(dashboard.assets.setLabel).to.have.been.calledWith(\"Assets\");\n        expect(dashboard.assetTable.setData).to.have.been.calledWith(formattedData);\n        expect(dashboard.modulesMenu.setLabel).to.have.been.calledWith(\"Modules\");\n        expect(dashboard.modulesMenu.setItems).to.have.been.called;\n        expect(dashboard.modulesMenu.selectTab).to.have.been.calledWith(dashboard.modulesMenu.selected);\n        expect(dashboard.screen.render).to.have.been.called;\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"should call formatModules","suites":["dashboard","set* methods","setSizes"],"updatePoint":{"line":167,"column":35,"index":6047},"line":167,"code":"      it(\"should call formatModules\", () => {\n        // Mock out the call to setItems to force call of formatModules.\n        mockSetItems();\n        // Discard generic dashboard, create a new one with adjusted mocks.\n        dashboard = new Dashboard();\n        expect(() => dashboard.setSizes(data)).to.not.throw;\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setSizesError","suites":["dashboard","set* methods","setSizesError"],"updatePoint":{"line":177,"column":27,"index":6439},"line":177,"code":"      it(\"can setSizesError\", () => {\n        expect(() => dashboard.setSizesError(err)).to.not.throw;\n        dashboard.setSizesError(err);\n        expect(dashboard.modulesMenu.setLabel).to.have.been.calledWith(chalk.red(\"Modules (error)\"));\n        expect(dashboard.assets.setLabel).to.have.been.calledWith(chalk.red(\"Assets (error)\"));\n        expect(dashboard.logText.log).to.have.been.calledWith(chalk.red(\"Could not load module/asset sizes.\"));\n        expect(dashboard.logText.log).to.have.been.calledWith(chalk.red(err));\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setProblems","suites":["dashboard","set* methods","setProblems"],"updatePoint":{"line":203,"column":25,"index":7327},"line":203,"code":"      it(\"can setProblems\", () => {\n        expect(() => dashboard.setProblems(data)).to.not.throw;\n        dashboard.setProblems(data);\n        expect(dashboard.problemsMenu.setLabel).to.have.been.calledWith(\"Problems\");\n        expect(dashboard.problemsMenu.setItems).to.have.been.called;\n        expect(dashboard.problemsMenu.selectTab).to.have.been.calledWith(dashboard.problemsMenu.selected);\n        expect(dashboard.screen.render).to.have.been.called;\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"should call formatProblems","suites":["dashboard","set* methods","setProblems"],"updatePoint":{"line":211,"column":36,"index":7807},"line":211,"code":"      it(\"should call formatProblems\", () => {\n        // Mock out the call to setItems to force call of formatProblems.\n        mockSetItems();\n        // Discard generic dashboard, create a new one with adjusted mocks.\n\n        dashboard = new Dashboard();\n        expect(() => dashboard.setProblems(data)).to.not.throw;\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setProblemsError","suites":["dashboard","set* methods","setProblemsError"],"updatePoint":{"line":224,"column":30,"index":8235},"line":224,"code":"      it(\"can setProblemsError\", () => {\n        expect(() => dashboard.setProblemsError(err)).to.not.throw;\n        dashboard.setProblemsError(err);\n        expect(dashboard.problemsMenu.setLabel).to.have.been.calledWith(chalk.red(\"Problems (error)\"));\n        expect(dashboard.logText.log).to.have.been.calledWith(chalk.red(\"Could not analyze bundle problems.\"));\n        expect(dashboard.logText.log).to.have.been.calledWith(chalk.red(err.stack));\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can setLog","suites":["dashboard","set* methods","setLog"],"updatePoint":{"line":236,"column":20,"index":8789},"line":236,"code":"      it(\"can setLog\", () => {\n        expect(() => dashboard.setLog(data)).not.to.throw;\n        dashboard.setLog(data);\n        expect(dashboard.logText.log).to.have.been.calledWith(\"[ log: 'log' ]\");\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"should return early if the stats object has errors","suites":["dashboard","set* methods","setLog"],"updatePoint":{"line":241,"column":60,"index":9042},"line":241,"code":"      it(\"should return early if the stats object has errors\", () => {\n        dashboard.stats = {};\n        dashboard.stats.hasErrors = () => true;\n        expect(dashboard.setLog(data)).to.be.undefined;\n        dashboard.setLog(data);\n        expect(dashboard.logText.log).to.not.have.been.called;\n      });","file":"dashboard/index.spec.js","skipped":false,"dir":"test"},{"name":"can create a new no option plugin","suites":["plugin"],"updatePoint":{"line":12,"column":39,"index":354},"line":12,"code":"  it(\"can create a new no option plugin\", () => {\n    const plugin = new Plugin();\n    expect(plugin).to.be.ok;\n    expect(plugin.host).to.equal(\"127.0.0.1\");\n    // eslint-disable-next-line no-magic-numbers\n    expect(plugin.port).to.equal(9838);\n    expect(plugin._handler).to.be.null;\n    expect(plugin.watching).to.be.false;\n  });","file":"plugin/index.spec.js","skipped":false,"dir":"test"},{"name":"can create a new with options dashboard","suites":["plugin"],"updatePoint":{"line":21,"column":45,"index":695},"line":21,"code":"  it(\"can create a new with options dashboard\", () => {\n    const pluginWithOptions = new Plugin(options);\n    expect(pluginWithOptions.host).to.equal(\"111.0.2.3\");\n    // eslint-disable-next-line no-magic-numbers\n    expect(pluginWithOptions.port).to.equal(3000);\n  });","file":"plugin/index.spec.js","skipped":false,"dir":"test"},{"name":"can do a basic compilation","suites":["plugin","plugin methods"],"updatePoint":{"line":78,"column":34,"index":2155},"line":78,"code":"    it(\"can do a basic compilation\", () => {\n      expect(() => plugin.apply(compiler)).to.not.throw;\n\n      // after instantiation, test that we can hit getMetrics\n      expect(() => plugin.getMetrics({\n        toJson\n      })).to.not.throw;\n    });","file":"plugin/index.spec.js","skipped":false,"dir":"test"},{"name":"can do a basic getMetrics","suites":["plugin","plugin methods"],"updatePoint":{"line":86,"column":33,"index":2405},"line":86,"code":"    it(\"can do a basic getMetrics\", () => {\n      const actions = base.sandbox.spy(inspectpackActions, \"actions\");\n      return plugin.getMetrics({\n        toJson\n      })\n      // eslint-disable-next-line promise/always-return\n      .then(() => {\n        expect(actions).to.have.been.calledThrice;\n      });\n    });","file":"plugin/index.spec.js","skipped":false,"dir":"test"},{"name":"filters assets for includeAssets","suites":["plugin","plugin methods"],"updatePoint":{"line":96,"column":40,"index":2729},"line":96,"code":"    it(\"filters assets for includeAssets\", () => {\n      const actions = base.sandbox.spy(inspectpackActions, \"actions\");\n      stats = {\n        assets: [{\n          name: \"one.js\",\n          modules: []\n        }, {\n          name: \"two.js\",\n          modules: []\n        }, {\n          name: \"three.js\",\n          modules: []\n        }]\n      };\n      plugin = new Plugin({\n        includeAssets: [\"one\",\n        // string prefix\n        /tw/ // regex match\n        ]\n      });\n\n      return plugin.getMetrics({\n        toJson\n      })\n      // eslint-disable-next-line promise/always-return\n      .then(() => {\n        expect(actions).to.have.been.calledWith(\"sizes\", {\n          stats: {\n            assets: [{\n              modules: [],\n              name: \"one.js\"\n            }, {\n              modules: [],\n              name: \"two.js\"\n            }]\n          }\n        });\n      });\n    });","file":"plugin/index.spec.js","skipped":false,"dir":"test"},{"name":"should serialize errors when encountered","suites":["plugin","plugin methods"],"updatePoint":{"line":135,"column":48,"index":3639},"line":135,"code":"    it(\"should serialize errors when encountered\", () => {\n      const actions = base.sandbox.stub(inspectpackActions, \"actions\").rejects();\n      const serializeError = base.sandbox.spy(errorSerializer, \"serializeError\");\n      return plugin.getMetrics({\n        toJson\n      })\n      // eslint-disable-next-line promise/always-return\n      .then(() => {\n        // All three actions called.\n        expect(actions).to.have.been.calledThrice;\n        // ... but since two are in Promise.all only get one rejection.\n        expect(serializeError).to.have.been.calledTwice;\n      });\n    });","file":"plugin/index.spec.js","skipped":false,"dir":"test"},{"name":"returns a readable file size as string","suites":["format-assets","#_getAssetSize","when asset size is present"],"updatePoint":{"line":11,"column":48,"index":284},"line":11,"code":"      it(\"returns a readable file size as string\", () => {\n        const asset = {\n          size: 500\n        };\n        expect(_getAssetSize(asset)).to.equal(\"500 B\");\n      });","file":"utils/format-assets.spec.js","skipped":false,"dir":"test"},{"name":"returns zero in a readable file size as string","suites":["format-assets","#_getAssetSize","when no asset size is present"],"updatePoint":{"line":19,"column":56,"index":533},"line":19,"code":"      it(\"returns zero in a readable file size as string\", () => {\n        const asset = {\n          size: undefined\n        };\n        expect(_getAssetSize(asset)).to.equal(\"0 B\");\n      });","file":"utils/format-assets.spec.js","skipped":false,"dir":"test"},{"name":"returns a readable file size of all assets as a string","suites":["format-assets","#_getTotalSize"],"updatePoint":{"line":28,"column":62,"index":782},"line":28,"code":"    it(\"returns a readable file size of all assets as a string\", () => {\n      const assets = [{\n        size: 500\n      }, {\n        size: undefined\n      }, {\n        size: 1000\n      }];\n      expect(_getTotalSize(assets)).to.equal(\"1.46 KB\");\n    });","file":"utils/format-assets.spec.js","skipped":false,"dir":"test"},{"name":"returns a nested array of assets information","suites":["format-assets","#_printAssets"],"updatePoint":{"line":40,"column":52,"index":1069},"line":40,"code":"    it(\"returns a nested array of assets information\", () => {\n      const assetList = [{\n        name: \"assets1\",\n        size: 500\n      }, {\n        name: \"assets2\",\n        size: 0\n      }, {\n        name: \"assets2\",\n        size: 500\n      }];\n      const output = [[\"Name\", \"Size\"], [\"assets1\", \"500 B\"], [\"assets2\", \"0 B\"], [\"assets2\", \"500 B\"], [\"Total\", \"1000 B\"]];\n      expect(_printAssets(assetList)).eql(output);\n    });","file":"utils/format-assets.spec.js","skipped":false,"dir":"test"},{"name":"returns a blessed green colored file name","suites":["format-modules","#_formatFileName"],"updatePoint":{"line":13,"column":49,"index":277},"line":13,"code":"    it(\"returns a blessed green colored file name\", () => {\n      const mod = {\n        fileName: normalize(\"foo/bar/test.js\")\n      };\n      expect(_formatFileName(mod)).to.equal(`{green-fg}.${sep}foo${sep}bar${sep}test.js{/}`);\n    });","file":"utils/format-modules.spec.js","skipped":false,"dir":"test"},{"name":"returns a blessed yellow colored file name","suites":["format-modules","#_formatFileName","when there is a baseName"],"updatePoint":{"line":20,"column":52,"index":566},"line":20,"code":"      it(\"returns a blessed yellow colored file name\", () => {\n        const mod = {\n          fileName: \"test.js\",\n          baseName: normalize(\"/home/bar/test.js\")\n        };\n        expect(_formatFileName(mod)).to.equal(\"{yellow-fg}test.js{/}\");\n      });","file":"utils/format-modules.spec.js","skipped":false,"dir":"test"},{"name":"returns a blessed yellow colored file name","suites":["format-modules","#_formatFileName","when node_modules is present in fileName"],"updatePoint":{"line":29,"column":52,"index":898},"line":29,"code":"      it(\"returns a blessed yellow colored file name\", () => {\n        const mod = {\n          fileName: normalize(\"/node_modules/@foo/test.js\"),\n          baseName: normalize(\"/home/bar/node_modules/@foo/test.js\")\n        };\n        expect(_formatFileName(mod)).to.equal(`~${sep}{yellow-fg}@foo{/}${sep}{yellow-fg}test.js{/}`);\n      });","file":"utils/format-modules.spec.js","skipped":false,"dir":"test"},{"name":"returns a precentage as a string","suites":["format-modules","#_formatPercentage"],"updatePoint":{"line":39,"column":40,"index":1280},"line":39,"code":"    it(\"returns a precentage as a string\", () => {\n      // eslint-disable-next-line no-magic-numbers\n      expect(_formatPercentage(30, 15)).to.equal(\"200%\");\n    });","file":"utils/format-modules.spec.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["format-output","#_isLikelyASyntaxError","when message is a syntax error"],"updatePoint":{"line":11,"column":22,"index":276},"line":11,"code":"      it(\"returns true\", () => {\n        const message = \"Syntax error: missing ; before statement\";\n        expect(_isLikelyASyntaxError(message)).to.be.true;\n      });","file":"utils/format-output.spec.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["format-output","#_isLikelyASyntaxError","when message is a type error"],"updatePoint":{"line":17,"column":23,"index":507},"line":17,"code":"      it(\"returns false\", () => {\n        const message = \"Type error: null has no properties\";\n        expect(_isLikelyASyntaxError(message)).to.be.false;\n      });","file":"utils/format-output.spec.js","skipped":false,"dir":"test"},{"name":"returns a readable user friendly message","suites":["format-output","#_formatMessage"],"updatePoint":{"line":24,"column":48,"index":750},"line":24,"code":"    it(\"returns a readable user friendly message\", () => {\n      const message1 = \"Module build failed: SyntaxError: missing ; before statement\";\n      const message2 = \"/Module not found: Error: Cannot resolve 'file' or 'directory'/\";\n      expect(_formatMessage(message1)).to.equal(\"Syntax error: missing ; before statement\");\n      expect(_formatMessage(message2)).to.equal(\"/Module not found:/\");\n    });","file":"utils/format-output.spec.js","skipped":false,"dir":"test"},{"name":"returns the elements of an array on a newline as a string","suites":["format-output","#_lineJoin"],"updatePoint":{"line":32,"column":65,"index":1215},"line":32,"code":"    it(\"returns the elements of an array on a newline as a string\", () => {\n      const array = [\"word\", \"word2\", \"word3\"];\n      const output = \"word\\nword2\\nword3\";\n      expect(_lineJoin(array)).to.equal(output);\n    });","file":"utils/format-output.spec.js","skipped":false,"dir":"test"},{"name":"should return a handlebar compile template","suites":["format-versions","when package are present"],"updatePoint":{"line":23,"column":50,"index":545},"line":23,"code":"    it(\"should return a handlebar compile template\", () => {\n      const result =\n      // eslint-disable-next-line max-len\n      \"{yellow-fg}{underline}Version skews{/}\\n\\n{yellow-fg}{bold}foo{/}\\n  {green-fg}1.1.1{/}\\n    {cyan-fg}foo-dep{/}@^1.0.0 -> {cyan-fg}bar{/}@^3.0.2\\n\";\n      expect(formatVersions(data)).to.equal(result);\n    });","file":"utils/format-versions.spec.js","skipped":false,"dir":"test"},{"name":"should return an empty string","suites":["format-versions","when packages are not present"],"updatePoint":{"line":31,"column":37,"index":932},"line":31,"code":"    it(\"should return an empty string\", () => {\n      const data = {\n        packages: []\n      };\n      expect(formatVersions(data)).to.equal(\"\");\n    });","file":"utils/format-versions.spec.js","skipped":false,"dir":"test"}]}