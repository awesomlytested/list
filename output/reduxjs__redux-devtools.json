{
    "repo": "reduxjs/redux-devtools",
    "url": "https://github.com/reduxjs/redux-devtools",
    "branch": "main",
    "configs": [
        {
            "package": "redux-todomvc-example",
            "lang": "js",
            "dir": "extension/examples/router/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "remotedev-redux-devtools-extension",
            "lang": "js",
            "dir": "extension/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "map2tree",
            "lang": "ts",
            "dir": "packages/map2tree/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-base16-styling",
            "lang": "ts",
            "dir": "packages/react-base16-styling/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "react-dock",
            "lang": "js",
            "dir": "packages/react-dock/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "react-json-tree",
            "lang": "ts",
            "dir": "packages/react-json-tree/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@redux-devtools/app",
            "lang": "ts",
            "dir": "packages/redux-devtools-app/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@redux-devtools/cli",
            "lang": "ts",
            "dir": "packages/redux-devtools-cli/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@redux-devtools/inspector-monitor-test-tab",
            "lang": "ts",
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@redux-devtools/inspector-monitor-trace-tab",
            "lang": "js",
            "dir": "packages/redux-devtools-inspector-monitor-trace-tab/test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@redux-devtools/instrument",
            "lang": "ts",
            "dir": "packages/redux-devtools-instrument/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "redux-counter-example",
            "lang": "js",
            "dir": "packages/redux-devtools-remote/examples/counter/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@redux-devtools/serialize",
            "lang": "ts",
            "dir": "packages/redux-devtools-serialize/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@redux-devtools/ui",
            "lang": "js",
            "dir": "packages/redux-devtools-ui/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@redux-devtools/core",
            "lang": "ts",
            "dir": "packages/redux-devtools/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "addTodo should create ADD_TODO action",
            "suites": [
                "todo actions"
            ],
            "updatePoint": {
                "line": 5,
                "column": 43
            },
            "line": 5,
            "code": "  it('addTodo should create ADD_TODO action', () => {\n    expect(actions.addTodo('Use Redux')).toEqual({\n      type: types.ADD_TODO,\n      text: 'Use Redux'\n    });\n  });",
            "file": "actions/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "deleteTodo should create DELETE_TODO action",
            "suites": [
                "todo actions"
            ],
            "updatePoint": {
                "line": 11,
                "column": 49
            },
            "line": 11,
            "code": "  it('deleteTodo should create DELETE_TODO action', () => {\n    expect(actions.deleteTodo(1)).toEqual({\n      type: types.DELETE_TODO,\n      id: 1\n    });\n  });",
            "file": "actions/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "editTodo should create EDIT_TODO action",
            "suites": [
                "todo actions"
            ],
            "updatePoint": {
                "line": 17,
                "column": 45
            },
            "line": 17,
            "code": "  it('editTodo should create EDIT_TODO action', () => {\n    expect(actions.editTodo(1, 'Use Redux everywhere')).toEqual({\n      type: types.EDIT_TODO,\n      id: 1,\n      text: 'Use Redux everywhere'\n    });\n  });",
            "file": "actions/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "completeTodo should create COMPLETE_TODO action",
            "suites": [
                "todo actions"
            ],
            "updatePoint": {
                "line": 24,
                "column": 53
            },
            "line": 24,
            "code": "  it('completeTodo should create COMPLETE_TODO action', () => {\n    expect(actions.completeTodo(1)).toEqual({\n      type: types.COMPLETE_TODO,\n      id: 1\n    });\n  });",
            "file": "actions/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "completeAll should create COMPLETE_ALL action",
            "suites": [
                "todo actions"
            ],
            "updatePoint": {
                "line": 30,
                "column": 51
            },
            "line": 30,
            "code": "  it('completeAll should create COMPLETE_ALL action', () => {\n    expect(actions.completeAll()).toEqual({\n      type: types.COMPLETE_ALL\n    });\n  });",
            "file": "actions/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "clearCompleted should create CLEAR_COMPLETED action",
            "suites": [
                "todo actions"
            ],
            "updatePoint": {
                "line": 35,
                "column": 57
            },
            "line": 35,
            "code": "  it('clearCompleted should create CLEAR_COMPLETED action', () => {\n    expect(actions.clearCompleted('Use Redux')).toEqual({\n      type: types.CLEAR_COMPLETED\n    });\n  });",
            "file": "actions/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render container",
            "suites": [
                "components",
                "Footer"
            ],
            "updatePoint": {
                "line": 34,
                "column": 31
            },
            "line": 34,
            "code": "    it('should render container', () => {\n      const {\n        output\n      } = setup();\n      expect(output.type).toBe('footer');\n      expect(output.props.className).toBe('footer');\n    });",
            "file": "components/Footer.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should display active count when 0",
            "suites": [
                "components",
                "Footer"
            ],
            "updatePoint": {
                "line": 41,
                "column": 42
            },
            "line": 41,
            "code": "    it('should display active count when 0', () => {\n      const {\n        output\n      } = setup({\n        activeCount: 0\n      });\n      const [count] = output.props.children;\n      expect(getTextContent(count)).toBe('No items left');\n    });",
            "file": "components/Footer.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should display active count when above 0",
            "suites": [
                "components",
                "Footer"
            ],
            "updatePoint": {
                "line": 50,
                "column": 48
            },
            "line": 50,
            "code": "    it('should display active count when above 0', () => {\n      const {\n        output\n      } = setup({\n        activeCount: 1\n      });\n      const [count] = output.props.children;\n      expect(getTextContent(count)).toBe('1 item left');\n    });",
            "file": "components/Footer.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render filters",
            "suites": [
                "components",
                "Footer"
            ],
            "updatePoint": {
                "line": 59,
                "column": 29
            },
            "line": 59,
            "code": "    it('should render filters', () => {\n      const {\n        output\n      } = setup();\n      const [, filters] = output.props.children;\n      expect(filters.type).toBe('ul');\n      expect(filters.props.className).toBe('filters');\n      expect(filters.props.children.length).toBe(3);\n      filters.props.children.forEach(function checkFilter(filter, i) {\n        expect(filter.type).toBe('li');\n        const a = filter.props.children;\n        expect(a.props.className).toBe(i === 0 ? 'selected' : '');\n        expect(a.props.children).toBe({\n          0: 'All',\n          1: 'Active',\n          2: 'Completed'\n        }[i]);\n      });\n    });",
            "file": "components/Footer.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should call onShow when a filter is clicked",
            "suites": [
                "components",
                "Footer"
            ],
            "updatePoint": {
                "line": 78,
                "column": 51
            },
            "line": 78,
            "code": "    it('should call onShow when a filter is clicked', () => {\n      const {\n        output,\n        props\n      } = setup();\n      const [, filters] = output.props.children;\n      const filterLink = filters.props.children[1].props.children;\n      filterLink.props.onClick({});\n      expect(props.onShow).toHaveBeenCalledWith(SHOW_ACTIVE);\n    });",
            "file": "components/Footer.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "shouldnt show clear button when no completed todos",
            "suites": [
                "components",
                "Footer"
            ],
            "updatePoint": {
                "line": 88,
                "column": 58
            },
            "line": 88,
            "code": "    it('shouldnt show clear button when no completed todos', () => {\n      const {\n        output\n      } = setup({\n        completedCount: 0\n      });\n      const [,, clear] = output.props.children;\n      expect(clear).toBe(undefined);\n    });",
            "file": "components/Footer.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render clear button when completed todos",
            "suites": [
                "components",
                "Footer"
            ],
            "updatePoint": {
                "line": 97,
                "column": 55
            },
            "line": 97,
            "code": "    it('should render clear button when completed todos', () => {\n      const {\n        output\n      } = setup({\n        completedCount: 1\n      });\n      const [,, clear] = output.props.children;\n      expect(clear.type).toBe('button');\n      expect(clear.props.children).toBe('Clear completed');\n    });",
            "file": "components/Footer.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should call onClearCompleted on clear button click",
            "suites": [
                "components",
                "Footer"
            ],
            "updatePoint": {
                "line": 107,
                "column": 58
            },
            "line": 107,
            "code": "    it('should call onClearCompleted on clear button click', () => {\n      const {\n        output,\n        props\n      } = setup({\n        completedCount: 1\n      });\n      const [,, clear] = output.props.children;\n      clear.props.onClick({});\n      expect(props.onClearCompleted).toHaveBeenCalled();\n    });",
            "file": "components/Footer.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "components",
                "Header"
            ],
            "updatePoint": {
                "line": 23,
                "column": 31
            },
            "line": 23,
            "code": "    it('should render correctly', () => {\n      const {\n        output\n      } = setup();\n      expect(output.type).toBe('header');\n      expect(output.props.className).toBe('header');\n      const [h1, input] = output.props.children;\n      expect(h1.type).toBe('h1');\n      expect(h1.props.children).toBe('todos');\n      expect(input.type).toBe(TodoTextInput);\n      expect(input.props.newTodo).toBe(true);\n      expect(input.props.placeholder).toBe('What needs to be done?');\n    });",
            "file": "components/Header.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should call call addTodo if length of text is greater than 0",
            "suites": [
                "components",
                "Header"
            ],
            "updatePoint": {
                "line": 36,
                "column": 68
            },
            "line": 36,
            "code": "    it('should call call addTodo if length of text is greater than 0', () => {\n      const {\n        output,\n        props\n      } = setup();\n      const input = output.props.children[1];\n      input.props.onSave('');\n      expect(props.addTodo.calls.length).toBe(0);\n      input.props.onSave('Use Redux');\n      expect(props.addTodo.calls.length).toBe(1);\n    });",
            "file": "components/Header.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render container",
            "suites": [
                "components",
                "MainSection"
            ],
            "updatePoint": {
                "line": 40,
                "column": 31
            },
            "line": 40,
            "code": "    it('should render container', () => {\n      const {\n        output\n      } = setup();\n      expect(output.type).toBe('section');\n      expect(output.props.className).toBe('main');\n    });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render",
            "suites": [
                "components",
                "MainSection",
                "toggle all input"
            ],
            "updatePoint": {
                "line": 48,
                "column": 23
            },
            "line": 48,
            "code": "      it('should render', () => {\n        const {\n          output\n        } = setup();\n        const [toggle] = output.props.children;\n        expect(toggle.type).toBe('input');\n        expect(toggle.props.type).toBe('checkbox');\n        expect(toggle.props.checked).toBe(false);\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should be checked if all todos completed",
            "suites": [
                "components",
                "MainSection",
                "toggle all input"
            ],
            "updatePoint": {
                "line": 57,
                "column": 50
            },
            "line": 57,
            "code": "      it('should be checked if all todos completed', () => {\n        const {\n          output\n        } = setup({\n          todos: [{\n            text: 'Use Redux',\n            completed: true,\n            id: 0\n          }]\n        });\n        const [toggle] = output.props.children;\n        expect(toggle.props.checked).toBe(true);\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should call completeAll on change",
            "suites": [
                "components",
                "MainSection",
                "toggle all input"
            ],
            "updatePoint": {
                "line": 70,
                "column": 43
            },
            "line": 70,
            "code": "      it('should call completeAll on change', () => {\n        const {\n          output,\n          props\n        } = setup();\n        const [toggle] = output.props.children;\n        toggle.props.onChange({});\n        expect(props.actions.completeAll).toHaveBeenCalled();\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render",
            "suites": [
                "components",
                "MainSection",
                "footer"
            ],
            "updatePoint": {
                "line": 81,
                "column": 23
            },
            "line": 81,
            "code": "      it('should render', () => {\n        const {\n          output\n        } = setup();\n        const [,, footer] = output.props.children;\n        expect(footer.type).toBe(Footer);\n        expect(footer.props.completedCount).toBe(1);\n        expect(footer.props.activeCount).toBe(1);\n        expect(footer.props.filter).toBe(SHOW_ALL);\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "onShow should set the filter",
            "suites": [
                "components",
                "MainSection",
                "footer"
            ],
            "updatePoint": {
                "line": 91,
                "column": 38
            },
            "line": 91,
            "code": "      it('onShow should set the filter', () => {\n        const {\n          output,\n          renderer\n        } = setup();\n        const [,, footer] = output.props.children;\n        footer.props.onShow(SHOW_COMPLETED);\n        const updated = renderer.getRenderOutput();\n        const [,, updatedFooter] = updated.props.children;\n        expect(updatedFooter.props.filter).toBe(SHOW_COMPLETED);\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "onClearCompleted should call clearCompleted",
            "suites": [
                "components",
                "MainSection",
                "footer"
            ],
            "updatePoint": {
                "line": 102,
                "column": 53
            },
            "line": 102,
            "code": "      it('onClearCompleted should call clearCompleted', () => {\n        const {\n          output,\n          props\n        } = setup();\n        const [,, footer] = output.props.children;\n        footer.props.onClearCompleted();\n        expect(props.actions.clearCompleted).toHaveBeenCalled();\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "onClearCompleted shouldnt call clearCompleted if no todos completed",
            "suites": [
                "components",
                "MainSection",
                "footer"
            ],
            "updatePoint": {
                "line": 111,
                "column": 77
            },
            "line": 111,
            "code": "      it('onClearCompleted shouldnt call clearCompleted if no todos completed', () => {\n        const {\n          output,\n          props\n        } = setup({\n          todos: [{\n            text: 'Use Redux',\n            completed: false,\n            id: 0\n          }]\n        });\n        const [,, footer] = output.props.children;\n        footer.props.onClearCompleted();\n        expect(props.actions.clearCompleted.calls.length).toBe(0);\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render",
            "suites": [
                "components",
                "MainSection",
                "todo list"
            ],
            "updatePoint": {
                "line": 128,
                "column": 23
            },
            "line": 128,
            "code": "      it('should render', () => {\n        const {\n          output,\n          props\n        } = setup();\n        const [, list] = output.props.children;\n        expect(list.type).toBe('ul');\n        expect(list.props.children.length).toBe(2);\n        list.props.children.forEach((item, i) => {\n          expect(item.type).toBe(TodoItem);\n          expect(item.props.todo).toBe(props.todos[i]);\n        });\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should filter items",
            "suites": [
                "components",
                "MainSection",
                "todo list"
            ],
            "updatePoint": {
                "line": 141,
                "column": 29
            },
            "line": 141,
            "code": "      it('should filter items', () => {\n        const {\n          output,\n          renderer,\n          props\n        } = setup();\n        const [,, footer] = output.props.children;\n        footer.props.onShow(SHOW_COMPLETED);\n        const updated = renderer.getRenderOutput();\n        const [, updatedList] = updated.props.children;\n        expect(updatedList.props.children.length).toBe(1);\n        expect(updatedList.props.children[0].props.todo).toBe(props.todos[1]);\n      });",
            "file": "components/MainSection.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "initial render",
            "suites": [
                "components",
                "TodoItem"
            ],
            "updatePoint": {
                "line": 37,
                "column": 22
            },
            "line": 37,
            "code": "    it('initial render', () => {\n      const {\n        output\n      } = setup();\n      expect(output.type).toBe('li');\n      expect(output.props.className).toBe('');\n      const div = output.props.children;\n      expect(div.type).toBe('div');\n      expect(div.props.className).toBe('view');\n      const [input, label, button] = div.props.children;\n      expect(input.type).toBe('input');\n      expect(input.props.checked).toBe(false);\n      expect(label.type).toBe('label');\n      expect(label.props.children).toBe('Use Redux');\n      expect(button.type).toBe('button');\n      expect(button.props.className).toBe('destroy');\n    });",
            "file": "components/TodoItem.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "input onChange should call completeTodo",
            "suites": [
                "components",
                "TodoItem"
            ],
            "updatePoint": {
                "line": 54,
                "column": 47
            },
            "line": 54,
            "code": "    it('input onChange should call completeTodo', () => {\n      const {\n        output,\n        props\n      } = setup();\n      const input = output.props.children.props.children[0];\n      input.props.onChange({});\n      expect(props.completeTodo).toHaveBeenCalledWith(0);\n    });",
            "file": "components/TodoItem.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "button onClick should call deleteTodo",
            "suites": [
                "components",
                "TodoItem"
            ],
            "updatePoint": {
                "line": 63,
                "column": 45
            },
            "line": 63,
            "code": "    it('button onClick should call deleteTodo', () => {\n      const {\n        output,\n        props\n      } = setup();\n      const button = output.props.children.props.children[2];\n      button.props.onClick({});\n      expect(props.deleteTodo).toHaveBeenCalledWith(0);\n    });",
            "file": "components/TodoItem.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "label onDoubleClick should put component in edit state",
            "suites": [
                "components",
                "TodoItem"
            ],
            "updatePoint": {
                "line": 72,
                "column": 62
            },
            "line": 72,
            "code": "    it('label onDoubleClick should put component in edit state', () => {\n      const {\n        output,\n        renderer\n      } = setup();\n      const label = output.props.children.props.children[1];\n      label.props.onDoubleClick({});\n      const updated = renderer.getRenderOutput();\n      expect(updated.type).toBe('li');\n      expect(updated.props.className).toBe('editing');\n    });",
            "file": "components/TodoItem.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "edit state render",
            "suites": [
                "components",
                "TodoItem"
            ],
            "updatePoint": {
                "line": 83,
                "column": 25
            },
            "line": 83,
            "code": "    it('edit state render', () => {\n      const {\n        output\n      } = setup(true);\n      expect(output.type).toBe('li');\n      expect(output.props.className).toBe('editing');\n      const input = output.props.children;\n      expect(input.type).toBe(TodoTextInput);\n      expect(input.props.text).toBe('Use Redux');\n      expect(input.props.editing).toBe(true);\n    });",
            "file": "components/TodoItem.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "TodoTextInput onSave should call editTodo",
            "suites": [
                "components",
                "TodoItem"
            ],
            "updatePoint": {
                "line": 94,
                "column": 49
            },
            "line": 94,
            "code": "    it('TodoTextInput onSave should call editTodo', () => {\n      const {\n        output,\n        props\n      } = setup(true);\n      output.props.children.props.onSave('Use Redux');\n      expect(props.editTodo).toHaveBeenCalledWith(0, 'Use Redux');\n    });",
            "file": "components/TodoItem.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "TodoTextInput onSave should call deleteTodo if text is empty",
            "suites": [
                "components",
                "TodoItem"
            ],
            "updatePoint": {
                "line": 102,
                "column": 68
            },
            "line": 102,
            "code": "    it('TodoTextInput onSave should call deleteTodo if text is empty', () => {\n      const {\n        output,\n        props\n      } = setup(true);\n      output.props.children.props.onSave('');\n      expect(props.deleteTodo).toHaveBeenCalledWith(0);\n    });",
            "file": "components/TodoItem.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "TodoTextInput onSave should exit component from edit state",
            "suites": [
                "components",
                "TodoItem"
            ],
            "updatePoint": {
                "line": 110,
                "column": 66
            },
            "line": 110,
            "code": "    it('TodoTextInput onSave should exit component from edit state', () => {\n      const {\n        output,\n        renderer\n      } = setup(true);\n      output.props.children.props.onSave('Use Redux');\n      const updated = renderer.getRenderOutput();\n      expect(updated.type).toBe('li');\n      expect(updated.props.className).toBe('');\n    });",
            "file": "components/TodoItem.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "components",
                "TodoTextInput"
            ],
            "updatePoint": {
                "line": 27,
                "column": 31
            },
            "line": 27,
            "code": "    it('should render correctly', () => {\n      const {\n        output\n      } = setup();\n      expect(output.props.placeholder).toEqual('What needs to be done?');\n      expect(output.props.value).toEqual('Use Redux');\n      expect(output.props.className).toEqual('');\n    });",
            "file": "components/TodoTextInput.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render correctly when editing=true",
            "suites": [
                "components",
                "TodoTextInput"
            ],
            "updatePoint": {
                "line": 35,
                "column": 49
            },
            "line": 35,
            "code": "    it('should render correctly when editing=true', () => {\n      const {\n        output\n      } = setup({\n        editing: true\n      });\n      expect(output.props.className).toEqual('edit');\n    });",
            "file": "components/TodoTextInput.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render correctly when newTodo=true",
            "suites": [
                "components",
                "TodoTextInput"
            ],
            "updatePoint": {
                "line": 43,
                "column": 49
            },
            "line": 43,
            "code": "    it('should render correctly when newTodo=true', () => {\n      const {\n        output\n      } = setup({\n        newTodo: true\n      });\n      expect(output.props.className).toEqual('new-todo');\n    });",
            "file": "components/TodoTextInput.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should update value on change",
            "suites": [
                "components",
                "TodoTextInput"
            ],
            "updatePoint": {
                "line": 51,
                "column": 37
            },
            "line": 51,
            "code": "    it('should update value on change', () => {\n      const {\n        output,\n        renderer\n      } = setup();\n      output.props.onChange({\n        target: {\n          value: 'Use Radox'\n        }\n      });\n      const updated = renderer.getRenderOutput();\n      expect(updated.props.value).toEqual('Use Radox');\n    });",
            "file": "components/TodoTextInput.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should call onSave on return key press",
            "suites": [
                "components",
                "TodoTextInput"
            ],
            "updatePoint": {
                "line": 64,
                "column": 46
            },
            "line": 64,
            "code": "    it('should call onSave on return key press', () => {\n      const {\n        output,\n        props\n      } = setup();\n      output.props.onKeyDown({\n        which: 13,\n        target: {\n          value: 'Use Redux'\n        }\n      });\n      expect(props.onSave).toHaveBeenCalledWith('Use Redux');\n    });",
            "file": "components/TodoTextInput.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should reset state on return key press if newTodo",
            "suites": [
                "components",
                "TodoTextInput"
            ],
            "updatePoint": {
                "line": 77,
                "column": 57
            },
            "line": 77,
            "code": "    it('should reset state on return key press if newTodo', () => {\n      const {\n        output,\n        renderer\n      } = setup({\n        newTodo: true\n      });\n      output.props.onKeyDown({\n        which: 13,\n        target: {\n          value: 'Use Redux'\n        }\n      });\n      const updated = renderer.getRenderOutput();\n      expect(updated.props.value).toEqual('');\n    });",
            "file": "components/TodoTextInput.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should call onSave on blur",
            "suites": [
                "components",
                "TodoTextInput"
            ],
            "updatePoint": {
                "line": 93,
                "column": 34
            },
            "line": 93,
            "code": "    it('should call onSave on blur', () => {\n      const {\n        output,\n        props\n      } = setup();\n      output.props.onBlur({\n        target: {\n          value: 'Use Redux'\n        }\n      });\n      expect(props.onSave).toHaveBeenCalledWith('Use Redux');\n    });",
            "file": "components/TodoTextInput.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "shouldnt call onSave on blur if newTodo",
            "suites": [
                "components",
                "TodoTextInput"
            ],
            "updatePoint": {
                "line": 105,
                "column": 47
            },
            "line": 105,
            "code": "    it('shouldnt call onSave on blur if newTodo', () => {\n      const {\n        output,\n        props\n      } = setup({\n        newTodo: true\n      });\n      output.props.onBlur({\n        target: {\n          value: 'Use Redux'\n        }\n      });\n      expect(props.onSave.calls.length).toBe(0);\n    });",
            "file": "components/TodoTextInput.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should handle initial state",
            "suites": [
                "todos reducer"
            ],
            "updatePoint": {
                "line": 5,
                "column": 33
            },
            "line": 5,
            "code": "  it('should handle initial state', () => {\n    expect(todos(undefined, {})).toEqual([{\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }]);\n  });",
            "file": "reducers/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should handle ADD_TODO",
            "suites": [
                "todos reducer"
            ],
            "updatePoint": {
                "line": 12,
                "column": 28
            },
            "line": 12,
            "code": "  it('should handle ADD_TODO', () => {\n    expect(todos([], {\n      type: types.ADD_TODO,\n      text: 'Run the tests'\n    })).toEqual([{\n      text: 'Run the tests',\n      completed: false,\n      id: 0\n    }]);\n    expect(todos([{\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }], {\n      type: types.ADD_TODO,\n      text: 'Run the tests'\n    })).toEqual([{\n      text: 'Run the tests',\n      completed: false,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }]);\n    expect(todos([{\n      text: 'Run the tests',\n      completed: false,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }], {\n      type: types.ADD_TODO,\n      text: 'Fix the tests'\n    })).toEqual([{\n      text: 'Fix the tests',\n      completed: false,\n      id: 2\n    }, {\n      text: 'Run the tests',\n      completed: false,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }]);\n  });",
            "file": "reducers/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should handle DELETE_TODO",
            "suites": [
                "todos reducer"
            ],
            "updatePoint": {
                "line": 62,
                "column": 31
            },
            "line": 62,
            "code": "  it('should handle DELETE_TODO', () => {\n    expect(todos([{\n      text: 'Run the tests',\n      completed: false,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }], {\n      type: types.DELETE_TODO,\n      id: 1\n    })).toEqual([{\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }]);\n  });",
            "file": "reducers/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should handle EDIT_TODO",
            "suites": [
                "todos reducer"
            ],
            "updatePoint": {
                "line": 80,
                "column": 29
            },
            "line": 80,
            "code": "  it('should handle EDIT_TODO', () => {\n    expect(todos([{\n      text: 'Run the tests',\n      completed: false,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }], {\n      type: types.EDIT_TODO,\n      text: 'Fix the tests',\n      id: 1\n    })).toEqual([{\n      text: 'Fix the tests',\n      completed: false,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }]);\n  });",
            "file": "reducers/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should handle COMPLETE_TODO",
            "suites": [
                "todos reducer"
            ],
            "updatePoint": {
                "line": 103,
                "column": 33
            },
            "line": 103,
            "code": "  it('should handle COMPLETE_TODO', () => {\n    expect(todos([{\n      text: 'Run the tests',\n      completed: false,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }], {\n      type: types.COMPLETE_TODO,\n      id: 1\n    })).toEqual([{\n      text: 'Run the tests',\n      completed: true,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }]);\n  });",
            "file": "reducers/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should handle COMPLETE_ALL",
            "suites": [
                "todos reducer"
            ],
            "updatePoint": {
                "line": 125,
                "column": 32
            },
            "line": 125,
            "code": "  it('should handle COMPLETE_ALL', () => {\n    expect(todos([{\n      text: 'Run the tests',\n      completed: true,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }], {\n      type: types.COMPLETE_ALL\n    })).toEqual([{\n      text: 'Run the tests',\n      completed: true,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: true,\n      id: 0\n    }]); // Unmark if all todos are currently completed\n\n    expect(todos([{\n      text: 'Run the tests',\n      completed: true,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: true,\n      id: 0\n    }], {\n      type: types.COMPLETE_ALL\n    })).toEqual([{\n      text: 'Run the tests',\n      completed: false,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }]);\n  });",
            "file": "reducers/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should handle CLEAR_COMPLETED",
            "suites": [
                "todos reducer"
            ],
            "updatePoint": {
                "line": 166,
                "column": 35
            },
            "line": 166,
            "code": "  it('should handle CLEAR_COMPLETED', () => {\n    expect(todos([{\n      text: 'Run the tests',\n      completed: true,\n      id: 1\n    }, {\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }], {\n      type: types.CLEAR_COMPLETED\n    })).toEqual([{\n      text: 'Use Redux',\n      completed: false,\n      id: 0\n    }]);\n  });",
            "file": "reducers/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should not generate duplicate ids after CLEAR_COMPLETED",
            "suites": [
                "todos reducer"
            ],
            "updatePoint": {
                "line": 183,
                "column": 61
            },
            "line": 183,
            "code": "  it('should not generate duplicate ids after CLEAR_COMPLETED', () => {\n    expect([{\n      type: types.COMPLETE_TODO,\n      id: 0\n    }, {\n      type: types.CLEAR_COMPLETED\n    }, {\n      type: types.ADD_TODO,\n      text: 'Write more tests'\n    }].reduce(todos, [{\n      id: 0,\n      completed: false,\n      text: 'Use Redux'\n    }, {\n      id: 1,\n      completed: false,\n      text: 'Write tests'\n    }])).toEqual([{\n      text: 'Write more tests',\n      completed: false,\n      id: 2\n    }, {\n      text: 'Write tests',\n      completed: false,\n      id: 1\n    }]);\n  });",
            "file": "reducers/todos.spec.js",
            "skipped": false,
            "dir": "extension/examples/router/test"
        },
        {
            "name": "should render inspector monitor's component",
            "suites": [
                "App container"
            ],
            "updatePoint": {
                "line": 25,
                "column": 49
            },
            "line": 25,
            "code": "  it(\"should render inspector monitor's component\", () => {\n    render( /*#__PURE__*/React.createElement(Provider, {\n      store: store\n    }, /*#__PURE__*/React.createElement(App, {\n      position: \"devtools-left\"\n    })));\n    expect(screen.getByTestId('inspector')).toBeDefined();\n  });",
            "file": "app/containers/App.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should contain an empty action list",
            "suites": [
                "App container"
            ],
            "updatePoint": {
                "line": 33,
                "column": 41
            },
            "line": 33,
            "code": "  it('should contain an empty action list', () => {\n    render( /*#__PURE__*/React.createElement(Provider, {\n      store: store\n    }, /*#__PURE__*/React.createElement(App, {\n      position: \"devtools-left\"\n    })));\n    const actionList = screen.getByTestId('actionList');\n    expect(within(actionList).getByTestId('actionListRows')).toBeEmptyDOMElement();\n  });",
            "file": "app/containers/App.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should get window.__REDUX_DEVTOOLS_EXTENSION__ function",
            "suites": [
                "API"
            ],
            "updatePoint": {
                "line": 4,
                "column": 61
            },
            "line": 4,
            "code": "  it('should get window.__REDUX_DEVTOOLS_EXTENSION__ function', () => {\n    expect(typeof window.__REDUX_DEVTOOLS_EXTENSION__).toBe('function');\n  });",
            "file": "app/inject/api.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should notify error",
            "suites": [
                "API"
            ],
            "updatePoint": {
                "line": 7,
                "column": 25
            },
            "line": 7,
            "code": "  it('should notify error', () => {\n    const mockFunc = jest.fn(() => {});\n\n    window.__REDUX_DEVTOOLS_EXTENSION__.notifyErrors(mockFunc);\n\n    insertScript('hi()');\n    expect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n  });",
            "file": "app/inject/api.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should open monitor",
            "suites": [
                "API"
            ],
            "updatePoint": {
                "line": 15,
                "column": 25
            },
            "line": 15,
            "code": "  it('should open monitor', async () => {\n    let message = await listenMessage(() => {\n      window.__REDUX_DEVTOOLS_EXTENSION__.open();\n    });\n    expect(message).toEqual({\n      source: '@devtools-page',\n      type: 'OPEN',\n      position: 'right'\n    });\n    message = await listenMessage(() => {\n      window.__REDUX_DEVTOOLS_EXTENSION__.open('left');\n    });\n    expect(message).toEqual({\n      source: '@devtools-page',\n      type: 'OPEN',\n      position: 'left'\n    });\n  });",
            "file": "app/inject/api.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should send message",
            "suites": [
                "API"
            ],
            "updatePoint": {
                "line": 33,
                "column": 25
            },
            "line": 33,
            "code": "  it('should send message', async () => {\n    let message = await listenMessage(() => {\n      window.__REDUX_DEVTOOLS_EXTENSION__.send('hi');\n    });\n    expect(message).toMatchObject({\n      type: 'ACTION',\n      payload: undefined,\n      instanceId: 1,\n      name: undefined,\n      source: '@devtools-page'\n    });\n    expect(message.action).toMatch(/{\"action\":{\"type\":\"hi\"},\"timestamp\":\\d+}/);\n    message = await listenMessage(() => {\n      window.__REDUX_DEVTOOLS_EXTENSION__.send({\n        type: 'hi'\n      }, {\n        counter: 1\n      }, 1);\n    });\n    expect(message).toMatchObject({\n      type: 'ACTION',\n      payload: '{\"counter\":1}',\n      instanceId: 1,\n      name: undefined,\n      source: '@devtools-page'\n    });\n    expect(message.action).toMatch(/{\"action\":{\"type\":\"hi\"},\"timestamp\":\\d+}/);\n    message = await listenMessage(() => {\n      window.__REDUX_DEVTOOLS_EXTENSION__.send({\n        type: 'hi'\n      }, {\n        counter: 1\n      }, 1);\n    });\n    expect(message).toMatchObject({\n      type: 'ACTION',\n      payload: '{\"counter\":1}',\n      instanceId: 1,\n      name: undefined,\n      source: '@devtools-page'\n    });\n    expect(message.action).toMatch(/{\"action\":{\"type\":\"hi\"},\"timestamp\":\\d+}/);\n    message = await listenMessage(() => {\n      window.__REDUX_DEVTOOLS_EXTENSION__.send(undefined, {\n        counter: 1\n      }, 1);\n    });\n    expect(message).toEqual({\n      action: undefined,\n      type: 'STATE',\n      payload: {\n        counter: 1\n      },\n      actionsById: undefined,\n      computedStates: undefined,\n      committedState: false,\n      instanceId: 1,\n      maxAge: undefined,\n      name: undefined,\n      source: '@devtools-page'\n    });\n  });",
            "file": "app/inject/api.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should create the store",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 20,
                "column": 29
            },
            "line": 20,
            "code": "  it('should create the store', async () => {\n    const message = await listenMessage(() => {\n      window.store = createStore(counter, window.__REDUX_DEVTOOLS_EXTENSION__());\n      expect(typeof window.store).toBe('object');\n    });\n    expect(message.type).toBe('INIT_INSTANCE');\n    expect(window.store.getState()).toBe(0);\n    insertScript('window.devToolsOptions = { serialize: false }');\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should start monitoring",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 29,
                "column": 29
            },
            "line": 29,
            "code": "  it('should start monitoring', async () => {\n    let message = await listenMessage(() => {\n      window.postMessage({\n        type: 'START',\n        source: '@devtools-extension'\n      }, '*');\n    });\n    expect(message.type).toBe('START');\n    message = await listenMessage();\n    expect(message.type).toBe('STATE');\n    expect(message.actionsById).toMatch(/{\"0\":{\"type\":\"PERFORM_ACTION\",\"action\":{\"type\":\"@@INIT\"},\"/);\n    expect(message.computedStates).toBe('[{\"state\":0}]');\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should perform actions",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 42,
                "column": 28
            },
            "line": 42,
            "code": "  it('should perform actions', async () => {\n    let message = await listenMessage(() => {\n      window.store.dispatch({\n        type: 'INCREMENT'\n      });\n      expect(window.store.getState()).toBe(1);\n    });\n    expect(message.type).toBe('ACTION');\n    expect(message.action).toMatch(/{\"type\":\"PERFORM_ACTION\",\"action\":{\"type\":\"INCREMENT\"},/);\n    expect(message.payload).toBe('1');\n    message = await listenMessage(() => {\n      window.store.dispatch({\n        type: 'INCREMENT'\n      });\n      expect(window.store.getState()).toBe(2);\n    });\n    expect(message.type).toBe('ACTION');\n    expect(message.action).toMatch(/{\"type\":\"PERFORM_ACTION\",\"action\":{\"type\":\"INCREMENT\"},/);\n    expect(message.payload).toBe('2');\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should dispatch actions remotely",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 62,
                "column": 38
            },
            "line": 62,
            "code": "  it('should dispatch actions remotely', async () => {\n    let message = await listenMessage(() => {\n      window.postMessage({\n        type: 'ACTION',\n        payload: \"{ type: 'INCREMENT' }\",\n        source: '@devtools-extension'\n      }, '*');\n    });\n    expect(message.type).toBe('ACTION');\n    message = await listenMessage();\n    expect(message.type).toBe('ACTION');\n    expect(message.action).toMatch(/{\"type\":\"PERFORM_ACTION\",\"action\":{\"type\":\"INCREMENT\"},/);\n    expect(message.payload).toBe('3');\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should cancel (toggle) action",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 76,
                "column": 35
            },
            "line": 76,
            "code": "  it('should cancel (toggle) action', async () => {\n    let message = await listenMessage(() => {\n      window.postMessage({\n        type: 'DISPATCH',\n        payload: {\n          type: 'TOGGLE_ACTION',\n          id: 1\n        },\n        source: '@devtools-extension'\n      }, '*');\n    });\n    expect(message.type).toBe('DISPATCH');\n    message = await listenMessage();\n    expect(message.type).toBe('STATE');\n    expect(window.store.getState()).toBe(2);\n    message = await listenMessage(() => {\n      window.postMessage({\n        type: 'DISPATCH',\n        payload: {\n          type: 'TOGGLE_ACTION',\n          id: 1\n        },\n        source: '@devtools-extension'\n      }, '*');\n    });\n    expect(message.type).toBe('DISPATCH');\n    message = await listenMessage();\n    expect(message.type).toBe('STATE');\n    expect(window.store.getState()).toBe(3);\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should move back and forward (time travel)",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 106,
                "column": 48
            },
            "line": 106,
            "code": "  it('should move back and forward (time travel)', async () => {\n    let message = await listenMessage(() => {\n      window.postMessage({\n        type: 'DISPATCH',\n        payload: {\n          type: 'JUMP_TO_STATE',\n          index: 2,\n          actionId: 2\n        },\n        source: '@devtools-extension'\n      }, '*');\n    });\n    expect(message.type).toBe('DISPATCH');\n    expect(window.store.getState()).toBe(2);\n    message = await listenMessage(() => {\n      window.postMessage({\n        type: 'DISPATCH',\n        payload: {\n          type: 'JUMP_TO_STATE',\n          index: 3,\n          actionId: 3\n        },\n        source: '@devtools-extension'\n      }, '*');\n    });\n    expect(message.type).toBe('DISPATCH');\n    expect(window.store.getState()).toBe(3);\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should import state history",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 134,
                "column": 33
            },
            "line": 134,
            "code": "  it('should import state history', async () => {\n    let message = await listenMessage(() => {\n      window.postMessage({\n        type: 'IMPORT',\n        state: JSON.stringify({\n          monitorState: {},\n          actionsById: {\n            0: {\n              type: 'PERFORM_ACTION',\n              action: {\n                type: '@@INIT'\n              }\n            },\n            1: {\n              type: 'PERFORM_ACTION',\n              action: {\n                type: 'INCREMENT'\n              }\n            },\n            2: {\n              type: 'PERFORM_ACTION',\n              action: {\n                type: 'INCREMENT'\n              }\n            }\n          },\n          nextActionId: 3,\n          stagedActionIds: [0, 1, 2],\n          skippedActionIds: [],\n          currentStateIndex: 2,\n          computedStates: [{\n            state: 0\n          }, {\n            state: 1\n          }, {\n            state: 2\n          }]\n        }),\n        source: '@devtools-extension'\n      }, '*');\n    });\n    expect(message.type).toBe('IMPORT');\n    message = await listenMessage();\n    expect(message.type).toBe('STATE');\n    expect(window.store.getState()).toBe(2);\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should create the store with config parameters",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 180,
                "column": 52
            },
            "line": 180,
            "code": "  it('should create the store with config parameters', async () => {\n    const message = await listenMessage(() => {\n      window.store = createStore(counter, window.__REDUX_DEVTOOLS_EXTENSION__({\n        actionsDenylist: ['SOME_ACTION']\n      }));\n      expect(typeof window.store).toBe('object');\n    });\n    expect(message.type).toBe('INIT_INSTANCE');\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should create the store using old Redux api",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 189,
                "column": 49
            },
            "line": 189,
            "code": "  it('should create the store using old Redux api', async () => {\n    const message = await listenMessage(() => {\n      window.store = window.__REDUX_DEVTOOLS_EXTENSION__()(createStore)(counter);\n      expect(typeof window.store).toBe('object');\n    });\n    expect(message.type).toBe('INIT_INSTANCE');\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should create the store with several enhancers",
            "suites": [
                "Redux enhancer"
            ],
            "updatePoint": {
                "line": 196,
                "column": 52
            },
            "line": 196,
            "code": "  it('should create the store with several enhancers', async () => {\n    const testEnhancer = next => (reducer, initialState, enhancer) => next(reducer, initialState, enhancer);\n\n    const message = await listenMessage(() => {\n      window.store = createStore(counter, compose(testEnhancer, window.__REDUX_DEVTOOLS_EXTENSION__()));\n      expect(typeof window.store).toBe('object');\n    });\n    expect(message.type).toBe('INIT_INSTANCE');\n  });",
            "file": "app/inject/enhancer.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should open extension's window",
            "suites": [
                "Chrome extension"
            ],
            "updatePoint": {
                "line": 21,
                "column": 36
            },
            "line": 21,
            "code": "  it(\"should open extension's window\", async () => {\n    await driver.get(`chrome-extension://${extensionId}/window.html#left`);\n    const url = await driver.getCurrentUrl();\n    expect(url).toBe(`chrome-extension://${extensionId}/window.html#left`);\n  });",
            "file": "chrome/extension.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should match document title",
            "suites": [
                "Chrome extension"
            ],
            "updatePoint": {
                "line": 26,
                "column": 33
            },
            "line": 26,
            "code": "  it('should match document title', async () => {\n    const title = await driver.getTitle();\n    expect(title).toBe('Redux DevTools');\n  });",
            "file": "chrome/extension.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should contain inspector monitor's component",
            "suites": [
                "Chrome extension"
            ],
            "updatePoint": {
                "line": 30,
                "column": 50
            },
            "line": 30,
            "code": "  it(\"should contain inspector monitor's component\", async () => {\n    await delay(1000);\n    const val = await driver.findElement(webdriver.By.xpath('//div[contains(@class, \"inspector-\")]')).getText();\n    expect(val).toBeDefined();\n  });",
            "file": "chrome/extension.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should contain an empty actions list",
            "suites": [
                "Chrome extension"
            ],
            "updatePoint": {
                "line": 35,
                "column": 42
            },
            "line": 35,
            "code": "  it('should contain an empty actions list', async () => {\n    const val = await driver.findElement(webdriver.By.xpath('//div[contains(@class, \"actionListRows-\")]')).getText();\n    expect(val).toBe('');\n  });",
            "file": "chrome/extension.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should get actions list",
            "suites": [
                "Chrome extension"
            ],
            "updatePoint": {
                "line": 40,
                "column": 29
            },
            "line": 40,
            "code": "  it('should get actions list', async () => {\n    const url = 'http://zalmoxisus.github.io/examples/router/';\n    await driver.executeScript(`window.open('${url}')`);\n    await delay(2000);\n    const tabs = await driver.getAllWindowHandles();\n    await driver.switchTo().window(tabs[1]);\n    expect(await driver.getCurrentUrl()).toMatch(url);\n    await driver.switchTo().window(tabs[0]);\n    const result = await driver.wait(driver.findElement(webdriver.By.xpath('//div[contains(@class, \"actionListRows-\")]')).getText().then(val => {\n      return actionsPattern.test(val);\n    }), 15000, \"it doesn't match actions pattern\");\n    expect(result).toBeTruthy();\n  });",
            "file": "chrome/extension.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should open Redux DevTools tab",
            "suites": [
                "DevTools panel for Electron"
            ],
            "updatePoint": {
                "line": 20,
                "column": 36
            },
            "line": 20,
            "code": "  it('should open Redux DevTools tab', async () => {\n    if (!(await driver.getCurrentUrl()).startsWith('devtools')) {\n      const originalWindow = await driver.getWindowHandle();\n      const windows = await driver.getAllWindowHandles();\n\n      for (const window of windows) {\n        if (window === originalWindow) continue;\n        await driver.switchTo().window(window);\n\n        if ((await driver.getCurrentUrl()).startsWith('devtools')) {\n          break;\n        }\n      }\n    }\n\n    expect(await driver.getCurrentUrl()).toMatch(/devtools:\\/\\/devtools\\/bundled\\/devtools_app.html/);\n    const id = await driver.executeAsyncScript(function (callback) {\n      let attempts = 5;\n\n      function showReduxPanel() {\n        if (attempts === 0) {\n          return callback('Redux panel not found');\n        }\n\n        if (UI.inspectorView) {\n          const tabs = UI.inspectorView.tabbedPane.tabs;\n          const idList = tabs.map(tab => tab.id);\n          const reduxPanelId = 'chrome-extension://lmhkpmbekcpmknklioeibfkpmmfibljdRedux';\n\n          if (idList.indexOf(reduxPanelId) !== -1) {\n            UI.inspectorView.showPanel(reduxPanelId);\n            return callback(reduxPanelId);\n          }\n        }\n\n        attempts--;\n        setTimeout(showReduxPanel, 500);\n      }\n\n      showReduxPanel();\n    });\n    expect(id).toBe('chrome-extension://lmhkpmbekcpmknklioeibfkpmmfibljdRedux');\n    const className = await driver.findElement(webdriver.By.className(id)).getAttribute('class');\n    expect(className).not.toMatch(/hidden/); // not hidden\n  });",
            "file": "electron/devpanel.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should have Redux DevTools UI on current tab",
            "suites": [
                "DevTools panel for Electron"
            ],
            "updatePoint": {
                "line": 65,
                "column": 50
            },
            "line": 65,
            "code": "  it('should have Redux DevTools UI on current tab', async () => {\n    await driver.switchTo().frame(driver.findElement(webdriver.By.xpath(`//iframe[@src='${devPanelPath}']`)));\n    await delay(1000);\n  });",
            "file": "electron/devpanel.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should contain INIT action",
            "suites": [
                "DevTools panel for Electron"
            ],
            "updatePoint": {
                "line": 69,
                "column": 32
            },
            "line": 69,
            "code": "  it('should contain INIT action', async () => {\n    const element = await driver.wait(webdriver.until.elementLocated(webdriver.By.xpath('//div[contains(@class, \"actionListRows-\")]')), 5000, 'Element not found');\n    const val = await element.getText();\n    expect(val).toMatch(/@@INIT/);\n  });",
            "file": "electron/devpanel.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "should contain Inspector monitor's component",
            "suites": [
                "DevTools panel for Electron"
            ],
            "updatePoint": {
                "line": 74,
                "column": 50
            },
            "line": 74,
            "code": "  it(\"should contain Inspector monitor's component\", async () => {\n    const val = await driver.findElement(webdriver.By.xpath('//div[contains(@class, \"inspector-\")]')).getText();\n    expect(val).toBeDefined();\n  });",
            "file": "electron/devpanel.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "a huge string",
            "suites": [
                "Perf"
            ],
            "updatePoint": {
                "line": 22,
                "column": 21
            },
            "line": 22,
            "code": "  test('a huge string', bigString);",
            "file": "perf/send.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "a huge array",
            "suites": [
                "Perf"
            ],
            "updatePoint": {
                "line": 23,
                "column": 20
            },
            "line": 23,
            "code": "  test('a huge array', bigArray);",
            "file": "perf/send.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "an object with circular references",
            "suites": [
                "Perf"
            ],
            "updatePoint": {
                "line": 24,
                "column": 42
            },
            "line": 24,
            "code": "  test('an object with circular references', circularData);",
            "file": "perf/send.spec.js",
            "skipped": false,
            "dir": "extension/test"
        },
        {
            "name": "# rootNodeKey",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 19
            },
            "line": 4,
            "code": "test('# rootNodeKey', () => {\n  const map = {};\n  const options = { key: 'foo' };\n\n  expect((map2tree(map, options) as Node).name).toBe('foo');\n});",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## null",
            "suites": [
                "# shallow map"
            ],
            "updatePoint": {
                "line": 12,
                "column": 15
            },
            "line": 12,
            "code": "  test('## null', () => {\n    const map = {\n      a: null,\n    };\n\n    const expected = {\n      name: 'state',\n      children: [{ name: 'a', value: null }],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## value",
            "suites": [
                "# shallow map"
            ],
            "updatePoint": {
                "line": 26,
                "column": 16
            },
            "line": 26,
            "code": "  test('## value', () => {\n    const map = {\n      a: 'foo',\n      b: 'bar',\n    };\n\n    const expected = {\n      name: 'state',\n      children: [\n        { name: 'a', value: 'foo' },\n        { name: 'b', value: 'bar' },\n      ],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## object",
            "suites": [
                "# shallow map"
            ],
            "updatePoint": {
                "line": 44,
                "column": 17
            },
            "line": 44,
            "code": "  test('## object', () => {\n    const map = {\n      a: { aa: 'foo' },\n    };\n\n    const expected = {\n      name: 'state',\n      children: [{ name: 'a', children: [{ name: 'aa', value: 'foo' }] }],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## immutable Map",
            "suites": [
                "# shallow map"
            ],
            "updatePoint": {
                "line": 58,
                "column": 24
            },
            "line": 58,
            "code": "  test('## immutable Map', () => {\n    const map = {\n      a: immutable.fromJS({ aa: 'foo', ab: 'bar' }),\n    };\n\n    const expected = {\n      name: 'state',\n      children: [\n        {\n          name: 'a',\n          children: [\n            { name: 'aa', value: 'foo' },\n            { name: 'ab', value: 'bar' },\n          ],\n        },\n      ],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## null",
            "suites": [
                "# deep map"
            ],
            "updatePoint": {
                "line": 81,
                "column": 15
            },
            "line": 81,
            "code": "  test('## null', () => {\n    const map = {\n      a: { aa: null },\n    };\n\n    const expected = {\n      name: 'state',\n      children: [\n        {\n          name: 'a',\n          children: [\n            {\n              name: 'aa',\n              value: null,\n            },\n          ],\n        },\n      ],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## object",
            "suites": [
                "# deep map"
            ],
            "updatePoint": {
                "line": 105,
                "column": 17
            },
            "line": 105,
            "code": "  test('## object', () => {\n    const map = {\n      a: { aa: { aaa: 'foo' } },\n    };\n\n    const expected = {\n      name: 'state',\n      children: [\n        {\n          name: 'a',\n          children: [\n            {\n              name: 'aa',\n              children: [{ name: 'aaa', value: 'foo' }],\n            },\n          ],\n        },\n      ],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## push",
            "suites": [
                "# array map"
            ],
            "updatePoint": {
                "line": 135,
                "column": 15
            },
            "line": 135,
            "code": "  test('## push', () => {\n    const expected = {\n      name: 'state',\n      children: [\n        {\n          name: 'a',\n          children: [\n            { name: 'a[0]', value: 1 },\n            { name: 'a[1]', value: 2 },\n          ],\n        },\n      ],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## unshift",
            "suites": [
                "# array map"
            ],
            "updatePoint": {
                "line": 153,
                "column": 18
            },
            "line": 153,
            "code": "  test('## unshift', () => {\n    const options = { pushMethod: 'unshift' as const };\n    const expected = {\n      name: 'state',\n      children: [\n        {\n          name: 'a',\n          children: [\n            { name: 'a[1]', value: 2 },\n            { name: 'a[0]', value: 1 },\n          ],\n        },\n      ],\n    };\n\n    expect(map2tree(map, options)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map), options)).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## null",
            "suites": [
                "# array map"
            ],
            "updatePoint": {
                "line": 172,
                "column": 15
            },
            "line": 172,
            "code": "  test('## null', () => {\n    const map = {\n      a: [null],\n    };\n\n    const expected = {\n      name: 'state',\n      children: [\n        {\n          name: 'a',\n          children: [{ name: 'a[0]', value: null }],\n        },\n      ],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## value",
            "suites": [
                "# collection map"
            ],
            "updatePoint": {
                "line": 193,
                "column": 16
            },
            "line": 193,
            "code": "  test('## value', () => {\n    const map = {\n      a: [{ aa: 1 }, { aa: 2 }],\n    };\n\n    const expected = {\n      name: 'state',\n      children: [\n        {\n          name: 'a',\n          children: [\n            { name: 'a[0]', object: { aa: 1 } },\n            { name: 'a[1]', object: { aa: 2 } },\n          ],\n        },\n      ],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "## object",
            "suites": [
                "# collection map"
            ],
            "updatePoint": {
                "line": 215,
                "column": 17
            },
            "line": 215,
            "code": "  test('## object', () => {\n    const map = {\n      a: [{ aa: { aaa: 'foo' } }],\n    };\n\n    const expected = {\n      name: 'state',\n      children: [\n        {\n          name: 'a',\n          children: [{ name: 'a[0]', object: { aa: { aaa: 'foo' } } }],\n        },\n      ],\n    };\n\n    expect(map2tree(map)).toEqual(expected);\n    expect(map2tree(immutable.fromJS(map))).toEqual(expected);\n  });",
            "file": "map2tree.spec.ts",
            "skipped": false,
            "dir": "packages/map2tree/test"
        },
        {
            "name": "invertTheme",
            "suites": [],
            "updatePoint": {
                "line": 92,
                "column": 17
            },
            "line": 92,
            "code": "test('invertTheme', () => {\n  expect(invertBase16Theme(base16Theme)).toEqual(invertedBase16Theme);\n});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/react-base16-styling/test"
        },
        {
            "name": "getBase16Theme",
            "suites": [],
            "updatePoint": {
                "line": 96,
                "column": 20
            },
            "line": 96,
            "code": "test('getBase16Theme', () => {\n  expect(getBase16Theme('apathy')).toEqual(apathy);\n  expect(getBase16Theme({ extend: 'apathy' })).toEqual(apathy);\n  expect(getBase16Theme('apathy:inverted')).toEqual(apathyInverted);\n  expect(getBase16Theme({})).toBeUndefined();\n});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/react-base16-styling/test"
        },
        {
            "name": "createStyling (default)",
            "suites": [],
            "updatePoint": {
                "line": 103,
                "column": 29
            },
            "line": 103,
            "code": "test('createStyling (default)', () => {\n  const styling = createStyling(getStylingFromBase16, {\n    defaultBase16: apathy,\n  });\n  const defaultStyling = styling(undefined);\n\n  expect(defaultStyling('testClass')).toEqual({ className: 'testClass' });\n  expect(defaultStyling('testStyle')).toEqual({\n    style: { color: apathy.base00 },\n  });\n  expect(defaultStyling('testFunc', 'mod')).toEqual({\n    className: 'testClass--mod',\n    style: {\n      width: 0,\n      color: apathy.base00,\n    },\n  });\n});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/react-base16-styling/test"
        },
        {
            "name": "createStyling (custom)",
            "suites": [],
            "updatePoint": {
                "line": 122,
                "column": 28
            },
            "line": 122,
            "code": "test('createStyling (custom)', () => {\n  const styling = createStyling(getStylingFromBase16, {\n    defaultBase16: apathy,\n  });\n  let customStyling = styling({\n    testClass: 'customClass',\n    testStyle: { height: 0 },\n    testFunc: (styling: Styling, arg) => ({\n      className: `${styling.className!} customClass--${arg as string}`,\n      style: {\n        ...styling.style,\n        border: 0,\n      },\n    }),\n    testFuncNoStyle: (styling: Styling, arg) => ({\n      className: `${styling.className!} customClass--${arg as string}`,\n      style: {\n        ...styling.style,\n        border: 0,\n      },\n    }),\n  });\n\n  expect(customStyling('testClass')).toEqual({\n    className: 'testClass customClass',\n  });\n  expect(customStyling('testStyle')).toEqual({\n    style: { color: apathy.base00, height: 0 },\n  });\n  expect(customStyling('testFunc', 'mod')).toEqual({\n    className: 'testClass--mod customClass--mod',\n    style: {\n      width: 0,\n      color: apathy.base00,\n      border: 0,\n    },\n  });\n  expect(customStyling('testFuncNoStyle', 'mod')).toEqual({\n    className: 'testClass--mod customClass--mod',\n    style: {\n      border: 0,\n    },\n  });\n\n  customStyling = styling({\n    testClass: () => ({\n      className: 'customClass',\n    }),\n    testStyle: () => ({\n      style: {\n        border: 0,\n      },\n    }),\n  });\n\n  expect(customStyling('testClass')).toEqual({ className: 'customClass' });\n  expect(customStyling('testStyle')).toEqual({ style: { border: 0 } });\n});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/react-base16-styling/test"
        },
        {
            "name": "createStyling (multiple)",
            "suites": [],
            "updatePoint": {
                "line": 181,
                "column": 30
            },
            "line": 181,
            "code": "test('createStyling (multiple)', () => {\n  const styling = createStyling(getStylingFromBase16, {\n    defaultBase16: apathy,\n  });\n  let customStyling = styling({\n    baseStyle: ({ style }) => ({ style: { ...style, color: 'blue' } }),\n  });\n\n  expect(customStyling(['baseStyle', 'additionalStyle'])).toEqual({\n    style: {\n      color: 'blue',\n      border: 0,\n    },\n  });\n\n  customStyling = styling({\n    additionalStyle: ({ style }) => ({ style: { ...style, border: 1 } }),\n  });\n\n  expect(customStyling(['baseStyle', 'additionalStyle'])).toEqual({\n    style: {\n      color: 'red',\n      border: 1,\n    },\n  });\n});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/react-base16-styling/test"
        },
        {
            "name": "should determine the correct type",
            "suites": [
                "objType"
            ],
            "updatePoint": {
                "line": 4,
                "column": 39
            },
            "line": 4,
            "code": "  it('should determine the correct type', () => {\n    expect(objType({})).toBe('Object');\n    expect(objType([])).toBe('Array');\n    expect(objType(new Map())).toBe('Map');\n    expect(objType(new WeakMap())).toBe('WeakMap');\n    expect(objType(new Set())).toBe('Set');\n    expect(objType(new WeakSet())).toBe('WeakSet');\n    expect(objType(new Error())).toBe('Error');\n    expect(objType(new Date())).toBe('Date');\n    expect(\n      objType(() => {\n        // noop\n      })\n    ).toBe('Function');\n    expect(objType('')).toBe('String');\n    expect(objType(true)).toBe('Boolean');\n    expect(objType(null)).toBe('Null');\n    expect(objType(undefined)).toBe('Undefined');\n    expect(objType(10)).toBe('Number');\n    expect(objType(Symbol.iterator)).toBe('Symbol');\n  });",
            "file": "objType.spec.ts",
            "skipped": false,
            "dir": "packages/react-json-tree/test"
        },
        {
            "name": "loads main page",
            "suites": [
                "Server",
                "Express backend"
            ],
            "updatePoint": {
                "line": 21,
                "column": 23
            },
            "line": 21,
            "code": "    it('loads main page', function () {\n      return new Promise<void>((done) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        request('http://localhost:8000')\n          .get('/')\n          .expect('Content-Type', /text\\/html/)\n          .expect(200)\n          .then(function (res: { text: string }) {\n            expect(res.text).toMatch(/<title>Redux DevTools<\\/title>/);\n            done();\n          });\n      });\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "resolves an inexistent url",
            "suites": [
                "Server",
                "Express backend"
            ],
            "updatePoint": {
                "line": 35,
                "column": 34
            },
            "line": 35,
            "code": "    it('resolves an inexistent url', function () {\n      return new Promise((done) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        request('http://localhost:8000/jreerfr/123')\n          .get('/')\n          .expect('Content-Type', /text\\/html/)\n          .expect(200, done);\n      });\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "should connect",
            "suites": [
                "Server",
                "Realtime monitoring"
            ],
            "updatePoint": {
                "line": 68,
                "column": 22
            },
            "line": 68,
            "code": "    it('should connect', function () {\n      return new Promise<void>((done) => {\n        socket.on('connect', function (status) {\n          expect(status.id).toBeTruthy();\n          done();\n        });\n      });\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "should login",
            "suites": [
                "Server",
                "Realtime monitoring"
            ],
            "updatePoint": {
                "line": 77,
                "column": 20
            },
            "line": 77,
            "code": "    it('should login', function () {\n      socket.emit(\n        'login',\n        'master',\n        function (error: Error | undefined, channelName: string) {\n          if (error) {\n            /* eslint-disable-next-line no-console */\n            console.log(error);\n            return;\n          }\n          expect(channelName).toBe('respond');\n          channel = socket.subscribe(channelName);\n          expect(channel.SUBSCRIBED).toBe('subscribed');\n        }\n      );\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "should send message",
            "suites": [
                "Server",
                "Realtime monitoring"
            ],
            "updatePoint": {
                "line": 94,
                "column": 27
            },
            "line": 94,
            "code": "    it('should send message', function () {\n      return new Promise<void>((done) => {\n        const data = {\n          type: 'ACTION',\n          payload: {\n            todos: 'do some',\n          },\n          action: {\n            timestamp: 1483349708506,\n            action: {\n              type: 'ADD_TODO',\n              text: 'hggg',\n            },\n          },\n          instanceId: 'tAmA7H5fclyWhvizAAAi',\n          name: 'LoggerInstance',\n          id: 'tAmA7H5fclyWhvizAAAi',\n        };\n\n        socket2.emit(\n          'login',\n          '',\n          function (error: Error | undefined, channelName: string) {\n            if (error) {\n              /* eslint-disable-next-line no-console */\n              console.log(error);\n              return;\n            }\n            expect(channelName).toBe('log');\n            const channel2 = socket2.subscribe(channelName);\n            expect(channel2.SUBSCRIBED).toBe('subscribed');\n            channel2.on('subscribe', function () {\n              channel2.watch(function (message) {\n                expect(message).toEqual(data);\n                done();\n              });\n              socket.emit(channelName, data);\n            });\n          }\n        );\n      });\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "should add a report",
            "suites": [
                "Server",
                "REST backend"
            ],
            "updatePoint": {
                "line": 152,
                "column": 27
            },
            "line": 152,
            "code": "    it('should add a report', function () {\n      return new Promise<void>((done) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        request('http://localhost:8000')\n          .post('/')\n          .send(report)\n          .set('Accept', 'application/json')\n          .expect('Content-Type', /application\\/json/)\n          .expect(200)\n          .then(function (res: { body: { id: string } }) {\n            id = res.body.id;\n            expect(id).toBeTruthy();\n            done();\n          });\n      });\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "should get the report",
            "suites": [
                "Server",
                "REST backend"
            ],
            "updatePoint": {
                "line": 169,
                "column": 29
            },
            "line": 169,
            "code": "    it('should get the report', function () {\n      return new Promise<void>((done) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        request('http://localhost:8000')\n          .post('/')\n          .send({\n            op: 'get',\n            id: id,\n          })\n          .set('Accept', 'application/json')\n          .expect('Content-Type', /application\\/json/)\n          .expect(200)\n          .then(function (res: { body: unknown }) {\n            expect(res.body).toMatchObject(report);\n            done();\n          });\n      });\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "should list reports",
            "suites": [
                "Server",
                "REST backend"
            ],
            "updatePoint": {
                "line": 188,
                "column": 27
            },
            "line": 188,
            "code": "    it('should list reports', function () {\n      return new Promise<void>((done) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        request('http://localhost:8000')\n          .post('/')\n          .send({\n            op: 'list',\n          })\n          .set('Accept', 'application/json')\n          .expect('Content-Type', /application\\/json/)\n          .expect(200)\n          .then(function (res: {\n            body: { id: string; title: string | null; added: string | null }[];\n          }) {\n            expect(res.body).toHaveLength(1);\n            expect(res.body[0].id).toBe(id);\n            expect(res.body[0].title).toBe('Test report');\n            expect(res.body[0].added).toBeTruthy();\n            done();\n          });\n      });\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "should get the report",
            "suites": [
                "Server",
                "GraphQL backend"
            ],
            "updatePoint": {
                "line": 213,
                "column": 29
            },
            "line": 213,
            "code": "    it('should get the report', function () {\n      return new Promise<void>((done) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        request('http://localhost:8000')\n          .post('/graphql')\n          .send({\n            query: '{ reports { id, type, title } }',\n          })\n          .set('Accept', 'application/json')\n          .expect('Content-Type', /application\\/json/)\n          .expect(200)\n          .then(function (res: {\n            body: {\n              data: {\n                reports: {\n                  id: string;\n                  title: string | null;\n                  type: string | null;\n                }[];\n              };\n            };\n          }) {\n            const reports = res.body.data.reports;\n            expect(reports).toHaveLength(1);\n            expect(reports[0].id).toBeTruthy();\n            expect(reports[0].title).toBe('Test report');\n            expect(reports[0].type).toBe('ACTIONS');\n            done();\n          });\n      });\n    });",
            "file": "integration.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-cli/test"
        },
        {
            "name": "should return initial state",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 23,
                "column": 33
            },
            "line": 23,
            "code": "  it('should return initial state', () => {\n    runTest(undefined, computedStates[0]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should add element",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 27,
                "column": 24
            },
            "line": 27,
            "code": "  it('should add element', () => {\n    runTest(computedStates[0], computedStates[1]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should remove element",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 31,
                "column": 27
            },
            "line": 31,
            "code": "  it('should remove element', () => {\n    runTest(computedStates[1], computedStates[0]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should change element",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 35,
                "column": 27
            },
            "line": 35,
            "code": "  it('should change element', () => {\n    runTest(computedStates[1], computedStates[2]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should add, change and remove elements",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 39,
                "column": 44
            },
            "line": 39,
            "code": "  it('should add, change and remove elements', () => {\n    runTest(computedStates[2], computedStates[3]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should change in array",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 43,
                "column": 28
            },
            "line": 43,
            "code": "  it('should change in array', () => {\n    runTest(computedStates[3], computedStates[4]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should remove elements in array",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 47,
                "column": 37
            },
            "line": 47,
            "code": "  it('should remove elements in array', () => {\n    runTest(computedStates[5], computedStates[6]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should add elements in array",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 51,
                "column": 34
            },
            "line": 51,
            "code": "  it('should add elements in array', () => {\n    runTest(computedStates[6], computedStates[5]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should add and change elements in array",
            "suites": [
                "Assertions"
            ],
            "updatePoint": {
                "line": 55,
                "column": 45
            },
            "line": 55,
            "code": "  it('should add and change elements in array', () => {\n    runTest(computedStates[5], computedStates[7]);\n  });",
            "file": "assertions.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-inspector-monitor-test-tab/test"
        },
        {
            "name": "should perform actions",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 99,
                "column": 28
            },
            "line": 99,
            "code": "  it('should perform actions', () => {\n    expect(store.getState()).toBe(0);\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(1);\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(2);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should provide observable",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 107,
                "column": 31
            },
            "line": 107,
            "code": "  it('should provide observable', () => {\n    let lastValue;\n    // let calls = 0;\n\n    from(store as unknown as Observable<number>).subscribe((state) => {\n      lastValue = state;\n      // calls++;\n    });\n\n    expect(lastValue).toBe(0);\n    store.dispatch({ type: 'INCREMENT' });\n    expect(lastValue).toBe(1);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should rollback state to the last committed state",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 121,
                "column": 55
            },
            "line": 121,
            "code": "  it('should rollback state to the last committed state', () => {\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(2);\n\n    liftedStore.dispatch(ActionCreators.commit());\n    expect(store.getState()).toBe(2);\n\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(4);\n\n    liftedStore.dispatch(ActionCreators.rollback());\n    expect(store.getState()).toBe(2);\n\n    store.dispatch({ type: 'DECREMENT' });\n    expect(store.getState()).toBe(1);\n\n    liftedStore.dispatch(ActionCreators.rollback());\n    expect(store.getState()).toBe(2);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should reset to initial state",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 143,
                "column": 35
            },
            "line": 143,
            "code": "  it('should reset to initial state', () => {\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(1);\n\n    liftedStore.dispatch(ActionCreators.commit());\n    expect(store.getState()).toBe(1);\n\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(2);\n\n    liftedStore.dispatch(ActionCreators.rollback());\n    expect(store.getState()).toBe(1);\n\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(2);\n\n    liftedStore.dispatch(ActionCreators.reset());\n    expect(store.getState()).toBe(0);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should toggle an action",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 163,
                "column": 29
            },
            "line": 163,
            "code": "  it('should toggle an action', () => {\n    // actionId 0 = @@INIT\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'DECREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(1);\n\n    liftedStore.dispatch(ActionCreators.toggleAction(2));\n    expect(store.getState()).toBe(2);\n\n    liftedStore.dispatch(ActionCreators.toggleAction(2));\n    expect(store.getState()).toBe(1);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should set multiple action skip",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 177,
                "column": 37
            },
            "line": 177,
            "code": "  it('should set multiple action skip', () => {\n    // actionId 0 = @@INIT\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(3);\n\n    liftedStore.dispatch(ActionCreators.setActionsActive(1, 3, false));\n    expect(store.getState()).toBe(1);\n\n    liftedStore.dispatch(ActionCreators.setActionsActive(0, 2, true));\n    expect(store.getState()).toBe(2);\n\n    liftedStore.dispatch(ActionCreators.setActionsActive(0, 1, true));\n    expect(store.getState()).toBe(2);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should sweep disabled actions",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 194,
                "column": 35
            },
            "line": 194,
            "code": "  it('should sweep disabled actions', () => {\n    // actionId 0 = @@INIT\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'DECREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n\n    expect(store.getState()).toBe(2);\n    expect(liftedStore.getState().stagedActionIds).toEqual([0, 1, 2, 3, 4]);\n    expect(liftedStore.getState().skippedActionIds).toEqual([]);\n\n    liftedStore.dispatch(ActionCreators.toggleAction(2));\n    expect(store.getState()).toBe(3);\n    expect(liftedStore.getState().stagedActionIds).toEqual([0, 1, 2, 3, 4]);\n    expect(liftedStore.getState().skippedActionIds).toEqual([2]);\n\n    liftedStore.dispatch(ActionCreators.sweep());\n    expect(store.getState()).toBe(3);\n    expect(liftedStore.getState().stagedActionIds).toEqual([0, 1, 3, 4]);\n    expect(liftedStore.getState().skippedActionIds).toEqual([]);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should jump to state",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 216,
                "column": 26
            },
            "line": 216,
            "code": "  it('should jump to state', () => {\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'DECREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(1);\n\n    liftedStore.dispatch(ActionCreators.jumpToState(0));\n    expect(store.getState()).toBe(0);\n\n    liftedStore.dispatch(ActionCreators.jumpToState(1));\n    expect(store.getState()).toBe(1);\n\n    liftedStore.dispatch(ActionCreators.jumpToState(2));\n    expect(store.getState()).toBe(0);\n\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(0);\n\n    liftedStore.dispatch(ActionCreators.jumpToState(4));\n    expect(store.getState()).toBe(2);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should jump to action",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 238,
                "column": 27
            },
            "line": 238,
            "code": "  it('should jump to action', () => {\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'DECREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(1);\n\n    liftedStore.dispatch(ActionCreators.jumpToAction(0));\n    expect(store.getState()).toBe(0);\n\n    liftedStore.dispatch(ActionCreators.jumpToAction(1));\n    expect(store.getState()).toBe(1);\n\n    liftedStore.dispatch(ActionCreators.jumpToAction(10));\n    expect(store.getState()).toBe(1);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should reorder actions",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 254,
                "column": 28
            },
            "line": 254,
            "code": "  it('should reorder actions', () => {\n    const storeWithMultiply = createStore(counterWithMultiply, instrument());\n    storeWithMultiply.dispatch({ type: 'INCREMENT' });\n    storeWithMultiply.dispatch({ type: 'DECREMENT' });\n    storeWithMultiply.dispatch({ type: 'INCREMENT' });\n    storeWithMultiply.dispatch({ type: 'MULTIPLY' });\n    expect(storeWithMultiply.liftedStore.getState().stagedActionIds).toEqual([\n      0, 1, 2, 3, 4,\n    ]);\n    expect(storeWithMultiply.getState()).toBe(2);\n\n    storeWithMultiply.liftedStore.dispatch(ActionCreators.reorderAction(4, 1));\n    expect(storeWithMultiply.liftedStore.getState().stagedActionIds).toEqual([\n      0, 4, 1, 2, 3,\n    ]);\n    expect(storeWithMultiply.getState()).toBe(1);\n\n    storeWithMultiply.liftedStore.dispatch(ActionCreators.reorderAction(4, 1));\n    expect(storeWithMultiply.liftedStore.getState().stagedActionIds).toEqual([\n      0, 4, 1, 2, 3,\n    ]);\n    expect(storeWithMultiply.getState()).toBe(1);\n\n    storeWithMultiply.liftedStore.dispatch(ActionCreators.reorderAction(4, 2));\n    expect(storeWithMultiply.liftedStore.getState().stagedActionIds).toEqual([\n      0, 1, 4, 2, 3,\n    ]);\n    expect(storeWithMultiply.getState()).toBe(2);\n\n    storeWithMultiply.liftedStore.dispatch(ActionCreators.reorderAction(1, 10));\n    expect(storeWithMultiply.liftedStore.getState().stagedActionIds).toEqual([\n      0, 4, 2, 3, 1,\n    ]);\n    expect(storeWithMultiply.getState()).toBe(1);\n\n    storeWithMultiply.liftedStore.dispatch(ActionCreators.reorderAction(10, 1));\n    expect(storeWithMultiply.liftedStore.getState().stagedActionIds).toEqual([\n      0, 4, 2, 3, 1,\n    ]);\n    expect(storeWithMultiply.getState()).toBe(1);\n\n    storeWithMultiply.liftedStore.dispatch(ActionCreators.reorderAction(1, -2));\n    expect(storeWithMultiply.liftedStore.getState().stagedActionIds).toEqual([\n      0, 1, 4, 2, 3,\n    ]);\n    expect(storeWithMultiply.getState()).toBe(2);\n\n    storeWithMultiply.liftedStore.dispatch(ActionCreators.reorderAction(0, 1));\n    expect(storeWithMultiply.liftedStore.getState().stagedActionIds).toEqual([\n      0, 1, 4, 2, 3,\n    ]);\n    expect(storeWithMultiply.getState()).toBe(2);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should replace the reducer",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 308,
                "column": 32
            },
            "line": 308,
            "code": "  it('should replace the reducer', () => {\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'DECREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(1);\n\n    store.replaceReducer(doubleCounter);\n    expect(store.getState()).toBe(2);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should replace the reducer without recomputing actions",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 318,
                "column": 60
            },
            "line": 318,
            "code": "  it('should replace the reducer without recomputing actions', () => {\n    store = createStore(\n      counter,\n      instrument(undefined, { shouldHotReload: false })\n    );\n    expect(store.getState()).toBe(0);\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'DECREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(1);\n\n    store.replaceReducer(doubleCounter);\n    expect(store.getState()).toBe(1);\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(3);\n\n    store.replaceReducer(\n      (() => ({ test: true } as unknown)) as Reducer<number, CounterAction>\n    );\n    const newStore = store as unknown as Store<{ test: boolean }>;\n    expect(newStore.getState()).toEqual({ test: true });\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should catch and record errors",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 341,
                "column": 36
            },
            "line": 341,
            "code": "  it('should catch and record errors', () => {\n    const spy = jest.spyOn(console, 'error').mockImplementation(() => {\n      // noop\n    });\n    const storeWithBug = createStore(\n      counterWithBug,\n      instrument(undefined, { shouldCatchErrors: true })\n    );\n\n    storeWithBug.dispatch({ type: 'INCREMENT' });\n    storeWithBug.dispatch({ type: 'DECREMENT' });\n    storeWithBug.dispatch({ type: 'INCREMENT' });\n\n    const { computedStates } = storeWithBug.liftedStore.getState();\n    expect(computedStates[2].error).toMatch(/ReferenceError/);\n    expect(computedStates[3].error).toMatch(\n      /Interrupted by an error up the chain/\n    );\n    expect(spy.mock.calls[0][0].toString()).toMatch(/ReferenceError/);\n\n    spy.mockReset();\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should catch invalid action type (undefined type)",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 364,
                "column": 55
            },
            "line": 364,
            "code": "  it('should catch invalid action type (undefined type)', () => {\n    expect(() => {\n      store.dispatch({ type: undefined } as unknown as CounterAction);\n    }).toThrow(\n      'Actions may not have an undefined \"type\" property. ' +\n        'Have you misspelled a constant?'\n    );\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should catch invalid action type (function)",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 373,
                "column": 49
            },
            "line": 373,
            "code": "  it('should catch invalid action type (function)', () => {\n    function ActionClass(this: any) {\n      this.type = 'test';\n    }\n\n    expect(() => {\n      store.dispatch(new (ActionClass as any)() as CounterAction);\n    }).toThrow(\n      'Actions must be plain objects. ' +\n        'Use custom middleware for async actions.'\n    );\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should return the last non-undefined state from getState",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 386,
                "column": 62
            },
            "line": 386,
            "code": "  it('should return the last non-undefined state from getState', () => {\n    const storeWithBug = createStore(counterWithBug, instrument());\n    storeWithBug.dispatch({ type: 'INCREMENT' });\n    storeWithBug.dispatch({ type: 'INCREMENT' });\n    expect(storeWithBug.getState()).toBe(2);\n\n    storeWithBug.dispatch({ type: 'SET_UNDEFINED' });\n    expect(storeWithBug.getState()).toBe(2);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should not recompute states on every action",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 396,
                "column": 49
            },
            "line": 396,
            "code": "  it('should not recompute states on every action', () => {\n    let reducerCalls = 0;\n    const monitoredStore = createStore(() => reducerCalls++, instrument());\n    expect(reducerCalls).toBe(1);\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    expect(reducerCalls).toBe(4);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should not recompute old states when toggling an action",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 406,
                "column": 61
            },
            "line": 406,
            "code": "  it('should not recompute old states when toggling an action', () => {\n    let reducerCalls = 0;\n    const monitoredStore = createStore(() => reducerCalls++, instrument());\n    const monitoredLiftedStore = monitoredStore.liftedStore;\n\n    expect(reducerCalls).toBe(1);\n    // actionId 0 = @@INIT\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    expect(reducerCalls).toBe(4);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(3));\n    expect(reducerCalls).toBe(4);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(3));\n    expect(reducerCalls).toBe(5);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(2));\n    expect(reducerCalls).toBe(6);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(2));\n    expect(reducerCalls).toBe(8);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(1));\n    expect(reducerCalls).toBe(10);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(2));\n    expect(reducerCalls).toBe(11);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(3));\n    expect(reducerCalls).toBe(11);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(1));\n    expect(reducerCalls).toBe(12);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(3));\n    expect(reducerCalls).toBe(13);\n\n    monitoredLiftedStore.dispatch(ActionCreators.toggleAction(2));\n    expect(reducerCalls).toBe(15);\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should not recompute states when jumping to state",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 449,
                "column": 55
            },
            "line": 449,
            "code": "  it('should not recompute states when jumping to state', () => {\n    let reducerCalls = 0;\n    const monitoredStore = createStore(() => reducerCalls++, instrument());\n    const monitoredLiftedStore = monitoredStore.liftedStore;\n\n    expect(reducerCalls).toBe(1);\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    expect(reducerCalls).toBe(4);\n\n    const savedComputedStates = monitoredLiftedStore.getState().computedStates;\n\n    monitoredLiftedStore.dispatch(ActionCreators.jumpToState(0));\n    expect(reducerCalls).toBe(4);\n\n    monitoredLiftedStore.dispatch(ActionCreators.jumpToState(1));\n    expect(reducerCalls).toBe(4);\n\n    monitoredLiftedStore.dispatch(ActionCreators.jumpToState(3));\n    expect(reducerCalls).toBe(4);\n\n    expect(monitoredLiftedStore.getState().computedStates).toBe(\n      savedComputedStates\n    );\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should not recompute states on monitor actions",
            "suites": [
                "instrument"
            ],
            "updatePoint": {
                "line": 476,
                "column": 52
            },
            "line": 476,
            "code": "  it('should not recompute states on monitor actions', () => {\n    let reducerCalls = 0;\n    const monitoredStore = createStore(() => reducerCalls++, instrument());\n    const monitoredLiftedStore = monitoredStore.liftedStore;\n\n    expect(reducerCalls).toBe(1);\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    monitoredStore.dispatch({ type: 'INCREMENT' });\n    expect(reducerCalls).toBe(4);\n\n    const savedComputedStates = monitoredLiftedStore.getState().computedStates;\n\n    monitoredLiftedStore.dispatch({ type: 'lol' } as Action);\n    expect(reducerCalls).toBe(4);\n\n    monitoredLiftedStore.dispatch({ type: 'wat' } as Action);\n    expect(reducerCalls).toBe(4);\n\n    expect(monitoredLiftedStore.getState().computedStates).toBe(\n      savedComputedStates\n    );\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should auto-commit earliest non-@@INIT action when maxAge is reached",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 512,
                "column": 76
            },
            "line": 512,
            "code": "    it('should auto-commit earliest non-@@INIT action when maxAge is reached', () => {\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      let liftedStoreState = configuredLiftedStore.getState();\n\n      expect(configuredStore.getState()).toBe(2);\n      expect(Object.keys(liftedStoreState.actionsById)).toHaveLength(3);\n      expect(liftedStoreState.committedState).toBeUndefined();\n      expect(liftedStoreState.stagedActionIds).toContain(1);\n\n      // Trigger auto-commit.\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      liftedStoreState = configuredLiftedStore.getState();\n\n      expect(configuredStore.getState()).toBe(3);\n      expect(Object.keys(liftedStoreState.actionsById)).toHaveLength(3);\n      expect(liftedStoreState.stagedActionIds).not.toContain(1);\n      expect(liftedStoreState.computedStates[0].state).toBe(1);\n      expect(liftedStoreState.committedState).toBe(1);\n      expect(liftedStoreState.currentStateIndex).toBe(2);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should remove skipped actions once committed",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 534,
                "column": 52
            },
            "line": 534,
            "code": "    it('should remove skipped actions once committed', () => {\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      configuredLiftedStore.dispatch(ActionCreators.toggleAction(1));\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      expect(configuredLiftedStore.getState().skippedActionIds).toContain(1);\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      expect(configuredLiftedStore.getState().skippedActionIds).not.toContain(\n        1\n      );\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should not auto-commit errors",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 545,
                "column": 37
            },
            "line": 545,
            "code": "    it('should not auto-commit errors', () => {\n      const spy = jest.spyOn(console, 'error');\n\n      const storeWithBug = createStore(\n        counterWithBug,\n        instrument(undefined, { maxAge: 3, shouldCatchErrors: true })\n      );\n      const liftedStoreWithBug = storeWithBug.liftedStore;\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'INCREMENT' });\n      expect(liftedStoreWithBug.getState().stagedActionIds).toHaveLength(3);\n\n      storeWithBug.dispatch({ type: 'INCREMENT' });\n      expect(liftedStoreWithBug.getState().stagedActionIds).toHaveLength(4);\n\n      spy.mockReset();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should auto-commit actions after hot reload fixes error",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 563,
                "column": 63
            },
            "line": 563,
            "code": "    it('should auto-commit actions after hot reload fixes error', () => {\n      const spy = jest.spyOn(console, 'error');\n\n      const storeWithBug = createStore(\n        counterWithBug,\n        instrument(undefined, { maxAge: 3, shouldCatchErrors: true })\n      );\n      const liftedStoreWithBug = storeWithBug.liftedStore;\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'INCREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      expect(liftedStoreWithBug.getState().stagedActionIds).toHaveLength(7);\n\n      // Auto-commit 2 actions by \"fixing\" reducer bug, but introducing another.\n      storeWithBug.replaceReducer(\n        counterWithAnotherBug as Reducer<number, CounterWithBugAction>\n      );\n      const liftedStoreWithAnotherBug =\n        liftedStoreWithBug as unknown as LiftedStore<\n          number,\n          CounterWithAnotherBugAction,\n          null\n        >;\n      expect(liftedStoreWithAnotherBug.getState().stagedActionIds).toHaveLength(\n        5\n      );\n\n      // Auto-commit 2 more actions by \"fixing\" other reducer bug.\n      storeWithBug.replaceReducer(\n        counter as Reducer<number, CounterWithBugAction>\n      );\n      const liftedStore = liftedStoreWithBug as LiftedStore<\n        number,\n        CounterAction,\n        null\n      >;\n      expect(liftedStore.getState().stagedActionIds).toHaveLength(3);\n\n      spy.mockReset();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should update currentStateIndex when auto-committing",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 607,
                "column": 60
            },
            "line": 607,
            "code": "    it('should update currentStateIndex when auto-committing', () => {\n      let liftedStoreState;\n\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      liftedStoreState = configuredLiftedStore.getState();\n      expect(liftedStoreState.currentStateIndex).toBe(2);\n\n      // currentStateIndex should stay at 2 as actions are committed.\n      configuredStore.dispatch({ type: 'INCREMENT' });\n      liftedStoreState = configuredLiftedStore.getState();\n      const currentComputedState =\n        liftedStoreState.computedStates[liftedStoreState.currentStateIndex];\n      expect(liftedStoreState.currentStateIndex).toBe(2);\n      expect(currentComputedState.state).toBe(3);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should continue to increment currentStateIndex while error blocks commit",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 624,
                "column": 80
            },
            "line": 624,
            "code": "    it('should continue to increment currentStateIndex while error blocks commit', () => {\n      const spy = jest.spyOn(console, 'error');\n\n      const storeWithBug = createStore(\n        counterWithBug,\n        instrument(undefined, { maxAge: 3, shouldCatchErrors: true })\n      );\n      const liftedStoreWithBug = storeWithBug.liftedStore;\n\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n\n      const liftedStoreState = liftedStoreWithBug.getState();\n      const currentComputedState =\n        liftedStoreState.computedStates[liftedStoreState.currentStateIndex];\n      expect(liftedStoreState.currentStateIndex).toBe(4);\n      expect(currentComputedState.state).toBe(0);\n      expect(currentComputedState.error).toBeTruthy();\n\n      spy.mockReset();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should adjust currentStateIndex correctly when multiple actions are committed",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 648,
                "column": 85
            },
            "line": 648,
            "code": "    it('should adjust currentStateIndex correctly when multiple actions are committed', () => {\n      const spy = jest.spyOn(console, 'error');\n\n      const storeWithBug = createStore(\n        counterWithBug,\n        instrument(undefined, { maxAge: 3, shouldCatchErrors: true })\n      );\n      const liftedStoreWithBug = storeWithBug.liftedStore;\n\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n\n      // Auto-commit 2 actions by \"fixing\" reducer bug.\n      storeWithBug.replaceReducer(\n        counter as Reducer<number, CounterWithBugAction>\n      );\n      const liftedStore = liftedStoreWithBug as LiftedStore<\n        number,\n        CounterAction,\n        null\n      >;\n      const liftedStoreState = liftedStore.getState();\n      const currentComputedState =\n        liftedStoreState.computedStates[liftedStoreState.currentStateIndex];\n      expect(liftedStoreState.currentStateIndex).toBe(2);\n      expect(currentComputedState.state).toBe(-4);\n\n      spy.mockReset();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should not allow currentStateIndex to drop below 0",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 680,
                "column": 58
            },
            "line": 680,
            "code": "    it('should not allow currentStateIndex to drop below 0', () => {\n      const spy = jest.spyOn(console, 'error');\n\n      const storeWithBug = createStore(\n        counterWithBug,\n        instrument(undefined, { maxAge: 3, shouldCatchErrors: true })\n      );\n      const liftedStoreWithBug = storeWithBug.liftedStore;\n\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      storeWithBug.dispatch({ type: 'DECREMENT' });\n      liftedStoreWithBug.dispatch(ActionCreators.jumpToState(1));\n\n      // Auto-commit 2 actions by \"fixing\" reducer bug.\n      storeWithBug.replaceReducer(\n        counter as Reducer<number, CounterWithBugAction>\n      );\n      const liftedStore = liftedStoreWithBug as LiftedStore<\n        number,\n        CounterAction,\n        null\n      >;\n      const liftedStoreState = liftedStore.getState();\n      const currentComputedState =\n        liftedStoreState.computedStates[liftedStoreState.currentStateIndex];\n      expect(liftedStoreState.currentStateIndex).toBe(0);\n      expect(currentComputedState.state).toBe(-2);\n\n      spy.mockReset();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should use dynamic maxAge",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 713,
                "column": 33
            },
            "line": 713,
            "code": "    it('should use dynamic maxAge', () => {\n      let max = 3;\n      const getMaxAge = jest.fn().mockImplementation(() => max);\n      store = createStore(\n        counter,\n        instrument(undefined, { maxAge: getMaxAge })\n      );\n\n      expect(getMaxAge.mock.calls).toHaveLength(1);\n      store.dispatch({ type: 'INCREMENT' });\n      expect(getMaxAge.mock.calls).toHaveLength(2);\n      store.dispatch({ type: 'INCREMENT' });\n      expect(getMaxAge.mock.calls).toHaveLength(3);\n      let liftedStoreState = store.liftedStore.getState();\n\n      expect(getMaxAge.mock.calls[0][0].type).toContain('INIT');\n      expect(getMaxAge.mock.calls[0][1]).toBeUndefined();\n      expect(getMaxAge.mock.calls[1][0].type).toBe('PERFORM_ACTION');\n      expect(getMaxAge.mock.calls[1][1].nextActionId).toBe(1);\n      expect(getMaxAge.mock.calls[1][1].stagedActionIds).toEqual([0]);\n      expect(getMaxAge.mock.calls[2][1].nextActionId).toBe(2);\n      expect(getMaxAge.mock.calls[2][1].stagedActionIds).toEqual([0, 1]);\n\n      expect(store.getState()).toBe(2);\n      expect(Object.keys(liftedStoreState.actionsById)).toHaveLength(3);\n      expect(liftedStoreState.committedState).toBeUndefined();\n      expect(liftedStoreState.stagedActionIds).toContain(1);\n\n      // Trigger auto-commit.\n      store.dispatch({ type: 'INCREMENT' });\n      liftedStoreState = store.liftedStore.getState();\n\n      expect(store.getState()).toBe(3);\n      expect(Object.keys(liftedStoreState.actionsById)).toHaveLength(3);\n      expect(liftedStoreState.stagedActionIds).not.toContain(1);\n      expect(liftedStoreState.computedStates[0].state).toBe(1);\n      expect(liftedStoreState.committedState).toBe(1);\n      expect(liftedStoreState.currentStateIndex).toBe(2);\n\n      max = 4;\n      store.dispatch({ type: 'INCREMENT' });\n      liftedStoreState = store.liftedStore.getState();\n\n      expect(store.getState()).toBe(4);\n      expect(Object.keys(liftedStoreState.actionsById)).toHaveLength(4);\n      expect(liftedStoreState.stagedActionIds).not.toContain(1);\n      expect(liftedStoreState.computedStates[0].state).toBe(1);\n      expect(liftedStoreState.committedState).toBe(1);\n      expect(liftedStoreState.currentStateIndex).toBe(3);\n\n      max = 3;\n      store.dispatch({ type: 'INCREMENT' });\n      liftedStoreState = store.liftedStore.getState();\n\n      expect(store.getState()).toBe(5);\n      expect(Object.keys(liftedStoreState.actionsById)).toHaveLength(3);\n      expect(liftedStoreState.stagedActionIds).not.toContain(1);\n      expect(liftedStoreState.computedStates[0].state).toBe(3);\n      expect(liftedStoreState.committedState).toBe(3);\n      expect(liftedStoreState.currentStateIndex).toBe(2);\n\n      store.dispatch({ type: 'INCREMENT' });\n      liftedStoreState = store.liftedStore.getState();\n\n      expect(store.getState()).toBe(6);\n      expect(Object.keys(liftedStoreState.actionsById)).toHaveLength(3);\n      expect(liftedStoreState.stagedActionIds).not.toContain(1);\n      expect(liftedStoreState.computedStates[0].state).toBe(4);\n      expect(liftedStoreState.committedState).toBe(4);\n      expect(liftedStoreState.currentStateIndex).toBe(2);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should throw error when maxAge < 2",
            "suites": [
                "instrument",
                "maxAge option"
            ],
            "updatePoint": {
                "line": 785,
                "column": 42
            },
            "line": 785,
            "code": "    it('should throw error when maxAge < 2', () => {\n      expect(() => {\n        createStore(counter, instrument(undefined, { maxAge: 1 }));\n      }).toThrow(/may not be less than 2/);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should not include stack trace",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 797,
                "column": 38
            },
            "line": 797,
            "code": "    it('should not include stack trace', () => {\n      monitoredStore = createStore(counter, instrument());\n      monitoredLiftedStore = monitoredStore.liftedStore;\n      monitoredStore.dispatch({ type: 'INCREMENT' });\n\n      exportedState = monitoredLiftedStore.getState();\n      expect(exportedState.actionsById[0].stack).toBeUndefined();\n      expect(exportedState.actionsById[1].stack).toBeUndefined();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should include stack trace",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 807,
                "column": 34
            },
            "line": 807,
            "code": "    it('should include stack trace', () => {\n      function fn1() {\n        monitoredStore = createStore(\n          counter,\n          instrument(undefined, { trace: true })\n        );\n        monitoredLiftedStore = monitoredStore.liftedStore;\n        monitoredStore.dispatch({ type: 'INCREMENT' });\n\n        exportedState = monitoredLiftedStore.getState();\n        expect(exportedState.actionsById[0].stack).toBeUndefined();\n        expect(typeof exportedState.actionsById[1].stack).toBe('string');\n        expect(exportedState.actionsById[1].stack).toMatch(/^Error/);\n        expect(exportedState.actionsById[1].stack).not.toMatch(/instrument.ts/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn1\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn2\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn3\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn4\\b/);\n        expect(exportedState.actionsById[1].stack).toContain(\n          'instrument.spec.ts'\n        );\n        expect(exportedState.actionsById[1].stack!.split('\\n')).toHaveLength(\n          10 + 1\n        ); // +1 is for `Error\\n`\n      }\n\n      function fn2() {\n        return fn1();\n      }\n\n      function fn3() {\n        return fn2();\n      }\n\n      function fn4() {\n        return fn3();\n      }\n\n      fn4();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should include only 3 frames for stack trace",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 848,
                "column": 52
            },
            "line": 848,
            "code": "    it('should include only 3 frames for stack trace', () => {\n      function fn1() {\n        monitoredStore = createStore(\n          counter,\n          instrument(undefined, { trace: true, traceLimit: 3 })\n        );\n        monitoredLiftedStore = monitoredStore.liftedStore;\n        monitoredStore.dispatch({ type: 'INCREMENT' });\n\n        exportedState = monitoredLiftedStore.getState();\n        expect(exportedState.actionsById[0].stack).toBeUndefined();\n        expect(typeof exportedState.actionsById[1].stack).toBe('string');\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn1\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn2\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn3\\b/);\n        expect(exportedState.actionsById[1].stack).not.toMatch(/\\bfn4\\b/);\n        expect(exportedState.actionsById[1].stack).toContain(\n          'instrument.spec.ts'\n        );\n        expect(exportedState.actionsById[1].stack!.split('\\n')).toHaveLength(\n          3 + 1\n        );\n      }\n\n      function fn2() {\n        return fn1();\n      }\n\n      function fn3() {\n        return fn2();\n      }\n\n      function fn4() {\n        return fn3();\n      }\n\n      fn4();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should force traceLimit value of 3 when Error.stackTraceLimit is 10",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 887,
                "column": 75
            },
            "line": 887,
            "code": "    it('should force traceLimit value of 3 when Error.stackTraceLimit is 10', () => {\n      const stackTraceLimit = Error.stackTraceLimit;\n      Error.stackTraceLimit = 10;\n\n      function fn1() {\n        monitoredStore = createStore(\n          counter,\n          instrument(undefined, { trace: true, traceLimit: 3 })\n        );\n        monitoredLiftedStore = monitoredStore.liftedStore;\n        monitoredStore.dispatch({ type: 'INCREMENT' });\n\n        exportedState = monitoredLiftedStore.getState();\n        expect(exportedState.actionsById[0].stack).toBeUndefined();\n        expect(typeof exportedState.actionsById[1].stack).toBe('string');\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn1\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn2\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn3\\b/);\n        expect(exportedState.actionsById[1].stack).not.toMatch(/\\bfn4\\b/);\n        expect(exportedState.actionsById[1].stack).toContain(\n          'instrument.spec.ts'\n        );\n        expect(exportedState.actionsById[1].stack!.split('\\n')).toHaveLength(\n          3 + 1\n        );\n      }\n\n      function fn2() {\n        return fn1();\n      }\n\n      function fn3() {\n        return fn2();\n      }\n\n      function fn4() {\n        return fn3();\n      }\n\n      fn4();\n      Error.stackTraceLimit = stackTraceLimit;\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should force traceLimit value of 5 even when Error.stackTraceLimit is 2",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 930,
                "column": 79
            },
            "line": 930,
            "code": "    it('should force traceLimit value of 5 even when Error.stackTraceLimit is 2', () => {\n      const stackTraceLimit = Error.stackTraceLimit;\n      Error.stackTraceLimit = 2;\n      monitoredStore = createStore(\n        counter,\n        instrument(undefined, { trace: true, traceLimit: 5 })\n      );\n      monitoredLiftedStore = monitoredStore.liftedStore;\n      monitoredStore.dispatch({ type: 'INCREMENT' });\n      Error.stackTraceLimit = stackTraceLimit;\n\n      exportedState = monitoredLiftedStore.getState();\n      expect(exportedState.actionsById[0].stack).toBeUndefined();\n      expect(typeof exportedState.actionsById[1].stack).toBe('string');\n      expect(exportedState.actionsById[1].stack).toMatch(/^Error/);\n      expect(exportedState.actionsById[1].stack).toContain(\n        'instrument.spec.ts'\n      );\n      expect(exportedState.actionsById[1].stack!.split('\\n')).toHaveLength(\n        5 + 1\n      );\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should force default limit of 10 even when Error.stackTraceLimit is 3",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 953,
                "column": 77
            },
            "line": 953,
            "code": "    it('should force default limit of 10 even when Error.stackTraceLimit is 3', () => {\n      const stackTraceLimit = Error.stackTraceLimit;\n      Error.stackTraceLimit = 3;\n\n      function fn1() {\n        monitoredStore = createStore(\n          counter,\n          instrument(undefined, { trace: true })\n        );\n        monitoredLiftedStore = monitoredStore.liftedStore;\n        monitoredStore.dispatch({ type: 'INCREMENT' });\n        Error.stackTraceLimit = stackTraceLimit;\n\n        exportedState = monitoredLiftedStore.getState();\n        expect(exportedState.actionsById[0].stack).toBeUndefined();\n        expect(typeof exportedState.actionsById[1].stack).toBe('string');\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn1\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn2\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn3\\b/);\n        expect(exportedState.actionsById[1].stack).toMatch(/\\bfn4\\b/);\n        expect(exportedState.actionsById[1].stack).toContain(\n          'instrument.spec.ts'\n        );\n        expect(exportedState.actionsById[1].stack!.split('\\n')).toHaveLength(\n          10 + 1\n        );\n      }\n\n      function fn2() {\n        return fn1();\n      }\n\n      function fn3() {\n        return fn2();\n      }\n\n      function fn4() {\n        return fn3();\n      }\n\n      fn4();\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should include 3 extra frames when Error.captureStackTrace not suported",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 996,
                "column": 79
            },
            "line": 996,
            "code": "    it('should include 3 extra frames when Error.captureStackTrace not suported', () => {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const captureStackTrace = Error.captureStackTrace;\n      Error.captureStackTrace = undefined as unknown as () => unknown;\n      monitoredStore = createStore(\n        counter,\n        instrument(undefined, { trace: true, traceLimit: 5 })\n      );\n      monitoredLiftedStore = monitoredStore.liftedStore;\n      monitoredStore.dispatch({ type: 'INCREMENT' });\n      Error.captureStackTrace = captureStackTrace;\n\n      exportedState = monitoredLiftedStore.getState();\n      expect(exportedState.actionsById[0].stack).toBeUndefined();\n      expect(typeof exportedState.actionsById[1].stack).toBe('string');\n      expect(exportedState.actionsById[1].stack).toMatch(/^Error/);\n      expect(exportedState.actionsById[1].stack).toContain('instrument.ts');\n      expect(exportedState.actionsById[1].stack).toContain(\n        'instrument.spec.ts'\n      );\n      expect(exportedState.actionsById[1].stack!.split('\\n')).toHaveLength(\n        5 + 3 + 1\n      );\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should get stack trace from a function",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 1021,
                "column": 46
            },
            "line": 1021,
            "code": "    it('should get stack trace from a function', () => {\n      const traceFn = () => new Error().stack;\n      monitoredStore = createStore(\n        counter,\n        instrument(undefined, { trace: traceFn })\n      );\n      monitoredLiftedStore = monitoredStore.liftedStore;\n      monitoredStore.dispatch({ type: 'INCREMENT' });\n\n      exportedState = monitoredLiftedStore.getState();\n      expect(exportedState.actionsById[0].stack).toBeUndefined();\n      expect(typeof exportedState.actionsById[1].stack).toBe('string');\n      expect(exportedState.actionsById[1].stack).toContain(\n        'at Object.performAction'\n      );\n      expect(exportedState.actionsById[1].stack).toContain('instrument.ts');\n      expect(exportedState.actionsById[1].stack).toContain(\n        'instrument.spec.ts'\n      );\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should get stack trace inside setTimeout using a function",
            "suites": [
                "instrument",
                "trace option"
            ],
            "updatePoint": {
                "line": 1042,
                "column": 65
            },
            "line": 1042,
            "code": "    it('should get stack trace inside setTimeout using a function', () =>\n      new Promise<void>((done) => {\n        const stack = new Error().stack;\n        setTimeout(() => {\n          const traceFn = () => stack! + new Error().stack!;\n          monitoredStore = createStore(\n            counter,\n            instrument(undefined, { trace: traceFn })\n          );\n          monitoredLiftedStore = monitoredStore.liftedStore;\n          monitoredStore.dispatch({ type: 'INCREMENT' });\n\n          exportedState = monitoredLiftedStore.getState();\n          expect(exportedState.actionsById[0].stack).toBeUndefined();\n          expect(typeof exportedState.actionsById[1].stack).toBe('string');\n          expect(exportedState.actionsById[1].stack).toContain(\n            'at Object.performAction'\n          );\n          expect(exportedState.actionsById[1].stack).toContain('instrument.ts');\n          expect(exportedState.actionsById[1].stack).toContain(\n            'instrument.spec.ts'\n          );\n          done();\n        });\n      }));",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should replay all the steps when a state is imported",
            "suites": [
                "instrument",
                "Import State"
            ],
            "updatePoint": {
                "line": 1085,
                "column": 60
            },
            "line": 1085,
            "code": "    it('should replay all the steps when a state is imported', () => {\n      const importMonitoredStore = createStore(counter, instrument());\n      const importMonitoredLiftedStore = importMonitoredStore.liftedStore;\n\n      importMonitoredLiftedStore.dispatch(\n        ActionCreators.importState(exportedState)\n      );\n      expect(importMonitoredLiftedStore.getState()).toEqual(exportedState);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should replace the existing action log with the one imported",
            "suites": [
                "instrument",
                "Import State"
            ],
            "updatePoint": {
                "line": 1095,
                "column": 68
            },
            "line": 1095,
            "code": "    it('should replace the existing action log with the one imported', () => {\n      const importMonitoredStore = createStore(counter, instrument());\n      const importMonitoredLiftedStore = importMonitoredStore.liftedStore;\n\n      importMonitoredStore.dispatch({ type: 'DECREMENT' });\n      importMonitoredStore.dispatch({ type: 'DECREMENT' });\n\n      importMonitoredLiftedStore.dispatch(\n        ActionCreators.importState(exportedState)\n      );\n      expect(importMonitoredLiftedStore.getState()).toEqual(exportedState);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should allow for state to be imported without replaying actions",
            "suites": [
                "instrument",
                "Import State"
            ],
            "updatePoint": {
                "line": 1108,
                "column": 71
            },
            "line": 1108,
            "code": "    it('should allow for state to be imported without replaying actions', () => {\n      const importMonitoredStore = createStore(counter, instrument());\n      const importMonitoredLiftedStore = importMonitoredStore.liftedStore;\n\n      const noComputedExportedState = Object.assign({}, exportedState);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      delete noComputedExportedState.computedStates;\n\n      importMonitoredLiftedStore.dispatch(\n        ActionCreators.importState(noComputedExportedState, true)\n      );\n\n      const expectedImportedState = Object.assign({}, noComputedExportedState, {\n        computedStates: undefined,\n      });\n      expect(importMonitoredLiftedStore.getState()).toEqual(\n        expectedImportedState\n      );\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should include stack trace",
            "suites": [
                "instrument",
                "Import State"
            ],
            "updatePoint": {
                "line": 1129,
                "column": 34
            },
            "line": 1129,
            "code": "    it('should include stack trace', () => {\n      const importMonitoredStore = createStore(\n        counter,\n        instrument(undefined, { trace: true })\n      );\n      const importMonitoredLiftedStore = importMonitoredStore.liftedStore;\n\n      importMonitoredStore.dispatch({ type: 'DECREMENT' });\n      importMonitoredStore.dispatch({ type: 'DECREMENT' });\n\n      const oldState = importMonitoredLiftedStore.getState();\n      expect(oldState.actionsById[0].stack).toBeUndefined();\n      expect(typeof oldState.actionsById[1].stack).toBe('string');\n\n      importMonitoredLiftedStore.dispatch(ActionCreators.importState(oldState));\n      expect(importMonitoredLiftedStore.getState()).toEqual(oldState);\n      expect(\n        importMonitoredLiftedStore.getState().actionsById[0].stack\n      ).toBeUndefined();\n      expect(importMonitoredLiftedStore.getState().actionsById[1]).toEqual(\n        oldState.actionsById[1]\n      );\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should replay all the steps when a state is imported",
            "suites": [
                "instrument",
                "Import Actions"
            ],
            "updatePoint": {
                "line": 1186,
                "column": 60
            },
            "line": 1186,
            "code": "    it('should replay all the steps when a state is imported', () => {\n      const importMonitoredStore = createStore(counter, instrument());\n      const importMonitoredLiftedStore = importMonitoredStore.liftedStore;\n\n      importMonitoredLiftedStore.dispatch(\n        ActionCreators.importState(savedActions)\n      );\n      expect(\n        filterStackAndTimestamps(importMonitoredLiftedStore.getState())\n      ).toEqual(exportedState);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should replace the existing action log with the one imported",
            "suites": [
                "instrument",
                "Import Actions"
            ],
            "updatePoint": {
                "line": 1198,
                "column": 68
            },
            "line": 1198,
            "code": "    it('should replace the existing action log with the one imported', () => {\n      const importMonitoredStore = createStore(counter, instrument());\n      const importMonitoredLiftedStore = importMonitoredStore.liftedStore;\n\n      importMonitoredStore.dispatch({ type: 'DECREMENT' });\n      importMonitoredStore.dispatch({ type: 'DECREMENT' });\n\n      importMonitoredLiftedStore.dispatch(\n        ActionCreators.importState(savedActions)\n      );\n      expect(\n        filterStackAndTimestamps(importMonitoredLiftedStore.getState())\n      ).toEqual(exportedState);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should include stack trace",
            "suites": [
                "instrument",
                "Import Actions"
            ],
            "updatePoint": {
                "line": 1213,
                "column": 34
            },
            "line": 1213,
            "code": "    it('should include stack trace', () => {\n      const importMonitoredStore = createStore(\n        counter,\n        instrument(undefined, { trace: true })\n      );\n      const importMonitoredLiftedStore = importMonitoredStore.liftedStore;\n\n      importMonitoredStore.dispatch({ type: 'DECREMENT' });\n      importMonitoredStore.dispatch({ type: 'DECREMENT' });\n\n      importMonitoredLiftedStore.dispatch(\n        ActionCreators.importState(savedActions)\n      );\n      expect(\n        importMonitoredLiftedStore.getState().actionsById[0].stack\n      ).toBeUndefined();\n      expect(\n        typeof importMonitoredLiftedStore.getState().actionsById[1].stack\n      ).toBe('string');\n      expect(\n        filterStackAndTimestamps(importMonitoredLiftedStore.getState())\n      ).toEqual(exportedState);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should lock",
            "suites": [
                "instrument",
                "Lock Changes"
            ],
            "updatePoint": {
                "line": 1239,
                "column": 19
            },
            "line": 1239,
            "code": "    it('should lock', () => {\n      store.dispatch({ type: 'INCREMENT' });\n      store.liftedStore.dispatch({ type: 'LOCK_CHANGES', status: true });\n      expect(store.liftedStore.getState().isLocked).toBe(true);\n      expect(store.liftedStore.getState().nextActionId).toBe(2);\n      expect(store.getState()).toBe(1);\n\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(2);\n      expect(store.getState()).toBe(1);\n\n      liftedStore.dispatch(ActionCreators.toggleAction(1));\n      expect(store.getState()).toBe(0);\n      liftedStore.dispatch(ActionCreators.toggleAction(1));\n      expect(store.getState()).toBe(1);\n\n      store.liftedStore.dispatch({ type: 'LOCK_CHANGES', status: false });\n      expect(store.liftedStore.getState().isLocked).toBe(false);\n      expect(store.liftedStore.getState().nextActionId).toBe(2);\n\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(3);\n      expect(store.getState()).toBe(2);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should start locked",
            "suites": [
                "instrument",
                "Lock Changes"
            ],
            "updatePoint": {
                "line": 1263,
                "column": 27
            },
            "line": 1263,
            "code": "    it('should start locked', () => {\n      store = createStore(\n        counter,\n        instrument(undefined, { shouldStartLocked: true })\n      );\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().isLocked).toBe(true);\n      expect(store.liftedStore.getState().nextActionId).toBe(1);\n      expect(store.getState()).toBe(0);\n\n      const savedActions = [\n        { type: 'INCREMENT' },\n        { type: 'INCREMENT' },\n      ] as const;\n      store.liftedStore.dispatch(\n        ActionCreators.importState<number, CounterAction, null>(savedActions)\n      );\n      expect(store.liftedStore.getState().nextActionId).toBe(3);\n      expect(store.getState()).toBe(2);\n\n      store.liftedStore.dispatch({ type: 'LOCK_CHANGES', status: false });\n      expect(store.liftedStore.getState().isLocked).toBe(false);\n\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(4);\n      expect(store.getState()).toBe(3);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should pause",
            "suites": [
                "instrument",
                "Pause recording"
            ],
            "updatePoint": {
                "line": 1293,
                "column": 20
            },
            "line": 1293,
            "code": "    it('should pause', () => {\n      expect(store.liftedStore.getState().isPaused).toBe(false);\n      store.dispatch({ type: 'INCREMENT' });\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(3);\n      expect(store.getState()).toBe(2);\n\n      store.liftedStore.dispatch(ActionCreators.pauseRecording(true));\n      expect(store.liftedStore.getState().isPaused).toBe(true);\n      expect(store.liftedStore.getState().nextActionId).toBe(1);\n      expect(store.liftedStore.getState().actionsById[0].action).toEqual({\n        type: '@@INIT',\n      });\n      expect(store.getState()).toBe(2);\n\n      store.dispatch({ type: 'INCREMENT' });\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(1);\n      expect(store.liftedStore.getState().actionsById[0].action).toEqual({\n        type: '@@INIT',\n      });\n      expect(store.getState()).toBe(4);\n\n      store.liftedStore.dispatch(ActionCreators.pauseRecording(false));\n      expect(store.liftedStore.getState().isPaused).toBe(false);\n\n      store.dispatch({ type: 'INCREMENT' });\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(3);\n      expect(store.liftedStore.getState().actionsById[2].action).toEqual({\n        type: 'INCREMENT',\n      });\n      expect(store.getState()).toBe(6);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "should maintain the history while paused",
            "suites": [
                "instrument",
                "Pause recording"
            ],
            "updatePoint": {
                "line": 1327,
                "column": 48
            },
            "line": 1327,
            "code": "    it('should maintain the history while paused', () => {\n      store = createStore(\n        counter,\n        instrument(undefined, { pauseActionType: '@@PAUSED' })\n      );\n      store.dispatch({ type: 'INCREMENT' });\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.getState()).toBe(2);\n      expect(store.liftedStore.getState().nextActionId).toBe(3);\n      expect(store.liftedStore.getState().isPaused).toBe(false);\n\n      store.liftedStore.dispatch(ActionCreators.pauseRecording(true));\n      expect(store.liftedStore.getState().isPaused).toBe(true);\n      expect(store.liftedStore.getState().nextActionId).toBe(4);\n      expect(store.getState()).toBe(2);\n\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(4);\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(4);\n      expect(store.getState()).toBe(4);\n\n      store.liftedStore.dispatch(ActionCreators.pauseRecording(false));\n      expect(store.liftedStore.getState().isPaused).toBe(false);\n      expect(store.liftedStore.getState().nextActionId).toBe(1);\n      expect(store.getState()).toBe(4);\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(2);\n      expect(store.getState()).toBe(5);\n\n      store.liftedStore.dispatch(ActionCreators.commit());\n      store.liftedStore.dispatch(ActionCreators.pauseRecording(true));\n      store.dispatch({ type: 'INCREMENT' });\n      expect(store.liftedStore.getState().nextActionId).toBe(1);\n      expect(store.getState()).toBe(6);\n    });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "throws if reducer is not a function",
            "suites": [
                "instrument",
                "Pause recording"
            ],
            "updatePoint": {
                "line": 1365,
                "column": 41
            },
            "line": 1365,
            "code": "  it('throws if reducer is not a function', () => {\n    expect(() =>\n      createStore(undefined as unknown as Reducer, instrument())\n    ).toThrow('Expected the reducer to be a function.');\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "warns if the reducer is not a function but has a default field that is",
            "suites": [
                "instrument",
                "Pause recording"
            ],
            "updatePoint": {
                "line": 1371,
                "column": 76
            },
            "line": 1371,
            "code": "  it('warns if the reducer is not a function but has a default field that is', () => {\n    expect(() =>\n      createStore(\n        {\n          default: () => {\n            // noop\n          },\n        } as unknown as Reducer,\n        instrument()\n      )\n    ).toThrow(\n      'Expected the reducer to be a function. ' +\n        'Instead got an object with a \"default\" field. ' +\n        'Did you pass a module instead of the default export? ' +\n        'Try passing require(...).default instead.'\n    );\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "throws if there are more than one instrument enhancer included",
            "suites": [
                "instrument",
                "Pause recording"
            ],
            "updatePoint": {
                "line": 1389,
                "column": 68
            },
            "line": 1389,
            "code": "  it('throws if there are more than one instrument enhancer included', () => {\n    expect(() => {\n      createStore(counter, compose(instrument(), instrument()));\n    }).toThrow(\n      'DevTools instrumentation should not be applied more than once. ' +\n        'Check your store configuration.'\n    );\n  });",
            "file": "instrument.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-instrument/test"
        },
        {
            "name": "increment should create increment action",
            "suites": [
                "actions"
            ],
            "updatePoint": {
                "line": 44,
                "column": 46
            },
            "line": 44,
            "code": "  it('increment should create increment action', () => {\n    expect(actions.increment()).toEqual({\n      type: actions.INCREMENT_COUNTER\n    });\n  });",
            "file": "actions/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "decrement should create decrement action",
            "suites": [
                "actions"
            ],
            "updatePoint": {
                "line": 49,
                "column": 46
            },
            "line": 49,
            "code": "  it('decrement should create decrement action', () => {\n    expect(actions.decrement()).toEqual({\n      type: actions.DECREMENT_COUNTER\n    });\n  });",
            "file": "actions/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "incrementIfOdd should create increment action",
            "suites": [
                "actions"
            ],
            "updatePoint": {
                "line": 54,
                "column": 51
            },
            "line": 54,
            "code": "  it('incrementIfOdd should create increment action', done => {\n    const expectedActions = [{\n      type: actions.INCREMENT_COUNTER\n    }];\n    const store = mockStore({\n      counter: 1\n    }, expectedActions, done);\n    store.dispatch(actions.incrementIfOdd());\n  });",
            "file": "actions/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "incrementIfOdd shouldnt create increment action if counter is even",
            "suites": [
                "actions"
            ],
            "updatePoint": {
                "line": 63,
                "column": 72
            },
            "line": 63,
            "code": "  it('incrementIfOdd shouldnt create increment action if counter is even', done => {\n    const expectedActions = [];\n    const store = mockStore({\n      counter: 2\n    }, expectedActions);\n    store.dispatch(actions.incrementIfOdd());\n    done();\n  });",
            "file": "actions/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "incrementAsync should create increment action",
            "suites": [
                "actions"
            ],
            "updatePoint": {
                "line": 71,
                "column": 51
            },
            "line": 71,
            "code": "  it('incrementAsync should create increment action', done => {\n    const expectedActions = [{\n      type: actions.INCREMENT_COUNTER\n    }];\n    const store = mockStore({\n      counter: 0\n    }, expectedActions, done);\n    store.dispatch(actions.incrementAsync(100));\n  });",
            "file": "actions/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should display count",
            "suites": [
                "Counter component"
            ],
            "updatePoint": {
                "line": 27,
                "column": 26
            },
            "line": 27,
            "code": "  it('should display count', () => {\n    const {\n      p\n    } = setup();\n    expect(p.textContent).toMatch(/^Clicked: 1 times/);\n  });",
            "file": "components/Counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "first button should call increment",
            "suites": [
                "Counter component"
            ],
            "updatePoint": {
                "line": 33,
                "column": 40
            },
            "line": 33,
            "code": "  it('first button should call increment', () => {\n    const {\n      buttons,\n      actions\n    } = setup();\n    TestUtils.Simulate.click(buttons[0]);\n    expect(actions.increment).toHaveBeenCalled();\n  });",
            "file": "components/Counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "second button should call decrement",
            "suites": [
                "Counter component"
            ],
            "updatePoint": {
                "line": 41,
                "column": 41
            },
            "line": 41,
            "code": "  it('second button should call decrement', () => {\n    const {\n      buttons,\n      actions\n    } = setup();\n    TestUtils.Simulate.click(buttons[1]);\n    expect(actions.decrement).toHaveBeenCalled();\n  });",
            "file": "components/Counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "third button should call incrementIfOdd",
            "suites": [
                "Counter component"
            ],
            "updatePoint": {
                "line": 49,
                "column": 45
            },
            "line": 49,
            "code": "  it('third button should call incrementIfOdd', () => {\n    const {\n      buttons,\n      actions\n    } = setup();\n    TestUtils.Simulate.click(buttons[2]);\n    expect(actions.incrementIfOdd).toHaveBeenCalled();\n  });",
            "file": "components/Counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "fourth button should call incrementAsync",
            "suites": [
                "Counter component"
            ],
            "updatePoint": {
                "line": 57,
                "column": 46
            },
            "line": 57,
            "code": "  it('fourth button should call incrementAsync', () => {\n    const {\n      buttons,\n      actions\n    } = setup();\n    TestUtils.Simulate.click(buttons[3]);\n    expect(actions.incrementAsync).toHaveBeenCalled();\n  });",
            "file": "components/Counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should display initial count",
            "suites": [
                "containers",
                "App"
            ],
            "updatePoint": {
                "line": 22,
                "column": 36
            },
            "line": 22,
            "code": "    it('should display initial count', () => {\n      const {\n        p\n      } = setup();\n      expect(p.textContent).toMatch(/^Clicked: 0 times/);\n    });",
            "file": "containers/App.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should display updated count after increment button click",
            "suites": [
                "containers",
                "App"
            ],
            "updatePoint": {
                "line": 28,
                "column": 65
            },
            "line": 28,
            "code": "    it('should display updated count after increment button click', () => {\n      const {\n        buttons,\n        p\n      } = setup();\n      TestUtils.Simulate.click(buttons[0]);\n      expect(p.textContent).toMatch(/^Clicked: 1 times/);\n    });",
            "file": "containers/App.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should display updated count after decrement button click",
            "suites": [
                "containers",
                "App"
            ],
            "updatePoint": {
                "line": 36,
                "column": 65
            },
            "line": 36,
            "code": "    it('should display updated count after decrement button click', () => {\n      const {\n        buttons,\n        p\n      } = setup();\n      TestUtils.Simulate.click(buttons[1]);\n      expect(p.textContent).toMatch(/^Clicked: -1 times/);\n    });",
            "file": "containers/App.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "shouldnt change if even and if odd button clicked",
            "suites": [
                "containers",
                "App"
            ],
            "updatePoint": {
                "line": 44,
                "column": 57
            },
            "line": 44,
            "code": "    it('shouldnt change if even and if odd button clicked', () => {\n      const {\n        buttons,\n        p\n      } = setup();\n      TestUtils.Simulate.click(buttons[2]);\n      expect(p.textContent).toMatch(/^Clicked: 0 times/);\n    });",
            "file": "containers/App.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should change if odd and if odd button clicked",
            "suites": [
                "containers",
                "App"
            ],
            "updatePoint": {
                "line": 52,
                "column": 54
            },
            "line": 52,
            "code": "    it('should change if odd and if odd button clicked', () => {\n      const {\n        buttons,\n        p\n      } = setup({\n        counter: 1\n      });\n      TestUtils.Simulate.click(buttons[2]);\n      expect(p.textContent).toMatch(/^Clicked: 2 times/);\n    });",
            "file": "containers/App.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should handle initial state",
            "suites": [
                "reducers",
                "counter"
            ],
            "updatePoint": {
                "line": 6,
                "column": 35
            },
            "line": 6,
            "code": "    it('should handle initial state', () => {\n      expect(counter(undefined, {})).toBe(0);\n    });",
            "file": "reducers/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should handle INCREMENT_COUNTER",
            "suites": [
                "reducers",
                "counter"
            ],
            "updatePoint": {
                "line": 9,
                "column": 39
            },
            "line": 9,
            "code": "    it('should handle INCREMENT_COUNTER', () => {\n      expect(counter(1, {\n        type: INCREMENT_COUNTER\n      })).toBe(2);\n    });",
            "file": "reducers/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should handle DECREMENT_COUNTER",
            "suites": [
                "reducers",
                "counter"
            ],
            "updatePoint": {
                "line": 14,
                "column": 39
            },
            "line": 14,
            "code": "    it('should handle DECREMENT_COUNTER', () => {\n      expect(counter(1, {\n        type: DECREMENT_COUNTER\n      })).toBe(0);\n    });",
            "file": "reducers/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "should handle unknown action type",
            "suites": [
                "reducers",
                "counter"
            ],
            "updatePoint": {
                "line": 19,
                "column": 41
            },
            "line": 19,
            "code": "    it('should handle unknown action type', () => {\n      expect(counter(1, {\n        type: 'unknown'\n      })).toBe(1);\n    });",
            "file": "reducers/counter.spec.js",
            "skipped": false,
            "dir": "packages/redux-devtools-remote/examples/counter/test"
        },
        {
            "name": "mark",
            "suites": [
                "Helpers"
            ],
            "updatePoint": {
                "line": 4,
                "column": 10
            },
            "line": 4,
            "code": "  it('mark', function () {\n    expect(mark({ testData: 'test' }, 'testType')).toMatchSnapshot();\n    expect(\n      mark({ testData: 'test' }, 'testType', 'toString')\n    ).toMatchSnapshot();\n  });",
            "file": "helpers.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-serialize/test"
        },
        {
            "name": "extract",
            "suites": [
                "Helpers"
            ],
            "updatePoint": {
                "line": 11,
                "column": 13
            },
            "line": 11,
            "code": "  it('extract', function () {\n    expect(extract({ testData: 'test' }, 'testType')).toMatchSnapshot();\n  });",
            "file": "helpers.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-serialize/test"
        },
        {
            "name": "refer",
            "suites": [
                "Helpers"
            ],
            "updatePoint": {
                "line": 15,
                "column": 11
            },
            "line": 15,
            "code": "  it('refer', function () {\n    const TestClass = function (data: unknown) {\n      return data;\n    };\n    const testInstance = new (TestClass as any)({\n      testData: 'test',\n    }) as unknown;\n    expect(\n      refer(testInstance, 'testType', false, [TestClass as any])\n    ).toMatchSnapshot();\n  });",
            "file": "helpers.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-serialize/test"
        },
        {
            "name": "stringify",
            "suites": [
                "Immutable",
                "Record"
            ],
            "updatePoint": {
                "line": 50,
                "column": 17
            },
            "line": 50,
            "code": "    it('stringify', function () {\n      stringifiedRecord = stringify(myRecord);\n      expect(stringifiedRecord).toMatchSnapshot();\n    });",
            "file": "immutable.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-serialize/test"
        },
        {
            "name": "parse",
            "suites": [
                "Immutable",
                "Record"
            ],
            "updatePoint": {
                "line": 55,
                "column": 13
            },
            "line": 55,
            "code": "    it('parse', function () {\n      expect(parse(stringifiedRecord)).toEqual(myRecord);\n    });",
            "file": "immutable.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-serialize/test"
        },
        {
            "name": "stringify",
            "suites": [
                "Immutable",
                "Nested"
            ],
            "updatePoint": {
                "line": 72,
                "column": 17
            },
            "line": 72,
            "code": "    it('stringify', function () {\n      stringifiedNested = stringify(nestedData);\n      expect(stringifiedNested).toMatchSnapshot();\n    });",
            "file": "immutable.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-serialize/test"
        },
        {
            "name": "parse",
            "suites": [
                "Immutable",
                "Nested"
            ],
            "updatePoint": {
                "line": 77,
                "column": 13
            },
            "line": 77,
            "code": "    it('parse', function () {\n      expect(parse(stringifiedNested)).toEqual(nestedData);\n    });",
            "file": "immutable.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-serialize/test"
        },
        {
            "name": "serializes and deserializes",
            "suites": [
                "Immutable",
                "With references"
            ],
            "updatePoint": {
                "line": 82,
                "column": 35
            },
            "line": 82,
            "code": "    it('serializes and deserializes', function () {\n      const sharedValue: unknown[] = [];\n      const record = Immutable.Record({\n        prop: sharedValue,\n      });\n\n      const refs = [record];\n\n      const obj = Immutable.Map({\n        fst: new record(),\n        scnd: new record(),\n      });\n\n      const serialize = Serialize(Immutable, refs);\n      const serialized = serialize.stringify(obj);\n      const parsed = JSON.parse(serialized);\n\n      const fstProp = parsed.data.fst.data.prop;\n      const scndProp = parsed.data.scnd.data.prop;\n\n      expect(fstProp).toEqual(scndProp);\n      expect(Array.isArray(obj.get('fst')!.get('prop'))).toBe(true);\n    });",
            "file": "immutable.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools-serialize/test"
        },
        {
            "name": "should persist state",
            "suites": [
                "persistState"
            ],
            "updatePoint": {
                "line": 50,
                "column": 26
            },
            "line": 50,
            "code": "  it('should persist state', () => {\n    const store = createStore(\n      reducer,\n      compose(instrument(), persistState('id'))\n    );\n    expect(store.getState()).toBe(0);\n\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(2);\n\n    const store2 = createStore(\n      reducer,\n      compose(instrument(), persistState('id'))\n    );\n    expect(store2.getState()).toBe(2);\n  });",
            "file": "persistState.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools/test"
        },
        {
            "name": "should not persist state if no session id",
            "suites": [
                "persistState"
            ],
            "updatePoint": {
                "line": 68,
                "column": 47
            },
            "line": 68,
            "code": "  it('should not persist state if no session id', () => {\n    const store = createStore(reducer, compose(instrument(), persistState()));\n    expect(store.getState()).toBe(0);\n\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(2);\n\n    const store2 = createStore(reducer, compose(instrument(), persistState()));\n    expect(store2.getState()).toBe(0);\n  });",
            "file": "persistState.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools/test"
        },
        {
            "name": "should run with a custom state deserializer",
            "suites": [
                "persistState"
            ],
            "updatePoint": {
                "line": 80,
                "column": 49
            },
            "line": 80,
            "code": "  it('should run with a custom state deserializer', () => {\n    const oneLess = (state: number | undefined) =>\n      state === undefined ? -1 : state - 1;\n    const store = createStore(\n      reducer,\n      compose(instrument(), persistState('id', oneLess))\n    );\n    expect(store.getState()).toBe(0);\n\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(2);\n\n    const store2 = createStore(\n      reducer,\n      compose(instrument(), persistState('id', oneLess))\n    );\n    expect(store2.getState()).toBe(1);\n  });",
            "file": "persistState.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools/test"
        },
        {
            "name": "should run with a custom action deserializer",
            "suites": [
                "persistState"
            ],
            "updatePoint": {
                "line": 100,
                "column": 50
            },
            "line": 100,
            "code": "  it('should run with a custom action deserializer', () => {\n    const incToDec = (action: Action) =>\n      action.type === 'INCREMENT' ? ({ type: 'DECREMENT' } as const) : action;\n    const store = createStore(\n      reducer,\n      compose(instrument(), persistState('id', undefined, incToDec))\n    );\n    expect(store.getState()).toBe(0);\n\n    store.dispatch({ type: 'INCREMENT' });\n    store.dispatch({ type: 'INCREMENT' });\n    expect(store.getState()).toBe(2);\n\n    const store2 = createStore(\n      reducer,\n      compose(instrument(), persistState('id', undefined, incToDec))\n    );\n    expect(store2.getState()).toBe(-2);\n  });",
            "file": "persistState.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools/test"
        },
        {
            "name": "should warn if read from localStorage fails",
            "suites": [
                "persistState"
            ],
            "updatePoint": {
                "line": 120,
                "column": 49
            },
            "line": 120,
            "code": "  it('should warn if read from localStorage fails', () => {\n    const spy = jest.spyOn(console, 'warn').mockImplementation(() => {\n      // noop\n    });\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    delete global.localStorage.getItem;\n    createStore(reducer, compose(instrument(), persistState('id')));\n\n    expect(spy.mock.calls[0]).toContain(\n      'Could not read debug session from localStorage:'\n    );\n\n    spy.mockReset();\n  });",
            "file": "persistState.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools/test"
        },
        {
            "name": "should warn if write to localStorage fails",
            "suites": [
                "persistState"
            ],
            "updatePoint": {
                "line": 136,
                "column": 48
            },
            "line": 136,
            "code": "  it('should warn if write to localStorage fails', () => {\n    const spy = jest.spyOn(console, 'warn').mockImplementation(() => {\n      // noop\n    });\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    delete global.localStorage.setItem;\n    const store = createStore(\n      reducer,\n      compose(instrument(), persistState('id'))\n    );\n\n    store.dispatch({ type: 'INCREMENT' });\n    expect(spy.mock.calls[0]).toContain(\n      'Could not write debug session to localStorage:'\n    );\n\n    spy.mockReset();\n  });",
            "file": "persistState.spec.ts",
            "skipped": false,
            "dir": "packages/redux-devtools/test"
        }
    ],
    "badge": "reduxjs__redux-devtools.svg"
}