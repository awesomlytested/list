{"repo":"appsmithorg/appsmith","url":"https://github.com/appsmithorg/appsmith","branch":"release","configs":[{"package":"appsmith","lang":"js","dir":"app/client/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"1.Create Get echo Api call","suites":["Content Management System App"],"updatePoint":{"line":16,"column":32,"index":565},"line":16,"code":"  it(\"1.Create Get echo Api call\", function () {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      _.apiPage.CreateAndFillApi(datasourceFormData[\"echoApiUrl\"], \"get_data\");\n      // creating get request using echo\n      _.apiPage.EnterHeader(\"info\", '[{\"due\":\"2021-11-23\",\"assignee\":\"Dan.Wyman@hotmail.com\",\"title\":\"Recusan\",\"description\":\"Ut quisquam eum beatae facere eos aliquam laborum ea.\",\"id\":\"1\"},{\"due\":\"2021-11-23\",\"assignee\":\"Dashawn_Maggio30@gmail.com\",\"title\":\"Dignissimos eaque\",\"description\":\"Consequatur corrupti et possimus en.\",\"id\":\"2\"},{\"due\":\"2021-11-24\",\"assignee\":\"Curt50@gmail.com\",\"title\":\"Voluptas explicabo\",\"description\":\"Quia ratione optio et maiores.\",\"id\":\"3\"},{\"due\":\"2021-11-23\",\"assignee\":\"Shanna63@hotmail.com\",\"title\":\"Aut omnis.\",\"description\":\"Neque rerum numquam veniam voluptatum id. Aut daut.\",\"id\":\"4\"}]');\n      // entering the data in header\n      _.apiPage.RunAPI();\n      _.apiPage.ResponseStatusCheck(\"200\");\n    });\n  });","file":"e2e/Regression/Apps/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create Post echo Api call","suites":["Content Management System App"],"updatePoint":{"line":26,"column":34,"index":1552},"line":26,"code":"  it(\"2. Create Post echo Api call\", function () {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      _.apiPage.CreateAndFillApi(datasourceFormData[\"echoApiUrl\"], \"send_mail\", 10000, \"POST\");\n      _.apiPage.SelectPaneTab(\"Body\");\n      _.apiPage.SelectSubTab(\"JSON\");\n      // creating post request using echo\n      _.dataSources.EnterQuery('{\"to\":\"{{to_input.text}}\",\"subject\":\"{{subject.text}}\",\"content\":\"{{content.text}}\"}');\n      _.apiPage.RunAPI();\n      _.apiPage.ResponseStatusCheck(\"200\");\n    });\n  });","file":"e2e/Regression/Apps/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create Delete echo Api call","suites":["Content Management System App"],"updatePoint":{"line":37,"column":36,"index":2083},"line":37,"code":"  it(\"3. Create Delete echo Api call\", function () {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      _.apiPage.CreateAndFillApi(datasourceFormData[\"echoApiUrl\"], \"delete_proposal\", 10000, \"DELETE\");\n      _.apiPage.SelectPaneTab(\"Body\");\n      _.apiPage.SelectSubTab(\"JSON\");\n      // creating post request using echo\n      _.dataSources.EnterQuery('{\"title\":\"{{title.text}}\",\"due\":\"{{due.text}}\",\"assignee\":\"{{assignee.text}}\"}');\n      _.apiPage.RunAPI();\n      _.apiPage.ResponseStatusCheck(\"200\");\n    });\n  });","file":"e2e/Regression/Apps/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Send mail and verify post request body","suites":["Content Management System App"],"updatePoint":{"line":48,"column":47,"index":2627},"line":48,"code":"  it(\"4. Send mail and verify post request body\", function () {\n    // navigating to canvas\n    cy.xpath(appPage.pagebutton).click();\n    cy.get(appPage.submitButton).should(\"be.visible\");\n    cy.xpath(\"//span[text()='3']\").click({\n      force: true\n    });\n    cy.get(appPage.mailButton).closest(\"div\").click();\n    // verifying the mail to send and asserting post call's response\n    cy.xpath(appPage.sendMailText).should(\"be.visible\");\n    cy.xpath(\"//input[@value='Curt50@gmail.com']\").should(\"be.visible\");\n    cy.xpath(appPage.subjectField).type(\"Test\");\n    cy.get(appPage.contentField).last().find(\"textarea\").type(\"Task completed\", {\n      force: true\n    });\n    cy.get(appPage.confirmButton).closest(\"div\").click({\n      force: true\n    });\n    cy.get(appPage.closeButton).closest(\"div\").click({\n      force: true\n    });\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    });\n    //cy.xpath(appPage.datasourcesbutton).click({ force: true });\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    cy.xpath(appPage.postApi).click({\n      force: true\n    });\n    cy.ResponseCheck(\"Test\");\n    // cy.ResponseCheck(\"Task completed\");\n    cy.ResponseCheck(\"Curt50@gmail.com\");\n  });","file":"e2e/Regression/Apps/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Delete proposal and verify delete request body","suites":["Content Management System App"],"updatePoint":{"line":81,"column":55,"index":3833},"line":81,"code":"  it(\"5. Delete proposal and verify delete request body\", function () {\n    // navigating back to canvas\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    });\n    cy.get(appPage.submitButton).closest(\"div\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='Dan.Wyman@hotmail.com']\").click({\n      force: true\n    });\n    // deleting the proposal and asserting delete call's response\n    cy.xpath(appPage.deleteButton).click({\n      force: true\n    });\n    cy.xpath(appPage.deleteTaskText).should(\"be.visible\");\n    cy.get(appPage.confirmButton).closest(\"div\").click({\n      force: true\n    });\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    });\n    //cy.xpath(appPage.datasourcesbutton).click({ force: true });\n    cy.xpath(appPage.deleteApi).click({\n      force: true\n    });\n    cy.ResponseCheck(\"Dan.Wyman@hotmail.com\");\n    cy.ResponseCheck(\"Recusan\");\n  });","file":"e2e/Regression/Apps/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Connect app to git, verify data binding in edit and deploy mode","suites":["Content Management System App"],"updatePoint":{"line":108,"column":72,"index":4743},"line":108,"code":"  it(\"6. Connect app to git, verify data binding in edit and deploy mode\", () => {\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    _.gitSync.CreateNConnectToGit(repoName);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n    });\n    cy.latestDeployPreview();\n    cy.wait(2000);\n    cy.xpath(\"//span[text()='Curt50@gmail.com']\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(appPage.mailButton).closest(\"div\").click();\n    cy.xpath(appPage.sendMailText).should(\"be.visible\");\n    cy.xpath(appPage.subjectField).type(\"Test\");\n    cy.get(appPage.contentField).last().find(\"textarea\").type(\"Task completed\", {\n      force: true\n    });\n    cy.get(appPage.confirmButton).closest(\"div\").click({\n      force: true\n    });\n    cy.get(appPage.closeButton).closest(\"div\").click({\n      force: true\n    });\n    _.deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/Apps/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Import application from json and validate data on pageload","suites":["Import, Export and Fork application and validate data binding"],"updatePoint":{"line":8,"column":67,"index":438},"line":8,"code":"  it(\"1. Import application from json and validate data on pageload\", function () {\n    // import application\n    homePage.NavigateToHome();\n    cy.get(homePageLocatores.optionsIcon).first().click();\n    cy.get(homePageLocatores.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(homePageLocatores.workspaceImportAppModal).should(\"be.visible\");\n    cy.xpath(homePageLocatores.uploadLogo).selectFile(\"cypress/fixtures/forkedApp.json\", {\n      force: true\n    });\n    cy.get(homePageLocatores.importAppProgressWrapper).should(\"be.visible\");\n    cy.wait(\"@importNewApplication\").then(interception => {\n      cy.wait(100);\n      // should check reconnect modal openning\n      const {\n        isPartialImport\n      } = interception.response.body.data;\n      if (isPartialImport) {\n        // should reconnect button\n        dataSources.ReconnectDataSource(\"mockdata\", \"PostgreSQL\");\n        homePage.AssertNCloseImport();\n        cy.wait(2000);\n      } else {\n        cy.get(homePageLocatores.toastMessage).should(\"contain\", \"Application imported successfully\");\n      }\n      agHelper.GenerateUUID();\n      cy.get(\"@guid\").then(uid => {\n        appName = `app${uid}`;\n        cy.get(homePageLocatores.applicationName).click({\n          force: true\n        });\n        cy.get(homePageLocatores.applicationEditMenu).eq(1).click({\n          force: true\n        });\n        cy.wait(2000);\n        cy.get(homePageLocatores.applicationName + \" input\").type(appName, {\n          force: true\n        });\n        agHelper.ClickOutside();\n        cy.wait(\"@updateApplication\").its(\"response.body.responseMeta.status\").should(\"eq\", 200);\n        cy.wait(2000);\n        cy.wrap(appName).as(\"appname\");\n      });\n      cy.wait(3000);\n      // validating data binding for the imported application\n      cy.xpath(\"//input[@value='Submit']\").should(\"be.visible\");\n      cy.xpath(\"//span[text()='schema_name']\").should(\"be.visible\");\n      cy.xpath(\"//span[text()='id']\").should(\"be.visible\");\n      cy.xpath(\"//span[text()='title']\").should(\"be.visible\");\n      cy.xpath(\"//span[text()='due']\").should(\"be.visible\");\n    });\n  });","file":"e2e/Regression/Apps/ImportExportForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Fork application and validate data binding for the widgets","suites":["Import, Export and Fork application and validate data binding"],"updatePoint":{"line":61,"column":67,"index":2569},"line":61,"code":"  it(\"2. Fork application and validate data binding for the widgets\", function () {\n    // fork application\n    homePage.NavigateToHome();\n    cy.get(homePageLocatores.searchInput).type(`${appName}`);\n    cy.wait(3000);\n    // cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePageLocatores.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePageLocatores.forkAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePageLocatores.forkAppWorkspaceButton).click({\n      force: true\n    });\n    cy.wait(4000);\n    // validating data binding for the forked application\n    cy.xpath(\"//input[@value='Submit']\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='schema_name']\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='id']\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='title']\").should(\"be.visible\");\n    cy.xpath(\"//span[text()='due']\").should(\"be.visible\");\n  });","file":"e2e/Regression/Apps/ImportExportForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Export and import application and validate data binding for the widgets","suites":["Import, Export and Fork application and validate data binding"],"updatePoint":{"line":84,"column":80,"index":3514},"line":84,"code":"  it(\"3. Export and import application and validate data binding for the widgets\", function () {\n    homePage.NavigateToHome();\n    cy.get(homePageLocatores.searchInput).clear().type(`${appName}`);\n    cy.wait(2000);\n    //cy.get(homePageLocatores.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePageLocatores.appMoreIcon).first().click({\n      force: true\n    });\n    // export application\n    cy.get(homePageLocatores.exportAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePageLocatores.searchInput).clear();\n    cy.get(`a[id=t--export-app-link]`).then(anchor => {\n      const url = anchor.prop(\"href\");\n      cy.request(url).then(({\n        body,\n        headers\n      }) => {\n        expect(headers).to.have.property(\"content-type\", \"application/json\");\n        expect(headers).to.have.property(\"content-disposition\").that.includes(\"attachment;\").and.includes(`filename*=UTF-8''${appName}.json`);\n        cy.writeFile(\"cypress/fixtures/exportedApp.json\", body, \"utf-8\");\n        agHelper.AssertContains(\"Successfully exported\");\n        agHelper.WaitUntilAllToastsDisappear();\n        agHelper.GenerateUUID();\n        cy.get(\"@guid\").then(uid => {\n          newWorkspaceName = uid;\n          homePage.CreateNewWorkspace(newWorkspaceName);\n          cy.get(homePageLocatores.workspaceImportAppOption).click({\n            force: true\n          });\n          cy.get(homePageLocatores.workspaceImportAppModal).should(\"be.visible\");\n          cy.xpath(homePageLocatores.uploadLogo).selectFile(\"cypress/fixtures/exportedApp.json\", {\n            force: true\n          });\n          if (!Cypress.env(\"AIRGAPPED\")) {\n            agHelper.ValidateNetworkStatus(\"@getReleaseItems\");\n          } else {\n            cy.wait(2000);\n          }\n\n          // import exported application in new workspace\n          // cy.get(homePageLocatores.workspaceImportAppButton).click({ force: true });\n          cy.wait(\"@importNewApplication\").then(interception => {\n            const {\n              isPartialImport\n            } = interception.response.body.data;\n            if (isPartialImport) {\n              // should reconnect button\n              agHelper.AssertElementVisible(dataSources._testDs); //Making sure modal is fully loaded\n              cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n                force: true\n              });\n              cy.wait(2000);\n            } else {\n              cy.get(homePageLocatores.toastMessage).should(\"contain\", \"Application imported successfully\");\n            }\n            const importedApp = interception.response.body.data.application;\n            const appSlug = importedApp.slug;\n            cy.wait(\"@getPagesForCreateApp\").then(interception => {\n              const pages = interception.response.body.data.pages;\n              let defaultPage = pages.find(eachPage => !!eachPage.isDefault);\n              // validating data binding for imported application\n              cy.xpath(\"//input[@value='Submit']\").should(\"be.visible\");\n              cy.xpath(\"//span[text()='schema_name']\").should(\"be.visible\");\n              // cy.xpath(\"//span[text()='information_schema']\").should(\n              //   \"be.visible\",\n              // );\n              cy.xpath(\"//span[text()='id']\").should(\"be.visible\");\n              cy.xpath(\"//span[text()='title']\").should(\"be.visible\");\n              cy.xpath(\"//span[text()='due']\").should(\"be.visible\");\n              cy.url().should(\"include\", `/${appSlug}/${defaultPage.slug}-${defaultPage.id}/edit`);\n            });\n          });\n        });\n      });\n    });\n  });","file":"e2e/Regression/Apps/ImportExportForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create MongoDB datasource and add Insert, Find, Update and Delete queries","suites":["Shopping cart App"],"updatePoint":{"line":21,"column":82,"index":915},"line":21,"code":"  it(\"1. Create MongoDB datasource and add Insert, Find, Update and Delete queries\", function () {\n    _.dataSources.CreateDataSource(\"Mongo\");\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    // GetProduct query to fetch all products\n    cy.get(queryLocators.createQuery).last().click();\n    cy.get(queryLocators.queryNameField).type(\"GetProduct\");\n    cy.get(\".CodeEditorTarget\").first().type(\"Productnames\");\n    cy.assertPageSave();\n    cy.get(appPage.dropdownChevronLeft).click();\n    // EditProducts query to update the cart\n    cy.get(queryLocators.createQuery).last().click();\n    cy.get(queryLocators.queryNameField).type(\"EditProducts\");\n\n    // Clicking outside to trigger the save\n    cy.get(\"body\").click(0, 0);\n    cy.TargetDropdownAndSelectOption(formControls.commandDropdown, \"Update document(s)\");\n    cy.get(\".CodeEditorTarget\").first().type(\"Productnames\");\n    cy.get(\".CodeEditorTarget\").eq(1).type('{\"title\": \"{{Table1.selectedRow.title}}\"}', {\n      parseSpecialCharSequences: false\n    });\n    cy.get(\".CodeEditorTarget\").eq(2).type(`{\"title\" : \"{{title.text}}\",\n      \"description\" :\"{{description.text}}\",\n      \"price\" : {{price.text}},\n      \"quantity\":{{quantity.text}}`, {\n      parseSpecialCharSequences: false\n    });\n    cy.assertPageSave();\n    cy.get(appPage.dropdownChevronLeft).click();\n    // Add product query\n    cy.get(queryLocators.createQuery).last().click();\n    cy.wait(5000);\n    cy.get(queryLocators.queryNameField).type(\"AddProduct\");\n    // Clicking outside to trigger the save\n    cy.get(\"body\").click(0, 0);\n    cy.TargetDropdownAndSelectOption(formControls.commandDropdown, \"Insert document(s)\");\n    // cy.get(\"[data-testid='actionConfiguration.formData.command.data']\").click();\n    // cy.get(\".t--dropdown-option\")\n    //   .eq(1)\n    //   .click();\n    const documentText = [{\n      title: \"{{Title.text}}\",\n      description: \"{{Description.text}}\",\n      price: \"{{Price.text}}\",\n      quantity: \"{{Quantity.text}}\"\n    }];\n    cy.get(\".CodeEditorTarget\").first().type(\"Productnames\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(\".CodeEditorTarget\").eq(1).type(JSON.stringify(documentText), {\n      parseSpecialCharSequences: false\n    });\n    cy.assertPageSave();\n    cy.get(appPage.dropdownChevronLeft).click();\n    // delete product\n    cy.get(queryLocators.createQuery).last().click();\n    cy.wait(5000);\n    cy.get(queryLocators.queryNameField).type(\"DeleteProduct\");\n    // Clicking outside to trigger the save\n    cy.get(\"body\").click(0, 0);\n    cy.TargetDropdownAndSelectOption(formControls.commandDropdown, \"Delete document(s)\");\n    // cy.get(\"[data-testid='actionConfiguration.formData.command.data']\").click();\n    // cy.get(\".t--dropdown-option\")\n    //   .eq(3)\n    //   .click();\n    cy.get(\".CodeEditorTarget\").first().type(\"Productnames\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(\".CodeEditorTarget\").eq(1).type('{\"title\":\"{{Table1.selectedRow.title}}\"}', {\n      parseSpecialCharSequences: false\n    });\n    cy.assertPageSave();\n    cy.get(appPage.dropdownChevronLeft).click();\n    cy.get(\".t--back-button\").click();\n    _.deployMode.DeployApp(appPage.bookname);\n  });","file":"e2e/Regression/Apps/MongoDBShoppingCart_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"2. Perform CRUD operations and validate data","suites":["Shopping cart App"],"updatePoint":{"line":100,"column":50,"index":4202},"line":100,"code":"  it(\"2. Perform CRUD operations and validate data\", function () {\n    // Adding the books to the Add cart form\n    _.agHelper.GetNClick(appPage.bookname);\n    //Wait for element to be in DOM\n    _.agHelper.Sleep(3000);\n    _.agHelper.UpdateInput(appPage.bookname, \"Atomic habits\", true);\n    _.agHelper.UpdateInput(appPage.bookgenre, \"Self help\", true);\n    _.agHelper.UpdateInput(appPage.bookprice, 200, true);\n    _.agHelper.UpdateInput(appPage.bookquantity, 2, true);\n    _.agHelper.GetNClick(appPage.addButton, 0, true);\n    cy.wait(\"@postExecute\");\n    cy.wait(3000);\n    _.agHelper.UpdateInput(appPage.bookname, \"A man called ove\", true);\n    _.agHelper.UpdateInput(appPage.bookgenre, \"Fiction\", true);\n    _.agHelper.UpdateInput(appPage.bookprice, 100, true);\n    _.agHelper.UpdateInput(appPage.bookquantity, 1, true);\n    _.agHelper.GetNClick(appPage.addButton, 0, true);\n    cy.wait(\"@postExecute\");\n    // Deleting the book from the cart\n    cy.get(\".tableWrap\").children().within(() => {\n      _.agHelper.GetNClick(appPage.deleteButton, 1, false);\n      cy.wait(\"@postExecute\");\n      cy.wait(5000);\n\n      // validating that the book is deleted\n      cy.get(\"span:contains('Delete')\").parent(\"button\").should(\"have.length\", 1);\n    });\n    // Updating the book quantity from edit cart\n    _.agHelper.UpdateInput(appPage.editbookquantity, 3, true);\n    _.agHelper.GetNClick(appPage.editButton, 0, true);\n\n    //Wait for all post execute calls to finish\n    _.agHelper.Sleep(3000);\n    _.agHelper.ValidateNetworkExecutionSuccess(\"@postExecute\");\n    cy.get(\"@postExecute.all\").its(\"length\").should(\"be.above\", 8);\n    cy.get(\"@postExecute.last\").its(\"response.body\").then(user => {\n      expect(user.data.body[0].quantity).to.equal(\"3\");\n    });\n    // validating updated value in the cart\n    cy.get(\".selected-row\").children().eq(3).should(\"have.text\", \"3\");\n  });","file":"e2e/Regression/Apps/MongoDBShoppingCart_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"3. Connect the appplication to git and validate data in deploy mode and edit mode","suites":["Shopping cart App"],"updatePoint":{"line":141,"column":87,"index":6117},"line":141,"code":"  it(\"3. Connect the appplication to git and validate data in deploy mode and edit mode\", function () {\n    cy.get(\".t--back-to-editor\").click();\n    _.gitSync.CreateNConnectToGit(repoName);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n    });\n    cy.latestDeployPreview();\n    cy.wait(2000);\n    cy.get(\".selected-row\").children().eq(0).should(\"have.text\", \"A man called ove\");\n    _.deployMode.NavigateBacktoEditor();\n    cy.get(\".selected-row\").children().eq(0).should(\"have.text\", \"A man called ove\");\n    cy.wait(1000);\n  });","file":"e2e/Regression/Apps/MongoDBShoppingCart_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Create queries","suites":["PgAdmin Clone App"],"updatePoint":{"line":14,"column":23,"index":552},"line":14,"code":"  it(\"1. Create queries\", function () {\n    // writing query to get all schema\n    _.dataSources.CreateQueryAfterDSSaved(\"SELECT schema_name FROM information_schema.schemata;\", \"get_schema\");\n    // switching off Use Prepared Statement toggle\n    _.dataSources.ToggleUsePreparedStatement(false);\n    _.dataSources.RunQuery();\n\n    // writing query to get all the tables\n    _.dataSources.CreateQueryFromOverlay(datasourceName, `select * from pg_catalog.pg_tables where schemaname = {{schema_select.selectedOptionValue || \"public\"}};`, \"get_tables\", 2000);\n    _.dataSources.RunQuery();\n\n    // writing query to get all the columns\n    _.dataSources.CreateQueryFromOverlay(datasourceName, `SELECT column_name, data_type, table_name, ordinal_position, is_nullable FROM information_schema.COLUMNS`, \"get_columns\");\n    _.dataSources.RunQuery();\n\n    // writing query to get create table\n    _.dataSources.CreateQueryFromOverlay(datasourceName, `CREATE TABLE {{schema_select.selectedOptionValue}}.{{nt_name.text.replaceAll(\" \",\"_\")}}({{appsmith.store.nt_col.map((c)=> c.name.replaceAll(\" \",\"_\") + \" \" + c.dtype + (c.nnull ? \" NOT NULL \" : \"\") + (c.pkey ? \" PRIMARY KEY \" : \"\")).join(\" , \")}})`, \"create_table\");\n    _.dataSources.ToggleUsePreparedStatement(false);\n\n    // writing query to get drop table\n    _.dataSources.CreateQueryFromOverlay(datasourceName, `DROP TABLE {{schema_select.selectedOptionValue}}.{{nt_name.text.replaceAll(\" \",\"_\")}}({{appsmith.store.nt_col.map((c)=>c.name.replaceAll(\" \",\"_\") + \" \" + c.dtype + (c.nnull ? \" NOT NULL \" :  \"\") + (c.pkey ? \" PRIMARY KEY \" : \"\")).join(\" , \")}});`, \"drop_table\");\n  });","file":"e2e/Regression/Apps/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Add new table from app page, View and Delete table","suites":["PgAdmin Clone App"],"updatePoint":{"line":36,"column":59,"index":2216},"line":36,"code":"  it(\"2. Add new table from app page, View and Delete table\", function () {\n    _.deployMode.DeployApp();\n    // adding new table\n    cy.xpath(appPage.addNewtable).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.generateUUID().then(UUID => {\n      cy.xpath(appPage.addTablename).clear().type(`table${UUID}`);\n      tableName = `table${UUID}`;\n    });\n    // adding column to the table\n    cy.xpath(appPage.addColumn).click({\n      force: true\n    });\n    cy.xpath(appPage.columnNamefield).should(\"be.visible\");\n    cy.xpath(appPage.datatypefield).should(\"be.visible\");\n    _.agHelper.GetNClick(appPage.addColumnName);\n    _.agHelper.UpdateInput(appPage.addColumnName, \"ID\");\n    _.agHelper.SelectFromDropDown(\"Varchar\", \"\", 1);\n    // switching on the Primary Key toggle\n    cy.get(widgetsPage.switchWidgetInactive).first().click();\n    // switching on the Not Null toggle\n    cy.get(widgetsPage.switchWidgetInactive).last().click();\n    cy.xpath(appPage.submitButton).click({\n      force: true\n    });\n    cy.xpath(appPage.addColumn).should(\"be.visible\");\n    cy.wait(500);\n    cy.xpath(appPage.submitButton).first().click({\n      force: true\n    });\n    cy.xpath(appPage.closeButton).click({\n      force: true\n    });\n    cy.xpath(appPage.addNewtable).should(\"be.visible\");\n    // viewing the table's columns by clicking on view button\n    cy.xpath(appPage.viewButton).first().click({\n      force: true\n    });\n    // deleting the table through modal\n    cy.xpath(appPage.deleteButton).last().click({\n      force: true\n    });\n    cy.xpath(appPage.confirmButton).click({\n      force: true\n    });\n    cy.xpath(appPage.closeButton).click({\n      force: true\n    });\n  });","file":"e2e/Regression/Apps/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Testing promises with resetWidget, storeValue action and API call","suites":["JSEditor tests"],"updatePoint":{"line":9,"column":74,"index":411},"line":9,"code":"  it(\"1. Testing promises with resetWidget, storeValue action and API call\", () => {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      _.apiPage.CreateAndFillApi(datasourceFormData[\"mockApiUrl\"], \"TC1api\");\n      _.apiPage.RunAPI();\n      _.jsEditor.CreateJSObject(`export default {\n        myFun1: async () => { //comment\n          await this.clearStore()\t\t//clear store value before running the case\n          return resetWidget('Switch1')\n            .then(() => {\n              resetWidget('Select1')\n              resetWidget('Table1')\n              return this.myFun2() \t\t//return a toast message\n                .then(() => {\n                  storeValue('selected', Select1.selectedOptionValue)\n                  showAlert(appsmith.store.selected) }) }) \t\t//return a second toast message\n            .catch(() =>  {\n              resetWidget('RadioGroup1')\n              showAlert(\"Couldn't execute all the success call steps, hence now in the fail part\") })\n        },\n        myFun2: () => {\n          return TC1api.run()\n            .then (() => {return showAlert(\"Success running API query\")})\n            .catch (() => {return showAlert(\"Couldn't run API query\")})\n        },\n        clearStore: async () => { //function to clear store values\n          Object.keys(appsmith.store).forEach((eachKey) => {\n            storeValue(eachKey, 'undefined')\n            //return showAlert(eachKey)\n           })\n        }\n      }`, {\n        paste: true,\n        completeReplace: true,\n        toRun: false,\n        shouldCreateNewJSObj: true\n      });\n      _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n      cy.wait(2000);\n      // verify text in the text widget\n      cy.get(\".t--draggable-textwidget span\").eq(5).invoke(\"text\").then(text => {\n        expect(text).to.equal(\"Step 4: Value is Green and will default to undefined\");\n      });\n      // toggle off the switch\n      cy.get(\".t--switch-widget-active .bp3-control-indicator\").click({\n        force: true\n      });\n      cy.get(homePage.toastMessage).should(\"contain\", \"Switch widget has changed\");\n\n      // select an option from select widget\n      cy.get(\".bp3-button.select-button\").click({\n        force: true\n      });\n      cy.get(\".menu-item-text\").eq(2).click({\n        force: true\n      });\n      cy.wait(2000);\n      // verify text in the text widget\n      cy.get(\".t--draggable-textwidget span\").eq(5).invoke(\"text\").then(text => {\n        expect(text).to.equal(\"Step 4: Value is Red and will default to undefined\");\n      });\n      // move to page  2 on table widget\n      cy.get(commonlocators.tableNextPage).click();\n      cy.get(\".t--table-widget-page-input\").within(() => {\n        cy.get(\"input.bp3-input\").should(\"have.value\", \"2\");\n      });\n      cy.wait(3000);\n      // hit audio play button and trigger actions\n      /* cy.openPropertyPane(\"audiowidget\");\n      cy.get(widgetsPage.autoPlay).click({ force: true });\n      cy.wait(\"@postExecute\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n      );\n      cy.wait(1000)\n      // verify text is visible\n      cy.get(\".t--draggable-textwidget span\")\n      .eq(2)\n      .invoke(\"text\")\n      .then((text) => {\n       expect(text).to.equal(\"Step 4: Value is Green and will default to Green\");\n      });\n      cy.get(commonlocators.tableNextPage).click()\n      cy.get('.t--table-widget-page-input').within(()=>{\n       cy.get('input.bp3-input').should('have.value', '1')\n      })\n      cy.get(homePage.toastMessage).should(\n      \"contain\",\n      \"Success running API query\",\n      \"GREEN\",\n      ); */\n    });\n  });","file":"e2e/Regression/Apps/PromisesApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Testing dynamic widgets display using consecutive storeValue calls","suites":["JSEditor tests"],"line":104,"code":"  it.skip(\"2. Testing dynamic widgets display using consecutive storeValue calls\", () => {","file":"e2e/Regression/Apps/PromisesApp_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. should not show any fields with a blank JS field","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":3,"column":57,"index":177},"line":3,"code":"  it(\"1. should not show any fields with a blank JS field\", () => {\n    cy.fixture(\"promisesBtnDsl\").then(val => {\n      _.agHelper.AddDsl(val, _.locators._spanButton(\"Submit\"));\n    });\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", `{{}}`, true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.AssertElementAbsence(\".action\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. should show Api fields when Api1.run is entered","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":12,"column":56,"index":587},"line":12,"code":"  it(\"2. should show Api fields when Api1.run is entered\", () => {\n    _.apiPage.CreateApi(\"Api1\");\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", `{{Api1.run()}}`, true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"GETExecute a queryApi1.run\");\n    _.propPane.SelectActionByTitleAndValue(\"Execute a query\", \"Api1.run\");\n    _.agHelper.Sleep(200);\n    _.propPane.AssertSelectValue(\"Api1.run\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. should show Api fields when an Api with then/catch is entered","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":23,"column":70,"index":1186},"line":23,"code":"  it(\"3. should show Api fields when an Api with then/catch is entered\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", `{{Api1.run().then(() => {}).catch(() => {});}}`, true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"GETExecute a queryApi1.run\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. should show Api fields when an Api with then/catch is entered","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":29,"column":70,"index":1577},"line":29,"code":"  it(\"4. should show Api fields when an Api with then/catch is entered\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", `{{Api1.run().then(() => { showAlert(); }).catch(() => { showModal(); });}}`, true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"GETExecute a queryApi1.run+2\");\n    _.agHelper.GetNClick(_.propPane._actionCard);\n    _.agHelper.GetNClick(_.propPane._actionTreeCollapse);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCallbackTitle, \"On success\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Show alertAdd message\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCallbackTitle, \"On failure\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Show modalnone\", \"have.text\", 2);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. should show Api fields when an Api with then/catch is entered","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":41,"column":70,"index":2507},"line":41,"code":"  it(\"5. should show Api fields when an Api with then/catch is entered\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", `{{Api1.run().then(() => { showAlert('Hello world!', 'info'); storeValue('a', 18); }).catch(() => { showModal('Modal1'); });}}`, true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"GETExecute a queryApi1.run+3\");\n    _.agHelper.GetNClick(_.propPane._actionCard);\n    _.agHelper.GetNClick(_.propPane._actionTreeCollapse);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCallbackTitle, \"On success\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Show alertHello world!\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCallbackTitle, \"On failure\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Store valuea\", \"have.text\", 2);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Show modalModal1\", \"have.text\", 3);\n    _.agHelper.GetNClick(_.propPane._actionCard, 1);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"Hello world!\");\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"Info\");\n    _.agHelper.GetNClick(_.propPane._actionCard, 2);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"a{{18}}\");\n    _.agHelper.GetNClick(_.propPane._actionCard, 3);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"Select modal\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. should show Api related fields appropriately with platform functions with callbacks","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":61,"column":92,"index":4085},"line":61,"code":"  it(\"6. should show Api related fields appropriately with platform functions with callbacks\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", `{{Api1.run().then(() => {\n    appsmith.geolocation.getCurrentPosition(location => {\n    showAlert(location);\n    });\n  }).catch(() => {\n    setInterval(() => {\n      showAlert('hi');\n    }, 5000, '1');\n  });}}`, true, true);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"GETExecute a queryApi1.run+2\");\n    _.agHelper.GetNClick(_.propPane._actionCard);\n    _.agHelper.GetNClick(_.propPane._actionTreeCollapse);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCallbackTitle, \"On success\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCallbackTitle, \"On failure\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Set interval5000ms\", \"have.text\", 2);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. should show Api related fields appropriately with platform functions with catch callback","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":80,"column":97,"index":5077},"line":80,"code":"  it(\"7. should show Api related fields appropriately with platform functions with catch callback\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{Api1.run().catch(() => copyToClipboard('hi'))}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"GETExecute a queryApi1.run+1\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard);\n    _.agHelper.GetNClick(_.propPane._actionTreeCollapse);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCallbackTitle, \"On failure\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Copy to clipboardhi\", \"have.text\", 1);\n    _.agHelper.GetNClick(_.propPane._actionCard, 1);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"hi\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"8. should show Api related fields appropriately with platform functions with catch callback","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":92,"column":97,"index":5949},"line":92,"code":"  it(\"8. should show Api related fields appropriately with platform functions with catch callback\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{Api1.run().then(() => clearStore())}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"GETExecute a queryApi1.run+1\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard);\n    _.agHelper.GetNClick(_.propPane._actionTreeCollapse);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCallbackTitle, \"On success\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Clear store\", \"have.text\", 1);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"9. shows fields appropriately for JS Object functions with/without arguments","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":102,"column":82,"index":6665},"line":102,"code":"  it(\"9. shows fields appropriately for JS Object functions with/without arguments\", () => {\n    const JS_OBJECT_BODY = `export default {\n      funcWithoutArgsSync: () => {\n        console.log(\"hi\");\n      },\n      funcWithArgsSync: (a,b) => {\n        return a+b;\n      },\n      funcWithoutArgsAsync: async () => {\n        await console.log(\"hi\");\n      },\n      funcWithArgsAsync: async (a,b) => {\n        await console.log(a+b);\n      }\n    }`;\n    _.jsEditor.CreateJSObject(JS_OBJECT_BODY, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{JSObject1.funcWithoutArgsSync()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject1.funcWithoutArgsSync()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._actionPopupTextLabel, 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{JSObject1.funcWithArgsSync(18,26)}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject1.funcWithArgsSync(18, 26)\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"{{18}}{{26}}\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"a\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"b\", \"have.text\", 1);\n    _.propPane.EnterJSContext(\"onClick\", \"{{JSObject1.funcWithoutArgsAsync()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject1.funcWithoutArgsAsync()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._actionPopupTextLabel, 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{JSObject1.funcWithArgsAsync()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject1.funcWithArgsAsync()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"a\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"b\", \"have.text\", 1);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"10. shows fields appropriately for JS Object functions with/without arguments and then/catch blocks","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":149,"column":105,"index":9323},"line":149,"code":"  it(\"10. shows fields appropriately for JS Object functions with/without arguments and then/catch blocks\", () => {\n    const JS_OBJECT_BODY = `export default {\n      promiseFuncNoArgs: () => {\n        return new Promise((resolve) => {\n            resolve(\"hi\");\n          });\n      },\n       promiseFuncWithArgs: (a) => {\n        return new Promise((resolve, reject) => {\n            if (a === \"hi\") {\n              resolve(\"hi\");\n            } else {\n              reject(\"bye\");\n            }\n          });\n      },\n    }`;\n    _.jsEditor.CreateJSObject(JS_OBJECT_BODY, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", '{{JSObject2.promiseFuncNoArgs().then(() => showAlert(\"then\"))}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject2.promiseFuncNoArgs()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._actionPopupTextLabel, 0);\n    _.propPane.EnterJSContext(\"onClick\", '{{JSObject2.promiseFuncNoArgs().catch(() => showAlert(\"catch\"))}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject2.promiseFuncNoArgs()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._actionPopupTextLabel, 0);\n    _.propPane.EnterJSContext(\"onClick\", '{{JSObject2.promiseFuncNoArgs().then(() => showAlert(\"then\")).catch(() => showAlert(\"catch\"));}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject2.promiseFuncNoArgs()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._actionPopupTextLabel, 0);\n    _.propPane.EnterJSContext(\"onClick\", '{{JSObject2.promiseFuncNoArgs().catch(() => showAlert(\"catch\")).then(() => showAlert(\"then\"));}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject2.promiseFuncNoArgs()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._actionPopupTextLabel, 0);\n    _.propPane.EnterJSContext(\"onClick\", '{{JSObject2.promiseFuncWithArgs(\"hi\").then(() => showAlert(\"hi\")).catch(() => showAlert(\"bye\"));}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, 'Execute a JS functionJSObject2.promiseFuncWithArgs(\"hi\")', \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"a\", \"have.text\", 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"hi\");\n    _.propPane.EnterJSContext(\"onClick\", '{{JSObject2.promiseFuncWithArgs().catch(() => showAlert(\"catch\"));}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject2.promiseFuncWithArgs()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"a\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", '{{JSObject2.promiseFuncWithArgs().then(() => showAlert(\"hi\")).catch(() => showAlert(\"bye\"));}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Execute a JS functionJSObject2.promiseFuncWithArgs()\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"a\", \"have.text\", 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"11. shows fields for navigate to from js to non-js mode","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":211,"column":61,"index":13342},"line":211,"code":"  it(\"11. shows fields for navigate to from js to non-js mode\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{navigateTo()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Navigate toSelect page\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementVisible(_.propPane._navigateToType(\"Page name\"));\n    _.agHelper.GetNAssertElementText(_.propPane._actionOpenDropdownSelectPage, \"Select page\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Query params\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._sameWindowDropdownOption, \"Same window\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{navigateTo('Page1', {a:1}, 'NEW_WINDOW')}}\", true, true);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Navigate toPage1\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementVisible(_.propPane._navigateToType(\"Page name\"));\n    _.agHelper.GetNAssertElementText(_.propPane._actionOpenDropdownSelectPage, \"Page1\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Query params\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._sameWindowDropdownOption, \"New window\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{navigateTo('google.com', {a:1}, 'SAME_WINDOW')}}\", true, true);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Navigate togoogle.com\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementVisible(_.propPane._navigateToType(\"URL\"));\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Enter URL\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Query params\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._sameWindowDropdownOption, \"Same window\", \"have.text\", 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"12. shows fields for show alert from js to non-js mode","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":239,"column":60,"index":15599},"line":239,"code":"  it(\"12. shows fields for show alert from js to non-js mode\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{showAlert()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Show alertAdd message\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Message\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._dropdownSelectType, \"Select type\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{showAlert('hello', 'info')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Show alerthello\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Message\", \"have.text\", 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"hello\");\n    _.agHelper.GetNAssertElementText(_.propPane._dropdownSelectType, \"Info\", \"have.text\", 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"13. shows fields for show modal from js to non-js mode","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":256,"column":60,"index":16821},"line":256,"code":"  it(\"13. shows fields for show modal from js to non-js mode\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.DragDropWidgetNVerify(\"modalwidget\", 50, 50);\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{showModal()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Show modalnone\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionOpenDropdownSelectModal, \"Select modal\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{showModal('Modal1')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Show modalModal1\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionOpenDropdownSelectModal, \"Modal1\", \"have.text\", 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"14. shows fields for remove modal from js to non-js mode","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":271,"column":62,"index":17853},"line":271,"code":"  it(\"14. shows fields for remove modal from js to non-js mode\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{closeModal()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Close modalnone\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionOpenDropdownSelectModal, \"Select modal\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{closeModal('Modal1')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Close modalModal1\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionOpenDropdownSelectModal, \"Modal1\", \"have.text\", 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"15. should shows appropriate fields for store value","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":285,"column":57,"index":18817},"line":285,"code":"  it(\"15. should shows appropriate fields for store value\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{storeValue()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Store valueAdd key\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Key\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Value\", \"have.text\", 1);\n    _.propPane.EnterJSContext(\"onClick\", \"{{storeValue('a', '')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Store valuea\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{storeValue('a', 1)}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Store valuea\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"a{{1}}\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{storeValue('', 1)}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Store valueAdd key\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"16. shows fields for remove value appropriately","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":308,"column":53,"index":20369},"line":308,"code":"  it(\"16. shows fields for remove value appropriately\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{removeValue()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Remove valueAdd key\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Key\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{removeValue('a')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Remove valuea\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"a\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"17. shows fields appropriately for the download function","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":322,"column":62,"index":21279},"line":322,"code":"  it(\"17. shows fields appropriately for the download function\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{download()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"DownloadAdd data to download\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Data to download\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"File name with extension\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewLabel, \"Type\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"Select file type (optional)\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{download('a', '', '')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"DownloadAdd data to download\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{download('a', 'b', '')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Downloadb\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{download('a', 'b', 'image/png')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Downloadb\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"ab\");\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"PNG\", \"have.text\", 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"18. shows fields for copyToClipboard appropriately","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":346,"column":56,"index":23075},"line":346,"code":"  it(\"18. shows fields for copyToClipboard appropriately\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{copyToClipboard()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Copy to clipboardAdd text\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Text to be copied to clipboard\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{copyToClipboard('a')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Copy to clipboarda\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"a\");\n    _.agHelper.TypeText(_.propPane._actionSelectorFieldByLabel(\"Text to be copied to clipboard\"), \"line1{enter}line2{enter}line3\", 0, true);\n    _.jsEditor.EnableJSContext(\"onClick\");\n    _.propPane.ValidatePropertyFieldValue(\"onClick\", `{{copyToClipboard('line1\\\\nline2\\\\nline3a');}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"19. shows fields for reset widget appropriately","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":363,"column":53,"index":24310},"line":363,"code":"  it(\"19. shows fields for reset widget appropriately\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{resetWidget()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Reset widgetSelect widget\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewLabel, \"Widget\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewLabel, \"Reset Children\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"Select widget\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"true\", \"have.text\", 1);\n    _.propPane.EnterJSContext(\"onClick\", '{{resetWidget(\"Modal1\", false)}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Reset widgetModal1\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"Modal1\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"false\", \"have.text\", 1);\n    _.propPane.EnterJSContext(\"onClick\", '{{resetWidget(\"Modal1\")}}', true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Reset widgetModal1\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"Modal1\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"true\", \"have.text\", 1);\n    _.propPane.EnterJSContext(\"onClick\", \"{{resetWidget('', false)}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Reset widgetSelect widget\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"Select widget\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._selectorViewButton, \"false\", \"have.text\", 1);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"20. should show fields appropriately for setinterval","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":393,"column":58,"index":26619},"line":393,"code":"  it(\"20. should show fields appropriately for setinterval\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{setInterval()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Set intervalms\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Callback function\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Delay (ms)\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Id\", \"have.text\", 2);\n    _.propPane.EnterJSContext(\"onClick\", \"{{setInterval(() => {}, 200, '')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Set interval200ms\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{setInterval(() => {showAlert('hi')}, 200, 'id1')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Set interval200ms\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"21. should show fields appropriately for clearInterval","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":412,"column":60,"index":27988},"line":412,"code":"  it(\"21. should show fields appropriately for clearInterval\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{clearInterval()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Clear intervalAdd Id\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Id\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", \"{{clearInterval('Id1')}}\", true, true);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Clear intervalId1\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"Id1\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"22. should show no fields for clear store","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":426,"column":47,"index":28894},"line":426,"code":"  it(\"22. should show no fields for clear store\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{clearStore()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Clear store\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._textView);\n    _.agHelper.AssertElementAbsence(_.propPane._selectorView);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"23. should show no fields for watch geolocation position","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":436,"column":62,"index":29482},"line":436,"code":"  it(\"23. should show no fields for watch geolocation position\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{appsmith.geolocation.watchPosition()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Watch geolocation\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._textView);\n    _.agHelper.AssertElementAbsence(_.propPane._selectorView);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"24. should show no fields for stop watching geolocation position","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":446,"column":70,"index":30108},"line":446,"code":"  it(\"24. should show no fields for stop watching geolocation position\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{appsmith.geolocation.clearWatch()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Stop watching geolocation\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.AssertElementAbsence(_.propPane._textView);\n    _.agHelper.AssertElementAbsence(_.propPane._selectorView);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"25. should show appropriate fields for get geolocation","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":456,"column":60,"index":30729},"line":456,"code":"  it(\"25. should show appropriate fields for get geolocation\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{appsmith.geolocation.getCurrentPosition()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Get geolocationAdd callback\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Callback function\", \"have.text\", 0);\n    _.propPane.EnterJSContext(\"onClick\", `{{appsmith.geolocation.getCurrentPosition((location) => {\n      // add code here\n    });}}`, true, true);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Callback function\", \"have.text\", 0);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"26. should show post message fields appropriately","suites":["JS to non-JS mode in Action Selector"],"updatePoint":{"line":471,"column":55,"index":31696},"line":471,"code":"  it(\"26. should show post message fields appropriately\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{postWindowMessage()}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Post messageAdd message\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Message\", \"have.text\", 0);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Target iframe\", \"have.text\", 1);\n    _.agHelper.GetNAssertElementText(_.propPane._actionPopupTextLabel, \"Allowed origins\", \"have.text\", 2);\n    _.propPane.EnterJSContext(\"onClick\", \"{{postWindowMessage('hello', 'window', '*')}}\", true, false);\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNAssertElementText(_.propPane._actionCard, \"Post messagehello\", \"have.text\", 0);\n    _.agHelper.GetNClick(_.propPane._actionCard, 0);\n    _.agHelper.ValidateCodeEditorContent(_.propPane._textView, \"hellowindow*\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/ActionSelector_JsToNonJSMode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug 23345","suites":["Delete No Action card without any error"],"updatePoint":{"line":4,"column":18,"index":203},"line":4,"code":"  it(\"1. Bug 23345\", () => {\n    _.entityExplorer.DragDropWidgetNVerify(WIDGET.BUTTON, 200, 200);\n    _.propPane.AddAction(\"onClick\");\n    _.agHelper.AssertElementVisible(_.propPane._actionCardByTitle(\"No action\"));\n    _.agHelper.GetNClick(_.propPane._actionSelectorDelete);\n    _.agHelper.AssertElementAbsence(_.propPane._actionCardByTitle(\"No action\"));\n  });","file":"e2e/Regression/ClientSide/ActionExecution/Bug23345_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug 22180","suites":["Disable JS toggle when Action selector code is not parsable"],"updatePoint":{"line":16,"column":18,"index":530},"line":16,"code":"  it(\"1. Bug 22180\", () => {\n    const codeSnippet = `{{[\"UI Building\", \"Actions\", \"JS\", \"Autocomplete\", \"Widgets\", \"Pages\", \"Property Pane\", \"API Pane\", \"Query Editor\", \"Datasources\", \"ACL\", \"Login / Signup\", \"Telemetry\", \"Deployment\"].forEach((label, index) => {\n      Api1.run((res, param) => {\n        let CritLen = 0;\n        let HighLen = 0;\n        let LowLen = 0;\n        let NoPriLen = 0;\n        res.map(issue => {\n          let noPriVal = 1;\n          issue.labels.map(label => {\n            if (label.name === \"Critical\") {\n              CritLen++;\n              noPriVal = 0;\n            } else if (label.name === \"High\") {\n              HighLen++;\n              noPriVal = 0;\n            } else if (label.name === \"Low\") {\n              LowLen++;\n              noPriVal = 0;\n            }\n          });\n          NoPriLen += noPriVal;\n        });\n        storeValue(\"Bug-\" + param.index + \"\", {\n          x: param.label,\n          critY: CritLen,\n          highY: HighLen,\n          lowY: LowLen,\n          noPriY: NoPriLen\n        });\n      }, undefined, {\n        label: label,\n        index: index\n      });\n      Query1.run((res, param) => {\n        let CritLen = 0;\n        let HighLen = 0;\n        let LowLen = 0;\n        let NoPriLen = 0;\n        res.map(issue => {\n          let noPriVal = 1;\n          issue.labels.map(label => {\n            if (label.name === \"Critical\") {\n              CritLen++;\n              noPriVal = 0;\n            } else if (label.name === \"High\") {\n              HighLen++;\n              noPriVal = 0;\n            } else if (label.name === \"Low\") {\n              LowLen++;\n              noPriVal = 0;\n            }\n          });\n          NoPriLen += noPriVal;\n        });\n        storeValue(\"Feature-\" + param.index, {\n          x: param.label,\n          critY: CritLen,\n          highY: HighLen,\n          lowY: LowLen,\n          noPriY: NoPriLen\n        });\n      }, undefined, {\n        label: label,\n        index: index\n      });\n    });}}`;\n    propPane.EnterJSContext(\"onClick\", codeSnippet);\n    agHelper.Sleep(200);\n    propPane.AssertJSToggleDisabled(\"onClick\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/disableJSToggle_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"should disable JS toggle when the code can't be parsed into UI","suites":["Disable JS toggle when Action selector code is not parsable"],"updatePoint":{"line":87,"column":68,"index":2710},"line":87,"code":"  it(\"should disable JS toggle when the code can't be parsed into UI\", () => {\n    // Bug 22505\n    let codeSnippet = `{{\n      showAlert('hi')\n      setInterval(() => {console.log('this is an interval')} , 7000, 'id')\n      showAlert('hello')\n        .then(() => {return Api1.data})\n      .then(() => clearInterval('id'))\n    }}`;\n    propPane.EnterJSContext(\"onClick\", codeSnippet);\n    agHelper.Sleep(200);\n    propPane.AssertJSToggleDisabled(\"onClick\");\n\n    //Bug 22180\n    codeSnippet = \"{{ (function(){ return Promise.race([ Api1.run({ name: 1 }), Api1.run({ name: 2 }) ]).then((res) => { showAlert(Winner: ${res.args.name}) }); })() }}\";\n    propPane.EnterJSContext(\"onClick\", codeSnippet);\n    agHelper.Sleep(200);\n    propPane.AssertJSToggleDisabled(\"onClick\");\n\n    // When Api1 is returned\n    codeSnippet = `{{Api1.run().then(() => {\n      Api1;\n    })}}`;\n    propPane.EnterJSContext(\"onClick\", codeSnippet);\n    agHelper.Sleep(200);\n    propPane.AssertJSToggleDisabled(\"onClick\");\n\n    // When Api1.data is returned\n    codeSnippet = `{{Api1.run().then(() => {\n      return Api1.data;\n    })}}`;\n    propPane.EnterJSContext(\"onClick\", codeSnippet);\n    agHelper.Sleep(200);\n    propPane.AssertJSToggleDisabled(\"onClick\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/disableJSToggle_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Call the api with & without error handling","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":16,"column":51,"index":719},"line":16,"code":"  it(\"1. Call the api with & without error handling\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    cy.get(widgetsPage.toggleOnClick).invoke(\"attr\", \"class\").then(classes => {\n      if (classes.includes(\"is-active\")) {\n        cy.get(widgetsPage.toggleOnClick).click();\n      }\n    });\n    cy.get(widgetsPage.toggleOnClick).click();\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{Api1.run()}}\");\n    });\n    _.deployMode.DeployApp();\n    cy.wait(3000);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"have.length\", 1).should(\"contain.text\", \"failed to execute\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n\n    //With Error handling\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{Api1.run(() => {}, () => {})}}\");\n    });\n    _.deployMode.DeployApp();\n    cy.wait(3000);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/Error_handling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Evaluation works for fields","suites":["Field value evaluation"],"updatePoint":{"line":14,"column":36,"index":360},"line":14,"code":"  it(\"1. Evaluation works for fields\", () => {\n    propPane.SelectPlatformFunction(\"onClick\", \"Show alert\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Message\"), \"{{Button1.text}}\");\n    agHelper.VerifyEvaluatedValue(\"Submit\");\n  });","file":"e2e/Regression/ClientSide/ActionExecution/FieldEvaluation_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Navigates to page name clicked from the page name tab of navigate to","suites":["Navigate To feature"],"updatePoint":{"line":3,"column":77,"index":180},"line":3,"code":"  it(\"1. Navigates to page name clicked from the page name tab of navigate to\", () => {\n    _.entityExplorer.AddNewPage(); // page 2\n    _.entityExplorer.SelectEntityByName(\"Page1\");\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.BUTTON, 300, 300);\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.SelectPlatformFunction(\"onClick\", \"Navigate to\");\n    _.dataSources.ValidateNSelectDropdown(\"Choose page\", \"Select page\", \"Page2\");\n    _.propPane.UpdatePropertyFieldValue(\"Query params\", `{{\n      {\n       test: '123'\n      }\n      }}`);\n    _.agHelper.AssertAutoSave();\n    _.agHelper.PopupClose(\"onClick\");\n    _.agHelper.ClickButton(\"Submit\");\n    cy.url().should(\"include\", \"a=b\").and(\"include\", \"test=123\");\n    _.entityExplorer.SelectEntityByName(\"Page1\");\n    _.deployMode.DeployApp();\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.GetNAssertContains(_.locators._emptyPageTxt, \"This page seems to be blank\");\n    cy.url().then($url => {\n      cy.log(\"deploy url is\" + $url);\n      expect($url).to.contain(\"test=123\");\n    });\n    //cy.location().its('href').should('include', 'test=123')//both are same\n    _.deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/ActionExecution/NavigateTo1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Gives error message when invalid word is entered in the url tab of navigate to","suites":["Navigate To feature"],"updatePoint":{"line":3,"column":87,"index":190},"line":3,"code":"  it(\"2. Gives error message when invalid word is entered in the url tab of navigate to\", () => {\n    _.entityExplorer.AddNewPage(); // page 2\n    _.entityExplorer.SelectEntityByName(\"Page1\");\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.BUTTON, 300, 300);\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.SelectPlatformFunction(\"onClick\", \"Navigate to\");\n    _.agHelper.GetNClick(_.propPane._navigateToType(\"URL\"));\n    _.agHelper.TypeText(_.propPane._actionSelectorFieldByLabel(\"Enter URL\"), \"wrongPage\");\n    _.deployMode.DeployApp();\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.ValidateToastMessage(\"Enter a valid URL or page name\");\n    _.deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/ActionExecution/NavigateTo2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Navigates to url entered from the url tab of navigate to","suites":["Navigate To feature"],"updatePoint":{"line":3,"column":65,"index":168},"line":3,"code":"  it(\"3. Navigates to url entered from the url tab of navigate to\", () => {\n    _.entityExplorer.AddNewPage(); // page 2\n    _.entityExplorer.SelectEntityByName(\"Page1\");\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.BUTTON, 300, 300);\n    _.propPane.SelectPlatformFunction(\"onClick\", \"Navigate to\");\n    _.agHelper.GetNClick(_.propPane._navigateToType(\"URL\"));\n    _.agHelper.TypeText(_.propPane._actionSelectorFieldByLabel(\"Enter URL\"), \"www.google.com\");\n    _.deployMode.DeployApp();\n    _.agHelper.ClickButton(\"Submit\");\n    cy.url().should(\"include\", \"google.com\");\n    // go back to appsmith\n    //cy.go(-1);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/NavigateTo3_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Posts message to an iframe within Appsmith","suites":["Post window message"],"updatePoint":{"line":11,"column":51,"index":398},"line":11,"code":"  it(\"1. Posts message to an iframe within Appsmith\", () => {\n    ee.DragDropWidgetNVerify(draggableWidgets.BUTTON, 200, 200);\n    ee.DragDropWidgetNVerify(draggableWidgets.IFRAME, 200, 300);\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    propPane.SelectPlatformFunction(\"onClick\", \"Post message\");\n    agHelper.EnterActionValue(\"Message\", \"After postMessage\");\n    agHelper.EnterActionValue(\"Target iframe\", \"Iframe1\");\n    ee.SelectEntityByName(\"Iframe1\", \"Widgets\");\n    propPane.UpdatePropertyFieldValue(\"srcDoc\", `<!doctype html>\n      <html lang=\"en\">\n      <head>\n      <meta charset=\"UTF-8\"><title>post msg</title>\n      </head>\n      <body>\n      <button id=\"iframe-button\" onclick=\"sendMsg()\">Send message</button>\n\t\t\t<button id='txtMsg'>Before postMessage</button>\n      <script>\n      function sendMsg() {\n      window.parent.postMessage(\"got msg\", \"*\");\n      }\n      window.addEventListener(\"message\", (e) => {\n\t\t\t document.querySelector('#txtMsg').innerHTML = e.data;\n      });\n      </script>\n      </body>\n      </html>`);\n    propPane.SelectPlatformFunction(\"onMessageReceived\", \"Show alert\");\n    agHelper.EnterActionValue(\"Message\", \"I got a message from iframe\");\n    deployMode.DeployApp(locator._spanButton(\"Submit\"));\n    agHelper.AssertElementVisible(\"#iframe-Iframe1\");\n    agHelper.Sleep(5000); //allowing time for elements to load fully before clicking - for CI flaky\n    cy.get(\"#iframe-Iframe1\").then(element => {\n      element.contents().find(\"body\").find(\"#iframe-button\").click();\n    });\n    agHelper.ValidateToastMessage(\"I got a message from iframe\");\n    cy.get(\"#iframe-Iframe1\").then($element => {\n      const $body = $element.contents().find(\"body\");\n      cy.wrap($body).find(\"#txtMsg\").should(\"have.text\", \"Before postMessage\");\n    });\n    agHelper.ClickButton(\"Submit\");\n    cy.get(\"#iframe-Iframe1\").then($element => {\n      const $body = $element.contents().find(\"body\");\n      cy.wrap($body).find(\"#txtMsg\").should(\"have.text\", \"After postMessage\");\n    });\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/ActionExecution/PostWindowMessage_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Selects set interval function, Fill setInterval action creator and test code generated ","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":14,"column":96,"index":615},"line":14,"code":"  it(\"1. Selects set interval function, Fill setInterval action creator and test code generated \", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    _.propPane.SelectPlatformFunction(\"onClick\", \"Set interval\");\n    _.agHelper.EnterActionValue(\"Callback function\", \"{{() => { Api1.run() }}}\");\n    _.agHelper.EnterActionValue(\"Id\", \"myInterval\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{setInterval(() => {  Api1.run();}, 5000, 'myInterval');}}\");\n\n    //Works in the published version\"\n    cy.PublishtheApp();\n    cy.wait(3000);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selects clear interval function, Fill clearInterval action creator and test code generated","suites":["Test Create Api and Bind to Button widget"],"updatePoint":{"line":32,"column":99,"index":1527},"line":32,"code":"  it(\"2. Selects clear interval function, Fill clearInterval action creator and test code generated\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.jsEditor.DisableJSContext(\"onClick\");\n    cy.get(\".action-block-tree\").click({\n      force: true\n    });\n    cy.get(\".t--action-selector-popup .t--delete\").click({\n      force: true\n    });\n    _.propPane.SelectPlatformFunction(\"onClick\", \"Clear interval\");\n    _.agHelper.EnterActionValue(\"Id\", \"myInterval\");\n    _.jsEditor.EnableJSContext(\"onClick\");\n    _.propPane.ValidatePropertyFieldValue(\"onClick\", `{{clearInterval('myInterval');}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. adds an action","suites":["UI to Code"],"updatePoint":{"line":23,"column":23,"index":563},"line":23,"code":"  it(\"1. adds an action\", () => {\n    propPane.SelectPlatformFunction(\"onClick\", \"Show alert\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Message\"), \"Hello!\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. adds multiple actions","suites":["UI to Code"],"updatePoint":{"line":29,"column":30,"index":892},"line":29,"code":"  it(\"2. adds multiple actions\", () => {\n    // Add first action\n    propPane.SelectPlatformFunction(\"onClick\", \"Show alert\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Message\"), \"Hello!\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Add second action\n    propPane.SelectPlatformFunction(\"onClick\", \"Navigate to\");\n    propPane.SelectActionByTitleAndValue(\"Navigate to\", \"Select page\");\n    agHelper.GetNClick(_.propPane._navigateToType(\"URL\"));\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Enter URL\"), \"https://google.com\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');navigateTo('https://google.com', {}, 'SAME_WINDOW');}}`);\n\n    // Add third action\n    propPane.SelectPlatformFunction(\"onClick\", \"Store value\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Key\"), \"secret-key\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Value\"), \"secret-value\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Add fourth action\n    propPane.SelectPlatformFunction(\"onClick\", \"Copy to clipboard\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Text to be copied to clipboard\"), \"text to copy\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Validate the code\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');navigateTo('https://google.com', {}, 'SAME_WINDOW');storeValue('secret-key', 'secret-value');copyToClipboard('text to copy');}}`);\n\n    // Delete the third action\n    agHelper.GetNClick(propPane._actionCardByTitle(\"Store value\"));\n    agHelper.GetNClick(propPane._actionSelectorDelete);\n\n    // Assert that cards 1, 2 and 4 are present\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Navigate to\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Copy to clipboard\"));\n\n    // Assert the code for the remaining actions\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');navigateTo('https://google.com', {}, 'SAME_WINDOW');copyToClipboard('text to copy');}}`);\n\n    // Delete the first action\n    agHelper.GetNClick(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.GetNClick(propPane._actionSelectorDelete);\n\n    // Assert that cards 2 and 4 are present\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Navigate to\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Copy to clipboard\"));\n\n    // Assert the code for the remaining actions\n    propPane.ValidateJSFieldValue(\"onClick\", `{{navigateTo('https://google.com', {}, 'SAME_WINDOW');copyToClipboard('text to copy');}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. works with undo using cmd+z","suites":["UI to Code"],"updatePoint":{"line":80,"column":36,"index":3692},"line":80,"code":"  it(\"3. works with undo using cmd+z\", () => {\n    // Add first action\n    propPane.SelectPlatformFunction(\"onClick\", \"Show alert\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Message\"), \"Hello!\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Add second action\n    propPane.SelectPlatformFunction(\"onClick\", \"Navigate to\");\n    propPane.SelectActionByTitleAndValue(\"Navigate to\", \"Select page\");\n    agHelper.GetNClick(_.propPane._navigateToType(\"URL\"));\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Enter URL\"), \"https://google.com\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');navigateTo('https://google.com', {}, 'SAME_WINDOW');}}`);\n\n    // Add third action\n    propPane.SelectPlatformFunction(\"onClick\", \"Store value\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Key\"), \"secret-key\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Value\"), \"secret-value\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Add fourth action\n    propPane.SelectPlatformFunction(\"onClick\", \"Copy to clipboard\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Text to be copied to clipboard\"), \"text to copy\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Validate the code\n\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');navigateTo('https://google.com', {}, 'SAME_WINDOW');storeValue('secret-key', 'secret-value');copyToClipboard('text to copy');}}`);\n\n    // Delete the third action\n    agHelper.GetNClick(propPane._actionCardByTitle(\"Store value\"));\n    agHelper.GetNClick(propPane._actionSelectorDelete);\n\n    // Delete the first action\n    agHelper.GetNClick(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.GetNClick(propPane._actionSelectorDelete);\n\n    // Assert that first and third action are not present\n    agHelper.AssertElementAbsence(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.AssertElementAbsence(propPane._actionCardByTitle(\"Store value\"));\n\n    // Undo the last two actions\n    cy.get(\"body\").type(agHelper.isMac ? \"{meta}Z\" : \"{ctrl}Z\");\n    cy.get(\"body\").type(agHelper.isMac ? \"{meta}Z\" : \"{ctrl}Z\");\n\n    // Assert that all the cards are present\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Navigate to\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Store value\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Copy to clipboard\"));\n\n    // Assert that code for all actions is back after undo actions\n\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');navigateTo('https://google.com', {}, 'SAME_WINDOW');storeValue('secret-key', 'secret-value');copyToClipboard('text to copy');}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. works with redo using cmd+y","suites":["UI to Code"],"updatePoint":{"line":135,"column":36,"index":6613},"line":135,"code":"  it(\"4. works with redo using cmd+y\", () => {\n    // Add first action\n    propPane.SelectPlatformFunction(\"onClick\", \"Show alert\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Message\"), \"Hello!\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Add second action\n    propPane.SelectPlatformFunction(\"onClick\", \"Navigate to\");\n    propPane.SelectActionByTitleAndValue(\"Navigate to\", \"Select page\");\n    agHelper.GetNClick(_.propPane._navigateToType(\"URL\"));\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Enter URL\"), \"https://google.com\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');navigateTo('https://google.com', {}, 'SAME_WINDOW');}}`);\n\n    // Add third action\n    propPane.SelectPlatformFunction(\"onClick\", \"Store value\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Key\"), \"secret-key\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Value\"), \"secret-value\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Add fourth action\n    propPane.SelectPlatformFunction(\"onClick\", \"Copy to clipboard\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Text to be copied to clipboard\"), \"text to copy\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Validate the code\n\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '');navigateTo('https://google.com', {}, 'SAME_WINDOW');storeValue('secret-key', 'secret-value');copyToClipboard('text to copy');}}`);\n\n    // Delete the third action\n    agHelper.GetNClick(propPane._actionCardByTitle(\"Store value\"));\n    agHelper.GetNClick(propPane._actionSelectorDelete);\n\n    // Delete the first action\n    agHelper.GetNClick(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.GetNClick(propPane._actionSelectorDelete);\n\n    // Assert that first and third action are not present\n    agHelper.AssertElementAbsence(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.AssertElementAbsence(propPane._actionCardByTitle(\"Store value\"));\n\n    // Undo the last two actions\n    cy.get(\"body\").type(agHelper.isMac ? \"{meta}Z\" : \"{ctrl}Z\");\n    cy.get(\"body\").type(agHelper.isMac ? \"{meta}Z\" : \"{ctrl}Z\");\n\n    // Assert that all the cards are present\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Navigate to\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Store value\"));\n    agHelper.AssertElementExist(propPane._actionCardByTitle(\"Copy to clipboard\"));\n\n    // Redo the last two undo actions\n    cy.get(\"body\").type(agHelper.isMac ? \"{meta}Y\" : \"{ctrl}Y\");\n    cy.get(\"body\").type(agHelper.isMac ? \"{meta}Y\" : \"{ctrl}Y\");\n\n    // Assert that code for first and third action is gone\n\n    propPane.ValidateJSFieldValue(\"onClick\", `{{navigateTo('https://google.com', {}, 'SAME_WINDOW');copyToClipboard('text to copy');}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. can add success and error callbacks","suites":["UI to Code"],"updatePoint":{"line":194,"column":44,"index":9638},"line":194,"code":"  it(\"5. can add success and error callbacks\", () => {\n    propPane.SelectPlatformFunction(\"onClick\", \"Show alert\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Message\"), \"Hello!\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n    agHelper.GetNClick(propPane._actionCardByTitle(\"Show alert\"));\n    agHelper.GetNClick(propPane._actionCallbacks);\n\n    // add a success callback\n    agHelper.GetNClick(propPane._actionAddCallback(\"success\")).wait(500);\n    agHelper.GetNClick(locators._dropDownValue(\"Store value\")).wait(500);\n\n    // add an error callback\n    agHelper.GetNClick(propPane._actionAddCallback(\"failure\")).wait(500);\n    agHelper.GetNClick(locators._dropDownValue(\"Navigate to\")).wait(500);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{showAlert('Hello!', '').then(() => {  storeValue(\"\", \"\");}).catch(() => {  navigateTo(\"\", {}, 'SAME_WINDOW');});}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. updates the success and failure callbacks for nested query actions","suites":["UI to Code"],"updatePoint":{"line":210,"column":75,"index":10575},"line":210,"code":"  it(\"6. updates the success and failure callbacks for nested query actions\", () => {\n    propPane.EnterJSContext(\"onClick\", `{{Api1.run().then(() => {\n      Api2.run().then(() => { showAlert(\"Hello\") }).catch(() => { showAlert(\"World\") });\n     })}}`);\n    jsEditor.DisableJSContext(\"onClick\");\n\n    // Select the card to show the callback button\n    propPane.SelectActionByTitleAndValue(\"Execute a query\", \"Api1.run\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Click on the callback button\n    agHelper.GetNClick(propPane._actionCallbacks);\n\n    // Edit the success callback of the nested Api2.run\n    propPane.SelectActionByTitleAndValue(\"Execute a query\", \"Api2.run\");\n    cy.get(jsEditor._lineinPropertyPaneJsEditor(2, propPane._actionSelectorFieldContentByLabel(\"Callback function\"))).type(\"eeee\");\n\n    // Edit the failure callback of the nested Api2.run\n    agHelper.GetNClick(locators._openNavigationTab(\"onFailure\"));\n    cy.get(jsEditor._lineinPropertyPaneJsEditor(2, propPane._actionSelectorFieldContentByLabel(\"Callback function\"))).type(\"oooo\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{Api1.run().then(() => {  Api2.run().then(() => {    showAlert(\"Heeeeello\");  }).catch(() => {    showAlert(\"Wooooorld\");  });});}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. updates the query params correctly","suites":["UI to Code"],"updatePoint":{"line":233,"column":43,"index":11877},"line":233,"code":"  it(\"7. updates the query params correctly\", () => {\n    propPane.EnterJSContext(\"onClick\", `{{Api1.run().then(() => {\n      Api2.run().then(() => { showAlert(\"Hello\") }).catch(() => { showAlert(\"World\") });\n     })}}`);\n    jsEditor.DisableJSContext(\"onClick\");\n\n    // Select the card to show the callback button\n    propPane.SelectActionByTitleAndValue(\"Execute a query\", \"Api1.run\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Click on the callback button\n    agHelper.GetNClick(propPane._actionCallbacks);\n\n    // Edit the success callback of the nested Api2.run\n    propPane.SelectActionByTitleAndValue(\"Execute a query\", \"Api2.run\");\n    cy.get(jsEditor._lineinPropertyPaneJsEditor(2, propPane._actionSelectorFieldContentByLabel(\"Params\"))).type(\"val: 1\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{Api1.run().then(() => {  Api2.run({    val: 1    // \"key\": \"value\",  }).then(() => {    showAlert(\"Hello\");  }).catch(() => {    showAlert(\"World\");  });});}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"8. adds actions to callback function is argument if exists already","suites":["UI to Code"],"updatePoint":{"line":252,"column":72,"index":12972},"line":252,"code":"  it(\"8. adds actions to callback function is argument if exists already\", () => {\n    propPane.EnterJSContext(\"onClick\", `Api1.run(() => {\n        showAlert(\"Hello\");\n       })\n       `);\n    jsEditor.DisableJSContext(\"onClick\");\n\n    // Select the card to show the callback button\n    propPane.SelectActionByTitleAndValue(\"Execute a query\", \"Api1.run\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n\n    // Click on the callback button\n    agHelper.GetNClick(propPane._actionCallbacks);\n    agHelper.GetNClick(propPane._actionAddCallback(\"success\"));\n    agHelper.GetNClick(locators._dropDownValue(\"Store value\")).wait(500);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{Api1.run(() => {  showAlert(\"Hello\");  storeValue(\"\", \"\");}, () => {});}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"9. correctly configures a setInterval action","suites":["UI to Code"],"updatePoint":{"line":269,"column":50,"index":13723},"line":269,"code":"  it(\"9. correctly configures a setInterval action\", () => {\n    propPane.SelectPlatformFunction(\"onClick\", \"Set interval\");\n    cy.get(jsEditor._lineinPropertyPaneJsEditor(2, propPane._actionSelectorFieldContentByLabel(\"Callback function\"))).type(\"{enter}showAlert('Hello'){enter}//\");\n    agHelper.TypeText(propPane._actionSelectorFieldByLabel(\"Id\"), \"interval-id\");\n    agHelper.GetNClick(propPane._actionSelectorPopupClose);\n    propPane.ValidateJSFieldValue(\"onClick\", `{{setInterval(() => {  // add c  showAlert(\\'Hello\\');  // ode here}, 5000, \\'interval-id\\');}}`);\n  });","file":"e2e/Regression/ClientSide/ActionExecution/uiToCode/uiToCode_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should test that settings page is accessible to super user","suites":["Admin settings page"],"updatePoint":{"line":27,"column":67,"index":730},"line":27,"code":"  it(\"1. Should test that settings page is accessible to super user\", () => {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(\".admin-settings-menu-option\").should(\"be.visible\");\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    cy.wait(\"@getEnvVariables\");\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should test that settings page is not accessible to normal users","suites":["Admin settings page"],"updatePoint":{"line":36,"column":73,"index":1126},"line":36,"code":"  it(\"2. Should test that settings page is not accessible to normal users\", () => {\n    cy.wait(2000);\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.get(\".admin-settings-menu-option\").should(\"not.exist\");\n    cy.visit(\"/settings/general\");\n    // non super users are redirected to home page\n    cy.url().should(\"contain\", \"/applications\");\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should test that settings page is redirected to default tab","suites":["Admin settings page"],"updatePoint":{"line":45,"column":68,"index":1526},"line":45,"code":"  it(\"3. Should test that settings page is redirected to default tab\", () => {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    //cy.wait(3000);\n    cy.visit(\"/settings\");\n    cy.url().should(\"contain\", \"/settings/general\");\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":51,"column":22,"index":1737},"line":51,"code":"  it(\"excludeForAirgap\", \"4. Should test that settings page tab redirects\", () => {\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.get(adminsSettings.generalTab).click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    cy.get(adminsSettings.advancedTab).click();\n    cy.url().should(\"contain\", \"/settings/advanced\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.emailTab).click();\n    cy.url().should(\"contain\", \"/settings/email\");\n    cy.get(adminsSettings.googleMapsTab).click();\n    cy.url().should(\"contain\", \"/settings/google-maps\");\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", \"/settings/version\");\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Admin settings page"],"updatePoint":{"line":68,"column":12,"index":2537},"line":68,"code":"  it(\"airgap\", \"4. Should test that settings page tab redirects and google maps doesn't exist - airgap\", () => {\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.get(adminsSettings.generalTab).click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    cy.get(adminsSettings.advancedTab).click();\n    cy.url().should(\"contain\", \"/settings/advanced\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.emailTab).click();\n    cy.url().should(\"contain\", \"/settings/email\");\n    cy.get(adminsSettings.googleMapsTab).should(\"not.exist\");\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", \"/settings/version\");\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":84,"column":22,"index":3341},"line":84,"code":"  it(\"excludeForAirgap\", \"5. Should test that authentication page redirects\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.googleButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/google-auth\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.githubButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/github-auth\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.formloginButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/form-login\");\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Admin settings page"],"updatePoint":{"line":99,"column":12,"index":4165},"line":99,"code":"  it(\"airgap\", \"5. Should test that authentication page redirects and google and github auth doesn't exist - airgap\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.googleButton).should(\"not.exist\");\n    cy.get(adminsSettings.githubButton).should(\"not.exist\");\n    cy.get(adminsSettings.formloginButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/form-login\");\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":108,"column":22,"index":4701},"line":108,"code":"  it(\"excludeForAirgap\", \"6. Should test that configure link redirects to google signup setup doc\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.googleButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/google-auth\");\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GOOGLE_SIGNUP_SETUP_DOC);\n    });\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":119,"column":22,"index":5305},"line":119,"code":"  it(\"excludeForAirgap\", \"7. Should test that configure link redirects to github signup setup doc\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminsSettings.githubButton).click();\n    cy.url().should(\"contain\", \"/settings/authentication/github-auth\");\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GITHUB_SIGNUP_SETUP_DOC);\n    });\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Should test save and clear buttons disabled state","suites":["Admin settings page"],"updatePoint":{"line":130,"column":58,"index":5945},"line":130,"code":"  it(\"8. Should test save and clear buttons disabled state\", () => {\n    cy.visit(\"/settings/general\");\n    const assertVisibilityAndDisabledState = () => {\n      cy.get(adminsSettings.saveButton).should(\"be.visible\");\n      cy.get(adminsSettings.saveButton).should(\"be.disabled\");\n      cy.get(adminsSettings.resetButton).should(\"be.visible\");\n      cy.get(adminsSettings.resetButton).should(\"be.disabled\");\n    };\n    assertVisibilityAndDisabledState();\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    cy.get(adminsSettings.instanceName).clear().type(\"AppsmithInstance\");\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.resetButton).should(\"be.visible\");\n    cy.get(adminsSettings.resetButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.resetButton).click();\n    assertVisibilityAndDisabledState();\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Should test saving a setting value","suites":["Admin settings page"],"updatePoint":{"line":148,"column":43,"index":6868},"line":148,"code":"  it(\"9. Should test saving a setting value\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(adminsSettings.instanceName).clear().type(uuid);\n    });\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(adminsSettings.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n    });\n    cy.get(adminsSettings.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10.Should test saving settings value from different tabs","suites":["Admin settings page"],"updatePoint":{"line":177,"column":62,"index":7931},"line":177,"code":"  it(\"10.Should test saving settings value from different tabs\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(adminsSettings.instanceName).clear().type(uuid);\n    });\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.emailTab).click();\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.fromAddress).should(\"be.visible\");\n    let fromAddress;\n    cy.generateUUID().then(uuid => {\n      fromAddress = uuid;\n      cy.get(adminsSettings.fromAddress).clear().type(`${uuid}@appsmith.com`);\n    });\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(adminsSettings.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n      expect(interception.request.body.APPSMITH_MAIL_FROM).to.equal(`${fromAddress}@appsmith.com`);\n    });\n    cy.get(adminsSettings.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"e2e/Regression/ClientSide/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. App header should appear when there is a single page in the application, and navigation should appear alongside app header when there are two pages","suites":["General checks for app navigation"],"updatePoint":{"line":9,"column":156,"index":630},"line":9,"code":"  it(\"1. App header should appear when there is a single page in the application, and navigation should appear alongside app header when there are two pages\", () => {\n    // App header should appear when there is a single page in the application\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.header).should(\"exist\");\n    deployMode.NavigateBacktoEditor();\n\n    // Navigation should appear alongside app header when there are two pages\n    ee.AddNewPage();\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.topStacked).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Application name, share button, edit button, and user dropdown should be available in the app header","suites":["General checks for app navigation"],"updatePoint":{"line":20,"column":109,"index":1150},"line":20,"code":"  it(\"2. Application name, share button, edit button, and user dropdown should be available in the app header\", () => {\n    cy.get(appNavigationLocators.applicationName).should(\"exist\");\n    cy.get(appNavigationLocators.shareButton).should(\"exist\");\n    cy.get(appNavigationLocators.editButton).should(\"exist\");\n    cy.get(appNavigationLocators.userProfileDropdownButton).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Share button should open the share modal, edit button should take us back to the editor, and clicking on user profile button should open up the dropdown menu","suites":["General checks for app navigation"],"updatePoint":{"line":26,"column":166,"index":1602},"line":26,"code":"  it(\"3. Share button should open the share modal, edit button should take us back to the editor, and clicking on user profile button should open up the dropdown menu\", () => {\n    // Share\n    cy.get(`${appNavigationLocators.header} ${appNavigationLocators.shareButton}`).click();\n    cy.wait(1000);\n    cy.get(appNavigationLocators.modal).should(\"exist\");\n    cy.get(appNavigationLocators.modalClose).first().click({\n      force: true\n    });\n\n    // Edit\n    cy.get(`${appNavigationLocators.header} ${appNavigationLocators.editButton}`).click();\n    cy.get(commonLocators.canvas).should(\"exist\");\n\n    // User profile dropdown\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.userProfileDropdownButton).click();\n    cy.get(appNavigationLocators.userProfileDropdownMenu).should(\"exist\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Import an application, deploy and verify if the Top+Stacked navigation style shows up with all the pages and a page change happens","suites":["General checks for app navigation"],"updatePoint":{"line":45,"column":139,"index":2422},"line":45,"code":"  it(\"4. Import an application, deploy and verify if the Top+Stacked navigation style shows up with all the pages and a page change happens\", () => {\n    // Import an application\n    homePage.NavigateToHome();\n    homePage.ImportApp(\"appNavigationTestingApp.json\");\n    cy.wait(\"@importNewApplication\").then(interception => {\n      agHelper.Sleep();\n      const {\n        isPartialImport\n      } = interception.response.body.data;\n      if (isPartialImport) {\n        homePage.AssertNCloseImport();\n      } else {\n        homePage.AssertImportToast();\n      }\n      deployMode.DeployApp();\n\n      // Assert app header, top stacked navigation and page menu items\n      cy.get(appNavigationLocators.header).should(\"exist\");\n      cy.get(appNavigationLocators.topStacked).should(\"exist\");\n      cy.get(appNavigationLocators.navigationMenuItem).should(\"have.length\", 10);\n\n      // Switch page\n      cy.get(appNavigationLocators.navigationMenuItem).contains(\"Page5\").click({\n        force: true\n      });\n\n      // Assert active page menu item\n      cy.get(appNavigationLocators.navigationMenuItem).contains(\"Page5\").parent().parent().parent().parent().parent().should(\"have.class\", \"is-active\");\n      deployMode.NavigateBacktoEditor();\n    });\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and Drop multiple widgets in auto-layout mode","suites":["Validating multiple widgets in auto-layout mode with App navigation settings"],"updatePoint":{"line":3,"column":59,"index":225},"line":3,"code":"  it(\"1. Drag and Drop multiple widgets in auto-layout mode\", function () {\n    _.autoLayout.ConvertToAutoLayoutAndVerify(false);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.INPUT_V2, 100, 200);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.INPUT_V2, 10, 20);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.BUTTON, 10, 20);\n    _.propPane.NavigateToPage(\"Page1\", \"onClick\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigationWithAutoLayout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Change App navigation settings and valdiate the layout settings","suites":["Validating multiple widgets in auto-layout mode with App navigation settings"],"updatePoint":{"line":10,"column":72,"index":668},"line":10,"code":"  it(\"2. Change App navigation settings and valdiate the layout settings\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.agHelper.GetNClick(_.appSettings.locators._appSettings);\n    _.agHelper.GetNClick(_.appSettings.locators._navigationSettingsTab);\n    _.agHelper.GetNClick(_.appSettings.locators._navigationSettings._orientationOptions._side);\n    _.agHelper.GetNClickByContains(_.appSettings.locators._navigationMenuItem, \"Page1\");\n    _.agHelper.Sleep();\n    _.agHelper.Sleep();\n    _.agHelper.AssertElementExist(_.locators._widgetInCanvas(\"inputwidgetv2\"));\n    _.agHelper.AssertElementExist(_.locators._widgetInCanvas(\"inputwidgetv2\"), 1);\n    _.agHelper.AssertElementExist(_.locators._fixedLayout);\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigationWithAutoLayout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Change 'Orientation' to 'Side', sidebar should appear","suites":["Page orientation and navigation related usecases "],"updatePoint":{"line":4,"column":62,"index":224},"line":4,"code":"  it(\"1. Change 'Orientation' to 'Side', sidebar should appear\", () => {\n    _.agHelper.GetNClick(_.appSettings.locators._appSettings);\n    _.agHelper.GetNClick(_.appSettings.locators._navigationSettingsTab);\n    _.agHelper.GetNClick(_.appSettings.locators._navigationSettings._orientationOptions._side);\n    _.agHelper.GetNClickByContains(_.appSettings.locators._navigationMenuItem, \"Page1\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigationWithMultiplePages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate change with height width for fill widget - Input widget","suites":["Page orientation and navigation related usecases "],"updatePoint":{"line":10,"column":73,"index":635},"line":10,"code":"  it(\"2. Validate change with height width for fill widget - Input widget\", function () {\n    _.autoLayout.ConvertToAutoLayoutAndVerify(false);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.INPUT_V2, 100, 200);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.INPUT_V2, 10, 20);\n    _.agHelper.Sleep();\n    cy.url().then(url => {\n      currentUrl = url;\n    });\n    for (let i = 0; i < 25; i++) {\n      _.entityExplorer.AddNewPage();\n    }\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.BUTTON, 10, 20);\n    //_.propPane.navigateToPage(\"Page1\", \"onClick\");\n    _.propPane.NavigateToPage(\"Page1\", \"onClick\");\n    //cy.navigateOnClick(\"Page1\", \"onClick\");\n    _.deployMode.DeployApp();\n    _.agHelper.Sleep();\n    _.agHelper.GetNClickByContains(\"button\", \"Submit\");\n    _.agHelper.GetElement(_.appSettings.locators._navigationMenuItem).contains(\"Page1\").parent().parent().parent().parent().parent().should(\"have.class\", \"is-active\");\n    _.deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigationWithMultiplePages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Navigate to widget url and validate","suites":["Page orientation and navigation related usecases "],"updatePoint":{"line":31,"column":44,"index":1629},"line":31,"code":"  it(\"3. Navigate to widget url and validate\", () => {\n    if (currentUrl !== null) {\n      _.agHelper.visitURL(currentUrl);\n      _.agHelper.Sleep();\n      _.agHelper.AssertElementExist(_.locators._widgetInCanvas(\"inputwidgetv2\"));\n      _.agHelper.AssertElementExist(_.locators._widgetInCanvas(\"inputwidgetv2\"), 1);\n      _.agHelper.AssertAttribute(_.locators._widgetInCanvas(\"inputwidgetv2\"), \"data-testid\", \"t--selected\");\n    } else {\n      cy.log(\"URL is NULL check previous test\");\n    }\n  });","file":"e2e/Regression/ClientSide/AppNavigation/AppNavigationWithMultiplePages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Open app settings and navigation tab should be there and when the navigation tab is selected, navigation preview should be visible","suites":["Test app's navigation settings"],"updatePoint":{"line":7,"column":139,"index":503},"line":7,"code":"  it(\"1. Open app settings and navigation tab should be there and when the navigation tab is selected, navigation preview should be visible\", () => {\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).should(\"exist\");\n\n    // Should not exist when the tab is not selected\n    cy.get(appNavigationLocators.navigationPreview).should(\"not.exist\");\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n\n    // Should exist when the tab is selected\n    cy.get(appNavigationLocators.navigationPreview).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/NavigationSettings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Toggle 'Show navbar' to off, the app header and navigation should not appear when deployed","suites":["Test app's navigation settings"],"updatePoint":{"line":18,"column":99,"index":1060},"line":18,"code":"  it(\"2. Toggle 'Show navbar' to off, the app header and navigation should not appear when deployed\", () => {\n    // Toggle show navbar to off\n    cy.get(appNavigationLocators.navigationSettings.showNavbar).click({\n      force: true\n    });\n    cy.PublishtheApp();\n    cy.get(appNavigationLocators.header).should(\"not.exist\");\n    cy.get(appNavigationLocators.topStacked).should(\"not.exist\");\n    cy.go(\"back\");\n    // Wait for the app to load\n    agHelper.Sleep(3000);\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n    // Toggle show navbar back to on\n    cy.get(appNavigationLocators.navigationSettings.showNavbar).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/AppNavigation/NavigationSettings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Change 'Orientation' to 'Side', deploy, and the sidebar should appear","suites":["Test app's navigation settings"],"updatePoint":{"line":36,"column":78,"index":1776},"line":36,"code":"  it(\"3. Change 'Orientation' to 'Side', deploy, and the sidebar should appear\", () => {\n    cy.get(appNavigationLocators.navigationSettings.orientationOptions.side).click({\n      force: true\n    });\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.header).should(\"not.exist\");\n    cy.get(appNavigationLocators.topStacked).should(\"not.exist\");\n    cy.get(appNavigationLocators.sidebar).should(\"exist\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/AppNavigation/NavigationSettings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Change 'Orientation' back to 'Top', and 'Nav style' to 'Inline', page navigation items should appear inline","suites":["Test app's navigation settings"],"updatePoint":{"line":46,"column":116,"index":2274},"line":46,"code":"  it(\"4. Change 'Orientation' back to 'Top', and 'Nav style' to 'Inline', page navigation items should appear inline\", () => {\n    entityExplorer.AddNewPage();\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n    cy.get(appNavigationLocators.navigationSettings.orientationOptions.top).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.navigationSettings.navStyleOptions.inline).click({\n      force: true\n    });\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.header).should(\"exist\");\n    cy.get(appNavigationLocators.topStacked).should(\"not.exist\");\n    cy.get(appNavigationLocators.topInline).should(\"exist\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/AppNavigation/NavigationSettings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Change 'Orientation' to 'Side', sidebar should appear","suites":["Test Sidebar navigation style"],"updatePoint":{"line":24,"column":62,"index":955},"line":24,"code":"  it(\"1. Change 'Orientation' to 'Side', sidebar should appear\", () => {\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n    cy.get(appNavigationLocators.navigationSettings.orientationOptions.side).click({\n      force: true\n    });\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.sidebar).should(\"exist\");\n    cy.get(appNavigationLocators.topStacked).should(\"not.exist\");\n    cy.get(appNavigationLocators.topInline).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/Sidebar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Page change should work","suites":["Test Sidebar navigation style"],"updatePoint":{"line":35,"column":32,"index":1459},"line":35,"code":"  it(\"2. Page change should work\", () => {\n    const pageName = \"Page5 - with long long name\";\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).parent().parent().parent().parent().parent().should(\"have.class\", \"is-active\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/Sidebar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Sidebar background should be default to white, and should change when background color is set to theme","suites":["Test Sidebar navigation style"],"updatePoint":{"line":42,"column":111,"index":1897},"line":42,"code":"  it(\"3. Sidebar background should be default to white, and should change when background color is set to theme\", () => {\n    // The background of sidebar should be white since light color style is default\n    cy.get(appNavigationLocators.sidebar).should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");\n\n    // Changing color style to theme should change navigation's background color\n    deployMode.NavigateBacktoEditor();\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n    cy.get(appNavigationLocators.navigationSettings.colorStyleOptions.theme).click({\n      force: true\n    });\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.sidebar).should(\"have.css\", \"background-color\", \"rgb(85, 61, 233)\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/Sidebar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Application name, share button, edit button, and user dropdown should be available in the app sidebar","suites":["Test Sidebar navigation style"],"updatePoint":{"line":56,"column":110,"index":2700},"line":56,"code":"  it(\"4. Application name, share button, edit button, and user dropdown should be available in the app sidebar\", () => {\n    cy.get(appNavigationLocators.applicationName).should(\"exist\");\n    cy.get(appNavigationLocators.shareButton).should(\"exist\");\n    cy.get(appNavigationLocators.editButton).should(\"exist\");\n    cy.get(appNavigationLocators.userProfileDropdownButton).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/Sidebar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Share button should open the share modal, edit button should take us back to the editor, and clicking on user profile button should open up the dropdown menu","suites":["Test Sidebar navigation style"],"updatePoint":{"line":62,"column":166,"index":3152},"line":62,"code":"  it(\"5. Share button should open the share modal, edit button should take us back to the editor, and clicking on user profile button should open up the dropdown menu\", () => {\n    // Share\n    cy.get(`${appNavigationLocators.sidebar} ${appNavigationLocators.shareButton}`).click();\n    cy.wait(1000);\n    cy.get(appNavigationLocators.modal).should(\"exist\");\n    cy.get(appNavigationLocators.modalClose).first().click({\n      force: true\n    });\n\n    // Edit\n    cy.get(`${appNavigationLocators.sidebar} ${appNavigationLocators.editButton}`).click();\n    cy.get(commonLocators.canvas).should(\"exist\");\n\n    // User profile dropdown\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.userProfileDropdownButton).click();\n    cy.get(appNavigationLocators.userProfileDropdownMenu).should(\"exist\");\n\n    // Back to editor\n    cy.get(`${appNavigationLocators.sidebar} ${appNavigationLocators.editButton}`).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/AppNavigation/Sidebar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Sidebar collapse button should be there","suites":["Test Sidebar Collapse"],"updatePoint":{"line":5,"column":48,"index":298},"line":5,"code":"  it(\"1. Sidebar collapse button should be there\", () => {\n    // First make sure that nav orientation is set to side\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n    cy.get(appNavigationLocators.navigationSettings.orientationOptions.side).click({\n      force: true\n    });\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.sidebarCollapseButton).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/SidebarCollapse_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Sidebar should collapse and open on click of collapse button again","suites":["Test Sidebar Collapse"],"updatePoint":{"line":15,"column":75,"index":787},"line":15,"code":"  it(\"3. Sidebar should collapse and open on click of collapse button again\", () => {\n    // Collapse\n    cy.get(appNavigationLocators.sidebarCollapseButton).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.sidebar).should(\"not.have.class\", \"is-open\");\n\n    // Open\n    cy.get(appNavigationLocators.sidebarCollapseButton).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.sidebar).should(\"have.class\", \"is-open\");\n    // Back to editor\n    cy.get(`${appNavigationLocators.sidebar} ${appNavigationLocators.editButton}`).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/AppNavigation/SidebarCollapse_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Change 'Orientation' to 'Top', and 'Nav style' to 'Inline', page navigation items should appear inline","suites":["Test Top + Inline navigation style"],"updatePoint":{"line":24,"column":111,"index":1009},"line":24,"code":"  it(\"1. Change 'Orientation' to 'Top', and 'Nav style' to 'Inline', page navigation items should appear inline\", () => {\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n    cy.get(appNavigationLocators.navigationSettings.orientationOptions.top).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.navigationSettings.navStyleOptions.inline).click({\n      force: true\n    });\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.header).should(\"exist\");\n    cy.get(appNavigationLocators.topStacked).should(\"not.exist\");\n    cy.get(appNavigationLocators.topInline).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopInline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. More button should exist and when clicked on it, it should open the dropdown with rest of the pages","suites":["Test Top + Inline navigation style"],"updatePoint":{"line":38,"column":108,"index":1693},"line":38,"code":"  it(\"2. More button should exist and when clicked on it, it should open the dropdown with rest of the pages\", () => {\n    // 'More' button should exist\n    cy.get(appNavigationLocators.topInlineMoreButton).should(\"exist\");\n\n    // Should open the dropdown\n    cy.get(appNavigationLocators.topInlineMoreButton).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.topInlineMoreDropdown).should(\"exist\");\n    cy.get(appNavigationLocators.topInlineMoreDropdown).should(\"have.class\", \"bp3-overlay-open\");\n    cy.get(appNavigationLocators.topInlineMoreDropdownItem).should(\"exist\");\n    cy.get(appNavigationLocators.topInlineMoreDropdownItem).should(\"have.length.of.at.least\", 1);\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopInline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Page change from inside this dropdown should work","suites":["Test Top + Inline navigation style"],"updatePoint":{"line":51,"column":58,"index":2340},"line":51,"code":"  it(\"3. Page change from inside this dropdown should work\", () => {\n    const pageName = \"Page6 - with long long name\";\n    cy.get(appNavigationLocators.topInlineMoreDropdownItem).contains(pageName).click({\n      force: true\n    });\n\n    // dropdown should close after page change\n    cy.get(appNavigationLocators.topInlineMoreDropdown).should(\"not.have.class\", \"bp3-overlay-open\");\n\n    // open the dropdown again\n    cy.get(appNavigationLocators.topInlineMoreButton).click({\n      force: true\n    });\n\n    // verify that the current page is active\n    cy.get(appNavigationLocators.topInlineMoreDropdownItem).contains(pageName).parent().parent().parent().parent().parent().should(\"have.class\", \"is-active\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopInline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Page change should work","suites":["Test Top + Inline navigation style"],"updatePoint":{"line":68,"column":32,"index":3030},"line":68,"code":"  it(\"4. Page change should work\", () => {\n    const pageName = \"Page1 - with long long name\";\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).parent().parent().parent().parent().parent().should(\"have.class\", \"is-active\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopInline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Navigation's background should be default to white, and should change when background color is set to theme","suites":["Test Top + Inline navigation style"],"updatePoint":{"line":75,"column":116,"index":3473},"line":75,"code":"  it(\"5. Navigation's background should be default to white, and should change when background color is set to theme\", () => {\n    // The background should be white since light color style is default\n    cy.get(appNavigationLocators.header).should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");\n\n    // Changing color style to theme should change navigation's background color\n    deployMode.NavigateBacktoEditor();\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n    cy.get(appNavigationLocators.navigationSettings.colorStyleOptions.theme).click({\n      force: true\n    });\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.header).should(\"have.css\", \"background-color\", \"rgb(85, 61, 233)\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopInline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Application name, share button, edit button, and user dropdown should be available in the app header","suites":["Test Top + Inline navigation style"],"updatePoint":{"line":89,"column":109,"index":4262},"line":89,"code":"  it(\"6. Application name, share button, edit button, and user dropdown should be available in the app header\", () => {\n    cy.get(appNavigationLocators.applicationName).should(\"exist\");\n    cy.get(appNavigationLocators.shareButton).should(\"exist\");\n    cy.get(appNavigationLocators.editButton).should(\"exist\");\n    cy.get(appNavigationLocators.userProfileDropdownButton).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopInline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Share button should open the share modal, edit button should take us back to the editor, and clicking on user profile button should open up the dropdown menu","suites":["Test Top + Inline navigation style"],"updatePoint":{"line":95,"column":166,"index":4714},"line":95,"code":"  it(\"7. Share button should open the share modal, edit button should take us back to the editor, and clicking on user profile button should open up the dropdown menu\", () => {\n    // Share\n    cy.get(`${appNavigationLocators.header} ${appNavigationLocators.shareButton}`).click();\n    cy.wait(1000);\n    cy.get(appNavigationLocators.modal).should(\"exist\");\n    cy.get(appNavigationLocators.modalClose).first().click({\n      force: true\n    });\n\n    // Edit\n    cy.get(`${appNavigationLocators.header} ${appNavigationLocators.editButton}`).click();\n    cy.get(commonLocators.canvas).should(\"exist\");\n\n    // User profile dropdown\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.userProfileDropdownButton).click();\n    cy.get(appNavigationLocators.userProfileDropdownMenu).should(\"exist\");\n\n    // Back to editor\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopInline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. In an app with 15 pages, the navbar should be scrollable","suites":["Test Top + Stacked navigation style"],"updatePoint":{"line":24,"column":65,"index":965},"line":24,"code":"  it(\"1. In an app with 15 pages, the navbar should be scrollable\", () => {\n    const pageName = \"Page9 - with long long name\";\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.scrollArrows).should(\"have.length\", 2);\n    cy.get(appNavigationLocators.scrollArrows).last().should(\"be.visible\");\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).should(\"not.be.visible\");\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).should(\"be.visible\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopStacked_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Page change should work","suites":["Test Top + Stacked navigation style"],"updatePoint":{"line":36,"column":32,"index":1580},"line":36,"code":"  it(\"2. Page change should work\", () => {\n    const pageName = \"Page1 - with long long name\";\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).click({\n      force: true\n    });\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).parent().parent().parent().parent().parent().should(\"have.class\", \"is-active\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopStacked_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Left and right scroll arrows should work","suites":["Test Top + Stacked navigation style"],"updatePoint":{"line":44,"column":49,"index":1984},"line":44,"code":"  it(\"3. Left and right scroll arrows should work\", () => {\n    const pageName = \"Page1 - with long long name\";\n\n    // Navigate to Page1\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).click({\n      force: true\n    });\n\n    // Check for scroll arrows\n    cy.get(appNavigationLocators.scrollArrows).should(\"have.length\", 2);\n\n    // Scroll to the right and page 1 should not be visible\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).should(\"be.visible\");\n    cy.get(appNavigationLocators.scrollArrows).last().trigger(\"mousedown\");\n    cy.wait(3000);\n    cy.get(appNavigationLocators.scrollArrows).last().trigger(\"mouseup\", {\n      force: true\n    });\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).should(\"not.be.visible\");\n\n    // Scroll to the left again and page 1 should be visible\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).should(\"not.be.visible\");\n    cy.get(appNavigationLocators.scrollArrows).first().trigger(\"mousedown\");\n    cy.wait(3000);\n    cy.get(appNavigationLocators.scrollArrows).first().trigger(\"mouseup\", {\n      force: true\n    });\n    cy.get(appNavigationLocators.navigationMenuItem).contains(pageName).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopStacked_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Navigation's background should be default to white, and should change when background color is set to theme","suites":["Test Top + Stacked navigation style"],"updatePoint":{"line":73,"column":116,"index":3307},"line":73,"code":"  it(\"4. Navigation's background should be default to white, and should change when background color is set to theme\", () => {\n    // The background should be white since light color style is default\n    cy.get(appNavigationLocators.topStacked).should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");\n\n    // Changing color style to theme should change navigation's background color\n    deployMode.NavigateBacktoEditor();\n    cy.get(appNavigationLocators.appSettingsButton).click();\n    cy.get(appNavigationLocators.navigationSettingsTab).click();\n    cy.get(appNavigationLocators.navigationSettings.colorStyleOptions.theme).click({\n      force: true\n    });\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.topStacked).should(\"have.css\", \"background-color\", \"rgb(85, 61, 233)\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopStacked_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Application name, share button, edit button, and user dropdown should be available in the app header","suites":["Test Top + Stacked navigation style"],"updatePoint":{"line":87,"column":109,"index":4104},"line":87,"code":"  it(\"5. Application name, share button, edit button, and user dropdown should be available in the app header\", () => {\n    cy.get(appNavigationLocators.applicationName).should(\"exist\");\n    cy.get(appNavigationLocators.shareButton).should(\"exist\");\n    cy.get(appNavigationLocators.editButton).should(\"exist\");\n    cy.get(appNavigationLocators.userProfileDropdownButton).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopStacked_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Share button should open the share modal, edit button should take us back to the editor, and clicking on user profile button should open up the dropdown menu","suites":["Test Top + Stacked navigation style"],"updatePoint":{"line":93,"column":166,"index":4556},"line":93,"code":"  it(\"6. Share button should open the share modal, edit button should take us back to the editor, and clicking on user profile button should open up the dropdown menu\", () => {\n    // Share\n    cy.get(`${appNavigationLocators.header} ${appNavigationLocators.shareButton}`).click();\n    cy.wait(1000);\n    cy.get(appNavigationLocators.modal).should(\"exist\");\n    cy.get(appNavigationLocators.modalClose).first().click({\n      force: true\n    });\n\n    // Edit\n    cy.get(`${appNavigationLocators.header} ${appNavigationLocators.editButton}`).click();\n    cy.get(commonLocators.canvas).should(\"exist\");\n\n    // User profile dropdown\n    deployMode.DeployApp();\n    cy.get(appNavigationLocators.userProfileDropdownButton).click();\n    cy.get(appNavigationLocators.userProfileDropdownMenu).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/AppNavigation/TopStacked_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Super user can access audit logs page","suites":["Audit logs"],"updatePoint":{"line":27,"column":46,"index":956},"line":27,"code":"  it(\"1. Super user can access audit logs page\", () => {\n    if (CURRENT_REPO === REPO.CE) {\n      cy.LogOut();\n      cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n      cy.get(locators.AdminSettingsEntryLink).should(\"be.visible\");\n      cy.get(locators.AdminSettingsEntryLink).click();\n      cy.url().should(\"contain\", \"/settings/general\");\n      cy.get(locators.LeftPaneAuditLogsLink).should(\"be.visible\");\n      cy.get(locators.LeftPaneAuditLogsLink).click();\n      cy.wait(2000);\n      cy.get(locators.UpgradeContainer).should(\"be.visible\");\n      cy.get(locators.HeaderContainer).should(\"be.visible\");\n      cy.get(locators.CarouselContainer).should(\"be.visible\");\n      cy.get(locators.FooterContainer).should(\"be.visible\");\n      cy.get(locators.Heading).should(\"be.visible\").should(\"have.text\", \"Introducing audit logs\");\n      cy.get(locators.SubHeadings).should(\"be.visible\").should(\"have.text\", \"See a timestamped trail of events in your workspace. Filter by type of event, user, resource ID, and time. Drill down into each event to investigate further.\");\n      cy.get(locators.Left).should(\"be.visible\").children().should(\"have.length\", 3);\n      cy.get(locators.Right).should(\"be.visible\").children().should(\"have.length\", 1);\n    }\n  });","file":"e2e/Regression/ClientSide/AuditLogs/Audit_logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Opens autocomplete for bindings","suites":["Dynamic input autocomplete"],"updatePoint":{"line":8,"column":40,"index":344},"line":8,"code":"  it(\"1. Opens autocomplete for bindings\", () => {\n    entityExplorer.SelectEntityByName(\"Aditya\");\n    entityExplorer.SelectEntityByName(\"Button2\", \"TestModal\");\n    cy.testJsontext(\"label\", \"\", {\n      parseSpecialCharSequences: true\n    });\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      cy.get(dynamicInputLocators.input).first().click({\n        force: true\n      }).type(\"{{\", {\n        parseSpecialCharSequences: true\n      });\n\n      // Tests if autocomplete will open\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // Tests if data tree entities are sorted\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"Button1.text\");\n      cy.testJsontext(\"label\", \"\", {\n        parseSpecialCharSequences: true\n      });\n      // Tests if \"No suggestions\" message will pop if you type any garbage\n      cy.get(dynamicInputLocators.input).first().click({\n        force: true\n      }).type(\"{uparrow}\", {\n        parseSpecialCharSequences: true\n      }).type(\"{ctrl}{shift}{downarrow}\", {\n        parseSpecialCharSequences: true\n      }).type(\"{backspace}\", {\n        parseSpecialCharSequences: true\n      }).then(() => {\n        cy.get(dynamicInputLocators.input).first().click({\n          force: true\n        }).type(\"{{garbage\", {\n          parseSpecialCharSequences: true\n        });\n        cy.get(\".CodeMirror-Tern-tooltip\").should(\"have.text\", \"No suggestions\");\n      });\n    });\n    cy.evaluateErrorMessage(\"garbage is not defined\");\n  });","file":"e2e/Regression/ClientSide/Autocomplete/autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test if action inside non event field throws error & open current value popup","suites":["Dynamic input autocomplete"],"updatePoint":{"line":56,"column":86,"index":2141},"line":56,"code":"  it(\"2. Test if action inside non event field throws error & open current value popup\", () => {\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{backspace}\".repeat(12)).type(\"{{storeValue()}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(1000);\n    cy.evaluateErrorMessage(\"Found a reference to {{actionName}} during evaluation. Data fields cannot execute framework actions. Please remove any direct/indirect references to {{actionName}} and try again.\".replaceAll(\"{{actionName}}\", \"storeValue()\"));\n  });","file":"e2e/Regression/ClientSide/Autocomplete/autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create DS for SQL autocompletion testing","suites":["SQL Autocompletion"],"updatePoint":{"line":7,"column":46,"index":309},"line":7,"code":"  it(\"Create DS for SQL autocompletion testing\", () => {\n    dataSources.CreateDataSource(\"Postgres\");\n    cy.get(\"@dsName\").then($dsName => {\n      dsName = $dsName;\n    });\n  });","file":"e2e/Regression/ClientSide/Autocomplete/Autocomplete_sql_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"Shows autocompletion hints in SQL","suites":["SQL Autocompletion"],"updatePoint":{"line":13,"column":39,"index":483},"line":13,"code":"  it(\"Shows autocompletion hints in SQL\", () => {\n    dataSources.NavigateFromActiveDS(dsName, true);\n    agHelper.GetNClick(dataSources._templateMenu);\n    cy.get(locator._codeMirrorTextArea).focus().type(\"select\");\n    // Hints should exist\n    cy.get(locator._hints).should(\"exist\");\n    // \"select\" should be parsed as a keyword and should not be capitalised\n    cy.get(locator._sqlKeyword).contains(\"select\");\n    // Hints should disappear on mouse down\n    cy.get(locator._codeMirrorTextArea).realMouseDown();\n    cy.get(locator._hints).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Autocomplete/Autocomplete_sql_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should show Property Pane Suggestions on / command & when typing {{}}","suites":["Property Pane Suggestions"],"updatePoint":{"line":15,"column":78,"index":416},"line":15,"code":"  it(\"1. Should show Property Pane Suggestions on / command & when typing {{}}\", () => {\n    EntityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    PropertyPane.TypeTextIntoField(\"Label\", \"/\");\n    AggregateHelper.GetNAssertElementText(CommonLocators._hints, \"Bind data\");\n    AggregateHelper.GetNAssertElementText(CommonLocators._hints, \"New binding\", \"have.text\", 1);\n    AggregateHelper.GetNClickByContains(CommonLocators._hints, \"New binding\");\n    PropertyPane.ValidatePropertyFieldValue(\"Label\", \"{{}}\");\n\n    //typing {{}}\n    EntityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    PropertyPane.TypeTextIntoField(\"Label\", \"{{\");\n    AggregateHelper.GetNAssertElementText(CommonLocators._hints, \"appsmith\");\n    AggregateHelper.GetNClickByContains(CommonLocators._hints, \"appsmith\");\n    PropertyPane.ValidatePropertyFieldValue(\"Label\", \"{{appsmith}}\");\n  });","file":"e2e/Regression/ClientSide/Autocomplete/PropertyPaneSuggestion_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. [Bug]-[2040]: undefined binding on / command dropdown","suites":["Property Pane Suggestions"],"updatePoint":{"line":30,"column":62,"index":1278},"line":30,"code":"  it(\"2. [Bug]-[2040]: undefined binding on / command dropdown\", () => {\n    // Create js object\n    JSEditor.CreateJSObject(\"\");\n    EntityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    PropertyPane.TypeTextIntoField(\"Label\", \"/\");\n    AggregateHelper.GetNAssertElementText(CommonLocators._hints, \"JSObject1\", \"have.text\", 1);\n  });","file":"e2e/Regression/ClientSide/Autocomplete/PropertyPaneSuggestion_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should add Autocomplete Suggestions on Tab press","suites":["Property Pane Suggestions"],"updatePoint":{"line":37,"column":57,"index":1615},"line":37,"code":"  it(\"3. Should add Autocomplete Suggestions on Tab press\", () => {\n    EntityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    PropertyPane.TypeTextIntoField(\"Label\", \"{{\");\n    AggregateHelper.GetNAssertElementText(CommonLocators._hints, \"appsmith\");\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    cy.get(\"body\").tab();\n    PropertyPane.ValidatePropertyFieldValue(\"Label\", \"{{appsmith}}\");\n  });","file":"e2e/Regression/ClientSide/Autocomplete/PropertyPaneSuggestion_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api and execute api","suites":["Test Create Api and Bind to List widget"],"updatePoint":{"line":12,"column":43,"index":468},"line":12,"code":"  it(\"1. Test_Add users api and execute api\", function () {\n    _.apiPage.CreateAndFillApi(this.data.userApi + \"/mock-api?records=10\");\n    cy.RunAPI();\n    cy.get(apiLocators.jsonResponseTab).click();\n    cy.get(apiLocators.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      valueToTest = `${text.match(/\"(.*)\"/)[0].split('\"').join(\"\")}`;\n      cy.log(valueToTest);\n      cy.log(\"val1:\" + valueToTest);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test_Validate the Api data is updated on List widget","suites":["Test Create Api and Bind to List widget"],"updatePoint":{"line":22,"column":61,"index":937},"line":22,"code":"  it(\"2. Test_Validate the Api data is updated on List widget\", function () {\n    _.entityExplorer.SelectEntityByName(\"List1\");\n    cy.testJsontext(\"items\", \"{{Api1.data}}\");\n    cy.get(\".t--draggable-textwidget span\").should(\"have.length\", 8);\n    cy.get(\".t--draggable-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n    cy.PublishtheApp();\n    cy.wait(\"@postExecute\").then(interception => {\n      valueToTest = JSON.stringify(interception.response.body.data.body[0].name).replace(/['\"]+/g, \"\");\n    });\n    cy.waitUntil(() => cy.get(\".t--widget-textwidget span\").should(\"be.visible\"), {\n      errorMsg: \"Pubish app page is not loaded evn after 20 secs\",\n      timeout: 20000,\n      interval: 1000\n    }).then(() => cy.wait(500));\n    cy.get(\".t--widget-textwidget span\").should(\"have.length\", 8);\n    cy.get(\".t--widget-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Test_Validate the list widget ","suites":["Test Create Api and Bind to List widget"],"updatePoint":{"line":43,"column":39,"index":1908},"line":43,"code":"  it(\"3. Test_Validate the list widget \", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(\"@postExecute\").then(interception => {\n      valueToTest = JSON.stringify(interception.response.body.data.body[0].name).replace(/['\"]+/g, \"\");\n    });\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    cy.moveToStyleTab();\n    cy.testJsontext(\"itemspacing\\\\(px\\\\)\", \"50\");\n    cy.get(\".t--draggable-textwidget span\").should(\"have.length\", 6);\n    cy.get(\".t--draggable-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n    cy.PublishtheApp();\n    cy.wait(\"@postExecute\").then(interception => {\n      valueToTest = JSON.stringify(interception.response.body.data.body[0].name).replace(/['\"]+/g, \"\");\n    });\n    cy.waitUntil(() => cy.get(\".t--widget-textwidget span\").should(\"be.visible\"), {\n      errorMsg: \"Pubish app page is not loaded evn after 20 secs\",\n      timeout: 20000,\n      interval: 1000\n    }).then(() => cy.wait(500));\n    cy.get(\".t--widget-textwidget span\").should(\"have.length\", 6);\n    cy.get(\".t--widget-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Will load an api on load","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":10,"column":33,"index":494},"line":10,"code":"  it(\"1. Will load an api on load\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"PageLoadApi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.WaitAutoSave();\n    cy.get(apiwidget.settings).click({\n      force: true\n    });\n    cy.get(apiwidget.onPageLoad).click({\n      force: true\n    });\n    cy.wait(\"@setExecuteOnLoad\");\n    cy.reload();\n  });","file":"e2e/Regression/ClientSide/Binding/Api_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Input widget updated with deafult data","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":24,"column":47,"index":900},"line":24,"code":"  it(\"2. Input widget updated with deafult data\", function () {\n    cy.selectEntityByName(\"Widgets\");\n    cy.selectEntityByName(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(\"3\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"3\");\n  });","file":"e2e/Regression/ClientSide/Binding/Api_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Binding second input widget with API on PageLoad data and default data from input1 widget ","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":31,"column":99,"index":1352},"line":31,"code":"  it(\"3. Binding second input widget with API on PageLoad data and default data from input1 widget \", function () {\n    cy.selectEntityByName(\"Input3\");\n    cy.get(widgetsPage.defaultInput).type(testdata.pageloadBinding, {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"3\");\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", \"23\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Binding/Api_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate the Button binding with Text Widget with Recaptcha token with empty key","suites":["excludeForAirgap"],"updatePoint":{"line":8,"column":89,"index":436},"line":8,"code":"  it(\"1. Validate the Button binding with Text Widget with Recaptcha token with empty key\", function () {\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.GetText(_.locators._widgetInCanvas(\"textwidget\") + \" span\").should(\"be.empty\");\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    _.agHelper.SelectDropdownList(\"Google reCAPTCHA version\", \"reCAPTCHA v2\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.GetText(_.locators._widgetInCanvas(\"textwidget\") + \" span\").should(\"be.empty\");\n    _.agHelper.SelectDropdownList(\"Google reCAPTCHA version\", \"reCAPTCHA v3\");\n  });","file":"e2e/Regression/ClientSide/Binding/Button_Text_WithRecaptcha_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate the Button binding with Text Widget with Recaptcha Token with invalid key before using valid key","suites":["excludeForAirgap"],"line":19,"code":"  it.skip(\"Validate the Button binding with Text Widget with Recaptcha Token with invalid key before using valid key\", function () {","file":"e2e/Regression/ClientSide/Binding/Button_Text_WithRecaptcha_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"2. Validate the Button binding with Text Widget with Recaptcha Token with v2Key & upward compatibilty doesnt work","suites":["excludeForAirgap"],"updatePoint":{"line":47,"column":119,"index":2234},"line":47,"code":"  it(\"2. Validate the Button binding with Text Widget with Recaptcha Token with v2Key & upward compatibilty doesnt work\", function () {\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    _.propPane.UpdatePropertyFieldValue(\"Google reCAPTCHA key\", testdata.v2Key);\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.Sleep();\n    _.agHelper.GetText(_.locators._widgetInCanvas(\"textwidget\") + \" span\").should(\"be.empty\");\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    _.agHelper.SelectDropdownList(\"Google reCAPTCHA version\", \"reCAPTCHA v2\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.Sleep();\n    _.agHelper.GetText(_.locators._widgetInCanvas(\"textwidget\") + \" span\").should(\"not.be.empty\");\n    _.agHelper.SelectDropdownList(\"Google reCAPTCHA version\", \"reCAPTCHA v3\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.Sleep();\n  });","file":"e2e/Regression/ClientSide/Binding/Button_Text_WithRecaptcha_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate the Button binding with Text Widget with Recaptcha Token with v3Key & v2key for backward compatible","suites":["excludeForAirgap"],"updatePoint":{"line":62,"column":117,"index":3097},"line":62,"code":"  it(\"3. Validate the Button binding with Text Widget with Recaptcha Token with v3Key & v2key for backward compatible\", function () {\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    _.propPane.UpdatePropertyFieldValue(\"Google reCAPTCHA key\", testdata.v3Key);\n    _.agHelper.SelectDropdownList(\"Google reCAPTCHA version\", \"reCAPTCHA v3\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.Sleep();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(_.locators._specificToast(\"Google Re-Captcha token generation failed!\")).length || $ele.find(_.locators._widgetInCanvas(\"textwidget\") + \" span\").text() == \"\") {\n        _.agHelper.ClickButton(\"Submit\");\n      }\n    });\n    _.agHelper.GetText(_.locators._widgetInCanvas(\"textwidget\") + \" span\").should(\"not.be.empty\");\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    _.agHelper.SelectDropdownList(\"Google reCAPTCHA version\", \"reCAPTCHA v2\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.AssertContains(\"Google Re-Captcha token generation failed!\"); //toast doesnt come when run in CI!\n  });","file":"e2e/Regression/ClientSide/Binding/Button_Text_WithRecaptcha_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate the Button binding with Text Widget with Recaptcha Token with invalid key","suites":["excludeForAirgap"],"line":81,"code":"  it.skip(\"Validate the Button binding with Text Widget with Recaptcha Token with invalid key\", function () {","file":"e2e/Regression/ClientSide/Binding/Button_Text_WithRecaptcha_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Add an API by binding a button in its header","suites":["Bind a button and Api usecase"],"updatePoint":{"line":14,"column":53,"index":650},"line":14,"code":"  it(\"1. Add an API by binding a button in its header\", function () {\n    _.apiPage.CreateAndFillApi(this.data.userApi + \"/mock-api?records=10\");\n    cy.get(apiwidget.headerKey).first().click({\n      force: true\n    }).type(\"key\", {\n      parseSpecialCharSequences: true\n    });\n    cy.get(apiwidget.headerValue).first().click({\n      force: true\n    }).type(\"{{Button1.text\", {\n      parseSpecialCharSequences: true\n    });\n    cy.RunAPI();\n    cy.get(apiLocators.jsonResponseTab).click();\n    cy.get(apiLocators.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      valueToTest = `${text.match(/\"(.*)\"/)[0].split('\"').join(\"\")}`;\n      cy.log(valueToTest);\n      apiData = valueToTest;\n      cy.log(\"val1:\" + valueToTest);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Button_with_API_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Button-Name updation & API datasource binding with button name validation","suites":["Bind a button and Api usecase"],"updatePoint":{"line":35,"column":82,"index":1448},"line":35,"code":"  it(\"2. Button-Name updation & API datasource binding with button name validation\", function () {\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    //changing the Button Name\n    cy.widgetText(testdata.buttonName, widgetsPage.buttonWidget, widgetsPage.widgetNameSpan);\n\n    //API datasource binding with button name validation\n    _.entityExplorer.SelectEntityByName(\"Api1\", \"Queries/JS\");\n    cy.get(apiwidget.headerValue).first().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.contains(testdata.buttonName);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Button_with_API_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Button widgets widget on click info message valdiation with font family","suites":["Widget Grouping"],"updatePoint":{"line":7,"column":80,"index":307},"line":7,"code":"  it(\"1. Button widgets widget on click info message valdiation with font family\", function () {\n    cy.get(\".t--buttongroup-widget button\").contains(\"Add\").click({\n      force: true\n    });\n    cy.get(\".t--buttongroup-widget button\").contains(\"More\").click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"test alert\");\n    cy.get(commonlocators.toastmsg).invoke(\"css\", \"font-family\").then(dropdownFont => {\n      cy.PublishtheApp();\n      cy.get(\".t--buttongroup-widget button\").contains(\"Add\").click({\n        force: true\n      });\n      cy.get(\".t--buttongroup-widget button\").contains(\"More\").click({\n        force: true\n      });\n      cy.get(commonlocators.toastmsg).contains(\"test alert\");\n      cy.get(commonlocators.toastmsg).invoke(\"css\", \"font-family\").then(publishdropdownFont => {\n        expect(dropdownFont).to.equal(publishdropdownFont);\n      });\n      cy.goToEditFromPublish();\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/ButtonGroup_binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Button widget with action navigate to page","suites":["Binding the button Widgets and validating NavigateTo Page functionality"],"updatePoint":{"line":11,"column":51,"index":626},"line":11,"code":"  it(\"1. Button widget with action navigate to page\", function () {\n    entityExplorer.SelectEntityByName(\"Button1\");\n    propPane.SelectPlatformFunction(\"onClick\", \"Navigate to\");\n    agHelper.GetNClick(propPane._navigateToType(\"URL\"));\n    cy.get(\"label\").contains(\"Enter URL\").siblings(\"div\").within(() => {\n      cy.get(\".t--code-editor-wrapper\").type(testdata.externalPage);\n    });\n\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(300);\n  });","file":"e2e/Regression/ClientSide/Binding/ButtonWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Button click should take the control to page link validation","suites":["Binding the button Widgets and validating NavigateTo Page functionality"],"updatePoint":{"line":22,"column":69,"index":1120},"line":22,"code":"  it(\"2. Button click should take the control to page link validation\", function () {\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(publish.buttonWidget).click();\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(publish.buttonWidget).should(\"not.exist\");\n    cy.go(\"back\");\n    cy.get(publish.backToEditor).click();\n    cy.wait(\"@getPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Binding/ButtonWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Text-Chart Binding Functionality View","suites":["Text-Chart Binding Functionality"],"updatePoint":{"line":10,"column":46,"index":509},"line":10,"code":"  it(\"1. Text-Chart Binding Functionality View\", function () {\n    entityExplorer.SelectEntityByName(\"Text1\", \"Container3\");\n    cy.testJsontext(\"text\", JSON.stringify(this.data.chartInputValidate));\n    cy.get(commonlocators.TextInside).should(\"have.text\", JSON.stringify(this.data.chartInputValidate));\n    cy.closePropertyPane();\n    entityExplorer.SelectEntityByName(\"Chart1\", \"Container1\");\n    cy.get(viewWidgetsPage.chartType).last().click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option\").children().contains(\"Column chart\").click();\n    cy.get(\".t--property-control-charttype span.rc-select-selection-item span\").last().should(\"have.text\", \"Column chart\");\n    cy.testJsontext(\"chart-series-data-control\", \"{{Text1.text}}\");\n    cy.closePropertyPane();\n    const labels = [this.data.Chartval[0], this.data.Chartval[1], this.data.Chartval[2]];\n    [0, 1, 2].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Binding/ChartText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Text-Chart Binding Functionality Publish","suites":["Text-Chart Binding Functionality"],"updatePoint":{"line":32,"column":49,"index":1626},"line":32,"code":"  it(\"2. Text-Chart Binding Functionality Publish\", function () {\n    cy.get(publish.chartCanvasVal).should(\"be.visible\");\n    cy.get(publish.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [this.data.Chartval[0], this.data.Chartval[1], this.data.Chartval[2]];\n    [0, 1, 2].forEach(k => {\n      cy.get(publish.rectChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(publish.chartLab).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", JSON.stringify(this.data.chartInputValidate));\n  });","file":"e2e/Regression/ClientSide/Binding/ChartText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. DatePicker-Text, Validate selectedDate functionality","suites":["Binding the Datepicker and Text Widget"],"line":12,"code":"  it.skip(\"1. DatePicker-Text, Validate selectedDate functionality\", function () {","file":"e2e/Regression/ClientSide/Binding/DatePicker_Text_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"2. DatePicker1-text: Change the date in DatePicker1 and Validate the same in text widget","suites":["Binding the Datepicker and Text Widget"],"line":43,"code":"  it.skip(\"2. DatePicker1-text: Change the date in DatePicker1 and Validate the same in text widget\", function () {","file":"e2e/Regression/ClientSide/Binding/DatePicker_Text_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"3. Validate the Date is not changed in DatePicker2","suites":["Binding the Datepicker and Text Widget"],"line":77,"code":"  it.skip(\"3. Validate the Date is not changed in DatePicker2\", function () {","file":"e2e/Regression/ClientSide/Binding/DatePicker_Text_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"4. DatePicker-Text, Validate Multiple Binding","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":87,"column":51,"index":3233},"line":87,"code":"  it(\"4. DatePicker-Text, Validate Multiple Binding\", function () {\n    /**\n     * Bind the DatePicker1 and DatePicker2 along with hard coded text to Text widget\n     */\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.isDisabled}} DatePicker {{DatePicker2.isDisabled}}\");\n    cy.get(commonlocators.labelTextStyle).should(\"contain.text\", \"DatePicker\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.labelTextStyle).should(\"contain.text\", \"DatePicker\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Checks if on deselection of date triggers the onDateSelected action or not.","suites":["Binding the Datepicker and Text Widget"],"line":100,"code":"  it.skip(\"5. Checks if on deselection of date triggers the onDateSelected action or not.\", function () {","file":"e2e/Regression/ClientSide/Binding/DatePicker_Text_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Checks if delete will remove bindings","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":7,"column":46,"index":303},"line":7,"code":"  it(\"1. Checks if delete will remove bindings\", function () {\n    cy.get(widgetsPage.textWidget).first().click({\n      force: true\n    });\n    cy.get(\"body\").type(\"{del}\", {\n      force: true\n    });\n    cy.get(widgetsPage.textWidget).first().should(\"not.have.text\", \"Label\");\n  });","file":"e2e/Regression/ClientSide/Binding/Entity_delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create MyPage and valdiate if its successfully created","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":23,"column":63,"index":927},"line":23,"code":"  it(\"1. Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2);\n    cy.wait(5000); //dsl to settle!\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Binding/Input_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Input widget test with default value from table widget","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":32,"column":63,"index":1295},"line":32,"code":"  it(\"2. Input widget test with default value from table widget\", function () {\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    entityExplorer.SelectEntityByName(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(testdata.defaultInputWidget);\n    propPane.SelectPlatformFunction(\"onTextChanged\", \"Navigate to\");\n    cy.get(\".t--open-dropdown-Select-page\").click();\n    cy.get(commonlocators.singleSelectMenuItem).contains(pageid).click({\n      force: true\n    });\n    cy.assertPageSave();\n  });","file":"e2e/Regression/ClientSide/Binding/Input_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate NavigateTo Page functionality ","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":45,"column":48,"index":1836},"line":45,"code":"  it(\"3. Validate NavigateTo Page functionality \", function () {\n    cy.wait(4000);\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.wait(2000);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n      cy.get(widgetsPage.chartWidget).should(\"not.exist\");\n      cy.get(publish.inputGrp).first().type(\"123\").wait(2000);\n      cy.waitUntil(() => cy.get(widgetsPage.chartWidget).should(\"be.visible\"), {\n        errorMsg: \"Execute call did not complete evn after 20 secs\",\n        timeout: 20000,\n        interval: 1000\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Input_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":9,"column":63,"index":435},"line":9,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Input1\", \"Form1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Binding/InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validation of data displayed in input widgets based on sorting","suites":["Binding the Table and input Widget"],"updatePoint":{"line":15,"column":71,"index":819},"line":15,"code":"  it(\"2. Validation of data displayed in input widgets based on sorting\", function () {\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"0\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2381224\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validation of column id displayed in input widgets based on sorted column","suites":["Binding the Table and input Widget"],"updatePoint":{"line":39,"column":82,"index":1813},"line":39,"code":"  it(\"3. Validation of column id displayed in input widgets based on sorted column\", function () {\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.sortedColumn + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"id\");\n  });","file":"e2e/Regression/ClientSide/Binding/InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":9,"column":63,"index":437},"line":9,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Form1\");\n    _.entityExplorer.SelectEntityByName(\"Input1\", \"Widgets\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Binding/InputWidget_TableV2_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. validation of data displayed in input widgets based on sorting","suites":["Binding the Table and input Widget"],"updatePoint":{"line":15,"column":71,"index":821},"line":15,"code":"  it(\"2. validation of data displayed in input widgets based on sorting\", function () {\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"0\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2381224\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/InputWidget_TableV2_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. validation of column id displayed in input widgets based on sorted column","suites":["Binding the Table and input Widget"],"updatePoint":{"line":39,"column":82,"index":1819},"line":39,"code":"  it(\"3. validation of column id displayed in input widgets based on sorted column\", function () {\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.sortedColumn + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"id\");\n  });","file":"e2e/Regression/ClientSide/Binding/InputWidget_TableV2_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Dropdown widget test with invalid binding value","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":8,"column":56,"index":391},"line":8,"code":"  it(\"1. Dropdown widget test with invalid binding value\", function () {\n    entityExplorer.SelectEntityByName(\"Dropdown1\");\n    cy.testJsontext(\"options\", JSON.stringify(testdata.defaultdataBinding));\n    cy.evaluateErrorMessage(testdata.dropdownErrorMsg);\n    //Table widget test with invalid binding value\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.defaultdataBinding));\n    cy.evaluateErrorMessage(testdata.tableWidgetErrorMsg);\n  });","file":"e2e/Regression/ClientSide/Binding/Invalid_binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. switches the toggle to Button widget","suites":["JS Toggle tests"],"updatePoint":{"line":7,"column":45,"index":263},"line":7,"code":"  it(\"1. switches the toggle to Button widget\", () => {\n    entityExplorer.SelectEntityByName(\"Button1\");\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").should(\"have.class\", \"is-active\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"visible\", \"false\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").should(\"not.have.class\", \"is-active\");\n    cy.get(\".t--property-control-visible\").find(\"input\").should(\"not.have.attr\", \"checked\");\n  });","file":"e2e/Regression/ClientSide/Binding/JS_Toggle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. DragDrop Widget ","suites":[" widget test for validating reset action"],"updatePoint":{"line":30,"column":51,"index":1128},"line":30,"code":"    it(`1. DragDrop Widget ${testConfig.widgetName}`, function () {\n      cy.get(explorer.addWidget).click();\n      cy.dragAndDropToCanvas(widgetSelector, {\n        x: 300,\n        y: 200\n      });\n      cy.get(getWidgetSelector(widgetSelector)).should(\"exist\");\n    });","file":"e2e/Regression/ClientSide/Binding/MultiSelect_Button_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bind Button on click  and Text widget content","suites":[" widget test for validating reset action"],"updatePoint":{"line":38,"column":56,"index":1404},"line":38,"code":"    it(\"2. Bind Button on click  and Text widget content\", function () {\n      entityExplorer.SelectEntityByName(\"Button4\");\n      cy.get(PROPERTY_SELECTOR.onClick).find(\".t--js-toggle\").click();\n      cy.updateCodeInput(PROPERTY_SELECTOR.onClick, `{{resetWidget(\"${testConfig.widgetPrefixName}\",true).then(() => showAlert(\"success\"))}}`);\n      // Bind to stored value above\n      entityExplorer.SelectEntityByName(\"Text3\");\n      cy.updateCodeInput(PROPERTY_SELECTOR.text, testConfig.textBindingValue);\n      cy.closePropertyPane();\n      cy.get(\".rc-select-selector\").click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.get('.rc-select-item-option:contains(\"Blue\")').click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.get(\".t--text-widget-container\").each((item, index, list) => {\n        cy.wrap(item).should(\"contain.text\", \"BLUE\");\n      });\n      const inputs = testConfig.testCases;\n      cy.get(getWidgetSelector(WIDGET.BUTTON)).scrollIntoView().click({\n        force: true\n      });\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--widget-buttonwidget:contains('Submit')\").scrollIntoView().click({\n        force: true\n      });\n      cy.wait(4000);\n    });","file":"e2e/Regression/ClientSide/Binding/MultiSelect_Button_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Publish the app and validate reset action","suites":[" widget test for validating reset action"],"updatePoint":{"line":67,"column":52,"index":2601},"line":67,"code":"    it(\"3. Publish the app and validate reset action\", function () {\n      cy.PublishtheApp();\n      cy.get(\".rc-select-selection-overflow\").click({\n        force: true\n      });\n      cy.get(\".rc-select-item-option:contains('Blue')\").click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.get(\"button:contains('Submit')\").click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.get(\".t--text-widget-container\").each((item, index, list) => {\n        cy.wrap(item).should(\"not.contain.text\", \"BLUE\");\n      });\n      cy.get(\"div.Toastify__toast\").contains(\"success\");\n    });","file":"e2e/Regression/ClientSide/Binding/MultiSelect_Button_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget Functionality with multiple page","suites":["Table Widget with Input Widget and Navigate to functionality validation"],"updatePoint":{"line":12,"column":54,"index":637},"line":12,"code":"  it(\"1. Table Widget Functionality with multiple page\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, widgetsPage.widgetNameSpan);\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.TablePagination));\n    //Create MyPage and valdiate if its successfully created\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Binding/NavigateToFeatureValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate NavigateTo Page functionality ","suites":["Table Widget with Input Widget and Navigate to functionality validation"],"updatePoint":{"line":24,"column":48,"index":1221},"line":24,"code":"  it(\"2. Validate NavigateTo Page functionality \", function () {\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(4000);\n    cy.PublishtheApp();\n    cy.readTabledataPublish(\"1\", \"0\").then(tabDataP => {\n      const tabValueP = tabDataP;\n      cy.log(tabValueP);\n      cy.isSelectRow(1);\n      cy.get(\"input\").should(\"be.visible\");\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValueP);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/NavigateToFeatureValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Show binding prompt when there are no bindings in the editor","suites":["Binding prompt"],"updatePoint":{"line":9,"column":69,"index":425},"line":9,"code":"  it(\"1. Show binding prompt when there are no bindings in the editor\", () => {\n    entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", \" \");\n    cy.get(dynamicInput.bindingPrompt).should(\"be.visible\");\n    cy.get(widgetsPage.defaultInput).type(\"{{\");\n    cy.get(dynamicInput.bindingPrompt).should(\"not.be.visible\");\n  });","file":"e2e/Regression/ClientSide/Binding/No_Binding_Prompt_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Update table data and assert","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":24,"column":37,"index":660},"line":24,"code":"  it(\"1. Update table data and assert\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.get(widgetLocators.tabedataField).then($el => {\n      cy.updateCodeInput($el, updateData);\n      cy.readTabledata(\"1\", \"0\").then(cellData => {\n        cy.wrap(cellData).should(\"equal\", \"Product2\");\n      });\n    });\n    //Update chart data and assert\n    entityExplorer.SelectEntityByName(\"Chart1\");\n    cy.get(\".t--property-control-chart-series-data-control\").then($el => {\n      cy.updateCodeInput($el, updateData);\n      cy.get(viewWidgetsPage.chartWidget).find(\"svg\").find(\"text\").should(\"contain.text\", \"Product2\");\n      cy.get(viewWidgetsPage.chartWidget).find(\"svg\").find(\"rect\").should(\"have.length.greaterThan\", 0);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/SmartSubstitutionWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Publish and assert","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":40,"column":27,"index":1400},"line":40,"code":"  it(\"2. Publish and assert\", function () {\n    cy.PublishtheApp(false);\n    cy.readTabledata(\"1\", \"0\").then(cellData => {\n      cy.wrap(cellData).should(\"equal\", \"Product2\");\n    });\n    cy.get(publish.chartWidget).find(\"svg\").find(\"text\").should(\"contain.text\", \"Product2\");\n    cy.get(publish.chartWidget).find(\"svg\").find(\"rect\").should(\"have.length.greaterThan\", 0);\n  });","file":"e2e/Regression/ClientSide/Binding/SmartSubstitutionWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api and execute api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":10,"column":43,"index":451},"line":10,"code":"  it(\"1. Test_Add users api and execute api\", function () {\n    apiPage.CreateAndFillApi(this.data.userApi + \"/mock-api?records=10\");\n    cy.RunAPI();\n    cy.get(apiLocators.jsonResponseTab).click();\n    cy.get(apiLocators.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      const value = text.match(/\"(.*)\"/)[0];\n      cy.log(value);\n      apiData = value;\n      cy.log(\"val1:\" + value);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test_Validate the Api data is updated on Table widget","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":21,"column":62,"index":905},"line":21,"code":"  it(\"2. Test_Validate the Api data is updated on Table widget\", function () {\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.testJsontext(\"tabledata\", \"{{ Api1.data}}\");\n\n    /**\n     * readTabledata--> is to read the table contents\n     * @param --> \"row num\" and \"col num\"\n     */\n    cy.readTabledata(\"0\", \"5\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.PublishtheApp();\n    cy.wait(\"@postExecute\").then(interception => {\n      apiData = JSON.stringify(interception.response.body.data.body[0].name);\n    });\n    cy.readTabledataPublish(\"0\", \"5\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(\"@postExecute\").then(interception => {\n      apiData = JSON.stringify(interception.response.body.data.body[0].name);\n    });\n    cy.readTabledataPublish(\"0\", \"5\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":48,"column":88,"index":1969},"line":48,"code":"  it(\"3. Validate onSearchTextChanged function is called when configured for search text\", function () {\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.togglebarDisable(\".t--property-control-enableclientsidesearch input[type='checkbox']\");\n    cy.get(\".t--widget-tablewidget .t--search-input\").first().type(\"Currey\");\n    cy.wait(3000);\n\n    // Captures the API call made on search\n    cy.wait(\"@postExecute\").then(interception => {\n      apiData = JSON.stringify(interception.response.body.data.body[0].name);\n    });\n    cy.readTabledataPublish(\"0\", \"5\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":6,"column":85,"index":264},"line":6,"code":"  it(\"Validate onSearchTextChanged function is called when configured for search text\", function () {\n    cy.wait(5000);\n    // input text in search bar\n    cy.get(\".t--widget-tablewidget .t--search-input input\").first().click().type(\"2\");\n    cy.wait(2000);\n    // Verify it filtered the table\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    });\n    // Input onsearchtextchanged control\n    cy.get(\".t--property-control-onsearchtextchanged .t--js-toggle\").first().click();\n    cy.testJsontext(\"onsearchtextchanged\", \"{{showAlert('12')}}\");\n    // Verify ClientSideSearch toggle is visible\n    cy.get(\".t--property-control-enableclientsidesearch\").should(\"exist\");\n\n    // Verify filter still works\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    });\n    // Disable Client Search\n    cy.togglebarDisable(\".t--property-control-enableclientsidesearch input[type='checkbox']\");\n    cy.wait(1000); //wait & then read the table value\n    // Verify Client Search doesnt work\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#1\");\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Table_ClientSide_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":9,"column":63,"index":435},"line":9,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Form1\");\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    //validation of data displayed in input widgets based on search value set\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"defaultsearchtext\", \"2736212\");\n    cy.wait(\"@updateLayout\").isSelectRow(0);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Table_DefaultSearch_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":11,"column":63,"index":477},"line":11,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Form1\");\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    //validation of data displayed in input widgets based on selected row\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.readTabledataPublish(\"2\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Table_selectedRow_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget toggle test for text alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":14,"column":52,"index":617},"line":14,"code":"  it(\"1. Table widget toggle test for text alignment\", function () {\n    ee.SelectEntityByName(\"Table1\");\n    cy.editColumn(\"id\");\n    //cy.movetoStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Text align\", testdata.bindingAlign);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table widget change text size and validate","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":24,"column":51,"index":1048},"line":24,"code":"  it(\"2. Table widget change text size and validate\", function () {\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    //cy.movetoStyleTab();\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    });\n    agHelper.Sleep();\n    cy.selectTxtSize(\"XL\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"30px\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget toggle test for vertical Alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":34,"column":56,"index":1406},"line":34,"code":"  it(\"3. Table widget toggle test for vertical Alignment\", function () {\n    //cy.movetoStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Vertical alignment\", testdata.bindingVerticalAlig);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-start\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget toggle test for text size","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":42,"column":47,"index":1778},"line":42,"code":"  it(\"4. Table widget toggle test for text size\", function () {\n    //cy.movetoStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Text size\", testdata.bindingSize);\n    cy.wait(2000);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-size\", \"24px\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget toggle test for style Alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":51,"column":53,"index":2144},"line":51,"code":"  it(\"5. Table widget toggle test for style Alignment\", function () {\n    //cy.movetoStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Font Style\", testdata.bindingStyle);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget toggle test for text color","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":59,"column":48,"index":2494},"line":59,"code":"  it(\"6. Table widget toggle test for text color\", function () {\n    //cy.movetoStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Text color\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"color\", \"rgb(0, 128, 0)\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget toggle test for background color","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":67,"column":54,"index":2860},"line":67,"code":"  it(\"7. Table widget toggle test for background color\", function () {\n    //cy.movetoStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Cell Background\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"background\", \"rgb(0, 128, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background\", \"rgb(255, 0, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"check the cell styles before and after sorting","suites":["Table Widget condtional formatting to remain consistent"],"updatePoint":{"line":8,"column":52,"index":380},"line":8,"code":"  it(\"check the cell styles before and after sorting\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    //Check Font weight, font style, and text color before sorting\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"font-weight\", \"700\");\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"font-weight\", \"400\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"font-style\", \"italic\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n\n    //Check Font weight, font style, and text color after sorting\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"font-weight\", \"700\");\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"font-weight\", \"400\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"font-style\", \"italic\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Widget__CondtionalFormatting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":10,"column":62,"index":514},"line":10,"code":"  it(\"1. Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n    //Validate Table with API data and then add a column\n    _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.readTabledata(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    cy.readTabledata(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    cy.addColumn(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.editColName(\"UpdatedColName\");\n    cy.readTabledataPublish(\"0\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValue(testdata.currentRowEmail);\n      cy.readTabledataPublish(\"0\", \"2\").then(tabData => {\n        expect(tabData).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check Image alignment is working as expected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":41,"column":53,"index":1827},"line":41,"code":"  it(\"2. Check Image alignment is working as expected\", function () {\n    _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.editColumn(\"avatar\");\n    cy.changeColumnType(\"Image\", false);\n    cy.closePropertyPane();\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"50% 50%\");\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"100% 50%\");\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"0% 50%\");\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Update table json data and check the derived column values after update","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":65,"column":80,"index":2922},"line":65,"code":"  it(\"3. Update table json data and check the derived column values after update\", function () {\n    _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.backFromPropertyPanel();\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"name\");\n    cy.tableColumnDataValidation(\"status\");\n    cy.tableColumnDataValidation(\"gender\");\n    cy.tableColumnDataValidation(\"avatar\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"address\");\n    cy.tableColumnDataValidation(\"customColumn1\");\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\");\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.get(\".draggable-header:contains('UpdatedColName')\").scrollIntoView().should(\"be.visible\");\n    cy.readTabledataPublish(\"1\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      cy.readTabledataPublish(\"1\", \"2\").then(tabData => {\n        cy.log(\"computed value of plain text \" + tabData);\n        expect(tabData).to.be.equal(tabValue);\n      });\n      cy.closePropertyPane();\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table & Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":8,"column":115,"index":437},"line":8,"code":"  it(\"1. Create an API and Execute the API and bind with Table & Validate Table with API data and then add a column\", function () {\n    _.apiPage.CreateAndFillApi(this.data.paginationUrl + this.data.paginationParam);\n    cy.RunAPI();\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    cy.get(`.t--widget-tablewidget .page-item`).first().should(\"contain\", \"1\");\n    cy.intercept(\"/api/v1/actions/execute\").as(\"getNextPage\");\n    cy.get(`.t--widget-tablewidget .t--table-widget-next-page`).first().click();\n    cy.wait(\"@getNextPage\").then(interception => {\n      const hasPaginationField = interception.request.body.includes('\"paginationField\":\"NEXT\"');\n      expect(hasPaginationField).to.equal(true);\n    });\n    cy.wait(2000);\n    cy.get(`.t--widget-tablewidget .page-item`).first().should(\"contain\", \"2\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Binding/Table_Widget_API_Pagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add Paginate with Table Page No and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":11,"column":65,"index":609},"line":11,"code":"  it(\"1. Test_Add Paginate with Table Page No and Execute the Api\", function () {\n    cy.wait(3000);\n    /**Create an Api1 of Paginate with Table Page No */\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"e2e/Regression/ClientSide/Binding/TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table-Text, Validate Server Side Pagination of Paginate with Table Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":83,"index":884},"line":17,"code":"  it(\"2. Table-Text, Validate Server Side Pagination of Paginate with Table Page No\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.EnableAllCodeEditors();\n    /**Bind Api1 with Table widget */\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    /**Bind Table with Textwidget with selected row */\n    entityExplorer.SelectEntityByName(\"Text1\", \"Widgets\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.avatar}}\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n\n    /**Validate Table data on current page(page1) */\n    cy.readTabledata(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    //cy.get(commonlocators.tableNextPage).click({ force: true });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    //cy.wait(5000);\n    /*\n    cy.wait(\"@postExecute\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    cy.validateToastMessage(\"done\");\n    /**Validate Table data on next page(page2) */\n    //cy.ValidateTableData(\"11\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":47,"column":99,"index":2087},"line":47,"code":"  it(\"3. Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table Page No\", function () {\n    cy.PublishtheApp();\n    cy.wait(500);\n    // Make sure onPageLoad action has run before validating the data\n    cy.wait(\"@postExecute\");\n    cy.wait(2000);\n    cy.readTabledata(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    });\n    // Make sure net page action is run\n    cy.wait(\"@postExecute\");\n    cy.validateToastMessage(\"done\");\n    cy.readTabledata(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"11\");\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table-Text, Validate Server Side Pagination of Paginate with Total Records Count","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":68,"column":89,"index":2799},"line":68,"code":"  it(\"4. Table-Text, Validate Server Side Pagination of Paginate with Total Records Count\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(3000);\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.testJsontext(\"totalrecordcount\", 20);\n    cy.PublishtheApp();\n    cy.wait(500);\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".show-page-items\").should(\"contain\", \"20 Records\");\n    cy.get(\".page-item\").next().should(\"contain\", \"of 2\");\n    cy.get(\".t--table-widget-next-page\").should(\"not.have.attr\", \"disabled\");\n    cy.readTabledata(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    });\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Test_Add Paginate with response URL and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":93,"column":64,"index":3696},"line":93,"code":"  it(\"5. Test_Add Paginate with response URL and Execute the Api\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(3000);\n    /** Create Api2 of Paginate with response URL*/\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n    apiPage.SelectPaneTab(\"Pagination\");\n    agHelper.GetNClick(api.apiPaginationTab);\n    cy.get(api.apiPaginationNextText).type(this.data.paginationUrl + testdata.nextUrl, {\n      parseSpecialCharSequences: false\n    });\n    cy.get(api.apiPaginationPrevText).type(this.data.paginationUrl + testdata.prevUrl, {\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.testJsontext(\"tabledata\", \"{{Api2.data}}\");\n    cy.executeDbQuery(\"Api2\", \"onPageChange\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table-Text, Validate Server Side Pagination of Paginate with response URL","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":114,"column":82,"index":4577},"line":114,"code":"  it(\"6. Table-Text, Validate Server Side Pagination of Paginate with response URL\", function () {\n    /**Validate Response data with Table data in Text Widget */\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.ValidatePaginateResponseUrlData(api.apiPaginationPrevTest, false);\n    cy.PublishtheApp();\n    cy.wait(\"@postExecute\").then(interception => {\n      let valueToTest = JSON.stringify(interception.response.body.data.body[0].name);\n      cy.ValidatePaginationInputData(valueToTest);\n    });\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(3000);\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.ValidatePaginateResponseUrlData(api.apiPaginationNextTest, true);\n  });","file":"e2e/Regression/ClientSide/Binding/TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api and execute api","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":10,"column":43,"index":443},"line":10,"code":"  it(\"1. Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/mock-api?records=100\");\n    cy.RunAPI();\n    cy.get(apiPage.jsonResponseTab).click();\n    cy.get(apiPage.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      const value = text.match(/\"(.*)\"/)[0];\n      cy.log(value);\n      apiData = value;\n      cy.log(\"val1:\" + value);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test_Validate the Api data is updated on Table widget","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":21,"column":62,"index":884},"line":21,"code":"  it(\"2. Test_Validate the Api data is updated on Table widget\", function () {\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n\n    /**\n     * readTabledata--> is to read the table contents\n     * @param --> \"row num\" and \"col num\"\n     */\n    cy.readTableV2data(\"0\", \"5\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.PublishtheApp();\n    cy.wait(\"@postExecute\").then(interception => {\n      apiData = JSON.stringify(interception.response.body.data.body[0].name);\n    });\n    cy.readTableV2dataPublish(\"0\", \"5\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(\"@postExecute\").then(interception => {\n      apiData = JSON.stringify(interception.response.body.data.body[0].name);\n    });\n    cy.readTableV2dataPublish(\"0\", \"5\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":48,"column":88,"index":1953},"line":48,"code":"  it(\"3. Validate onSearchTextChanged function is called when configured for search text\", function () {\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.togglebarDisable(\".t--property-control-clientsidesearch input[type='checkbox']\");\n    cy.get(\".t--widget-tablewidgetv2 .t--search-input\").first().type(\"Currey\");\n    cy.wait(3000);\n\n    // Captures the API call made on search\n    cy.wait(\"@postExecute\").then(interception => {\n      apiData = JSON.stringify(interception.response.body.data.body[0].name);\n    });\n    cy.readTableV2dataPublish(\"0\", \"5\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Api_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":6,"column":88,"index":272},"line":6,"code":"  it(\"1. Validate onSearchTextChanged function is called when configured for search text\", function () {\n    cy.wait(5000);\n    // input text in search bar\n    cy.get(\".t--widget-tablewidgetv2 .t--search-input input\").first().type(\"2\");\n    cy.wait(5000);\n    // Verify it filtered the table\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    });\n    // Input onsearchtextchanged control\n    cy.get(\".t--property-control-onsearchtextchanged .t--js-toggle\").first().click();\n    cy.testJsontext(\"onsearchtextchanged\", \"{{showAlert('12')}}\");\n    // Verify ClientSideSearch toggle is visible\n    cy.get(\".t--property-control-clientsidesearch\").should(\"exist\");\n\n    // Verify filter still works\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    });\n    // Disable Client Search\n    cy.togglebarDisable(\".t--property-control-clientsidesearch input[type='checkbox']\");\n    cy.wait(1000); //wait & then read the table value\n    // Verify Client Search doesnt work\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#1\");\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_ClientSide_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":9,"column":63,"index":437},"line":9,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Form1\");\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // validation of data displayed in input widgets based on search value set\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.get(\".t--property-control-allowsearching input\").click({\n      force: true\n    });\n    cy.testJsontext(\"defaultsearchtext\", \"2736212\");\n    cy.wait(\"@updateLayout\").isSelectRow(0);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_DefaultSearch_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget V2 toggle test for text alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":12,"column":55,"index":571},"line":12,"code":"  it(\"1. Table widget V2 toggle test for text alignment\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    cy.wait(500);\n    propPane.EnterJSContext(\"Text align\", testdata.bindingAlign);\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table widget V2 change text size and validate","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":21,"column":54,"index":985},"line":21,"code":"  it(\"2. Table widget V2 change text size and validate\", function () {\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.get(propPaneBack).click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    cy.wait(500);\n    cy.wait(1000);\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.selectTxtSize(\"XL\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"30px\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget toggle test for text size","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":39,"column":47,"index":1566},"line":39,"code":"  it(\"3. Table widget toggle test for text size\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.get(propPaneBack).click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    cy.wait(500);\n    propPane.EnterJSContext(\"Text size\", testdata.bindingNewSize);\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-size\", \"24px\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget toggle test for vertical Alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":51,"column":56,"index":2020},"line":51,"code":"  it(\"4. Table widget toggle test for vertical Alignment\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.get(propPaneBack).click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.toggleTextSize).first().click({\n      force: true\n    });\n    cy.wait(1000);\n    propPane.EnterJSContext(\"Vertical alignment\", testdata.bindingVerticalAlig);\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-start\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget V2 toggle test for style Alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":66,"column":56,"index":2584},"line":66,"code":"  it(\"5. Table widget V2 toggle test for style Alignment\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.get(propPaneBack).click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    /*\n    cy.get(widgetsPage.toggleVerticalAlig)\n      .first()\n      .click({ force: true });\n      */\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    propPane.EnterJSContext(\"Emphasis\", testdata.bindingStyle);\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-style\", \"normal\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget toggle test for text color","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":84,"column":48,"index":3202},"line":84,"code":"  it(\"6. Table widget toggle test for text color\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.get(propPaneBack).click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    propPane.EnterJSContext(\"Text color\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"color\", \"rgb(0, 128, 0)\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget toggle test for background color","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":101,"column":54,"index":3848},"line":101,"code":"  it(\"7. Table widget toggle test for background color\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.get(propPaneBack).click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    cy.wait(1000);\n    propPane.EnterJSContext(\"Cell Background\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"background\", \"rgb(0, 128, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"background\", \"rgb(255, 0, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget V2 toggle test for text alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":14,"column":55,"index":625},"line":14,"code":"  it(\"1. Table widget V2 toggle test for text alignment\", function () {\n    ee.SelectEntityByName(\"Table1\");\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Text align\", testdata.bindingAlign);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table widget V2 change text size and validate","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":24,"column":54,"index":1061},"line":24,"code":"  it(\"2. Table widget V2 change text size and validate\", function () {\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    //cy.movetoStyleTab();\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    });\n    agHelper.Sleep();\n    cy.selectTxtSize(\"XL\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"30px\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget toggle test for vertical Alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":34,"column":56,"index":1423},"line":34,"code":"  it(\"3. Table widget toggle test for vertical Alignment\", function () {\n    //cy.movetoStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Vertical alignment\", testdata.bindingVerticalAlig);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-start\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget toggle test for text size","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":42,"column":47,"index":1799},"line":42,"code":"  it(\"4. Table widget toggle test for text size\", function () {\n    //cy.movetoStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Text size\", testdata.bindingNewSize);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-size\", \"24px\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget V2 toggle test for style Alignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":50,"column":56,"index":2156},"line":50,"code":"  it(\"5. Table widget V2 toggle test for style Alignment\", function () {\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Emphasis\", testdata.bindingStyle);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-style\", \"normal\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget toggle test for text color","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":57,"column":48,"index":2481},"line":57,"code":"  it(\"6. Table widget toggle test for text color\", function () {\n    cy.moveToStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Text color\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"color\", \"rgb(0, 128, 0)\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget toggle test for background color","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":65,"column":54,"index":2849},"line":65,"code":"  it(\"7. Table widget toggle test for background color\", function () {\n    cy.moveToStyleTab();\n    agHelper.Sleep();\n    propPane.EnterJSContext(\"Cell Background\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"background\", \"rgb(0, 128, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"background\", \"rgb(255, 0, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Style_ToggleJS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. check the cell styles before and after sorting","suites":["Table Widget V2 condtional formatting to remain consistent"],"updatePoint":{"line":8,"column":55,"index":388},"line":8,"code":"  it(\"1. check the cell styles before and after sorting\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    //Check Font weight, font style, and text color before sorting\n    cy.readTableV2dataValidateCSS(\"0\", \"1\", \"font-weight\", \"700\");\n    cy.readTableV2dataValidateCSS(\"0\", \"1\", \"font-style\", \"normal\");\n    cy.readTableV2dataValidateCSS(\"0\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"font-weight\", \"400\");\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"font-style\", \"italic\");\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    //Check Font weight, font style, and text color after sorting\n    cy.readTableV2dataValidateCSS(\"3\", \"1\", \"font-weight\", \"700\");\n    cy.readTableV2dataValidateCSS(\"3\", \"1\", \"font-style\", \"normal\");\n    cy.readTableV2dataValidateCSS(\"3\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTableV2dataValidateCSS(\"2\", \"1\", \"font-weight\", \"400\");\n    cy.readTableV2dataValidateCSS(\"2\", \"1\", \"font-style\", \"italic\");\n    cy.readTableV2dataValidateCSS(\"2\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Widget__CondtionalFormatting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate TableV2 with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":10,"column":61,"index":515},"line":10,"code":"  it(\"1. Validate TableV2 with API data and then add a column\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.readTableV2data(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    cy.readTableV2data(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    cy.addColumnV2(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.editColName(\"UpdatedColName\");\n    cy.readTableV2dataPublish(\"0\", \"5\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValueV2(testdata.currentRowEmail);\n      cy.readTableV2dataPublish(\"0\", \"5\").then(tabData => {\n        expect(tabData).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check Image alignment is working as expected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":40,"column":53,"index":1772},"line":40,"code":"  it(\"2. Check Image alignment is working as expected\", function () {\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.editColumn(\"avatar\");\n    cy.changeColumnType(\"Image\");\n    cy.closePropertyPane();\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.backFromPropertyPanel();\n    cy.moveToStyleTab();\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidgetv2 .tbody .image-cell-wrapper`).first().should(\"have.css\", \"justify-content\", \"center\");\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.moveToStyleTab();\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidgetv2 .tbody .image-cell-wrapper`).first().should(\"have.css\", \"justify-content\", \"flex-end\");\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.moveToStyleTab();\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidgetv2 .tbody .image-cell-wrapper`).first().should(\"have.css\", \"justify-content\", \"flex-start\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Update table json data and check the derived column values after update","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":68,"column":80,"index":2977},"line":68,"code":"  it(\"3. Update table json data and check the derived column values after update\", function () {\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.moveToContentTab();\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"name\");\n    cy.tableV2ColumnDataValidation(\"status\");\n    cy.tableV2ColumnDataValidation(\"gender\");\n    cy.tableV2ColumnDataValidation(\"avatar\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"address\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\");\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\");\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"userName\");\n    cy.tableV2ColumnDataValidation(\"productName\");\n    cy.tableV2ColumnDataValidation(\"orderAmount\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.get(\".draggable-header:contains('UpdatedColName')\").scrollIntoView().should(\"be.visible\");\n    cy.readTableV2dataPublish(\"1\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      cy.readTableV2dataPublish(\"1\", \"2\").then(tabData => {\n        cy.log(\"computed value of plain text \" + tabData);\n        expect(tabData).to.be.equal(tabValue);\n      });\n      cy.closePropertyPane();\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":8,"column":62,"index":389},"line":8,"code":"  it(\"1. Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n    //Validate Table V2 with API data and then add a column\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    cy.get(`.t--widget-tablewidgetv2 .page-item`).first().should(\"contain\", \"1\");\n    cy.get(`.t--widget-tablewidgetv2 .t--table-widget-next-page`).first().click();\n    cy.wait(2000);\n    cy.get(`.t--widget-tablewidgetv2 .page-item`).first().should(\"contain\", \"2\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2_Widget_API_Pagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add Paginate with Table Page No and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":11,"column":65,"index":596},"line":11,"code":"  it(\"1. Test_Add Paginate with Table Page No and Execute the Api\", function () {\n    cy.wait(3000);\n    /**Create an Api1 of Paginate with Table Page No */\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table-Text, Validate Server Side Pagination of Paginate with Table v2 Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":86,"index":874},"line":17,"code":"  it(\"2. Table-Text, Validate Server Side Pagination of Paginate with Table v2 Page No\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\");\n    /**Bind Api1 with Table widget */\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    /**Bind Table with Textwidget with selected row */\n    entityExplorer.SelectEntityByName(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.avatar}}\");\n    entityExplorer.SelectEntityByName(\"Table1\");\n    cy.readTableV2data(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    /**Validate Table data on current page(page1) */\n    cy.readTableV2data(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    //cy.get(commonlocators.tableNextPage).click({ force: true });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    //cy.wait(5000);\n    /*\n    cy.wait(\"@postExecute\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    cy.validateToastMessage(\"done\");\n    /**Validate Table data on next page(page2) */\n    //cy.ValidateTableData(\"11\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table v2 Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":49,"column":102,"index":2166},"line":49,"code":"  it(\"3. Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table v2 Page No\", function () {\n    cy.PublishtheApp();\n    cy.wait(500);\n    // Make sure onPageLoad action has run before validating the data\n    cy.wait(\"@postExecute\");\n    cy.wait(2000);\n    cy.readTableV2data(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    });\n    // Make sure net page action is run\n    cy.wait(\"@postExecute\");\n    cy.validateToastMessage(\"done\");\n    cy.readTableV2data(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"11\");\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table-Text, Validate Server Side Pagination of Paginate with Total v2 Records Count","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":70,"column":92,"index":2885},"line":70,"code":"  it(\"4. Table-Text, Validate Server Side Pagination of Paginate with Total v2 Records Count\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(3000);\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.testJsontext(\"totalrecords\", 20);\n    cy.PublishtheApp();\n    cy.wait(500);\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".show-page-items\").should(\"contain\", \"20 Records\");\n    cy.get(\".page-item\").next().should(\"contain\", \"of 2\");\n    cy.get(\".t--table-widget-next-page\").should(\"not.have.attr\", \"disabled\");\n    cy.readTableV2data(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    });\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Test_Add Paginate with response URL and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":95,"column":64,"index":3780},"line":95,"code":"  it(\"5. Test_Add Paginate with response URL and Execute the Api\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(3000);\n    /** Create Api2 of Paginate with response URL*/\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n    cy.NavigateToPaginationTab();\n    cy.get(apiPage.apiPaginationNextText).type(this.data.paginationUrl + testdata.nextUrl, {\n      parseSpecialCharSequences: false\n    });\n    cy.get(apiPage.apiPaginationPrevText).type(this.data.paginationUrl + testdata.prevUrl, {\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.testJsontext(\"tabledata\", \"{{Api2.data}}\");\n    cy.executeDbQuery(\"Api2\", \"onPageChange\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table-Text, Validate Server Side Pagination of Paginate with response URL","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":115,"column":82,"index":4616},"line":115,"code":"  it(\"6. Table-Text, Validate Server Side Pagination of Paginate with response URL\", function () {\n    /**Validate Response data with Table data in Text Widget */\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.ValidatePaginateResponseUrlDataV2(apiPage.apiPaginationPrevTest, false);\n    cy.PublishtheApp();\n    cy.wait(\"@postExecute\").then(interception => {\n      let valueToTest = JSON.stringify(interception.response.body.data.body[0].name);\n      cy.ValidatePaginationInputDataV2(valueToTest);\n    });\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.wait(3000);\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.ValidatePaginateResponseUrlDataV2(apiPage.apiPaginationNextTest, true);\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2TextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget v2","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":11,"column":66,"index":482},"line":11,"code":"  it(\"1. Input widget test with default value from table widget v2\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Form1\");\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2Widget_selectedRow_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. validation of data displayed in input widgets based on selected row","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":17,"column":76,"index":860},"line":17,"code":"  it(\"2. validation of data displayed in input widgets based on selected row\", function () {\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.readTableV2dataPublish(\"2\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2Widget_selectedRow_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create MyPage and validate if its successfully created","suites":["Table Widget V2 and Navigate to functionality validation"],"updatePoint":{"line":20,"column":63,"index":819},"line":20,"code":"  it(\"1. Create MyPage and validate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    entityExplorer.ExpandCollapseEntity(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n    //Table Widget V2 Functionality with multiple page\n    entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidgetV2, widgetsPage.widgetNameSpan);\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.TablePagination));\n    cy.focused().blur();\n    propPane.SelectPlatformFunction(\"onRowSelected\", \"Navigate to\");\n    cy.get(\".t--open-dropdown-Select-page\").click();\n    cy.get(commonlocators.singleSelectMenuItem).contains(pageid).click({\n      force: true\n    });\n    cy.assertPageSave();\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2Widgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate NavigateTo Page functionality ","suites":["Table Widget V2 and Navigate to functionality validation"],"updatePoint":{"line":40,"column":48,"index":1749},"line":40,"code":"  it(\"2. Validate NavigateTo Page functionality \", function () {\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.chartWidget).should(\"not.exist\");\n    cy.isSelectRow(1);\n    cy.get(widgetsPage.chartWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2Widgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api, execute it and go to sniping mode.","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":6,"column":63,"index":244},"line":6,"code":"  it(\"1. Test_Add users api, execute it and go to sniping mode.\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/mock-api?records=10\");\n    cy.RunAPI();\n    cy.get(\".t--select-in-canvas\").click();\n    cy.get(\".t--sniping-mode-banner\").should(\"be.visible\");\n    //Click on table name controller to bind the data and exit sniping mode\n    cy.get(\".t--draggable-tablewidgetv2\").trigger(\"mouseover\");\n    cy.get(\".t--settings-sniping-control\").click();\n    cy.get(\".t--property-control-tabledata .CodeMirror\").contains(\"{{Api1.data}}\");\n    cy.get(\".t--sniping-mode-banner\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableV2WithSnipingMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create MyPage and valdiate if its successfully created","suites":["Table Widget and Navigate to functionality validation"],"updatePoint":{"line":20,"column":63,"index":814},"line":20,"code":"  it(\"1. Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n    //Table Widget Functionality with multiple page\n    entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, widgetsPage.widgetNameSpan);\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.TablePagination));\n    cy.focused().blur();\n    propPane.SelectPlatformFunction(\"onRowSelected\", \"Navigate to\");\n    cy.get(\".t--open-dropdown-Select-page\").click();\n    cy.get(commonlocators.singleSelectMenuItem).contains(pageid).click({\n      force: true\n    });\n    cy.assertPageSave();\n    //Validate NavigateTo Page functionality\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.chartWidget).should(\"not.exist\");\n    cy.isSelectRow(1);\n    cy.get(widgetsPage.chartWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableWidgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api, execute it and go to sniping mode.","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":6,"column":63,"index":239},"line":6,"code":"  it(\"1. Test_Add users api, execute it and go to sniping mode.\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/mock-api?records=10\");\n    cy.RunAPI();\n    cy.get(\".t--select-in-canvas\").click();\n    cy.get(\".t--sniping-mode-banner\").should(\"be.visible\");\n    //Click on table name controller to bind the data and exit sniping mode\n    cy.get(\".t--draggable-tablewidget\").trigger(\"mouseover\");\n    cy.get(\".t--settings-sniping-control\").click();\n    cy.get(\".t--property-control-tabledata .CodeMirror\").contains(\"{{Api1.data}}\");\n    cy.get(\".t--sniping-mode-banner\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Binding/TableWithSnipingMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from tab widget","suites":["Binding the input Widget with tab Widget"],"updatePoint":{"line":9,"column":61,"index":433},"line":9,"code":"  it(\"1. Input widget test with default value from tab widget\", function () {\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.tabBinding + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Binding/TabWidget_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. validation of data displayed in input widgets based on tab selected","suites":["Binding the input Widget with tab Widget"],"updatePoint":{"line":14,"column":76,"index":751},"line":14,"code":"  it(\"2. validation of data displayed in input widgets based on tab selected\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 2\").click().wait(1000).should(\"have.class\", \"is-selected\");\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"Tab 2\");\n    cy.get(publish.tabWidget).contains(\"Tab 1\").click().wait(1000).should(\"have.class\", \"is-selected\");\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"Tab 1\");\n  });","file":"e2e/Regression/ClientSide/Binding/TabWidget_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Text-Table Binding Functionality For Id","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":14,"column":48,"index":591},"line":14,"code":"  it(\"1. Text-Table Binding Functionality For Id\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    /**\n     * @param(Index)  Provide index value to select the row.\n     */\n    cy.isSelectRow(1);\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.id}}\");\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n    cy.readTabledata(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValue);\n      cy.findAndExpandEvaluatedTypeTitle();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(1);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabDataP => {\n        const tabValueP = tabDataP;\n        cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Text-Table Binding Functionality For Email","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":40,"column":51,"index":1574},"line":40,"code":"  it(\"2. Text-Table Binding Functionality For Email\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.isSelectRow(2);\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.email}}\");\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n    cy.readTabledata(\"2\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValue);\n      cy.findAndExpandEvaluatedTypeTitle();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(2);\n      cy.readTabledataPublish(\"2\", \"1\").then(tabDataP => {\n        const tabValueP = tabDataP;\n        cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Text-Table Binding Functionality For Total Length","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":64,"column":58,"index":2521},"line":64,"code":"  it(\"3. Text-Table Binding Functionality For Total Length\", function () {\n    cy.get(publish.backToEditor).click();\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", \"{{Table1.pageSize}}\");\n    cy.get(commonlocators.TableRow).find(\".tr\").then(listing => {\n      const listingCount = listing.length.toString();\n      cy.get(commonlocators.TextInside).contains(listingCount);\n      cy.findAndExpandEvaluatedTypeTitle();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(listingCount);\n      cy.PublishtheApp();\n      cy.get(publish.tableLength).find(\".tr\").then(listing => {\n        const listingCountP = listing.length.toString();\n        cy.get(commonlocators.TextInside).contains(listingCountP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table Widget Functionality To Verify Default Row Selection is working","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":82,"column":78,"index":3374},"line":82,"code":"  it(\"4. Table Widget Functionality To Verify Default Row Selection is working\", function () {\n    cy.get(publish.backToEditor).click();\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.TableRow).find(\".tr.selected-row\").then(listing => {\n      const listingCount = listing.length;\n      expect(listingCount).to.be.equal(1);\n    });\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.email}}\");\n    cy.PublishtheApp();\n    cy.readTabledataPublish(\"2\", \"1\").then(tabDataP => {\n      const tabValueP = tabDataP;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Text-Table Binding Functionality For Username","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":101,"column":54,"index":4229},"line":101,"code":"  it(\"5. Text-Table Binding Functionality For Username\", function () {\n    cy.get(publish.backToEditor).click();\n    /**\n     * @param(Index)  Provide index value to select the row.\n     */\n    cy.isSelectRow(1);\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", JSON.stringify(this.data.textfun));\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n    cy.readTabledata(\"1\", \"2\").then(tabData => {\n      const tabValue = `\\\"${tabData}\\\"`;\n      cy.get(commonlocators.TextInside).contains(tabValue);\n      cy.findAndExpandEvaluatedTypeTitle();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(1);\n      cy.readTabledataPublish(\"1\", \"2\").then(tabDataP => {\n        const tabValueP = `\\\"${tabDataP}\\\"`;\n        cy.get(commonlocators.TextInside).contains(tabValueP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTable_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Text-Table Binding Functionality For Id","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":14,"column":48,"index":596},"line":14,"code":"  it(\"1. Text-Table Binding Functionality For Id\", function () {\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    /**\n     * @param(Index)  Provide index value to select the row.\n     */\n    cy.isSelectRow(1);\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.id}}\");\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n    cy.readTableV2data(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValue);\n      cy.findAndExpandEvaluatedTypeTitle();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(1);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabDataP => {\n        const tabValueP = tabDataP;\n        cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Text-Table Binding Functionality For Email","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":40,"column":51,"index":1583},"line":40,"code":"  it(\"2. Text-Table Binding Functionality For Email\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.isSelectRow(2);\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.email}}\");\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n    cy.readTableV2data(\"2\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValue);\n      cy.findAndExpandEvaluatedTypeTitle();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(2);\n      cy.readTableV2dataPublish(\"2\", \"1\").then(tabDataP => {\n        const tabValueP = tabDataP;\n        cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Text-Table Binding Functionality For Total Length","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":64,"column":58,"index":2534},"line":64,"code":"  it(\"3. Text-Table Binding Functionality For Total Length\", function () {\n    cy.get(publish.backToEditor).click();\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", \"{{Table1.pageSize}}\");\n    cy.get(commonlocators.TableV2Row).find(\".tr\").then(listing => {\n      const listingCount = listing.length.toString();\n      cy.get(commonlocators.TextInside).contains(listingCount);\n      cy.findAndExpandEvaluatedTypeTitle();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(listingCount);\n      cy.PublishtheApp();\n      cy.get(publish.tableV2Length).find(\".tr\").then(listing => {\n        const listingCountP = listing.length.toString();\n        cy.get(commonlocators.TextInside).contains(listingCountP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table Widget Functionality To Verify Default Row Selection is working","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":82,"column":78,"index":3391},"line":82,"code":"  it(\"4. Table Widget Functionality To Verify Default Row Selection is working\", function () {\n    cy.get(publish.backToEditor).click();\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.TableV2Row).find(\".tr.selected-row\").then(listing => {\n      const listingCount = listing.length;\n      expect(listingCount).to.be.equal(1);\n    });\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.email}}\");\n    cy.PublishtheApp();\n    cy.readTableV2dataPublish(\"2\", \"1\").then(tabDataP => {\n      const tabValueP = tabDataP;\n      cy.get(commonlocators.TextInside).should(\"have.text\", tabValueP);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Text-Table Binding Functionality For Username","suites":["Text-Table v2 Binding Functionality"],"updatePoint":{"line":100,"column":54,"index":4198},"line":100,"code":"  it(\"5. Text-Table Binding Functionality For Username\", function () {\n    cy.get(publish.backToEditor).click();\n    entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    /**\n     * @param(Index)  Provide index value to select the row.\n     */\n    cy.isSelectRow(1);\n    entityExplorer.SelectEntityByName(\"Text4\", \"Container1\");\n    cy.testJsontext(\"text\", JSON.stringify(this.data.textfun));\n    /**\n     * @param{Row Index} Provide the row index\n     * @param(Column Index) Provide column index\n     */\n    cy.readTableV2data(\"1\", \"2\").then(tabData => {\n      const tabValue = `\\\"${tabData}\\\"`;\n      cy.get(commonlocators.TextInside).contains(tabValue);\n      cy.findAndExpandEvaluatedTypeTitle();\n      cy.EvaluateDataType(\"string\");\n      cy.validateEvaluatedValue(tabValue);\n      cy.PublishtheApp();\n      cy.isSelectRow(1);\n      cy.readTableV2dataPublish(\"1\", \"2\").then(tabDataP => {\n        const tabValueP = `\\\"${tabDataP}\\\"`;\n        cy.get(commonlocators.TextInside).contains(tabValueP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/TextTableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a postgres datasource","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":11,"column":37,"index":506},"line":11,"code":"  it(\"1. Create a postgres datasource\", function () {\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.get(\"@dsName\").then($dsName => {\n      datasourceName = $dsName;\n      //Create and runs query\n      _.dataSources.CreateQueryAfterDSSaved(\"select * from users limit 10\");\n      cy.EvaluateCurrentValue(\"select * from users limit 10\");\n      _.dataSources.RunQuery();\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Button widget test with on action query run","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":21,"column":52,"index":911},"line":21,"code":"  it(\"2. Button widget test with on action query run\", function () {\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    cy.executeDbQuery(\"Query1\", \"onClick\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    //Input widget test with default value update with query data\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(testdata.defaultInputQuery);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Publish App and validate loading functionalty","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":30,"column":54,"index":1478},"line":30,"code":"  it(\"3. Publish App and validate loading functionalty\", function () {\n    cy.PublishtheApp();\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(widgetsPage.widgetBtn).first().click({\n      force: true\n    });\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"7\");\n  });","file":"e2e/Regression/ClientSide/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":10,"column":63,"index":535},"line":10,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    //Dropdown widget test with default value from table widget\n    entityExplorer.SelectEntityByName(\"Dropdown1\");\n    cy.testJsontext(\"options\", JSON.stringify(testdata.deafultDropDownWidget));\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Binding/Widgets_Default_data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. validation of default data displayed in all widgets based on row selected","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":19,"column":82,"index":1164},"line":19,"code":"  it(\"2. validation of default data displayed in all widgets based on row selected\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"lindsay.ferguson@reqres.in\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(widgetsPage.defaultSingleSelectValue).first().invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(tabValue);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Widgets_Default_data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Cyclic depedancy error message validation","suites":["Binding the multiple input Widget"],"updatePoint":{"line":15,"column":50,"index":659},"line":15,"code":"  it(\"1. Cyclic depedancy error message validation\", function () {\n    entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastmsg).contains(\"Cyclic dependency\");\n  });","file":"e2e/Regression/ClientSide/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Binding input widget1 and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":21,"column":45,"index":1021},"line":21,"code":"  it(\"2. Binding input widget1 and validating\", function () {\n    entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultdata);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n  });","file":"e2e/Regression/ClientSide/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Binding second input widget with first input widget and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":27,"column":75,"index":1451},"line":27,"code":"  it(\"3. Binding second input widget with first input widget and validating\", function () {\n    cy.selectEntityByName(\"Input2\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(testdata.input2).invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.xpath(testdata.input2).invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Binding third input widget with first input widget and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":37,"column":74,"index":2140},"line":37,"code":"  it(\"4. Binding third input widget with first input widget and validating\", function () {\n    cy.CheckAndUnfoldWidgets();\n    cy.selectEntityByName(\"Input3\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.xpath(testdata.input2).invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n  });","file":"e2e/Regression/ClientSide/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget","suites":["Binding the multiple input Widget"],"updatePoint":{"line":9,"column":63,"index":434},"line":9,"code":"  it(\"1. Input widget test with default value from table widget\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Form1\");\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(2000);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // Validation of data displayed in all widgets based on row selected\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n      //       cy.get(publish.inputWidget + \" \" + \"input\")\n      //         .last()\n      //         .invoke(\"attr\", \"value\")\n      //         .should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Widgets_form_input_table_default_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input widget test with default value from table widget v2","suites":["Binding the multiple input Widget"],"updatePoint":{"line":9,"column":66,"index":439},"line":9,"code":"  it(\"1. Input widget test with default value from table widget v2\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Form1\");\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.testJsontext(\"defaultvalue\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(2000);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // Validation of data displayed in all widgets based on row selected\n    cy.isSelectRow(1);\n    cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Binding/Widgets_form_input_tableV2_default_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. publish widget and validate the data displayed in text widget from xmlParser function","suites":["xml2json text"],"updatePoint":{"line":7,"column":94,"index":311},"line":7,"code":"  it(\"1. publish widget and validate the data displayed in text widget from xmlParser function\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.textWidget).first().should(\"have.text\", `{  \"note\": {    \"to\": \"Tove\",    \"from\": \"Jani\",    \"heading\": \"Reminder\",    \"body\": \"Don't forget me this weekend!\"  }}`);\n  });","file":"e2e/Regression/ClientSide/Binding/xmlParser_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Super user can access branding page","suites":["Branding"],"updatePoint":{"line":26,"column":44,"index":1268},"line":26,"code":"  it(\"1. Super user can access branding page\", () => {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(locators.AdminSettingsEntryLink).should(\"be.visible\");\n    cy.get(locators.AdminSettingsEntryLink).click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    cy.get(locators.LeftPaneBrandingLink).should(\"be.visible\");\n    cy.get(locators.LeftPaneBrandingLink).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Branding/Branding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should test that changing logo,favicon and color changes the preview","suites":["Branding"],"updatePoint":{"line":36,"column":77,"index":1756},"line":36,"code":"  it(\"2. Should test that changing logo,favicon and color changes the preview\", () => {\n    // branding color\n    cy.get(locators.AdminSettingsColorInput).focus().clear().type(\"red\");\n    cy.get(\".t--branding-bg\").should(\"have.css\", \"background-color\", \"rgb(255, 0, 0)\");\n\n    // branding logo\n    cy.get(locators.AdmingSettingsLogoInput).selectFile(\"cypress/fixtures/appsmithlogo.png\", {\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(locators.AdmingSettingsLogoInputImage).should(\"be.visible\");\n    cy.get(locators.BrandingLogo).invoke(\"attr\", \"src\").then(src => {\n      cy.get(locators.AdmingSettingsLogoInputImage).invoke(\"attr\", \"src\").should(\"equal\", src);\n    });\n\n    // branding favicon\n    cy.get(locators.AdmingSettingsFaviconInput).selectFile(\"cypress/fixtures/appsmithlogo.png\", {\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(locators.AdmingSettingsFaviconInputImage).should(\"be.visible\");\n    cy.get(locators.BrandingFavicon).invoke(\"attr\", \"src\").then(src => {\n      cy.get(locators.AdmingSettingsFaviconInputImage).invoke(\"attr\", \"src\").should(\"equal\", src);\n    });\n\n    // validations - logo\n    cy.get(locators.AdmingSettingsLogoInput).selectFile(\"cypress/fixtures/testFile.mov\", {\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.toastMsg).contains(Cypress.env(\"MESSAGES\").ADMIN_BRANDING_LOGO_FORMAT_ERROR());\n\n    // validations - favicon\n    cy.get(locators.AdmingSettingsFaviconInput).selectFile(\"cypress/fixtures/testFile.mov\", {\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.toastMsg).contains(Cypress.env(\"MESSAGES\").ADMIN_BRANDING_FAVICON_FORMAT_ERROR());\n  });","file":"e2e/Regression/ClientSide/Branding/Branding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check if localStorage is populated with tenantConfig values & form cannot be submitted","suites":["Branding"],"updatePoint":{"line":75,"column":95,"index":3430},"line":75,"code":"  it(\"3. Check if localStorage is populated with tenantConfig values & form cannot be submitted\", () => {\n    if (CURRENT_REPO === REPO.CE) {\n      const tenantConfig = localStorage.getItem(\"tenantConfig\");\n      expect(tenantConfig).to.be.null;\n      cy.get(locators.submitButton).should(\"be.disabled\");\n    }\n  });","file":"e2e/Regression/ClientSide/Branding/Branding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. We make sure the label in the settings tab does not have any underline styles","suites":["Verify setting tab form controls not to have tooltip and tooltip (underline) styles"],"updatePoint":{"line":13,"column":86,"index":640},"line":13,"code":"  it(\"1. We make sure the label in the settings tab does not have any underline styles\", function () {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.xpath(queryLocators.querySettingsTab).click();\n    cy.get(\".label-icon-wrapper\").contains(\"Run query on page load\").parent().then($el => {\n      cy.window().then(win => {\n        cy.log($el, win);\n        const after = win.getComputedStyle($el[0], \"::after\");\n        cy.log($el, win, after);\n        const afterBorderBottom = after.getPropertyValue(\"borderBottom\");\n        //   we expect the border bottom of the element to be an empty string as opposed to \"1px dashed\"\n        expect(afterBorderBottom).to.equal(\"\");\n      });\n    });\n    cy.get(\".label-icon-wrapper\").contains(\"Request confirmation before running query\").parent().then($el => {\n      cy.window().then(win => {\n        cy.log($el, win);\n        const after = win.getComputedStyle($el[0], \"::after\");\n        cy.log($el, win, after);\n        const afterBorderBottom = after.getPropertyValue(\"borderBottom\");\n        //   we expect the border bottom of the element to be an empty string as opposed to \"1px dashed\"\n        expect(afterBorderBottom).to.equal(\"\");\n      });\n    });\n    agHelper.ActionContextMenuWithInPane(\"Delete\");\n    dataSources.DeleteDatasouceFromActiveTab(datasourceName, 200);\n  });","file":"e2e/Regression/ClientSide/BugTests/Bug14987_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create Auth API DS, save i, now edit again and check the save and authorise button state","suites":["Bug 19933: Authenticated API DS in case of OAuth2, should have save and authorise button enabled all the times"],"updatePoint":{"line":4,"column":97,"index":309},"line":4,"code":"  it(\"1. Create Auth API DS, save i, now edit again and check the save and authorise button state\", function () {\n    _.dataSources.NavigateToDSCreateNew();\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      dsName = \"AuthAPI \" + uid;\n      _.dataSources.CreatePlugIn(\"Authenticated API\");\n      _.agHelper.RenameWithInPane(dsName, false);\n      _.dataSources.FillAuthAPIUrl();\n      _.dataSources.AssertCursorPositionForTextInput(_.dataSources._urlInputControl, \"{moveToStart}\", \"he\", 2);\n    });\n  });","file":"e2e/Regression/ClientSide/BugTests/Bug19893_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create Auth API DS, save i, now edit again and check the save and authorise button state","suites":["Bug 19933: Authenticated API DS in case of OAuth2, should have save and authorise button enabled all the times"],"updatePoint":{"line":5,"column":97,"index":336},"line":5,"code":"  it(\"1. Create Auth API DS, save i, now edit again and check the save and authorise button state\", function () {\n    _.dataSources.NavigateToDSCreateNew();\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      dsName = \"AuthAPI \" + uid;\n      _.dataSources.CreatePlugIn(\"Authenticated API\");\n      _.agHelper.RenameWithInPane(dsName, false);\n      _.dataSources.FillAuthAPIUrl();\n      _.dataSources.AddOAuth2AuthorizationCodeDetails(testString, testString, testString, testString);\n      _.dataSources.SaveDatasource();\n    });\n    _.dataSources.EditDatasource();\n    _.agHelper.AssertElementEnabledDisabled(_.dataSources._saveAndAuthorizeDS, 0, false);\n    _.dataSources.DeleteDSDirectly();\n  });","file":"e2e/Regression/ClientSide/BugTests/Bug19933_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug: 22275: Debugger should not render in preview mode","suites":["excludeForAirgap"],"updatePoint":{"line":3,"column":63,"index":190},"line":3,"code":"  it(\"1. Bug: 22275: Debugger should not render in preview mode\", function () {\n    //Open debugger\n    _.agHelper.GetNClick(_.debuggerHelper.locators._debuggerIcon);\n    //Enter preview mode\n    _.agHelper.GetNClick(_.locators._enterPreviewMode);\n    //verify debugger is not present\n    _.agHelper.AssertElementAbsence(_.locators._errorTab);\n    //Exit preview mode\n    _.agHelper.GetNClick(_.locators._exitPreviewMode);\n    //verify debugger is present\n    _.agHelper.GetNAssertContains(_.locators._errorTab, \"Errors\");\n  });","file":"e2e/Regression/ClientSide/BugTests/Bug22281_WelcomeTour_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bug: 22281: Debugger should not open by default in welcome tour","suites":["excludeForAirgap"],"updatePoint":{"line":15,"column":72,"index":728},"line":15,"code":"  it(\"2. Bug: 22281: Debugger should not open by default in welcome tour\", function () {\n    //Get back to application page\n    _.agHelper.GetNClick(_.homePage._homeIcon);\n    _.agHelper.WaitUntilEleAppear(_.homePage._homePageAppCreateBtn);\n    //Start welcome tour\n    _.agHelper.GetNClick(_.homePage._welcomeTour);\n    _.agHelper.WaitUntilEleAppear(_.homePage._welcomeTourBuildingButton);\n    //Verify debugger is not present\n    _.agHelper.AssertElementAbsence(_.locators._errorTab);\n  });","file":"e2e/Regression/ClientSide/BugTests/Bug22281_WelcomeTour_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug - 17238 Verify datasource structure refresh on save - invalid datasource","suites":["Datasource form related tests"],"updatePoint":{"line":8,"column":85,"index":378},"line":8,"code":"  it(\"1. Bug - 17238 Verify datasource structure refresh on save - invalid datasource\", () => {\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      guid = uid;\n      dataSourceName = \"Postgres \" + guid;\n      ee.ExpandCollapseEntity(\"Datasources\");\n      dataSources.NavigateToDSCreateNew();\n      dataSources.CreatePlugIn(\"PostgreSQL\");\n      agHelper.RenameWithInPane(dataSourceName, false);\n      dataSources.FillPostgresDSForm(false, \"docker\", \"wrongPassword\");\n      dataSources.VerifySchema(dataSourceName, \"An exception occurred while creating connection pool.\");\n      agHelper.GetNClick(dataSources._editButton);\n      dataSources.UpdatePassword(\"docker\");\n      dataSources.VerifySchema(dataSourceName, \"public.\", true);\n      agHelper.GetNClick(dataSources._createQuery);\n    });\n  });","file":"e2e/Regression/ClientSide/BugTests/DatasourceSchema_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Verify if schema was fetched once #18448","suites":["Datasource form related tests"],"updatePoint":{"line":25,"column":49,"index":1156},"line":25,"code":"  it(\"2. Verify if schema was fetched once #18448\", () => {\n    agHelper.RefreshPage();\n    ee.ExpandCollapseEntity(\"Datasources\");\n    ee.ExpandCollapseEntity(dataSourceName, false);\n    cy.intercept(\"GET\", dataSources._getStructureReq).as(\"getDSStructure\");\n    ee.ExpandCollapseEntity(\"Datasources\");\n    ee.ExpandCollapseEntity(dataSourceName);\n    agHelper.Sleep(1500);\n    agHelper.VerifyCallCount(`@getDatasourceStructure`, 1);\n    dataSources.DeleteQuery(\"Query1\");\n    dataSources.DeleteDatasouceFromWinthinDS(dataSourceName);\n  });","file":"e2e/Regression/ClientSide/BugTests/DatasourceSchema_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug 18664: Create postgres datasource, save it and edit it and go back, now unsaved changes popup should not be shown","suites":["datasource unsaved changes popup shows even without changes"],"updatePoint":{"line":8,"column":126,"index":541},"line":8,"code":"  it(\"1. Bug 18664: Create postgres datasource, save it and edit it and go back, now unsaved changes popup should not be shown\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      // using CreatePlugIn function instead of CreateDatasource,\n      // because I do not need to fill the datasource form and use the same default data\n      dataSources.CreatePlugIn(\"PostgreSQL\");\n      dsName = \"Postgres\" + uid;\n      agHelper.RenameWithInPane(dsName, false);\n      dataSources.SaveDatasource();\n      agHelper.Sleep();\n      dataSources.EditDatasource();\n      agHelper.GoBack();\n      agHelper.AssertElementVisible(dataSources._activeDS);\n      dataSources.DeleteDatasouceFromActiveTab(dsName);\n    });\n  });","file":"e2e/Regression/ClientSide/BugTests/DSDiscardBugs_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bug 18962: Create REST API datasource, save it and edit it and go back, now unsaved changes popup should not be shown","suites":["datasource unsaved changes popup shows even without changes"],"updatePoint":{"line":27,"column":126,"index":1441},"line":27,"code":"  it(\"2. Bug 18962: Create REST API datasource, save it and edit it and go back, now unsaved changes popup should not be shown\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      // using CreatePlugIn function instead of CreateDatasource,\n      // because I do not need to fill the datasource form and use the same default data\n      dataSources.CreatePlugIn(\"Authenticated API\");\n      dsName = \"AuthDS\" + uid;\n      agHelper.RenameWithInPane(dsName, false);\n      dataSources.FillAuthAPIUrl();\n      dataSources.SaveDatasource();\n      agHelper.Sleep();\n\n      // Edit DS for the first time, we shouldnt see discard popup on back button\n      // Even if headers, and query parameters are being initialized, we shouldnt see the popup\n      // as those are not initialized by user\n      dataSources.EditDatasource();\n      agHelper.GoBack();\n      agHelper.AssertElementVisible(dataSources._activeDS);\n\n      // Edit DS from active tab and add oauth2 details\n      dataSources.EditDSFromActiveTab(dsName);\n      dataSources.AddOAuth2AuthorizationCodeDetails(testString, testString, testString, testString);\n      dataSources.UpdateDatasource();\n      agHelper.Sleep();\n\n      // Now edit DS, and ensure that discard popup is not shown on back button click\n      // Even if custom authentication params are being initialized, we shouldnt see the popup\n      // as those are not initialized by user\n      dataSources.EditDatasource();\n      agHelper.GoBack();\n      agHelper.AssertElementVisible(dataSources._activeDS);\n      dataSources.DeleteDatasouceFromActiveTab(dsName);\n    });\n  });","file":"e2e/Regression/ClientSide/BugTests/DSDiscardBugs_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Bug 18998: Create mongoDB datasource, save it and edit it and change connection URI param, discard popup should be shown as user has made valid change","suites":["datasource unsaved changes popup shows even without changes"],"updatePoint":{"line":62,"column":159,"index":3130},"line":62,"code":"  it(\"3. Bug 18998: Create mongoDB datasource, save it and edit it and change connection URI param, discard popup should be shown as user has made valid change\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      // using CreatePlugIn function instead of CreateDatasource,\n      // because I do not need to fill the datasource form and use the same default data\n      dataSources.CreatePlugIn(\"MongoDB\");\n      dsName = \"Mongo\" + uid;\n      agHelper.RenameWithInPane(dsName, false);\n      dataSources.FillMongoDSForm();\n      dataSources.SaveDatasource();\n      agHelper.Sleep();\n\n      // Edit datasource, change connection string uri param and click on back button\n      dataSources.EditDatasource();\n      dataSources.FillMongoDatasourceFormWithURI(testString);\n\n      // Assert that popup is visible\n      dataSources.SaveDSFromDialog(false);\n      dataSources.DeleteDatasouceFromActiveTab(dsName);\n    });\n  });","file":"e2e/Regression/ClientSide/BugTests/DSDiscardBugs_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Bug 19801: Create new Auth DS, refresh the page without saving, we should not see discard popup","suites":["datasource unsaved changes popup shows even without changes"],"updatePoint":{"line":84,"column":104,"index":4059},"line":84,"code":"  it(\"4. Bug 19801: Create new Auth DS, refresh the page without saving, we should not see discard popup\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      // using CreatePlugIn function instead of CreateDatasource,\n      // because I do not need to fill the datasource form and use the same default data\n      dataSources.CreatePlugIn(\"Authenticated API\");\n      agHelper.RefreshPage();\n      agHelper.AssertElementAbsence(dataSources._datasourceModalSave);\n    });\n  });","file":"e2e/Regression/ClientSide/BugTests/DSDiscardBugs_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should comment code in Property Pane","suites":["Property Pane Code Commenting"],"updatePoint":{"line":13,"column":45,"index":357},"line":13,"code":"  it(\"1. Should comment code in Property Pane\", () => {\n    EntityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    PropertyPane.TypeTextIntoField(\"Label\", \"{{appsmith}}\");\n    PropertyPane.ToggleCommentInTextField(\"Label\");\n    PropertyPane.ValidatePropertyFieldValue(\"Label\", \"{{// appsmith}}\");\n\n    //Uncomment\n    EntityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    PropertyPane.TypeTextIntoField(\"Label\", \"{{// appsmith}}\");\n    PropertyPane.ToggleCommentInTextField(\"Label\");\n    PropertyPane.ValidatePropertyFieldValue(\"Label\", \"{{appsmith}}\");\n  });","file":"e2e/Regression/ClientSide/CodeComment/PropertyPaneCodeComment_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change in auto height with limits width for widgets and highlight section validation","suites":["Dynamic Height Width validation with limits"],"updatePoint":{"line":5,"column":102,"index":399},"line":5,"code":"  it(\"1. Validate change in auto height with limits width for widgets and highlight section validation\", function () {\n    cy.addDsl(dsl);\n    cy.wait(3000); //for dsl to settle\n    entityExplorer.SelectEntityByName(\"Container1\");\n    cy.get(commonlocators.generalSectionHeight).should(\"be.visible\");\n    cy.changeLayoutHeight(commonlocators.autoHeightWithLimits);\n    cy.wait(3000); //for dsl to settle\n    //cy.checkMinDefaultValue(commonlocators.minHeight,\"4\")\n    //cy.testJsontext(commonlocators.minHeight, \"5\");\n    //cy.get(commonlocators.overlayMin).should(\"be.visible\");\n    cy.get(\"[data-testid='t--auto-height-overlay-handles-min']\").trigger(\"mouseover\");\n    cy.contains(\"Min-Height: 10 rows\");\n    cy.get(\"[data-testid='t--auto-height-overlay-handles-min']\").should(\"be.visible\");\n    cy.get(\"[data-testid='t--auto-height-overlay-handles-min'] div\").eq(0).should(\"have.css\", \"background-color\", \"rgb(243, 43, 139)\");\n    /*cy.get(commonlocators.overlayMin).should(\n            \"have.css\",\n            \"background-color\",\n            \"rgba(243, 43, 139, 0.1)\",\n        );*/\n    cy.get(\"[data-testid='t--auto-height-overlay-handles-max']\").trigger(\"mouseover\");\n    cy.contains(\"Max-Height: 12 rows\");\n    //cy.checkMaxDefaultValue(commonlocators.maxHeight,\"40\")\n    //cy.testJsontext(commonlocators.maxHeight, \"60\");\n    cy.get(\"[data-testid='t--auto-height-overlay-handles-max']\").should(\"be.visible\");\n    cy.get(\"[data-testid='t--auto-height-overlay-handles-max'] div\").eq(0).should(\"have.css\", \"background-color\", \"rgb(243, 43, 139)\");\n    //cy.contains(\"Max-Height: 60 rows\");\n    cy.changeLayoutHeight(commonlocators.fixed);\n    cy.changeLayoutHeight(commonlocators.autoHeightWithLimits);\n    //cy.contains(\"Min-Height: 5 rows\");\n    //cy.checkMinDefaultValue(commonlocators.minHeight,\"5\")\n    // cy.checkMaxDefaultValue(commonlocators.maxHeight,\"60\")\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Auto_Height_Limit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with auto height width for widgets","suites":["Dynamic Height Width validation"],"updatePoint":{"line":12,"column":59,"index":576},"line":12,"code":"  it(\"1. Validate change with auto height width for widgets\", function () {\n    cy.addDsl(dsl);\n    cy.wait(3000); //for dsl to settle\n    entityExplorer.SelectEntityByName(\"Container1\", \"Widgets\");\n    entityExplorer.SelectEntityByName(\"CheckboxGroup1\", \"Container1\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-fontsize .rc-select\").invoke(\"css\", \"font-size\").then(dropdownFont => {\n      cy.get(\".t--property-control-fontsize input\").last().click({\n        force: true\n      });\n      cy.get(\".rc-select-item-option-content\").should(\"have.length.greaterThan\", 2).its(\"length\").then(n => {\n        for (let i = 0; i < n; i++) {\n          cy.get(\".rc-select-item-option-content\").eq(i).invoke(\"css\", \"font-size\").then(selectedFont => {\n            expect(dropdownFont).to.equal(selectedFont);\n          });\n        }\n      });\n    });\n    cy.get(\".t--property-control-fontsize .rc-select\").invoke(\"css\", \"font-family\").then(dropdownFont => {\n      //cy.get(\".t--property-control-fontsize .remixicon-icon\").click({ force: true })\n      cy.get(\".t--dropdown-option span\").should(\"have.length.greaterThan\", 2).its(\"length\").then(n => {\n        for (let i = 0; i < n; i++) {\n          cy.get(\".t--dropdown-option span\").eq(i).invoke(\"css\", \"font-family\").then(selectedFont => {\n            expect(dropdownFont).to.equal(selectedFont);\n          });\n        }\n      });\n    });\n    cy.moveToContentTab();\n    //cy.changeLayoutHeight(commonlocators.autoHeight);\n    cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(height => {\n      cy.get(\".t--widget-checkboxgroupwidget\").invoke(\"css\", \"height\").then(checkboxheight => {\n        cy.get(commonlocators.addOption).click();\n        cy.wait(200);\n        cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n        cy.wait(3000);\n        cy.get(\".t--widget-checkboxgroupwidget\").invoke(\"css\", \"height\").then(newcheckboxheight => {\n          expect(checkboxheight).to.not.equal(newcheckboxheight);\n        });\n      });\n      cy.wait(2000);\n      cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height).to.not.equal(newheight);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Auto_Height_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate container with auto height and child widgets with fixed height","suites":["Dynamic Height Width validation"],"updatePoint":{"line":58,"column":80,"index":2818},"line":58,"code":"  it(\"2. Validate container with auto height and child widgets with fixed height\", function () {\n    cy.addDsl(cdsl);\n    cy.wait(3000); //for dsl to settle\n    entityExplorer.SelectEntityByName(\"CheckboxGroup1\", \"Container1\");\n    cy.get(commonlocators.generalSectionHeight).scrollIntoView().should(\"be.visible\");\n    cy.changeLayoutHeight(commonlocators.autoHeight);\n    entityExplorer.SelectEntityByName(\"Input1\");\n    cy.get(commonlocators.generalSectionHeight).scrollIntoView().should(\"be.visible\");\n    cy.changeLayoutHeight(commonlocators.autoHeight);\n    cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(height => {\n      entityExplorer.SelectEntityByName(\"Container1\", \"Widgets\");\n      cy.changeLayoutHeight(commonlocators.autoHeight);\n      cy.wait(4000);\n      cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height).to.not.equal(newheight);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Auto_Height_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with auto height width for widgets","suites":["Dynamic Height Width validation with multiple containers and text widget"],"updatePoint":{"line":5,"column":59,"index":388},"line":5,"code":"  it(\"1. Validate change with auto height width for widgets\", function () {\n    const textMsg = \"Dynamic panel validation for text widget wrt height Dynamic panel validation for text widget wrt height Dynamic panel validation for text widget wrt height\";\n    cy.addDsl(dsl);\n    cy.wait(3000); //for dsl to settle\n    cy.get(\".t--widget-containerwidget\").eq(0).invoke(\"css\", \"height\").then(oheight => {\n      cy.get(\".t--widget-textwidget\").invoke(\"css\", \"height\").then(tnewheight => {\n        entityExplorer.SelectEntityByName(\"Text1\", \"Container1\");\n        cy.get(\".t--widget-textwidget\").invoke(\"css\", \"height\").then(theight => {\n          //Changing the text label\n          cy.testCodeMirror(textMsg);\n          cy.moveToStyleTab();\n          cy.ChangeTextStyle(this.data.TextHeading, commonlocators.headingTextStyle, textMsg);\n          cy.wait(\"@updateLayout\");\n          cy.get(\".t--widget-textwidget\").invoke(\"css\", \"height\").then(tnewheight => {\n            expect(theight).to.not.equal(tnewheight);\n            cy.get(\".t--widget-containerwidget\").eq(0).invoke(\"css\", \"height\").then(newcheight => {\n              expect(oheight).to.not.equal(newcheight);\n              cy.moveToContentTab();\n              const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n              cy.get(\".CodeMirror textarea\").first().focus().type(`{${modifierKey}}a`).then($cm => {\n                if ($cm.val() !== \"\") {\n                  cy.get(\".CodeMirror textarea\").first().clear({\n                    force: true\n                  });\n                }\n              });\n              cy.wait(\"@updateLayout\");\n              cy.wait(4000);\n              cy.get(\".t--widget-containerwidget\").eq(0).invoke(\"css\", \"height\").then(updatedcheight => {\n                expect(oheight).to.equal(updatedcheight);\n              });\n            });\n          });\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/CanvasHeight_resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with auto height width for widgets","suites":["Dynamic Height Width validation"],"updatePoint":{"line":4,"column":59,"index":274},"line":4,"code":"  it(\"1. Validate change with auto height width for widgets\", function () {\n    cy.addDsl(dsl);\n    cy.wait(3000); //for dsl to settle\n    entityExplorer.SelectEntityByName(\"Container1\");\n    cy.get(\".t--widget-textwidget\").trigger(\"mouseover\", {\n      force: true\n    }); // Scroll 'sidebar' to its bottom\n    entityExplorer.SelectEntityByName(\"Text1\", \"Container1\");\n    //cy.PublishtheApp();\n    //cy.wait(5000);\n    //cy.get(\".t--widget-containerwidget\").trigger(\"mouseover\",{force:true}) // Scroll 'sidebar' to its bottom\n    cy.wait(5000);\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Container_Scroll_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should have contents centered using align-items css","suites":["Auto height default widget content alignment"],"updatePoint":{"line":11,"column":60,"index":373},"line":11,"code":"  it(\"1. Should have contents centered using align-items css\", () => {\n    cy.get(\"[data-testid='t--centered-Text1-x2dmaguw7a']\").should(\"have.css\", \"align-items\", \"center\");\n    cy.get(\"[data-testid='t--centered-Checkbox1-sio6hr58nk']\").should(\"have.css\", \"align-items\", \"center\");\n    cy.get(\"[data-testid='t--centered-Switch1-4vy4pjyjat']\").should(\"have.css\", \"align-items\", \"center\");\n    cy.get(\"[data-testid='t--centered-Text2-1k6r0gx5sd']\").should(\"have.css\", \"align-items\", \"flex-start\");\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Content_Alignment_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validating visbility/invisiblity of widget with dynamic height feature","suites":["Dynamic Height Width validation for Visibility"],"updatePoint":{"line":8,"column":79,"index":415},"line":8,"code":"  it(\"1. Validating visbility/invisiblity of widget with dynamic height feature\", function () {\n    //changing the Text Name and verifying\n    cy.wait(3000);\n    entityExplorer.SelectEntityByName(\"Container1\", \"Widgets\");\n    cy.changeLayoutHeightWithoutWait(commonlocators.autoHeight);\n    entityExplorer.SelectEntityByName(\"Input1\", \"Container1\");\n    cy.changeLayoutHeightWithoutWait(commonlocators.autoHeight);\n    entityExplorer.SelectEntityByName(\"Input2\", \"Container1\");\n    cy.changeLayoutHeightWithoutWait(commonlocators.autoHeight);\n    cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(theight => {\n      cy.get(commonlocators.checkboxIndicator).click({\n        force: true\n      });\n      cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.equal(tnewheight);\n        cy.get(\"label:Contains('On')\").should(\"not.be.enabled\");\n      });\n    });\n    cy.PublishtheApp();\n    cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(theight => {\n      cy.get(\".bp3-control-indicator\").click({\n        force: true\n      });\n      cy.wait(2000);\n      cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.not.equal(tnewheight);\n        cy.get(\"label:Contains('On')\").should(\"not.exist\");\n        cy.get(\"label:Contains('Off')\").should(\"be.visible\");\n        cy.get(\".bp3-control-indicator\").click({\n          force: true\n        });\n        cy.wait(2000);\n        cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(tonheight => {\n          expect(tonheight).to.not.equal(tnewheight);\n          cy.get(\"label:Contains('Off')\").should(\"not.exist\");\n          cy.get(\"label:Contains('On')\").should(\"be.visible\");\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/DynamicHeight_Visibility_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with auto height width for Form/Switch","suites":["Dynamic Height Width validation"],"updatePoint":{"line":5,"column":63,"index":349},"line":5,"code":"  it(\"1. Validate change with auto height width for Form/Switch\", function () {\n    cy.addDsl(dsl);\n    cy.wait(3000); //for dsl to settle\n    entityExplorer.SelectEntityByName(\"Form1\", \"Widgets\");\n    cy.get(\".t--widget-formwidget\").invoke(\"css\", \"height\").then(formheight => {\n      cy.changeLayoutHeight(commonlocators.autoHeight);\n      entityExplorer.SelectEntityByName(\"SwitchGroup1\", \"Form1\");\n      cy.changeLayoutHeight(commonlocators.autoHeight);\n      cy.get(\".t--widget-switchgroupwidget\").invoke(\"css\", \"height\").then(switchheight => {\n        cy.get(\".t--widget-formwidget\").invoke(\"css\", \"height\").then(newformheight => {\n          //expect(formheight).to.not.equal(newformheight)\n          cy.updateCodeInput(\".t--property-control-options\", `[\n              {\n                \"label\": \"Blue\",\n                \"value\": \"BLUE\"\n              },\n              {\n                \"label\": \"Green\",\n                \"value\": \"GREEN\"\n              },\n              {\n                \"label\": \"Red\",\n                \"value\": \"RED\"\n              },\n              {\n                \"label\": \"Yellow\",\n                \"value\": \"YELLOW\"\n              },\n              {\n                \"label\": \"Purple\",\n                \"value\": \"PURPLE\"\n              },\n              {\n                \"label\": \"Pink\",\n                \"value\": \"PINK\"\n              },\n              {\n                \"label\": \"Black\",\n                \"value\": \"BLACK\"\n              },\n              {\n                \"label\": \"Grey\",\n                \"value\": \"GREY\"\n              },\n              {\n                \"label\": \"Orange\",\n                \"value\": \"ORANGE\"\n              },\n              {\n                \"label\": \"Cream\",\n                \"value\": \"CREAM\"\n              }\n            ]`);\n          cy.get(\".t--widget-switchgroupwidget\").invoke(\"css\", \"height\").then(newswitchheight => {\n            cy.get(\".t--widget-formwidget\").invoke(\"css\", \"height\").then(updatedformheight => {\n              expect(newformheight).to.not.equal(updatedformheight);\n              expect(switchheight).to.not.equal(newswitchheight);\n            });\n          });\n        });\n      });\n    });\n    cy.get(\".t--draggable-switchgroupwidget .bp3-control-indicator\").first().click({\n      force: true\n    });\n    cy.wait(3000);\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--widget-propertypane-toggle\").last().click({\n      force: true\n    });\n    //cy.changeLayoutHeight(commonlocators.autoHeightWithLimits);\n    //cy.checkMinDefaultValue(commonlocators.minHeight,\"4\")\n    //cy.checkMaxDefaultValue(commonlocators.maxHeight,\"24\")\n    cy.changeLayoutHeight(commonlocators.autoHeight);\n    cy.wait(3000);\n    cy.get(\"button:contains('Close')\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Form_With_SwitchGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Divider should be below Button Widget in edit mode","suites":["Fixed Invisible widgets and auto height containers"],"updatePoint":{"line":15,"column":59,"index":585},"line":15,"code":"  it(\"1. Divider should be below Button Widget in edit mode\", () => {\n    // This test checks for the height of the button widget and the filepicker widget\n    // As well as the top value for the widgets below button and filepicker (divider and checkbox respectively)\n    cy.get(CommonLocators._widgetInDeployed(\"buttonwidget\")).should(\"have.css\", \"height\", \"230px\");\n    cy.get(CommonLocators._widgetInDeployed(\"filepickerwidgetv2\")).should(\"have.css\", \"height\", \"90px\");\n    cy.get(CommonLocators._widgetInDeployed(\"dividerwidget\")).should(\"have.css\", \"top\", \"246px\");\n    cy.get(CommonLocators._widgetInDeployed(\"checkboxwidget\")).should(\"have.css\", \"top\", \"96px\");\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Invisible_Widgets_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Divider should move up by the height of the button widget in preview mode","suites":["Fixed Invisible widgets and auto height containers"],"updatePoint":{"line":23,"column":82,"index":1283},"line":23,"code":"  it(\"2. Divider should move up by the height of the button widget in preview mode\", () => {\n    // This tests if the divider and checkbox widget move up by an appropriate amount in preview mode.\n    AggregateHelper.AssertElementVisible(CommonLocators._previewModeToggle(\"edit\"));\n    AggregateHelper.GetNClick(CommonLocators._previewModeToggle(\"edit\"));\n    cy.get(CommonLocators._widgetInDeployed(\"dividerwidget\")).should(\"have.css\", \"top\", \"16px\");\n    cy.get(CommonLocators._widgetInDeployed(\"checkboxwidget\")).should(\"have.css\", \"top\", \"6px\");\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Invisible_Widgets_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Divider should move up by the height of the button widget in view mode","suites":["Fixed Invisible widgets and auto height containers"],"updatePoint":{"line":30,"column":79,"index":1835},"line":30,"code":"  it(\"3. Divider should move up by the height of the button widget in view mode\", () => {\n    // This tests if the divider and checkbox widget move up by an appropriate amount in view mode.\n    DeployMode.DeployApp();\n    cy.get(CommonLocators._widgetInDeployed(\"dividerwidget\")).should(\"have.css\", \"top\", \"16px\");\n    cy.get(CommonLocators._widgetInDeployed(\"checkboxwidget\")).should(\"have.css\", \"top\", \"6px\");\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Invisible_Widgets_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with auto height width for JsonForm","suites":["Dynamic Height Width validation"],"updatePoint":{"line":5,"column":60,"index":344},"line":5,"code":"  it(\"1. Validate change with auto height width for JsonForm\", function () {\n    cy.addDsl(dsl);\n    cy.wait(3000); //for dsl to settle\n    entityExplorer.SelectEntityByName(\"JSONForm1\", \"Widgets\");\n    cy.get(\".t--widget-jsonformwidget\").invoke(\"css\", \"height\").then(formheight => {\n      cy.changeLayoutHeight(commonlocators.autoHeight);\n      cy.wait(5000);\n      cy.get(\".t--widget-jsonformwidget\").invoke(\"css\", \"height\").then(newformheight => {\n        expect(formheight).to.not.equal(newformheight);\n        cy.get(\".t--show-column-btn\").eq(0).click({\n          force: true\n        });\n        cy.get(\".t--show-column-btn\").eq(1).click({\n          force: true\n        });\n        cy.get(\".t--show-column-btn\").eq(2).click({\n          force: true\n        });\n        // cy.get(\"[data-testid='t--resizable-handle-TOP']\")\n        //     .within(($el) => {\n        //         cy.window().then((win) => {\n        //             const after = win.getComputedStyle($el[0], \"::after\");\n        //             expect(after).not.to.exist\n        //         });\n        //     });\n        // cy.get(\"[data-testid='t--resizable-handle-BOTTOM']\").should(\"not.exist\");\n        cy.changeLayoutHeight(commonlocators.fixed);\n        cy.wait(5000);\n        cy.get(\".t--widget-jsonformwidget\").invoke(\"css\", \"height\").then(updatedformheight => {\n          expect(newformheight).to.not.equal(updatedformheight);\n          cy.get(\".t--show-column-btn\").eq(2).click({\n            force: true\n          });\n          cy.get(\".t--show-column-btn\").eq(1).click({\n            force: true\n          });\n          // cy.get(\"[data-testid='t--resizable-handle-TOP']\").should(\"exist\");\n          // cy.get(\"[data-testid='t--resizable-handle-BOTTOM']\").should(\"exist\");\n          cy.changeLayoutHeight(commonlocators.autoHeight);\n          cy.wait(5000);\n          cy.get(\".t--widget-jsonformwidget\").invoke(\"css\", \"height\").then(newupdatedformheight => {\n            expect(updatedformheight).to.not.equal(newupdatedformheight);\n          });\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/JsonForm_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with auto height width for List widgets","suites":["Dynamic Height Width validation"],"updatePoint":{"line":5,"column":64,"index":337},"line":5,"code":"  it(\"1. Validate change with auto height width for List widgets\", function () {\n    cy.addDsl(dsl);\n    entityExplorer.SelectEntityByName(\"Tab 1\", \"Tabs1\");\n    entityExplorer.SelectEntityByName(\"List1\", \"Tab 1\");\n    cy.get(\".t--widget-listwidgetv2\").invoke(\"css\", \"height\").then(lheight => {\n      cy.get(commonlocators.generalSectionHeight).should(\"not.exist\");\n      cy.moveToStyleTab();\n      cy.testJsontext(\"itemspacing\\\\(px\\\\)\", \"16\");\n      cy.get(\".t--widget-listwidgetv2\").invoke(\"css\", \"height\").then(newheight => {\n        expect(lheight).to.equal(newheight);\n        cy.get(\".rc-pagination:contains('5')\").should(\"exist\");\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/List_Resizing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with auto height width for widgets","suites":["Dynamic Height Width validation"],"updatePoint":{"line":5,"column":59,"index":339},"line":5,"code":"  it(\"1. Validate change with auto height width for widgets\", function () {\n    const textMsg = \"Dynamic panel validation for text widget wrt height\";\n    cy.addDsl(dsl);\n    entityExplorer.SelectEntityByName(\"List1\");\n    cy.get(\".t--widget-listwidget\").invoke(\"css\", \"height\").then(lheight => {\n      cy.get(commonlocators.generalSectionHeight).should(\"not.exist\");\n      entityExplorer.SelectEntityByName(\"Container1\", \"List1\");\n      entityExplorer.SelectEntityByName(\"Text1\", \"Container1\");\n      cy.get(commonlocators.generalSectionHeight).should(\"not.exist\");\n      cy.testCodeMirror(textMsg);\n      entityExplorer.SelectEntityByName(\"Text2\");\n      cy.get(commonlocators.generalSectionHeight).should(\"not.exist\");\n      cy.testCodeMirror(textMsg);\n      cy.get(\".t--widget-listwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(lheight).to.equal(newheight);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change in auto height with limits width for widgets and highlight section validation","suites":["Dynamic Height Width validation with limits"],"updatePoint":{"line":5,"column":102,"index":395},"line":5,"code":"  it(\"1. Validate change in auto height with limits width for widgets and highlight section validation\", function () {\n    const textMsg = \"Dynamic panel validation for text widget wrt heightDynamic panel validation for text widget wrt heightDynamic panel validation for text widget wrt height Dynamic panel validation for text widget Dynamic panel validation for text widget Dynamic panel validation for text widget\";\n    cy.addDsl(dsl);\n    entityExplorer.SelectEntityByName(\"Modal1\", \"Widgets\");\n    cy.get(\".t--modal-widget\").invoke(\"css\", \"height\").then(mheight => {\n      entityExplorer.SelectEntityByName(\"Text1\", \"Modal1\");\n      cy.get(commonlocators.generalSectionHeight).should(\"be.visible\");\n      cy.changeLayoutHeightWithoutWait(commonlocators.autoHeight);\n      cy.openPropertyPaneFromModal(\"textwidget\");\n      cy.get(\".t--widget-textwidget\").invoke(\"css\", \"height\").then(theight => {\n        cy.testCodeMirror(textMsg);\n        cy.wait(\"@updateLayout\");\n        cy.get(\".t--widget-textwidget\").invoke(\"css\", \"height\").then(tnewheight => {\n          expect(theight).to.not.equal(tnewheight);\n        });\n        cy.selectEntityByName(\"Modal1\");\n        cy.changeLayoutHeightWithoutWait(commonlocators.autoHeight);\n        cy.wait(3000);\n        cy.get(\".t--modal-widget\").invoke(\"css\", \"height\").then(mnewheight => {\n          expect(mheight).to.not.equal(mnewheight);\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Modal_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change in auto height width with multiple containers","suites":["Dynamic Height Width validation for multiple container"],"updatePoint":{"line":7,"column":70,"index":342},"line":7,"code":"  it(\"1. Validate change in auto height width with multiple containers\", function () {\n    cy.wait(3000); //for dsl to settle\n    cy.openPropertyPaneWithIndex(\"containerwidget\", 0);\n    cy.changeLayoutHeight(commonlocators.fixed);\n    cy.changeLayoutHeight(commonlocators.autoHeight);\n    cy.openPropertyPaneWithIndex(\"containerwidget\", 1);\n    cy.changeLayoutHeight(commonlocators.fixed);\n    cy.changeLayoutHeight(commonlocators.autoHeight);\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.changeLayoutHeight(commonlocators.fixed);\n    cy.changeLayoutHeight(commonlocators.autoHeight);\n    cy.wait(2000);\n    cy.get(\".t--widget-containerwidget\").eq(0).invoke(\"css\", \"height\").then(oheight => {\n      cy.get(\".t--widget-containerwidget\").eq(1).invoke(\"css\", \"height\").then(mheight => {\n        cy.get(\".t--widget-containerwidget\").eq(2).invoke(\"css\", \"height\").then(iheight => {\n          cy.get(\".t--widget-checkboxgroupwidget\").invoke(\"css\", \"height\").then(checkboxheight => {\n            cy.get(commonlocators.addOption).click({\n              force: true\n            });\n            cy.get(commonlocators.addOption).click({\n              force: true\n            });\n            cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n            cy.wait(3000);\n            cy.get(\".t--widget-checkboxgroupwidget\").invoke(\"css\", \"height\").then(newcheckboxheight => {\n              expect(checkboxheight).to.not.equal(newcheckboxheight);\n            });\n          });\n          cy.wait(2000);\n          cy.get(\".t--widget-containerwidget\").eq(0).invoke(\"css\", \"height\").then(onewheight => {\n            expect(oheight).to.not.equal(onewheight);\n          });\n          cy.get(\".t--widget-containerwidget\").eq(1).invoke(\"css\", \"height\").then(mnewheight => {\n            expect(mheight).to.not.equal(mnewheight);\n          });\n          cy.get(\".t--widget-containerwidget\").eq(2).invoke(\"css\", \"height\").then(inewheight => {\n            expect(iheight).to.not.equal(inewheight);\n          });\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Multiple_Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Invisible widgets should not overlap when returning from preview mode to edit mode","suites":["Fixed Invisible widgets and auto height containers"],"updatePoint":{"line":15,"column":91,"index":608},"line":15,"code":"  it(\"1. Invisible widgets should not overlap when returning from preview mode to edit mode\", () => {\n    cy.get(CommonLocators._widgetInDeployed(\"textwidget\"));\n    AggregateHelper.AssertContains(\"anything\", \"exist\", \"#ryq5qy60cg\");\n    AggregateHelper.AssertElementVisible(CommonLocators._previewModeToggle(\"edit\"));\n    AggregateHelper.GetNClick(CommonLocators._previewModeToggle(\"edit\"));\n    AggregateHelper.AssertElementVisible(CommonLocators._previewModeToggle(\"preview\"));\n    AggregateHelper.GetNClick(CommonLocators._previewModeToggle(\"preview\"));\n    cy.get(\"#ryq5qy60cg\").should(\"have.css\", \"top\", \"136px\");\n    cy.get(\"#kx7mvoopqu\").should(\"have.css\", \"top\", \"96px\");\n    cy.get(\"#m4doxmviiu\").should(\"have.css\", \"top\", \"56px\");\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Overlap_Test_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Tab widget validation of height with dynamic height feature with publish mode","suites":["Dynamic Height Width validation for Tab widget"],"updatePoint":{"line":26,"column":86,"index":1031},"line":26,"code":"  it(\"1. Tab widget validation of height with dynamic height feature with publish mode\", function () {\n    //changing the Text Name and verifying\n    cy.wait(3000);\n    cy.openPropertyPane(\"tabswidget\");\n    cy.changeLayoutHeight(commonlocators.autoHeight);\n    cy.get(\".t--tabid-tab1\").click({\n      force: true\n    });\n    validateHeight();\n    cy.PublishtheApp();\n    validateHeight();\n    cy.get(publish.backToEditor).click();\n    _.agHelper.AssertElementVisible(_.locators._previewModeToggle(\"edit\"));\n    _.agHelper.GetNClick(_.locators._previewModeToggle(\"edit\"));\n    cy.wait(2000);\n    cy.get(\".t--tabid-tab1\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\".t--widget-tabswidget\").invoke(\"css\", \"height\").then(theight => {\n      cy.get(\".t--tabid-tab2\").click({\n        force: true\n      });\n      cy.wait(1000);\n      //cy.get(\".t--draggable-checkboxwidget .bp3-control-indicator\").click({ force: true })\n      cy.get(\".t--widget-tabswidget\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.not.equal(tnewheight);\n      });\n    });\n    // it(\"Tab widget validation of height with preview mode\", function() {\n    _.agHelper.AssertElementVisible(_.locators._previewModeToggle(\"preview\"));\n    _.agHelper.GetNClick(_.locators._previewModeToggle(\"preview\"));\n    cy.wait(2000);\n    cy.openPropertyPane(\"tabswidget\");\n    cy.changeLayoutHeight(commonlocators.fixed);\n    cy.get(\".t--tabid-tab1\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\".t--widget-tabswidget\").invoke(\"css\", \"height\").then(theight => {\n      cy.get(\".t--tabid-tab2\").click({\n        force: true\n      });\n      cy.wait(2000);\n      //cy.get(\".t--draggable-checkboxwidget .bp3-control-indicator\").click({ force: true })\n      cy.get(\".t--widget-tabswidget\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.equal(tnewheight);\n        cy.get(commonlocators.showTabsControl).click({\n          force: true\n        });\n        cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n        cy.get(\".t--widget-tabswidget\").invoke(\"css\", \"height\").then(upheight => {\n          expect(tnewheight).to.equal(upheight);\n          cy.get(\".t--tabid-tab1\").should(\"not.exist\");\n          cy.get(\".t--tabid-tab2\").should(\"not.exist\");\n        });\n      });\n    });\n    //it(\"Tab widget validation of height with reload\", function() {\n    cy.wait(2000);\n    cy.openPropertyPane(\"tabswidget\");\n    cy.get(commonlocators.generalSectionHeight).should(\"be.visible\");\n    cy.get(commonlocators.showTabsControl).click({\n      force: true\n    });\n    cy.changeLayoutHeight(commonlocators.autoHeight);\n    cy.wait(2000);\n    cy.get(\".t--tabid-tab1\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\".t--widget-tabswidget\").invoke(\"css\", \"height\").then(theight => {\n      cy.get(\".t--tabid-tab2\").click({\n        force: true\n      });\n      cy.changeLayoutHeight(commonlocators.fixed);\n      cy.wait(2000);\n      cy.reload();\n      cy.openPropertyPane(\"tabswidget\");\n      cy.get(\".t--widget-tabswidget\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.not.equal(tnewheight);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Text widget validation of height with dynamic height feature","suites":["Dynamic Height Width validation for text widget"],"updatePoint":{"line":8,"column":69,"index":408},"line":8,"code":"  it(\"1. Text widget validation of height with dynamic height feature\", function () {\n    const textMsg = \"Dynamic panel validation for text widget wrt height\";\n    //changing the Text Name and verifying\n    entityExplorer.SelectEntityByName(\"Text1\", \"Widgets\");\n    cy.get(commonlocators.generalSectionHeight).should(\"be.visible\");\n    cy.changeLayoutHeightWithoutWait(commonlocators.autoHeight);\n    cy.get(\".t--widget-textwidget\").invoke(\"css\", \"height\").then(theight => {\n      //Changing the text label\n      cy.testCodeMirror(textMsg);\n      cy.moveToStyleTab();\n      cy.ChangeTextStyle(this.data.TextHeading, commonlocators.headingTextStyle, textMsg);\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--widget-textwidget\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.not.equal(tnewheight);\n      });\n      cy.PublishtheApp();\n      cy.get(commonlocators.headingTextStyle).should(\"have.text\", textMsg).should(\"have.css\", \"font-size\", \"16px\");\n      cy.get(\".t--widget-textwidget\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.not.equal(tnewheight);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Text_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with auto height width for text widgets","suites":["Dynamic Height Width validation"],"updatePoint":{"line":67,"column":64,"index":3590},"line":67,"code":"  it(\"1. Validate change with auto height width for text widgets\", function () {\n    cy.addDsl(dsl);\n    cy.wait(30000); //for dsl to settled\n    validateCssProperties(\"height\");\n    //validateCssProperties(\"top\");\n    validateCssProperties(\"left\");\n  });","file":"e2e/Regression/ClientSide/DynamicHeight/Text_With_Different_Size_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Help Button on editor"],"updatePoint":{"line":3,"column":22,"index":133},"line":3,"code":"  it(\"excludeForAirgap\", \"1. Chat with us and Intercom consent should be visible on Help Menu\", () => {\n    _.agHelper.GetNClick(_.debuggerHelper.locators._helpButton, 0, true, 1000);\n    _.agHelper.GetNClick(_.debuggerHelper.locators._intercomOption, 0, true, 1000);\n    _.agHelper.GetNAssertElementText(_.debuggerHelper.locators._intercomConsentText, \"Can we have your email for better support?\", \"contain.text\");\n  });","file":"e2e/Regression/ClientSide/Editor/HelpButton_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Allow embedding everywhere","suites":["Embed settings options","Wrapper to get access to the alias in all tests"],"updatePoint":{"line":51,"column":37,"index":2314},"line":51,"code":"    it(\"1. Allow embedding everywhere\", function () {\n      cy.log(this.deployUrl);\n      homePage.NavigateToHome();\n      cy.get(\".admin-settings-menu-option\").click();\n      cy.get(\".t--admin-settings-APPSMITH_ALLOWED_FRAME_ANCESTORS\").within(() => {\n        cy.get(\"input\").eq(0).click();\n      });\n      cy.get(adminSettings.saveButton).click();\n      cy.waitForServerRestart();\n      // TODO: Commented out as it is flaky\n      // cy.wait([\"@getEnvVariables\", \"@getEnvVariables\"]).then((interception) => {\n      //   const {\n      //     APPSMITH_ALLOWED_FRAME_ANCESTORS,\n      //   } = interception[1].response.body.data;\n      //   expect(APPSMITH_ALLOWED_FRAME_ANCESTORS).to.equal(\"*\");\n      // });\n      cy.get(adminSettings.restartNotice).should(\"not.exist\");\n      cy.visit(this.deployUrl);\n      getIframeBody().contains(\"Submit\").should(\"exist\");\n      ValidateEditModeSetting(embedSettings.locators._allowAllText);\n    });","file":"e2e/Regression/ClientSide/EmbedSettings/EmbedSettings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Limit embedding","suites":["Embed settings options","Wrapper to get access to the alias in all tests"],"updatePoint":{"line":72,"column":26,"index":3241},"line":72,"code":"    it(\"2. Limit embedding\", function () {\n      cy.log(this.deployUrl);\n      homePage.NavigateToHome();\n      cy.get(\".admin-settings-menu-option\").click();\n      cy.get(\".t--admin-settings-APPSMITH_ALLOWED_FRAME_ANCESTORS\").within(() => {\n        cy.get(\"input\").eq(1).click();\n        cy.get(\".bp3-input-ghost\").type(window.location.origin).blur();\n      });\n      cy.get(adminSettings.saveButton).click();\n      cy.waitForServerRestart();\n      cy.get(adminSettings.restartNotice).should(\"not.exist\");\n      cy.visit(this.deployUrl);\n      getIframeBody().contains(\"Submit\").should(\"exist\");\n      ValidateEditModeSetting(embedSettings.locators._restrictedText);\n    });","file":"e2e/Regression/ClientSide/EmbedSettings/EmbedSettings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Disable everywhere","suites":["Embed settings options","Wrapper to get access to the alias in all tests"],"updatePoint":{"line":87,"column":29,"index":3920},"line":87,"code":"    it(\"3. Disable everywhere\", function () {\n      cy.log(this.deployUrl);\n      homePage.NavigateToHome();\n      cy.get(\".admin-settings-menu-option\").click();\n      cy.get(\".t--admin-settings-APPSMITH_ALLOWED_FRAME_ANCESTORS\").within(() => {\n        cy.get(\"input\").last().click();\n      });\n      cy.get(adminSettings.saveButton).click();\n      cy.waitForServerRestart();\n      cy.get(adminSettings.restartNotice).should(\"not.exist\");\n      cy.visit(this.deployUrl);\n      // TODO: Commented out as it is flaky\n      // cy.wait([\"@getEnvVariables\", \"@getEnvVariables\"]).then((interception) => {\n      //   const {\n      //     APPSMITH_ALLOWED_FRAME_ANCESTORS,\n      //   } = interception[1].response.body.data;\n      //   expect(APPSMITH_ALLOWED_FRAME_ANCESTORS).to.equal(\"'none'\");\n      // });\n      getIframeBody().contains(\"Submit\").should(\"not.exist\");\n      ValidateEditModeSetting(embedSettings.locators._disabledText);\n    });","file":"e2e/Regression/ClientSide/EmbedSettings/EmbedSettings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should test that settings page is accessible to super user","suites":["Admin settings page"],"updatePoint":{"line":42,"column":67,"index":1243},"line":42,"code":"  it(\"1. should test that settings page is accessible to super user\", () => {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(\".admin-settings-menu-option\").should(\"be.visible\");\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.url().should(\"contain\", routes.GENERAL);\n    cy.wait(\"@getEnvVariables\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should test that page header is visible","suites":["Admin settings page"],"updatePoint":{"line":50,"column":48,"index":1592},"line":50,"code":"  it(\"2. should test that page header is visible\", () => {\n    cy.get(adminsSettings.appsmithHeader).should(\"be.visible\");\n    cy.visit(routes.GOOGLE_MAPS);\n    cy.url().should(\"contain\", \"/google-maps\");\n    cy.wait(2000); //page to load properly\n    cy.get(adminsSettings.appsmithHeader).should(\"be.visible\");\n    cy.visit(routes.GOOGLEAUTH);\n    cy.url().should(\"contain\", \"/google-auth\");\n    cy.wait(2000); //page to load properly\n    cy.get(adminsSettings.appsmithHeader).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should test that clicking on logo should redirect to applications page","suites":["Admin settings page"],"updatePoint":{"line":61,"column":79,"index":2129},"line":61,"code":"  it(\"3. should test that clicking on logo should redirect to applications page\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.appsmithHeader).should(\"be.visible\");\n    cy.get(adminsSettings.appsmithLogo).should(\"be.visible\");\n    cy.get(adminsSettings.appsmithLogo).click();\n    cy.url().should(\"contain\", routes.APPLICATIONS);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should test that settings page is redirected to default tab","suites":["Admin settings page"],"updatePoint":{"line":68,"column":68,"index":2472},"line":68,"code":"  it(\"4. should test that settings page is redirected to default tab\", () => {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(routes.SETTINGS);\n    cy.url().should(\"contain\", routes.GENERAL);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":73,"column":22,"index":2661},"line":73,"code":"  it(\"excludeForAirgap\", \"5. should test that settings page tab redirects not airgap\", () => {\n    cy.visit(routes.APPLICATIONS);\n    cy.wait(3000);\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.get(adminsSettings.generalTab).click();\n    cy.url().should(\"contain\", routes.GENERAL);\n    cy.get(adminsSettings.advancedTab).click();\n    cy.url().should(\"contain\", routes.ADVANCED);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.emailTab).click();\n    cy.url().should(\"contain\", routes.EMAIL);\n    cy.get(adminsSettings.googleMapsTab).click();\n    cy.url().should(\"contain\", routes.GOOGLE_MAPS);\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", routes.VERSION);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Admin settings page"],"updatePoint":{"line":90,"column":12,"index":3446},"line":90,"code":"  it(\"airgap\", \"5. should test that settings page tab redirects and google maps doesn't exist - airgap\", () => {\n    cy.visit(routes.APPLICATIONS);\n    cy.wait(3000);\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.get(adminsSettings.generalTab).click();\n    cy.url().should(\"contain\", routes.GENERAL);\n    cy.get(adminsSettings.advancedTab).click();\n    cy.url().should(\"contain\", routes.ADVANCED);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.emailTab).click();\n    cy.get(adminsSettings.googleMapsTab).should(\"not.exist\");\n    cy.url().should(\"contain\", routes.EMAIL);\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", routes.VERSION);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. should test save and clear buttons disabled state","suites":["Admin settings page"],"updatePoint":{"line":106,"column":58,"index":4265},"line":106,"code":"  it(\"6. should test save and clear buttons disabled state\", () => {\n    cy.visit(routes.GENERAL);\n    const assertVisibilityAndDisabledState = () => {\n      cy.get(adminsSettings.saveButton).should(\"be.visible\");\n      cy.get(adminsSettings.saveButton).should(\"be.disabled\");\n      cy.get(adminsSettings.resetButton).should(\"be.visible\");\n      cy.get(adminsSettings.resetButton).should(\"be.disabled\");\n    };\n    assertVisibilityAndDisabledState();\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    cy.get(adminsSettings.instanceName).clear().type(\"AppsmithInstance\");\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.resetButton).should(\"be.visible\");\n    cy.get(adminsSettings.resetButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.resetButton).click();\n    assertVisibilityAndDisabledState();\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. should test saving a setting value","suites":["Admin settings page"],"updatePoint":{"line":124,"column":43,"index":5183},"line":124,"code":"  it(\"7. should test saving a setting value\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(adminsSettings.instanceName).clear().type(uuid);\n    });\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(adminsSettings.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n    });\n    cy.get(adminsSettings.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. should test saving settings value from different tabs","suites":["Admin settings page"],"updatePoint":{"line":153,"column":62,"index":6241},"line":153,"code":"  it(\"8. should test saving settings value from different tabs\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(adminsSettings.instanceName).clear().type(uuid);\n    });\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.emailTab).click();\n    cy.get(adminsSettings.saveButton).should(\"be.visible\");\n    cy.get(adminsSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminsSettings.fromAddress).should(\"be.visible\");\n    let fromAddress;\n    cy.generateUUID().then(uuid => {\n      fromAddress = uuid;\n      cy.get(adminsSettings.fromAddress).clear().type(`${uuid}@appsmith.com`);\n    });\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(adminsSettings.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n      expect(interception.request.body.APPSMITH_MAIL_FROM).to.equal(`${fromAddress}@appsmith.com`);\n    });\n    cy.get(adminsSettings.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(adminsSettings.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. should test that instance name and admin emails exist on general tab","suites":["Admin settings page"],"updatePoint":{"line":192,"column":77,"index":7816},"line":192,"code":"  it(\"9. should test that instance name and admin emails exist on general tab\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.instanceName).should(\"be.visible\");\n    cy.get(adminsSettings.adminEmails).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. should test that configure link redirects to google maps setup doc","suites":["Admin settings page"],"updatePoint":{"line":197,"column":76,"index":8062},"line":197,"code":"  it(\"10. should test that configure link redirects to google maps setup doc\", () => {\n    cy.visit(routes.GOOGLE_MAPS);\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GOOGLE_MAPS_SETUP_DOC);\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":204,"column":22,"index":8353},"line":204,"code":"  it(\"excludeForAirgap\", \"11. should test that authentication page redirects\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.googleButton).click();\n    cy.url().should(\"contain\", routes.GOOGLEAUTH);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.githubButton).click();\n    cy.url().should(\"contain\", routes.GITHUBAUTH);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.formloginButton).click();\n    cy.url().should(\"contain\", routes.FORMLOGIN);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Admin settings page"],"updatePoint":{"line":219,"column":12,"index":9095},"line":219,"code":"  it(\"airgap\", \"11. should test that authentication page redirects and google and github auth doesn't exist - airgap\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.googleButton).should(\"not.exist\");\n    cy.get(adminsSettings.githubButton).should(\"not.exist\");\n    cy.get(adminsSettings.formloginButton).click();\n    cy.url().should(\"contain\", routes.FORMLOGIN);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":228,"column":22,"index":9601},"line":228,"code":"  it(\"excludeForAirgap\", \"12. should test that configure link redirects to google signup setup doc\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.googleButton).click();\n    cy.url().should(\"contain\", routes.GOOGLEAUTH);\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GOOGLE_SIGNUP_SETUP_DOC);\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":239,"column":22,"index":10175},"line":239,"code":"  it(\"excludeForAirgap\", \"13. should test that configure link redirects to github signup setup doc\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", routes.AUTHENTICATION);\n    cy.get(adminsSettings.githubButton).click();\n    cy.url().should(\"contain\", routes.GITHUBAUTH);\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").should(\"have.attr\", \"target\", \"_blank\").invoke(\"removeAttr\", \"target\").click();\n      cy.url().should(\"contain\", GITHUB_SIGNUP_SETUP_DOC);\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Admin settings page"],"updatePoint":{"line":250,"column":22,"index":10749},"line":250,"code":"  it(\"excludeForAirgap\", \"14. should test that read more on version opens up release notes\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", routes.VERSION);\n    cy.get(adminsSettings.readMoreLink).within(() => {\n      cy.get(\"a\").click();\n    });\n    cy.wait(2000);\n    cy.get(\".ads-v2-modal__content\").should(\"be.visible\");\n    cy.get(\".ads-v2-modal__content-header\").should(\"be.visible\");\n    cy.get(\".ads-v2-modal__content-header\").should(\"contain\", \"Product updates\");\n    cy.get(\".ads-v2-button__content-icon-start\").should(\"be.visible\");\n    cy.get(\".ads-v2-button__content-icon-start\").click();\n    cy.wait(2000);\n    cy.get(\".ads-v2-modal__content\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Admin settings page"],"updatePoint":{"line":266,"column":12,"index":11493},"line":266,"code":"  it(\"airgap\", \"14. should test that read more on version is hidden for airgap\", () => {\n    cy.visit(routes.GENERAL);\n    cy.get(adminsSettings.versionTab).click();\n    cy.url().should(\"contain\", routes.VERSION);\n    cy.get(adminsSettings.readMoreLink).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. should test that settings page is not accessible to normal users","suites":["Admin settings page"],"updatePoint":{"line":272,"column":74,"index":11836},"line":272,"code":"  it(\"15. should test that settings page is not accessible to normal users\", () => {\n    cy.LogOut();\n    cy.wait(2000);\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.get(\".admin-settings-menu-option\").should(\"not.exist\");\n    cy.visit(routes.GENERAL);\n    // non super users are redirected to home page\n    cy.url().should(\"contain\", routes.APPLICATIONS);\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Empty Message validation for Widgets/API/Queries","suites":["Entity explorer API pane related testcases"],"updatePoint":{"line":10,"column":57,"index":532},"line":10,"code":"  it(\"1. Empty Message validation for Widgets/API/Queries\", function () {\n    homePage.NavigateToHome();\n    homePage.CreateNewWorkspace(\"EmptyMsgCheck\");\n    homePage.CreateAppInWorkspace(\"EmptyMsgCheck\");\n    ee.ExpandCollapseEntity(\"Widgets\");\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"No widget to display\"));\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"New widget\"));\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"No query/JS to display\"));\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"New query/JS\"));\n    ee.ExpandCollapseEntity(\"Datasources\");\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"No datasource to display\"));\n    agHelper.AssertElementVisible(locator._visibleTextSpan(\"New datasource\"));\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/API_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Move to page / edit API name /properties validation","suites":["Entity explorer API pane related testcases"],"updatePoint":{"line":24,"column":60,"index":1367},"line":24,"code":"  it(\"2. Move to page / edit API name /properties validation\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.SaveAndRunAPI();\n    cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.ActionContextMenuByEntityName(\"FirstAPI\", \"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(5);\n      expect($lis.eq(0)).to.contain(\"{{FirstAPI.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{FirstAPI.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FirstAPI.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{FirstAPI.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{FirstAPI.clear()}}\");\n    });\n    cy.get(apiwidget.actionlist).contains(testdata.Get).should(\"be.visible\");\n    cy.Createpage(pageid);\n    ee.SelectEntityByName(\"Page1\");\n    agHelper.Sleep(); //for the selected entity to settle loading!\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.ActionContextMenuByEntityName(\"FirstAPI\", \"Edit name\");\n    cy.EditApiNameFromExplorer(\"SecondAPI\");\n    cy.xpath(apiwidget.popover).last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    ee.ActionContextMenuByEntityName(\"SecondAPI\", \"Move to page\", pageid);\n    agHelper.AssertContains(\"moved to page\");\n    cy.wait(500);\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.AssertEntityPresenceInExplorer(\"SecondAPI\");\n    ee.ActionContextMenuByEntityName(\"SecondAPI\", \"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(5);\n      expect($lis.eq(0)).to.contain(\"{{SecondAPI.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{SecondAPI.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{SecondAPI.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{SecondAPI.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{SecondAPI.clear()}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/API_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add a widget to default page and verify the properties","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":9,"column":63,"index":344},"line":9,"code":"  it(\"1. Add a widget to default page and verify the properties\", function () {\n    cy.fixture(\"displayWidgetDsl\").then(val => {\n      _.agHelper.AddDsl(val);\n    });\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container4\");\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"Text1\", \"Show bindings\");\n    cy.get(_.jsEditor._propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Bindings_Widgets_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create another page and add another widget and verify properties","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":23,"column":73,"index":987},"line":23,"code":"  it(\"2. Create another page and add another widget and verify properties\", function () {\n    _.entityExplorer.AddNewPage(\"New blank page\");\n    cy.fixture(\"tableWidgetDsl\").then(val => {\n      _.agHelper.AddDsl(val);\n    });\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\");\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"Table1\", \"Show bindings\");\n    cy.get(_.jsEditor._propertyList).then(function ($lis) {\n      expect($lis).to.have.length(13);\n      expect($lis.eq(0)).to.contain(\"{{Table1.selectedRow}}\");\n      expect($lis.eq(1)).to.contain(\"{{Table1.selectedRows}}\");\n      expect($lis.eq(2)).to.contain(\"{{Table1.selectedRowIndices}}\");\n      expect($lis.eq(3)).to.contain(\"{{Table1.triggeredRow}}\");\n      expect($lis.eq(4)).to.contain(\"{{Table1.selectedRowIndex}}\");\n      expect($lis.eq(5)).to.contain(\"{{Table1.tableData}}\");\n      expect($lis.eq(6)).to.contain(\"{{Table1.filteredTableData}}\");\n      expect($lis.eq(7)).to.contain(\"{{Table1.pageNo}}\");\n      expect($lis.eq(8)).to.contain(\"{{Table1.pageSize}}\");\n      expect($lis.eq(9)).to.contain(\"{{Table1.isVisible}}\");\n      expect($lis.eq(10)).to.contain(\"{{Table1.searchText}}\");\n      expect($lis.eq(11)).to.contain(\"{{Table1.totalRecordsCount}}\");\n      expect($lis.eq(12)).to.contain(\"{{Table1.sortOrder}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Bindings_Widgets_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Toggle between widgets in different pages using search functionality","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":49,"column":77,"index":2404},"line":49,"code":"  it(\"3. Toggle between widgets in different pages using search functionality\", function () {\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container4\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"Text1\", \"Show bindings\");\n    cy.get(_.jsEditor._propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Bindings_Widgets_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a query with dataSource in explorer, Create new Page","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":19,"column":68,"index":676},"line":19,"code":"  it(\"1. Create a query with dataSource in explorer, Create new Page\", function () {\n    cy.Createpage(pageid);\n    _.entityExplorer.SelectEntityByName(\"Page1\");\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      cy.CheckAndUnfoldEntityItem(\"Datasources\");\n      cy.NavigateToActiveDSQueryPane(datasourceName);\n    });\n    cy.get(\"@getPluginForm\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users\");\n    cy.EvaluateCurrentValue(\"select * from users\");\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n      _.entityExplorer.ActionContextMenuByEntityName(\"Query1\", \"Show bindings\");\n      cy.get(apiwidget.propertyList).then(function ($lis) {\n        expect($lis).to.have.length(5);\n        expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n        expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n        expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n        expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n        expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Copy query in explorer to new page & verify Bindings are copied too","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":49,"column":76,"index":2163},"line":49,"code":"  it(\"2. Copy query in explorer to new page & verify Bindings are copied too\", function () {\n    _.entityExplorer.SelectEntityByName(\"Query1\", \"Queries/JS\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"Query1\", \"Copy to page\", pageid);\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    _.entityExplorer.SelectEntityByName(\"Query1\");\n    cy.runQuery();\n    _.entityExplorer.ActionContextMenuByEntityName(\"Query1\", \"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Rename datasource in explorer, Delete query and try to Delete datasource","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":64,"column":81,"index":2987},"line":64,"code":"  it(\"3. Rename datasource in explorer, Delete query and try to Delete datasource\", function () {\n    _.entityExplorer.SelectEntityByName(\"Page1\");\n    cy.generateUUID().then(uid => {\n      updatedName = uid;\n      cy.log(\"complete uid :\" + updatedName);\n      updatedName = uid.replace(/-/g, \"_\").slice(1, 15);\n      cy.log(\"sliced id :\" + updatedName);\n      _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n      _.entityExplorer.ExpandCollapseEntity(\"Datasources\");\n      _.entityExplorer.RenameEntityFromExplorer(datasourceName, updatedName);\n      //cy.EditEntityNameByDoubleClick(datasourceName, updatedName);\n      cy.wait(1000);\n      _.entityExplorer.ActionContextMenuByEntityName(updatedName, \"Delete\", \"Are you sure?\");\n      cy.wait(1000);\n      //This is check to make sure if a datasource is active 409\n      cy.wait(\"@deleteDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 409);\n    });\n    _.entityExplorer.SelectEntityByName(\"Query1\", \"Queries/JS\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"Query1\", \"Delete\", \"Are you sure?\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Entity explorer datasource structure","suites":["Entity explorer datasource structure"],"updatePoint":{"line":18,"column":45,"index":849},"line":18,"code":"  it(\"1. Entity explorer datasource structure\", function () {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(apiwidget.apiTxt).clear().type(\"MyQuery\", {\n      force: true\n    }).should(\"have.value\", \"MyQuery\").blur();\n    cy.WaitAutoSave();\n    ee.ExpandCollapseEntity(\"Datasources\");\n    ee.ActionContextMenuByEntityName(datasourceName, \"Refresh\");\n    cy.wait(2000); //for the tables to open\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n\n    // cy.get(explorer.datasourceStructure)\n    //   .first()\n    //   .find(explorer.collapse)\n    //   .click();\n    // cy.get(explorer.datasourceColumn)\n    //   .first()\n    //   .click();\n    // cy.get(\".bp3-popover-content\").should(\"be.visible\");\n\n    cy.get(explorer.templateMenuIcon).first().click({\n      force: true\n    });\n    cy.get(\".t--structure-template-menu-popover\").last().contains(\"SELECT\").click({\n      force: true\n    });\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.ActionContextMenuByEntityName(\"MyQuery\");\n    cy.deleteDatasource(datasourceName);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Datasource_Structure_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Refresh datasource structure","suites":["Entity explorer datasource structure"],"updatePoint":{"line":51,"column":37,"index":2188},"line":51,"code":"  it(\"2. Refresh datasource structure\", function () {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click({\n      force: true\n    });\n\n    //cy.GlobalSearchEntity(datasourceName);\n    // cy.get(`.t--entity.datasource:contains(${datasourceName})`)\n    //   .find(explorer.collapse)\n    //   .as(\"datasourceEntityCollapse\");\n    // cy.wait(\"@getDatasourceStructure\").should(\n    //   \"have.nested.property\",\n    //   \"response.body.responseMeta.status\",\n    //   200,\n    // );\n    //cy.get(commonlocators.entityExplorersearch).clear({ force: true });\n\n    const tableName = Math.random().toString(36).replace(/[^a-z]+/g, \"\");\n    cy.typeValueNValidate(`CREATE TABLE public.${tableName} ( ID int );`);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.request.requestParams.Query.value).to.contain(tableName);\n    });\n\n    //cy.wait(8000)\n    // cy.GlobalSearchEntity(datasourceName);\n    // cy.get(\"@datasourceEntityCollapse\")\n    //   .first()\n    //   .click();\n    // cy.xpath(explorer.datsourceEntityPopover)\n    //   .last()\n    //   .click({ force: true });\n    ee.ExpandCollapseEntity(\"Datasources\");\n    ee.ActionContextMenuByEntityName(datasourceName, \"Refresh\");\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // Expand datasource\n    // cy.get(`.t--entity.datasource:contains(${datasourceName})`)\n    //   .find(explorer.collapse)\n    //   .first()\n    //   .click();\n    cy.xpath(\"//div[text()='public.\" + tableName + \"']\").should(\"exist\");\n\n    // cy.get(explorer.refreshStructure).click({ force: true });\n    // TODO (Akash): Check for new table name to be visible in UI as well\n    // cy.get(explorer.datasourceStructure)\n    //   .contains(`public.${tableName}`)\n    //   .should(\"be.visible\");\n\n    cy.typeValueNValidate(`DROP TABLE public.${tableName}`);\n    cy.runQuery();\n    ee.ExpandCollapseEntity(\"Datasources\");\n    ee.ActionContextMenuByEntityName(datasourceName, \"Refresh\");\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(\"//div[text()='public.\" + tableName + \"']\").should(\"not.exist\");\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Datasource_Structure_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and drop form widget and validate","suites":["Entity explorer Drag and Drop widgets testcases"],"updatePoint":{"line":9,"column":47,"index":619},"line":9,"code":"  it(\"1. Drag and drop form widget and validate\", function () {\n    cy.log(\"Login Successful\");\n    cy.reload(); // To remove the rename tooltip\n    cy.get(explorer.addWidget).click({\n      force: true\n    });\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.get(commonlocators.entityExplorersearch).clear().type(\"form\");\n    cy.dragAndDropToCanvas(\"formwidget\", {\n      x: 300,\n      y: 80\n    });\n    cy.get(formWidgetsPage.formD).click();\n    /**\n     * @param{Text} Random Text\n     * @param{FormWidget}Mouseover\n     * @param{FormPre Css} Assertion\n     */\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, widgetsPage.widgetNameSpan);\n    /**\n     * @param{Text} Random Colour\n     */\n    cy.moveToStyleTab();\n    cy.selectColor(\"backgroundcolor\");\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(126, 34, 206)\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n    cy.moveToContentTab();\n    cy.get(formWidgetsPage.formD).scrollTo(\"bottom\", {\n      ensureScrollable: false\n    }).should(\"be.visible\");\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    cy.PublishtheApp();\n    cy.get(publish.backToEditor).first().click();\n    cy.CheckAndUnfoldEntityItem(\"Widgets\");\n    cy.get(`.t--entity-name:contains(FormTest)`).trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FormTest.hasChanges}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/DragAndDropWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Rename API with table widget name validation test","suites":["Tab widget test"],"updatePoint":{"line":11,"column":58,"index":453},"line":11,"code":"  it(\"1. Rename API with table widget name validation test\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateApiAndValidateUniqueEntityName(apiName);\n    cy.get(apiwidget.apiTxt).clear().type(tableName, {\n      force: true\n    }).should(\"have.value\", tableName);\n    //Rename Table widget with api name validation test\n    ee.AssertEntityPresenceInExplorer(\"Table1\");\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    cy.RenameEntity(apiName);\n    cy.validateMessage(apiName);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Entity_Naming_conflict_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Hide/Show page test ","suites":["Hide / Show page test functionality"],"updatePoint":{"line":6,"column":29,"index":277},"line":6,"code":"  it(\"1. Hide/Show page test \", function () {\n    cy.Createpage(pageOne);\n    cy.Createpage(pageTwo);\n    cy.get(\".t--entity-name\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.get(`.t--entity-item:contains('MyPage2')`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.get(pages.hidePage).click({\n      force: true\n    });\n    cy.ClearSearch();\n    cy.PublishtheApp();\n    cy.get(\".t--page-switch-tab\").should(\"have.length\", 2);\n    //Show page test\n    cy.get(publish.backToEditor).click();\n    cy.get(`.t--entity-name:contains('MyPage2')`).trigger(\"mouseover\");\n    cy.hoverAndClick(\"MyPage2\");\n    cy.selectAction(\"Show\");\n    cy.ClearSearch();\n    cy.PublishtheApp();\n    cy.get(\".t--page-switch-tab\").should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Hide_Page_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Expect tooltip on long names only","suites":["Entity Explorer showing tooltips on long names"],"updatePoint":{"line":9,"column":42,"index":551},"line":9,"code":"  it(\"1. Expect tooltip on long names only\", function () {\n    // create an API with a short name\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(shortName);\n    ee.ExpandCollapseEntity(\"Queries/JS\", true);\n    // assert that a tooltip does not show up during hover\n    cy.get(`.t--entity-item:contains(${shortName})`).realHover();\n    cy.get(tooltTipQuery).should(\"not.exist\");\n    // reset the hover\n    cy.get(\"body\").realHover({\n      position: \"topLeft\"\n    });\n\n    // create another API with a long name\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(longName);\n\n    // assert that a tooltip does show up during hover\n    cy.get(`.t--entity-item:contains(${longName})`).realHover();\n    cy.get(tooltTipQuery).should(\"have.text\", longName);\n    // reset the hover\n    cy.get(\"body\").realHover({\n      position: \"topLeft\"\n    });\n\n    // rename it and ensure the tooltip does not show again\n    cy.get(`.t--entity-item:contains(${longName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit name\");\n    cy.get(explorer.editEntity).last().type(alternateName, {\n      force: true\n    }).blur();\n    cy.wait(\"@saveAction\");\n    cy.get(`.t--entity-item:contains(${alternateName})`).realHover();\n    cy.get(tooltTipQuery).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Long_Name_Tooltip_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Clone page & check tooltip for long name","suites":["Pages"],"updatePoint":{"line":9,"column":49,"index":366},"line":9,"code":"  it(\"1. Clone page & check tooltip for long name\", function () {\n    //cy.NavigateToAPI_Panel();\n    _.apiPage.CreateApi(apiName);\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.ClonePage(\"Page1\");\n    _.entityExplorer.SelectEntityByName(\"Page1 Copy\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(apiName, \"Queries/JS\"); //Verify api also cloned along with PageClone\n\n    //Creates a page with long name and checks if it shows tooltip on hover\n    cy.get(\"body\").click(0, 0);\n    cy.Createpage(veryLongPageName);\n    cy.PublishtheApp();\n    cy.get(`.t--page-switch-tab:contains(${veryLongPageName})`).trigger(\"mouseover\");\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(veryLongPageName);\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Pages_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check for Refrsh page and validate and 404 is showing correct route","suites":["Pages"],"updatePoint":{"line":26,"column":76,"index":1163},"line":26,"code":"  it(\"2. Check for Refrsh page and validate and 404 is showing correct route\", () => {\n    //Automated as part Bug19654\n    cy.get(publish.backToEditor).click();\n    cy.reload();\n    _.entityExplorer.SelectEntityByName(\"Page1 Copy\", \"Pages\");\n    //Checks if 404 is showing correct route\n    cy.visit(\"/route-that-does-not-exist\");\n    cy.get(locators.errorPageTitle).should($x => {\n      expect($x).contain(Cypress.env(\"MESSAGES\").PAGE_NOT_FOUND());\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Pages_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. checks entity explorer visibility on unpin","suites":["Entity explorer tests related to pinning and unpinning"],"updatePoint":{"line":51,"column":51,"index":1566},"line":51,"code":"  it(\"1. checks entity explorer visibility on unpin\", function () {\n    cy.wait(5000);\n    cy.get(\".t--entity-explorer\").should(\"be.visible\");\n    cy.get(\".t--pin-entity-explorer\").click();\n    cy.wait(5000);\n    cy.get(\"[data-testid=widgets-editor]\").click({\n      force: true\n    });\n    cy.wait(3000);\n    cy.get(\".t--entity-explorer\").should(\"not.be.visible\");\n    //checks entity explorer visibility on pin\n    cy.get(\".t--pin-entity-explorer\").click();\n    cy.get(\".t--entity-explorer\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Pin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Widgets visibility in widget pane","suites":["Entity explorer tests related to pinning and unpinning"],"updatePoint":{"line":65,"column":42,"index":2078},"line":65,"code":"  it(\"2. Widgets visibility in widget pane\", function () {\n    ee.NavigateToSwitcher(\"Widgets\");\n    agHelper.ScrollTo(locator._widgetPane, \"bottom\");\n    agHelper.AssertElementVisible(ee.locator._widgetPageIcon(WIDGET.VIDEO));\n    ee.PinUnpinEntityExplorer(true);\n    agHelper.AssertElementVisible(ee.locator._widgetPageIcon(WIDGET.VIDEO));\n    ee.PinUnpinEntityExplorer(false);\n    ee.NavigateToSwitcher(\"Explorer\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Pin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Entity explorer tests related to pinning and unpinning"],"updatePoint":{"line":74,"column":22,"index":2483},"line":74,"code":"  it(\"excludeForAirgap\", \"3. Unpinned explorer is to be open when any context menu is open or when an entity name is being edited\", function () {\n    agHelper.AssertElementVisible(ee._entityExplorer);\n    ee.PinUnpinEntityExplorer(true);\n    const menu = Object.keys(ExplorerMenu);\n    Cypress._.times(menu.length, index => {\n      OpenExplorerMenu(menu[index]);\n      agHelper.Sleep();\n      cy.get(\"[data-testid=sidebar-active]\").should(\"exist\");\n    });\n\n    // when an entity is being edited\n    ee.ActionContextMenuByEntityName(\"Page1\", \"Edit name\");\n    cy.get(locator._canvas).trigger(\"mousemove\", 500, 400);\n    agHelper.AssertElementVisible(ee._entityExplorer);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Pin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Entity explorer tests related to pinning and unpinning"],"updatePoint":{"line":89,"column":12,"index":3150},"line":89,"code":"  it(\"airgap\", \"4. Unpinned explorer is to be open when any context menu is open or when an entity name is being edited\", function () {\n    agHelper.AssertElementVisible(ee._entityExplorer);\n    ee.PinUnpinEntityExplorer(true);\n    const menu = Object.keys(ExplorerMenu);\n    Cypress._.times(menu.length - 1, index => {\n      OpenExplorerMenu(menu[index]);\n      agHelper.Sleep();\n      cy.get(\"[data-testid=sidebar-active]\").should(\"exist\");\n    });\n\n    // when an entity is being edited\n    ee.ActionContextMenuByEntityName(\"Page1\", \"Edit name\");\n    cy.get(locator._canvas).trigger(\"mousemove\", 500, 400);\n    agHelper.AssertElementVisible(ee._entityExplorer);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Pin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a page/moveQuery/rename/delete in explorer","suites":["Entity explorer tests related to query and datasource"],"updatePoint":{"line":18,"column":58,"index":663},"line":18,"code":"  it(\"1. Create a page/moveQuery/rename/delete in explorer\", function () {\n    cy.Createpage(pageid);\n    cy.wait(2000);\n    cy.get(\".t--entity-name\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.wait(2000);\n    _.dataSources.NavigateToDSCreateNew();\n    _.dataSources.CreatePlugIn(\"PostgreSQL\");\n    _.dataSources.FillPostgresDSForm();\n    // checking that conflicting names are not allowed\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(\"download\", {\n      force: true\n    }).blur();\n    cy.get(\".Toastify\").should(\"contain\", \"Invalid name\");\n\n    // checking a valid name\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(datasourceName, {\n      force: true\n    }).should(\"have.value\", datasourceName).blur();\n    cy.testSaveDatasource();\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n\n    /* eslint-disable */\n    cy.wait(2000);\n    cy.NavigateToQueryEditor();\n    cy.CheckAndUnfoldEntityItem(\"Datasources\");\n    cy.contains(\".t--entity-name\", datasourceName).click();\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(`${datasourceName}new`, {\n      force: true\n    }).blur();\n    cy.contains(commonlocators.entityName, `${datasourceName}new`);\n\n    // reverting the name\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(`${datasourceName}`, {\n      force: true\n    }).blur();\n\n    // going  to the query create page\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    cy.contains(commonlocators.entityName, \"Query1\").click();\n    cy.wait(\"@getPluginForm\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n\n    // cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users\");\n    cy.EvaluateCurrentValue(\"select * from users\");\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n    _.entityExplorer.ActionContextMenuByEntityName(\"Query1\", \"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(5);\n      expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n    });\n    cy.get(\".t--entity-property-close\").click(); //closing Bindings overlay\n    _.entityExplorer.ActionContextMenuByEntityName(\"Query1\", \"Edit name\");\n    cy.EditApiNameFromExplorer(\"MyQuery\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"MyQuery\", \"Move to page\", pageid);\n    cy.wait(2000);\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    _.entityExplorer.SelectEntityByName(\"MyQuery\");\n    cy.wait(2000);\n    cy.runQuery();\n\n    //deleteQuery & DS\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n    _.dataSources.DeleteDatasouceFromActiveTab(datasourceName);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Query_Datasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Expects actions on the same page cannot have identical names","suites":["Api Naming conflict on a page test"],"updatePoint":{"line":8,"column":69,"index":419},"line":8,"code":"  it(\"1. Expects actions on the same page cannot have identical names\", function () {\n    cy.log(\"Login Successful\");\n    // create an API\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(firstApiName);\n\n    // create another API\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(secondApiName);\n    ee.ExpandCollapseEntity(\"Queries/JS\", true);\n    // try to rename one of the APIs with an existing API name\n    cy.get(`.t--entity-item:contains(${secondApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit name\");\n    //cy.RenameEntity(tabname);\n    cy.get(explorer.editEntity).last().type(firstApiName, {\n      force: true\n    });\n    //cy.RenameEntity(firstApiName);\n    cy.validateMessage(firstApiName);\n    cy.ClearSearch();\n    cy.get(`.t--entity-item:contains(${secondApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.get(`.t--entity-item:contains(${firstApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. It expects actions on different pages can have identical names","suites":["Api Naming conflict on different pages test"],"updatePoint":{"line":47,"column":71,"index":1671},"line":47,"code":"  it(\"2. It expects actions on different pages can have identical names\", function () {\n    cy.log(\"Login Successful\");\n    // create a new API\n    cy.CreateAPI(firstApiName);\n    ee.ExpandCollapseEntity(\"Queries/JS\", true);\n    // create a new page and an API on that page\n    ee.AddNewPage();\n    cy.CreateAPI(firstApiName);\n    ee.ExpandCollapseEntity(\"Queries/JS\", true);\n    cy.get(\".t--entity-name\").contains(firstApiName).should(\"exist\");\n    cy.get(`.t--entity-item:contains(${firstApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.get(`.t--entity-item:contains(Page2)`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.get(`.t--entity-item:contains(${firstApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.wait(1000);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Expects JS Objects and actions to not have identical names on the same page.","suites":["Entity Naming conflict test"],"updatePoint":{"line":79,"column":85,"index":2753},"line":79,"code":"  it(\"3. Expects JS Objects and actions to not have identical names on the same page.\", function () {\n    cy.log(\"Login Successful\");\n    ee.ExpandCollapseEntity(\"Queries/JS\", true);\n    // create JS Object and name it\n    jsEditor.CreateJSObject('return \"Hello World\";');\n    cy.get(`.t--entity-item:contains('JSObject1')`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit name\");\n    cy.get(explorer.editEntity).last().type(firstApiName, {\n      force: true\n    }).type(\"{enter}\");\n    cy.wait(2000); //for the changed JS name to reflect\n\n    cy.CreateAPI(secondApiName);\n    cy.get(`.t--entity-item:contains(${secondApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Edit name\");\n    cy.get(explorer.editEntity).last().type(firstApiName, {\n      force: true\n    });\n    ee.ValidateDuplicateMessageToolTip(firstApiName);\n    cy.get(\"body\").click(0, 0);\n    cy.wait(2000);\n    cy.get(`.t--entity-item:contains(${firstApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n    cy.get(`.t--entity-item:contains(${secondApiName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.deleteActionAndConfirm();\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Opens modal when selecting a modal","suites":["Explorer hidden widget Selection"],"updatePoint":{"line":15,"column":43,"index":560},"line":15,"code":"  it(\"1. Opens modal when selecting a modal\", () => {\n    _.entityExplorer.SelectEntityByName(\"SimpleModal\", \"Widgets\");\n    cy.get(widgetLocators.modalWidget).should(\"have.length\", 1);\n    cy.get(commonLocators.propertyPaneTitle).should(\"contain\", \"SimpleModal\");\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Select_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Opens modal when selecting a widget inside a modal","suites":["Explorer hidden widget Selection"],"updatePoint":{"line":23,"column":59,"index":918},"line":23,"code":"  it(\"2. Opens modal when selecting a widget inside a modal\", () => {\n    _.entityExplorer.SelectEntityByName(\"Simple_Modal_Text\", \"Widgets\");\n    cy.get(widgetLocators.modalWidget).should(\"have.length\", 1);\n    cy.get(commonLocators.propertyPaneTitle).should(\"contain\", \"Simple_Modal_Text\");\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Select_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Switches tabs when selecting a tab","suites":["Explorer hidden widget Selection"],"updatePoint":{"line":31,"column":43,"index":1272},"line":31,"code":"  it(\"3. Switches tabs when selecting a tab\", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs1\");\n    _.entityExplorer.SelectEntityByName(\"UnselectedTab\", \"Widgets\");\n\n    // Assert correct tab is open\n    cy.wait(1000);\n    cy.get(\".t--page-switch-tab.is-active\").contains(\"UnselectedTab\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Select_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Switches tabs when selecting a widget inside other tab","suites":["Explorer hidden widget Selection"],"updatePoint":{"line":39,"column":63,"index":1598},"line":39,"code":"  it(\"4. Switches tabs when selecting a widget inside other tab\", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"UnselectedTab\");\n    _.entityExplorer.SelectEntityByName(\"Button6\", \"Widgets\");\n\n    // Assert correct tab is open and button selected\n    cy.wait(1000);\n    cy.get(\".t--page-switch-tab.is-active\").contains(\"UnselectedTab\");\n    cy.get(commonLocators.propertyPaneTitle).should(\"contain\", \"Button6\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Select_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Switches tabs with a button inside the tab","suites":["Explorer hidden widget Selection"],"updatePoint":{"line":48,"column":51,"index":2009},"line":48,"code":"  it(\"5. Switches tabs with a button inside the tab\", () => {\n    cy.get(\".t--page-switch-tab\").contains(\"UnselectedTab\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(widgets.buttonWidget).contains(\"Unselected\").click({\n      force: true\n    });\n    // Assert tab is switched\n    cy.get(\".t--page-switch-tab.is-active\").should(\"contain\", \"InternalTab\");\n    cy.get(commonLocators.propertyPaneTitle).should(\"contain\", \"Button6\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Select_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Switches tabs when selecting a widget inside hidden tab","suites":["Explorer hidden widget Selection"],"updatePoint":{"line":60,"column":64,"index":2476},"line":60,"code":"  it(\"6. Switches tabs when selecting a widget inside hidden tab\", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"Tab 3\");\n    _.entityExplorer.SelectEntityByName(\"Button7\", \"Widgets\");\n\n    // Assert button is selected\n    cy.wait(1000);\n    cy.get(\".t--page-switch-tab.is-active\").should(\"not.exist\");\n    cy.get(commonLocators.propertyPaneTitle).should(\"contain\", \"Button7\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Select_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Assert the overkill","suites":["Explorer hidden widget Selection"],"updatePoint":{"line":69,"column":28,"index":2829},"line":69,"code":"  it(\"7. Assert the overkill\", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"Overkill_Modal\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs2\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tab 2\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs3\");\n    _.entityExplorer.ExpandCollapseEntity(\"Canvas9\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs4\");\n    _.entityExplorer.ExpandCollapseEntity(\"Canvas11\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs5\");\n    _.entityExplorer.ExpandCollapseEntity(\"Canvas13\");\n    _.entityExplorer.SelectEntityByName(\"OverKillText\", \"Widgets\");\n\n    // Assert that widget is seen\n    cy.get(commonLocators.propertyPaneTitle).should(\"contain\", \"OverKillText\");\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1).should(\"have.class\", \"t--draggable-textwidget\").contains(\"Overkill Widget\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Select_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Tab Widget Functionality To rename Tabs from entity explorer","suites":["Tab widget test"],"updatePoint":{"line":10,"column":69,"index":373},"line":10,"code":"  it(\"1. Tab Widget Functionality To rename Tabs from entity explorer\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs1\");\n    _.entityExplorer.RenameEntityFromExplorer(\"Tab1\", tabname, true);\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Tab_rename_Delete_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Tab Widget Functionality To delete Tabs from entity explorer","suites":["Tab widget test"],"updatePoint":{"line":15,"column":69,"index":641},"line":15,"code":"  it(\"2. Tab Widget Functionality To delete Tabs from entity explorer\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs1\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"Tab2\", \"Edit name\");\n    _.agHelper.TypeText(_.locators._entityNameEditing(\"Tab2\"), tabname);\n    _.agHelper.Sleep(2000);\n    _.entityExplorer.ValidateDuplicateMessageToolTip(tabname);\n    cy.get(explorer.editEntity).last().click().type(\"Tab2\" + \"{enter}\", {\n      force: true\n    });\n    _.entityExplorer.DeleteWidgetFromEntityExplorer(tabname + \"Tab2\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Tab_rename_Delete_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and drop form widget and validate copy widget via toast message","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":12,"column":77,"index":683},"line":12,"code":"  it(\"1. Drag and drop form widget and validate copy widget via toast message\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, widgetsPage.widgetNameSpan);\n    cy.get(commonlocators.copyWidget).click();\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Widgets_Copy_Delete_Undo_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Delete Widget from sidebar and Undo action validation","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":20,"column":62,"index":1087},"line":20,"code":"  it(\"2. Delete Widget from sidebar and Undo action validation\", function () {\n    _.entityExplorer.ActionContextMenuByEntityName(\"FormTest\", \"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FormTest.hasChanges}}\");\n    });\n    cy.get(\".t--entity-name\").contains(\"FormTest\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Delete\");\n\n    //cy.DeleteWidgetFromSideBar();\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(apiwidget.propertyList).should(\"not.exist\");\n    /*\n    To be enabled once widget delete click works\n    cy.get('.t--delete-widget')\n      .trigger(\"mouseover\")\n      .click({ force: true });\n      */\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\".t--entity-name\").contains(\"FormTest\").trigger(\"mouseover\");\n    cy.hoverAndClickParticularIndex(1);\n    cy.selectAction(\"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FormTest.hasChanges}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Widgets_Copy_Delete_Undo_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and drop form widget and validate copy widget via toast message","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":13,"column":77,"index":712},"line":13,"code":"  it(\"1. Drag and drop form widget and validate copy widget via toast message\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.openPropertyPane(\"formwidget\");\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, widgetsPage.widgetNameSpan);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(1000);\n    ee.SelectEntityByName(\"FormTestCopy\");\n    cy.get(\"body\").type(\"{del}\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    agHelper.WaitUntilAllToastsDisappear();\n    agHelper.Sleep(1000);\n    cy.get(\"body\").type(`{${modifierKey}}z`, {\n      force: true\n    });\n    ee.ExpandCollapseEntity(\"Widgets\");\n    ee.ExpandCollapseEntity(\"FormTest\");\n    ee.ActionContextMenuByEntityName(\"FormTestCopy\", \"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain(\"{{FormTestCopy.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTestCopy.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FormTestCopy.hasChanges}}\");\n      cy.contains(\"FormTestCopy\");\n      cy.get($lis.eq(1)).contains(\"{{FormTestCopy.data}}\").click({\n        force: true\n      });\n      cy.get(\".bp3-input\").first().click({\n        force: true\n      });\n      cy.get(\".bp3-input\").first().type(`{${modifierKey}}v`, {\n        force: true\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Widgets_Copy_Paste_Delete_Undo_Keyboard_Event_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Widget edit/delete/copy to clipboard validation","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":7,"column":56,"index":323},"line":7,"code":"  it(\"1. Widget edit/delete/copy to clipboard validation\", function () {\n    cy.CheckAndUnfoldEntityItem(\"Widgets\");\n    cy.selectEntityByName(\"Container4\");\n    cy.get(\".t--entity-collapse-toggle\").eq(4).click({\n      force: true\n    });\n    cy.get(\".t--entity-name\").contains(\"Text1\").trigger(\"mouseover\");\n    cy.get(\"[data-testid='t--entity-item-Text1'] .entity-context-menu\").click({\n      force: true\n    });\n    cy.selectAction(\"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n    cy.get(\".t--entity-name\").contains(\"Text1\").trigger(\"mouseover\");\n    cy.get(\"[data-testid='t--entity-item-Text1'] .entity-context-menu\").click({\n      force: true\n    });\n    cy.selectAction(\"Edit name\");\n    cy.EditApiNameFromExplorer(\"TextUpdated\");\n    cy.get(\".t--entity-name\").contains(\"TextUpdated\").trigger(\"mouseover\");\n    cy.get(\"[data-testid='t--entity-item-TextUpdated'] .entity-context-menu\").click({\n      force: true\n    });\n    cy.selectAction(\"Show bindings\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{TextUpdated.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{TextUpdated.text}}\");\n    });\n    cy.DeleteWidgetFromSideBar();\n  });","file":"e2e/Regression/ClientSide/ExplorerTests/Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Go to admin settings and disable Form Signup","suites":["Form Login test functionality"],"updatePoint":{"line":4,"column":53,"index":229},"line":4,"code":"  it(\"1. Go to admin settings and disable Form Signup\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.openAuthentication();\n    cy.get(adminSettings.formloginButton).should(\"be.visible\").should(\"contain\", \"Edit\");\n    cy.get(adminSettings.formloginButton).click();\n    cy.wait(2000);\n    // disable form signup\n    cy.get(adminSettings.formSignupDisabled).get(\"input\").should(\"have.value\", \"on\");\n    cy.get(adminSettings.formSignupDisabled).click({\n      force: true\n    });\n    cy.wait(2000);\n    // assert server is restarting\n    cy.get(adminSettings.saveButton).should(\"be.visible\");\n    cy.get(adminSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminSettings.saveButton).click();\n    cy.get(adminSettings.restartNotice).should(\"be.visible\");\n    // adding wait for server to restart\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    // validating form signup is disabled\n    cy.get(\".t--sign-up\").click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      cy.get(\"[type='email']\").type(uid + \"@appsmith.com\");\n      cy.get(\"[type='password']\").type(uid);\n      cy.get(\"[type='submit']\").click({\n        force: true\n      });\n      cy.get(\".ads-v2-callout__children\").should(\"contain\", \"Signup is restricted on this instance of Appsmith\");\n      // restore setting\n      cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n      cy.get(\".admin-settings-menu-option\").click();\n      cy.get(adminSettings.authenticationTab).click();\n      cy.get(adminSettings.formloginButton).click();\n      cy.wait(2000);\n      cy.get(adminSettings.formSignupDisabled).click({\n        force: true\n      });\n      cy.wait(2000);\n      cy.get(adminSettings.saveButton).click();\n      cy.get(adminSettings.restartNotice).should(\"be.visible\");\n      cy.wait(120000);\n      cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n      cy.get(homePage.profileMenu).click();\n      cy.get(homePage.signOutIcon).click();\n    });\n    cy.wait(500);\n    // validating form signup is disabled\n    cy.get(\".t--sign-up\").click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      cy.get(\"[type='email']\").type(uid + \"@appsmith.com\");\n      cy.get(\"[type='password']\").type(uid);\n      cy.get(\"[type='submit']\").click({\n        force: true\n      });\n      cy.get(\".ads-v2-callout__children\").should(\"not.exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/FormLogin/EnableFormLogin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Form Login test functionality"],"updatePoint":{"line":70,"column":22,"index":2790},"line":70,"code":"  it(\"excludeForAirgap\", \"2. Go to admin settings and disable Form Login\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.openAuthentication();\n    cy.get(adminSettings.formloginButton).should(\"be.visible\").should(\"contain\", \"Edit\");\n\n    // enable github login\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000);\n    // fill github form\n    cy.fillGithubForm();\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.wait(5000);\n    cy.reload();\n    cy.get(adminSettings.authenticationTab).click();\n    cy.get(adminSettings.formloginButton).click();\n    cy.wait(2000);\n    // disable form signup\n    cy.get(adminSettings.formLoginDisabled).get(\"input\").should(\"have.value\", \"on\");\n    cy.get(adminSettings.formLoginDisabled).click({\n      force: true\n    });\n    cy.wait(2000);\n    // assert server is restarting\n    cy.get(adminSettings.saveButton).should(\"be.visible\");\n    cy.get(adminSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminSettings.saveButton).click();\n    cy.get(adminSettings.restartNotice).should(\"be.visible\");\n    // adding wait for server to restart\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    cy.reload();\n    cy.wait(5000);\n    // validating form signup is disabled\n    cy.get(\"form\").should(\"not.exist\");\n    cy.get(\".t--sign-up\").should(\"not.exist\");\n    // cy.wait(30000); // restart nginx docker\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.openAuthentication();\n\n    // enable form login\n    cy.get(adminSettings.formloginButton).should(\"be.visible\").should(\"contain\", \"Enable\");\n    cy.get(adminSettings.formloginButton).click();\n    cy.get(adminSettings.formLoginDisabled).click({\n      force: true\n    });\n    cy.wait(2000);\n    // assert server is restarting\n    cy.get(adminSettings.saveButton).should(\"be.visible\");\n    cy.get(adminSettings.saveButton).should(\"not.be.disabled\");\n    cy.get(adminSettings.saveButton).click();\n    cy.get(adminSettings.restartNotice).should(\"be.visible\");\n    // adding wait for server to restart\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.reload();\n\n    // disable github\n    cy.get(adminSettings.authenticationTab).click();\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000);\n    cy.get(adminSettings.disconnectBtn).click().should(\"contain\", \"Are you sure?\");\n    cy.get(adminSettings.disconnectBtn).click();\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.reload();\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    cy.get(adminSettings.loginWithGithub).should(\"not.exist\");\n    cy.get(\"form\").should(\"exist\");\n    cy.get(\".t--sign-up\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/FormLogin/EnableFormLogin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Form to Native conversion works.","suites":["Mongo Form to Native conversion works"],"updatePoint":{"line":4,"column":41,"index":228},"line":4,"code":"  it(\"1. Form to Native conversion works.\", () => {\n    const expectedOutput = `{\\n  \\\"find\\\": \\\"listingAndReviews\\\",\\n  \\\"filter\\\": {beds : {$lte: 2}},\\n  \\\"sort\\\": {number_of_reviews: -1},\\n  \\\"limit\\\": 10,\\n  \\\"batchSize\\\": 10\\n}\\n`;\n    _.dataSources.CreateDataSource(\"Mongo\", true, true);\n    _.dataSources.CreateQueryAfterDSSaved();\n    _.agHelper.TypeDynamicInputValueNValidate(\"listingAndReviews\", formControls.mongoCollection);\n    _.agHelper.TypeDynamicInputValueNValidate(\"{beds : {$lte: 2}}\", formControls.mongoFindQuery);\n    _.agHelper.TypeDynamicInputValueNValidate(\"{number_of_reviews: -1}\", formControls.mongoFindSort);\n    _.agHelper.TypeDynamicInputValueNValidate(\"{house_rules: 1, description:1}\", formControls.mongoFindProjection);\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"Find document(s)\", \"Raw\");\n    _.agHelper.VerifyCodeInputValue(formControls.rawBody, expectedOutput);\n\n    // then we test to check if the conversion is only done once.\n    // and then we ensure that upon switching between another command and Raw, the Template menu does not show up.\n\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"Raw\", \"Find document(s)\");\n    _.agHelper.TypeDynamicInputValueNValidate(\"modifyCollection\", formControls.mongoCollection);\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"Find document(s)\", \"Raw\");\n\n    // make sure template menu no longer reappears\n    _.agHelper.AssertElementAbsence(_.dataSources._templateMenu);\n\n    // verify value has not changed\n    _.agHelper.VerifyCodeInputValue(formControls.rawBody, expectedOutput);\n  });","file":"e2e/Regression/ClientSide/FormNativeToRawTests/MongoConversion_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an app with Query1 and JSObject1, connect it to git","suites":["Git discard changes:"],"updatePoint":{"line":15,"column":67,"index":747},"line":15,"code":"  it(\"1. Create an app with Query1 and JSObject1, connect it to git\", () => {\n    // Create new postgres datasource\n\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.get(\"@dsName\").then($dsName => {\n      datasourceName = $dsName;\n      _.dataSources.CreateQueryAfterDSSaved(\"SELECT * FROM users ORDER BY id LIMIT 10;\", query1);\n      _.dataSources.RunQuery();\n    });\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.wait(1000);\n    cy.get(\".t--entity-item:contains(Page1)\").first().click();\n    cy.wait(\"@getPage\");\n    // bind input widget to postgres query on page1\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(`.t--property-control-defaultvalue ${dynamicInputLocators.input}`).last().click({\n      force: true\n    }).type(`{{${query1}.data[0].name}}`, {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(2000);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.Createpage(page2);\n    cy.wait(1000);\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    cy.wait(\"@getPage\");\n    _.jsEditor.CreateJSObject('return \"Success\";');\n    cy.get(explorer.addWidget).click();\n    // bind input widget to JSObject response on page2\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(`.t--property-control-defaultvalue ${dynamicInputLocators.input}`).last().click({\n      force: true\n    }).type(\"{{JSObject1.myFun1()}}\", {\n      parseSpecialCharSequences: false\n    });\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    // connect app to git\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      _.gitSync.CreateNConnectToGit(repoName);\n      _.gitSync.CreateGitBranch(repoName);\n    });\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Add new datasource query, discard changes, verify query is deleted","suites":["Git discard changes:"],"updatePoint":{"line":72,"column":75,"index":2771},"line":72,"code":"  it(\"2. Add new datasource query, discard changes, verify query is deleted\", () => {\n    cy.get(`.t--entity-item:contains(\"Page1\")`).first().click();\n    cy.wait(\"@getPage\");\n    // create new postgres query\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    cy.get(datasource.datasourceCard).contains(datasourceName).scrollIntoView().should(\"be.visible\").closest(datasource.datasourceCard).within(() => {\n      cy.get(datasource.createQuery).click();\n    });\n    cy.get(queryLocators.queryNameField).type(`${query2}`);\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click();\n    cy.xpath(queryLocators.query).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    // navoigate to Page1\n    cy.get(`.t--entity-item:contains(Page1)`).first().click();\n    cy.wait(\"@getPage\");\n    // discard changes\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    // verify query2 is not present\n    cy.get(`.t--entity-name:contains(${query2})`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Add new JSObject , discard changes verify JSObject is deleted","suites":["Git discard changes:"],"updatePoint":{"line":105,"column":70,"index":4026},"line":105,"code":"  it(\"3. Add new JSObject , discard changes verify JSObject is deleted\", () => {\n    _.jsEditor.CreateJSObject('return \"Success\";');\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    // verify jsObject is not duplicated\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    // verify jsObject2 is deleted after discarding changes\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Delete page2 and trigger discard flow, page2 should be available again","suites":["Git discard changes:"],"updatePoint":{"line":116,"column":79,"index":4567},"line":116,"code":"  it(\"4. Delete page2 and trigger discard flow, page2 should be available again\", () => {\n    cy.Deletepage(page2);\n    // verify page is deleted\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(${page2})`).should(\"not.exist\");\n    cy.wait(2000);\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    // verify page2 is recovered back\n    cy.get(`.t--entity-name:contains(${page2})`).should(\"be.visible\");\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    cy.wait(\"@getPage\");\n    // verify data binding on page2\n    cy.get(\".bp3-input\").should(\"have.value\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Delete Query1 and trigger discard flow, Query1 will be recovered","suites":["Git discard changes:"],"updatePoint":{"line":131,"column":73,"index":5185},"line":131,"code":"  it(\"5. Delete Query1 and trigger discard flow, Query1 will be recovered\", () => {\n    // navigate to Page1\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    // delete query1\n    _.entityExplorer.SelectEntityByName(query1, \"Queries/JS\");\n    _.entityExplorer.ActionContextMenuByEntityName(query1, \"Delete\");\n    // verify Query1 is deleted\n    cy.get(`.t--entity-name:contains(${query1})`).should(\"not.exist\");\n    // discard changes\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    //verify query1 is recovered\n    cy.get(`.t--entity-name:contains(${query1})`).should(\"be.visible\");\n    cy.get(\".bp3-input\").should(\"have.value\", \"Test user 7\");\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Delete JSObject1 and trigger discard flow, JSObject1 should be active again","suites":["Git discard changes:"],"updatePoint":{"line":146,"column":84,"index":5864},"line":146,"code":"  it(\"6. Delete JSObject1 and trigger discard flow, JSObject1 should be active again\", () => {\n    // navigate to page2\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.wait(3000);\n    /* create and save jsObject */\n    //     _.jsEditor.CreateJSObject('return \"Success\";');\n    // delete jsObject1\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    cy.get(`.t--entity-item:contains(${jsObject})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Delete\");\n    cy.selectAction(\"Are you sure?\");\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"not.exist\");\n    // discard changes\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.wait(3000);\n    //verify JSObject is recovered\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"exist\");\n    cy.get(\".bp3-input\").should(\"have.value\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Add new page i.e page3, go to page2 & discard changes, verify page3 is removed","suites":["Git discard changes:"],"updatePoint":{"line":175,"column":87,"index":6982},"line":175,"code":"  it(\"7. Add new page i.e page3, go to page2 & discard changes, verify page3 is removed\", () => {\n    // create new page page3 and move to page1\n    cy.Createpage(page3);\n    cy.get(`.t--entity-item:contains(${page2})`).first().click();\n    // discard changes\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    // verify page3 is removed\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"${page3}\")`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Add new page i.e page3, discard changes should not throw error: \"resource not found\"","suites":["Git discard changes:"],"updatePoint":{"line":186,"column":93,"index":7446},"line":186,"code":"  it(`8. Add new page i.e page3, discard changes should not throw error: \"resource not found\"`, () => {\n    cy.Createpage(page3);\n    cy.gitDiscardChanges();\n    cy.wait(5000);\n    cy.get(`.t--entity-name:contains(\"${page3}\")`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. On discard failure an error message should be show and user should be able to discard again","suites":["Git discard changes:"],"updatePoint":{"line":192,"column":100,"index":7708},"line":192,"code":"  it(\"9. On discard failure an error message should be show and user should be able to discard again\", () => {\n    cy.Createpage(page3);\n    _.agHelper.GetNClick(gitSyncLocators.bottomBarCommitButton);\n    _.agHelper.AssertElementVisible(gitSyncLocators.discardChanges);\n    cy.intercept(\"PUT\", \"/api/v1/git/discard/app/*\", {\n      body: {\n        responseMeta: {\n          status: 500,\n          success: false,\n          error: {\n            code: 5000,\n            message: \"Provided file format is incompatible, please upgrade your instance to resolve this conflict.\",\n            errorType: \"INTERNAL_ERROR\"\n          }\n        }\n      },\n      delay: 1000\n    });\n    _.agHelper.GetElement(gitSyncLocators.discardChanges).children().should(\"have.text\", \"Discard & pull\");\n    _.agHelper.GetNClick(gitSyncLocators.discardChanges);\n    _.agHelper.AssertContains(Cypress.env(\"MESSAGES\").DISCARD_CHANGES_WARNING());\n    _.agHelper.GetElement(gitSyncLocators.discardChanges).children().should(\"have.text\", \"Are you sure?\");\n    _.agHelper.GetNClick(gitSyncLocators.discardChanges);\n    _.agHelper.AssertContains(Cypress.env(\"MESSAGES\").DISCARDING_AND_PULLING_CHANGES());\n    cy.contains(Cypress.env(\"MESSAGES\").DISCARDING_AND_PULLING_CHANGES());\n    _.agHelper.Sleep(2000);\n    _.agHelper.AssertElementVisible(\".ads-v2-callout__children\");\n    _.agHelper.AssertElementVisible(gitSyncLocators.discardChanges);\n  });","file":"e2e/Regression/ClientSide/Git/GitDiscardChange/DiscardChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Import an app from JSON with Postgres, MySQL, Mongo db & then connect it to Git","suites":["Git import flow "],"updatePoint":{"line":20,"column":88,"index":958},"line":20,"code":"  it(\"1. Import an app from JSON with Postgres, MySQL, Mongo db & then connect it to Git\", () => {\n    cy.NavigateToHome();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n    cy.wait(1000);\n    cy.xpath(homePage.uploadLogo).selectFile(\"cypress/fixtures/gitImport.json\", {\n      force: true\n    });\n    cy.wait(4000);\n    cy.wait(\"@importNewApplication\").then(interception => {\n      cy.log(interception.response.body.data);\n      cy.wait(1000);\n      // should check reconnect modal opening\n      cy.get(reconnectDatasourceModal.Modal).should(\"be.visible\");\n      cy.ReconnectDatasource(\"TEDPostgres\");\n      cy.wait(1000);\n      cy.fillPostgresDatasourceForm();\n      cy.get(datasourceEditor.sectionAuthentication).click();\n      cy.testDatasource(true);\n      cy.get(\".t--save-datasource\").click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.ReconnectDatasource(\"TEDMySQL\");\n      cy.wait(500);\n      cy.fillMySQLDatasourceForm();\n      cy.get(datasourceEditor.sectionAuthentication).click();\n      cy.testDatasource(true);\n      cy.get(\".t--save-datasource\").click({\n        force: true\n      });\n      cy.wait(1000);\n      cy.ReconnectDatasource(\"TEDMongo\");\n      cy.wait(1000);\n      cy.fillMongoDatasourceForm();\n      cy.get(datasourceEditor.sectionAuthentication).click();\n      cy.testDatasource(true);\n      cy.get(\".t--save-datasource\").click({\n        force: true\n      });\n      cy.wait(2000);\n      /*cy.get(homePage.toastMessage).should(\n        \"contain\",\n        \"Application imported successfully\",\n      ); */\n      cy.get(reconnectDatasourceModal.ImportSuccessModal).should(\"be.visible\");\n      cy.get(reconnectDatasourceModal.ImportSuccessModalCloseBtn).click({\n        force: true\n      });\n      cy.wait(1000);\n      _.gitSync.CreateNConnectToGit();\n      cy.get(\"@gitRepoName\").then(repName => {\n        repoName = repName;\n        _.gitSync.CreateGitBranch(repoName);\n      });\n      _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Import the previous app connected to Git and reconnect Postgres, MySQL and Mongo db ","suites":["Git import flow "],"updatePoint":{"line":81,"column":93,"index":3110},"line":81,"code":"  it(\"2. Import the previous app connected to Git and reconnect Postgres, MySQL and Mongo db \", () => {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, \"gitImport\");\n    });\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(\".t--import-json-card\").next().click();\n    cy.importAppFromGit(repoName);\n    cy.wait(5000);\n    cy.get(reconnectDatasourceModal.Modal).should(\"be.visible\");\n    cy.ReconnectDatasource(\"TEDPostgres\");\n    cy.wait(500);\n    cy.fillPostgresDatasourceForm();\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.testDatasource(true);\n    cy.get(\".t--save-datasource\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.ReconnectDatasource(\"TEDMySQL\");\n    cy.wait(500);\n    cy.fillMySQLDatasourceForm();\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.testDatasource(true);\n    cy.get(\".t--save-datasource\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.ReconnectDatasource(\"TEDMongo\");\n    cy.wait(500);\n    cy.fillMongoDatasourceForm();\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.testDatasource(true);\n    cy.get(\".t--save-datasource\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(reconnectDatasourceModal.ImportSuccessModal).should(\"be.visible\");\n    cy.get(reconnectDatasourceModal.ImportSuccessModalCloseBtn).click({\n      force: true\n    });\n    /* cy.get(homePage.toastMessage).should(\n      \"contain\",\n     \"Application imported successfully\",\n    ); */\n    cy.wait(\"@gitStatus\").then(interception => {\n      cy.log(interception.response.body.data);\n      cy.wait(1000);\n    });\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    cy.wait(3000); //for uncommited changes to appear if any!\n    cy.get(\"body\").then($body => {\n      if ($body.find(gitSyncLocators.gitPullCount).length > 0) {\n        cy.commitAndPush();\n      }\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verfiy imported app should have all the data binding visible in view and edit mode","suites":["Git import flow "],"updatePoint":{"line":144,"column":91,"index":5293},"line":144,"code":"  it(\"3. Verfiy imported app should have all the data binding visible in view and edit mode\", () => {\n    // verify postgres data binded to table\n    cy.get(\".tbody\").first().should(\"contain.text\", \"Test user 7\");\n    //verify MySQL data binded to table\n    cy.get(\".tbody\").last().should(\"contain.text\", \"New Config\");\n    // verify api response binded to input widget\n    cy.xpath(\"//input[@value='this is a test']\").should(\"be.visible\");\n    // verify js object binded to input widget\n    cy.xpath(\"//input[@value='Success']\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Create a new branch, clone page and validate data on that branch in view and edit mode","suites":["Git import flow "],"updatePoint":{"line":154,"column":95,"index":5855},"line":154,"code":"  it(\"4. Create a new branch, clone page and validate data on that branch in view and edit mode\", () => {\n    //cy.createGitBranch(newBranch);\n    _.gitSync.CreateGitBranch(newBranch, true);\n    cy.get(\"@gitbranchName\").then(branName => {\n      newBranch = branName;\n      cy.log(\"newBranch is \" + newBranch);\n    });\n    cy.get(\".tbody\").first().should(\"contain.text\", \"Test user 7\");\n    // verify MySQL data binded to table\n    cy.get(\".tbody\").last().should(\"contain.text\", \"New Config\");\n    // verify api response binded to input widget\n    cy.xpath(\"//input[@value='this is a test']\");\n    // verify js object binded to input widget\n    cy.xpath(\"//input[@value='Success']\");\n    _.entityExplorer.ClonePage();\n\n    // verify jsObject is not duplicated\n    _.agHelper.Sleep(2000); //for cloning of table data to finish\n    _.entityExplorer.SelectEntityByName(jsObject, \"Queries/JS\"); //Also checking jsobject exists after cloning the page\n    _.entityExplorer.SelectEntityByName(\"Page1 Copy\");\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n\n    // deploy the app and validate data binding\n    cy.wait(2000);\n    cy.get(homePage.publishButton).click();\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.intercept(\"POST\", \"api/v1/git/commit/app/*\").as(\"commit\");\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.latestDeployPreview();\n    _.table.AssertTableLoaded();\n    // verify api response binded to input widget\n    cy.xpath(\"//input[@value='this is a test']\");\n    // verify js object binded to input widget\n    cy.xpath(\"//input[@value='Success']\");\n    // navigate to Page1 and verify data\n    cy.get(\".t--page-switch-tab\").contains(\"Page1\").click({\n      force: true\n    });\n    _.table.AssertTableLoaded();\n    // verify api response binded to input widget\n    cy.xpath(\"//input[@value='this is a test']\");\n    // verify js object binded to input widget\n    cy.xpath(\"//input[@value='Success']\");\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Switch to master and verify data in edit and view mode","suites":["Git import flow "],"updatePoint":{"line":207,"column":63,"index":8182},"line":207,"code":"  it(\"5. Switch to master and verify data in edit and view mode\", () => {\n    cy.switchGitBranch(\"master\");\n    cy.wait(2000);\n    // validate data binding in edit and deploy mode\n    cy.latestDeployPreview();\n    cy.get(\".tbody\").should(\"have.length\", 2);\n    _.table.AssertTableLoaded(0, 1, \"v1\");\n    cy.xpath(\"//input[@value='this is a test']\");\n    cy.xpath(\"//input[@value='Success']\");\n    // navigate to Page1 and verify data\n    cy.get(\".t--page-switch-tab\").contains(\"Page1 Copy\").click({\n      force: true\n    });\n    _.table.AssertTableLoaded(0, 1, \"v1\");\n    cy.xpath(\"//input[@value='this is a test']\");\n    cy.xpath(\"//input[@value='Success']\");\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Add widget to master, merge then checkout to child branch and verify data","suites":["Git import flow "],"updatePoint":{"line":226,"column":82,"index":8936},"line":226,"code":"  it(\"6. Add widget to master, merge then checkout to child branch and verify data\", () => {\n    //_.canvasHelper.OpenWidgetPane();\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.wait(2000); // wait for transition\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 600\n    });\n    cy.wait(3000);\n    cy.commitAndPush();\n    cy.merge(newBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.switchGitBranch(newBranch);\n    cy.wait(4000);\n    // verify button widget is visible on child branch\n    cy.get(\".t--widget-buttonwidget\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Git/GitImport/GitImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug #12749 Git Import - Empty Repo NullPointerException","suites":["Git import empty repository"],"updatePoint":{"line":22,"column":64,"index":891},"line":22,"code":"  it(\"1. Bug #12749 Git Import - Empty Repo NullPointerException\", () => {\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(\".t--import-json-card\").next().click();\n    cy.generateUUID().then(uid => {\n      repoName = uid;\n      //cy.createTestGithubRepo(repoName);\n      _.gitSync.CreateTestGiteaRepo(repoName);\n      cy.importAppFromGit(repoName, true, failureMessage);\n    });\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitImport/ImportEmptyRepo_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. validates repo URL","suites":["Git sync modal: connect tab"],"updatePoint":{"line":30,"column":27,"index":1137},"line":30,"code":"  it(\"1. validates repo URL\", function () {\n    // open gitSync modal\n    cy.get(homePage.deployPopupOptionTrigger).click({\n      force: true\n    });\n    cy.get(homePage.connectToGitBtn).click({\n      force: true\n    });\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${httpsRepoURL}`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO());\n    cy.get(gitSyncLocators.generateDeployKeyBtn).should(\"not.exist\");\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${invalidURL}`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO());\n    cy.get(gitSyncLocators.generateDeployKeyBtn).should(\"not.exist\");\n\n    // generate key button should be disappeared if empty repo\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${\"\"}`);\n    cy.get(gitSyncLocators.generateDeployKeyBtn).should(\"not.exist\");\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${datasourceFormData[\"GITEA_API_URL_TED\"]}/${repoName}.git`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO()).should(\"not.exist\");\n    cy.get(gitSyncLocators.generateDeployKeyBtn).should(\"not.be.disabled\");\n    cy.intercept(\"POST\", \"/api/v1/applications/ssh-keypair/*\").as(\"generateKey\");\n\n    // Stubbing window.open\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        expect(url.startsWith(\"https://docs.appsmith.com/\")).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.get(gitSyncLocators.learnMoreSshUrl).click();\n    cy.get(gitSyncLocators.generateDeployKeyBtn).click();\n    cy.wait(\"@generateKey\").then(result => {\n      generatedKey = result.response.body.data.publicKey;\n    });\n\n    // generate key learn more\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        expect(url.startsWith(\"https://docs.github.com/en/developers/overview/managing-deploy-keys\")).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.xpath(gitSyncLocators.learnMoreDeployKey).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. validates copy key and validates repo url input after key generation","suites":["Git sync modal: connect tab"],"updatePoint":{"line":77,"column":77,"index":3245},"line":77,"code":"  it(\"2. validates copy key and validates repo url input after key generation\", function () {\n    cy.window().then(win => {\n      cy.stub(win, \"prompt\").returns(win.prompt).as(\"copyToClipboardPrompt\");\n    });\n    cy.get(gitSyncLocators.copySshKey).click();\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${httpsRepoURL}`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO());\n    cy.get(gitSyncLocators.connectSubmitBtn).should(\"be.disabled\");\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${invalidURL}`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO());\n    cy.get(gitSyncLocators.connectSubmitBtn).should(\"be.disabled\");\n    cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${datasourceFormData[\"GITEA_API_URL_TED\"]}/${repoName}.git`);\n    cy.contains(Cypress.env(\"MESSAGES\").PASTE_SSH_URL_INFO()).should(\"not.exist\");\n    cy.get(gitSyncLocators.connectSubmitBtn).should(\"not.be.disabled\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. validates git user config","suites":["Git sync modal: connect tab"],"updatePoint":{"line":92,"column":34,"index":4155},"line":92,"code":"  it(\"3. validates git user config\", function () {\n    cy.get(gitSyncLocators.useGlobalGitConfig).click({\n      force: true\n    });\n\n    // name empty invalid\n    cy.get(gitSyncLocators.gitConfigNameInput).clear();\n    cy.get(gitSyncLocators.gitConfigEmailInput).clear();\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").AUTHOR_NAME_CANNOT_BE_EMPTY());\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL());\n    cy.get(gitSyncLocators.gitConfigNameInput).type(`{selectAll}${owner}`);\n    cy.get(gitSyncLocators.gitConfigEmailInput).clear();\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL());\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${Cypress.env(\"USERNAME\")}`);\n    cy.get(gitSyncLocators.gitConfigNameInput).clear();\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").AUTHOR_NAME_CANNOT_BE_EMPTY());\n\n    // validate email\n    cy.get(gitSyncLocators.gitConfigNameInput).type(`{selectAll}${owner}`);\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${invalidEmail}`);\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL());\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${invalidEmailWithAmp}`);\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL());\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${Cypress.env(\"USERNAME\")}`);\n    cy.get(gitSyncLocators.connectSubmitBtn).click();\n    cy.contains(Cypress.env(\"MESSAGES\").AUTHOR_NAME_CANNOT_BE_EMPTY()).should(\"not.exist\");\n    cy.contains(Cypress.env(\"MESSAGES\").FORM_VALIDATION_INVALID_EMAIL()).should(\"not.exist\");\n\n    // check git global config\n    cy.get(gitSyncLocators.useGlobalGitConfig).click({\n      force: true\n    });\n    cy.get(gitSyncLocators.gitConfigNameInput).should(\"be.disabled\");\n    cy.get(gitSyncLocators.gitConfigEmailInput).should(\"be.disabled\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        authorEmail,\n        authorName\n      } = state.ui.gitSync.globalGitConfig;\n      cy.get(gitSyncLocators.gitConfigNameInput).should(\"have.value\", authorName);\n      cy.get(gitSyncLocators.gitConfigEmailInput).should(\"have.value\", authorEmail);\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. validates submit errors","suites":["Git sync modal: connect tab"],"updatePoint":{"line":140,"column":32,"index":6626},"line":140,"code":"  it(\"4. validates submit errors\", function () {\n    cy.get(gitSyncLocators.useGlobalGitConfig).click({\n      force: true\n    });\n    cy.get(gitSyncLocators.gitConfigNameInput).scrollIntoView().type(`{selectAll}${owner}`);\n    cy.get(gitSyncLocators.gitConfigEmailInput).type(`{selectAll}${Cypress.env(\"USERNAME\")}`);\n    cy.wait(200);\n    // cy.get(gitSyncLocators.gitConnectionContainer)\n    //   .scrollTo(\"top\")\n    //   .should(\"be.visible\");\n    cy.get(gitSyncLocators.gitRepoInput).click({\n      force: true\n    }).type(`{selectAll}${invalidURLDetectedOnTheBackend}`);\n    cy.get(gitSyncLocators.connectSubmitBtn).scrollIntoView();\n    cy.get(gitSyncLocators.connectSubmitBtn).should(\"be.visible\");\n    cy.get(gitSyncLocators.gitRepoInput).scrollIntoView().type(`{selectAll}${datasourceFormData[\"GITEA_API_URL_TED\"]}/${repoName}.git`, {\n      force: true\n    });\n    cy.get(gitSyncLocators.connectSubmitBtn).scrollIntoView().click();\n    cy.get(gitSyncLocators.connetStatusbar).should(\"exist\");\n    cy.wait(\"@connectGitLocalRepo\").then(interception => {\n      const status = interception.response.body.responseMeta.status;\n      expect(status).to.be.gte(400);\n      // todo check for error msg based on the context\n    });\n\n    cy.get(gitSyncLocators.gitRepoInput).scrollIntoView().type(`{selectAll}${datasourceFormData[\"GITEA_API_URL_TED\"]}/${repoName}.git`, {\n      force: true\n    });\n\n    // cy.request({\n    //   method: \"POST\",\n    //   url: `${GITHUB_API_BASE}/repos/${Cypress.env(\n    //     \"TEST_GITHUB_USER_NAME\",\n    //   )}/${repoName}/keys`,\n    //   headers: {\n    //     Authorization: `token ${Cypress.env(\"GITHUB_PERSONAL_ACCESS_TOKEN\")}`,\n    //   },\n    //   body: {\n    //     title: \"key0\",\n    //     key: generatedKey,\n    //     read_only: true,\n    //   },\n    // });\n\n    cy.request({\n      method: \"POST\",\n      url: `${datasourceFormData[\"GITEA_API_BASE_TED\"]}:${datasourceFormData[\"GITEA_API_PORT_TED\"]}/api/v1/repos/Cypress/${repoName}/keys`,\n      headers: {\n        Authorization: `token ${Cypress.env(\"GITEA_TOKEN\")}`\n      },\n      body: {\n        title: \"key1\",\n        key: generatedKey,\n        read_only: true\n      }\n    });\n    cy.get(gitSyncLocators.connectSubmitBtn).scrollIntoView().click();\n    cy.get(gitSyncLocators.connetStatusbar).should(\"exist\");\n    cy.wait(\"@connectGitLocalRepo\").then(interception => {\n      const status = interception.response.body.responseMeta.status;\n      expect(status).to.be.gte(400);\n      // todo check for error msg based on the context\n    });\n\n    // read document clicking test\n    cy.get(gitSyncLocators.errorCallout).contains(\"Learn More\");\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        // todo: check if we can improve this\n        expect(!!url).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.get(gitSyncLocators.errorCallout).contains(\"Learn More\").click();\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Connection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Connect app to git, create new branch and delete it","suites":["Delete branch flow"],"updatePoint":{"line":7,"column":60,"index":385},"line":7,"code":"  it(\"1. Connect app to git, create new branch and delete it\", () => {\n    // create git repo and connect app to git\n    _.gitSync.CreateNConnectToGit();\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n    });\n    _.gitSync.CreateGitBranch();\n    //cy.createGitBranch(branchName);\n    cy.wait(1000);\n    // verify can not delete the checked out branch\n    cy.get(gitSyncLocators.branchButton).click();\n    cy.get(gitSyncLocators.branchListItem).eq(1).trigger(\"mouseenter\").within(() => {\n      cy.get(gitSyncLocators.gitBranchContextMenu).click();\n      cy.get(gitSyncLocators.gitBranchDelete).click();\n    });\n    cy.get(\"@gitbranchName\").then(branName => {\n      branchName = branName;\n      cy.get(homePage.toastMessage).should(\"contain\", `Cannot delete checked out branch. Please check out other branch before deleting ${branchName}.`);\n      cy.get(gitSyncLocators.closeBranchList).click();\n      // switch to master and delete new branch created\n      cy.switchGitBranch(\"master\");\n      cy.wait(2000);\n      cy.get(gitSyncLocators.branchButton).click();\n      cy.get(gitSyncLocators.branchListItem).eq(1).trigger(\"mouseenter\").within(() => {\n        cy.get(gitSyncLocators.gitBranchContextMenu).click();\n        cy.get(gitSyncLocators.gitBranchDelete).click();\n      });\n      cy.wait(\"@deleteBranch\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(gitSyncLocators.closeBranchList).click();\n      // verify remote branch is there for the deleted local branch\n      cy.wait(2000);\n      cy.switchGitBranch(`origin/${branchName}`);\n      cy.wait(2000);\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/DeleteBranch_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"2. Create child branch, merge data from child branch, delete child branch verify the data should reflect in master ","suites":["Delete branch flow"],"updatePoint":{"line":42,"column":121,"index":2081},"line":42,"code":"  it(\"2. Create child branch, merge data from child branch, delete child branch verify the data should reflect in master \", () => {\n    cy.switchGitBranch(\"master\");\n    _.gitSync.CreateGitBranch(\"\", true);\n    cy.wait(1000);\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.dragAndDropToCanvas(\"checkboxwidget\", {\n      x: 100,\n      y: 200\n    });\n    cy.get(\".t--draggable-checkboxwidget\").should(\"exist\");\n    cy.wait(2000);\n    cy.commitAndPush();\n    cy.merge(\"master\");\n    cy.get(\".t--close-git-sync-modal\").click();\n    cy.switchGitBranch(\"master\");\n    cy.wait(2000);\n    cy.get(gitSyncLocators.branchButton).click();\n    cy.get(gitSyncLocators.branchListItem).eq(1).trigger(\"mouseenter\").within(() => {\n      cy.get(gitSyncLocators.gitBranchContextMenu).click();\n      cy.get(gitSyncLocators.gitBranchDelete).click();\n    });\n    cy.wait(\"@deleteBranch\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(gitSyncLocators.closeBranchList).click();\n    cy.get(\".t--draggable-checkboxwidget\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/DeleteBranch_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"3. Create new branch, commit data in that branch , delete the branch, verify data should not reflect in master ","suites":["Delete branch flow"],"updatePoint":{"line":67,"column":117,"index":3151},"line":67,"code":"  it(\"3. Create new branch, commit data in that branch , delete the branch, verify data should not reflect in master \", () => {\n    _.gitSync.CreateGitBranch(\"\", true);\n    cy.wait(1000);\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.dragAndDropToCanvas(\"chartwidget\", {\n      x: 210,\n      y: 300\n    });\n    cy.get(\".t--widget-chartwidget\").should(\"exist\");\n    cy.wait(2000);\n    cy.commitAndPush();\n    cy.wait(1000);\n    cy.switchGitBranch(\"master\");\n    cy.wait(3000);\n    cy.get(gitSyncLocators.branchButton).click();\n    cy.get(gitSyncLocators.branchListItem).eq(1).trigger(\"mouseenter\").within(() => {\n      cy.wait(1000);\n      cy.get(gitSyncLocators.gitBranchContextMenu).click();\n      cy.wait(1000);\n      cy.get(gitSyncLocators.gitBranchDelete).click();\n    });\n    cy.wait(\"@deleteBranch\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\".--widget-chartwidget\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/DeleteBranch_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Validate commit comment inputbox and last deployed preview","suites":["Git sync modal: deploy tab"],"updatePoint":{"line":19,"column":67,"index":786},"line":19,"code":"  it(\"1. Validate commit comment inputbox and last deployed preview\", function () {\n    // last deployed preview\n    // The deploy preview Link should be displayed only after the first commit done\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n\n    // comment text input should not empty\n    cy.get(gitSyncLocators.commitCommentInput).should(\"be.disabled\").and(\"not.be.empty\");\n    cy.get(gitSyncLocators.commitButton).should(\"be.disabled\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Deploy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Post connection app name deploy menu","suites":["Git sync modal: deploy tab"],"updatePoint":{"line":29,"column":45,"index":1279},"line":29,"code":"  it(\"2. Post connection app name deploy menu\", function () {\n    // deploy\n    _.agHelper.GetNClick(_.locators._publishButton);\n    cy.get(gitSyncLocators.gitSyncModal);\n    cy.get(gitSyncLocators.gitSyncModalDeployTab).should(\"have.attr\", \"aria-selected\", \"true\").and(\"not.be.empty\");\n    cy.window().then(window => {\n      cy.stub(window, \"open\").callsFake(url => {\n        expect(url.indexOf(\"branch=master\")).to.be.at.least(0);\n        expect(!!url).to.be.true;\n      });\n    });\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n\n    // current deployed version\n    _.agHelper.GetNClick(homePage.deployPopupOptionTrigger);\n    _.agHelper.AssertElementExist(homePage.currentDeployedPreviewBtn);\n\n    // connect to git\n    _.agHelper.AssertElementAbsence(homePage.connectToGitBtn);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Deploy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should be opened with proper components","suites":["Git disconnect modal:"],"updatePoint":{"line":18,"column":48,"index":653},"line":18,"code":"  it(\"1. should be opened with proper components\", function () {\n    _.gitSync.AuthorizeKeyToGitea(repoName);\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n    cy.get(\"[data-testid=t--tab-GIT_CONNECTION]\").click();\n    // after clicked disconnect on connection modal,\n    // it should be closed and disconnect modal should be opened\n    cy.get(gitSyncLocators.disconnectIcon).click();\n    cy.get(gitSyncLocators.gitSyncModal).should(\"not.exist\");\n    cy.get(gitSyncLocators.disconnectGitModal).should(\"exist\");\n    cy.get(gitSyncLocators.disconnectGitModal).contains(Cypress.env(\"MESSAGES\").NONE_REVERSIBLE_MESSAGE());\n\n    // Stubbing window.open\n    cy.window().then(window => {\n      windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n        expect(url.startsWith(\"https://docs.appsmith.com/\")).to.be.true;\n        windowOpenSpy.restore();\n      });\n    });\n    cy.get(gitSyncLocators.disconnectLearnMoreLink).click();\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        name\n      } = state.ui.gitSync.disconnectingGitApp;\n      cy.get(gitSyncLocators.disconnectGitModal).contains(Cypress.env(\"MESSAGES\").GIT_REVOKE_ACCESS(name));\n      cy.get(gitSyncLocators.disconnectGitModal).contains(Cypress.env(\"MESSAGES\").GIT_TYPE_REPO_NAME_FOR_REVOKING_ACCESS(name));\n    });\n\n    // disconnect button should be disabled\n    cy.get(gitSyncLocators.disconnectButton).should(\"be.disabled\");\n    cy.get(gitSyncLocators.closeDisconnectModal).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/DisconnectGit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should have disconnect repo button","suites":["Git disconnect modal:"],"updatePoint":{"line":50,"column":43,"index":2172},"line":50,"code":"  it(\"2. should have disconnect repo button\", function () {\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n    cy.get(\"[data-testid=t--tab-GIT_CONNECTION]\").click();\n\n    // after clicked disconnect on connection modal,\n    // it should be closed and disconnect modal should be opened\n    cy.get(gitSyncLocators.disconnectIcon).click();\n    cy.get(gitSyncLocators.disconnectButton).should(\"be.disabled\");\n    cy.get(gitSyncLocators.disconnectAppNameInput).type(`{selectAll}${repoName}`);\n    cy.get(gitSyncLocators.disconnectButton).should(\"be.disabled\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        name\n      } = state.ui.gitSync.disconnectingGitApp;\n      cy.get(gitSyncLocators.disconnectAppNameInput).type(`{selectAll}${name}`);\n      cy.get(gitSyncLocators.disconnectButton).should(\"be.enabled\");\n    });\n\n    // disconnecting validation\n    cy.route(\"POST\", \"api/v1/git/disconnect/app/*\").as(\"disconnect\");\n    cy.get(gitSyncLocators.disconnectButton).click();\n    //cy.get(gitSyncLocators.disconnectButton).should(\"be.disabled\");\n    cy.wait(\"@disconnect\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n\n    // validation store after disconnected\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        id,\n        name\n      } = state.ui.gitSync.disconnectingGitApp;\n      expect(name).to.eq(\"\");\n      expect(id).to.eq(\"\");\n    });\n    cy.get(gitSyncLocators.disconnectGitModal).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/DisconnectGit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Shows remote is ahead warning and conflict error during commit and push","suites":["Git sync:"],"updatePoint":{"line":46,"column":80,"index":1874},"line":46,"code":"  it(\"1. Shows remote is ahead warning and conflict error during commit and push\", function () {\n    _.gitSync.CreateGitBranch(tempBranch, false);\n    cy.get(\"@gitbranchName\").then(branName => {\n      tempBranch = branName;\n      cy.log(\"tempBranch is \" + tempBranch);\n\n      //cy.createGitBranch(tempBranch);\n      _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n      cy.wait(2000); // wait for transition\n      cy.dragAndDropToCanvas(\"buttonwidget\", {\n        x: 300,\n        y: 300\n      });\n      // cy.createGitBranch(tempBranch0);\n      _.gitSync.CreateGitBranch(tempBranch0, false);\n      cy.get(\"@gitbranchName\").then(branName => {\n        tempBranch0 = branName;\n        cy.log(\"tempBranch0 is \" + tempBranch0);\n        cy.widgetText(buttonNameTemp0Branch, widgetsPage.buttonWidget, widgetsPage.widgetNameSpan);\n        cy.commitAndPush();\n        cy.switchGitBranch(tempBranch);\n        cy.merge(tempBranch0);\n      });\n\n      // cy.mergeViaGithubApi({\n      //   repo: repoName,\n      //   base: tempBranch,\n      //   head: tempBranch0,\n      // });\n      cy.switchGitBranch(tempBranch);\n    });\n    cy.widgetText(buttonNameMainBranch, widgetsPage.buttonWidget, widgetsPage.widgetNameSpan);\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(\"@commit\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 400);\n    cy.contains(Cypress.env(\"MESSAGES\").GIT_UPSTREAM_CHANGES());\n    cy.get(gitSyncLocators.pullButton).click();\n    cy.contains(Cypress.env(\"MESSAGES\").GIT_CONFLICTING_INFO());\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Git_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"2. Detect conflicts when merging head to base branch","suites":["Git sync:"],"updatePoint":{"line":87,"column":58,"index":3557},"line":87,"code":"  it(\"2. Detect conflicts when merging head to base branch\", function () {\n    cy.switchGitBranch(mainBranch);\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.wait(2000); // wait for transition\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    _.gitSync.CreateGitBranch(tempBranch1, false);\n    cy.widgetText(buttonNameTempBranch1, widgetsPage.buttonWidget, widgetsPage.widgetNameSpan);\n    cy.commitAndPush();\n    cy.switchGitBranch(mainBranch);\n    cy.widgetText(buttonNameMainBranchEdited, widgetsPage.buttonWidget, widgetsPage.widgetNameSpan);\n    cy.commitAndPush();\n    cy.switchGitBranch(tempBranch1);\n    cy.get(gitSyncLocators.bottomBarMergeButton).click();\n    cy.wait(5000); // wait for git status call to finish\n    cy.get(gitSyncLocators.mergeBranchDropdownDestination).click();\n    cy.get(commonlocators.dropdownmenu).contains(mainBranch).click();\n    // assert conflicting status\n    cy.contains(Cypress.env(\"MESSAGES\").GIT_CONFLICTING_INFO());\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Git_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"3. Supports merging head to base branch","suites":["Git sync:"],"updatePoint":{"line":110,"column":45,"index":4610},"line":110,"code":"  it(\"3. Supports merging head to base branch\", function () {\n    cy.switchGitBranch(mainBranch);\n    cy.createGitBranch(tempBranch2);\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.Createpage(\"NewPage\");\n    cy.commitAndPush();\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(8000);\n    cy.switchGitBranch(mainBranch);\n    cy.wait(4000); // wait for switch branch\n    cy.contains(\"NewPage\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Git_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"4. Enables pulling remote changes from bottom bar","suites":["Git sync:"],"updatePoint":{"line":124,"column":55,"index":5119},"line":124,"code":"  it(\"4. Enables pulling remote changes from bottom bar\", function () {\n    _.gitSync.CreateGitBranch(tempBranch3, false);\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.wait(2000); // wait for transition\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.wait(\"@updateLayout\");\n    cy.commitAndPush();\n    cy.mergeViaGithubApi({\n      repo: repoName,\n      base: mainBranch,\n      head: tempBranch3\n    });\n    cy.switchGitBranch(mainBranch);\n    cy.get(gitSyncLocators.bottomBarCommitButton).should(\"be.visible\");\n    cy.get(gitSyncLocators.gitPullCount);\n    cy.intercept(\"GET\", \"/api/v1/git/pull/app/*\").as(\"gitPull\");\n    cy.get(gitSyncLocators.bottomBarPullButton).click();\n    cy.wait(\"@gitPull\");\n    cy.get(\".ads-v2-spinner\").should(\"exist\");\n    cy.get(\".ads-v2-spinner\").should(\"not.exist\");\n    cy.get(widgetsPage.inputWidget);\n    cy.switchGitBranch(tempBranch3);\n    cy.widgetText(inputNameTempBranch3, widgetsPage.inputWidget, widgetsPage.widgetNameSpan);\n    cy.commitAndPush();\n    cy.mergeViaGithubApi({\n      repo: repoName,\n      base: mainBranch,\n      head: tempBranch3\n    });\n    cy.switchGitBranch(mainBranch);\n    cy.widgetText(inputNameTempBranch31, widgetsPage.inputWidget, widgetsPage.widgetNameSpan);\n    cy.commitAndPush(true);\n\n    // reset git status\n    cy.get(gitSyncLocators.bottomBarMergeButton).click();\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.get(gitSyncLocators.gitPullCount);\n    cy.get(gitSyncLocators.bottomBarPullButton).click();\n    cy.contains(Cypress.env(\"MESSAGES\").GIT_CONFLICTING_INFO());\n    cy.xpath(\"//span[@name='close-modal']\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Git_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"5. Clicking '+' icon on bottom bar should open deploy popup","suites":["Git sync:"],"updatePoint":{"line":170,"column":65,"index":6823},"line":170,"code":"  it(\"5. Clicking '+' icon on bottom bar should open deploy popup\", function () {\n    cy.get(gitSyncLocators.bottomBarCommitButton).click({\n      force: true\n    });\n    cy.get(gitSyncLocators.gitSyncModal).should(\"exist\");\n    cy.get(\"[data-testid=t--tab-DEPLOY]\").should(\"exist\");\n    cy.get(\"[data-testid=t--tab-DEPLOY]\").invoke(\"attr\", \"aria-selected\").should(\"eq\", \"true\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Git_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"6. Checks clean url updates across branches","suites":["Git sync:"],"updatePoint":{"line":181,"column":49,"index":7272},"line":181,"code":"  it(\"6. Checks clean url updates across branches\", () => {\n    cy.Deletepage(\"NewPage\");\n    cy.wait(1000);\n    let legacyPathname = \"\";\n    let newPathname = \"\";\n    cy.intercept(\"GET\", \"/api/v1/pages?*mode=EDIT\", req => {\n      req.continue();\n    }).as(\"appAndPages\");\n    cy.reload();\n    //cy.pause();\n    cy.wait(\"@appAndPages\").then(intercept2 => {\n      const {\n        application,\n        pages\n      } = intercept2.response.body.data;\n      const defaultPage = pages.find(p => p.isDefault);\n      legacyPathname = `/applications/${application.id}/pages/${defaultPage.id}`;\n      newPathname = `/app/${application.slug}/${defaultPage.slug}-${defaultPage.id}`;\n    });\n    cy.location().should(location => {\n      expect(location.pathname).includes(newPathname);\n    });\n    cy.request(\"PUT\", `/api/v1/applications/${applicationId}`, {\n      applicationVersion: 1\n    });\n    _.gitSync.CreateGitBranch(cleanUrlBranch, false);\n    cy.location().should(location => {\n      expect(location.pathname).includes(legacyPathname);\n    });\n    cy.switchGitBranch(mainBranch);\n    cy.get(\".t--upgrade\").click({\n      force: true\n    });\n    cy.get(\".t--upgrade-confirm\").click({\n      force: true\n    });\n    cy.location().should(location => {\n      expect(location.pathname).includes(newPathname);\n    });\n    _.gitSync.CreateGitBranch(cleanUrlBranch, false);\n    cy.location().should(location => {\n      expect(location.pathname).includes(legacyPathname);\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Git_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Bug:10773 When user delete a resource form the child branch and merge it back to parent branch, still the deleted resource will show up in the newly created branch","suites":["Git sync Bug #10773"],"updatePoint":{"line":34,"column":172,"index":1485},"line":34,"code":"  it(\"1. Bug:10773 When user delete a resource form the child branch and merge it back to parent branch, still the deleted resource will show up in the newly created branch\", () => {\n    // adding a new page \"ChildPage\" to master\n    cy.Createpage(pagename);\n    cy.get(\".t--entity-name:contains('Page1')\").click();\n    cy.commitAndPush();\n    cy.wait(2000);\n    _.gitSync.CreateGitBranch(tempBranch, false);\n    //cy.createGitBranch(tempBranch);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    // verify tempBranch should contain this page\n    cy.get(`.t--entity-name:contains(\"${pagename}\")`).should(\"be.visible\");\n    cy.get(`.t--entity-name:contains(\"${pagename}\")`).click();\n    // delete page from tempBranch and merge to master\n    cy.Deletepage(pagename);\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    // verify ChildPage is not on master\n    cy.switchGitBranch(mainBranch);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"${pagename}\")`).should(\"not.exist\");\n    // create another branch and verify deleted page doesn't exist on it\n    //cy.createGitBranch(tempBranch0);\n    _.gitSync.CreateGitBranch(tempBranch0, false);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"${pagename}\")`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Connect app to git, clone the Page ,verify JSobject duplication should not happen and validate data binding in deploy mode and edit mode","suites":["Git sync Bug #10773"],"updatePoint":{"line":65,"column":145,"index":3020},"line":65,"code":"  it(\"2. Connect app to git, clone the Page ,verify JSobject duplication should not happen and validate data binding in deploy mode and edit mode\", () => {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n      cy.addDsl(dsl);\n    });\n    // connect app to git\n    _.gitSync.CreateNConnectToGit(repoName);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n    });\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\", true);\n    // create JS Object and validate its data on Page1\n    _.jsEditor.CreateJSObject('return \"Success\";');\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n    // clone the page1 and validate data binding\n    _.entityExplorer.ActionContextMenuByEntityName(\"Page1\", \"Clone\");\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    // verify jsObject is not duplicated\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n    // deploy the app and validate data binding\n    cy.get(homePage.publishButton).click();\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.latestDeployPreview();\n    cy.wait(2000);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n    // switch to Page1 and validate data binding\n    cy.get(\".t--page-switch-tab\").contains(\"Page1\").click({\n      force: true\n    });\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(1000);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Bug:12724 Js objects are merged to single page when user creates a new branch","suites":["Git sync Bug #10773"],"updatePoint":{"line":111,"column":86,"index":5171},"line":111,"code":"  it(\"3. Bug:12724 Js objects are merged to single page when user creates a new branch\", () => {\n    // create a new branch, clone page and validate jsObject data binding\n    //cy.createGitBranch(tempBranch);\n    cy.wait(3000);\n    _.gitSync.CreateGitBranch(tempBranch, true);\n    cy.wait(2000);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(\".t--entity-name:contains(Page1)\").last().trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    // verify jsObject is not duplicated\n    cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"Page1\", \"Clone\");\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    _.gitSync.DeleteTestGithubRepo(repoName);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Create an app with JSObject, connect it to git and verify its data in edit and deploy mode","suites":["Git sync Bug #10773"],"updatePoint":{"line":129,"column":99,"index":6105},"line":129,"code":"  it(\"4. Create an app with JSObject, connect it to git and verify its data in edit and deploy mode\", function () {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n      cy.addDsl(dsl);\n    });\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\", true);\n    // create JS Object and validate its data on Page1\n    _.jsEditor.CreateJSObject('return \"Success\";');\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n    // clone the page1 and validate data binding\n    _.entityExplorer.ActionContextMenuByEntityName(\"Page1\", \"Clone\");\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    // connect app to git and deploy\n    _.gitSync.CreateNConnectToGit();\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n      cy.wait(2000);\n      cy.window().its(\"store\").invoke(\"getState\").then(state => {\n        const commitInputDisabled = state.ui.gitSync.gitStatus?.isClean || state.ui.gitSync.isCommitting;\n        cy.log(\"commitInputDisabled is \" + commitInputDisabled);\n        if (!commitInputDisabled) {\n          cy.commitAndPush();\n        }\n\n        // check last deploy preview\n        if (state.ui.applications.currentApplication?.lastDeployedAt) {\n          cy.latestDeployPreview();\n          cy.wait(1000);\n          cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n          // switch to Page1 and validate data binding\n          cy.get(\".t--page-switch-tab\").contains(\"Page1\").click({\n            force: true\n          });\n          cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n          cy.get(commonlocators.backToEditor).click();\n        } else if (state.ui.gitSync.isGitSyncModalOpen) {\n          cy.get(gitSyncLocators.closeGitSyncModal).click({\n            force: true\n          });\n        }\n\n        // verify jsObject data binding on Page 1\n        cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n        cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n        cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n        // switch to Page1 copy and verify jsObject data binding\n        cy.CheckAndUnfoldEntityItem(\"Pages\");\n        cy.get(\".t--entity-name:contains(Page1)\").last().trigger(\"mouseover\").click({\n          force: true\n        });\n        cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n        // verify jsObject is not duplicated\n        cy.get(`.t--entity-name:contains(${jsObject})`).should(\"have.length\", 1);\n        cy.xpath(\"//input[@class='bp3-input' and @value='Success']\").should(\"be.visible\");\n      });\n      _.gitSync.DeleteTestGithubRepo(repoName);\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Bug:13385 : Unable to see application in home page after the git connect flow is aborted in middle","suites":["Git sync Bug #10773"],"updatePoint":{"line":194,"column":107,"index":9163},"line":194,"code":"  it(\"5. Bug:13385 : Unable to see application in home page after the git connect flow is aborted in middle\", () => {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, `${newWorkspaceName}app`);\n      cy.generateUUID().then(uid => {\n        const owner = Cypress.env(\"TEST_GITHUB_USER_NAME\");\n        repoName = uid;\n        _.gitSync.CreateTestGiteaRepo(repoName);\n        //cy.createTestGithubRepo(repoName);\n\n        // open gitSync modal\n        cy.get(homePage.deployPopupOptionTrigger).click();\n        cy.get(homePage.connectToGitBtn).click({\n          force: true\n        });\n        cy.intercept({\n          url: \"api/v1/git/connect/*\",\n          hostname: window.location.host\n        }, req => {\n          req.headers[\"origin\"] = \"Cypress\";\n        });\n        cy.intercept(\"POST\", \"/api/v1/applications/ssh-keypair/*\").as(`generateKey-${repoName}`);\n        cy.get(gitSyncLocators.gitRepoInput).type(`{selectAll}${datasourceFormData[\"GITEA_API_URL_TED\"]}/${repoName}.git`);\n        // abort git flow after generating key\n        cy.get(gitSyncLocators.closeGitSyncModal).click();\n      });\n      // verify app is visible and open\n      cy.NavigateToHome();\n      cy.reload();\n      cy.wait(3000);\n      cy.SearchApp(`${newWorkspaceName}app`);\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitBugs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Generate postgreSQL crud page , connect to git, clone the page, rename page with special character in it","suites":["Git sync apps"],"updatePoint":{"line":29,"column":113,"index":1514},"line":29,"code":"  it(\"1. Generate postgreSQL crud page , connect to git, clone the page, rename page with special character in it\", () => {\n    cy.NavigateToHome();\n    _.homePage.CreateNewApplication();\n\n    // create New App and  generate Postgres CRUD page\n    cy.get(generatePage.generateCRUDPageActionCard).click();\n    cy.get(generatePage.selectDatasourceDropdown).click();\n    cy.contains(\"Connect new datasource\").click({\n      force: true\n    });\n    cy.get(datasource.PostgreSQL).click();\n    cy.fillPostgresDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\".t--save-datasource\").click();\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).contains(\"public.configs\").click();\n\n    //  skip optional search column selection.\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"span:contains('Got it')\").click();\n\n    // connect app to git\n    _.gitSync.CreateNConnectToGit(repoName);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n    });\n    cy.wait(3000);\n    // rename page to crud_page\n    cy.renameEntity(\"Page1\", pageName);\n    cy.get(`.t--entity-name:contains(${pageName})`).trigger(\"mouseover\").click({\n      force: true\n    });\n    // create a clone of page\n    cy.get(`.t--entity-item:contains(${pageName})`).within(() => {\n      cy.get(\".t--context-menu\").click({\n        force: true\n      });\n    });\n    cy.selectAction(\"Clone\");\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create api queries from api pane and cURL import , bind it to widget and clone page from page settings","suites":["Git sync apps"],"updatePoint":{"line":78,"column":111,"index":3607},"line":78,"code":"  it(\"2. Create api queries from api pane and cURL import , bind it to widget and clone page from page settings\", () => {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      cy.Createpage(newPage);\n      cy.get(`.t--entity-item:contains(${newPage})`).click();\n      cy.wait(1000);\n      // create a get api call\n      cy.NavigateToAPI_Panel();\n      cy.wait(2000);\n      cy.CreateAPI(\"get_data\");\n      // creating get request using echo\n      cy.get(apiwidget.resourceUrl).first().click({\n        force: true\n      }).type(datasourceFormData[\"echoApiUrl\"], {\n        parseSpecialCharSequences: false\n      });\n      //.type(\"{esc}}\");\n      cy.wait(5000);\n      cy.get(apiwidget.headerKey).type(\"info\");\n      cy.xpath(\"//span[text()='Key']\").click();\n      // entering the data in header\n      cy.get(apiwidget.headerValue).type(\"This is a test\", {\n        parseSpecialCharSequences: false\n      });\n      cy.wait(2000);\n      cy.SaveAndRunAPI();\n      cy.ResponseStatusCheck(\"200\");\n      cy.get(\".t--close-editor\").click();\n      // curl import\n      _.dataSources.NavigateToDSCreateNew();\n      cy.get(ApiEditor.curlImage).click({\n        force: true\n      });\n      cy.get(\"textarea\").type('curl -d \\'{\"name\":\"morpheus\",\"job\":\"leader\"}\\' -H Content-Type:application/json -X POST ' + datasourceFormData[\"echoApiUrl\"], {\n        force: true,\n        parseSpecialCharSequences: false\n      });\n      cy.importCurl();\n      cy.RunAPI();\n      cy.ResponseStatusCheck(\"200\");\n      cy.get(\"@curlImport\").then(response => {\n        cy.expect(response.response.body.responseMeta.success).to.eq(true);\n        cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n          const someText = text;\n          expect(someText).to.equal(response.response.body.data.name);\n        });\n      });\n      cy.get(\"body\").then($ele => {\n        if ($ele.find(\".t--close-editor\").length) {\n          cy.get(\".t--close-editor\").click();\n        }\n      });\n      cy.get(explorer.addWidget).click();\n      // bind input widgets to the api calls responses\n      cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n        x: 300,\n        y: 300\n      });\n      cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n      cy.EnableAllCodeEditors();\n      cy.get(`.t--property-control-defaultvalue ${dynamicInputLocators.input}`).last().click({\n        force: true\n      }).type(\"{{Api1.data.body.name}}\", {\n        parseSpecialCharSequences: false\n      });\n      cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n        x: 300,\n        y: 500\n      });\n      cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n      cy.EnableAllCodeEditors();\n      cy.get(`.t--property-control-defaultvalue ${dynamicInputLocators.input}`).last().click({\n        force: true\n      }).type(\"{{get_data.data.headers.Info}}\", {\n        parseSpecialCharSequences: false\n      });\n      cy.wait(2000);\n      // clone the page from page settings\n      cy.get(`.t--entity-item:contains(${newPage})`).within(() => {\n        cy.get(\".t--context-menu\").click({\n          force: true\n        });\n      });\n      cy.selectAction(\"Clone\");\n      cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n      cy.get(`.t--entity-item:contains(${newPage} Copy)`).click();\n      cy.wait(\"@getPage\");\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Commit and push changes, validate data binding on all pages in edit and deploy mode on master","suites":["Git sync apps"],"updatePoint":{"line":166,"column":102,"index":6897},"line":166,"code":"  it(\"3. Commit and push changes, validate data binding on all pages in edit and deploy mode on master\", () => {\n    // verfiy data binding on all pages in edit mode\n    cy.wait(2000);\n    cy.get(\".t--draggable-inputwidgetv2\").should(\"be.visible\");\n    cy.get(\".t--draggable-inputwidgetv2\").first().find(\".bp3-input\").invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(\".t--draggable-inputwidgetv2\").last().find(\".bp3-input\").invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(`.t--entity-item:contains(${newPage})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.get(\".t--draggable-inputwidgetv2\").first().find(\".bp3-input\").should(\"have.value\", \"morpheus\");\n    cy.get(\".t--draggable-inputwidgetv2\").last().find(\".bp3-input\").should(\"have.value\", \"This is a test\");\n    cy.get(`.t--entity-item:contains(${pageName} Copy)`).click();\n    cy.wait(\"@getPage\");\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(`.t--entity-item:contains(${pageName})`).first().click();\n    cy.wait(\"@getPage\");\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    // commit and push the changes\n    cy.commitAndPush();\n    cy.wait(2000);\n    // verify data binding on all pages in deploy mode\n    cy.latestDeployPreview();\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(\".t--page-switch-tab\").contains(`${pageName} Copy`).click({\n      force: true\n    });\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(\".t--page-switch-tab\").contains(`${newPage}`).click({\n      force: true\n    });\n    cy.get(\".bp3-input\").first().invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(\".bp3-input\").last().invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(\".t--page-switch-tab\").contains(`${newPage} Copy`).click({\n      force: true\n    });\n    cy.get(\".bp3-input\").first().invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(\".bp3-input\").last().invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Create a new branch tempBranch, add jsObject and datasource query, move them to new page i.e. Child_Page and bind to widgets","suites":["Git sync apps"],"updatePoint":{"line":213,"column":133,"index":9310},"line":213,"code":"  it(\"4. Create a new branch tempBranch, add jsObject and datasource query, move them to new page i.e. Child_Page and bind to widgets\", () => {\n    //cy.createGitBranch(tempBranch);\n    _.gitSync.CreateGitBranch(tempBranch, true);\n    cy.get(\"@gitbranchName\").then(branName => {\n      tempBranch = branName;\n    });\n    cy.wait(1000);\n    // create jsObject and rename it\n    _.jsEditor.CreateJSObject('return \"Success\";');\n    cy.wait(2000);\n    // create postgres select query\n    //cy.CheckAndUnfoldEntityItem(\"Datasources\");\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    cy.get(datasource.datasourceCard).contains(datasourceName).scrollIntoView().should(\"be.visible\").closest(datasource.datasourceCard).within(() => {\n      cy.get(datasource.createQuery).click();\n    });\n    cy.get(queryLocators.queryNameField).type(\"get_users\");\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click();\n    cy.xpath(queryLocators.query).click({\n      force: true\n    });\n    // writing query to get the schema\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users ORDER BY id LIMIT 10;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    // create a new page\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.Createpage(\"Child_Page\");\n    cy.wait(1000);\n    cy.get(`.t--entity-name:contains(${newPage} Copy)`).trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.wait(2000); // adding wait for query to load\n    _.entityExplorer.SelectEntityByName(\"get_users\", \"Queries/JS\");\n    _.agHelper.ActionContextMenuWithInPane(\"Move to page\", \"Child_Page\");\n    cy.runQuery();\n    cy.wait(2000);\n    cy.get(`.t--entity-name:contains(${newPage} Copy)`).trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.wait(2000);\n    _.entityExplorer.SelectEntityByName(\"JSObject1\", \"Queries/JS\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"JSObject1\", \"Move to page\", \"Child_Page\");\n    cy.wait(2000);\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.get(explorer.addWidget).click({\n      force: true\n    });\n    // bind input widgets to the jsObject and query response\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(`.t--property-control-defaultvalue ${dynamicInputLocators.input}`).last().click({\n      force: true\n    }).type(\"{{JSObject1.myFun1()}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 500\n    });\n    cy.get(\".t--widget-inputwidgetv2\").should(\"exist\");\n    cy.EnableAllCodeEditors();\n    cy.get(`.t--property-control-defaultvalue ${dynamicInputLocators.input}`).last().click({\n      force: true\n    }).type(\"{{get_users.data[0].name}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Commit and push changes, validate data binding on all pages in edit and deploy mode on tempBranch","suites":["Git sync apps"],"updatePoint":{"line":293,"column":106,"index":12292},"line":293,"code":"  it(\"5. Commit and push changes, validate data binding on all pages in edit and deploy mode on tempBranch\", () => {\n    // commit and push changes\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    // verfiy data binding on all pages in deploy mode\n    cy.wait(4000);\n    cy.latestDeployPreview();\n    cy.wait(2000);\n    cy.get(\".bp3-input\").should(\"be.visible\");\n    cy.get(\".bp3-input\").first().invoke(\"val\").should(\"be.oneOf\", [\"Success\", \"Test user 7\"]);\n    cy.get(\".bp3-input\").last().invoke(\"val\").should(\"be.oneOf\", [\"Success\", \"Test user 7\"]);\n    cy.get(\".t--page-switch-tab\").contains(`${pageName}`).click({\n      force: true\n    });\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(\".t--page-switch-tab\").contains(`${pageName} Copy`).click({\n      force: true\n    });\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(\".t--page-switch-tab\").contains(`${newPage}`).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\".bp3-input\").first().invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(\".bp3-input\").last().invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(\".t--page-switch-tab\").contains(`${newPage} Copy`).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\".bp3-input\").first().invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(\".bp3-input\").last().invoke(\"val\").should(\"be.oneOf\", [\"morpheus\", \"This is a test\"]);\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n    // verfiy data binding on all pages in edit mode\n    /* cy.get(\".t--draggable-inputwidgetv2\").first().find(\".bp3-input\").should(\"have.value\", \"morpheus\");\n     cy.get(\".t--draggable-inputwidgetv2\")\n      .last()\n      .find(\".bp3-input\")\n      .should(\"have.value\", \"This is a test\");\n    cy.get(`.t--entity-item:contains(Child_Page)`)\n      .first()\n      .click();\n    cy.wait(\"@getPage\");\n    cy.reload();\n    cy.wait(3000);\n    cy.get(\".bp3-input\")\n      .first()\n      .should(\"have.value\", \"Success\");\n    cy.get(\".bp3-input\")\n      .last()\n      .should(\"have.value\", \"Test user 7\");\n    cy.get(`.t--entity-item:contains(${newPage})`)\n      .first()\n      .click();\n    cy.wait(\"@getPage\");\n    cy.get(\".t--draggable-inputwidgetv2\").first().find(\".bp3-input\").should(\"have.value\", \"morpheus\");\n     cy.get(\".t--draggable-inputwidgetv2\")\n      .last()\n      .find(\".bp3-input\")\n      .should(\"have.value\", \"This is a test\");\n     cy.get(`.t--entity-item:contains(${pageName} Copy)`).click();\n    cy.wait(\"@getPage\");\n    cy.readTabledataPublish(\"0\", \"1\").then((cellData) => {\n      expect(cellData).to.be.equal(\"New Config\");\n    });\n    cy.get(`.t--entity-item:contains(${pageName})`)\n      .first()\n      .click();\n    cy.wait(\"@getPage\");\n    cy.readTabledataPublish(\"0\", \"1\").then((cellData) => {\n      expect(cellData).to.be.equal(\"New Config\");\n    }); */\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Switch to master and verify no uncommitted changes should be shown on master","suites":["Git sync apps"],"updatePoint":{"line":374,"column":85,"index":15502},"line":374,"code":"  it(\"6. Switch to master and verify no uncommitted changes should be shown on master\", () => {\n    cy.switchGitBranch(\"master\");\n    cy.wait(2000);\n    // verify commit input box is disabled\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).should(\"be.disabled\").and(\"have.text\", \"No changes to commit\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Switch to tempBranch , Clone the Child_Page, change it's visiblity to hidden and deploy, merge to master","suites":["Git sync apps"],"updatePoint":{"line":382,"column":113,"index":15938},"line":382,"code":"  it(\"7. Switch to tempBranch , Clone the Child_Page, change it's visiblity to hidden and deploy, merge to master\", () => {\n    cy.switchGitBranch(tempBranch);\n    cy.wait(2000);\n\n    //  clone the Child_Page\n    _.entityExplorer.SelectEntityByName(\"Child_Page\", \"Pages\");\n    _.entityExplorer.ClonePage(\"Child_Page\");\n    // change cloned page visiblity to hidden\n    _.entityExplorer.SelectEntityByName(\"Child_Page Copy\", \"Pages\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"Child_Page\", \"Hide\");\n    _.entityExplorer.SelectEntityByName(\"Child_Page\", \"Pages\");\n    cy.wait(\"@getPage\");\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.latestDeployPreview();\n    // verify page is hidden on deploy mode\n    _.agHelper.AssertContains(\"Child_Page Copy\", \"not.exist\");\n    _.deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify Page visiblity on master in edit and deploy mode","suites":["Git sync apps"],"updatePoint":{"line":408,"column":64,"index":17028},"line":408,"code":"  it(\"8. Verify Page visiblity on master in edit and deploy mode\", () => {\n    cy.switchGitBranch(mainBranch);\n    cy.wait(2000);\n    cy.latestDeployPreview();\n    _.agHelper.AssertContains(\"Child_Page Copy\", \"not.exist\");\n    _.deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Create new branch, delete a page and merge back to master, verify page is deleted on master","suites":["Git sync apps"],"updatePoint":{"line":415,"column":100,"index":17334},"line":415,"code":"  it(\"9. Create new branch, delete a page and merge back to master, verify page is deleted on master\", () => {\n    //cy.createGitBranch(tempBranch1);\n    _.gitSync.CreateGitBranch(tempBranch1, true);\n    // delete page from page settings\n    cy.Deletepage(\"Child_Page Copy\");\n    cy.get(homePage.publishButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    cy.wait(8000);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    // verify Child_Page is not on master\n    cy.switchGitBranch(mainBranch);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"Child_Page Copy\")`).should(\"not.exist\");\n    // create another branch and verify deleted page doesn't exist on it\n    _.gitSync.CreateGitBranch(tempBranch0, true);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"Child_Page Copy\")`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Import app from git and verify page order should not change","suites":["Git sync apps"],"updatePoint":{"line":437,"column":69,"index":18367},"line":437,"code":"  it(\"10. Import app from git and verify page order should not change\", () => {\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(\".t--import-json-card\").next().click();\n    // import application from git\n    cy.importAppFromGit(repoName);\n    cy.wait(2000);\n    // verify page order remains same as in orignal app\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(\".t--entity-item\").eq(1).contains(\"crudpage_1\");\n    cy.get(\".t--entity-item\").eq(2).contains(\"crudpage_1 Copy\");\n    cy.get(\".t--entity-item\").eq(3).contains(\"ApiCalls_1\");\n    cy.get(\".t--entity-item\").eq(4).contains(\"ApiCalls_1 Copy\");\n    cy.get(\".t--entity-item\").eq(5).contains(\"Child_Page\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/GitSyncedApps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify the functionality of the default dropdown under merge tab","suites":["Git sync modal: merge tab"],"updatePoint":{"line":20,"column":73,"index":811},"line":20,"code":"  it(\"1. Verify the functionality of the default dropdown under merge tab\", function () {\n    cy.get(commonLocators.canvas).click({\n      force: true\n    });\n    _.gitSync.CreateGitBranch(childBranchKey);\n    cy.get(gitSyncLocators.bottomBarMergeButton).click();\n    cy.get(gitSyncLocators.gitSyncModal).should(\"exist\");\n    cy.get(\"[data-testid=t--tab-MERGE]\").should(\"exist\");\n    cy.get(\"[data-testid=t--tab-MERGE]\").invoke(\"attr\", \"aria-selected\").should(\"eq\", \"true\");\n    cy.get(gitSyncLocators.mergeButton).should(\"be.disabled\");\n    cy.wait(3000);\n    cy.get(gitSyncLocators.mergeBranchDropdownDestination).click();\n    cy.get(commonLocators.dropdownmenu).contains(mainBranch).click();\n    _.agHelper.AssertElementAbsence(_.gitSync._checkMergeability, 30000);\n    cy.wait(\"@mergeStatus\", {\n      timeout: 35000\n    }).should(\"have.nested.property\", \"response.body.data.isMergeAble\", true);\n    cy.wait(2000);\n    cy.get(gitSyncLocators.mergeButton).should(\"be.enabled\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/Merge_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Deploy menu at the application dropdown menu","suites":["Pre git connection spec:"],"updatePoint":{"line":5,"column":53,"index":298},"line":5,"code":"  it(\"1. Deploy menu at the application dropdown menu\", () => {\n    // create new app\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n    });\n    cy.intercept(\"POST\", \"/api/v1/applications/publish/*\").as(\"publishApp\");\n    cy.window().then(window => {\n      cy.stub(window, \"open\").callsFake(url => {\n        expect(!!url).to.be.true;\n      });\n    });\n\n    // deploy\n    _.agHelper.GetNClick(_.locators._publishButton);\n    cy.wait(\"@publishApp\");\n\n    // current deployed version\n    _.agHelper.GetNClick(homePage.deployPopupOptionTrigger);\n    _.agHelper.AssertElementExist(homePage.currentDeployedPreviewBtn);\n\n    // connect to git\n    _.agHelper.GetNClick(homePage.connectToGitBtn);\n    cy.get(gitSyncLocators.gitSyncModal);\n    cy.contains(\"Git connection\").should(\"have.attr\", \"aria-selected\", \"true\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.get(gitSyncLocators.connectGitBottomBar).click();\n    cy.get(gitSyncLocators.gitSyncModal);\n    cy.contains(\"Git connection\").should(\"have.attr\", \"aria-selected\", \"true\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/PreconnectionAppNameDeployMenu_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify SSH key regeneration flow ","suites":["Git regenerate SSH key flow"],"updatePoint":{"line":5,"column":42,"index":249},"line":5,"code":"  it(\"1. Verify SSH key regeneration flow \", () => {\n    _.homePage.NavigateToHome();\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      _.homePage.CreateNewWorkspace(\"ssh_\" + uid);\n      _.homePage.CreateAppInWorkspace(\"ssh_\" + uid);\n    });\n    _.gitSync.CreateNConnectToGit(repoName);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n      cy.regenerateSSHKey(repoName);\n    });\n    cy.get(\"body\").click(0, 0, {\n      force: true\n    });\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/RegenerateSSHKey_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Verify error meesage is displayed when ssh key is not added to github and verify RSA SSH key regeneration flow","suites":["Git regenerate SSH key flow"],"updatePoint":{"line":22,"column":119,"index":834},"line":22,"code":"  it(\"2. Verify error meesage is displayed when ssh key is not added to github and verify RSA SSH key regeneration flow\", () => {\n    cy.wait(2000);\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n    cy.get('[data-testid=\"t--tab-GIT_CONNECTION\"]').click();\n    cy.wait(2000);\n    cy.get(gitSyncLocators.SSHKeycontextmenu).eq(2).click();\n    cy.get(gitSyncLocators.regenerateSSHKeyECDSA).click();\n    cy.contains(Cypress.env(\"MESSAGES\").REGENERATE_KEY_CONFIRM_MESSAGE());\n    cy.xpath(gitSyncLocators.confirmButton).click();\n    cy.reload();\n    cy.wait(2000);\n    cy.validateToastMessage(Cypress.env(\"MESSAGES\").ERROR_GIT_AUTH_FAIL());\n    cy.wait(\"@gitStatus\");\n    cy.wait(\"@gitStatus\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 400);\n    cy.regenerateSSHKey(repoName, true, \"RSA\");\n    cy.get(\"body\").click(0, 0, {\n      force: true\n    });\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/RegenerateSSHKey_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Modal should be opened with proper components","suites":["Repo Limit Exceeded Error Modal"],"updatePoint":{"line":17,"column":54,"index":740},"line":17,"code":"  it(\"1. Modal should be opened with proper components\", function () {\n    _.homePage.NavigateToHome();\n    _.homePage.CreateNewApplication();\n    _.gitSync.CreateNConnectToGit(repoName1, true, true);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName1 = repName;\n    });\n    _.homePage.NavigateToHome();\n    _.homePage.CreateNewApplication();\n    _.gitSync.CreateNConnectToGit(repoName2, true, true);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName2 = repName;\n    });\n    _.homePage.NavigateToHome();\n    _.homePage.CreateNewApplication();\n    _.gitSync.CreateNConnectToGit(repoName3, true, true);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName3 = repName;\n    });\n    _.homePage.NavigateToHome();\n    _.homePage.CreateNewApplication();\n    _.gitSync.CreateNConnectToGit(repoName4, false, true);\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName4 = repName;\n    });\n\n    // cy.createAppAndConnectGit(repoName1, false);\n    // cy.createAppAndConnectGit(repoName2, false);\n    // cy.createAppAndConnectGit(repoName3, false);\n    // cy.createAppAndConnectGit(repoName4, false, true);\n\n    if (CURRENT_REPO === REPO.CE) {\n      cy.get(gitSyncLocators.repoLimitExceededErrorModal).should(\"exist\");\n\n      // title and info text checking\n      cy.get(gitSyncLocators.repoLimitExceededErrorModal).contains(Cypress.env(\"MESSAGES\").REPOSITORY_LIMIT_REACHED());\n      cy.get(gitSyncLocators.repoLimitExceededErrorModal).contains(Cypress.env(\"MESSAGES\").REPOSITORY_LIMIT_REACHED_INFO());\n      cy.get(gitSyncLocators.repoLimitExceededErrorModal).contains(Cypress.env(\"MESSAGES\").CONTACT_SUPPORT_TO_UPGRADE());\n      cy.get(gitSyncLocators.gitModalLink).should(\"contain.text\", \"Contact Support\");\n      cy.get(gitSyncLocators.repoLimitExceededErrorModal).contains(Cypress.env(\"MESSAGES\").REVOKE_CAUSE_APPLICATION_BREAK());\n\n      // learn more link checking\n      cy.window().then(window => {\n        windowOpenSpy = cy.stub(window, \"open\").callsFake(url => {\n          expect(url.startsWith(\"https://docs.appsmith.com/\")).to.be.true;\n          windowOpenSpy.restore();\n        });\n      });\n      cy.get(gitSyncLocators.gitModalLink).contains(\"Learn more\").click();\n      cy.get(gitSyncLocators.connectedApplication).should(\"have.length\", 3);\n      cy.get(gitSyncLocators.diconnectLink).first().click();\n      cy.get(gitSyncLocators.repoLimitExceededErrorModal).should(\"not.exist\");\n      cy.get(gitSyncLocators.disconnectGitModal).should(\"exist\");\n      cy.get(gitSyncLocators.closeGitSyncModal).click();\n      cy.get(gitSyncLocators.repoLimitExceededErrorModal).should(\"not.exist\");\n    }\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/RepoLimitExceededErrorModal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. create branch input","suites":["Git sync:"],"updatePoint":{"line":23,"column":28,"index":869},"line":23,"code":"  it(\"1. create branch input\", function () {\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.get(gitSyncLocators.branchButton).click();\n\n    // validate of the branch name\n    const hypenBranchName = \"hypen-branch-name\";\n    cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${hypenBranchName}`);\n    cy.get(gitSyncLocators.branchSearchInput).should(\"have.value\", \"hypen-branch-name\");\n    const specialBranchName = \"special&branch-name~@#$%^&*()_+={}[]><,.\";\n    cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${specialBranchName}`);\n    cy.get(gitSyncLocators.branchSearchInput).should(\"have.value\", \"special&branch-name~@#$%^&*()_+={}[]><,.\");\n    cy.wait(200);\n    cy.get(gitSyncLocators.closeBranchList).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. creates a new branch and create branch specific resources","suites":["Git sync:"],"updatePoint":{"line":37,"column":66,"index":1663},"line":37,"code":"  it(\"2. creates a new branch and create branch specific resources\", function () {\n    cy.get(commonLocators.canvas).click({\n      force: true\n    });\n    //cy.createGitBranch(parentBranchKey);\n    _.gitSync.CreateGitBranch(parentBranchKey, true);\n    cy.get(\"@gitbranchName\").then(branName => {\n      parentBranchKey = branName;\n    });\n    _.entityExplorer.AddNewPage();\n    _.entityExplorer.RenameEntityFromExplorer(\"Page2\", \"ParentPage1\", true);\n    _.dataSources.NavigateToDSCreateNew();\n    _.apiPage.CreateApi(\"ParentApi1\");\n    _.jsEditor.CreateJSObject();\n    // Added because api name edit takes some time to\n    // reflect in api sidebar after the call passes.\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    _.gitSync.CreateGitBranch(childBranchKey, true);\n    cy.get(\"@gitbranchName\").then(branName => {\n      childBranchKey = branName;\n    });\n    _.entityExplorer.AddNewPage();\n    _.entityExplorer.RenameEntityFromExplorer(\"Page2\", \"ChildPage1\", true);\n    _.dataSources.NavigateToDSCreateNew();\n    _.apiPage.CreateApi(\"ChildApi1\");\n    _.jsEditor.CreateJSObject();\n    // Added because api name edit takes some time to\n    // reflect in api sidebar after the call passes.\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n\n    // A switch here should not show a 404 page\n    cy.switchGitBranch(parentBranchKey);\n    // When entity not found, takes them to the home page\n    cy.get(`.t--entity.page`).contains(\"Page1\").closest(\".t--entity\").should(\"be.visible\").should(\"have.class\", \"activePage\");\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"ParentPage1\")`).click();\n    cy.get(`.t--entity-name:contains(\"ChildPage1\")`).should(\"not.exist\");\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    cy.get(`.t--entity-name:contains(\"ChildApi1\")`).should(\"not.exist\");\n    cy.get(`.t--entity-name:contains(\"ChildJsAction1\")`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. makes branch specific resource updates","suites":["Git sync:"],"updatePoint":{"line":82,"column":47,"index":3634},"line":82,"code":"  it(\"3. makes branch specific resource updates\", function () {\n    cy.switchGitBranch(childBranchKey);\n    _.entityExplorer.SelectEntityByName(\"ParentPage1\", \"Pages\");\n    _.entityExplorer.RenameEntityFromExplorer(\"ParentPage1\", \"ParentPageRenamed\", true);\n    _.entityExplorer.SelectEntityByName(\"ParentApi1\", \"Queries/JS\");\n    _.entityExplorer.RenameEntityFromExplorer(\"ParentApi1\", \"ParentApiRenamed\", true);\n    cy.switchGitBranch(parentBranchKey);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(\"ParentPageRenamed\")`).should(\"not.exist\");\n    cy.get(`.t--entity-name:contains(\"ParentApiRenamed\")`).should(\"not.exist\");\n    // cy.get(`.t--entity-name:contains(\"ParentJsActionRenamed\")`).should(\n    //   \"not.exist\",\n    // );\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. enables switching branch from the URL","suites":["Git sync:"],"updatePoint":{"line":97,"column":46,"index":4405},"line":97,"code":"  it(\"4. enables switching branch from the URL\", () => {\n    cy.url().then(url => {\n      _.entityExplorer.SelectEntityByName(\"ParentPage1\", \"Pages\");\n      cy.get(explorer.addWidget).click();\n      cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n        x: 200,\n        y: 200\n      });\n      cy.get(\".t--widget-tablewidgetv2\").should(\"exist\");\n      cy.commitAndPush();\n      const urlObject = new URL(url);\n      urlObject.searchParams.set(branchQueryKey, childBranchKey);\n      cy.visit(urlObject.toString());\n      cy.get(\".ads-v2-spinner\").should(\"exist\");\n      cy.get(\".ads-v2-spinner\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2\").should(\"not.exist\");\n      cy.commitAndPush();\n      cy.latestDeployPreview();\n      cy.get(\".t--widget-tablewidgetv2\").should(\"not.exist\");\n      //cy.get(commonLocators.backToEditor).click();\n      cy.wait(2000);\n      cy.url().then(url => {\n        const urlObject = new URL(url);\n        urlObject.searchParams.set(branchQueryKey, parentBranchKey);\n        cy.visit(urlObject.toString());\n        cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n        cy.get(\".t--page-switch-tab\").contains(\"ParentPage1\").click();\n        cy.get(\".t--widget-tablewidgetv2\").should(\"exist\");\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. test sync and prune branches","suites":["Git sync:"],"line":130,"code":"  it.skip(\"5. test sync and prune branches\", () => {","file":"e2e/Regression/ClientSide/Git/GitSync/SwitchBranches_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"6. no error faced when user switches branch with new page","suites":["Git sync:"],"updatePoint":{"line":163,"column":63,"index":7432},"line":163,"code":"  it(\"6. no error faced when user switches branch with new page\", function () {\n    cy.goToEditFromPublish(); //Adding since skipping 6th case\n    cy.generateUUID().then(uuid => {\n      _.gitSync.CreateGitBranch(childBranchKey, true);\n      //cy.createGitBranch(childBranchKey);\n      cy.CheckAndUnfoldEntityItem(\"Pages\");\n      _.entityExplorer.AddNewPage();\n      cy.get(gitSyncLocators.branchButton).click({\n        force: true\n      });\n      cy.get(gitSyncLocators.branchSearchInput).type(\"{selectall}master\");\n      cy.wait(400);\n      cy.get(gitSyncLocators.branchListItem).contains(\"master\").click();\n      cy.wait(4000);\n      _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n      cy.get(`.t--entity.page`).contains(\"Page1\").closest(\".t--entity\").should(\"be.visible\").should(\"have.class\", \"activePage\");\n      cy.get(\".t--canvas-artboard\").should(\"be.visible\");\n    });\n    cy.reload();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. branch list search","suites":["Git sync:"],"updatePoint":{"line":183,"column":27,"index":8298},"line":183,"code":"  it(\"7. branch list search\", function () {\n    cy.get(\".ads-v2-spinner\").should(\"not.exist\");\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.get(commonLocators.canvas).click({\n      force: true\n    });\n    let parentBKey, childBKey;\n    _.gitSync.CreateGitBranch(\"parentBranch\", true);\n    cy.get(\"@gitbranchName\").then(branName => {\n      parentBKey = branName;\n      _.gitSync.CreateGitBranch(\"childBranch\", true);\n      cy.get(\"@gitbranchName\").then(branName => {\n        childBKey = branName;\n        cy.get(gitSyncLocators.branchButton).click();\n        cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${parentBKey.slice(0, 3)}`);\n        cy.get(gitSyncLocators.branchListItem).contains(parentBKey);\n        cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${childBKey.slice(0, 3)}`);\n        cy.get(gitSyncLocators.branchListItem).contains(childBKey);\n        cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}${branchQueryKey}`);\n        cy.get(gitSyncLocators.branchListItem).contains(childBKey);\n        cy.get(gitSyncLocators.branchListItem).contains(parentBKey);\n        cy.get(gitSyncLocators.branchSearchInput).type(`{selectall}abcde`);\n        cy.get(gitSyncLocators.branchListItem).should(\"not.exist\");\n        cy.get(gitSyncLocators.branchSearchInput).clear();\n        cy.get(gitSyncLocators.branchListItem).contains(childBKey);\n        cy.get(gitSyncLocators.branchListItem).contains(parentBKey);\n      });\n    });\n    cy.get(gitSyncLocators.closeBranchList).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. when snapshot is restored from a page created before Conversion, it should refresh in the same page","suites":["Git sync:"],"updatePoint":{"line":27,"column":108,"index":1025},"line":27,"code":"  it(\"1. when snapshot is restored from a page created before Conversion, it should refresh in the same page\", () => {\n    entityExplorer.DragDropWidgetNVerify(draggableWidgets.CONTAINER, 100, 100);\n    entityExplorer.AddNewPage(\"New blank page\");\n    autoLayout.ConvertToAutoLayoutAndVerify();\n    autoLayout.UseSnapshotFromBanner();\n    entityExplorer.VerifyIsCurrentPage(\"Page2\");\n    entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    agHelper.Sleep();\n    entityExplorer.ActionContextMenuByEntityName(\"Page2\");\n  });","file":"e2e/Regression/ClientSide/Git/GitWithAutoLayout/conversion_of_git_connected_apps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. when snapshot is restored from a page created after Conversion, it should redirected to home page","suites":["Git sync:"],"updatePoint":{"line":37,"column":106,"index":1551},"line":37,"code":"  it(\"2. when snapshot is restored from a page created after Conversion, it should redirected to home page\", () => {\n    autoLayout.ConvertToAutoLayoutAndVerify();\n    entityExplorer.AddNewPage(\"New blank page\");\n    autoLayout.UseSnapshotFromBanner();\n    entityExplorer.VerifyIsCurrentPage(\"Page1\");\n  });","file":"e2e/Regression/ClientSide/Git/GitWithAutoLayout/conversion_of_git_connected_apps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Switch to parentBranch and when snapshot is restored from a page created after Conversion, it should redirected to home page","suites":["Git sync:"],"updatePoint":{"line":43,"column":133,"index":1886},"line":43,"code":"  it(\"3. Switch to parentBranch and when snapshot is restored from a page created after Conversion, it should redirected to home page\", () => {\n    cy.switchGitBranch(parentBranchKey);\n    entityExplorer.DragDropWidgetNVerify(draggableWidgets.CONTAINER, 100, 100);\n    autoLayout.ConvertToAutoLayoutAndVerify();\n    entityExplorer.AddNewPage(\"New blank page\");\n    autoLayout.UseSnapshotFromBanner();\n    entityExplorer.VerifyIsCurrentPage(\"Page1\");\n  });","file":"e2e/Regression/ClientSide/Git/GitWithAutoLayout/conversion_of_git_connected_apps_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Install JS Library and commit changes, create branch and verify JS library changes are present on new branch ","suites":["excludeForAirgap"],"updatePoint":{"line":21,"column":118,"index":883},"line":21,"code":"  it(\"1. Install JS Library and commit changes, create branch and verify JS library changes are present on new branch \", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.openInstaller();\n    _.installer.installLibrary(\"uuidjs\", \"UUID\");\n    cy.commitAndPush();\n    // create new branch\n    _.gitSync.CreateGitBranch(tempBranch, true);\n    // verify js library changes are present\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.AssertLibraryinExplorer(\"uuidjs\");\n  });","file":"e2e/Regression/ClientSide/Git/GitWithJSLibrary/GitwithCustomJSLibrary_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Discard custom js library changes, verify changes are discarded also verify it deosnt show uncommitted changes","suites":["excludeForAirgap"],"updatePoint":{"line":32,"column":119,"index":1408},"line":32,"code":"  it(\"2. Discard custom js library changes, verify changes are discarded also verify it deosnt show uncommitted changes\", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.uninstallLibrary(\"uuidjs\");\n    _.installer.assertUnInstall(\"uuidjs\");\n    // discard js library uninstallation\n    cy.gitDiscardChanges();\n    // verify js library is present\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.AssertLibraryinExplorer(\"uuidjs\");\n    // verify no uncommitted changes are there\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).should(\"be.disabled\");\n    cy.get(gitSyncLocators.commitButton).should(\"be.disabled\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    // swtich to master, verify no uncommitted changes\n    cy.switchGitBranch(\"master\");\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    cy.get(gitSyncLocators.bottomBarCommitButton).click();\n    cy.get(gitSyncLocators.commitCommentInput).should(\"be.disabled\");\n    cy.get(gitSyncLocators.commitButton).should(\"be.disabled\");\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n  });","file":"e2e/Regression/ClientSide/Git/GitWithJSLibrary/GitwithCustomJSLibrary_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Merge custom js lib changes from child branch to master, verify changes are merged","suites":["excludeForAirgap"],"updatePoint":{"line":55,"column":91,"index":2625},"line":55,"code":"  it(\"3. Merge custom js lib changes from child branch to master, verify changes are merged\", () => {\n    cy.switchGitBranch(tempBranch);\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.openInstaller();\n    _.installer.installLibrary(\"jspdf\", \"jspdf\");\n    //cy.commitAndPush();\n\n    cy.get(HomePage.publishButton).click();\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    cy.get(gitSyncLocators.commitCommentInput).type(\"Initial Commit\");\n    cy.get(gitSyncLocators.commitButton).click();\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    cy.merge(mainBranch);\n    cy.get(gitSyncLocators.closeGitSyncModal).click();\n    cy.wait(2000);\n    // verify custom js library is present in master branch\n    cy.switchGitBranch(mainBranch);\n    _.agHelper.AssertElementExist(_.gitSync._bottomBarPull);\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.AssertLibraryinExplorer(\"jspdf\");\n  });","file":"e2e/Regression/ClientSide/Git/GitWithJSLibrary/GitwithCustomJSLibrary_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug #13860 Theming is not getting applied on view mode when the app is connected to Git","suites":["Git with Theming:"],"updatePoint":{"line":35,"column":96,"index":1323},"line":35,"code":"  it(\"1. Bug #13860 Theming is not getting applied on view mode when the app is connected to Git\", function () {\n    _.appSettings.OpenAppSettings();\n    _.appSettings.GoToThemeSettings();\n    // apply theme on master branch and deploy\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.themeCard).eq(1).click({\n      force: true\n    });\n\n    // check for alert\n    cy.get(`${commonlocators.themeCard}`).eq(1).siblings(\"div\").first().invoke(\"text\").then(text => {\n      cy.get(commonlocators.toastmsg).contains(`Theme ${text} applied`);\n    });\n    _.appSettings.ClosePane();\n    // drag a widget and assert theme is applied\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 700\n    });\n    //cy.get('.t--draggable-buttonwidget').closest(\"div\").should('have.css' , 'background-color', backgroudColorChildBranch)\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", backgroudColorMaster); //Widget Color\n    cy.commitAndPush();\n    cy.wait(2000);\n    _.gitSync.CreateGitBranch(tempBranch);\n    //cy.createGitBranch(tempBranch);\n    cy.wait(1000);\n    cy.get(\".canvas\").click(0, 0, {\n      force: true\n    });\n    // change theme on tempBranch\n    _.appSettings.OpenAppSettings();\n    _.appSettings.GoToThemeSettings();\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n\n    // select a theme\n    cy.get(commonlocators.themeCard).last().click({\n      force: true\n    });\n\n    // check for alert\n    cy.get(`${commonlocators.themeCard}`).last().siblings(\"div\").first().invoke(\"text\").then(text => {\n      cy.get(commonlocators.toastmsg).contains(`Theme ${text} applied`);\n    });\n    _.appSettings.ClosePane();\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", backgroudColorChildBranch); //Widget Color\n    cy.commitAndPush();\n    //assert theme is applied in view mode\n    cy.latestDeployPreview();\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", backgroudColorChildBranch); //Widget Color\n    cy.get(commonlocators.backToEditor).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Git/GitWithTheming/GitWithTheming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Go to admin settings and enable Github with not all mandatory fields filled","suites":["excludeForAirgap"],"updatePoint":{"line":5,"column":84,"index":361},"line":5,"code":"  it(\"1. Go to admin settings and enable Github with not all mandatory fields filled\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(\".admin-settings-menu-option\").should(\"be.visible\");\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    // click authentication tab\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.githubButton).should(\"be.visible\").should(\"contain\", \"Enable\");\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000);\n    // fill github form\n    cy.fillGithubFormPartly();\n    cy.get(commonlocators.toastBody).should(\"be.visible\");\n    cy.get(commonlocators.toastBody).should(\"contain\", \"Mandatory fields cannot be empty\");\n  });","file":"e2e/Regression/ClientSide/Github/EnableGithub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Go to admin settings and enable Github","suites":["excludeForAirgap"],"updatePoint":{"line":22,"column":47,"index":1194},"line":22,"code":"  it(\"2. Go to admin settings and enable Github\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(\".admin-settings-menu-option\").should(\"be.visible\");\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    // click authentication tab\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.githubButton).should(\"be.visible\").should(\"contain\", \"Enable\");\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000);\n    // fill github form\n    cy.fillGithubForm();\n    cy.wait(2000);\n    // assert server is restarting\n    cy.get(adminSettings.restartNotice).should(\"be.visible\");\n    // adding wait for server to restart\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    // validating sso with github is enabled\n    cy.get(adminSettings.loginWithGithub).should(\"have.text\", \"Continue with Github\");\n  });","file":"e2e/Regression/ClientSide/Github/EnableGithub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Go to admin settings and disable Github","suites":["excludeForAirgap"],"updatePoint":{"line":48,"column":48,"index":2358},"line":48,"code":"  it(\"3. Go to admin settings and disable Github\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(\".admin-settings-menu-option\").should(\"be.visible\");\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    // click authentication tab\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.githubButton).should(\"be.visible\").should(\"contain\", \"Edit\");\n    cy.get(adminSettings.githubButton).click();\n    cy.wait(2000);\n    cy.get(adminSettings.disconnectBtn).should(\"be.visible\").should(\"contain\", \"Disconnect\");\n    cy.get(adminSettings.disconnectBtn).click().should(\"contain\", \"Are you sure?\");\n    cy.get(adminSettings.disconnectBtn).click();\n\n    // assert server is restarting\n    cy.get(adminSettings.restartNotice).should(\"be.visible\");\n    // adding wait for server to restart\n    cy.wait(120000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    // validating sso with github is disabled\n    cy.get(adminSettings.loginWithGithub).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Github/EnableGithub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Go to admin settings and enable Google with not all mandatory fields filled","suites":["excludeForAirgap"],"updatePoint":{"line":5,"column":84,"index":361},"line":5,"code":"  it(\"1. Go to admin settings and enable Google with not all mandatory fields filled\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(\".admin-settings-menu-option\").should(\"be.visible\");\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    // click authentication tab\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.googleButton).should(\"be.visible\").should(\"contain\", \"Enable\");\n    cy.get(adminSettings.googleButton).click();\n    cy.wait(2000);\n    // fill google form\n    cy.fillGoogleFormPartly();\n    cy.get(commonlocators.toastBody).should(\"be.visible\");\n    cy.get(commonlocators.toastBody).should(\"contain\", \"Mandatory fields cannot be empty\");\n  });","file":"e2e/Regression/ClientSide/Google/EnableGoogle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Go to admin settings and enable Google","suites":["excludeForAirgap"],"updatePoint":{"line":22,"column":47,"index":1194},"line":22,"code":"  it(\"2. Go to admin settings and enable Google\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(\".admin-settings-menu-option\").should(\"be.visible\");\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    // click authentication tab\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.googleButton).should(\"be.visible\").should(\"contain\", \"Enable\");\n    cy.get(adminSettings.googleButton).click();\n    cy.wait(2000);\n    // fill google form\n    cy.fillGoogleForm();\n    cy.wait(2000);\n    // assert server is restarting\n    cy.get(adminSettings.restartNotice).should(\"be.visible\");\n    // adding wait for server to restart\n    cy.waitUntil(() => cy.contains(\"Google authentication\", {\n      timeout: 180000\n    }).should(\"be.visible\"));\n    cy.wait(1000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    // validating sso with google is enabled\n    cy.get(adminSettings.loginWithGoogle).should(\"have.text\", \"Continue with Google\");\n  });","file":"e2e/Regression/ClientSide/Google/EnableGoogle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Go to admin settings and disable Google","suites":["excludeForAirgap"],"updatePoint":{"line":51,"column":48,"index":2470},"line":51,"code":"  it(\"3. Go to admin settings and disable Google\", function () {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(\".admin-settings-menu-option\").should(\"be.visible\");\n    cy.get(\".admin-settings-menu-option\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    // click authentication tab\n    cy.get(adminSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(adminSettings.googleButton).should(\"be.visible\").should(\"contain\", \"Edit\");\n    cy.get(adminSettings.googleButton).click();\n    cy.wait(2000);\n    cy.get(adminSettings.disconnectBtn).should(\"be.visible\").should(\"contain\", \"Disconnect\");\n    cy.get(adminSettings.disconnectBtn).click().should(\"contain\", \"Are you sure?\");\n    cy.get(adminSettings.disconnectBtn).click();\n\n    // assert server is restarting\n    cy.get(adminSettings.restartNotice).should(\"be.visible\");\n    // adding wait for server to restart\n    cy.waitUntil(() => cy.contains(\"Google authentication\", {\n      timeout: 180000\n    }).should(\"be.visible\"));\n    cy.wait(1000);\n    cy.waitUntil(() => cy.get(homePage.profileMenu).should(\"be.visible\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    // validating sso with google is disabled\n    cy.get(adminSettings.loginWithGoogle).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Google/EnableGoogle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Code Editor should have focus while switching between widgets, pages and Editor Panes - Label","suites":["Canvas context Property Pane"],"updatePoint":{"line":26,"column":102,"index":999},"line":26,"code":"  it(\"1. Code Editor should have focus while switching between widgets, pages and Editor Panes - Label\", function () {\n    propertyControlSelector = \".t--property-control-label\";\n    verifyPropertyPaneContext(() => {\n      cy.focusCodeInput(propertyControlSelector);\n    }, () => {\n      cy.assertSoftFocusOnCodeInput(propertyControlSelector);\n    }, \"Button1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Code Editor should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":34,"column":94,"index":1360},"line":34,"code":"  it(\"2. Code Editor should have focus while switching between widgets, pages and Editor Panes\", function () {\n    propertyControlSelector = `.t--property-control-animateloading input[type=\"checkbox\"]`;\n    verifyPropertyPaneContext(() => {\n      cy.get(propertyControlSelector).click({\n        force: true\n      });\n    }, () => {\n      cy.get(propertyControlSelector).should(\"be.focused\");\n    }, \"Button1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Canvas context Property Pane"],"updatePoint":{"line":44,"column":22,"index":1705},"line":44,"code":"  it(\"excludeForAirgap\", \"3. Code Editor should have focus while switching between widgets, pages and Editor Panes\", function () {\n    // TODO: Since google recaptcha is not possible in airgap mode, skipping this test for now for airgapped version.\n    //Will modify the dsl to have maybe phone input widget to have a dropdown property control - Sangeeth\n    //if (!Cypress.env(\"AIRGAPPED\")) {\n    //DropDown Property controls should have focus while switching between widgets, pages and Editor Panes\n    agHelper.RefreshPage();\n    propertyControlClickSelector = `.t--property-control-googlerecaptchaversion .rc-select-selection-search-input`;\n    propertyControlVerifySelector = \".t--property-control-googlerecaptchaversion .rc-select-selection-search-input\";\n    verifyPropertyPaneContext(() => {\n      cy.get(propertyControlClickSelector).eq(0).click({\n        force: true\n      });\n    }, () => {\n      cy.get(propertyControlVerifySelector).should(\"be.focused\");\n    }, \"Button1\");\n    //}\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Code Editor should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":62,"column":94,"index":2779},"line":62,"code":"  it(\"4. Code Editor should have focus while switching between widgets, pages and Editor Panes\", function () {\n    //Icon Button Property controls should have focus while switching between widgets, pages and Editor Panes\n    propertyControlClickSelector = `.t--property-control-borderradius .ads-v2-segmented-control__segments-container`;\n    propertyControlVerifySelector = `.t--property-control-borderradius .ads-v2-segmented-control__segments-container[data-selected=\"true\"]`;\n    verifyPropertyPaneContext(() => {\n      cy.get(propertyControlClickSelector).eq(0).click({\n        force: true\n      });\n    }, () => {\n      cy.get(propertyControlVerifySelector).should(\"be.focused\");\n    }, \"Button1\", true);\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. ColorPicker Property controls should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":74,"column":112,"index":3514},"line":74,"code":"  it(\"5. ColorPicker Property controls should have focus while switching between widgets, pages and Editor Panes\", function () {\n    let propertyControlSelector = `.t--property-control-buttoncolor input[type=\"text\"]`;\n    verifyPropertyPaneContext(() => {\n      cy.get(propertyControlSelector).click({\n        force: true\n      });\n    }, () => {\n      cy.get(propertyControlSelector).should(\"be.focused\");\n    }, \"Button1\", true);\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. ColorPicker Property controls should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":84,"column":112,"index":3952},"line":84,"code":"  it(\"6. ColorPicker Property controls should have focus while switching between widgets, pages and Editor Panes\", function () {\n    propertySectionState = {\n      basic: false,\n      general: true,\n      validation: false,\n      formsettings: true\n    };\n    verifyPropertyPaneContext(() => {\n      setPropertyPaneSectionState(propertySectionState);\n    }, () => {\n      verifyPropertyPaneSectionState(propertySectionState);\n    }, \"Button1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. ColorPicker Property controls should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":97,"column":112,"index":4403},"line":97,"code":"  it(\"7. ColorPicker Property controls should have focus while switching between widgets, pages and Editor Panes\", function () {\n    propertySectionState = {\n      general: true,\n      icon: false,\n      color: true,\n      borderandshadow: false\n    };\n    verifyPropertyPaneContext(() => {\n      cy.get(`.ads-v2-tabs__list-tab:contains(\"Style\")`).eq(0).click();\n      setPropertyPaneSectionState(propertySectionState);\n    }, () => {\n      verifyPropertyPaneSectionState(propertySectionState);\n    }, \"Button1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Layered PropertyPane - Code Editor should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":111,"column":117,"index":4928},"line":111,"code":"  it(\"8. Layered PropertyPane - Code Editor should have focus while switching between widgets, pages and Editor Panes\", function () {\n    propertyControlSelector = \".t--property-control-computedvalue\";\n    verifyPropertyPaneContext(() => {\n      cy.editColumn(\"step\");\n      cy.focusCodeInput(propertyControlSelector);\n    }, () => {\n      cy.assertSoftFocusOnCodeInput(propertyControlSelector);\n    }, \"Table1\");\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Table1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Layered PropertyPane - Toggle Property controls should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":122,"column":130,"index":5462},"line":122,"code":"  it(\"9. Layered PropertyPane - Toggle Property controls should have focus while switching between widgets, pages and Editor Panes\", function () {\n    let propertyControlSelector = `.t--property-control-cellwrapping input[type=\"checkbox\"]`;\n    verifyPropertyPaneContext(() => {\n      cy.editColumn(\"step\");\n      cy.get(propertyControlSelector).click({\n        force: true\n      });\n    }, () => {\n      cy.get(propertyControlSelector).should(\"be.focused\");\n    }, \"Table1\");\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Table1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Layered PropertyPane - Property Sections should retain state while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":135,"column":126,"index":6042},"line":135,"code":"  it(\"10. Layered PropertyPane - Property Sections should retain state while switching between widgets, pages and Editor Panes\", () => {\n    let propertySectionState = {\n      data: false,\n      general: true\n    };\n    verifyPropertyPaneContext(() => {\n      cy.editColumn(\"step\");\n      setPropertyPaneSectionState(propertySectionState);\n    }, () => {\n      cy.wait(500);\n      verifyPropertyPaneSectionState(propertySectionState);\n    }, \"Table1\");\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Table1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Layered PropertyPane - Property Tabs and Sections should retain state while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":150,"column":135,"index":6611},"line":150,"code":"  it(\"11. Layered PropertyPane - Property Tabs and Sections should retain state while switching between widgets, pages and Editor Panes\", () => {\n    propertySectionState = {\n      textformatting: true,\n      color: false\n    };\n    verifyPropertyPaneContext(() => {\n      cy.editColumn(\"step\");\n      cy.get(`.ads-v2-tabs__list-tab:contains(\"Style\")`).eq(0).click();\n      setPropertyPaneSectionState(propertySectionState);\n    }, () => {\n      verifyPropertyPaneSectionState(propertySectionState);\n    }, \"Table1\");\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Table1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Multi Layered PropertyPane - Code Editor should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":165,"column":124,"index":7225},"line":165,"code":"  it(\"12. Multi Layered PropertyPane - Code Editor should have focus while switching between widgets, pages and Editor Panes\", function () {\n    let propertyControlSelector = \".t--property-control-text\";\n    verifyPropertyPaneContext(() => {\n      cy.editColumn(\"status\");\n      cy.editColumn(\"menuIteme63irwbvnd\", false);\n      cy.focusCodeInput(propertyControlSelector);\n    }, () => {\n      cy.assertSoftFocusOnCodeInput(propertyControlSelector);\n    }, \"Table1\");\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"status\");\n    cy.wait(500);\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Table1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Multi Layered PropertyPane - Toggle Property controls should have focus while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":180,"column":137,"index":7932},"line":180,"code":"  it(\"13. Multi Layered PropertyPane - Toggle Property controls should have focus while switching between widgets, pages and Editor Panes\", () => {\n    propertyControlSelector = `.t--property-control-visible input[type=\"checkbox\"]`;\n    verifyPropertyPaneContext(() => {\n      cy.editColumn(\"status\");\n      cy.editColumn(\"menuIteme63irwbvnd\", false);\n      cy.get(propertyControlSelector).click({\n        force: true\n      });\n    }, () => {\n      cy.get(propertyControlSelector).should(\"be.focused\");\n    }, \"Table1\");\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"status\");\n    cy.wait(500);\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Table1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. Multi Layered PropertyPane - Property Sections should retain state while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":197,"column":132,"index":8674},"line":197,"code":"  it(\"14. Multi Layered PropertyPane - Property Sections should retain state while switching between widgets, pages and Editor Panes\", () => {\n    let propertySectionState = {\n      basic: false,\n      general: true\n    };\n    verifyPropertyPaneContext(() => {\n      cy.editColumn(\"status\");\n      cy.editColumn(\"menuIteme63irwbvnd\", false);\n      setPropertyPaneSectionState(propertySectionState);\n    }, () => {\n      cy.wait(500);\n      verifyPropertyPaneSectionState(propertySectionState);\n    }, \"Table1\");\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"status\");\n    cy.wait(500);\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Table1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. Multi Layered PropertyPane - Property Tabs and Sections should retain state while switching between widgets, pages and Editor Panes","suites":["Canvas context Property Pane"],"updatePoint":{"line":216,"column":141,"index":9421},"line":216,"code":"  it(\"15. Multi Layered PropertyPane - Property Tabs and Sections should retain state while switching between widgets, pages and Editor Panes\", () => {\n    propertySectionState = {\n      icon: true,\n      color: false\n    };\n    verifyPropertyPaneContext(() => {\n      cy.editColumn(\"status\");\n      cy.editColumn(\"menuIteme63irwbvnd\", false);\n      cy.get(`.ads-v2-tabs__list-tab:contains(\"Style\")`).eq(0).click();\n      setPropertyPaneSectionState(propertySectionState);\n    }, () => {\n      verifyPropertyPaneSectionState(propertySectionState);\n    }, \"Table1\");\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"status\");\n    cy.wait(500);\n    cy.get(propPaneBack).click();\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Table1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Property_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Widget should be selected while switching back and forth betw_.entityExplorer.n pages","suites":["Canvas context widget selection"],"updatePoint":{"line":27,"column":94,"index":869},"line":27,"code":"  it(\"1. Widget should be selected while switching back and forth betw_.entityExplorer.n pages\", function () {\n    //select widget in page1\n    _.entityExplorer.SelectEntityByName(\"Camera1\", \"Widgets\");\n\n    //verify the Camera1 is selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Camera1\");\n\n    //switch to page2\n    _.entityExplorer.SelectEntityByName(page2, \"Pages\");\n\n    //select widget in page2\n    _.entityExplorer.SelectEntityByName(\"Text1\", \"Widgets\");\n\n    //verify the widget is selected in page2\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //switch to page1\n    _.entityExplorer.SelectEntityByName(page1, \"Pages\");\n    cy.wait(500);\n\n    //verify the Camera1 is selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Camera1\");\n\n    //Camera1 should be visible in ViewPort\n    cy.isInViewport(`//*[@id=\"${dsl.dsl.children[0].widgetId}\"]`);\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Widget should be selected while switching back to page from API pane","suites":["Canvas context widget selection"],"updatePoint":{"line":55,"column":77,"index":1931},"line":55,"code":"  it(\"2. Widget should be selected while switching back to page from API pane\", function () {\n    //select widget in page1\n    _.entityExplorer.SelectEntityByName(\"Camera1\", \"Widgets\");\n\n    //verify the Camera1 is selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Camera1\");\n\n    //navigate to API1\n    _.entityExplorer.SelectEntityByName(api1, \"Queries/JS\");\n\n    //navigate back to page1\n    cy.get(\".t--close-editor\").click();\n    cy.wait(500);\n\n    //verify the Camera1 is selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Camera1\");\n\n    //Camera1 should be visible in ViewPort\n    //cy.isInViewport(`//*[@id=\"${dsl.dsl.children[0].widgetId}\"]`);\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Multiple widgets should be selected while switching back and forth betw_.entityExplorer.n pages","suites":["Canvas context widget selection"],"updatePoint":{"line":78,"column":104,"index":2810},"line":78,"code":"  it(\"3. Multiple widgets should be selected while switching back and forth betw_.entityExplorer.n pages\", function () {\n    //select widgets in page1\n    _.entityExplorer.SelectEntityByName(\"Camera1\", \"Widgets\", true);\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\", true);\n\n    //verify the 2 widgets are selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n\n    //switch to page2\n    _.entityExplorer.SelectEntityByName(page2, \"Pages\");\n\n    //select widget in page2\n    _.entityExplorer.SelectEntityByName(\"Text1\", \"Widgets\");\n\n    //verify the widget is selected in page2\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //switch to page1\n    _.entityExplorer.SelectEntityByName(page1, \"Pages\");\n\n    //verify the 2 widgets are selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Multiple widgets should be selected while switching back to page from API pane","suites":["Canvas context widget selection"],"updatePoint":{"line":103,"column":87,"index":3826},"line":103,"code":"  it(\"4. Multiple widgets should be selected while switching back to page from API pane\", function () {\n    //select widgets in page1\n    _.entityExplorer.SelectEntityByName(\"Camera1\", \"Widgets\", true);\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\", true);\n\n    //verify the 2 widgets are selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n\n    //navigate to API1\n    _.entityExplorer.SelectEntityByName(api1, \"Queries/JS\");\n\n    //navigate back to page1\n    cy.get(\".t--close-editor\").click();\n    cy.wait(500);\n\n    //verify the 2 widgets are selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Modal widget should be selected and open while switching back and forth betw_.entityExplorer.n pages","suites":["Canvas context widget selection"],"updatePoint":{"line":123,"column":109,"index":4669},"line":123,"code":"  it(\"5. Modal widget should be selected and open while switching back and forth betw_.entityExplorer.n pages\", function () {\n    //select widget in page1\n    _.entityExplorer.SelectEntityByName(\"Modal1\", \"Widgets\");\n\n    //verify the Modal1 is selected and open in page1\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Modal1\");\n\n    //switch to page2\n    _.entityExplorer.SelectEntityByName(page2, \"Pages\");\n\n    //select widget in page2\n    _.entityExplorer.SelectEntityByName(\"Text1\", \"Widgets\");\n\n    //verify the widget is selected in page2\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //switch to page1\n    _.entityExplorer.SelectEntityByName(page1, \"Pages\");\n\n    //verify the Modal1 is selected and open in page1\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Modal1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Modal widget should be selected and open while switching back to page from API pane","suites":["Canvas context widget selection"],"updatePoint":{"line":147,"column":92,"index":5601},"line":147,"code":"  it(\"6. Modal widget should be selected and open while switching back to page from API pane\", function () {\n    //select widget in page1\n    _.entityExplorer.SelectEntityByName(\"Modal1\", \"Widgets\");\n\n    //verify the Modal1 is selected and open in page1\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Modal1\");\n\n    //navigate to API1\n    _.entityExplorer.SelectEntityByName(api1, \"Queries/JS\");\n    cy.wait(500);\n\n    //navigate back to page1\n    cy.get(\".t--close-editor\").click();\n    cy.wait(500);\n\n    //verify the Modal1 is selected and open in page1\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Modal1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Widget inside modal should be selected and modal should be open while switching back and forth betw_.entityExplorer.n pages","suites":["Canvas context widget selection"],"updatePoint":{"line":167,"column":132,"index":6396},"line":167,"code":"  it(\"7. Widget inside modal should be selected and modal should be open while switching back and forth betw_.entityExplorer.n pages\", function () {\n    //select widget in page1\n    _.entityExplorer.SelectEntityInModal(\"Modal1\", \"Widgets\");\n\n    //verify the Modal1 is open and Text1 is selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Text1\");\n\n    //switch to page2\n    _.entityExplorer.SelectEntityByName(page2, \"Pages\");\n\n    //select widget in page2\n    _.entityExplorer.SelectEntityByName(\"Text1\", \"Widgets\");\n\n    //verify the widget is selected in page2\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //switch to page1\n    _.entityExplorer.SelectEntityByName(page1, \"Pages\");\n\n    //verify the Modal1 is open and Text1 is selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Text1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Widget inside modal should be selected and modal should be open while switching back to page from API pane","suites":["Canvas context widget selection"],"updatePoint":{"line":193,"column":115,"index":7510},"line":193,"code":"  it(\"8. Widget inside modal should be selected and modal should be open while switching back to page from API pane\", function () {\n    //select widget in page1\n    _.entityExplorer.SelectEntityInModal(\"Modal1\", \"Widgets\");\n\n    //verify the Modal1 is open and Text1 is selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Text1\");\n\n    //navigate to API1\n    _.entityExplorer.SelectEntityByName(api1, \"Queries/JS\");\n    cy.wait(500);\n\n    //navigate back to page1\n    cy.get(\".t--close-editor\").click();\n    cy.wait(500);\n\n    //verify the Modal1 is open and Text1 is selected in page1\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Text1\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Widget inside non default tab in tab widget should be selected and the given tab should be open while switching back and forth betw_.entityExplorer.n pages","suites":["Canvas context widget selection"],"updatePoint":{"line":215,"column":164,"index":8496},"line":215,"code":"  it(\"9. Widget inside non default tab in tab widget should be selected and the given tab should be open while switching back and forth betw_.entityExplorer.n pages\", function () {\n    //switch to tab 2 and select widget a button inside tab 2 in page1\n    cy.get(\".t--tabid-tab2\").click({\n      force: true\n    });\n    _.entityExplorer.SelectEntityByName(\"Tabs1\", \"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs1\", true);\n    _.entityExplorer.ExpandCollapseEntity(\"Tab 2\", true);\n    _.entityExplorer.SelectEntityByName(\"Button4\", \"Widgets\");\n\n    //verify the tab 2 is open and Button 4 is selected in page1\n    cy.get(\".is-selected\").should(\"contain\", \"Tab 2\");\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Button4\");\n\n    //switch to page2\n    _.entityExplorer.SelectEntityByName(page2, \"Pages\");\n\n    //select widget in page2\n    _.entityExplorer.SelectEntityByName(\"Text1\", \"Widgets\");\n\n    //verify the widget is selected in page2\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //switch to page1\n    _.entityExplorer.SelectEntityByName(page1, \"Pages\");\n\n    //verify the tab 2 is open and Button 4 is selected in page1\n    cy.get(\".is-selected\").should(\"contain\", \"Tab 2\");\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Button4\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Widget inside non default tab in tab widget should be selected and the given tab should be open while switching back to page from API pane","suites":["Canvas context widget selection"],"updatePoint":{"line":245,"column":148,"index":9787},"line":245,"code":"  it(\"10. Widget inside non default tab in tab widget should be selected and the given tab should be open while switching back to page from API pane\", function () {\n    //switch to tab 2 and select widget a button inside tab 2 in page1\n    cy.get(\".t--tabid-tab2\").click({\n      force: true\n    });\n    _.entityExplorer.SelectEntityByName(\"Tabs1\", \"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Tabs1\", true);\n    _.entityExplorer.ExpandCollapseEntity(\"Tab 2\", true);\n    _.entityExplorer.SelectEntityByName(\"Button4\", \"Widgets\");\n\n    //verify the tab 2 is open and Button 4 is selected in page1\n    cy.get(\".is-selected\").should(\"contain\", \"Tab 2\");\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Button4\");\n\n    //navigate to API1\n    _.entityExplorer.SelectEntityByName(api1, \"Queries/JS\");\n    cy.wait(500);\n\n    //navigate back to page1\n    cy.get(\".t--close-editor\").click();\n    cy.wait(500);\n\n    //verify the tab 2 is open and Button 4 is selected in page1\n    cy.get(\".is-selected\").should(\"contain\", \"Tab 2\");\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Button4\");\n  });","file":"e2e/Regression/ClientSide/IDE/Canvas_Context_Selected_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Import application & Assert few things","suites":["1. CommandClickNavigation"],"updatePoint":{"line":20,"column":47,"index":790},"line":20,"code":"  it(\"1. Import application & Assert few things\", () => {\n    _.homePage.NavigateToHome();\n    cy.reload();\n    _.homePage.ImportApp(\"ContextSwitching.json\");\n    cy.wait(\"@importNewApplication\").then(interception => {\n      _.agHelper.Sleep();\n      const {\n        isPartialImport\n      } = interception.response.body.data;\n      if (isPartialImport) {\n        // should reconnect modal\n        cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n          force: true\n        });\n        _.agHelper.Sleep(2000);\n      } else {\n        _.homePage.AssertImportToast();\n      }\n    });\n\n    //Assert link and and style\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Text1\", \"Container1\");\n    cy.updateCodeInput(\".t--property-control-text\", \"{{ Graphql_Query.data }}\");\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"Graphql_Query\"]`).should(\"have.length\", 1).should(\"have.text\", \"Graphql_Query\").realHover().should(\"have.css\", \"cursor\", \"text\");\n\n    // TODO how to hover with cmd or ctrl to assert pointer?\n\n    // Assert navigation only when cmd or ctrl is pressed\n\n    _.agHelper.Sleep();\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"Graphql_Query\"]`).click({\n      force: true\n    });\n    cy.url().should(\"not.contain\", \"/api/\");\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"Graphql_Query\"]`).click({\n      ctrlKey: true,\n      force: true\n    });\n    cy.url().should(\"contain\", \"/api/\");\n\n    //Assert working on url field\n    cy.updateCodeInput(\".t--dataSourceField\", \"https://www.test.com/{{ SQL_Query.data }}\");\n    _.agHelper.Sleep();\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"SQL_Query\"]`).should(\"have.length\", 1).click({\n      cmdKey: true,\n      force: true\n    });\n    cy.url().should(\"contain\", \"/queries/\");\n  });","file":"e2e/Regression/ClientSide/IDE/Command_Click_Navigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Will open & close modals ","suites":["1. CommandClickNavigation"],"updatePoint":{"line":71,"column":34,"index":2578},"line":71,"code":"  it(\"2. Will open & close modals \", () => {\n    cy.updateCodeInput(\".t--actionConfiguration\\\\.body\", \"SELECT * from {{ Button3.text }}\");\n    _.agHelper.Sleep();\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"Button3\"]`).should(\"have.length\", 1).click({\n      cmdKey: true\n    });\n    cy.url().should(\"not.contain\", \"/queries/\");\n\n    //CLose modal\n    cy.updateCodeInput(`${_.locators._propertyControl}tooltip`, \"{{ Image1.image }}\");\n    _.agHelper.Sleep();\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"Image1\"]`).should(\"have.length\", 1).click({\n      cmdKey: true\n    });\n  });","file":"e2e/Regression/ClientSide/IDE/Command_Click_Navigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Will navigate to specific JS Functions","suites":["1. CommandClickNavigation"],"updatePoint":{"line":86,"column":47,"index":3158},"line":86,"code":"  it(\"3. Will navigate to specific JS Functions\", () => {\n    // It was found that when having git connected,\n    // cmd clicking to JS function reloaded the app. Will assert that does not happen\n    cy.generateUUID().then(uid => {\n      const repoName = uid;\n      _.gitSync.CreateNConnectToGit(repoName);\n      _.gitSync.CreateGitBranch(repoName);\n    });\n    cy.get(\"@gitRepoName\").then(repName => {\n      repoName = repName;\n    });\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Text1\", \"Container1\");\n    cy.updateCodeInput(\".t--property-control-text\", \"{{ JSObject1.myFun1() }}\");\n    _.agHelper.Sleep();\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"JSObject1.myFun1\"]`).click({\n      cmdKey: true,\n      force: true\n    });\n    cy.assertCursorOnCodeInput(\".js-editor\", {\n      ch: 1,\n      line: 3\n    });\n    _.agHelper.Sleep();\n\n    // Assert context switching works when going back to canvas\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Text1\");\n\n    // Go back to JS editor\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"JSObject1.myFun1\"]`).click({\n      ctrlKey: true\n    });\n  });","file":"e2e/Regression/ClientSide/IDE/Command_Click_Navigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Will navigate within Js Object properly","suites":["1. CommandClickNavigation"],"updatePoint":{"line":121,"column":48,"index":4429},"line":121,"code":"  it(\"4. Will navigate within Js Object properly\", () => {\n    cy.updateCodeInput(\".js-editor\", JSInputTestCode);\n    _.agHelper.Sleep(2000);\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"JSObject1.myVar1\"]`).click({\n      ctrlKey: true\n    });\n    cy.getCodeInput(\".js-editor\").then(input => {\n      const codeMirrorInput = input[0].CodeMirror;\n      codeMirrorInput.focus();\n    });\n    cy.assertCursorOnCodeInput(\".js-editor\", {\n      ch: 2,\n      line: 1\n    });\n    _.agHelper.Sleep();\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"JSObject1.myFun1\"]`).click({\n      ctrlKey: true\n    });\n    cy.getCodeInput(\".js-editor\").then(input => {\n      const codeMirrorInput = input[0].CodeMirror;\n      codeMirrorInput.focus();\n    });\n    cy.assertCursorOnCodeInput(\".js-editor\", {\n      ch: 2,\n      line: 2\n    });\n    _.agHelper.Sleep();\n    cy.get(`[${NAVIGATION_ATTRIBUTE}=\"JSObject2.myFun1\"]`).click({\n      ctrlKey: true\n    });\n    cy.getCodeInput(\".js-editor\").then(input => {\n      const codeMirrorInput = input[0].CodeMirror;\n      expect(codeMirrorInput.getValue()).to.equal(JSInput2TestCode);\n    });\n  });","file":"e2e/Regression/ClientSide/IDE/Command_Click_Navigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Will work with string arguments in framework functions","suites":["1. CommandClickNavigation"],"line":156,"code":"  it.skip(\"5. Will work with string arguments in framework functions\", () => {","file":"e2e/Regression/ClientSide/IDE/Command_Click_Navigation_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Focus on different entities","suites":["MaintainContext&Focus"],"updatePoint":{"line":29,"column":36,"index":1061},"line":29,"code":"  it(\"1. Focus on different entities\", () => {\n    cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container1\", \"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    cy.focusCodeInput(\".t--property-control-text\", {\n      ch: 2,\n      line: 0\n    });\n    _.entityExplorer.SelectEntityByName(\"Graphql_Query\");\n    cy.focusCodeInput(\".t--graphql-query-editor\", {\n      ch: 4,\n      line: 1\n    });\n    _.entityExplorer.SelectEntityByName(\"Rest_Api_1\");\n    cy.wait(1000);\n    cy.xpath(\"//span[contains(text(), 'Params')]\").click();\n    cy.focusCodeInput(apiwidget.queryKey);\n    cy.wait(\"@saveAction\");\n    _.entityExplorer.SelectEntityByName(\"Rest_Api_2\");\n    cy.wait(1000);\n    cy.xpath(\"//span[contains(text(), 'Headers')]\").click();\n    cy.updateCodeInput(apiwidget.headerValue, \"test\");\n    cy.wait(\"@saveAction\");\n    _.entityExplorer.SelectEntityByName(\"SQL_Query\");\n    cy.wait(1000);\n    cy.focusCodeInput(\".t--actionConfiguration\\\\.body\", {\n      ch: 5,\n      line: 0\n    });\n    cy.wait(\"@saveAction\");\n    _.entityExplorer.SelectEntityByName(\"S3_Query\");\n    cy.wait(1000);\n    cy.focusCodeInput(\".t--actionConfiguration\\\\.formData\\\\.bucket\\\\.data\", {\n      ch: 2,\n      line: 0\n    });\n    cy.wait(1000);\n    cy.wait(\"@saveAction\");\n    _.entityExplorer.SelectEntityByName(\"JSObject1\");\n    cy.wait(1000);\n    cy.focusCodeInput(\".js-editor\", {\n      ch: 4,\n      line: 4\n    });\n    cy.wait(\"@saveAction\");\n    _.entityExplorer.SelectEntityByName(\"JSObject2\");\n    cy.wait(1000);\n    cy.focusCodeInput(\".js-editor\", {\n      ch: 2,\n      line: 2\n    });\n    _.entityExplorer.SelectEntityByName(\"Mongo_Query\");\n    cy.wait(1000);\n    cy.updateCodeInput(\".t--actionConfiguration\\\\.formData\\\\.collection\\\\.data\", \"TestCollection\");\n    cy.wait(\"@saveAction\");\n  });","file":"e2e/Regression/ClientSide/IDE/MaintainContext&Focus_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Maintains focus on property/Api/Query/Js Pane","suites":["MaintainContext&Focus"],"updatePoint":{"line":86,"column":54,"index":2956},"line":86,"code":"  it(\"2. Maintains focus on property/Api/Query/Js Pane\", () => {\n    //Maintains focus on the property pane\n    cy.get(`.t--entity-name:contains(\"Page1\")`).click();\n    cy.get(\".t--widget-name\").should(\"have.text\", \"Text1\");\n    cy.assertSoftFocusOnCodeInput(\".t--property-control-text\", {\n      ch: 2,\n      line: 0\n    });\n\n    //Maintains focus on the API pane\n    _.entityExplorer.SelectEntityByName(\"Graphql_Query\");\n    cy.xpath(\"//span[contains(text(), 'Body')]/parent::button\").should(\"have.attr\", \"aria-selected\", \"true\");\n    cy.assertCursorOnCodeInput(\".t--graphql-query-editor\", {\n      ch: 4,\n      line: 1\n    });\n    _.entityExplorer.SelectEntityByName(\"Rest_Api_1\");\n    // cy.assertCursorOnCodeInput(apiwidget.headerValue);\n\n    _.entityExplorer.SelectEntityByName(\"Rest_Api_2\");\n    cy.xpath(\"//span[contains(text(), 'Headers')]/parent::button\").should(\"have.attr\", \"aria-selected\", \"true\");\n    cy.assertCursorOnCodeInput(apiwidget.headerValue);\n\n    //Maintains focus on Query panes\n    _.entityExplorer.SelectEntityByName(\"SQL_Query\");\n    cy.assertCursorOnCodeInput(\".t--actionConfiguration\\\\.body\", {\n      ch: 5,\n      line: 0\n    });\n    _.entityExplorer.SelectEntityByName(\"S3_Query\");\n    cy.assertCursorOnCodeInput(\".t--actionConfiguration\\\\.formData\\\\.bucket\\\\.data\", {\n      ch: 2,\n      line: 0\n    });\n    _.entityExplorer.SelectEntityByName(\"Mongo_Query\");\n    cy.assertCursorOnCodeInput(\".t--actionConfiguration\\\\.formData\\\\.collection\\\\.data\");\n\n    //Maintains focus on JS Objects\n    _.entityExplorer.SelectEntityByName(\"JSObject1\");\n    cy.assertCursorOnCodeInput(\".js-editor\", {\n      ch: 2,\n      line: 4\n    });\n    _.entityExplorer.SelectEntityByName(\"JSObject2\");\n    cy.assertCursorOnCodeInput(\".js-editor\", {\n      ch: 2,\n      line: 2\n    });\n  });","file":"e2e/Regression/ClientSide/IDE/MaintainContext&Focus_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check if selected tab on right tab persists","suites":["MaintainContext&Focus"],"updatePoint":{"line":135,"column":52,"index":4749},"line":135,"code":"  it(\"3. Check if selected tab on right tab persists\", () => {\n    _.entityExplorer.SelectEntityByName(\"Rest_Api_1\", \"Queries/JS\");\n    _.apiPage.SelectRightPaneTab(\"Connections\");\n    _.entityExplorer.SelectEntityByName(\"SQL_Query\");\n    _.entityExplorer.SelectEntityByName(\"Rest_Api_1\");\n    _.apiPage.AssertRightPaneSelectedTab(\"Connections\");\n\n    //Check if the URL is persisted while switching pages\n    cy.Createpage(\"Page2\");\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    _.entityExplorer.SelectEntityByName(\"Rest_Api_1\", \"Queries/JS\");\n    _.entityExplorer.SelectEntityByName(\"Page2\", \"Pages\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 200\n    });\n    _.entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    cy.get(\".t--nameOfApi .bp3-editable-text-content\").should(\"contain\", \"Rest_Api_1\");\n  });","file":"e2e/Regression/ClientSide/IDE/MaintainContext&Focus_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Datasource edit mode has to be maintained","suites":["MaintainContext&Focus"],"updatePoint":{"line":154,"column":50,"index":5599},"line":154,"code":"  it(\"4. Datasource edit mode has to be maintained\", () => {\n    _.entityExplorer.SelectEntityByName(\"Appsmith\", \"Datasources\");\n    _.dataSources.EditDatasource();\n    _.dataSources.ExpandSection(0);\n    _.agHelper.GoBack();\n    _.entityExplorer.SelectEntityByName(\"Github\", \"Datasources\");\n    _.dataSources.AssertDSEditViewMode(\"View\");\n    _.entityExplorer.SelectEntityByName(\"Appsmith\", \"Datasources\");\n    _.dataSources.AssertDSEditViewMode(\"Edit\");\n    _.dataSources.AssertSectionCollapseState(0, false);\n  });","file":"e2e/Regression/ClientSide/IDE/MaintainContext&Focus_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Maintain focus of form control inputs","suites":["MaintainContext&Focus"],"updatePoint":{"line":165,"column":46,"index":6113},"line":165,"code":"  it(\"5. Maintain focus of form control inputs\", () => {\n    _.entityExplorer.SelectEntityByName(\"SQL_Query\");\n    _.dataSources.ToggleUsePreparedStatement(false);\n    _.entityExplorer.SelectEntityByName(\"S3_Query\");\n    cy.xpath(queryLocators.querySettingsTab).click();\n    cy.setQueryTimeout(10000);\n    _.entityExplorer.SelectEntityByName(\"SQL_Query\");\n    cy.get(\".bp3-editable-text-content\").should(\"contain.text\", \"SQL_Query\");\n    cy.get(\".t--form-control-SWITCH input\").should(\"be.focused\");\n    _.entityExplorer.SelectEntityByName(\"S3_Query\");\n    _.agHelper.Sleep();\n    cy.xpath(queryLocators.querySettingsTab).click();\n    cy.xpath(queryLocators.queryTimeout).should(\"be.focused\");\n  });","file":"e2e/Regression/ClientSide/IDE/MaintainContext&Focus_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Bug 21999 Maintain focus of code editor when Escape is pressed with autcomplete open + Bug 22960","suites":["MaintainContext&Focus"],"updatePoint":{"line":179,"column":105,"index":6872},"line":179,"code":"  it(\"6. Bug 21999 Maintain focus of code editor when Escape is pressed with autcomplete open + Bug 22960\", () => {\n    _.entityExplorer.SelectEntityByName(\"JSObject1\");\n    cy.assertCursorOnCodeInput(\".js-editor\", {\n      ch: 2,\n      line: 4\n    });\n    cy.get(_.locators._codeMirrorTextArea).type(\"showA\");\n    _.agHelper.GetNAssertElementText(_.locators._hints, \"showAlert()\");\n    _.agHelper.PressEscape();\n    cy.assertCursorOnCodeInput(\".js-editor\", {\n      ch: 7,\n      line: 4\n    });\n\n    //Bug 22960 Maintain focus of code editor when Escape is pressed\n    _.agHelper.PressEscape();\n    cy.assertCursorOnCodeInput(\".js-editor\", {\n      ch: 7,\n      line: 4\n    });\n  });","file":"e2e/Regression/ClientSide/IDE/MaintainContext&Focus_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validates Library install/uninstall","suites":["excludeForAirgap"],"updatePoint":{"line":5,"column":44,"index":288},"line":5,"code":"  it(\"1. Validates Library install/uninstall\", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.openInstaller();\n    _.installer.installLibrary(\"uuidjs\", \"UUID\");\n    _.installer.uninstallLibrary(\"uuidjs\");\n    _.installer.assertUnInstall(\"uuidjs\");\n  });","file":"e2e/Regression/ClientSide/JSLibrary/Library_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checks for naming collision","suites":["excludeForAirgap"],"updatePoint":{"line":12,"column":36,"index":567},"line":12,"code":"  it(\"2. Checks for naming collision\", () => {\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.TABLE, 200, 200);\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    _.entityExplorer.RenameEntityFromExplorer(\"Table1\", \"jsonwebtoken\");\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.openInstaller();\n    _.installer.installLibrary(\"jsonwebtoken\", \"jsonwebtoken\", false);\n    _.agHelper.AssertContains(\"Name collision detected: jsonwebtoken\");\n  });","file":"e2e/Regression/ClientSide/JSLibrary/Library_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checks jspdf library","suites":["excludeForAirgap"],"updatePoint":{"line":21,"column":29,"index":1051},"line":21,"code":"  it(\"3. Checks jspdf library\", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"Libraries\");\n    _.installer.openInstaller();\n    _.installer.installLibrary(\"jspdf\", \"jspdf\");\n    jsEditor.CreateJSObject(`export default {\n      myFun1: () => {\n        const doc = new jspdf.jsPDF();\n        doc.addPage();\n        doc.text(20, 100, 'Some Text.');\n        return doc.output('datauristring');\n      }\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: true\n    });\n    jsEditor.RunJSObj();\n    _.debuggerHelper.ClickResponseTab();\n    _.agHelper.AssertContains(\"data:application/pdf;filename=generated.pdf\");\n  });","file":"e2e/Regression/ClientSide/JSLibrary/Library_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Checks installation in exported/forked app","suites":["excludeForAirgap"],"updatePoint":{"line":43,"column":51,"index":1766},"line":43,"code":"  it(\"4. Checks installation in exported/forked app\", () => {\n    _.homePage.NavigateToHome();\n    _.homePage.ImportApp(\"library_export.json\");\n    _.agHelper.AssertContains(\"true\");\n\n    //Checks installation in forked app\n    _.homePage.NavigateToHome();\n    _.homePage.ForkApplication(\"Library_export\");\n    _.agHelper.AssertContains(\"true\");\n\n    //Deploy app and check installation\n    _.deployMode.DeployApp();\n    _.agHelper.AssertContains(\"true\");\n    _.deployMode.NavigateBacktoEditor();\n    _.agHelper.AssertContains(\"true\");\n  });","file":"e2e/Regression/ClientSide/JSLibrary/Library_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Tests library access and installation in public apps","suites":["excludeForAirgap"],"updatePoint":{"line":59,"column":61,"index":2318},"line":59,"code":"  it(\"5. Tests library access and installation in public apps\", () => {\n    let appURL = \"\";\n    cy.get(HomePage.shareApp).click();\n    //@ts-expect-error no type access\n    cy.enablePublicAccess(true);\n    _.deployMode.DeployApp();\n    cy.url().then(url => {\n      appURL = url;\n      _.homePage.LogOutviaAPI();\n      cy.visit(appURL);\n      _.agHelper.AssertContains(\"true\");\n    });\n  });","file":"e2e/Regression/ClientSide/JSLibrary/Library_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug 9585: should not show functions when whole code is deleted","suites":["List no functions on empty collection"],"updatePoint":{"line":3,"column":71,"index":198},"line":3,"code":"  it(\"1. Bug 9585: should not show functions when whole code is deleted\", () => {\n    jsEditor.CreateJSObject(`export default {\n  myFun1: () => {\n    function hi(a,b) {\n      console.log(a,b);\n    }\n    hi(1,2);\n  },\n  myFun2: async () => {\n    //use async-await or promises\n  }\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    jsEditor.AssertSelectedFunction(\"myFun1\");\n    jsEditor.ClearJSObj();\n    jsEditor.AssertSelectedFunction(\"No function available\");\n  });","file":"e2e/Regression/ClientSide/JSObject/Bug9585_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Number increment and decrement","suites":["JSObject testing"],"updatePoint":{"line":9,"column":39,"index":362},"line":9,"code":"  it(\"1. Number increment and decrement\", function () {\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.GetText(`${getWidgetSelector(_.draggableWidgets.TEXT)} span`).then($label => {\n      expect($label).to.equal(\"4\");\n    });\n    _.agHelper.Sleep(400);\n    _.agHelper.ClickButton(\"SUB\");\n    _.agHelper.ClickButton(\"SUB\");\n    _.agHelper.GetText(`${getWidgetSelector(_.draggableWidgets.TEXT)} span`).then($label => {\n      expect($label).to.equal(\"2\");\n    });\n  });","file":"e2e/Regression/ClientSide/JSObject/JSObjectMutation_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Array push and pop","suites":["JSObject testing"],"updatePoint":{"line":23,"column":27,"index":890},"line":23,"code":"  it(\"2. Array push and pop\", function () {\n    // open the select widget\n    _.agHelper.SelectDropDown(\"ARRAY\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.GetText(`${getWidgetSelector(_.draggableWidgets.TEXT)} span`).then($label => {\n      expect($label).contains(\"[  0,  1,  2]\");\n    });\n  });","file":"e2e/Regression/ClientSide/JSObject/JSObjectMutation_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Object property addition and deletion","suites":["JSObject testing"],"updatePoint":{"line":33,"column":46,"index":1284},"line":33,"code":"  it(\"3. Object property addition and deletion\", function () {\n    _.agHelper.SelectDropDown(\"OBJECT\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.GetText(`${getWidgetSelector(_.draggableWidgets.TEXT)} span`).then($label => {\n      expect($label).contains('{  \"a\": {    \"b\": 1  }}');\n    });\n  });","file":"e2e/Regression/ClientSide/JSObject/JSObjectMutation_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Map property addition and deletion","suites":["JSObject testing"],"updatePoint":{"line":40,"column":43,"index":1586},"line":40,"code":"  it(\"4. Map property addition and deletion\", function () {\n    _.agHelper.SelectDropDown(\"MAP\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.GetText(`${getWidgetSelector(_.draggableWidgets.TEXT)} span`).then($label => {\n      expect($label).contains('[  [    \"a\",    1  ]]');\n    });\n    _.agHelper.ClickButton(\"SUB\");\n    _.agHelper.ClickButton(\"SUB\");\n    _.agHelper.GetText(`${getWidgetSelector(_.draggableWidgets.TEXT)} span`).then($label => {\n      expect($label).contains(\"[]\");\n    });\n  });","file":"e2e/Regression/ClientSide/JSObject/JSObjectMutation_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Set property addition and deletion","suites":["JSObject testing"],"updatePoint":{"line":53,"column":43,"index":2127},"line":53,"code":"  it(\"5. Set property addition and deletion\", function () {\n    _.agHelper.SelectDropDown(\"SET\");\n    _.agHelper.ClickButton(\"ADD\");\n    _.agHelper.GetText(`${getWidgetSelector(_.draggableWidgets.TEXT)} span`).then($label => {\n      expect($label).contains(\"[  0]\");\n    });\n    _.agHelper.ClickButton(\"SUB\");\n    _.agHelper.GetText(`${getWidgetSelector(_.draggableWidgets.TEXT)} span`).then($label => {\n      expect($label).contains(\"[]\");\n    });\n  });","file":"e2e/Regression/ClientSide/JSObject/JSObjectMutation_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Shows correct lint error when wrong Api property is binded","suites":["Linting of entity properties"],"updatePoint":{"line":13,"column":67,"index":559},"line":13,"code":"  it(\"1. Shows correct lint error when wrong Api property is binded\", () => {\n    const invalidProperty = \"unknownProperty\";\n    // create Api1\n    apiPage.CreateAndFillApi(\"https://jsonplaceholder.typicode.com/\");\n    // Edit Button onclick property\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    propPane.EnterJSContext(\"onClick\", `{{function(){\n        console.log(Api1.${invalidProperty})\n    }()}}`);\n    cy.wait(200);\n    cy.focused().blur();\n    propPane.UpdatePropertyFieldValue(\"Label\", `{{Api1.${invalidProperty}}}`);\n    cy.get(locator._lintErrorElement).should(\"have.length\", 2).first().trigger(\"mouseover\");\n    agHelper.AssertContains(`\"${invalidProperty}\" doesn't exist in Api1`);\n  });","file":"e2e/Regression/ClientSide/Linting/EntityPropertiesLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Shows correct lint error when wrong JSObject property is binded","suites":["Linting of entity properties"],"updatePoint":{"line":28,"column":72,"index":1272},"line":28,"code":"  it(\"2. Shows correct lint error when wrong JSObject property is binded\", () => {\n    // create JSObject\n    jsEditor.CreateJSObject(`export default {\n      myFun1: () => {\n        console.log(\"JSOBJECT 1\")\n      }\n  }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    const invalidProperty = \"unknownFunction\";\n    // Edit Button onclick and text property\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    propPane.EnterJSContext(\"onClick\", `{{function(){\n        console.log(JSObject1.${invalidProperty})\n    }()}}`);\n    cy.wait(200);\n    propPane.UpdatePropertyFieldValue(\"Label\", `{{JSObject1.${invalidProperty}}}`);\n    // Assert lint errors\n    cy.get(locator._lintErrorElement).should(\"have.length\", 2).first().trigger(\"mouseover\");\n    agHelper.AssertContains(`\"${invalidProperty}\" doesn't exist in JSObject1`);\n\n    // Edit JS Object and add \"unknown\" function\n    ee.SelectEntityByName(\"JSObject1\", \"Queries/JS\");\n    jsEditor.EditJSObj(`export default {\n      ${invalidProperty}: () => {\n        console.log(\"JSOBJECT 1\")\n      }\n  }`);\n    // select button, and assert that no lint is present\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n    // delete JSObject\n    ee.ActionContextMenuByEntityName(\"JSObject1\", \"Delete\", \"Are you sure?\");\n    // select button, and assert that lint error is present\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    cy.get(locator._lintErrorElement).should(\"have.length\", 2).first().trigger(\"mouseover\");\n    agHelper.AssertContains(`'JSObject1' is not defined`);\n    // create js object\n    jsEditor.CreateJSObject(`export default {\n        ${invalidProperty}: () => {\n        console.log(\"JSOBJECT 1\")\n      }\n  }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n\n    // select button, and assert that no lint error is present\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n  });","file":"e2e/Regression/ClientSide/Linting/EntityPropertiesLint_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Doesn't show lint warnings in debugger but shows on Hover only","suites":["Lint error reporting"],"updatePoint":{"line":17,"column":71,"index":728},"line":17,"code":"  it(\"1. Doesn't show lint warnings in debugger but shows on Hover only\", () => {\n    const JS_OBJECT_WITH_LINT_WARNING = `export default {\n          myVar1: [],\n          myVar2: {},\n          myFun1: () => {\n              //write code here\n              const name = \"Automation\"\n          },\n          myFun2: async () => {\n              //use async-await or promises\n          }\n      }`;\n    jsEditor.CreateJSObject(JS_OBJECT_WITH_LINT_WARNING, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    MouseHoverNVerify(\"name\", \"'name' is defined but never used.\", false);\n    agHelper.PressEscape();\n    agHelper.GetNClick(debuggerHelper.locators._debuggerIcon);\n    agHelper.GetNClick(locator._errorTab);\n    debuggerHelper.DebuggerListDoesnotContain(\"'name' is defined but never used.\");\n    agHelper.RefreshPage();\n    agHelper.GetNClick(debuggerHelper.locators._debuggerIcon);\n    agHelper.GetNClick(locator._errorTab);\n    debuggerHelper.DebuggerListDoesnotContain(\"'name' is defined but never used.\");\n  });","file":"e2e/Regression/ClientSide/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. TC. 1939 - Shows correct error when await keyword is used in sync functions","suites":["Lint error reporting"],"updatePoint":{"line":45,"column":84,"index":1819},"line":45,"code":"  it(\"2. TC. 1939 - Shows correct error when await keyword is used in sync functions\", () => {\n    const JS_OBJECT_WITH_WRONG_AWAIT_KEYWORD = `export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: () => {\n            //write code here\n            await Promise.all([])\n        }\n    }`;\n\n    // Test in PropertyPane\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    propPane.EnterJSContext(\"onClick\", `{{\n        () => {\n        await showAlert('test')\n    }}}`);\n    MouseHoverNVerify(\"await\", \"'await' expressions are only allowed within async functions. Did you mean to mark this function as 'async'?\");\n    agHelper.AssertContains(\"'await' is not defined\", \"not.exist\");\n\n    // Test in JS Object\n    jsEditor.CreateJSObject(JS_OBJECT_WITH_WRONG_AWAIT_KEYWORD, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    MouseHoverNVerify(\"await\", \"'await' expressions are only allowed within async functions. Did you mean to mark this function as 'async'?\");\n    agHelper.AssertContains(\"'await' is not defined\", \"not.exist\");\n\n    // Test in Api\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{function(){\n        await Promise.all([])\n    }()}}`);\n    MouseHoverNVerify(\"await\", \"'await' expressions are only allowed within async functions. Did you mean to mark this function as 'async'?\");\n    agHelper.AssertContains(\"'await' is not defined\", \"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. TC. 1940 - Shows correct error when no comma is used to separate object properties + Bug 8659","suites":["Lint error reporting"],"updatePoint":{"line":83,"column":102,"index":3341},"line":83,"code":"  it(\"3. TC. 1940 - Shows correct error when no comma is used to separate object properties + Bug 8659\", () => {\n    const JS_OBJECT_WITHOUT_COMMA_SEPARATOR = `export default {\n        myVar1: [],\n        myVar2: {}\n        myFun1: () => {\n        }\n    }`;\n\n    // Test in PropertyPane\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    propPane.EnterJSContext(\"onClick\", `{{ {\n          myVar2: {}\n          myFun1: () => {\n          }\n        }}}`);\n    MouseHoverNVerify(\"myFun1\", \"Expected '}' to match '{' from line 1 and instead saw 'myFun1'\");\n\n    // Test in JS Object\n    jsEditor.CreateJSObject(JS_OBJECT_WITHOUT_COMMA_SEPARATOR, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    MouseHoverNVerify(\"myFun1\", \"Expected '}' to match '{' from line 1 and instead saw 'myFun1'\");\n\n    // Test in Api\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{ {\n        myVar2: {}\n        myFun1: () => {\n        }\n      }}}`);\n    MouseHoverNVerify(\"myFun1\", \"Expected '}' to match '{' from line 1 and instead saw 'myFun1'\");\n  });","file":"e2e/Regression/ClientSide/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. TC. 1940 - Shows correct error when semicolon used instead of comma to separate object properties","suites":["Lint error reporting"],"updatePoint":{"line":119,"column":106,"index":4495},"line":119,"code":"  it(\"4. TC. 1940 - Shows correct error when semicolon used instead of comma to separate object properties\", () => {\n    const JS_OBJECT_WITH_SEMICOLON_SEPARATOR = `export default {\n      func1: () => {\n        showAlert('this')\n      };\n      func2: () => {\n      }\n    }`;\n\n    // Test in PropertyPane\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    propPane.EnterJSContext(\"onClick\", `{{ {\n          myVar2: {};\n          myFun1: () => {\n          }\n        }}}`);\n    MouseHoverNVerify(\";\", \"Expected '}' to match '{' from line 1 and instead saw ';'\");\n\n    // Test in JS Object\n    jsEditor.CreateJSObject(JS_OBJECT_WITH_SEMICOLON_SEPARATOR, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    MouseHoverNVerify(\";\", \"Expected '}' to match '{' from line 1 and instead saw ';'\");\n\n    // Test in Api\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{ {\n        myVar2: {};\n        myFun1: () => {\n        }\n      }}}`);\n    MouseHoverNVerify(\";\", \"Expected '}' to match '{' from line 1 and instead saw ';'\");\n  });","file":"e2e/Regression/ClientSide/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. TC. 1938 - Shows correct lint error when currentItem/currentRow is used in field + Bug 15099","suites":["Lint error reporting"],"updatePoint":{"line":156,"column":101,"index":5630},"line":156,"code":"  it(\"5. TC. 1938 - Shows correct lint error when currentItem/currentRow is used in field + Bug 15099\", () => {\n    const JSOBJECT_WITH_INVALID_IDENTIFIER = `export default {\n        myFun1: () => {\n            //write code here\n       console.log(currentItem, currentRow)\n        },\n        myFun2: async () => {\n            //use async-await or promises\n        }\n    }\n    `;\n    // Test in PropertyPane\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.SelectEntityByName(\"Button1\", \"Widgets\");\n    propPane.UpdatePropertyFieldValue(\"Tooltip\", \"{{currentItem}}\");\n    propPane.UpdatePropertyFieldValue(\"Label\", \"{{currentRow}}\");\n    propPane.UpdatePropertyFieldValue(\"onClick\", \"\");\n    agHelper.AssertElementLength(locator._lintErrorElement, 2);\n\n    //Test in Table for no error when using {{currentRow}}\n    ee.SelectEntityByName(\"Table1\", \"Widgets\");\n    agHelper.GetNClick(table._columnSettings(\"step\"));\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n    propPane.UpdatePropertyFieldValue(\"Computed value\", \"{{currentRow}}\");\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n\n    // Test in JSObject for lint error\n    jsEditor.CreateJSObject(JSOBJECT_WITH_INVALID_IDENTIFIER, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    agHelper.AssertElementLength(locator._lintErrorElement, 2);\n\n    // test in Api\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{function(){\n        currentItem\n        currentRow\n    }()}}`);\n    agHelper.AssertElementLength(locator._lintErrorElement, 2);\n  });","file":"e2e/Regression/ClientSide/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Bug 15156 - Doesn't show error for 'unneccessary semi-colon'","suites":["Lint error reporting"],"updatePoint":{"line":199,"column":69,"index":7203},"line":199,"code":"  it(\"6. Bug 15156 - Doesn't show error for 'unneccessary semi-colon'\", () => {\n    const JSOBJECT_WITH_UNNECCESARY_SEMICOLON = `export default {\n        myFun1: () => {\n            //write code here\n            if (1) {\n                return true;\n            };\n        }\n    }\n    `;\n    // Test in PropertyPane\n    ee.SelectEntityByName(\"Button1\", \"Queries/JS\");\n    propPane.UpdatePropertyFieldValue(\"Tooltip\", \"\");\n    propPane.UpdatePropertyFieldValue(\"Label\", \"\");\n    propPane.UpdatePropertyFieldValue(\"onClick\", `{{\n        function example(a) {\n            if (1) {\n                return true;\n            };\n        };\n        }}`);\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n\n    // Test in JS Object\n    ee.SelectEntityByName(\"JSObject1\", \"Queries/JS\");\n    jsEditor.EditJSObj(JSOBJECT_WITH_UNNECCESARY_SEMICOLON);\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n\n    // Test in API\n    apiPage.CreateApi();\n    apiPage.EnterParams(\"test\", `{{function(){\n        if (1) {\n            return true;\n        };\n    }()}}`);\n    agHelper.AssertElementAbsence(locator._lintErrorElement);\n  });","file":"e2e/Regression/ClientSide/Linting/ErrorReporting_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. [] Verify if Auto dimension works for widgets in the MainCanvas","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":13,"column":85,"index":510},"line":13,"code":"    it(`1. [${viewport}] Verify if Auto dimension works for widgets in the MainCanvas`, () => {\n      if (viewport === \"MOBILE\") {\n        _.agHelper.SetCanvasViewportWidth(375);\n      }\n      _.autoLayout.DropButtonAndTestForAutoDimension(100, 30);\n      _.autoLayout.DropTextAndTestForAutoDimension(100, 60);\n    });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoDimension_1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. [] Verify if Auto dimension works for widgets in a Container","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":20,"column":82,"index":826},"line":20,"code":"    it(`2. [${viewport}] Verify if Auto dimension works for widgets in a Container`, () => {\n      if (viewport === \"MOBILE\") {\n        _.agHelper.SetCanvasViewportWidth(375);\n      }\n      _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.CONTAINER, 100, 30);\n      _.agHelper.GetWidgetByName(\"Container1\").invoke(\"attr\", \"id\").then(id => {\n        const dropTargetClass = `.drop-target-${id?.split(\"_\")[1]}`;\n        // dropButtonAndTest(100, 25, dropTargetClass);\n        _.autoLayout.DropButtonAndTestForAutoDimension(100, 30, dropTargetClass);\n        // y = main canvas padding (8) + button widget height (40)\n        _.autoLayout.DropTextAndTestForAutoDimension(100, 48, dropTargetClass);\n      });\n    });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoDimension_1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. [] Verify if Auto dimension works for widgets in a List","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":33,"column":77,"index":1543},"line":33,"code":"    it(`3. [${viewport}] Verify if Auto dimension works for widgets in a List`, () => {\n      if (viewport === \"MOBILE\") {\n        _.agHelper.SetCanvasViewportWidth(375);\n      }\n      _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.LIST_V2, 100, 30);\n\n      // Delete existing widgets within list\n      _.agHelper.SelectAllWidgets(_.locators._widgetByName(\"Container1\"));\n      _.agHelper.PressDelete();\n      _.agHelper.GetWidgetByName(\"Container1\").invoke(\"attr\", \"id\").then(id => {\n        const dropTargetClass = `.drop-target-${id?.split(\"_\")[1]}`;\n        _.autoLayout.DropButtonAndTestForAutoDimension(100, 25, dropTargetClass);\n        // y = main canvas padding (8) + button widget height (40)\n        _.autoLayout.DropTextAndTestForAutoDimension(100, 48, dropTargetClass);\n      });\n    });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoDimension_1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. [] Check if widget's auto height updation updates container's height","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":13,"column":90,"index":515},"line":13,"code":"    it(`1. [${viewport}] Check if widget's auto height updation updates container's height`, () => {\n      if (viewport === \"MOBILE\") {\n        _.agHelper.SetCanvasViewportWidth(375);\n      }\n      _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.CONTAINER, 100, 30);\n      _.agHelper.GetWidgetByName(\"Container1\").invoke(\"attr\", \"id\").then(id => {\n        const dropTargetClass = `.drop-target-${id?.split(\"_\")[1]}`;\n        _.entityExplorer.DragDropWidgetNVerify(\"textwidget\", 50, 20, dropTargetClass);\n\n        // Add multi-line text & verify if the container's height increases\n        _.agHelper.GetWidgetHeight(_.autoLayout._containerWidgetSelector).as(\"initialHeight\");\n        _.propPane.UpdatePropertyFieldValue(\"Text\", \"hello\\nWorld\\nThis\\nis\\na\\nMulti-line\\nText\");\n        _.agHelper.GetWidgetHeight(_.autoLayout._containerWidgetSelector).then(width => {\n          cy.get < number > \"@initialHeight\".then(initialHeight => {\n            expect(width).to.be.greaterThan(initialHeight);\n          });\n        });\n\n        // Remove some lines & verify if the container's height decreases\n        _.propPane.UpdatePropertyFieldValue(\"Text\", \"hello\");\n        _.agHelper.GetWidgetHeight(_.autoLayout._containerWidgetSelector).then(width => {\n          cy.get < number > \"@initialHeight\".then(initialHeight => {\n            expect(width).to.be.equal(initialHeight);\n          });\n        });\n      });\n    });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoDimension_2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check if widget's bounding box fits on widget shrink","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":41,"column":61,"index":1917},"line":41,"code":"  it(\"2. Check if widget's bounding box fits on widget shrink\", () => {\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.TEXT, 100, 30);\n    _.propPane.UpdatePropertyFieldValue(\"Text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\");\n    // Check if bounding box fits perfectly to the Text Widget\n    _.autoLayout.EnsureBoundingBoxFitsComponent(_.autoLayout._textWidgetSelector, _.autoLayout._textComponentSelector);\n\n    // Drop another widget next to text widget so that it shrinks\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.CONTAINER, 10, 30);\n\n    // Check if bounding box fits perfectly to the Text Widget\n    _.autoLayout.EnsureBoundingBoxFitsComponent(_.autoLayout._textWidgetSelector, _.autoLayout._textComponentSelector);\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoDimension_2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check if widgets bounding box fits on canvas resizing","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":53,"column":62,"index":3217},"line":53,"code":"  it(\"3. Check if widgets bounding box fits on canvas resizing\", () => {\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.TEXT, 100, 30);\n    _.propPane.UpdatePropertyFieldValue(\"Text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\");\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.BUTTON, 100, 200);\n\n    // reduce canvas size\n    _.agHelper.SetCanvasViewportWidth(500);\n\n    // Check if bounding box fits perfectly to the Text Widget\n    _.autoLayout.EnsureBoundingBoxFitsComponent(_.autoLayout._textWidgetSelector, _.autoLayout._textComponentSelector);\n\n    // Check if bounding box fits perfectly to the Button Widget\n    _.autoLayout.EnsureBoundingBoxFitsComponent(_.autoLayout._buttonWidgetSelector, _.autoLayout._buttonComponentSelector);\n\n    // increase canvas size\n    _.agHelper.SetCanvasViewportWidth(700);\n\n    // Check if bounding box fits perfectly to the Text Widget\n    _.autoLayout.EnsureBoundingBoxFitsComponent(_.autoLayout._textWidgetSelector, _.autoLayout._textComponentSelector);\n\n    // Check if bounding box fits perfectly to the Button Widget\n    _.autoLayout.EnsureBoundingBoxFitsComponent(_.autoLayout._buttonWidgetSelector, _.autoLayout._buttonComponentSelector);\n\n    // reduce canvas size less than mobile breakpoint\n    _.agHelper.SetCanvasViewportWidth(300);\n\n    // Check if bounding box fits perfectly to the Text Widget\n    _.autoLayout.EnsureBoundingBoxFitsComponent(_.autoLayout._textWidgetSelector, _.autoLayout._textComponentSelector);\n\n    // Check if bounding box fits perfectly to the Button Widget\n    _.autoLayout.EnsureBoundingBoxFitsComponent(_.autoLayout._buttonWidgetSelector, _.autoLayout._buttonComponentSelector);\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoDimension_2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. To capture the height and width of various autofill / Hug widgets in webview","suites":["Validating Mobile Views for Auto Fill Widgets"],"updatePoint":{"line":16,"column":85,"index":497},"line":16,"code":"  it(\"1. To capture the height and width of various autofill / Hug widgets in webview\", function () {\n    _.autoLayout.ConvertToAutoLayoutAndVerify(false);\n    cy.dragAndDropToCanvas(\"codescannerwidget\", {\n      x: 100,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 620,\n      y: 820\n    });\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 620,\n      y: 820\n    });\n    cy.dragAndDropToCanvas(\"tabswidget\", {\n      x: 770,\n      y: 770\n    });\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.wait(2000);\n    for (let i = 0; i < widgets.length; i++) {\n      cy.get(\".t--widget-\".concat(widgets[i])).invoke(\"css\", \"height\").then(newheight => {\n        height[widgets[i]] = newheight;\n        cy.log(height[widgets[i]]);\n      });\n      cy.get(\".t--widget-\".concat(widgets[i])).invoke(\"css\", \"width\").then(newwidth => {\n        width[widgets[i]] = newwidth;\n        cy.log(width[widgets[i]]);\n      });\n    }\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoFillWidgets_Basic_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":".  port execution For Auto Fill Widgets","suites":["Validating Mobile Views for Auto Fill Widgets"],"updatePoint":{"line":50,"column":67,"index":1507},"line":50,"code":"    it(`${index + 2}. ${phone} port execution For Auto Fill Widgets`, function () {\n      if (Cypress._.isArray(phone)) {\n        cy.viewport(phone[0], phone[1]);\n      } else {\n        cy.viewport(phone);\n      }\n      cy.wait(2000);\n      cy.get(\".t--widget-codescannerwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height[widgets[0]]).to.equal(newheight);\n      });\n      cy.get(\".t--widget-codescannerwidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(width[widgets[0]]).to.not.equal(newwidth);\n      });\n      cy.get(\".t--widget-listwidgetv2\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height[widgets[1]]).to.equal(newheight);\n      });\n      cy.get(\".t--widget-listwidgetv2\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(width[widgets[1]]).to.not.equal(newwidth);\n      });\n      cy.get(\".t--widget-tablewidgetv2\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height[widgets[2]]).to.equal(newheight);\n      });\n      cy.get(\".t--widget-tablewidgetv2\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(width[widgets[2]]).to.not.equal(newwidth);\n      });\n      cy.get(\".t--widget-tabswidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(width[widgets[3]]).to.not.equal(newwidth);\n      });\n    });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoFillWidgets_Basic_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. To capture the height and width of various autofill / Hug widgets in webview","suites":["Validating Mobile Views for Auto Fill Widgets"],"updatePoint":{"line":26,"column":85,"index":842},"line":26,"code":"  it(\"1. To capture the height and width of various autofill / Hug widgets in webview\", function () {\n    _.autoLayout.ConvertToAutoLayoutAndVerify(false);\n    cy.dragAndDropToCanvas(\"switchwidget\", {\n      x: 100,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"currencyinputwidget\", {\n      x: 110,\n      y: 210\n    });\n    cy.dragAndDropToCanvas(\"audiowidget\", {\n      x: 250,\n      y: 300\n    });\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 560,\n      y: 560\n    });\n    cy.dragAndDropToCanvas(\"checkboxwidget\", {\n      x: 770,\n      y: 770\n    });\n    cy.dragAndDropToCanvas(\"radiogroupwidget\", {\n      x: 770,\n      y: 770\n    });\n    cy.dragAndDropToCanvas(\"datepickerwidget2\", {\n      x: 770,\n      y: 970\n    });\n    cy.dragAndDropToCanvas(\"phoneinputwidget\", {\n      x: 660,\n      y: 810\n    });\n    cy.dragAndDropToCanvas(\"categorysliderwidget\", {\n      x: 620,\n      y: 810\n    });\n    cy.wait(5000); //for dsl to settle\n    cy.PublishtheApp();\n    cy.wait(2000);\n    for (let i = 0; i < widgets.length; i++) {\n      cy.get(\".t--widget-\".concat(widgets[i])).invoke(\"css\", \"height\").then(newheight => {\n        height[widgets[i]] = newheight;\n        cy.log(height[widgets[i]]);\n      });\n      cy.get(\".t--widget-\".concat(widgets[i])).invoke(\"css\", \"width\").then(newwidth => {\n        width[widgets[i]] = newwidth;\n        cy.log(width[widgets[i]]);\n      });\n    }\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoFillWidgets_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":".  port execution For Auto Fill Widgets","suites":["Validating Mobile Views for Auto Fill Widgets"],"updatePoint":{"line":80,"column":67,"index":2297},"line":80,"code":"    it(`${index + 2}. ${phone} port execution For Auto Fill Widgets`, function () {\n      if (Cypress._.isArray(phone)) {\n        cy.viewport(phone[0], phone[1]);\n      } else {\n        cy.viewport(phone);\n      }\n      cy.wait(2000);\n      cy.get(\".t--widget-switchwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height[widgets[0]]).to.equal(newheight);\n      });\n      cy.get(\".t--widget-switchwidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(width[widgets[0]]).to.not.equal(newwidth);\n      });\n      cy.get(\".t--widget-currencyinputwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height[widgets[1]]).to.equal(newheight);\n      });\n      cy.get(\".t--widget-currencyinputwidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(width[widgets[1]]).to.not.equal(newwidth);\n      });\n      cy.get(\".t--widget-audiowidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height[widgets[2]]).to.equal(newheight);\n      });\n      cy.get(\".t--widget-audiowidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(width[widgets[2]]).to.not.equal(newwidth);\n      });\n      cy.get(\".t--widget-selectwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(parseFloat(height[widgets[3]])).to.not.equal(parseFloat(newheight));\n      });\n      cy.get(\".t--widget-selectwidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(parseFloat(width[widgets[3]])).to.not.equal(parseFloat(newwidth));\n      });\n      cy.get(\".t--widget-checkboxwidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(parseFloat(width[widgets[4]])).to.not.equal(parseFloat(newwidth));\n      });\n      cy.get(\".t--widget-radiogroupwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(parseFloat(height[widgets[5]])).to.equal(parseFloat(newheight));\n      });\n      cy.get(\".t--widget-radiogroupwidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(parseFloat(width[widgets[5]])).to.not.equal(parseFloat(newwidth));\n      });\n      cy.get(\".t--widget-datepickerwidget2\").scrollIntoView().invoke(\"css\", \"width\").then(newwidth => {\n        expect(parseFloat(width[widgets[6]])).to.be.at.least(parseFloat(newwidth));\n      });\n      cy.get(\".t--widget-phoneinputwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(parseFloat(height[widgets[7]])).to.equal(parseFloat(newheight));\n      });\n      cy.get(\".t--widget-phoneinputwidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(parseFloat(width[widgets[7]])).to.not.equal(parseFloat(newwidth));\n      });\n      cy.get(\".t--widget-categorysliderwidget\").invoke(\"css\", \"height\").then(newheight => {\n        expect(parseFloat(height[widgets[8]])).to.equal(parseFloat(newheight));\n      });\n      cy.get(\".t--widget-categorysliderwidget\").invoke(\"css\", \"width\").then(newwidth => {\n        expect(width[widgets[8]]).to.not.equal(parseFloat(newwidth));\n      });\n    });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoFillWidgets_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should paste at the bottom of the canvas that contains the selected widget","suites":["Copy paste widget related tests for Auto layout"],"updatePoint":{"line":11,"column":83,"index":520},"line":11,"code":"  it(\"1. Should paste at the bottom of the canvas that contains the selected widget\", () => {\n    agHelper.GetNClick(locators._widgetInDeployed(draggableWidgets.BUTTON), 0);\n    agHelper.AssertElementLength(locators._selectedWidget, 1);\n\n    //copying first button in first layer, which is center aligned\n    agHelper.GetElement(\"body\").type(`{${modifierKey}}{c}`);\n    agHelper.GetElement(locators._toastMsg).contains(\"Copied\");\n\n    //paste\n    agHelper.GetElement(\"body\").type(`{${modifierKey}}{v}`);\n    cy.wait(1000);\n\n    //verify button widget pastes inside the container, in layer index 3 and is center aligned\n    autoLayout.VerifyIfChildWidgetPositionInFlexContainer(locators._widgetInDeployed(draggableWidgets.CONTAINER), locators._widgetInDeployed(draggableWidgets.BUTTON), 3, \"CENTER\");\n\n    //unselect all widgets\n    agHelper.GetNClick(locators._selectionCanvas(\"0\"), 0, true);\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoLayout_Widgets_Copy_Paste_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should paste at the bottom of the canvas of the selected Container","suites":["Copy paste widget related tests for Auto layout"],"updatePoint":{"line":29,"column":75,"index":1411},"line":29,"code":"  it(\"2. Should paste at the bottom of the canvas of the selected Container\", () => {\n    agHelper.GetNClick(locators._widgetInDeployed(draggableWidgets.BUTTON), 1);\n    agHelper.AssertElementLength(locators._selectedWidget, 1);\n\n    //copying second button in first layer, which is end aligned\n    agHelper.GetElement(\"body\").type(`{${modifierKey}}{c}`);\n    agHelper.GetElement(locators._toastMsg).contains(\"Copied\");\n    agHelper.GetNClick(locators._widgetInDeployed(draggableWidgets.CONTAINER), 0);\n\n    //paste\n    agHelper.GetElement(\"body\").type(`{${modifierKey}}{v}`);\n    agHelper.Sleep(1000);\n\n    //verify button widget pastes inside selected the container, in layer index 4 and is end aligned\n    autoLayout.VerifyIfChildWidgetPositionInFlexContainer(locators._widgetInDeployed(draggableWidgets.CONTAINER), locators._widgetInDeployed(draggableWidgets.BUTTON), 4, \"END\");\n\n    //unselect all widgets\n    agHelper.GetNClick(locators._selectionCanvas(\"0\"), 0, true);\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoLayout_Widgets_Copy_Paste_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should paste at the bottom of the main canvas when no widget is selected","suites":["Copy paste widget related tests for Auto layout"],"updatePoint":{"line":48,"column":81,"index":2399},"line":48,"code":"  it(\"3. Should paste at the bottom of the main canvas when no widget is selected\", () => {\n    agHelper.GetNClick(locators._widgetInDeployed(draggableWidgets.BUTTON), 0);\n    agHelper.AssertElementLength(locators._selectedWidget, 1);\n\n    //copying first button in first layer, which is center aligned\n    agHelper.GetElement(\"body\").type(`{${modifierKey}}{c}`);\n    agHelper.GetElement(locators._toastMsg).contains(\"Copied\");\n\n    //unselect all widgets\n    agHelper.GetNClick(locators._selectionCanvas(\"0\"), 0, true);\n    agHelper.AssertElementLength(locators._selectedWidget, 0);\n    //paste\n    agHelper.GetElement(\"body\").type(`{${modifierKey}}{v}`);\n    agHelper.Sleep();\n\n    //verify button widget pastes in main canvas, in layer index 1 and is center aligned\n    autoLayout.VerifyIfChildWidgetPositionInFlexContainer(locators._appsmithWidget(\"0\"), locators._widgetInDeployed(draggableWidgets.BUTTON), 1, \"CENTER\");\n\n    //unselect all widgets\n    agHelper.GetNClick(locators._selectionCanvas(\"0\"), 0, true);\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoLayout_Widgets_Copy_Paste_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Should paste widgets in copied orientation, when multiple widgets are copied","suites":["Copy paste widget related tests for Auto layout"],"updatePoint":{"line":69,"column":85,"index":3427},"line":69,"code":"  it(\"4. Should paste widgets in copied orientation, when multiple widgets are copied\", () => {\n    //Select and copy widgets in,\n    // button in layer index 0, end aligned\n    agHelper.GetNClick(locators._widgetInDeployed(draggableWidgets.BUTTON), 1, false, 500, true);\n    // button in layer index 1, start aligned\n    agHelper.GetNClick(locators._widgetInDeployed(draggableWidgets.BUTTON), 2, false, 500, true);\n    // icon button in layer index 1, end aligned\n    agHelper.GetNClick(locators._widgetInDeployed(draggableWidgets.ICONBUTTON), 0, false, 500, true);\n    // button in layer index 2, center aligned\n    agHelper.GetNClick(locators._widgetInDeployed(draggableWidgets.BUTTON), 3, false, 500, true);\n    agHelper.AssertElementLength(locators._selectedWidget, 4);\n    agHelper.GetElement(\"body\").type(`{${modifierKey}}{c}`);\n    agHelper.GetElement(locators._toastMsg).contains(\"Copied\");\n\n    //unselect all widgets\n    agHelper.GetNClick(locators._selectionCanvas(\"0\"), 0, true);\n    agHelper.AssertElementLength(locators._selectedWidget, 0);\n    //paste\n    agHelper.GetElement(\"body\").type(`{${modifierKey}}{v}`);\n    agHelper.Sleep();\n\n    //verify widgets paste in copied orientation,\n    // button in layer index 2, end aligned\n    autoLayout.VerifyIfChildWidgetPositionInFlexContainer(locators._appsmithWidget(\"0\"), locators._widgetInDeployed(draggableWidgets.BUTTON), 2, \"END\");\n    // button in layer index 3, start aligned\n    autoLayout.VerifyIfChildWidgetPositionInFlexContainer(locators._appsmithWidget(\"0\"), locators._widgetInDeployed(draggableWidgets.BUTTON), 3, \"START\");\n    // icon button in layer index 3, center aligned\n    autoLayout.VerifyIfChildWidgetPositionInFlexContainer(locators._appsmithWidget(\"0\"), locators._widgetInDeployed(draggableWidgets.ICONBUTTON), 3, \"CENTER\");\n    // button in layer index 4, center aligned\n    autoLayout.VerifyIfChildWidgetPositionInFlexContainer(locators._appsmithWidget(\"0\"), locators._widgetInDeployed(draggableWidgets.BUTTON), 4, \"CENTER\");\n\n    //unselect all widgets\n    agHelper.GetNClick(locators._selectionCanvas(\"0\"), 0, true);\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoLayout_Widgets_Copy_Paste_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Capture the height/width of autofill widgets in webview","suites":["Validating Mobile View related usecases for Autoscroll"],"updatePoint":{"line":5,"column":64,"index":233},"line":5,"code":"  it(\"1. Capture the height/width of autofill widgets in webview\", function () {\n    _.autoLayout.ConvertToAutoLayoutAndVerify(false);\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 100,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"containerwidget\", {\n      x: 620,\n      y: 820\n    });\n    for (let i = 0; i < 10; i++) {\n      cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n        x: 450,\n        y: 530\n      });\n    }\n    cy.get(\".t--widget-inputwidgetv2\").first().should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(newheight => {\n      theight = newheight;\n    });\n    cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"width\").then(newwidth => {\n      twidth = newwidth;\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoScroll_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":".  port execution for autoscroll","suites":["Validating Mobile View related usecases for Autoscroll"],"updatePoint":{"line":33,"column":60,"index":1085},"line":33,"code":"    it(`${index + 2}. ${phone} port execution for autoscroll`, function () {\n      if (Cypress._.isArray(phone)) {\n        cy.viewport(phone[0], phone[1]);\n      } else {\n        cy.viewport(phone);\n      }\n      cy.wait(2000);\n      for (let i = 0; i < 10; i++) {\n        cy.get(\".t--widget-inputwidgetv2\").eq(i).scrollIntoView().invoke(\"css\", \"height\").then(newheight => {\n          expect(theight).to.equal(newheight);\n        });\n        cy.get(\".t--widget-inputwidgetv2\").eq(i).scrollIntoView().invoke(\"css\", \"width\").then(newwidth => {\n          expect(twidth).to.not.equal(newwidth);\n        });\n      }\n    });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/AutoScroll_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. when snapshot is restored from a page created before Conversion, it should refresh in the same page","suites":["Handle Cases while conversion"],"updatePoint":{"line":5,"column":108,"index":415},"line":5,"code":"  it(\"1. when snapshot is restored from a page created before Conversion, it should refresh in the same page\", () => {\n    entityExplorer.DragDropWidgetNVerify(draggableWidgets.CONTAINER, 100, 200);\n    entityExplorer.AddNewPage(\"New blank page\");\n    autoLayout.ConvertToAutoLayoutAndVerify();\n    autoLayout.UseSnapshotFromBanner();\n    entityExplorer.VerifyIsCurrentPage(\"Page2\");\n    entityExplorer.SelectEntityByName(\"Page1\", \"Pages\");\n    cy.wait(1000);\n    entityExplorer.ActionContextMenuByEntityName(\"Page2\");\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/ConversionFlow_Corner_Cases_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. when snapshot is restored from a page created after Conversion, it should redirected to home page","suites":["Handle Cases while conversion"],"updatePoint":{"line":15,"column":106,"index":938},"line":15,"code":"  it(\"2. when snapshot is restored from a page created after Conversion, it should redirected to home page\", () => {\n    autoLayout.ConvertToAutoLayoutAndVerify();\n    entityExplorer.AddNewPage(\"New blank page\");\n    autoLayout.UseSnapshotFromBanner();\n    entityExplorer.VerifyIsCurrentPage(\"Page1\");\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/ConversionFlow_Corner_Cases_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. #21969 - when app has null values in some widget's property actions or bindings, it should still convert without errors","suites":["Handle Cases while conversion"],"updatePoint":{"line":21,"column":128,"index":1268},"line":21,"code":"  it(\"3. #21969 - when app has null values in some widget's property actions or bindings, it should still convert without errors\", () => {\n    homePage.NavigateToHome();\n    homePage.CreateNewApplication();\n    cy.fixture(\"templatePageWithNullbindings\").then(val => {\n      agHelper.AddDsl(val);\n    });\n    autoLayout.ConvertToAutoLayoutAndVerify();\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/ConversionFlow_Corner_Cases_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. when app has widgets with dynamic Bindings, which have default values that are to be defined during conversion, it should convert without errors","suites":["Handle Cases while conversion"],"updatePoint":{"line":29,"column":153,"index":1650},"line":29,"code":"  it(\"4. when app has widgets with dynamic Bindings, which have default values that are to be defined during conversion, it should convert without errors\", () => {\n    homePage.NavigateToHome();\n    homePage.CreateNewApplication();\n    cy.fixture(\"conversionDslWithDynamicBindings\").then(val => {\n      agHelper.AddDsl(val);\n    });\n    autoLayout.ConvertToAutoLayoutAndVerify();\n    autoLayout.UseSnapshotFromBanner();\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/ConversionFlow_Corner_Cases_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Handle Cases while conversion"],"updatePoint":{"line":38,"column":22,"index":1945},"line":38,"code":"  it(\"excludeForAirgap\", \"5. #23367 when app imports pages from a template, it should convert without any errors before refreshing the page after load\", () => {\n    entityExplorer.AddNewPage(\"Add page from template\");\n    agHelper.AssertElementVisible(template.templateDialogBox);\n    agHelper.GetNClick(\"//h1[text()='Marketing Dashboard']\");\n    cy.wait(10000); // for templates page to load fully\n    agHelper.GetNClick(template.selectCheckbox);\n    cy.wait(1000);\n    agHelper.GetNClick(template.selectCheckbox, 1);\n    agHelper.GetNClick(template.templateViewForkButton);\n    cy.wait(5000);\n    agHelper.AssertContains(\"template added successfully\", \"exist\", widgetLocators.toastAction);\n    autoLayout.ConvertToAutoLayoutAndVerify();\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/ConversionFlow_Corner_Cases_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. make sure the Generated CRUD apps is converted and all the canvases are converted to auto layout","suites":["excludeForAirgap"],"updatePoint":{"line":3,"column":105,"index":294},"line":3,"code":"  it(\"1. make sure the Generated CRUD apps is converted and all the canvases are converted to auto layout\", () => {\n    dataSources.GeneratePageWithMockDB();\n\n    //Converting generated CRUD app to Auto Layout and verify the canvases\n    autoLayout.ConvertToAutoLayoutAndVerify();\n    autoLayout.VerifyCurrentWidgetIsAutolayout(draggableWidgets.CONTAINER);\n\n    //Add Generated CRUD from within the Auto Layout and verify the canvases\n    dataSources.GeneratePageWithMockDB();\n    autoLayout.VerifyCurrentWidgetIsAutolayout(draggableWidgets.CONTAINER);\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/ConversionFlow_Generated_App_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validating row gap of px for desktop view","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":10,"column":60,"index":593},"line":10,"code":"  it(`1. Validating row gap of ${ROW_GAP}px for desktop view`, () => {\n    _.agHelper.GetWidgetByName(\"Input1\").then(widget => {\n      const input1Bottom = widget.get(0).getBoundingClientRect().bottom;\n      _.agHelper.GetWidgetByName(\"Input3\").then(widget => {\n        const input3Top = widget.get(0).getBoundingClientRect().top;\n        // Subtracting 4px to account for the bounding box border width\n        expect(input3Top - input1Bottom - 4).to.be.equal(ROW_GAP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/Row_Gap_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validating row gap of px for mobile view (non-wrapped widgets)","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":20,"column":88,"index":1115},"line":20,"code":"  it(`2. Validating row gap of ${MOBILE_ROW_GAP}px for mobile view (non-wrapped widgets)`, () => {\n    _.agHelper.SetCanvasViewportWidth(375);\n    _.agHelper.Sleep();\n    _.agHelper.GetWidgetByName(\"Input1\").then(widget => {\n      const input1Bottom = widget.get(0).getBoundingClientRect().bottom;\n      _.agHelper.GetWidgetByName(\"Input3\").then(widget => {\n        const input3Top = widget.get(0).getBoundingClientRect().top;\n        // Subtracting 4px to account for the bounding box border width\n        expect(input3Top - input1Bottom - 4).to.be.equal(MOBILE_ROW_GAP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/Row_Gap_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validating row gap of px for mobile view - (wrapped widgets)","suites":["Validating use cases for Auto Dimension"],"updatePoint":{"line":32,"column":86,"index":1710},"line":32,"code":"  it(`3. Validating row gap of ${MOBILE_ROW_GAP}px for mobile view - (wrapped widgets)`, () => {\n    _.agHelper.GetWidgetByName(\"Input2\").then(widget => {\n      const input2Bottom = widget.get(0).getBoundingClientRect().bottom;\n      _.agHelper.GetWidgetByName(\"Input1\").then(widget => {\n        const input1Top = widget.get(0).getBoundingClientRect().top;\n        // Subtracting 4px to account for the bounding box border width\n        expect(input1Top - input2Bottom - 4).to.be.equal(MOBILE_ROW_GAP);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/Row_Gap_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate Snipping with query and table widget on canvas","suites":["Add widget - Postgress DataSource"],"updatePoint":{"line":13,"column":64,"index":568},"line":13,"code":"  it(\"1. Validate Snipping with query and table widget on canvas\", () => {\n    cy.get(\".t--close-editor span:contains('Back')\").click({\n      force: true\n    });\n    cy.get(\".t--back-button span:contains('Back')\").click({\n      force: true\n    });\n    _.autoLayout.ConvertToAutoLayoutAndVerify(false);\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.wait(500);\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from public.configs\");\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get(queryEditor.suggestedTableWidget).click();\n    cy.CheckAndUnfoldEntityItem(\"Widgets\");\n    cy.selectEntityByName(\"Table1\");\n    cy.isSelectRow(1);\n    cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n      cy.log(\"the value is \" + tabData);\n      expect(tabData).to.be.equal(\"5\");\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/Snipping_mode_Basic_test.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a PostgresDataSource","suites":["Check Suggested Widgets Feature in auto-layout"],"updatePoint":{"line":21,"column":36,"index":709},"line":21,"code":"  it(\"1. Create a PostgresDataSource\", () => {\n    cy.createPostgresDatasource();\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/SuggestedWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create a query and populate response by choosing addWidget and validate in Table Widget","suites":["Check Suggested Widgets Feature in auto-layout"],"updatePoint":{"line":27,"column":96,"index":979},"line":27,"code":"  it(\"2. Create a query and populate response by choosing addWidget and validate in Table Widget\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM configs LIMIT 10;\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Mock the response for this test\n    cy.intercept(\"/api/v1/actions/execute\", {\n      fixture: \"addWidgetTable-mock\"\n    });\n    cy.onlyQueryRun();\n    cy.xpath(queryEditor.queryResponse).first().invoke(\"text\").then(text => {\n      const tableRowTxt = text;\n      cy.get(queryEditor.suggestedTableWidget).click();\n      _.entityExplorer.SelectEntityByName(\"Table1\");\n      cy.isSelectRow(1);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n        const tabValue = tabData;\n        cy.log(\"the value is\" + tabValue);\n        expect(tabValue).to.be.equal(\"5\");\n        expect(tableRowTxt).to.equal(tabValue);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/SuggestedWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with height width for widgets","suites":["Validating Mobile Views"],"updatePoint":{"line":3,"column":54,"index":176},"line":3,"code":"  it(\"1. Validate change with height width for widgets\", function () {\n    cy.addDsl(dsl);\n    cy.wait(5000); //for dsl to settle\n    //cy.openPropertyPane(\"containerwidget\");\n    cy.get(\".t--entity-name:contains('Container1')\").click({\n      force: true\n    });\n    cy.get(\".t--widget-containerwidget\").first().invoke(\"css\", \"height\").then(height => {\n      cy.get(\".t--entity-name:contains('Container2')\").click({\n        force: true\n      });\n      cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(newheight => {\n        cy.PublishtheApp();\n        cy.get(\".t--widget-containerwidget\").first().invoke(\"css\", \"height\").then(height => {\n          cy.get(\".t--widget-containerwidget\").last().invoke(\"css\", \"height\").then(newheight => {\n            expect(height).to.equal(newheight);\n          });\n        });\n        cy.get(\".t--widget-containerwidget\").first().invoke(\"css\", \"width\").then(width => {\n          cy.get(\".t--widget-containerwidget\").last().invoke(\"css\", \"width\").then(newwidth => {\n            expect(width).to.equal(newwidth);\n          });\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/ValidateAutoFillContainerWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate change with height width for widgets","suites":["Validating Mobile Views"],"updatePoint":{"line":3,"column":54,"index":184},"line":3,"code":"  it(\"1. Validate change with height width for widgets\", function () {\n    cy.addDsl(dsl);\n    cy.wait(5000); //for dsl to settle\n    //cy.openPropertyPane(\"containerwidget\");\n    cy.get(\".t--entity-name:contains('Container1')\").click({\n      force: true\n    });\n    cy.get(\".t--widget-containerwidget\").first().invoke(\"css\", \"height\").then(height => {\n      cy.get(\".t--entity-name:contains('Container2')\").click({\n        force: true\n      });\n      cy.get(\".t--widget-containerwidget\").invoke(\"css\", \"height\").then(newheight => {\n        cy.PublishtheApp();\n        cy.get(\".t--widget-containerwidget\").first().invoke(\"css\", \"height\").then(height => {\n          cy.get(\".t--widget-containerwidget\").last().invoke(\"css\", \"height\").then(newheight => {\n            expect(parseFloat(newheight)).to.be.lessThan(parseFloat(height));\n          });\n        });\n        cy.get(\".t--widget-containerwidget\").first().invoke(\"css\", \"width\").then(width => {\n          cy.get(\".t--widget-containerwidget\").last().invoke(\"css\", \"width\").then(newwidth => {\n            expect(width).to.equal(newwidth);\n          });\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/MobileResponsiveTests/ValidateAutoFillContainerWithInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Creating new app after discontinuing guided tour should not start the same","suites":["excludeForAirgap"],"updatePoint":{"line":7,"column":83,"index":553},"line":7,"code":"  it(\"1. Creating new app after discontinuing guided tour should not start the same\", function () {\n    // Start guided tour\n    _.homePage.NavigateToHome();\n    cy.get(guidedTourLocators.welcomeTour).click();\n    _.homePage.CloseReconnectDataSourceModal(); // Check if reconnect data source modal is visible and close it\n\n    cy.get(guidedTourLocators.startBuilding).should(\"be.visible\");\n    // Go back to applications page\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(homePage.createNewAppButton).first().click();\n    // Check if explorer is visible, explorer is collapsed initialy in guided tour\n    cy.get(explorerLocators.entityExplorer).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/CreateNewApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. onboarding flow - should check page entity selection in explorer","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":11,"column":73,"index":489},"line":11,"code":"  it(\"1. onboarding flow - should check page entity selection in explorer\", function () {\n    cy.get(OnboardingLocator.introModal).should(\"be.visible\");\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.introModal).should(\"not.exist\");\n    cy.get(\".t--entity-name:contains(Page1)\").trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":20,"column":22,"index":878},"line":20,"code":"  it(\"excludeForAirgap\", \"2. onboarding flow - should check the checklist page actions\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"0 of 5\");\n    cy.get(OnboardingLocator.checklistBack).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistDatasourceBtn).should(\"not.be.disabled\");\n    cy.get(OnboardingLocator.checklistDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"1 of 5\");\n    cy.get(OnboardingLocator.checklistDatasourceBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistActionBtn).click();\n    cy.get(OnboardingLocator.createQuery).should(\"be.visible\");\n    cy.get(OnboardingLocator.createQuery).click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"2 of 5\");\n    cy.get(OnboardingLocator.checklistActionBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"3 of 5\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).click();\n    cy.get(OnboardingLocator.snipingBanner).should(\"be.visible\");\n    cy.get(OnboardingLocator.snipingTextWidget).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    cy.get(OnboardingLocator.widgetName).should(\"be.visible\");\n    cy.get(OnboardingLocator.widgetName).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"4 of 5\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).should(\"not.exist\");\n    let open;\n    cy.window().then(window => {\n      open = window.open;\n      window.open = Cypress._.noop;\n    });\n    cy.get(OnboardingLocator.checklistDeployBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistDeployBtn).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"5 of 5\");\n    cy.get(OnboardingLocator.checklistDeployBtn).should(\"not.exist\");\n    cy.window().then(window => {\n      window.open = open;\n    });\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":77,"column":12,"index":3825},"line":77,"code":"  it(\"airgap\", \"2. onboarding flow - should check the checklist page actions - airgap\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"0 of 5\");\n    cy.get(OnboardingLocator.checklistBack).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistDatasourceBtn).should(\"not.be.disabled\");\n    cy.get(OnboardingLocator.checklistDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(datasource.MongoDB).click();\n    cy.fillMongoDatasourceForm();\n    cy.generateUUID().then(uid => {\n      datasourceName = `Mongo CRUD ds ${uid}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.testSaveDatasource();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"1 of 5\");\n    cy.get(OnboardingLocator.checklistDatasourceBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistActionBtn).click();\n    cy.get(OnboardingLocator.createQuery).should(\"be.visible\");\n    cy.get(OnboardingLocator.createQuery).click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"2 of 5\");\n    cy.get(OnboardingLocator.checklistActionBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"3 of 5\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).click();\n    cy.get(OnboardingLocator.snipingBanner).should(\"be.visible\");\n    cy.get(OnboardingLocator.snipingTextWidget).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    cy.get(OnboardingLocator.widgetName).should(\"be.visible\");\n    cy.get(OnboardingLocator.widgetName).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"4 of 5\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).should(\"not.exist\");\n    let open;\n    cy.window().then(window => {\n      open = window.open;\n      window.open = _.noop;\n    });\n    cy.get(OnboardingLocator.checklistDeployBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistDeployBtn).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"5 of 5\");\n    cy.get(OnboardingLocator.checklistDeployBtn).should(\"not.exist\");\n    cy.window().then(window => {\n      window.open = open;\n    });\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":140,"column":22,"index":6958},"line":140,"code":"  it(\"excludeForAirgap\", \"3. onboarding flow - should check the tasks page actions\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_DATASOURCE_HEADER());\n    cy.get(OnboardingLocator.taskDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.datasourceBackBtn).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.taskActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_QUERY_HEADER());\n    cy.get(OnboardingLocator.taskActionBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.createQuery).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistBack).click();\n    cy.get(OnboardingLocator.taskActionBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.taskWidgetBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_WIDGET_HEADER());\n    cy.get(OnboardingLocator.taskWidgetBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskWidgetBtn).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":171,"column":12,"index":8755},"line":171,"code":"  it(\"airgap\", \"3. onboarding flow - should check the tasks page actions - airgap\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_DATASOURCE_HEADER());\n    cy.get(OnboardingLocator.taskDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(datasource.MongoDB).click();\n    cy.fillMongoDatasourceForm();\n    cy.generateUUID().then(uid => {\n      datasourceName = `Mongo CRUD ds ${uid}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.testSaveDatasource();\n    cy.wait(1000);\n    cy.get(\".t--close-editor\").click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.datasourceBackBtn).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.taskActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_QUERY_HEADER());\n    cy.get(OnboardingLocator.taskActionBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.createQuery).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistBack).click();\n    cy.get(OnboardingLocator.taskActionBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.taskWidgetBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_WIDGET_HEADER());\n    cy.get(OnboardingLocator.taskWidgetBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskWidgetBtn).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. onboarding flow - should check the tasks page datasource action alternate widget action","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":210,"column":96,"index":10879},"line":210,"code":"  it(\"4. onboarding flow - should check the tasks page datasource action alternate widget action\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceAltBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":222,"column":12,"index":11373},"line":222,"code":"  it(\"airgap\", \"5. onboarding flow - should check the tasks page query action alternate widget action - airgap\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(datasource.MongoDB).click();\n    cy.fillMongoDatasourceForm();\n    cy.generateUUID().then(uid => {\n      datasourceName = `Mongo CRUD ds ${uid}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.testSaveDatasource();\n    cy.wait(1000);\n    cy.get(\".t--close-editor\").click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.datasourceBackBtn).click();\n    cy.get(OnboardingLocator.taskActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskActionAltBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":248,"column":22,"index":12533},"line":248,"code":"  it(\"excludeForAirgap\", \"5. onboarding flow - should check the tasks page query action alternate widget action\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.datasourceBackBtn).click();\n    cy.get(OnboardingLocator.taskActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskActionAltBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. onboarding flow - should check directly opening widget pane","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":266,"column":68,"index":13496},"line":266,"code":"  it(\"6. onboarding flow - should check directly opening widget pane\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\").wait(800);\n    cy.reload();\n    cy.wait(\"@getPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(OnboardingLocator.statusbar).should(\"be.visible\");\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. onboarding flow - new apps created should start with signposting","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":282,"column":73,"index":14297},"line":282,"code":"  it(\"7. onboarding flow - new apps created should start with signposting\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    _.homePage.NavigateToHome();\n    _.homePage.CreateNewApplication(false);\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. onboarding flow - once signposting is completed new apps won't start with signposting","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":289,"column":94,"index":14686},"line":289,"code":"  it(\"8. onboarding flow - once signposting is completed new apps won't start with signposting\", function () {\n    _.onboarding.completeSignposting();\n    _.homePage.NavigateToHome();\n    _.agHelper.RefreshPage();\n    _.homePage.CreateNewApplication(false);\n    _.agHelper.AssertElementExist(_.locators._dropHere);\n    _.agHelper.AssertElementAbsence(OnboardingLocator.statusbar);\n  });","file":"e2e/Regression/ClientSide/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Guided tour should work when started from the editor","suites":["excludeForAirgap"],"updatePoint":{"line":7,"column":61,"index":503},"line":7,"code":"  it(\"1. Guided tour should work when started from the editor\", function () {\n    cy.generateUUID().then(uid => {\n      cy.Signup(`${uid}@appsmith.com`, uid);\n    });\n    cy.get(onboardingLocators.introModalWelcomeTourBtn).should(\"be.visible\");\n    cy.get(onboardingLocators.introModalWelcomeTourBtn).click();\n    cy.get(onboardingLocators.welcomeTourBtn).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Onboarding/GuidedTour_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Guided Tour","suites":["excludeForAirgap"],"updatePoint":{"line":15,"column":20,"index":846},"line":15,"code":"  it(\"2. Guided Tour\", function () {\n    // Start guided tour\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(guidedTourLocators.welcomeTour).click();\n    cy.get(guidedTourLocators.startBuilding).click();\n    cy.get(explorerLocators.entityExplorer).should(\"not.be.visible\");\n    // Refresh the page to validate if the tour resumes\n    cy.reload();\n    cy.get(\".query-page\").then($ele => {\n      if ($ele.find(guidedTourLocators.banner).length) {\n        cy.get(guidedTourLocators.banner).should(\"be.visible\");\n      }\n    });\n    _.dataSources.SetQueryTimeout();\n    // Step 1: Run query\n    _.dataSources.RunQuery();\n    cy.get(guidedTourLocators.successButton).click();\n    // Step 2: Select table widget\n    _.entityExplorer.SelectEntityByName(\"CustomersTable\");\n\n    // Step 3: Add binding to the tableData property\n    _.propPane.UpdatePropertyFieldValue(\"Table data\", \"{{getCustomers.data}}\");\n    cy.get(guidedTourLocators.successButton).click();\n    cy.get(guidedTourLocators.infoButton).click();\n    // Renaming widgets // Commending below wait due to flakiness\n    //cy.wait(\"@updateWidgetName\");\n    // Step 4: Add binding to the defaultText property of NameInput\n    cy.wait(3000);\n    cy.get(\"body\").then($body => {\n      if ($body.find(guidedTourLocators.hintButton).length > 0) {\n        cy.get(guidedTourLocators.hintButton).click();\n        cy.wait(1000); //for NameInput to open\n        _.propPane.UpdatePropertyFieldValue(\"Default value\", \"{{CustomersTable.selectedRow.name}}\");\n      } else {\n        cy.wait(1000);\n        cy.get(guidedTourLocators.inputfields).first().clear({\n          force: true\n        }).click({\n          force: true\n        }); //Name input\n        _.propPane.UpdatePropertyFieldValue(\"Default value\", \"{{CustomersTable.selectedRow.name}}\");\n      }\n    });\n    cy.get(guidedTourLocators.successButton).click();\n    // Step 5: Add binding to the rest of the widgets in the container\n    cy.get(guidedTourLocators.inputfields).eq(1).clear({\n      force: true\n    }).click({\n      force: true\n    }); //Email input\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"{{CustomersTable.selectedRow.email}}\");\n    cy.get(\".t--entity-name\").contains(\"CountryInput\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(guidedTourLocators.inputfields).eq(2).clear({\n      force: true\n    }).click({\n      force: true\n    }); //Country input\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"{{CustomersTable.selectedRow.country}}\");\n    cy.get(\".t--entity-name\").contains(\"DisplayImage\").click({\n      force: true\n    });\n    cy.get(guidedTourLocators.successButton).click();\n    // Step 6: Drag and drop a widget\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 800,\n      y: 750\n    });\n    cy.get(guidedTourLocators.successButton).click();\n    cy.get(guidedTourLocators.infoButton).click();\n    // Step 7: Execute a query onClick\n    cy.executeDbQuery(\"updateCustomerInfo\", \"onClick\");\n    // Step 8: Execute getCustomers onSuccess\n    _.propPane.SelectActionByTitleAndValue(\"Execute a query\", \"updateCustomerInfo.run\"), cy.get(_.propPane._actionCallbacks).first().click();\n    cy.get(_.propPane._actionAddCallback(\"success\")).click().wait(500);\n    cy.get(_.locators._dropDownValue(\"Execute a query\")).click().wait(500).get(\"ul.bp3-menu\").children().contains(\"getCustomers\").click({\n      force: true\n    }).wait(500);\n    _.agHelper.GetNClick(_.propPane._actionSelectorPopupClose);\n    cy.get(guidedTourLocators.successButton).click();\n    // Step 9: Deploy\n    cy.PublishtheApp();\n    cy.get(guidedTourLocators.rating).should(\"be.visible\");\n    cy.get(guidedTourLocators.rating).eq(4).click();\n    cy.get(guidedTourLocators.startBuilding).should(\"be.visible\");\n    cy.get(guidedTourLocators.startBuilding).click();\n  });","file":"e2e/Regression/ClientSide/Onboarding/GuidedTour_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.should check the datasource selector and the form","suites":["One click binding control"],"updatePoint":{"line":12,"column":57,"index":673},"line":12,"code":"  it(\"1.should check the datasource selector and the form\", () => {\n    _.agHelper.AssertElementExist(oneClickBindingLocator.datasourceDropdownSelector);\n    _.agHelper.GetNClick(oneClickBindingLocator.datasourceDropdownSelector);\n    _.agHelper.AssertElementAbsence(oneClickBindingLocator.datasourceQueryBindHeaderSelector);\n    _.agHelper.AssertElementExist(oneClickBindingLocator.datasourceGenerateAQuerySelector);\n    _.agHelper.AssertElementExist(oneClickBindingLocator.datasourceOtherActionsSelector);\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    cy.wait(500);\n    _.dataSources.CreateMockDB(\"Users\");\n    cy.wait(500);\n    _.dataSources.CreateQueryAfterDSSaved();\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    _.agHelper.GetNClick(oneClickBindingLocator.datasourceDropdownSelector);\n    _.agHelper.AssertElementExist(oneClickBindingLocator.datasourceQueryBindHeaderSelector);\n    _.agHelper.AssertElementLength(oneClickBindingLocator.datasourceQuerySelector, 1);\n    _.agHelper.AssertElementExist(oneClickBindingLocator.datasourceGenerateAQuerySelector);\n    _.agHelper.AssertElementExist(oneClickBindingLocator.datasourceSelector());\n    _.agHelper.AssertElementExist(oneClickBindingLocator.datasourceOtherActionsSelector);\n    _.agHelper.AssertElementExist(oneClickBindingLocator.otherActionSelector());\n    _.agHelper.AssertElementExist(oneClickBindingLocator.otherActionSelector(\"Connect new datasource\"));\n    _.agHelper.GetNClick(oneClickBindingLocator.otherActionSelector(\"Connect new datasource\"));\n    _.agHelper.AssertElementExist(onboardingLocator.datasourcePage);\n    _.agHelper.GetNClick(onboardingLocator.datasourceBackBtn);\n    _.agHelper.GetNClick(oneClickBindingLocator.datasourceDropdownSelector);\n    _.agHelper.AssertElementExist(oneClickBindingLocator.otherActionSelector(\"Insert binding\"));\n    _.agHelper.GetNClick(oneClickBindingLocator.otherActionSelector(\"Insert binding\"));\n    _.propPane.ValidatePropertyFieldValue(\"Table data\", \"{{}}\");\n    _.propPane.UpdatePropertyFieldValue(\"Table data\", \"\");\n    _.propPane.ToggleJsMode(\"Table data\");\n    _.agHelper.GetNClick(oneClickBindingLocator.datasourceDropdownSelector);\n    _.agHelper.AssertElementAbsence(oneClickBindingLocator.datasourceDropdownOptionSelector(\"Query1\"));\n    _.agHelper.GetNClick(oneClickBindingLocator.datasourceQuerySelector, 0);\n    _.agHelper.AssertElementExist(oneClickBindingLocator.dropdownOptionSelector(\"Query1\"));\n    _.propPane.ToggleJsMode(\"Table data\");\n    _.propPane.ValidatePropertyFieldValue(\"Table data\", \"{{Query1.data}}\");\n    _.propPane.UpdatePropertyFieldValue(\"Table data\", \"\");\n    _.propPane.ToggleJsMode(\"Table data\");\n    oneClickBinding.ChooseAndAssertForm(\"New from Users\", \"Users\", \"public.users\", \"gender\");\n    _.propPane.MoveToTab(\"Style\");\n    _.propPane.MoveToTab(\"Content\");\n    oneClickBinding.ChooseAndAssertForm(\"New from sample Movies\", \"movies\", \"movies\", \"status\");\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    _.agHelper.GetNClick(\"#entity-add_new_datasource\");\n    _.agHelper.GetNClick(\".t--plugin-name:contains('MongoDB')\");\n    _.agHelper.TypeText(DatasourceEditor.datasourceTitleInputLocator, \"myinvalidds\");\n    _.agHelper.TypeText(`[name=\"datasourceConfiguration.endpoints[0].host\"]`, \"127.0.0.1\");\n    _.agHelper.TypeText(`[name=\"datasourceConfiguration.endpoints[0].port\"]`, \"8000\");\n    _.dataSources.SaveDatasource();\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    _.agHelper.GetNClick(oneClickBindingLocator.datasourceDropdownSelector);\n    _.agHelper.GetNClick(oneClickBindingLocator.datasourceSelector(\"myinvalidds\"));\n    cy.wait(\"@getDatasourceStructure\", {\n      timeout: 20000\n    });\n    _.agHelper.AssertElementExist(oneClickBindingLocator.tableError(\"Appsmith server timed out when fetching structure. Please reach out to appsmith customer support to resolve this.\"));\n  });","file":"e2e/Regression/ClientSide/OneClickBinding/PropertyControl_spec.ts","skipped":true,"dir":"app/client/cypress"},{"name":"1.should check that connect data overlay is shown on the table","suites":["Table widget one click binding feature"],"updatePoint":{"line":4,"column":68,"index":278},"line":4,"code":"  it(\"1.should check that connect data overlay is shown on the table\", () => {\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.TABLE);\n    _.agHelper.AssertElementExist(_.table._connectDataHeader);\n    _.agHelper.AssertElementExist(_.table._connectDataButton);\n    // should check that tableData one click property control\"\n    _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    _.agHelper.AssertElementExist(oneClickBindingLocator.datasourceDropdownSelector);\n  });","file":"e2e/Regression/ClientSide/OneClickBinding/TableWidget/index_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should check analytics is not initialised when enableTelemtry is false","suites":["excludeForAirgap"],"updatePoint":{"line":18,"column":79,"index":754},"line":18,"code":"  it(\"1. Should check analytics is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    // cy.reload();\n    // cy.wait(3000);\n    // cy.wait(\"@getMe\")\n    //   //.wait(\"@getMe\")\n    //   .should(\n    //     \"have.nested.property\",\n    //     \"response.body.data.enableTelemetry\",\n    //     false,\n    //   );\n    cy.window().then(window => {\n      expect(window.analytics).to.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://api.segment.io/**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.get(\".t--new-button\").should(\"be.visible\");\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedWorkspace(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should check smartlook is not initialised when enableTelemtry is false","suites":["excludeForAirgap"],"updatePoint":{"line":48,"column":79,"index":1668},"line":48,"code":"  it(\"2. Should check smartlook is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    cy.reload();\n    cy.wait(3000);\n    cy.wait(\"@getMe\");\n    cy.window().then(window => {\n      expect(window.smartlook).to.be.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://**.smartlook.**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedWorkspace(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should check Sentry is not initialised when enableTelemtry is false","suites":["excludeForAirgap"],"updatePoint":{"line":71,"column":76,"index":2362},"line":71,"code":"  it(\"3. Should check Sentry is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    cy.reload();\n    cy.wait(3000);\n    cy.wait(\"@getMe\");\n    cy.window().then(window => {\n      expect(window.Sentry).to.be.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://**.sentry.io/**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedWorkspace(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checks URL redirection from legacy URLs to slug URLs","suites":["Slug URLs"],"updatePoint":{"line":7,"column":61,"index":324},"line":7,"code":"  it(\"1. Checks URL redirection from legacy URLs to slug URLs\", () => {\n    applicationId = localStorage.getItem(\"applicationId\");\n    cy.location(\"pathname\").then(pathname => {\n      const pageId = pathname.split(\"/\")[3]?.split(\"-\").pop();\n      cy.visit(`/applications/${applicationId}/pages/${pageId}/edit`).then(() => {\n        cy.wait(10000);\n        cy.location(\"pathname\").then(pathname => {\n          const pageId = pathname.split(\"/\")[3]?.split(\"-\").pop();\n          const appName = localStorage.getItem(\"AppName\");\n          expect(pathname).to.be.equal(`/app/${appName}/page1-${pageId}/edit`);\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checks if application slug updates on the URL when application name changes","suites":["Slug URLs"],"updatePoint":{"line":21,"column":84,"index":988},"line":21,"code":"  it(\"2. Checks if application slug updates on the URL when application name changes\", () => {\n    cy.generateUUID().then(appName => {\n      applicationName = appName;\n      cy.AppSetupForRename();\n      cy.get(homePage.applicationName).type(`${appName}` + \"{enter}\");\n      cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.location(\"pathname\").then(pathname => {\n        const pageId = pathname.split(\"/\")[3]?.split(\"-\").pop();\n        expect(pathname).to.be.equal(`/app/${appName}/page1-${pageId}/edit`);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checks if page slug updates on the URL when page name changes","suites":["Slug URLs"],"updatePoint":{"line":33,"column":70,"index":1569},"line":33,"code":"  it(\"3. Checks if page slug updates on the URL when page name changes\", () => {\n    _.entityExplorer.ActionContextMenuByEntityName(\"Page1\", \"Edit name\");\n    cy.get(explorer.editEntity).last().type(\"Page renamed\", {\n      force: true\n    });\n    cy.get(\"body\").click(0, 0, {\n      force: true\n    });\n    cy.wait(\"@updatePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.location(\"pathname\").then(pathname => {\n      const pageId = pathname.split(\"/\")[3]?.split(\"-\").pop();\n      expect(pathname).to.be.equal(`/app/${applicationName}/page-renamed-${pageId}/edit`);\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check the url of old applications, upgrades version and compares appsmith.URL values","suites":["Slug URLs"],"updatePoint":{"line":47,"column":93,"index":2210},"line":47,"code":"  it(\"4. Check the url of old applications, upgrades version and compares appsmith.URL values\", () => {\n    cy.request(\"PUT\", `/api/v1/applications/${applicationId}`, {\n      applicationVersion: 1\n    }).then(response => {\n      const application = response.body.data;\n      expect(application.applicationVersion).to.equal(1);\n      cy.NavigateToHome();\n      cy.reload();\n      cy.SearchApp(applicationName);\n      cy.wait(\"@getPagesForCreateApp\").then(intercept => {\n        const {\n          application,\n          pages\n        } = intercept.response.body.data;\n        const defaultPage = pages.find(p => p.isDefault);\n        cy.location().should(loc => {\n          expect(loc.pathname).includes(`/applications/${application.id}/pages/${defaultPage.id}`);\n        });\n        cy.Createpage(\"NewPage\");\n        cy.get(\"@currentPageId\").then(currentPageId => {\n          cy.location().should(loc => {\n            expect(loc.pathname).includes(`/applications/${application.id}/pages/${currentPageId}`);\n          });\n          cy.get(explorer.addWidget).click();\n          cy.dragAndDropToCanvas(\"textwidget\", {\n            x: 300,\n            y: 700\n          });\n          cy.get(\".t--widget-textwidget\").should(\"exist\");\n          cy.updateCodeInput(\".t--property-control-text\", `{{appsmith.URL.pathname}}`);\n          cy.get(\".t--draggable-textwidget .bp3-ui-text\").should(\"contain.text\", `/applications/${application.id}/pages/${currentPageId}/edit`);\n          cy.get(\".t--upgrade\").click({\n            force: true\n          });\n          cy.get(\".t--upgrade-confirm\").click({\n            force: true\n          });\n          cy.wait(\"@getPagesForCreateApp\").then(intercept => {\n            const {\n              application,\n              pages\n            } = intercept.response.body.data;\n            const currentPage = pages.find(p => p.id === currentPageId);\n            cy.location().should(loc => {\n              expect(loc.pathname).includes(`/app/${application.slug}/${currentPage.slug}-${currentPage.id}`);\n            });\n            cy.get(\".t--draggable-textwidget .bp3-ui-text\").should(\"contain.text\", `/app/${application.slug}/${currentPage.slug}-${currentPage.id}/edit`);\n            cy.visit(`/${application.slug}/${currentPage.slug}-${currentPage.id}/edit`);\n            cy.location().should(loc => {\n              expect(loc.pathname).includes(`/app/${application.slug}/${currentPage.slug}-${currentPage.id}/edit`);\n            });\n          });\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Checks redirect url","suites":["Slug URLs"],"updatePoint":{"line":103,"column":28,"index":4655},"line":103,"code":"  it(\"5. Checks redirect url\", () => {\n    cy.url().then(url => {\n      cy.LogOut();\n      cy.visit(url + \"?embed=true&a=b\");\n      //cy.wait(6000);\n      cy.location().should(loc => {\n        expect(loc.search).to.eq(`?redirectUrl=${encodeURIComponent(url + \"?embed=true&a=b\")}`);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ApplicationURL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Dynamic Layout - Change Layout","suites":["Dynamic Layout Functionality"],"updatePoint":{"line":4,"column":39,"index":229},"line":4,"code":"  it(\"1. Dynamic Layout - Change Layout\", function () {\n    cy.get(commonlocators.layoutControls).last().click();\n    cy.get(commonlocators.canvas).invoke(\"width\").should(\"be.eq\", 450);\n\n    //Dynamic Layout - New Page should have selected Layout\n    cy.get(pages.AddPage).first().click();\n    cy.get(commonlocators.canvas).invoke(\"width\").should(\"be.eq\", 450);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/DynamicLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Ctas validations","suites":["Empty canvas ctas"],"updatePoint":{"line":8,"column":25,"index":276},"line":8,"code":"  it(\"1. Ctas validations\", () => {\n    cy.wait(3000); // for page to load, failing in CI\n    //Ctas should not be shown in the second page\n    cy.get(locators._emptyCanvasCta).should(\"be.visible\");\n    ee.AddNewPage();\n    cy.get(locators._emptyCanvasCta).should(\"not.exist\");\n    ee.SelectEntityByName(\"Page1\", \"Pages\");\n\n    //Ctas should continue to show on refresh\n    cy.get(locators._emptyCanvasCta).should(\"be.visible\");\n    cy.reload();\n    cy.get(locators._emptyCanvasCta).should(\"be.visible\");\n\n    //Hide cta on adding a widget\n    cy.get(locators._emptyCanvasCta).should(\"be.visible\");\n    ee.DragDropWidgetNVerify(WIDGET.BUTTON, 200, 200);\n    cy.get(locators._emptyCanvasCta).should(\"not.exist\");\n    ee.AddNewPage();\n    cy.get(locators._emptyCanvasCta).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/EmptyCanvas_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Does not show reference error label when js obj does not exist","suites":["Sanitise toast error messages"],"updatePoint":{"line":24,"column":71,"index":658},"line":24,"code":"  it(\"1. Does not show reference error label when js obj does not exist\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{a.kjbfjdfbkds()}}\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.WaitUntilToastDisappear(\"a is not defined\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ErrorMessages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Does not show type error label when js obj function does not exist","suites":["Sanitise toast error messages"],"updatePoint":{"line":30,"column":75,"index":976},"line":30,"code":"  it(\"2. Does not show type error label when js obj function does not exist\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{JSObject1.myFun1efef()}}\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.WaitUntilToastDisappear(\"Object1.myFun1efef is not a function\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ErrorMessages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Does not show any label when msg is not given for post message","suites":["Sanitise toast error messages"],"updatePoint":{"line":36,"column":71,"index":1317},"line":36,"code":"  it(\"3. Does not show any label when msg is not given for post message\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{postWindowMessage('', 'window', '');}}\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.WaitUntilToastDisappear(\"Please enter a target origin URL.\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ErrorMessages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Does not show any label for clear watch when no location is active","suites":["Sanitise toast error messages"],"updatePoint":{"line":42,"column":75,"index":1673},"line":42,"code":"  it(\"4. Does not show any label for clear watch when no location is active\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{appsmith.geolocation.clearWatch();}}\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.WaitUntilToastDisappear(\"No location watch active\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ErrorMessages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Does not show type error label when js obj function cant read properties of :","suites":["Sanitise toast error messages"],"updatePoint":{"line":48,"column":86,"index":2029},"line":48,"code":"  it(\"5. Does not show type error label when js obj function cant read properties of :\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{JSObject1.myFun1()}}\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.WaitUntilToastDisappear(\"Cannot read properties of null (reading ':')\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ErrorMessages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Does not show UncaughtPromiseRejection label when valid page url is not given","suites":["Sanitise toast error messages"],"updatePoint":{"line":54,"column":86,"index":2389},"line":54,"code":"  it(\"6. Does not show UncaughtPromiseRejection label when valid page url is not given\", () => {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    _.jsEditor.DisableJSContext(\"onClick\");\n    _.agHelper.GetNClick(_.propPane._actionCardByTitle(\"Execute a JS function\"));\n    _.agHelper.GetNClick(_.propPane._actionSelectorDelete);\n    _.propPane.SelectPlatformFunction(\"onClick\", \"Navigate to\");\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.WaitUntilToastDisappear(\"Enter a valid URL or page name\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ErrorMessages_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if exporting app flow works as expected","suites":["Export application as a JSON file"],"updatePoint":{"line":17,"column":54,"index":674},"line":17,"code":"  it(\"1. Check if exporting app flow works as expected\", function () {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).type(appname);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n\n    // cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.exportAppFromMenu).click({\n      force: true\n    });\n    agHelper.ValidateToastMessage(\"Successfully exported\");\n    // fetching the exported app file manually to be verified.\n    cy.get(`a[id=t--export-app-link]`).then(anchor => {\n      const url = anchor.prop(\"href\");\n      cy.request(url).then(({\n        headers\n      }) => {\n        expect(headers).to.have.property(\"content-type\", \"application/json\");\n        expect(headers).to.have.property(\"content-disposition\").that.includes(\"attachment;\").and.includes(`filename*=UTF-8''${appname}.json`);\n      });\n    });\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. User with admin access,should be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":46,"column":64,"index":1761},"line":46,"code":"  it(\"2. User with admin access,should be able to export the app\", function () {\n    if (CURRENT_REPO === REPO.CE) {\n      cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n      HomePage.NavigateToHome();\n      agHelper.GenerateUUID();\n      cy.get(\"@guid\").then(uid => {\n        HomePage.CreateNewWorkspace(\"exportApp\" + uid);\n        HomePage.CreateAppInWorkspace(\"exportApp\" + uid, \"App\" + uid);\n        appid = \"App\" + uid;\n        cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n        cy.get(homePage.shareApp).click({\n          force: true\n        });\n        // cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.adminRole);\n        HomePage.InviteUserToWorkspaceFromApp(Cypress.env(\"TESTUSERNAME1\"), \"Administrator\");\n        cy.LogOut();\n        cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n        cy.wait(2000);\n        cy.log({\n          appid\n        });\n        cy.get(homePage.searchInput).type(appid);\n        // eslint-disable-next-line cypress/no-unnecessary-waiting\n        cy.wait(2000);\n\n        //cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n        cy.get(homePage.appMoreIcon).first().click({\n          force: true\n        });\n        cy.get(homePage.exportAppFromMenu).should(\"be.visible\");\n        cy.xpath(homePage.workspaceHeading).click({\n          force: true\n        });\n        cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n        cy.get(homePage.appEditIcon).first().click({\n          force: true\n        });\n        cy.get(homePage.applicationName).click({\n          force: true\n        });\n        cy.contains(\"Export application\").should(\"be.visible\");\n      });\n      cy.LogOut();\n    }\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. User with developer access,should not be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":91,"column":72,"index":3489},"line":91,"code":"  it(\"3. User with developer access,should not be able to export the app\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    HomePage.NavigateToHome();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      HomePage.CreateNewWorkspace(\"exportApp\" + uid);\n      HomePage.CreateAppInWorkspace(\"exportApp\" + uid, \"App\" + uid);\n      appid = \"App\" + uid;\n      workspaceId = \"exportApp\" + uid;\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      HomePage.InviteUserToApplication(Cypress.env(\"TESTUSERNAME1\"), \"Developer\");\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.wait(2000);\n      cy.log({\n        appid\n      });\n      cy.get(homePage.searchInput).type(appid);\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n      cy.wait(2000);\n      cy.get(homePage.appMoreIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.exportAppFromMenu).should(\"not.exist\");\n      cy.xpath(homePage.workspaceHeading).click({\n        force: true\n      });\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appEditIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.applicationName).click({\n        force: true\n      });\n      cy.contains(\"Export application\").should(\"not.exist\");\n    });\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. User with viewer access,should not be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":132,"column":69,"index":4976},"line":132,"code":"  it(\"4. User with viewer access,should not be able to export the app\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    HomePage.NavigateToHome();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      HomePage.CreateNewWorkspace(\"exportApp\" + uid);\n      HomePage.CreateAppInWorkspace(\"exportApp\" + uid, \"App\" + uid);\n      appid = \"App\" + uid;\n      workspaceId = \"exportApp\" + uid;\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      HomePage.InviteUserToApplication(Cypress.env(\"TESTUSERNAME1\"), \"App Viewer\");\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.wait(2000);\n      cy.log({\n        appid\n      });\n      cy.get(homePage.searchInput).type(appid);\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n      cy.wait(2000);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appEditIcon).should(\"not.exist\");\n    });\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if the forked application has the same dsl as the original","suites":["Fork application across workspaces"],"updatePoint":{"line":15,"column":73,"index":718},"line":15,"code":"  it(\"1. Check if the forked application has the same dsl as the original\", function () {\n    const appname = localStorage.getItem(\"AppName\");\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"inputUpdate\");\n    cy.testJsontext(\"defaultvalue\", \"A\");\n    cy.wait(\"@inputUpdate\").then(response => {\n      parentApplicationDsl = response.response.body.data.dsl;\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.NavigateToHome();\n    cy.get(homePage.searchInput).type(appname);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.forkAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.forkAppWorkspaceButton).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(4000);\n    cy.wait(\"@postForkAppWorkspace\").then(httpResponse => {\n      expect(httpResponse.status).to.equal(200);\n    });\n    // check that forked application has same dsl\n    cy.get(\"@getPage\").then(httpResponse => {\n      const data = httpResponse.response.body.data;\n      forkedApplicationDsl = data.layouts[0].dsl;\n      cy.log(JSON.stringify(forkedApplicationDsl));\n      cy.log(JSON.stringify(parentApplicationDsl));\n      expect(JSON.stringify(forkedApplicationDsl)).to.contain(JSON.stringify(parentApplicationDsl));\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Non signed user should be able to fork a public forkable app","suites":["Fork application across workspaces"],"updatePoint":{"line":52,"column":69,"index":2216},"line":52,"code":"  it(\"2. Non signed user should be able to fork a public forkable app\", function () {\n    cy.NavigateToHome();\n    cy.get(homePage.homeIcon).click();\n    cy.get(homePage.optionsIcon).first().click();\n    cy.get(homePage.workspaceImportAppOption).click({\n      force: true\n    });\n    cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n    cy.xpath(homePage.uploadLogo).selectFile(\"cypress/fixtures/forkNonSignedInUser.json\", {\n      force: true\n    });\n    cy.wait(\"@importNewApplication\").then(interception => {\n      const {\n        isPartialImport\n      } = interception.response.body.data;\n      cy.log(\"isPartialImport : \", isPartialImport);\n      if (isPartialImport) {\n        cy.wait(2000);\n        cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n          force: true\n        });\n        cy.wait(2000);\n      }\n      cy.get(\"#sidebar\").should(\"be.visible\");\n      cy.PublishtheApp();\n      _.agHelper.Sleep(2000);\n      cy.get(\"button:contains('Share')\").first().click({\n        force: true\n      });\n      // _.agHelper.Sleep(1000);\n      // cy.get(\"body\").then(($ele) => {\n      //   if ($ele.find(homePage.enablePublicAccess).length <= 0) {\n      //     cy.contains(\"Retry\").click();\n      //     cy.get(\"button:contains('Share')\")\n      //       .first()\n      //       .click({ force: true });\n      //   }\n      // });\n      cy.enablePublicAccess();\n      cy.url().then(url => {\n        forkableAppUrl = url;\n        cy.LogOut();\n        cy.visit(forkableAppUrl);\n        //cy.reload();\n        //cy.visit(forkableAppUrl);\n        cy.wait(4000);\n        cy.get(applicationLocators.forkButton).first().click({\n          force: true\n        });\n        cy.get(loginPageLocators.signupLink).click();\n        cy.generateUUID().then(uid => {\n          cy.get(signupPageLocators.username).type(`${uid}@appsmith.com`);\n          cy.get(signupPageLocators.password).type(uid);\n          cy.get(signupPageLocators.submitBtn).click();\n          cy.wait(10000);\n          cy.get(applicationLocators.forkButton).first().click({\n            force: true\n          });\n          cy.get(homePage.forkAppWorkspaceButton).should(\"be.visible\");\n          _.agHelper.GetNClick(_.locators._dialogCloseButton);\n          cy.LogOut();\n          cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n          _.homePage.CreateNewApplication();\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Mark application as forkable","suites":["Fork application across workspaces"],"line":119,"code":"  it.skip(\"Mark application as forkable\", () => {","file":"e2e/Regression/ClientSide/OtherUIFeatures/ForkApplication_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Signed user should be able to fork a public forkable app & Check if the forked application has the same dsl as the original","suites":["Fork application across workspaces"],"updatePoint":{"line":9,"column":132,"index":418},"line":9,"code":"  it(\"1. Signed user should be able to fork a public forkable app & Check if the forked application has the same dsl as the original\", function () {\n    const appname = localStorage.getItem(\"AppName\") || \"randomApp\";\n    _.entityExplorer.SelectEntityByName(\"Input1\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"inputUpdate\");\n    _.propPane.TypeTextIntoField(\"defaultvalue\", \"A\");\n    cy.wait(\"@inputUpdate\").then(response => {\n      response.response && (parentApplicationDsl = response.response.body.data.dsl);\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    _.homePage.NavigateToHome();\n    _.homePage.FilterApplication(appname);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.get(_.homePage._applicationCard).first().trigger(\"mouseover\");\n    cy.get(_.homePage._appEditIcon).first().click({\n      force: true\n    });\n    cy.get(_.homePage._applicationName).click({\n      force: true\n    });\n    cy.contains(\"Fork Application\").click({\n      force: true\n    });\n    cy.get(_.locators._forkAppToWorkspaceBtn).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(\"@postForkAppWorkspace\").its(\"status\").should(\"equal\", 200);\n    // check that forked application has same dsl\n    cy.get(\"@getPage\").its(\"response.body.data\").then(data => {\n      forkedApplicationDsl = data.layouts[0].dsl;\n      expect(JSON.stringify(forkedApplicationDsl)).to.contain(JSON.stringify(parentApplicationDsl));\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ForkApplicationWithinAppEditor_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Clicking on filter should show the filter menu","suites":["GlobalSearch"],"updatePoint":{"line":14,"column":55,"index":646},"line":14,"code":"  it(\"1. Clicking on filter should show the filter menu\", () => {\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    cy.contains(globalSearchLocators.docHint, \"snippets\").click();\n    cy.get(globalSearchLocators.filterButton).click();\n    cy.contains(\"Reset Filter\").should(\"be.visible\");\n    cy.get(\"body\").type(\"{esc}\");\n\n    //showsAndHidesUsingKeyboardShortcuts\n    // wait for the page to load\n    cy.get(commonlocators.canvas);\n    const isMac = Cypress.platform === \"darwin\";\n    if (isMac) {\n      cy.get(\"body\").type(\"{cmd}{k}\");\n      cy.get(commonlocators.globalSearchModal);\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    } else {\n      cy.get(\"body\").type(\"{ctrl}{k}\");\n      cy.get(commonlocators.globalSearchModal);\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    }\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. selectsWidget","suites":["GlobalSearch"],"updatePoint":{"line":39,"column":22,"index":1555},"line":39,"code":"  it(\"2. selectsWidget\", () => {\n    const table = dsl.dsl.children[2];\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(table.widgetName);\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        lastSelectedWidget\n      } = state.ui.widgetDragResize;\n      expect(lastSelectedWidget).to.be.equal(table.widgetId);\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. navigatesToApi","suites":["GlobalSearch"],"updatePoint":{"line":55,"column":23,"index":2114},"line":55,"code":"  it(\"3. navigatesToApi\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"SomeApi\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"SomeApi\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        actions\n      } = state.entities;\n      const expectedAction = actions.find(actions => actions.config.name === \"SomeApi\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedAction.config.id);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. navigatesToDatasourceHavingAQuery","suites":["GlobalSearch"],"updatePoint":{"line":82,"column":42,"index":3080},"line":82,"code":"  it(\"4. navigatesToDatasourceHavingAQuery\", () => {\n    cy.createPostgresDatasource();\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      const expectedDatasource = httpResponse.response.body.data;\n      cy.NavigateToActiveDSQueryPane(expectedDatasource.name);\n      cy.get(commonlocators.globalSearchTrigger).click({\n        force: true\n      });\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n      cy.wait(1000); // modal open transition should be deterministic\n      cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n      cy.get(\"body\").type(\"{enter}\");\n      cy.get(commonlocators.globalSearchTrigger).click({\n        force: true\n      });\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n      cy.wait(1000); // modal open transition should be deterministic\n      cy.get(commonlocators.globalSearchInput).type(expectedDatasource.name);\n      cy.get(\"body\").type(\"{enter}\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedDatasource.id);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. navigatesToPage","suites":["GlobalSearch"],"updatePoint":{"line":106,"column":24,"index":4114},"line":106,"code":"  it(\"5. navigatesToPage\", () => {\n    cy.Createpage(\"NewPage\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        pages\n      } = state.entities.pageList;\n      const expectedPage = pages.find(page => page.pageName === \"Page1\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedPage.pageId);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Shortcuts should get triggered when the modal is open","suites":["GlobalSearch"],"updatePoint":{"line":125,"column":62,"index":4797},"line":125,"code":"  it(\"6. Shortcuts should get triggered when the modal is open\", () => {\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    const isMac = Cypress.platform === \"darwin\";\n    if (isMac) {\n      cy.get(\"body\").type(\"{cmd}{p}\");\n      cy.get(globalSearchLocators.category).should(\"be.visible\");\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    } else {\n      cy.get(\"body\").type(\"{ctrl}{p}\");\n      cy.get(globalSearchLocators.category).should(\"be.visible\");\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    }\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Api actions should have API as prefix","suites":["GlobalSearch"],"updatePoint":{"line":142,"column":46,"index":5445},"line":142,"code":"  it(\"7. Api actions should have API as prefix\", () => {\n    cy.get(globalSearchLocators.createNew).click({\n      force: true\n    });\n    cy.get(globalSearchLocators.blankDatasource).first().click({\n      force: true\n    });\n    cy.get(datasourceHomeLocators.createAuthApiDatasource).click();\n    cy.get(datasourceLocators.datasourceTitleLocator).click();\n    cy.get(`${datasourceLocators.datasourceTitleLocator} input`).clear().type(\"omnibarApiDatasource\", {\n      force: true\n    }).blur();\n    cy.fillAuthenticatedAPIForm();\n    cy.saveDatasource();\n    cy.get(globalSearchLocators.createNew).click({\n      force: true\n    });\n    cy.get(\".ads-v2-menu__menu-item span:contains('omnibarApiDatasource')\").first().click();\n    cy.wait(\"@createNewApi\");\n    cy.get(datasourceHomeLocators.apiTxt).invoke(\"val\").then(title => expect(title).includes(\"Api\"));\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["GlobalSearch"],"updatePoint":{"line":167,"column":22,"index":6505},"line":167,"code":"  it(\"excludeForAirgap\", \"8. navigatesToGoogleSheetsQuery does not break again: Bug 15012\", () => {\n    cy.createGoogleSheetsDatasource();\n    cy.renameDatasource(\"XYZ\");\n    cy.wait(4000);\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000); // modal open transition should be deterministic\n    cy.get(commonlocators.globalSearchInput).type(\"XYZ\");\n    cy.get(\".no-data-title\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check whether depedencies and references are shown correctly","suites":["Inspect Entity"],"updatePoint":{"line":6,"column":69,"index":226},"line":6,"code":"  it(\"1. Check whether depedencies and references are shown correctly\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.testJsontext(\"defaultvalue\", \"{{Button1.text}}\");\n    cy.get(\".t--debugger-count\").click();\n    cy.contains(\".ads-v2-tabs__list-tab\", \"Inspect entity\").click();\n    cy.contains(\".t--dependencies-item\", \"Button1\").click();\n    cy.contains(\".t--dependencies-item\", \"Input1\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Inspect_Element_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should check below the fold widgets are getting rendered","suites":["lazy widget component render"],"updatePoint":{"line":6,"column":65,"index":219},"line":6,"code":"  it(\"1. Should check below the fold widgets are getting rendered\", () => {\n    cy.get(\".tableWrap\").should(\"exist\");\n    //should check that widgets present in the tab other than default tab renders\n    cy.get(\".t--tabid-tab2\").trigger(\"click\");\n    cy.get(\".t--draggable-ratewidget .bp3-icon-star\").should(\"exist\");\n\n    //should check that widgets in modal are loading properly\n    cy.get(\".t--draggable-buttonwidget button\").trigger(\"click\", {\n      force: true\n    });\n    cy.get(\".t--draggable-inputwidgetv2 input\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/lazyRender_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Modifying widget properties should log the same","suites":["Debugger logs"],"updatePoint":{"line":25,"column":56,"index":751},"line":25,"code":"  it(\"1. Modifying widget properties should log the same\", function () {\n    ee.DragDropWidgetNVerify(\"buttonwidget\", 200, 200);\n    propPane.UpdatePropertyFieldValue(\"Label\", \"Test\");\n    debuggerHelper.ClickDebuggerIcon(0, true, 0);\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.LogStateContains(\"Test\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Reset debugger state","suites":["Debugger logs"],"updatePoint":{"line":32,"column":29,"index":1053},"line":32,"code":"  it(\"2. Reset debugger state\", function () {\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.testJsontext(\"visible\", \"Test\");\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.generateUUID().then(id => {\n      cy.CreateAppInFirstListedWorkspace(id);\n      debuggerHelper.AssertErrorCount(0);\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Console log on button click with normal moustache binding","suites":["Debugger logs"],"updatePoint":{"line":43,"column":66,"index":1457},"line":43,"code":"  it(\"3. Console log on button click with normal moustache binding\", function () {\n    ee.DragDropWidgetNVerify(\"buttonwidget\", 200, 200);\n    // Testing with normal log in moustache binding\n    propPane.EnterJSContext(\"onClick\", `{{console.log(\"${logString}\")}}`);\n    agHelper.Sleep(2000);\n    agHelper.ClickButton(\"Submit\");\n    debuggerHelper.ClickDebuggerIcon();\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(logString);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Console log on button click with arrow function IIFE","suites":["Debugger logs"],"updatePoint":{"line":53,"column":61,"index":1920},"line":53,"code":"  it(\"4. Console log on button click with arrow function IIFE\", function () {\n    debuggerHelper.ClearLogs();\n    ee.SelectEntityByName(\"Button1\");\n    // Testing with normal log in iifee\n    propPane.EnterJSContext(\"onClick\", `{{(() => {\n          console.log('${logString}');\n        }) () }}`);\n    agHelper.ClickButton(\"Submit\");\n    debuggerHelper.DoesConsoleLogExist(logString);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Console log on button click with function keyword IIFE","suites":["Debugger logs"],"updatePoint":{"line":63,"column":63,"index":2313},"line":63,"code":"  it(\"5. Console log on button click with function keyword IIFE\", function () {\n    debuggerHelper.ClearLogs();\n    ee.SelectEntityByName(\"Button1\");\n    // Testing with normal log in iifee\n    propPane.EnterJSContext(\"onClick\", `{{ function () {\n          console.log('${logString}');\n        } () }}`);\n    agHelper.ClickButton(\"Submit\");\n    debuggerHelper.DoesConsoleLogExist(logString);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Console log on button click with async function IIFE","suites":["Debugger logs"],"updatePoint":{"line":73,"column":61,"index":2709},"line":73,"code":"  it(\"6. Console log on button click with async function IIFE\", function () {\n    debuggerHelper.ClearLogs();\n    // Testing with normal log in iifee\n    ee.SelectEntityByName(\"Button1\");\n    propPane.EnterJSContext(\"onClick\", `{{(async() => {\n          console.log('${logString}');\n        }) () }}`);\n    agHelper.ClickButton(\"Submit\");\n    debuggerHelper.DoesConsoleLogExist(logString);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Console log on button click with mixed function IIFE","suites":["Debugger logs"],"updatePoint":{"line":83,"column":61,"index":3105},"line":83,"code":"  it(\"7. Console log on button click with mixed function IIFE\", function () {\n    debuggerHelper.ClearLogs();\n    // Testing with normal log in iifee\n    ee.SelectEntityByName(\"Button1\");\n    const logStringChild = generateTestLogString();\n    propPane.EnterJSContext(\"onClick\", `{{ function () {\n          console.log('${logString}');\n          (async () => {console.log('${logStringChild}')})();\n        } () }}`);\n    agHelper.ClickButton(\"Submit\");\n    debuggerHelper.DoesConsoleLogExist(logString);\n    debuggerHelper.DoesConsoleLogExist(logStringChild);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"8. Console log grouping on button click","suites":["Debugger logs"],"updatePoint":{"line":96,"column":45,"index":3655},"line":96,"code":"  it(\"8. Console log grouping on button click\", function () {\n    debuggerHelper.ClearLogs();\n    // Testing with normal log in iifee\n    ee.SelectEntityByName(\"Button1\");\n    propPane.EnterJSContext(\"onClick\", `{{ function () {\n          console.log('${logString}');\n          console.log('${logString}');\n          console.log('${logString}');\n          console.log('${logString}');\n          console.log('${logString}');\n        } () }}`);\n    agHelper.ClickButton(\"Submit\");\n    debuggerHelper.DoesConsoleLogExist(logString);\n    debuggerHelper.Assert_Consecutive_Console_Log_Count(5);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"9. Console log grouping on button click with different log in between","suites":["Debugger logs"],"updatePoint":{"line":111,"column":75,"index":4281},"line":111,"code":"  it(\"9. Console log grouping on button click with different log in between\", function () {\n    debuggerHelper.ClearLogs();\n    // Testing with normal log in iifee\n    ee.SelectEntityByName(\"Button1\");\n    propPane.EnterJSContext(\"onClick\", `{{ function () {\n          console.log('${logString}');\n          console.log('${logString}');\n          console.log('Different ${logString}');\n          console.log('${logString}');\n        } () }}`);\n    agHelper.ClickButton(\"Submit\");\n    debuggerHelper.DoesConsoleLogExist(logString);\n    debuggerHelper.DoesConsoleLogExist(`Different ${logString}`);\n    debuggerHelper.Assert_Consecutive_Console_Log_Count(2);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"10. Console log grouping on button click from different source","suites":["Debugger logs"],"updatePoint":{"line":126,"column":68,"index":4937},"line":126,"code":"  it(\"10. Console log grouping on button click from different source\", function () {\n    debuggerHelper.ClearLogs();\n    // Testing with normal log in iifee\n    ee.SelectEntityByName(\"Button1\");\n    propPane.EnterJSContext(\"onClick\", `{{console.log(\"${logString}\")}}`);\n    // Add another button\n    ee.DragDropWidgetNVerify(\"buttonwidget\", 400, 400);\n    propPane.UpdatePropertyFieldValue(\"Label\", \"Submit2\");\n    propPane.EnterJSContext(\"onClick\", `{{console.log(\"${logString}\")}}`);\n    agHelper.Sleep(2000);\n    agHelper.ClickButton(\"Submit\");\n    agHelper.ClickButton(\"Submit2\");\n    debuggerHelper.DoesConsoleLogExist(logString);\n    debuggerHelper.Assert_Consecutive_Console_Log_Count(0);\n    propPane.DeleteWidgetFromPropertyPane(\"Button1\");\n    propPane.DeleteWidgetFromPropertyPane(\"Button2\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs1_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Console log on text widget with normal moustache binding","suites":["Debugger logs"],"updatePoint":{"line":27,"column":65,"index":828},"line":27,"code":"  it(\"1. Console log on text widget with normal moustache binding\", function () {\n    ee.NavigateToSwitcher(\"Widgets\");\n    agHelper.TypeText(locator._entityExplorersearch, \"Text\");\n    ee.DragDropWidgetNVerify(\"textwidget\", 400, 400);\n    propPane.UpdatePropertyFieldValue(\"Text\", `{{(function(){\n  \tconst temp = \"Hello!\"\n\n  \tconsole.log(\"${logString}\");\n  \treturn temp;\n  })()}}`);\n    agHelper.RefreshPage();\n    // Wait for the debugger icon to be visible\n    agHelper.AssertElementVisible(\".t--debugger-count\");\n    debuggerHelper.ClickDebuggerIcon();\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(logString);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Console log in sync function","suites":["Debugger logs"],"updatePoint":{"line":44,"column":37,"index":1457},"line":44,"code":"  it(\"2. Console log in sync function\", function () {\n    ee.NavigateToSwitcher(\"Explorer\");\n    jsEditor.CreateJSObject(`export default {\n        myFun1: () => {\n  \t      console.log(\"${logString}\");\n  \t      return \"sync\";\n        },\n        myFun2: () => {\n          return 1;\n        }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: true,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(logString);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Console log in async function","suites":["Debugger logs"],"updatePoint":{"line":64,"column":38,"index":1991},"line":64,"code":"  it(\"3. Console log in async function\", function () {\n    ee.NavigateToSwitcher(\"Explorer\");\n    jsEditor.CreateJSObject(`export default {\n        myFun1: async () => {\n  \t      console.log(\"${logString}\");\n  \t      return \"async\";\n        },\n        myFun2: () => {\n          return 1;\n        }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: false,\n      prettify: false\n    });\n\n    // Edit JSObject and verify no logs are visible\n    jsEditor.EditJSObj(`export default {\n      myFun1: async () => {\n        console.log(\"${logString}\");\n        return \"async\";\n      },\n      myFun2: () => {\n        return 2;\n      }\n    }`);\n    debuggerHelper.DoesConsoleLogExist(logString, false);\n\n    // Run function and verify logs are visible\n    agHelper.GetNClick(jsEditor._runButton);\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(logString);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Console log after API succedes","suites":["Debugger logs"],"updatePoint":{"line":99,"column":39,"index":2936},"line":99,"code":"  it(\"4. Console log after API succedes\", function () {\n    ee.NavigateToSwitcher(\"Explorer\");\n    apiPage.CreateAndFillApi(dataSet.baseUrl + dataSet.methods, \"Api1\");\n    const returnText = \"success\";\n    jsEditor.CreateJSObject(`export default {\n        myFun1: async () => {\n          return storeValue(\"test\", \"test\").then(() => {\n            console.log(\"${logString} Started\");\n            return Api1.run().then(()=>{\n              console.log(\"${logString} Success\");\n              return \"${returnText}\";\n            }).catch(()=>{\n              console.log(\"${logString} Failed\");\n              return \"fail\";\n            });\n          });\n        },\n        myFun2: () => {\n          return 1;\n        }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"@jsObjName\").then(jsObjName => {\n      agHelper.Sleep(2000);\n      jsEditor.RunJSObj();\n      agHelper.GetNClick(jsEditor._logsTab);\n      debuggerHelper.DoesConsoleLogExist(`${logString} Started`);\n      debuggerHelper.DoesConsoleLogExist(`${logString} Success`);\n      ee.DragDropWidgetNVerify(\"textwidget\", 200, 600);\n      propPane.UpdatePropertyFieldValue(\"Text\", `{{${jsObjName}.myFun1.data}}`);\n      agHelper.GetNAssertElementText(commonlocators.textWidgetContainer, returnText, \"have.text\", 1);\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Console log after API execution fails","suites":["Debugger logs"],"updatePoint":{"line":136,"column":46,"index":4309},"line":136,"code":"  it(\"5. Console log after API execution fails\", function () {\n    ee.NavigateToSwitcher(\"Explorer\");\n    apiPage.CreateAndFillApi(dataSet.baseUrl + dataSet.methods + \"xyz\", \"Api2\");\n    jsEditor.CreateJSObject(`export default {\n        myFun1: async () => {\n          console.log(\"${logString} Started\");\n          return Api2.run().then(()=>{\n            console.log(\"${logString} Success\");\n            return \"success\";\n          }).catch(()=>{\n            console.log(\"${logString} Failed\");\n            return \"fail\";\n          });\n        },\n        myFun2: () => {\n          return 1;\n        }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    jsEditor.RunJSObj();\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(`${logString} Started`);\n    debuggerHelper.DoesConsoleLogExist(`${logString} Failed`);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Console log source inside nested function","suites":["Debugger logs"],"updatePoint":{"line":164,"column":50,"index":5238},"line":164,"code":"  it(\"6. Console log source inside nested function\", function () {\n    jsEditor.CreateJSObject(`export default {\n        myFun1: async () => {\n          console.log(\"Parent ${logString}\");\n          return Api1.run(()=>{console.log(\"Child ${logString}\");});\n        },\n        myFun2: () => {\n          return 1;\n        }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: false\n    });\n    jsEditor.RunJSObj();\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(`Parent ${logString}`);\n    debuggerHelper.DoesConsoleLogExist(`Child ${logString}`);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Console log grouping","suites":["Debugger logs"],"updatePoint":{"line":184,"column":29,"index":5861},"line":184,"code":"  it(\"7. Console log grouping\", function () {\n    jsEditor.CreateJSObject(`export default {\n        myFun1: async () => {\n          console.log(\"${logString}\");\n          console.log(\"${logString}\");\n          console.log(\"${logString}\");\n          console.log(\"${logString}\");\n          console.log(\"${logString}\");\n        },\n        myFun2: () => {\n          return 1;\n        }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    jsEditor.RunJSObj();\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(`${logString}`);\n    debuggerHelper.Assert_Consecutive_Console_Log_Count(5);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"8. Console log should not mutate the passed object","suites":["Debugger logs"],"updatePoint":{"line":207,"column":56,"index":6581},"line":207,"code":"  it(\"8. Console log should not mutate the passed object\", function () {\n    ee.NavigateToSwitcher(\"Explorer\");\n    jsEditor.CreateJSObject(`export default {\n        myFun1: () => {\n  \t      let data = [];\n          console.log(\"start:\", data);\n          for(let i=0; i<5; i++)\n            data.push(i);\n          console.log(\"end:\", JSON.stringify(data));\n          return data;\n        },\n        myFun2: () => {\n          return 1;\n        }\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: true,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(\"start: []\");\n    debuggerHelper.DoesConsoleLogExist(\"end: [0,1,2,3,4]\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"9. Bug #19115 - Objects that start with an underscore `_JSObject1` fail to be navigated from the debugger","suites":["Debugger logs"],"updatePoint":{"line":232,"column":111,"index":7386},"line":232,"code":"  it(\"9. Bug #19115 - Objects that start with an underscore `_JSObject1` fail to be navigated from the debugger\", function () {\n    const JSOBJECT_WITH_UNNECCESARY_SEMICOLON = `export default {\n        myFun1: () => {\n            //write code here\n            if (1) {\n                return true;;\n            };\n        }\n    }\n    `;\n    jsEditor.CreateJSObject(JSOBJECT_WITH_UNNECCESARY_SEMICOLON, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    ee.SelectEntityByName(\"Page1\", \"Pages\");\n    agHelper.GetNClick(locator._errorTab);\n    debuggerHelper.ClicklogEntityLink(0);\n    cy.get(\".t--js-action-name-edit-field\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Logs2_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug #15104  Docs tab opens after clicking on learn more link from property pane","suites":["Omnibar functionality test cases"],"updatePoint":{"line":11,"column":88,"index":511},"line":11,"code":"  it(\"1. Bug #15104  Docs tab opens after clicking on learn more link from property pane\", function () {\n    cy.dragAndDropToCanvas(\"audiowidget\", {\n      x: 300,\n      y: 500\n    });\n    _.agHelper.AssertNewTabOpened(() => {\n      cy.xpath('//span[text()=\"Learn more\"]').click();\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.Verify omnibar is present across all pages and validate its fields","suites":["Omnibar functionality test cases"],"updatePoint":{"line":20,"column":74,"index":792},"line":20,"code":"  it(\"2.Verify omnibar is present across all pages and validate its fields\", function () {\n    cy.get(omnibar.globalSearch).trigger(\"mouseover\").should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    // verifying all sections are present in omnibar\n    cy.get(omnibar.categoryTitle).eq(0).should(\"have.text\", \"Navigate\").next().should(\"have.text\", \"Navigate to any page, widget or file across this project.\");\n    cy.get(omnibar.categoryTitle).eq(1).should(\"have.text\", \"Create new\").next().should(\"have.text\", \"Create a new query, API or JS Object\");\n    cy.get(omnibar.categoryTitle).eq(2).should(\"have.text\", \"Use snippets\").next().should(\"have.text\", \"Search and insert code snippets to perform complex actions quickly.\");\n    cy.get(omnibar.categoryTitle).eq(3).should(\"have.text\", \"Search documentation\").next().should(\"have.text\", \"Find answers through Appsmith documentation.\");\n    cy.get(\"body\").type(\"{esc}\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify when user clicks on a debugging error, related documentation should open in omnibar","suites":["Omnibar functionality test cases"],"updatePoint":{"line":32,"column":99,"index":1822},"line":32,"code":"  it(\"3. Verify when user clicks on a debugging error, related documentation should open in omnibar\", function () {\n    // click on debugger icon\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.errorTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(1000);\n    // click on open documention from error tab\n    cy.get(commonlocators.debuggerDescription).next().first().click();\n    cy.xpath(commonlocators.openDocumentationfromErrorTab).first().click({\n      force: true\n    });\n    // Commenting this as in epic 16804\n    // Decided not to have any default text in documentation.\n    // verify omnibar is opened with relevant documentation\n    // cy.get(omnibar.globalSearchInput).should(\n    //   \"have.value\",\n    //   \"This value does not evaluate to type string\",\n    // );\n    // cy.get(omnibar.globalSearchClose).click();\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Verify Create new section and its data, also create a new api, new js object and new cURL import from omnibar ","suites":["Omnibar functionality test cases"],"updatePoint":{"line":56,"column":119,"index":2766},"line":56,"code":"  it(\"4. Verify Create new section and its data, also create a new api, new js object and new cURL import from omnibar \", function () {\n    cy.intercept(\"POST\", \"/api/v1/actions\").as(\"createNewApi\");\n    cy.intercept(\"POST\", \"/api/v1/collections/actions\").as(\"createNewJSCollection\");\n    cy.get(omnibar.categoryTitle).contains(\"Create new\").click();\n\n    // create new api, js object and cURL import from omnibar\n    cy.get(omnibar.createNew).contains(\"New JS Object\").click();\n    cy.wait(1000);\n    cy.wait(\"@createNewJSCollection\");\n    cy.wait(1000);\n    cy.get(\".t--js-action-name-edit-field\").type(jsObjectName).wait(1000);\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.get(omnibar.categoryTitle).contains(\"Create new\").click();\n    cy.wait(1000);\n    cy.get(omnibar.createNew).contains(\"New blank API\").click();\n    cy.wait(1000);\n    cy.wait(\"@createNewApi\");\n    cy.renameWithInPane(apiName);\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.get(omnibar.categoryTitle).contains(\"Create new\").click();\n    cy.wait(1000);\n    cy.get(omnibar.createNew).contains(\"New cURL import\").click();\n    cy.wait(1000);\n    cy.url().should(\"include\", \"curl-import?\");\n    cy.get('p:contains(\"Import from CURL\")').should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Omnibar functionality test cases"],"updatePoint":{"line":86,"column":22,"index":3959},"line":86,"code":"  it(\"excludeForAirgap\", \"5. On an invalid search, discord link should be displayed and on clicking that link, should open discord in new tab\", function () {\n    // typing a random string in search bar\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(omnibar.globalSearchInput).type(\"vnjkv\");\n    cy.wait(2000);\n    cy.get(omnibar.globalSearchInput).should(\"have.value\", \"vnjkv\");\n    // discord link should be visible\n    cy.get(omnibar.discordLink).should(\"be.visible\");\n    cy.window().then(win => {\n      cy.stub(win, \"open\", url => {\n        win.location.href = \"https://discord.com/invite/rBTTVJp\";\n      }).as(\"discordLink\");\n    });\n    // clicking on discord link should open discord\n    cy.get(omnibar.discordLink).click();\n    cy.get(\"@discordLink\").should(\"be.called\");\n    cy.wait(500);\n    cy.go(-1);\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Verify Navigate section shows recently opened widgets and datasources","suites":["Omnibar functionality test cases"],"updatePoint":{"line":109,"column":78,"index":4903},"line":109,"code":"  it(\"6. Verify Navigate section shows recently opened widgets and datasources\", function () {\n    _.entityExplorer.SelectEntityByName(\"Button1\", \"Widgets\");\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.get(omnibar.categoryTitle).contains(\"Navigate\").click();\n    // verify recently opened items with their subtext i.e page name\n    cy.xpath(omnibar.recentlyopenItem).eq(0).should(\"have.text\", \"Button1\").next().should(\"have.text\", \"Page1\");\n    cy.xpath(omnibar.recentlyopenItem).eq(1).should(\"have.text\", \"Omnibar1\").next().should(\"have.text\", \"Page1\");\n    cy.xpath(omnibar.recentlyopenItem).eq(2).should(\"have.text\", \"Omnibar2\").next().should(\"have.text\", \"Page1\");\n    cy.xpath(omnibar.recentlyopenItem).eq(3).should(\"have.text\", \"Audio1\").next().should(\"have.text\", \"Page1\");\n    cy.xpath(omnibar.recentlyopenItem).eq(4).should(\"have.text\", \"Page1\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Omnibar functionality test cases"],"updatePoint":{"line":122,"column":22,"index":5739},"line":122,"code":"  it(\"excludeForAirgap\", \"7. Verify documentation should open in new tab, on clicking open documentation\", function () {\n    //cy.get(omnibar.category).click()\n    cy.get(omnibar.globalSearch).click({\n      force: true\n    });\n    cy.get(omnibar.categoryTitle).contains(\"Search documentation\").click({\n      force: true\n    });\n    cy.get(omnibar.openDocumentationLink).invoke(\"removeAttr\", \"target\").click().wait(2000);\n    cy.url().should(\"contain\", \"https://docs.appsmith.com/core-concepts/connecting-to-data-sources\"); // => true\n    cy.go(-1);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Omnibar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check debugger logs state when there are onPageLoad actions","suites":["Check debugger logs state when there are onPageLoad actions"],"updatePoint":{"line":9,"column":68,"index":471},"line":9,"code":"  it(\"1. Check debugger logs state when there are onPageLoad actions\", function () {\n    _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    _.propPane.UpdatePropertyFieldValue(\"Table data\", \"{{TestApi.data.users}}\");\n    _.apiPage.CreateAndFillApi(testdata.baseUrl + testdata.methods, \"TestApi\");\n    _.apiPage.RunAPI();\n    _.agHelper.GetNClick(explorer.addWidget);\n    _.agHelper.RefreshPage();\n    // Wait for the debugger icon to be visible\n    _.agHelper.AssertElementVisible(\".t--debugger-count\");\n    // debuggerHelper.isErrorCount(0);\n    cy.wait(\"@postExecute\");\n    _.debuggerHelper.AssertErrorCount(1);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/PageOnLoad_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checks entity explorer and property pane visiblity","suites":["Preview mode functionality"],"updatePoint":{"line":9,"column":59,"index":433},"line":9,"code":"  it(\"1. Checks entity explorer and property pane visiblity\", function () {\n    _.agHelper.GetNClick(_.locators._previewModeToggle(\"edit\"));\n    // in preview mode, entity explorer and property pane are not visible\n    cy.get(\".t--entity-explorer\").should(\"not.be.visible\");\n    cy.get(\".t--property-pane-sidebar\").should(\"not.be.visible\");\n\n    //checks if widgets can be selected or not\n    // in preview mode, entity explorer and property pane are not visible\n    // Also, draggable and resizable components are not available.\n    const selector = `.t--draggable-buttonwidget`;\n    cy.wait(500);\n    cy.get(selector).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    cy.get(`${selector}:first-of-type .t--widget-propertypane-toggle > .t--widget-name`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/PreviewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check invisible widget should not show in proview mode and should show in edit mode","suites":["Preview mode functionality"],"updatePoint":{"line":25,"column":92,"index":1269},"line":25,"code":"  it(\"2. Check invisible widget should not show in proview mode and should show in edit mode\", function () {\n    _.agHelper.GetNClick(_.locators._previewModeToggle(\"preview\"));\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n\n    // button should not show in preview mode\n    _.agHelper.GetNClick(_.locators._previewModeToggle(\"edit\"));\n    cy.get(`${publishPage.buttonWidget} button`).should(\"not.exist\");\n\n    // Text widget should show\n    cy.get(`${publishPage.textWidget} .bp3-ui-text`).should(\"exist\");\n\n    // button should show in edit mode\n    _.agHelper.GetNClick(_.locators._previewModeToggle(\"preview\"));\n    cy.get(`${publishPage.buttonWidget} button`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/PreviewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if we should show the product updates button and it opens the updates modal","suites":["Check for product updates button and modal"],"updatePoint":{"line":3,"column":90,"index":236},"line":3,"code":"  it(\"1. Check if we should show the product updates button and it opens the updates modal\", function () {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        newReleasesCount,\n        releaseItems\n      } = state.ui.releases;\n      if (Array.isArray(releaseItems) && releaseItems.length > 0) {\n        cy.get(\"span.t--product-updates-btn\").contains(\"What's new?\").click({\n          force: true\n        });\n        //eslint-disable-next-line cypress/no-unnecessary-waiting\n        cy.wait(500); // modal transition\n        cy.get(\"div[role='dialog']\").contains(\"Product updates\");\n        cy.get(\"div[role=dialog] button[aria-label='Close']\").click();\n        //eslint-disable-next-line cypress/no-unnecessary-waiting\n        cy.wait(500); // modal transition\n        cy.get(\".ads-v2-modal__content\").should(\"not.exist\");\n      } else {\n        cy.get(\"span.t--product-updates-btn\").should(\"not.exist\");\n      }\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ProductUpdates_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should redirect away from auth pages if already logged in","suites":["Check for redirects associated with auth pages"],"updatePoint":{"line":2,"column":66,"index":140},"line":2,"code":"  it(\"1. Should redirect away from auth pages if already logged in\", function () {\n    const loginPageRoute = \"/user/login\";\n    cy.visit(loginPageRoute);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.location(\"pathname\").should(\"not.equal\", loginPageRoute);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Redirects_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checks undo/redo in datasource forms","suites":["Undo/Redo functionality"],"updatePoint":{"line":11,"column":45,"index":702},"line":11,"code":"  it(\"1. Checks undo/redo in datasource forms\", () => {\n    _.dataSources.NavigateToDSCreateNew();\n    cy.get(datasource.PostgreSQL).click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n    });\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.get(datasourceEditor.username).type(datasourceFormData[\"postgres-username\"]);\n    cy.get(datasourceEditor.password).type(datasourceFormData[\"postgres-password\"]);\n    cy.get(datasourceEditor.sectionAuthentication).trigger(\"click\").wait(1000);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(`${datasourceEditor.sectionAuthentication} .ads-v2-icon`).should(\"exist\");\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\".ads-v2-menu__menu-item-children:contains(Edit)\").eq(1).click();\n    cy.get(\".ads-v2-menu__menu-item-children:contains(Undo)\").click({\n      multiple: true\n    });\n    cy.get(datasourceEditor.username).should(\"be.empty\");\n    cy.get(datasourceEditor.saveBtn).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checks undo/redo for Api pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":41,"column":38,"index":1982},"line":41,"code":"  it(\"2. Checks undo/redo for Api pane\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(`${apiwidget.resourceUrl} .CodeMirror-placeholder`).should(\"have.text\", \"https://mock-api.appsmith.com/users\" //testing placeholder!\n    );\n\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(`${apiwidget.headerKey}`).type(\"Authorization\");\n    cy.get(\"body\").click(0, 0);\n    cy.get(apiwidget.settings).click({\n      force: true\n    });\n    //cy.get(apiwidget.onPageLoad).click({ force: true });\n    cy.get(\"body\").click(0, 0);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    // cy.wait(2000);\n    // cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(2000);\n    cy.get(\"body\").click(0, 0);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(apiwidget.headers).parent().should(\"have.attr\", \"aria-selected\", \"true\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(`${apiwidget.resourceUrl} .CodeMirror-placeholder`).should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.get(`${apiwidget.headerKey} .CodeMirror-placeholder`).should(\"have.text\", \"Key 1\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(`${apiwidget.headerKey} .cm-m-null`).should(\"have.text\", \"Authorization\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checks undo/redo in query editor","suites":["Undo/Redo functionality"],"updatePoint":{"line":70,"column":41,"index":3381},"line":70,"code":"  it(\"3. Checks undo/redo in query editor\", () => {\n    cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{{FirstAPI}}\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.get(\"body\").click(0, 0);\n    // verifying Relationships is visible on dynamic binding\n    cy.get(\".icon-text\").eq(1).within(() => {\n      cy.get(\".connection-type\").should(\"have.text\", \"Incoming entities\");\n    });\n    cy.get(\".connection span\").should(\"have.text\", \"FirstAPI\");\n    cy.get(\".icon-text\").last().within(() => {\n      cy.get(\".connection-type\").should(\"have.text\", \"Outgoing entities\");\n    });\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(\".CodeEditorTarget textarea\").should(\"not.have.text\", \"{{FirstAPI}}\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\".CodeMirror-code span\").contains(\"{{FirstAPI}}\");\n    // undo/edo through app menu\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\".ads-v2-menu__menu-item-children:contains(Edit)\").eq(1).click();\n    cy.get(\".ads-v2-menu__menu-item-children:contains(Undo)\").click({\n      multiple: true\n    });\n    cy.get(\".CodeMirror-code span\").last().should(\"not.have.text\", \"{{FirstAPI}}\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Checks undo/redo in JS Objects","suites":["Undo/Redo functionality"],"updatePoint":{"line":100,"column":39,"index":4706},"line":100,"code":"  it(\"4. Checks undo/redo in JS Objects\", () => {\n    _.jsEditor.NavigateToNewJSEditor();\n    cy.wait(1000);\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{downarrow}{downarrow}{downarrow}  \").type(\"testJSFunction:()=>{},\");\n    cy.get(\"body\").type(`{${modifierKey}}z{${modifierKey}}z{${modifierKey}}z`);\n    // verifying testJSFunction is not visible on page after undo\n    cy.contains(\"testJSFunction\").should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z{${modifierKey}}{shift}z{${modifierKey}}{shift}z`);\n    // verifying testJSFunction is visible on page after redo\n    cy.contains(\"testJSFunction\").should(\"exist\");\n    // performing undo from app menu\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\".ads-v2-menu__menu-item-children:contains(Edit)\").eq(1).click();\n    cy.get(\".ads-v2-menu__menu-item-children:contains(Undo)\").click({\n      multiple: true\n    });\n    // cy.get(\".function-name\").should(\"not.contain.text\", \"test\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Checks undo/redo for Authenticated APIs","suites":["Undo/Redo functionality"],"line":122,"code":"  it.skip(\"5. Checks undo/redo for Authenticated APIs\", () => {","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_Editor_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. checks undo/redo for new widgets","suites":["Undo/Redo functionality"],"updatePoint":{"line":12,"column":41,"index":630},"line":12,"code":"  it(\"1. checks undo/redo for new widgets\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"checkboxwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.get(\"body\").click();\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. checks undo/redo for toggle control in property pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":73,"column":61,"index":2715},"line":73,"code":"  it(\"2. checks undo/redo for toggle control in property pane\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(`${widgetsPage.disable} input`).should(\"not.be.checked\");\n    cy.get(widgetLocators.checkboxWidget + \" \" + \"input\").should(\"not.be.disabled\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(`${widgetsPage.disable} input`).should(\"be.checked\");\n    cy.get(widgetLocators.checkboxWidget + \" \" + \"input\").should(\"be.disabled\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. checks undo/redo for input control in property pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":85,"column":60,"index":3338},"line":85,"code":"  it(\"3. checks undo/redo for input control in property pane\", function () {\n    cy.get(widgetsPage.inputLabelControl).type(\"1\");\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label1\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label\");\n    cy.get(`${publish.checkboxWidget} label`).should(\"have.text\", \"Label\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label1\");\n    cy.get(`${publish.checkboxWidget} label`).should(\"have.text\", \"Label1\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. checks undo/redo for deletion of widgets","suites":["Undo/Redo functionality"],"updatePoint":{"line":97,"column":49,"index":3936},"line":97,"code":"  it(\"4. checks undo/redo for deletion of widgets\", function () {\n    cy.deleteWidget(widgetsPage.checkboxWidget);\n    cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\");\n\n    // cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    // cy.wait(100);\n    // cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. checks if property Pane is open on undo/redo property changes","suites":["Undo/Redo functionality"],"updatePoint":{"line":109,"column":70,"index":4400},"line":109,"code":"  it(\"5. checks if property Pane is open on undo/redo property changes\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.wait(100);\n    cy.get(widgetsPage.inputTextControl).type(\"1\");\n    cy.closePropertyPane();\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.propertypaneText).should(\"exist\");\n    cy.get(widgetsPage.inputTextControl).contains(\"Label\");\n    cy.closePropertyPane();\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.propertypaneText).should(\"exist\");\n    cy.get(widgetsPage.inputTextControl).contains(\"Label1\");\n    cy.deleteWidget(widgetsPage.textWidget);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. checks if toast is shown while undo/redo widget deletion or creation only the first time","suites":["Undo/Redo functionality"],"updatePoint":{"line":128,"column":97,"index":5141},"line":128,"code":"  it(\"6. checks if toast is shown while undo/redo widget deletion or creation only the first time\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    localStorage.removeItem(\"undoToastShown\");\n    localStorage.removeItem(\"redoToastShown\");\n    cy.focused().blur();\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(commonlocators.toastmsg).contains(\"is removed\");\n    cy.get(commonlocators.toastmsg).contains(\"redo\");\n    cy.get(commonlocators.toastBody).first().click({\n      force: true\n    });\n    cy.wait(100);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(commonlocators.toastmsg).contains(\"is added back\");\n    cy.get(commonlocators.toastmsg).contains(\"undo\");\n    cy.deleteWidget(widgetsPage.textWidget);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. checks undo/redo for color picker","suites":["Undo/Redo functionality"],"updatePoint":{"line":148,"column":42,"index":5875},"line":148,"code":"  it(\"7. checks undo/redo for color picker\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 100,\n      y: 100\n    });\n    cy.moveToStyleTab();\n    cy.selectColor(\"textcolor\");\n    cy.get(\"body\").click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(126, 34, 206)\");\n    cy.get(\"body\").click({\n      force: true\n    }).type(`{${modifierKey}}z`);\n    cy.get(widgetsPage.textColor).first().invoke(\"attr\", \"value\").should(\"contain\", \"#231F20\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(widgetsPage.textColor).first().invoke(\"attr\", \"value\").should(\"contain\", \"#7e22ce\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. checks undo/redo for option control for radio button","suites":["Undo/Redo functionality"],"updatePoint":{"line":169,"column":61,"index":6645},"line":169,"code":"  it(\"8. checks undo/redo for option control for radio button\", function () {\n    cy.dragAndDropToCanvas(\"radiogroupwidget\", {\n      x: 200,\n      y: 600\n    });\n    cy.get(widgetsPage.RadioInput).first().type(\"1\");\n    cy.get(widgetsPage.RadioInput).first().blur();\n\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(200);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(widgetsPage.RadioInput).first().invoke(\"attr\", \"value\").should(\"contain\", \"Yes\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(widgetsPage.RadioInput).first().invoke(\"attr\", \"value\").should(\"contain\", \"Yes1\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Deleting bottom widget should resize canvas","suites":["Canvas Resize"],"updatePoint":{"line":8,"column":52,"index":338},"line":8,"code":"  it(\"1. Deleting bottom widget should resize canvas\", function () {\n    const InitHeight = \"2950px\";\n    cy.get(commonlocators.dropTarget).should(\"have.css\", \"height\", InitHeight);\n    cy.openPropertyPane(\"textwidget\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"deleteUpdate\");\n    _.propPane.DeleteWidgetFromPropertyPane(\"Text2\");\n    cy.wait(\"@deleteUpdate\").then(response => {\n      const dsl = response.response.body.data.dsl;\n      cy.get(commonlocators.dropTarget).should(\"have.css\", \"height\", `${dsl.minHeight - 12}px` // Reducing 12 px for container padding.\n      );\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Trigger errors need to be shown in the errors tab","suites":["Trigger errors in the debugger"],"updatePoint":{"line":8,"column":58,"index":353},"line":8,"code":"  it(\"1. Trigger errors need to be shown in the errors tab\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", `[{\"name\": 1}, {\"name\": 2}]`);\n    cy.focused().blur();\n    cy.get(\".t--property-control-onrowselected\").find(\".t--js-toggle\").click();\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"onrowselected\", \"{{console.logs('test')}}\");\n    // Click on a row of the table widget\n    cy.isSelectRow(1);\n    cy.wait(5000);\n    //should be 2 if we decide to show trigger errors in the debugger.\n    debuggerHelper.AssertErrorCount(1);\n    // Fix code\n    cy.testJsontext(\"onrowselected\", \"{{console.log('test')}}\");\n    cy.isSelectRow(1);\n    debuggerHelper.AssertErrorCount(1);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/TriggerErrors_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should not create duplicate versions of widget on drop from explorer","suites":["Unique react keys"],"updatePoint":{"line":19,"column":77,"index":994},"line":19,"code":"  it(\"1. Should not create duplicate versions of widget on drop from explorer\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"chartwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 200,\n      y: 600\n    });\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 200,\n      y: 700\n    });\n    cy.openPropertyPane(\"chartwidget\");\n    cy.deleteWidget(widgetsPage.chartWidget);\n    cy.get(widgetsPage.selectwidget).should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Unique_key_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should not create duplicate versions of widget on widget copy","suites":["Unique react keys"],"updatePoint":{"line":37,"column":70,"index":1515},"line":37,"code":"  it(\"2. Should not create duplicate versions of widget on widget copy\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"chartwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 200,\n      y: 600\n    });\n    //copy and paste\n    cy.openPropertyPane(\"selectwidget\");\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.selectwidget).should(\"have.length\", 2);\n    cy.openPropertyPane(\"chartwidget\");\n    cy.deleteWidget(widgetsPage.chartWidget);\n    cy.get(widgetsPage.selectwidget).should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Unique_key_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Open the application menu and update name and then check whether update is reflected in the application card","suites":["Update Application"],"updatePoint":{"line":8,"column":117,"index":635},"line":8,"code":"  it(\"1. Open the application menu and update name and then check whether update is reflected in the application card\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).clear();\n    cy.get(homePage.searchInput).type(appname);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.applicationName).type(`${appname} updated` + \"{enter}\");\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.applicationCardName).should(\"contain\", appname);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Open the application menu and update icon and then check whether update is reflected in the application card","suites":["Update Application"],"updatePoint":{"line":24,"column":117,"index":1387},"line":24,"code":"  it(\"2. Open the application menu and update icon and then check whether update is reflected in the application card\", () => {\n    cy.get(homePage.applicationIconSelector).first().click();\n    cy.wait(\"@updateApplication\").then(xhr => {\n      iconname = xhr.response.body.data.icon;\n    }).should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.applicationCard).first().within(() => {\n      cy.get(\"a\").invoke(\"attr\", \"name\").should(\"equal\", iconname);\n    });\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check for errors in updating application name","suites":["Update Application"],"updatePoint":{"line":33,"column":54,"index":1831},"line":33,"code":"  it(\"3. Check for errors in updating application name\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear();\n    cy.get(homePage.searchInput).type(appname);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).first().click({\n      force: true\n    });\n    cy.get(\"#loading\").should(\"not.exist\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.AppSetupForRename();\n    cy.get(homePage.applicationName).type(\"  \");\n    cy.get(homePage.toastMessage).should(\"contain\", \"Application name can't be empty\");\n    cy.AppSetupForRename();\n    cy.get(homePage.applicationName).type(\"  \" + \"{enter}\");\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.data.name\", `${appname} updated`);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Updates the name of first application to very long name and checks whether update is reflected in the application card with no popover","suites":["Update Application"],"updatePoint":{"line":55,"column":143,"index":2870},"line":55,"code":"  it(\"4. Updates the name of first application to very long name and checks whether update is reflected in the application card with no popover\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear();\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.applicationName).type(veryLongAppName + \"{enter}\");\n    cy.get(homePage.appsContainer).click({\n      force: true\n    });\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(homePage.searchInput).type(veryLongAppName);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().find(homePage.applicationCardName).trigger(\"mouseover\");\n    cy.get(\".bp3-popover-target.bp3-popover-open\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. on click of apps on header, it should take to application home page","suites":["Preview mode functionality"],"updatePoint":{"line":22,"column":76,"index":715},"line":22,"code":"  it(\"1. on click of apps on header, it should take to application home page\", function () {\n    cy.get(appNavigationLocators.userProfileDropdownButton).should(\"exist\");\n    cy.get(`${appNavigationLocators.header} ${appNavigationLocators.backToAppsButton}`).click();\n    cy.url().should(\"eq\", BASE_URL + \"applications\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ViewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. In the published app with embed=true, there should be no header","suites":["Preview mode functionality"],"updatePoint":{"line":27,"column":72,"index":1038},"line":27,"code":"  it(\"2. In the published app with embed=true, there should be no header\", function () {\n    cy.url().then(url => {\n      url = new URL(url);\n      url.searchParams.append(\"embed\", \"true\");\n      cy.visit(url.toString());\n    });\n    cy.get(appNavigationLocators.header).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ViewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. In the published app with embed=true&navbar=true, navigator should be visible without user settings","suites":["Preview mode functionality"],"updatePoint":{"line":35,"column":108,"index":1372},"line":35,"code":"  it(\"3. In the published app with embed=true&navbar=true, navigator should be visible without user settings\", function () {\n    cy.url().then(url => {\n      url = new URL(url);\n      url.searchParams.append(\"embed\", \"true\");\n      url.searchParams.append(\"navbar\", \"true\");\n      cy.visit(url.toString());\n    });\n    cy.get(appNavigationLocators.header).should(\"exist\");\n    cy.get(appNavigationLocators.userProfileDropdownButton).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/ViewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check widget error state","suites":["Widget error state"],"updatePoint":{"line":10,"column":33,"index":446},"line":10,"code":"  it(\"1. Check widget error state\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"visible\", \"Test\");\n    cy.contains(\".t--widget-error-count\", 1);\n\n    //Check if the current value is shown in the debugger\n\n    _.debuggerHelper.ClickDebuggerIcon();\n    cy.get(\"[data-testid=t--tab-ERROR]\").click();\n    //This feature is disabled in updated error log - epic 17720\n    // _.debuggerHelper.LogStateContains(\"Test\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Switch to error tab when clicked on the debug button","suites":["Widget error state"],"updatePoint":{"line":25,"column":61,"index":1030},"line":25,"code":"  it(\"2. Switch to error tab when clicked on the debug button\", function () {\n    cy.get(\"[data-testid=t--tab-LOGS_TAB]\").click();\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click();\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"onclick\", \"{{testApi.run()}}\");\n    cy.get(widgetLocators.buttonWidget).click();\n    cy.get(\".t--toast-debug-button\").click();\n    cy.get(\"[data-testid='t--tab-ERROR']\").should(\"have.attr\", \"aria-selected\", \"true\");\n\n    // All errors should be expanded by default\n    //Updated count to 1 as the decision not to show triggerexecution/uncaughtpromise error in - epic 17720\n    _.debuggerHelper.AssertVisibleErrorMessagesCount(1);\n\n    // Recent errors are shown at the top of the list\n    cy.testJsontext(\"label\", \"{{[]}}\");\n    //This feature is disabled in updated error log - epic 17720\n    // _.debuggerHelper.LogStateContains(\"text\", 0);\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Undoing widget deletion should show errors if present + Bug 2760","suites":["Widget error state"],"updatePoint":{"line":50,"column":73,"index":2201},"line":50,"code":"  it(\"3. Undoing widget deletion should show errors if present + Bug 2760\", function () {\n    cy.deleteWidget();\n    _.debuggerHelper.AssertVisibleErrorMessagesCount(0);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    _.debuggerHelper.AssertVisibleErrorMessagesCount(2);\n\n    //Bug-2760: Error log on a widget property not clearing out when the widget property is deleted\n    _.entityExplorer.DragDropWidgetNVerify(WIDGET.TABLE, 150, 300);\n    _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    _.table.AddSampleTableData();\n    _.table.AddColumn(\"customColumn1\");\n    _.propPane.OpenTableColumnSettings(\"customColumn1\");\n    _.propPane.UpdatePropertyFieldValue(\"Computed value\", \"{{test}}\");\n    _.debuggerHelper.AssertDebugError(\"test is not defined\", \"\", false, false);\n    _.table.DeleteColumn(\"customColumn1\");\n    _.debuggerHelper.DebuggerListDoesnotContain(\"test is not defined\");\n  });","file":"e2e/Regression/ClientSide/OtherUIFeatures/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if the connection shows an error state when a connection has an error","suites":["Property pane connections error state"],"updatePoint":{"line":6,"column":84,"index":255},"line":6,"code":"  it(\"1. Check if the connection shows an error state when a connection has an error\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", \"{{error}}\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.searchText}}\");\n\n    // Find class which indicates an error\n    cy.get(\".t--connection-error\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Connections_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify if the search Input is getting focused when a widget is selected","suites":["Property Pane Search"],"updatePoint":{"line":11,"column":80,"index":439},"line":11,"code":"  it(\"1. Verify if the search Input is getting focused when a widget is selected\", function () {\n    ee.SelectEntityByName(\"Table1\", \"Widgets\");\n\n    // Initially the search input will only be soft focused\n    // We need to press Enter to properly focus it\n    agHelper.AssertElementFocus(propPane._propertyPaneSearchInputWrapper);\n    agHelper.PressEnter();\n    agHelper.AssertElementFocus(propPane._propertyPaneSearchInput);\n\n    // Pressing Escape should soft focus the search input\n    agHelper.PressEscape();\n    agHelper.AssertElementFocus(propPane._propertyPaneSearchInputWrapper);\n\n    // Opening a panel should focus the search input\n    propPane.OpenTableColumnSettings(\"name\");\n    agHelper.AssertElementFocus(propPane._propertyPaneSearchInputWrapper);\n\n    // Opening some other widget and then going back to the initial widget should soft focus the search input that is inside a panel\n    ee.SelectEntityByName(\"Switch1\", \"Widgets\");\n    ee.SelectEntityByName(\"Table1\", \"Widgets\");\n    agHelper.AssertElementFocus(propPane._propertyPaneSearchInputWrapper);\n\n    // Going out of the panel should soft focus the search input\n    propPane.NavigateBackToPropertyPane();\n    agHelper.AssertElementFocus(propPane._propertyPaneSearchInputWrapper);\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Search for Properties","suites":["Property Pane Search"],"updatePoint":{"line":37,"column":30,"index":1649},"line":37,"code":"  it(\"2. Search for Properties\", function () {\n    // Search for a property inside CONTENT tab\n    propPane.Search(\"visible\");\n    propPane.AssertIfPropertyOrSectionExists(\"general\", \"CONTENT\", \"visible\");\n\n    // Search for a property inside style tab\n    propPane.Search(\"text color\");\n    propPane.AssertIfPropertyOrSectionExists(\"color\", \"STYLE\", \"textcolor\");\n\n    // search for a camel case property\n    propPane.Search(\"on row selected\");\n    propPane.AssertIfPropertyOrSectionExists(\"rowselection\", \"CONTENT\", \"onrowselected\");\n\n    // search for another variation of camel case property\n    propPane.Search(\"onSort\");\n    propPane.AssertIfPropertyOrSectionExists(\"sorting\", \"CONTENT\", \"onsort\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Search for Sections","suites":["Property Pane Search"],"updatePoint":{"line":54,"column":28,"index":2358},"line":54,"code":"  it(\"3. Search for Sections\", function () {\n    // Search for a section inside CONTENT tab\n    propPane.Search(\"general\");\n    propPane.AssertIfPropertyOrSectionExists(\"general\", \"CONTENT\");\n\n    // Search for a section inside style tab\n    propPane.Search(\"text formaTTing\");\n    propPane.AssertIfPropertyOrSectionExists(\"textformatting\", \"STYLE\");\n\n    // Clear the search input for the next test\n    propPane.Search(\"\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Search for Properties inside a panel","suites":["Property Pane Search"],"updatePoint":{"line":66,"column":45,"index":2806},"line":66,"code":"  it(\"4. Search for Properties inside a panel\", function () {\n    propPane.OpenTableColumnSettings(\"name\");\n\n    // Search for a property inside CONTENT tab\n    propPane.Search(\"Visible\");\n    propPane.AssertIfPropertyOrSectionExists(\"general\", \"CONTENT\", \"visible\");\n\n    // Search for a property inside style tab\n    propPane.Search(\"text Color\");\n    propPane.AssertIfPropertyOrSectionExists(\"color\", \"STYLE\", \"textcolor\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Search for Sections inside a panel","suites":["Property Pane Search"],"updatePoint":{"line":77,"column":43,"index":3237},"line":77,"code":"  it(\"5. Search for Sections inside a panel\", function () {\n    // Search for a section inside CONTENT tab\n    propPane.Search(\"DATA\");\n    propPane.AssertIfPropertyOrSectionExists(\"data\", \"CONTENT\");\n\n    // Search for a section inside style tab\n    propPane.Search(\"color\");\n    propPane.AssertIfPropertyOrSectionExists(\"color\", \"STYLE\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Search for gibberish and verify if empty results message is shown","suites":["Property Pane Search"],"updatePoint":{"line":86,"column":74,"index":3615},"line":86,"code":"  it(\"6. Search for gibberish and verify if empty results message is shown\", function () {\n    // Searching Gibberish inside a panel\n    propPane.Search(\"pigglywiggly\");\n    agHelper.AssertElementExist(propPane._propertyPaneEmptySearchResult);\n\n    // Searching Gibberish inside main property panel\n    propPane.NavigateBackToPropertyPane();\n    propPane.Search(\"pigglywiggly\");\n    agHelper.AssertElementExist(propPane._propertyPaneEmptySearchResult);\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Verify behaviour with Dynamically hidden properties inside search results","suites":["Property Pane Search"],"updatePoint":{"line":96,"column":82,"index":4082},"line":96,"code":"  it(\"7. Verify behaviour with Dynamically hidden properties inside search results\", function () {\n    // Search for a Section with Dynamically hidden properties\n    propPane.Search(\"pagination\");\n    propPane.AssertIfPropertyOrSectionExists(\"pagination\", \"CONTENT\");\n    // Do the operation so that the dymnamic property is visible\n    propPane.ToggleOnOrOff(\"Server side pagination\", \"On\");\n    // Verify if the property is visible\n    propPane.AssertIfPropertyOrSectionExists(\"pagination\", \"CONTENT\", \"onpagechange\");\n\n    // Do the operation so that the dymnamic property is hidden again\n    propPane.ToggleOnOrOff(\"Server side pagination\", \"Off\");\n    // Verify whether the property is hidden\n    agHelper.AssertElementAbsence(\".t--property-control-onpagechange\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify the search works even if the section is collapsed initially","suites":["Property Pane Search"],"updatePoint":{"line":110,"column":75,"index":4851},"line":110,"code":"  it(\"8. Verify the search works even if the section is collapsed initially\", function () {\n    ee.SelectEntityByName(\"Switch1\", \"Widgets\");\n    // Collapse All the sections both in CONTENT and STYLE tabs\n    propPane.ToggleSection(\"label\");\n    propPane.ToggleSection(\"general\");\n    propPane.ToggleSection(\"events\");\n    propPane.MoveToTab(\"Style\");\n    propPane.ToggleSection(\"labelstyles\");\n    propPane.ToggleSection(\"color\");\n\n    // Search for sections & properties\n    propPane.Search(\"events\");\n    propPane.AssertIfPropertyOrSectionExists(\"events\", \"CONTENT\");\n    propPane.Search(\"visible\");\n    propPane.AssertIfPropertyOrSectionExists(\"events\", \"CONTENT\", \"visible\");\n    propPane.Search(\"color\");\n    propPane.AssertIfPropertyOrSectionExists(\"color\", \"STYLE\");\n    propPane.Search(\"emphasis\");\n    propPane.AssertIfPropertyOrSectionExists(\"labelstyles\", \"STYLE\", \"emphasis\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify the search input clears when another widget is selected","suites":["Property Pane Search"],"updatePoint":{"line":130,"column":71,"index":5743},"line":130,"code":"  it(\"9. Verify the search input clears when another widget is selected\", function () {\n    propPane.Search(\"visible\");\n    propPane.AssertSearchInputValue(\"visible\");\n    ee.SelectEntityByName(\"Table1\", \"Widgets\");\n    propPane.AssertSearchInputValue(\"\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"10. Verify searching for properties inside the same section one after the other works","suites":["Property Pane Search"],"updatePoint":{"line":138,"column":91,"index":6063},"line":138,"code":"  it(\"10. Verify searching for properties inside the same section one after the other works\", function () {\n    // Search for a property\n    propPane.Search(\"onsort\");\n    propPane.AssertIfPropertyOrSectionExists(\"sorting\", \"CONTENT\", \"onsort\");\n\n    // Search for another property in the same section\n    propPane.Search(\"column sorting\");\n    propPane.AssertIfPropertyOrSectionExists(\"sorting\", \"CONTENT\", \"columnsorting\");\n\n    // Search for the same section name and verify all the properties under it are visible\n    propPane.Search(\"sorting\");\n    propPane.AssertIfPropertyOrSectionExists(\"sorting\", \"CONTENT\", \"onsort\");\n    propPane.AssertIfPropertyOrSectionExists(\"sorting\", \"CONTENT\", \"columnsorting\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPane_Search_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if CTA is shown when there is no action","suites":["Property pane CTA to add an action"],"updatePoint":{"line":7,"column":54,"index":284},"line":7,"code":"  it(\"1. Check if CTA is shown when there is no action\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--propertypane-connect-cta\").scrollIntoView().should(\"be.visible\");\n    //Check if CTA does not exist when there is an action\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Table1\", \"Container3\");\n    cy.get(\".t--propertypane-connect-cta\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPaneCTA_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Ensure text is visible for js enabled field when a section is collapsed by default","suites":["Property pane js enabled field"],"updatePoint":{"line":6,"column":91,"index":264},"line":6,"code":"  it(\"1. Ensure text is visible for js enabled field when a section is collapsed by default\", function () {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.moveToStyleTab();\n    cy.wait(500);\n    //cy.get(\".t--property-pane-section-collapse-submitbuttonstyles\").click({force:true});\n    cy.get(\".t--property-control-buttonvariant\").find(\".t--js-toggle\").first().click({\n      force: true\n    });\n    cy.get(\".t--property-control-buttonvariant\").find(\".t--js-toggle\").first().should(\"have.class\", \"is-active\");\n    cy.testJsontext(\"buttonvariant\", \"PRIMARY\");\n    cy.get(\".t--property-control-buttonvariant\").find(\".CodeMirror-code\").invoke(\"text\").should(\"equal\", \"PRIMARY\");\n    cy.get(\".t--property-pane-section-collapse-submitbuttonstyles\").click();\n    cy.closePropertyPane();\n    cy.wait(1000);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.moveToStyleTab();\n    cy.wait(500);\n    cy.get(\".t--property-pane-section-collapse-submitbuttonstyles\").click();\n    cy.get(\".t--property-control-buttonvariant\").find(\".CodeMirror-code\").invoke(\"text\").should(\"equal\", \"PRIMARY\");\n  });","file":"e2e/Regression/ClientSide/PropertyPane/PropertyPaneJsEnabledVisible_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Refactor Widget, API, Query and JSObject","suites":["Validate JS Object Refactoring does not affect the comments & variables"],"updatePoint":{"line":54,"column":49,"index":1878},"line":54,"code":"  it(\"1. Refactor Widget, API, Query and JSObject\", () => {\n    //Rename all widgets and entities\n    _.entityExplorer.SelectEntityByName(refactorInput.textWidget.oldName);\n    _.agHelper.RenameWidget(refactorInput.textWidget.oldName, refactorInput.textWidget.newName);\n    _.entityExplorer.SelectEntityByName(refactorInput.inputWidget.oldName);\n    _.agHelper.RenameWidget(refactorInput.inputWidget.oldName, refactorInput.inputWidget.newName);\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    _.entityExplorer.RenameEntityFromExplorer(refactorInput.query.oldName, refactorInput.query.newName);\n    _.entityExplorer.RenameEntityFromExplorer(refactorInput.api.oldName, refactorInput.api.newName);\n    _.entityExplorer.RenameEntityFromExplorer(refactorInput.jsObject.oldName, refactorInput.jsObject.newName);\n  });","file":"e2e/Regression/ClientSide/Refactoring/Refactoring_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Verify refactoring updates in JS Object","suites":["Validate JS Object Refactoring does not affect the comments & variables"],"updatePoint":{"line":65,"column":48,"index":2702},"line":65,"code":"  it(\"2. Verify refactoring updates in JS Object\", () => {\n    //Verify JSObject refactoring in API pane\n    _.entityExplorer.SelectEntityByName(refactorInput.api.newName);\n    _.agHelper.Sleep(1000);\n    _.agHelper.GetNAssertContains(_.locators._editorVariable, refactorInput.jsObject.newName);\n\n    //Verify JSObject refactoring in Query pane\n    _.entityExplorer.SelectEntityByName(refactorInput.query.newName);\n    _.agHelper.Sleep(1000);\n    _.agHelper.GetNAssertContains(_.locators._editorVariable, refactorInput.jsObject.newName);\n\n    //Verify TextWidget, InputWidget, QueryRefactor, RefactorAPI refactor\n    //Verify Names in JS Object string shouldn't be updated\n    _.entityExplorer.SelectEntityByName(refactorInput.jsObject.newName);\n    _.agHelper.GetNAssertContains(_.locators._consoleString, refactorInput.textWidget.newName, \"not.exist\");\n    _.agHelper.GetNAssertContains(_.locators._consoleString, refactorInput.inputWidget.newName, \"not.exist\");\n    _.agHelper.GetNAssertContains(_.locators._consoleString, refactorInput.query.newName, \"not.exist\");\n    _.agHelper.GetNAssertContains(_.locators._consoleString, refactorInput.api.newName, \"not.exist\");\n\n    //Names in comment shouldn't be updated\n    _.agHelper.GetNAssertContains(_.locators._commentString, refactorInput.textWidget.newName, \"not.exist\");\n    _.agHelper.GetNAssertContains(_.locators._commentString, refactorInput.inputWidget.newName, \"not.exist\");\n    _.agHelper.GetNAssertContains(_.locators._commentString, refactorInput.query.newName, \"not.exist\");\n    _.agHelper.GetNAssertContains(_.locators._commentString, refactorInput.api.newName, \"not.exist\");\n\n    //Variables reffered should be updated in JS Object\n    _.agHelper.GetNAssertContains(_.locators._editorVariable, refactorInput.textWidget.newName);\n    _.agHelper.GetNAssertContains(_.locators._editorVariable, refactorInput.inputWidget.newName);\n    _.agHelper.GetNAssertContains(_.locators._editorVariable, refactorInput.query.newName);\n    _.agHelper.GetNAssertContains(_.locators._editorVariable, refactorInput.api.newName);\n  });","file":"e2e/Regression/ClientSide/Refactoring/Refactoring_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Embed settings on App settings should show upgrade content if application is not public","suites":["In-app embed settings"],"updatePoint":{"line":13,"column":96,"index":703},"line":13,"code":"  it(\"1. Embed settings on App settings should show upgrade content if application is not public\", () => {\n    if (CURRENT_REPO === REPO.CE) {\n      _.embedSettings.OpenEmbedSettings();\n      _.agHelper.AssertElementExist(_.inviteModal.locators._upgradeContent);\n      _.agHelper.AssertElementAbsence(_.inviteModal.locators._shareSettingsButton);\n      _.agHelper.GetNAssertContains(_.inviteModal.locators._upgradeContent, \"Appsmith Business Edition\");\n      _.appSettings.ClosePane();\n    }\n  });","file":"e2e/Regression/ClientSide/SettingsPane/EmbedSettings_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Embed settings on Share modal should show upgrade content if application is not public","suites":["In-app embed settings"],"updatePoint":{"line":22,"column":95,"index":1200},"line":22,"code":"  it(\"2. Embed settings on Share modal should show upgrade content if application is not public\", () => {\n    if (CURRENT_REPO === REPO.CE) {\n      _.inviteModal.OpenShareModal();\n      _.inviteModal.SelectEmbedTab();\n      _.agHelper.AssertElementExist(_.inviteModal.locators._upgradeContent);\n      _.agHelper.AssertElementExist(_.inviteModal.locators._shareSettingsButton);\n      _.agHelper.GetNAssertContains(_.inviteModal.locators._upgradeContent, \"Appsmith Business Edition\");\n      _.inviteModal.enablePublicAccessViaShareSettings(\"true\");\n    }\n  });","file":"e2e/Regression/ClientSide/SettingsPane/EmbedSettings_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Change embedding restriction link on Share modal should redirect to Admin settings general page","suites":["In-app embed settings"],"updatePoint":{"line":32,"column":104,"index":1768},"line":32,"code":"  it(\"3. Change embedding restriction link on Share modal should redirect to Admin settings general page\", () => {\n    _.inviteModal.OpenShareModal();\n    if (CURRENT_REPO === REPO.EE) {\n      _.inviteModal.enablePublicAccessViaInviteTab(\"true\");\n    }\n    _.inviteModal.SelectEmbedTab();\n    cy.get(_.inviteModal.locators._restrictionChange).should(\"have.attr\", \"href\", \"/settings\");\n    _.inviteModal.CloseModal();\n  });","file":"e2e/Regression/ClientSide/SettingsPane/EmbedSettings_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Change embedding restriction link on App settings should redirect to Admin settings general page","suites":["In-app embed settings"],"updatePoint":{"line":41,"column":105,"index":2192},"line":41,"code":"  it(\"4. Change embedding restriction link on App settings should redirect to Admin settings general page\", () => {\n    _.embedSettings.OpenEmbedSettings();\n    cy.get(_.inviteModal.locators._restrictionChange).should(\"have.attr\", \"href\", \"/settings\");\n    _.appSettings.ClosePane();\n\n    //Check embed preview show/hides navigation bar according to setting\n    _.inviteModal.ValidatePreviewEmbed(\"true\");\n    _.inviteModal.ValidatePreviewEmbed(\"false\");\n\n    //Check Show/Hides Navigation bar syncs between AppSettings Pane Embed tab & Share modal\n    ValidateSyncWithInviteModal(\"true\");\n    ValidateSyncWithInviteModal(\"false\");\n  });","file":"e2e/Regression/ClientSide/SettingsPane/EmbedSettings_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Changing the show navigation bar setting in the App settings pane should update the embed URL","suites":["In-app embed settings"],"updatePoint":{"line":54,"column":102,"index":2827},"line":54,"code":"  it(\"5. Changing the show navigation bar setting in the App settings pane should update the embed URL\", () => {\n    cy.reload();\n    _.embedSettings.OpenEmbedSettings();\n    _.embedSettings.ToggleShowNavigationBar(\"true\");\n    cy.get(_.embedSettings.locators._snippet).should(\"contain.text\", \"navbar=true\");\n    _.embedSettings.ToggleShowNavigationBar(\"false\");\n    cy.get(_.embedSettings.locators._snippet).should(\"not.contain.text\", \"navbar=true\");\n  });","file":"e2e/Regression/ClientSide/SettingsPane/EmbedSettings_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Fork template from page section","suites":["excludeForAirgap"],"updatePoint":{"line":19,"column":40,"index":734},"line":19,"code":"  it(\"1. Fork template from page section\", () => {\n    //Fork template button to be visible always\n    _.agHelper.RefreshPage();\n    cy.wait(5000);\n    cy.AddPageFromTemplate();\n    cy.wait(5000);\n    _.agHelper.AssertElementExist(_.templates.locators._forkApp);\n    cy.get(template.templateDialogBox).should(\"be.visible\");\n    cy.wait(4000);\n    cy.xpath(\"//h1[text()='Meeting Scheduler']/parent::div//button[contains(@class, 't--fork-template')]\").scrollIntoView().wait(500).click();\n    _.agHelper.WaitUntilEleDisappear(\"//*[text()='Loading template details']\");\n    cy.wait(1000);\n    _.agHelper.CheckForErrorToast(\"Internal server error while processing request\");\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetLocators.toastAction).length <= 0) {\n        if ($ele.find(template.templateViewForkButton).length > 0) {\n          cy.get(template.templateViewForkButton).click();\n        }\n      }\n    });\n    cy.get(widgetLocators.toastAction).should(\"contain\", \"template added successfully\");\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_Existing_app_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Add selected page of template from page section","suites":["excludeForAirgap"],"updatePoint":{"line":41,"column":56,"index":1766},"line":41,"code":"  it(\"2. Add selected page of template from page section\", () => {\n    cy.AddPageFromTemplate();\n    cy.wait(5000);\n    cy.get(template.templateDialogBox).should(\"be.visible\");\n    cy.wait(4000);\n    cy.xpath(\"//h1[text()='Meeting Scheduler']\").click();\n    cy.wait(\"@getTemplatePages\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    //cy.xpath(template.selectAllPages).next().click();\n    // cy.xpath(\"//span[text()='CALENDAR MOBILE']\").parent().next().click();\n    cy.get(template.templateViewForkButton).click();\n    cy.wait(\"@fetchTemplate\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetLocators.toastAction).should(\"contain\", \"template added successfully\");\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_Existing_app_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Fork template button should take user to 'select pages from template' page","suites":["excludeForAirgap"],"updatePoint":{"line":54,"column":83,"index":2539},"line":54,"code":"  it(\"3. Fork template button should take user to 'select pages from template' page\", () => {\n    _.agHelper.RefreshPage();\n    cy.AddPageFromTemplate();\n    cy.get(_.templates.locators._forkApp).first().click();\n    cy.get(template.templateViewForkButton).should(\"be.visible\");\n    //Similar templates add icon should take user to 'select pages from template'\n    _.agHelper.RefreshPage();\n    cy.AddPageFromTemplate();\n    // We are currentlyon on templates list page\n    cy.get(_.templates.locators._forkApp).first().click();\n    // Here we are on template detail page, with similar templates at the bottom\n    cy.get(_.templates.locators._forkApp).first().click();\n    cy.get(template.templateViewForkButton).should(\"be.visible\");\n    cy.get(_.templates.locators._closeTemplateDialogBoxBtn).click();\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_Existing_app_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Add page from template to show only apps with 'allowPageImport:true'","suites":["excludeForAirgap"],"updatePoint":{"line":69,"column":77,"index":3343},"line":69,"code":"  it(\"4. Add page from template to show only apps with 'allowPageImport:true'\", () => {\n    cy.reload();\n    cy.fixture(\"Templates/AllowPageImportTemplates.json\").then(data => {\n      cy.intercept({\n        method: \"GET\",\n        url: \"/api/v1/app-templates\"\n      }, {\n        statusCode: 200,\n        body: data\n      }).as(\"fetchAllTemplates\");\n      _.entityExplorer.AddNewPage(\"Add page from template\");\n      cy.get(template.templateDialogBox).should(\"be.visible\");\n      cy.wait(\"@fetchAllTemplates\").should(({\n        request,\n        response\n      }) => {\n        // in the fixture data we are sending some tempaltes with `allowPageImport: false`\n        cy.get(template.templateCard).should(\"not.have.length\", response.body.data.length);\n        const templatesInResponse = response.body.data.filter(card => !!card.allowPageImport);\n        cy.get(template.templateCard).should(\"have.length\", templatesInResponse.length);\n        cy.get(_.templates.locators._closeTemplateDialogBoxBtn).click();\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_Existing_app_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Fork a template to an workspace","suites":["excludeForAirgap"],"updatePoint":{"line":6,"column":40,"index":417},"line":6,"code":"  it(\"1. Fork a template to an workspace\", () => {\n    cy.NavigateToHome();\n    cy.get(templateLocators.templatesTab).click();\n    cy.wait(1000);\n    cy.xpath(\"//h1[text()='Customer Support Dashboard']/parent::div//button[contains(@class, 't--fork-template')]\").scrollIntoView().wait(500).click();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(templateLocators.templateViewForkButton).length) {\n        cy.get(templateLocators.templateViewForkButton).click();\n      }\n    });\n    cy.get(templateLocators.dialogForkButton).click();\n    cy.get(commonlocators.canvas, {\n      timeout: 30000\n    }).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Update query param on opening fork modal in template detailed view","suites":["excludeForAirgap"],"updatePoint":{"line":21,"column":75,"index":1083},"line":21,"code":"  it(\"2. Update query param on opening fork modal in template detailed view\", () => {\n    cy.NavigateToHome();\n    cy.get(templateLocators.templatesTab).click();\n    cy.get(templateLocators.templateCard).first().click();\n    _.agHelper.CheckForErrorToast(\"INTERNAL_SERVER_ERROR\");\n    cy.get(templateLocators.templateViewForkButton).click();\n    cy.location().should(location => {\n      expect(location.search).to.eq(\"?showForkTemplateModal=true\");\n    });\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Hide template fork button if user does not have a valid workspace to fork","suites":["excludeForAirgap"],"updatePoint":{"line":31,"column":82,"index":1553},"line":31,"code":"  it(\"3. Hide template fork button if user does not have a valid workspace to fork\", () => {\n    _.homePage.NavigateToHome();\n    // Mock user with App Viewer permission\n    cy.intercept(\"/api/v1/applications/new\", {\n      fixture: \"Templates/MockAppViewerUser.json\"\n    });\n    _.agHelper.RefreshPage();\n    _.homePage.SwitchToTemplatesTab();\n    _.agHelper.Sleep(2000);\n    _.agHelper.CheckForErrorToast(\"Internal server error while processing request\");\n    _.agHelper.AssertElementExist(templateLocators.templateCard);\n    _.agHelper.AssertElementAbsence(templateLocators.templateForkButton);\n    _.agHelper.GetNClick(templateLocators.templateCard);\n    _.agHelper.AssertElementExist(templateLocators.templateCard);\n    _.agHelper.AssertElementAbsence(templateLocators.templateViewForkButton);\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check if tooltip is working in 'Reconnect Datasources'","suites":["excludeForAirgap"],"updatePoint":{"line":47,"column":63,"index":2338},"line":47,"code":"  it(\"4. Check if tooltip is working in 'Reconnect Datasources'\", () => {\n    cy.NavigateToHome();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(reconnectDatasourceLocators.Modal).length) {\n        cy.get(_.dataSources._skiptoApplicationBtn).click();\n      }\n    });\n    cy.get(templateLocators.templatesTab).click();\n    cy.wait(1000);\n    cy.xpath(\"//h1[text()='Customer Messaging Tool']/parent::div//button[contains(@class, 't--fork-template')]\").scrollIntoView().wait(500).click();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(templateLocators.templateViewForkButton).length) {\n        cy.get(templateLocators.templateViewForkButton).click();\n      }\n    });\n    cy.get(templateLocators.dialogForkButton).click();\n    cy.get(reconnectDatasourceLocators.Modal).should(\"be.visible\");\n    cy.get(reconnectDatasourceLocators.DatasourceList).find(reconnectDatasourceLocators.ListItemIcon).should(\"be.visible\");\n    cy.get(reconnectDatasourceLocators.DatasourceList).find(reconnectDatasourceLocators.ListItemIcon, {\n      withinSubject: null\n    }).first().trigger(\"mouseover\");\n    cy.get(\".ads-v2-tooltip\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Fork a template to the current app + Bug 17477","suites":["excludeForAirgap"],"updatePoint":{"line":23,"column":55,"index":933},"line":23,"code":"  it(\"1. Fork a template to the current app + Bug 17477\", () => {\n    cy.wait(3000);\n    cy.get(template.startFromTemplateCard).click();\n    // Commented out below code as fetch template call is not going through when template dialog is closed\n    // cy.wait(\"@fetchTemplate\").should(\n    //   \"have.nested.property\",\n    //   \"response.body.responseMeta.status\",\n    //   200,\n    // );\n    cy.wait(4000);\n    cy.get(template.templateDialogBox).should(\"be.visible\");\n    cy.xpath(\"//h1[text()='Applicant Tracker-test']/parent::div//button[contains(@class, 't--fork-template')]\").scrollIntoView().wait(500).click();\n    _.agHelper.CheckForErrorToast(\"INTERNAL_SERVER_ERROR\");\n    cy.wait(6000);\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetLocators.toastAction).length <= 0) {\n        if ($ele.find(template.templateViewForkButton).length > 0) {\n          cy.get(template.templateViewForkButton).click();\n        }\n      }\n    });\n    cy.get(widgetLocators.toastAction).should(\"contain\", \"template added successfully\");\n    // [Bug]: Getting 'Resource not found' error on deploying template #17477\n    cy.PublishtheApp();\n    cy.get(\".t--page-switch-tab\").contains(\"1 Track Applications\").click({\n      force: true\n    });\n    cy.wait(4000);\n    cy.get(publish.backToEditor).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_To_App_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Add selected pages from template to an app","suites":["excludeForAirgap"],"updatePoint":{"line":54,"column":51,"index":2253},"line":54,"code":"  it(\"2. Add selected pages from template to an app\", () => {\n    cy.wait(5000);\n    cy.CheckAndUnfoldEntityItem(\"Pages\");\n    cy.get(`.t--entity-name:contains(Page1)`).trigger(\"mouseover\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(template.startFromTemplateCard).click();\n    // Commented out below code as fetch template call is not going through when template dialog is closed\n    // cy.wait(\"@fetchTemplate\").should(\n    //   \"have.nested.property\",\n    //   \"response.body.responseMeta.status\",\n    //   200,\n    // );\n    cy.wait(5000);\n    cy.get(template.templateDialogBox).should(\"be.visible\");\n    cy.xpath(\"//h1[text()='Applicant Tracker-test']\").click();\n    _.agHelper.CheckForErrorToast(\"INTERNAL_SERVER_ERROR\");\n    cy.wait(\"@getTemplatePages\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(template.selectCheckbox).first().click();\n    cy.wait(1000);\n    cy.get(template.selectCheckbox).eq(1).click();\n    // [Bug]: On forking selected pages from a template, resource not found error is shown #17270\n    cy.get(template.templateViewForkButton).click();\n    cy.wait(\"@fetchTemplate\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetLocators.toastAction, {\n      timeout: 40000\n    }).should(\"contain\", \"template added successfully\");\n  });","file":"e2e/Regression/ClientSide/Templates/Fork_Template_To_App_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Templates tab should have no impact of 'allowPageImport:true'","suites":["excludeForAirgap"],"updatePoint":{"line":3,"column":70,"index":188},"line":3,"code":"  it(\"1. Templates tab should have no impact of 'allowPageImport:true'\", () => {\n    cy.fixture(\"Templates/AllowPageImportTemplates.json\").then(data => {\n      cy.intercept({\n        method: \"GET\",\n        url: \"/api/v1/app-templates\"\n      }, {\n        statusCode: 200,\n        body: data\n      }).as(\"fetchAllTemplates\");\n      cy.visit(\"/templates\");\n      cy.wait(\"@fetchAllTemplates\").should(({\n        request,\n        response\n      }) => {\n        if (response) {\n          // in the fixture data we are sending some tempaltes with `allowPageImport: false`\n          _.templates.GetTemplatesCardsList().should(\"have.length\", response.body.data.length);\n          const templatesFilteredForAllowPageImport = response.body.data.filter(card => !!card.allowPageImport);\n          _.templates.GetTemplatesCardsList().should(\"not.have.length\", templatesFilteredForAllowPageImport.length);\n        }\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Templates/TemplatesPage_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checks if theme can be changed to one of the existing themes","suites":["App Theming funtionality"],"updatePoint":{"line":14,"column":69,"index":1141},"line":14,"code":"  it(\"1. Checks if theme can be changed to one of the existing themes\", function () {\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n\n    // select a theme\n    cy.get(commonlocators.themeCard).last().click({\n      force: true\n    });\n\n    // check for alert\n    cy.get(`${commonlocators.themeCard}`).last().siblings(\"div\").first().invoke(\"text\").then(text => {\n      cy.get(commonlocators.toastmsg).contains(`Theme ${text} applied`);\n    });\n\n    // check if color of canvas is same as theme bg color\n    cy.get(`${commonlocators.themeCard} > main`).last().invoke(\"css\", \"background-color\").then(backgroudColor => {\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", backgroudColor);\n    });\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checks if theme can be edited","suites":["App Theming funtionality"],"updatePoint":{"line":36,"column":38,"index":1933},"line":36,"code":"  it(\"2. Checks if theme can be edited\", function () {\n    cy.get(commonlocators.selectThemeBackBtn).click({\n      force: true\n    });\n    appSettings.ClosePane();\n\n    // drop a button & container widget and click on body\n    ee.NavigateToSwitcher(\"Widgets\");\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"containerwidget\", {\n      x: 200,\n      y: 50\n    });\n    cy.assertPageSave();\n    cy.get(\"canvas\").first(0).trigger(\"click\", {\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n\n    //Click the back button //Commenting below since expanded by default\n    //cy.get(commonlocators.selectThemeBackBtn).click({ force: true });\n\n    //Click the border radius toggle\n    // cy.contains(\"Border\")\n    //   .click({ force: true })\n    //   .wait(500);\n\n    // change app border radius\n    cy.get(commonlocators.themeAppBorderRadiusBtn).eq(1).click({\n      force: true\n    });\n\n    // check if border radius is changed on button\n    cy.get(commonlocators.themeAppBorderRadiusBtn).eq(1).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"border-radius\", borderRadius);\n\n      // publish the app\n      // cy.PublishtheApp();\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"border-radius\", borderRadius);\n    });\n\n    //Change the color://Commenting below since expanded by default\n    //cy.contains(\"Color\").click({ force: true });\n\n    //Change the primary color:\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).eq(-3).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n    });\n\n    //Change the background color:\n    cy.get(\"[data-testid='theme-backgroundColor']\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).first().then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n    });\n\n    // Change the shadow\n    cy.get(\"[data-value='M']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"[data-value='M']\").eq(1).invoke(\"css\", \"box-shadow\").then(boxShadow => {\n      cy.get(containerShadowElement).should(\"have.css\", \"box-shadow\", boxShadow);\n    });\n\n    //Change the font //Commenting below since expanded by default\n    //cy.contains(\"Font\").click({ force: true });\n\n    cy.get(\".rc-select-selection-search-input\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.get(\".rc-virtual-list-holder div\").children().eq(2).then($childElem => {\n        cy.get($childElem).click({\n          force: true\n        });\n        cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"font-family\", `${$childElem.children().last().text()}\"Nunito Sans\", sans-serif`);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checks if the theme can be saved","suites":["App Theming funtionality"],"updatePoint":{"line":134,"column":41,"index":5125},"line":134,"code":"  it(\"3. Checks if the theme can be saved\", () => {\n    //Click on dropDown elipses\n    cy.contains(\"Theme properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    // .then(($elem) => {\n    //   cy.get(`${$elem} button`).click({ force: true });\n    // })\n\n    cy.wait(300);\n\n    //Click on save theme dropdown option\n    cy.contains(\"Save theme\").click({\n      force: true\n    });\n    cy.wait(200);\n\n    //Type the name of the theme:\n    cy.get(\"input[placeholder='My theme']\").type(\"testtheme\");\n\n    //Click on save theme button\n    cy.get(\"button[type='submit']\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(commonlocators.toastMsg).contains(\"Theme testtheme saved\");\n    appSettings.ClosePane();\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Verify Save Theme after changing all properties & widgets conform to the selected theme","suites":["App Theming funtionality"],"updatePoint":{"line":162,"column":96,"index":5948},"line":162,"code":"  it(\"4. Verify Save Theme after changing all properties & widgets conform to the selected theme\", () => {\n    ee.NavigateToSwitcher(\"Widgets\");\n    cy.dragAndDropToCanvas(\"iconbuttonwidget\", {\n      x: 200,\n      y: 300\n    });\n    cy.assertPageSave();\n    cy.get(\"canvas\").first(0).trigger(\"click\", {\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    //#region Change Font & verify widgets:\n    // cy.contains(\"Font\")\n    //   .click({ force: true })\n    //   .wait(200);//Commenting below since expanded by default\n    cy.get(\".rc-select-selection-search-input\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.get(\".rc-virtual-list-holder div\").children().eq(4).then($childElem => {\n        cy.get($childElem).click({\n          force: true\n        });\n        cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"font-family\", `${$childElem.children().last().text()}Inter, sans-serif`);\n        cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"font-family\", `${$childElem.children().last().text()}Inter, sans-serif`);\n      });\n    });\n\n    //#endregion\n\n    //#region Change Color & verify widgets:\n    //Change the primary color:\n    // cy.contains(\"Color\")\n    //   .click({ force: true })\n    //   .wait(200);\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2Color).eq(-15).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n    });\n\n    //Change the background color:\n    cy.get(\"[data-testid='theme-backgroundColor']\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2TailwindColor).eq(23).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", $elem.css(\"background-color\"));\n    });\n\n    //#endregion\n\n    //#region Change Border radius & verify widgets\n    // cy.contains(\"Border\")\n    //   .click({ force: true })\n    //   .wait(200);\n    cy.get(commonlocators.themeAppBorderRadiusBtn).eq(2).click({\n      force: true\n    });\n    cy.get(`${commonlocators.themeAppBorderRadiusBtn}`).eq(2).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"border-radius\", borderRadius);\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"border-radius\", borderRadius);\n    });\n\n    //#endregion\n\n    //#region Change the shadow & verify widgets\n    cy.get(\"[data-value='L']\").eq(1).click({\n      force: true\n    });\n    cy.get(\"[data-value='L']\").eq(1).invoke(\"css\", \"box-shadow\").then(boxShadow => {\n      cy.get(containerShadowElement).should(\"have.css\", \"box-shadow\", boxShadow);\n    });\n\n    //#endregion\n\n    //#region Click on dropDown elipses\n    cy.contains(\"Theme properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    cy.wait(300);\n    //#endregion\n\n    //Click on save theme dropdown option & close it\n    cy.contains(\"Save theme\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(\".ads-v2-modal__content-header-close-button\").click();\n\n    //Click on save theme dropdown option & cancel it\n    cy.contains(\"Theme properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    cy.wait(300);\n    cy.contains(\"Save theme\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.xpath(\"//span[text()='Cancel']/parent::div\").click();\n\n    //Click on save theme dropdown option, give duplicte name & save it\n    cy.contains(\"Theme properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    cy.wait(300);\n    cy.contains(\"Save theme\").click({\n      force: true\n    });\n    cy.wait(200);\n    //Type the name of the theme:\n    cy.get(\"input[placeholder='My theme']\").type(\"testtheme\");\n    cy.contains(\"Name must be unique\");\n    cy.get(\"input[placeholder='My theme']\").clear().type(\"VioletYellowTheme\");\n\n    //Click on save theme button\n    cy.xpath(\"//span[text()='Save theme']/parent::div\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(commonlocators.toastMsg).contains(\"Theme VioletYellowTheme saved\");\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Verify Themes exists under respective section when ChangeTheme button is cicked in properties with Apply Theme & Trash as applicable","suites":["App Theming funtionality"],"updatePoint":{"line":297,"column":141,"index":10587},"line":297,"code":"  it(\"5. Verify Themes exists under respective section when ChangeTheme button is cicked in properties with Apply Theme & Trash as applicable\", () => {\n    //Click on change theme:\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.xpath(applyTheme(\"Your themes\", \"testtheme\")).click({\n      force: true\n    }).wait(1000); //Changing to testtheme\n\n    cy.contains(\"Applied theme\").click().parent().siblings().find(\".t--theme-card > main > main\").invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(131, 24, 67)\");\n    });\n\n    //Check if the saved theme is present under 'Yours Themes' section with Trash button\n    cy.xpath(applyTheme(\"Your themes\", \"testtheme\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Your themes\", \"testtheme\")).should(\"exist\");\n    cy.xpath(applyTheme(\"Your themes\", \"VioletYellowTheme\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Your themes\", \"VioletYellowTheme\")).should(\"exist\");\n    cy.xpath(applyTheme(\"Featured themes\", \"Earth\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Featured themes\", \"Earth\")).should(\"not.exist\");\n    cy.xpath(applyTheme(\"Featured themes\", \"Sunrise\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Featured themes\", \"Sunrise\")).should(\"not.exist\");\n    cy.xpath(applyTheme(\"Featured themes\", \"Pacific\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Featured themes\", \"Pacific\")).should(\"not.exist\");\n    cy.xpath(applyTheme(\"Featured themes\", \"Pampas\")).should(\"exist\");\n    cy.xpath(themesDeletebtn(\"Featured themes\", \"Pampas\")).should(\"not.exist\");\n\n    // cy.contains(\"Featured themes\")\n    //   .siblings()\n    //   .find(\".t--theme-card\")\n    //   .siblings()\n    //   .should(\"contain.text\", \"Rounded\").siblings()\n    //   .contains('Apply Theme');\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Verify the custom theme can be deleted","suites":["App Theming funtionality"],"updatePoint":{"line":332,"column":47,"index":12307},"line":332,"code":"  it(\"6. Verify the custom theme can be deleted\", () => {\n    //Check if the saved theme is present under 'Yours Themes' section\n    // cy.contains(\"Your themes\")\n    //   .siblings()\n    //   .find(\".t--theme-card\")\n    //   .parent()\n    //   .find(\"button\").eq(0)\n    //   .click({ force: true });\n    //   cy.wait(200);\n\n    cy.xpath(themesDeletebtn(\"Your themes\", \"testtheme\")).click({\n      force: true\n    }).wait(200);\n    cy.contains(\"Do you really want to delete this theme? This process cannot be undone.\");\n\n    //Click on Delete theme trash icon & close it\n    cy.xpath(\"//*[text()='Are you sure?']/following-sibling::button\").click();\n    cy.get(commonlocators.toastMsg).should(\"not.exist\");\n\n    //Click on Delete theme trash icon & cancel it\n    cy.xpath(themesDeletebtn(\"Your themes\", \"testtheme\")).click({\n      force: true\n    }).wait(200);\n    cy.xpath(\"//span[text()='No']/parent::div\").click();\n    cy.get(commonlocators.toastMsg).should(\"not.exist\");\n\n    //Click on Delete theme trash icon & delete it\n    cy.xpath(themesDeletebtn(\"Your themes\", \"testtheme\")).click({\n      force: true\n    }).wait(200);\n    cy.contains(\"Delete\").click({\n      force: true\n    });\n\n    //check for delete alert\n    cy.wait(500);\n    cy.get(commonlocators.toastMsg).contains(\"Theme testtheme deleted\");\n    cy.xpath(applyTheme(\"Your themes\", \"testtheme\")).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Verify user able to change between saved theme & already existing Featured themes","suites":["App Theming funtionality"],"updatePoint":{"line":371,"column":90,"index":13739},"line":371,"code":"  it(\"7. Verify user able to change between saved theme & already existing Featured themes\", () => {\n    //#region Pampas\n    cy.xpath(applyTheme(\"Featured themes\", \"Pampas\")).click({\n      force: true\n    }).wait(1000); //Changing to one of Featured themes\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(5, 150, 105)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(236, 253, 245)\");\n    });\n\n    //#endregion\n\n    //#region Classic\n    cy.xpath(applyTheme(\"Featured themes\", \"Classic\")).click({\n      force: true\n    }).wait(1000); //Changing to one of Featured themes\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(22, 163, 74)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(246, 246, 246)\");\n    });\n\n    //#endregion\n\n    //#region Modern\n    cy.xpath(applyTheme(\"Featured themes\", \"Modern\")).click({\n      force: true\n    }).wait(1000); //Changing to one of Featured themes\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(85, 61, 233)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(248, 250, 252)\");\n    });\n\n    //#endregion\n\n    //#region Sunrise\n    cy.xpath(applyTheme(\"Featured themes\", \"Sunrise\")).click({\n      force: true\n    }).wait(1000); //Changing to one of Featured themes\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(239, 68, 68)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(255, 241, 242)\");\n    });\n    //#endregion\n\n    //#region Water Lily\n    cy.xpath(applyTheme(\"Featured themes\", \"Water Lily\")).click({\n      force: true\n    }).wait(1000); //Changing to one of Featured themes\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(219, 39, 119)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(253, 242, 248)\");\n    });\n    //#endregion\n\n    //#region Pacific\n    cy.xpath(applyTheme(\"Featured themes\", \"Pacific\")).click({\n      force: true\n    }).wait(1000); //Changing to one of Featured themes\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(8, 145, 178)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(236, 254, 255)\");\n    });\n    //#endregion\n\n    //#region Earth\n    cy.xpath(applyTheme(\"Featured themes\", \"Earth\")).click({\n      force: true\n    }).wait(1000); //Changing to one of Featured themes\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(59, 130, 246)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(239, 246, 255)\");\n    });\n    //#endregion\n\n    //#region Moon\n    cy.xpath(applyTheme(\"Featured themes\", \"Moon\")).click({\n      force: true\n    }).wait(1000); //Changing to one of Featured themes\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(100, 116, 139)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(248, 250, 252)\");\n    });\n    //#endregion\n\n    //#region VioletYellowTheme\n    cy.xpath(applyTheme(\"Your themes\", \"VioletYellowTheme\")).click({\n      force: true\n    }).wait(1000); //Changing to created test theme\n\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(0).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(126, 34, 206)\");\n    });\n    cy.contains(\"Applied theme\")\n    // .click()\n    .parent().siblings().find(\".t--theme-card > main > section > div > main\").eq(1).invoke(\"css\", \"background-color\").then(backgroudColor => {\n      expect(backgroudColor).to.eq(\"rgb(253, 224, 71)\");\n    });\n\n    //#endregion\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify widgets conform to the selected theme in Publish mode","suites":["App Theming funtionality"],"updatePoint":{"line":522,"column":69,"index":20057},"line":522,"code":"  it(\"8. Verify widgets conform to the selected theme in Publish mode\", () => {\n    cy.PublishtheApp();\n\n    //cy.wait(4000); //for theme to settle\n\n    cy.get(\"body\").should(\"have.css\", \"font-family\", \"Inter, sans-serif\"); //Font\n\n    cy.xpath(\"//div[@id='root']//section/parent::div\").should(\"have.css\", \"background-color\", \"rgb(253, 224, 71)\"); //Background Color\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(3000);\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify Adding new Individual widgets & it can change Color, Border radius, Shadow & can revert [Color/Border Radius] to already selected theme","suites":["App Theming funtionality"],"updatePoint":{"line":543,"column":151,"index":21173},"line":543,"code":"  it(\"9. Verify Adding new Individual widgets & it can change Color, Border radius, Shadow & can revert [Color/Border Radius] to already selected theme\", () => {\n    ee.NavigateToSwitcher(\"Widgets\");\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 200,\n      y: 400\n    }); //another button widget\n    cy.assertPageSave();\n    cy.moveToStyleTab();\n    //Change Color & verify\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2TailwindColor).eq(33).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(\".t--widget-button2 button\").should(\"have.css\", \"background-color\", $elem.css(\"background-color\") //rgb(134, 239, 172)\n      ); //new widget with its own color\n\n      cy.get(\".t--widget-button1 button\").should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //old widgets still conforming to theme color\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n    });\n\n    //Change Border & verify\n\n    cy.get(\".border-t-2\").eq(0).click();\n    cy.get(\".border-t-2\").eq(0).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(\".t--widget-button2 button\").should(\"have.css\", \"border-radius\", borderRadius //0px\n      );\n\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\");\n      cy.get(\".t--widget-button1 button\").should(\"have.css\", \"border-radius\", \"24px\");\n    });\n\n    //Change Shadow & verify\n    cy.contains(\".ads-v2-segmented-control-value-0\", \"Large\").click();\n    cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\");\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"box-shadow\", \"none\");\n    cy.assertPageSave();\n    cy.wait(2000);\n    cy.PublishtheApp();\n\n    //Verify Background color\n    cy.get(\".t--widget-buttonwidget:nth-child(4) button\").should(\"have.css\", \"background-color\", \"rgb(134, 239, 172)\" //rgb(134, 239, 172)\n    ); //new widget with its own color\n\n    ////old widgets still conforming to theme color\n    cy.get(\".t--widget-buttonwidget button\").should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n\n    //Verify Border radius\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"border-radius\", \"0px\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"border-radius\", \"24px\");\n\n    //Verify Box shadow\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\");\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"box-shadow\", \"none\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(1000);\n\n    //Resetting back to theme\n    ee.NavigateToSwitcher(\"Explorer\");\n    ee.ExpandCollapseEntity(\"Widgets\"); //to expand widgets\n    ee.SelectEntityByName(\"Button2\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-buttoncolor .reset-button\").then($elem => {\n      $elem[0].removeAttribute(\"display: none\");\n      $elem[0].click();\n    });\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //verify widget reverted to theme color\n    cy.get(\".t--property-control-borderradius .reset-button\").then($elem => {\n      $elem[0].removeAttribute(\"display: none\");\n      $elem[0].click();\n    });\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"border-radius\", \"24px\");\n\n    //the new widget with reverted styles also conforming to theme\n    cy.PublishtheApp();\n    cy.wait(4000); //for theme to settle\n    cy.get(\"body\").should(\"have.css\", \"font-family\", \"Inter, sans-serif\"); //Font\n\n    cy.xpath(\"//div[@id='root']//section/parent::div\").should(\"have.css\", \"background-color\", \"rgb(253, 224, 71)\"); //Background Color\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetsPage.widgetBtn).length <= 1) {\n        cy.reload();\n        cy.wait(4000);\n      }\n    });\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\"); //Widget Color\n\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\"); //Since Shadow revert option does not exixts\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(2000);\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Verify Chainging theme should not affect Individual widgets with changed Color, Border radius, Shadow & can revert to newly selected theme","suites":["App Theming funtionality"],"updatePoint":{"line":650,"column":148,"index":26480},"line":650,"code":"  it(\"10. Verify Chainging theme should not affect Individual widgets with changed Color, Border radius, Shadow & can revert to newly selected theme\", () => {\n    cy.get(\"canvas\").first(0).trigger(\"click\", {\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n\n    //Changing to one of Featured themes & then changing individual widget properties\n    cy.xpath(applyTheme(\"Featured themes\", \"Sunrise\")).click({\n      force: true\n    }).wait(2000);\n\n    //Change individual widget properties for Button1\n    ee.NavigateToSwitcher(\"Explorer\");\n    ee.ExpandCollapseEntity(\"Widgets\"); //to expand widgets\n    ee.SelectEntityByName(\"Button1\");\n    cy.moveToStyleTab();\n\n    //Change Color & verify\n    cy.get(widgetsPage.colorPickerV2Popover).click({\n      force: true\n    }).click();\n    cy.get(widgetsPage.colorPickerV2TailwindColor).eq(13).then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.get(\".t--widget-button1 button\").should(\"have.css\", \"background-color\", $elem.css(\"background-color\")); //new widget with its own color\n\n      cy.get(\".t--widget-button2 button\").should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //old widgets still conforming to theme color\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\");\n    });\n\n    //Change Border & verify\n\n    cy.get(\".border-t-2\").eq(1).click().wait(500);\n    cy.get(\".border-t-2\").eq(1).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(\".t--widget-button1 button\").should(\"have.css\", \"border-radius\", borderRadius //6px\n      );\n\n      cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\");\n      cy.get(\".t--widget-button2 button\").should(\"have.css\", \"border-radius\", \"24px\");\n    });\n\n    //Change Shadow & verify\n    cy.contains(\".ads-v2-segmented-control-value-0\", \"Small\").click();\n    cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\");\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"box-shadow\",\n    //same value as previous box shadow selection\n    //since revertion is not possible for box shadow - hence this widget maintains the same value\n    \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\");\n    cy.assertPageSave();\n\n    //Add deploy mode verification here also!\n    cy.PublishtheApp();\n\n    //Verify Background color\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"background-color\", \"rgb(252, 165, 165)\"); //new widget with its own color\n\n    ////old widgets still conforming to theme color\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\");\n\n    //Verify Border radius\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"border-radius\", \"6px\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"border-radius\", \"24px\");\n\n    //Verify Box shadow\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px\");\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\");\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(1000);\n\n    //Resetting back to theme\n    ee.NavigateToSwitcher(\"Explorer\");\n    ee.ExpandCollapseEntity(\"Widgets\"); //to expand widgets\n    ee.SelectEntityByName(\"Button1\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-buttoncolor .reset-button\").then($elem => {\n      $elem[0].removeAttribute(\"display: none\");\n      $elem[0].click();\n    });\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //verify widget reverted to theme color\n\n    cy.get(\".t--property-control-borderradius .reset-button\").then($elem => {\n      $elem[0].removeAttribute(\"display: none\");\n      $elem[0].click();\n    });\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"border-radius\", \"24px\");\n\n    //the new widget with reverted styles also conforming to theme\n    cy.PublishtheApp();\n    cy.wait(4000); //for theme to settle\n    cy.get(\"body\").should(\"have.css\", \"font-family\", \"Rubik, sans-serif\"); //Font for Rounded theme\n\n    cy.xpath(\"//div[@id='root']//section/parent::div\").should(\"have.css\", \"background-color\", \"rgb(255, 241, 242)\"); //Background Color of canvas\n\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //Widget Color\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetsPage.widgetBtn).length <= 1) {\n        cy.reload();\n        cy.wait(4000);\n      }\n    });\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //Widget Color\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(239, 68, 68)\"); //Widget Color\n\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"border-radius\", \"24px\"); //Border Radius\n\n    cy.get(\".t--widget-button1 button\").should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px\"); //Shadow\n    cy.get(\".t--widget-button2 button\").should(\"have.css\", \"box-shadow\", \"rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px\"); //Since Shadow revert option does not exixts\n    cy.get(publish.iconWidgetBtn).should(\"have.css\", \"box-shadow\", \"none\"); //Shadow\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    }).wait(1000);\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and drop form widget and validate Default color/font/shadow/border and list of font validation","suites":["Theme validation for default data"],"updatePoint":{"line":10,"column":108,"index":676},"line":10,"code":"  it(\"1. Drag and drop form widget and validate Default color/font/shadow/border and list of font validation\", function () {\n    cy.log(\"Login Successful\");\n    cy.reload(); // To remove the rename tooltip\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.get(commonlocators.entityExplorersearch).clear().type(\"form\");\n    cy.dragAndDropToCanvas(\"formwidget\", {\n      x: 300,\n      y: 80\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.get(themelocator.canvas).click({\n      force: true\n    });\n    cy.wait(2000);\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    //Border validation\n    //cy.contains(\"Border\").click({ force: true });\n    cy.get(themelocator.border).should(\"have.length\", \"3\");\n    cy.borderMouseover(0, \"none\");\n    cy.borderMouseover(1, \"M\");\n    cy.borderMouseover(2, \"L\");\n    cy.contains(\"Border\").click({\n      force: true\n    });\n\n    //Shadow validation\n    //cy.contains(\"Shadow\").click({ force: true });\n    cy.wait(2000);\n    cy.contains(\"Shadow\").click({\n      force: true\n    });\n\n    //Font\n    //cy.contains(\"Font\").click({ force: true });\n    // cy.get(\"span[name='expand-more']\").then(($elem) => {\n    //   cy.get($elem).click({ force: true });\n    //   cy.wait(250);\n\n    cy.get(themelocator.fontsSelected)\n    //.eq(10)\n    .should(\"have.text\", \"Nunito Sans\");\n    //});\n    cy.contains(\"Font\").click({\n      force: true\n    });\n\n    //Color\n    //cy.contains(\"Color\").click({ force: true });\n    cy.wait(2000);\n    cy.colorMouseover(0, \"Primary color\");\n    cy.validateColor(\"Primary\", \"#553DE9\");\n    cy.colorMouseover(1, \"Background color\");\n    cy.validateColor(\"Background\", \"#F8FAFC\");\n    appSettings.ClosePane();\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Theme_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Default Theme change across application","suites":["Theme validation for default data"],"updatePoint":{"line":68,"column":57,"index":2471},"line":68,"code":"  it(\"2. Validate Default Theme change across application\", function () {\n    cy.get(formWidgetsPage.formD).click();\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, widgetsPage.widgetNameSpan);\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(21, 128, 61);']\").last().click();\n    cy.wait(2000);\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(21, 128, 61)\");\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    //Change the Theme\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.get(\".cursor-pointer:contains('Applied theme')\").click({\n      force: true\n    });\n    cy.get(\".t--theme-card main > main\").first().invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".bp3-button:contains('Submit')\").last().invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        themeBackgroudColor = CurrentBackgroudColor;\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Theme_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and drop form widget and validate Default font and list of font validation","suites":["Theme validation usecases"],"updatePoint":{"line":12,"column":88,"index":708},"line":12,"code":"  it(\"1. Drag and drop form widget and validate Default font and list of font validation\", function () {\n    cy.log(\"Login Successful\");\n    cy.reload(); // To remove the rename tooltip\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.get(commonlocators.entityExplorersearch).clear().type(\"form\");\n    cy.dragAndDropToCanvas(\"formwidget\", {\n      x: 300,\n      y: 80\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.get(themelocator.canvas).click({\n      force: true\n    });\n    cy.wait(2000);\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    //Border validation\n    //cy.contains(\"Border\").click({ force: true });\n    cy.get(themelocator.border).should(\"have.length\", \"3\");\n    cy.borderMouseover(0, \"none\");\n    cy.borderMouseover(1, \"M\");\n    cy.borderMouseover(2, \"L\");\n    cy.get(themelocator.border).eq(2).click({\n      force: true\n    });\n    cy.wait(\"@updateTheme\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(2000);\n    cy.contains(\"Border\").click({\n      force: true\n    });\n\n    //Shadow validation\n    cy.xpath(theme.locators._boxShadow(\"L\")).click({\n      force: true\n    });\n    cy.wait(\"@updateTheme\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(2000);\n    cy.contains(\"Shadow\").click({\n      force: true\n    });\n\n    //Font\n    cy.xpath(\"//p[text()='App font']/following-sibling::section//div//input\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.fixture(\"fontData\").then(function (testdata) {\n        this.testdata = testdata;\n      });\n      cy.get(themelocator.fontsSelected)\n      //.eq(10)\n      .should(\"contain.text\", \"Nunito Sans\");\n      cy.get(\".rc-virtual-list .rc-select-item-option\").find(\".leading-normal\").eq(2).then($childElem => {\n        cy.get($childElem).click({\n          force: true\n        });\n        cy.get(\".t--draggable-buttonwidget button :contains('Sub')\").should(\"have.css\", \"font-family\", `Poppins, sans-serif`);\n        //themeFont = `${$childElem.children().last().text()}, sans-serif`;\n        themeFont = `Poppins, sans-serif`;\n        cy.contains(\"Font\").click({\n          force: true\n        });\n\n        //Color\n        //cy.contains(\"Color\").click({ force: true });\n        cy.wait(2000);\n        cy.colorMouseover(0, \"Primary color\");\n        cy.validateColor(\"Primary\", \"#553DE9\");\n        cy.colorMouseover(1, \"Background color\");\n        cy.validateColor(\"Background\", \"#F8FAFC\");\n        cy.get(themelocator.inputColor).click({\n          force: true\n        });\n        cy.chooseColor(0, themelocator.greenColor);\n        cy.get(themelocator.inputColor).should(\"have.value\", \"#15803d\");\n        cy.get(themelocator.inputColor).clear({\n          force: true\n        });\n        cy.wait(2000);\n        cy.get(themelocator.inputColor).type(\"red\");\n        cy.get(themelocator.inputColor).should(\"have.value\", \"red\");\n        cy.wait(2000);\n        cy.get(themelocator.inputColor).eq(0).click({\n          force: true\n        });\n        cy.get(themelocator.inputColor).click({\n          force: true\n        });\n        cy.get('[data-testid=\"color-picker\"]').first().click({\n          force: true\n        });\n        cy.get(\"[style='background-color: rgb(21, 128, 61);']\").last().click();\n        cy.wait(2000);\n        cy.get(themelocator.inputColor).should(\"have.value\", \"#15803d\");\n        cy.get(themelocator.inputColor).clear({\n          force: true\n        });\n        cy.wait(2000);\n        cy.get(themelocator.inputColor).click().type(\"Black\");\n        cy.get(themelocator.inputColor).should(\"have.value\", \"Black\");\n        cy.wait(2000);\n        cy.contains(\"Color\").click({\n          force: true\n        });\n        appSettings.ClosePane();\n\n        //Publish the App and validate Font across the app\n        cy.PublishtheApp();\n        cy.get(\".bp3-button:contains('Sub')\").should(\"have.css\", \"font-family\", themeFont);\n        cy.get(\".bp3-button:contains('Reset')\").should(\"have.css\", \"font-family\", themeFont);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Default Theme change across application","suites":["Theme validation usecases"],"updatePoint":{"line":128,"column":57,"index":4906},"line":128,"code":"  it(\"2. Validate Default Theme change across application\", function () {\n    cy.goToEditFromPublish();\n    cy.get(formWidgetsPage.formD).click();\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, widgetsPage.widgetNameSpan);\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(21, 128, 61);']\").last().click();\n    cy.wait(2000);\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(21, 128, 61)\");\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    //Change the Theme\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    cy.get(themelocator.currentTheme).click({\n      force: true\n    });\n    cy.get(\".t--theme-card main > main\").first().invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".bp3-button:contains('Sub')\").last().invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        themeBackgroudColor = CurrentBackgroudColor;\n        appSettings.ClosePane();\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate Theme change across application","suites":["Theme validation usecases"],"updatePoint":{"line":159,"column":49,"index":6173},"line":159,"code":"  it(\"3. Validate Theme change across application\", function () {\n    cy.goToEditFromPublish();\n    cy.get(formWidgetsPage.formD).click();\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, widgetsPage.widgetNameSpan);\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(21, 128, 61);']\").last().click();\n    cy.wait(2000);\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(21, 128, 61)\");\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    //Change the Theme\n    cy.get(commonlocators.changeThemeBtn).click({\n      force: true\n    });\n    // select a theme\n    cy.get(commonlocators.themeCard).last().click({\n      force: true\n    });\n\n    // check for alert\n    cy.get(`${commonlocators.themeCard}`).last().siblings(\"div\").first().invoke(\"text\").then(text => {\n      cy.get(commonlocators.toastmsg).contains(`Theme ${text} applied`);\n    });\n    cy.get(`${commonlocators.themeCard} > main`).last().invoke(\"css\", \"background-color\").then(backgroudColor => {\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", backgroudColor);\n    });\n    cy.get(themelocator.currentTheme).click({\n      force: true\n    });\n    cy.get(\".t--theme-card > main\").first().invoke(\"css\", \"background-color\").then(backgroudColor => {\n      cy.get(commonlocators.canvas).should(\"have.css\", \"background-color\", backgroudColor);\n    });\n    cy.get(\".t--theme-card main > main\").first().invoke(\"css\", \"background-color\").then(CurrentBackgroudColor => {\n      cy.get(\".t--theme-card main > main\").last().invoke(\"css\", \"background-color\").then(selectedBackgroudColor => {\n        expect(CurrentBackgroudColor).to.equal(selectedBackgroudColor);\n        themeBackgroudColor = CurrentBackgroudColor;\n        appSettings.ClosePane();\n      });\n    });\n    cy.get(formWidgetsPage.formD).click();\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, widgetsPage.widgetNameSpan);\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    });\n    cy.get(\"[style='background-color: rgb(126, 34, 206);']\").first().click();\n    cy.wait(2000);\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(126, 34, 206)\");\n\n    //Publish the App and validate Theme across the app\n    cy.PublishtheApp();\n    //Bug Form backgroud colour reset in Publish mode\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(126, 34, 206)\");\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Theme_FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and drop multi-select widget and validate Default font and list of font validation + Bug 15007","suites":["Theme validation usecase for multi-select widget"],"updatePoint":{"line":9,"column":108,"index":547},"line":9,"code":"  it(\"1. Drag and drop multi-select widget and validate Default font and list of font validation + Bug 15007\", function () {\n    //cy.reload(); // To remove the rename tooltip\n    ee.DragDropWidgetNVerify(\"multiselectwidgetv2\", 300, 80);\n    cy.get(themelocator.canvas).click({\n      force: true\n    });\n    cy.wait(2000);\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    //Border validation\n    //cy.contains(\"Border\").click({ force: true });\n    cy.get(themelocator.border).should(\"have.length\", \"3\");\n    cy.borderMouseover(0, \"none\");\n    cy.borderMouseover(1, \"M\");\n    cy.borderMouseover(2, \"L\");\n    cy.get(themelocator.border).eq(1).click({\n      force: true\n    });\n    cy.wait(\"@updateTheme\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(1000);\n    cy.contains(\"Border\").click({\n      force: true\n    });\n\n    //Shadow validation\n    //cy.contains(\"Shadow\").click({ force: true });\n    cy.wait(2000);\n    cy.xpath(theme.locators._boxShadow(\"L\")).click({\n      force: true\n    });\n    cy.wait(\"@updateTheme\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(1000);\n    cy.contains(\"Shadow\").click({\n      force: true\n    });\n\n    //Font\n    cy.xpath(\"//p[text()='App font']/following-sibling::section//div//input\").then($elem => {\n      cy.get($elem).click({\n        force: true\n      });\n      cy.wait(250);\n      cy.fixture(\"fontData\").then(function (testdata) {\n        this.testdata = testdata;\n      });\n      cy.get(themelocator.fontsSelected)\n      //.eq(10)\n      .should(\"contain.text\", \"Nunito Sans\");\n      cy.get(\".rc-virtual-list .rc-select-item-option\").find(\".leading-normal\").eq(3).then($childElem => {\n        cy.get($childElem).click({\n          force: true\n        });\n        cy.get(\".t--draggable-multiselectwidgetv2:contains('more')\").should(\"have.css\", \"font-family\", `Inter, sans-serif`);\n        themeFont = `Inter, sans-serif`;\n      });\n    });\n    cy.contains(\"Font\").click({\n      force: true\n    });\n\n    //Color - Bug 23501 - hence skipping\n    // cy.wait(1000);\n    // theme.ChangeThemeColor(\"purple\", \"Primary\");\n    // cy.get(themelocator.inputColor).should(\"have.value\", \"purple\");\n    // cy.wait(1000);\n\n    // theme.ChangeThemeColor(\"brown\", \"Background\");\n    // cy.get(themelocator.inputColor).should(\"have.value\", \"brown\");\n    // cy.wait(1000);\n    // cy.contains(\"Color\").click({ force: true });\n    appSettings.ClosePane();\n  });","file":"e2e/Regression/ClientSide/ThemingTests/Theme_MultiSelectWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Publish the App and validate Font across the app + Bug 15007","suites":["Theme validation usecase for multi-select widget"],"line":81,"code":"  it.skip(\"2. Publish the App and validate Font across the app + Bug 15007\", function () {","file":"e2e/Regression/ClientSide/ThemingTests/Theme_MultiSelectWidget_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"3. Validate current theme feature","suites":["Theme validation usecase for multi-select widget"],"line":88,"code":"  it.skip(\"3. Validate current theme feature\", function () {","file":"e2e/Regression/ClientSide/ThemingTests/Theme_MultiSelectWidget_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Drag and drop button widget, change value and check reset flow","suites":["Theme validation usecases"],"updatePoint":{"line":7,"column":71,"index":459},"line":7,"code":"  it(\"1. Drag and drop button widget, change value and check reset flow\", function () {\n    // drop button widget\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-buttonwidget\").should(\"exist\");\n\n    // open property pane\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.moveToStyleTab();\n    // change color to red\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(\"red\");\n\n    // click on canvas to see the theming pane\n    cy.get(\"#canvas-selection-0\").click({\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    // reset theme\n    cy.contains(\"Theme properties\").closest(\"div\").siblings().first().find(\"button\").click({\n      force: true\n    });\n    cy.contains(\"Reset widget styles\").click({\n      force: true\n    });\n    cy.get(`${commonlocators.themeCard} > main > main`).first().invoke(\"css\", \"background-color\").then(backgroudColor => {\n      cy.get(widgetsPage.widgetBtn).should(\"have.css\", \"background-color\", backgroudColor);\n    });\n    appSettings.ClosePane();\n  });","file":"e2e/Regression/ClientSide/ThemingTests/ThemeReset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Update a user's picture with valid file","suites":["Update a user's display picture"],"updatePoint":{"line":15,"column":48,"index":600},"line":15,"code":"  it(\"1. Update a user's picture with valid file\", function () {\n    _.agHelper.GetNClick(_.locators._ds_imageSelector);\n    _.agHelper.GetElement(_.locators._ds_uppy_fileInput).as(\"fileInput\");\n    _.agHelper.GetElement(\"@fileInput\").eq(0).selectFile({\n      contents: \"cypress/fixtures/Files/valid-image.jpeg\",\n      fileName: \"valid-image.jpeg\",\n      mimeType: \"image/jpeg\"\n    }, {\n      force: true\n    });\n    _.agHelper.GetNClick(_.locators._ds_uppy_crop_confirm);\n    _.agHelper.GetNClick(_.locators._ds_uppy_upload_btn);\n    // API is finished even before wait begins\n    // cy.wait(\"@savePhoto\");\n    _.agHelper.AssertElementExist(\".image-view img\");\n  });","file":"e2e/Regression/ClientSide/UserProfile/UpdateUserPicture_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Invalid file throws error","suites":["Update a user's display picture"],"updatePoint":{"line":31,"column":34,"index":1254},"line":31,"code":"  it(\"2. Invalid file throws error\", function () {\n    _.agHelper.GetNClick(_.locators._ds_imageSelector);\n    _.agHelper.GetElement(_.locators._ds_uppy_fileInput).as(\"fileInput\");\n    _.agHelper.GetElement(\"@fileInput\").eq(0).selectFile({\n      contents: \"cypress/fixtures/Files/invalid-image.png\",\n      fileName: \"invalid-image.png\",\n      mimeType: \"image/png\"\n    }, {\n      force: true\n    });\n    _.agHelper.ValidateToastMessage(\"File content doesn't seem to be an image. Please verify.\");\n  });","file":"e2e/Regression/ClientSide/UserProfile/UpdateUserPicture_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Update a user's name","suites":["Update a user's name"],"updatePoint":{"line":5,"column":29,"index":209},"line":5,"code":"  it(\"1. Update a user's name\", function () {\n    _.homePage.NavigateToHome();\n    cy.get(homePage.profileMenu).click();\n    cy.get(\".t--edit-profile\").click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      username = uid;\n      cy.get(\"[data-testid=t--display-name]\").clear();\n      cy.get(\"[data-testid=t--display-name]\").click().type(username);\n      // Waiting as the input onchange has a debounce\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n      cy.wait(2000);\n      cy.get(\".t--admin-settings-back-button\").click();\n      cy.reload();\n      cy.get(homePage.profileMenu).click();\n      cy.get(\".t--user-name\").contains(username);\n    });\n  });","file":"e2e/Regression/ClientSide/UserProfile/UpdateUsersName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate email address and Reset pwd","suites":["Update a user's name"],"updatePoint":{"line":24,"column":45,"index":917},"line":24,"code":"  it(\"2. Validate email address and Reset pwd\", function () {\n    cy.intercept(\"POST\", \"/api/v1/users/forgotPassword\", {\n      fixture: \"resetPassword.json\"\n    }).as(\"resetPwd\");\n    cy.get(\".t--edit-profile\").click({\n      force: true\n    });\n\n    // Waiting as the input onchange has a debounce\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(\".ads-v2-input__input-section-input\").last().invoke(\"val\").then(text => {\n      expect(text).to.equal(Cypress.env(\"USERNAME\"));\n    });\n    cy.get(\".ads-v2-button__content\").last().contains(\"Reset password\").click();\n    cy.wait(\"@resetPwd\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/UserProfile/UpdateUsersName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Layout validation for app page in edit mode","suites":["Visual regression tests"],"updatePoint":{"line":10,"column":52,"index":623},"line":10,"code":"  it(\"1. Layout validation for app page in edit mode\", () => {\n    _.homePage.NavigateToHome();\n    //cy.visit(\"/applications\");\n    //cy.wait(3000);\n    _.homePage.CreateNewApplication();\n    //cy.get(\".createnew\").should(\"be.visible\").first().click();\n    cy.wait(3000);\n    // taking screenshot of app home page in edit mode\n    cy.get(\"#root\").matchImageSnapshot(\"apppage\");\n\n    //Layout validation for Quick page wizard\n    cy.get(\"[data-testid='generate-app']\").click();\n    cy.wait(2000);\n    // taking screenshot of generate crud page\n    cy.get(\"#root\").matchImageSnapshot(\"quickPageWizard\");\n\n    //Layout Validation for App builder Page\n    _.agHelper.GoBack();\n    cy.wait(2000);\n    // taking screenshot of app builder page\n    cy.get(\"#root\").matchImageSnapshot(\"emptyAppBuilder\");\n\n    //Layout Validation for Empty deployed app\n    cy.PublishtheApp();\n    cy.wait(3000);\n    // taking screenshot of empty deployed app\n    cy.get(\"#root\").matchImageSnapshot(\"EmptyApp\");\n\n    //Layout Validation for profile page\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--edit-profile\").click();\n    cy.wait(2000);\n    // taking screenshot of profile page\n    cy.get(\"#root\").matchImageSnapshot(\"Profile\");\n\n    //Layout validation for login page\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500);\n    // validating all the fields on login page\n    cy.xpath(\"//h1\").should(\"have.text\", \"Sign in\");\n    cy.get(\".bp3-label\").first().should(\"have.text\", \"Email \");\n    cy.get(\".bp3-label\").last().should(\"have.text\", \"Password \");\n    cy.xpath('//span[text()=\"Sign in\"]').should(\"be.visible\");\n    cy.get(\".bp3-label\").first().click();\n    cy.matchImageSnapshot(\"loginpage\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/AppPageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Layout validation for datasource page","suites":["Visual tests for datasources"],"updatePoint":{"line":8,"column":46,"index":574},"line":8,"code":"  it(\"1. Layout validation for datasource page\", () => {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      const newWorkspaceName = interception.response.body.data.name;\n      cy.CreateAppForWorkspace(newWorkspaceName, newWorkspaceName);\n    });\n    _.dataSources.NavigateToActiveTab();\n    cy.get(\".t--integrationsHomePage\").matchImageSnapshot(\"emptydatasourcepage\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/DatasourcePageLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. comments code on the editor","suites":["JSEditor Comment - Visual tests"],"updatePoint":{"line":5,"column":36,"index":248},"line":5,"code":"  it(\"1. comments code on the editor\", () => {\n    jsEditor.CreateJSObject(`export default {\n  myFun1: () => {\n    function hi(a,b) {\n      console.log(a,b);\n    }\n    hi(1,2);\n  },\n  myFun2: async () => {\n    //use async-await or promises\n  }\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforeCommenting1\");\n\n    // Comment out lines 2,3,4\n    for (let i = 2; i < 5; i++) {\n      agHelper.GetNClick(jsEditor._lineinJsEditor(i), 0, true);\n      agHelper.Sleep(100);\n      cy.get(jsEditor._lineinJsEditor(i)).type(agHelper.isMac ? \"{meta} /\" : \"{ctrl} /\");\n      agHelper.Sleep(500);\n    }\n\n    // Allow time to comment out lines\n    agHelper.Sleep(1000);\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterCommenting1\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorComment_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. TC 1933 - jSEditor prettify verification on cloned application","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":3,"column":71,"index":190},"line":3,"code":"  it(\"6. TC 1933 - jSEditor prettify verification on cloned application\", () => {\n    const appname = localStorage.getItem(\"AppName\");\n    _.jsEditor.CreateJSObject(`export default {\nmyFun1: () => {\nconsole.log(\"hi\");\nconsole.log(\"hidchjvxz sd,bcjmsd\");\nlet sum = 0;\nfor (let i = 1; i<5; i++) {\nsum += i;\n}\nswitch (sum) {\ncase 1: console.log('hey ho');\nlet sum1 = 2;\nbreak;\ncase 2:\nconsole.log('hey ho');\nlet sum2 = 2;\nbreak;\ncase 3:\n console.log('hey ho');\n break;\n}\nfunction hi(a,b) {\nconsole.log(a,b);\n}\nhi(1,2);\n},\nmyFun2: async () => {\n//use async-await or promises\n}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify6\");\n    _.agHelper.ActionContextMenuWithInPane(\"Prettify code\");\n    _.agHelper.Sleep(2000); //allowing time to prettify!\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify6\");\n\n    // taking a snap after clicking inside the editor to make sure prettify has not reverted\n    _.agHelper.GetNClick(_.jsEditor._lineinJsEditor(26));\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify6\");\n    _.homePage.NavigateToHome();\n    _.homePage.ForkApplication(appname);\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    _.entityExplorer.SelectEntityByName(\"JSObject1\", \"Queries/JS\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify6\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. TC 1933 - JSEditor prettify verification on cloned page","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":54,"column":64,"index":1658},"line":54,"code":"  it(\"7. TC 1933 - JSEditor prettify verification on cloned page\", () => {\n    _.jsEditor.CreateJSObject(`export default {\n  myFun1: () => {\n  console.log(\"hi\");\n  console.log(\"hidchjvxz sd,bcjmsd\");\n  let sum = 0;\n  for (let i = 1; i<5; i++) {\n  sum += i;\n  }\n  switch (sum) {\n  case 1: console.log('hey ho');\n  let sum1 = 2;\n  break;\n  case 2:\n  console.log('hey ho');\n  let sum2 = 2;\n  break;\n  case 3:\n   console.log('hey ho');\n   break;\n  }\n  function hi(a,b) {\n  console.log(a,b);\n  }\n  hi(1,2);\n  },\n  myFun2: async () => {\n  //use async-await or promises\n  }\n  }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify7\");\n    _.agHelper.ActionContextMenuWithInPane(\"Prettify code\");\n    _.agHelper.Sleep(); //allowing time to prettify!\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify7\");\n\n    // taking a snap after clicking inside the editor to make sure prettify has not reverted\n    _.agHelper.GetNClick(_.jsEditor._lineinJsEditor(26));\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify7\");\n    _.entityExplorer.ClonePage(\"Page1\");\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    _.entityExplorer.SelectEntityByName(\"JSObject1\", \"Queries/JS\");\n    _.agHelper.Sleep(3000);\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify7\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. TC 1864 : JSEditor validation for Prettify code with lint errors, triggered by menu option","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":104,"column":99,"index":3155},"line":104,"code":"  it(\"1. TC 1864 : JSEditor validation for Prettify code with lint errors, triggered by menu option\", () => {\n    _.jsEditor.CreateJSObject(`export default {\nmyVar1: [], myVar2: {},myFun1: () => {\nlet allFuncs = [\nGenderize.run({ country: 'India' }),\nRandomUser.run(),\nGetAnime.run({ name: 'Gintama' }),\nInspiringQuotes.run(),\nAgify.run({ person: 'Scripty' }),\nChristmas.run()\n]\nshowAlert(\"Running all api's\", \"warning\");\nreturn Promise.all(allFuncs).then(() => showAlert(\"Wonderful! all apis executed\", \"success\")).catch(() => showAlert(\"Please check your api's again\", \"error\")); },myFun2: async () => {\n//use async-await or promises}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify1\");\n    _.agHelper.ActionContextMenuWithInPane(\"Prettify code\");\n    _.agHelper.Sleep(2000); //allowing time to prettify!\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify1\");\n\n    // taking a snap after clicking inside the editor to make sure prettify has not reverted\n    _.agHelper.GetNClick(\"div.CodeMirror\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify1\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. TC 1916, 1917 : JSEditor validation for Prettify code with no errors, triggered by menu option","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":134,"column":103,"index":4413},"line":134,"code":"  it(\"2. TC 1916, 1917 : JSEditor validation for Prettify code with no errors, triggered by menu option\", () => {\n    _.jsEditor.CreateJSObject(`export default {\nmyFun1: () => {\nconsole.log(\"hi\");\nconsole.log(\"hidchjvxz sd,bcjmsd\");\nlet sum = 0;\nfor (let i = 1; i<5; i++) {\nsum += i;\n}\nswitch (sum) {\ncase 1: console.log('hey ho');\nlet sum1 = 2;\nbreak;\ncase 2:\nconsole.log('hey ho');\nlet sum2 = 2;\nbreak;\ncase 3:\n  console.log('hey ho');\n  break;\n}\nfunction hi(a,b) {\nconsole.log(a,b);\n}\nhi(1,2);\n},\nmyFun2: async () => {\n//use async-await or promises\n}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify2\");\n    _.agHelper.ActionContextMenuWithInPane(\"Prettify code\");\n    _.agHelper.Sleep(2000); //allowing time to prettify!\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify2\");\n\n    // taking a snap after clicking inside the editor to make sure prettify has not reverted\n    _.agHelper.GetNClick(_.jsEditor._lineinJsEditor(26));\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify2\");\n\n    // click run button and take a snap to make sure prettify did not revert\n    _.agHelper.GetNClick(_.jsEditor._runButton);\n    _.agHelper.Sleep(); // allow time to run\n    //Close bottom bar after execution.\n    _.debuggerHelper.CloseBottomBar();\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify2\");\n\n    // click dropdown to change function and make sure prettify has not reverted\n    _.jsEditor.SelectFunctionDropdown(\"myFun2\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify2\");\n    _.agHelper.AssertContains(\"ran successfully\", \"not.exist\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. TC 1863 : JSEditor validation for Prettify code with lint errors, triggered by keyboard shortcut","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":191,"column":105,"index":6190},"line":191,"code":"  it(\"3. TC 1863 : JSEditor validation for Prettify code with lint errors, triggered by keyboard shortcut\", () => {\n    _.jsEditor.CreateJSObject(`export default {\nmyVar1: [],\nmyVar2: {},\nmyFun1: () => {\nlet allFuncs = [\nGenderize.run({ country: 'India' }),\nRandomUser.run(),\nGetAnime.run({ name: 'Gintama' }),\nInspiringQuotes.run(),\nAgify.run({ person: 'Scripty' }),\nChristmas.run()\n]\nshowAlert(\"Running all api's\", \"warning\");\nreturn Promise.all(allFuncs).then(() => showAlert(\"Wonderful! all apis executed\", \"success\")).catch(() => showAlert(\"Please check your api's again\", \"error\")); },\nmyFun2: async () => {\n//use async-await or promises}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    cy.get(\"div.CodeMirror\").wait(1000).matchImageSnapshot(\"jsObjBeforePrettify3\");\n    cy.get(\"div.CodeMirror\").type(\"{shift+cmd+p}\");\n    cy.get(\"div.CodeMirror\").wait(1000).matchImageSnapshot(\"jsObjAfterPrettify3\");\n\n    // taking a snap after clicking inside the editor to make sure prettify has not reverted\n    _.agHelper.GetNClick(\"div.CodeMirror\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify3\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. TC 1863 : JSEditor validation for Prettify code with no errors, triggered by keyboard shortcut","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":223,"column":103,"index":7406},"line":223,"code":"  it(\"4. TC 1863 : JSEditor validation for Prettify code with no errors, triggered by keyboard shortcut\", () => {\n    _.jsEditor.CreateJSObject(`export default {\nmyVar1: [],\nmyVar2: {},\nmyFun1: () => {\nconsole.log(\"hi\");\nconsole.log(\"hidchjvxz sd,bcjmsd\");\nlet sum = 0;\nfor (let i = 1; i<5; i++) {\nsum += i;\n}\nswitch (sum) {\ncase 1: console.log('hey ho');\nlet sum1 = 2;\nbreak;\ncase 2:\nconsole.log('hey ho');\nlet sum2 = 2;\nbreak;\ncase 3:\n  console.log('hey ho');\n  break;\n}\nfunction hi(a,b) {\nconsole.log(a,b);\n}\nhi(1,2);\n},\nmyFun2: async () => {\n//use async-await or promises\n}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforePrettify4\");\n    cy.get(\"div.CodeMirror\").type(\"{shift+cmd+p}\").wait(1000);\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify4\");\n\n    // taking a snap after clicking inside the editor to make sure prettify has not reverted\n    _.agHelper.GetNClick(_.jsEditor._lineinJsEditor(26));\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify4_1\");\n\n    // click run button and take a snap to make sure prettify did not revert\n    _.agHelper.GetNClick(_.jsEditor._runButton);\n    _.agHelper.Sleep(); // allow time to run\n    //Close bottom bar after execution.\n    _.debuggerHelper.CloseBottomBar();\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify4_1\");\n\n    // click dropdown to change function and make sure prettify has not reverted\n    _.jsEditor.SelectFunctionDropdown(\"myFun2\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterPrettify4_1\");\n    _.agHelper.AssertContains(\"ran successfully\", \"not.exist\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. TC 1862 - JSEditor validation for goLineStartSmart with no errors, triggered by keyboard shortcut","suites":["JSEditor Indendation - Visual tests"],"updatePoint":{"line":281,"column":106,"index":9159},"line":281,"code":"  it(\"5. TC 1862 - JSEditor validation for goLineStartSmart with no errors, triggered by keyboard shortcut\", () => {\n    _.jsEditor.CreateJSObject(`const a = 1826;`, {\n      paste: false,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforeGoLineStartSmart5\");\n    cy.get(\"div.CodeMirror\").type(\"{cmd+leftArrow}\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterGoLineStartSmart5\");\n    cy.get(\"div.CodeMirror\").type(\"{cmd+leftArrow}\");\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterGoLineStartSmart5\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Auto indents and saves the code when Ctrl/Cmd+s is pressed","suites":["JS Editor Save and Auto-indent: Visual tests"],"updatePoint":{"line":3,"column":67,"index":195},"line":3,"code":"  it(\"1. Auto indents and saves the code when Ctrl/Cmd+s is pressed\", () => {\n    _.jsEditor.CreateJSObject(`export default {\nmyFun1: () => {\nconsole.log(\"hi\");\nconsole.log(\"hidchjvxz sd,bcjmsd\");\nlet sum = 0;\nfor (let i = 1; i<5; i++) {\nsum += i;\n}\nswitch (sum) {\ncase 1: console.log('hey ho');\nlet sum1 = 2;\nbreak;\ncase 2:\nconsole.log('hey ho');\nlet sum2 = 2;\nbreak;\ncase 3:\n console.log('hey ho');\n break;\n}\nfunction hi(a,b) {\nconsole.log(a,b);\n}\nhi(1,2);\n},\nmyFun2: async () => {\n//use async-await or promises\n}\n}`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    // _.agHelper.GetNClick(\"[name='expand-more']\", 1, true, 100);\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjBeforeSaveAndPrettify\");\n    cy.get(\"div.CodeMirror\").type(\"{cmd+s}\").wait(2000);\n    _.agHelper.GetNClick(_.jsEditor._lineinJsEditor(5));\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterSaveAndPrettify\");\n    _.agHelper.AssertAutoSave();\n\n    // taking a snap after clicking inside the editor to make sure prettify has not reverted\n    _.agHelper.GetNClick(_.jsEditor._lineinJsEditor(25));\n    cy.get(\"div.CodeMirror\").matchImageSnapshot(\"jsObjAfterSaveAndPrettify\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/JSEditorSaveAndAutoIndent_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify SwitchGroup inline enable/disbale","suites":["Visual regression tests"],"updatePoint":{"line":8,"column":46,"index":530},"line":8,"code":"  it(\"Verify SwitchGroup inline enable/disbale\", () => {\n    cy.dragAndDropToCanvas(\"switchgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.wait(1000);\n\n    //Verify default check\n    cy.get(\".t--property-control-inline input\").should(\"be.checked\");\n    // taking screenshot of switch container\n    cy.get(\"[data-testid=switchgroup-container]\").matchImageSnapshot(\"inlineEnabled\");\n\n    //Unchecking & verify snap\n    cy.get(\".t--property-control-inline input\").uncheck({\n      force: true\n    }).wait(2000).should(\"not.be.checked\");\n    cy.get(\"[data-testid=switchgroup-container]\").matchImageSnapshot(\"inlineDisabled\");\n\n    //Checking again & verify snap\n    cy.get(\".t--property-control-inline input\").check({\n      force: true\n    }).wait(2000).should(\"be.checked\");\n    cy.get(\"[data-testid=switchgroup-container]\").matchImageSnapshot(\"inlineEnabled\");\n\n    //Unchecking again & verify snap\n    cy.get(\".t--property-control-inline input\").uncheck({\n      force: true\n    }).wait(2000).should(\"not.be.checked\");\n    // taking screenshot of app home page in edit mode\n    cy.get(\"[data-testid=switchgroup-container]\").matchImageSnapshot(\"inlineDisabled\");\n  });","file":"e2e/Regression/ClientSide/VisualTests/WidgetsLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Audio Widget play functionality validation","suites":["Audio Widget Functionality"],"updatePoint":{"line":8,"column":51,"index":352},"line":8,"code":"  it(\"1. Audio Widget play functionality validation\", function () {\n    cy.openPropertyPane(\"audiowidget\");\n    cy.widgetText(\"Audio1\", widgetsPage.audioWidget, widgetsPage.widgetNameSpan);\n    cy.getAlert(\"onPlay\", \"Play success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Widgets/Audio/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Audio widget pause functionality validation","suites":["Audio Widget Functionality"],"updatePoint":{"line":15,"column":52,"index":737},"line":15,"code":"  it(\"2. Audio widget pause functionality validation\", function () {\n    cy.getAlert(\"onPause\", \"Pause success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // 3. Update audio url and check play and pause functionality validation\n    cy.testCodeMirror(testdata.audioUrl);\n    cy.get(\".CodeMirror textarea\").first().blur();\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Widgets/Audio/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checks if audio widget is reset on button click","suites":["Audio Widget Functionality"],"updatePoint":{"line":31,"column":56,"index":1516},"line":31,"code":"  it(\"3. Checks if audio widget is reset on button click\", function () {\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.widgetText(\"Button1\", widgetsPage.buttonWidget, widgetsPage.widgetNameSpan);\n    cy.selectResetWidget(\"onClick\");\n    cy.selectWidgetForReset(\"Audio1\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Audio1.playState}}`);\n    cy.openPropertyPane(\"audiowidget\");\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    // Wait time added, allowing a second to pass between playing and pausing the widget, before it is reset to zero\n    cy.wait(1000);\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.get(widgetsPage.widgetBtn).click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(`${widgetsPage.audioWidget} audio`).then($audio => {\n      const audio = $audio.get(0);\n      expect(audio.currentTime).to.equal(0);\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"NOT_STARTED\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Audio/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag & drop AudioRecorder and Text widgets","suites":["AudioRecorder Widget"],"updatePoint":{"line":4,"column":48,"index":207},"line":4,"code":"  it(\"Drag & drop AudioRecorder and Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{AudioRecorder1.isDirty}}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Audio/AudioRecorder_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["AudioRecorder Widget"],"updatePoint":{"line":18,"column":33,"index":629},"line":18,"code":"  it(\"Check isDirty meta property\", () => {\n    // Check if isDirty is false for the first time\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(`.t--widget-${widgetName} button`).first().click();\n    cy.get(`.t--widget-${widgetName} .status`).should(\"have.text\", \"Press to start recording\").should(\"exist\");\n    // Start recording and recorder for 3 seconds\n    cy.get(`.t--widget-${widgetName} button`).first().click();\n    cy.wait(3000);\n    // Stop recording\n    cy.get(`.t--widget-${widgetName} button span.bp3-icon-symbol-square`).first().click();\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Audio/AudioRecorder_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Button-Modal Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":14,"column":32,"index":631},"line":14,"code":"  it(\"1. Button-Modal Validation\", function () {\n    //creating the Modal and verify Modal name\n    cy.createModal(this.data.ModalName, \"onClick\");\n    cy.PublishtheApp();\n    cy.wait(5000); //for page to load fully - for CI exclusively\n    cy.get(publishPage.buttonWidget).should(\"be.visible\");\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Button-CallAnApi Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":23,"column":36,"index":1068},"line":23,"code":"  it(\"2. Button-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onClickAction of the button widget.\n    // Creating the api\n    _.propPane.ClearActionField(\"onClick\");\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"buttonApi\");\n    cy.log(\"Creation of buttonApi Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, \"mock-api?records=20&page=4&size=3\");\n    cy.SaveAndRunAPI();\n\n    // Going to HomePage where the button widget is located and opening it's property pane.\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\");\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n\n    // Adding the api in the onClickAction of the button widget.\n    cy.executeDbQuery(\"buttonApi\", \"onClick\");\n    // Filling the messages for success/failure in the onClickAction of the button widget.\n    cy.onClickActions(\"Success\", \"Error\", \"Execute a query\", \"buttonApi.run\");\n    cy.PublishtheApp();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetsPage.apiCallToast).length <= 0) {\n        cy.get(publishPage.buttonWidget).click();\n      }\n    });\n    // Clicking the button to verify the success message\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetsPage.apiCallToast).length <= 0) {\n        cy.get(publishPage.buttonWidget).click();\n      }\n    });\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Button-Call-Query Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":57,"column":37,"index":2568},"line":57,"code":"  it(\"3. Button-Call-Query Validation\", function () {\n    //creating a query and calling it from the onClickAction of the button widget.\n    // Creating a mock query\n    // cy.CreateMockQuery(\"Query1\");\n    let postgresDatasourceName;\n    cy.startRoutesForDatasource();\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n      cy.fillPostgresDatasourceForm();\n      cy.saveDatasource();\n      cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    });\n    cy.CreateMockQuery(\"Query1\");\n\n    // Going to HomePage where the button widget is located and opeing it's property pane.\n    cy.get(widgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.openPropertyPane(\"buttonwidget\");\n\n    // Adding the query in the onClickAction of the button widget.\n    cy.executeDbQuery(\"Query1\", \"onClick\");\n    // Filling the messages for success/failure in the onClickAction of the button widget.\n    cy.onClickActions(\"Success\", \"Error\", \"Execute a query\", \"Query1.run\");\n    cy.PublishtheApp();\n\n    // Clicking the button to verify the success message\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetsPage.apiCallToast).length <= 0) {\n        cy.get(publishPage.buttonWidget).click();\n      }\n    });\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle JS - Button-CallAnApi Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":99,"column":48,"index":4252},"line":99,"code":"  it(\"4. Toggle JS - Button-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onClickAction of the button widget.\n    // calling the existing api\n    cy.get(widgetsPage.toggleOnClick).click({\n      force: true\n    });\n    _.propPane.UpdatePropertyFieldValue(\"onClick\", \"{{buttonApi.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp();\n\n    // Clicking the button to verify the success message\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetsPage.apiCallToast).length <= 0) {\n        cy.get(publishPage.buttonWidget).click();\n      }\n    });\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Toggle JS - Button-Call-Query Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":117,"column":49,"index":5013},"line":117,"code":"  it(\"5. Toggle JS - Button-Call-Query Validation\", function () {\n    //creating a query and calling it from the onClickAction of the button widget.\n    // Creating a mock query\n    _.propPane.UpdatePropertyFieldValue(\"onClick\", \"{{Query1.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp();\n\n    // Clicking the button to verify the success message\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetsPage.apiCallToast).length <= 0) {\n        cy.get(publishPage.buttonWidget).click();\n        cy.wait(3000);\n      }\n    });\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Toggle JS - Button-Call-SetTimeout Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":133,"column":54,"index":5725},"line":133,"code":"  it(\"6. Toggle JS - Button-Call-SetTimeout Validation\", function () {\n    //creating a query and calling it from the onClickAction of the button widget.\n    // Creating a mock query\n    _.propPane.UpdatePropertyFieldValue(\"onClick\", \"{{setTimeout(() => showAlert('Hello from setTimeout after 3 seconds'), 3000)}}\");\n    cy.PublishtheApp();\n\n    // Clicking the button to verify the success message\n    cy.get(publishPage.buttonWidget).click();\n    cy.wait(3000);\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(widgetsPage.apiCallToast).length <= 0) {\n        cy.get(publishPage.buttonWidget).click();\n        cy.wait(3000);\n      }\n    });\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Hello from setTimeout after 3 seconds\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Icon alignment should not change when changing the icon","suites":["Button Widget Functionality"],"updatePoint":{"line":14,"column":64,"index":650},"line":14,"code":"  it(\"1. Icon alignment should not change when changing the icon\", () => {\n    cy.moveToStyleTab();\n    cy.wait(500);\n    // Add an icon\n    cy.get(\".t--property-control-selecticon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n\n    // Assert if the icon exists\n    cy.get(`${widgetsPage.buttonWidget} .bp3-icon-add`).should(\"exist\");\n    // Change icon alignment to right\n    cy.get(`${iconAlignmentProperty} span[data-value=\"right\"]`).last().click({\n      force: true\n    });\n    cy.wait(200);\n    // Assert if the icon appears on the right hand side of the button text\n    cy.get(widgetsPage.buttonWidget).contains(\"Submit\").children(\"span\").should(\"have.length\", 2);\n    cy.get(`${widgetsPage.buttonWidget} span.bp3-button-text`).next().should(\"have.class\", \"bp3-icon-add\");\n    // Change the existing icon\n    cy.get(\".t--property-control-selecticon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-airplane\").first().click({\n      force: true\n    });\n    // Assert if the icon changes\n    // Assert if the icon still exists on the right side of the text\n    cy.get(`${widgetsPage.buttonWidget} .bp3-icon-airplane`).should(\"exist\").prev().should(\"have.text\", \"Submit\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Button-Color Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":46,"column":32,"index":1909},"line":46,"code":"  it(\"2. Button-Color Validation\", function () {\n    // Change button color\n    cy.changeButtonColor(\"rgb(255, 0, 0)\");\n    cy.goToEditFromPublish();\n    // Button default variant validation\", function () {\n    // Checks whether the default variant is PRIMARY or not\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(widgetsPage.widgetBtn).should(\"have.attr\", \"data-test-variant\", \"PRIMARY\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Button-Name validation","suites":["Button Widget Functionality"],"updatePoint":{"line":55,"column":31,"index":2309},"line":55,"code":"  it(\"3. Button-Name validation\", function () {\n    //changing the Button Name\n    cy.widgetText(this.data.ButtonName, widgetsPage.buttonWidget, widgetsPage.widgetNameSpan);\n\n    //Changing the text on the Button\n    cy.testJsontext(\"label\", this.data.ButtonLabel);\n    cy.assertPageSave();\n\n    //Verify the Button name and label\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseover\");\n    cy.get(widgetsPage.buttonWidget + \" span.bp3-button-text\").should(\"have.text\", this.data.ButtonLabel);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget + \" span.bp3-button-text\").should(\"have.text\", this.data.ButtonLabel);\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Button-Disable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":69,"column":34,"index":2946},"line":69,"code":"  it(\"4. Button-Disable Validation\", function () {\n    //Check the disableed checkbox and Validate\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n    cy.goToEditFromPublish();\n\n    //Uncheck the disabled checkbox and validate\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateEnableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Toggle JS - Button-Disable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":84,"column":46,"index":3700},"line":84,"code":"  it(\"5. Toggle JS - Button-Disable Validation\", function () {\n    //Check the disabled checkbox by using JS widget and Validate\n    cy.get(widgetsPage.toggleDisable).click({\n      force: true\n    });\n    cy.testJsontext(\"disabled\", \"true\");\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n    cy.goToEditFromPublish();\n\n    //Uncheck the disabled checkbox and validate\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.testJsontext(\"disabled\", \"false\");\n    cy.validateEnableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Button-Unckeck Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":102,"column":48,"index":4503},"line":102,"code":"  it(\"6. Button-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox and validate\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"not.exist\");\n    cy.goToEditFromPublish();\n\n    //Check the disableed checkbox and Validate\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Toggle JS - Button-Unckeck Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":115,"column":60,"index":5046},"line":115,"code":"  it(\"7. Toggle JS - Button-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"not.exist\");\n    cy.goToEditFromPublish();\n    //Check the disabled checkbox using JS and Validate\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Button Widget Functionality"],"updatePoint":{"line":132,"column":22,"index":5656},"line":132,"code":"  it(\"excludeForAirgap\", \"8. Button-Check recaptcha type can be selected\", function () {\n    cy.selectDropdownValue(commonlocators.recaptchaVersion, \"reCAPTCHA v2\");\n    cy.get(commonlocators.recaptchaVersionText).last().should(\"have.text\", \"reCAPTCHA v2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Button Widget Functionality"],"updatePoint":{"line":136,"column":12,"index":5910},"line":136,"code":"  it(\"airgap\", \"9. Button-Check recaptcha type should not exist for airgap\", function () {\n    cy.get(commonlocators.recaptchaVersion).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Button-Copy & Delete Verification","suites":["Button Widget Functionality"],"updatePoint":{"line":139,"column":43,"index":6103},"line":139,"code":"  it(\"10. Button-Copy & Delete Verification\", function () {\n    //Copy button and verify all properties\n    _.agHelper.Sleep();\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\");\n    _.propPane.CopyWidgetFromPropertyPane(\"Submitbutton\");\n    //cy.copyWidget(\"buttonwidget\", widgetsPage.buttonWidget);\n    cy.goToEditFromPublish();\n\n    // Delete the button widget\n\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\", \"Widgets\");\n    _.propPane.DeleteWidgetFromPropertyPane(\"SubmitbuttonCopy\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.buttonWidget).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate show/hide tooltip feature on normal button","suites":["Button Widget Functionality - Validate tooltip visibility"],"updatePoint":{"line":9,"column":60,"index":475},"line":9,"code":"  it(\"1. Validate show/hide tooltip feature on normal button\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    // Add tooltip\n    cy.testJsontext(\"tooltip\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\");\n    // Hover in\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseover\");\n    // Check if a tooltip is displayed\n    cy.get(\".btnTooltipContainer .bp3-popover2-content\").should(\"have.text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\");\n    // Hover out\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseout\");\n    // Check if the tooltip is disappeared\n    cy.get(\".bp3-popover2-content\").contains(\"Lorem Ipsum is simply dummy text of the printing and typesetting industry\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_tooltip_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate show/hide tooltip feature for a disabled button on deploy","suites":["Button Widget Functionality - Validate tooltip visibility"],"updatePoint":{"line":22,"column":75,"index":1272},"line":22,"code":"  it(\"2. Validate show/hide tooltip feature for a disabled button on deploy\", function () {\n    // Disable the button\n    cy.get(\".t--property-control-disabled .ads-v2-switch\").click({\n      force: true\n    });\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    // Publish\n    cy.PublishtheApp();\n    // Hover in\n    cy.get(publish.buttonWidget).trigger(\"mouseover\");\n    // Check if a tooltip is displayed\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(\".bp3-popover2-content\").length <= 0) {\n        cy.get(publish.buttonWidget).trigger(\"mouseover\");\n      }\n    });\n    cy.get(\".bp3-popover2-content\").should(\"have.text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\");\n    // Hover out\n    cy.get(publish.buttonWidget).trigger(\"mouseout\");\n    // Check if the tooltip is disappeared\n    cy.get(\".bp3-popover2-content\").contains(\"Lorem Ipsum is simply dummy text of the printing and typesetting industry\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/Button_tooltip_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"If target width is smaller than min-width, The menu button popover width should be set to minimum width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":7,"column":109,"index":388},"line":7,"code":"  it(\"If target width is smaller than min-width, The menu button popover width should be set to minimum width\", () => {\n    cy.get(commonlocators.layoutControls).eq(3).click();\n    const minWidth = 12 * 12.3125;\n    const widgetId = \"yxjq5sck7d\";\n    // Get the default menu button\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().last().as(\"target\");\n    // Open popover\n    cy.get(\"@target\").click();\n    // Get the target width\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      expect(targetWidth).to.be.lessThan(minWidth);\n      // Check if popover width is set to its target width\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${minWidth}px`);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"If target width is bigger than min width, The menu button popover width should always be the same as the target width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":22,"column":123,"index":1155},"line":22,"code":"  it(\"If target width is bigger than min width, The menu button popover width should always be the same as the target width\", () => {\n    const minWidth = 12 * 12.3125;\n    const widgetId = \"t5l24fccio\";\n\n    // Get the default menu button\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().last().as(\"target\");\n    // Open popover\n    cy.get(\"@target\").click();\n    // Get the target width\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      expect(targetWidth).to.be.greaterThan(minWidth);\n      // Check if popover width is set to its target width\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${targetWidth}px`);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"After converting a simple button to a menu button, The menu button popover width should always be the same as the target width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":37,"column":132,"index":1881},"line":37,"code":"  it(\"After converting a simple button to a menu button, The menu button popover width should always be the same as the target width\", () => {\n    const minWidth = 12 * 12.3125;\n    const widgetId = \"t5l24fccio\";\n    const menuButtonId = \"groupButton1\";\n    // Change the first button type to menu\n    cy.editColumn(menuButtonId);\n    cy.get(\".ads-v2-segmented-control-value-MENU\").click({\n      force: true\n    });\n    cy.get(\".t--add-menu-item-btn\").click();\n    // Get the newly converted menu button\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().first().as(\"target\");\n    // Open popover\n    cy.get(\"@target\").click();\n    // Get the target width\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      expect(targetWidth).to.be.greaterThan(minWidth);\n      // Check if popover width is set to its target width\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${targetWidth}px`);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"If an existing menu button width changes, its popover width should always be the same as the changed target width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":58,"column":119,"index":2850},"line":58,"code":"  it(\"If an existing menu button width changes, its popover width should always be the same as the changed target width\", () => {\n    const minWidth = 12 * 12.3125;\n    const widgetId = \"t5l24fccio\";\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click();\n    // Change the first button text\n    cy.get(\".t--property-control-buttons input\").first().type(\"increase width\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // Get the menu button with its width changed\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().first().as(\"target\");\n    // Open popover\n    cy.get(\"@target\").click();\n    // Get the target width\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      expect(targetWidth).to.be.greaterThan(minWidth);\n      // Check if popover width is set to its target width\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${targetWidth}px`);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"After changing the orientation to vertical , The menu button popover width should always be the same as the target width","suites":["In a button group widget, menu button width"],"updatePoint":{"line":76,"column":126,"index":3870},"line":76,"code":"  it(\"After changing the orientation to vertical , The menu button popover width should always be the same as the target width\", () => {\n    const widgetId = \"mr048y04aq\";\n    // Open property pane of ButtonGroup3\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().first().click();\n    cy.moveToStyleTab();\n    // Change its orientation to vetical\n    cy.get(\".ads-v2-segmented-control-value-vertical\").click({\n      force: true\n    });\n    // Get the default menu button\n    cy.get(`.appsmith_widget_${widgetId} div.t--buttongroup-widget`).children().last().as(\"target\");\n    // Open popover\n    cy.get(\"@target\").click();\n    // Get the target width\n    cy.get(\"@target\").invoke(\"outerWidth\").then(targetWidth => {\n      // Check if popover width is set to its target width\n      cy.get(`.bp3-popover2.button-group-${widgetId}`).should(\"have.css\", \"width\", `${targetWidth}px`);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_MenuButton_Width_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new Button Group","suites":["Button Group Widget Functionality"],"updatePoint":{"line":11,"column":26,"index":433},"line":11,"code":"  it(\"Add new Button Group\", () => {\n    cy.wait(1000);\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"buttongroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--buttongroup-widget\").should(\"exist\");\n    cy.get(\".t--buttongroup-widget\").children().should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"ButtonGroup Widget Functionality on undo after delete","suites":["Button Group Widget Functionality"],"updatePoint":{"line":21,"column":59,"index":781},"line":21,"code":"  it(\"ButtonGroup Widget Functionality on undo after delete\", function () {\n    // Delete the first Button\n    cy.get(\".t--property-control-buttons .t--delete-column-btn\").eq(0).click({\n      force: true\n    });\n\n    // Check if the Button got deleted\n    cy.get(\".t--buttongroup-widget\").children().should(\"have.length\", 2);\n\n    // Check the first button\n    cy.get(firstButton).contains(\"Add\");\n\n    // Undo\n    cy.get(\"body\").type(`{${modifierKey}+z}`);\n\n    // Check if the button is back\n    cy.get(\".t--buttongroup-widget\").children().should(\"have.length\", 3);\n\n    // Check the first button\n    cy.get(firstButton).contains(\"Favorite\");\n\n    // Navigate to the first button property pane\n    cy.get(\".t--property-control-buttons .t--edit-column-btn\").eq(0).click({\n      force: true\n    });\n    cy.wait(1000);\n    // check the title\n    cy.get(\".t--property-pane-title\").contains(\"Favorite\");\n    // navigate back\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":52,"column":31,"index":1746},"line":52,"code":"  it(\"Verify buttons alignments\", function () {\n    // check first button placement\n    cy.editColumn(\"groupButton2\");\n    cy.moveToStyleTab();\n    // placement text\n    cy.get(\".t--property-control-placement .rc-select-selection-item\").should(\"have.text\", \"Center\");\n    // 1st btn\n    cy.get(firstButton).should(\"have.css\", \"justify-content\", \"center\");\n    cy.get(menuButton).should(\"have.css\", \"justify-content\", \"center\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update Placement and Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":62,"column":52,"index":2201},"line":62,"code":"  it(\"Update Placement and Verify buttons alignments\", function () {\n    // check first button placement\n    cy.selectDropdownValue(\".t--property-control-placement .rc-select-selection-item\", \"Between\");\n    // 1st btn\n    cy.get(firstButton).last().should(\"have.css\", \"justify-content\", \"space-between\");\n    // update dropdown value\n    cy.selectDropdownValue(\".t--property-control-placement .rc-select-selection-item\", \"Start\");\n    cy.get(firstButton).last().should(\"have.css\", \"justify-content\", \"start\");\n    // other button style stay same\n    cy.get(menuButton).should(\"have.css\", \"justify-content\", \"center\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update icon alignment and Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":73,"column":57,"index":2831},"line":73,"code":"  it(\"Update icon alignment and Verify buttons alignments\", function () {\n    // align right\n    cy.get(\"[data-value='left']\").first().click();\n    cy.wait(200);\n    // 1st btn\n    cy.get(firstButton).eq(1).should(\"have.css\", \"flex-direction\", \"row\");\n    // align left\n    cy.get(\"[data-value='right']\").last().click();\n    cy.wait(200);\n    // 1st btn\n    cy.get(firstButton).eq(1).should(\"have.css\", \"flex-direction\", \"row-reverse\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting Error validation on mouseover and errorlog tab","suites":["Linting warning validation with button widget"],"updatePoint":{"line":7,"column":60,"index":327},"line":7,"code":"  it(\"Linting Error validation on mouseover and errorlog tab\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500);\n\n    //lint mark validation\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    //lint warning message\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'Nodata' is not defined.\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    //lint warning message\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'lintError' is not defined.\");\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.errorTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.debugErrorMsg).should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/Widgets/Button/ButtonLintErrorValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Fill the Chart Widget Properties.","suites":["Chart Widget Functionality"],"updatePoint":{"line":14,"column":42,"index":653},"line":14,"code":"  it(\"1. Fill the Chart Widget Properties.\", function () {\n    //changing the Chart Name\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n    cy.widgetText(\"Test\", viewWidgetsPage.chartWidget, widgetsPage.widgetNameSpan);\n    cy.EnableAllCodeEditors();\n    //changing the Chart Title\n    /**\n     * @param{Text} Random Input Value\n     */\n    cy.testJsontext(\"title\", this.data.chartIndata);\n    cy.get(viewWidgetsPage.chartInnerText).click().contains(\"App Sign Up\").should(\"have.text\", \"App Sign Up\");\n\n    //Entering the Chart data\n    cy.testJsontext(\"chart-series-data-control\", JSON.stringify(this.data.chartInput));\n    cy.get(\".t--propertypane\").click(\"right\");\n\n    // Asserting Chart Height\n    cy.get(viewWidgetsPage.chartWidget).should(\"be.visible\").and(chart => {\n      expect(chart.height()).to.be.greaterThan(200);\n    });\n\n    //Entring the label of x-axis\n    cy.get(viewWidgetsPage.xlabel).click({\n      force: true\n    }).type(this.data.command).type(this.data.plan);\n    //Entring the label of y-axis\n    cy.get(viewWidgetsPage.ylabel).click({\n      force: true\n    }).type(this.data.command).click({\n      force: true\n    }).type(this.data.ylabel);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Pie Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":51,"column":39,"index":1922},"line":51,"code":"  it(\"2. Pie Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Pie chart\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.PieChartLabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Line Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":66,"column":40,"index":2489},"line":66,"code":"  it(\"3. Line Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Line chart\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Bar Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":81,"column":39,"index":3053},"line":81,"code":"  it(\"4. Bar Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Bar chart\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Area Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":96,"column":40,"index":3616},"line":96,"code":"  it(\"5. Area Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Area chart\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Column Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":111,"column":42,"index":4183},"line":111,"code":"  it(\"6. Column Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Column chart\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Toggle JS - Pie Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":126,"column":51,"index":4760},"line":126,"code":"  it(\"7. Toggle JS - Pie Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.get(widgetsPage.toggleChartType).click({\n      force: true\n    });\n    cy.testJsontext(\"charttype\", \"PIE_CHART\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.PieChartLabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Toggle JS - Line Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":144,"column":52,"index":5423},"line":144,"code":"  it(\"8. Toggle JS - Line Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"LINE_CHART\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Toggle JS - Bar Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":159,"column":51,"index":6009},"line":159,"code":"  it(\"9. Toggle JS - Bar Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"BAR_CHART\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Toggle JS - Area Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":174,"column":53,"index":6595},"line":174,"code":"  it(\"10. Toggle JS - Area Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"AREA_CHART\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Toggle JS - Column Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":189,"column":55,"index":7185},"line":189,"code":"  it(\"11. Toggle JS - Column Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"COLUMN_CHART\");\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Chart - Modal","suites":["Chart Widget Functionality"],"updatePoint":{"line":204,"column":23,"index":7744},"line":204,"code":"  it(\"12. Chart - Modal\", function () {\n    //creating the Modal and verify Modal name\n    cy.createModal(this.data.ModalName, \"onDataPointClick\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.chartPlotGroup).children().first().click();\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Chart-Unckeck Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":211,"column":48,"index":8099},"line":211,"code":"  it(\"13. Chart-Unckeck Visible field Validation\", function () {\n    // Making the widget invisible\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. Chart-Check Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":217,"column":46,"index":8337},"line":217,"code":"  it(\"14. Chart-Check Visible field Validation\", function () {\n    // Making the widget visible\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. Toggle JS - Chart-Unckeck Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":223,"column":60,"index":8581},"line":223,"code":"  it(\"15. Toggle JS - Chart-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"16. Toggle JS - Chart-Check Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":232,"column":58,"index":8910},"line":232,"code":"  it(\"16. Toggle JS - Chart-Check Visible field Validation\", function () {\n    //Check the disabled checkbox using JS and Validate\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"17. Chart Widget Functionality To Uncheck Horizontal Scroll Visible","suites":["Chart Widget Functionality"],"updatePoint":{"line":238,"column":73,"index":9180},"line":238,"code":"  it(\"17. Chart Widget Functionality To Uncheck Horizontal Scroll Visible\", function () {\n    cy.togglebarDisable(commonlocators.allowScroll);\n    cy.PublishtheApp();\n    cy.get(publish.horizontalTab).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"18. Chart Widget Functionality To Check Horizontal Scroll Visible","suites":["Chart Widget Functionality"],"updatePoint":{"line":243,"column":71,"index":9406},"line":243,"code":"  it(\"18. Chart Widget Functionality To Check Horizontal Scroll Visible\", function () {\n    cy.togglebar(commonlocators.allowScroll);\n    cy.PublishtheApp();\n    cy.get(publish.horizontalTab).eq(1).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"19. Check Chart widget reskinning config","suites":["Chart Widget Functionality"],"updatePoint":{"line":248,"column":46,"index":9602},"line":248,"code":"  it(\"19. Check Chart widget reskinning config\", function () {\n    cy.get(widgetsPage.toggleChartType).click({\n      force: true\n    });\n    cy.UpdateChartType(\"Column chart\");\n\n    // Check plot fill color\n    cy.get(\"g[class*='plot-group'] rect\").should(\"have.css\", \"fill\", \"rgb(85, 61, 233)\");\n\n    // Check axis name font size\n    cy.get(\"g[class*='dataset-axis-name'] text\").should(\"have.css\", \"font-size\", \"14px\");\n\n    // Check axis value font size and fill color\n    cy.get(\"g[class$='dataset-axis'] text\").should(\"have.css\", \"font-size\", \"12px\").should(\"have.css\", \"fill\", \"rgb(113, 110, 110)\");\n\n    // Check axis caption's fontSize, and fill color\n    cy.get(\"g[class$='caption'] text\").should(\"have.css\", \"font-size\", \"24px\").should(\"have.css\", \"fill\", \"rgb(35, 31, 32)\");\n\n    // Check base font family\n    cy.get(\".fusioncharts-container\").should(\"have.css\", \"font-family\", '\"Nunito Sans\", sans-serif');\n    cy.UpdateChartType(\"Pie chart\");\n    cy.get(\"g[class$='item'] text\").should(\"have.css\", \"font-family\", '\"Nunito Sans\"');\n    cy.get(\"g[class$='labels'] text\").should(\"have.css\", \"font-family\", '\"Nunito Sans\"');\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Chart Widget Skeleton Loading Functionality"],"updatePoint":{"line":10,"column":22,"index":435},"line":10,"code":"  it(\"excludeForAirgap\", \"1. Test case while reloading and on submission\", function () {\n    /**\n     * Use case:\n     * 1. Open Datasource editor\n     * 2. Click on sample(mock) user database.\n     * 3. Choose the first data source which consists of users keyword\n     * 4. Click on the \"New query +\"\" button\n     * 5. Name the Query as \"Query1\"\n     * 6. Write the query as \"SELECT * FROM users ORDER BY id LIMIT 10;\"\n     * 7. Run the Query\n     * 8. Go to Widgets\n     * 9. Click on the Submit Button\n     * 10. Check if we get \"bp3-skeleton\" class\n     * 11. Reload the page\n     * 12. Do step 10.\n     * 13. Remove the datasource*\n     */\n\n    //Step1\n    cy.wait(2000);\n    _.dataSources.CreateMockDB(\"Users\").then(dbName => {\n      _.dataSources.CreateQueryFromActiveTab(dbName, false);\n      _.agHelper.GetNClick(_.dataSources._templateMenuOption(\"Select\"));\n      _.dataSources.ToggleUsePreparedStatement(false);\n    });\n\n    // Step6.2: writing query to get the schema\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users ORDER BY id LIMIT 10;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n\n    //Step7:\n    cy.runQuery();\n\n    //Step8:\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(1000);\n\n    //Step9:\n    cy.get(\".bp3-button-text\").first().click({\n      force: true\n    });\n\n    //Step10:\n    cy.get(\".t--widget-chartwidget div[class*='bp3-skeleton']\").should(\"exist\");\n\n    /* This section is flaky hence commenting out\n    //Step11:\n    cy.reload();\n    //Step12:\n    cy.wait(1000);\n    cy.get(\".t--widget-chartwidget div[class*='bp3-skeleton']\").should(\"exist\");\n    //Step13:\n    /*cy.openPropertyPane(\"chartwidget\");\n    cy.updateCodeInput(\".t--property-control-chart-series-data-control\", \"\");\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-onclick .t--js-toggle\").click({ force: true });\n    cy.updateCodeInput(\".t--property-control-onclick\", \"\");\n    cy.get('.t--entity-name:contains(\"Query1\")').click({ force: true });\n    cy.get(\".t--more-action-menu\")\n    .first()\n    .click({ force: true });\n    cy.get(\".t--apiFormDeleteBtn\")\n    .first()\n    .click({ force: true });\n    cy.get('.t--entity-name:contains(\"Users\")')\n    .first()\n    .click({ force: true });\n    cy.get(\".datasources .t--entity-add-btn\")\n    .last()\n    .click();\n    cy.get(pages.integrationActiveTab).click({ force: true });\n    cy.get(\"span[name*='comment-context-menu']\")\n    .last()\n    .click({ force: true });\n    cy.wait(150);\n    cy.get(\".t--datasource-option-delete\").click({ force: true }); */\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_Widget_Loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Chart Widget Skeleton Loading Functionality"],"updatePoint":{"line":93,"column":12,"index":3077},"line":93,"code":"  it(\"airgap\", \"1. Test case while reloading and on submission - airgap\", function () {\n    cy.wait(2000);\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      dsname = httpResponse.response.body.data.name;\n    });\n    cy.wait(1000);\n    cy.get(datasource.createQuery).click();\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n    cy.get(queryLocators.queryNameField).type(\"Query1\");\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click();\n    cy.xpath(queryLocators.query).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users ORDER BY id LIMIT 10;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".bp3-button-text\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-chartwidget div[class*='bp3-skeleton']\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Chart_Widget_Loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. change chart type to custom chart","suites":["Chart Widget Functionality around custom chart data"],"updatePoint":{"line":6,"column":42,"index":236},"line":6,"code":"  it(\"1. change chart type to custom chart\", function () {\n    const value1 = 40;\n    cy.openPropertyPane(\"chartwidget\");\n    cy.UpdateChartType(\"Custom chart\");\n    //change chart value via input widget and validate\n    enterAndTest(\"inputwidgetv2\", value1, value1);\n    cy.wait(400);\n    cy.get(\".t--draggable-chartwidget\").get(\"[class^=raphael-group-][class$=-tracker]\").trigger(\"mouseover\");\n    cy.wait(400);\n    cy.get(\".t--draggable-chartwidget .fc__tooltip.fusioncharts-div\").should(\"have.text\", `${value1} %`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Custom_Chart_Data_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Fill the Chart Widget Properties.","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":13,"column":42,"index":590},"line":13,"code":"  it(\"1. Fill the Chart Widget Properties.\", function () {\n    //changing the Chart Name\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n    cy.widgetText(\"Test\", viewWidgetsPage.chartWidget, widgetsPage.widgetNameSpan);\n    //changing the Chart Title\n    /**\n     * @param{Text} Random Input Value\n     */\n    cy.testJsontext(\"title\", this.data.chartIndata);\n    cy.get(viewWidgetsPage.chartInnerText).contains(\"App Sign Up\").should(\"have.text\", \"App Sign Up\");\n\n    //Entering the Chart data\n    cy.testJsontext(\"chart-series-data-control\", JSON.stringify(this.data.chartInput));\n    cy.get(\".t--propertypane\").click(\"right\");\n\n    // Asserting Chart Height\n    cy.get(viewWidgetsPage.chartWidget).should(\"be.visible\").and(chart => {\n      expect(chart.height()).to.be.greaterThan(200);\n    });\n\n    //Entring the label of x-axis\n    cy.get(viewWidgetsPage.xlabel).click({\n      force: true\n    }).type(this.data.command).type(this.data.plan);\n    //Entring the label of y-axis\n    cy.get(viewWidgetsPage.ylabel).click({\n      force: true\n    }).type(this.data.command).click({\n      force: true\n    }).type(this.data.ylabel);\n\n    //Close edit prop\n\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Custom Chart Widget Functionality","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":52,"column":42,"index":1847},"line":52,"code":"  it(\"2. Custom Chart Widget Functionality\", function () {\n    //changing the Chart type\n    //cy.get(widgetsPage.toggleChartType).click({ force: true });\n    cy.UpdateChartType(\"Custom chart\");\n    cy.testJsontext(\"customfusionchart\", `{{${JSON.stringify(this.data.ChartCustomConfig)}}}`);\n\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Toggle JS - Custom Chart Widget Functionality","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":69,"column":54,"index":2589},"line":69,"code":"  it(\"3. Toggle JS - Custom Chart Widget Functionality\", function () {\n    cy.get(widgetsPage.toggleChartType).click({\n      force: true\n    });\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"CUSTOM_FUSION_CHART\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(viewWidgetsPage.Chartlabel + \":first-child\", {\n      timeout: 10000\n    }).should(\"have.css\", \"opacity\", \"1\");\n    //Verifying X-axis labels\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n\n    //Close edit prop\n    cy.PublishtheApp(false);\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Chart-Copy & Delete Verification","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":92,"column":41,"index":3499},"line":92,"code":"  it(\"4. Chart-Copy & Delete Verification\", function () {\n    //Copy Chart and verify all properties\n    cy.wait(1000);\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\");\n    _.propPane.CopyWidgetFromPropertyPane(\"Test\");\n    cy.PublishtheApp();\n    //Chart-Delete Verification\"\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\");\n    _.propPane.DeleteWidgetFromPropertyPane(\"TestCopy\");\n    cy.PublishtheApp();\n    cy.get(viewWidgetsPage.chartWidget).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Chart/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Widget Functionality","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":10,"column":35,"index":500},"line":10,"code":"  it(\"Checkbox Widget Functionality\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    cy.widgetText(\"checker\", formWidgetsPage.checkboxWidget, widgetsPage.widgetNameSpan);\n    /**\n     * @param{Text} Random Value\n     */\n    cy.testCodeMirror(this.data.checkbocInputName);\n    cy.get(widgetsPage.checkboxLabel).should(\"have.text\", \"value\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n    cy.togglebar(widgetsPage.defaultcheck);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n    cy.getAlert(\"onCheckChange\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Label","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":33,"column":43,"index":1229},"line":33,"code":"  it(\"Checkbox Functionality To Check Label\", function () {\n    cy.get(publish.checkboxWidget + \" \" + \"label\").should(\"have.text\", this.data.checkbocInputName);\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Disabled Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":37,"column":53,"index":1448},"line":37,"code":"  it(\"Checkbox Functionality To Check Disabled Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Enabled Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":44,"column":52,"index":1766},"line":44,"code":"  it(\"Checkbox Functionality To Check Enabled Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Unchecked Visible Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":51,"column":56,"index":2094},"line":51,"code":"  it(\"Checkbox Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Visible Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":58,"column":52,"index":2407},"line":58,"code":"  it(\"Checkbox Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.checked\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":65,"column":33,"index":2695},"line":65,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{checker.isDirty}}`);\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(`${formWidgetsPage.checkboxWidget} label`).first().click();\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Change defaultCheckedState property\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(\".t--property-control-defaultstate label\").last().click();\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check checkbox group with dynamic query","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":12,"column":48,"index":484},"line":12,"code":"  it(\"1. Check checkbox group with dynamic query\", function () {\n    let query1 = `SELECT * FROM public.\"country\" LIMIT 10;`;\n    let query2 = `SELECT * FROM public.\"country\" LIMIT 2;`;\n\n    // add Query 1 with limit 10\n    _.dataSources.CreateQueryFromOverlay(dsName, query1); //Query1\n    _.dataSources.RunQuery();\n\n    // add Query 2 with limit 2\n    _.dataSources.CreateQueryFromOverlay(dsName, query2); //Query2\n    _.dataSources.RunQuery();\n\n    // add checkbox group widget\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"checkboxgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n\n    // bind options to query data\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.updateCodeInput(\".t--property-control-options\", `{{Query1.data.map((item) => {\n          return {\n            label: \"Option \" + item.country_id,\n            value: item.country_id,\n          };\n        })}}`);\n\n    // update default value\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", \"{{Query2.data.map((item) => item.country_id)}}\");\n    cy.wait(2000);\n\n    // deploy the app\n    cy.PublishtheApp();\n    cy.wait(2000);\n\n    // checked checkbox should be 2\n    cy.get(publish.checkboxGroupWidget).find(\"input:checked\").should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup_withQuery_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":7,"column":20,"index":268},"line":7,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"checkboxgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-checkboxgroupwidget\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that prefilled option is added and empty value is allowed in options","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":15,"column":87,"index":561},"line":15,"code":"  it(\"should check that prefilled option is added and empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.get(\".t--property-control-options-add\").click({\n      force: true\n    });\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":39,"column":72,"index":1253},"line":39,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checkbox Group Widget Functionality","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":11,"column":44,"index":596},"line":11,"code":"  it(\"1. Checkbox Group Widget Functionality\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n    cy.widgetText(\"checkboxgrouptest\", formWidgetsPage.checkboxGroupWidget, widgetsPage.widgetNameSpan);\n    /**\n     * @param{IndexValue} Provide Input Index Value\n     * @param{Text} Index Text Value.\n     *\n     */\n    cy.radioInput(0, this.data.radio1);\n    cy.get(formWidgetsPage.labelCheckboxGroup).eq(1).should(\"have.text\", \"test1\");\n    cy.radioInput(1, \"1\");\n    cy.radioInput(2, this.data.radio2);\n    cy.get(formWidgetsPage.labelCheckboxGroup).eq(2).should(\"have.text\", this.data.radio2);\n    cy.radioInput(3, \"2\");\n    cy.get(formWidgetsPage.radioAddButton).click({\n      force: true\n    });\n    cy.radioInput(4, this.data.radio4);\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(formWidgetsPage.labelCheckboxGroup).should(\"not.have.value\", \"test4\");\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.wait(200);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n    cy.getAlert(\"onSelectionChange\");\n    cy.get(\".t--add-action-onSelectionChange\").scrollIntoView().click({\n      force: true\n    }).type(\"2\");\n    // cy.get(formWidgetsPage.radioOnSelectionChangeDropdown)\n    //   .get(commonlocators.dropdownSelectButton)\n    //   .click({ force: true })\n    //   .type(\"2\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checkbox Group Functionality To Unchecked Visible Widget","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":56,"column":65,"index":2185},"line":56,"code":"  it(\"2. Checkbox Group Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxGroupWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checkbox Group Functionality To Check Visible Widget","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":64,"column":61,"index":2559},"line":64,"code":"  it(\"3. Checkbox Group Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.wait(500);\n    cy.get(publish.checkboxGroupWidget + \" \" + \"input\").eq(0).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Checkbox Group Functionality To Button Text","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":71,"column":52,"index":2853},"line":71,"code":"  it(\"4. Checkbox Group Functionality To Button Text\", function () {\n    cy.get(publish.checkboxGroupWidget + \" \" + \"label\").eq(2).should(\"have.text\", \"test2\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"handleSelectAllChange: unchecked","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":75,"column":38,"index":3048},"line":75,"code":"  it(\"handleSelectAllChange: unchecked\", function () {\n    const selectAllSelector = formWidgetsPage.selectAllCheckboxControl;\n    const uncheckedOptionInputs = `${formWidgetsPage.checkboxGroupOptionInputs} input:not(:checked)`;\n    // Deselect all\n    cy.get(selectAllSelector).click();\n    // Should get 2 unchecked option inputs\n    cy.get(uncheckedOptionInputs).should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"handleSelectAllChange: checked","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":83,"column":36,"index":3444},"line":83,"code":"  it(\"handleSelectAllChange: checked\", function () {\n    const selectAllSelector = formWidgetsPage.selectAllCheckboxControl;\n    const checkedOptionInputs = `${formWidgetsPage.checkboxGroupOptionInputs} input:checked`;\n    // Select all\n    cy.get(selectAllSelector).click();\n    // Should get 2 checked option inputs\n    cy.get(checkedOptionInputs).should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Group Functionality To alignment options","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":91,"column":55,"index":3845},"line":91,"code":"  it(\"Checkbox Group Functionality To alignment options\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.moveToStyleTab();\n    // check default value\n    cy.get(\".t--property-control-alignment\").should(\"exist\");\n    cy.get(\".t--property-control-alignment .rc-select-selector\").should(\"have.text\", \"Please select an option\");\n    cy.get(\".t--draggable-checkboxgroupwidget div[data-testid^='checkbox-group-container']\").should(\"have.css\", \"justify-content\", \"space-between\");\n\n    // change alignment\n    cy.get(\".t--property-control-alignment .rc-select-selector\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(\".t--dropdown-option\").contains(\"Start\").click({\n      force: true\n    });\n    cy.wait(400);\n    cy.get(\".t--draggable-checkboxgroupwidget div[data-testid^='checkbox-group-container']\").should(\"have.css\", \"justify-content\", \"flex-start\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":110,"column":33,"index":4717},"line":110,"code":"  it(\"Check isDirty meta property\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{checkboxgrouptest.isDirty}}`);\n    // Change defaultSelectedValues\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.moveToContentTab();\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", \"GREEN\");\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(formWidgetsPage.labelCheckboxGroup).first().click();\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckboxGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting warning validation","suites":["Linting warning validation with Checkbox widget"],"updatePoint":{"line":7,"column":32,"index":293},"line":7,"code":"  it(\"Linting warning validation\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500);\n\n    //lint mark validation\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    //lint warning message\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'iron_man' is not defined.\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBoxLintErrorMultipleRowValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting warning validation","suites":["Linting warning validation with Checkbox widget"],"updatePoint":{"line":7,"column":32,"index":298},"line":7,"code":"  it(\"Linting warning validation\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //click on the text within the section\n    cy.get(commonlocators.labelSection).first().click({\n      force: true\n    }).wait(500);\n\n    //lint mark validation\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    //lint warning message\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"Missing semicolon.\");\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"Expected an identifier and instead saw ')\");\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'function closure expressions' is only available in Mozilla JavaScript extensions (use moz option)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Checkbox/CheckBoxMultipleLintError_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1 => Check if code scanner widget can be dropped on the canvas","suites":["Code Scanner widget's functionality"],"updatePoint":{"line":9,"column":68,"index":694},"line":9,"code":"  it(\"1 => Check if code scanner widget can be dropped on the canvas\", () => {\n    // Drop the widget\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 100\n    });\n\n    // Widget should be on the canvas\n    cy.get(widgetsPage.codescannerwidget).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2 => Check if the default scanner layout is ALWAYS_ON","suites":["Code Scanner widget's functionality"],"updatePoint":{"line":20,"column":59,"index":1007},"line":20,"code":"  it(\"2 => Check if the default scanner layout is ALWAYS_ON\", () => {\n    // Drop a text widget to test the code scanner value binding\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 600\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.moveToContentTab();\n    cy.updateCodeInput(\".t--property-control-text\", `{{CodeScanner1.scannerLayout}}`);\n    cy.wait(200);\n\n    // Check the value of scanner layout\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"ALWAYS_ON\");\n  });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.1.1.1 => Disabled icon should be visible","suites":["Code Scanner widget's functionality","3 => Checks for the 'Always On' Scanner Layout","3.1 => Checks for the disabled property","3.1.1 => Check if the scanner can be disabled"],"updatePoint":{"line":37,"column":54,"index":1711},"line":37,"code":"        it(\"3.1.1.1 => Disabled icon should be visible\", () => {\n          cy.openPropertyPane(widgetName);\n          cy.moveToContentTab();\n\n          // Disable and publish\n          cy.togglebar(commonlocators.disableCheckbox);\n          cy.PublishtheApp();\n\n          // Disabled icon should be there\n          cy.get(codeScannerDisabledSVGIconOnPublishPage).should(\"exist\");\n        });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.1.1.2 => Scanner should not be scanning and streaming video","suites":["Code Scanner widget's functionality","3 => Checks for the 'Always On' Scanner Layout","3.1 => Checks for the disabled property","3.1.1 => Check if the scanner can be disabled"],"updatePoint":{"line":48,"column":73,"index":2122},"line":48,"code":"        it(\"3.1.1.2 => Scanner should not be scanning and streaming video\", () => {\n          // Video should NOT be streaming\n          cy.wait(2000); //for deployed page to laod completey\n          cy.get(codeScannerVideoOnPublishPage).should(\"not.exist\");\n\n          // Back to editor\n          cy.get(publish.backToEditor).click();\n        });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.1.2.1 => Disabled icon should not be visible","suites":["Code Scanner widget's functionality","3 => Checks for the 'Always On' Scanner Layout","3.1 => Checks for the disabled property","3.1.2 => Check if the scanner can be enabled"],"updatePoint":{"line":58,"column":58,"index":2536},"line":58,"code":"        it(\"3.1.2.1 => Disabled icon should not be visible\", () => {\n          cy.openPropertyPane(widgetName);\n          cy.moveToContentTab();\n\n          // Enable and publish\n          cy.togglebarDisable(commonlocators.disableCheckbox);\n          cy.PublishtheApp();\n\n          // Disabled icon should NOT be visible\n          cy.get(codeScannerDisabledSVGIconOnPublishPage).should(\"not.exist\");\n        });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.1.2.2 => Should be scanning and streaming video","suites":["Code Scanner widget's functionality","3 => Checks for the 'Always On' Scanner Layout","3.1 => Checks for the disabled property","3.1.2 => Check if the scanner can be enabled"],"updatePoint":{"line":69,"column":61,"index":2951},"line":69,"code":"        it(\"3.1.2.2 => Should be scanning and streaming video\", () => {\n          // Video should be streaming\n          cy.get(codeScannerVideoOnPublishPage).should(\"exist\");\n\n          // Back to editor\n          cy.get(publish.backToEditor).click();\n        });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.2.1 => Widget should be invisible on the canvas","suites":["Code Scanner widget's functionality","3 => Checks for the 'Always On' Scanner Layout","3.2 => Checks for the visible property"],"updatePoint":{"line":79,"column":59,"index":3295},"line":79,"code":"      it(\"3.2.1 => Widget should be invisible on the canvas\", () => {\n        cy.openPropertyPane(widgetName);\n        cy.moveToContentTab();\n\n        // Visibilty OFF and publish\n        cy.togglebarDisable(commonlocators.visibleCheckbox);\n        cy.PublishtheApp();\n\n        // Video should NOT be streaming\n        cy.get(codeScannerVideoOnPublishPage).should(\"not.exist\");\n\n        // Back to editor\n        cy.get(publish.backToEditor).click();\n      });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.2.2 => Widget should be visible on the canvas","suites":["Code Scanner widget's functionality","3 => Checks for the 'Always On' Scanner Layout","3.2 => Checks for the visible property"],"updatePoint":{"line":93,"column":57,"index":3754},"line":93,"code":"      it(\"3.2.2 => Widget should be visible on the canvas\", () => {\n        cy.openPropertyPane(widgetName);\n        cy.moveToContentTab();\n\n        // Visibilty ON and publish\n        cy.togglebar(commonlocators.visibleCheckbox);\n        cy.PublishtheApp();\n\n        // Video should be streaming\n        cy.get(codeScannerVideoOnPublishPage).should(\"be.visible\");\n\n        // Back to editor\n        cy.get(publish.backToEditor).click();\n      });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4.1 => Check if scanner layout can be changed from Always On to Click to Scan","suites":["Code Scanner widget's functionality","4 => Checks for 'Click to Scan' Scanner Layout"],"updatePoint":{"line":110,"column":85,"index":4313},"line":110,"code":"    it(\"4.1 => Check if scanner layout can be changed from Always On to Click to Scan\", () => {\n      cy.openPropertyPane(widgetName);\n      cy.moveToContentTab();\n\n      // Select scanner layout as CLICK_TO_SCAN\n      cy.get(`${commonlocators.codeScannerScannerLayout} .ads-v2-segmented-control-value-CLICK_TO_SCAN`).last().click({\n        force: true\n      });\n      cy.wait(200);\n\n      // Check if previously dropped text widget with value {{CodeScanner1.scannerLayout}} is updated\n      cy.get(commonlocators.TextInside).should(\"have.text\", \"CLICK_TO_SCAN\");\n\n      // Publish\n      cy.PublishtheApp();\n\n      // Check if a button is added to the canvas\n      cy.get(publish.codescannerwidget + \" \" + \"button\").should(\"be.visible\");\n      cy.get(publish.codescannerwidget + \" \" + \"button\").should(\"be.enabled\");\n\n      // and video should not be streaming\n      cy.get(codeScannerVideoOnPublishPage).should(\"not.exist\");\n\n      // Back to editor\n      cy.get(publish.backToEditor).click();\n    });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4.2.1 => Button on the canvas should be disabled","suites":["Code Scanner widget's functionality","4 => Checks for 'Click to Scan' Scanner Layout","4.2 => Checks for the disabled property"],"updatePoint":{"line":137,"column":58,"index":5353},"line":137,"code":"      it(\"4.2.1 => Button on the canvas should be disabled\", () => {\n        cy.openPropertyPane(widgetName);\n        cy.moveToContentTab();\n\n        // Disable and publish\n        cy.togglebar(commonlocators.disableCheckbox);\n        cy.PublishtheApp();\n\n        // Button should be disabled\n        cy.get(publish.codescannerwidget + \" \" + \"button\").should(\"be.disabled\");\n\n        // Back to editor\n        cy.get(publish.backToEditor).click();\n      });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4.2.2 => Button on the canvas should be enabled again","suites":["Code Scanner widget's functionality","4 => Checks for 'Click to Scan' Scanner Layout","4.2 => Checks for the disabled property"],"updatePoint":{"line":151,"column":63,"index":5816},"line":151,"code":"      it(\"4.2.2 => Button on the canvas should be enabled again\", () => {\n        cy.openPropertyPane(widgetName);\n        cy.moveToContentTab();\n\n        // Enable and publish\n        cy.togglebarDisable(commonlocators.disableCheckbox);\n        cy.PublishtheApp();\n\n        // Button should be enabled\n        cy.get(publish.codescannerwidget + \" \" + \"button\").should(\"be.enabled\");\n\n        // Back to editor\n        cy.get(publish.backToEditor).click();\n      });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4.3.1 => Button on the canvas should be invisible","suites":["Code Scanner widget's functionality","4 => Checks for 'Click to Scan' Scanner Layout","4.3 => Checks for the visible property"],"updatePoint":{"line":167,"column":59,"index":6350},"line":167,"code":"      it(\"4.3.1 => Button on the canvas should be invisible\", () => {\n        cy.openPropertyPane(widgetName);\n        cy.moveToContentTab();\n\n        // Visibilty OFF and publish\n        cy.togglebarDisable(commonlocators.visibleCheckbox);\n        cy.PublishtheApp();\n\n        // Button should NOT be visible\n        cy.get(publish.codescannerwidget + \" \" + \"button\").should(\"not.exist\");\n\n        // Back to editor\n        cy.get(publish.backToEditor).click();\n      });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4.3.2 => Button on the canvas should be visible again","suites":["Code Scanner widget's functionality","4 => Checks for 'Click to Scan' Scanner Layout","4.3 => Checks for the visible property"],"updatePoint":{"line":181,"column":63,"index":6827},"line":181,"code":"      it(\"4.3.2 => Button on the canvas should be visible again\", () => {\n        cy.openPropertyPane(widgetName);\n        cy.moveToContentTab();\n\n        // Visibilty ON and publish\n        cy.togglebar(commonlocators.visibleCheckbox);\n        cy.PublishtheApp();\n\n        // Button should be visible\n        cy.get(publish.codescannerwidget + \" \" + \"button\").should(\"be.visible\");\n\n        // Back to editor\n        cy.get(publish.backToEditor).click();\n      });","file":"e2e/Regression/ClientSide/Widgets/CodeScanner/CodeScanner_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Container Widget Functionality","suites":["Container Widget Functionality"],"updatePoint":{"line":17,"column":36,"index":747},"line":17,"code":"  it(\"Container Widget Functionality\", function () {\n    cy.openPropertyPane(\"containerwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{ContainerWidget}Mouseover\n     * @param{ContainerPre Css} Assertion\n     */\n    cy.widgetText(\"job\", widgetsPage.containerWidget, widgetsPage.widgetNameSpan);\n    cy.moveToStyleTab();\n    /**\n     * @param{Text} Random Border Colour\n     */\n    cy.get(widgetsPage.borderColorPickerNew).first().click({\n      force: true\n    }).clear().type(widgetsPage.yellowColorHex);\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"border-color\").and(\"eq\", \"rgb(255, 193, 61)\");\n    /**\n     * @param{Text} Random Background Colour\n     */\n    cy.get(widgetsPage.backgroundcolorPickerNew).first().click({\n      force: true\n    }).clear().type(widgetsPage.greenColorHex);\n    cy.get(widgetsPage.containerD).should(\"have.css\", \"background\").and(\"eq\", \"rgb(3, 179, 101) none repeat scroll 0% 0% / auto padding-box border-box\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n    //cy.get(\"[data-testid=div-selection-0]\").click({force:true});\n    //cy.togglebar(widgetsPage.Scrollbutton);\n    cy.get(widgetsPage.containerD).eq(0).scrollIntoView({\n      easing: \"linear\"\n    }).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Container Widget Functionality To Verify The Colour","suites":["Container Widget Functionality"],"updatePoint":{"line":50,"column":57,"index":2106},"line":50,"code":"  it(\"Container Widget Functionality To Verify The Colour\", function () {\n    cy.get(widgetsPage.containerD).eq(0).should(\"have.css\", \"background\").and(\"eq\", \"rgb(3, 179, 101) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border width and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":53,"column":34,"index":2323},"line":53,"code":"  it(\"Test border width and verity\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"containerwidget\");\n    cy.moveToStyleTab();\n    cy.testJsontext(\"borderwidth\", \"10\");\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"border-width\").and(\"eq\", \"10px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border radius and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":60,"column":35,"index":2671},"line":60,"code":"  it(\"Test border radius and verity\", function () {\n    // check if border radius is changed on button\n\n    cy.get(`.t--property-control-borderradius .ads-v2-segmented-control__segments-container-segment-text > div`).eq(0).click({\n      force: true\n    });\n    cy.get(`.t--property-control-borderradius .ads-v2-segmented-control__segments-container-segment-text > div`).eq(0).invoke(\"css\", \"border-top-left-radius\").then(borderRadius => {\n      cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"border-radius\", borderRadius);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test Box shadow and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":70,"column":32,"index":3257},"line":70,"code":"  it(\"Test Box shadow and verity\", function () {\n    cy.get(`.t--property-control-boxshadow .ads-v2-segmented-control__segments-container`).eq(1).click({\n      force: true\n    });\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"box-shadow\", boxShadowOptions.S);\n  });","file":"e2e/Regression/ClientSide/Widgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate that For new currency input widgets being dragged, the value for showStepArrows should be set to false","suites":["Currency Widget showStepArrows Functionality - "],"updatePoint":{"line":4,"column":120,"index":306},"line":4,"code":"  it(\"1. Validate that For new currency input widgets being dragged, the value for showStepArrows should be set to false\", () => {\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 400\n    });\n    cy.openPropertyPane(widgetName);\n    cy.get(widgetsPage.showStepArrowsToggleCheckBox).should(\"not.be.checked\");\n    cy.get(widgetsPage.inputStepArrows).should(\"not.exist\"); // This is the step arrows\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_ShowStepArrows_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate that currency input widget, stepArrows should be visible when showStepArrows is set to true","suites":["Currency Widget showStepArrows Functionality - "],"updatePoint":{"line":14,"column":109,"index":713},"line":14,"code":"  it(\"2. Validate that currency input widget, stepArrows should be visible when showStepArrows is set to true\", () => {\n    // Enable showStepArrows to true\n    cy.togglebar(widgetsPage.showStepArrowsToggleCheckBox);\n    cy.get(widgetsPage.inputStepArrows).should(\"exist\"); // step arrows should be visible\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_ShowStepArrows_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Toggle test case to validate that currency input widget, stepArrows should be hidden when toggle value is false","suites":["Currency Widget showStepArrows Functionality - "],"updatePoint":{"line":20,"column":120,"index":1038},"line":20,"code":"  it(\"3. Toggle test case to validate that currency input widget, stepArrows should be hidden when toggle value is false\", () => {\n    // click on the Js\n    cy.get(widgetsPage.toggleShowStepArrows).click({\n      force: true\n    });\n\n    // Add showStepArrows action and value as false\n    cy.testJsontext(\"showsteparrows\", `{{false}}`);\n    cy.get(widgetsPage.inputStepArrows).should(\"not.exist\"); // step arrows should not be visible\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_ShowStepArrows_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle test case to validate that currency input widget, stepArrows should be visible when toggle value is true","suites":["Currency Widget showStepArrows Functionality - "],"updatePoint":{"line":31,"column":120,"index":1481},"line":31,"code":"  it(\"4. Toggle test case to validate that currency input widget, stepArrows should be visible when toggle value is true\", () => {\n    // Add showStepArrows action and value as true\n    cy.testJsontext(\"showsteparrows\", `{{true}}`);\n    cy.get(widgetsPage.inputStepArrows).should(\"exist\"); // step arrows should be visible\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_ShowStepArrows_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new dropdown widget","suites":["Currency widget - "],"updatePoint":{"line":10,"column":32,"index":425},"line":10,"code":"  it(\"1. Add new dropdown widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{CurrencyInput1.text}}:{{CurrencyInput1.value}}:{{CurrencyInput1.isValid}}:{{typeof CurrencyInput1.text}}:{{typeof CurrencyInput1.value}}:{{CurrencyInput1.countryCode}}:{{CurrencyInput1.currencyCode}}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check for type of value and widget","suites":["Currency widget - "],"updatePoint":{"line":24,"column":50,"index":1039},"line":24,"code":"  it(\"2. should check for type of value and widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-currency\").click();\n    cy.get(\".t--property-control-currency\").type(\"usd\");\n    cy.selectDropdownValue(\".t--property-control-currency input\", \"USD - US Dollar\");\n    function enterAndTest(text, expected) {\n      cy.get(widgetInput).clear();\n      cy.wait(300);\n      if (text) {\n        cy.get(widgetInput).type(text);\n      }\n      cy.openPropertyPane(\"textwidget\");\n      cy.get(\".t--widget-textwidget\").should(\"contain\", expected);\n    }\n    [\n    //[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}:{{CurrencyInput1.isValid}}:{{typeof CurrencyInput1.text}}:{{typeof CurrencyInput1.value}}:{{CurrencyInput1.countryCode}}:{{CurrencyInput1.currencyCode}}]\n    [\"100\", \"100:100:true:string:number:AS:USD\"], [\"1000\", \"1,000:1000:true:string:number:AS:USD\"], [\"100.22\", \"10,022:10022:true:string:number:AS:USD\"], [\"1000.22\", \"100,022:100022:true:string:number:AS:USD\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"1\");\n    [\n    //[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}:{{CurrencyInput1.isValid}}:{{typeof CurrencyInput1.text}}:{{typeof CurrencyInput1.value}}:{{CurrencyInput1.countryCode}}:{{CurrencyInput1.currencyCode}}]\n    [\"100\", \"100:100:true:string:number:AS:USD\"], [\"1000\", \"1,000:1000:true:string:number:AS:USD\"], [\"100.22\", \"100.2:100.2:true:string:number:AS:USD\"], [\"1000.22\", \"1,000.2:1000.2:true:string:number:AS:USD\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"2\");\n    [\n    //[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}:{{CurrencyInput1.isValid}}:{{typeof CurrencyInput1.text}}:{{typeof CurrencyInput1.value}}:{{CurrencyInput1.countryCode}}:{{CurrencyInput1.currencyCode}}]\n    [\"100\", \"100:100:true:string:number:AS:USD\"], [\"1000\", \"1,000:1000:true:string:number:AS:USD\"], [\"100.22\", \"100.22:100.22:true:string:number:AS:USD\"], [\"1000.22\", \"1,000.22:1000.22:true:string:number:AS:USD\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.get(\".currency-change-dropdown-trigger\").should(\"contain\", \"$\");\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-currency\").click();\n    cy.get(\".t--property-control-currency\").type(\"ind\");\n    cy.selectDropdownValue(\".t--property-control-currency input\", \"INR - Indian Rupee\");\n    enterAndTest(\"100.22\", \"100.22:100.22:true:string:number:IN:INR\");\n    cy.get(\".currency-change-dropdown-trigger\").should(\"contain\", \"₹\");\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-allowcurrencychange input\").last().click({\n      force: true\n    });\n    cy.get(\".t--input-currency-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"gbp\");\n    cy.wait(500);\n    cy.get(\".ads-dropdown-options-wrapper .t--dropdown-option\").last().click();\n    enterAndTest(\"100.22\", \"100.22:100.22:true:string:number:GB:GBP\");\n    cy.get(\".t--input-currency-change\").should(\"contain\", \"£\");\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should accept 0 decimal option","suites":["Currency widget - "],"updatePoint":{"line":75,"column":39,"index":4238},"line":75,"code":"  it(\"3. should accept 0 decimal option\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"0\");\n    cy.closePropertyPane();\n    cy.wait(500);\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-decimalsallowed span span\").should(\"have.text\", \"0\");\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that widget input resets on submit","suites":["Currency widget - "],"updatePoint":{"line":83,"column":56,"index":4597},"line":83,"code":"  it(\"4. should check that widget input resets on submit\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.getAlert(\"onSubmit\", \"Submitted!!\");\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"10000{enter}\");\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that widget input doesn't round off values","suites":["Currency widget - "],"updatePoint":{"line":92,"column":64,"index":4927},"line":92,"code":"  it(\"5. should check that widget input doesn't round off values\", () => {\n    function enterAndTest(text, expected) {\n      cy.get(widgetInput).clear();\n      cy.wait(300);\n      if (text) {\n        cy.get(widgetInput).type(text);\n      }\n      cy.openPropertyPane(\"textwidget\");\n      cy.get(\".t--widget-textwidget\").should(\"contain\", expected);\n    }\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{CurrencyInput1.text}}:{{CurrencyInput1.value}}`);\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"0\");\n    [\n    //[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}]\n    [\"100\", \"100:100\"], [\"1000\", \"1,000:1000\"], [\"100.22\", \"10,022:10022\"], [\"1000.22\", \"100,022:100022\"], [\"1000.20\", \"100,020:100020\"], [\"1000.90\", \"100,090:100090\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"1\");\n    [\n    //[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}]\n    [\"100\", \"100:100\"], [\"1000\", \"1,000:1000\"], [\"100.22\", \"100.2:100.2\"], [\"1000.20\", \"1,000.2:1000.2\"], [\"1000.99\", \"1,000.9:1000.9\"], [\"1000.90\", \"1,000.9:1000.9\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"2\");\n    [\n    //[input, {{CurrencyInput1.text}}:{{CurrencyInput1.value}}]\n    [\"100\", \"100:100\"], [\"1000\", \"1,000:1000\"], [\"100.2\", \"100.20:100.2\"], [\"1000.20\", \"1,000.20:1000.2\"], [\"1000.21\", \"1,000.21:1000.21\"], [\"1000.9\", \"1,000.90:1000.9\"], [\"1000.90\", \"1,000.90:1000.9\"], [\"1000.99\", \"1,000.99:1000.99\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"1000.90\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(widgetInput).should(\"contain.value\", \"1,000.90\");\n    cy.get(widgetInput).focus({\n      force: true\n    });\n    cy.get(widgetInput).should(\"contain.value\", \"1000.90\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(widgetInput).should(\"contain.value\", \"1,000.90\");\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. should test the formatting of defaultText","suites":["Currency widget - "],"updatePoint":{"line":137,"column":50,"index":7123},"line":137,"code":"  it(\"6. should test the formatting of defaultText\", () => {\n    function enterAndTest(input, expected) {\n      cy.updateCodeInput(\".t--property-control-defaultvalue\", input);\n      cy.wait(500);\n      cy.get(widgetInput).should(\"contain.value\", expected);\n    }\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"0\");\n    [\n    //[input, expected]\n    [\"100\", \"100\"], [\"1000\", \"1,000\"], [\"1000.1\", \"1,000\"], [\"1000.9\", \"1,001\"], [\"100.22\", \"100\"], [\"1000.20\", \"1,000\"], [\"1000.90\", \"1,001\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"1\");\n    [\n    //[input, expected]\n    [\"100\", \"100\"], [\"1000\", \"1,000\"], [\"1000.1\", \"1,000.1\"], [\"1000.9\", \"1,000.9\"], [\"100.22\", \"100.2\"], [\"1000.20\", \"1,000.2\"], [\"1000.90\", \"1,000.9\"], [\"1000.79\", \"1,000.8\"], [\"1000.19\", \"1,000.2\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-decimalsallowed input\", \"2\");\n    [\n    //[input, expected]\n    [\"100\", \"100\"], [\"1000\", \"1,000\"], [\"1000.1\", \"1,000.10\"], [\"1000.9\", \"1,000.90\"], [\"100.22\", \"100.22\"], [\"1000.20\", \"1,000.20\"], [\"1000.90\", \"1,000.90\"], [\"1000.79\", \"1,000.79\"], [\"1000.19\", \"1,000.19\"], [\"1000.191\", \"1,000.19\"], [\"1000.199\", \"1,000.20\"], [\"1000.911\", \"1,000.91\"], [\"1000.919\", \"1,000.92\"], [\"1000.999\", \"1,001\"]].forEach(d => {\n      enterAndTest(d[0], d[1]);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Check isDirty meta property","suites":["Currency widget - "],"updatePoint":{"line":165,"column":36,"index":8663},"line":165,"code":"  it(\"7. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{CurrencyInput1.isDirty}}`);\n    // Init isDirty\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"1\");\n    cy.closePropertyPane();\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Change defaultText\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"5\");\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n\n    //Should check that widget input is not showing any errors on input\n    cy.get(widgetInput).type(\"123456789\");\n    cy.focused().then(() => {\n      cy.get(themelocators.popover).eq(1).should(\"not.exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInput_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should show empty dropdown for a typo","suites":["Currency input widget - "],"updatePoint":{"line":8,"column":46,"index":341},"line":8,"code":"  it(\"1. Should show empty dropdown for a typo\", () => {\n    cy.openPropertyPane(widgetName);\n\n    // Turn on allowCurrencyChange\n    cy.get(\".t--property-control-allowcurrencychange label\").last().click({\n      force: true\n    });\n    // Click on the currency change option\n    cy.get(\".t--input-currency-change\").first().click();\n    // Search with a typo\n    cy.get(\".t--search-input input\").type(\"gdp\");\n    cy.wait(500);\n    // Assert the options dropdown is still open\n    cy.get(\".t--search-input input\").should(\"be.visible\");\n    cy.PublishtheApp();\n    // Click on the currency change option\n    cy.get(\".t--input-currency-change\").first().click();\n    // Search with a typo\n    cy.get(\".t--search-input input\").type(\"gdp\");\n    cy.wait(500);\n    // Assert the options dropdown is still open\n    cy.get(\".t--search-input input\").should(\"be.visible\");\n    // Back to the editor\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInputDynamicCurrencyCode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that widget can be used with dynamic default currency code","suites":["Currency input widget - "],"updatePoint":{"line":33,"column":80,"index":1309},"line":33,"code":"  it(\"2. should check that widget can be used with dynamic default currency code\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-currency .CodeMirror-code\").should(\"contain\", \"{{appsmith.store.test}}\");\n    cy.get(\".t--input-currency-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"gbp\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").last().click();\n    cy.get(\".t--property-control-currency .CodeMirror-code\").should(\"contain\", \"{{appsmith.store.test}}\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"USD:AS:USD\");\n    cy.get(\".t--input-currency-change\").should(\"contain\", \"$\");\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").last().click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"INR:IN:INR\");\n    cy.get(\".t--input-currency-change\").should(\"contain\", \"₹\");\n  });","file":"e2e/Regression/ClientSide/Widgets/CurrencyInput/CurrencyInputDynamicCurrencyCode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":11,"column":56,"index":474},"line":11,"code":"  it(\"Datepicker default date validation with js binding\", function () {\n    cy.get(\".t--property-control-defaultdate input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", \"{{moment('14/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.testJsontext(\"mindate\", \"{{moment('12/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click();\n    cy.testJsontext(\"maxdate\", \"{{moment('17/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"14/02/2021\");\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"14/02/2021\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker_Toggle_js_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Widget Functionality check with success message","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":10,"column":60,"index":494},"line":10,"code":"  it(\"Switch Widget Functionality check with success message\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.widgetNameSpan);\n    cy.testCodeMirror(this.data.switchInputName);\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\");\n    cy.togglebar(widgetsPage.defaultcheck);\n    cy.getAlert(\"onChange\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker_With_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Date Widget with Reset widget being switch widget","suites":["Switch Widget within Form widget Functionality"],"line":20,"code":"  it.skip(\"Date Widget with Reset widget being switch widget\", function () {","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker_With_Switch_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"DatePicker-Date change and validate switch widget status","suites":["Switch Widget within Form widget Functionality"],"line":38,"code":"  it.skip(\"DatePicker-Date change and validate switch widget status\", function () {","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker_With_Switch_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Datepicker default date validation with js binding and default date","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":8,"column":76,"index":411},"line":8,"code":"  it(\"1. Datepicker default date validation with js binding and default date\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"defaultdate\", \"{{ moment().add(-1,'days').toISOString() }}\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Datepicker default time picker validation by Time precision","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":15,"column":68,"index":781},"line":15,"code":"  it(\"2. Datepicker default time picker validation by Time precision\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision .rc-select-selection-item\").should(\"have.text\", \"Minute\");\n\n    // default in date picker\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200);\n    // datepicker is open\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\");\n    // checking timepicker\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").children().should(\"have.length\", 3);\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Hide Time picker from Datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":29,"column":41,"index":1395},"line":29,"code":"  it(\"3. Hide Time picker from Datepicker\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision .rc-select-selection-item\").last().click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option\").children().contains(\"None\").click();\n    cy.wait(\"@updateLayout\");\n    // default in date picker\n\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200);\n    // datepicker is open\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\");\n    // checking timepicker not showing\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").should(\"not.exist\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. set second field in time picker for Datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":47,"column":55,"index":2130},"line":47,"code":"  it(\"4. set second field in time picker for Datepicker\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision .rc-select-selection-item\").last().click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option\").children().contains(\"Second\").click();\n    cy.wait(\"@updateLayout\");\n    // default in date picker\n\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200);\n    // datepicker is open\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\");\n    // checking timepicker\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").children().should(\"have.length\", 5);\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":65,"column":45,"index":2861},"line":65,"code":"  it(\"5. Text widgets binding with datepicker\", function () {\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"text\", \"{{DatePicker1.formattedDate}}\");\n    cy.closePropertyPane();\n    _.entityExplorer.SelectEntityByName(\"Text2\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"text\", \"{{DatePicker1.selectedDate}}\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":75,"column":45,"index":3270},"line":75,"code":"  it(\"6. Text widgets binding with datepicker\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.selectDateFormat(\"DD/MM/YYYY\");\n    cy.assertDateFormat();\n    cy.closePropertyPane();\n    cy.assertDateFormat();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Datepicker default date validation with js binding and default date with moment object","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":82,"column":95,"index":3555},"line":82,"code":"  it(\"7. Datepicker default date validation with js binding and default date with moment object\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    //cy.testJsontext(\"defaultdate\", \"\");\n    cy.clearPropertyValue(0);\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click().wait(1000); //disable\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click(); //enable\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"defaultdate\", `{{moment(\"1/1/2012\")}}`);\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"01/01/2012 00:00\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Datepicker clear date, validation with js binding and default date with moment object","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":92,"column":94,"index":4126},"line":92,"code":"  it(\"8. Datepicker clear date, validation with js binding and default date with moment object\", function () {\n    // clear data and check datepicker textbox is clear\n    cy.clearPropertyValue(0);\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"\");\n    // add new date value and check datepicker textbox have value\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"defaultdate\", `{{moment(\"1/1/2012\")}}`);\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"01/01/2012 00:00\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":101,"column":59,"index":4635},"line":101,"code":"  it(\"9. Datepicker default date validation with js binding\", function () {\n    cy.PublishtheApp();\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Date Name validation","suites":["DatePicker Widget Functionality"],"line":17,"code":"  it.skip(\"DatePicker-Date Name validation\", function () {","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker2_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"Datepicker-Clear date validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":40,"column":38,"index":1623},"line":40,"code":"  it(\"Datepicker-Clear date validation\", function () {\n    const today = dayjs().add(0, \"days\").format(\"DD/MM/YYYY\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.ClearDate();\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-check Visible field  validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":129,"column":48,"index":4388},"line":129,"code":"  it(\"DatePicker-check Visible field  validation\", function () {\n    // Check the visible checkbox\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-uncheck Visible field validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":135,"column":49,"index":4644},"line":135,"code":"  it(\"DatePicker-uncheck Visible field validation\", function () {\n    // Check the visible checkbox\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Disable field validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":141,"column":41,"index":4891},"line":141,"code":"  it(\"DatePicker-Disable field validation\", function () {\n    //Check the Disabled checkbox\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateDisableWidget(formWidgetsPage.datepickerWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.datepickerWidget, commonlocators.disabledField);\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Enable field validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":148,"column":40,"index":5258},"line":148,"code":"  it(\"DatePicker-Enable field validation\", function () {\n    //UnCheck the Disabled checkbox\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateEnableWidget(formWidgetsPage.datepickerWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.datepickerWidget, commonlocators.disabledField);\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":17,"column":59,"index":750},"line":17,"code":"  it(\"1. Datepicker default date validation with js binding\", function () {\n    cy.wait(7000);\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate .ads-v2-input__input-section-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", \"{{moment().toISOString()}}\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.testJsontext(\"mindate\", \"{{moment().subtract(10, 'days').toISOString()}}\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click();\n    cy.testJsontext(\"maxdate\", \"{{moment().add(10, 'days').toISOString()}}\");\n    /*\n      cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").should(\n        \"contain.value\",\n        \"14/02/2021\",\n      );\n      cy.PublishtheApp();\n      cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\n        \"contain.value\",\n        \"14/02/2021\",\n      );\n      */\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":40,"column":45,"index":1657},"line":40,"code":"  it(\"2. Text widgets binding with datepicker\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.formattedDate}}\");\n    cy.closePropertyPane();\n    _.entityExplorer.SelectEntityByName(\"Text2\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"text\", \"{{DatePicker1.selectedDate}}\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":49,"column":45,"index":2024},"line":49,"code":"  it(\"3. Text widgets binding with datepicker\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.selectDateFormat(\"YYYY-MM-DD\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"YYYY-MM-DD HH:mm\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"ISO 8601\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"DD/MM/YYYY\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"DD/MM/YYYY HH:mm\");\n    cy.closePropertyPane();\n    cy.assertDateFormat();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Datepicker default date validation message","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":63,"column":51,"index":2512},"line":63,"code":"  it(\"4. Datepicker default date validation message\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontext(\"defaultdate\", \"24-12-2021\");\n    cy.evaluateErrorMessage(\"Value does not match: ISO 8601 date string\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Datepicker should not change the display data unless user selects the date","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":69,"column":83,"index":2817},"line":69,"code":"  it(\"5. Datepicker should not change the display data unless user selects the date\", () => {\n    cy.addDsl(datedsl);\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontext(\"defaultdate\", '{{moment(\"04/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}');\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.get(\".t--property-control-mindate .ads-v2-input__input-section-input\").clear();\n    cy.get(\".t--property-control-mindate .ads-v2-input__input-section-input\").type(\"2020-02-01\");\n    cy.selectDateFormat(\"D MMMM, YYYY\");\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"4 May, 2021\");\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").click({\n      force: true\n    });\n    cy.get(\".DayPicker-NavButton--next\").click({\n      force: true\n    });\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"contain.value\", \"4 May, 2021\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.testJsontext(\"mindate\", \"{{moment().subtract(10, 'days').toISOString()}}\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Datepicker default date validation with strings","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":88,"column":56,"index":3830},"line":88,"code":"  it(\"6. Datepicker default date validation with strings\", function () {\n    cy.addDsl(datedsl);\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.get(\".t--property-control-defaultdate .ads-v2-input__input-section-input\").clear();\n    cy.get(\".t--property-control-defaultdate .ads-v2-input__input-section-input\").type(\"2020-02-01\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click({\n      force: true\n    });\n    cy.get(\".t--property-control-mindate .ads-v2-input__input-section-input\").type(\"2020-01-01\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click({\n      force: true\n    });\n    cy.get(\".t--property-control-maxdate .ads-v2-input__input-section-input\").type(\"2020-02-10\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Datepicker input value changes to work with selected date formats","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":106,"column":74,"index":4701},"line":106,"code":"  it(\"7. Datepicker input value changes to work with selected date formats\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-mindate .ads-v2-input__input-section-input\").clear().type(\"2021-01-01\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-maxdate .ads-v2-input__input-section-input\").clear().type(\"2021-10-10\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate .ads-v2-input__input-section-input\").clear();\n    cy.selectDateFormat(\"DD/MM/YYYY HH:mm\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", '{{moment(\"04/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}');\n    cy.get(\".t--draggable-datepickerwidget2 .bp3-input\").clear({\n      force: true\n    }).type(\"04/05/2021 06:25\");\n    cy.selectDateFormat(\"LLL\");\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--draggable-textwidget .bp3-ui-text\").first().should(\"contain.text\", \"May 4, 2021 6:25 AM\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Check isDirty meta property","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":125,"column":36,"index":5748},"line":125,"code":"  it(\"8. Check isDirty meta property\", function () {\n    cy.addDsl(datedsl);\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{DatePicker1.isDirty}}`);\n    // Init isDirty\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontextclear(\"defaultdate\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.get(\".t--property-control-defaultdate .ads-v2-input__input-section-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", '{{moment(\"04/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}');\n    cy.closePropertyPane();\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").first().should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(\".t--draggable-datepickerwidget2 .bp3-input\").clear({\n      force: true\n    }).type(\"04/05/2021 06:25\");\n    cy.wait(\"@updateLayout\");\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").first().should(\"contain\", \"true\");\n    // Change defaultDate\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontext(\"defaultdate\", \"\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.get(\".t--property-control-defaultdate .ads-v2-input__input-section-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", '{{moment(\"07/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}');\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").first().should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":156,"column":59,"index":7354},"line":156,"code":"  it(\"9. Datepicker default date validation with js binding\", function () {\n    cy.PublishtheApp();\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(10000);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onBlur and onFocus should be triggered from the datePicker widget","suites":["DatePicker Widget Property tests onFocus and onBlur"],"updatePoint":{"line":166,"column":71,"index":7708},"line":166,"code":"  it(\"onBlur and onFocus should be triggered from the datePicker widget\", () => {\n    cy.Createpage(\"New Page\");\n    cy.dragAndDropToCanvas(\"datepickerwidget2\", {\n      x: 300,\n      y: 600\n    });\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(widgetsPage.toggleOnFocus).click({\n      force: true\n    });\n    cy.testJsontext(\"onfocus\", \"{{showAlert('Focused','success')}}\");\n    cy.get(widgetsPage.toggleOnBlur).click({\n      force: true\n    });\n    cy.testJsontext(\"onblur\", \"{{showAlert('Blurred','success')}}\");\n    cy.get(widgetsPage.datepickerInput).click({\n      force: true\n    });\n    cy.validateToastMessage(\"Focused\");\n    _.agHelper.PressEscape();\n    cy.validateToastMessage(\"Blurred\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Datepicker tooltip renders if tooltip prop is not empty","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":15,"column":64,"index":590},"line":15,"code":"  it(\"1. Datepicker tooltip renders if tooltip prop is not empty\", () => {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    // enter tooltip in property pan\n    cy.get(widgetsPage.inputTooltipControl).type(\"Helpful text for tooltip !\");\n    // tooltip help icon shows\n    cy.get(\".datepicker-tooltip\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2Updated_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should should bring up a required error state when value is cleared ","suites":["DatePicker Widget required property test"],"updatePoint":{"line":24,"column":74,"index":996},"line":24,"code":"  it(\"should should bring up a required error state when value is cleared \", () => {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.wait(1000);\n    //set the required condition to true in the property pane\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    //preview changes\n    cy.PublishtheApp();\n    cy.wait(1000);\n    //--wds-color-text-danger danger color var\n    const cssDangerColor = \"rgb(217, 25, 33)\";\n    //check intially that the input field required condition is fulfilled with a default value\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"not.have.css\", \"border-color\", cssDangerColor);\n    //clear input value\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").clear();\n    //click outside the element to close the date picker modal\n    cy.get(\"body\").click(0, 0);\n    cy.wait(1000);\n    //check the input element has a danger color border since the required condition has not been fulfilled\n\n    cy.get(\".t--widget-datepickerwidget2 .bp3-input\").should(\"have.css\", \"border-color\", cssDangerColor);\n  });","file":"e2e/Regression/ClientSide/Widgets/Datepicker/DatePickerV2Updated_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should have deprecation warning on all the deprecated widgets","suites":["Deprecation warning feature"],"updatePoint":{"line":6,"column":67,"index":233},"line":6,"code":"  it(\"should have deprecation warning on all the deprecated widgets\", function () {\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n    for (const widgets of dsl.dsl.children) {\n      cy.get(`#div-selection-0`).click({\n        force: true\n      });\n      cy.get(`#${widgets.widgetId}`).click({\n        ctrlKey: true\n      });\n      cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n      cy.get(`[data-testid='t--deprecation-warning']`).should(\"have.length\", 1);\n    }\n  });","file":"e2e/Regression/ClientSide/Widgets/deprecatedWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":7,"column":44,"index":291},"line":7,"code":"  it(\"Should be able to drag disabled button\", function () {\n    const selector = \".t--draggable-buttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 200, 300, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 200, 300, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Widgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled menu button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":26,"column":49,"index":1050},"line":26,"code":"  it(\"Should be able to drag disabled menu button\", function () {\n    const selector = \".t--draggable-menubuttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 600, 300, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 600, 300, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Widgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled icon button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":45,"column":49,"index":1813},"line":45,"code":"  it(\"Should be able to drag disabled icon button\", function () {\n    const selector = \".t--draggable-iconbuttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 200, 200, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 200, 200, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Widgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new DocumentViewer and verify in canvas","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":8,"column":52,"index":465},"line":8,"code":"  it(\"1. Add new DocumentViewer and verify in canvas\", () => {\n    ee.DragDropWidgetNVerify(\"documentviewerwidget\", 300, 300);\n  });","file":"e2e/Regression/ClientSide/Widgets/DocumentViewer/DocumentViewer_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Modify visibility & Publish app & verify","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":11,"column":49,"index":595},"line":11,"code":"  it(\"2. Modify visibility & Publish app & verify\", () => {\n    ee.NavigateToSwitcher(\"Explorer\");\n    ee.SelectEntityByName(\"DocumentViewer1\", \"Widgets\");\n    propPane.ToggleOnOrOff(\"Visible\", \"Off\");\n    deployMode.DeployApp();\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"not.exist\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Widgets/DocumentViewer/DocumentViewer_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Change visibility & Publish app & verify again","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":19,"column":55,"index":959},"line":19,"code":"  it(\"3. Change visibility & Publish app & verify again\", () => {\n    ee.SelectEntityByName(\"DocumentViewer1\", \"Widgets\");\n    propPane.ToggleOnOrOff(\"Visible\", \"On\");\n    deployMode.DeployApp();\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"exist\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Widgets/DocumentViewer/DocumentViewer_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Should show a word document correctly","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":26,"column":46,"index":1270},"line":26,"code":"  it(\"4. Should show a word document correctly\", () => {\n    ee.SelectEntityByName(\"DocumentViewer1\", \"Widgets\");\n    propPane.UpdatePropertyFieldValue(\"Document link\", encodedWordDoc);\n    deployMode.DeployApp();\n    //\"Some doc content\" is pressent in the encoded word doc\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"contain\", \"Some doc content\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Widgets/DocumentViewer/DocumentViewer_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Should show an errored state when a malformed docx input is provided","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":34,"column":77,"index":1722},"line":34,"code":"  it(\"5. Should show an errored state when a malformed docx input is provided\", () => {\n    ee.SelectEntityByName(\"DocumentViewer1\", \"Widgets\");\n    const someGarbageString = \"+dsds\";\n    // previously the document is set as \"Some doc content\"\n    // give a corrupted docx string\n    propPane.UpdatePropertyFieldValue(\"Document link\", encodedWordDoc + someGarbageString);\n    deployMode.DeployApp();\n    // now the doc should not contain \"Some doc content\" after a malformed input is provided\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"not.contain\", \"Some doc content\");\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"contain\", \"invalid base64 data\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Widgets/DocumentViewer/DocumentViewer_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Should show a xlsx/xls document correctly and should be able to render different documents without having to add the widget again","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":46,"column":138,"index":2530},"line":46,"code":"  it(\"6. Should show a xlsx/xls document correctly and should be able to render different documents without having to add the widget again\", () => {\n    ee.SelectEntityByName(\"DocumentViewer1\", \"Widgets\");\n    propPane.UpdatePropertyFieldValue(\"Document link\", encodedXlsxDoc);\n    deployMode.DeployApp();\n    //\"456\" is pressent in the encoded xlsx doc\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"contain\", \"r1a\");\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).get('button:contains(\"Copy of Sheet1\")').click();\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"contain\", \"SHEET 2r1a\");\n    deployMode.NavigateBacktoEditor();\n    ee.SelectEntityByName(\"DocumentViewer1\", \"Widgets\");\n    propPane.UpdatePropertyFieldValue(\"Document link\", encodedXlsDoc);\n    deployMode.DeployApp();\n    //\"456\" is pressent in the encoded xlsx doc\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"contain\", \"First Name\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Widgets/DocumentViewer/DocumentViewer_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Should show an errored state when a malformed xlsx input is provided","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":62,"column":77,"index":3501},"line":62,"code":"  it(\"7. Should show an errored state when a malformed xlsx input is provided\", () => {\n    ee.SelectEntityByName(\"DocumentViewer1\", \"Widgets\");\n    // previously the document contains the number \"456\"\n    const someGarbageString = \"+dsds\";\n    //give a corrupted xlsx doc string\n    propPane.UpdatePropertyFieldValue(\"Document link\", encodedXlsxDoc + someGarbageString);\n    deployMode.DeployApp();\n    // now the doc should not contain \"456\" after a malformed input is provided\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"not.contain\", \"456\");\n    cy.get(locator._widgetInDeployed(\"documentviewerwidget\")).should(\"contain\", \"invalid base64 data\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Widgets/DocumentViewer/DocumentViewer_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Dropdown-Modal Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":14,"column":34,"index":726},"line":14,"code":"  it(\"1. Dropdown-Modal Validation\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\", \"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Dropdown1\", \"Widgets\");\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"options\", JSON.stringify(data.input));\n    //creating the Modal and verify Modal name //to fix below\n    // cy.createModal(\"Modal1\", false);\n    // cy.PublishtheApp();\n    // // Changing the option to verify the success message\n    // cy.get(formWidgetsPage.selectWidget)\n    //   .find(widgetLocators.dropdownSingleSelect)\n    //   .click({ force: true });\n    // cy.get(commonlocators.singleSelectWidgetMenuItem)\n    //   .contains(\"Option 2\")\n    //   .click({ force: true });\n    // cy.wait(1000);\n    // cy.get(modalWidgetPage.modelTextField).should(\n    //   \"have.text\",\n    //   \"Modal1\",\n    // );\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Dropdown-Call-Api Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":36,"column":37,"index":1579},"line":36,"code":"  it(\"2. Dropdown-Call-Api Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the Dropdown widget.\n    // Creating the api\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"dropdownApi\");\n    cy.log(\"Creation of buttonApi Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, \"mock-api?records=20&page=4&size=3\");\n    cy.SaveAndRunAPI();\n\n    // Going to HomePage where the button widget is located and opeing it's property pane.\n    cy.get(\"[data-guided-tour-id='explorer-entity-Page1']\").click({\n      force: true\n    });\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\", \"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Dropdown1\", \"Widgets\");\n    cy.reload();\n    cy.executeDbQuery(\"dropdownApi\", \"onOptionChange\");\n    // Filling the messages for success/failure in the onOptionChangeAction of the dropdown widget.\n    cy.onClickActions(\"Success\", \"Error\", \"Execute a query\", \"dropdownApi.run\");\n    cy.PublishtheApp();\n\n    // Changing the option to verify the success message\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 3\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Dropdown-Call-Query Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":66,"column":39,"index":2945},"line":66,"code":"  it(\"3. Dropdown-Call-Query Validation\", function () {\n    //creating a query and calling it from the onOptionChangeAction of the Dropdown widget.\n    // Creating a mock query\n    // cy.CreateMockQuery(\"Query1\");\n    let postgresDatasourceName;\n    cy.startRoutesForDatasource();\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n\n      // cy.wait(\"@saveDatasource\").should(\n      //   \"have.nested.property\",\n      //   \"response.body.responseMeta.status\",\n      //   201,\n      // );\n      cy.fillPostgresDatasourceForm();\n      cy.saveDatasource();\n      cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    });\n    cy.CreateMockQuery(\"Query1\");\n\n    // Going to HomePage where the button widget is located and opeing it's property pane.\n    cy.get(\"[data-guided-tour-id='explorer-entity-Page1']\").click({\n      force: true\n    });\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.openPropertyPane(\"selectwidget\");\n    cy.reload();\n    // Adding the query in the onOptionChangeAction of the dropdown widget.\n    cy.executeDbQuery(\"Query1\", \"onOptionChange\");\n    // Filling the messages for success/failure in the onOptionChangeAction of the dropdown widget.\n    cy.onClickActions(\"Success\", \"Error\", \"Execute a query\", \"Query1.run\");\n    cy.PublishtheApp();\n\n    // Changing the option to verify the success message\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 2\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle JS - Dropdown-Call-Query Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":114,"column":51,"index":4920},"line":114,"code":"  it(\"4. Toggle JS - Dropdown-Call-Query Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the button widget.\n    // calling the existing api\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\", \"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Dropdown1\");\n    cy.get(formWidgetsPage.toggleOnOptionChange).click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"onoptionchange\", \"{{Query1.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp();\n    // Changing the option to verify the success message\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 2\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Toggle JS - Dropdown-CallAnApi Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":135,"column":50,"index":5913},"line":135,"code":"  it(\"5. Toggle JS - Dropdown-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the button widget.\n    // calling the existing api\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\", \"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Dropdown1\", \"Widgets\");\n    cy.testJsontext(\"onoptionchange\", \"{{dropdownApi.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp();\n    // Changing the option to verify the success message\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 1\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"selectwidget\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Dropdown Widget Functionality to Verify On Option Change Action","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":154,"column":72,"index":6913},"line":154,"code":"  it(\"6. Dropdown Widget Functionality to Verify On Option Change Action\", function () {\n    // Open property pane\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\", \"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"Dropdown1\");\n\n    // Clear the JS code\n    _.propPane.UpdatePropertyFieldValue(\"onOptionChange\", \"\");\n    cy.get(_.locators._jsToggle(\"onoptionchange\")).click();\n\n    // Dropdown On Option Change\n    _.jsEditor.DisableJSContext(\"onOptionChange\");\n    cy.getAlert(\"onOptionChange\", \"Option Changed\");\n    cy.PublishtheApp();\n    // Change the Option\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Option 3\").click({\n      force: true\n    });\n    // Verify Option is changed\n    cy.validateToastMessage(\"Option Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new dropdown widget","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":10,"column":29,"index":498},"line":10,"code":"  it(\"Add new dropdown widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-selectwidget\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":18,"column":57,"index":747},"line":18,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more than one empty value is not allowed in options","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":36,"column":75,"index":1255},"line":36,"code":"  it(\"should check that more than one empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that Objects can be added to Select Widget default value","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":54,"column":75,"index":1754},"line":54,"code":"  it(\"should check that Objects can be added to Select Widget default value\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[{\n          \"label\": \"Blue\",\n          \"value\": \"BLUE\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"BLUE\");\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(\".t--property-control-defaultselectedvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(formWidgetsPage.dropdownDefaultButton).should(\"contain\", \"Blue\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that special strings are parsed as string in default value","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":73,"column":77,"index":2508},"line":73,"code":"  it(\"should check that special strings are parsed as string in default value\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[{\n          \"label\": \"Blue\",\n          \"value\": \"null\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": 100\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"120\"\n        }]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"null\");\n    cy.get(\".t--property-control-defaultselectedvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(formWidgetsPage.dropdownDefaultButton).should(\"contain\", \"Blue\");\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"120\");\n    cy.get(\".t--property-control-defaultselectedvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(formWidgetsPage.dropdownDefaultButton).should(\"contain\", \"Red\");\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"{{ 100 }}\");\n    cy.get(\".t--property-control-defaultselectedvalue .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(formWidgetsPage.dropdownDefaultButton).should(\"contain\", \"Green\");\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"{{ null }}\");\n    cy.get(\".t--property-control-defaultselectedvalue .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown Functionality To Check disabled Widget","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":102,"column":53,"index":3965},"line":102,"code":"  it(\"Dropdown Functionality To Check disabled Widget\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    // Disable the visible JS\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    // Verify the disabled visible JS\n    cy.get(publish.selectwidget + \" \" + \"input\").should(\"not.exist\");\n    cy.goToEditFromPublish();\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown Functionality To UnCheck disabled Widget","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":111,"column":55,"index":4333},"line":111,"code":"  it(\"Dropdown Functionality To UnCheck disabled Widget\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    // Check the visible JS\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    // Verify the checked visible JS\n    cy.get(publish.selectwidget).should(\"exist\");\n    cy.goToEditFromPublish();\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if the dropdown value does not change on navigation","suites":["Dropdown Widget Check value does not reset on navigation"],"updatePoint":{"line":8,"column":66,"index":421},"line":8,"code":"  it(\"1. Check if the dropdown value does not change on navigation\", function () {\n    //Change the value of drop down;\n    cy.wait(4000); //settling time for dsl into layout\n\n    cy.get(commonlocators.selectButton).last().click();\n    cy.selectWidgetOnClickOption(\"Red\");\n    cy.wait(200);\n\n    //Navigate\n    cy.NavigateToAPI_Panel();\n\n    //Again navigate back to the widget\n    _.entityExplorer.SelectEntityByName(\"Select3\");\n\n    //Check for the select value again\n    cy.get(`.t--draggable-selectwidget .bp3-popover-target ${commonlocators.menuSelection}`).last().should(\"have.text\", \"Red\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Dropdown/DropDownWidget_value_reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check file upload of type jpeg","suites":["FilePicker Widget Functionality with different file types"],"updatePoint":{"line":8,"column":39,"index":378},"line":8,"code":"  it(\"1. Check file upload of type jpeg\", function () {\n    _.entityExplorer.SelectEntityByName(\"FilePicker1\");\n    const fixturePath = \"cypress/fixtures/AAAFlowerVase.jpeg\";\n    cy.get(commonlocators.filepickerv2).click();\n    cy.get(commonlocators.filePickerInput).first().selectFile(fixturePath, {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    cy.get(commonlocators.dashboardItemName).contains(\"AAAFlowerVase.jpeg\");\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\"button\").contains(\"Upload 1 file\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePicker_with_fileTypes_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Replace an existing file type with another file type","suites":["FilePicker Widget Functionality with different file types"],"updatePoint":{"line":21,"column":61,"index":997},"line":21,"code":"  it(\"2. Replace an existing file type with another file type\", function () {\n    cy.get(commonlocators.filepickerv2).click();\n    cy.get(\"button.uppy-Dashboard-Item-action--remove\").click();\n    cy.get(\"button.uppy-Dashboard-browse\").should(\"be.visible\");\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/appsmithlogo.png\", {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    cy.get(commonlocators.filepickerv2).click();\n    cy.get(commonlocators.dashboardItemName).contains(\"appsmithlogo.png\");\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(200);\n    cy.get(\"button\").contains(\"Upload 1 file\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePicker_with_fileTypes_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test allowed values","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":12,"column":32,"index":392},"line":12,"code":"  it(\"should test allowed values\", () => {\n    cy.openPropertyPane(\"filepickerwidgetv2\");\n    cy.get(\".t--property-control-allowedfiletypes .t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"allowedfiletypes\", `[\".csv\"]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n    cy.testJsontext(\"allowedfiletypes\", \".csv\");\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"exist\");\n    cy.testJsontext(\"allowedfiletypes\", `[\".csv\", \".doc\"]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/Filepicker1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create API to be used in Filepicker","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":12,"column":44,"index":467},"line":12,"code":"  it(\"1. Create API to be used in Filepicker\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, this.data.paginationParam);\n    cy.SaveAndRunAPI();\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. FilePicker Widget Functionality","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":21,"column":40,"index":840},"line":21,"code":"  it(\"2. FilePicker Widget Functionality\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\");\n    _.entityExplorer.SelectEntityByName(\"FilePicker1\");\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    //Checking the edit props for FilePicker and also the properties of FilePicker widget\n    cy.testCodeMirror(\"Upload Files\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. It checks the loading state of filepicker on call the action","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":29,"column":69,"index":1255},"line":29,"code":"  it(\"3. It checks the loading state of filepicker on call the action\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\");\n    _.entityExplorer.SelectEntityByName(\"FilePicker1\");\n    const fixturePath = \"cypress/fixtures/testFile.mov\";\n    cy.executeDbQuery(\"FirstAPI\", \"onFilesSelected\");\n    cy.get(commonlocators.filePickerButton).click();\n    cy.get(commonlocators.filePickerInput).first().selectFile(fixturePath, {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    //cy.get(\".ads-v2-spinner\").should(\"have.length\", 1);\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. It checks the deletion of filepicker works as expected","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":44,"column":63,"index":1969},"line":44,"code":"  it(\"4. It checks the deletion of filepicker works as expected\", function () {\n    cy.get(commonlocators.filePickerButton).click();\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testFile.mov\", {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n    cy.get(commonlocators.filePickerButton).click();\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(200);\n    cy.get(\"button.uppy-Dashboard-Item-action--remove\").click();\n    cy.get(\"button.uppy-Dashboard-browse\").click();\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testFile2.mov\", {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePicker2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Parse CSV,XLS,JSON,TSV,Binary,Text and Base64 file data to table Widget","suites":["File picker widget v2"],"updatePoint":{"line":11,"column":80,"index":596},"line":11,"code":"  it(\"1. Parse CSV,XLS,JSON,TSV,Binary,Text and Base64 file data to table Widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(`.t--property-control-dataformat ${commonlocators.helperText}`).should(\"not.exist\");\n    cy.selectDropdownValue(commonlocators.filePickerDataFormat, \"Array of Objects (CSV, XLS(X), JSON, TSV)\");\n    cy.get(commonlocators.filePickerDataFormat).last().should(\"have.text\", \"Array of Objects (CSV, XLS(X), JSON, TSV)\");\n    cy.get(`.t--property-control-dataformat ${commonlocators.helperText}`).should(\"exist\");\n    cy.get(`.t--property-control-dataformat ${commonlocators.helperText}`).contains(ARRAY_CSV_HELPER_TEXT);\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/Test_csv.csv\", {\n      force: true\n    });\n\n    // wait for file to get uploaded\n    cy.wait(3000);\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Black\");\n    });\n    cy.readTableV2dataPublish(\"1\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"1000\");\n    });\n    cy.get(`.t--widget-tablewidgetv2 .tbody .td[data-rowindex=${1}][data-colindex=${3}] input`).should(\"not.be.checked\");\n    cy.get(\".uppy-Dashboard-Item-action--remove\").click({\n      force: true\n    });\n\n    // Test for XLSX file\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/TestSpreadsheet.xlsx\", {\n      force: true\n    });\n\n    // wait for file to get uploaded\n    cy.wait(3000);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.be.equal(\"Sheet1\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"1\").then(tabData => {\n      expect(tabData).contains(\"Column A\");\n    });\n    cy.get(\".uppy-Dashboard-Item-action--remove\").click({\n      force: true\n    });\n\n    // Test for XLS file\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/SampleXLS.xls\", {\n      force: true\n    });\n\n    // wait for file to get uploaded\n    cy.wait(3000);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.be.equal(\"Sheet1\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"1\").then(tabData => {\n      expect(tabData).contains(\"Dulce\");\n    });\n    cy.get(\".uppy-Dashboard-Item-action--remove\").click({\n      force: true\n    });\n\n    // Test for JSON File\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/largeJSONData.json\", {\n      force: true\n    });\n\n    // wait for file to get uploaded\n    cy.wait(3000);\n    cy.readTableV2dataPublish(\"0\", \"2\").then(tabData => {\n      expect(tabData).to.contain(\"sunt aut facere\");\n    });\n    cy.get(\".uppy-Dashboard-Item-action--remove\").click({\n      force: true\n    });\n\n    // Test for TSV File\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/Sample.tsv\", {\n      force: true\n    });\n\n    // wait for file to get uploaded\n    cy.wait(3000);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.be.equal(\"CONST\");\n    });\n    cy.get(\".uppy-Dashboard-Item-action--remove\").click({\n      force: true\n    });\n\n    // Drag and drop a text widget for binding file data\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 100,\n      y: 100\n    });\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", `{{FilePicker1.files[0].data}}`);\n\n    // Test for Base64\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(commonlocators.filePickerDataFormat, \"Base64\");\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testdata.json\", {\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"data:application/json;base64\");\n    cy.get(\".uppy-Dashboard-Item-action--remove\").click({\n      force: true\n    });\n\n    // Test for Text file\n    cy.selectDropdownValue(commonlocators.filePickerDataFormat, \"Text\");\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testdata.json\", {\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"baseUrl\");\n    cy.get(\".uppy-Dashboard-Item-action--remove\").click({\n      force: true\n    });\n    cy.wait(3000);\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"\");\n    cy.selectDropdownValue(commonlocators.filePickerDataFormat, \"Binary\");\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testdata.json\", {\n      force: true\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"baseUrl\");\n    cy.get(\".uppy-Dashboard-Item-action--remove\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_CSV_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag & drop FilePicker/Text widgets","suites":["File picker widget v2"],"updatePoint":{"line":7,"column":44,"index":416},"line":7,"code":"  it(\"1. Drag & drop FilePicker/Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(widgetsPage.filepickerwidgetv2).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{FilePicker1.isDirty}}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check isDirty meta property","suites":["File picker widget v2"],"updatePoint":{"line":21,"column":36,"index":842},"line":21,"code":"  it(\"2. Check isDirty meta property\", function () {\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Upload a new file\n    cy.get(widgetsPage.filepickerwidgetv2).click();\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testFile.mov\", {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check if the uploaded data does not reset when back from query page","suites":["File picker widget v2"],"updatePoint":{"line":35,"column":76,"index":1496},"line":35,"code":"  it(\"3. Check if the uploaded data does not reset when back from query page\", () => {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      cy.openPropertyPane(\"textwidget\");\n      cy.updateCodeInput(\".t--property-control-text\", `{{FilePicker1.files[0].name}}`);\n      cy.createAndFillApi(datasourceFormData[\"mockApiUrl\"], \"\");\n      cy.updateCodeInput(\"[class*='t--actionConfiguration']\", \"{{FilePicker1.files}}\");\n      cy.wait(1000);\n      cy.validateEvaluatedValue(\"testFile.mov\");\n      cy.get(\"[data-testid='more-action-trigger']\").first().click({\n        force: true\n      });\n\n      // Go back to widgets page\n      _.entityExplorer.NavigateToSwitcher(\"Widgets\", 0, true);\n      cy.get(widgetsPage.filepickerwidgetv2).should(\"contain\", \"1 files selected\");\n      cy.get(\".t--widget-textwidget\").should(\"contain\", \"testFile.mov\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check if the uploaded file is removed on click of cancel button","suites":["File picker widget v2"],"updatePoint":{"line":53,"column":72,"index":2356},"line":53,"code":"  it(\"4. Check if the uploaded file is removed on click of cancel button\", () => {\n    cy.get(widgetsPage.filepickerwidgetv2).click();\n    cy.get(widgetsPage.filepickerwidgetv2CancelBtn).click();\n    cy.get(widgetsPage.filepickerwidgetv2).should(\"contain\", \"Select Files\");\n    cy.get(widgetsPage.filepickerwidgetv2CloseModalBtn).click();\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    cy.get(\".t--entity-item:contains(Api1)\").click();\n    cy.focusCodeInput(\"[class*='t--actionConfiguration']\");\n    cy.wait(1000);\n    cy.validateEvaluatedValue(\"[]\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the uploaded data does not reset when tab switch in the TabsWidget","suites":["File Picker Widget V2 Functionality"],"updatePoint":{"line":9,"column":81,"index":484},"line":9,"code":"  it(\"Check if the uploaded data does not reset when tab switch in the TabsWidget\", () => {\n    cy.get(widgetsPage.filepickerwidgetv2).should(\"contain\", \"Select Files\");\n    cy.get(widgetsPage.filepickerwidgetv2).click();\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testFile.mov\", {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    cy.get(widgetsPage.filepickerwidgetv2).should(\"contain\", \"1 files selected\");\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 2\").click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 2\").should(\"have.class\", \"is-selected\");\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 1\").click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 1\").should(\"have.class\", \"is-selected\");\n    cy.get(widgetsPage.filepickerwidgetv2).should(\"contain\", \"1 files selected\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_Widget_reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Elements inside upload modal should follow theme border radius","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":10,"column":71,"index":531},"line":10,"code":"  it(\"1. Elements inside upload modal should follow theme border radius\", () => {\n    // Click on canvas to get global theme settings\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    cy.get(commonlocators.themeAppBorderRadiusBtn).last().click();\n    appSettings.ClosePane();\n    cy.get(commonlocators.filepickerv2).click();\n\n    // Check the border radius of the modal:\n    cy.get(\".uppy-Dashboard-inner\").should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(\".uppy-Dashboard-innerWrap\").should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(\".uppy-Dashboard-AddFiles\").should(\"have.css\", \"border-radius\", \"24px\");\n\n    // Check the border radius of close button top right\n    cy.get(\".uppy-Dashboard-close\").should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testFile.mov\", {\n      force: true\n    });\n    cy.get(\".uppy-StatusBar-actionBtn--upload\").should(\"have.css\", \"border-radius\", \"24px\");\n\n    // Check the border radius of the remove file icon\n    cy.get(\".uppy-Dashboard-Item-action--remove .uppy-c-icon\").should(\"have.css\", \"border-radius\", \"24px\");\n    cy.get(\".uppy-Dashboard-close\").click({\n      force: true\n    });\n    cy.wait(300);\n\n    // Change the theme border radius to M and check if the remove file icon's border radius is 4px;\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    cy.get(commonlocators.themeAppBorderRadiusBtn).eq(1).click();\n    appSettings.ClosePane();\n    cy.get(commonlocators.filepickerv2).click();\n\n    // Again Check the border radius of the remove file icon\n    cy.get(\".uppy-Dashboard-Item-action--remove .uppy-c-icon\").should(\"have.css\", \"border-radius\", \"4px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_Widget_Reskinning_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check colors inside the modal","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":53,"column":38,"index":2381},"line":53,"code":"  it(\"2. Check colors inside the modal\", () => {\n    cy.get(\".uppy-Dashboard-close\").click({\n      force: true\n    });\n    cy.wait(300);\n\n    // Change the global theme primary color\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.wait(300);\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    cy.get(themeLocator.inputColor).click({\n      force: true\n    });\n    cy.get(\".t--colorpicker-v2-color\").eq(9).click({\n      force: true\n    }).then($elem => {\n      const primaryColor = $elem.css(\"background-color\");\n      appSettings.ClosePane();\n      cy.get(commonlocators.filepickerv2).click();\n      cy.get(\".uppy-StatusBar-actionBtn--upload\").should(\"have.css\", \"background-color\", primaryColor);\n      cy.get(\".uppy-DashboardContent-back\").should(\"have.css\", \"color\", primaryColor);\n      cy.get(\".uppy-DashboardContent-addMoreCaption\").should(\"have.css\", \"color\", primaryColor);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_Widget_Reskinning_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Check the font-family inside the modal","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":80,"column":47,"index":3337},"line":80,"code":"  it(\"3. Check the font-family inside the modal\", () => {\n    cy.get(\".uppy-Dashboard-close\").click({\n      force: true\n    });\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.wait(300);\n    appSettings.OpenAppSettings();\n    appSettings.GoToThemeSettings();\n    cy.get(themeLocator.fontsSelected).click({\n      force: true\n    });\n    cy.contains(\"Roboto\").click({\n      force: true\n    });\n    appSettings.ClosePane();\n    cy.get(commonlocators.filepickerv2).click();\n    cy.get(\".uppy-DashboardContent-back\").should(\"have.css\", \"font-family\", \"Roboto\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Filepicker/FilePickerV2_Widget_Reskinning_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checkbox Functionality To Check required toggle for form","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":9,"column":65,"index":456},"line":9,"code":"  it(\"1. Checkbox Functionality To Check required toggle for form\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.requiredjs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(publish.checkboxWidget).click();\n    cy.get('[type=\"checkbox\"]').eq(0).should(\"not.be.checked\");\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"have.class\", \"bp3-disabled\");\n    cy.get(publish.checkboxWidget).click();\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"not.have.attr\", \"disabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checkbox Functionality To swap label alignment of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":21,"column":67,"index":1082},"line":21,"code":"  it(\"2. Checkbox Functionality To swap label alignment of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"text-align\", \"left\");\n\n    // align right\n    cy.get(\"[data-value='RIGHT']\").first().click();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"text-align\", \"right\");\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"text-align\", \"right\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checkbox Functionality To swap label position of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":33,"column":66,"index":1711},"line":33,"code":"  it(\"3. Checkbox Functionality To swap label position of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-right\").should(\"not.exist\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-left\").should(\"exist\");\n    cy.get(commonlocators.optionposition).last().click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(\"[data-value='Left']\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.PublishtheApp();\n\n    // When Label Position is Left, checkbox is on the right\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-right\").should(\"exist\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-left\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Checkbox Functionality To change label color of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":52,"column":65,"index":2479},"line":52,"code":"  it(\"4. Checkbox Functionality To change label color of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-fontcolor .bp3-input\").type(\"red\");\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Checkbox Functionality To change label size of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":61,"column":64,"index":2905},"line":61,"code":"  it(\"5. Checkbox Functionality To change label size of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.textSizeNew).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.selectTxtSize(\"XL\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"font-size\", \"30px\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Checkbox Functionality To change label style of checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":74,"column":65,"index":3426},"line":74,"code":"  it(\"6. Checkbox Functionality To change label style of checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-emphasis .t--button-group-BOLD\").click();\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".t--checkbox-widget-label\").should(\"have.css\", \"font-weight\", \"700\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"CheckboxGroupWidget, MultiSelectTreeWidget, MultiSelectWidgetV2, SelectWidget, SingleSelectTreeWidget, SwitchGroupWidget, PhoneInputWidget, InputWidgetV2 and CurrencyInputWidget should have value props of which values are not null or undefined to be included as a form data","suites":["Form data"],"updatePoint":{"line":6,"column":279,"index":424},"line":6,"code":"  it(\"CheckboxGroupWidget, MultiSelectTreeWidget, MultiSelectWidgetV2, SelectWidget, SingleSelectTreeWidget, SwitchGroupWidget, PhoneInputWidget, InputWidgetV2 and CurrencyInputWidget should have value props of which values are not null or undefined to be included as a form data\", function () {\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // Check form data\n    cy.get(\"[data-testid='container-wrapper-vannrar7rd'] span\").should(\"exist\").and($formData => {\n      expect($formData).to.contain(\"FormCheckboxGroupWidget\");\n      expect($formData).to.contain(\"FormMultiSelectTreeWidget\");\n      expect($formData).to.contain(\"FormMultiSelectWidgetV2\");\n      expect($formData).to.contain(\"FormSingleSelectTreeWidget\");\n      expect($formData).to.contain(\"FormSwitchGroupWidget\");\n      expect($formData).to.contain(\"FormSelectWidget\");\n      expect($formData).to.contain(\"FormPhoneInputWidget\");\n      expect($formData).to.contain(\"FormInputWidgetV2\");\n      expect($formData).to.contain(\"FormCurrencyInputWidget\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Resets the form","suites":["Form reset functionality"],"updatePoint":{"line":7,"column":21,"index":242},"line":7,"code":"  it(\"Resets the form\", () => {\n    // Select a row and verify\n    cy.get(\".tr\").eq(2).click().should(\"have.class\", \"selected-row\");\n    cy.wait(2000);\n    cy.get(\".rc-select-selection-overflow\").click({\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Option 1\");\n    cy.dropdownMultiSelectDynamic(\"Option 2\");\n    cy.dropdownMultiSelectDynamic(\"Option 3\");\n    // Verify input should include the name \"lindsay.ferguson@reqres.in\"\n    cy.get(\".text-input-wrapper input\").eq(0).invoke(\"attr\", \"value\").should(\"contain\", \"lindsay.ferguson@reqres.in\");\n    // Reset the form\n    cy.get(\"button:contains('Reset')\").click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    // verify table should not have selected row\n    cy.get(\".tr\").eq(2).should(\"not.have.class\", \"selected-row\");\n    // Verify dropdown does not have selected values\n    cy.get(`${widgets.selectWidget} .bp3-tag-input-values .bp3-tag`).should($span => {\n      expect($span).to.have.length(0);\n    });\n    // Verify input should not include \"lindsay.ferguson@reqres.in\"\n    cy.get(\".text-input-wrapper input\").eq(0).invoke(\"attr\", \"value\").should(\"not.contain\", \"lindsay.ferguson@reqres.in\");\n\n    // input widgets should not be in error state\n    cy.get(\".text-input-wrapper input\").eq(0).should(\"not.have.css\", \"border-color\", \"rgb(242, 43, 43)\");\n    cy.get(\".text-input-wrapper input\").eq(0).should(\"not.have.css\", \"border-color\", \"rgb(242, 43, 43)\");\n    cy.get(\".text-input-wrapper input\").eq(1).should(\"not.have.css\", \"border-color\", \"rgb(242, 43, 43)\");\n\n    // Earlier select widget used to remain in error state which wasn't an expected behavior after reset\n    // now even select widget will not show error after reset.\n    cy.get(`.rc-select-selection-overflow`).should(\"not.have.css\", \"border-color\", \"rgb(242, 43, 43)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormReset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check hasChanges meta property","suites":["Form Widget"],"updatePoint":{"line":6,"column":36,"index":183},"line":6,"code":"  it(\"Check hasChanges meta property\", () => {\n    // Check if isDirty is false for the first time\n    cy.contains(\".t--widget-textwidget\", \"false\").should(\"exist\");\n    // Interact with UI\n    cy.get(`.t--widget-checkboxwidget label`).first().click();\n    // Check if isDirty is set to true\n    cy.contains(\".t--widget-textwidget\", \"false\").should(\"not.exist\");\n    cy.contains(\".t--widget-textwidget\", \"true\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_Nested_HasChanges_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Select and TreeSelect Widget","suites":["Form Widget Functionality"],"updatePoint":{"line":8,"column":43,"index":362},"line":8,"code":"  it(\"Validate Select and TreeSelect Widget\", function () {\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"have.attr\", \"disabled\");\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"Blue\");\n    cy.treeSelectDropdown(\"Blue\");\n    cy.get(formWidgetsPage.dropdownWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\".select-popover-wrapper\").contains(\"Blue\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"not.have.attr\", \"disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_Select_TreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Default Form text,  Reset and Close button Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":12,"column":62,"index":660},"line":12,"code":"  it(\"1. Default Form text,  Reset and Close button Validation\", function () {\n    cy.get(widgetsPage.textWidget).should(\"be.visible\");\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").scrollIntoView().should(\"be.visible\");\n    cy.get(widgetsPage.formButtonWidget).contains(\"Reset\").scrollIntoView().should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Add Multiple widgets in Form","suites":["Form Widget Functionality"],"updatePoint":{"line":17,"column":37,"index":974},"line":17,"code":"  it(\"2. Add Multiple widgets in Form\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.dragAndDropToWidget(\"multiselectwidgetv2\", \"formwidget\", {\n      x: 100,\n      y: 100\n    });\n    cy.wait(500);\n    cy.dragAndDropToWidget(\"inputwidgetv2\", \"formwidget\", {\n      x: 50,\n      y: 200\n    });\n    cy.wait(500);\n    cy.get(formWidgetsPage.multiselectwidgetv2).should(\"be.visible\");\n    cy.get(widgetsPage.inputWidget).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Form_Widget Minimize and maximize General Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":34,"column":61,"index":1551},"line":34,"code":"  it(\"3. Form_Widget Minimize and maximize General Validation\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    cy.get(commonlocators.generalChevran).click({\n      force: true\n    });\n    cy.get(commonlocators.generalSection).should(\"not.be.visible\");\n    cy.get(commonlocators.generalChevran).click({\n      force: true\n    });\n    cy.get(commonlocators.generalSection).should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.goToEditFromPublish();\n\n    //Rename Form widget from Entity Explorer\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container3\");\n    _.entityExplorer.SelectEntityByName(\"Form1\");\n    _.entityExplorer.RenameEntityFromExplorer(\"Form1\", \"Form\");\n\n    //Form Widget Functionality To Verify The Colour\n    cy.PublishtheApp();\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(128, 128, 128)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Form Widget Functionality To Unchecked Visible Widget","suites":["Form Widget Functionality"],"updatePoint":{"line":95,"column":62,"index":3598},"line":95,"code":"  it(\"4. Form Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    // Uncheck the visble JS\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    // Verify the unchecked visible JS\n    cy.get(publish.formWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n\n    //Check Visible\n    // Open property pone\n    cy.openPropertyPane(\"formwidget\");\n    // Check the visible JS\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    // Verify the Checked Visible JS\n    cy.get(publish.formWidget).should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Toggle JS - Form-Unckeck Visible field Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":114,"column":58,"index":4281},"line":114,"code":"  it(\"5. Toggle JS - Form-Unckeck Visible field Validation\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(publish.formWidget).should(\"not.exist\");\n    cy.goToEditFromPublish();\n\n    //check visible:\n    cy.openPropertyPane(\"formwidget\");\n    //Check the disabled checkbox using JS and Validate\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publish.formWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Form-Copy Verification","suites":["Form Widget Functionality"],"line":133,"code":"  it.skip(\"6. Form-Copy Verification\", function () {","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"RichTextEditor required functionality","suites":["RichTextEditor Widget Functionality in Form"],"updatePoint":{"line":13,"column":43,"index":545},"line":13,"code":"  it(\"RichTextEditor required functionality\", function () {\n    //changing the Text Name\n    cy.widgetText(this.data.RichTextEditorName, formWidgetsPage.richTextEditorWidget, widgetsPage.widgetNameSpan);\n\n    //Validate Html\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"Default\");\n    //   Make RTE Required\n    cy.CheckWidgetProperties(formWidgetsPage.requiredJs);\n\n    //   Clear the input\n    cy.testJsontext(\"defaultvalue\", \"\");\n    cy.wait(500);\n    cy.get(formWidgetsPage.richTextEditorWidget + \" .tox.tox-tinymce\").should(\"have.css\", \"border\", \"1px solid rgb(217, 25, 33)\");\n    cy.get(\".t--draggable-formbuttonwidget button\").should(\"be.disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWidget_With_RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Widget Functionality check with success message","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":9,"column":60,"index":455},"line":9,"code":"  it(\"Switch Widget Functionality check with success message\", function () {\n    //Open switch widget\n    cy.openPropertyPane(\"switchwidget\");\n    // Change name of switch widget\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.widgetNameSpan);\n    // Change the widget label name\n    cy.testCodeMirror(this.data.switchInputName);\n    // Verify widget label name is verified\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\");\n    // Check the toggler button\n    cy.togglebar(widgetsPage.defaultcheck);\n    // Type in message field and verify\n    cy.getAlert(\"onChange\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWithSwitch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form reset button validation with switch widget","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":24,"column":53,"index":1092},"line":24,"code":"  it(\"Form reset button validation with switch widget\", function () {\n    // Open form button\n    _.entityExplorer.SelectEntityByName(\"FormButton2\");\n\n    // Click on reset widget action\n    cy.selectResetWidget(\"onClick\");\n    // click on toggler from actions\n    cy.selectWidgetForReset(\"Toggler\");\n    cy.closePropertyPane();\n    // Uncheck the switch\n    cy.get(widgetsPage.switchWidget).click();\n    // Verify the message\n    cy.get(widgetsPage.toastMsg).last().invoke(\"text\").then(text => {\n      const toasttext = text;\n      cy.log(toasttext);\n      expect(text.trim()).to.equal(toasttext.trim());\n    });\n    // Verify Unchecked switch is visible\n    cy.get(widgetsPage.switchWidgetInactive).should(\"be.visible\");\n    // Click on reset button\n    cy.get(\"Button:contains('Reset')\").click({\n      force: true\n    });\n    // Verify switch is on and visible\n    cy.get(widgetsPage.switchWidgetActive).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Form/FormWithSwitch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.Import application json","suites":["Iframe Widget functionality"],"updatePoint":{"line":17,"column":31,"index":496},"line":17,"code":"  it(\"1.Import application json\", function () {\n    cy.visit(\"/applications\");\n    homePage.ImportApp(\"IframeOnSrcDocChange.json\");\n    cy.wait(\"@importNewApplication\").then(interception => {\n      agHelper.Sleep();\n      const {\n        isPartialImport\n      } = interception.response.body.data;\n      if (isPartialImport) {\n        cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n          force: true\n        });\n        cy.wait(2000);\n      } else {\n        homePage.AssertImportToast();\n      }\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Iframe/Iframe_onSrcDocChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.Check the OnSrcDocChange event call on first render","suites":["Iframe Widget functionality"],"updatePoint":{"line":35,"column":59,"index":1044},"line":35,"code":"  it(\"2.Check the OnSrcDocChange event call on first render\", () => {\n    cy.reload();\n    cy.wait(2000);\n    cy.get(`.t--entity .page`).first().should(\"have.class\", \"activePage\");\n    cy.openPropertyPane(\"iframewidget\");\n    cy.testJsontext(\"srcdoc\", \"<h1>Hello World!</h1>\");\n    cy.wait(2000);\n    cy.get(`.t--entity .page`).last().should(\"have.class\", \"activePage\");\n    cy.get(`.t--entity-name:contains(${page1})`).first().click();\n    cy.get(`.t--entity .page`).first().should(\"have.class\", \"activePage\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Iframe/Iframe_onSrcDocChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tests Iframe post message props correctly exposed or not","suites":["Iframe Widget functionality"],"updatePoint":{"line":15,"column":62,"index":613},"line":15,"code":"  it(\"Tests Iframe post message props correctly exposed or not\", () => {\n    cy.wait(3000);\n    getIframeBody().find(\"button\").should(\"have.text\", \"Click me\").click();\n    cy.wait(1000);\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", `{\"lastEventId\":\"\",\"origin\":\"null\",\"ports\":[]}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Iframe/Iframe_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality Base64 validation","suites":["Image Widget Functionality with base64"],"updatePoint":{"line":7,"column":50,"index":304},"line":7,"code":"  it(\"Image Widget Functionality Base64 validation\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    /**\n     * Test for Base64 encoded image\n     */\n    cy.testJsontext(\"image\", this.data.base64image.withoutPrefix);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.EvaluateCurrentValue(this.data.base64image.withPrefix);\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.base64image.withPrefix);\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_base64_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality","suites":["Image Widget Functionality"],"updatePoint":{"line":10,"column":32,"index":500},"line":10,"code":"  it(\"Image Widget Functionality\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{ImageWidget}Mouseover\n     * @param{ImagePre Css} Assertion\n     */\n    cy.widgetText(\"img\", viewWidgetsPage.imageWidget, widgetsPage.widgetNameSpan);\n    cy.testJsontext(\"defaultimage\", this.data.defaultimage);\n    cy.wait(1000);\n    cy.focused().blur();\n    /**\n     * @param{URL} ImageUrl\n     */\n    cy.testCodeMirror(this.data.NewImage);\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.validateImage);\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"No Zoom functionality check","suites":["Image Widget Functionality"],"updatePoint":{"line":28,"column":33,"index":1126},"line":28,"code":"  it(\"No Zoom functionality check\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    //Zoom validation\n    cy.changeZoomLevel(\"1x (No Zoom)\");\n    cy.get(commonlocators.imgWidget).invoke(\"attr\", \"style\").should(\"not.contain\", \"zoom-in\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Validate Image","suites":["Image Widget Functionality"],"updatePoint":{"line":35,"column":50,"index":1420},"line":35,"code":"  it(\"Image Widget Functionality To Validate Image\", function () {\n    cy.get(publish.imageWidget + \" \" + \"img\").invoke(\"attr\", \"src\").should(\"contain\", this.data.NewImage);\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Unchecked Visible Widget","suites":["Image Widget Functionality"],"updatePoint":{"line":38,"column":60,"index":1610},"line":38,"code":"  it(\"Image Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"imagewidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.imageWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Check Visible Widget","suites":["Image Widget Functionality"],"updatePoint":{"line":46,"column":56,"index":1947},"line":46,"code":"  it(\"Image Widget Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.imageWidget).should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To check download option and validate image link","suites":["Image Widget Functionality"],"updatePoint":{"line":53,"column":81,"index":2261},"line":53,"code":"  it(\"Image Widget Functionality To check download option and validate image link\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.togglebar(\".t--property-control-enabledownload input[type='checkbox']\");\n    cy.get(publish.imageWidget).trigger(\"mouseover\");\n    cy.get(`${publish.imageWidget} a[data-testid=t--image-download]`).should(\"have.attr\", \"href\", this.data.NewImage);\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"In case of an image loading error, show off the error message","suites":["Image Widget Functionality"],"updatePoint":{"line":59,"column":67,"index":2644},"line":59,"code":"  it(\"In case of an image loading error, show off the error message\", () => {\n    cy.openPropertyPane(\"imagewidget\");\n    // Invalid image url\n    const invalidImageUrl = \"https://www.example.com/does-not-exist.jpg\";\n    cy.testCodeMirror(invalidImageUrl);\n\n    // Show off error message\n    cy.get(`${viewWidgetsPage.imageWidget} div[data-testid=styledImage]`).should(\"not.exist\");\n    cy.get(`${viewWidgetsPage.imageWidget} [data-testid=\"error-container\"]`).contains(\"Unable to display the image\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check default image src","suites":["Image Widget Validation Image Urls"],"updatePoint":{"line":7,"column":32,"index":284},"line":7,"code":"  it(\"1. Check default image src\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", \"https://res.cloudinary.com/drako999/image/upload/v1589196259/default.png\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Add new image and check image is showing instead of default image","suites":["Image Widget Validation Image Urls"],"updatePoint":{"line":11,"column":74,"index":577},"line":11,"code":"  it(\"2. Add new image and check image is showing instead of default image\", function () {\n    cy.testCodeMirror(this.data.NewImage);\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.NewImage);\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Remove both images and check empty screen","suites":["Image Widget Validation Image Urls"],"updatePoint":{"line":16,"column":50,"index":821},"line":16,"code":"  it(\"3. Remove both images and check empty screen\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.get(\".t--property-control-image\").then($el => cy.updateCodeInput($el, \"\"));\n    cy.get(\".t--property-control-defaultimage\").then($el => cy.updateCodeInput($el, \"\"));\n    cy.get(`${viewWidgetsPage.imageWidget} div[data-testid=error-container]`).should(\"not.exist\");\n    cy.get(`${viewWidgetsPage.imageWidget} div[data-testid=styledImage]`).should(\"exist\");\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", \"\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Add new image and check image src","suites":["Image Widget Validation Image Urls"],"updatePoint":{"line":25,"column":42,"index":1401},"line":25,"code":"  it(\"4. Add new image and check image src\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.clearPropertyValue(0);\n    cy.testCodeMirror(this.data.NewImage);\n    // if imageError flag not reset properly, this test will fail.\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.NewImage);\n    // error container doesn't exist\n    cy.get(`${viewWidgetsPage.imageWidget} div[data-testid=error-container]`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Image/Image_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text Input maxChar shows error if defaultText longer","suites":["Input Widget Max Char Functionality"],"updatePoint":{"line":14,"column":58,"index":615},"line":14,"code":"  it(\"Text Input maxChar shows error if defaultText longer\", () => {\n    cy.get(widgetsPage.innertext).click();\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Default text length must be less than or equal to 5 characters\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_MaxChar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text Input maxChar shows error if inputText longer than maxChar","suites":["Input Widget Max Char Functionality"],"updatePoint":{"line":20,"column":69,"index":894},"line":20,"code":"  it(\"Text Input maxChar shows error if inputText longer than maxChar\", () => {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.clearComputedValueFirst();\n    cy.testJsontext(\"defaultvalue\", \"\");\n    cy.closePropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.innertext).click({\n      force: true\n    }).type(\"1234567\");\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.testJsontext(\"maxcharacters\", \"3\");\n    cy.closePropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.innertext).click();\n    cy.wait(1000);\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Input text length must be less than 3 characters\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_MaxChar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Number Input will not show error for maxChar validation","suites":["Input Widget Max Char Functionality"],"updatePoint":{"line":37,"column":61,"index":1542},"line":37,"code":"  it(\"Number Input will not show error for maxChar validation\", () => {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.selectDropdownValue(commonlocators.dataType, \"Number\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_MaxChar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Single-line text with different heights i.e. Auto height and Fixed","suites":["Input Widget Multiline feature"],"updatePoint":{"line":7,"column":75,"index":493},"line":7,"code":"  it(\"1. Single-line text with different heights i.e. Auto height and Fixed\", () => {\n    const textMsg = \"Dynamic panel validation for input widget wrt height\";\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    //verify fixed height is selected\n    cy.get(commonlocators.generalSectionHeight).scrollIntoView().should(\"be.visible\");\n    cy.selectDropdownValue(commonlocators.heightDropdown, \"Auto Height\");\n    cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(theight => {\n      //Changing the text label\n      cy.testCodeMirror(textMsg);\n      cy.wait(3000);\n      cy.moveToStyleTab();\n      cy.get(commonlocators.dropDownIcon).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(\"XL\").click();\n      cy.wait(\"@updateLayout\");\n      cy.wait(2000);\n      cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.not.equal(tnewheight);\n      });\n    });\n    // same in preview mode\n    cy.get(commonlocators.deleteWidget).click();\n    cy.wait(\"@updateLayout\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_Multiline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Multi-line text with different heights i.e. Auto height, Auto height with limit and Fixed","suites":["Input Widget Multiline feature"],"updatePoint":{"line":33,"column":98,"index":1602},"line":33,"code":"  it(\"2. Multi-line text with different heights i.e. Auto height, Auto height with limit and Fixed\", () => {\n    const textMsg = \"Dynamic panel validation for input widget wrt height\";\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.selectDropdownValue(widgetsPage.datatype, \"Multi-line text\");\n    // verify height changes to auto height\n\n    // verify on addding long text inside input field, widget height changes\n    cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(theight => {\n      //Changing the text label\n      cy.testCodeMirror(textMsg);\n      cy.wait(3000);\n      cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.not.equal(tnewheight);\n      });\n    });\n    // verify changing label size also changes widget's height\n    cy.get(commonlocators.generalSectionHeight).scrollIntoView().should(\"be.visible\");\n    // cy.get(commonlocators.datatype).find('span').should('contain.text', 'Single-line text')\n    cy.selectDropdownValue(commonlocators.heightDropdown, \"Auto Height\");\n    cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(height => {\n      //Changing the text label\n      cy.moveToStyleTab();\n      cy.get(commonlocators.dropDownIcon).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(\"XL\").click();\n      cy.wait(\"@updateLayout\");\n      cy.wait(2000);\n      cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height).to.not.equal(newheight);\n      });\n    });\n    // select height as fixed for multiline datatype\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.moveToContentTab();\n    cy.get(widgetsPage.datatype).last().click({\n      force: true\n    });\n    cy.selectDropdownValue(commonlocators.heightDropdown, \"Fixed\");\n    // change Label font size and verify\n    cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(height => {\n      //Changing the text label\n      cy.moveToStyleTab();\n      cy.get(commonlocators.dropDownIcon).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(\"S\").click();\n      cy.wait(\"@updateLayout\");\n      cy.wait(2000);\n      cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(newheight => {\n        expect(height).to.equal(newheight);\n      });\n    });\n    // adding long text for the input field\n    cy.moveToContentTab();\n    cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(theight => {\n      cy.testCodeMirror(textMsg + textMsg);\n      cy.wait(3000);\n      cy.get(\".t--widget-inputwidgetv2\").invoke(\"css\", \"height\").then(tnewheight => {\n        expect(theight).to.equal(tnewheight);\n      });\n    });\n    cy.get(commonlocators.deleteWidget).click();\n    cy.wait(\"@updateLayout\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_Multiline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Enter key behaviour with single line and multi line selection","suites":["Input Widget Multiline feature"],"updatePoint":{"line":98,"column":70,"index":4410},"line":98,"code":"  it(\"3. Enter key behaviour with single line and multi line selection\", () => {\n    cy.dragAndDropToCanvas(\"inputwidgetv2\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(WIDGET.INPUT_V2);\n    cy.get(PROPERTY_SELECTOR.onSubmit).find(\".t--js-toggle\").click();\n    cy.updateCodeInput(PROPERTY_SELECTOR.onSubmit, \"{{showAlert('Success')}}\");\n    // enter some text and hit enter\n    cy.get(\".t--draggable-inputwidgetv2\").find(\"input\").type(\"hi\").type(\"{enter}\");\n    // verify toast message on enter\n    cy.get(homePage.toastMessage).should(\"contain\", \"Success\");\n    // enter key with multiline\n    cy.selectDropdownValue(widgetsPage.datatype, \"Multi-line text\");\n    cy.get(\".t--draggable-inputwidgetv2\").find(\"textarea\").first().type(\"hi\").type(\"{enter}\").type(\"again\").type(`{${modifierKey}}{enter}`);\n    // verify toast message on enter\n    cy.get(homePage.toastMessage).should(\"contain\", \"Success\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_Multiline_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. onBlur and onFocus should be triggered from the input widget","suites":["Input Widget Property tests onFocus and onBlur"],"updatePoint":{"line":11,"column":69,"index":691},"line":11,"code":"  it(\"1. onBlur and onFocus should be triggered from the input widget\", () => {\n    cy.dragAndDropToCanvas(inputWidgetName, {\n      x: 300,\n      y: 200\n    });\n    cy.openPropertyPane(inputWidgetName);\n    cy.get(widgetsPage.toggleOnFocus).click({\n      force: true\n    });\n    cy.testJsontext(\"onfocus\", \"{{showAlert('Focused','success')}}\");\n    cy.get(widgetsPage.toggleOnBlur).click({\n      force: true\n    });\n    cy.testJsontext(\"onblur\", \"{{showAlert('Blurred','success')}}\");\n    cy.get(widgetInput).click({\n      force: true\n    });\n    cy.validateToastMessage(\"Focused\");\n    agHelper.PressEscape();\n    cy.openPropertyPane(inputWidgetName);\n    cy.validateToastMessage(\"Blurred\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_OnFocus_OnBlur_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. onBlur and onFocus should be triggered from the phone input widget","suites":["Input Widget Property tests onFocus and onBlur"],"updatePoint":{"line":33,"column":75,"index":1396},"line":33,"code":"  it(\"2. onBlur and onFocus should be triggered from the phone input widget\", () => {\n    cy.dragAndDropToCanvas(phoneInputWidgetName, {\n      x: 300,\n      y: 400\n    });\n    cy.openPropertyPane(phoneInputWidgetName);\n    cy.get(widgetsPage.toggleOnFocus).click({\n      force: true\n    });\n    cy.testJsontext(\"onfocus\", \"{{showAlert('Focused','success')}}\");\n    cy.get(widgetsPage.toggleOnBlur).click({\n      force: true\n    });\n    cy.testJsontext(\"onblur\", \"{{showAlert('Blurred','success')}}\");\n    cy.get(phoneInputWidget).click({\n      force: true\n    });\n    cy.validateToastMessage(\"Focused\");\n    agHelper.PressEscape();\n    cy.openPropertyPane(phoneInputWidgetName);\n    cy.validateToastMessage(\"Blurred\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_OnFocus_OnBlur_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. onBlur and onFocus should be triggered from the currency input widget","suites":["Input Widget Property tests onFocus and onBlur"],"updatePoint":{"line":55,"column":78,"index":2124},"line":55,"code":"  it(\"3. onBlur and onFocus should be triggered from the currency input widget\", () => {\n    cy.dragAndDropToCanvas(currencyInputWidgetName, {\n      x: 300,\n      y: 600\n    });\n    cy.openPropertyPane(currencyInputWidgetName);\n    cy.get(widgetsPage.toggleOnFocus).click({\n      force: true\n    });\n    cy.testJsontext(\"onfocus\", \"{{showAlert('Focused','success')}}\");\n    cy.get(widgetsPage.toggleOnBlur).click({\n      force: true\n    });\n    cy.testJsontext(\"onblur\", \"{{showAlert('Blurred','success')}}\");\n    cy.get(currencyInputWidget).click({\n      force: true\n    });\n    cy.validateToastMessage(\"Focused\");\n    agHelper.PressEscape();\n    cy.openPropertyPane(currencyInputWidgetName);\n    cy.validateToastMessage(\"Blurred\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_OnFocus_OnBlur_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input Widget Functionality","suites":["Input Widget Functionality"],"updatePoint":{"line":31,"column":35,"index":1297},"line":31,"code":"  it(\"1. Input Widget Functionality\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    /**\n     * @param{Text} Random Text\n     * @param{InputWidget}Mouseover\n     * @param{InputPre Css} Assertion\n     */\n    cy.widgetText(\"day\", widgetsPage.inputWidget, widgetsPage.widgetNameSpan);\n    cy.selectDropdownValue(widgetsPage.datatype, \"Single-line text\");\n    cy.get(widgetsPage.innertext).click({\n      force: true\n    }).type(this.data.para);\n    cy.get(widgetsPage.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.para);\n    //cy.openPropertyPane(\"inputwidgetv2\");\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", this.data.defaultdata);\n    cy.get(widgetsPage.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.defaultdata);\n    cy.testJsontext(\"placeholder\", this.data.placeholder);\n    /**\n     * @param{Widget} Widget InnerCss\n     */\n    cy.get(widgetsPage.innertext).invoke(\"attr\", \"placeholder\").should(\"contain\", this.data.placeholder);\n    cy.testJsontext(\"regex\", this.data.regex);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n    cy.getAlert(\"onTextChanged\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Input Widget Functionality To Validate Default Text and Placeholder","suites":["Input Widget Functionality"],"updatePoint":{"line":59,"column":76,"index":2538},"line":59,"code":"  it(\"2. Input Widget Functionality To Validate Default Text and Placeholder\", function () {\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.defaultdata);\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"placeholder\").should(\"contain\", this.data.placeholder);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. isSpellCheck: true","suites":["Input Widget Functionality"],"updatePoint":{"line":66,"column":27,"index":2889},"line":66,"code":"  it(\"3. isSpellCheck: true\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebar(commonlocators.spellCheck + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"spellcheck\").should(\"eq\", \"true\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n\n    //isSpellCheck: false\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebarDisable(commonlocators.spellCheck + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"spellcheck\").should(\"eq\", \"false\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Input Widget Functionality To Check Disabled Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":84,"column":60,"index":3593},"line":84,"code":"  it(\"4. Input Widget Functionality To Check Disabled Widget\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n\n    //Input Widget Functionality To Check Enabled Widget\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Input Functionality To Unchecked Visible Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":102,"column":56,"index":4264},"line":102,"code":"  it(\"5. Input Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n\n    //Input Functionality To Check Visible Widget\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Input Functionality To check number input type with custom regex","suites":["Input Widget Functionality"],"updatePoint":{"line":120,"column":73,"index":4923},"line":120,"code":"  it(\"6. Input Functionality To check number input type with custom regex\", function () {\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.selectDropdownValue(widgetsPage.datatype, \"Number\");\n    cy.testJsontext(\"regex\", \"^s*(?=.*[1-9])d*(?:.d{1,2})?s*$\");\n    cy.get(widgetsPage.innertext).click().clear().type(\"1.255\");\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Invalid input\");\n    });\n    cy.get(widgetsPage.innertext).click({\n      force: true\n    }).clear();\n    cy.closePropertyPane(\"inputwidgetv2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Input label renders if label prop is not empty","suites":["Input Widget Functionality"],"updatePoint":{"line":133,"column":55,"index":5453},"line":133,"code":"  it(\"7. Input label renders if label prop is not empty\", () => {\n    //Input label wrapper do not show if lable and tooltip is empty\n    cy.get(\"[data-testid='label-container']\").should(\"not.exist\");\n    cy.openPropertyPane(\"inputwidgetv2\");\n    // enter label in property pan\n    cy.get(widgetsPage.inputTextControl).type(\"Label1\");\n    // test if label shows up with correct text\n    cy.get(\".t--input-widget-label\").contains(\"Label1\");\n\n    //Input tooltip renders if tooltip prop is not empty\n    cy.openPropertyPane(\"inputwidgetv2\");\n    // enter tooltip in property pan\n    cy.get(widgetsPage.inputTooltipControl).type(\"Helpfull text for input\");\n    // tooltip help icon shows\n    cy.get(\".t--input-widget-tooltip\").should(\"be.visible\");\n\n    //Input icon shows on icon select\n    cy.selectDropdownValue(widgetsPage.datatype, \"Single-line text\");\n    cy.wait(1000);\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".bp3-input-group .bp3-icon-add\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Input value of number type should reflect the default text value 0","suites":["Input Widget Functionality"],"updatePoint":{"line":161,"column":75,"index":6605},"line":161,"code":"  it(\"8. Input value of number type should reflect the default text value 0\", () => {\n    cy.moveToContentTab();\n    cy.selectDropdownValue(widgetsPage.datatype, \"Number\");\n    /*cy.get(widgetsPage.defaultInput)\n      .click({ force: true })\n      .type(\"0\");*/\n    cy.testJsontext(\"defaultvalue\", \"0\");\n    cy.closePropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.innertext).invoke(\"val\").then(text => {\n      expect(text).to.equal(\"0\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate input widget resets OnSubmit","suites":["Input widget V2 - "],"updatePoint":{"line":8,"column":46,"index":299},"line":8,"code":"  it(\"1. Validate input widget resets OnSubmit\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.getAlert(\"onSubmit\", \"Submitted!!\");\n    cy.get(widgetInput).clear({\n      force: true\n    });\n    cy.wait(300);\n    cy.get(widgetInput).type(\"test{enter}\"); //Clicking enter submits the form here\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate DataType - TEXT can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":19,"column":66,"index":694},"line":19,"code":"  it(\"2. Validate DataType - TEXT can be entered into Input widget\", () => {\n    [{\n      input: \"test\",\n      expected: \"test:true:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:true:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"\",\n      expected: \":true:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:true:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:true:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate DataType - NUMBER can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":43,"column":68,"index":1277},"line":43,"code":"  it(\"3. Validate DataType - NUMBER can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Number\");\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Number\");\n    [{\n      input: \"invalid\",\n      expected: \"null:true:false\"\n    }, {\n      input: \"invalid123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"-\",\n      expected: \"null:true:false\"\n    }, {\n      input: \"\",\n      expected: \"null:true:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"100.22:true:false\"\n    }, {\n      input: \"invalid@appsmith.com\",\n      expected: \"null:true:false\"\n    }, {\n      input: \"1.001\",\n      expected: \"1.001:true:false\"\n    }, {\n      input: \"1.1.\",\n      expected: \"null:true:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validate DataType - PASSWORD can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":82,"column":70,"index":2330},"line":82,"code":"  it(\"4. Validate DataType - PASSWORD can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Password\");\n    [{\n      input: \"test\",\n      expected: \"test:true:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:true:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"-\",\n      expected: \"-:true:false\"\n    }, {\n      input: \"\",\n      expected: \":true:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:true:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:true:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Validate DataType - EMAIL can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":111,"column":67,"index":3086},"line":111,"code":"  it(\"5. Validate DataType - EMAIL can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Email\");\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    [{\n      input: \"test\",\n      expected: \"test:true:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:true:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:true:false\"\n    }, {\n      input: \"-\",\n      expected: \"-:true:false\"\n    }, {\n      input: \"\",\n      expected: \":true:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:true:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:true:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_inside_List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate that dataType - NUMBER, For new widgets being dragged, the value for showStepArrows should be set to false","suites":["Input Widget V2 showStepArrows Functionality - "],"updatePoint":{"line":4,"column":124,"index":304},"line":4,"code":"  it(\"1. Validate that dataType - NUMBER, For new widgets being dragged, the value for showStepArrows should be set to false\", () => {\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 400\n    });\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(widgetsPage.inputPropsDataType, \"Number\");\n    cy.get(widgetsPage.showStepArrowsToggleCheckBox).should(\"not.be.checked\");\n    cy.get(widgetsPage.inputStepArrows).should(\"not.exist\"); // This is the step arrows\n    //Validate that dataType - NUMBER, stepArrows should be visible when showStepArrows is set to true\n    // Enable showStepArrows to true\n    cy.togglebar(widgetsPage.showStepArrowsToggleCheckBox);\n    cy.get(widgetsPage.inputStepArrows).should(\"exist\"); // step arrows should be visible\n    //Toggle test case to validate that dataType - NUMBER, stepArrows should be hidden when toggle value is false\n    // click on the Js\n    cy.get(widgetsPage.toggleShowStepArrows).click({\n      force: true\n    });\n\n    // Add showStepArrows action and value as false\n    cy.testJsontext(\"showsteparrows\", `{{false}}`);\n    cy.get(widgetsPage.inputStepArrows).should(\"not.exist\"); // step arrows should not be visible\n\n    //Toggle test case to validate that dataType - NUMBER, stepArrows should be visible when toggle value is true\n    // Add showStepArrows action and add value as true\n    cy.testJsontext(\"showsteparrows\", `{{true}}`);\n    cy.get(widgetsPage.inputStepArrows).should(\"exist\"); // step arrows should be visible\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_ShowStepArrows_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. DragDrop Input & Label/Text widgets","suites":["Input widget V2 - "],"updatePoint":{"line":5,"column":44,"index":249},"line":5,"code":"  it(\"1. DragDrop Input & Label/Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Input1.text}}:{{Input1.value}}:{{Input1.isValid}}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate input widget resets OnSubmit","suites":["Input widget V2 - "],"updatePoint":{"line":19,"column":46,"index":709},"line":19,"code":"  it(\"2. Validate input widget resets OnSubmit\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.getAlert(\"onSubmit\", \"Submitted!!\");\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"test{enter}\"); //Clicking enter submits the form here\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Number\");\n    cy.get(widgetInput).clear();\n    cy.get(widgetInput).type(\"1.0010{enter}\"); //Clicking enter submits the form here\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate DataType - TEXT can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":33,"column":66,"index":1346},"line":33,"code":"  it(\"3. Validate DataType - TEXT can be entered into Input widget\", () => {\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Single-line text\");\n    [{\n      input: \"test\",\n      expected: \"test:test:true\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"\",\n      expected: \"::true\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:true\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n    cy.openPropertyPane(widgetName);\n\n    //required: on\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    [{\n      input: \"test\",\n      expected: \"test:test:true\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:true\"\n    }, {\n      input: \"\",\n      expected: \"::false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:true\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }, {\n      input: \"\",\n      expected: \"::false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validate DataType - NUMBER can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":92,"column":68,"index":2785},"line":92,"code":"  it(\"4. Validate DataType - NUMBER can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Number\");\n    [{\n      input: \"invalid\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"invalid123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"100.22:100.22:true\"\n    }, {\n      input: \"invalid@appsmith.com\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"1.001\",\n      expected: \"1.001:1.001:true\"\n    }, {\n      input: \"1.1.\",\n      expected: \"null:null:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n\n    //required: off\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Number\");\n    [{\n      input: \"invalid\",\n      expected: \"null:null:true\"\n    }, {\n      input: \"invalid123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"\",\n      expected: \"null:null:true\"\n    }, {\n      input: \"$100.22\",\n      expected: \"100.22:100.22:true\"\n    }, {\n      input: \"invalid@appsmith.com\",\n      expected: \"null:null:false\"\n    }, {\n      input: \"1.001\",\n      expected: \"1.001:1.001:true\"\n    }, {\n      input: \"1.1.\",\n      expected: \"null:null:false\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Validate DataType - PASSWORD can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":164,"column":70,"index":4535},"line":164,"code":"  it(\"5. Validate DataType - PASSWORD can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Password\");\n    [{\n      input: \"test\",\n      expected: \"test:test:true\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:true\"\n    }, {\n      input: \"\",\n      expected: \"::true\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:true\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n\n    //required: on\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    [{\n      input: \"test\",\n      expected: \"test:test:true\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:true\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:true\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:true\"\n    }, {\n      input: \"\",\n      expected: \"::false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:true\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n    validateAutocompleteAttribute();\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Validate DataType - EMAIL can be entered into Input widget","suites":["Input widget V2 - "],"updatePoint":{"line":224,"column":67,"index":6004},"line":224,"code":"  it(\"6. Validate DataType - EMAIL can be entered into Input widget\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Email\");\n    [{\n      input: \"test\",\n      expected: \"test:test:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:false\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:false\"\n    }, {\n      input: \"\",\n      expected: \"::false\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n\n    //required: off\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    [{\n      input: \"test\",\n      expected: \"test:test:false\"\n    }, {\n      input: \"test123\",\n      expected: \"test123:test123:false\"\n    }, {\n      input: \"123\",\n      expected: \"123:123:false\"\n    }, {\n      input: \"-\",\n      expected: \"-:-:false\"\n    }, {\n      input: \"\",\n      expected: \"::true\"\n    }, {\n      input: \"$100.22\",\n      expected: \"$100.22:$100.22:false\"\n    }, {\n      input: \"test@appsmith.com\",\n      expected: \"test@appsmith.com:test@appsmith.com:true\"\n    }].forEach(({\n      expected,\n      input\n    }) => enterAndTest(input, expected));\n    validateAutocompleteAttribute();\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Validating other properties - Input validity with #valid","suites":["Input widget V2 - "],"updatePoint":{"line":284,"column":65,"index":7479},"line":284,"code":"  it(\"7. Validating other properties - Input validity with #valid\", () => {\n    cy.openPropertyPane(widgetName);\n    [[\"{{1 === 2}}\", \"false\", true], [\"\", \"true\", false], [\"{{1 === 1}}\", \"true\", true], [\"\", \"true\", false]].forEach(([input, expected, isValueDynamic]) => {\n      cy.updateCodeInput(\".t--property-control-valid\", input);\n      cy.wait(500);\n      isValueDynamic && cy.validateEvaluatedValue(expected);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. onSubmit should be triggered with the whole input value","suites":["Input widget V2 - "],"updatePoint":{"line":292,"column":64,"index":7908},"line":292,"code":"  it(\"8. onSubmit should be triggered with the whole input value\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Single-line text\");\n    cy.get(\".t--property-control-required label\").last().click({\n      force: true\n    });\n    // Set onSubmit action, storing value\n    cy.get(\".t--property-control-onsubmit\").find(\".t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-onsubmit\", \"{{storeValue('textPayloadOnSubmit',Input1.text)}}\");\n    // Bind to stored value above\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", \"{{appsmith.store.textPayloadOnSubmit}}\");\n    cy.assertPageSave();\n    cy.closePropertyPane();\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    // Input text and hit enter key\n    cy.get(widgetInput).type(\"test{enter}\");\n    // Assert if the Text widget contains the whole value, test\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"test\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. changing default text should change text","suites":["Input widget V2 - "],"updatePoint":{"line":313,"column":49,"index":8898},"line":313,"code":"  it(\"9. changing default text should change text\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Input1.text}}:{{Input1.value}}:{{Input1.isValid}}`);\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `test`);\n    // wait for evaluations\n    cy.wait(300);\n    cy.get(`.t--widget-${widgetName} input`).should(\"contain.value\", \"test\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"test:test:true\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `anotherText`);\n    // wait for evaluations\n    cy.wait(300);\n    cy.get(`.t--widget-${widgetName} input`).should(\"contain.value\", \"anotherText\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"anotherText:anotherText:true\");\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Number\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `{{1}}`);\n    // wait for evaluations\n    cy.wait(300);\n    cy.get(`.t--widget-${widgetName} input`).should(\"contain.value\", \"1\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1:1:true\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `{{1.00010000}}`);\n    // wait for evaluations\n    cy.wait(300);\n    cy.get(`.t--widget-${widgetName} input`).should(\"contain.value\", \"1.0001\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1.0001:1.0001:true\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Check isDirty meta property","suites":["Input widget V2 - "],"updatePoint":{"line":339,"column":37,"index":10313},"line":339,"code":"  it(\"10. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Input1.isDirty}}`);\n    // Init isDirty\n    cy.openPropertyPane(widgetName);\n    cy.selectDropdownValue(\".t--property-control-datatype input\", \"Single-line text\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"a\");\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"b\");\n    cy.wait(300);\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Change defaultText\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"c\");\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Input/Inputv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can remove default items when default value changes from undefined to an array","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":17,"column":84,"index":885},"line":17,"code":"  it(\"can remove default items when default value changes from undefined to an array\", () => {\n    cy.addDsl(jsonFormDslWithSchemaAndWithoutSourceData);\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 2);\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-1--college input`).type(\"Dummy college\");\n      cy.get(`${education}-1--year input`).type(\"10/08/2010\");\n    });\n    cy.get(`${education}-item.t--item-0`).find(deleteButton).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 1);\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"Dummy college\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"10/08/2010\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can add more items to the field","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":53,"column":37,"index":2099},"line":53,"code":"  it(\"can add more items to the field\", () => {\n    cy.addDsl(dslWithSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${education}-item`).should(\"have.length\", 1).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"MIT\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"20/10/2014\");\n    });\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 2).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"MIT\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"20/10/2014\");\n      cy.get(`${education}-1--college input`).should(\"have.value\", \"\");\n      cy.get(`${education}-1--year input`).should(\"have.value\", \"\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can remove items from the field","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":70,"column":37,"index":2909},"line":70,"code":"  it(\"can remove items from the field\", () => {\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 3);\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-1--college input`).type(\"Dummy college\");\n      cy.get(`${education}-1--year input`).type(\"10/08/2010\");\n    });\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-2--college input`).type(\"Dummy college 2\");\n      cy.get(`${education}-2--year input`).type(\"01/01/2020\");\n    });\n    cy.get(commonlocators.canvas).click({\n      force: true\n    });\n    cy.get(`${education}-item.t--item-1`).find(deleteButton).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 2);\n    cy.get(`${education}-item`).within(() => {\n      cy.get(`${education}-1--college input`).should(\"have.value\", \"Dummy college 2\");\n      cy.get(`${education}-1--year input`).should(\"have.value\", \"01/01/2020\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"can change the visibility of the field","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":98,"column":44,"index":3988},"line":98,"code":"  it(\"can change the visibility of the field\", () => {\n    cy.get(education).should(\"exist\");\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n\n    // Visible -> false\n    cy.togglebarDisable(\".t--property-control-visible input\");\n    cy.get(education).should(\"not.exist\");\n\n    // Visible -> true\n    cy.togglebar(\".t--property-control-visible input\");\n    cy.get(education).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables all underlying field when array field is disabled","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":111,"column":64,"index":4445},"line":111,"code":"  it(\"disables all underlying field when array field is disabled\", () => {\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n\n    // Disable -> true\n    cy.togglebar(\".t--property-control-disabled input\");\n    cy.get(education).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.attr\", \"disabled\");\n      cy.get(`${education}-0--year input`).should(\"have.attr\", \"disabled\");\n    });\n\n    // Disable -> false\n    cy.togglebarDisable(\".t--property-control-disabled input\");\n    cy.get(education).should(\"exist\");\n    cy.get(education).within(() => {\n      cy.get(`${education}-0--college input`).should(\"not.have.attr\", \"disabled\");\n      cy.get(`${education}-0--year input`).should(\"not.have.attr\", \"disabled\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"disables add new and remove buttons when array field is disabled","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":131,"column":70,"index":5264},"line":131,"code":"  it(\"disables add new and remove buttons when array field is disabled\", () => {\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    let initialNoOfItems = 0;\n    cy.get(`${education}-item`).then($items => {\n      initialNoOfItems = $items.length;\n    });\n\n    // Disable -> true\n    cy.togglebar(\".t--property-control-disabled input\");\n    cy.get(`${education} ${addButton}`).should(\"have.attr\", \"disabled\");\n    cy.get(`${education} ${addButton}`).should(\"have.attr\", \"disabled\");\n\n    // Click add button\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).then($items => {\n      expect($items.length).equal(initialNoOfItems);\n    });\n    // Click remove button\n    cy.get(`${education} ${deleteButton}`).last().click({\n      force: true\n    });\n    cy.get(`${education}-item`).then($items => {\n      expect($items.length).equal(initialNoOfItems);\n    });\n\n    // Disable -> false\n    cy.togglebarDisable(\".t--property-control-disabled input\");\n    cy.get(addButton).should(\"not.have.attr\", \"disabled\");\n    cy.get(deleteButton).should(\"not.have.attr\", \"disabled\");\n    // Click add button\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).then($items => {\n      expect($items.length).equal(initialNoOfItems + 1);\n    });\n    // Click remove button\n    cy.get(`${education} ${deleteButton}`).last().click({\n      force: true\n    });\n    cy.get(`${education}-item`).then($items => {\n      expect($items.length).equal(initialNoOfItems);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should not render field level default value if form level is present","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":179,"column":74,"index":6897},"line":179,"code":"  it(\"should not render field level default value if form level is present\", () => {\n    const collegeFieldDefaultValue = \"College default value\";\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\").openFieldConfiguration(\"__array_item__\", false).openFieldConfiguration(\"college\", false);\n\n    // Modify default text of eductation -> college field\n    cy.testJsontext(\"defaultvalue\", collegeFieldDefaultValue);\n    cy.closePropertyPane();\n    cy.get(`${education}-item`).should(\"have.length\", 1).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"MIT\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"20/10/2014\");\n    });\n\n    // Add new item to education array\n    cy.get(`${education} ${addButton}`).click({\n      force: true\n    });\n    cy.get(`${education}-item`).should(\"have.length\", 2).within(() => {\n      cy.get(`${education}-0--college input`).should(\"have.value\", \"MIT\");\n      cy.get(`${education}-0--year input`).should(\"have.value\", \"20/10/2014\");\n      cy.get(`${education}-1--college input`).should(\"have.value\", collegeFieldDefaultValue);\n      cy.get(`${education}-1--year input`).should(\"have.value\", \"\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"phone input dropdown should update the selected value","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":204,"column":59,"index":8134},"line":204,"code":"  it(\"phone input dropdown should update the selected value\", () => {\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\", false);\n\n    // Add new custom field\n    cy.get(\".t--property-control-fieldconfiguration .t--add-column-btn\").click({\n      force: true\n    });\n    cy.openFieldConfiguration(\"customField1\", false);\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Phone Number Input/);\n\n    // Enable Allow Country Code Change\n    cy.togglebar(\".t--property-control-allowcountrycodechange input[type='checkbox']\");\n    // Change the label of the field to Phone Number\n    cy.testJsontext(\"text\", \"Phone Number\");\n\n    // Open country code dropdown and select +91\n    cy.get(\".t--input-country-code-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"+91\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").contains(\"+91\").click({\n      force: true\n    });\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"🇮🇳+91\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"currency input dropdown should update the selected value","suites":["JSON Form Widget Array Field"],"updatePoint":{"line":231,"column":62,"index":9223},"line":231,"code":"  it(\"currency input dropdown should update the selected value\", () => {\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\", false);\n\n    // Add new custom field\n    cy.get(\".t--property-control-fieldconfiguration .t--add-column-btn\").click({\n      force: true\n    });\n    cy.openFieldConfiguration(\"customField1\", false);\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Currency Input/);\n\n    // Enable Allow Country Code Change\n    cy.togglebar(\".t--property-control-allowcurrencychange input[type='checkbox']\");\n    // Change the label of the field to Phone Number\n    cy.testJsontext(\"text\", \"Currency\");\n\n    // Open country code dropdown and select gbp\n    cy.get(\".t--input-currency-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"gbp\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").first().click();\n    cy.get(\".t--input-currency-change\").should(\"contain\", \"£\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_ArrayField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"generates fields with valid source data json","suites":["JSON Form Widget AutoGenerate Disabled"],"updatePoint":{"line":12,"column":50,"index":539},"line":12,"code":"  it(\"generates fields with valid source data json\", () => {\n    const formDsl = JSON.parse(JSON.stringify(jsonFormDslWithSchemaAndWithoutSourceData));\n    cy.addDsl(formDsl);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.togglebarDisable(`.t--property-control-autogenerateform input`);\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      gender: \"male\",\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\",\n        state: \"State\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\",\n        course: \"CS\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n\n    // Fields that should exist\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"John\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).then(input => {\n      cy.wrap(input).should(\"have.value\", 30);\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"10/12/1992\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Koramangala\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Bangalore\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"MIT\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"20/10/2014\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education .t--jsonformfield-array-delete-btn .t--text`).should(\"have.text\", \"Delete\");\n    cy.get(`${fieldPrefix}-education .t--jsonformfield-array-add-btn .t--text`).should(\"have.text\", \"Add New\");\n\n    /**\n     * Fields that shouldn't exist\n     *  */\n    cy.get(`${fieldPrefix}-gender label`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-gender input`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-address-state label`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-address-state input`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-education-0--course label`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-education-0--course input`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_AutoGenerateFormDisabled_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field when generate form button is pressed","suites":["JSON Form Widget AutoGenerate Disabled"],"updatePoint":{"line":91,"column":57,"index":4167},"line":91,"code":"  it(\"modifies field when generate form button is pressed\", () => {\n    const formDsl = JSON.parse(JSON.stringify(jsonFormDslWithSchemaAndWithoutSourceData));\n    cy.addDsl(formDsl);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.togglebarDisable(`.t--property-control-autogenerateform input`);\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      gender: \"male\",\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\",\n        state: \"Karnataka\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\",\n        course: \"CS\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.wait(500);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(\".t--property-control-\").contains(\"Generate form\").click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", \"John\");\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", 30);\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", \"10/12/1992\");\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", \"Koramangala\");\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", \"Bangalore\");\n    cy.get(`${fieldPrefix}-address-state label`).contains(\"State\");\n    cy.get(`${fieldPrefix}-address-state input`).should(\"have.value\", \"Karnataka\");\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", \"MIT\");\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", \"20/10/2014\");\n    cy.get(`${fieldPrefix}-education-0--course label`).contains(\"Course\");\n    cy.get(`${fieldPrefix}-education-0--course input`).should(\"have.value\", \"CS\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_AutoGenerateFormDisabled_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"generates fields with valid source data json","suites":["JSON Form Widget AutoGenerate Enabled"],"updatePoint":{"line":13,"column":50,"index":629},"line":13,"code":"  it(\"generates fields with valid source data json\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"John\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).then(input => {\n      cy.wrap(input).should(\"have.value\", 30);\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"10/12/1992\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Koramangala\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Bangalore\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"MIT\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"20/10/2014\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-education .t--jsonformfield-array-delete-btn .t--text`).should(\"have.text\", \"Delete\");\n    cy.get(`${fieldPrefix}-education .t--jsonformfield-array-add-btn .t--text`).should(\"have.text\", \"Add New\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_AutoGenerateFormEnabled_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field when source data changes","suites":["JSON Form Widget AutoGenerate Enabled"],"updatePoint":{"line":74,"column":45,"index":3474},"line":74,"code":"  it(\"modifies field when source data changes\", () => {\n    cy.addDsl(jsonFormDslWithSchemaAndWithoutSourceData);\n    const modifiedSourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: \"false\",\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\",\n        state: \"Karnataka\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\",\n        degree: \"Engg.\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(modifiedSourceData));\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", \"John\");\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", 30);\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", \"10/12/1992\");\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"not.exist\");\n    cy.get(`${fieldPrefix}-migrant input`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", \"Koramangala\");\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", \"Bangalore\");\n    cy.get(`${fieldPrefix}-address-state label`).contains(\"State\");\n    cy.get(`${fieldPrefix}-address-state input`).should(\"have.value\", \"Karnataka\");\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", \"MIT\");\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", \"20/10/2014\");\n    cy.get(`${fieldPrefix}-education-0--degree label`).contains(\"Degree\");\n    cy.get(`${fieldPrefix}-education-0--degree input`).should(\"have.value\", \"Engg.\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_AutoGenerateFormEnabled_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Drag and drop jsonform widget","suites":["JsonForm widget basis c usecases"],"updatePoint":{"line":6,"column":44,"index":400},"line":6,"code":"  it(\"Validate Drag and drop jsonform widget\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"jsonformwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(widgetsPage.jsonFormWidget).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"json form widget validate default data","suites":["JsonForm widget basis c usecases"],"updatePoint":{"line":15,"column":44,"index":697},"line":15,"code":"  it(\"json form widget validate default data\", function () {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(jsonform.jsformInput).should(\"have.value\", this.data.defaultSource.name);\n    cy.get(jsonform.jsformDOB).should(\"have.value\", this.data.defaultSource.date_of_birth);\n    cy.get(\".t--jsonformfield-employee_id input\").should(\"have.value\", this.data.defaultSource.employee_id);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"json form widget validate reset button function","suites":["JsonForm widget basis c usecases"],"updatePoint":{"line":21,"column":53,"index":1102},"line":21,"code":"  it(\"json form widget validate reset button function\", function () {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(jsonform.jsformInput).clear({\n      force: true\n    });\n    cy.get(jsonform.jsformInput).type(\"TestReset\");\n    cy.get(jsonform.jsformEmpID).clear({\n      force: true\n    });\n    cy.get(jsonform.jsformEmpID).type(\"375\");\n    cy.get(jsonform.jsformInput).should(\"not.have.value\", this.data.defaultSource.name);\n    cy.get(jsonform.jsformEmpID).should(\"not.have.value\", this.data.defaultSource.employee_id);\n    cy.get(\"button:contains('Reset')\").click({\n      force: true\n    });\n    cy.get(jsonform.jsformInput).should(\"have.value\", this.data.defaultSource.name);\n    cy.get(jsonform.jsformEmpID).should(\"have.value\", this.data.defaultSource.employee_id);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate copy/paste/delete widget ","suites":["JsonForm widget basis c usecases"],"updatePoint":{"line":39,"column":40,"index":1875},"line":39,"code":"  it(\"Validate copy/paste/delete widget \", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    //copy and paste\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.jsonFormWidget).should(\"have.length\", 2);\n    cy.deleteWidget(widgetsPage.jsonFormWidget);\n    cy.get(widgetsPage.jsonFormWidget).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Basic_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"uses the custom field when the accessor matches","suites":["JSON Form Widget Custom Field"],"updatePoint":{"line":5,"column":53,"index":357},"line":5,"code":"  it(\"uses the custom field when the accessor matches\", () => {\n    const formDsl = JSON.parse(JSON.stringify(jsonFormDslWithSchemaAndWithoutSourceData));\n    cy.addDsl(formDsl);\n    cy.openPropertyPane(\"jsonformwidget\");\n\n    // Add new custom field\n    cy.get(\".t--add-column-btn\").contains(\"Add new field\").click({\n      force: true\n    });\n    cy.openFieldConfiguration(\"customField1\");\n    cy.testJsontext(\"propertyname\", \"gender\");\n    cy.testJsontext(\"text\", \"Gender\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Select\");\n    cy.closePropertyPane();\n    const sourceData = {\n      name: \"John\",\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      gender: \"male\",\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\",\n        state: \"Karnataka\"\n      },\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\",\n        course: \"CS\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.backFromPropertyPanel();\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.wait(500);\n    cy.get(`${fieldPrefix}-name label`).contains(\"Name\");\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", \"John\");\n    cy.get(`${fieldPrefix}-age label`).contains(\"Age\");\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", 30);\n    cy.get(`${fieldPrefix}-dob label`).contains(\"Dob\");\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", \"10/12/1992\");\n    cy.get(`${fieldPrefix}-customField1 label`).contains(\"Gender\");\n    cy.get(`${fieldPrefix}-customField1 .bp3-popover-wrapper`).should(\"exist\");\n    cy.get(`${fieldPrefix}-migrant label`).contains(\"Migrant\");\n    cy.get(`${fieldPrefix}-migrant .t--switch-widget-inactive`).should(\"exist\");\n    cy.get(`${fieldPrefix}-address`).find(\"label\").should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-address-street label`).contains(\"Street\");\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", \"Koramangala\");\n    cy.get(`${fieldPrefix}-address-city label`).contains(\"City\");\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", \"Bangalore\");\n    cy.get(`${fieldPrefix}-address-state label`).contains(\"State\");\n    cy.get(`${fieldPrefix}-address-state input`).should(\"have.value\", \"Karnataka\");\n    cy.get(`${fieldPrefix}-education label`).should(\"have.length\", 4);\n    cy.get(`${fieldPrefix}-education-0--college label`).contains(\"College\");\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", \"MIT\");\n    cy.get(`${fieldPrefix}-education-0--year label`).contains(\"Year\");\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", \"20/10/2014\");\n    cy.get(`${fieldPrefix}-education-0--course label`).contains(\"Course\");\n    cy.get(`${fieldPrefix}-education-0--course input`).should(\"have.value\", \"CS\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_CustomField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. modifies field type text to number","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":8,"column":43,"index":352},"line":8,"code":"  it(\"1. modifies field type text to number\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(`${fieldPrefix}-name`).find(\"button\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Number Input\");\n    cy.get(`${fieldPrefix}-name`).find(\"button\").should(\"have.length\", 2);\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. modifies field type text to checkbox","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":18,"column":45,"index":827},"line":18,"code":"  it(\"2. modifies field type text to checkbox\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.get(`${fieldPrefix}-name`).find(\"input\").invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Checkbox\");\n    cy.get(`${fieldPrefix}-name`).find(\"input\").invoke(\"attr\", \"type\").should(\"contain\", \"checkbox\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. modifies field type text to date","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":29,"column":41,"index":1352},"line":29,"code":"  it(\"3. modifies field type text to date\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.get(`${fieldPrefix}-name`).find(\"input\").click({\n      force: true\n    });\n    cy.get(\".bp3-popover.bp3-dateinput-popover\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Datepicker\");\n    cy.get(`${fieldPrefix}-name`).find(\"input\").click({\n      force: true\n    });\n    cy.get(\".bp3-popover.bp3-dateinput-popover\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. modifies field type text to switch","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":46,"column":43,"index":1981},"line":46,"code":"  it(\"4. modifies field type text to switch\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.get(`${fieldPrefix}-name`).find(\".bp3-control.bp3-switch\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Switch\");\n    cy.get(`${fieldPrefix}-name`).find(\".bp3-control.bp3-switch\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. modifies field type text to Multi-Select","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":57,"column":49,"index":2482},"line":57,"code":"  it(\"5. modifies field type text to Multi-Select\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.get(`${fieldPrefix}-name`).find(\".rc-select-multiple\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Multiselect\");\n    cy.get(`${fieldPrefix}-name`).find(\".rc-select-multiple\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. modifies field type text to Radio-Group","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":68,"column":48,"index":2979},"line":68,"code":"  it(\"6. modifies field type text to Radio-Group\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.get(`${fieldPrefix}-name`).find(\".bp3-control.bp3-radio\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Radio Group\");\n    cy.get(`${fieldPrefix}-name`).find(\".bp3-control.bp3-radio\").should(\"exist\").should(\"have.length\", 2);\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. modifies field type text to Array","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":79,"column":42,"index":3501},"line":79,"code":"  it(\"7. modifies field type text to Array\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.get(`${fieldPrefix}-name`).find(\".t--jsonformfield-array-add-btn\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Array\");\n    cy.wait(2000);\n    /*\n    cy.get(`${fieldPrefix}-name`)\n      .find(\".t--jsonformfield-array-add-btn\")\n      .should(\"exist\");\n    */\n    cy.get('button span:contains(\"Add New\")').first().should(\"be.visible\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. modifies field type text to Object","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":96,"column":43,"index":4134},"line":96,"code":"  it(\"8. modifies field type text to Object\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Object\");\n    cy.get(`${fieldPrefix}-name`).find(\"input\").should(\"not.exist\");\n    cy.get(commonlocators.jsonFormAddNewCustomFieldBtn).click({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-name`).find(\"input\").should(\"exist\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. modifies field type Multi-Select to Array","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":110,"column":50,"index":4690},"line":110,"code":"  it(\"9. modifies field type Multi-Select to Array\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.get(`${fieldPrefix}-hobbies`).find(\".rc-select-multiple\").should(\"exist\");\n    cy.openFieldConfiguration(\"hobbies\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Array\");\n    cy.wait(2000); //for array field to reflect\n    cy.get(`${fieldPrefix}-hobbies`).then(hobbies => {\n      cy.wrap(hobbies).find(\".t--jsonformfield-array-add-btn\").should(\"exist\");\n      cy.wrap(hobbies).find(\"input\").should(\"have.length\", 2);\n      cy.wrap(hobbies).find(\".t--jsonformfield-array-delete-btn\").should(\"have.length\", 2);\n    });\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Text Input/);\n    //cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. modifies field type text to Select","suites":["JSON Form Widget Field Change"],"updatePoint":{"line":126,"column":44,"index":5446},"line":126,"code":"  it(\"10. modifies field type text to Select\", () => {\n    //cy.openPropertyPane(\"jsonformwidget\");\n\n    cy.get(`${fieldPrefix}-name label`).click({\n      force: true\n    });\n    cy.get(\".bp3-select-popover.select-popover-wrapper\").should(\"not.exist\");\n    cy.openFieldConfiguration(\"name\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Select/);\n    cy.get(`${fieldPrefix}-name label`).click({\n      force: true\n    });\n    cy.get(\".bp3-select-popover.select-popover-wrapper\").should(\"exist\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Radio Group Field - pre condition","suites":["Radio Group Field"],"updatePoint":{"line":19,"column":42,"index":766},"line":19,"code":"  it(\"1. Radio Group Field - pre condition\", () => {\n    const schema = {\n      answer: \"Y\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"answer\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Radio Group\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. shows alert on optionChange","suites":["Radio Group Field"],"updatePoint":{"line":30,"column":36,"index":1146},"line":30,"code":"  it(\"2. shows alert on optionChange\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"answer\");\n\n    // Enable JS mode for onSelectionChange\n    cy.get(toggleJSButton(\"onselectionchange\")).click({\n      force: true\n    });\n\n    // Add onSelectionChange action\n    cy.testJsontext(\"onselectionchange\", \"{{showAlert(formData.answer)}}\");\n    cy.get(`${fieldPrefix}-answer`).find(\"label\").contains(\"No\").click({\n      force: true\n    });\n\n    // Check for alert\n    cy.get(commonlocators.toastmsg).contains(\"N\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Multiselect Field - pre condition","suites":["Radio Group Field"],"updatePoint":{"line":48,"column":42,"index":1703},"line":48,"code":"  it(\"3. Multiselect Field - pre condition\", () => {\n    const schema = {\n      colors: [\"BLUE\"]\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Shows updated formData values in onOptionChange binding","suites":["Radio Group Field"],"updatePoint":{"line":57,"column":64,"index":1998},"line":57,"code":"  it(\"4. Shows updated formData values in onOptionChange binding\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"colors\");\n\n    // Enable JS mode for onOptionChange\n    cy.get(toggleJSButton(\"onoptionchange\")).click({\n      force: true\n    });\n\n    // Add onOptionChange action\n    cy.testJsontext(\"onoptionchange\", \"{{showAlert(formData.colors.join(', '))}}\");\n\n    // Click on multiselect field\n    cy.get(`${fieldPrefix}-colors`).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Red\");\n\n    // Check for alert\n    cy.get(commonlocators.toastmsg).contains(\"BLUE, RED\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Select Field - pre condition","suites":["Radio Group Field"],"updatePoint":{"line":80,"column":37,"index":2700},"line":80,"code":"  it(\"5. Select Field - pre condition\", () => {\n    const schema = {\n      color: \"BLUE\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"color\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Select/);\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. shows updated formData values in onOptionChange binding","suites":["Radio Group Field"],"updatePoint":{"line":91,"column":64,"index":3105},"line":91,"code":"  it(\"6. shows updated formData values in onOptionChange binding\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"color\");\n\n    // Enable JS mode for onOptionChange\n    cy.get(toggleJSButton(\"onoptionchange\")).click({\n      force: true\n    });\n\n    // Add onOptionChange action\n    cy.testJsontext(\"onoptionchange\", \"{{showAlert(formData.color)}}\");\n\n    // Click on select field\n    cy.get(`${fieldPrefix}-color`).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n\n    // Select \"Red\" option\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Red\").click({\n      force: true\n    });\n\n    // Check for alert\n    cy.get(commonlocators.toastmsg).contains(\"RED\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Input Field - pre condition","suites":["Radio Group Field"],"updatePoint":{"line":116,"column":36,"index":3818},"line":116,"code":"  it(\"7. Input Field - pre condition\", () => {\n    const schema = {\n      name: \"John\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Shows updated formData values in onOptionChange binding","suites":["Radio Group Field"],"updatePoint":{"line":125,"column":64,"index":4109},"line":125,"code":"  it(\"8. Shows updated formData values in onOptionChange binding\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"name\");\n\n    // Enable JS mode for onTextChanged\n    cy.get(toggleJSButton(\"ontextchanged\")).click({\n      force: true\n    });\n\n    // Add onTextChanged action\n    cy.testJsontext(\"ontextchanged\", \"{{showAlert(formData.name)}}\");\n\n    // Change input value\n    cy.get(`${fieldPrefix}-name`).click();\n    cy.get(`${fieldPrefix}-name`).type(\" Doe\");\n\n    // Check for alert\n    cy.get(commonlocators.toastmsg).contains(\"John Doe\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Checkbox Field - pre condition","suites":["Radio Group Field"],"updatePoint":{"line":144,"column":39,"index":4669},"line":144,"code":"  it(\"9. Checkbox Field - pre condition\", () => {\n    const schema = {\n      agree: true\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"agree\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Checkbox/);\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Shows updated formData values in onChange binding","suites":["Radio Group Field"],"updatePoint":{"line":155,"column":59,"index":5069},"line":155,"code":"  it(\"10. Shows updated formData values in onChange binding\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"agree\");\n\n    // Enable JS mode for onCheckChange\n    cy.get(toggleJSButton(\"oncheckchange\")).click({\n      force: true\n    });\n\n    // Add onCheckChange action\n    cy.testJsontext(\"oncheckchange\", \"{{showAlert(formData.agree.toString())}}\");\n\n    // Click on select field\n    cy.get(`${fieldPrefix}-agree input`).click({\n      force: true\n    });\n\n    // Check for alert\n    cy.get(commonlocators.toastmsg).contains(\"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Switch Field - pre condition","suites":["Radio Group Field"],"updatePoint":{"line":175,"column":38,"index":5625},"line":175,"code":"  it(\"11. Switch Field - pre condition\", () => {\n    const schema = {\n      agree: true\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Shows updated formData values in onChange binding","suites":["Radio Group Field"],"updatePoint":{"line":184,"column":59,"index":5910},"line":184,"code":"  it(\"12. Shows updated formData values in onChange binding\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"agree\");\n\n    // Enable JS mode for onChange\n    cy.get(toggleJSButton(\"onchange\")).click({\n      force: true\n    });\n\n    // Add onChange action\n    cy.testJsontext(\"onchange\", \"{{showAlert(formData.agree.toString())}}\");\n\n    // Click on select field\n    cy.get(`${fieldPrefix}-agree input`).click({\n      force: true\n    });\n\n    // Check for alert\n    cy.get(commonlocators.toastmsg).contains(\"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Date Field - pre condition","suites":["Radio Group Field"],"updatePoint":{"line":204,"column":36,"index":6444},"line":204,"code":"  it(\"13. Date Field - pre condition\", () => {\n    const schema = {\n      dob: \"20/12/1992\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. shows updated formData values in onDateSelected binding","suites":["Radio Group Field"],"updatePoint":{"line":213,"column":65,"index":6741},"line":213,"code":"  it(\"14. shows updated formData values in onDateSelected binding\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"dob\");\n\n    // Enable JS mode for onDateSelected\n    cy.get(toggleJSButton(\"ondateselected\")).click({\n      force: true\n    });\n\n    // Add onDateSelected action\n    cy.testJsontext(\"ondateselected\", \"{{showAlert(formData.dob)}}\");\n\n    // Click on select field\n    cy.get(`${fieldPrefix}-dob .bp3-input`).click();\n    cy.get(`${fieldPrefix}-dob .bp3-input`).clear({\n      force: true\n    }).type(\"10/08/2010\");\n\n    // Check for alert\n    cy.contains(\"10/08/2010\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldEvents_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. has valid default text","suites":["Text Field Property Control"],"updatePoint":{"line":21,"column":31,"index":751},"line":21,"code":"  it(\"1. has valid default text\", () => {\n    cy.openFieldConfiguration(\"name\");\n    cy.get(\".t--property-control-defaultvalue\").contains(\"{{sourceData.name}}\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. updated field with change in default text","suites":["Text Field Property Control"],"updatePoint":{"line":25,"column":50,"index":938},"line":25,"code":"  it(\"2. updated field with change in default text\", () => {\n    const defaultValue = \"New default text\";\n    cy.testJsontext(\"defaultvalue\", \"New default text\").wait(200);\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", defaultValue);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. throws max character error when exceeds maxChar limit for default text","suites":["Text Field Property Control"],"updatePoint":{"line":30,"column":79,"index":1222},"line":30,"code":"  it(\"3. throws max character error when exceeds maxChar limit for default text\", () => {\n    cy.testJsontext(\"maxchars\", 5);\n    cy.get(`${fieldPrefix}-name input`).click();\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Default text length must be less than or equal to 5 characters\");\n    });\n    cy.testJsontext(\"maxchars\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. throws max character error when exceeds maxChar limit for input text","suites":["Text Field Property Control"],"updatePoint":{"line":38,"column":77,"index":1588},"line":38,"code":"  it(\"4. throws max character error when exceeds maxChar limit for input text\", () => {\n    cy.testJsontext(\"defaultvalue\", \"\").wait(200);\n    cy.get(`${fieldPrefix}-name input`).clear().type(\"abcdefghi\");\n    cy.testJsontext(\"maxchars\", 5).wait(200);\n    cy.get(`${fieldPrefix}-name input`).click();\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Input text length must be less than 5 characters\");\n    });\n    cy.testJsontext(\"maxchars\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. sets placeholder","suites":["Text Field Property Control"],"updatePoint":{"line":48,"column":25,"index":2016},"line":48,"code":"  it(\"5. sets placeholder\", () => {\n    const placeholderText = \"First name\";\n    cy.testJsontext(\"placeholder\", placeholderText);\n    cy.get(`${fieldPrefix}-name input`).invoke(\"attr\", \"placeholder\").should(\"contain\", placeholderText);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. sets valid property with custom error message","suites":["Text Field Property Control"],"updatePoint":{"line":53,"column":54,"index":2288},"line":53,"code":"  it(\"6. sets valid property with custom error message\", () => {\n    cy.testJsontext(\"valid\", \"false\");\n    cy.get(`${fieldPrefix}-name input`).clear().type(\"abcd\");\n    cy.get(\".bp3-popover-content\").contains(\"Invalid input\");\n    cy.testJsontext(\"errormessage\", \"Custom error message\");\n    cy.get(`${fieldPrefix}-name input`).click({\n      force: true\n    });\n    cy.get(\".bp3-popover-content\").contains(\"Custom error message\");\n\n    // Reset the error message\n    cy.testJsontext(\"errormessage\", \"\");\n    // Reset valid\n    cy.testJsontext(\"valid\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. hides field when visible switched off","suites":["Text Field Property Control"],"updatePoint":{"line":68,"column":46,"index":2844},"line":68,"code":"  it(\"7. hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-name`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-name`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. disables field when disabled switched on and when autofill is disabled we should see the autofill attribute in the input field","suites":["Text Field Property Control"],"updatePoint":{"line":75,"column":135,"index":3239},"line":75,"code":"  it(\"8. disables field when disabled switched on and when autofill is disabled we should see the autofill attribute in the input field\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-name input`).each($el => {\n      cy.wrap($el).should(\"have.attr\", \"disabled\");\n    });\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n    validateAutocompleteAttributeInJSONForm();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. throws error when REGEX does not match the input value","suites":["Text Field Property Control"],"updatePoint":{"line":83,"column":63,"index":3601},"line":83,"code":"  it(\"9. throws error when REGEX does not match the input value\", () => {\n    cy.testJsontext(\"regex\", \"^\\\\d+$\");\n    cy.get(`${fieldPrefix}-name input`).clear().type(\"abcd\");\n    cy.get(\".bp3-popover-content\").contains(\"Invalid input\");\n    cy.get(`${fieldPrefix}-name input`).clear().type(\"1234\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Checkbox Field Property Control - pre condition","suites":["Text Field Property Control"],"updatePoint":{"line":90,"column":57,"index":3957},"line":90,"code":"  it(\"10. Checkbox Field Property Control - pre condition\", () => {\n    const schema = {\n      check: false\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"check\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Checkbox\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. has default property","suites":["Text Field Property Control"],"updatePoint":{"line":100,"column":30,"index":4300},"line":100,"code":"  it(\"11. has default property\", () => {\n    cy.get(\".t--property-control-defaultstate\").contains(\"{{sourceData.check}}\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. should update field checked state when default selected changed","suites":["Text Field Property Control"],"updatePoint":{"line":103,"column":73,"index":4472},"line":103,"code":"  it(\"12. should update field checked state when default selected changed\", () => {\n    cy.testJsontext(\"defaultstate\", \"{{true}}\");\n    cy.get(`${fieldPrefix}-check input`).should(\"be.checked\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. hides field when visible switched off","suites":["Text Field Property Control"],"updatePoint":{"line":107,"column":47,"index":4648},"line":107,"code":"  it(\"13. hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-check`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-check`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. disables field when disabled switched on","suites":["Text Field Property Control"],"updatePoint":{"line":114,"column":50,"index":4960},"line":114,"code":"  it(\"14. disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-check input`).each($el => {\n      cy.wrap($el).should(\"have.attr\", \"disabled\");\n    });\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. Switch Field Property Control - pre condition","suites":["Text Field Property Control"],"updatePoint":{"line":121,"column":55,"index":5268},"line":121,"code":"  it(\"15. Switch Field Property Control - pre condition\", () => {\n    const schema = {\n      switch: true\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"switch\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"16. has default property","suites":["Text Field Property Control"],"updatePoint":{"line":130,"column":30,"index":5538},"line":130,"code":"  it(\"16. has default property\", () => {\n    cy.get(\".t--property-control-defaultselected\").contains(\"{{sourceData.switch}}\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"17. should update field checked state when default selected changed","suites":["Text Field Property Control"],"updatePoint":{"line":133,"column":73,"index":5714},"line":133,"code":"  it(\"17. should update field checked state when default selected changed\", () => {\n    cy.testJsontext(\"defaultselected\", \"{{false}}\");\n    cy.get(`${fieldPrefix}-switch label.bp3-control.bp3-switch`).should(\"have.class\", \"t--switch-widget-inactive\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"18. hides field when visible switched off","suites":["Text Field Property Control"],"updatePoint":{"line":137,"column":47,"index":5947},"line":137,"code":"  it(\"18. hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-switch`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-switch`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"19. disables field when disabled switched on","suites":["Text Field Property Control"],"updatePoint":{"line":144,"column":50,"index":6261},"line":144,"code":"  it(\"19. disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-switch input`).each($el => {\n      cy.wrap($el).should(\"have.attr\", \"disabled\");\n    });\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"20. Select Field Property Control - pre condition","suites":["Text Field Property Control"],"updatePoint":{"line":151,"column":55,"index":6570},"line":151,"code":"  it(\"20. Select Field Property Control - pre condition\", () => {\n    const schema = {\n      state: \"Karnataka\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"state\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Select/);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"21. has valid default value","suites":["Text Field Property Control"],"updatePoint":{"line":161,"column":33,"index":6921},"line":161,"code":"  it(\"21. has valid default value\", () => {\n    cy.get(\".t--property-control-defaultselectedvalue\").contains(\"{{sourceData.state}}\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"22. makes select filterable","suites":["Text Field Property Control"],"updatePoint":{"line":164,"column":33,"index":7061},"line":164,"code":"  it(\"22. makes select filterable\", () => {\n    // click select field and filter input should not exist\n    cy.get(`${fieldPrefix}-state .bp3-control-group`).click({\n      force: true\n    });\n    cy.get(`.bp3-select-popover .bp3-input-group`).should(\"not.exist\");\n\n    // toggle filterable -> true in property pane\n    cy.togglebar(`.t--property-control-allowsearching input`);\n\n    // click select field and filter input should exist\n    cy.get(`${fieldPrefix}-state .bp3-control-group`).click({\n      force: true\n    });\n    cy.get(`.bp3-select-popover .bp3-input-group`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"23. hides field when visible switched off","suites":["Text Field Property Control"],"updatePoint":{"line":180,"column":47,"index":7672},"line":180,"code":"  it(\"23. hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-state`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-state`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"24. disables field when disabled switched on","suites":["Text Field Property Control"],"updatePoint":{"line":187,"column":50,"index":7984},"line":187,"code":"  it(\"24. disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-state button.bp3-button`).should(\"have.class\", \"bp3-disabled\");\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"25. Multi Field Property Control - pre condition","suites":["Text Field Property Control"],"updatePoint":{"line":192,"column":54,"index":8267},"line":192,"code":"  it(\"25. Multi Field Property Control - pre condition\", () => {\n    const schema = {\n      hobbies: []\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"hobbies\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"26. has valid default value","suites":["Text Field Property Control"],"updatePoint":{"line":201,"column":33,"index":8540},"line":201,"code":"  it(\"26. has valid default value\", () => {\n    cy.get(\".t--property-control-defaultselectedvalues\").contains(\"{{sourceData.hobbies}}\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"27. adds placeholder text","suites":["Text Field Property Control"],"updatePoint":{"line":205,"column":31,"index":8709},"line":205,"code":"  it(\"27. adds placeholder text\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"hobbies\");\n    cy.testJsontext(\"placeholder\", \"Select placeholder\");\n    cy.wait(2000);\n    cy.get(`.rc-select-selection-placeholder`).contains(\"Select placeholder\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"28. hides field when visible switched off","suites":["Text Field Property Control"],"updatePoint":{"line":212,"column":47,"index":9014},"line":212,"code":"  it(\"28. hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-hobbies`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-hobbies`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"29. disables field when disabled switched on","suites":["Text Field Property Control"],"updatePoint":{"line":219,"column":50,"index":9330},"line":219,"code":"  it(\"29. disables field when disabled switched on\", () => {\n    cy.togglebar(`.t--property-control-disabled input`);\n    cy.get(`${fieldPrefix}-hobbies .rc-select-multiple`).should(\"have.class\", \"rc-select-disabled\");\n    cy.togglebarDisable(`.t--property-control-disabled input`);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"30. Invalid options should not crash the widget","suites":["Text Field Property Control"],"updatePoint":{"line":224,"column":53,"index":9622},"line":224,"code":"  it(\"30. Invalid options should not crash the widget\", () => {\n    // clear Options\n    cy.testJsonTextClearMultiline(\"options\");\n    // enter invalid options\n    cy.testJsontext(\"options\", '{{[{ label: \"asd\", value: \"zxc\"}, null ]}}');\n\n    // wait for eval to update\n    cy.wait(2000);\n    // Check if the multiselect field exist\n    cy.get(`${fieldPrefix}-hobbies`).should(\"exist\");\n\n    // clear Default Selected Values\n    cy.testJsonTextClearMultiline(\"defaultselectedvalues\");\n    // enter default value\n    cy.testJsontext(\"defaultselectedvalues\", '[\"zxc\"]');\n\n    // wait for eval to update\n    cy.wait(2000);\n    // Check if the multiselect field exist\n    cy.get(`${fieldPrefix}-hobbies`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"31. Radio group Field Property Control - pre condition","suites":["Text Field Property Control"],"updatePoint":{"line":245,"column":60,"index":10353},"line":245,"code":"  it(\"31. Radio group Field Property Control - pre condition\", () => {\n    const sourceData = {\n      radio: \"Y\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.openFieldConfiguration(\"radio\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, \"Radio Group\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"32. has valid default value","suites":["Text Field Property Control"],"updatePoint":{"line":255,"column":33,"index":10708},"line":255,"code":"  it(\"32. has valid default value\", () => {\n    cy.get(\".t--property-control-defaultselectedvalue\").contains(\"{{sourceData.radio}}\");\n    cy.get(`${fieldPrefix}-radio input`).should(\"have.value\", \"Y\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"33. hides field when visible switched off","suites":["Text Field Property Control"],"updatePoint":{"line":259,"column":47,"index":10930},"line":259,"code":"  it(\"33. hides field when visible switched off\", () => {\n    cy.togglebarDisable(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-radio`).should(\"not.exist\");\n    cy.wait(500);\n    cy.togglebar(`.t--property-control-visible input`);\n    cy.get(`${fieldPrefix}-radio`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FieldProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. JSONForm Select field - filterText update action trigger - pre condition","suites":["JSONForm Select field - filterText update action trigger "],"updatePoint":{"line":18,"column":81,"index":802},"line":18,"code":"  it(\"1. JSONForm Select field - filterText update action trigger - pre condition\", () => {\n    const schema = {\n      color: \"GREEN\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"color\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Select$/);\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FilterText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. shows alert on filter text change","suites":["JSONForm Select field - filterText update action trigger "],"updatePoint":{"line":29,"column":42,"index":1187},"line":29,"code":"  it(\"2. shows alert on filter text change\", () => {\n    const filterText = \"Test string\";\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"color\");\n\n    // Enable filterable\n    cy.togglebar(`.t--property-control-allowsearching input`);\n    // Enable server side filtering\n    cy.togglebar(`.t--property-control-serversidefiltering input`);\n\n    // Enable JS mode for onFilterUpdate\n    cy.get(onFilterUpdateJSBtn).click({\n      force: true\n    });\n\n    // Add onFilterUpdate action\n    cy.testJsontext(\"onfilterupdate\", \"{{showAlert('Filter update:' + fieldState?.color?.filterText)}}\");\n\n    // click select field and filter input should exist\n    cy.get(`${fieldPrefix}-color .bp3-control-group`).click({\n      force: true\n    });\n    cy.get(`.bp3-select-popover .bp3-input-group`).should(\"exist\");\n\n    // Type \"Test string\" in the filterable input.\n    cy.get(`.bp3-select-popover .bp3-input-group input`).type(filterText);\n    cy.get(commonlocators.toastmsg).contains(`Filter update:${filterText}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FilterText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. JSONForm Multiselect field - filterText update action trigger - pre condition","suites":["JSONForm Select field - filterText update action trigger "],"updatePoint":{"line":57,"column":86,"index":2269},"line":57,"code":"  it(\"3. JSONForm Multiselect field - filterText update action trigger - pre condition\", () => {\n    const schema = {\n      colors: [\"GREEN\", \"BLUE\"]\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FilterText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. shows alert on filter text change","suites":["JSONForm Select field - filterText update action trigger "],"updatePoint":{"line":66,"column":42,"index":2551},"line":66,"code":"  it(\"4. shows alert on filter text change\", () => {\n    const filterText = \"Test string\";\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"colors\");\n\n    // Enable filterable\n    cy.togglebar(`.t--property-control-allowsearching input`);\n    // Enable server side filtering\n    cy.togglebar(`.t--property-control-serversidefiltering input`);\n\n    // Enable JS mode for onFilterUpdate\n    cy.get(onFilterUpdateJSBtn).click({\n      force: true\n    });\n\n    // Add onFilterUpdate action\n    cy.testJsontext(\"onfilterupdate\", \"{{showAlert('Filter update:' + fieldState?.colors?.filterText)}}\");\n\n    // Open multiselect field and filter input should exist\n    cy.get(`${fieldPrefix}-colors`).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.get(\".multi-select-dropdown input.bp3-input\").should(\"exist\");\n\n    // Type \"Test string\" in the filterable input.\n    cy.get(\".multi-select-dropdown input.bp3-input\").type(filterText);\n    cy.get(commonlocators.toastmsg).contains(`Filter update:${filterText}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FilterText_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. sticks to the bottom when fixed footer is true and content is less","suites":["JSONForm Footer spec"],"updatePoint":{"line":12,"column":75,"index":548},"line":12,"code":"  it(\"1. sticks to the bottom when fixed footer is true and content is less\", () => {\n    cy.addDsl(dslWithoutSchema);\n    // add small source data\n    const sourceData = {\n      name: \"John\"\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n\n    // check if fixed footer enabled\n    cy.get(\".t--property-control-fixedfooter\").find(\".ads-v2-switch input\").should(\"be.checked\");\n\n    // Check if there is a gap between body and footer\n    cy.get(\".t--jsonform-body\").then($body => {\n      cy.get(\".t--jsonform-footer\").then($footer => {\n        const gap = $footer.prop(\"offsetTop\") - $body.prop(\"scrollHeight\");\n        expect(gap).greaterThan(0);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Footer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. sticks to the content when fixed footer is off","suites":["JSONForm Footer spec"],"updatePoint":{"line":32,"column":55,"index":1263},"line":32,"code":"  it(\"2. sticks to the content when fixed footer is off\", () => {\n    // Disable fixed footer\n    cy.togglebarDisable(\".t--property-control-fixedfooter input\");\n\n    // Check if there is a gap between body and footer\n    cy.get(\".t--jsonform-body\").then($body => {\n      cy.get(\".t--jsonform-footer\").then($footer => {\n        const gap = $footer.prop(\"offsetTop\") - $body.prop(\"scrollHeight\");\n        expect(gap).equals(1);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Footer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. floats to the bottom when fixed footer is true and content overflows","suites":["JSONForm Footer spec"],"updatePoint":{"line":44,"column":77,"index":1735},"line":44,"code":"  it(\"3. floats to the bottom when fixed footer is true and content overflows\", () => {\n    cy.addDsl(dslWithSchema);\n    cy.addDsl(dslWithSchema);\n    cy.wait(3000); //for dsl to settle\n\n    cy.openPropertyPane(\"jsonformwidget\");\n    // check if fixed footer enabled\n    cy.get(\".t--property-control-fixedfooter\").find(\".ads-v2-switch input\").should(\"be.checked\");\n\n    // Check if footer is floating\n    cy.get(\".t--draggable-jsonformwidget\").find(\"form\").then($form => {\n      cy.get(\".t--jsonform-footer\").then($footer => {\n        const gap = $footer.prop(\"offsetTop\") + $footer.prop(\"offsetHeight\") - $form.prop(\"offsetHeight\");\n        expect(gap).equals(1);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Footer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. floats to the bottom when fixed footer is false and content overflows","suites":["JSONForm Footer spec"],"updatePoint":{"line":61,"column":78,"index":2426},"line":61,"code":"  it(\"4. floats to the bottom when fixed footer is false and content overflows\", () => {\n    // Disable fixed footer\n    cy.togglebarDisable(\".t--property-control-fixedfooter input\");\n\n    // Check if footer is floating\n    cy.get(\".t--draggable-jsonformwidget\").find(\"form\").then($form => {\n      cy.get(\".t--jsonform-footer\").then($footer => {\n        const gap = $footer.prop(\"offsetTop\") + $footer.prop(\"offsetHeight\") - $form.prop(\"scrollHeight\");\n        expect(gap).equals(1);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Footer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. updates formData when field value changes","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":16,"column":50,"index":697},"line":16,"code":"  it(\"1. updates formData when field value changes\", () => {\n    const expectedInitialFormData = {\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\", \"swimming\"],\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\"\n      }],\n      name: \"John\"\n    };\n    const updatedFormData = {\n      age: 40,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Indranagar\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\"],\n      education: [{\n        college: \"IIT\",\n        year: \"20/10/2014\"\n      }],\n      name: \"Test\"\n    };\n    // Bind formData to Text1 widget text property\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.formData)}}\");\n    cy.closePropertyPane();\n\n    // Validate initial form data\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", expectedInitialFormData);\n    });\n\n    // Modify form field values\n    cy.get(`${fieldPrefix}-name input`).clear({\n      force: true\n    }).type(updatedFormData.name);\n    cy.get(`${fieldPrefix}-age input`).clear({\n      force: true\n    }).clear({\n      force: true\n    }).type(updatedFormData.age);\n    cy.get(`${fieldPrefix}-address-street input`).clear({\n      force: true\n    }).type(updatedFormData.address.street);\n    cy.get(`${fieldPrefix}-hobbies .rc-select-selection-item`).contains(\"swimming\").siblings(\".rc-select-selection-item-remove\").click({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-education-0--college input`).clear({\n      force: true\n    }).type(updatedFormData.education[0].college).wait(200);\n    cy.wait(1000);\n    // Check if modified text updates formData\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", updatedFormData);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. updates fieldState","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":83,"column":27,"index":2747},"line":83,"code":"  it(\"2. updates fieldState\", () => {\n    const expectedInitialFieldState = {\n      name: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      age: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      dob: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      migrant: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true,\n        isValid: true\n      },\n      address: {\n        street: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        },\n        city: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      },\n      education: [{\n        college: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        },\n        year: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      }],\n      hobbies: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true,\n        filterText: \"\"\n      }\n    };\n    const expectedUpdatedFieldState = {\n      name: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: true,\n        isValid: false\n      },\n      age: {\n        isDisabled: true,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      dob: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      migrant: {\n        isDisabled: false,\n        isVisible: false,\n        isRequired: false,\n        isValid: true\n      },\n      address: {\n        street: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: true,\n          isValid: false\n        },\n        city: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      },\n      education: [{\n        college: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: true,\n          isValid: false\n        },\n        year: {\n          isDisabled: false,\n          isVisible: false,\n          isRequired: false,\n          isValid: true\n        }\n      }],\n      hobbies: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true,\n        filterText: \"\"\n      }\n    };\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").first().clear({\n      force: true\n    });\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.fieldState)}}\");\n    cy.closePropertyPane();\n    cy.wait(3000);\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", expectedInitialFieldState);\n    });\n    cy.openPropertyPane(\"jsonformwidget\");\n\n    // name.required -> true\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n\n    // age.disabled -> true\n    cy.openFieldConfiguration(\"age\");\n    cy.togglebar(`${propertyControlPrefix}-disabled input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n\n    // migrant.visible -> false\n    cy.openFieldConfiguration(\"migrant\", false);\n    cy.togglebarDisable(`${propertyControlPrefix}-visible input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n\n    // address.street.required -> true\n    cy.openFieldConfiguration(\"address\", false);\n    cy.openFieldConfiguration(\"street\", false);\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n\n    // education.college.required -> true\n    // education.year.visible -> false\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\", false);\n    cy.openFieldConfiguration(\"college\", false);\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    cy.openFieldConfiguration(\"year\", false);\n    cy.togglebarDisable(`${propertyControlPrefix}-visible input`);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-name input`).clear({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-address-street input`).clear({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-address-city input`).clear({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-education-0--college input`).clear({\n      force: true\n    }).wait(500);\n    cy.wait(3000);\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formState = JSON.parse($el.text());\n      cy.wrap(formState).should(\"deep.equal\", expectedUpdatedFieldState);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. change field accessor should reflect in fieldState","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":285,"column":59,"index":7983},"line":285,"code":"  it(\"3. change field accessor should reflect in fieldState\", () => {\n    const expectedFieldStateChange = {\n      firstName: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      age: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      dob: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      migrant: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true\n      },\n      address: {\n        street: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        },\n        city: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      },\n      education: [{\n        graduatingCollege: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        },\n        year: {\n          isDisabled: false,\n          isVisible: true,\n          isRequired: false,\n          isValid: true\n        }\n      }],\n      hobbies: {\n        isDisabled: false,\n        isVisible: true,\n        isRequired: false,\n        isValid: true,\n        filterText: \"\"\n      }\n    };\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").first().clear({\n      force: true\n    });\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.fieldState)}}\");\n    cy.openPropertyPane(\"jsonformwidget\");\n\n    // Change accessor name -> firstName\n    cy.openFieldConfiguration(\"name\");\n    cy.testJsontext(\"propertyname\", \"firstName\");\n    cy.wait(1000);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n\n    // Change accessor education -> college to education -> graduatingCollege\n    cy.openFieldConfiguration(\"education\", false);\n    cy.openFieldConfiguration(\"__array_item__\", false);\n    cy.openFieldConfiguration(\"college\", false);\n    cy.testJsontext(\"propertyname\", \"graduatingCollege\");\n    cy.wait(5000);\n\n    // Verify if formState reflects accessor change\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formState = JSON.parse($el.text());\n      cy.wrap(formState).should(\"deep.equal\", expectedFieldStateChange);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. change field accessor should reflect in formData","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":375,"column":57,"index":10401},"line":375,"code":"  it(\"4. change field accessor should reflect in formData\", () => {\n    const expectedFormDataChange = {\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\", \"swimming\"],\n      education: [{\n        graduatingCollege: \"MIT\",\n        year: \"20/10/2014\"\n      }],\n      firstName: \"John\"\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n\n    // Change accessor name -> firstName\n    cy.openFieldConfiguration(\"name\");\n    cy.testJsontext(\"propertyname\", \"firstName\");\n    cy.wait(1000);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n\n    // Change accessor education -> college to education -> graduatingCollege\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\", false);\n    cy.openFieldConfiguration(\"college\", false);\n    cy.testJsontext(\"propertyname\", \"graduatingCollege\");\n    cy.wait(5000);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.formData)}}\");\n    cy.wait(1000);\n\n    // Verify if formData reflects accessor change\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", expectedFormDataChange);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should have all the fields under field configuration","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":22,"column":61,"index":1063},"line":22,"code":"  it(\"1. should have all the fields under field configuration\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    const fieldNames = [\"name\", \"age\", \"dob\", \"migrant\", \"address\", \"education\", \"hobbies\"];\n    fieldNames.forEach(fieldName => {\n      cy.get(`[data-rbd-draggable-id='${fieldName}']`).should(\"exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Field Configuration - adds new custom field","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":29,"column":52,"index":1386},"line":29,"code":"  it(\"2. Field Configuration - adds new custom field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n\n    // Add new field\n    cy.get(commonlocators.jsonFormAddNewCustomFieldBtn).click({\n      force: true\n    });\n\n    // Check for the presence of newly added custom field\n    cy.get(`[data-rbd-draggable-id='customField1']`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Disabled Invalid Forms - disables the submit button when form has invalid field(s)","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":40,"column":91,"index":1778},"line":40,"code":"  it(\"3. Disabled Invalid Forms - disables the submit button when form has invalid field(s)\", () => {\n    cy.get(\"button\").contains(\"Submit\").parent(\"button\").should(\"not.have.attr\", \"disabled\");\n\n    // make name field required\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.get(backBtn).click({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-name input`).clear().wait(300);\n    cy.get(\"button\").contains(\"Submit\").parent(\"button\").should(\"have.attr\", \"disabled\");\n    cy.get(`${fieldPrefix}-name input`).type(\"JOHN\").wait(300);\n    cy.get(\"button\").contains(\"Submit\").parent(\"button\").should(\"not.have.attr\", \"disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Should set isValid to false when form is invalid","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":54,"column":57,"index":2440},"line":54,"code":"  it(\"4. Should set isValid to false when form is invalid\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSONForm1.isValid}}\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).contains(\"true\");\n    cy.get(`${fieldPrefix}-name input`).clear().wait(300);\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).contains(\"false\");\n    cy.get(`${fieldPrefix}-name input`).type(\"JOHN\").wait(300);\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).contains(\"true\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. show show icon select when a collapsed section is opened","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":63,"column":65,"index":2952},"line":63,"code":"  it(\"5. show show icon select when a collapsed section is opened\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.moveToStyleTab();\n    // Check Submit Button Styles hidden\n    //cy.get(submitButtonStylesSection).should(\"not.be.visible\");\n    // .parent()\n    // .should(\"have.attr\", \"aria-hidden\", \"true\");\n    /*\n    // Open Submit Button Section\n    cy.get(\".t--property-pane-section-collapse-submitbuttonstyles\").click({\n      force: true,\n    });\n    */\n    // Click Icon property\n    cy.get(submitButtonStylesSection).contains(\"(none)\").parent().click({\n      force: true\n    });\n\n    // Check if icon selector opened\n    cy.get(\".bp3-select-popover .virtuoso-grid-item\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Should set isValid to false on first load when form is invalid","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":84,"column":71,"index":3676},"line":84,"code":"  it(\"6. Should set isValid to false on first load when form is invalid\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const schema = {\n      name: \"\"\n    };\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSONForm1.isValid}}\");\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n\n    // make name field required\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.PublishtheApp();\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"false\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Should set isValid to false on reset when form is invalid","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":103,"column":66,"index":4326},"line":103,"code":"  it(\"7. Should set isValid to false on reset when form is invalid\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const schema = {\n      name: \"\"\n    };\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSONForm1.isValid}}\");\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n\n    // make name field required\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebar(`${propertyControlPrefix}-required input`);\n    cy.PublishtheApp();\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"false\");\n\n    // Click reset button\n    cy.get(\"button\").contains(\"Reset\").click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"false\");\n\n    // Type JOHN in name field\n    cy.get(`${fieldPrefix}-name input`).type(\"JOHN\");\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"true\");\n\n    // Click reset button\n    cy.get(\"button\").contains(\"Reset\").click({\n      force: true\n    });\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(\"false\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Form value should contain hidden fields value if useSourceData is set to true","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":138,"column":86,"index":5485},"line":138,"code":"  it(\"8. Form value should contain hidden fields value if useSourceData is set to true\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const schema = {\n      name: \"\",\n      age: 10\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.togglebar(`${propertyControlPrefix}-hiddenfieldsindata input`);\n    cy.openFieldConfiguration(\"age\");\n    cy.togglebarDisable(`${propertyControlPrefix}-visible input`);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.formData)}}\");\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(JSON.stringify(schema));\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Form value should not contain hidden fields value if useSourceData is set to false","suites":["JSON Form Widget Form Bindings"],"updatePoint":{"line":153,"column":91,"index":6155},"line":153,"code":"  it(\"9. Form value should not contain hidden fields value if useSourceData is set to false\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const name = \"JOHN\";\n    const schema = {\n      name,\n      age: 10\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.togglebarDisable(`${propertyControlPrefix}-hiddenfieldsindata input`);\n    cy.openFieldConfiguration(\"age\");\n    cy.togglebarDisable(`${propertyControlPrefix}-visible input`);\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.formData)}}\");\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").contains(JSON.stringify({\n      name\n    }));\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_FormProperties_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. can hide Array Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":72,"column":29,"index":2714},"line":72,"code":"  it(\"1. can hide Array Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    hideAndVerifyProperties(\"education\", [{\n      college: \"MIT\",\n      year: \"20/10/2014\"\n    }]);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. can hide Array Field's inner fields","suites":["JSON Form Hidden fields"],"updatePoint":{"line":80,"column":44,"index":2962},"line":80,"code":"  it(\"2. can hide Array Field's inner fields\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"education\");\n    cy.openFieldConfiguration(\"__array_item__\", false);\n    cy.openFieldConfiguration(\"college\", false);\n    hideAndVerifyProperties(\"education-0--college\", \"MIT\", formData => {\n      return formData.education[0].college;\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. can hide Checkbox Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":89,"column":32,"index":3328},"line":89,"code":"  it(\"3. can hide Checkbox Field\", () => {\n    // Add new custom field\n    addCustomField(\"Checkbox\");\n    hideAndVerifyProperties(\"customField1\", true);\n    // Remove custom field\n    removeCustomField();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. can hide Currency Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":96,"column":32,"index":3540},"line":96,"code":"  it(\"4. can hide Currency Field\", () => {\n    const defaultValue = 1000;\n    // Add new custom field\n    addCustomField(\"Currency Input\");\n    cy.testJsontext(\"defaultvalue\", defaultValue);\n    hideAndVerifyProperties(\"customField1\", defaultValue);\n    removeCustomField();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. can hide Date Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":104,"column":28,"index":3817},"line":104,"code":"  it(\"5. can hide Date Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"dob\");\n    hideAndVerifyProperties(\"dob\", \"10/12/1992\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. can hide Input Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":109,"column":29,"index":3994},"line":109,"code":"  it(\"6. can hide Input Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"name\");\n    hideAndVerifyProperties(\"name\", \"John\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. can hide Multiselect Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":114,"column":35,"index":4173},"line":114,"code":"  it(\"7. can hide Multiselect Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"hobbies\");\n    hideAndVerifyProperties(\"hobbies\", [\"travelling\", \"swimming\"]);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. can hide Object Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":119,"column":30,"index":4373},"line":119,"code":"  it(\"8. can hide Object Field\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.openFieldConfiguration(\"address\");\n    hideAndVerifyProperties(\"address\", {\n      street: \"Koramangala\",\n      city: \"Bangalore\"\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. can hide Phone Number Input Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":127,"column":42,"index":4619},"line":127,"code":"  it(\"9. can hide Phone Number Input Field\", () => {\n    const defaultValue = \"1000\";\n    // Add new custom field\n    addCustomField(\"Phone Number Input\");\n    cy.testJsontext(\"defaultvalue\", defaultValue);\n    hideAndVerifyProperties(\"customField1\", defaultValue);\n    removeCustomField();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. can hide Radio Group Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":135,"column":36,"index":4910},"line":135,"code":"  it(\"10. can hide Radio Group Field\", () => {\n    const defaultValue = \"Y\";\n    // Add new custom field\n    addCustomField(\"Phone Number Input\");\n    cy.testJsontext(\"defaultvalue\", defaultValue);\n    hideAndVerifyProperties(\"customField1\", defaultValue);\n    removeCustomField();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. can hide Select Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":143,"column":31,"index":5193},"line":143,"code":"  it(\"11. can hide Select Field\", () => {\n    const defaultValue = \"BLUE\";\n    // Add new custom field\n    addCustomField(/^Select/);\n    cy.testJsontext(\"defaultselectedvalue\", defaultValue);\n    hideAndVerifyProperties(\"customField1\", defaultValue);\n    removeCustomField();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. can hide Switch Field","suites":["JSON Form Hidden fields"],"updatePoint":{"line":151,"column":31,"index":5476},"line":151,"code":"  it(\"12. can hide Switch Field\", () => {\n    // Add new custom field\n    addCustomField(\"Switch\");\n    hideAndVerifyProperties(\"customField1\", true);\n    removeCustomField();\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. hides fields on first load","suites":["JSON Form Hidden fields"],"updatePoint":{"line":157,"column":36,"index":5663},"line":157,"code":"  it(\"13. hides fields on first load\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n\n    // hide education field\n    cy.openFieldConfiguration(\"education\");\n    cy.togglebarDisable(\".t--property-control-visible input\");\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    // hide name field\n    cy.openFieldConfiguration(\"name\");\n    cy.togglebarDisable(\".t--property-control-visible input\");\n\n    // publish the app\n    cy.PublishtheApp();\n    cy.wait(4000);\n\n    // Check if name is hidden\n    cy.get(`${fieldPrefix}-name`).should(\"not.exist\");\n    // Check if education is hidden\n    cy.get(`${fieldPrefix}-education`).should(\"not.exist\");\n\n    // check if name and education are not present in form data\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData.name).should(\"deep.equal\", undefined);\n      cy.wrap(formData.education).should(\"deep.equal\", undefined);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_HiddenFields_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate calendar on clicking date field","suites":["Verify syntax to create Datpicker field type"],"updatePoint":{"line":12,"column":49,"index":550},"line":12,"code":"  it(\"1. Validate calendar on clicking date field\", () => {\n    const schema = {\n      Key: \"20/03/1992\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.xpath(jsonform.datepickerContainer).click({\n      force: true\n    });\n    cy.get(jsonform.calendarPopup).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate calendar on clicking date field","suites":["Verify syntax to create Datpicker field type"],"updatePoint":{"line":24,"column":49,"index":937},"line":24,"code":"  it(\"2. Validate calendar on clicking date field\", () => {\n    const schema = {\n      Key: true\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.get(jsonform.switchStatus).should(\"be.visible\");\n    cy.get(jsonform.switchStatus).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate email input field in form","suites":["Verify syntax to create Datpicker field type"],"updatePoint":{"line":36,"column":43,"index":1300},"line":36,"code":"  it(\"3. Validate email input field in form\", () => {\n    const schema = {\n      Key: \"Value@mail.com\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.xpath(jsonform.emailField).should(\"be.visible\");\n    cy.xpath(jsonform.emailField).should(\"have.value\", \"Value@mail.com\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validate email input field in form","suites":["Verify syntax to create Datpicker field type"],"updatePoint":{"line":46,"column":43,"index":1681},"line":46,"code":"  it(\"4. Validate email input field in form\", () => {\n    const schema = {\n      Key: \"value\"\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.get(jsonform.keyInput).should(\"be.visible\");\n    cy.get(jsonform.keyInput).should(\"have.value\", \"value\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Verify mandatory field check and also submit button active/inactive","suites":["Verify syntax to create Datpicker field type"],"updatePoint":{"line":56,"column":76,"index":2069},"line":56,"code":"  it(\"5. Verify mandatory field check and also submit button active/inactive\", () => {\n    const schema = {\n      name: \"John\",\n      date_of_birth: \"20/02/1990\",\n      employee_id: 1001\n    };\n    cy.addDsl(dslWithoutSchema);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.get(jsonform.settings).first().should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(3000);\n    cy.get(jsonform.mandatoryAsterisk).should(\"not.exist\");\n    cy.get(jsonform.mandatoryFieldControl).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.get(jsonform.mandatoryAsterisk).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Checks when mandatory field is blank","suites":["Verify syntax to create Datpicker field type"],"updatePoint":{"line":76,"column":45,"index":2723},"line":76,"code":"  it(\"6. Checks when mandatory field is blank\", () => {\n    cy.get(jsonform.jsformInput).clear({\n      force: true\n    });\n    cy.get(jsonform.msg).should(\"have.text\", \"This field is required\");\n    cy.get(jsonform.submit).should(\"be.disabled\");\n    cy.get(jsonform.jsformInput).type(\"test Mandatory\");\n    cy.get(jsonform.msg).should(\"not.exist\");\n    cy.get(jsonform.submit).should(\"be.enabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Verify property name change with json/text widget binding - Modify property name and check how the binding value changes","suites":["Verify syntax to create Datpicker field type"],"updatePoint":{"line":86,"column":129,"index":3212},"line":86,"code":"  it(\"7. Verify property name change with json/text widget binding - Modify property name and check how the binding value changes\", () => {\n    cy.addDsl(jsonText);\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.get(jsonform.settings).first().should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(3000);\n    cy.get(jsonform.propertyName).find(\".CodeMirror\").first().type(\"NewProperty\");\n    cy.wait(500);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_MultipleSourceData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"accepts numeric options value","suites":["JSONForm RadioGroup Field"],"updatePoint":{"line":38,"column":35,"index":1446},"line":38,"code":"  it(\"accepts numeric options value\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    const schema = {\n      binary: 1\n    };\n    const radioFieldInput = `${fieldPrefix}-binary`;\n    const options = [{\n      label: \"Zero\",\n      value: 0\n    }, {\n      label: \"One\",\n      value: 1\n    }];\n\n    // Apply schema and change the field type to radio group\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"binary\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Radio Group$/);\n    clearOptionsProperty();\n    cy.testJsontext(\"options\", JSON.stringify(options));\n    cy.wait(2000);\n\n    // Validate initial form data\n    cy.get(`.t--widget-textwidget .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", {\n        binary: 1\n      });\n    });\n\n    // Select Zero Option\n    selectAndValidateOption(radioFieldInput, options[0], {\n      binary: 0\n    });\n\n    // Select One Option\n    selectAndValidateOption(radioFieldInput, options[1], {\n      binary: 1\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_RadioGroupField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"accepts string options value","suites":["JSONForm RadioGroup Field"],"updatePoint":{"line":79,"column":34,"index":2583},"line":79,"code":"  it(\"accepts string options value\", () => {\n    cy.openPropertyPane(\"jsonformwidget\");\n    const schema = {\n      accept: \"N\"\n    };\n    const radioFieldInput = `${fieldPrefix}-accept`;\n    const options = [{\n      label: \"Yes\",\n      value: \"Y\"\n    }, {\n      label: \"No\",\n      value: \"N\"\n    }];\n\n    // Apply schema and change the field type to radio group\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(schema));\n    cy.openFieldConfiguration(\"accept\");\n    cy.selectDropdownValue(commonlocators.jsonFormFieldType, /^Radio Group$/);\n    clearOptionsProperty();\n    cy.testJsontext(\"options\", JSON.stringify(options));\n    cy.wait(2000);\n\n    // Validate initial form data\n    cy.get(`.t--widget-textwidget .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", {\n        accept: \"N\"\n      });\n    });\n\n    // Select Y Option\n    selectAndValidateOption(radioFieldInput, options[0], {\n      accept: \"Y\"\n    });\n\n    // Select N Option\n    selectAndValidateOption(radioFieldInput, options[1], {\n      accept: \"N\"\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_RadioGroupField_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"updates formData when field value changes","suites":["JSON Form reset"],"updatePoint":{"line":7,"column":47,"index":263},"line":7,"code":"  it(\"updates formData when field value changes\", () => {\n    const initialFormData = {\n      age: 30,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Koramangala\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\", \"swimming\"],\n      education: [{\n        college: \"MIT\",\n        year: \"20/10/2014\"\n      }],\n      name: \"John\"\n    };\n    const updatedFormData = {\n      age: 40,\n      dob: \"10/12/1992\",\n      migrant: false,\n      address: {\n        street: \"Indranagar\",\n        city: \"Bangalore\"\n      },\n      hobbies: [\"travelling\"],\n      education: [{\n        college: \"IIT\",\n        year: \"20/10/2014\"\n      }],\n      name: \"Test\"\n    };\n\n    // Verify current field values\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", initialFormData.name);\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", initialFormData.age);\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", initialFormData.dob);\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", initialFormData.address.street);\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", initialFormData.address.city);\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", initialFormData.education[0].college);\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", initialFormData.education[0].year);\n\n    // Modify field values\n    cy.get(`${fieldPrefix}-name input`).clear({\n      force: true\n    }).type(updatedFormData.name);\n    cy.get(`${fieldPrefix}-age input`).clear({\n      force: true\n    }).clear({\n      force: true\n    }).type(updatedFormData.age);\n    cy.get(`${fieldPrefix}-address-street input`).clear({\n      force: true\n    }).type(updatedFormData.address.street);\n    cy.get(`${fieldPrefix}-hobbies .rc-select-selection-item`).contains(\"swimming\").siblings(\".rc-select-selection-item-remove\").click({\n      force: true\n    });\n    cy.get(`${fieldPrefix}-education-0--college input`).clear({\n      force: true\n    }).type(updatedFormData.education[0].college).wait(200);\n\n    // Verify new field values\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", updatedFormData.name);\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", updatedFormData.age);\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", updatedFormData.dob);\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", updatedFormData.address.street);\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", updatedFormData.address.city);\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", updatedFormData.education[0].college);\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", updatedFormData.education[0].year);\n\n    // Reset form\n    cy.get(\"button\").contains(\"Reset\").parent(\"button\").click({\n      force: true\n    });\n\n    // Verify initial field values\n    cy.get(`${fieldPrefix}-name input`).should(\"have.value\", initialFormData.name);\n    cy.get(`${fieldPrefix}-age input`).should(\"have.value\", initialFormData.age);\n    cy.get(`${fieldPrefix}-dob input`).should(\"have.value\", initialFormData.dob);\n    cy.get(`${fieldPrefix}-address-street input`).should(\"have.value\", initialFormData.address.street);\n    cy.get(`${fieldPrefix}-address-city input`).should(\"have.value\", initialFormData.address.city);\n    cy.get(`${fieldPrefix}-education-0--college input`).should(\"have.value\", initialFormData.education[0].college);\n    cy.get(`${fieldPrefix}-education-0--year input`).should(\"have.value\", initialFormData.education[0].year);\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_Reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"generates fields with valid source data json","suites":["JSON Form Widget Unicode keys"],"updatePoint":{"line":15,"column":50,"index":741},"line":15,"code":"  it(\"generates fields with valid source data json\", () => {\n    cy.addDsl(dslWithoutSchema);\n    const sourceData = {\n      नाम: \"John\",\n      суроға: {\n        شارع: \"Koramangala\"\n      },\n      การศึกษา: [{\n        କଲେଜ: \"MIT\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-xn__l2bm1c label`).contains(\"नाम\");\n    cy.get(`${fieldPrefix}-xn__l2bm1c input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"John\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b label`).should(\"have.length\", 2);\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b-xn__mgbuhw label`).contains(\"شارع\");\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b-xn__mgbuhw input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Koramangala\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a label`).should(\"have.length\", 2);\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__ohco9d4d label`).contains(\"କଲେଜ\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__ohco9d4d input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"MIT\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a .t--jsonformfield-array-delete-btn .t--text`).should(\"have.text\", \"Delete\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a .t--jsonformfield-array-add-btn .t--text`).should(\"have.text\", \"Add New\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_UnicodeKeys_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"modifies field when source data changes","suites":["JSON Form Widget Unicode keys"],"updatePoint":{"line":49,"column":45,"index":2376},"line":49,"code":"  it(\"modifies field when source data changes\", () => {\n    cy.addDsl(jsonFormUnicodeDSLWithoutSourceData);\n    const modifiedSourceData = {\n      \"पहला नाम\": \"John\",\n      \"अंतिम नाम\": \"Doe\",\n      суроға: {\n        شارع: \"Koramangala\"\n      },\n      การศึกษา: [{\n        କଲେଜ: \"MIT\",\n        卒業の日: \"21/03/2010\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(modifiedSourceData));\n    cy.closePropertyPane();\n    cy.get(`${fieldPrefix}-xn____xvdesr5bxbc label`).contains(\"पहला नाम\");\n    cy.get(`${fieldPrefix}-xn____xvdesr5bxbc input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"John\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn____qtdi9jva8ac1kf label`).contains(\"अंतिम नाम\");\n    cy.get(`${fieldPrefix}-xn____qtdi9jva8ac1kf input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Doe\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b label`).should(\"have.length\", 2);\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b-xn__mgbuhw label`).contains(\"شارع\");\n    cy.get(`${fieldPrefix}-xn__80a1afdk69b-xn__mgbuhw input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"Koramangala\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a label`).should(\"have.length\", 3);\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__ohco9d4d label`).contains(\"କଲେଜ\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__ohco9d4d input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"MIT\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__u9j436hvxmjkd label`).contains(\"卒業の日\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a-0--xn__u9j436hvxmjkd input`).then(input => {\n      cy.wrap(input).should(\"have.value\", \"21/03/2010\");\n      cy.wrap(input).invoke(\"attr\", \"type\").should(\"contain\", \"text\");\n    });\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a .t--jsonformfield-array-delete-btn .t--text`).should(\"have.text\", \"Delete\");\n    cy.get(`${fieldPrefix}-xn__12ca5huag4ce3a .t--jsonformfield-array-add-btn .t--text`).should(\"have.text\", \"Add New\");\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_UnicodeKeys_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"change in accessor updates formData","suites":["JSON Form Widget Unicode keys"],"updatePoint":{"line":95,"column":41,"index":4722},"line":95,"code":"  it(\"change in accessor updates formData\", () => {\n    cy.addDsl(jsonFormUnicodeDSLWithoutSourceData);\n    const sourceData = {\n      नाम: \"John\",\n      суроға: {\n        شارع: \"Koramangala\"\n      },\n      การศึกษา: [{\n        କଲେଜ: \"MIT\"\n      }]\n    };\n    cy.openPropertyPane(\"jsonformwidget\");\n    cy.testJsontext(\"sourcedata\", JSON.stringify(sourceData));\n    cy.closePropertyPane();\n    const expectedInitialFormData = sourceData;\n    const formDataBeforeArrayAccessorChange = {\n      \"नाम नाम\": \"John\",\n      суроға: {\n        \"شارع1 شارع\": \"Koramangala\"\n      },\n      การศึกษา: [{\n        କଲେଜ: \"MIT\"\n      }]\n    };\n    const formDataAfterArrayAccessorChange = {\n      \"नाम नाम\": \"John\",\n      суроға: {\n        \"شارع1 شارع\": \"Koramangala\"\n      },\n      การศึกษา: [{\n        \"ସ୍ନାତକ କଲେଜ\": \"MIT\"\n      }]\n    };\n\n    // Bind formData to Text1 widget text property\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{JSON.stringify(JSONForm1.formData)}}\");\n    cy.closePropertyPane();\n\n    // Validate initial form data\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", expectedInitialFormData);\n    });\n    cy.openPropertyPane(\"jsonformwidget\");\n\n    // नाम field\n    cy.openFieldConfiguration(\"xn__l2bm1c\");\n    cy.testJsontext(\"propertyname\", \"नाम नाम\");\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n\n    // open field суроға -> شارع\n    cy.openFieldConfiguration(\"xn__80a1afdk69b\");\n    cy.openFieldConfiguration(\"xn__mgbuhw\", false);\n    cy.testJsontext(\"propertyname\", \"شارع1 شارع\");\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n    cy.get(backBtn).click({\n      force: true\n    }).wait(500);\n\n    // Validate initial form data\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", formDataBeforeArrayAccessorChange);\n    });\n\n    // open field การศึกษา -> array item -> କଲେଜ\n    cy.openFieldConfiguration(\"xn__12ca5huag4ce3a\");\n    cy.openFieldConfiguration(\"__array_item__\", false);\n    cy.openFieldConfiguration(\"xn__ohco9d4d\", false);\n    cy.testJsontext(\"propertyname\", \"ସ୍ନାତକ କଲେଜ\");\n    cy.wait(5000);\n\n    // Validate initial form data\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).then($el => {\n      const formData = JSON.parse($el.text());\n      cy.wrap(formData).should(\"deep.equal\", formDataAfterArrayAccessorChange);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONForm_UnicodeKeys_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should show the JSONForm with default values from Table widget","suites":["JSONForm in Modal"],"updatePoint":{"line":32,"column":68,"index":1331},"line":32,"code":"  it(\"should show the JSONForm with default values from Table widget\", () => {\n    const tableData = [{\n      step: \"#1\",\n      task: \"Drop a table\",\n      status: \"Done\",\n      action: \"\"\n    }, {\n      step: \"#2\",\n      task: \"Create a query fetch_users with the Mock DB\",\n      status: \"Pending\",\n      action: \"\"\n    }, {\n      step: \"#3\",\n      task: \"Bind the query using => fetch_users.data\",\n      status: \"New\",\n      action: \"\"\n    }];\n    cy.addDsl(jsonFormInModalDsl);\n    cy.get(\".t--widget-tablewidget .tableWrap\").should(\"be.visible\");\n    cy.wait(1000);\n    cy.PublishtheApp();\n\n    // Click action button of first row\n    cy.get(\".t--widget-tablewidget .tableWrap\").find(\"button\").first().click({\n      force: true\n    });\n    // Check the contents of the form\n    checkFormModalValues(tableData[0]);\n\n    // Click action button of third row\n    cy.get(\".t--widget-tablewidget .tableWrap\").find(\"button\").last().click({\n      force: true\n    });\n    checkFormModalValues(tableData[2]);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/JSONForm/JSONFrom_Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate delete widget action from side bar","suites":["Binding the list widget with text widget"],"updatePoint":{"line":5,"column":52,"index":343},"line":5,"code":"  it(\"1. Validate delete widget action from side bar\", function () {\n    cy.addDsl(dsl);\n    cy.wait(3000); //for dsl to settle\n    cy.openPropertyPane(\"listwidget\");\n    cy.verifyUpdatedWidgetName(\"Test\");\n    cy.verifyUpdatedWidgetName(\"#$%1234\", \"___1234\");\n    cy.verifyUpdatedWidgetName(\"56789\");\n    cy.get(commonlocators.deleteWidget).click({\n      force: true\n    });\n    cy.get(\"div.Toastify__toast\").eq(0).contains(\"56789 is removed\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.reload();\n    //cy.get(commonlocators.homeIcon).click({ force: true });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate text widget data based on changes in list widget Data3","suites":["Binding the list widget with text widget"],"updatePoint":{"line":7,"column":69,"index":328},"line":7,"code":"  it(\"Validate text widget data based on changes in list widget Data3\", function () {\n    cy.PublishtheApp();\n    cy.wait(5000);\n    cy.get(\".t--widget-textwidget span:contains('Vivek')\").should(\"have.length\", 2);\n    cy.get(\".t--widget-textwidget span:contains('pawan')\").should(\"have.length\", 2);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.get(\".t--text-widget-container:contains('Vivek')\").should(\"have.length\", 2);\n    cy.get(\".t--text-widget-container:contains('pawan')\").should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. List-Unckeck Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":14,"column":46,"index":613},"line":14,"code":"  it(\"1. List-Unckeck Visible field Validation\", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    //Uncheck the disabled checkbox and validate\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. List-Check Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":25,"column":44,"index":1031},"line":25,"code":"  it(\"2. List-Check Visible field Validation\", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    //Check the disableed checkbox and Validate\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"be.visible\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Toggle JS - List-Unckeck Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":36,"column":58,"index":1461},"line":36,"code":"  it(\"3. Toggle JS - List-Unckeck Visible field Validation\", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle JS - List-Check Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":50,"column":56,"index":1949},"line":50,"code":"  it(\"4. Toggle JS - List-Check Visible field Validation\", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    //Check the disabled checkbox using JS and Validate\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"be.visible\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. checks if list shows correct no. of items","suites":["Container Widget Functionality"],"updatePoint":{"line":61,"column":50,"index":2357},"line":61,"code":"  it(\"5. checks if list shows correct no. of items\", function () {\n    // Verify the length of list\n    cy.get(commonlocators.containerWidget).then(function ($lis) {\n      expect($lis).to.have.length(2);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. checks currentItem binding","suites":["Container Widget Functionality"],"updatePoint":{"line":67,"column":35,"index":2560},"line":67,"code":"  it(\"6. checks currentItem binding\", function () {\n    // Open property pane\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"List1\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container1\");\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    cy.testJsontext(\"text\", `{{currentItem.first_name}}`);\n    cy.wait(1000);\n    cy.closePropertyPane();\n    // Verify Current Item Bindings\n    cy.get(commonlocators.TextInside).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(items[0].first_name);\n      expect($lis.eq(1)).to.contain(items[1].first_name);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. doesn't alter the no of items present when invalid item spacing is entered","suites":["Container Widget Functionality"],"updatePoint":{"line":82,"column":83,"index":3232},"line":82,"code":"  it(\"7. doesn't alter the no of items present when invalid item spacing is entered\", () => {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    cy.moveToStyleTab();\n    // Update an invalid value to item spacing\n    cy.testJsontext(\"itemspacing\\\\(\" + \"px\" + \"\\\\)\", \"-\");\n    cy.wait(2000);\n    // Verify the length of list\n    cy.get(commonlocators.containerWidget).then(function ($lis) {\n      expect($lis).to.have.length(2);\n    });\n\n    // Clear item spacing\n    cy.testJsontext(\"itemspacing\\\\(\" + \"px\" + \"\\\\)\", \"\");\n    cy.wait(2000);\n\n    // Close property pane\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. checks button action","suites":["Container Widget Functionality"],"updatePoint":{"line":101,"column":29,"index":3820},"line":101,"code":"  it(\"8. checks button action\", function () {\n    // Open property pane\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.ExpandCollapseEntity(\"List1\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container1\");\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    cy.testJsontext(\"label\", `{{currentItem.last_name}}`);\n    cy.addAction(\"{{currentItem.last_name}}\", \"onClick\");\n    cy.wait(3000);\n    cy.PublishtheApp();\n    cy.wait(2000);\n    // Verify Widget Button by clicking on it\n    cy.get(widgetsPage.widgetBtn).should(\"have.length\", 2);\n    cy.get(widgetsPage.widgetBtn).closest(\"div\").first().click({\n      force: true\n    });\n    // Verify the click on first button\n    cy.get(commonlocators.toastmsg).contains(items[0].last_name);\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. it checks onListItem click action","suites":["Container Widget Functionality"],"updatePoint":{"line":120,"column":42,"index":4608},"line":120,"code":"  it(\"9. it checks onListItem click action\", function () {\n    // Verify Clicking on list item shows message of first name\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n\n    // Verify Action type and Message of List Item\n    // Click on the onListItemClick action dropdown.\n    // Write binding inside the Message code textarea\n    cy.addAction(\"{{currentItem.first_name}}\", \"onListItemClick\");\n    cy.PublishtheApp();\n    // Click on list first item\n    cy.get(\"div[type='LIST_WIDGET'] .t--widget-containerwidget:first-child\").click();\n    cy.get(\"body\").then($ele => {\n      if ($ele.find(commonlocators.toastmsg).length <= 0) {\n        cy.get(\"div[type='LIST_WIDGET'] .t--widget-containerwidget:first-child\").click();\n      }\n    });\n    // Verify the click on first item\n    cy.get(commonlocators.toastmsg).contains(items[0].first_name);\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. it checks pagination","suites":["Container Widget Functionality"],"updatePoint":{"line":143,"column":30,"index":5556},"line":143,"code":"  it(\"10. it checks pagination\", function () {\n    // clicking on second pagination button\n    cy.get(`${commonlocators.paginationButton}-2`).click();\n\n    // now we are on the second page which shows first the 3rd item in the list\n    cy.get(commonlocators.TextInside).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(items[2].first_name);\n      expect($lis.eq(1)).to.contain(items[3].first_name);\n    });\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. ListWidget-Copy & Delete Verification","suites":["Container Widget Functionality"],"updatePoint":{"line":156,"column":47,"index":6067},"line":156,"code":"  it(\"11. ListWidget-Copy & Delete Verification\", function () {\n    //Copy Chart and verify all properties\n    _.propPane.CopyWidgetFromPropertyPane(\"List1\");\n    _.propPane.DeleteWidgetFromPropertyPane(\"List1Copy\");\n    cy.PublishtheApp();\n    // Verify the copied list widget is deleted\n    cy.get(commonlocators.containerWidget).should(\"have.length\", 2);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. List widget background colour and deploy ","suites":["Container Widget Functionality"],"updatePoint":{"line":167,"column":51,"index":6506},"line":167,"code":"  it(\"12. List widget background colour and deploy \", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    cy.moveToStyleTab();\n    // Scroll down to Styles and Add background colour\n    cy.selectColor(\"backgroundcolor\");\n    cy.wait(1000);\n    cy.selectColor(\"itembackgroundcolor\");\n    // Click on Deploy and ensure it is deployed appropriately\n    cy.PublishtheApp();\n    // Ensure List Background Color\n    cy.get(widgetsPage.listWidget).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n    // Verify List Item Background Color\n    cy.get(widgetsPage.itemContainerWidget).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Toggle JS - List widget background colour and deploy ","suites":["Container Widget Functionality"],"updatePoint":{"line":185,"column":63,"index":7296},"line":185,"code":"  it(\"13. Toggle JS - List widget background colour and deploy \", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    cy.moveToStyleTab();\n    // Scroll down to Styles and Add background colour\n    cy.get(widgetsPage.backgroundColorToggleNew).click({\n      force: true\n    });\n    cy.testJsontext(\"backgroundcolor\", \"#FFC13D\");\n    cy.wait(1000);\n    cy.get(widgetsPage.itemBackgroundColorToggle).click({\n      force: true\n    });\n    cy.testJsontext(\"itembackgroundcolor\", \"#38AFF4\");\n    // Click on Deploy and ensure it is deployed appropriately\n    cy.PublishtheApp();\n    // Ensure List Background Color\n    cy.get(widgetsPage.listWidget).should(\"have.css\", \"background-color\", \"rgb(255, 193, 61)\");\n    // Verify List Item Background Color\n    cy.get(widgetsPage.itemContainerWidget).should(\"have.css\", \"background-color\", \"rgb(56, 175, 244)\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. Add new item in the list widget array object","suites":["Container Widget Functionality"],"updatePoint":{"line":209,"column":54,"index":8268},"line":209,"code":"  it(\"14. Add new item in the list widget array object\", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n\n    //Add the new item in the list\n    cy.testJsontext(\"items\", JSON.stringify(this.data.ListItems));\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. Adding large item Spacing for item card","suites":["Container Widget Functionality"],"updatePoint":{"line":221,"column":49,"index":8644},"line":221,"code":"  it(\"15. Adding large item Spacing for item card\", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n    cy.moveToStyleTab();\n    // Scroll down to Styles and Add item spacing for item card\n    cy.testJsontext(\"itemspacing\\\\(\" + \"px\" + \"\\\\)\", 12);\n    cy.wait(2000);\n    // Click on Deploy and ensure it is deployed appropriately\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"16. Renaming the widget from Property pane and Entity explorer ","suites":["Container Widget Functionality"],"updatePoint":{"line":234,"column":69,"index":9147},"line":234,"code":"  it(\"16. Renaming the widget from Property pane and Entity explorer \", function () {\n    // Open Property pane\n    _.entityExplorer.SelectEntityByName(\"List1\", \"Widgets\");\n\n    // Change the list widget name from property pane and Verify it\n    cy.widgetText(\"List2\", widgetsPage.listWidgetName, widgetsPage.widgetNameSpan);\n    // Change the list widget name from Entity Explorer\n    cy.renameEntity(\"List2\", \"List1\");\n    // Mouse over to list name\n    _.entityExplorer.SelectEntityByName(\"List1\");\n    cy.get(widgetsPage.listWidgetName).first().trigger(\"mouseover\", {\n      force: true\n    });\n    // Verify the list name is changed\n    cy.contains(widgetsPage.listWidgetName + \" \" + commonlocators.listWidgetNameTag, \"List1\");\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate text widget data based on changes in list widget Data2","suites":["Binding the list widget with text widget"],"updatePoint":{"line":8,"column":69,"index":399},"line":8,"code":"  it(\"Validate text widget data based on changes in list widget Data2\", function () {\n    cy.PublishtheApp();\n    cy.wait(5000);\n    cy.get(\".t--widget-textwidget span:contains('pawan,Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--widget-textwidget span:contains('Ashok,rahul')\").should(\"have.length\", 1);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.get(\".t--text-widget-container:contains('pawan,Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--text-widget-container:contains('Ashok,rahul')\").should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List5_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate text widget data based on changes in list widget Data1","suites":["Binding the list widget with text widget"],"updatePoint":{"line":12,"column":72,"index":509},"line":12,"code":"  it(\"1. Validate text widget data based on changes in list widget Data1\", function () {\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(\".t--widget-textwidget span:contains('Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--widget-textwidget span:contains('Pawan')\").should(\"have.length\", 1);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.get(\".t--text-widget-container:contains('Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--text-widget-container:contains('Vivek')\").should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List6_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate text widget data based on changes in list widget Data2","suites":["Binding the list widget with text widget"],"updatePoint":{"line":23,"column":72,"index":1052},"line":23,"code":"  it(\"2. Validate text widget data based on changes in list widget Data2\", function () {\n    _.entityExplorer.SelectEntityByName(\"List1\");\n    _.propPane.UpdatePropertyFieldValue(\"Items\", '[[{ \"name\": \"pawan\"}, { \"name\": \"Vivek\" }], [{ \"name\": \"Ashok\"}, {\"name\": \"rahul\"}]]');\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    _.entityExplorer.ExpandCollapseEntity(\"List1\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container1\");\n    _.entityExplorer.SelectEntityByName(\"Text3\");\n    cy.wait(1000);\n    _.propPane.UpdatePropertyFieldValue(\"Text\", '{{currentItem.map(item => item.name).join(\", \")}}');\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(\".t--widget-textwidget span:contains('pawan, Vivek')\").should(\"have.length\", 1);\n    cy.get(\".t--widget-textwidget span:contains('Ashok, rahul')\").should(\"have.length\", 1);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List6_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate text widget data based on changes in list widget Data3","suites":["Binding the list widget with text widget"],"updatePoint":{"line":41,"column":72,"index":2115},"line":41,"code":"  it(\"3. Validate text widget data based on changes in list widget Data3\", function () {\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\");\n    _.entityExplorer.SelectEntityByName(\"List1\");\n    _.propPane.UpdatePropertyFieldValue(\"Items\", '[{ \"name\": \"pawan\"}, { \"name\": \"Vivek\" }]');\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    _.entityExplorer.ExpandCollapseEntity(\"List1\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container1\");\n    _.entityExplorer.SelectEntityByName(\"Text3\");\n    cy.wait(1000);\n    _.propPane.UpdatePropertyFieldValue(\"Text\", \"{{currentItem.name}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(\".t--widget-textwidget span:contains('Vivek')\").should(\"have.length\", 2);\n    cy.get(\".t--widget-textwidget span:contains('pawan')\").should(\"have.length\", 2);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List6_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate that list widget doesn't execute code","suites":["Binding the list widget with text widget"],"updatePoint":{"line":7,"column":55,"index":319},"line":7,"code":"  it(\"1. Validate that list widget doesn't execute code\", function () {\n    cy.get(\".t--widget-inputwidgetv2 input\").eq(1).type(\"'+(function() { return 3; })()+'\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-buttonwidget\").eq(0).click();\n    cy.get(commonlocators.toastmsg).contains(\"'+(function() { return 3; })()+'\");\n    cy.get(\".t--widget-inputwidgetv2 input\").eq(1).clear().type(\"`+(function() { return 3; })()+`\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-buttonwidget\").eq(0).click();\n    cy.get(commonlocators.toastmsg).should(\"contain\", \"`+(function() { return 3; })()+`\");\n    cy.get(\".t--widget-inputwidgetv2 input\").eq(1).clear().type('\"+(function() { return 3; })()+\"', {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-buttonwidget\").eq(0).click();\n    cy.get(commonlocators.toastmsg).should(\"contain\", '\"+(function() { return 3; })()+\"');\n  });","file":"e2e/Regression/ClientSide/Widgets/List/List7_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"a. should test allowed values","suites":[" File Picker Widget"],"updatePoint":{"line":9,"column":35,"index":425},"line":9,"code":"  it(\"a. should test allowed values\", function () {\n    cy.dragAndDropToWidget(\"filepickerwidgetv2\", \"listwidgetv2\", {\n      x: 150,\n      y: 50\n    });\n    cy.openPropertyPane(\"filepickerwidgetv2\");\n    cy.get(\".t--property-control-required .t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"required\", `{{currentIndex % 2 === 0 }}`);\n    cy.get(\".t--property-control-onfilesselected .t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"onfilesselected\", `{{showAlert('Row ' + currentIndex + ' has ' + currentView.FilePicker1.files.length + ' File(s)')}}`);\n    cy.testJsontext(`maxno\\\\.offiles`, `{{currentIndex + 1}}`);\n    cy.get(\".t--property-control-allowedfiletypes .t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"allowedfiletypes\", `[\".csv\"]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n    cy.testJsontext(\"allowedfiletypes\", \".csv\");\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"exist\");\n    cy.testJsontext(\"allowedfiletypes\", `[\".csv\", \".doc\"]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n    cy.testJsontext(\"allowedfiletypes\", `[]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_FilePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"b. Select Widgets isValid and onFilesSelected","suites":[" File Picker Widget"],"updatePoint":{"line":36,"column":51,"index":1806},"line":36,"code":"  it(\"b. Select Widgets isValid and onFilesSelected\", function () {\n    // Test for isValid === True\n    cy.dragAndDropToWidget(\"textwidget\", \"listwidgetv2\", {\n      x: 550,\n      y: 50\n    });\n    cy.RenameWidgetFromPropertyPane(\"textwidget\", \"Text1\", \"FilePicker_Widget\");\n    cy.testJsontext(\"text\", \"{{currentView.FilePicker1.isDirty}}_{{currentView.FilePicker1.isValid}}_{{currentView.FilePicker1.files[0]?.name}}\");\n    cy.get(`${widgetSelector(\"FilePicker_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `false_false_undefined`);\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.get(`.t--widget-textwidget ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `false_true_undefined`);\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n\n    // Upload a new file\n    cy.get(widgetsPage.filepickerwidgetv2).click();\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testFile.mov\", {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true_true_testFile.mov\");\n    cy.validateToastMessage(\"Row 0 has 1 File(s)\");\n\n    // Next Page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n\n    // Upload a new file\n    cy.get(widgetsPage.filepickerwidgetv2).click();\n    cy.get(commonlocators.filePickerInput).first().selectFile(\"cypress/fixtures/testFile2.mov\", {\n      force: true\n    });\n    cy.get(commonlocators.filePickerUploadButton).click();\n    //eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true_true_testFile2.mov\");\n    cy.validateToastMessage(\"Row 1 has 1 File(s)\");\n    // Prev Page\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n\n    // Check File is still selected\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true_true_testFile.mov\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_FilePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"c. File Widget Max No of Files","suites":[" File Picker Widget"],"updatePoint":{"line":89,"column":36,"index":3994},"line":89,"code":"  it(\"c. File Widget Max No of Files\", function () {\n    cy.openPropertyPane(\"filepickerwidgetv2\");\n    cy.get(widgetsPage.filepickerwidgetv2).click();\n    cy.get(commonlocators.AddMoreFiles).should(\"not.exist\");\n    cy.get(\".uppy-Dashboard-close\").click({\n      force: true\n    });\n\n    // Next Page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.get(widgetsPage.filepickerwidgetv2).click();\n    cy.get(commonlocators.AddMoreFiles).should(\"have.text\", \"Add more\");\n    cy.get(\".uppy-Dashboard-close\").click({\n      force: true\n    });\n\n    // Prev Page\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_FilePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Input Widgets default value","suites":["Input Widgets"],"updatePoint":{"line":23,"column":36,"index":1021},"line":23,"code":"  it(\"1. Input Widgets default value\", function () {\n    cy.dragAndDropToWidget(\"currencyinputwidget\", \"listwidgetv2\", {\n      x: 50,\n      y: 50\n    });\n    cy.dragAndDropToWidget(\"phoneinputwidget\", \"listwidgetv2\", {\n      x: 50,\n      y: 120\n    });\n    cy.dragAndDropToWidget(\"inputwidgetv2\", \"listwidgetv2\", {\n      x: 50,\n      y: 200\n    });\n    cy.openPropertyPane(\"currencyinputwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `{{currentItem.id}}`);\n    cy.togglebar(commonlocators.requiredCheckbox);\n    cy.openPropertyPane(\"phoneinputwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `{{currentItem.phoneNumber}}`);\n    cy.togglebar(commonlocators.requiredCheckbox);\n    cy.togglebarDisable(commonlocators.EnableFormatting);\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", `{{currentItem.email}}`);\n    cy.togglebar(commonlocators.requiredCheckbox);\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", items[0].email);\n    cy.get(widgetsPage.currencyInputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", items[0].id);\n    cy.get(widgetsPage.phoneInputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", items[0].phoneNumber);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Inputs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Input Widgets isValid","suites":["Input Widgets"],"updatePoint":{"line":50,"column":30,"index":2322},"line":50,"code":"  it(\"2. Input Widgets isValid\", function () {\n    // Test for isValid === True\n    cy.dragAndDropToWidget(\"textwidget\", \"listwidgetv2\", {\n      x: 350,\n      y: 50\n    });\n    cy.RenameWidgetFromPropertyPane(\"textwidget\", \"Text1\", \"Input_Widget\");\n    cy.wait(1000);\n    cy.testJsontext(\"text\", `{{currentView.Input1.isValid}}`);\n    cy.get(`${widgetSelector(\"Input_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"true\");\n    cy.dragAndDropToWidget(\"textwidget\", \"listwidgetv2\", {\n      x: 350,\n      y: 120\n    });\n    cy.RenameWidgetFromPropertyPane(\"textwidget\", \"Text1\", \"Currency_Widget\");\n    cy.wait(1000);\n    cy.testJsontext(\"text\", `{{currentView.CurrencyInput1.isValid}}`);\n    cy.get(`${widgetSelector(\"Currency_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"true\");\n    cy.dragAndDropToWidget(\"textwidget\", \"listwidgetv2\", {\n      x: 350,\n      y: 210\n    });\n    cy.RenameWidgetFromPropertyPane(\"textwidget\", \"Text1\", \"PhoneInput_Widget\");\n    cy.wait(1000);\n    cy.testJsontext(\"text\", `{{currentView.PhoneInput1.isValid}}`);\n    cy.get(`${widgetSelector(\"PhoneInput_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"true\");\n\n    // Test for isValid === false\n    cy.get(`${widgetSelectorByType(\"inputwidgetv2\")} input`).clear({\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Input_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"false\");\n    cy.get(`${widgetSelectorByType(\"phoneinputwidget\")} input`).clear({\n      force: true\n    });\n    cy.get(`${widgetSelector(\"PhoneInput_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"false\");\n    cy.get(`${widgetSelectorByType(\"currencyinputwidget\")} input`).clear({\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Currency_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Inputs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Currency widget default value is retained over page change","suites":["Input Widgets"],"updatePoint":{"line":91,"column":67,"index":4271},"line":91,"code":"  it(\"3. Currency widget default value is retained over page change\", () => {\n    const value = \"123456789\";\n    const formattedText = \"123,456,789\";\n    cy.addDsl(dslWithCurrencyWidget);\n    cy.openPropertyPane(\"currencyinputwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", value);\n\n    // Observe the value of 2nd item currency widget - formatted text\n    cy.get(\".t--widget-currencyinputwidget\").eq(1).find(\"input\").should(\"have.value\", formattedText);\n\n    // Find the 2nd item currency and click to focus\n    cy.get(\".t--widget-currencyinputwidget\").eq(1).find(\"input\").click({\n      force: true\n    });\n\n    // Observe the value of 2nd item currency widget - un-formatted text\n    cy.get(\".t--widget-currencyinputwidget\").eq(1).find(\"input\").should(\"have.value\", value);\n\n    // Change to page 2\n    cy.get(\".rc-pagination-item\").find(\"a\").contains(\"2\").click({\n      force: true\n    }).wait(500);\n\n    // Back to page 1\n    cy.get(\".rc-pagination-item\").find(\"a\").contains(\"1\").click({\n      force: true\n    }).wait(500);\n\n    // Observe the value of 2nd item currency widget - formatted text\n    cy.get(\".t--widget-currencyinputwidget\").eq(1).find(\"input\").should(\"have.value\", formattedText);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Inputs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"a. CurrentView Works in modal","suites":["Modal, Radio, Checkbox widget"],"updatePoint":{"line":8,"column":35,"index":379},"line":8,"code":"  it(\"a. CurrentView Works in modal\", function () {\n    cy.get(`${widgetSelector(\"Text4\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"\");\n    cy.wait(1000);\n    cy.get(`${widgetSelector(\"Input1\")} textarea`).first().type(\"Leo Messi\", {\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Text4\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"Leo Messi\");\n    cy.get(`${widgetSelector(\"IconButton1\")} button`).first().click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(`${widgetSelector(\"Text6\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"Leo Messi\");\n    cy.get(`${widgetSelector(\"IconButton2\")} button`).click({\n      force: true\n    });\n    cy.wait(5000);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Modal_Stats_Check_Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"b. Radio And Checkbox connected to modal","suites":["Modal, Radio, Checkbox widget"],"updatePoint":{"line":25,"column":46,"index":1129},"line":25,"code":"  it(\"b. Radio And Checkbox connected to modal\", function () {\n    cy.get(`${widgetSelector(\"RadioGroup1\")} [type=\"radio\"]`).check(\"N\", {\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Radio\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"N\");\n    cy.get(`${widgetSelector(\"IconButton4\")} button`).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Modal_Stats_Check_Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"a. Select Widgets default value","suites":["Select Widgets"],"updatePoint":{"line":15,"column":37,"index":823},"line":15,"code":"  it(\"a. Select Widgets default value\", function () {\n    cy.dragAndDropToWidget(\"multiselectwidgetv2\", \"listwidgetv2\", {\n      x: 150,\n      y: 50\n    });\n    cy.dragAndDropToWidget(\"selectwidget\", \"listwidgetv2\", {\n      x: 150,\n      y: 120\n    });\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `{{[{\n              label: currentItem.name,\n              value: currentItem.id\n          }]}}`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", `{{currentItem.id}}`);\n    cy.togglebar(commonlocators.requiredCheckbox);\n    cy.get(toggleJSButton(\"onoptionchange\")).click({\n      force: true\n    });\n    cy.testJsontext(\"onoptionchange\", `{{showAlert('Row ' + currentIndex + ' Option Changed')}}`);\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `{{[{\n              label: currentItem.name,\n              value: currentItem.id\n          }]}}`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", `{{currentItem.id}}`);\n    cy.togglebar(commonlocators.requiredCheckbox);\n    cy.get(toggleJSButton(\"onoptionchange\")).click({\n      force: true\n    });\n    cy.testJsontext(\"onoptionchange\", `{{showAlert('Row ' + currentIndex + ' Option Changed')}}`);\n\n    // Page 1\n    agHelper.ReadSelectedDropDownValue().then($selectedValue => {\n      expect($selectedValue).to.eq(items[0].name);\n    });\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"have.text\", items[0].name);\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    agHelper.Sleep();\n\n    // Page 2\n    agHelper.ReadSelectedDropDownValue().then($selectedValue => {\n      expect($selectedValue).to.eq(items[1].name);\n    });\n    cy.get(`.rc-select-selection-item[title=\"${items[1].name}\"]`).should(\"have.text\", items[1].name);\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Select_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"b. Select Widgets isValid","suites":["Select Widgets"],"updatePoint":{"line":66,"column":31,"index":2819},"line":66,"code":"  it(\"b. Select Widgets isValid\", function () {\n    // Test for isValid === True\n    cy.dragAndDropToWidget(\"textwidget\", \"listwidgetv2\", {\n      x: 550,\n      y: 50\n    });\n    cy.RenameWidgetFromPropertyPane(\"textwidget\", \"Text1\", \"Select_Widget\");\n    cy.testJsontext(\"text\", \"{{`${currentView.Select1.selectedOptionLabel}_${currentView.Select1.selectedOptionValue}_${currentView.Select1.isDirty}_${currentView.Select1.isValid}`}}\");\n    cy.get(`${widgetSelector(\"Select_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `${items[0].name}_${items[0].id}_false_true`);\n    cy.dragAndDropToWidget(\"textwidget\", \"listwidgetv2\", {\n      x: 550,\n      y: 120\n    });\n    cy.RenameWidgetFromPropertyPane(\"textwidget\", \"Text1\", \"MultiSelect_Widget\");\n    cy.testJsontext(\"text\", \"{{`${currentView.MultiSelect1.selectedOptionLabels[0]}_${currentView.MultiSelect1.selectedOptionValues[0]}_${currentView.MultiSelect1.isDirty}_${currentView.MultiSelect1.isValid}`}}\");\n    cy.get(`${widgetSelector(\"MultiSelect_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `${items[0].name}_${items[0].id}_false_true`);\n\n    // Test for isValid === false\n    agHelper.RemoveMultiSelectItems([`${items[0].name}`]);\n    cy.get(`${widgetSelector(\"MultiSelect_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `undefined_undefined_true_false`);\n    cy.get(`${widgetSelectorByType(\"selectwidget\")} .cancel-icon`).click({\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Select_Widget\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `__true_false`);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Select_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"c. Select Widgets onOptionChange","suites":["Select Widgets"],"updatePoint":{"line":91,"column":38,"index":4446},"line":91,"code":"  it(\"c. Select Widgets onOptionChange\", function () {\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(items[0].name).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(formWidgetsPage.selectWidget).contains(items[0].name);\n    cy.validateToastMessage(\"Row 0 Option Changed\");\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.get(\".multi-select-dropdown\").contains(items[0].name).click({\n      force: true\n    });\n    cy.get(`.rc-select-selection-item[title=\"${items[0].name}\"]`).should(\"have.text\", items[0].name);\n    cy.validateToastMessage(\"Row 0 Option Changed\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Select_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"a. Validate the Values in Table widget","suites":["Select Widgets"],"updatePoint":{"line":16,"column":44,"index":895},"line":16,"code":"  it(\"a. Validate the Values in Table widget\", function () {\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(0).within(() => {\n      cy.readTableV2dataPublish(\"0\", \"1\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Blue\");\n        cy.log(\"the value is\" + tabValue);\n      });\n      cy.readTableV2dataPublish(\"3\", \"1\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"White\");\n        cy.log(\"the value is\" + tabValue);\n      });\n    });\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(1).within(() => {\n      cy.readTableV2dataPublish(\"0\", \"1\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Orange\");\n      });\n      cy.readTableV2dataPublish(\"3\", \"1\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Mustard\");\n      });\n    });\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(2).within(() => {\n      cy.readTableV2dataPublish(\"0\", \"1\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Teal\");\n      });\n      cy.readTableV2dataPublish(\"3\", \"1\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Marine\");\n      });\n    });\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(3).within(() => {\n      cy.readTableV2dataPublish(\"0\", \"1\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Blue\");\n      });\n      cy.readTableV2dataPublish(\"3\", \"1\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Lavender\");\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/List_Table_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should not throw error when on click event is changed No Action","suites":["List v2- Tabs Widget"],"updatePoint":{"line":8,"column":72,"index":312},"line":8,"code":"  it(\"1. should not throw error when on click event is changed No Action\", () => {\n    _.entityExplorer.ExpandCollapseEntity(\"List1\");\n    _.entityExplorer.ExpandCollapseEntity(\"Container1\");\n    _.entityExplorer.SelectEntityByName(\"Button1\");\n    _.propPane.EnterJSContext(\"onClick\", \"{{showAlert('Hello')}}\");\n    _.agHelper.Sleep();\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.ValidateToastMessage(\"Hello\");\n\n    // Wait for toastmsg to close\n    _.agHelper.WaitUntilAllToastsDisappear();\n\n    // Clear the event\n    _.propPane.UpdatePropertyFieldValue(\"onClick\", \"\");\n    _.agHelper.Sleep();\n    _.agHelper.ClickButton(\"Submit\");\n    _.agHelper.AssertElementAbsence(_.locators._specificToast(\"Hello\"));\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/Listv2_Button_Widget_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. change in the properties of the tabs widget should retain the default selected tab","suites":["List v2- Tabs Widget"],"updatePoint":{"line":7,"column":91,"index":346},"line":7,"code":"  it(\"1. change in the properties of the tabs widget should retain the default selected tab\", () => {\n    cy.openPropertyPaneByWidgetName(\"Tabs1\", \"tabswidget\");\n\n    // Check if Tab1 selected\n    cy.get(\".t--page-switch-tab.is-active\").contains(\"Tab 1\");\n\n    // Disable Scroll Content\n    cy.togglebarDisable(commonlocators.scrollView);\n    // Check if disabled\n    cy.get(commonlocators.scrollView).parent().should(\"not.be.checked\");\n    // Check if Tab 1 still selected\n    cy.get(\".t--page-switch-tab.is-active\").contains(\"Tab 1\");\n\n    // Enable Scroll Content\n    cy.togglebar(commonlocators.scrollView);\n    // Check if enabled\n    cy.get(commonlocators.scrollView).should(\"be.checked\");\n    // Check if Tab 1 still selected\n    cy.get(\".t--page-switch-tab.is-active\").contains(\"Tab 1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Childwigets/Listv2_Tabs_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. shows autocomplete for currentItem/currentIndex/currentView for level_1 list","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":13,"column":85,"index":553},"line":13,"code":"  it(\"1. shows autocomplete for currentItem/currentIndex/currentView for level_1 list\", () => {\n    // Open the property pane of level 1 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text1\", \"textwidget\");\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{curr\", {\n      force: true\n    });\n    checkAutosuggestion(\"currentItem\", \"Object\");\n    checkAutosuggestion(\"currentView\", \"Object\");\n    checkAutosuggestion(\"currentIndex\", \"Number\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. shows autocomplete for currentItem/currentIndex/currentView for level_2 list","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":24,"column":85,"index":1070},"line":24,"code":"  it(\"2. shows autocomplete for currentItem/currentIndex/currentView for level_2 list\", () => {\n    // Open the property pane of level 2 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text5\", \"textwidget\");\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{curr\", {\n      force: true\n    });\n    checkAutosuggestion(\"currentItem\", \"Object\");\n    checkAutosuggestion(\"currentView\", \"Object\");\n    checkAutosuggestion(\"currentIndex\", \"Number\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. shows autocomplete for level_1's currentItem/currentIndex/currentView for level_2 list","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":35,"column":95,"index":1597},"line":35,"code":"  it(\"3. shows autocomplete for level_1's currentItem/currentIndex/currentView for level_2 list\", () => {\n    // Open the property pane of level 2 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text5\", \"textwidget\");\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.\", {\n      force: true\n    });\n    checkAutosuggestion(\"currentItem\", \"Object\");\n    checkAutosuggestion(\"currentView\", \"Object\");\n    checkAutosuggestion(\"currentIndex\", \"Number\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. shows autocomplete for currentItem/currentIndex/currentView for level_3 list","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":46,"column":85,"index":2118},"line":46,"code":"  it(\"4. shows autocomplete for currentItem/currentIndex/currentView for level_3 list\", () => {\n    // Open the property pane of level 3 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text7\", \"textwidget\");\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{curr\", {\n      force: true\n    });\n    checkAutosuggestion(\"currentItem\", \"Object\");\n    checkAutosuggestion(\"currentView\", \"Object\");\n    checkAutosuggestion(\"currentIndex\", \"Number\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. shows autocomplete for level_1's currentItem/currentIndex/currentView for level_3 list","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":57,"column":95,"index":2645},"line":57,"code":"  it(\"5. shows autocomplete for level_1's currentItem/currentIndex/currentView for level_3 list\", () => {\n    // Open the property pane of level 3 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text7\", \"textwidget\");\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.\", {\n      force: true\n    });\n    checkAutosuggestion(\"currentItem\", \"Object\");\n    checkAutosuggestion(\"currentView\", \"Object\");\n    checkAutosuggestion(\"currentIndex\", \"Number\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. shows autocomplete for level_2's currentItem/currentIndex/currentView for level_3 list","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":68,"column":95,"index":3176},"line":68,"code":"  it(\"6. shows autocomplete for level_2's currentItem/currentIndex/currentView for level_3 list\", () => {\n    // Open the property pane of level 3 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text7\", \"textwidget\");\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_2.\", {\n      force: true\n    });\n    checkAutosuggestion(\"currentItem\", \"Object\");\n    checkAutosuggestion(\"currentView\", \"Object\");\n    checkAutosuggestion(\"currentIndex\", \"Number\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. should not show List's currentItemsView in currentView of level_1/level_2 properties","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":79,"column":93,"index":3705},"line":79,"code":"  it(\"7. should not show List's currentItemsView in currentView of level_1/level_2 properties\", () => {\n    // Open the property pane of level 3 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text7\", \"textwidget\");\n\n    // level_1 List currentItemsView should not exist\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.List2.\", {\n      force: true\n    });\n    cy.get(\".CodeMirror-hints\").contains(\"currentItemsView\").should(\"not.exist\");\n\n    // level_2 List currentItemsView should not exist\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_2.currentView.List3.\", {\n      force: true\n    });\n    cy.get(\".CodeMirror-hints\").contains(\"currentItemsView\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. currentItem should reflect appropriate data types","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":97,"column":58,"index":4499},"line":97,"code":"  it(\"8. currentItem should reflect appropriate data types\", () => {\n    // Open the property pane of level 1 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text1\", \"textwidget\");\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{currentItem.\", {\n      force: true\n    });\n    checkAutosuggestion(\"companyName\", \"String\");\n    checkAutosuggestion(\"id\", \"Number\");\n    checkAutosuggestion(\"location\", \"String\");\n    checkAutosuggestion(\"positions\", \"Array\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. currentView should reflect appropriate widgets for level_1 for level_3 list","suites":["List v2 - Property autocomplete"],"updatePoint":{"line":109,"column":84,"index":5057},"line":109,"code":"  it(\"9. currentView should reflect appropriate widgets for level_1 for level_3 list\", () => {\n    // Open the property pane of level 3 list widget's Text widget\n    cy.openPropertyPaneByWidgetName(\"Text6\", \"textwidget\");\n\n    // level_1.currentView\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.\", {\n      force: true\n    });\n    checkAutosuggestion(\"Text1\", \"Object\");\n    checkAutosuggestion(\"Text2\", \"Object\");\n    checkAutosuggestion(\"List2\", \"Object\");\n\n    // level_1.currentView.Text1\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.Text1.\", {\n      force: true\n    });\n    checkAutosuggestion(\"text\", \"String\");\n    checkAutosuggestion(\"isVisible\", \"Boolean\");\n\n    // level_1.currentView.Text2\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.Text2.\", {\n      force: true\n    });\n    checkAutosuggestion(\"text\", \"String\");\n    checkAutosuggestion(\"isVisible\", \"Boolean\");\n\n    // level_1.currentView.List2\n    cy.testJsontext(\"text\", \"\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.List2.\", {\n      force: true\n    });\n    checkAutosuggestion(\"backgroundColor\", \"String\");\n    checkAutosuggestion(\"itemSpacing\", \"Number\");\n    checkAutosuggestion(\"isVisible\", \"Boolean\");\n    checkAutosuggestion(\"listData\", \"Array\");\n    checkAutosuggestion(\"pageNo\", \"Number\");\n    checkAutosuggestion(\"pageSize\", \"Number\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Child widgets","suites":["List widget v2 - Basic Child Widget Interaction"],"updatePoint":{"line":52,"column":22,"index":1984},"line":52,"code":"  it(\"1. Child widgets\", () => {\n    // Drop Input widget\n    dragAndDropToWidget(\"inputwidgetv2\", \"containerwidget\", {\n      x: 250,\n      y: 50\n    });\n\n    // Verify drop\n    cy.get(publishLocators.inputWidget).should(\"exist\");\n\n    // Type value\n    cy.get(publishLocators.inputWidget).find(\"input\").type(\"abcd\");\n\n    // Verify if the value got typed\n    cy.get(publishLocators.inputWidget).find(\"input\").should(\"have.value\", \"abcd\");\n    deleteAllWidgetsInContainer();\n\n    // Drop Select widget\n    dragAndDropToWidget(\"selectwidget\", \"containerwidget\", {\n      x: 250,\n      y: 50\n    });\n\n    // Verify drop\n    cy.get(publishLocators.selectwidget).should(\"exist\");\n    cy.PublishtheApp();\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} ${publishLocators.selectwidget}`).should(\"have.length\", 3));\n\n    // open the select widget\n    cy.get(publishLocators.selectwidget).eq(0).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    // Select the Red option from dropdown list\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Red\").click({\n      force: true\n    });\n\n    // Assert if the select widget has Red as the selected value\n    cy.get(publishLocators.selectwidget).contains(\"Red\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    deleteAllWidgetsInContainer();\n\n    // Drop Checkbox widget\n    dragAndDropToWidget(\"checkboxgroupwidget\", \"containerwidget\", {\n      x: 250,\n      y: 50\n    });\n\n    // Verify drop\n    cy.get(publishLocators.checkboxGroupWidget).should(\"exist\");\n    cy.PublishtheApp();\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} ${publishLocators.checkboxGroupWidget}`).should(\"have.length\", 3));\n    cy.wait(2000); //for widgets to settle\n\n    // select green & Verify Green selected\n\n    cy.get(publishLocators.checkboxGroupWidget).find(\".bp3-checkbox\").contains(\"Green\").click({\n      force: true\n    }).wait(500).siblings(\"input\").should(\"be.checked\");\n\n    // Verify Blue selected\n    cy.get(publishLocators.checkboxGroupWidget).find(\".bp3-checkbox\").contains(\"Blue\").siblings(\"input\").should(\"be.checked\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    deleteAllWidgetsInContainer();\n\n    // Drop Switch widget\n    dragAndDropToWidget(\"switchwidget\", \"containerwidget\", {\n      x: 250,\n      y: 50\n    });\n\n    // Verify drop\n    cy.get(publishLocators.switchwidget).should(\"exist\");\n    cy.PublishtheApp();\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} ${publishLocators.switchwidget}`).should(\"have.length\", 3));\n\n    // Verify checked\n    cy.get(publishLocators.switchwidget).find(\"input\").should(\"be.checked\");\n    cy.wait(1000);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} ${publishLocators.switchwidget}`).should(\"have.length\", 3));\n    // Uncheck & Verify unchecked\n    cy.get(publishLocators.switchwidget).find(\"label\").first().click().wait(500).should(\"not.be.checked\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    deleteAllWidgetsInContainer();\n\n    // Drop Radio widget\n    dragAndDropToWidget(\"radiogroupwidget\", \"containerwidget\", {\n      x: 250,\n      y: 50\n    });\n\n    // Verify drop\n    cy.get(publishLocators.radioWidget).should(\"exist\");\n    cy.PublishtheApp();\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} ${publishLocators.radioWidget}`).should(\"have.length\", 3));\n\n    // Check radio with value=1 is selected\n    checkSelectedRadioValue(publishLocators.radioWidget, \"Y\");\n    cy.wait(1000);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} ${publishLocators.radioWidget}`).should(\"have.length\", 3));\n    // Check option 2 and then check it's value:\n    cy.get(`${publishLocators.radioWidget} input`).check(\"N\", {\n      force: true\n    });\n    checkSelectedRadioValue(publishLocators.radioWidget, \"N\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicChildWidgetInteraction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. shows correct number of items","suites":["List widget v2 - Basic client side data tests"],"updatePoint":{"line":29,"column":38,"index":1146},"line":29,"code":"  it(\"1. shows correct number of items\", () => {\n    cy.addDsl(simpleListDSL);\n    cy.get(publishLocators.containerWidget).should(\"have.length\", 3);\n    cy.get(publishLocators.imageWidget).should(\"have.length\", 3);\n    cy.get(publishLocators.textWidget).should(\"have.length\", 6);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicClientSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. shows correct text from binding","suites":["List widget v2 - Basic client side data tests"],"updatePoint":{"line":35,"column":40,"index":1434},"line":35,"code":"  it(\"2. shows correct text from binding\", () => {\n    cy.get(publishLocators.containerWidget).each(($containerEl, index) => {\n      cy.wrap($containerEl).find(publishLocators.textWidget).eq(0).should(\"have.text\", simpleListData1[index].name);\n      cy.wrap($containerEl).find(publishLocators.textWidget).eq(1).should(\"have.text\", simpleListData1[index].id);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicClientSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. retains input values when pages are switched","suites":["List widget v2 - Basic client side data tests"],"updatePoint":{"line":41,"column":53,"index":1820},"line":41,"code":"  it(\"3. retains input values when pages are switched\", () => {\n    cy.addDsl(simpleListWithInputAndButtonDSL);\n    cy.get(publishLocators.inputWidget).should(\"have.length\", 2);\n\n    // Type a number in each of the item's input widget\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").type(index + 1);\n    });\n\n    // Verify the typed value\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").should(\"have.value\", index + 1);\n    });\n\n    // Change to page 2\n    cy.get(\".rc-pagination-item\").find(\"a\").contains(\"2\").click({\n      force: true\n    }).wait(500);\n    cy.get(\".rc-pagination-item-active\").contains(2);\n    cy.get(publishLocators.inputWidget).should(\"have.length\", 2);\n\n    // Type a number in each of the item's input widget\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").type(index + 4);\n    });\n\n    // Verify the typed value\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").should(\"have.value\", index + 4);\n    });\n\n    // Go to page 1\n    cy.get(\".rc-pagination-item\").find(\"a\").contains(\"1\").click({\n      force: true\n    }).wait(500);\n    cy.get(\".rc-pagination-item-active\").contains(1);\n    cy.get(publishLocators.inputWidget).should(\"have.length\", 2);\n\n    // Verify if previously the typed values are retained\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").should(\"have.value\", index + 1);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicClientSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Reset pageNo when serverside pagination is enabled","suites":["List widget v2 - Basic client side data tests"],"updatePoint":{"line":84,"column":59,"index":3488},"line":84,"code":"  it(\"4. Reset pageNo when serverside pagination is enabled\", () => {\n    cy.get(`${widgetSelector(\"List1\")} .rc-pagination-item-3`).click({\n      force: true\n    });\n    cy.waitUntil(() => cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"3\"));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-imagewidget`).should(\"have.length\", 2));\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.togglebar(commonlocators.serverSidePaginationCheckbox);\n\n    // Page number resets\n    cy.waitUntil(() => cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"1\"));\n    cy.togglebarDisable(commonlocators.serverSidePaginationCheckbox);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicClientSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":39,"column":22,"index":1932},"line":39,"code":"  it(\"excludeForAirgap\", \"1. shows correct number of items and binding texts\", () => {\n    cy.wait(2000);\n    cy.get(publishLocators.containerWidget).should(\"have.length\", 3);\n    cy.get(publishLocators.imageWidget).should(\"have.length\", 3);\n    cy.get(publishLocators.textWidget).should(\"have.length\", 6);\n    cy.get(publishLocators.containerWidget).each($containerEl => {\n      cy.wrap($containerEl).get(publishLocators.textWidget).eq(1).find(\"span\").invoke(\"text\").should(\"have.length.gt\", 0);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":48,"column":12,"index":2433},"line":48,"code":"  it(\"airgap\", \"1. shows correct number of items and binding texts - airgap\", () => {\n    cy.wait(2000);\n    cy.get(publishLocators.containerWidget).should(\"have.length\", 2);\n    cy.get(publishLocators.imageWidget).should(\"have.length\", 2);\n    cy.get(publishLocators.textWidget).should(\"have.length\", 4);\n    cy.get(publishLocators.containerWidget).each($containerEl => {\n      cy.wrap($containerEl).get(publishLocators.textWidget).eq(1).find(\"span\").invoke(\"text\").should(\"have.length.gt\", 0);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":57,"column":22,"index":2953},"line":57,"code":"  it(\"excludeForAirgap\", \"2. next page shows correct number of items and binding text\", () => {\n    cy.get(\".t--list-widget-next-page.rc-pagination-next\").find(\"button\").click({\n      force: true\n    });\n    cy.get(\".rc-pagination-item\").contains(2);\n\n    /**\n     * isLoading of the widget does not work properly so for a moment\n     * the previous data are visible which can cause the test to pass/fail.\n     * Adding a wait makes sure the next page data is loaded.\n     */\n    cy.wait(3000);\n    cy.get(publishLocators.containerWidget).should(\"have.length\", 3);\n    cy.get(publishLocators.imageWidget).should(\"have.length\", 3);\n    cy.get(publishLocators.textWidget).should(\"have.length\", 6);\n    cy.get(publishLocators.containerWidget).each($containerEl => {\n      cy.wrap($containerEl).get(publishLocators.textWidget).eq(1).find(\"span\").invoke(\"text\").should(\"have.length.gt\", 0);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":76,"column":12,"index":3843},"line":76,"code":"  it(\"airgap\", \"2. next page shows correct number of items and binding text - airgap\", () => {\n    cy.get(\".t--list-widget-next-page.rc-pagination-next\").find(\"button\").click({\n      force: true\n    });\n    cy.get(\".rc-pagination-item\").contains(2);\n    cy.get(publishLocators.containerWidget).should(\"have.length\", 2);\n    cy.get(publishLocators.imageWidget).should(\"have.length\", 2);\n    cy.get(publishLocators.textWidget).should(\"have.length\", 4);\n    /**\n     * isLoading of the widget does not work properly so for a moment\n     * the previous data are visible which can cause the test to pass/fail.\n     * Adding a wait makes sure the next page data is loaded.\n     */\n    cy.wait(3000);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. re-runs query of page 1 when reset","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":91,"column":43,"index":4574},"line":91,"code":"  it(\"3. re-runs query of page 1 when reset\", () => {\n    // Modify onPageChange\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.get(toggleJSButton(\"onpagechange\")).click({\n      force: true\n    });\n    cy.testJsontext(\"onpagechange\", \"{{Query1.run(() => {showAlert(`Query Ran ${new Date().getTime()}`)}, () => {})}}\");\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(toggleJSButton(\"onclick\")).click({\n      force: true\n    });\n    cy.testJsontext(\"onclick\", \"{{resetWidget('List1',true)}}\");\n\n    // Verify if page 2\n    cy.get(\".rc-pagination-item\").contains(2);\n\n    // Go to next page\n    cy.get(\".t--list-widget-next-page.rc-pagination-next\").find(\"button\").click({\n      force: true\n    });\n\n    // Verify if page 3\n    cy.get(\".rc-pagination-item\").contains(3);\n\n    /**\n     *  Note: Waiting for toastmsg and verifying it can cause flakyness\n     * as the APIs could take time to respond and by the response comes,\n     * the cypress tests might timeout.\n     *  */\n    // Represents query fired\n    cy.get(commonlocators.toastmsg).should(\"exist\");\n    // Represents the toast message is closed\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n\n    // Reset List widget\n    cy.get(\".t--draggable-buttonwidget\").find(\"button\").click({\n      force: true\n    });\n\n    // Verify if page 1\n    cy.get(\".rc-pagination-item\").contains(1);\n\n    // Verify if Query fired once\n    cy.get(commonlocators.toastmsg).should(\"exist\").should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":136,"column":22,"index":6025},"line":136,"code":"  it(\"excludeForAirgap\", \"4. retains input values when pages are switched\", () => {\n    // Type a number in each of the item's input widget\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").type(index + 1);\n    });\n\n    // Verify the typed value\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").should(\"have.value\", index + 1);\n    });\n\n    // Go to page 2\n    cy.get(\".t--list-widget-next-page.rc-pagination-next\").find(\"button\").click({\n      force: true\n    });\n    cy.get(\".rc-pagination-item\").contains(2);\n\n    /**\n     * isLoading of the widget does not work properly so for a moment\n     * the previous data are visible which can cause the test to pass/fail.\n     * Adding a wait makes sure the next page data is loaded.\n     */\n    cy.wait(5000);\n\n    // Type a number in each of the item's input widget\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").type(index + 4);\n    });\n\n    // Verify the typed value\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").should(\"have.value\", index + 4);\n    });\n\n    // Go to page 1\n    cy.get(\".t--list-widget-prev-page.rc-pagination-prev\").find(\"button\").click({\n      force: true\n    });\n    cy.get(\".rc-pagination-item\").contains(1).wait(5000);\n\n    // Verify if previously the typed values are retained\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").should(\"have.value\", index + 1);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":181,"column":12,"index":7699},"line":181,"code":"  it(\"airgap\", \"4. retains input values when pages are switched - airgap\", () => {\n    // Type a number in each of the item's input widget\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").clear().type(index + 1);\n    });\n\n    // Verify the typed value\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").should(\"have.value\", index + 1);\n    });\n\n    // Go to page 2\n    cy.get(\".t--list-widget-next-page.rc-pagination-next\").find(\"button\").click({\n      force: true\n    });\n    cy.get(\".rc-pagination-item\").contains(2);\n\n    /**\n     * isLoading of the widget does not work properly so for a moment\n     * the previous data are visible which can cause the test to pass/fail.\n     * Adding a wait makes sure the next page data is loaded.\n     */\n    cy.wait(5000);\n\n    // Go to page 1\n    cy.get(\".t--list-widget-prev-page.rc-pagination-prev\").find(\"button\").click({\n      force: true\n    });\n    cy.get(\".rc-pagination-item\").contains(1).wait(5000);\n\n    // Verify if previously the typed values are retained\n    cy.get(\".t--draggable-inputwidgetv2\").each(($inputWidget, index) => {\n      cy.wrap($inputWidget).find(\"input\").should(\"have.value\", index + 1);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Total Record Count","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":216,"column":27,"index":9019},"line":216,"code":"  it(\"5. Total Record Count\", () => {\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-totalrecords\", `{{10}}`);\n\n    // With Page Size of 3 and total record count of 10, we should have total page of 4\n    cy.get(\".rc-pagination .rc-pagination-item-1\").should(\"exist\");\n    cy.get(\".rc-pagination .rc-pagination-item-2\").should(\"exist\");\n    cy.get(\".rc-pagination .rc-pagination-item-3\").should(\"exist\");\n    cy.get(\".rc-pagination .rc-pagination-item-4\").should(\"exist\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"4\");\n    cy.get(commonlocators.listPaginateNextButtonDisabled).should(\"exist\");\n\n    // When I clear total Record Count the Page Number should remain the same\n    // Although pagination control should only display the active page number\n    cy.testJsontextclear(\"totalrecords\");\n    cy.get(\".rc-pagination .rc-pagination-item-1\").should(\"not.exist\");\n    cy.get(\".rc-pagination .rc-pagination-item-2\").should(\"not.exist\");\n    cy.get(\".rc-pagination .rc-pagination-item-3\").should(\"not.exist\");\n\n    //When I reduce the total record count, it should revert to the next max page number and trigger on page change\n    cy.updateCodeInput(\".t--property-control-totalrecords\", `{{3}}`);\n    cy.wait(200);\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"1\");\n    cy.get(commonlocators.toastmsg).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":244,"column":22,"index":10483},"line":244,"code":"  it(\"excludeForAirgap\", \"6. no of items rendered should be equal to page size\", () => {\n    cy.NavigateToDatasourceEditor();\n\n    // Click on sample(mock) user database.\n    cy.get(datasource.mockUserDatabase).click();\n\n    // Choose the first data source which consists of users keyword & Click on the \"New query +\"\" button\n    cy.get(`${datasource.datasourceCard}`).filter(\":contains('Users')\").first().within(() => {\n      cy.get(`${datasource.createQuery}`).click({\n        force: true\n      });\n    });\n\n    // Click the editing field\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n\n    // Click the editing field\n    cy.get(queryLocators.queryNameField).type(\"Query2\");\n\n    // switching off Use Prepared Statement toggle\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n\n    //.1: Click on Write query area\n    cy.get(queryLocators.templateMenu).click();\n    cy.xpath(queryLocators.query).click({\n      force: true\n    });\n\n    // writing query to get the schema\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users LIMIT 20;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.testJsontext(\"items\", \"{{Query2.data}}\");\n    cy.wait(1000);\n\n    // Check if container no of containers are still 3\n    cy.get(publishLocators.containerWidget).should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["List widget v2 - Basic server side data tests"],"updatePoint":{"line":294,"column":12,"index":12038},"line":294,"code":"  it(\"airgap\", \"6. no of items rendered should be equal to page size - airgap\", () => {\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.wait(1000);\n    cy.get(datasource.createQuery).click();\n    // Click the editing field\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n\n    // Click the editing field\n    cy.get(queryLocators.queryNameField).type(\"Query2\");\n\n    // switching off Use Prepared Statement toggle\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n\n    //.1: Click on Write query area\n    cy.get(queryLocators.templateMenu).click();\n    cy.xpath(queryLocators.query).click({\n      force: true\n    });\n\n    // writing query to get the schema\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users LIMIT 20;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.testJsontext(\"items\", \"{{Query2.data}}\");\n    cy.wait(1000);\n\n    // Check if container no of containers are still 3\n    cy.get(publishLocators.containerWidget).should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_BasicServerSideData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. can open property pane of container widget","suites":["Listv2 - Container widget"],"updatePoint":{"line":7,"column":51,"index":311},"line":7,"code":"  it(\"1. can open property pane of container widget\", () => {\n    cy.openPropertyPaneByWidgetName(\"Container1\", \"containerwidget\");\n    cy.get(\".t--propertypane\").contains(\"Container1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. currentItem can be used in the container","suites":["Listv2 - Container widget"],"updatePoint":{"line":11,"column":49,"index":502},"line":11,"code":"  it(\"2. currentItem can be used in the container\", () => {\n    const colors = [\"rgb(0, 0, 255)\", \"rgb(0, 128, 0)\", \"rgb(255, 0, 0)\"];\n    cy.openPropertyPaneByWidgetName(\"Container1\", \"containerwidget\");\n\n    // Open style table\n    cy.get(commonlocators.propertyStyle).first().click({\n      force: true\n    });\n    cy.get(\".t--property-control-backgroundcolor\").find(\".t--js-toggle\").click();\n    cy.testJsontext(\"backgroundcolor\", \"{{currentItem.name}}\");\n    cy.get('div[type=\"CONTAINER_WIDGET\"]').each(($el, index) => {\n      cy.wrap($el).should(\"have.css\", \"background-color\", colors[index]);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate Copy paste action","suites":["List widget v2 Copy and Paste"],"updatePoint":{"line":4,"column":35,"index":234},"line":4,"code":"  it(\"1. Validate Copy paste action\", () => {\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPane(\"imagewidget\");\n    cy.get(commonlocators.PropertyPaneSearchInput).type(\"border\");\n    cy.get(commonlocators.BorderRadius0px).click({\n      force: true\n    });\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    cy.wait(500);\n    cy.get('[id=\"div-selection-0\"]').click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\".t--draggable-listwidgetv2\").should(\"have.length\", 2);\n    cy.get(\".t--draggable-imagewidget\").should(\"have.length\", 6);\n    cy.get(\".t--widget-textwidget span:contains('Blue')\").should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Copy_Paste_Delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Delete action","suites":["List widget v2 Copy and Paste"],"updatePoint":{"line":26,"column":31,"index":1090},"line":26,"code":"  it(\"2. Validate Delete action\", () => {\n    // Represents the toast message is closed\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.get(\"[data-testid='t--delete-widget']\").click({\n      force: true\n    });\n    cy.get(\".Toastify__toast-body\").eq(0).contains(\"List1 is removed\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Copy_Paste_Delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. is present in the property pane","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":42,"column":40,"index":1498},"line":42,"code":"  it(\"1. is present in the property pane\", () => {\n    cy.addDsl(simpleListDSL);\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.get(`${propertyControl}-dataidentifier`).should(\"exist\").contains(\"Please select an option\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. shows list of keys present in list data","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":47,"column":48,"index":1735},"line":47,"code":"  it(\"2. shows list of keys present in list data\", () => {\n    const keys = [\"id\", \"name\", \"img\"];\n    cy.openPropertyPane(\"listwidgetv2\");\n\n    // clicking on the data identifier dropdown\n    cy.get(`${propertyControl}-dataidentifier`).find(\".rc-select-selection-search\").last().click({\n      force: true\n    });\n    cy.wait(250);\n\n    // check if all the keys are present\n    cy.get(\".rc-select-item-option-content > span\").should(\"have.length\", 3).then($el => {\n      // we get a list of jQuery elements\n      // convert the jQuery object into a plain array\n      return Cypress.$.makeArray($el)\n      // extract inner text from each\n      .map(el => el.innerText);\n    }).should(\"deep.equal\", keys);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. on selection of key from dropdown, it should show same number of rows","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":66,"column":78,"index":2475},"line":66,"code":"  it(\"3. on selection of key from dropdown, it should show same number of rows\", () => {\n    cy.openPropertyPane(\"listwidgetv2\");\n\n    // clicking on the data identifier dropdown\n    cy.get(`${propertyControl}-dataidentifier`).find(\".rc-select-selection-search\").last().click({\n      force: true\n    });\n    cy.wait(250);\n    cy.get(\".t--dropdown-option\").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(widgetsPage.containerWidget).should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. enabling the JS mode, it should prefill with currentItem","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":80,"column":65,"index":2951},"line":80,"code":"  it(\"4. enabling the JS mode, it should prefill with currentItem\", () => {\n    cy.get(`${propertyControl}-dataidentifier`).find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.get(`${propertyControl}-dataidentifier`).find(\".CodeMirror .CodeMirror-code\").contains(`{{ currentItem[\"id\"] }}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. when given composite key, should produce a valid array","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":86,"column":63,"index":3257},"line":86,"code":"  it(\"5. when given composite key, should produce a valid array\", () => {\n    const keys = [\"001_Blue_0_ABC\", \"002_Green_1_ABC\", \"003_Red_2_ABC\"];\n    cy.get(`${propertyControl}-dataidentifier`).find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"dataidentifier\", \"{{currentItem.id + '_' + currentItem.name + '_' + currentIndex }}_ABC\");\n    cy.wait(1000);\n    keys.forEach(key => {\n      cy.validateEvaluatedValue(key);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. with large data set and data identifier set, the rows should render","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":97,"column":76,"index":3730},"line":97,"code":"  it(\"6. with large data set and data identifier set, the rows should render\", () => {\n    cy.addDsl(simpleListWithLargeDataDSL);\n    cy.openPropertyPane(\"listwidgetv2\");\n\n    // clicking on the data identifier dropdown\n    cy.get(`${propertyControl}-dataidentifier`).find(\".rc-select-selection-search\").last().click({\n      force: true\n    });\n    cy.wait(250);\n    cy.get(\".t--dropdown-option\").first().click({\n      force: true\n    });\n    cy.get(widgetsPage.containerWidget).should(\"have.length\", 2);\n    cy.get(\".rc-pagination\").find(\"a\").contains(\"2\").click({\n      force: true\n    });\n    cy.get(widgetsPage.containerWidget).should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. non unique data identifier should throw error","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":115,"column":54,"index":4372},"line":115,"code":"  it(\"7. non unique data identifier should throw error\", () => {\n    cy.openPropertyPane(\"listwidgetv2\");\n\n    // clicking on the data identifier dropdown\n    cy.get(`${propertyControl}-dataidentifier`).find(\".rc-select-selection-search\").last().click({\n      force: true\n    });\n    cy.wait(250);\n    cy.get(\".t--dropdown-option\").last().click({\n      force: true\n    });\n    cy.get(widgetsPage.containerWidget).should(\"have.length\", 2);\n\n    // click on debugger icon\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(\".debugger-list\").contains(\"This data identifier is evaluating to a duplicate value. Please use an identifier that evaluates to a unique value.\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. pagination should work for non unique data identifier","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":134,"column":62,"index":5105},"line":134,"code":"  it(\"8. pagination should work for non unique data identifier\", () => {\n    cy.get(\".rc-pagination\").find(\"a\").contains(\"2\").click({\n      force: true\n    });\n    cy.get(widgetsPage.containerWidget).should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Widgets get displayed when PrimaryKey doesn't exist - SSP","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":140,"column":66,"index":5341},"line":140,"code":"  it(\"9. Widgets get displayed when PrimaryKey doesn't exist - SSP\", () => {\n    cy.addDsl(ListV2WithNullPrimaryKeyDSL);\n    cy.createAndFillApi(\"https://api.punkapi.com/v2/beers?page={{List1.pageNo}}&per_page={{List1.pageSize}}\", \"\");\n    cy.RunAPI();\n    _.entityExplorer.SelectEntityByName(\"List1\");\n    cy.openPropertyPaneByWidgetName(\"Text2\", \"textwidget\");\n    cy.testJsontext(\"text\", \"{{currentIndex}}\");\n    cy.get(`${widgetSelector(\"Text2\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `0`);\n    cy.get(commonlocators.listPaginateNextButton).first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(`${widgetSelector(\"Text2\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", \"0\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Widgets get displayed when PrimaryKey doesn't exist - Client-Side Pagination","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":154,"column":86,"index":6104},"line":154,"code":"  it(\"10. Widgets get displayed when PrimaryKey doesn't exist - Client-Side Pagination\", () => {\n    cy.openPropertyPaneByWidgetName(\"Text4\", \"textwidget\");\n    cy.testJsontext(\"text\", \"{{currentIndex}}\");\n    cy.get(`${widgetSelector(\"Text4\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `0`);\n    cy.get(commonlocators.listPaginateNextButton).eq(1).click({\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Text4\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `1`);\n    cy.get(commonlocators.listPaginateNextButton).eq(1).click({\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Text4\")} ${commonlocators.bodyTextStyle}`).first().should(\"have.text\", `2`);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Non unique data identifier should throw error- (data type issue)","suites":["List v2 - Data Identifier property"],"updatePoint":{"line":167,"column":74,"index":6805},"line":167,"code":"  it(\"11. Non unique data identifier should throw error- (data type issue)\", () => {\n    cy.openPropertyPaneByWidgetName(\"List2\", \"listwidgetv2\");\n    testJsontextClear(\"items\");\n    cy.testJsontext(\"items\", JSON.stringify(data));\n\n    // clicking on the data identifier dropdown\n    testJsontextClear(\"dataidentifier\");\n    cy.get(`${propertyControl}-dataidentifier`).find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.wait(250);\n    cy.get(`${propertyControl}-dataidentifier`).find(\".rc-select-selection-search\").last().click({\n      force: true\n    });\n    cy.wait(250);\n    cy.get(\".t--dropdown-option\").contains(\"same\").last().click({});\n    cy.get(`${widgetSelector(\"List2\")} ${widgetsPage.containerWidget}`).should(\"have.length\", 1);\n\n    //Open debugger by clicking debugger icon in canvas.\n    _.debuggerHelper.ClickDebuggerIcon();\n    cy.get(\".debugger-list\").contains(\"This data identifier is evaluating to a duplicate value. Please use an identifier that evaluates to a unique value.\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_dataIdentifierProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Loads the Page with the default Selected Item","suites":["List widget v2 defaultSelectedItem"],"updatePoint":{"line":43,"column":54,"index":1777},"line":43,"code":"  it(\"1. Loads the Page with the default Selected Item\", () => {\n    // Loads to page 2\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-imagewidget`).should(\"have.length\", 3));\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\");\n    cy.get(`${widgetSelector(\"SelectedItem\")} ${commonlocators.bodyTextStyle}`).then(val => {\n      const data = JSON.parse(val.text());\n      cy.wrap(data).should(\"deep.equal\", items[4]);\n    });\n\n    //Change Default Selected Item\n    cy.openPropertyPane(\"listwidgetv2\");\n    testJsontextClear(\"defaultselecteditem\");\n    cy.testJsontext(\"defaultselecteditem\", \"001\");\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-imagewidget`).should(\"have.length\", 3));\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"1\");\n    cy.get(`${widgetSelector(\"SelectedItem\")} ${commonlocators.bodyTextStyle}`).then(val => {\n      const data = JSON.parse(val.text());\n      cy.wrap(data).should(\"deep.equal\", items[0]);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_defaultSelectedItem_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. use query data","suites":["List widget v2 defaultSelectedItem"],"updatePoint":{"line":63,"column":23,"index":2834},"line":63,"code":"  it(\"2. use query data\", () => {\n    // Create sample(mock) user database.\n    setUpDataSource();\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-imagewidget`).should(\"have.length\", 3));\n\n    //Change Default Selected Item\n    cy.openPropertyPane(\"listwidgetv2\");\n    testJsontextClear(\"items\");\n    cy.testJsontext(\"items\", \"{{Api1.data}}\");\n    testJsontextClear(\"defaultselecteditem\");\n    cy.testJsontext(\"defaultselecteditem\", \"4\");\n    cy.waitUntil(() => cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\"));\n    cy.get(`${widgetSelector(\"SelectedItem\")} ${commonlocators.bodyTextStyle}`).then(val => {\n      const data = JSON.parse(val.text());\n      cy.wrap(data?.id).should(\"deep.equal\", 4);\n    });\n\n    // In view Mode\n\n    cy.PublishtheApp();\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-imagewidget`).should(\"have.length\", 3));\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\");\n    cy.get(`${widgetSelector(\"SelectedItem\")} ${commonlocators.bodyTextStyle}`).then(val => {\n      const data = JSON.parse(val.text());\n      cy.wrap(data?.id).should(\"deep.equal\", 4);\n    });\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_defaultSelectedItem_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Setup List Widget","suites":["List widget v2 Reset List widget and Refresh Data"],"updatePoint":{"line":95,"column":26,"index":4218},"line":95,"code":"  it(\"1. Setup List Widget\", () => {\n    cy.openPropertyPane(\"listwidgetv2\");\n    testJsontextClear(\"defaultselecteditem\");\n    cy.testJsontext(\"defaultselecteditem\", \"4\");\n    cy.waitUntil(() => cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\"));\n    verifyDefaultItem();\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_defaultSelectedItem_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Reset List Widget","suites":["List widget v2 Reset List widget and Refresh Data"],"updatePoint":{"line":102,"column":26,"index":4518},"line":102,"code":"  it(\"2. Reset List Widget\", () => {\n    // Select a new List Item on another page\n    cy.get(`${widgetSelector(\"List1\")} .rc-pagination-item-1`).click({\n      force: true\n    });\n    cy.waitUntil(() => cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"1\"));\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(0).click({\n      force: true\n    });\n    cy.wait(400);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"SelectedItem\")} ${commonlocators.bodyTextStyle}`).then(val => {\n      const data = JSON.parse(val.text());\n      cy.wrap(data?.id).should(\"deep.equal\", 1);\n    }));\n    cy.get(`${widgetSelector(\"ResetWidget\")} button`).click({\n      force: true\n    });\n    cy.waitUntil(() => cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\"));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-imagewidget`).should(\"have.length\", 3));\n    cy.wait(200);\n    verifyDefaultItem();\n\n    //Move to another page and verify the value is cached.\n    cy.get(`${widgetSelector(\"List1\")} .rc-pagination-item-4`).click({\n      force: true\n    });\n    cy.waitUntil(() => cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"4\"));\n    verifyDefaultItem();\n\n    // Refresh Data and see the Default Item remains the same\n    cy.get(`${widgetSelector(\"RefreshData\")} button`).click({\n      force: true\n    });\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-imagewidget`).should(\"have.length\", 3));\n    cy.wait(200);\n    verifyDefaultItem();\n\n    // Select another container on the Same Page and reset the list widget\n\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} `).last().click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(`${widgetSelector(\"ResetWidget\")} button`).click({\n      force: true\n    });\n    cy.wait(500);\n    verifyDefaultItem();\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_defaultSelectedItem_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. List widget V2 with currentItem","suites":["List widget v2 Evaluated Popup"],"updatePoint":{"line":2,"column":40,"index":92},"line":2,"code":"  it(\"1. List widget V2 with currentItem\", () => {\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    [[\"{{null}}\", \"[]\"]].forEach(([input, expected]) => {\n      cy.updateCodeInput(\".t--property-control-items\", input);\n      cy.wait(500);\n      cy.validateEvaluatedValue(expected);\n    });\n    cy.updateCodeInput(\".t--property-control-items\", `{{[{\n        id: \"001\",\n        name: \"Blue\",\n        img: \"https://assets.appsmith.com/widgets/default.png\",\n      },\n      {\n        id: \"002\",\n        name: \"Green\",\n        img: \"https://assets.appsmith.com/widgets/default.png\",\n      },\n      {\n        id: \"003\",\n        name: \"Red\",\n        img: \"https://assets.appsmith.com/widgets/default.png\",\n      }]}}`);\n    cy.openPropertyPaneByWidgetName(\"Text1\", \"textwidget\");\n    [[\"{{currentItem.name}}\", \"Blue\"], [\"{{currentItem.id}}\", \"001\"], [\"{{currentItem.name}}_{{currentIndex}}\", \"Blue_0\"], [\"{{1000}}\", \"1000\"], ['{{(() => \"Text Widget\")()}}', \"Text Widget\"], [\"NewLine\\n{{currentItem.name}}\", \"NewLine\\nBlue\"], [`\\{{currentItem.name}}`, `\\Blue`], [`{{\n          (function(){return true;})\n          ()}}\n        `, \"true\"]].forEach(([input, expected]) => {\n      cy.updateCodeInput(\".t--property-control-text\", input);\n      cy.wait(500);\n      cy.validateEvaluatedValue(expected);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_EvaluatedPopup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. List widget V2 with error input","suites":["List widget v2 Evaluated Popup"],"updatePoint":{"line":37,"column":40,"index":1427},"line":37,"code":"  it(\"2. List widget V2 with error input\", () => {\n    cy.openPropertyPaneByWidgetName(\"Text1\", \"textwidget\");\n    [[\"{{currentItem}}\", \"This value does not evaluate to type string\"], [\"{{Text}}\", \"This value does not evaluate to type string\"]].forEach(([input, expected]) => {\n      cy.updateCodeInput(\".t--property-control-text\", input);\n      cy.wait(500);\n      cy.evaluateErrorMessage(expected);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_EvaluatedPopup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. simple list widget should have access to currentItem, currentIndex and currentView","suites":["Listv2 - Event bindings"],"updatePoint":{"line":44,"column":91,"index":1420},"line":44,"code":"  it(\"1. simple list widget should have access to currentItem, currentIndex and currentView\", () => {\n    cy.addDsl(simpleListWithInputAndButtonDSL);\n    cy.wait(4000);\n    // Open the property pane of button in the inner list widget\n    cy.openPropertyPane(\"buttonwidget\");\n\n    // Enter text in the parent list widget's text input\n    cy.get(widgetSelector(\"Input1\")).find(\"input\").type(\"Input\", {\n      force: true\n    });\n\n    // click the button on inner list 1st row.\n    cy.get(widgetSelector(\"Button1\")).find(\"button\").click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Input _ 000 _ 0\");\n\n    /**\n     *  update value of currentView\n     */\n\n    // Enter text in the parent list widget's text input\n    cy.get(widgetSelector(\"Input1\")).find(\"input\").clear().type(\"Updated Input\");\n\n    // click the button on inner list 1st row.\n    cy.get(widgetSelector(\"Button1\")).find(\"button\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.toastmsg).contains(\"Updated Input _ 000 _ 0\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_event_bindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. widget events should get defined using action selector","suites":["Listv2 - Event bindings"],"updatePoint":{"line":75,"column":63,"index":2444},"line":75,"code":"  it(\"2. widget events should get defined using action selector\", () => {\n    cy.addDsl(simpleListWithInputAndButtonDSL);\n    cy.wait(2000);\n\n    // wait for list widget to load\n    cy.get(\".t--widget-listwidgetv2\", {\n      timeout: LOAD_TIMEOUT\n    });\n    // Wait for List widget to load other items\n    cy.get(\".t--widget-buttonwidget\", {\n      timeout: LOAD_TIMEOUT\n    }).should(\"have.length.at.least\", 2);\n    cy.openPropertyPane(\"buttonwidget\");\n\n    // Clear the onClick event binding\n    cy.testJsonTextClearMultiline(\"onclick\");\n    // Disable the JS mode\n    cy.get(toggleJSButton(\"onclick\")).click({\n      force: true\n    });\n\n    // Define action\n    cy.addAction(\"{{currentItem.name}}\", \"onClick\");\n    cy.wait(2000);\n\n    // Find the button and click\n    cy.get(widgetSelector(\"Button1\")).find(\"button\").click({\n      force: true\n    });\n\n    // Verify alert\n    cy.get(commonlocators.toastmsg).contains(listData[0].name);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_event_bindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. using client side data","suites":["List widget v2 - meta hydration tests"],"updatePoint":{"line":57,"column":31,"index":2081},"line":57,"code":"  it(\"1. using client side data\", () => {\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).should(\"have.length\", 3);\n    //FirstPage\n    //   First Row\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    changeValueOfWidget(\"selectwidget\", \"Green\", 0);\n    changeValueOfWidget(\"inputwidgetv2\", \"First\", 0);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 0);\n\n    //   Second Row\n    changeValueOfWidget(\"selectwidget\", \"Blue\", 1);\n    changeValueOfWidget(\"inputwidgetv2\", \"Second\", 1);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 1);\n\n    //   Third Row\n    changeValueOfWidget(\"selectwidget\", \"Red\", 2);\n    changeValueOfWidget(\"inputwidgetv2\", \"Third\", 2);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 2);\n\n    //   Go to next page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n\n    //   SecondPage\n    //   First Row\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    changeValueOfWidget(\"selectwidget\", \"Blue\", 0);\n    changeValueOfWidget(\"inputwidgetv2\", \"Fourth\", 0);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 0);\n\n    //   Second Row\n    changeValueOfWidget(\"selectwidget\", \"Red\", 1);\n    changeValueOfWidget(\"inputwidgetv2\", \"Fifth\", 1);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 1);\n\n    //   Third Row\n    changeValueOfWidget(\"selectwidget\", \"Green\", 2);\n    changeValueOfWidget(\"inputwidgetv2\", \"Sixth\", 2);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 2);\n\n    //   Go to previous page\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button span.bp3-button-text`).first().invoke(\"text\").then($selectedValue => {\n      expect($selectedValue).to.eq(\"Green\");\n    }));\n\n    //Validate values in FirstPage\n    //   First Row\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    verifyValueOfWidget(\"selectwidget\", \"Green\", 0);\n    verifyValueOfWidget(\"inputwidgetv2\", \"First\", 0);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 0);\n\n    //   Second Row\n    verifyValueOfWidget(\"selectwidget\", \"Blue\", 1);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Second\", 1);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 1);\n\n    //   Third Row\n    verifyValueOfWidget(\"selectwidget\", \"Red\", 2);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Third\", 2);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 2);\n\n    //   Go to next page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button span.bp3-button-text`).first().invoke(\"text\").then($selectedValue => {\n      expect($selectedValue).to.eq(\"Blue\");\n    }));\n\n    //Validate values in SecondPage\n    //   First Row\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    verifyValueOfWidget(\"selectwidget\", \"Blue\", 0);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Fourth\", 0);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 0);\n\n    //   Second Row\n    verifyValueOfWidget(\"selectwidget\", \"Red\", 1);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Fifth\", 1);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 1);\n\n    //   Third Row\n    verifyValueOfWidget(\"selectwidget\", \"Green\", 2);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Sixth\", 2);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Meta_Hydration_ClientSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. using client side data in view mode","suites":["List widget v2 - meta hydration tests"],"updatePoint":{"line":154,"column":44,"index":6134},"line":154,"code":"  it(\"2. using client side data in view mode\", () => {\n    cy.PublishtheApp();\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).should(\"have.length\", 3);\n    //FirstPage\n    //   First Row\n    changeValueOfWidget(\"selectwidget\", \"Green\", 0);\n    changeValueOfWidget(\"inputwidgetv2\", \"First\", 0);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 0);\n\n    //   Second Row\n    changeValueOfWidget(\"selectwidget\", \"Blue\", 1);\n    changeValueOfWidget(\"inputwidgetv2\", \"Second\", 1);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 1);\n\n    //   Third Row\n    changeValueOfWidget(\"selectwidget\", \"Red\", 2);\n    changeValueOfWidget(\"inputwidgetv2\", \"Third\", 2);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 2);\n\n    //   Go to next page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n\n    //   SecondPage\n    //   First Row\n    changeValueOfWidget(\"selectwidget\", \"Blue\", 0);\n    changeValueOfWidget(\"inputwidgetv2\", \"Fourth\", 0);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 0);\n\n    //   Second Row\n    changeValueOfWidget(\"selectwidget\", \"Red\", 1);\n    changeValueOfWidget(\"inputwidgetv2\", \"Fifth\", 1);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 1);\n\n    //   Third Row\n    changeValueOfWidget(\"selectwidget\", \"Green\", 2);\n    changeValueOfWidget(\"inputwidgetv2\", \"Sixth\", 2);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 2);\n\n    //   Go to previous page\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n\n    //Validate values in FirstPage\n    //   First Row\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button span.bp3-button-text`).first().invoke(\"text\").then($selectedValue => {\n      expect($selectedValue).to.eq(\"Green\");\n    }));\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    verifyValueOfWidget(\"selectwidget\", \"Green\", 0);\n    verifyValueOfWidget(\"inputwidgetv2\", \"First\", 0);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 0);\n\n    //   Second Row\n    verifyValueOfWidget(\"selectwidget\", \"Blue\", 1);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Second\", 1);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 1);\n\n    //   Third Row\n    verifyValueOfWidget(\"selectwidget\", \"Red\", 2);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Third\", 2);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 2);\n\n    //   Go to next page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n\n    //Validate values in SecondPage\n    //   First Row\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button span.bp3-button-text`).first().invoke(\"text\").then($selectedValue => {\n      expect($selectedValue).to.eq(\"Blue\");\n    }));\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    verifyValueOfWidget(\"selectwidget\", \"Blue\", 0);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Fourth\", 0);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 0);\n\n    //   Second Row\n    verifyValueOfWidget(\"selectwidget\", \"Red\", 1);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Fifth\", 1);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 1);\n\n    //   Third Row\n    verifyValueOfWidget(\"selectwidget\", \"Green\", 2);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Sixth\", 2);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 2);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Meta_Hydration_ClientSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. setup serverside data","suites":["List widget v2 - meta hydration tests"],"updatePoint":{"line":67,"column":30,"index":2428},"line":67,"code":"  it(\"1. setup serverside data\", () => {\n    cy.createAndFillApi(\"http://host.docker.internal:5001/v1/mock-api?records=20&page={{List1.pageNo}}&size={{List1.pageSize}}\", \"\");\n    cy.RunAPI();\n    _.entityExplorer.SelectEntityByName(\"List1\");\n    cy.wait(1000);\n    cy.openPropertyPane(\"listwidgetv2\");\n    testJsontextClear(\"items\");\n    cy.testJsontext(\"items\", \"{{Api1.data}}\");\n    cy.togglebar(commonlocators.serverSidePaginationCheckbox);\n    cy.get(toggleJSButton(\"onpagechange\")).click({\n      force: true\n    });\n    cy.testJsontext(\"onpagechange\", \"{{Api1.run()}}\");\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Meta_Hydration_ServerSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. using server side data","suites":["List widget v2 - meta hydration tests"],"updatePoint":{"line":82,"column":31,"index":3105},"line":82,"code":"  it(\"2. using server side data\", () => {\n    //FirstPage\n    //   First Row\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    changeValueOfWidget(\"selectwidget\", \"Green\", 0);\n    changeValueOfWidget(\"inputwidgetv2\", \"First\", 0);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 0);\n\n    //   Second Row\n    changeValueOfWidget(\"selectwidget\", \"Blue\", 1);\n    changeValueOfWidget(\"inputwidgetv2\", \"Second\", 1);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 1);\n\n    //   Third Row\n    changeValueOfWidget(\"selectwidget\", \"Red\", 2);\n    changeValueOfWidget(\"inputwidgetv2\", \"Third\", 2);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 2);\n\n    //   Go to next page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(0).within(() => {\n      cy.waitUntil(() => cy.get(\".rc-select-selection-overflow-item .remove-icon\").should(\"exist\"));\n    });\n\n    //   SecondPage\n    //   First Row\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    changeValueOfWidget(\"selectwidget\", \"Blue\", 0);\n    changeValueOfWidget(\"inputwidgetv2\", \"Fourth\", 0);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 0);\n\n    //   Second Row\n    changeValueOfWidget(\"selectwidget\", \"Red\", 1);\n    changeValueOfWidget(\"inputwidgetv2\", \"Fifth\", 1);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 1);\n\n    //   Third Row\n    changeValueOfWidget(\"selectwidget\", \"Green\", 2);\n    changeValueOfWidget(\"inputwidgetv2\", \"Sixth\", 2);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 2);\n\n    //   Go to previous page\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n\n    //Validate values in FirstPage\n    //   First Row\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .rc-select-selection-overflow-item .remove-icon`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button span.bp3-button-text`).first().invoke(\"text\").then($selectedValue => {\n      cy.waitUntil(() => expect($selectedValue).to.eq(\"Green\"));\n    }), {\n      timeout: 10000\n    });\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    verifyValueOfWidget(\"selectwidget\", \"Green\", 0);\n    verifyValueOfWidget(\"inputwidgetv2\", \"First\", 0);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 0);\n\n    //   Second Row\n    verifyValueOfWidget(\"selectwidget\", \"Blue\", 1);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Second\", 1);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 1);\n\n    //   Third Row\n    verifyValueOfWidget(\"selectwidget\", \"Red\", 2);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Third\", 2);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 2);\n\n    //   Go to next page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.wait(300);\n\n    //Validate values in SecondPage\n    //   First Row\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .rc-select-selection-overflow-item .remove-icon`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button span.bp3-button-text`).first().invoke(\"text\").then($selectedValue => {\n      cy.waitUntil(() => expect($selectedValue).to.eq(\"Blue\"));\n    }), {\n      timeout: 10000\n    });\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    verifyValueOfWidget(\"selectwidget\", \"Blue\", 0);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Fourth\", 0);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 0);\n\n    //   Second Row\n    verifyValueOfWidget(\"selectwidget\", \"Red\", 1);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Fifth\", 1);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 1);\n\n    //   Third Row\n    verifyValueOfWidget(\"selectwidget\", \"Green\", 2);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Sixth\", 2);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Meta_Hydration_ServerSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. using server side data in view mode","suites":["List widget v2 - meta hydration tests"],"updatePoint":{"line":187,"column":44,"index":7686},"line":187,"code":"  it(\"3. using server side data in view mode\", () => {\n    cy.PublishtheApp();\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).should(\"have.length\", 3);\n    //FirstPage\n    //   First Row\n    changeValueOfWidget(\"selectwidget\", \"Green\", 0);\n    changeValueOfWidget(\"inputwidgetv2\", \"First\", 0);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 0);\n\n    //   Second Row\n    changeValueOfWidget(\"selectwidget\", \"Blue\", 1);\n    changeValueOfWidget(\"inputwidgetv2\", \"Second\", 1);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 1);\n\n    //   Third Row\n    changeValueOfWidget(\"selectwidget\", \"Red\", 2);\n    changeValueOfWidget(\"inputwidgetv2\", \"Third\", 2);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 2);\n\n    //   Go to next page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(0).within(() => {\n      cy.waitUntil(() => cy.get(\".rc-select-selection-overflow-item .remove-icon\").should(\"exist\"));\n    });\n\n    //   SecondPage\n    //   First Row\n    changeValueOfWidget(\"selectwidget\", \"Blue\", 0);\n    changeValueOfWidget(\"inputwidgetv2\", \"Fourth\", 0);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 0);\n\n    //   Second Row\n    changeValueOfWidget(\"selectwidget\", \"Red\", 1);\n    changeValueOfWidget(\"inputwidgetv2\", \"Fifth\", 1);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 1);\n\n    //   Third Row\n    changeValueOfWidget(\"selectwidget\", \"Green\", 2);\n    changeValueOfWidget(\"inputwidgetv2\", \"Sixth\", 2);\n    changeValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 2);\n\n    //   Go to previous page\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n\n    //Validate values in FirstPage\n    //   First Row\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .rc-select-selection-overflow-item .remove-icon`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button span.bp3-button-text`).first().invoke(\"text\").then($selectedValue => {\n      cy.waitUntil(() => expect($selectedValue).to.eq(\"Green\"));\n    }), {\n      timeout: 10000\n    });\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    verifyValueOfWidget(\"selectwidget\", \"Green\", 0);\n    verifyValueOfWidget(\"inputwidgetv2\", \"First\", 0);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 0);\n\n    //   Second Row\n    verifyValueOfWidget(\"selectwidget\", \"Blue\", 1);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Second\", 1);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 1);\n\n    //   Third Row\n    verifyValueOfWidget(\"selectwidget\", \"Red\", 2);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Third\", 2);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 2);\n\n    //   Go to next page\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n\n    //Validate values in SecondPage\n    //   First Row\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .rc-select-selection-overflow-item .remove-icon`).should(\"have.length\", 3));\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} .t--widget-selectwidget button span.bp3-button-text`).first().invoke(\"text\").then($selectedValue => {\n      cy.waitUntil(() => expect($selectedValue).to.eq(\"Blue\"));\n    }), {\n      timeout: 10000\n    });\n    cy.get(`${widgetSelector(\"List1\")}`).scrollIntoView();\n    verifyValueOfWidget(\"selectwidget\", \"Blue\", 0);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Fourth\", 0);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Blue\"], 0);\n\n    //   Second Row\n    verifyValueOfWidget(\"selectwidget\", \"Red\", 1);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Fifth\", 1);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Red\"], 1);\n\n    //   Third Row\n    verifyValueOfWidget(\"selectwidget\", \"Green\", 2);\n    verifyValueOfWidget(\"inputwidgetv2\", \"Sixth\", 2);\n    verifyValueOfWidget(\"multiselectwidgetv2\", [\"Green\"], 2);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Meta_Hydration_ServerSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. nested list - inner widget should have access to currentItem, currentIndex, currentView and level_1","suites":["Listv2 - Event bindings spec"],"updatePoint":{"line":6,"column":108,"index":460},"line":6,"code":"  it(\"1. nested list - inner widget should have access to currentItem, currentIndex, currentView and level_1\", () => {\n    cy.addDsl(nestedListDSL);\n    cy.wait(4000);\n    // Open the property pane of button in the inner list widget\n    cy.openPropertyPane(\"buttonwidget\");\n\n    // Enable JS mode for onClick\n    cy.get(toggleJSButton(\"onclick\")).click({\n      force: true\n    });\n    cy.testJsontext(\"onclick\", \"{{showAlert(`${level_1.currentView.Text1.text} _ ${level_1.currentItem.id} _ ${level_1.currentIndex} _ ${level_1.currentView.Input1.text} _ ${currentView.Input2.text}`)}}\");\n    // Enter text in the parent list widget's text input\n    cy.get(widgetSelector(\"Input1\")).find(\"input\").type(\"outer input\");\n\n    // Enter text in the child list widget's text input in first row\n    cy.get(widgetSelector(\"Input2\")).find(\"input\").type(\"inner input\");\n\n    // click the button on inner list 1st row.\n    cy.get(widgetSelector(\"Button3\")).find(\"button\").click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Blue _ 001 _ 0 _ outer input _ inner input\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Nested_EventBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. nested list - inner widget should get updated values of currentView and level_1","suites":["Listv2 - Event bindings spec"],"updatePoint":{"line":29,"column":88,"index":1531},"line":29,"code":"  it(\"2. nested list - inner widget should get updated values of currentView and level_1\", () => {\n    // Enter text in the parent list widget's text input\n    cy.get(widgetSelector(\"Input1\")).find(\"input\").clear().type(\"outer input updated\");\n\n    // Enter text in the child list widget's text input in first row\n    cy.get(widgetSelector(\"Input2\")).find(\"input\").clear().type(\"inner input updated\");\n\n    // click the button on inner list 1st row.\n    cy.get(widgetSelector(\"Button3\")).find(\"button\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.toastmsg).contains(\"Blue _ 001 _ 0 _ outer input updated _ inner input updated\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_Nested_EventBindings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"a. Pasting - should show toast when nesting is greater than 3","suites":[" Nested List Widgets "],"updatePoint":{"line":24,"column":67,"index":1177},"line":24,"code":"  it(\"a. Pasting - should show toast when nesting is greater than 3\", function () {\n    cy.addDsl(dsl);\n    cy.openPropertyPaneByWidgetName(\"List1\", \"listwidgetv2\");\n    // Copy List1\n    cy.get(widgetsPage.copyWidget).click({\n      force: true\n    });\n    cy.wait(500);\n    //Paste inside List 1\n    cy.get(`${widgetSelector(\"List1\")} [type=\"CONTAINER_WIDGET\"]`).first().click({\n      force: true\n    }).type(`{${modifierKey}}{v}`);\n    cy.wait(500);\n\n    //Copy List 2 and Paste inside list 2\n    cy.openPropertyPaneByWidgetName(\"List2\", \"listwidgetv2\");\n    cy.get(widgetsPage.copyWidget).click({\n      force: true\n    });\n    cy.wait(500);\n    // Paste inside list 2\n    cy.get(`${widgetSelector(\"List2\")} [type=\"CONTAINER_WIDGET\"]`).first().click({\n      force: true\n    }).type(`{${modifierKey}}{v}`);\n    cy.wait(500);\n\n    //Now Both List1 and List2 are n-2 levels\n\n    //Copy List2 and Past in List 1\n    cy.openPropertyPaneByWidgetName(\"List2\", \"listwidgetv2\");\n    cy.get(widgetsPage.copyWidget).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(`${widgetSelector(\"List1Copy\")} [type=\"CONTAINER_WIDGET\"]`).first().click({\n      force: true\n    }).type(`{${modifierKey}}{v}`);\n    cy.wait(500);\n    cy.validateToastMessage(\"Cannot have more than 3 levels of nesting\");\n    cy.get(`${widgetSelector(\"List2Copy1\")}`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_nested_List_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"b. No cyclic dependency when using levelData in a child widget","suites":[" Nested List Widgets "],"updatePoint":{"line":65,"column":68,"index":2543},"line":65,"code":"  it(\"b. No cyclic dependency when using levelData in a child widget\", () => {\n    cy.dragAndDropToWidgetBySelector(\"textwidget\", '[data-widgetname-cy=\"List1\"] [type=\"CONTAINER_WIDGET\"]', {\n      x: 150,\n      y: 50\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{currentItem.name}}`);\n    cy.dragAndDropToWidgetBySelector(\"textwidget\", '[data-widgetname-cy=\"List1Copy\"]', {\n      x: 150,\n      y: 100\n    });\n    cy.testJsontextclear(\"text\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.\", {\n      force: true\n    });\n    checkAutosuggestion(\"Text1\", \"Object\");\n    checkAutosuggestion(\"List1Copy\", \"Object\");\n    cy.testJsontextclear(\"text\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.List1Copy.\", {\n      force: true\n    });\n    checkAutosuggestion(\"backgroundColor\", \"String\");\n    checkAutosuggestion(\"itemSpacing\", \"Number\");\n    checkAutosuggestion(\"isVisible\", \"Boolean\");\n    checkAutosuggestion(\"listData\", \"Array\");\n    checkAutosuggestion(\"pageNo\", \"Number\");\n    checkAutosuggestion(\"pageSize\", \"Number\");\n    cy.get(\".CodeMirror-hints\").each($el => {\n      cy.wrap($el).should(\"not.have.text\", \"currentItemsView\");\n    });\n    cy.get(\".CodeMirror-hints\").each($el => {\n      cy.wrap($el).should(\"not.have.text\", \"selectedItemView\");\n    });\n    cy.get(\".CodeMirror-hints\").each($el => {\n      cy.wrap($el).should(\"not.have.text\", \"triggeredItemView\");\n    });\n    cy.get(\".CodeMirror-hints\").contains(\"pageNo\").first().click({\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Text2\")} .bp3-ui-text span`).should(\"have.text\", \"1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_nested_List_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"c. Accessing CurrentView, SelectedItemView and TriggeredItemView from Sibling List widget","suites":[" Nested List Widgets "],"updatePoint":{"line":106,"column":95,"index":4274},"line":106,"code":"  it(\"c. Accessing CurrentView, SelectedItemView and TriggeredItemView from Sibling List widget\", () => {\n    cy.addDsl(nestedSiblingDsl);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"List2\")} ${containerWidgetSelector} .t--widget-imagewidget`).should(\"have.length\", 3));\n    cy.openPropertyPaneByWidgetName(\"Text4\", \"textwidget\");\n    cy.testJsontextclear(\"text\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.List3.currentItemsView\", {\n      force: true\n    });\n    cy.get(`${widgetSelector(\"Text4\")} ${commonlocators.bodyTextStyle}`).first().should(\"be.empty\");\n    cy.openPropertyPaneByWidgetName(\"Text4\", \"textwidget\");\n    cy.testJsontextclear(\"text\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{level_1.currentView.List2.currentItemsView\", {\n      force: true\n    });\n    cy.wait(300);\n    cy.get(`${widgetSelector(\"Text4\")} ${commonlocators.bodyTextStyle}`).first().should(\"be.empty\");\n    cy.openPropertyPaneByWidgetName(\"Text5\", \"textwidget\");\n    cy.testJsontextclear(\"text\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{List1.selectedItemView.List2.currentItemsView\", {\n      force: true\n    });\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector} `).first().click({\n      force: true\n    });\n    cy.wait(300);\n    cy.waitUntil(() => cy.get(`${widgetSelector(\"Text5\")} ${commonlocators.bodyTextStyle}`).first().contains(\"Text4\"));\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_nested_List_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. List widget V2 with onItemClick","suites":["List widget v2 onItemClick"],"updatePoint":{"line":52,"column":40,"index":1747},"line":52,"code":"  it(\"1. List widget V2 with onItemClick\", () => {\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.get(toggleJSButton(\"onitemclick\")).click({\n      force: true\n    });\n    cy.testJsontext(\"onitemclick\", \"{{showAlert('ListWidget_' + currentItem.name + '_' + currentIndex,'success')}}\");\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).first().click({\n      force: true\n    });\n    cy.validateToastMessage(\"ListWidget_Blue_0\");\n    cy.waitUntil(() => cy.get(commonlocators.toastmsg).should(\"not.be.visible\"));\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(1).click({\n      force: true\n    });\n    cy.validateToastMessage(\"ListWidget_Green_1\");\n    cy.waitUntil(() => cy.get(commonlocators.toastmsg).should(\"not.be.visible\"));\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(2).click({\n      force: true\n    });\n    cy.validateToastMessage(\"ListWidget_Red_2\");\n    cy.waitUntil(() => cy.get(commonlocators.toastmsg).should(\"not.be.visible\"));\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_onItemClick_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. List widget V2 with onItemClick should be triggered when child widget without event is clicked","suites":["List widget v2 onItemClick"],"updatePoint":{"line":78,"column":103,"index":2904},"line":78,"code":"  it(\"2. List widget V2 with onItemClick should be triggered when child widget without event is clicked\", () => {\n    cy.get(widgetSelector(\"Image1\")).first().click({\n      force: true\n    });\n    validateToastExist();\n    cy.get(widgetSelector(\"Text1\")).first().click({\n      force: true\n    });\n    validateToastExist();\n    deleteAllWidgetsInContainer();\n    dragAndDropToWidget(\"inputwidgetv2\");\n    cy.get(`${widgetSelector(\"Input1\")} input`).first().click({\n      force: true\n    });\n    validateToastDoestExist();\n    deleteAllWidgetsInContainer();\n    dragAndDropToWidget(\"selectwidget\");\n    cy.get(`${widgetSelector(\"Select1\")} button`).first().click({\n      force: true\n    });\n    validateToastDoestExist();\n    deleteAllWidgetsInContainer();\n    dragAndDropToWidget(\"buttonwidget\");\n    cy.get(`${widgetSelector(\"Button1\")} button`).first().click({\n      force: true\n    });\n    validateToastExist();\n    cy.get(commonlocators.toastBody).first().click();\n    cy.get(widgetsPage.toggleOnClick).click({\n      force: true\n    });\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{clearStore()}}\");\n    });\n    cy.wait(1000);\n    cy.get(`${widgetSelector(\"Button1\")} button`).first().click({\n      force: true\n    });\n    validateToastDoestExist();\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_onItemClick_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. List widget V2 with client side pagination","suites":["List widget V2 page number and page size"],"updatePoint":{"line":75,"column":51,"index":1396},"line":75,"code":"  it(\"1. List widget V2 with client side pagination\", () => {\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.testJsontext(\"items\", JSON.stringify(listData));\n    cy.wait(\"@updateLayout\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", `PageSize {{List1.pageSize}}`);\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.bodyTextStyle).first().should(\"have.text\", \"PageSize 4\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.wait(2000);\n    cy.testJsontext(\"text\", `Page Number {{List1.pageNo}}`);\n    cy.wait(2000);\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.bodyTextStyle).first().should(\"have.text\", \"Page Number 1\");\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.get(commonlocators.bodyTextStyle).first().should(\"have.text\", \"Page Number 2\");\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.get(commonlocators.deleteWidget).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_PageNo_PageSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. List widget V2 with server side pagination","suites":["List widget V2 page number and page size"],"updatePoint":{"line":98,"column":51,"index":2345},"line":98,"code":"  it(\"2. List widget V2 with server side pagination\", () => {\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontextclear(\"text\");\n    cy.testJsontext(\"text\", `PageSize {{List1.pageSize}}`);\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.bodyTextStyle).first().should(\"have.text\", \"PageSize 3\");\n\n    // toggle serversidepagination -> true\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.togglebar(\".t--property-control-serversidepagination input\");\n    cy.get(commonlocators.bodyTextStyle).first().should(\"have.text\", \"PageSize 2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_PageNo_PageSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["List widget V2 page number and page size"],"updatePoint":{"line":115,"column":22,"index":2990},"line":115,"code":"  it(\"excludeForAirgap\", \"3. should reset page no if higher than max when switched from server side to client side\", () => {\n    cy.addDsl(dslWithServerSide);\n    // Open Datasource editor\n    cy.wait(2000);\n    _.dataSources.CreateMockDB(\"Users\").then(dbName => {\n      _.dataSources.CreateQueryFromActiveTab(dbName, false);\n      _.agHelper.GetNClick(_.dataSources._templateMenuOption(\"Select\"));\n      _.dataSources.ToggleUsePreparedStatement(false);\n    });\n    // writing query to get the schema\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users OFFSET {{List1.pageNo * List1.pageSize}} LIMIT {{List1.pageSize}};\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(1000);\n\n    // Click next page in list widget\n    cy.get(\".t--list-widget-next-page\").find(\"button\").click({\n      force: true\n    }).wait(1000);\n\n    // Change to client side pagination\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.togglebarDisable(\".t--property-control-serversidepagination input\");\n    cy.wait(2000);\n    cy.get(\".t--widget-containerwidget\").should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_PageNo_PageSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["List widget V2 page number and page size"],"updatePoint":{"line":147,"column":12,"index":4227},"line":147,"code":"  it(\"airgap\", \"3. should reset page no if higher than max when switched from server side to client side - airgap\", () => {\n    cy.addDsl(dslWithServerSide);\n    // Open Datasource editor\n    cy.wait(2000);\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.get(datasource.createQuery).click();\n\n    // Click the editing field\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n\n    // Click the editing field\n    cy.get(queryLocators.queryNameField).type(\"Query1\");\n\n    // switching off Use Prepared Statement toggle\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n\n    //.1: Click on Write query area\n    cy.get(queryLocators.templateMenu).click();\n    cy.xpath(queryLocators.query).click({\n      force: true\n    });\n\n    // writing query to get the schema\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users OFFSET {{List1.pageNo * 1}} LIMIT {{List1.pageSize}};\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(1000);\n\n    // Click next page in list widget\n    cy.get(\".t--list-widget-next-page\").find(\"button\").click({\n      force: true\n    }).wait(1000);\n\n    // Change to client side pagination\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.togglebarDisable(\".t--property-control-serversidepagination input\");\n    cy.wait(2000);\n    cy.get(\".t--widget-containerwidget\").should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_PageNo_PageSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate isVisible","suites":["List widget V2 PropertyPane"],"updatePoint":{"line":6,"column":27,"index":369},"line":6,"code":"  it(\"1. Validate isVisible\", () => {\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidgetv2).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n\n    // Open Property pane\n    cy.openPropertyPane(\"listwidgetv2\");\n    //Check the disableed checkbox and Validate\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.wait(2000); //for the deployed page to load fully\n    cy.get(widgetsPage.listWidgetv2).should(\"be.visible\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Toggle JS - Validate isVisible","suites":["List widget V2 PropertyPane"],"updatePoint":{"line":30,"column":39,"index":1152},"line":30,"code":"  it(\"2. Toggle JS - Validate isVisible\", function () {\n    // Open Property pane\n    cy.get(widgetsPage.listWidgetv2).should(\"be.visible\");\n    cy.openPropertyPane(\"listwidgetv2\");\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidgetv2).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n\n    // Open Property pane\n    cy.openPropertyPane(\"listwidgetv2\");\n    //Check the disabled checkbox using JS and Validate\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidgetv2).should(\"be.visible\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Renaming the widget from Property pane and Entity explorer ","suites":["List widget V2 PropertyPane"],"updatePoint":{"line":55,"column":68,"index":2011},"line":55,"code":"  it(\"3. Renaming the widget from Property pane and Entity explorer \", function () {\n    // Open Property pane\n    cy.CheckAndUnfoldEntityItem(\"Widgets\");\n    cy.selectEntityByName(\"List1\");\n    // Change the list widget name from property pane and Verify it\n    cy.widgetText(\"List2\", widgetsPage.listWidgetName, widgetsPage.listWidgetName + \" \" + commonlocators.listWidgetNameTag);\n    // Change the list widget name from Entity Explorer\n    cy.renameEntity(\"List2\", \"List1\");\n    // Mouse over to list name\n    _.entityExplorer.SelectEntityByName(\"List1\");\n    cy.get(widgetsPage.listWidgetName).first().trigger(\"mouseover\", {\n      force: true\n    });\n    // Verify the list name is changed\n    cy.contains(widgetsPage.listWidgetName + \" \" + commonlocators.listWidgetNameTag, \"List1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Item Spacing Validation ","suites":["List widget V2 PropertyPane"],"updatePoint":{"line":71,"column":33,"index":2772},"line":71,"code":"  it(\"4. Item Spacing Validation \", function () {\n    cy.openPropertyPane(\"listwidgetv2\");\n    cy.get(commonlocators.PropertyPaneSearchInput).type(\"item spacing\");\n    cy.testJsontext(\"itemspacing\\\\(px\\\\)\", \"-1\");\n    cy.evaluateErrorMessage(\"Minimum allowed value: 0\");\n    cy.testJsontext(\"itemspacing\\\\(px\\\\)\", \"10\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. List widget V2 with invisible widgets","suites":["List widget v2 Regression"],"updatePoint":{"line":5,"column":46,"index":307},"line":5,"code":"  it(\"1. List widget V2 with invisible widgets\", () => {\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPaneByWidgetName(\"Text1\", \"textwidget\");\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(`${widgetSelector(\"Text1\")}`).should(\"not.exist\");\n    cy.get(`${widgetSelector(\"List1\")} div[type=\"CONTAINER_WIDGET\"]`).each($el => {\n      cy.wrap($el).click({\n        force: true\n      });\n      cy.wrap($el).parent().should(\"have.css\", \"outline\", \"rgb(59, 130, 246) solid 1px\");\n    });\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_regression_fix_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Next button disabled when there's no data","suites":["List widget V2 Serverside Pagination"],"updatePoint":{"line":13,"column":50,"index":630},"line":13,"code":"  it(\"1. Next button disabled when there's no data\", () => {\n    jsEditor.CreateJSObject(`\n        const pageNo = List1.pageNo;\n        const pageSize = List1.pageSize;\n        const data = Table1.tableData;\n        const startIndex = pageSize * (pageNo -1);\n        const endIndex = startIndex + pageSize;\n  \t    return data.slice(startIndex, endIndex);\n          `, {\n      paste: false,\n      completeReplace: false,\n      toRun: true,\n      shouldCreateNewJSObj: true\n    });\n    ee.SelectEntityByName(\"List1\", \"Widgets\");\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"1\");\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\");\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"3\");\n    cy.get(commonlocators.listPaginateNextButtonDisabled).should(\"exist\");\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_SerververSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Next button disabled but visible in view mode when there's no data","suites":["List widget V2 Serverside Pagination"],"updatePoint":{"line":43,"column":75,"index":1819},"line":43,"code":"  it(\"2. Next button disabled but visible in view mode when there's no data\", () => {\n    deployMode.DeployApp();\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"1\");\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\");\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"3\");\n    cy.get(commonlocators.listPaginateNextButtonDisabled).should(\"exist\");\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n    cy.get(commonlocators.listPaginateActivePage).should(\"have.text\", \"2\");\n    deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_SerververSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. SelectedItemView and TriggeredItemView","suites":["List widget V2 Serverside Pagination"],"updatePoint":{"line":61,"column":47,"index":2581},"line":61,"code":"  it(\"3. SelectedItemView and TriggeredItemView\", () => {\n    cy.get(`${widgetSelector(\"SelectedRow\")} ${commonlocators.bodyTextStyle}`).first().should(\"not.have.text\");\n    cy.get(`${widgetSelector(\"SelectedItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {});\n    });\n    cy.get(`${widgetSelector(\"TriggeredItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {});\n    });\n\n    // Select First Row\n    cy.get(`${widgetSelector(\"List1\")} ${containerWidgetSelector}`).eq(0).click();\n    cy.wait(200);\n    cy.get(`${widgetSelector(\"SelectedItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {\n        Image1: {\n          isVisible: true\n        },\n        Text1: {\n          isVisible: true,\n          text: \"Perry234\"\n        },\n        Text2: {\n          isVisible: true,\n          text: \"8\"\n        }\n      });\n    });\n    cy.get(`${widgetSelector(\"TriggeredItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {\n        Image1: {\n          isVisible: true\n        },\n        Text1: {\n          isVisible: true,\n          text: \"Perry234\"\n        },\n        Text2: {\n          isVisible: true,\n          text: \"8\"\n        }\n      });\n    });\n    cy.get(`${widgetSelector(\"SelectedRow\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data.name).should(\"equal\", \"Perry234\");\n      cy.wrap(data.phone).should(\"equal\", \"1234 456 789\");\n    });\n\n    // Change Page and Validate Data\n    cy.get(commonlocators.listPaginateNextButton).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(`${widgetSelector(\"SelectedItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {\n        Image1: {\n          isVisible: true\n        },\n        Text1: {\n          isVisible: true,\n          text: \"Perry234\"\n        },\n        Text2: {\n          isVisible: true,\n          text: \"8\"\n        }\n      });\n    });\n    cy.get(`${widgetSelector(\"TriggeredItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {\n        Image1: {\n          isVisible: true\n        },\n        Text1: {\n          isVisible: true,\n          text: \"Perry234\"\n        },\n        Text2: {\n          isVisible: true,\n          text: \"8\"\n        }\n      });\n    });\n    cy.get(`${widgetSelector(\"SelectedRow\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data.name).should(\"equal\", \"Perry234\");\n      cy.wrap(data.phone).should(\"equal\", \"1234 456 789\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_SerververSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. SelectedItemView and TriggeredItemView with changing data","suites":["List widget V2 Serverside Pagination"],"updatePoint":{"line":156,"column":66,"index":5602},"line":156,"code":"  it(\"4. SelectedItemView and TriggeredItemView with changing data\", () => {\n    // Initiate data change using store value\n    cy.get(`${widgetSelector(\"Button1\")} button`).first().click({\n      force: true\n    });\n    cy.wait(2000);\n\n    // Expect value should be the same\n    cy.get(`${widgetSelector(\"SelectedItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {\n        Image1: {\n          isVisible: true\n        },\n        Text1: {\n          isVisible: true,\n          text: \"Perry234\"\n        },\n        Text2: {\n          isVisible: true,\n          text: \"8\"\n        }\n      });\n    });\n    cy.get(`${widgetSelector(\"TriggeredItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {\n        Image1: {\n          isVisible: true\n        },\n        Text1: {\n          isVisible: true,\n          text: \"Perry234\"\n        },\n        Text2: {\n          isVisible: true,\n          text: \"8\"\n        }\n      });\n    });\n\n    // Change Page and Validate Data change\n    cy.get(commonlocators.listPaginatePrevButton).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(`${widgetSelector(\"SelectedItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {\n        Image1: {\n          isVisible: true\n        },\n        Text1: {\n          isVisible: true,\n          text: \"Perry234 Changed\"\n        },\n        Text2: {\n          isVisible: true,\n          text: \"8\"\n        }\n      });\n    });\n    cy.get(`${widgetSelector(\"TriggeredItemView\")} ${commonlocators.bodyTextStyle}`).then($el => {\n      const data = JSON.parse($el.text());\n      cy.wrap(data).should(\"deep.equal\", {\n        Image1: {\n          isVisible: true\n        },\n        Text1: {\n          isVisible: true,\n          text: \"Perry234 Changed\"\n        },\n        Text2: {\n          isVisible: true,\n          text: \"8\"\n        }\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/ListV2_SerververSide_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["List Widget V2 Functionality"],"updatePoint":{"line":9,"column":22,"index":1061},"line":9,"code":"  it(\"excludeForAirgap\", \"should validate that all widgets can be added to List\", () => {\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    allowed.forEach(widget => {\n      cy.dragAndDropToWidget(widget, \"listwidgetv2\", {\n        x: 350,\n        y: 50\n      });\n      cy.assertPageSave();\n      cy.get(`.t--draggable-${widget}`).should(\"exist\");\n      cy.get(widgetsPage.removeWidget).click({\n        force: true\n      });\n      cy.wait(\"@updateLayout\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["List Widget V2 Functionality"],"updatePoint":{"line":24,"column":12,"index":1527},"line":24,"code":"  it(\"airgap\", \"should validate that all widgets can be added to List except mapwidget - airgap\", () => {\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    const airgapAllowed = allowed.filter(widget => widget !== \"mapwidget\");\n    airgapAllowed.forEach(widget => {\n      cy.dragAndDropToWidget(widget, \"listwidgetv2\", {\n        x: 350,\n        y: 50\n      });\n      cy.assertPageSave();\n      cy.get(`.t--draggable-${widget}`).should(\"exist\");\n      cy.get(widgetsPage.removeWidget).click({\n        force: true\n      });\n      cy.wait(\"@updateLayout\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate that list widget doesn't execute code","suites":["Binding the list widget with text widget"],"updatePoint":{"line":7,"column":55,"index":329},"line":7,"code":"  it(\"1. Validate that list widget doesn't execute code\", function () {\n    // First input\n    cy.get(\".t--widget-inputwidgetv2 input\").eq(0).type(\"'+(function() { return 3; })()+'\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-buttonwidget\").eq(0).click();\n    cy.get(commonlocators.toastmsg).contains(\"'+(function() { return 3; })()+'\");\n\n    // First input\n    cy.get(\".t--widget-inputwidgetv2 input\").eq(0).clear().type(\"`+(function() { return 3; })()+`\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-buttonwidget\").eq(0).click();\n    cy.get(commonlocators.toastmsg).should(\"contain\", \"`+(function() { return 3; })()+`\");\n\n    // First input\n    cy.get(\".t--widget-inputwidgetv2 input\").eq(0).clear().type('\"+(function() { return 3; })()+\"', {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-buttonwidget\").eq(0).click();\n    cy.get(commonlocators.toastmsg).should(\"contain\", '\"+(function() { return 3; })()+\"');\n  });","file":"e2e/Regression/ClientSide/Widgets/ListV2/Listv2_vulnerability_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should have background color in edit mode and deploy mode","suites":["Modal Widget background color spec"],"updatePoint":{"line":13,"column":66,"index":393},"line":13,"code":"  it(\"1. Should have background color in edit mode and deploy mode\", () => {\n    cy.get(CommonLocators._widgetInCanvas(\"buttonwidget\")).click();\n    cy.get(CommonLocators._modalWrapper).should(\"have.css\", \"background-color\", \"rgb(253, 224, 71)\");\n    DeployMode.DeployApp();\n    cy.get(CommonLocators._widgetInDeployed(\"buttonwidget\")).click();\n    cy.get(CommonLocators._modalWrapper).should(\"have.css\", \"background-color\", \"rgb(253, 224, 71)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal_background_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"Close the opened filter pane of the table","suites":["Modal Widget Functionality"],"updatePoint":{"line":7,"column":47,"index":282},"line":7,"code":"  it(\"Close the opened filter pane of the table\", () => {\n    const buttonSelector = widgets.buttonWidget;\n    const tableFilterPaneSelector = widgets.tableFilterPaneToggle;\n    const tableFilterRowSelector = widgets.tableFilterRow;\n    const modalSelector = widgets.modalWidget;\n\n    // Open the filter pane of table\n    cy.get(tableFilterPaneSelector).click();\n    // Should open the filter pane\n    cy.get(tableFilterRowSelector).should(\"exist\");\n    // Open the modal\n    cy.get(buttonSelector).click();\n    // Should pop up the modal\n    cy.get(modalSelector).should(\"exist\");\n    // Should close the open filter pane of the table\n    cy.get(tableFilterRowSelector).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal_On_Table_Filter_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should focus on the input field when autofocus for the input field is enabled","suites":["Modal focus"],"updatePoint":{"line":42,"column":86,"index":1582},"line":42,"code":"  it(\"1. Should focus on the input field when autofocus for the input field is enabled\", () => {\n    setupModalWithInputWidget();\n    cy.openPropertyPaneFromModal(\"inputwidgetv2\");\n\n    // autofocus for input field is enabled\n    cy.get(\".t--property-control-autofocus\").find(\".ads-v2-switch\").click({\n      force: true\n    });\n    //enter some text to the input field\n    cy.get(`${widgets.modalWidget} .t--widget-inputwidgetv2 input`).click().type(someInputText);\n\n    //close Modal\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n    cy.get(widgets.modalCloseButton).should(\"not.be.visible\");\n    cy.wait(1500);\n    //open the modal\n    cy.get(widgets.widgetBtn).contains(\"Submit\").click({\n      force: true\n    });\n    //check if the focus is on the input field\n    cy.focused().should(\"have.value\", someInputText);\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_focus_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should not focus on the input field if autofocus is disabled","suites":["Modal focus"],"updatePoint":{"line":66,"column":69,"index":2414},"line":66,"code":"  it(\"2. Should not focus on the input field if autofocus is disabled\", () => {\n    cy.openPropertyPaneFromModal(\"inputwidgetv2\");\n    // autofocus for input field is disabled\n    cy.get(\".t--property-control-autofocus\").find(\".ads-v2-switch\").click({\n      force: true\n    });\n    //close Modal\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n    cy.get(widgets.modalCloseButton).should(\"not.be.visible\");\n\n    //open the modal\n    cy.get(widgets.modalWidget).should(\"not.exist\");\n    cy.get(widgets.widgetBtn).contains(\"Submit\").click({\n      force: true\n    });\n    //check if the focus is not on the input field\n    cy.focused().should(\"not.have.value\", someInputText);\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_focus_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new Modal","suites":["Modal Widget Functionality"],"updatePoint":{"line":14,"column":22,"index":578},"line":14,"code":"  it(\"1. Add new Modal\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"modalwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--modal-widget\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_functionaliy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Open Existing Modal from created Widgets list","suites":["Modal Widget Functionality"],"updatePoint":{"line":22,"column":54,"index":816},"line":22,"code":"  it(\"2. Open Existing Modal from created Widgets list\", () => {\n    _.entityExplorer.SelectEntityByName(\"Modal1\", \"Widgets\");\n    cy.get(\".t--modal-widget\").should(\"exist\");\n    cy.CreateAPI(\"FirstAPI\");\n    _.entityExplorer.SelectEntityByName(\"Modal1\", \"Widgets\");\n    cy.get(\".t--modal-widget\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_functionaliy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Display toast on close action","suites":["Modal Widget Functionality"],"updatePoint":{"line":29,"column":38,"index":1121},"line":29,"code":"  it(\"3. Display toast on close action\", () => {\n    _.entityExplorer.SelectEntityByName(\"Modal1\");\n    cy.get(\".t--property-control-onclose\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"onclose\", \"{{showAlert('test','success')}}\");\n    cy.wait(1000); //make sure evaluated value disappears\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"test\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_functionaliy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Should paste modal widgets with main container as parentId","suites":["Modal Widget Functionality"],"updatePoint":{"line":41,"column":67,"index":1605},"line":41,"code":"  it(\"4. Should paste modal widgets with main container as parentId\", () => {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    _.entityExplorer.SelectEntityByName(\"Modal1\");\n    cy.wait(200);\n    //cy.get(\"body\").type(`{${modifierKey}}c`);\n    _.agHelper.GetNClick(_.propPane._copyWidget);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n    cy.wait(1000); //make sure evaluated value disappears\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n    cy.get(\".t--modal-widget\").should(\"have.length\", 0);\n    cy.get(\"body\").type(`{${modifierKey}}v`);\n    cy.get('.bp3-collapse-body > [step=\"0\"]').eq(1).children().should(\"have.length\", 3);\n    //make sure modalis open on paste\n    cy.get(\".t--modal-widget\").should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_functionaliy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should select modal when clicked on modal label","suites":["Modal Widget Functionality"],"updatePoint":{"line":58,"column":56,"index":2399},"line":58,"code":"  it(\"5. should select modal when clicked on modal label\", () => {\n    //open modal\n    _.entityExplorer.SelectEntityByName(\"Modal1\");\n    cy.get(\".t--modal-widget\").should(\"exist\");\n\n    //select text widget inside the modal\n    cy.get(\".t--modal-widget\").find(\".t--widget-textwidget\").click();\n    cy.get(\".t--modal-widget\").find(\".t--widget-textwidget div[data-testid='t--selected']\").should(\"have.length\", 1);\n\n    //click on modal's widgetName Label\n    cy.get(\".t--modal-widget\").click();\n    cy.get(widgets.widgetNameSpan).click({\n      force: true\n    });\n\n    //verify the modal1 is selected\n    cy.get(\".t--property-pane-title\").should(\"contain\", \"Modal1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_functionaliy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. It should paste modal widget on main Container even when copied in group and paste when a container is selected","suites":["Modal Widget Functionality"],"updatePoint":{"line":76,"column":120,"index":3137},"line":76,"code":"  it(\"6. It should paste modal widget on main Container even when copied in group and paste when a container is selected\", () => {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.get(explorer.addWidget).click();\n    //add an additional modal widget and a container widget\n    _.entityExplorer.DragDropWidgetNVerify(\"modalwidget\", 300, 300);\n    cy.get(widgets.modalCloseButton).click({\n      force: true\n    });\n    cy.dragAndDropToCanvas(\"containerwidget\", {\n      x: 300,\n      y: 300\n    });\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    cy.get(\".t--entity-name\").contains(\"Widgets\").click();\n\n    //select all widgets and copy\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n    cy.get(\"body\").type(`{${modifierKey}}a`);\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n\n    //select container widget\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n    cy.get(`.t--widget-containerwidget`).click({\n      ctrlKey: true\n    });\n\n    //paste\n    cy.get(\"body\").type(`{${modifierKey}}v`);\n    _.entityExplorer.ExpandCollapseEntity(\"Widgets\", true);\n\n    //verify that the two modal widget should have pasted on the main canvas\n    _.agHelper.AssertElementVisible(_.entityExplorer._entityNameInExplorer(\"Modal1\"));\n    _.agHelper.AssertElementVisible(_.entityExplorer._entityNameInExplorer(\"Modal1Copy\"));\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_functionaliy_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new Modal widget with other widgets and validate with auto-layout","suites":["Modal Widget with auto-layout usecases"],"updatePoint":{"line":3,"column":78,"index":209},"line":3,"code":"  it(\"1. Add new Modal widget with other widgets and validate with auto-layout\", () => {\n    _.autoLayout.ConvertToAutoLayoutAndVerify(false);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.MODAL, 300, 300);\n    _.agHelper.AssertElementExist(_.locators._modal);\n    _.agHelper.GetNClick(_.locators._closeModal, 0, true, 0);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.INPUT_V2, 100, 200);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.INPUT_V2, 10, 20);\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.BUTTON, 20, 30);\n    _.agHelper.AssertElementAbsence(_.locators._modal);\n    _.propPane.CreateModal(\"Modal1\", \"onClick\");\n    _.agHelper.GetNClick(_.locators._closeModal, 0, true, 0);\n    _.agHelper.AssertElementExist(_.locators._widgetInCanvas(\"inputwidgetv2\"));\n    _.agHelper.AssertElementExist(_.locators._widgetInCanvas(\"inputwidgetv2\"), 1);\n    _.agHelper.AssertElementExist(_.locators._widgetInCanvas(\"buttonwidget\"));\n    _.agHelper.GetNClick(_.locators._closeModal, 0, true, 0);\n  });","file":"e2e/Regression/ClientSide/Widgets/Modal/Modal_Widget_With_Button_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check isDirty meta property","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":11,"column":36,"index":586},"line":11,"code":"  it(\"1. Check isDirty meta property\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{MultiSelectTree1.isDirty}}`);\n    // Change defaultValue\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.testJsontext(\"defaultselectedvalues\", \"GREEN\\n\");\n    // Check if isDirty is set to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.treeMultiSelectDropdown(\"Red\");\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Reset isDirty by changing defaultValue\n    cy.testJsontext(\"defaultselectedvalues\", \"BLUE\\n\");\n    // Check if isDirty is set to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selects value with enter in default value","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":36,"column":50,"index":1596},"line":36,"code":"  it(\"2. Selects value with enter in default value\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.testJsontext(\"defaultselectedvalues\", \"RED\\n\");\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-item-content\").first().should(\"have.text\", \"Red\");\n    // Clear the selected value\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.treeMultiSelectDropdown(\"Red\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Clears the search field when widget is closed","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":46,"column":54,"index":2062},"line":46,"code":"  it(\"3. Clears the search field when widget is closed\", () => {\n    // open the multi-tree select widget\n    // search for option Red in the search input\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.testJsontext(\"defaultselectedvalues\", \"\");\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.multiTreeSelectFilterInput).click({\n      force: true\n    }).type(\"Green\");\n    // select the Green option\n    cy.treeMultiSelectDropdown(\"Green\");\n    // Assert the selected value is Green\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-item-content\").first().should(\"have.text\", \"Green\");\n    // Reopen the multi-tree select widget\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    // Assert if the search input is empty now\n    cy.get(formWidgetsPage.multiTreeSelectFilterInput).invoke(\"val\").should(\"be.empty\");\n    cy.wait(100);\n    cy.testJsontext(\"defaultselectedvalues\", \"RED\\n\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. To Validate Options","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":70,"column":28,"index":3073},"line":70,"code":"  it(\"4. To Validate Options\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.multiTreeSelectFilterInput).click().type(\"light\");\n    cy.treeMultiSelectDropdown(\"Light Blue\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. To Unchecked Visible Widget","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":77,"column":36,"index":3342},"line":77,"code":"  it(\"5. To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselecttreewidget + \" \" + \".rc-tree-select-multiple\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. To Check Visible Widget","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":83,"column":32,"index":3618},"line":83,"code":"  it(\"6. To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselecttreewidget + \" \" + \".rc-tree-select-multiple\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. To Check Option Not Found","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":90,"column":34,"index":3940},"line":90,"code":"  it(\"7. To Check Option Not Found\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.multiTreeSelectFilterInput).click().type(\"ABCD\");\n    cy.get(\".tree-multiselect-dropdown .rc-tree-select-empty\").contains(\"No Results Found\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Select tooltip renders if tooltip prop is not empty","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":97,"column":60,"index":4279},"line":97,"code":"  it(\"8. Select tooltip renders if tooltip prop is not empty\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    // enter tooltip in property pan\n    cy.get(widgetsPage.inputTooltipControl).type(\"Helpful text for tooltip !\");\n    // tooltip help icon shows\n    cy.get(\".multitree-select-tooltip\").scrollIntoView().should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new multiselect widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":11,"column":32,"index":395},"line":11,"code":"  it(\"Add new multiselect widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"multiselectwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-multiselectwidgetv2\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":19,"column":57,"index":658},"line":19,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more that one empty value is not allowed in options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":37,"column":75,"index":1173},"line":37,"code":"  it(\"should check that more that one empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that Objects can be added to multiselect Widget default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":55,"column":80,"index":1684},"line":55,"code":"  it(\"should check that Objects can be added to multiselect Widget default value\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", `[\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(\".t--property-control-defaultselectedvalues .t--codemirror-has-error\").should(\"not.exist\");\n    cy.wait(100);\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Green\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should display the right label","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":82,"column":36,"index":2567},"line":82,"code":"  it(\"should display the right label\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"BLUE\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", `[\n      \"GREEN\",\n      \"RED\"\n    ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(\".t--property-control-defaultselectedvalues .t--codemirror-has-error\").should(\"not.exist\");\n    cy.wait(100);\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Green\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Selects value with invalid default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":16,"column":49,"index":815},"line":16,"code":"  it(\"1. Selects value with invalid default value\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.testJsontext(\"options\", JSON.stringify(data.input));\n    cy.testJsontext(\"defaultselectedvalues\", \"{{ undefined }}\");\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Option 3\");\n    cy.wait(2000);\n    //Validating option inside multiselect widget\n    cy.get(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Option 3\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selects value with enter in default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":30,"column":50,"index":1437},"line":30,"code":"  it(\"2. Selects value with enter in default value\", () => {\n    cy.testJsontext(\"defaultselectedvalues\", '[\\n  {\\n    \"label\": \"Option 3\",\\n    \"value\": \"3\"\\n  }\\n]');\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Option 3\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Clears the search field when widget is closed and serverSideFiltering is off","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":34,"column":85,"index":1778},"line":34,"code":"  it(\"3. Clears the search field when widget is closed and serverSideFiltering is off\", () => {\n    // Turn on the filterable for the widget\n    cy.togglebar('.t--property-control-allowsearching input[type=\"checkbox\"]');\n    // open the widget\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    // Search for Option 2 in the search input\n    cy.get(\".rc-select-dropdown input[type='text']\").click().type(\"Option 2\");\n    // Select Option 2\n    cy.get(\".multi-select-dropdown\").contains(\"Option 2\").click({\n      force: true\n    });\n    // Assert Option 2 is selected\n    cy.get(\".rc-select-selection-item[title='Option 2']\").should(\"have.text\", \"Option 2\");\n    // Close the widget\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    // Reopen the widget\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    // Assert if the search input is empty\n    cy.get(\".rc-select-dropdown input[type='text']\").invoke(\"val\").should(\"be.empty\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Does not clear the search field when widget is closed and serverSideFiltering is on","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":62,"column":92,"index":2983},"line":62,"code":"  it(\"4. Does not clear the search field when widget is closed and serverSideFiltering is on\", () => {\n    // Turn on server side filtering for the widget\n    cy.togglebar('.t--property-control-serversidefiltering input[type=\"checkbox\"]');\n    // open the widget\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    // Search for Option 2 in the search input\n    cy.get(\".rc-select-dropdown input[type='text']\").click().type(\"Option 2\");\n    // Click on Option 2\n    cy.get(\".multi-select-dropdown\").contains(\"Option 2\").click({\n      force: true\n    });\n    // Close the widget\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    // Reopen the widget\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    // Assert if the search input is not empty\n    cy.get(\".rc-select-dropdown input[type='text']\").invoke(\"val\").should(\"not.be.empty\");\n    // Turn off the filterable property for the widget\n    cy.togglebarDisable('.t--property-control-allowsearching input[type=\"checkbox\"]');\n    // Turn off server side filtering for the widget\n    cy.togglebarDisable('.t--property-control-serversidefiltering input[type=\"checkbox\"]');\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Dropdown Functionality To Validate Options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":92,"column":51,"index":4330},"line":92,"code":"  it(\"5. Dropdown Functionality To Validate Options\", function () {\n    cy.get(\".rc-select-selector\").last().click({\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Option 2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Dropdown Functionality To Check Allow select all option","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":98,"column":64,"index":4539},"line":98,"code":"  it(\"6. Dropdown Functionality To Check Allow select all option\", function () {\n    // select all option is not enable\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-item-content\").first().should(\"not.have.text\", \"Select all\");\n    // enable select all option from property pane\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.togglebar(commonlocators.allowSelectAllCheckbox);\n\n    // press select all option\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Select all\");\n    cy.wait(3000);\n    //Validating option inside multiselect widget\n    cy.get(\".rc-select-selection-item-content\").eq(0).should(\"have.text\", \"Option 1\");\n    cy.get(\".rc-select-selection-item-content\").eq(1).should(\"have.text\", \"Option 2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Check isDirty meta property","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":117,"column":36,"index":5431},"line":117,"code":"  it(\"7. Check isDirty meta property\", function () {\n    cy.openPropertyPane(WIDGET.TEXT);\n    cy.updateCodeInput(PROPERTY_SELECTOR.text, `{{MultiSelect2.isDirty}}`);\n    // Init isDirty by changing defaultOptionValue\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.updateCodeInput(PROPERTY_SELECTOR.defaultValue, '[\\n  {\\n    \"label\": \"Option 1\",\\n    \"value\": \"1\"\\n  }\\n]');\n    cy.get(getWidgetSelector(WIDGET.TEXT)).eq(0).should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(\".rc-select-selector\").last().click({\n      force: true\n    });\n    cy.dropdownMultiSelectDynamic(\"Option 2\");\n    // Check if isDirty is set to true\n    cy.get(getWidgetSelector(WIDGET.TEXT)).eq(0).should(\"contain\", \"true\");\n    // Reset isDirty by changing defaultOptionValue\n    cy.updateCodeInput(PROPERTY_SELECTOR.defaultValue, '[\\n  {\\n    \"label\": \"Option 2\",\\n    \"value\": \"2\"\\n  }\\n]');\n    // Check if isDirty is set to false\n    cy.get(getWidgetSelector(WIDGET.TEXT)).eq(0).should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify MultiSelect resets to default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":208,"column":51,"index":7681},"line":208,"code":"  it(\"8. Verify MultiSelect resets to default value\", function () {\n    resetTestCases.forEach(testCase => {\n      const {\n        defaultValue,\n        options,\n        optionsToDeselect,\n        optionsToSelect\n      } = testCase;\n      cy.openPropertyPane(\"multiselectwidgetv2\");\n      // set options\n      propPane.UpdatePropertyFieldValue(\"Options\", JSON.stringify(options));\n      agHelper.PressEscape();\n      // set default value\n      propPane.UpdatePropertyFieldValue(\"Default selected values\", JSON.stringify(defaultValue, null, 2));\n      // select other options\n      agHelper.SelectFromMultiSelect(optionsToSelect);\n      agHelper.RemoveMultiSelectItems(optionsToDeselect);\n\n      // reset multiselect\n      cy.get(`${getWidgetSelector(\"buttonwidget\")}:contains('Reset MultiSelect')`).click();\n\n      // verify value is equal to default value\n      const defaultValuesStringifiedArray = defaultValue.map(opt => opt?.value !== undefined ? opt.value : opt).toString();\n      cy.get(getWidgetSelector(\"textwidget\")).eq(1).should(\"have.text\", defaultValuesStringifiedArray);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify MultiSelect deselection behavior","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":234,"column":48,"index":8777},"line":234,"code":"  it(\"9. Verify MultiSelect deselection behavior\", function () {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    // set options\n    propPane.UpdatePropertyFieldValue(\"Options\", JSON.stringify([{\n      label: \"RED\",\n      value: \"RED\"\n    }]));\n    agHelper.PressEscape();\n    propPane.UpdatePropertyFieldValue(\"Default selected values\", '[\"RED\"]');\n    agHelper.RemoveMultiSelectItems([\"RED\"]);\n    // verify value is equal to default value\n    cy.get(getWidgetSelector(\"textwidget\")).eq(1).should(\"have.text\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Dropdown Functionality To Unchecked Visible Widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":247,"column":60,"index":9315},"line":247,"code":"  it(\"10. Dropdown Functionality To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselectwidgetv2 + \" \" + \".rc-select-selector\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Dropdown Functionality To Check Visible Widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":253,"column":56,"index":9608},"line":253,"code":"  it(\"11. Dropdown Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselectwidgetv2 + \" \" + \".rc-select-selector\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify dropdown width of Select widgets and menu button","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":8,"column":61,"index":378},"line":8,"code":"  it(\"Verify dropdown width of Select widgets and menu button\", function () {\n    // Select\n    cy.wait(450);\n    cy.get(formWidgetsPage.selectwidget).find(widgetLocators.dropdownSingleSelect).invoke(\"outerWidth\").then(val => {\n      cy.get(formWidgetsPage.selectwidget).find(widgetLocators.dropdownSingleSelect).click({\n        force: true\n      });\n      cy.get(\".select-popover-wrapper\").invoke(\"outerWidth\").should(\"eq\", val);\n    });\n    // Menu button\n    cy.get(formWidgetsPage.menuButtonWidget).find(widgetLocators.menuButton).invoke(\"outerWidth\").then(width => {\n      expect(parseInt(width)).to.equal(188);\n    });\n    cy.get(formWidgetsPage.menuButtonWidget).find(widgetLocators.menuButton).last().click({\n      force: true\n    });\n    cy.log(cy.get(formWidgetsPage.menuButtonWidget));\n    cy.get(\".menu-button-popover\").invoke(\"outerWidth\").then(width => {\n      expect(parseInt(width)).to.equal(188);\n    });\n\n    // MultiSelect\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-multiple\").invoke(\"innerWidth\").then(inputWidth => {\n      cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".multi-select-dropdown\").invoke(\"outerWidth\").then(dropdownWidth => {\n        expect(Math.floor(inputWidth) - Math.floor(dropdownWidth)).to.be.lessThan(1);\n      });\n    });\n    //Multi tree Select\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-multiple\").invoke(\"width\").then(val => {\n      cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".tree-multiselect-dropdown\").invoke(\"outerWidth\").then(dropdownWidth => {\n        expect(val - dropdownWidth).to.be.within(-1, 1);\n      });\n    });\n\n    // Tree Select\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-single\").invoke(\"outerWidth\").then(val => {\n      cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".single-tree-select-dropdown\").invoke(\"outerWidth\").then(dropdownWidth => {\n        expect(val - dropdownWidth).to.be.within(-1, 1);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify dropdown width of Select widgets with Label","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":64,"column":56,"index":2805},"line":64,"code":"  it(\"Verify dropdown width of Select widgets with Label\", function () {\n    // Select\n    cy.openPropertyPane(\"selectwidget\");\n    cy.testJsontext(\"text\", \"Label\");\n    cy.get(formWidgetsPage.selectwidget).find(widgetLocators.dropdownSingleSelect).invoke(\"outerWidth\").then(val => {\n      cy.get(formWidgetsPage.selectwidget).find(widgetLocators.dropdownSingleSelect).click({\n        force: true\n      });\n      cy.get(\".select-popover-wrapper\").invoke(\"outerWidth\").then(dropdownWidth => {\n        expect(val - dropdownWidth).to.be.within(-1, 1);\n      });\n    });\n\n    // MultiSelect\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.testJsontext(\"text\", \"Label\");\n    cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-multiple\").invoke(\"innerWidth\").then(val => {\n      cy.get(formWidgetsPage.multiselectwidgetv2).find(\".rc-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".multi-select-dropdown\").invoke(\"outerWidth\").then(dropdownWidth => {\n        expect(val - dropdownWidth).to.be.within(-1, 1);\n      });\n    });\n    //Multi tree Select\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.testJsontext(\"text\", \"Label\");\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-multiple\").invoke(\"innerWidth\").then(val => {\n      cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".tree-multiselect-dropdown\").invoke(\"outerWidth\").then(dropdownWidth => {\n        expect(val - dropdownWidth).to.be.within(-1, 1);\n      });\n    });\n    // Tree Select\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.testJsontext(\"text\", \"Label\");\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-single\").invoke(\"innerWidth\").then(val => {\n      cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n        force: true\n      }).type(\"{uparrow}\", {\n        force: true\n      });\n      cy.get(\".single-tree-select-dropdown\").invoke(\"outerWidth\").then(dropdownWidth => {\n        expect(val - dropdownWidth).to.be.within(-1, 1);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new multiselect widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":17,"column":35,"index":499},"line":17,"code":"  it(\"1. Add new multiselect widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"multiselectwidgetv2\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-multiselectwidgetv2\").should(\"exist\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", defaultValue);\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Copy and paste multiselect widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":40,"column":42,"index":1117},"line":40,"code":"  it(\"2. Copy and paste multiselect widget\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    //copy and paste\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.multiSelectWidget).should(\"have.length\", 2);\n    cy.get(\".t--property-control-defaultselectedvalues\").first().click({\n      force: true\n    }).find(\".CodeMirror\").first().then(ins => {\n      const input = ins[0].CodeMirror;\n      let val = input.getValue();\n      try {\n        val = JSON.parse(val);\n        expect(val).to.deep.equal(JSON.parse(defaultValue));\n      } catch (error) {}\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Select tooltip renders if tooltip prop is not empty","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":65,"column":60,"index":2133},"line":65,"code":"  it(\"3. Select tooltip renders if tooltip prop is not empty\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    // enter tooltip in property pan\n    cy.get(widgetsPage.inputTooltipControl).type(\"Helpful text for tooltip !\");\n    // tooltip help icon shows\n    cy.get(\".multiselect-tooltip\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiSelect4_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["Multi Tree Select Widget"],"updatePoint":{"line":7,"column":20,"index":252},"line":7,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"multiselecttreewidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-multiselecttreewidget\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Multi Tree Select Widget"],"updatePoint":{"line":15,"column":57,"index":519},"line":15,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Multi Tree Select Widget"],"updatePoint":{"line":43,"column":72,"index":1271},"line":43,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Multiselect/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Slash command and mustache autocomplete validation for button widget","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":7,"column":74,"index":348},"line":7,"code":"  it(\"Slash command and mustache autocomplete validation for button widget\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.testCodeMirror(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates all autocomplete commands on entering / in label field\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New datasource\");\n    });\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      // validates autocomplete binding on entering {{}} in label field\n      cy.get(dynamicInputLocators.input).first().type(\"{shift}{{}{shift}{{}\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"Text1.text\");\n    });\n    // makes the onClick js toggle active\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".t--property-control-onclick .CodeMirror textarea\").last().focus().type(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates all autocomplete commands on entering / in onClick field\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New datasource\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".t--property-control-onclick .CodeMirror textarea\").last().focus().type(\"{ctrl}{shift}{downarrow}\").type(\"{backspace}\").type(\"{shift}{{}{shift}{{}\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates all autocomplete functions on entering {{}} in onClick field\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"storeValue()\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"showAlert()\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(3).should(\"have.text\", \"navigateTo()\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":50,"column":22,"index":2770},"line":50,"code":"  it(\"excludeForAirgap\", \"Slash command and mustache autocomplete validation for textbox widget\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.EnableAllCodeEditors();\n    cy.testCodeMirror(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates all autocomplete commands on entering / in text field\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New datasource\");\n    });\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      cy.get(dynamicInputLocators.input).first().type(\"{shift}{{}{shift}{{}\");\n      // validates autocomplete binding on entering {{}} in text field\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"Button1.text\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Button1.recaptchaToken\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":75,"column":12,"index":4064},"line":75,"code":"  it(\"airgap\", \"Slash command and mustache autocomplete validation for textbox widget for airgap\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.EnableAllCodeEditors();\n    cy.testCodeMirror(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates all autocomplete commands on entering / in text field\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New datasource\");\n    });\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      cy.get(dynamicInputLocators.input).first().type(\"{shift}{{}{shift}{{}\");\n      // validates autocomplete binding on entering {{}} in text field\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"Button1.text\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bug 9003: Autocomplete not working for Appsmith specific JS APIs","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":99,"column":70,"index":5325},"line":99,"code":"  it(\"Bug 9003: Autocomplete not working for Appsmith specific JS APIs\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus().clear().type(\"{{re\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates autocomplete suggestion for resetWidget() in onClick field\n      cy.get(`${dynamicInputLocators.hints} li`).eq(0).should(\"have.text\", \"removeValue()\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"resetWidget()\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus()\n    // clearing the onClick field\n    .type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{rightarrow}{rightarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{{s\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates autocomplete function suggestions on entering '{{s' in onClick field\n      cy.get(`${dynamicInputLocators.hints} li`).should(\"contain.text\", \"storeValue()\").and(\"contain.text\", \"showModal()\").and(\"contain.text\", \"setInterval()\").and(\"contain.text\", \"showAlert()\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus()\n    // clearing the onClick field\n    .type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{rightarrow}{rightarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{{c\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates autocomplete function suggestions on entering '{{c' in onClick field\n      cy.get(`${dynamicInputLocators.hints} li`).should(\"contain.text\", \"closeModal()\").and(\"contain.text\", \"copyToClipboard()\").and(\"contain.text\", \"clearInterval()\").and(\"contain.text\", \"clearStore()\");\n    });\n    cy.EnableAllCodeEditors();\n    cy.get(\".CodeMirror textarea\").last().focus().type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{rightarrow}{rightarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{{n\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\");\n      // validates autocomplete suggestions on entering '{{n' in onClick field\n      cy.get(`${dynamicInputLocators.hints} li`).should(\"contain.text\", \"navigateTo()\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty, onImageSave, imageBlobURL, imageDataURL","suites":["Camera Widget"],"updatePoint":{"line":13,"column":60,"index":402},"line":13,"code":"  it(\"Check isDirty, onImageSave, imageBlobURL, imageDataURL\", () => {\n    const mainControlSelector = \"//div[contains(@class, 't--widget-camerawidget')]//button\";\n    cy.get(\".t--property-control-onimagecapture .t--js-toggle\").click();\n    cy.testJsontext(\"onimagecapture\", \"{{showAlert('captured','success')}}\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Camera1.isDirty}}:{{Camera1.imageDataURL}}:{{Camera1.imageBlobURL}}`);\n    // Initial value of isDirty should be false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false:undefined:undefined\");\n    // Take photo\n    cy.xpath(mainControlSelector).eq(2).click(); //taking photo\n    cy.wait(2000);\n    // Save photo\n    cy.xpath(mainControlSelector).eq(2).click(); //saving it\n\n    // Assert: should trigger onImageSave action\n    cy.validateToastMessage(\"captured\");\n\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").invoke(\"text\").should(\"match\", /true:blob:[a-z0-9-]*\\?type=Base64:blob:https?:\\/\\/[^/]*\\/[a-z0-9-]*/);\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Camera_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. [Bug]- 11415 - Open  Modal from button and test scroll","suites":["Modal Widget Functionality"],"updatePoint":{"line":7,"column":63,"index":244},"line":7,"code":"  it(\"1. [Bug]- 11415 - Open  Modal from button and test scroll\", () => {\n    cy.PublishtheApp();\n    cy.wait(1000);\n    cy.get(\"span:contains('Submit')\").closest(\"div\").click();\n    cy.get(\".t--modal-widget\").should(\"exist\");\n    cy.get(\"span:contains('Close')\").closest(\"div\").should(\"not.be.visible\");\n    cy.get(\".t--modal-widget\").then($el => $el[0].scrollTo(0, 500));\n    cy.get(\"span:contains('Close')\").closest(\"div\").should(\"be.visible\");\n    cy.get(\".t--modal-widget\").then($el => $el[0].scrollTo(0, 0));\n    cy.get(\"span:contains('Close')\").closest(\"div\").should(\"not.be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Canvas_scrolling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new Divider","suites":["Divider Widget Functionality"],"updatePoint":{"line":8,"column":24,"index":317},"line":8,"code":"  it(\"1. Add new Divider\", () => {\n    _.entityExplorer.DragDropWidgetNVerify(WIDGET.DIVIDER, 320, 200);\n    //Open Existing Divider from created  list\n    _.entityExplorer.SelectEntityByName(\"Divider1\");\n    _.entityExplorer.SelectEntityByName(\"Divider2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Divider_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. check default buttonVariant with isJSConvertible","suites":["Icon button Widget Functionality"],"updatePoint":{"line":10,"column":57,"index":539},"line":10,"code":"  it(\"1. check default buttonVariant with isJSConvertible\", function () {\n    cy.openPropertyPane(\"iconbuttonwidget\");\n    cy.moveToStyleTab();\n    cy.get(formWidgetsPage.toggleButtonVariant).click();\n    cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/IconButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. add space into buttonVariant and validate","suites":["Icon button Widget Functionality"],"updatePoint":{"line":16,"column":50,"index":837},"line":16,"code":"  it(\"2. add space into buttonVariant and validate\", function () {\n    cy.EnableAllCodeEditors();\n    cy.get(\".t--property-control-buttonvariant .CodeMirror  textarea\").first().focus().type(\"{ctrl}{shift}{downarrow}\").then($cm => {\n      if ($cm.val() !== \"\") {\n        cy.get(\".t--property-control-buttonvariant .CodeMirror textarea\").first().clear({\n          force: true\n        });\n      }\n    });\n    cy.get(\".t--property-control-buttonvariant .CodeMirror-code\").type(\"PRIMARY   \");\n    cy.get(widgetsPage.iconWidgetBtn).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/IconButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. show alert on button click","suites":["Icon button Widget Functionality"],"updatePoint":{"line":28,"column":35,"index":1414},"line":28,"code":"  it(\"3. show alert on button click\", function () {\n    cy.moveToContentTab();\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"onclick\", \"{{showAlert('Icon button Clicked','success')}}\");\n    cy.get(widgetsPage.iconWidgetBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Icon button Clicked\");\n    cy.PublishtheApp();\n    cy.wait(2000);\n    cy.get(publishPage.iconWidgetBtn).click();\n    cy.get(commonlocators.toastmsg).contains(\"Icon button Clicked\");\n    cy.goToEditFromPublish();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/IconButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should not show alert onclick if button is disabled","suites":["Icon button Widget Functionality"],"updatePoint":{"line":44,"column":60,"index":2035},"line":44,"code":"  it(\"4. should not show alert onclick if button is disabled\", function () {\n    cy.openPropertyPane(\"iconbuttonwidget\");\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.get(widgetsPage.iconWidgetBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n    cy.PublishtheApp();\n    cy.get(publishPage.iconWidgetBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/IconButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Change Title","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":18,"column":18,"index":617},"line":18,"code":"  it(\"Change Title\", function () {\n    cy.testJsontext(\"title\", this.data.chartIndata);\n    cy.get(viewWidgetsPage.chartInnerText).contains(\"App Sign Up\").should(\"have.text\", \"App Sign Up\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Show Labels: FALSE","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":23,"column":24,"index":844},"line":23,"code":"  it(\"Show Labels: FALSE\", function () {\n    cy.togglebarDisable(commonLocators.mapChartShowLabels);\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"not.exist\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Show Labels: TRUE","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":28,"column":23,"index":1044},"line":28,"code":"  it(\"Show Labels: TRUE\", function () {\n    cy.togglebar(commonLocators.mapChartShowLabels);\n    cy.get(viewWidgetsPage.mapChartEntityLabels).eq(1).should(\"exist\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: World with Antarctica","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":33,"column":37,"index":1253},"line":33,"code":"  it(\"Map type: World with Antarctica\", function () {\n    // Change the map type\n    cy.updateMapType(\"World with Antarctica\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 7);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: World","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":40,"column":21,"index":1507},"line":40,"code":"  it(\"Map type: World\", function () {\n    // Change the map type\n    cy.updateMapType(\"World\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 6);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: Europe","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":47,"column":22,"index":1746},"line":47,"code":"  it(\"Map type: Europe\", function () {\n    // Change the map type\n    cy.updateMapType(\"Europe\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 47);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: North America","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":54,"column":29,"index":1994},"line":54,"code":"  it(\"Map type: North America\", function () {\n    // Change the map type\n    cy.updateMapType(\"North America\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 26);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: South America","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":61,"column":29,"index":2249},"line":61,"code":"  it(\"Map type: South America\", function () {\n    // Change the map type\n    cy.updateMapType(\"South America\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 16);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: Asia","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":68,"column":20,"index":2495},"line":68,"code":"  it(\"Map type: Asia\", function () {\n    // Change the map type\n    cy.updateMapType(\"Asia\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 49);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: Oceania","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":75,"column":23,"index":2735},"line":75,"code":"  it(\"Map type: Oceania\", function () {\n    // Change the map type\n    cy.updateMapType(\"Oceania\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 15);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: Africa","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":82,"column":22,"index":2977},"line":82,"code":"  it(\"Map type: Africa\", function () {\n    // Change the map type\n    cy.updateMapType(\"Africa\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 56);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map type: USA","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":89,"column":19,"index":3215},"line":89,"code":"  it(\"Map type: USA\", function () {\n    // Change the map type\n    cy.updateMapType(\"USA\");\n    // Verify the number of entities\n    cy.get(viewWidgetsPage.mapChartEntityLabels).should(\"have.length\", 51);\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Action: onDataPointClick, Open modal","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":96,"column":42,"index":3473},"line":96,"code":"  it(\"Action: onDataPointClick, Open modal\", function () {\n    // Create the Alert Modal and verify Modal name\n    cy.createModal(this.data.ModalName, \"onDataPointClick\");\n    cy.PublishtheApp();\n    /*\n    cy.get(widgetsPage.mapChartPlot)\n      .children()\n      .first()\n      .click({ force: true });\n    cy.get(modalWidgetPage.modelTextField).should(\n      \"have.text\",\n      this.data.ModalName,\n    );\n    */\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Action: onDataPointClick, Show message using selectedDataPoint","suites":["Map Chart Widget Functionality"],"updatePoint":{"line":112,"column":68,"index":3921},"line":112,"code":"  it(\"Action: onDataPointClick, Show message using selectedDataPoint\", function () {\n    cy.get(ObjectsRegistry.CommonLocators._jsToggle(\"ondatapointclick\")).scrollIntoView().click();\n    ObjectsRegistry.PropertyPane.UpdatePropertyFieldValue(\"onDataPointClick\", \"\");\n    cy.get(ObjectsRegistry.CommonLocators._jsToggle(\"ondatapointclick\")).click();\n    const expectedEntityData = {\n      value: 2.04,\n      label: \"South America\",\n      shortLabel: \"SA\",\n      originalId: \"SA\",\n      id: \"sa\"\n    };\n    // Set the map type to default\n    cy.updateMapType(\"World\");\n    // Set action details for onDataPointClick\n    const boundMessage = `{{JSON.stringify(MapChart1.selectedDataPoint)}}`;\n    cy.addAction(boundMessage, \"onDataPointClick\");\n    cy.get(commonLocators.chooseMsgType).last().click({\n      force: true\n    });\n    cy.get(commonLocators.chooseAction).children().contains(\"Success\").click();\n    // Click on the entity, South America\n    cy.get(widgetsPage.mapChartPlot).children().first().click({\n      force: true\n    });\n    // Assert\n    cy.validateToastMessage(JSON.stringify(expectedEntityData));\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MapChart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Icon alignment should not change when changing the icon","suites":["Menu button Widget Functionality"],"updatePoint":{"line":11,"column":64,"index":455},"line":11,"code":"  it(\"1. Icon alignment should not change when changing the icon\", () => {\n    cy.openPropertyPane(\"menubuttonwidget\");\n    cy.moveToStyleTab();\n    // Add an icon\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    // Assert if the icon exists\n    cy.get(`${formWidgetsPage.menuButtonWidget} .bp3-icon-add`).should(\"exist\");\n    // Change its icon alignment to right\n    cy.get(\"[data-value='right']\").last().click({\n      force: true\n    });\n    cy.wait(200);\n    // Assert if the icon appears on the right side of the button text\n    cy.get(formWidgetsPage.menuButtonWidget).contains(\"Open Menu\").children(\"span\").should(\"have.length\", 2);\n    cy.get(`${formWidgetsPage.menuButtonWidget} span.bp3-button-text`).next().should(\"have.class\", \"bp3-icon-add\");\n    // Change the existing icon\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-airplane\").first().click({\n      force: true\n    });\n    // Assert if the icon changes\n    // Assert if the icon still exists on the right side of the text\n    cy.get(`${formWidgetsPage.menuButtonWidget} .bp3-icon-airplane`).should(\"exist\").prev().should(\"have.text\", \"Open Menu\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MenuButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. MenuButton widget functionality on undo after delete","suites":["Menu button Widget Functionality"],"updatePoint":{"line":42,"column":61,"index":1765},"line":42,"code":"  it(\"2. MenuButton widget functionality on undo after delete\", function () {\n    cy.openPropertyPane(\"menubuttonwidget\");\n    cy.moveToContentTab();\n    // Delete Second Menu Item\n    cy.get(\".t--property-control-menuitems .t--delete-column-btn\").eq(1).click({\n      force: true\n    });\n\n    // Click on the menu button\n    cy.get(`${formWidgetsPage.menuButtonWidget} button`).click({\n      force: true\n    });\n    cy.wait(500);\n\n    // Check first menu item\n    cy.get(\".bp3-menu-item\").eq(0).contains(\"First Menu Item\");\n    // Check second menu item\n    cy.get(\".bp3-menu-item\").eq(1).contains(\"Third Menu Item\");\n\n    // Undo\n    cy.get(\"body\").type(`{${modifierKey}}+z`);\n    // Check first menu item\n    cy.get(\".bp3-menu-item\").eq(0).contains(\"First Menu Item\");\n    // Check second menu item\n    cy.get(\".bp3-menu-item\").eq(1).contains(\"Second Menu Item\");\n    // Check third menu item\n    cy.get(\".bp3-menu-item\").eq(2).contains(\"Third Menu Item\");\n\n    // Navigate to property pane of Second Menu Item\n    cy.get(\".t--property-control-menuitems .t--edit-column-btn\").eq(1).click({\n      force: true\n    });\n    cy.wait(1000);\n    // Check the title\n    cy.get(\".t--property-pane-title\").contains(\"Second Menu Item\");\n    // Navigate Back\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MenuButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. MenuButton widget functionality to add dynamic menu items","suites":["Menu button Widget Functionality"],"updatePoint":{"line":80,"column":66,"index":3090},"line":80,"code":"  it(\"3. MenuButton widget functionality to add dynamic menu items\", function () {\n    cy.openPropertyPane(\"menubuttonwidget\");\n    cy.moveToContentTab();\n\n    // Select menu items source as Dynamic\n    cy.get('[data-value=\"DYNAMIC\"]').last().click({\n      force: true\n    });\n    cy.wait(200);\n\n    // Add sample source data\n    cy.testJsontext(\"sourcedata\", JSON.stringify(this.data.MenuButtonSourceData));\n\n    // Open configure array item panel\n    cy.get(commonlocators.menuButtonConfigureArrayItems).last().click({\n      force: true\n    });\n\n    // Update label binding\n    cy.testJsontext(\"label\", `{{currentItem.first_name}}`);\n    cy.wait(1000);\n    cy.closePropertyPane();\n\n    // Check if a total of 3 menu items have been added\n    cy.get(`${formWidgetsPage.menuButtonWidget} button`).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\".bp3-menu-item\").eq(0).contains(\"Michael\");\n    cy.get(\".bp3-menu-item\").eq(1).contains(\"Lindsay\");\n    cy.get(\".bp3-menu-item\").eq(2).contains(\"Brock\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MenuButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Disable one dynamic item using {{currentItem}} binding","suites":["Menu button Widget Functionality"],"updatePoint":{"line":113,"column":63,"index":4136},"line":113,"code":"  it(\"4. Disable one dynamic item using {{currentItem}} binding\", function () {\n    cy.openPropertyPane(\"menubuttonwidget\");\n    cy.moveToContentTab();\n\n    // Open configure array item panel\n    cy.get(commonlocators.menuButtonConfigureArrayItems).last().click({\n      force: true\n    });\n\n    // Update disabled JS binding\n    cy.get(commonlocators.Disablejs).find(\".t--js-toggle\").first().click({\n      force: true\n    });\n    cy.testJsontext(\"disabled\", `{{currentItem.first_name === \"Lindsay\"}}`);\n    cy.wait(1000);\n\n    // Check if the 2nd item is disabled\n    cy.get(`${formWidgetsPage.menuButtonWidget} button`).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\".bp3-menu-item\").eq(1).should(\"have.class\", \"bp3-disabled\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MenuButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Apply background color to dynamic items using {{currentItem}} binding","suites":["Menu button Widget Functionality"],"updatePoint":{"line":137,"column":78,"index":4931},"line":137,"code":"  it(\"5. Apply background color to dynamic items using {{currentItem}} binding\", function () {\n    cy.openPropertyPane(\"menubuttonwidget\");\n    cy.moveToContentTab();\n\n    // Open configure array item panel\n    cy.get(commonlocators.menuButtonConfigureArrayItems).last().click({\n      force: true\n    });\n    cy.moveToStyleTab();\n\n    // Update disabled JS binding\n    cy.get(\".t--property-control-backgroundcolor .t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-backgroundcolor\", `{{currentItem.first_name === \"Michael\" ? \"rgb(255, 165, 0)\" : \"rgb(0, 128, 0)\"}}`);\n    cy.wait(1000);\n    cy.get(`${formWidgetsPage.menuButtonWidget} button`).click({\n      force: true\n    });\n    cy.wait(500);\n\n    // Check if the 1st item has orange background color\n    cy.get(\".bp3-menu-item\").eq(0).should(\"have.css\", \"background-color\", \"rgb(255, 165, 0)\");\n\n    // Check if the 3rd item has green background color\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.css\", \"background-color\", \"rgb(0, 128, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/MenuButton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add a new Progress widget and text widget","suites":["Progress Widget"],"updatePoint":{"line":3,"column":47,"index":165},"line":3,"code":"  it(\"Add a new Progress widget and text widget\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"progresswidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-progresswidget\").should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: isIndeterminate, Toggle infinite loading","suites":["Progress Widget"],"updatePoint":{"line":19,"column":56,"index":619},"line":19,"code":"  it(\"Property: isIndeterminate, Toggle infinite loading\", function () {\n    cy.openPropertyPane(\"progresswidget\");\n    // enable infinite loading\n    cy.togglebar(\".t--property-control-infiniteloading input[type='checkbox']\");\n    // show indeterminate linear progress\n    cy.get(\"[data-testid='indeterminate-linear-progress']\").should(\"exist\").should(\"have.css\", \"animation\");\n    // disable infinite loading\n    cy.togglebarDisable(\".t--property-control-infiniteloading input[type='checkbox']\");\n    // show determinate linear progress\n    cy.get(\"[data-testid='50']\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: value, Change progress value","suites":["Progress Widget"],"updatePoint":{"line":30,"column":44,"index":1202},"line":30,"code":"  it(\"Property: value, Change progress value\", function () {\n    cy.updateCodeInput(\".t--property-control-progress\", \"60\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // pass 60\n    cy.get(\"[data-testid='60']\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: showResult, Toggle show result","suites":["Progress Widget"],"updatePoint":{"line":36,"column":46,"index":1502},"line":36,"code":"  it(\"Property: showResult, Toggle show result\", function () {\n    // enable show result\n    cy.togglebar(\".t--property-control-showresult input[type='checkbox']\");\n    // show label\n    cy.get(\"[data-testid='60']\").first().next().should(\"contain.text\", \"60\");\n    // disable show result\n    cy.togglebarDisable(\".t--property-control-showresult input[type='checkbox']\");\n    // does not show any label\n    cy.get(\"[data-testid='60']\").first().next().should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: steps, Change steps","suites":["Progress Widget"],"updatePoint":{"line":46,"column":35,"index":1968},"line":46,"code":"  it(\"Property: steps, Change steps\", function () {\n    cy.updateCodeInput(\".t--property-control-numberofsteps\", \"2\");\n    // show progress with steps\n    cy.get(\"[data-testid='step']\").should(\"have.length\", 2);\n    cy.updateCodeInput(\".t--property-control-numberofsteps\", \"1\");\n    // does not show progress with steps\n    cy.get(\"[data-testid='step']\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: type, Change type to Circular","suites":["Progress Widget"],"updatePoint":{"line":56,"column":45,"index":2384},"line":56,"code":"  it(\"Property: type, Change type to Circular\", function () {\n    // Switch to circular mode\n    cy.get(\"[data-value='circular']\").click({\n      force: true\n    });\n    cy.get(\"[data-testid='circular']\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: isIndeterminate, Toggle infinite loading","suites":["Progress Widget"],"updatePoint":{"line":63,"column":56,"index":2622},"line":63,"code":"  it(\"Property: isIndeterminate, Toggle infinite loading\", function () {\n    cy.openPropertyPane(\"progresswidget\");\n    // enable infinite loading\n    cy.togglebar(\".t--property-control-infiniteloading input[type='checkbox']\");\n    // show indeterminate linear progress\n    cy.get(\"[data-testid='circular']\").should(\"exist\").should(\"have.css\", \"animation\");\n    // disable infinite loading\n    cy.togglebarDisable(\".t--property-control-infiniteloading input[type='checkbox']\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: value, Change progress value","suites":["Progress Widget"],"updatePoint":{"line":73,"column":44,"index":3197},"line":73,"code":"  it(\"Property: value, Change progress value\", function () {\n    cy.updateCodeInput(\".t--property-control-progress\", \"50\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // The path element with 50 should exist\n    cy.get(\"[data-testvalue='50']\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: showResult, Toggle show result","suites":["Progress Widget"],"updatePoint":{"line":79,"column":46,"index":3530},"line":79,"code":"  it(\"Property: showResult, Toggle show result\", function () {\n    // enable show result\n    cy.togglebar(\".t--property-control-showresult input[type='checkbox']\");\n    // show label\n    cy.get(\"[data-testid='circular-label']\").should(\"contain.text\", \"50\");\n    // disable show result\n    cy.togglebarDisable(\".t--property-control-showresult input[type='checkbox']\");\n    // does not show any label\n    cy.get(\"[data-testid='circular-label']\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: steps, Change steps","suites":["Progress Widget"],"updatePoint":{"line":89,"column":35,"index":3990},"line":89,"code":"  it(\"Property: steps, Change steps\", function () {\n    cy.updateCodeInput(\".t--property-control-numberofsteps\", \"2\");\n    // show circular progress with steps\n    cy.get(\"[data-testid='separator']\").should(\"have.length\", 2);\n    cy.updateCodeInput(\".t--property-control-numberofsteps\", \"1\");\n    // does not show progress with steps\n    cy.get(\"[data-testid='separator']\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: counterClockwise,Change counterclockwise","suites":["Progress Widget"],"updatePoint":{"line":97,"column":56,"index":4412},"line":97,"code":"  it(\"Property: counterClockwise,Change counterclockwise\", function () {\n    // enable counterclockwise\n    cy.togglebar(\".t--property-control-counterclockwise input[type='checkbox']\");\n    // show the progress in a counterclockwise\n    cy.get(\"[data-testvalue='50']\").invoke(\"css\", \"stroke-dashoffset\").and(\"match\", /-/);\n    // disable counterclockwise\n    cy.togglebarDisable(\".t--property-control-counterclockwise input[type='checkbox']\");\n    // show the progress in a clockwise\n    cy.get(\"[data-testvalue='50']\").invoke(\"css\", \"stroke-dashoffset\").should(\"not.match\", /-/);\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"The binding property, progress should be exposed for an auto suggestion","suites":["Progress Widget"],"updatePoint":{"line":107,"column":77,"index":5020},"line":107,"code":"  it(\"The binding property, progress should be exposed for an auto suggestion\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".t--property-control-text .CodeMirror textarea\").type(\"{{Progress1.\", {\n      force: true\n    });\n    cy.get(\"ul.CodeMirror-hints\").contains(\"progress\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Progress_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify Statbox can be placed inside another widget","suites":["Statbox Widget Functionality"],"updatePoint":{"line":15,"column":56,"index":672},"line":15,"code":"  it(\"Verify Statbox can be placed inside another widget\", () => {\n    cy.get(explorer.addWidget).click();\n    // placing statbox widget inside container widget\n    cy.dragAndDropToWidget(\"statboxwidget\", \"containerwidget\", {\n      x: 100,\n      y: 100\n    });\n    cy.openPropertyPaneWithIndex(\"statboxwidget\", 1);\n    cy.openPropertyPaneWithIndex(\"statboxwidget\", 0);\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/StatBox_DragAndDrop_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Open Existing Statbox from created Widgets list","suites":["Statbox Widget Functionality"],"updatePoint":{"line":16,"column":56,"index":737},"line":16,"code":"  it(\"1. Open Existing Statbox from created Widgets list\", () => {\n    cy.get(\".widgets\").first().click();\n    cy.get(\".t--entity .widget\").get(\".entity-context-menu\").last().click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Open Existing Statbox, change background color and verify","suites":["Statbox Widget Functionality"],"updatePoint":{"line":22,"column":66,"index":962},"line":22,"code":"  it(\"2. Open Existing Statbox, change background color and verify\", () => {\n    cy.openPropertyPane(\"statboxwidget\");\n    // changing the background color of statbox and verying it\n    cy.get(\".t--property-pane-section-general\").then(() => {\n      cy.moveToStyleTab();\n      cy.get(`${widgetsPage.cellBackground} input`).first().clear().wait(400).type(\"#FFC13D\");\n      cy.get(`${widgetsPage.cellBackground} input`).should(\"have.value\", \"#FFC13D\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify Statbox icon button's onClick action and change the icon","suites":["Statbox Widget Functionality"],"updatePoint":{"line":31,"column":72,"index":1432},"line":31,"code":"  it(\"3. Verify Statbox icon button's onClick action and change the icon\", () => {\n    cy.openPropertyPane(\"iconbuttonwidget\");\n    cy.get(\".t--property-pane-section-general\").then(() => {\n      //cy.moveToStyleTab();\n      // changing the icon to arrow-up\n      cy.get(\".bp3-button-text\").first().click();\n      cy.get(\".bp3-icon-arrow-up\").click().wait(500);\n      // opening modal from onClick action of icon button\n      cy.createModal(\"Modal\", \"onClick\");\n    });\n    // verifying the changed icon\n    cy.get(\".bp3-icon-arrow-up\").should(\"be.visible\").click({\n      force: true\n    });\n\n    // verifying modal has been added\n    cy.get(\".t--modal-widget .t--draggable-iconbuttonwidget\").click({\n      force: true\n    });\n    cy.get(\"span:contains('Close')\").closest(\"div\").last().click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Bind datasource to multiple components in statbox","suites":["Statbox Widget Functionality"],"updatePoint":{"line":52,"column":58,"index":2218},"line":52,"code":"  it(\"4. Bind datasource to multiple components in statbox\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"MockApi\");\n    cy.enterDatasourceAndPath(data.paginationUrl, \"mock-api?records=20&page=4&size=3\");\n    cy.SaveAndRunAPI();\n    // going to HomePage where the button widget is located and opening it's property pane.\n    cy.get(widgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    // binding datasource to text widget in statbox\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{ctrl}{shift}{downarrow}\").type(\"{{MockApi.data.users[0].id}}\", {\n      parseSpecialCharSequences: false\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Video Widget play functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":8,"column":51,"index":352},"line":8,"code":"  it(\"1. Video Widget play functionality validation\", function () {\n    cy.openPropertyPane(\"videowidget\");\n    cy.widgetText(\"Video1\", widgetsPage.videoWidget, widgetsPage.widgetNameSpan);\n    cy.getAlert(\"onPlay\", \"Play success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Play success\");\n    */\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Video widget pause functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":21,"column":52,"index":891},"line":21,"code":"  it(\"2. Video widget pause functionality validation\", function () {\n    cy.getAlert(\"onPause\", \"Pause success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Pause success\");\n    */\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Update video url and check play and pause functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":32,"column":75,"index":1334},"line":32,"code":"  it(\"3. Update video url and check play and pause functionality validation\", function () {\n    cy.testCodeMirror(testdata.videoUrl);\n    cy.get(\".CodeMirror textarea\").first().blur();\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Play success\");\n    */\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Pause success\");\n    */\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Checks if video widget is reset on button click","suites":["Video Widget Functionality"],"updatePoint":{"line":55,"column":56,"index":2154},"line":55,"code":"  it(\"4. Checks if video widget is reset on button click\", function () {\n    cy.testCodeMirror(testdata.videoUrl2);\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.widgetText(\"Button1\", widgetsPage.buttonWidget, widgetsPage.widgetNameSpan);\n    cy.selectResetWidget(\"onClick\");\n    cy.selectWidgetForReset(\"Video1\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Video1.playState}}`);\n    cy.openPropertyPane(\"videowidget\");\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    // Wait time added, allowing a second to pass between playing and pausing the widget, before it is reset to zero\n    cy.wait(1000);\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.get(widgetsPage.widgetBtn).click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(`${widgetsPage.videoWidget} video`).then($video => {\n      const video = $video.get(0);\n      expect(video.currentTime).to.equal(0);\n    });\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"NOT_STARTED\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Others/Video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new dropdown widget","suites":["Phone input widget - "],"updatePoint":{"line":17,"column":32,"index":639},"line":17,"code":"  it(\"1. Add new dropdown widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{PhoneInput1.text}}:{{PhoneInput1.countryCode}}:{{PhoneInput1.dialCode}}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should check for the format and dialCode","suites":["Phone input widget - "],"updatePoint":{"line":31,"column":49,"index":1124},"line":31,"code":"  it(\"2. Should check for the format and dialCode\", () => {\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"9999999999\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"(999) 999-9999:US:+1\");\n    cy.openPropertyPane(widgetName);\n    searchAndSelectOption(\"Afghanistan (+93)\");\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"1234567890\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1234567890:AF:+93\");\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"🇦🇫+93\");\n    cy.get(\".t--property-control-changecountrycode label\").last().click({\n      force: true\n    });\n    cy.get(\".t--input-country-code-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"+91\");\n    cy.wait(500);\n    cy.get(\"[data-cy='t--dropdown-option-India (+91)\").last().click();\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"9999999999\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"99999 99999:IN:+91\");\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"🇮🇳+91\");\n    cy.get(\".t--property-control-enableformatting label\").last().click({\n      force: true\n    });\n    searchAndSelectOption(\"United States / Canada (+1)\");\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"9999999999\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"9999999999:US:+1\");\n    cy.openPropertyPane(widgetName);\n    searchAndSelectOption(\"India (+91)\");\n    cy.get(`.t--widget-${widgetName} input`).clear();\n    cy.wait(500);\n    cy.get(`.t--widget-${widgetName} input`).type(\"1234567890\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1234567890:IN:+91\");\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"🇮🇳+91\");\n  });","file":"e2e/Regression/ClientSide/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should check that widget input resets on submit","suites":["Phone input widget - "],"updatePoint":{"line":71,"column":56,"index":3108},"line":71,"code":"  it(\"3. Should check that widget input resets on submit\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{PhoneInput1.text}}:{{PhoneInput1.value}}`);\n    cy.openPropertyPane(widgetName);\n    cy.getAlert(\"onSubmit\", \"Submitted!!\");\n    cy.get(widgetInput).clear();\n    cy.wait(500);\n    cy.get(widgetInput).click().type(\"1234567890\");\n    cy.wait(500);\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"1234567890:1234567890\");\n    cy.get(widgetInput).type(\"{enter}\");\n    cy.wait(300);\n    cy.get(widgetInput).should(\"contain.value\", \"\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \":\");\n  });","file":"e2e/Regression/ClientSide/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check isDirty meta property","suites":["Phone input widget - "],"updatePoint":{"line":86,"column":36,"index":3753},"line":86,"code":"  it(\"4. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{PhoneInput1.isDirty}}`);\n    // Change defaultText\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"1\");\n    cy.closePropertyPane();\n    // Check if isDirty is set to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(widgetInput).clear();\n    cy.wait(300);\n    cy.get(widgetInput).type(\"2\");\n    cy.wait(300);\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Reset isDirty by changing defaultText\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaultvalue\", \"3\");\n    // Check if isDirty is set to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Currency change dropdown should not close unexpectedly","suites":["Phone input widget - "],"updatePoint":{"line":108,"column":63,"index":4701},"line":108,"code":"  it(\"5. Currency change dropdown should not close unexpectedly\", function () {\n    cy.openPropertyPane(widgetName);\n\n    // Select the Currency dropdown option from property pane\n    // and enter a value that has space and returns 0 results\n    cy.get(\".t--property-control-defaultcountrycode input\").first().click().type(\"AFDB (+93)\");\n\n    // assert that the dropdown is still option\n    cy.get(\".t--property-control-defaultcountrycode input\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/PhoneInput/Phone_input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should show empty dropdown for a typo","suites":["Phone input widget - "],"updatePoint":{"line":8,"column":46,"index":332},"line":8,"code":"  it(\"1. Should show empty dropdown for a typo\", () => {\n    cy.openPropertyPane(widgetName);\n\n    // Turn on changecountrycode\n    cy.get(\".t--property-control-changecountrycode label\").last().click({\n      force: true\n    });\n    // Click on the country code change option\n    cy.get(\".t--input-country-code-change\").first().click();\n    // Search with a typo\n    cy.get(\".t--search-input input\").type(\"inpia\");\n    cy.wait(500);\n    // Assert the options dropdown is still open\n    cy.get(\".t--search-input input\").should(\"be.visible\");\n    cy.PublishtheApp();\n    // Click on the country code change option\n    cy.get(\".t--input-country-code-change\").first().click();\n    // Search with a typo\n    cy.get(\".t--search-input input\").type(\"inpia\");\n    cy.wait(500);\n    // Assert the options dropdown is still open\n    cy.get(\".t--search-input input\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/PhoneInput/PhoneInputDynamicValue_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that widget can be used with dynamic default dial code","suites":["Phone input widget - "],"updatePoint":{"line":32,"column":76,"index":1286},"line":32,"code":"  it(\"2. should check that widget can be used with dynamic default dial code\", () => {\n    cy.openPropertyPane(widgetName);\n    cy.get(\".t--property-control-defaultcountrycode .CodeMirror-code\").should(\"contain\", \"{{appsmith.store.test}}\");\n    cy.get(\".t--input-country-code-change\").first().click();\n    cy.get(\".t--search-input input\").type(\"india\");\n    cy.wait(500);\n    cy.get(\".t--dropdown-option\").last().click();\n    cy.get(\".t--property-control-defaultcountrycode .CodeMirror-code\").should(\"contain\", \"{{appsmith.store.test}}\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").first().click({\n      force: true\n    });\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"+91\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"+91:IN:+91\");\n    cy.get(\".bp3-button.select-button\").click({\n      force: true\n    });\n    cy.get(\".menu-item-text\").last().click({\n      force: true\n    });\n    cy.get(\".t--input-country-code-change\").should(\"contain\", \"+93\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"+93:AF:+93\");\n  });","file":"e2e/Regression/ClientSide/Widgets/PhoneInput/PhoneInputDynamicValue_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Widget Functionality","suites":["Radio Widget Functionality"],"updatePoint":{"line":10,"column":32,"index":494},"line":10,"code":"  it(\"Radio Widget Functionality\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n    cy.widgetText(\"radiotest\", formWidgetsPage.radioWidget, widgetsPage.widgetNameSpan);\n    /**\n     * @param{IndexValue} Provide Input Index Value\n     * @param{Text} Index Text Value.\n     *\n     */\n    cy.radioInput(0, this.data.radio1);\n    cy.get(formWidgetsPage.labelradio).eq(0).should(\"have.text\", \"test1\");\n    cy.radioInput(1, \"1\");\n    cy.radioInput(2, this.data.radio2);\n    cy.get(formWidgetsPage.labelradio).eq(1).should(\"have.text\", this.data.radio2);\n    cy.radioInput(3, \"2\");\n    cy.get(formWidgetsPage.radioAddButton).click({\n      force: true\n    });\n    cy.radioInput(4, this.data.radio4);\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.get(formWidgetsPage.labelradio).should(\"not.have.value\", \"test4\");\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n    cy.getAlert(\"onSelectionChange\");\n    cy.get(formWidgetsPage.defaultSelect);\n    cy.get(\".t--add-action-onSelectionChange\").scrollIntoView().click({\n      force: true\n    }).type(\"2\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Unchecked Visible Widget","suites":["Radio Widget Functionality"],"updatePoint":{"line":47,"column":53,"index":1783},"line":47,"code":"  it(\"Radio Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.radioWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Check Visible Widget","suites":["Radio Widget Functionality"],"updatePoint":{"line":55,"column":49,"index":2134},"line":55,"code":"  it(\"Radio Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.radioWidget + \" \" + \"input\").should(\"be.checked\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Button Text","suites":["Radio Widget Functionality"],"updatePoint":{"line":61,"column":40,"index":2386},"line":61,"code":"  it(\"Radio Functionality To Button Text\", function () {\n    cy.get(publish.radioWidget + \" \" + \"label\").eq(1).should(\"have.text\", \"test2\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio widget check selection with value property as integer","suites":["RadioGroup widget testing"],"updatePoint":{"line":15,"column":65,"index":618},"line":15,"code":"  it(\"Radio widget check selection with value property as integer\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n\n    //Check radio with value=1 is selected\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"1\");\n\n    //Change the DSV to {{2}}\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"{{2}}\");\n    cy.wait(200);\n\n    //Radio with value=2 is selected\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"2\");\n\n    //Check option 1 and then check it's value:\n    cy.get(`${formWidgetsPage.radioWidget} input`).check(\"1\", {\n      force: true\n    });\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"1\");\n\n    //Check option 2 and then check it's value:\n    cy.get(`${formWidgetsPage.radioWidget} input`).check(\"2\", {\n      force: true\n    });\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup_Int_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio widget check selection with value property as string","suites":["RadioGroup widget testing"],"updatePoint":{"line":40,"column":64,"index":1489},"line":40,"code":"  it(\"Radio widget check selection with value property as string\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Yes\",\n          \"value\": \"1\"\n        },\n        {\n          \"label\": \"No\",\n          \"value\": \"2\"\n        }\n      ]`);\n\n    //Change the DSV to 1.\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"1\");\n\n    //Check radio with value=1 is selected\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"1\");\n\n    //Change the DSV to 2.\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"2\");\n    cy.wait(200);\n\n    //Check radio with value=2 is selected\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"2\");\n\n    //Check option 1 and then check it's value:\n    cy.get(`${formWidgetsPage.radioWidget} input`).check(\"1\", {\n      force: true\n    });\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"1\");\n\n    //Check option 2 and then check it's value:\n    cy.get(`${formWidgetsPage.radioWidget} input`).check(\"2\", {\n      force: true\n    });\n    checkSelectedRadioValue(formWidgetsPage.radioWidget, \"2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup_Int_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check the custom validations for the options property","suites":["RadioGroup widget testing"],"updatePoint":{"line":78,"column":59,"index":2663},"line":78,"code":"  it(\"Check the custom validations for the options property\", function () {\n    /**\n     * Test case defs, an error should be thrown when:\n     * 1. When datatypes are not same for value property\n     * 2. When duplicate values is given\n     * 3. When invalid value is given\n     */\n\n    //Base-line scenario\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Yes\",\n          \"value\": 1\n        },\n        {\n          \"label\": \"No\",\n          \"value\": 2\n        }\n      ]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"{{1}}\");\n    cy.wait(200);\n    const inputOutputValues = [{\n      //Case 1.0:When datatypes are not same for value property\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"1\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: \"All value properties in options must have the same type\"\n    }, {\n      //Case 1.1:When datatypes are not same for value property\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: `All value properties in options must have the same type`\n    }, {\n      //Case 2:When duplicate values is given\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\": 2\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: \"path:value must be unique. Duplicate values found\"\n    }, {\n      //Case 3.0:When invalid value is given\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\":\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: `This value does not evaluate to type Array<{ \"label\": \"string\", \"value\": \"string\" | number }>`\n    }, {\n      //Case 3.1:When invalid value is given\n      input: `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": 2\n          }\n        ]`,\n      message: `This value does not evaluate to type Array<{ \"label\": \"string\", \"value\": \"string\" | number }>`\n    }];\n    inputOutputValues.map(useCase => {\n      cy.updateCodeInput(\".t--property-control-options\", useCase.input);\n      cy.evaluateErrorMessage(useCase.message);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup_Int_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check the value is string or integer for the default value","suites":["RadioGroup widget testing"],"updatePoint":{"line":171,"column":64,"index":5162},"line":171,"code":"  it(\"Check the value is string or integer for the default value\", () => {\n    /**\n     * Test cases:\n     * 1. Object data type should be invalid\n     * 2. Boolean should be invalid\n     * 3. Integer should be valid\n     * 4. String should be valid\n     */\n\n    //Base-line scenario\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n         {\n           \"label\": \"Yes\",\n           \"value\": 1\n         },\n         {\n           \"label\": \"No\",\n           \"value\": 2\n         }\n       ]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"{{1}}\");\n    cy.wait(200);\n    const inputOutputValues = [{\n      //Case 1.0: Object data type should be invalid\n      input: \"{{[]}}\",\n      message: \"This value does not evaluate to type: string or number\"\n    }, {\n      //Case 1.1: Object data type should be invalid\n      input: \"{{{}}}\",\n      message: `This value does not evaluate to type: string or number`\n    }, {\n      //Case 2: Boolean data type should be invalid\n      input: \"{{true}}\",\n      message: `This value does not evaluate to type: string or number`\n    }, {\n      //Case 3:Integer should be valid\n      input: \"{{1}}\",\n      message: \"\"\n    }, {\n      //Case 4:String should be valid\n      input: \"1\",\n      message: \"\"\n    }];\n    inputOutputValues.map(useCase => {\n      cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", useCase.input);\n      if (useCase.message === \"\") {\n        cy.wait(200);\n        cy.get(\".t--evaluatedPopup-error\").should(\"not.exist\");\n      } else {\n        cy.evaluateErrorMessage(useCase.message);\n      }\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup_Int_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":7,"column":20,"index":259},"line":7,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"radiogroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-radiogroupwidget\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":15,"column":57,"index":516},"line":15,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.updateCodeInput(\".t--property-control-options\", `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"Y\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": \"\"\n          }\n        ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":32,"column":72,"index":1062},"line":32,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": \"\"\n          }\n        ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag & drop Radio group & Text widgets","suites":["Radio Group Widget"],"updatePoint":{"line":4,"column":44,"index":198},"line":4,"code":"  it(\"Drag & drop Radio group & Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(widgetName, {\n      x: 300,\n      y: 300\n    });\n    cy.get(`.t--widget-${widgetName}`).should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{RadioGroup1.isDirty}}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check isDirty meta property","suites":["Radio Group Widget"],"updatePoint":{"line":18,"column":33,"index":617},"line":18,"code":"  it(\"Check isDirty meta property\", function () {\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(\".t--widget-radiogroupwidget .bp3-radio\").last().click();\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Change defaultOptionValue\n    cy.openPropertyPane(widgetName);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"N\");\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Radio/RadioGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. RichTextEditor-Edit Text area with HTML body functionality","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":44,"column":67,"index":1470},"line":44,"code":"  it(\"1. RichTextEditor-Edit Text area with HTML body functionality\", function () {\n    //changing the Text Name\n    cy.widgetText(this.data.RichTextEditorName, formWidgetsPage.richTextEditorWidget, widgetsPage.widgetNameSpan);\n\n    //Edit the text area with Html\n    cy.testJsontext(\"defaultvalue\", this.data.HtmlText);\n\n    //Validate Html\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"This is a Heading\");\n    cy.PublishtheApp();\n    cy.validateHTMLText(publishPage.richTextEditorWidget, \"h1\", \"This is a Heading\");\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. RichTextEditor-Enable Validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":56,"column":41,"index":1992},"line":56,"code":"  it(\"2. RichTextEditor-Enable Validation\", function () {\n    //Uncheck the Disabled checkbox\n    cy.UncheckWidgetProperties(formWidgetsPage.disableJs);\n    cy.validateEnableWidget(formWidgetsPage.richTextEditorWidget, commonlocators.disabledBtn);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.richTextEditorWidget, commonlocators.disabledBtn);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.openPropertyPane(\"richtexteditorwidget\");\n\n    //Check the Disabled checkbox\n    cy.CheckWidgetProperties(formWidgetsPage.disableJs);\n    cy.validateDisableWidget(formWidgetsPage.richTextEditorWidget, commonlocators.disabledBtn);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.richTextEditorWidget, commonlocators.disabledBtn);\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. RichTextEditor-check Visible field  validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":73,"column":55,"index":2799},"line":73,"code":"  it(\"3. RichTextEditor-check Visible field  validation\", function () {\n    // Uncheck the visible checkbox\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.richTextEditorWidget).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.openPropertyPane(\"richtexteditorwidget\");\n\n    // RichTextEditor-uncheck Visible field validation\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.richTextEditorWidget).should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. RichTextEditor-check Hide toolbar field validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":88,"column":59,"index":3400},"line":88,"code":"  it(\"4. RichTextEditor-check Hide toolbar field validation\", function () {\n    // Check the Hide toolbar checkbox\n    cy.CheckWidgetProperties(commonlocators.hideToolbarCheckbox);\n    cy.validateToolbarHidden(formWidgetsPage.richTextEditorWidget, commonlocators.rteToolbar);\n    cy.PublishtheApp();\n    cy.validateToolbarHidden(publishPage.richTextEditorWidget, commonlocators.rteToolbar);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.openPropertyPane(\"richtexteditorwidget\");\n\n    //RichTextEditor-uncheck Hide toolbar field validation - // Uncheck the Hide toolbar checkbox\n    cy.UncheckWidgetProperties(commonlocators.hideToolbarCheckbox);\n    cy.validateToolbarVisible(formWidgetsPage.richTextEditorWidget, commonlocators.rteToolbar);\n    cy.PublishtheApp();\n    cy.validateToolbarVisible(publishPage.richTextEditorWidget, commonlocators.rteToolbar);\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Reset RichTextEditor","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":105,"column":29,"index":4266},"line":105,"code":"  it(\"5. Reset RichTextEditor\", function () {\n    // Enable the widget\n    cy.UncheckWidgetProperties(formWidgetsPage.disableJs);\n    cy.setTinyMceContent(\"rte-6h8j08u7ea\", \"<h1>content</h1>\");\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"content\");\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"onclick\", '{{resetWidget(\"RichtextEditor\", true)}}');\n    cy.get(\".t--widget-buttonwidget .bp3-button\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"This is a Heading\");\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Check isDirty meta property","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":121,"column":36,"index":4960},"line":121,"code":"  it(\"6. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{RichtextEditor.isDirty}}`);\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    // Change defaultText\n    cy.testJsontext(\"defaultvalue\", \"a\");\n    // Check if isDirty has been changed into false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(formWidgetsPage.richTextEditorWidget + \" iframe\").then($iframe => {\n      const $body = $iframe.contents().find(\"body\");\n      cy.get($body).type(\"abc\", {\n        force: true\n      });\n    });\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Change defaultText\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.testJsontext(\"defaultvalue\", \"b\");\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n\n    /**\n     * Check the following scenario\n     * After reset, post entering default text, isDirty should remain false;\n     */\n    cy.get(\".t--widget-buttonwidget .bp3-button\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.testJsontext(\"defaultvalue\", \"c\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Check if the binding is getting removed from the text and the RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":156,"column":81,"index":6359},"line":156,"code":"  it(\"7. Check if the binding is getting removed from the text and the RTE widget\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{RichtextEditor.text}}`);\n    // Change defaultText of the RTE\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.testJsontext(\"defaultvalue\", \"Test Content\");\n\n    //Check if the text widget has the defaultText of RTE\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"Test Content\");\n\n    //Clear the default text from RTE\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.testJsontext(\"defaultvalue\", \"\");\n\n    //Check if text widget and RTE widget does not have any text in it.\n    cy.get(\".t--widget-richtexteditorwidget\").should(\"contain\", \"\");\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Check if text does not re-appear when cut, inside the RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":174,"column":73,"index":7173},"line":174,"code":"  it(\"8. Check if text does not re-appear when cut, inside the RTE widget\", function () {\n    cy.window().then(win => {\n      const tinyMceId = \"rte-6h8j08u7ea\";\n      const editor = win.tinymce.editors[tinyMceId];\n\n      //Set the content\n      editor.setContent(\"Test Content\");\n\n      //Check the content:\n      expect(editor.getContent({\n        format: \"text\"\n      })).to.be.equal(\"Test Content\");\n\n      //Set the content\n      editor.setContent(\"\");\n\n      //Check the content:\n      expect(editor.getContent({\n        format: \"text\"\n      })).to.be.equal(\"\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Check if the cursor position is at the end for the RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":196,"column":70,"index":7753},"line":196,"code":"  it(\"9. Check if the cursor position is at the end for the RTE widget\", function () {\n    const tinyMceId = \"rte-6h8j08u7ea\";\n    const testString = \"Test Content\";\n    const testStringLen = testString.length;\n\n    // Check if the cursor is at the end when input Type is HTML\n    setRTEContent(testString);\n    testCursorPoistion(testStringLen, tinyMceId);\n    setRTEContent(\"{selectAll}\");\n    setRTEContent(\"{backspace}\");\n\n    // Changing the input type to markdown and again testing the cursor position\n    cy.openPropertyPane(\"richtexteditorwidget\");\n    cy.get(\"span:contains('Markdown')\").eq(0).click({\n      force: true\n    });\n    setRTEContent(testString);\n    testCursorPoistion(testStringLen, tinyMceId);\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Check if different font size texts are supported inside the RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":215,"column":80,"index":8487},"line":215,"code":"  it(\"10. Check if different font size texts are supported inside the RTE widget\", function () {\n    const tinyMceId = \"rte-6h8j08u7ea\";\n    const testString = \"Test Content\";\n\n    // Set the content inside RTE widget by typing\n    setRTEContent(`${testString} {enter} ${testString} 1`);\n    cy.get(\".tox-tbtn--bespoke\").click({\n      force: true\n    });\n    cy.contains(\"Heading 1\").click({\n      force: true\n    });\n    cy.window().then(win => {\n      const editor = win.tinymce.editors[tinyMceId];\n\n      // Get the current editor text\n      const getCurrentHtmlContent = editor.getContent();\n\n      // Check if the editor contains text of font sizes h1 and p;\n      expect(getCurrentHtmlContent).contains(\"<h1>\");\n      expect(getCurrentHtmlContent).contains(\"<p>\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Check if button for Underline exists within the Toolbar of RTE widget","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":238,"column":79,"index":9271},"line":238,"code":"  it(\"11. Check if button for Underline exists within the Toolbar of RTE widget\", () => {\n    cy.get('[aria-label=\"Underline\"]').should(\"exist\");\n\n    //Check if button for Background Color is rendered only once within the Toolbar of RTE widget\n    cy.get('[aria-label=\"Background color\"]').should(\"have.length\", 1);\n\n    //Check if button for Text Color is rendered only once within the Toolbar of RTE widget\n    cy.get('[aria-label=\"Text color\"]').should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Check if able to add an emoji through toolbar","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":247,"column":55,"index":9729},"line":247,"code":"  it(\"12. Check if able to add an emoji through toolbar\", () => {\n    cy.get('[aria-label=\"More...\"]').click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get('[aria-label=\"Emoticons\"]').click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get('[aria-label=\"grinning\"]').click({\n      force: true\n    });\n    const getEditorContent = win => {\n      const tinyMceId = \"rte-6h8j08u7ea\";\n      const editor = win.tinymce.editors[tinyMceId];\n      return editor.getContent();\n    };\n\n    //contains emoji\n    cy.window().then(win => {\n      expect(getEditorContent(win)).contains(\"😀\");\n    });\n\n    //trigger a backspace\n    cy.get(formWidgetsPage.richTextEditorWidget + \" iframe\").then($iframe => {\n      const $body = $iframe.contents().find(\"body\");\n      cy.get($body).type(\"{backspace}\", {\n        force: true\n      });\n    });\n\n    // after backspace the emoji should not be present\n    cy.window().then(win => {\n      expect(getEditorContent(win)).not.contains(\"😀\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-required with empty content show error border for textarea","suites":["RichTextEditor Widget Validation"],"updatePoint":{"line":12,"column":79,"index":495},"line":12,"code":"  it(\"RichTextEditor-required with empty content show error border for textarea\", function () {\n    cy.setTinyMceContent(\"rte-6h8j08u7ea\", \"\");\n    cy.get(commonlocators.requiredCheckbox).click({\n      force: true\n    });\n    cy.wait(500);\n\n    // check that input border is red\n    cy.get(formWidgetsPage.richTextEditorWidget + \" .tox.tox-tinymce\").should(\"have.css\", \"border\", \"1px solid rgb(217, 25, 33)\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/RTE/RichTextEditor_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Drag and drop Select/Text widgets","suites":["Select widget"],"updatePoint":{"line":7,"column":42,"index":449},"line":7,"code":"  it(\"1. Drag and drop Select/Text widgets\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(formWidgetsPage.selectWidget).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check isDirty meta property","suites":["Select widget"],"updatePoint":{"line":15,"column":36,"index":680},"line":15,"code":"  it(\"2. Check isDirty meta property\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.updateCodeInput(\".t--property-control-text\", `{{Select1.isDirty}}`);\n    // Check if initial value of isDirty is false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Blue\").click({\n      force: true\n    });\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Change defaultOptionValue property\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"RED\");\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Clears the search field when widget is closed and serverSideFiltering is off","suites":["Select widget"],"updatePoint":{"line":37,"column":85,"index":1622},"line":37,"code":"  it(\"3. Clears the search field when widget is closed and serverSideFiltering is off\", () => {\n    // open the select widget\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    // search for option Red in the search input\n    cy.get(commonlocators.selectInputSearch).type(\"Red\");\n    // Select the Red option from dropdown list\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Red\").click({\n      force: true\n    });\n    cy.wait(200);\n    // Assert if the select widget has Red as the selected value\n    cy.get(formWidgetsPage.selectWidget).contains(\"Red\");\n    // Open the select widget again\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    // Assert if the search input is empty now\n    cy.get(commonlocators.selectInputSearch).invoke(\"val\").should(\"be.empty\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Does not clear the search field when widget is closed and serverSideFiltering is on","suites":["Select widget"],"updatePoint":{"line":58,"column":92,"index":2557},"line":58,"code":"  it(\"4. Does not clear the search field when widget is closed and serverSideFiltering is on\", () => {\n    // toggle the serversidefiltering option on\n    cy.togglebar('.t--property-control-serversidefiltering input[type=\"checkbox\"]');\n    // search for option Red in the search input\n    cy.get(commonlocators.selectInputSearch).type(\"Red\");\n    // Select the Red option from dropdown list\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"Red\").click({\n      force: true\n    });\n    cy.wait(200);\n    // Open the select widget again\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    // Assert if the search input is not empty\n    cy.get(commonlocators.selectInputSearch).invoke(\"val\").should(\"not.be.empty\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Select tooltip renders if tooltip prop is not empty","suites":["Select widget"],"updatePoint":{"line":75,"column":60,"index":3327},"line":75,"code":"  it(\"5. Select tooltip renders if tooltip prop is not empty\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    // enter tooltip in property pan\n    cy.get(widgetsPage.inputTooltipControl).type(\"Helpful text for tooltip !\");\n    // tooltip help icon shows\n    cy.get(\".select-tooltip\").scrollIntoView().should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. To Check empty options for Multi Select Tree Widget","suites":["MultiSelect, Tree Select and Multi Tree Select Widget Empty Options Functionality"],"updatePoint":{"line":7,"column":60,"index":368},"line":7,"code":"  it(\"1. To Check empty options for Multi Select Tree Widget\", () => {\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.get(\".rc-tree-select-empty\").should(\"have.text\", \"No Results Found\");\n\n    //To Check empty options for Single Select Tree Widget\"\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    }).get(\".single-tree-select-dropdown .rc-tree-select-empty\").should(\"have.text\", \"No Results Found\");\n\n    //To Check empty options for Multi Select Widget\n    cy.get(formWidgetsPage.mulitiselectInput).eq(0).click({\n      force: true\n    });\n    cy.get(\".rc-select-item-empty\").should(\"have.text\", \"No Results Found\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_TreeSelect_MultiSelect_Empty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. onDropdownOpen and onDropdownClose should be triggered from the select widget","suites":["Select, MultiSelect, Tree Select and Multi Tree Select Widget Property tests onFocus and onBlur"],"updatePoint":{"line":8,"column":86,"index":488},"line":8,"code":"  it(\"1. onDropdownOpen and onDropdownClose should be triggered from the select widget\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.get(widgetsPage.toggleOnDropdownOpen).click({\n      force: true\n    });\n    cy.testJsontext(\"ondropdownopen\", \"{{showAlert('Select1 dropdown opened', 'success')}}\");\n    cy.get(widgetsPage.toggleOnDropdownClose).click({\n      force: true\n    });\n    cy.testJsontext(\"ondropdownclose\", \"{{showAlert('Select1 dropdown closed', 'success')}}\");\n    cy.get(formWidgetsPage.selectButton).click({\n      force: true\n    });\n    cy.validateToastMessage(\"Select1 dropdown opened\");\n    cy.get(formWidgetsPage.selectButton).click({\n      force: true\n    });\n    cy.validateToastMessage(\"Select1 dropdown closed\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_TreeSelect_MultiSelect_OnFocus_OnBlur_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. onDropdownOpen and onDropdownClose should be triggered from the multiselect widget","suites":["Select, MultiSelect, Tree Select and Multi Tree Select Widget Property tests onFocus and onBlur"],"updatePoint":{"line":27,"column":91,"index":1247},"line":27,"code":"  it(\"2. onDropdownOpen and onDropdownClose should be triggered from the multiselect widget\", () => {\n    cy.openPropertyPane(\"multiselectwidgetv2\");\n    cy.get(widgetsPage.toggleOnDropdownOpen).click({\n      force: true\n    });\n    cy.testJsontext(\"ondropdownopen\", \"{{showAlert('MultiSelect1 dropdown opened', 'success')}}\");\n    cy.get(widgetsPage.toggleOnDropdownClose).click({\n      force: true\n    });\n    cy.testJsontext(\"ondropdownclose\", \"{{showAlert('MultiSelect1 dropdown closed', 'success')}}\");\n    cy.get(formWidgetsPage.multiSelect).first().click({\n      force: true\n    });\n    cy.validateToastMessage(\"MultiSelect1 dropdown opened\");\n    cy.get(formWidgetsPage.multiSelect).first().click({\n      force: true\n    });\n    cy.validateToastMessage(\"MultiSelect1 dropdown closed\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_TreeSelect_MultiSelect_OnFocus_OnBlur_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. onDropdownOpen and onDropdownClose should be triggered from the treeselect widget","suites":["Select, MultiSelect, Tree Select and Multi Tree Select Widget Property tests onFocus and onBlur"],"updatePoint":{"line":46,"column":90,"index":2046},"line":46,"code":"  it(\"3. onDropdownOpen and onDropdownClose should be triggered from the treeselect widget\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.get(widgetsPage.toggleOnDropdownOpen).click({\n      force: true\n    });\n    cy.testJsontext(\"ondropdownopen\", \"{{showAlert('TreeSelect1 dropdown opened', 'success')}}\");\n    cy.get(widgetsPage.toggleOnDropdownClose).click({\n      force: true\n    });\n    cy.testJsontext(\"ondropdownclose\", \"{{showAlert('TreeSelect1 dropdown closed', 'success')}}\");\n    cy.wait(500);\n    cy.get(formWidgetsPage.treeSelect).first().click({\n      force: true\n    });\n    cy.validateToastMessage(\"TreeSelect1 dropdown opened\");\n    cy.get(formWidgetsPage.treeSelect).first().click({\n      force: true\n    });\n    cy.validateToastMessage(\"TreeSelect1 dropdown closed\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_TreeSelect_MultiSelect_OnFocus_OnBlur_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. onDropdownOpen and onDropdownClose should be triggered from the multitreeselect widget","suites":["Select, MultiSelect, Tree Select and Multi Tree Select Widget Property tests onFocus and onBlur"],"updatePoint":{"line":66,"column":95,"index":2865},"line":66,"code":"  it(\"4. onDropdownOpen and onDropdownClose should be triggered from the multitreeselect widget\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.get(widgetsPage.toggleOnDropdownOpen).click({\n      force: true\n    });\n    cy.testJsontext(\"ondropdownopen\", \"{{showAlert('MultiTreeSelect1 dropdown opened', 'success')}}\");\n    cy.get(widgetsPage.toggleOnDropdownClose).click({\n      force: true\n    });\n    cy.testJsontext(\"ondropdownclose\", \"{{showAlert('MultiTreeSelect1 dropdown closed', 'success')}}\");\n    cy.wait(500);\n    cy.get(formWidgetsPage.multiTreeSelect).last().click({\n      force: true\n    });\n    cy.validateToastMessage(\"MultiTreeSelect1 dropdown opened\");\n    cy.get(formWidgetsPage.multiTreeSelect).last().click({\n      force: true\n    });\n    cy.validateToastMessage(\"MultiTreeSelect1 dropdown closed\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_TreeSelect_MultiSelect_OnFocus_OnBlur_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Select Widget name update","suites":["Select Widget Functionality"],"updatePoint":{"line":10,"column":31,"index":473},"line":10,"code":"  it(\"Select Widget name update\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.widgetText(\"Select1\", widgetsPage.selectwidget, widgetsPage.widgetNameSpan);\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that virtualization works well","suites":["Select Widget Functionality"],"updatePoint":{"line":14,"column":49,"index":670},"line":14,"code":"  it(\"should check that virtualization works well\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"RANDOM\",\n          \"value\": \"RANDOM\"\n        },\n        {\n          \"label\": \"RANDOM1\",\n          \"value\": \"RANDOM1\"\n        },\n        {\n          \"label\": \"RANDOM2\",\n          \"value\": \"RANDOM2\"\n        },\n        {\n          \"label\": \"RANDOM3\",\n          \"value\": \"RANDOM3\"\n        },\n        {\n          \"label\": \"RANDOM4\",\n          \"value\": \"RANDOM4\"\n        },\n        {\n          \"label\": \"RANDOM5\",\n          \"value\": \"RANDOM5\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n    // Changing the option to the last item\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM5\").click({\n      force: true\n    });\n    cy.wait(500);\n    // Verifying the top items still renders\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM1\").click({\n      force: true\n    });\n    // Add a longer list of item\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"RANDOM\",\n          \"value\": \"RANDOM\"\n        },\n        {\n          \"label\": \"RANDOM1\",\n          \"value\": \"RANDOM1\"\n        },\n        {\n          \"label\": \"RANDOM2\",\n          \"value\": \"RANDOM2\"\n        },\n        {\n          \"label\": \"RANDOM3\",\n          \"value\": \"RANDOM3\"\n        },\n        {\n          \"label\": \"RANDOM4\",\n          \"value\": \"RANDOM4\"\n        },\n        {\n          \"label\": \"RANDOM5\",\n          \"value\": \"RANDOM5\"\n        },\n        {\n          \"label\": \"RANDOM6\",\n          \"value\": \"RANDOM6\"\n        },\n        {\n          \"label\": \"RANDOM7\",\n          \"value\": \"RANDOM7\"\n        },\n        {\n          \"label\": \"RANDOM8\",\n          \"value\": \"RANDOM8\"\n        },\n        {\n          \"label\": \"RANDOM9\",\n          \"value\": \"RANDOM9\"\n        },\n        {\n          \"label\": \"RANDOM10\",\n          \"value\": \"RANDOM10\"\n        },\n        {\n          \"label\": \"RANDOM11\",\n          \"value\": \"RANDOM11\"\n        }\n\n      ]`);\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM1\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM11\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that filtering works well","suites":["Select Widget Functionality"],"updatePoint":{"line":122,"column":44,"index":3472},"line":122,"code":"  it(\"should check that filtering works well\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"RANDOM\",\n          \"value\": \"RANDOM\"\n        },\n        {\n          \"label\": \"RANDOM1\",\n          \"value\": \"RANDOM1\"\n        },\n        {\n          \"label\": \"RANDOM2\",\n          \"value\": \"RANDOM2\"\n        },\n        {\n          \"label\": \"RANDOM3\",\n          \"value\": \"RANDOM3\"\n        },\n        {\n          \"label\": \"RANDOM4\",\n          \"value\": \"RANDOM4\"\n        },\n        {\n          \"label\": \"RANDOM5\",\n          \"value\": \"RANDOM5\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n    // Filtering the option\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.selectInputSearch).type(\"RANDOM5\");\n    // confirm it only has a single child\n    cy.get(\".select-popover-wrapper .menu-virtual-list\").children().should(\"have.length\", 1);\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"RANDOM5\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Disable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":160,"column":50,"index":4630},"line":160,"code":"  it(\"Disable the widget and check in publish mode\", function () {\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.goToEditFromPublish();\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"enable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":172,"column":49,"index":5010},"line":172,"code":"  it(\"enable the widget and check in publish mode\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".bp3-button\").should(\"be.visible\");\n\n    // Set default value as RANDOM11\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", `{\n        \"label\": \"RANDOM5\",\n        \"value\": \"RANDOM5\"\n      }`);\n    cy.PublishtheApp();\n    cy.get(\".bp3-button.select-button\").eq(0).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectActiveMenuItem).should(\"contain.text\", \"RANDOM5\");\n    cy.goToEditFromPublish();\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that filtering works well using numeric labels","suites":["Select Widget Functionality"],"updatePoint":{"line":195,"column":65,"index":5810},"line":195,"code":"  it(\"should check that filtering works well using numeric labels\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": 1,\n          \"value\": \"BLUE\"\n        },\n        {\n          \"label\": 2,\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"3\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 80\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{typeof Select1.selectedOptionLabel}}\");\n    // Filtering the option\n    cy.get(formWidgetsPage.selectWidget).find(widgetsPage.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.selectInputSearch).type(\"1\");\n    // confirm it only has a single child\n    cy.get(\".select-popover-wrapper .menu-virtual-list\").children().should(\"have.length\", 1);\n    cy.get(commonlocators.singleSelectWidgetMenuItem).contains(\"1\");\n    cy.get(commonlocators.singleSelectWidgetMenuItem).click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).first().should(\"have.text\", \"number\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_Bug_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Select Widget name update","suites":["Select Widget Functionality"],"updatePoint":{"line":9,"column":31,"index":398},"line":9,"code":"  it(\"Select Widget name update\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.widgetText(\"Select1\", widgetsPage.selectwidget, widgetsPage.widgetNameSpan);\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Disable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":13,"column":50,"index":596},"line":13,"code":"  it(\"Disable the widget and check in publish mode\", function () {\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.goToEditFromPublish();\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"enable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":25,"column":49,"index":976},"line":25,"code":"  it(\"enable the widget and check in publish mode\", function () {\n    cy.openPropertyPane(\"selectwidget\");\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".t--widget-selectwidget .bp3-button\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(\".t--widget-selectwidget .bp3-button\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectActiveMenuItem).should(\"contain.text\", \"Green\");\n    cy.goToEditFromPublish();\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new Select widget","suites":["Select Widget Functionality"],"updatePoint":{"line":17,"column":27,"index":484},"line":17,"code":"  it(\"Add new Select widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"selectwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-selectwidget\").should(\"exist\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", defaultValue);\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_widget1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Copy and paste select widget","suites":["Select Widget Functionality"],"updatePoint":{"line":40,"column":34,"index":1079},"line":40,"code":"  it(\"Copy and paste select widget\", () => {\n    cy.openPropertyPane(\"selectwidget\");\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    //copy and paste\n    cy.openPropertyPane(\"selectwidget\");\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.selectwidget).should(\"have.length\", 2);\n    cy.get(\".t--property-control-defaultselectedvalue\").first().click({\n      force: true\n    }).find(\".CodeMirror\").first().then(ins => {\n      const input = ins[0].CodeMirror;\n      let val = input.getValue();\n      try {\n        val = JSON.parse(val);\n        expect(val).to.deep.equal(JSON.parse(defaultValue));\n      } catch (error) {}\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Select_widget1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check isDirty meta property","suites":["Single Select Widget Functionality"],"updatePoint":{"line":11,"column":36,"index":586},"line":11,"code":"  it(\"1. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{SingleSelectTree1.isDirty}}`);\n    // Change defaultText\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"GREEN\");\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"light\");\n    cy.treeSelectDropdown(\"Light Blue\");\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Change defaultText\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalue\", \"RED\");\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selects value with enter in default value","suites":["Single Select Widget Functionality"],"updatePoint":{"line":33,"column":50,"index":1629},"line":33,"code":"  it(\"2. Selects value with enter in default value\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.testJsontext(\"defaultselectedvalue\", \"RED\\n\");\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-item\").first().should(\"have.text\", \"Red\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. To Validate Options","suites":["Single Select Widget Functionality"],"updatePoint":{"line":38,"column":28,"index":1905},"line":38,"code":"  it(\"3. To Validate Options\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"light\");\n    cy.treeSelectDropdown(\"Light Blue\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Clears the search field when widget is closed","suites":["Single Select Widget Functionality"],"updatePoint":{"line":45,"column":54,"index":2181},"line":45,"code":"  it(\"4. Clears the search field when widget is closed\", () => {\n    // Open the widget\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    // Search for Green option in the search input\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"Green\");\n    // Select the Green Option\n    cy.treeSelectDropdown(\"Green\");\n    // Assert Green option is selected\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-item\").first().should(\"have.text\", \"Green\");\n    // Reopen the widget\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    // Assert the search input is cleared\n    cy.get(formWidgetsPage.treeSelectFilterInput).invoke(\"val\").should(\"be.empty\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. To Unchecked Visible Widget","suites":["Single Select Widget Functionality"],"updatePoint":{"line":63,"column":36,"index":2936},"line":63,"code":"  it(\"5. To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.singleselecttreewidget + \" \" + \".rc-tree-select-single\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. To Check Visible Widget","suites":["Single Select Widget Functionality"],"updatePoint":{"line":69,"column":32,"index":3211},"line":69,"code":"  it(\"6. To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.singleselecttreewidget + \" \" + \".rc-tree-select-single\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. To Check Option Not Found","suites":["Single Select Widget Functionality"],"updatePoint":{"line":76,"column":34,"index":3533},"line":76,"code":"  it(\"7. To Check Option Not Found\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"ABCD\");\n    cy.get(\".tree-select-dropdown .rc-tree-select-empty\").contains(\"No Results Found\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. To Check Clear all functionality","suites":["Single Select Widget Functionality"],"updatePoint":{"line":83,"column":41,"index":3842},"line":83,"code":"  it(\"8. To Check Clear all functionality\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{SingleSelectTree1.selectedOptionValue}}`);\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.togglebar('.t--property-control-allowclearingvalue input[type=\"checkbox\"]');\n    cy.get(formWidgetsPage.treeSelectClearAll).last().click({\n      force: true\n    });\n    cy.wait(100);\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"\");\n    cy.get(formWidgetsPage.treeSelectClearAll).should(\"not.exist\");\n    cy.get(formWidgetsPage.treeSelectPlaceholder).should(\"contain\", \"select option\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Select tooltip renders if tooltip prop is not empty","suites":["Single Select Widget Functionality"],"updatePoint":{"line":96,"column":60,"index":4516},"line":96,"code":"  it(\"9. Select tooltip renders if tooltip prop is not empty\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    // enter tooltip in property pan\n    cy.get(widgetsPage.inputTooltipControl).type(\"Helpful text for tooltip !\");\n    // tooltip help icon shows\n    cy.get(\".tree-select-tooltip\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. To Validate onOptionChange Event gets triggered only when option is changed","suites":["Single Select Widget Functionality"],"updatePoint":{"line":103,"column":85,"index":4874},"line":103,"code":"  it(\"10. To Validate onOptionChange Event gets triggered only when option is changed\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    // Click onOptionChange Event from propertypane\n    cy.get(toggleJSButton(\"onoptionchange\")).click({\n      force: true\n    });\n    // Add a message to alert event in onOptionChange\n    cy.testJsontext(\"onoptionchange\", `{{showAlert('Option Changed')}}`);\n    // Open the widget\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    // Search for Green option in the search input\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"Green\");\n    // Select the Green Option\n    cy.treeSelectDropdown(\"Green\");\n    // Validate if toast message exists or not\n    cy.get(\".Toastify__toast-body\").should(\"exist\");\n    // Validate the toast message\n    cy.validateToastMessage(\"Option Changed\");\n    // Open the widget\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    // Search for Green option (selecting same option) in the search input\n    cy.get(formWidgetsPage.treeSelectFilterInput).click().type(\"Green\");\n    // Select the Green Option\n    cy.treeSelectDropdown(\"Green\");\n    cy.wait(400);\n    // Validate if toast message exists or not\n    cy.get(\".Toastify__toast-body\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add new widget","suites":["Tree Select Widget"],"updatePoint":{"line":8,"column":23,"index":326},"line":8,"code":"  it(\"1. Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"singleselecttreewidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-singleselecttreewidget\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. toggle on allow clear selection and clear the input","suites":["Tree Select Widget"],"updatePoint":{"line":16,"column":60,"index":598},"line":16,"code":"  it(\"2. toggle on allow clear selection and clear the input\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    // toggle on allow clear selection\n    cy.togglebar(\".t--property-control-allowclearingvalue input[type='checkbox']\");\n    // assert if cancel icon exists on the widget input\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-clear\").should(\"exist\");\n    // click on the cancel icon\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-clear\").click({\n      force: true\n    });\n    // assert if the widget input value is now empty\n    cy.get(formWidgetsPage.singleselecttreeWidget).invoke(\"val\").should(\"be.empty\");\n    // click on the widget\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    // select Green option\n    cy.treeSelectDropdown(\"Green\");\n    // again click on cancel icon in the widget\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-clear\").click({\n      force: true\n    });\n    // assert if the widget input value is now empty\n    cy.get(formWidgetsPage.singleselecttreeWidget).invoke(\"val\").should(\"be.empty\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. toggle of allow clear selection","suites":["Tree Select Widget"],"updatePoint":{"line":41,"column":40,"index":1744},"line":41,"code":"  it(\"3. toggle of allow clear selection\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    // toggle off allow clear selection\n    cy.togglebarDisable(\".t--property-control-allowclearingvalue input[type='checkbox']\");\n    // assert if cancel icon does not exists on the widget input\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-clear\").should(\"not.exist\");\n    // click on the widget again\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    // select Green option\n    cy.treeSelectDropdown(\"Green\");\n    // assert if the widget input value is Green\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-item\").first().should(\"have.text\", \"Green\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that empty value is allowed in options","suites":["Tree Select Widget"],"updatePoint":{"line":56,"column":60,"index":2528},"line":56,"code":"  it(\"4. should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that more than empty value is not allowed in options","suites":["Tree Select Widget"],"updatePoint":{"line":84,"column":74,"index":3283},"line":84,"code":"  it(\"5. should check that more than empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Select/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validates Default Value","suites":["Category Slider spec"],"updatePoint":{"line":13,"column":32,"index":459},"line":13,"code":"  it(\"1. Validates Default Value\", () => {\n    // open the Property Pane\n    _.entityExplorer.SelectEntityByName(\"CategorySlider1\", \"Widgets\");\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"mdx\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"Default value is missing in options. Please update the value.\");\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"Default value is missing in options. Please update the value.\");\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"md\");\n\n    // _.agHelper.VerifyEvaluatedValue(\"md\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/CategroySlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Change Step Size and check if value changes","suites":["Category Slider spec"],"updatePoint":{"line":25,"column":52,"index":1086},"line":25,"code":"  it(\"2. Change Step Size and check if value changes\", () => {\n    // Assert Text widget has value 10\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($label => {\n      expect($label).to.eq(\"md\");\n    });\n\n    // open the Property Pane\n    _.entityExplorer.SelectEntityByName(\"CategorySlider1\", \"Widgets\");\n\n    // Change the slider value\n    _.agHelper.GetElement(_.locators._sliderThumb).focus().type(\"{rightArrow}\");\n\n    // Assert the Text widget has value 20\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($label => {\n      expect($label).to.eq(\"lg\");\n    });\n\n    // Change the slider value\n    _.agHelper.GetElement(_.locators._sliderThumb).focus().type(\"{leftArrow}\").type(\"{leftArrow}\");\n    _.agHelper.Sleep(200);\n\n    // Assert the Text widget has value 0\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($label => {\n      expect($label).to.eq(\"sm\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/CategroySlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"does not crash if an invalid mark option is passed","suites":["Category Slider spec"],"updatePoint":{"line":51,"column":56,"index":2037},"line":51,"code":"  it(\"does not crash if an invalid mark option is passed\", function () {\n    cy.get(\".t--property-control-options .t--js-toggle\").first().click();\n    cy.updateCodeInput(\".t--property-control-options\", \"[[]]\");\n    cy.get(\".t--widget-categorysliderwidget\").contains(\"Oops, Something went wrong.\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/CategroySlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validates Min. value","suites":["Number Slider spec"],"updatePoint":{"line":13,"column":29,"index":448},"line":13,"code":"  it(\"1. Validates Min. value\", () => {\n    // open the Property Pane\n    _.entityExplorer.SelectEntityByName(\"NumberSlider1\", \"Widgets\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. value\", \"110\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be less than max value\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. value\", \"\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value is required\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. value\", \"zero\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. value\", \"0\");\n\n    // _.agHelper.VerifyEvaluatedValue(\"0\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/NumberSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validates Max. value","suites":["Number Slider spec"],"updatePoint":{"line":27,"column":29,"index":1115},"line":27,"code":"  it(\"2. Validates Max. value\", () => {\n    _.propPane.UpdatePropertyFieldValue(\"Max. value\", \"0\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be greater than min value\");\n    _.propPane.UpdatePropertyFieldValue(\"Max. value\", \"\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value is required\");\n    _.propPane.UpdatePropertyFieldValue(\"Max. value\", \"asd\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Max. value\", \"100\");\n\n    // _.agHelper.VerifyEvaluatedValue(\"100\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/NumberSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validates Step Value","suites":["Number Slider spec"],"updatePoint":{"line":39,"column":29,"index":1687},"line":39,"code":"  it(\"3. Validates Step Value\", () => {\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"-10\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be greater than 0.1\");\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"110\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be less than 100\");\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"asd\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"10\");\n\n    // _.agHelper.VerifyEvaluatedValue(\"10\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/NumberSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validates Default Value","suites":["Number Slider spec"],"updatePoint":{"line":51,"column":32,"index":2265},"line":51,"code":"  it(\"4. Validates Default Value\", () => {\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"-10\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be greater than or equal to the min value\");\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"110\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be less than or equal to the max value\");\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"asd\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Default value\", \"10\");\n\n    // _.agHelper.VerifyEvaluatedValue(\"10\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/NumberSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Change Step size and check if value changes","suites":["Number Slider spec"],"updatePoint":{"line":63,"column":52,"index":2923},"line":63,"code":"  it(\"5. Change Step size and check if value changes\", () => {\n    // Assert Text widget has value 10\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($label => {\n      expect($label).to.eq(\"10\");\n    });\n\n    // open the Property Pane\n    _.entityExplorer.SelectEntityByName(\"NumberSlider1\", \"Widgets\");\n\n    // Change the Step size to 10\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"10\");\n\n    // Change the slider value\n    _.agHelper.GetElement(_.locators._sliderThumb).focus().type(\"{rightArrow}\").wait(500);\n    _.agHelper.Sleep(2000); //for the changes to reflect in text widget\n\n    // Assert the Text widget has value 20\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($label => {\n      expect($label).to.eq(\"20\");\n    });\n\n    // Change the slider value\n    _.agHelper.GetElement(_.locators._sliderThumb).focus().type(\"{leftArrow}\").type(\"{leftArrow}\");\n    _.agHelper.Sleep(2000); //for the changes to reflect in text widget\n    // Assert the Text widget has value 0\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($label => {\n      expect($label).to.eq(\"0\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/NumberSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validates Min. value","suites":["Range Slider spec"],"updatePoint":{"line":13,"column":29,"index":444},"line":13,"code":"  it(\"1. Validates Min. value\", () => {\n    // open the Property Pane\n    _.entityExplorer.SelectEntityByName(\"RangeSlider1\", \"Widgets\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. value\", \"110\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be less than max value\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. value\", \"\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value is required\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. value\", \"zero\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. value\", \"0\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/RangeSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validates Max. value","suites":["Range Slider spec"],"updatePoint":{"line":24,"column":29,"index":1063},"line":24,"code":"  it(\"2. Validates Max. value\", () => {\n    _.propPane.UpdatePropertyFieldValue(\"Max. value\", \"0\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be greater than min value\");\n    _.propPane.UpdatePropertyFieldValue(\"Max. value\", \"\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value is required\");\n    _.propPane.UpdatePropertyFieldValue(\"Max. value\", \"asd\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Max. value\", \"100\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/RangeSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validates Step size","suites":["Range Slider spec"],"updatePoint":{"line":33,"column":28,"index":1585},"line":33,"code":"  it(\"3. Validates Step size\", () => {\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"10\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be less than or equal to minRange\");\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value is required\");\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"asd\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/RangeSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validates Min Range","suites":["Range Slider spec"],"updatePoint":{"line":42,"column":28,"index":2110},"line":42,"code":"  it(\"4. Validates Min Range\", () => {\n    _.propPane.UpdatePropertyFieldValue(\"Min. range\", \"0\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be greater than 0.1\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. range\", \"-10\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be greater than 0.1\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. range\", \"asd\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. range\", \"110\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be less than 100\");\n    _.propPane.UpdatePropertyFieldValue(\"Min. range\", \"10\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/RangeSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Validates Default start value","suites":["Range Slider spec"],"updatePoint":{"line":53,"column":38,"index":2793},"line":53,"code":"  it(\"5. Validates Default start value\", () => {\n    _.propPane.UpdatePropertyFieldValue(\"Default start value\", \"-100\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be greater than or equal to the min value\");\n    _.propPane.UpdatePropertyFieldValue(\"Default start value\", \"110\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be less than defaultEnd value\");\n    _.propPane.UpdatePropertyFieldValue(\"Default start value\", \"asd\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Default start value\", \"10\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/RangeSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Validates Default end value","suites":["Range Slider spec"],"updatePoint":{"line":62,"column":36,"index":3403},"line":62,"code":"  it(\"6. Validates Default end value\", () => {\n    _.propPane.UpdatePropertyFieldValue(\"Default end value\", \"-10\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be greater than defaultStart value\");\n    _.propPane.UpdatePropertyFieldValue(\"Default end value\", \"110\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be less than or equal to the max value\");\n    _.propPane.UpdatePropertyFieldValue(\"Default end value\", \"asd\");\n    _.agHelper.VerifyEvaluatedErrorMessage(\"This value must be a number\");\n    _.propPane.UpdatePropertyFieldValue(\"Default end value\", \"100\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/RangeSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Change Step size and check if binding value changes","suites":["Range Slider spec"],"updatePoint":{"line":71,"column":60,"index":4031},"line":71,"code":"  it(\"7. Change Step size and check if binding value changes\", () => {\n    // Assert Text widget has value 10\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT), \"text\", 0).then($label => {\n      expect($label).to.eq(\"10\");\n    });\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT), \"text\", 1).then($label => {\n      expect($label).to.eq(\"100\");\n    });\n\n    // Change the Step size to 10\n    _.propPane.UpdatePropertyFieldValue(\"Min. range\", \"10\");\n    _.propPane.UpdatePropertyFieldValue(\"Step size\", \"10\");\n    _.agHelper.GetElement(_.locators._sliderThumb).eq(0).focus().type(\"{rightArrow}\").wait(500);\n\n    // Assert the Text widget has value 20\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT), \"text\", 0).then($label => {\n      expect($label).to.eq(\"20\");\n    });\n\n    // Change the slider value\n    _.agHelper.GetElement(_.locators._sliderThumb).eq(1).focus().type(\"{leftArrow}\").type(\"{leftArrow}\");\n    _.agHelper.Sleep(200);\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT), \"text\", 1).then($label => {\n      expect($label).to.eq(\"80\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Sliders/RangeSlider_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Switch Widget Functionality","suites":["Switch Widget Functionality"],"updatePoint":{"line":10,"column":36,"index":499},"line":10,"code":"  it(\"1. Switch Widget Functionality\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{SwitchWidget}Mouseover\n     * @param{SwitchPre Css} Assertion\n     */\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.widgetNameSpan);\n    /**\n     * @param{Text} Random Value\n     */\n    cy.testCodeMirror(this.data.switchInputName);\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n    cy.togglebar(widgetsPage.defaultcheck);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n    cy.getAlert(\"onChange\");\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Switch Functionality To Switch Label","suites":["Switch Widget Functionality"],"updatePoint":{"line":33,"column":45,"index":1215},"line":33,"code":"  it(\"2. Switch Functionality To Switch Label\", function () {\n    cy.get(publish.switchwidget + \" \" + \"label\").should(\"have.text\", this.data.switchInputName);\n    cy.get(publish.backToEditor).click();\n\n    //Switch Functionality To Check Disabled Widget\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click();\n\n    //Switch Functionality To Check Enabled Widget\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click();\n\n    //Switch Functionality To Unchecked Visible Widget\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n\n    // Switch Functionality To Check Visible Widget\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.checked\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Switch Functionality To swap label alignment of switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":65,"column":63,"index":2600},"line":65,"code":"  it(\"3. Switch Functionality To swap label alignment of switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"text-align\", \"left\");\n    // align right\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"text-align\", \"right\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Switch Functionality To swap label position of switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":77,"column":62,"index":3127},"line":77,"code":"  it(\"4. Switch Functionality To swap label position of switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-left\").should(\"exist\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-right\").should(\"not.exist\");\n    cy.get(commonlocators.optionposition).last().click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(commonlocators.optionpositionL).last().click({\n      force: true\n    });\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-right\").should(\"exist\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-left\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Switch Functionality To change label color of switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":94,"column":61,"index":3835},"line":94,"code":"  it(\"5. Switch Functionality To change label color of switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-fontcolor .bp3-input\").type(\"red\");\n    cy.wait(200);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(publish.backToEditor).click();\n\n    //Switch Functionality To change label size of switch\n    cy.openPropertyPane(\"switchwidget\");\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.textSizeNew).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.selectTxtSize(\"XL\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"font-size\", \"30px\");\n    cy.get(publish.backToEditor).click();\n\n    //Switch Functionality To change label style of switch\n    cy.openPropertyPane(\"switchwidget\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-emphasis .t--button-group-BOLD\").click();\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".t--switch-widget-label\").should(\"have.css\", \"font-weight\", \"700\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Check isDirty meta property","suites":["Switch Widget Functionality"],"updatePoint":{"line":124,"column":36,"index":5089},"line":124,"code":"  it(\"6. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Toggler.isDirty}}`);\n    // Change defaultSwitchState property\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(\".t--property-control-defaultstate label\").last().click();\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").scrollIntoView().should(\"contain\", \"false\");\n    // Interact with UI\n    cy.get(`${formWidgetsPage.switchWidget} label`).first().click();\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").scrollIntoView().should(\"contain\", \"true\");\n    // Change defaultSwitchState property\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(\".t--property-control-defaultstate input\").last().click();\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").scrollIntoView().should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Add a new switch group widget with others","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":8,"column":50,"index":309},"line":8,"code":"  it(\"1. Add a new switch group widget with others\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"switchgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-switchgroupwidget\").should(\"exist\");\n    cy.dragAndDropToCanvas(\"checkboxgroupwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.get(\".t--widget-checkboxgroupwidget\").should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 700\n    });\n    cy.get(\".t--widget-textwidget\").should(\"exist\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{SwitchGroup1.selectedValues[0]}}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switchgroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should check that empty value is allowed in options","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":27,"column":60,"index":942},"line":27,"code":"  it(\"2. Should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switchgroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should check that more thatn empty value is not allowed in options","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":45,"column":75,"index":1455},"line":45,"code":"  it(\"3. Should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switchgroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Setting selectedValues to undefined does not crash the app","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":63,"column":67,"index":1951},"line":63,"code":"  it(\"4. Setting selectedValues to undefined does not crash the app\", () => {\n    // Reset options for switch group\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"BLUE\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    // throw a cyclic dependency error from checkbox group\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.get(\".t--property-control-options input\").eq(1).click({\n      force: true\n    }).type(\"{{BLUE}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(2000);\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").trigger(\"click\").wait(3000);\n    // verify absence of cyclic dependency error\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\");\n    // check if a crash messsge is appeared\n    cy.get(\".t--widget-switchgroupwidget\").contains(\"Oops, Something went wrong.\").should(\"not.exist\");\n    cy.wait(1000);\n    // Assert that evaluation is not disabled\n    cy.get(\".t--widget-textwidget\").should(\"contain\", `BLUE`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/Switchgroup1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Widget name changes","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":17,"column":28,"index":633},"line":17,"code":"  it(\"1. Widget name changes\", function () {\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n    ee.SelectEntityByName(\"SwitchGroup1\");\n    agHelper.RenameWidget(\"SwitchGroup1\", \"SwitchGroupTest\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Property: options","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":26,"column":26,"index":909},"line":26,"code":"  it(\"2. Property: options\", function () {\n    // Add a new option\n    ee.SelectEntityByName(\"SwitchGroupTest\");\n    const optionToAdd = `[\n      {\n        \"label\": \"Blue\",\n        \"value\": \"BLUE\"\n      },\n      {\n        \"label\": \"Green\",\n        \"value\": \"GREEN\"\n      },\n      {\n        \"label\": \"Red\",\n        \"value\": \"RED\"\n      },\n      {\n        \"label\": \"Yellow\",\n        \"value\": \"YELLOW\"\n      }\n    ]`;\n    propPane.UpdatePropertyFieldValue(\"Options\", optionToAdd);\n    // Assert\n    cy.get(formWidgetsPage.labelSwitchGroup).should(\"have.length\", 4).eq(3).contains(\"Yellow\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Property: defaultSelectedValues","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":51,"column":40,"index":1517},"line":51,"code":"  it(\"3. Property: defaultSelectedValues\", function () {\n    // Add a new option\n    const valueToAdd = `[\n      \"BLUE\", \"GREEN\"\n    ]`;\n    propPane.UpdatePropertyFieldValue(\"Default selected values\", valueToAdd);\n    // Assert\n    cy.get(`${formWidgetsPage.labelSwitchGroup} input:checked`).should(\"have.length\", 2).eq(1).parent().contains(\"Green\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Property: isVisible === FALSE","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":60,"column":38,"index":1873},"line":60,"code":"  it(\"4. Property: isVisible === FALSE\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    /*\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"input\").should(\"not.exist\");\n    */\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Property: isVisible === TRUE","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":68,"column":37,"index":2104},"line":68,"code":"  it(\"5. Property: isVisible === TRUE\", function () {\n    cy.togglebar(commonlocators.visibleCheckbox);\n    /*\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"input\")\n      .eq(0)\n      .should(\"exist\");\n      */\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Property: onSelectionChange","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":78,"column":36,"index":2345},"line":78,"code":"  it(\"6. Property: onSelectionChange\", function () {\n    // create an alert modal and verify its name\n    cy.createModal(this.data.ModalName, \"onSelectionChange\");\n    /*\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"label.bp3-switch\")\n      .children()\n      .first()\n      .click({ force: true });\n    cy.get(modalWidgetPage.modelTextField).should(\n      \"have.text\",\n      this.data.ModalName,\n    );\n    */\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Check isDirty meta property","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":94,"column":36,"index":2787},"line":94,"code":"  it(\"7. Check isDirty meta property\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{SwitchGroupTest.isDirty}}`);\n    // Change defaultSelectedValues\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", `[\\n\"BLUE\"\\n]`);\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n    cy.wait(200); // Switch group takes time to reflect default value changes\n    // Interact with UI\n    cy.get(formWidgetsPage.labelSwitchGroup).first().click();\n    // Check if isDirty is set to true\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"true\");\n    // Change defaultSelectedValues\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedvalues\", `[\\n\"GREEN\"\\n]`);\n    // Check if isDirty is reset to false\n    cy.get(\".t--widget-textwidget\").should(\"contain\", \"false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Switch/SwitchGroup2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.Reset the Tabs widget With the default value.","suites":["Tabs widget resetting"],"updatePoint":{"line":10,"column":53,"index":382},"line":10,"code":"  it(\"1.Reset the Tabs widget With the default value.\", function () {\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 3\").click({\n      force: true\n    }).should(\"be.visible\");\n    cy.get(widgetsPage.buttonWidget).contains(\"Submit\").click({\n      force: true\n    });\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 1\").should(\"not.have.class\", \"is-selected\");\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 2\").should(\"have.class\", \"is-selected\");\n    cy.get(widgetsPage.textWidget).contains(\"Tab 2\");\n    cy.openPropertyPane(\"tabswidget\");\n    cy.get(\".t--property-control-defaulttab .CodeMirror .CodeMirror-code\").first().should(\"have.text\", \"Tab 2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab_reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.Reset the Tabs widget Without the default value.","suites":["Tabs widget resetting"],"updatePoint":{"line":23,"column":56,"index":1043},"line":23,"code":"  it(\"2.Reset the Tabs widget Without the default value.\", function () {\n    cy.testJsontext(\"defaulttab\", \"\");\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 3\").click({\n      force: true\n    }).should(\"be.visible\");\n    cy.get(widgetsPage.buttonWidget).contains(\"Submit\").click({\n      force: true\n    });\n    cy.get(LayoutPage.tabWidget).contains(\"Tab 1\").should(\"have.class\", \"is-selected\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab_reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality Test with Modal on change of selected tab","suites":["Tab widget test duplicate tab name validation"],"updatePoint":{"line":6,"column":72,"index":255},"line":6,"code":"  it(\"Tab Widget Functionality Test with Modal on change of selected tab\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    // added duplicate tab names\n    cy.tabPopertyUpdate(\"tab2\", \"TestUpdated\");\n    cy.tabPopertyUpdate(\"tab4\", \"TestUpdated\");\n    cy.get(\".t--has-duplicate-label-3\").should(\"exist\");\n    cy.get(\".t--has-duplicate-label-4\").should(\"not.exist\");\n\n    // detele column and re-validate duplicate column\n    cy.deleteColumn(\"tab2\");\n    cy.get(\".t--has-duplicate-label-3\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_Duplicate_TabName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality Test with Modal on change of selected tab","suites":["Tab widget test"],"updatePoint":{"line":9,"column":72,"index":441},"line":9,"code":"  it(\"Tab Widget Functionality Test with Modal on change of selected tab\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.widgetText(\"tab\", Layoutpage.tabWidget, widgetsPage.widgetNameSpan);\n    cy.AddActionWithModal();\n    cy.get(\".t--draggable-buttonwidget:contains('Close')\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_new_scenario_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish the app and validate the widgets displayed under each tab","suites":["Tab widget test"],"updatePoint":{"line":17,"column":71,"index":772},"line":17,"code":"  it(\"Publish the app and validate the widgets displayed under each tab\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.buttonWidget).should(\"be.visible\");\n    cy.get(publish.textWidget).should(\"be.visible\");\n    cy.get(publish.datePickerNew).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(publish.tab).contains(\"Tab 2\").click({\n      force: true\n    });\n    cy.get(publish.checkboxWidget).should(\"be.visible\");\n    cy.get(publish.radioWidget).should(\"be.visible\");\n    cy.get(publish.buttonWidget).contains(\"Confirm\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_new_scenario_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.On change of tab selection Navigate to a URL","suites":["Tabs widget on change of selection navigation usecases"],"updatePoint":{"line":12,"column":52,"index":402},"line":12,"code":"  it(\"1.On change of tab selection Navigate to a URL\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    propPane.SelectPlatformFunction(\"onTabSelected\", \"Navigate to\");\n    cy.wait(1000);\n    agHelper.GetNClick(propPane._navigateToType(\"URL\"));\n    agHelper.EnterActionValue(\"Enter URL\", \"www.appsmith.com\");\n    cy.wait(1000);\n    //Publish the app and validate the navigation change on tab selection\n    cy.PublishtheApp();\n    cy.wait(3000);\n    cy.get(\".t--page-switch-tab:contains('Tab 3')\").click({\n      force: true\n    }, {\n      multiple: true\n    });\n    cy.url().should(\"include\", \"appsmith\");\n    cy.go(\"back\");\n    cy.get(\".t--page-switch-tab:contains('Tab 3')\").should(\"be.visible\");\n    //cy.get(publishPage.backToEditor).click({ force: true });\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_OnEvent_Navigation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Tab Widget Functionality Test","suites":["Tab widget test"],"updatePoint":{"line":10,"column":38,"index":478},"line":10,"code":"  it(\"1. Tab Widget Functionality Test\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{TabWidget}Mouseover\n     * @param{TabPre Css} Assertion\n     */\n    cy.widgetText(\"tab\", Layoutpage.tabWidget, widgetsPage.widgetNameSpan);\n    /**\n     * @param{IndexValue} Provide input Index Value\n     * @param{Text} Provide Index Text Value\n     */\n    cy.tabVerify(0, \"Aditya\");\n    cy.tabVerify(1, \"test\");\n    //Default  tab selection and validation\n    cy.testJsontext(\"defaulttab\", \"test\");\n    cy.get(Layoutpage.tabWidget).contains(\"test\").click({\n      force: true\n    }).should(\"be.visible\");\n    cy.get(Layoutpage.tabButton).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.tabVerify(1, \"Day\");\n    cy.xpath(Layoutpage.deleteTab.replace(\"tabName\", \"Day\")).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Day\").should(\"not.exist\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n    cy.togglebar(widgetsPage.Scrollbutton);\n    cy.get(Layoutpage.tabContainer).scrollIntoView({\n      easing: \"linear\"\n    }).should(\"be.visible\");\n    cy.assertPageSave();\n    cy.PublishtheApp();\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Tab Widget Functionality To Select Tabs","suites":["Tab widget test"],"updatePoint":{"line":50,"column":48,"index":1825},"line":50,"code":"  it(\"2. Tab Widget Functionality To Select Tabs\", function () {\n    cy.get(publish.tabWidget).contains(this.data.tabName).last().click({\n      force: true\n    }).should(\"have.class\", \"is-selected\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Tab Widget Functionality To Unchecked Visible Widget","suites":["Tab widget test"],"updatePoint":{"line":56,"column":61,"index":2086},"line":56,"code":"  it(\"3. Tab Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Tab Widget Functionality To Check Visible Widget","suites":["Tab widget test"],"updatePoint":{"line":63,"column":57,"index":2379},"line":63,"code":"  it(\"4. Tab Widget Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Tab Widget Functionality To Check tab invisiblity","suites":["Tab widget test"],"updatePoint":{"line":70,"column":58,"index":2667},"line":70,"code":"  it(\"5. Tab Widget Functionality To Check tab invisiblity\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.xpath(Layoutpage.tabEdit.replace(\"tabName\", \"Tab 1\")).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabVisibility).first().click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 1\").should(\"not.exist\");\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 1\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Tab Widget Functionality To Check tab visibility","suites":["Tab widget test"],"updatePoint":{"line":83,"column":57,"index":3167},"line":83,"code":"  it(\"6. Tab Widget Functionality To Check tab visibility\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.xpath(Layoutpage.tabEdit.replace(\"tabName\", \"Tab 1\")).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabVisibility).first().click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 1\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 1\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Tabs widget should have navigation arrows if tabs don't fit","suites":["Tab widget test"],"updatePoint":{"line":121,"column":68,"index":4444},"line":121,"code":"  it(\"8. Tabs widget should have navigation arrows if tabs don't fit\", function () {\n    const rightNavButtonSelector = Layoutpage.tabWidget + \" .scroll-nav-right-button\";\n    const leftNavButtonSelector = Layoutpage.tabWidget + \" .scroll-nav-left-button\";\n    cy.openPropertyPane(\"tabswidget\");\n    // Add a new tab\n    cy.get(Layoutpage.tabButton).last().click({\n      force: true\n    });\n    cy.get(Layoutpage.tabButton).last().click({\n      force: true\n    });\n    cy.tabVerify(3, \"Tab3-for-testing-scroll-navigation-controls\");\n    // Should show off right navigation arrow\n    cy.get(leftNavButtonSelector).should(\"exist\");\n    // Click on the right navigation arrow\n    cy.get(leftNavButtonSelector).click({\n      force: true\n    });\n    // Should show off left navigation arrow\n    cy.get(rightNavButtonSelector).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Tab Widget Functionality To Check Default Tab selected After Selected Tab Delete","suites":["Tab widget test"],"updatePoint":{"line":142,"column":89,"index":5309},"line":142,"code":"  it(\"9. Tab Widget Functionality To Check Default Tab selected After Selected Tab Delete\", function () {\n    cy.testJsontext(\"defaulttab\", \"Tab 2\");\n    cy.tabVerify(3, \"Tab3-for-testing-scroll-navigation-controls\");\n    cy.get(Layoutpage.tabWidget).contains(\"Tab3-for-testing-scroll-navigation-controls\").should(\"have.class\", \"is-selected\");\n    cy.xpath(Layoutpage.deleteTab.replace(\"tabName\", \"Tab3-for-testing-scroll-navigation-controls\")).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 2\").should(\"have.class\", \"is-selected\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Tab Widget Functionality To Check First Tab Selected After Selected Tab(Default one) Delete","suites":["Tab widget test"],"updatePoint":{"line":151,"column":101,"index":5894},"line":151,"code":"  it(\"10. Tab Widget Functionality To Check First Tab Selected After Selected Tab(Default one) Delete\", function () {\n    cy.get(Layoutpage.tabDelete).eq(2).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Aditya\").should(\"have.class\", \"is-selected\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Validates Total Number Of Tabs Displayed In The Property Pane","suites":["Tab widget test"],"updatePoint":{"line":157,"column":71,"index":6150},"line":157,"code":"  it(\"11. Validates Total Number Of Tabs Displayed In The Property Pane\", () => {\n    cy.get(Layoutpage.tabNumber).should(\"have.text\", \"2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Validates Total Number Of Tabs Displayed In The Property Pane After Adding A Tab","suites":["Tab widget test"],"updatePoint":{"line":160,"column":90,"index":6316},"line":160,"code":"  it(\"12. Validates Total Number Of Tabs Displayed In The Property Pane After Adding A Tab\", () => {\n    cy.get(Layoutpage.tabButton).last().click({\n      force: true\n    });\n    cy.get(Layoutpage.tabNumber).should(\"have.text\", \"3\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Validates Total Number Of Tabs Displayed In The Property Pane After Deleting A Tab","suites":["Tab widget test"],"updatePoint":{"line":166,"column":92,"index":6558},"line":166,"code":"  it(\"13. Validates Total Number Of Tabs Displayed In The Property Pane After Deleting A Tab\", () => {\n    cy.get(Layoutpage.tabDelete).eq(1).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabNumber).should(\"have.text\", \"2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Tab/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget with with modal popup","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":10,"column":40,"index":468},"line":10,"code":"  it(\"Table widget with with modal popup\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    //update Table name with _\n    cy.widgetText(\"Table_1\", widgetsPage.tableWidget, widgetsPage.widgetNameSpan);\n    cy.createModal(\"Modal\", \"onRowSelected\");\n    cy.isSelectRow(1);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n    cy.isSelectRow(2);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget with button colour change validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":24,"column":55,"index":932},"line":24,"code":"  it(\"Table widget with button colour change validation\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tableBtn).should(\"not.exist\");\n    // Changing column data type to \"Button\"\n    cy.changeColumnType(\"Button\", false);\n    // Changing the computed value (data) to \"orderAmount\"\n    cy.updateComputedValue(testdata.currentRowOrderAmt);\n    cy.changeColumnType(\"Button\", false);\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color);\n    cy.readTabledataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget icon type and colour validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":43,"column":50,"index":1723},"line":43,"code":"  it(\"Table widget icon type and colour validation\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    // Open column details of \"id\".\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    // Change Column type to icon Button\n    cy.changeColumnType(\"Icon button\", false);\n    // Select Icon from Icon Control\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-add\").should(\"be.visible\");\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget validation of a field without js ","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":64,"column":52,"index":2419},"line":64,"code":"  it(\"Table widget validation of a field without js \", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"email\");\n    cy.clearPropertyValue(0);\n    //toggle js for visiblity\n    cy.get(\".t--property-control-visible .t--js-toggle\").click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.clearPropertyValue(1);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget column reorder and reload function","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":75,"column":53,"index":2775},"line":75,"code":"  it(\"Table widget column reorder and reload function\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.readTabledataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n      cy.reload();\n      cy.wait(3000);\n      cy.readTabledataPublish(\"2\", \"2\").then(tabDataNew => {\n        expect(tabDataNew).to.be.equal(\"Tobias Funke\");\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to validate text color and text background","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":8,"column":56,"index":382},"line":8,"code":"  it(\"1. Test to validate text color and text background\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    //cy.moveToStyleTab();\n    // Click on text color input field\n    cy.selectColor(\"textcolor\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    // Verify the text color is green\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(126, 34, 206)\");\n    // Change the text color and enter purple in input field\n    cy.get(widgetsPage.textColor).scrollIntoView().clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    // Verify the text color is purple\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\");\n    // Click on cell background color\n    cy.selectColor(\"cellbackgroundcolor\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    // select the green color\n\n    cy.wait(\"@updateLayout\");\n    cy.assertPageSave();\n    cy.PublishtheApp();\n    cy.wait(4000);\n\n    // Verify the cell background color is green\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(126, 34, 206)\");\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"tablewidget\");\n\n    // Change the cell background color and enter purple in input field\n    cy.get(`${widgetsPage.cellBackground_tablev1} input`).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.assertPageSave();\n    cy.PublishtheApp();\n    cy.wait(4000);\n\n    // Verify the cell background color is purple\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(128, 0, 128)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality with Hidden and Resized Columns","suites":["Table Widget Functionality with Hidden and Resized Columns"],"updatePoint":{"line":7,"column":64,"index":321},"line":7,"code":"  it(\"Table Widget Functionality with Hidden and Resized Columns\", function () {\n    cy.PublishtheApp();\n    // Verify column header width should be equal to table width\n    cy.get(\".t--widget-tablewidget\").invoke(\"outerWidth\").then(tableWidth => {\n      cy.get(\".t--widget-tablewidget .thead .tr\").invoke(\"outerWidth\").then(columnHeaderWidth => {\n        expect(columnHeaderWidth).to.be.at.least(tableWidth);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Column_Resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":9,"column":62,"index":445},"line":9,"code":"  it(\"1. Create an API and Execute the API and bind with Table\", function () {\n    // Create and execute an API and bind with table\n    _.apiPage.CreateAndFillApi(this.data.paginationUrl + this.data.paginationParam);\n    cy.RunAPI();\n    //Test: Validate Table with API data and then add a column\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Clear Table data and enter Apil data into table data\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n    // Check Widget properties\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    // Open Text1 in propert pane\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    _.propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.selectedRow.url}}\");\n    // Open Table1 propert pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Compare table 1st index data with itself\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    // Verify 1st index data\n    cy.readTabledata(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    // add new column\n    cy.addColumn(\"CustomColumn\");\n    //Test:Table widget toggle test for background color\n    // Open id property pane\n    cy.editColumn(\"id\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Click on cell background JS button\n    _.propPane.EnterJSContext(\"Cell Background\", \"Green\");\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    // verify the cell background color\n    cy.readTabledataValidateCSS(\"1\", \"4\", \"background-color\", \"rgb(0, 128, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Edit column name and validate test for computed value based on column type selected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":51,"column":92,"index":2262},"line":51,"code":"  it(\"2. Edit column name and validate test for computed value based on column type selected\", function () {\n    // opoen customColumn1 property pane\n    cy.editColumn(\"customColumn1\");\n    // Enter Apil 1st user email data into customColumn1\n    cy.readTabledataPublish(\"1\", \"7\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValue(\"{{Api1.data[0].email}}\");\n      cy.readTabledataPublish(\"1\", \"7\").then(tabData => {\n        expect(tabData).not.to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n    //Test: Update table json data and check the column names updated\n    // Open table propert pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.backFromPropertyPanel();\n    // Change the table data\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\");\n    // verify columns are visible or not in the propert pane\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\");\n    // Hide the columns in property pane\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    // verify customColumn is visible in the table\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate cell background of columns","suites":["Table Widget empty row color validation"],"updatePoint":{"line":7,"column":44,"index":298},"line":7,"code":"  it(\"1. Validate cell background of columns\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    // give general color to all table row\n    cy.selectColor(\"cellbackgroundcolor\", -17);\n    cy.editColumn(\"id\");\n    // Click on cell background color\n    cy.selectColor(\"cellbackground\", -27);\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.editColumn(\"email\");\n    cy.selectColor(\"cellbackground\", -33);\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n\n    // Verify the cell background color of first column\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background-color\", \"rgb(99, 102, 241)\");\n    // Verify the cell background color of second column\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(30, 58, 138)\");\n    //Test 2. Validate empty row background\n    // first cell of first row should be transparent\n    cy.get(\".t--widget-tablewidget .tbody div[data-testid='empty-row-0-cell-0']\").should(\"have.css\", \"background-color\", \"rgb(99, 102, 241)\");\n    // second cell of first row should be transparent\n    cy.get(\".t--widget-tablewidget .tbody div[data-testid='empty-row-0-cell-1']\").should(\"have.css\", \"background-color\", \"rgb(30, 58, 138)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_EmptyRow_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter and search data","suites":["Table Widget Filtered Table data in autocomplete"],"updatePoint":{"line":10,"column":58,"index":537},"line":10,"code":"  it(\"Table Widget Functionality To Filter and search data\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.wait(\"@updateLayout\");\n    cy.get(publish.searchInput).first().type(\"query\");\n    cy.get(publish.filterBtn).click();\n    cy.get(publish.attributeDropdown).click();\n    cy.get(publish.attributeValue).contains(\"task\").click();\n    cy.get(publish.conditionDropdown).click();\n    cy.get(publish.attributeValue).contains(\"contains\").click();\n    cy.get(publish.inputValue).type(\"bind\");\n    cy.wait(500);\n    cy.get(widgetsPage.filterApplyBtn).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\".t--close-filter-btn\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality to validate filtered table data","suites":["Table Widget Filtered Table data in autocomplete"],"updatePoint":{"line":29,"column":64,"index":1231},"line":29,"code":"  it(\"Table Widget Functionality to validate filtered table data\", function () {\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.filteredTableData[0].task}}\");\n    cy.readTabledata(\"0\", \"1\").then(tabData => {\n      const tableData = tabData;\n      cy.get(commonlocators.labelTextStyle).should(\"have.text\", tableData);\n    });\n\n    //Table Widget Functionality to validate filtered table data with actual table data\n    cy.readTabledata(\"0\", \"1\").then(tabData => {\n      const tableData = JSON.parse(dsl.dsl.children[0].tableData);\n      cy.get(commonlocators.labelTextStyle).should(\"have.text\", tableData[2].task);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to validate table pagination is disabled","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":12,"column":54,"index":579},"line":12,"code":"  it(\"1. Test to validate table pagination is disabled\", function () {\n    // Verify pagination is disabled\n    cy.get(\".t--table-widget-prev-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-page-input input\").should(\"have.attr\", \"disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test to validate text allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":18,"column":41,"index":909},"line":18,"code":"  it(\"2. Test to validate text allignment\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    // Change the text align to center\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    // Verify the center text alignment\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\");\n    // Change the text align to right\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    // Verify the right text alignment\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\");\n    // Change the text align to left\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    // verify the left text alignment\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Test to validate column heading allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":40,"column":51,"index":1743},"line":40,"code":"  it(\"3. Test to validate column heading allignment\", function () {\n    // cy.openPropertyPane(\"tablewidget\");\n    // Change the text align to center\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    // Verify the column headings are center aligned\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"center\");\n    // Change the text align to right\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    // Verify the column headings are right aligned\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"right\");\n    // Change the text align to left\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    // Verify the column headings are left aligned\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"left\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Test to validate text format","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":61,"column":37,"index":2606},"line":61,"code":"  it(\"4. Test to validate text format\", function () {\n    // Select the bold font style\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    // Varify the font style is bold\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\");\n    // Change the font style to italic\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    // Verify the font style is italic\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\");\n    // Change the font style to underline\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.underline).click({\n      force: true\n    });\n    // Verify the font style is underline\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"text-decoration-line\", \"underline\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Test to validate vertical allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":82,"column":45,"index":3341},"line":82,"code":"  it(\"5. Test to validate vertical allignment\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    // Select the top vertical alignment\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    });\n    // verify vertical alignment is top\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\");\n    // Change the vertical alignment to center\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    });\n    // Verify the vertical alignment is centered\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"center\");\n    // Change the vertical alignment to bottom\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    });\n    // Verify the vertical alignment is bottom\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget toggle test for text alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":103,"column":52,"index":4167},"line":103,"code":"  it(\"6. Table widget toggle test for text alignment\", function () {\n    // Click on text align JS\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Change the text align value to right for michael and left for others\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingGenAlign);\n    // Close propert pane\n\n    // Verify the text michael id is right aligned\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-end\");\n    // Verify the 2nd id is left aligned\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget change text size and validate","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":119,"column":51,"index":4845},"line":119,"code":"  it(\"7. Table widget change text size and validate\", function () {\n    // Verify font size is 14px\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n\n    // Click on text size JS\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Open txe size dropdown options\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Select Heading 1 text size\n    cy.selectTxtSize(\"L\");\n    // Verify the font size is 24px\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"20px\");\n    // close propert pane\n\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Verify the font size is 24px\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"20px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Test to validate open new tab icon shows when URL type data validate link text ","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":146,"column":88,"index":5810},"line":146,"code":"  it(\"8. Test to validate open new tab icon shows when URL type data validate link text \", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n\n    // go back to 1st\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    // Open email property pane\n    cy.editColumn(\"email\");\n    // Change column type to url\n    cy.changeColumnType(\"URL\", false);\n    //Check all the occurance\n    cy.get(\".link-text\").should(\"have.length\", \"3\");\n    /*\n    cy.get(\n      `.t--widget-tablewidget .tbody .td[data-rowindex=1][data-colindex=1] .hidden-icon`,\n    )\n      .should(\"be.hidden\")\n      .invoke(\"show\");\n    cy.get(\n      `.t--widget-tablewidget .tbody .td[data-rowindex=1][data-colindex=1] .hidden-icon`,\n    ).should(\"be.visible\");\n    */\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Edit column name and test for table header changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":172,"column":59,"index":6579},"line":172,"code":"  it(\"9. Edit column name and test for table header changes\", function () {\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    // Open email property pane\n    cy.editColumn(\"email\");\n    // CHange the Column email name to Email Address\n    cy.editColName(\"Email Address\");\n    // verify changed email name is visible\n    cy.get(\".draggable-header:contains('Email Address')\").should(\"be.visible\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Edit Row height and test table for changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":186,"column":52,"index":7088},"line":186,"code":"  it(\"10. Edit Row height and test table for changes\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(widgetsPage.rowHeight).last().click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option\").contains(\"Short\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"height\", \"19px\", true);\n    cy.get(publish.backToEditor).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test multi select column shows when enableMultirowselection is true","suites":["Table Widget row multi select validation"],"updatePoint":{"line":12,"column":73,"index":432},"line":12,"code":"  it(\"Test multi select column shows when enableMultirowselection is true\", function () {\n    cy.get(widgetsPage.buttonWidget).first().click();\n    cy.wait(1000);\n    cy.get(\".t--table-multiselect\").first().click();\n    cy.get(widgetsPage.buttonWidget).last().click();\n    cy.get(\".tbody .tr\").first().should(\"have.class\", \"selected-row\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_MultiRowSelect_dataUpdation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test multi select column shows when enable Multirowselection is true","suites":["Table Widget row multi select validation"],"updatePoint":{"line":8,"column":74,"index":398},"line":8,"code":"  it(\"Test multi select column shows when enable Multirowselection is true\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(widgetsPage.toggleEnableMultirowselection_tablev1).first().click({\n      force: true\n    });\n    cy.closePropertyPane(\"tablewidget\");\n    cy.get(\".t--table-multiselect-header\").should(\"be.visible\");\n    cy.get(\".t--table-multiselect\").should(\"be.visible\");\n    //Test click on header cell selects all row\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    });\n    // check if rows selected\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n    //Test click on single row cell changes header select cell state\n    // un-select all rows\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    });\n    // click on first row select box\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    // check if header cell is in half check state\n    cy.get(\".t--table-multiselect-header-half-check-svg\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test action configured on onRowSelected get triggered whenever a table row is selected","suites":["Table Widget row multi select validation"],"updatePoint":{"line":35,"column":92,"index":1500},"line":35,"code":"  it(\"Test action configured on onRowSelected get triggered whenever a table row is selected\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.getAlert(\"onRowSelected\", \"Row Selected\");\n    // un select first row\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n    // click on first row select box\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Row Selected\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"It should deselected default Selected Row when the header cell is clicked","suites":["Table Widget row multi select validation"],"updatePoint":{"line":49,"column":79,"index":2031},"line":49,"code":"  it(\"It should deselected default Selected Row when the header cell is clicked\", () => {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"defaultselectedrow\", 0);\n\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    });\n    // check if rows selected\n    cy.get(\".tr\").should(\"not.have.class\", \"selected-row\");\n\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    });\n    // check if rows is not selected\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check number key in table data convert table binding and header properly","suites":["Validate Table Widget Table data"],"updatePoint":{"line":7,"column":78,"index":310},"line":7,"code":"  it(\"Check number key in table data convert table binding and header properly\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n\n    // numeric table data\n    const tableData = [{\n      1: \"abc\",\n      2: \"bcd\",\n      3: \"cde\",\n      Dec: \"mon\",\n      demo: \"3\",\n      demo_1: \"1\",\n      \"test one\": \"1\",\n      \"test 3 4 9\": \"4\",\n      rowIndex: \"0\"\n    }, {\n      1: \"asd\",\n      2: \"dfg\",\n      3: \"jkl\",\n      Dec: \"mon2\",\n      demo: \"2\",\n      demo_1: \"1\",\n      \"test one\": \"2\",\n      \"test 3 4 9\": \"3\",\n      rowIndex: \"1\"\n    }];\n    // add data manually\n    cy.testJsontext(\"tabledata\", JSON.stringify(tableData));\n    cy.contains('[role=\"columnheader\"]', \"_1\").should(\"exist\");\n    cy.contains('[role=\"columnheader\"]', \"_2\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Number_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":8,"column":62,"index":393},"line":8,"code":"  it(\"1. Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":12,"column":59,"index":569},"line":12,"code":"  it(\"2. Validate Table with API data and then add a column\", function () {\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Change the table data to Apil data users\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n    // Check server sided pagination\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    // Open property pane of Text1\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    // Change the text value to selected url\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Copmre the table 1st index with itself\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    cy.readTabledata(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    // Add new column\n    cy.addColumn(\"CustomColumn\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Update table json data and check the column names updated and validate empty value","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":37,"column":91,"index":1615},"line":37,"code":"  it(\"3. Update table json data and check the column names updated and validate empty value\", function () {\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Change the table data\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputWithNull));\n    cy.wait(\"@updateLayout\");\n    // Verify the columns are visible in property pane\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\");\n    // Hide the columns in the table from property pane\n    cy.hideColumn(\"id\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    // Verify CustomColumn is visible\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n    // close property pane\n    cy.closePropertyPane();\n    // Validate the empty values\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check Selected Row(s) Resets When Table data Changes","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":65,"column":61,"index":2763},"line":65,"code":"  it(\"4. Check Selected Row(s) Resets When Table data Changes\", function () {\n    // Select 1st row\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"tablewidget\");\n    // Empty first row\n    cy.testJsontext(\"tabledata\", \"[]\");\n    cy.wait(\"@updateLayout\");\n    const newTableData = [...this.data.TableInput];\n    newTableData[0].userName = \"\";\n    // Change table data from empty to some\n    cy.testJsontext(\"tabledata\", JSON.stringify(newTableData));\n    cy.wait(\"@updateLayout\");\n    const selectedRowsSelector = `.t--widget-tablewidget .tbody .tr.selected-row`;\n    // Verify selected row resets on table data changes\n    cy.get(selectedRowsSelector).should($p => {\n      // should found 0 rows\n      expect($p).to.have.length(0);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify table column type changes effect on menuButton and iconButton","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":7,"column":74,"index":348},"line":7,"code":"  it(\"Verify table column type changes effect on menuButton and iconButton\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.addColumn(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.changeColumnType(\"Menu button\", false);\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"(none)\");\n    cy.getTableDataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"not.exist\");\n    });\n    cy.changeColumnType(\"Icon button\", false);\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableDataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon-add\").should(\"exist\");\n    });\n    cy.changeColumnType(\"Menu button\", false);\n    cy.wait(500);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"(none)\");\n    cy.getTableDataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"not.exist\");\n    });\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_IconName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify On Row Selected Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":15,"column":38,"index":637},"line":15,"code":"  it(\"1. Verify On Row Selected Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    // Select show message in the \"on selected row\" dropdown\n    cy.getAlert(\"onRowSelected\", \"Row is selected\");\n    cy.PublishtheApp();\n    // Select 1st row\n    cy.isSelectRow(2);\n    cy.wait(2000);\n    // Verify Row is selected by showing the message\n    cy.get(commonlocators.toastmsg).contains(\"Row is selected\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check On Page Change Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":28,"column":36,"index":1124},"line":28,"code":"  it(\"2. Check On Page Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    // Select show message in the \"on selected row\" dropdown\n    cy.getAlert(\"onPageChange\", \"Page Changed\");\n    cy.PublishtheApp();\n    cy.wait(2000);\n    // Change the page\n    cy.get(widgetsPage.nextPageButton).click({\n      force: true\n    });\n    // Verify the page is changed\n    cy.get(commonlocators.toastmsg).contains(\"Page Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify On Search Text Change Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":43,"column":44,"index":1644},"line":43,"code":"  it(\"3. Verify On Search Text Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    // Show Message on Search text change Action\n    cy.getAlert(\"onSearchTextChanged\", \"Search Text Changed\");\n    cy.PublishtheApp();\n    // Change the Search text\n    cy.get(widgetsPage.searchField).type(\"Hello\");\n    cy.wait(2000);\n    // Verify the search text is changed\n    cy.get(commonlocators.toastmsg).contains(\"Search Text Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check open section and column data in property pane","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":56,"column":60,"index":2181},"line":56,"code":"  it(\"4. Check open section and column data in property pane\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n\n    // Validate the columns are visible in the property pane\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n\n    // Updating the column name ; \"id\" > \"TestUpdated\"\n    cy.tableColumnPopertyUpdate(\"id\", \"TestUpdated\");\n\n    // Add new column in the table with name \"CustomColumn\"\n    cy.addColumn(\"CustomColumn\");\n    cy.tableColumnDataValidation(\"customColumn1\"); //To be updated later\n\n    // Hide all other columns\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n\n    // Verifying the newly added column\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Column Detail - Edit column name and validate test for computed value based on column type selected","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":82,"column":108,"index":3197},"line":82,"code":"  it(\"5. Column Detail - Edit column name and validate test for computed value based on column type selected\", function () {\n    cy.wait(1000);\n    cy.makeColumnVisible(\"email\");\n    cy.makeColumnVisible(\"userName\");\n    cy.makeColumnVisible(\"productName\");\n    cy.makeColumnVisible(\"orderAmount\");\n    cy.openPropertyPane(\"tablewidget\");\n\n    // Open column detail to be edited by draggable id\n    cy.editColumn(\"id\");\n    // Change the column name\n    cy.editColName(\"updatedId\");\n    // Reading single cell value of the table and verify it's value.\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"2736212\");\n      // Changing the Computed value from \"id\" to \"Email\"\n      cy.updateComputedValue(testdata.currentRowEmail);\n      // Reading single cell value of the table and verify it's value.\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData2);\n      });\n    });\n\n    // Changing Column data type from \"Plain text\" to \"Number\"\n    cy.changeColumnType(\"Number\", false);\n    cy.readTabledataPublish(\"1\", \"4\").then(tabData => {\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"lindsay.ferguson@reqres.in\");\n      // Email to \"orderAmount\"\n      cy.updateComputedValue(testdata.currentRowOrderAmt);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabData);\n        cy.log(\"computed value of number is \" + tabData2);\n      });\n    });\n\n    // Changing Column data type from \"Number\" to \"Date\"\n    cy.changeColumnType(\"Date\", false);\n    // orderAmout to \"Moment Date\"\n    cy.updateComputedValue(testdata.momentDate);\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      expect(tabData).to.not.equal(\"9.99\");\n      cy.log(\"computed value of Date is \" + tabData);\n    });\n\n    // Changing Column data type from \"URL\" to \"Video\"\n    /* const videoVal = 'https://youtu.be/Sc-m3ceZyfk';\n    cy.changeColumnType(\"Video\", false);\n    // \"Moement \"date\" to \"Video\"\n    cy.updateComputedValue(videoVal);\n    // cy.testJson  text(\"computedvalue\", videoVal, )\n    // Verifying the href of the Video added.\n    cy.readTableLinkPublish(\"1\", \"1\").then((hrefVal) => {\n      expect(hrefVal).to.be.equal(videoVal);\n    });*/\n\n    // Changing Column data type from \"Date\" to \"Image\"\n    const imageVal = \"https://images.pexels.com/photos/736230/pexels-photo-736230.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\";\n    cy.changeColumnType(\"Image\", false);\n    // \"Moement \"date\" to \"Image\"\n    cy.updateComputedValue(imageVal);\n    // Verifying the href of the image added.\n    cy.readTableLinkPublish(\"1\", \"0\").then(hrefVal => {\n      expect(hrefVal).to.be.contains(imageVal);\n    });\n\n    // change column data type to \"icon button\"\n    cy.changeColumnType(\"Icon button\", false);\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableDataSelector(\"0\", \"0\").then(selector => {\n      cy.get(selector + \" button.bp3-button [data-icon=add]\").should(\"exist\");\n    });\n\n    // Changing Column data type from \"Date\" to \"URl\"\n    cy.readTabledataPublish(\"1\", \"1\").then(actualEmail => {\n      cy.changeColumnType(\"URL\", false);\n      // \"Image\" to \"url\"\n      cy.updateComputedValue(testdata.currentRowEmail);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        expect(tabData2).to.equal(\"lindsay.ferguson@reqres.in\").to.eq(actualEmail);\n        cy.log(\"computed value of URL is \" + tabData2);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Test to validate text allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":172,"column":41,"index":6811},"line":172,"code":"  it(\"6. Test to validate text allignment\", function () {\n    // Verifying Center Alignment\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\", true);\n\n    // Verifying Right Alignment\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\", true);\n\n    // Verifying Left Alignment\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\", true);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Test to validate text format","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":191,"column":37,"index":7453},"line":191,"code":"  it(\"7. Test to validate text format\", function () {\n    // Validate Bold text\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.reload();\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\");\n    // Validate Italic text\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-style\", \"italic\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Test to validate vertical allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":205,"column":45,"index":7872},"line":205,"code":"  it(\"8. Test to validate vertical allignment\", function () {\n    // Validate vertical alignemnt of Cell text to TOP\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\", true);\n    // Validate vertical alignemnt of Cell text to Center\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"center\", true);\n    // Validate vertical alignemnt of Cell text to Bottom\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-end\", true);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Test to validate text color and text background","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":222,"column":57,"index":8581},"line":222,"code":"  it(\"11. Test to validate text color and text background\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n\n    // Changing text color to rgb(126, 34, 206) and validate\n    cy.selectColor(\"textcolor\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(5000);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(126, 34, 206)\");\n\n    // Changing text color to PURPLE and validate using JS\n    cy.get(widgetsPage.toggleJsColor).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.testCodeMirrorLast(\"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\");\n\n    // Changing Cell backgroud color to rgb(126, 34, 206) and validate\n    cy.selectColor(\"cellbackgroundcolor\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"background\", \"rgb(126, 34, 206) none repeat scroll 0% 0% / auto padding-box border-box\", true);\n    // Changing Cell backgroud color to PURPLE and validate using JS\n    _.propPane.EnterJSContext(\"Cell background color\", \"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"background\", \"rgb(128, 0, 128) none repeat scroll 0% 0% / auto padding-box border-box\", true);\n    // close property pane\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Verify default search text","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":251,"column":36,"index":9861},"line":251,"code":"  it(\"12. Verify default search text\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    cy.backFromPropertyPanel();\n    // Chage deat search text value to \"data\"\n    cy.testJsontext(\"defaultsearchtext\", \"data\");\n    cy.PublishtheApp();\n    // Verify the deaullt search text\n    cy.get(widgetsPage.searchField).should(\"have.value\", \"data\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Verify default selected row","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":262,"column":37,"index":10285},"line":262,"code":"  it(\"13. Verify default selected row\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    cy.backFromPropertyPanel();\n    cy.testJsontext(\"defaultsearchtext\", \"\");\n    // Change default selected row value to 1\n    cy.get(widgetsPage.defaultSelectedRowField).type(\"1\");\n    cy.wait(2000);\n    cy.PublishtheApp();\n    // Verify the default selected row\n    cy.get(widgetsPage.selectedRow).should(\"have.css\", \"background-color\", \"rgb(227, 223, 251)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality","suites":["Table Widget Functionality"],"updatePoint":{"line":10,"column":32,"index":473},"line":10,"code":"  it(\"Table Widget Functionality\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, widgetsPage.widgetNameSpan);\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInput));\n    cy.wait(\"@updateLayout\");\n    //cy.get(widgetsPage.ColumnAction).click({ force: true });\n    // cy.get(widgetsPage.tableOnRowSelected)\n    //   .get(commonlocators.dropdownSelectButton)\n    //   .first()\n    //   .click({ force: true })\n    //   .get(commonlocators.dropdownmenu)\n    //   .children()\n    //   .contains(\"Navigate to\")\n    //   .click();\n    // cy.wait(\"@updateLayout\");\n    // cy.get(widgetsPage.tableOnRowSelected)\n    //   .get(commonlocators.dropdownSelectButton)\n    //   .first()\n    //   .find(\"> .bp3-button-text\")\n    //   .should(\"have.text\", \"{{navigateTo()}}\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Verify The Data","suites":["Table Widget Functionality"],"updatePoint":{"line":38,"column":51,"index":1459},"line":38,"code":"  it(\"Table Widget Functionality To Verify The Data\", function () {\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Show a Base64 Image","suites":["Table Widget Functionality"],"updatePoint":{"line":45,"column":55,"index":1730},"line":45,"code":"  it(\"Table Widget Functionality To Show a Base64 Image\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"image\");\n    cy.changeColumnType(\"Image\", false);\n    cy.isSelectRow(1);\n    const index = 1;\n    const imageVal = this.data.TableInput[index].image;\n    cy.readTableLinkPublish(index, \"1\").then(hrefVal => {\n      expect(hrefVal).to.contain(imageVal);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Check if Table is Sortable","suites":["Table Widget Functionality"],"updatePoint":{"line":56,"column":62,"index":2134},"line":56,"code":"  it(\"Table Widget Functionality To Check if Table is Sortable\", function () {\n    cy.get(commonlocators.editPropBackButton).click();\n    cy.openPropertyPane(\"tablewidget\");\n    // Confirm if isSortable is true\n    cy.get(commonlocators.isSortable_tablev1).should(\"be.checked\");\n    // Publish App\n    cy.PublishtheApp();\n    // Confirm Current order\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    });\n    // Sort Username Column\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    // Confirm order after sort\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    });\n    // Back to edit page\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.openPropertyPane(\"tablewidget\");\n    // Disable isSortable\n    // Confirm if isSortable is false\n    cy.togglebarDisable(commonlocators.isSortable_tablev1);\n\n    // Publish App\n    cy.PublishtheApp();\n    // Confirm Current order\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    });\n    // Confirm Sort is disable on Username Column\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    // Confirm order after sort\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Data validation with Switch ON","suites":["Table Widget and Switch binding Functionality"],"updatePoint":{"line":7,"column":49,"index":284},"line":7,"code":"  it(\"Table Widget Data validation with Switch ON\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"30\");\n      cy.log(\"the value is\" + tabValue);\n    });\n    cy.get(\".t--switch-widget-active .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"9\");\n      cy.log(\"the value is\" + tabValue);\n    });\n    cy.get(\".t--switch-widget-inactive .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"30\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Selected row and binding with Text widget","suites":["Table Widget and Switch binding Functionality"],"updatePoint":{"line":33,"column":47,"index":1162},"line":33,"code":"  it(\"Selected row and binding with Text widget\", function () {\n    cy.wait(5000);\n    cy.get(\".t--table-multiselect\").eq(1).click({\n      force: true\n    });\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", \"30\");\n    cy.get(\".t--table-multiselect\").eq(0).click({\n      force: true\n    });\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", \"29\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget Functionality To Check with changing schema of tabledata","suites":["Table Widget"],"updatePoint":{"line":9,"column":78,"index":442},"line":9,"code":"  it(\"1. Table Widget Functionality To Check with changing schema of tabledata\", () => {\n    let jsContext = `{{Switch1.isSwitchedOn?[{name: \"joe\"}]:[{employee_name: \"john\"}];}}`;\n    cy.wait(5000);\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"switchwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.wait(2000);\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-control-tabledata\").then($el => {\n      cy.updateCodeInput($el, jsContext);\n    });\n    cy.PublishtheApp();\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(\".t--switch-widget-active\").first().click();\n    cy.get(\".t--widget-tablewidget\").scrollIntoView();\n    cy.wait(1000);\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"john\");\n    });\n    cy.get(\".t--switch-widget-inactive\").first().click();\n    cy.wait(1000);\n    cy.get(\".t--widget-tablewidget\").scrollIntoView();\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(publish.backToEditor).click().wait(1000);\n    cy.CheckAndUnfoldEntityItem(\"Widgets\");\n    _.entityExplorer.DeleteWidgetFromEntityExplorer(\"Switch1\");\n    _.entityExplorer.DeleteWidgetFromEntityExplorer(\"Table1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_tabledata_schema_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget with Add button test and validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":9,"column":57,"index":453},"line":9,"code":"  it(\"1. Table widget with Add button test and validation\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tableBtn).should(\"not.exist\");\n    // Changing column data type to \"Button\"\n    cy.changeColumnType(\"Button\", false);\n    // Changing the computed value (data) to \"orderAmount\"\n    cy.updateComputedValue(testdata.currentRowOrderAmt);\n    // Selecting button action to show message\n    cy.getAlert(\"onClick\", \"Successful \".concat(testdata.currentRowEmail));\n    // Close Property pane\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    // Validating the button action by clicking\n    cy.get(widgetsPage.tableBtn).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    // Validating the toast message\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Successful tobias.funke@reqres.in\");\n    });\n\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleOnClick).click({\n      force: true\n    });\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{showAlert('Successful' + currentRow.email).then(() => showAlert('second alert')) }}\");\n    });\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n\n    // Validating the button action by clicking\n    cy.get(widgetsPage.tableBtn).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"second alert\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Button color validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":58,"column":38,"index":2285},"line":58,"code":"  it(\"2. Table Button color validation\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    // Changing column data type to \"Button\"\n    /* cy.get(commonlocators.changeColType)\n      .last()\n      .click();\n    cy.get(\".t--dropdown-option\")\n      .children()\n      .contains(\"Plain text\")\n      .click();\n    cy.changeColumnType(\"Button\", false); */\n    const color1 = \"rgb(255, 0, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color1, {\n      force: true\n    });\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color1);\n\n    // Changing the color again to reproduce issue #9526\n    const color2 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear()\n    // following wait is required to reproduce #9526\n    .wait(600).type(color2);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color2);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget triggeredRow property should be accessible","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":88,"column":64,"index":3308},"line":88,"code":"  it(\"3. Table widget triggeredRow property should be accessible\", function () {\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget triggeredRow property should be same even after sorting the table","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":91,"column":87,"index":3493},"line":91,"code":"  it(\"4. Table widget triggeredRow property should be same even after sorting the table\", function () {\n    //sort table date on second column\n    cy.get(\".draggable-header \").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget add new icon button column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":99,"column":48,"index":3772},"line":99,"code":"  it(\"5. Table widget add new icon button column\", function () {\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    // hide id column\n    cy.makeColumnVisible(\"id\");\n    cy.wait(1000);\n    // click on Add new Column.\n    //cy.get(\"[data-testid='t--property-pane-back-btn']\").click({ force: true });\n    cy.get(\".t--add-column-btn\").click();\n    //Open New Custom Column\n    cy.editColumn(\"customColumn1\");\n    // Change Column type to icon Button\n    cy.changeColumnType(\"Icon button\", false);\n    // Select Icon from Icon Control\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-add\").should(\"exist\");\n\n    // disabled icon btn\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.getTableDataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + \" button.bp3-disabled\").should(\"exist\");\n    });\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox);\n\n    //Delete Column\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    cy.deleteColumn(\"customColumn1\");\n    // Close Property pane\n    /*\n    cy.get(commonlocators.editPropCrossButton).click({\n      force: true,\n    });\n    */\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget add new menu button column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":142,"column":48,"index":5147},"line":142,"code":"  it(\"6. Table widget add new menu button column\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    // click on Add new Column.\n    cy.get(\".t--add-column-btn\").click();\n    //Open New Custom Column\n    cy.editColumn(\"customColumn1\");\n    // Change Column type to icon Button\n    cy.changeColumnType(\"Menu button\", false);\n    //Changing the text on the Menu button\n    cy.testJsontext(\"label\", \"Menu button\");\n    // Select Icon from Icon Control\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-airplane\").first().click({\n      force: true\n    });\n    // validate icon\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-airplane\").should(\"exist\");\n    cy.get(\".editable-text-container\").eq(1).click();\n    // validate label\n    cy.contains(\"Menu button\").should(\"exist\");\n    const color1 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.menuColor).clear().click({\n      force: true\n    }).type(color1);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color1);\n\n    // Changing the color again to reproduce issue #9526\n    const color2 = \"rgb(255, 0, 0)\";\n    cy.get(widgetsPage.menuColor).clear().click({\n      force: true\n    })\n    // following wait is required to reproduce #9526\n    .wait(500).type(color2);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color2);\n\n    // Add a Menu item 1\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }).wait(500);\n    // Edit a Menu item\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    // update menu item background color\n    cy.get(widgetsPage.backgroundcolorPickerNew).type(\"#03b365\", {\n      force: true\n    }).wait(500);\n    //  Add action to the menu Item\n    cy.getAlert(\"onItemClick\", \"Successful \".concat(testdata.currentRowEmail));\n    // Go back to table property pane\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n\n    // Add a Menu item 2\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    });\n    // Edit a Menu item\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    // update menu item background color\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#FFC13D\", {\n      force: true\n    }).wait(500);\n    // Go back to table property pane\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n\n    // Add a Menu item 3\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    });\n    // Edit a Menu item\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    // update menu item background color\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#3366FF\", {\n      force: true\n    }).wait(500);\n    // Go back to table property pane\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n\n    // Close Property pane\n    cy.openPropertyPane(\"tablewidget\");\n    // Click on the Menu button\n    cy.contains(\"Menu button\").click({\n      force: true\n    });\n    cy.wait(1000);\n\n    //Commenting below verification until fixed to overide flakiness\n    // // verify menu items background color\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(0)\n    //   .should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(1)\n    //   .should(\"have.css\", \"background-color\", \"rgb(51, 102, 255)\"); //\"rgb(255, 193, 61)\");\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(2)\n    //   .should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");//\"rgb(51, 102, 255)\");\n\n    //cy.closePropertyPane();\n\n    cy.closePropertyPane();\n\n    // disable menu item 3\n    //cy.openPropertyPane(\"tablewidget\");\n\n    //cy.editColumn(\"customColumn1\");\n    // Edit a Menu item\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--property-control-disabled label input\").click({\n      force: true\n    });\n    //cy.closePropertyPane();\n\n    // Click on the Menu button\n    cy.clickButton(\"Menu button\").wait(1000);\n    // check Menu Item 3 is disable\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.css\", \"background-color\", \"rgb(250, 250, 250)\");\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.class\", \"bp3-disabled\");\n\n    // Click on the Menu Item\n    cy.get(\".bp3-menu-item\").eq(0).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    // Validating the toast message\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"Successful tobias.funke@reqres.in\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget test on button icon click, row should not get deselected","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":290,"column":78,"index":10139},"line":290,"code":"  it(\"7. Table widget test on button icon click, row should not get deselected\", () => {\n    cy.get(widgetsPage.tableIconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n    //click icon button again\n    cy.get(widgetsPage.tableIconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Table widget test on button when transparent","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":308,"column":53,"index":10743},"line":308,"code":"  it(\"8. Table widget test on button when transparent\", () => {\n    cy.openPropertyPane(\"tablewidget\");\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    // Changing column \"Button\" color to transparent\n\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(widgetsPage.transparent).click({\n      force: true\n    });\n    cy.get(\".td[data-colindex=5][data-rowindex=0] .bp3-button\").should(\"have.css\", \"background-color\", \"rgba(0, 0, 0, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Copy paste table widget and valdiate application status","suites":["Test Suite to validate copy/paste table Widget"],"updatePoint":{"line":10,"column":61,"index":533},"line":10,"code":"  it(\"Copy paste table widget and valdiate application status\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, widgetsPage.widgetNameSpan);\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"be.visible\");\n\n    //Check after copying new table widget should not have any warnings\n    cy.get('.t--widget-propertypane-toggle [name=\"warning\"]').should(\"not.exist\");\n    cy.get(commonlocators.toastAction).should(\"not.be.visible\");\n    cy.wait(2000);\n    cy.CheckAndUnfoldWidgets();\n    _.entityExplorer.ActionContextMenuByEntityName(\"Table1Copy\", \"Show bindings\");\n    cy.wait(200);\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(13);\n      expect($lis.eq(0)).to.contain(\"{{Table1Copy.selectedRow}}\");\n      expect($lis.eq(1)).to.contain(\"{{Table1Copy.selectedRows}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Copy_Paste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify default table row Data","suites":["Table Widget property pane deafult feature validation"],"updatePoint":{"line":7,"column":35,"index":293},"line":7,"code":"  it(\"Verify default table row Data\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    cy.wait(2000);\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.wait(2000);\n    cy.readTabledataFromSpecificIndex(\"2\", \"0\", 1).then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the table is\" + tabValue);\n      cy.get(\".bp3-ui-text span\").eq(0).should(\"have.text\", tabData);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Default_Row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to add column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":7,"column":24,"index":272},"line":7,"code":"  it(\"Test to add column\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    // Adding new column\n    cy.addColumn(\"CustomColumn\");\n    cy.tableColumnDataValidation(\"customColumn1\"); //To be updated later\n    // Hiding all other columns in the table from property pane\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    // Validating the newly added column\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n    //Test: Edit column name and validate test for computed value\n    // Open column detail by draggable id of the column\n    cy.editColumn(\"customColumn1\");\n    // Validating single cell value\n    cy.readTabledataPublish(\"1\", \"2\").then(() => {\n      // Chaging the computed value to \"Emails\"\n      cy.updateComputedValue(testdata.currentRowWithIdOutside);\n      // Validating single cell value\n      cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n        expect(tabData).to.be.equal(\"#lindsay.ferguson@reqres.in\");\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget new menu button column should not deselect row","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":6,"column":65,"index":250},"line":6,"code":"  it(\"Table widget new menu button column should not deselect row\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n    cy.contains(\"Open Menu\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/Table_Widget_Selected_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the selectedRowIndices does not contain 2d array","suites":["Table widget edge case scenario testing"],"updatePoint":{"line":8,"column":63,"index":389},"line":8,"code":"  it(\"Check if the selectedRowIndices does not contain 2d array\", function () {\n    testTimeout(seconds(120)); //2mins\n\n    cy.openPropertyPane(\"tablewidget\");\n\n    //Enable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection_tablev1).first().click({\n      force: true\n    });\n\n    //Change the value of default selected row\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", \"1\");\n\n    //Disable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection_tablev1).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\");\n\n    //Enable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection_tablev1).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\");\n\n    //Disable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection_tablev1).first().click({\n      force: true\n    });\n\n    //Enable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection_tablev1).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/table_with_text_no_2dArray_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the selectedRowIndices does not contain -1","suites":["Table widget edge case scenario testing"],"updatePoint":{"line":8,"column":57,"index":391},"line":8,"code":"  it(\"Check if the selectedRowIndices does not contain -1\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n\n    //Update the property default selected row to blank\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", \"\");\n\n    // ensure evaluated value popup does not show up\n    cy.get(commonlocators.evaluatedCurrentValue).should(\"not.exist\");\n\n    //Check the value present in the textfield which is selectedRowIndices is blank\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"\");\n\n    //Enable the \"Enable Multi Row selection\"\n    cy.get(widgetsPage.toggleEnableMultirowselection_tablev1).first().click({\n      force: true\n    });\n\n    //Check the value present in the textfield which is selectedRowIndices is []\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\");\n\n    //Select the 1st, 2nd and 3rd row\n    cy.isSelectRow(\"0\");\n    cy.isSelectRow(\"1\");\n    cy.isSelectRow(\"2\");\n\n    //Check the value present in the textfield which is selectedRowIndices is [0,1,2]\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  0,  1,  2]\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV1/table_with_text_selRowIndices_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.1. should test that allow Add new row property is present","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":16,"column":67,"index":709},"line":16,"code":"    it(\"1.1. should test that allow Add new row property is present\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.get(\".t--property-control-allowaddingarow\").should(\"exist\");\n      cy.get(\".t--property-control-allowaddingarow input\").should(\"exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.2. should test that Add new row link appears on the UI when the allow add new row property is enabled","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":21,"column":111,"index":1029},"line":21,"code":"    it(\"1.2. should test that Add new row link appears on the UI when the allow add new row property is enabled\", () => {\n      cy.get(\".t--add-new-row\").should(\"not.exist\");\n      propPane.ToggleOnOrOff(\"Allow adding a row\", \"On\");\n      cy.get(\".t--add-new-row\").should(\"exist\");\n      propPane.ToggleOnOrOff(\"Allow adding a row\", \"Off\");\n      cy.get(\".t--add-new-row\").should(\"not.exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.3. should test that onSave, onDiscard and default row are showing up only when the allow add new property is enabled","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":28,"column":126,"index":1446},"line":28,"code":"    it(\"1.3. should test that onSave, onDiscard and default row are showing up only when the allow add new property is enabled\", () => {\n      cy.get(\".t--property-control-onsave\").should(\"not.exist\");\n      cy.get(\".t--property-control-ondiscard\").should(\"not.exist\");\n      cy.get(\".t--property-control-defaultvalues\").should(\"not.exist\");\n      propPane.ToggleOnOrOff(\"Allow adding a row\", \"On\");\n      cy.get(\".t--property-control-onsave\").should(\"exist\");\n      cy.get(\".t--property-control-ondiscard\").should(\"exist\");\n      cy.get(\".t--property-control-defaultvalues\").should(\"exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.4. should test that add new row link is disabled during the inline editing flow","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":37,"column":89,"index":2010},"line":37,"code":"    it(\"1.4. should test that add new row link is disabled during the inline editing flow\", () => {\n      cy.get(\".t--add-new-row.disabled\").should(\"not.exist\");\n      cy.makeColumnEditable(\"step\");\n      cy.editTableCell(0, 0);\n      cy.get(\".t--add-new-row.disabled\").should(\"exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.5. should test that clicking on add new row link adds an empty row at the top of the table","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":43,"column":100,"index":2316},"line":43,"code":"    it(\"1.5. should test that clicking on add new row link adds an empty row at the top of the table\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.get(\".tableWrap .new-row\").should(\"not.exist\");\n      cy.get(\".t--add-new-row\").click();\n      cy.get(\".tableWrap .new-row\").should(\"exist\");\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.6. should test that new row is getting populated with the default row property value","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":52,"column":94,"index":2698},"line":52,"code":"    it(\"1.6. should test that new row is getting populated with the default row property value\", () => {\n      cy.updateCodeInput(\".t--property-control-defaultvalues\", \"{{{step: 'newStepCell'}}}\");\n      cy.get(\".t--add-new-row\").click();\n      cy.get(\".tableWrap .new-row\").should(\"exist\");\n      cy.readTableV2data(0, 0).then(val => {\n        expect(val).to.equal(\"newStepCell\");\n      });\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.7. should test that inline editing, row selection, pagination, search, filters are actions cannot be performed while in add new row feature","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":63,"column":149,"index":3227},"line":63,"code":"    it(\"1.7. should test that inline editing, row selection, pagination, search, filters are actions cannot be performed while in add new row feature\", () => {\n      cy.get(\".t--widget-tablewidgetv2 .t--search-input\").should(\"exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-filter-toggle-btn\").should(\"exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-download-btn\").should(\"exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--add-new-row\").should(\"exist\");\n      cy.get(\".t--widget-tablewidgetv2 .show-page-items\").should(\"exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-widget-prev-page\").should(\"exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-widget-page-input\").should(\"exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-widget-next-page\").should(\"exist\");\n      cy.get(\".t--add-new-row\").click();\n      cy.get(\".t--widget-tablewidgetv2 .t--search-input\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-filter-toggle-btn\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-download-btn\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--add-new-row\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2 .show-page-items\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-widget-prev-page\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-widget-page-input\").should(\"not.exist\");\n      cy.get(\".t--widget-tablewidgetv2 .t--table-widget-next-page\").should(\"not.exist\");\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.8. should test that only editable column cells are in editmode in the new row","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":85,"column":87,"index":4774},"line":85,"code":"    it(\"1.8. should test that only editable column cells are in editmode in the new row\", () => {\n      cy.get(\".t--add-new-row\").click();\n      cy.get(`[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor`).should(\"exist\");\n      cy.get(`[data-colindex=1][data-rowindex=0] .t--inlined-cell-editor`).should(\"not.exist\");\n      cy.makeColumnEditable(\"task\");\n      cy.get(`[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor`).should(\"exist\");\n      cy.get(`[data-colindex=1][data-rowindex=0] .t--inlined-cell-editor`).should(\"exist\");\n      cy.makeColumnEditable(\"step\");\n      cy.makeColumnEditable(\"task\");\n      cy.get(`[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor`).should(\"not.exist\");\n      cy.get(`[data-colindex=1][data-rowindex=0] .t--inlined-cell-editor`).should(\"not.exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.9. should test that newRow property holds the entered data","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":97,"column":68,"index":5577},"line":97,"code":"    it(\"1.9. should test that newRow property holds the entered data\", () => {\n      cy.makeColumnEditable(\"step\");\n      cy.makeColumnEditable(\"task\");\n      cy.enterTableCellValue(0, 0, \"22\");\n      cy.enterTableCellValue(1, 0, \"21\");\n      cy.dragAndDropToCanvas(\"textwidget\", {\n        x: 300,\n        y: 600\n      });\n      cy.openPropertyPane(\"textwidget\");\n      cy.updateCodeInput(\".t--property-control-text\", `{{Table1.newRow}}`);\n      cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"step\": \"22\",  \"task\": \"21\"}`);\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.10. should test that non data (iconBitton, button, menubutton) column cells are not showing up","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":110,"column":104,"index":6166},"line":110,"code":"    it(\"1.10. should test that non data (iconBitton, button, menubutton) column cells are not showing up\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.editColumn(\"step\");\n      [\"Button\", \"Menu button\", \"Icon button\"].forEach(columnType => {\n        cy.get(commonlocators.changeColType).last().click();\n        cy.get(\".t--dropdown-option\").children().contains(columnType).click();\n        cy.wait(\"@updateLayout\");\n        cy.get(`[data-colindex=0][data-rowindex=0] button`).should(\"not.exist\");\n      });\n      cy.get(\"[data-testid='t--property-pane-back-btn']\").click();\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.11. should not hide the header section when add new row button is enabled and another header element is disabled","suites":["Table widget Add new row feature's","Basic flow "],"updatePoint":{"line":121,"column":122,"index":6783},"line":121,"code":"    it(\"1.11. should not hide the header section when add new row button is enabled and another header element is disabled\", () => {\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n      //disable all header widgets for the table\n      [\"Show pagination\", \"Allow searching\", \"Allow download\", \"Allow filtering\", \"Allow adding a row\"].forEach(val => {\n        propPane.ToggleOnOrOff(val, \"Off\");\n      });\n      cy.wait(1000);\n\n      //intially enable 2 sections to show pagination and \"add new row\" button to the header section\n      propPane.ToggleOnOrOff(\"Show pagination\", \"On\");\n      propPane.ToggleOnOrOff(\"Allow adding a row\", \"On\");\n\n      //\"add new row\" button should be present\n      cy.get(\".t--add-new-row\").should(\"exist\");\n      //turn off pagination and now the \"add new row\" button should be the only component left in the header section\n      propPane.ToggleOnOrOff(\"Show pagination\", \"Off\");\n      //\"add new row\" should continue to be present\n      cy.get(\".t--add-new-row\").should(\"exist\");\n      //finally turn off allow adding a row then the \"add new row\" button should be removed from the header section\n      propPane.ToggleOnOrOff(\"Allow adding a row\", \"Off\");\n      cy.get(\".t--add-new-row\").should(\"not.exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.1. should test that validation is working for a new row cell","suites":["Table widget Add new row feature's","Validation flow"],"updatePoint":{"line":152,"column":70,"index":8174},"line":152,"code":"    it(\"2.1. should test that validation is working for a new row cell\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      propPane.ToggleOnOrOff(\"Allow adding a row\", \"On\");\n      cy.get(\".t--add-new-row\").click();\n      cy.makeColumnEditable(\"step\");\n      cy.editColumn(\"step\");\n      propPane.UpdatePropertyFieldValue(\"Valid\", \"{{editedValue === '#1'}}\");\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"22\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"#1\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      propPane.UpdatePropertyFieldValue(\"Valid\", \"\");\n      propPane.UpdatePropertyFieldValue(\"Regex\", \"^#1$\");\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"22\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"#1\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      propPane.UpdatePropertyFieldValue(\"Regex\", \"\");\n      propPane.ToggleOnOrOff(\"Required\", \"On\");\n      cy.enterTableCellValue(0, 0, \"22\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"#1\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(\"Number\").click();\n      cy.wait(\"@updateLayout\");\n      propPane.UpdatePropertyFieldValue(\"Min\", \"5\");\n      cy.enterTableCellValue(0, 0, \"6\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"7\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"4\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"3\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"8\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      propPane.UpdatePropertyFieldValue(\"Min\", \"\");\n      propPane.UpdatePropertyFieldValue(\"Max\", \"5\");\n      cy.enterTableCellValue(0, 0, \"6\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"7\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"4\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"3\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"8\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      propPane.UpdatePropertyFieldValue(\"Max\", \"\");\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.2. should test that validation variable isNewRow is working","suites":["Table widget Add new row feature's","Validation flow"],"updatePoint":{"line":212,"column":69,"index":11272},"line":212,"code":"    it(\"2.2. should test that validation variable isNewRow is working\", () => {\n      propPane.UpdatePropertyFieldValue(\"Valid\", \"{{isNewRow ? (editedValue === 1) : (editedValue === 2)}}\");\n      cy.editTableCell(0, 0);\n      cy.enterTableCellValue(0, 0, \"3\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"2\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.discardTableCellValue(0, 0);\n      cy.wait(500);\n      cy.get(\".t--add-new-row\").click();\n      cy.wait(1000);\n      cy.enterTableCellValue(0, 0, \"3\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"2\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"1\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.3. should test that validation is working for more than one add new row cell at a time","suites":["Table widget Add new row feature's","Validation flow"],"updatePoint":{"line":233,"column":96,"index":12269},"line":233,"code":"    it(\"2.3. should test that validation is working for more than one add new row cell at a time\", () => {\n      propPane.UpdatePropertyFieldValue(\"Valid\", \"{{editedValue === 1}}\");\n      cy.get(\"[data-testid='t--property-pane-back-btn']\").click();\n      cy.wait(500);\n      cy.makeColumnEditable(\"task\");\n      cy.editColumn(\"task\");\n      cy.wait(500);\n      propPane.UpdatePropertyFieldValue(\"Valid\", \"{{editedValue === 'invalid'}}\");\n      propPane.ToggleOnOrOff(\"Required\", \"On\");\n      cy.get(\".t--add-new-row\").click();\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"have.length\", 2);\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.4. should test that validation error message only appears when a cell is in focus","suites":["Table widget Add new row feature's","Validation flow"],"updatePoint":{"line":245,"column":91,"index":12875},"line":245,"code":"    it(\"2.4. should test that validation error message only appears when a cell is in focus\", () => {\n      cy.get(\".error-tooltip .bp3-popover-content\").should(\"not.exist\");\n      cy.get(`[data-colindex=1][data-rowindex=0] input`).focus();\n      cy.get(\".error-tooltip .bp3-popover-content\").should(\"have.length\", 1);\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.get(\".error-tooltip .bp3-popover-content\").should(\"not.exist\");\n      cy.get(`[data-colindex=0][data-rowindex=0] input`).focus();\n      cy.get(\".error-tooltip .bp3-popover-content\").should(\"have.length\", 1);\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.5. should test that save button is disabled when there is an error","suites":["Table widget Add new row feature's","Validation flow"],"updatePoint":{"line":254,"column":76,"index":13448},"line":254,"code":"    it(\"2.5. should test that save button is disabled when there is an error\", () => {\n      cy.get(\".t--save-new-row\").should(\"be.disabled\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"have.length\", 2);\n      cy.enterTableCellValue(0, 0, \"1\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"have.length\", 1);\n      cy.enterTableCellValue(1, 0, \"invalid\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"have.length\", 0);\n      cy.get(\".t--save-new-row\").should(\"not.be.disabled\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.1. should test that discard button is undoing the add new feature","suites":["Table widget Add new row feature's","Actions flow (save, discard)"],"updatePoint":{"line":270,"column":75,"index":14156},"line":270,"code":"    it(\"3.1. should test that discard button is undoing the add new feature\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      propPane.ToggleOnOrOff(\"Allow adding a row\", \"On\");\n      cy.get(\".tableWrap .new-row\").should(\"not.exist\");\n      cy.get(\".t--add-new-row\").click();\n      cy.get(\".tableWrap .new-row\").should(\"exist\");\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.2. should test that discard events is triggered when user clicks on the discard button","suites":["Table widget Add new row feature's","Actions flow (save, discard)"],"updatePoint":{"line":280,"column":96,"index":14598},"line":280,"code":"    it(\"3.2. should test that discard events is triggered when user clicks on the discard button\", () => {\n      cy.getAlert(\"onDiscard\", \"discarded!!\");\n      cy.get(\".t--add-new-row\").click();\n      cy.get(\".tableWrap .new-row\").should(\"exist\");\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n      cy.get(widgetsPage.toastAction).should(\"be.visible\");\n      agHelper.AssertContains(\"discarded!!\");\n      cy.get(\".tableWrap .new-row\").should(\"not.exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.3. should test that save event is triggered when user clicks on the save button","suites":["Table widget Add new row feature's","Actions flow (save, discard)"],"updatePoint":{"line":291,"column":89,"index":15084},"line":291,"code":"    it(\"3.3. should test that save event is triggered when user clicks on the save button\", () => {\n      cy.getAlert(\"onSave\", \"saved!!\");\n      cy.get(\".t--add-new-row\").click();\n      cy.get(\".tableWrap .new-row\").should(\"exist\");\n      cy.get(\".t--save-new-row\").click({\n        force: true\n      });\n      cy.get(widgetsPage.toastAction).should(\"be.visible\");\n      agHelper.AssertContains(\"saved!!\");\n      cy.get(\".tableWrap .new-row\").should(\"not.exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Add_new_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that menuitems background color property has access to currentRow","suites":["Custom column alias functionality"],"updatePoint":{"line":10,"column":87,"index":348},"line":10,"code":"  it(\"1. should check that menuitems background color property has access to currentRow\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"task\");\n    cy.changeColumnType(\"Menu button\");\n    cy.get(\".t--add-menu-item-btn\").click();\n    cy.get(\".t--edit-column-btn\").click();\n    cy.get(\"[data-colindex='1'][data-rowindex='0'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");\n    cy.get(\"[data-colindex='1'][data-rowindex='1'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-backgroundcolor .t--js-toggle\").click();\n    _.propPane.UpdatePropertyFieldValue(\"Background color\", \"{{currentRow.step === '#1' ? '#f00' : '#0f0'}}\");\n    cy.wait(2000);\n    cy.get(\"[data-colindex='1'][data-rowindex='0'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"background-color\", \"rgb(255, 0, 0)\");\n    cy.get(\"[data-colindex='1'][data-rowindex='1'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"background-color\", \"rgb(0, 255, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/menubutton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that menuitems text color property has access to currentRow","suites":["Custom column alias functionality"],"updatePoint":{"line":37,"column":81,"index":1692},"line":37,"code":"  it(\"2. should check that menuitems text color property has access to currentRow\", () => {\n    cy.get(\"[data-colindex='1'][data-rowindex='0'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"color\", \"rgb(24, 32, 38)\");\n    cy.get(\"[data-colindex='1'][data-rowindex='1'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"color\", \"rgb(24, 32, 38)\");\n    cy.get(\".t--property-control-textcolor .t--js-toggle\").click();\n    _.propPane.UpdatePropertyFieldValue(\"Text color\", \"{{currentRow.step === '#1' ? '#f00' : '#0f0'}}\");\n    cy.wait(2000);\n    cy.get(\"[data-colindex='1'][data-rowindex='0'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(\"[data-colindex='1'][data-rowindex='1'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"color\", \"rgb(0, 255, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/menubutton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that menuitems isDisabled property has access to currentRow","suites":["Custom column alias functionality"],"updatePoint":{"line":58,"column":81,"index":2752},"line":58,"code":"  it(\"3. should check that menuitems isDisabled property has access to currentRow\", () => {\n    cy.get(\"[data-colindex='1'][data-rowindex='0'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"background-color\", \"rgb(255, 0, 0)\");\n    cy.get(\"[data-colindex='1'][data-rowindex='1'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"background-color\", \"rgb(0, 255, 0)\");\n    cy.moveToContentTab();\n    cy.get(\".t--property-control-disabled .t--js-toggle\").click();\n    _.propPane.UpdatePropertyFieldValue(\"Disabled\", \"{{currentRow.step === '#1'}}\");\n    cy.wait(2000);\n    cy.get(\"[data-colindex='1'][data-rowindex='0'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"background-color\", \"rgb(250, 250, 250)\");\n    cy.get(\"[data-colindex='1'][data-rowindex='1'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"have.css\", \"background-color\", \"rgb(0, 255, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/menubutton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that menuitems visible property has access to currentRow","suites":["Custom column alias functionality"],"updatePoint":{"line":80,"column":78,"index":3861},"line":80,"code":"  it(\"4. should check that menuitems visible property has access to currentRow\", () => {\n    cy.get(\"[data-colindex='1'][data-rowindex='0'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"exist\");\n    cy.get(\"[data-colindex='1'][data-rowindex='1'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"exist\");\n    cy.get(\".t--property-control-visible .t--js-toggle\").click();\n    _.propPane.UpdatePropertyFieldValue(\"Visible\", \"{{currentRow.step === '#1'}}\");\n    cy.wait(2000);\n    cy.get(\"[data-colindex='1'][data-rowindex='0'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"exist\");\n    cy.get(\"[data-colindex='1'][data-rowindex='1'] .bp3-button\").click({\n      force: true\n    });\n    cy.get(\".table-menu-button-popover li a\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/menubutton_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that select column is available in the column dropdown options","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":11,"column":84,"index":441},"line":11,"code":"  it(\"1. should check that select column is available in the column dropdown options\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Select\").click();\n    cy.wait(\"@updateLayout\");\n\n    //should check that edtiable option is present\n    cy.get(\".t--property-control-editable\").should(\"exist\");\n    cy.get(\".t--property-pane-section-collapse-events\").should(\"not.exist\");\n    cy.get(\".t--property-control-editable input\").click();\n    cy.get(\".t--property-pane-section-collapse-events\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that options given in the property pane is appearing on the table","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":24,"column":87,"index":1096},"line":24,"code":"  it(\"2. should check that options given in the property pane is appearing on the table\", () => {\n    cy.get(\".t--property-control-options\").should(\"exist\");\n    cy.updateCodeInput(\".t--property-control-options\", `\n      [\n        {\n          \"label\": \"#1\",\n          \"value\": \"#1\"\n        },\n        {\n          \"label\": \"#2\",\n          \"value\": \"#2\"\n        },\n        {\n          \"label\": \"#3\",\n          \"value\": \"#3\"\n        }\n      ]\n    `);\n    cy.editTableSelectCell(0, 0);\n    [{\n      label: \"#1\",\n      value: \"#1\"\n    }, {\n      label: \"#2\",\n      value: \"#2\"\n    }, {\n      label: \"#3\",\n      value: \"#3\"\n    }].forEach(item => {\n      cy.get(\".menu-item-text\").contains(item.value).should(\"exist\");\n    });\n    cy.get(\".menu-item-active.has-focus\").should(\"contain\", \"#1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that placeholder property is working","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":57,"column":58,"index":1861},"line":57,"code":"  it(\"3. should check that placeholder property is working\", () => {\n    cy.updateCodeInput(\".t--property-control-options\", `\n      [\n        {\n          \"label\": \"test\",\n          \"value\": \"test\"\n        }\n      ]\n    `);\n    cy.wait(500);\n    cy.editTableSelectCell(0, 0);\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .select-button .bp3-button-text`).should(\"contain\", \"-- Select --\");\n    cy.updateCodeInput(\".t--property-control-placeholder\", \"choose an option\");\n    cy.editTableSelectCell(0, 0);\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .select-button .bp3-button-text`).should(\"contain\", \"choose an option\");\n    cy.updateCodeInput(\".t--property-control-placeholder\", \"choose an item\");\n    cy.editTableSelectCell(0, 0);\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .select-button .bp3-button-text`).should(\"contain\", \"choose an item\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that filterable property is working","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":76,"column":57,"index":2733},"line":76,"code":"  it(\"4. should check that filterable property is working\", () => {\n    cy.updateCodeInput(\".t--property-control-options\", `\n      {{[\n        {\n          label: \"#1\",\n          value: \"#1\"\n        },\n        {\n          label: \"#2\",\n          value: \"#2\"\n        },\n        {\n          label: \"#3\",\n          value: \"#3\"\n        }\n      ]}}\n    `);\n    cy.get(\".t--property-control-filterable input\").click();\n    cy.editTableSelectCell(0, 0);\n    cy.get(\".select-popover-wrapper .bp3-input-group input\").should(\"exist\");\n    cy.get(\".select-popover-wrapper .bp3-input-group input\").type(\"1\", {\n      force: true\n    });\n    cy.get(\".menu-item-link\").should(\"have.length\", 1);\n    cy.get(\".menu-item-link\").should(\"contain\", \"#1\");\n    cy.get(\".select-popover-wrapper .bp3-input-group input\").clear().type(\"3\", {\n      force: true\n    });\n    cy.get(\".menu-item-link\").should(\"have.length\", 1);\n    cy.get(\".menu-item-link\").should(\"contain\", \"#3\");\n    cy.get(\".select-popover-wrapper .bp3-input-group input\").clear();\n    cy.get(\".menu-item-link\").should(\"have.length\", 3);\n    cy.get(\".t--canvas-artboard\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that on option select is working","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":112,"column":54,"index":3881},"line":112,"code":"  it(\"5. should check that on option select is working\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-onoptionchange .t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-onoptionchange\", `\n      {{showAlert(currentRow.step)}}\n    `);\n    cy.editTableSelectCell(0, 0);\n    cy.get(\".menu-item-link\").contains(\"#3\").click();\n    _.agHelper.ValidateToastMessage(\"#3\");\n    cy.get(\".menu-virtual-list\").should(\"not.exist\");\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.equal(\"#3\");\n    });\n    cy.discardTableRow(4, 0);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. should check that currentRow is accessible in the select options","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":128,"column":73,"index":4522},"line":128,"code":"  it(\"6. should check that currentRow is accessible in the select options\", () => {\n    cy.updateCodeInput(\".t--property-control-options\", `\n      {{[\n        {\n          label: currentRow.step,\n          value: currentRow.step\n        }\n      ]}}\n    `);\n    cy.editTableSelectCell(0, 0);\n    cy.get(\".menu-item-text\").contains(\"#1\").should(\"exist\");\n    cy.get(\".menu-item-text\").contains(\"#2\").should(\"not.exist\");\n    cy.editTableSelectCell(0, 1);\n    cy.get(\".menu-item-text\").contains(\"#2\").should(\"exist\");\n    cy.get(\".menu-item-text\").contains(\"#1\").should(\"not.exist\");\n    cy.editTableSelectCell(0, 2);\n    cy.get(\".menu-item-text\").contains(\"#3\").should(\"exist\");\n    cy.get(\".menu-item-text\").contains(\"#1\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. should check that 'same select option in new row' property is working","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":147,"column":78,"index":5275},"line":147,"code":"  it(\"7. should check that 'same select option in new row' property is working\", () => {\n    _.propPane.NavigateBackToPropertyPane();\n    const checkSameOptionsInNewRowWhileEditing = () => {\n      _.propPane.ToggleOnOrOff(\"Allow adding a row\", \"On\");\n      _.propPane.OpenTableColumnSettings(\"step\");\n      cy.get(\".t--property-control-sameoptionsinnewrow input\").should(\"have.attr\", \"checked\");\n\n      // Check if newrowoption is invisible when sameoptionsinnewrow is true\n      cy.get(\".t--property-control-newrowoptions\").should(\"not.exist\");\n      cy.updateCodeInput(\".t--property-control-options\", `\n        {{[{\n          \"label\": \"male\",\n          \"value\": \"male\"\n          },\n          {\n          \"label\": \"female\",\n          \"value\": \"female\"\n          }\n        ]}}\n      `);\n      cy.editTableSelectCell(0, 0);\n\n      // Check if the options appear in the table\n      cy.get(\".menu-item-text\").contains(\"male\").should(\"exist\");\n      cy.get(\".menu-item-text\").contains(\"female\").should(\"exist\");\n      cy.get(\"[data-colindex=1][data-rowindex=0]\").click({\n        force: true\n      });\n    };\n    const checkSameOptionsWhileAddingNewRow = () => {\n      // Check if the same options appears while adding a new row.\n      cy.get(\".t--add-new-row\").scrollIntoView().should(\"be.visible\");\n      cy.get(\".t--add-new-row\").click({\n        force: true\n      });\n      cy.wait(500);\n\n      // Check if new row is visible\n      cy.get(\".tableWrap .new-row\").should(\"be.visible\");\n\n      // Click on the first cell of the table that hasa select dropdown\n      cy.get(\"[data-colindex=0][data-rowindex=0] [data-testid='selectbutton.btn.main']\").click({\n        force: true\n      });\n      cy.get(\".menu-item-text\").contains(\"male\").should(\"exist\");\n      cy.get(\".menu-item-text\").contains(\"female\").should(\"exist\");\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n    };\n    checkSameOptionsInNewRowWhileEditing();\n    cy.wait(500);\n    checkSameOptionsWhileAddingNewRow();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. should check that 'new row select options' is working","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":201,"column":62,"index":7265},"line":201,"code":"  it(\"8. should check that 'new row select options' is working\", () => {\n    const checkNewRowOptions = () => {\n      // New row select options should be visible when \"Same options in new row\" is turned off\n      _.propPane.ToggleOnOrOff(\"Same options in new row\", \"Off\");\n      cy.get(\".t--property-control-newrowoptions\").should(\"exist\");\n\n      // New row select options should appear in table\n      cy.updateCodeInput(\".t--property-control-newrowoptions\", `\n        [{\"label\": \"abc\", \"value\": \"abc\"}]\n      `);\n      cy.get(\".t--add-new-row\").scrollIntoView().should(\"be.visible\");\n      cy.get(\".t--add-new-row\").click({\n        force: true\n      });\n      cy.get(\".tableWrap .new-row\").should(\"exist\");\n      cy.get(\"[data-colindex=0][data-rowindex=0] [data-testid='selectbutton.btn.main']\").click({\n        force: true\n      });\n      cy.get(\".menu-item-text\").contains(\"abc\").should(\"exist\");\n    };\n    const isCurrentRowAccessDisabled = () => {\n      // New row select options should not have access to the currentRow\n      cy.updateCodeInput(\".t--property-control-newrowoptions\", \"{{currentRow}}\");\n      _.agHelper.VerifyEvaluatedErrorMessage(\"currentRow is not defined\");\n    };\n    const checkDynamicBindingSupport = () => {\n      //New row selection options should support dynamic values\n      cy.updateCodeInput(\".t--property-control-newrowoptions\", `\n        {{[{\"label\": \"abc1\", \"value\": \"abc1\"}]}}\n      `);\n      cy.get(\"[data-colindex=0][data-rowindex=0] [data-testid='selectbutton.btn.main']\").click({\n        force: true\n      });\n      cy.get(\".menu-item-text\").contains(\"abc1\").should(\"exist\");\n    };\n    const checkNoOptionState = () => {\n      // Check that no select options are present when new row options are cleared:\n      cy.updateCodeInput(\".t--property-control-newrowoptions\", ``); // Clear the field\n      cy.get(\"[data-colindex=0][data-rowindex=0] [data-testid='selectbutton.btn.main']\").click({\n        force: true\n      });\n      cy.get(\".menu-item-text\").contains(\"No Results Found\").should(\"exist\");\n      cy.get(\".t--discard-new-row\").click({\n        force: true\n      });\n    };\n    checkNewRowOptions();\n    isCurrentRowAccessDisabled();\n    checkDynamicBindingSupport();\n    checkNoOptionState();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. should check that server side filering is working","suites":["Table widget - Select column type functionality"],"updatePoint":{"line":252,"column":58,"index":9510},"line":252,"code":"  it(\"9. should check that server side filering is working\", () => {\n    _.dataSources.CreateDataSource(\"Postgres\");\n    _.dataSources.CreateQueryAfterDSSaved(\"SELECT * FROM public.astronauts {{this.params.filterText ? `WHERE name LIKE '%${this.params.filterText}%'` : ''}} LIMIT 10;\");\n    _.dataSources.ToggleUsePreparedStatement(false);\n    cy.wait(\"@saveAction\");\n    cy.get(\".t--run-query\").click();\n    cy.wait(\"@postExecute\");\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-serversidefiltering input\").click();\n    cy.updateCodeInput(\".t--property-pane-section-selectproperties\", `\n      {{Query1.data.map((d) => ({\n        label: d.name,\n        value: d.name\n      }))}}\n    `);\n    cy.get(\".t--property-control-onfilterupdate .t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-onfilterupdate\", `\n      {{Query1.run({filterText: filterText})}}\n    `);\n    cy.editTableSelectCell(0, 0);\n    cy.get(\".select-popover-wrapper .bp3-input-group input\").should(\"exist\");\n    cy.get(\".select-popover-wrapper .bp3-input-group input\").type(\"Ulf\", {\n      force: true\n    });\n    cy.get(\".menu-item-link\").should(\"have.length\", 1);\n    cy.get(\".menu-item-link\").should(\"contain\", \"Ulf Merbold\");\n    cy.get(\".select-popover-wrapper .bp3-input-group input\").clear().type(\"Anil\", {\n      force: true\n    });\n    cy.get(\".menu-item-link\").should(\"have.length\", 1);\n    cy.get(\".menu-item-link\").should(\"contain\", \"Anil Menon\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if the column type switch appears","suites":["Switch column type funtionality test"],"updatePoint":{"line":42,"column":48,"index":1300},"line":42,"code":"  it(\"1. Check if the column type switch appears\", () => {\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + switchSelector).should(\"exist\");\n    });\n    // Toggle visiblity\n    _.propPane.ToggleOnOrOff(\"Visible\", \"off\");\n    cy.PublishtheApp();\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector).should(\"not.exist\");\n    });\n    cy.get(publishPage.backToEditor).click();\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"completed\");\n    _.propPane.ToggleOnOrOff(\"Visible\");\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + switchSelector).should(\"exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/switchCell_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check the horizontal, vertical alignment of switch, and the cell background color","suites":["Switch column type funtionality test"],"updatePoint":{"line":60,"column":90,"index":2023},"line":60,"code":"  it(\"2. Check the horizontal, vertical alignment of switch, and the cell background color\", () => {\n    cy.get(\".t--propertypane\").contains(\"Style\").click({\n      force: true\n    });\n    // Check horizontal alignment\n    cy.get(\".t--property-control-horizontalalignment .ads-v2-segmented-control__segments-container\").eq(1).click();\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + \" div\").should(\"have.css\", \"justify-content\", \"center\");\n    });\n\n    // Check vertical alignment\n    cy.get(\".t--property-control-verticalalignment .ads-v2-segmented-control__segments-container\").eq(2).click();\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + \" div\").should(\"have.css\", \"align-items\", \"flex-end\");\n      // Set and check the cell background color\n      _.propPane.EnterJSContext(\"Cell Background\", \"purple\");\n      cy.wait(\"@updateLayout\");\n      cy.get(selector + \" div\").should(\"have.css\", \"background-color\", \"rgb(102, 0, 102)\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/switchCell_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify disabled(editable off), enabled states and interactions on switch","suites":["Switch column type funtionality test"],"updatePoint":{"line":80,"column":81,"index":3030},"line":80,"code":"  it(\"3. Verify disabled(editable off), enabled states and interactions on switch\", () => {\n    cy.get(\".t--propertypane\").contains(\"Content\").click({\n      force: true\n    });\n    cy.getTableV2DataSelector(\"0\", \"4\").then($elemClass => {\n      const selector = $elemClass + switchSelector;\n\n      // Verify if switch is disabled when Editable is off\n      _.propPane.ToggleOnOrOff(\"Editable\", \"off\");\n      cy.get(selector).should(\"be.disabled\");\n\n      // Verify if switch is enabled when Editable is on\n      _.propPane.ToggleOnOrOff(\"Editable\");\n      cy.get(selector).should(\"be.enabled\");\n\n      // Verify checked and unchecked\n      cy.get(selector).click({\n        force: true\n      });\n      cy.get(selector).should(\"not.be.checked\");\n      cy.get(selector).click({\n        force: true\n      });\n      cy.get(selector).should(\"be.checked\");\n\n      // Check if onCheckChange is availabe when Editable is true and hidden on false\n      cy.get(\".t--add-action-onChange\").should(\"be.visible\");\n      _.propPane.ToggleOnOrOff(\"Editable\", \"off\");\n      cy.get(\".t--add-action-onChange\").should(\"not.exist\");\n\n      // Verify on check change handler\n      _.propPane.ToggleOnOrOff(\"Editable\");\n      _.propPane.SelectPlatformFunction(\"onChange\", \"Show alert\");\n      _.agHelper.EnterActionValue(\"Message\", \"This is a test message\");\n      cy.get(selector).click({\n        force: true\n      }); // unChecked\n      cy.wait(100);\n      cy.get(\"div.Toastify__toast\").contains(\"This is a test message\").should(\"be.visible\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/switchCell_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Verify filter condition","suites":["Switch column type funtionality test"],"updatePoint":{"line":121,"column":32,"index":4516},"line":121,"code":"  it(\"4. Verify filter condition\", () => {\n    cy.get(widgetsJson.tableFilterPaneToggle).click();\n    cy.get(publishPage.attributeDropdown).click();\n    cy.get(\".t--dropdown-option\").contains(\"completed\").click();\n    cy.get(widgetsJson.tableFilterRow).find(publishPage.conditionDropdown).click();\n    cy.get(\".t--dropdown-option\").contains(\"is checked\").click();\n    cy.get(publishPage.applyFiltersBtn).click();\n\n    // filter and verify checked rows\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + switchSelector).should(\"be.checked\");\n    });\n\n    // Filter and verify unchecked rows\n    cy.get(widgetsJson.tableFilterRow).find(publishPage.conditionDropdown).click();\n    cy.get(\".t--dropdown-option\").contains(\"is unchecked\").click();\n    cy.get(publishPage.applyFiltersBtn).click();\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + switchSelector).should(\"not.be.checked\");\n    });\n    cy.getTableV2DataSelector(\"1\", \"4\").then(selector => {\n      cy.get(selector + switchSelector).should(\"not.be.checked\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/switchCell_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Verify if onChange is hidden on custom columns","suites":["Switch column type funtionality test"],"updatePoint":{"line":145,"column":55,"index":5634},"line":145,"code":"  it(\"5. Verify if onChange is hidden on custom columns\", () => {\n    cy.get(commonLocators.editPropBackButton).click();\n    cy.get(widgetsJson.addColumn).click();\n    cy.editColumn(\"customColumn1\");\n    cy.changeColumnType(\"Switch\");\n    _.propPane.UpdatePropertyFieldValue(\"Computed value\", '{{currentRow[\"completed\"]}}');\n    cy.get(\".t--property-control-onchange\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/columnTypes/switchCell_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should test that custom column has alias property","suites":["Custom column alias functionality"],"updatePoint":{"line":17,"column":58,"index":621},"line":17,"code":"  it(\"1. should test that custom column has alias property\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    propPane.UpdatePropertyFieldValue(\"Table data\", JSON.stringify(data));\n    cy.wait(\"@updateLayout\");\n    cy.wait(1000);\n    cy.addColumnV2(\"customColumn1\");\n    cy.editColumn(\"customColumn1\");\n    cy.get(\".t--property-control-propertyname\").should(\"exist\");\n    cy.get(\".t--property-control-propertyname .CodeMirror-code\").invoke(\"text\").then(value => {\n      expect(value).to.equal(\"customColumn1\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Custom_column_alias_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should test that custom alias is used in the selectedRow","suites":["Custom column alias functionality"],"updatePoint":{"line":29,"column":65,"index":1158},"line":29,"code":"  it(\"2. should test that custom alias is used in the selectedRow\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 200,\n      y: 100\n    });\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.selectedRow}}\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"customColumn1\");\n    propPane.UpdatePropertyFieldValue(\"Property Name\", \"columnAlias\");\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"\",  \"français\": \"\",  \"español\": \"\",  \"日本語\": \"\",  \"हिन्दी\": \"\",  \"columnAlias\": \"\"}`);\n    cy.isSelectRow(0);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"mandarin\",  \"français\": \"french\",  \"español\": \"spanish\",  \"日本語\": \"japnese\",  \"हिन्दी\": \"hindi\",  \"columnAlias\": \"\"}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Custom_column_alias_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should test that custom alias is used in the triggeredRow","suites":["Custom column alias functionality"],"updatePoint":{"line":43,"column":66,"index":1980},"line":43,"code":"  it(\"3. should test that custom alias is used in the triggeredRow\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.triggeredRow}}\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.backFromPropertyPanel();\n    cy.get(widgetsPage.addColumn).scrollIntoView();\n    cy.get(widgetsPage.addColumn).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.editColumn(\"customColumn2\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Button\").click();\n    cy.getAlert(\"onClick\", \"clicked!!\");\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"\",  \"français\": \"\",  \"español\": \"\",  \"日本語\": \"\",  \"हिन्दी\": \"\",  \"columnAlias\": \"\"}`);\n    cy.get(`[data-colindex=\"6\"][data-rowindex=\"0\"] button`).trigger(\"click\", {\n      force: true\n    });\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"mandarin\",  \"français\": \"french\",  \"español\": \"spanish\",  \"日本語\": \"japnese\",  \"हिन्दी\": \"hindi\",  \"columnAlias\": \"\"}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Custom_column_alias_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that edit check box is enabled for date type column in the columns list","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":10,"column":93,"index":562},"line":10,"code":"  it(\"1. should check that edit check box is enabled for date type column in the columns list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`[data-rbd-draggable-id=\"release_date\"] .t--card-checkbox input`).should(\"not.be.disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that date cell edit mode can be turned on","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":14,"column":63,"index":788},"line":14,"code":"  it(\"2. should check that date cell edit mode can be turned on\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-pane-section-general .t--property-control-editable\").should(\"exist\");\n    cy.get(\".t--property-pane-section-general .t--property-control-editable input[type=checkbox]\").click();\n    cy.get(`${commonlocators.TableV2Head} [data-header=\"release_date\"] svg`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that user can edit date in table cell","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":21,"column":59,"index":1238},"line":21,"code":"  it(\"3. should check that user can edit date in table cell\", () => {\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).dblclick();\n    cy.get(\".bp3-dateinput-popover\").should(\"exist\");\n    cy.get(\".t--inlined-cell-editor\").should(\"exist\");\n    cy.get(\".bp3-dateinput-popover [aria-label='Mon May 17 2021']\").click();\n    cy.get(\".bp3-dateinput-popover\").should(\"not.exist\");\n    cy.get(\".t--inlined-cell-editor\").should(\"not.exist\");\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).should(\"contain\", \"2021-05-17T00:00:00\");\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).dblclick({\n      force: true\n    });\n    cy.get(\".bp3-dateinput-popover\").should(\"exist\");\n    cy.get(\".t--inlined-cell-editor\").should(\"exist\");\n    cy.get(`${commonlocators.textWidget}`).first().click();\n    cy.get(\".bp3-dateinput-popover\").should(\"not.exist\");\n    cy.get(\".t--inlined-cell-editor\").should(\"not.exist\");\n    cy.get(`[type='CANVAS_WIDGET'] .t--widget-textwidget ${commonlocators.textWidget} span`).should(\"contain\", `{\"revenue\":42600000,\"imdb_id\":\"tt3228774\",\"release_date\":\"2021-05-17\"}`);\n    cy.get(`[type='CANVAS_WIDGET'] .t--widget-textwidget+.t--widget-textwidget ${commonlocators.textWidget} span`).should(\"contain\", `[{\"index\":0,\"updatedFields\":{\"release_date\":\"2021-05-17\"},\"allFields\":{\"revenue\":42600000,\"imdb_id\":\"tt3228774\",\"release_date\":\"2021-05-17\"}}]`);\n    cy.get(`[type='CANVAS_WIDGET'] .t--widget-textwidget+.t--widget-textwidget+.t--widget-textwidget ${commonlocators.textWidget} span`).should(\"contain\", \"[0]\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that changing property pane display format for date column changes date display format","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":41,"column":108,"index":2903},"line":41,"code":"  it(\"4. should check that changing property pane display format for date column changes date display format\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-control-displayformat .rc-select-show-arrow\").click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Do MMM YYYY\").click();\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).should(\"contain\", \"17th May 2021\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-control-displayformat .rc-select-show-arrow\").click();\n    cy.get(\".t--dropdown-option\").children().contains(\"DD/MM/YYYY\").click();\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).should(\"contain\", \"17/05/2021\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that changing property pane first day of week changes the date picker starting day","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":53,"column":104,"index":3716},"line":53,"code":"  it(\"5. should check that changing property pane first day of week changes the date picker starting day\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-control-firstdayofweek .t--code-editor-wrapper\").last().click().type(\"{backspace}1\");\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).dblclick({\n      force: true\n    });\n    cy.get(\".bp3-datepicker .DayPicker .DayPicker-Months .DayPicker-WeekdaysRow div:first-child abbr\").should(\"contain\", \"Mo\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-control-firstdayofweek .t--code-editor-wrapper\").last().click().type(\"{backspace}5\");\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).dblclick({\n      force: true\n    });\n    cy.get(\".bp3-datepicker .DayPicker .DayPicker-Months .DayPicker-WeekdaysRow div:first-child abbr\").should(\"contain\", \"Fr\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. should check that changing property pane time precision changes the date picker time precision","suites":["Table widget date column inline editing functionality"],"line":69,"code":"  it.skip(\"6. should check that changing property pane time precision changes the date picker time precision\", () => {","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"7. should check visible property control functionality","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":99,"column":60,"index":6364},"line":99,"code":"  it(\"7. should check visible property control functionality\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-pane-section-general .t--property-control-visible\").should(\"exist\");\n    cy.get(\".t--property-pane-section-general .t--property-control-visible input[type=checkbox]\").click();\n    cy.get(`${commonlocators.TableV2Head} [data-header=\"release_date\"] .hidden-header`).should(\"exist\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-pane-section-general .t--property-control-visible input[type=checkbox]\").click();\n    cy.get(`${commonlocators.TableV2Head} [data-header=\"release_date\"] .draggable-header`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. should check Show Shortcuts property control functionality","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":110,"column":67,"index":7123},"line":110,"code":"  it(\"8. should check Show Shortcuts property control functionality\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-pane-section-datesettings .t--property-control-showshortcuts\").should(\"exist\");\n    cy.get(\".t--property-pane-section-datesettings .t--property-control-showshortcuts input[type=checkbox]\").click();\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).dblclick({\n      force: true\n    });\n    cy.get(`.bp3-dateinput-popover .bp3-daterangepicker-shortcuts`).should(\"not.exist\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-pane-section-datesettings .t--property-control-showshortcuts\").should(\"exist\");\n    cy.get(\".t--property-pane-section-datesettings .t--property-control-showshortcuts input[type=checkbox]\").click();\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3)`).dblclick({\n      force: true\n    });\n    cy.get(`.bp3-dateinput-popover .bp3-daterangepicker-shortcuts`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. should check min date and max date property control functionality","suites":["Table widget date column inline editing functionality"],"line":130,"code":"  it.skip(\"9. should check min date and max date property control functionality\", () => {","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"10. should check property pane Required toggle functionality","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":145,"column":66,"index":9629},"line":145,"code":"  it(\"10. should check property pane Required toggle functionality\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"release_date\");\n    cy.get(\".t--property-pane-section-validation .t--property-control-required\").should(\"exist\");\n    cy.get(\".t--property-pane-section-validation .t--property-control-required input[type=checkbox]\").click();\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) .td:nth-child(3)`).realHover();\n    cy.get(`.t--editable-cell-icon`).first().click({\n      force: true\n    });\n    cy.get(\".bp3-dateinput-popover [aria-label='Wed May 26 2021']\").click();\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) .td:nth-child(3)`).realHover();\n    cy.get(`.t--editable-cell-icon`).first().click({\n      force: true\n    });\n    cy.get(\".bp3-dateinput-popover [aria-label='Wed May 26 2021']\").click();\n    cy.get(\".bp3-transition-container .bp3-popover .bp3-popover-content\").should(\"exist\");\n    cy.get(\".bp3-transition-container .bp3-popover .bp3-popover-content\").should(\"contain\", \"This field is required\");\n    cy.get(\".bp3-dateinput-popover [aria-label='Wed May 26 2021']\").click();\n    cy.get(\".bp3-transition-container .bp3-popover .bp3-popover-content\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. should check date cells behave as expected when adding a new row to table","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":165,"column":83,"index":10889},"line":165,"code":"  it(\"11. should check date cells behave as expected when adding a new row to table\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click();\n    cy.get(\".t--property-pane-section-addingarow .t--property-control-allowaddingarow input[type=checkbox]\").click();\n    cy.get(\".t--add-new-row\").click();\n    cy.get(\".bp3-datepicker\").should(\"not.exist\");\n    cy.get(\".t--inlined-cell-editor\").should(\"have.css\", \"border\").and(\"eq\", \"1px solid rgb(255, 255, 255)\");\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3) input`).should(\"have.value\", \"\");\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3) input`).click();\n    cy.get(\".bp3-datepicker\").should(\"exist\");\n    cy.get(\".t--inlined-cell-editor\").should(\"have.css\", \"border\").and(\"not.eq\", \"none\").and(\"not.eq\", \"1px solid rgb(255, 255, 255)\");\n    cy.get(\".bp3-datepicker .DayPicker .DayPicker-Body .DayPicker-Week:nth-child(2) .DayPicker-Day:first-child\").click();\n    cy.get(`${commonlocators.TableV2Row} .tr:nth-child(1) div:nth-child(3) input`).should(\"not.have.value\", \"\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. should allow ISO 8601 format date and not throw a disallowed validation error","suites":["Table widget date column inline editing functionality"],"updatePoint":{"line":179,"column":87,"index":12037},"line":179,"code":"  it(\"11. should allow ISO 8601 format date and not throw a disallowed validation error\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-control-tabledata\").then($el => {\n      cy.updateCodeInput($el, '[{ \"dateValue\": \"2023-02-02T13:39:38.367857Z\" }]');\n    });\n    cy.wait(500);\n    cy.editColumn(\"dateValue\");\n    //change format of column to date\n    cy.changeColumnType(\"Date\");\n    cy.get(\".t--property-control-dateformat\").click();\n    cy.contains(\"ISO 8601\").click();\n    // we should not see an error after selecting the ISO 8061 format\n    cy.get(\".t--property-control-dateformat .t--codemirror-has-error\").should(\"not.exist\");\n    cy.get(\".t--property-control-dateformat\").find(\".t--js-toggle\").click();\n    //check the selected format value\n    cy.get(\".t--property-control-dateformat\").contains(\"YYYY-MM-DDTHH:mm:ss.SSSZ\");\n    cy.get(\".t--property-control-dateformat\").then($el => {\n      //give a corrupted date format\n      cy.updateCodeInput($el, \"YYYY-MM-DDTHH:mm:ss.SSSsZ\");\n    });\n    //we should now see an error when an incorrect date format\n    cy.get(\".t--property-control-dateformat .t--codemirror-has-error\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Date_column_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check if the selectedRowIndices does not contain 2d array","suites":["Table widget v2 edge case scenario testing"],"updatePoint":{"line":14,"column":66,"index":639},"line":14,"code":"  it(\"1. Check if the selectedRowIndices does not contain 2d array\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    //Enable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n\n    //Change the value of default selected row\n    cy.updateCodeInput(\".t--property-control-defaultselectedrows\", \"[1]\");\n\n    //Disable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\");\n\n    //Enable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\");\n\n    //Disable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n\n    //Enable Multi row select\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Edge_case_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check if the selectedRowIndices does not contain -1","suites":["Table widget v2 edge case scenario testing"],"updatePoint":{"line":48,"column":60,"index":1770},"line":48,"code":"  it(\"2. Check if the selectedRowIndices does not contain -1\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    //Update the property default selected row to blank\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", \"\");\n\n    // ensure evaluatedvaluepopup does not show up for empty strings\n    cy.get(commonlocators.evaluatedCurrentValue).should(\"not.exist\");\n\n    //Check the value present in the textfield which is selectedRowIndices is blank\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\");\n\n    //Enable the \"Enable Multi Row selection\"\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n\n    //Check the value present in the textfield which is selectedRowIndices is []\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\");\n\n    //Select the 1st, 2nd and 3rd row\n    cy.isSelectRow(\"0\");\n    cy.isSelectRow(\"1\");\n    cy.isSelectRow(\"2\");\n\n    //Check the value present in the textfield which is selectedRowIndices is [0,1,2]\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  0,  1,  2]\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Edge_case_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.1 Check if common frozen columns retain position","suites":["1. Check frozen common and/or custom columns retain position on query change"],"updatePoint":{"line":16,"column":56,"index":736},"line":16,"code":"  it(\"1.1 Check if common frozen columns retain position\", () => {\n    // Freeze the common column: id\n    cy.freezeColumnFromDropdown(\"id\", \"right\");\n\n    //Change the table data:\n    cy.openPropertyPane(WIDGET.TABLE);\n    cy.updateCodeInput(PROPERTY_SELECTOR.tableData, TABLE_DATA_DYNAMIC);\n\n    //Check the id column is still frozen to the right:\n    cy.wait(500);\n    cy.checkColumnPosition(\"id\", 4);\n    cy.freezeColumnFromDropdown(\"id\", \"right\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_query_change_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.2 Check if custom frozen columns retain position","suites":["1. Check frozen common and/or custom columns retain position on query change"],"updatePoint":{"line":29,"column":56,"index":1195},"line":29,"code":"  it(\"1.2 Check if custom frozen columns retain position\", () => {\n    // Add a custom column\n    cy.get(widgetsPage.addColumn).scrollIntoView();\n    cy.get(widgetsPage.addColumn).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(300);\n    cy.freezeColumnFromDropdown(\"customColumn1\", \"right\");\n\n    // Change the table data:\n    cy.openPropertyPane(WIDGET.TABLE);\n    cy.updateCodeInput(PROPERTY_SELECTOR.tableData, TABLE_DATA_STATIC);\n\n    //Check the id column is still frozen to the right:\n    cy.checkColumnPosition(\"customColumn1\", 5);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_query_change_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.3 Check if the custom + common columns retain their positon","suites":["1. Check frozen common and/or custom columns retain position on query change"],"updatePoint":{"line":45,"column":67,"index":1771},"line":45,"code":"  it(\"1.3 Check if the custom + common columns retain their positon\", () => {\n    cy.wait(500);\n    // Freeze the common column:\n    cy.freezeColumnFromDropdown(\"id\", \"right\");\n\n    // Expect id should come before customColumn1 and both should be frozen:\n    cy.checkColumnPosition(\"id\", 3);\n    cy.checkColumnPosition(\"customColumn1\", 4);\n\n    // Change table data:\n    cy.updateCodeInput(PROPERTY_SELECTOR.tableData, TABLE_DATA_DYNAMIC);\n\n    // Re-check the frozen column order:\n    cy.checkColumnPosition(\"id\", 3);\n    cy.checkColumnPosition(\"customColumn1\", 4);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_query_change_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.4 Check if frozen column retains its position and unfrozen goes at the first position","suites":["1. Check frozen common and/or custom columns retain position on query change"],"updatePoint":{"line":61,"column":93,"index":2370},"line":61,"code":"  it(\"1.4 Check if frozen column retains its position and unfrozen goes at the first position\", () => {\n    // Freeze the common column:\n    cy.freezeColumnFromDropdown(\"id\", \"right\");\n\n    // Change table data:\n    cy.updateCodeInput(PROPERTY_SELECTOR.tableData, TABLE_DATA_STATIC);\n    cy.wait(500);\n\n    // Re-check the frozen column order:\n    cy.checkColumnPosition(\"id\", 0);\n    cy.checkColumnPosition(\"customColumn1\", 4);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_query_change_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.5 Check if the order of the forzen columns remains the same","suites":["1. Check frozen common and/or custom columns retain position on query change"],"updatePoint":{"line":73,"column":67,"index":2779},"line":73,"code":"  it(\"1.5 Check if the order of the forzen columns remains the same\", () => {\n    cy.freezeColumnFromDropdown(\"id\", \"right\");\n    cy.updateCodeInput(PROPERTY_SELECTOR.tableData, TABLE_DATA_DYNAMIC);\n    cy.wait(500);\n    cy.checkColumnPosition(\"id\", 4);\n    cy.checkColumnPosition(\"customColumn1\", 5);\n\n    // Check the order for left frozen columns:\n    cy.freezeColumnFromDropdown(\"id\", \"left\");\n    cy.freezeColumnFromDropdown(\"customColumn1\", \"left\");\n    cy.updateCodeInput(PROPERTY_SELECTOR.tableData, TABLE_DATA_STATIC);\n    cy.wait(500);\n    cy.checkColumnPosition(\"id\", 0);\n    cy.checkColumnPosition(\"customColumn1\", 1);\n\n    // Check if the common unfrozen column comes after the left frozen column\n    cy.freezeColumnFromDropdown(\"customColumn1\", \"left\");\n    cy.dragAndDropColumn(\"customColumn1\", \"action\");\n    cy.updateCodeInput(PROPERTY_SELECTOR.tableData, TABLE_DATA_DYNAMIC);\n    cy.wait(500);\n    cy.checkColumnPosition(\"id\", 0);\n    cy.checkColumnPosition(\"customColumn1\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_query_change_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.1.1 Freeze column to left","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.1 Column freeze and unfreeze testing via propertypane"],"updatePoint":{"line":35,"column":35,"index":1359},"line":35,"code":"    it(\"1.1.1 Freeze column to left\", () => {\n      cy.openPropertyPane(WIDGET.TABLE);\n      cy.openFieldConfiguration(\"step\");\n      cy.get(\".t--property-control-columnfreeze span[data-value='left']\").click({\n        force: true\n      });\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"0\");\n      cy.get(getWidgetSelector(WIDGET.TEXT)).should(\"contain.text\", '\"step\": \"left\"');\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.1.2 Freeze column to right","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.1 Column freeze and unfreeze testing via propertypane"],"updatePoint":{"line":44,"column":36,"index":1743},"line":44,"code":"    it(\"1.1.2 Freeze column to right\", () => {\n      cy.get(commonlocators.editPropBackButton).click();\n      cy.wait(1000);\n      cy.openFieldConfiguration(\"action\");\n      cy.get(\".t--property-control-columnfreeze span[data-value='right']\").click({\n        force: true\n      });\n      // Check if the first cell has position sticky:\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"3\");\n      cy.get(getWidgetSelector(WIDGET.TEXT)).should(\"contain.text\", '\"action\": \"right\"');\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.1.3 unFrezee an existing frozen column","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.1 Column freeze and unfreeze testing via propertypane"],"updatePoint":{"line":55,"column":48,"index":2236},"line":55,"code":"    it(\"1.1.3 unFrezee an existing frozen column\", () => {\n      cy.get(commonlocators.editPropBackButton).click();\n      cy.wait(1000);\n      cy.get(\".tablewidgetv2-primarycolumn-list > div\").last().then($elem => {\n        cy.wrap($elem).find(\".t--edit-column-btn\").last().click({\n          force: true\n        });\n      });\n      cy.get(\".t--property-control-columnfreeze span[data-value='']\").click({\n        force: true\n      });\n      // Check if the first cell has position sticky:\n      cy.getTableV2DataSelector(\"0\", \"3\").then(selector => {\n        cy.get(selector).should(\"not.have.css\", \"position\", \"sticky\");\n      });\n      cy.get(getWidgetSelector(WIDGET.TEXT)).should(\"not.contain.text\", '\"action\": \"right\"');\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.1.4 Check column is frozen in page mode","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.1 Column freeze and unfreeze testing via propertypane"],"updatePoint":{"line":72,"column":49,"index":2969},"line":72,"code":"    it(\"1.1.4 Check column is frozen in page mode\", () => {\n      cy.PublishtheApp();\n      // Check if the first cell has position sticky:\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"0\");\n      cy.get(getWidgetSelector(WIDGET.TEXT)).should(\"contain.text\", '\"step\": \"left\"');\n      cy.goToEditFromPublish();\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.2.1 Check if column freeze for user mode is enabled","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.2 Column freeze and unfreeze testing via dropdown"],"updatePoint":{"line":81,"column":61,"index":3376},"line":81,"code":"    it(\"1.2.1 Check if column freeze for user mode is enabled\", () => {\n      cy.openPropertyPane(WIDGET.TABLE);\n      cy.get(\".t--property-control-allowcolumnfreeze input[type='checkbox']\").should(\"be.checked\");\n      cy.get(`[role=\"columnheader\"] .header-menu .bp3-popover2-target`).first().click({\n        force: true\n      });\n      cy.get(\".bp3-menu\").contains(\"Freeze column left\").then($elem => {\n        cy.get($elem).parent().should(\"not.have.class\", \"bp3-disabled\");\n      });\n\n      // Check in publish mode.\n      cy.PublishtheApp();\n      cy.get(`[role=\"columnheader\"] .header-menu .bp3-popover2-target`).first().click({\n        force: true\n      });\n      cy.get(\".bp3-menu\").contains(\"Freeze column left\").then($elem => {\n        cy.get($elem).parent().should(\"not.have.class\", \"bp3-disabled\");\n      });\n      cy.goToEditFromPublish();\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.2.2 Check if column is freezing in the edit mode","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.2 Column freeze and unfreeze testing via dropdown"],"updatePoint":{"line":101,"column":58,"index":4233},"line":101,"code":"    it(\"1.2.2 Check if column is freezing in the edit mode\", () => {\n      cy.freezeColumnFromDropdown(\"step\", \"left\");\n      cy.checkColumnPosition(\"step\", 0);\n      cy.freezeColumnFromDropdown(\"step\", \"left\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"0\", \"sticky\");\n      cy.freezeColumnFromDropdown(\"action\", \"left\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"1\", \"sticky\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.2.3 Check if column can be unfrozen from dropdown","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.2 Column freeze and unfreeze testing via dropdown"],"updatePoint":{"line":109,"column":59,"index":4623},"line":109,"code":"    it(\"1.2.3 Check if column can be unfrozen from dropdown\", () => {\n      cy.freezeColumnFromDropdown(\"step\", \"left\");\n      /**\n       * When column is unfrozen,\n       * check the column position, it goes after the last frozen coumn from left or\n       * before the first right frozen column:\n       * */\n\n      cy.checkColumnPosition(\"step\", 1);\n\n      /**\n       * Last column unfrozen should remain in the same position after unfreezing\n       */\n      cy.freezeColumnFromDropdown(\"action\", \"left\");\n      cy.checkColumnPosition(\"action\", 0);\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.2.4 Check if existing left frozen coumn can be right frozen","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.2 Column freeze and unfreeze testing via dropdown"],"updatePoint":{"line":125,"column":69,"index":5191},"line":125,"code":"    it(\"1.2.4 Check if existing left frozen coumn can be right frozen\", () => {\n      cy.freezeColumnFromDropdown(\"action\", \"left\");\n      cy.checkColumnPosition(\"action\", 0);\n\n      // freeze above column to right;\n      cy.freezeColumnFromDropdown(\"action\", \"right\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"3\");\n      cy.checkColumnPosition(\"action\", 3);\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.2.5 Check if existing right frozen column can be frozen to left","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.2 Column freeze and unfreeze testing via dropdown"],"updatePoint":{"line":134,"column":73,"index":5564},"line":134,"code":"    it(\"1.2.5 Check if existing right frozen column can be frozen to left\", () => {\n      cy.freezeColumnFromDropdown(\"action\", \"left\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"0\");\n      cy.checkColumnPosition(\"action\", 0);\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.2.6 Check if column freeze for user mode is disabled","suites":["1. Check column freeze and unfreeze mechanism in canavs mode","1.2 Column freeze and unfreeze testing via dropdown"],"updatePoint":{"line":139,"column":62,"index":5789},"line":139,"code":"    it(\"1.2.6 Check if column freeze for user mode is disabled\", () => {\n      cy.openPropertyPane(WIDGET.TABLE);\n      cy.get(\".t--property-control-allowcolumnfreeze input[type='checkbox']\").click({\n        force: true\n      });\n      cy.get(\".t--property-control-allowcolumnfreeze input[type='checkbox']\").should(\"not.be.checked\");\n      cy.get(`[role=\"columnheader\"] .header-menu .bp3-popover2-target`).first().click({\n        force: true\n      });\n      cy.get(\".bp3-menu\").contains(\"Freeze column left\").should(\"have.class\", \"bp3-disabled\");\n\n      // Check in publish mode.\n      cy.PublishtheApp();\n      cy.wait(3000);\n      cy.get(`[role=\"columnheader\"] .header-menu .bp3-popover2-target`).first().click({\n        force: true\n      });\n      cy.get(\".bp3-menu\").contains(\"Freeze column left\").should(\"have.class\", \"bp3-disabled\");\n      cy.goToEditFromPublish();\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.1.1 Freeze Columns left","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.1 Column freeze and unfreeze testing with 0 pre-frozen columns"],"updatePoint":{"line":178,"column":33,"index":7154},"line":178,"code":"    it(\"2.1.1 Freeze Columns left\", () => {\n      cy.freezeColumnFromDropdown(\"step\", \"left\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"0\");\n      cy.checkColumnPosition(\"step\", 0);\n      cy.checkLocalColumnOrder([\"step\"], \"left\");\n      cy.freezeColumnFromDropdown(\"action\", \"left\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"1\");\n      cy.checkColumnPosition(\"action\", 1);\n      cy.checkLocalColumnOrder([\"step\", \"action\"], \"left\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.1.2 Freeze Columns right","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.1 Column freeze and unfreeze testing with 0 pre-frozen columns"],"updatePoint":{"line":188,"column":34,"index":7601},"line":188,"code":"    it(\"2.1.2 Freeze Columns right\", () => {\n      cy.freezeColumnFromDropdown(\"status\", \"right\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"3\");\n      cy.checkColumnPosition(\"status\", 3);\n      cy.checkLocalColumnOrder([\"status\"], \"right\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.1.3 Freeze existing left column to right","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.1 Column freeze and unfreeze testing with 0 pre-frozen columns"],"updatePoint":{"line":194,"column":50,"index":7868},"line":194,"code":"    it(\"2.1.3 Freeze existing left column to right\", () => {\n      cy.freezeColumnFromDropdown(\"step\", \"right\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"2\");\n      cy.checkColumnPosition(\"step\", 2);\n      cy.checkLocalColumnOrder([\"step\", \"status\"], \"right\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.1.3 Freeze existing right column to left","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.1 Column freeze and unfreeze testing with 0 pre-frozen columns"],"updatePoint":{"line":200,"column":50,"index":8139},"line":200,"code":"    it(\"2.1.3 Freeze existing right column to left\", () => {\n      cy.freezeColumnFromDropdown(\"status\", \"left\");\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"1\");\n      cy.checkColumnPosition(\"status\", 1);\n      cy.checkLocalColumnOrder([\"action\", \"status\"], \"left\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.1.4 Unfreeze existing column","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.1 Column freeze and unfreeze testing with 0 pre-frozen columns"],"updatePoint":{"line":206,"column":38,"index":8402},"line":206,"code":"    it(\"2.1.4 Unfreeze existing column\", () => {\n      cy.freezeColumnFromDropdown(\"status\", \"left\");\n      cy.checkColumnPosition(\"status\", 1);\n      cy.checkLocalColumnOrder([\"action\"], \"left\");\n      cy.freezeColumnFromDropdown(\"action\", \"left\");\n      cy.checkColumnPosition(\"action\", 0);\n      cy.checkLocalColumnOrder([], \"left\");\n      cy.freezeColumnFromDropdown(\"step\", \"right\");\n      cy.checkColumnPosition(\"step\", 3);\n      cy.checkLocalColumnOrder([], \"right\");\n      cy.goToEditFromPublish();\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.2.1 Freeze column left","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.2 Column freeze and unfreeze testing with multiple pre-frozen columns"],"updatePoint":{"line":226,"column":32,"index":9159},"line":226,"code":"    it(\"2.2.1 Freeze column left\", () => {\n      // Freeze additional column in editor mode\n      cy.freezeColumnFromDropdown(\"action\", \"left\");\n      cy.checkColumnPosition(\"action\", 0);\n      cy.freezeColumnFromDropdown(\"step\", \"right\");\n      cy.checkColumnPosition(\"step\", 3);\n      cy.PublishtheApp();\n\n      // User frozen columns\n      cy.freezeColumnFromDropdown(\"status\", \"left\");\n      cy.checkColumnPosition(\"status\", 1);\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"1\");\n      cy.checkLocalColumnOrder([\"action\", \"status\"], \"left\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.2.2 Freeze developer left frozen column to right","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.2 Column freeze and unfreeze testing with multiple pre-frozen columns"],"updatePoint":{"line":240,"column":58,"index":9736},"line":240,"code":"    it(\"2.2.2 Freeze developer left frozen column to right\", () => {\n      cy.freezeColumnFromDropdown(\"action\", \"right\");\n      cy.checkColumnPosition(\"action\", 2);\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"2\");\n      cy.checkLocalColumnOrder([\"status\"], \"left\");\n      cy.checkLocalColumnOrder([\"action\", \"step\"], \"right\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.2.3 Freeze developer right frozen column to left","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.2 Column freeze and unfreeze testing with multiple pre-frozen columns"],"updatePoint":{"line":247,"column":58,"index":10071},"line":247,"code":"    it(\"2.2.3 Freeze developer right frozen column to left\", () => {\n      cy.freezeColumnFromDropdown(\"step\", \"left\");\n      cy.checkColumnPosition(\"step\", 1);\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"1\");\n      cy.checkLocalColumnOrder([\"status\", \"step\"], \"left\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.2.4 Unfreeze columns by developers","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.2 Column freeze and unfreeze testing with multiple pre-frozen columns"],"updatePoint":{"line":253,"column":44,"index":10334},"line":253,"code":"    it(\"2.2.4 Unfreeze columns by developers\", () => {\n      _.agHelper.ClearLocalStorageCache();\n      cy.reload();\n      cy.wait(1000);\n      cy.freezeColumnFromDropdown(\"action\", \"left\");\n      cy.checkColumnPosition(\"action\", 0);\n      cy.checkLocalColumnOrder([], \"left\");\n      cy.freezeColumnFromDropdown(\"step\", \"right\");\n      cy.checkColumnPosition(\"step\", 3);\n      cy.checkLocalColumnOrder([], \"right\");\n      cy.goToEditFromPublish();\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.3.1 Hide left frozen column and check it's position is before right frozen columns","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.3 Hiding frozen columns"],"updatePoint":{"line":267,"column":92,"index":10892},"line":267,"code":"    it(\"2.3.1 Hide left frozen column and check it's position is before right frozen columns\", () => {\n      cy.openPropertyPane(WIDGET.TABLE);\n      cy.hideColumn(\"action\");\n      cy.getTableV2DataSelector(\"0\", \"2\").then(selector => {\n        cy.get(selector).should(\"have.class\", \"hidden-cell\");\n      });\n      // Now check if the column next to this hidden column is right frozen\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"3\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.3.2 Check if the hidden frozen column comes back to it's original frozen position","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.3 Hiding frozen columns"],"updatePoint":{"line":276,"column":91,"index":11331},"line":276,"code":"    it(\"2.3.2 Check if the hidden frozen column comes back to it's original frozen position\", () => {\n      cy.showColumn(\"action\");\n      cy.checkColumnPosition(\"action\", 0);\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"0\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.3.3 Hide and unhide right frozen column","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.3 Hiding frozen columns"],"updatePoint":{"line":281,"column":49,"index":11521},"line":281,"code":"    it(\"2.3.3 Hide and unhide right frozen column\", () => {\n      cy.hideColumn(\"step\");\n      cy.getTableV2DataSelector(\"0\", \"3\").then(selector => {\n        cy.get(selector).should(\"have.class\", \"hidden-cell\");\n      });\n      cy.showColumn(\"step\");\n      cy.checkColumnPosition(\"step\", 3);\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"3\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.3.4 Hide and unhide frozen columns with existing frozen columns","suites":["2. Check column freeze and unfreeze mechanism in page mode","2.3 Hiding frozen columns"],"updatePoint":{"line":290,"column":73,"index":11893},"line":290,"code":"    it(\"2.3.4 Hide and unhide frozen columns with existing frozen columns\", () => {\n      /**\n       * At this point: action is left frozen and step is right frozen\n       * Adding one more left frozen column\n       */\n      cy.freezeColumnFromDropdown(\"task\", \"left\");\n\n      // Hide and unhide one left frozen column and then right frozen column\n      cy.hideColumn(\"task\");\n      cy.getTableV2DataSelector(\"0\", \"2\").then(selector => {\n        cy.get(selector).should(\"have.class\", \"hidden-cell\");\n      });\n      cy.hideColumn(\"step\");\n      cy.getTableV2DataSelector(\"0\", \"3\").then(selector => {\n        cy.get(selector).should(\"have.class\", \"hidden-cell\");\n      });\n      cy.showColumn(\"task\");\n      cy.checkColumnPosition(\"task\", 1);\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"1\");\n      cy.showColumn(\"step\");\n      cy.checkColumnPosition(\"step\", 3);\n      cy.checkIfColumnIsFrozenViaCSS(\"0\", \"3\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.1 Re-order column","suites":["3. Server-side pagination when turned on test of re-ordering columns"],"updatePoint":{"line":332,"column":25,"index":13305},"line":332,"code":"  it(\"3.1 Re-order column\", () => {\n    cy.dragAndDropColumn(\"productName\", \"id\");\n\n    // Check if product name is at first position\n    cy.get(\"[data-header]\").first().should(\"contain.text\", \"productName\");\n\n    // Check if ProductName column is at the top in property pane tableData\n    cy.get(PROPERTY_SELECTOR.tableColumnNames).first().should(\"have.value\", \"productName\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.2 Freeze column and re-order unfrozen columns","suites":["3. Server-side pagination when turned on test of re-ordering columns"],"updatePoint":{"line":341,"column":53,"index":13717},"line":341,"code":"  it(\"3.2 Freeze column and re-order unfrozen columns\", () => {\n    /**\n     * Scenario\n     * 1. Check if frozen column cannot be dragged\n     * 2. Freeze column and then re-order columns\n     */\n\n    // =========================== Scenario 1 ===========================\n    cy.freezeColumnFromDropdown(\"productName\", \"left\");\n    cy.get('[data-header=\"productName\"]').should(\"not.have.attr\", \"draggable\");\n\n    // =========================== Scenario 2 ===========================\n    cy.dragAndDropColumn(\"id\", \"email\");\n    cy.get(\"[data-header]\").eq(1).should(\"contain.text\", \"email\");\n    cy.get(PROPERTY_SELECTOR.tableColumnNames).eq(1).should(\"have.value\", \"email\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.3 Post resizing column, columns can be reordered","suites":["3. Server-side pagination when turned on test of re-ordering columns"],"updatePoint":{"line":357,"column":56,"index":14401},"line":357,"code":"  it(\"3.3 Post resizing column, columns can be reordered\", () => {\n    // Resize orderAmount column:\n    cy.resizeColumn(\"orderAmount\", 100);\n    cy.dragAndDropColumn(\"id\", \"orderAmount\");\n    cy.get(\"[data-header]\").last().should(\"contain.text\", \"id\");\n    cy.get(PROPERTY_SELECTOR.tableColumnNames).last().should(\"have.value\", \"id\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.4 Post hiding column, columns can be reordered","suites":["3. Server-side pagination when turned on test of re-ordering columns"],"updatePoint":{"line":364,"column":54,"index":14741},"line":364,"code":"  it(\"3.4 Post hiding column, columns can be reordered\", () => {\n    // Freeze column:\n    cy.freezeColumnFromDropdown(\"email\", \"right\");\n    cy.hideColumn(\"userName\");\n    cy.dragAndDropColumn(\"orderAmount\", \"id\");\n\n    // Check if orderAmount is at 3rd position\n    cy.get(\"[data-header]\").eq(2).should(\"contain.text\", \"orderAmount\");\n\n    // Check if id column is at the top in property pane tableData\n    cy.get(PROPERTY_SELECTOR.tableColumnNames).eq(2).should(\"have.value\", \"orderAmount\");\n\n    // Check if hidden column is above right frozen column:\n    cy.get(PROPERTY_SELECTOR.tableColumnNames).eq(3).should(\"have.value\", \"userName\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.5 Post unfreezing column, columns can be reordered","suites":["3. Server-side pagination when turned on test of re-ordering columns"],"updatePoint":{"line":379,"column":58,"index":15394},"line":379,"code":"  it(\"3.5 Post unfreezing column, columns can be reordered\", () => {\n    cy.freezeColumnFromDropdown(\"productName\", \"left\");\n    cy.dragAndDropColumn(\"productName\", \"id\");\n    cy.get(\"[data-header]\").eq(1).should(\"contain.text\", \"productName\");\n    cy.get(PROPERTY_SELECTOR.tableColumnNames).eq(1).should(\"have.value\", \"productName\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/freeze_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify image size on selecting different Image Sizes","suites":["Table Widget Image Resize feature validation"],"updatePoint":{"line":6,"column":61,"index":250},"line":6,"code":"  it(\"1. Verify image size on selecting different Image Sizes\", function () {\n    cy.getTableV2DataSelector(\"1\", \"3\").then(selector => {\n      cy.get(`${selector} img`).should(\"have.css\", \"height\", \"32px\");\n    });\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"image\");\n    cy.moveToStyleTab();\n    cy.get(\"[data-value='MEDIUM']\").click();\n    cy.getTableV2DataSelector(\"1\", \"3\").then(selector => {\n      cy.get(`${selector} img`).should(\"have.css\", \"height\", \"64px\");\n    });\n    cy.get(\"[data-value='LARGE']\").click();\n    cy.getTableV2DataSelector(\"1\", \"3\").then(selector => {\n      cy.get(`${selector} img`).should(\"have.css\", \"height\", \"128px\");\n    });\n    cy.get(\"[data-value='DEFAULT']\").click();\n    cy.getTableV2DataSelector(\"1\", \"3\").then(selector => {\n      cy.get(`${selector} img`).should(\"have.css\", \"height\", \"32px\");\n    });\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Image_resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Verify image size with cell wrapping turned on","suites":["Table Widget Image Resize feature validation"],"updatePoint":{"line":27,"column":55,"index":1135},"line":27,"code":"  it(\"2. Verify image size with cell wrapping turned on\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"title\");\n    cy.moveToContentTab();\n    cy.get(\".t--property-control-cellwrapping input\").click();\n    cy.closePropertyPane();\n    cy.getTableV2DataSelector(\"1\", \"3\").then(selector => {\n      cy.get(`${selector} img`).should(\"have.css\", \"height\", \"32px\");\n    });\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"image\");\n    cy.moveToStyleTab();\n    cy.get(\"[data-value='MEDIUM']\").click();\n    cy.getTableV2DataSelector(\"1\", \"3\").then(selector => {\n      cy.get(`${selector} img`).should(\"have.css\", \"height\", \"64px\");\n    });\n    cy.get(\"[data-value='LARGE']\").click();\n    cy.getTableV2DataSelector(\"1\", \"3\").then(selector => {\n      cy.get(`${selector} img`).should(\"have.css\", \"height\", \"128px\");\n    });\n    cy.get(\"[data-value='DEFAULT']\").click();\n    cy.getTableV2DataSelector(\"1\", \"3\").then(selector => {\n      cy.get(`${selector} img`).should(\"have.css\", \"height\", \"32px\");\n    });\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Image_resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that edit check box is present in the columns list","suites":["Table widget inline editing functionality"],"updatePoint":{"line":16,"column":72,"index":778},"line":16,"code":"  it(\"1. should check that edit check box is present in the columns list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    [\"step\", \"task\", \"status\", \"action\"].forEach(column => {\n      cy.get(`[data-rbd-draggable-id=\"${column}\"] .t--card-checkbox input[type=\"checkbox\"]`).should(\"exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that editablity checkbox is preset top of the list","suites":["Table widget inline editing functionality"],"updatePoint":{"line":22,"column":72,"index":1088},"line":22,"code":"  it(\"2. should check that editablity checkbox is preset top of the list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox`).should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that turning on editablity turns on edit in all the editable column in the list","suites":["Table widget inline editing functionality"],"updatePoint":{"line":26,"column":101,"index":1335},"line":26,"code":"  it(\"3. should check that turning on editablity turns on edit in all the editable column in the list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    function checkEditableCheckbox(expected) {\n      [\"step\", \"task\", \"status\"].forEach(column => {\n        cy.get(`[data-rbd-draggable-id=\"${column}\"] .t--card-checkbox.t--checked`).should(expected);\n      });\n    }\n    checkEditableCheckbox(\"not.exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    checkEditableCheckbox(\"exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    checkEditableCheckbox(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that turning on editablity DOESN'T turn on edit in the non editable column in the list","suites":["Table widget inline editing functionality"],"updatePoint":{"line":39,"column":108,"index":2015},"line":39,"code":"  it(\"4. should check that turning on editablity DOESN'T turn on edit in the non editable column in the list\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get('[data-rbd-draggable-id=\"action\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    cy.get('[data-rbd-draggable-id=\"action\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    cy.get('[data-rbd-draggable-id=\"action\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that checkbox in the column list and checkbox inside the column settings ARE in sync","suites":["Table widget inline editing functionality"],"updatePoint":{"line":47,"column":106,"index":2651},"line":47,"code":"  it(\"5. should check that checkbox in the column list and checkbox inside the column settings ARE in sync\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .ads-v2-switch.checked\").should(\"not.exist\");\n    cy.get(propPaneBack).click();\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox input+span').click();\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox.t--checked').should(\"exist\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable\").find(\"input\").should(\"have.attr\", \"checked\");\n    cy.get(propPaneBack).click();\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox input+span').click();\n    cy.get('[data-rbd-draggable-id=\"step\"] .t--card-checkbox.t--checked').should(\"not.exist\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .ads-v2-switch.checked\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. should check that checkbox in the column list and checkbox inside the column settings ARE NOT in sync when there is js expression","suites":["Table widget inline editing functionality"],"updatePoint":{"line":63,"column":138,"index":3710},"line":63,"code":"  it(\"6. should check that checkbox in the column list and checkbox inside the column settings ARE NOT in sync when there is js expression\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-editable\", `{{true === true}}`);\n    cy.get(propPaneBack).click();\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .CodeMirror .CodeMirror-code\").should(\"contain\", \"{{true === true}}\");\n    cy.get(propPaneBack).click();\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .CodeMirror .CodeMirror-code\").should(\"contain\", \"{{true === true}}\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. should check that editable checkbox is disabled for columns that are not editable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":77,"column":90,"index":4449},"line":77,"code":"  it(\"7. should check that editable checkbox is disabled for columns that are not editable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    [{\n      columnType: \"URL\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Number\",\n      expected: \"not.be.disabled\"\n    }, {\n      columnType: \"Date\",\n      expected: \"not.be.disabled\"\n    }, {\n      columnType: \"Image\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Video\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Button\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Menu button\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Icon button\",\n      expected: \"be.disabled\"\n    }, {\n      columnType: \"Plain text\",\n      expected: \"not.be.disabled\"\n    }].forEach(data => {\n      cy.editColumn(\"step\");\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.get(propPaneBack).click();\n      cy.get(`[data-rbd-draggable-id=\"step\"] .t--card-checkbox input`).should(data.expected);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. should check that editable property is only available for Plain text & number columns","suites":["Table widget inline editing functionality"],"updatePoint":{"line":115,"column":94,"index":5587},"line":115,"code":"  it(\"8. should check that editable property is only available for Plain text & number columns\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    [{\n      columnType: \"URL\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Number\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Date\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Menu button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Icon button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Plain text\",\n      expected: \"exist\"\n    }].forEach(data => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--property-control-editable\").should(data.expected);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. should check that inline save option is shown only when a column is made editable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":152,"column":90,"index":6616},"line":152,"code":"  it(\"9. should check that inline save option is shown only when a column is made editable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-control-updatemode\").should(\"not.exist\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\".t--property-control-updatemode\").should(\"exist\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\".t--property-control-updatemode\").should(\"exist\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 600\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Table1.inlineEditingSaveOption}}`);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", \"ROW_LEVEL\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. should check that save/discard column is added when a column is made editable and removed when made uneditable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":167,"column":120,"index":7347},"line":167,"code":"  it(\"10. should check that save/discard column is added when a column is made editable and removed when made uneditable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1'] input[type='text']\").should(\"contain.value\", \"Save / Discard\");\n    cy.get(\"[data-colindex='4'][data-rowindex='0'] button\").should(\"be.disabled\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1'] input[type='text']\").should(\"contain.value\", \"Save / Discard\");\n    cy.get(\"[data-colindex='4'][data-rowindex='0'] button\").should(\"be.disabled\");\n    cy.get(`.t--property-control-columns .t--uber-editable-checkbox input+span`).click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .ads-v2-switch\").click();\n    cy.get(propPaneBack).click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1'] input[type='text']\").should(\"contain.value\", \"Save / Discard\");\n    cy.get(\"[data-colindex='4'][data-rowindex='0'] button\").should(\"be.disabled\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-editable .ads-v2-switch\").click();\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. should check that save/discard column is added/removed when inline save option is changed","suites":["Table widget inline editing functionality"],"updatePoint":{"line":191,"column":99,"index":9005},"line":191,"code":"  it(\"11. should check that save/discard column is added/removed when inline save option is changed\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\".t--property-control-updatemode .t--property-control-label\").last().click();\n    cy.get(\".ads-v2-segmented-control-value-CUSTOM\").click({\n      force: true\n    });\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.makeColumnEditable(\"task\");\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.get(\".t--property-control-updatemode .t--property-control-label\").last().click();\n    cy.get(\".ads-v2-segmented-control-value-ROW_LEVEL\").click({\n      force: true\n    });\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"exist\");\n    cy.get(\".t--property-control-updatemode .t--property-control-label\").last().click();\n    cy.get(\".ads-v2-segmented-control-value-CUSTOM\").click({\n      force: true\n    });\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n    cy.makeColumnEditable(\"step\");\n    cy.makeColumnEditable(\"task\");\n    cy.get(\".t--property-control-updatemode .t--property-control-label\").last().click();\n    cy.get(\".ads-v2-segmented-control-value-ROW_LEVEL\").click({\n      force: true\n    });\n    cy.get(\"[data-rbd-draggable-id='EditActions1']\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. should check that cell of an editable column is editable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":220,"column":66,"index":10416},"line":220,"code":"  it(\"12. should check that cell of an editable column is editable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    // click the edit icon\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input\").should(\"not.be.disabled\");\n\n    //double click the cell\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input`).should(\"not.exist\");\n    cy.get(`[data-colindex=0][data-rowindex=0] .t--table-text-cell`).trigger(\"dblclick\");\n    cy.get(`[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input`).should(\"exist\");\n    cy.get(\"[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input\").should(\"not.be.disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. should check that changes can be discarded by clicking escape","suites":["Table widget inline editing functionality"],"updatePoint":{"line":234,"column":71,"index":11245},"line":234,"code":"  it(\"13. should check that changes can be discarded by clicking escape\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    let value;\n    cy.readTableV2data(0, 0).then(val => {\n      value = val;\n    });\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"newValue\");\n    cy.discardTableCellValue(0, 0);\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .t--inlined-cell-editor input.bp3-input`).should(\"not.exist\");\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.equal(value);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. should check that changes can be saved by pressing enter or clicking outside","suites":["Table widget inline editing functionality"],"updatePoint":{"line":249,"column":86,"index":11820},"line":249,"code":"  it(\"14. should check that changes can be saved by pressing enter or clicking outside\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    let value;\n    cy.readTableV2data(0, 0).then(val => {\n      value = val;\n    });\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"newValue\");\n    cy.saveTableCellValue(0, 0);\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .t--inlined-cell-editor input.bp3-input`).should(\"not.exist\");\n    cy.wait(1000);\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.not.equal(value);\n      value = val;\n    });\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"someOtherNewValue\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`[data-colindex=\"0\"][data-rowindex=\"0\"] .t--inlined-cell-editor input.bp3-input`).should(\"not.exist\");\n    cy.wait(1000);\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.not.equal(value);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. should check that updatedRows and updatedRowIndices have correct values","suites":["Table widget inline editing functionality"],"updatePoint":{"line":274,"column":81,"index":12777},"line":274,"code":"  it(\"15. should check that updatedRows and updatedRowIndices have correct values\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 300,\n      y: 500\n    });\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Table1.updatedRows}}`);\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"newValue\");\n    cy.saveTableCellValue(0, 0);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `[  {    \"index\": 0,    \"updatedFields\": {      \"step\": \"newValue\"    },    \"allFields\": {      \"step\": \"newValue\",      \"task\": \"Drop a table\",      \"status\": \"✅\"    }  }]`);\n    cy.openPropertyPane(\"textwidget\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Table1.updatedRowIndices}}`);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", \"[  0]\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"16. should check that onsubmit event is available for the columns that are editable","suites":["Table widget inline editing functionality"],"updatePoint":{"line":291,"column":89,"index":13707},"line":291,"code":"  it(\"16. should check that onsubmit event is available for the columns that are editable\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    [{\n      columnType: \"URL\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Number\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Date\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Menu button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Icon button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Plain text\",\n      expected: \"not.exist\"\n    }].forEach(data => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.wait(500);\n      cy.get(\".t--property-control-onsubmit\").should(data.expected);\n    });\n    cy.get(propPaneBack).click();\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    [{\n      columnType: \"URL\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Number\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Date\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Menu button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Icon button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Plain text\",\n      expected: \"exist\"\n    }].forEach(data => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.wait(500);\n      cy.get(\".t--property-control-onsubmit\").should(data.expected);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"17. should check that onsubmit event is triggered when changes are saved","suites":["Table widget inline editing functionality"],"updatePoint":{"line":366,"column":78,"index":15729},"line":366,"code":"  it(\"17. should check that onsubmit event is triggered when changes are saved\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.getAlert(\"onSubmit\", \"Submitted!!\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"NewValue\");\n    cy.saveTableCellValue(0, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Submitted!!\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"18. should check that onSubmit events has access to edit values through triggeredRow","suites":["Table widget inline editing functionality"],"updatePoint":{"line":379,"column":90,"index":16278},"line":379,"code":"  it(\"18. should check that onSubmit events has access to edit values through triggeredRow\", () => {\n    const value = \"newCellValue\";\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.getAlert(\"onSubmit\", \"{{Table1.triggeredRow.step}}\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, value);\n    cy.saveTableCellValue(0, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(value);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"19. should check that onSave is working","suites":["Table widget inline editing functionality"],"updatePoint":{"line":393,"column":45,"index":16820},"line":393,"code":"  it(\"19. should check that onSave is working\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"EditActions1\");\n    //cy.get(\".t--property-pane-section-collapse-savebutton\").click({force:true});\n    cy.get(\".t--property-pane-section-collapse-discardbutton\").click({\n      force: true\n    });\n    cy.getAlert(\"onSave\", \"Saved!!\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"NewValue\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.saveTableRow(4, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Saved!!\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"20. should check that onSave events has access to edit values through triggeredRow","suites":["Table widget inline editing functionality"],"updatePoint":{"line":411,"column":88,"index":17581},"line":411,"code":"  it(\"20. should check that onSave events has access to edit values through triggeredRow\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"EditActions1\");\n    //cy.get(\".t--property-pane-section-collapse-savebutton\").click({force:true});\n    cy.get(\".t--property-pane-section-collapse-discardbutton\").click({\n      force: true\n    });\n    cy.getAlert(\"onSave\", \"{{Table1.triggeredRow.step}}\");\n    /*\n    cy.addSuccessMessage(\n      \"{{Table1.triggeredRow.step}}\",\n      \".t--property-control-onsave\",\n    );\n    */\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"NewValue\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.saveTableRow(4, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"NewValue\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"21. should check that onDiscard event is working","suites":["Table widget inline editing functionality"],"updatePoint":{"line":435,"column":54,"index":18452},"line":435,"code":"  it(\"21. should check that onDiscard event is working\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"EditActions1\");\n    cy.get(\".t--property-pane-section-collapse-savebutton\").click();\n    //cy.get(\".t--property-pane-section-collapse-discardbutton\").click();\n    cy.getAlert(\"onDiscard\", \"discarded!!\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"NewValue\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.discardTableRow(4, 0);\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"discarded!!\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"22. should check that inline editing works with text wrapping disabled","suites":["Table widget inline editing functionality"],"updatePoint":{"line":451,"column":76,"index":19178},"line":451,"code":"  it(\"22. should check that inline editing works with text wrapping disabled\", () => {\n    cy.addDsl(dsl);\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input\").should(\"not.be.disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"23. should check that inline editing works with text wrapping enabled","suites":["Table widget inline editing functionality"],"updatePoint":{"line":458,"column":75,"index":19511},"line":458,"code":"  it(\"23. should check that inline editing works with text wrapping enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-cellwrapping .ads-v2-switch\").first().click({\n      force: true\n    });\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex=0][data-rowindex=0] .t--inlined-cell-editor input.bp3-input\").should(\"not.be.disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"24. should check that doesn't grow taller when text wrapping is disabled","suites":["Table widget inline editing functionality"],"updatePoint":{"line":468,"column":78,"index":19959},"line":468,"code":"  it(\"24. should check that doesn't grow taller when text wrapping is disabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex='0'][data-rowindex='0'] .t--inlined-cell-editor\").should(\"have.css\", \"height\", \"32px\");\n    cy.enterTableCellValue(0, 0, \"this is a very long cell value\");\n    cy.get(\"[data-colindex='0'][data-rowindex='0'] .t--inlined-cell-editor\").should(\"have.css\", \"height\", \"32px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"25. should check that grows taller when text wrapping is enabled","suites":["Table widget inline editing functionality"],"updatePoint":{"line":476,"column":70,"index":20449},"line":476,"code":"  it(\"25. should check that grows taller when text wrapping is enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-control-cellwrapping .ads-v2-switch\").click({\n      force: true\n    });\n    cy.editTableCell(0, 0);\n    cy.get(\"[data-colindex='0'][data-rowindex='0'] .t--inlined-cell-editor\").should(\"have.css\", \"height\", \"34px\");\n    cy.enterTableCellValue(0, 0, \"this is a very long cell value\");\n    cy.get(\"[data-colindex='0'][data-rowindex='0'] .t--inlined-cell-editor\").should(\"not.have.css\", \"height\", \"34px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"26. should check if updatedRowIndex is getting updated for single row update mode","suites":["Table widget inline editing functionality"],"updatePoint":{"line":488,"column":87,"index":21084},"line":488,"code":"  it(\"26. should check if updatedRowIndex is getting updated for single row update mode\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(\".t--widget-textwidget\").should(\"exist\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Table1.updatedRowIndex}}`);\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-buttonwidget\").should(\"exist\");\n    cy.get(PROPERTY_SELECTOR.onClick).find(\".t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-label\", \"Reset\");\n    cy.updateCodeInput(PROPERTY_SELECTOR.onClick, `{{resetWidget(\"Table1\",true)}}`);\n\n    // case 1: check if updatedRowIndex has -1 as the default value:\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", -1);\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.wait(1000);\n\n    // case 2: check if updatedRowIndex is 0, when cell at row 0 is updated.\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"#12\").type(\"{enter}\");\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", 0);\n\n    // case 3: check if updatedRowIndex is -1 when changes are discarded.\n    cy.discardTableRow(4, 0);\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", -1);\n\n    // case 4: check if the updateRowIndex is -1 when widget is reset\n    cy.editTableCell(0, 1);\n    cy.enterTableCellValue(0, 1, \"#13\").type(\"{enter}\");\n    cy.contains(\"Reset\").click({\n      force: true\n    });\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", -1);\n\n    // case 5: check if the updatedRowIndex changes to -1 when the table data changes.\n    cy.wait(1000);\n    cy.editTableCell(0, 2);\n    cy.enterTableCellValue(0, 2, \"#14\").type(\"{enter}\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(widgetsPage.tabedataField).type(\"{backspace}\");\n    cy.wait(300);\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", -1);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"27. should check if updatedRowIndex is getting updated for multi row update mode","suites":["Table widget inline editing functionality"],"updatePoint":{"line":536,"column":86,"index":23087},"line":536,"code":"  it(\"27. should check if updatedRowIndex is getting updated for multi row update mode\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(\".t--widget-textwidget\").should(\"exist\");\n    cy.updateCodeInput(\".t--property-control-text\", `{{Table1.updatedRowIndex}}`);\n    cy.dragAndDropToCanvas(\"buttonwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-buttonwidget\").should(\"exist\");\n    cy.get(PROPERTY_SELECTOR.onClick).find(\".t--js-toggle\").click();\n    cy.updateCodeInput(\".t--property-control-label\", \"Reset\");\n    cy.updateCodeInput(PROPERTY_SELECTOR.onClick, `{{resetWidget(\"Table1\",true)}}`);\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"step\");\n    cy.get(\".ads-v2-segmented-control-value-CUSTOM\").click({\n      force: true\n    });\n    cy.wait(1000);\n\n    // case 1: check if updatedRowIndex is 0, when cell at row 0 is updated.\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"#12\").type(\"{enter}\");\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", 0);\n\n    // case 2: check if the updateRowIndex is -1 when widget is reset\n    cy.editTableCell(0, 1);\n    cy.enterTableCellValue(0, 1, \"#13\").type(\"{enter}\");\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", 1);\n    cy.contains(\"Reset\").click({\n      force: true\n    });\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", -1);\n\n    // case 3: check if the updatedRowIndex changes to -1 when the table data changes.\n    cy.wait(1000);\n    cy.editTableCell(0, 2);\n    cy.enterTableCellValue(0, 2, \"#14\").type(\"{enter}\");\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", 2);\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(widgetsPage.tabedataField).type(\"{backspace}\");\n    cy.wait(300);\n    cy.get(commonlocators.textWidgetContainer).should(\"contain.text\", -1);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Inline_editing_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that validation only appears when editable enabled","suites":["Table widget inline editing validation functionality"],"updatePoint":{"line":15,"column":72,"index":694},"line":15,"code":"  it(\"1. should check that validation only appears when editable enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"not.exist\");\n    propPane.ToggleOnOrOff(\"Editable\", \"On\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"exist\");\n    propPane.ToggleOnOrOff(\"Editable\", \"Off\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that validation only appears for plain text and number","suites":["Table widget inline editing validation functionality"],"updatePoint":{"line":24,"column":76,"index":1188},"line":24,"code":"  it(\"2. should check that validation only appears for plain text and number\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    propPane.ToggleOnOrOff(\"Editable\", \"On\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"exist\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Number\").click();\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"exist\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Plain text\").click();\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"exist\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Date\").click();\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"exist\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Plain text\").click();\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that regex, valid & required appear for plain text column","suites":["Table widget inline editing validation functionality"],"updatePoint":{"line":46,"column":79,"index":2430},"line":46,"code":"  it(\"3. should check that regex, valid & required appear for plain text column\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    propPane.ToggleOnOrOff(\"Editable\", \"On\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"exist\");\n    [\"regex\", \"valid\", \"errormessage\", \"required\"].forEach(property => {\n      cy.get(`.t--property-control-${property}`).should(\"exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that min, max, regex, valid & required appear for number column","suites":["Table widget inline editing validation functionality"],"updatePoint":{"line":55,"column":85,"index":2871},"line":55,"code":"  it(\"4. should check that min, max, regex, valid & required appear for number column\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    propPane.ToggleOnOrOff(\"Editable\", \"On\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Number\").click();\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--property-pane-section-collapse-validation\").should(\"exist\");\n    [\"min\", \"max\", \"regex\", \"valid\", \"errormessage\", \"required\"].forEach(property => {\n      cy.get(`.t--property-control-${property}`).should(\"exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"a. Regex","suites":["Table widget inline editing validation functionality","5. should check validation property for plain text column"],"updatePoint":{"line":68,"column":16,"index":3497},"line":68,"code":"    it(\"a. Regex\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.editColumn(\"step\");\n      propPane.ToggleOnOrOff(\"Editable\", \"On\");\n      propPane.UpdatePropertyFieldValue(\"Regex\", \"^#1$\");\n      cy.editTableCell(0, 0);\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"22\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"#1\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"b. Valid","suites":["Table widget inline editing validation functionality","5. should check validation property for plain text column"],"updatePoint":{"line":81,"column":16,"index":4054},"line":81,"code":"    it(\"b. Valid\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.editColumn(\"step\");\n      propPane.ToggleOnOrOff(\"Editable\", \"On\");\n      propPane.UpdatePropertyFieldValue(\"Valid\", \"{{editedValue === '#1'}}\");\n      cy.editTableCell(0, 0);\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"22\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"#1\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"c. Required","suites":["Table widget inline editing validation functionality","5. should check validation property for plain text column"],"updatePoint":{"line":94,"column":19,"index":4634},"line":94,"code":"    it(\"c. Required\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.editColumn(\"step\");\n      propPane.ToggleOnOrOff(\"Editable\", \"On\");\n      propPane.ToggleOnOrOff(\"Required\", \"On\");\n      cy.editTableCell(0, 0);\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"22\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"#1\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"a. Min","suites":["Table widget inline editing validation functionality","6. should check validation property for number column"],"updatePoint":{"line":111,"column":14,"index":5368},"line":111,"code":"    it(\"a. Min\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.editColumn(\"step\");\n      propPane.ToggleOnOrOff(\"Editable\", \"On\");\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(\"Number\").click();\n      cy.wait(\"@updateLayout\");\n      propPane.UpdatePropertyFieldValue(\"Min\", \"5\");\n      cy.editTableCell(0, 0);\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"6\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"7\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"4\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"3\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"8\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"b. Max","suites":["Table widget inline editing validation functionality","6. should check validation property for number column"],"updatePoint":{"line":133,"column":14,"index":6414},"line":133,"code":"    it(\"b. Max\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.editColumn(\"step\");\n      propPane.ToggleOnOrOff(\"Editable\", \"On\");\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(\"Number\").click();\n      cy.wait(\"@updateLayout\");\n      propPane.UpdatePropertyFieldValue(\"Max\", \"5\");\n      cy.editTableCell(0, 0);\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"6\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"7\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.enterTableCellValue(0, 0, \"4\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"3\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"8\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. should check the error message property","suites":["Table widget inline editing validation functionality","6. should check validation property for number column"],"updatePoint":{"line":156,"column":48,"index":7496},"line":156,"code":"  it(\"7. should check the error message property\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    propPane.ToggleOnOrOff(\"Editable\", \"On\");\n    propPane.UpdatePropertyFieldValue(\"Valid\", \"{{editedValue === '#1'}}\");\n    propPane.UpdatePropertyFieldValue(\"Error message\", \"You got error mate!!\");\n    cy.editTableCell(0, 0);\n    cy.wait(1000);\n    cy.enterTableCellValue(0, 0, \"123\");\n    cy.get(\".bp3-overlay.error-tooltip .bp3-popover-content\").should(\"contain\", \"You got error mate!!\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"a. save should only work when there is no error","suites":["Table widget inline editing validation functionality","8. should check the editable cell actions when there is a validation error"],"updatePoint":{"line":168,"column":55,"index":8129},"line":168,"code":"    it(\"a. save should only work when there is no error\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.editColumn(\"step\");\n      propPane.ToggleOnOrOff(\"Editable\", \"On\");\n      cy.getAlert(\"onSubmit\", \"Saved!!\");\n      propPane.UpdatePropertyFieldValue(\"Valid\", \"{{editedValue === '#1'}}\");\n      cy.editTableCell(0, 0);\n      cy.enterTableCellValue(0, 0, \"123\");\n      cy.get(`.t--inlined-cell-editor`).should(\"exist\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.saveTableCellValue(0, 0);\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor`).should(\"exist\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.get(widgetsPage.toastAction).should(\"not.exist\");\n      cy.enterTableCellValue(0, 0, \"#1\");\n      cy.saveTableCellValue(0, 0);\n      cy.get(`.t--inlined-cell-editor`).should(\"not.exist\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.get(widgetsPage.toastAction).should(\"be.visible\");\n      cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n        expect(text).to.equal(\"Saved!!\");\n      });\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"b. discard should only work when there is no error","suites":["Table widget inline editing validation functionality","8. should check the editable cell actions when there is a validation error"],"updatePoint":{"line":192,"column":58,"index":9282},"line":192,"code":"    it(\"b. discard should only work when there is no error\", () => {\n      cy.openPropertyPane(\"tablewidgetv2\");\n      cy.editColumn(\"step\");\n      propPane.ToggleOnOrOff(\"Editable\", \"On\");\n      propPane.UpdatePropertyFieldValue(\"Valid\", \"{{editedValue === '#1'}}\");\n      cy.editTableCell(0, 0);\n      cy.enterTableCellValue(0, 0, \"123\");\n      cy.get(`.t--inlined-cell-editor`).should(\"exist\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"exist\");\n      cy.discardTableCellValue(0, 0);\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor`).should(\"not.exist\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.readTableV2data(0, 0).then(val => {\n        expect(val).to.equal(\"\");\n      });\n      cy.editTableCell(0, 0);\n      cy.enterTableCellValue(0, 0, \"#1\");\n      cy.get(`.t--inlined-cell-editor`).should(\"exist\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.discardTableCellValue(0, 0);\n      cy.wait(500);\n      cy.get(`.t--inlined-cell-editor`).should(\"not.exist\");\n      cy.get(`.t--inlined-cell-editor-has-error`).should(\"not.exist\");\n      cy.readTableV2data(0, 0).then(val => {\n        expect(val).to.equal(\"\");\n      });\n    });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that save/discard button is disabled when there is a validation error","suites":["Table widget inline editing validation functionality","8. should check the editable cell actions when there is a validation error"],"updatePoint":{"line":221,"column":88,"index":10549},"line":221,"code":"  it(\"should check that save/discard button is disabled when there is a validation error\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"step\");\n    propPane.ToggleOnOrOff(\"Editable\", \"On\");\n    propPane.UpdatePropertyFieldValue(\"Valid\", \"{{editedValue === '#1'}}\");\n    cy.editTableCell(0, 0);\n    cy.enterTableCellValue(0, 0, \"123\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`[data-colindex=\"${4}\"][data-rowindex=\"${0}\"] button`).should(\"be.disabled\");\n    cy.enterTableCellValue(0, 0, \"#1\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(`[data-colindex=\"${4}\"][data-rowindex=\"${0}\"] button`).should(\"not.be.disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/inline_editing_validations_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should test that Non ASCII characters in the tableData are shown in the table column header","suites":["Non ASCII character functionality"],"updatePoint":{"line":16,"column":100,"index":594},"line":16,"code":"  it(\"1. should test that Non ASCII characters in the tableData are shown in the table column header\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    propPane.UpdatePropertyFieldValue(\"Table data\", JSON.stringify(data));\n    cy.wait(\"@updateLayout\");\n    Object.keys(data[0]).forEach(column => {\n      cy.get(`.t--widget-tablewidgetv2 .thead .th[data-header=\"${column}\"]`).should(\"exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/non_ascii_column_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should test that selectedRow also retains the non-ascii characters","suites":["Non ASCII character functionality"],"updatePoint":{"line":24,"column":75,"index":980},"line":24,"code":"  it(\"2. should test that selectedRow also retains the non-ascii characters\", () => {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 200,\n      y: 100\n    });\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.selectedRow}}\");\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"\",  \"français\": \"\",  \"español\": \"\",  \"日本語\": \"\",  \"हिन्दी\": \"\"}`);\n    cy.isSelectRow(0);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"mandarin\",  \"français\": \"french\",  \"español\": \"spanish\",  \"日本語\": \"japnese\",  \"हिन्दी\": \"hindi\"}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/non_ascii_column_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should test that triggeredRow also retains the non-ascii characters","suites":["Non ASCII character functionality"],"updatePoint":{"line":35,"column":76,"index":1623},"line":35,"code":"  it(\"3. should test that triggeredRow also retains the non-ascii characters\", () => {\n    cy.openPropertyPane(\"textwidget\");\n    propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.triggeredRow}}\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.addColumnV2(\"button\");\n    cy.editColumn(\"customColumn1\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Button\").click();\n    cy.getAlert(\"onClick\", \"clicked!!\");\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"\",  \"français\": \"\",  \"español\": \"\",  \"日本語\": \"\",  \"हिन्दी\": \"\"}`);\n    cy.get(`[data-colindex=\"5\"][data-rowindex=\"0\"] button`).trigger(\"click\", {\n      force: true\n    });\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").should(\"contain\", `{  \"普通话 [普通話] \": \"mandarin\",  \"français\": \"french\",  \"español\": \"spanish\",  \"日本語\": \"japnese\",  \"हिन्दी\": \"hindi\"}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/non_ascii_column_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should test that pageSize is computed properly for all the row sizes","suites":["Table widget v2"],"updatePoint":{"line":4,"column":77,"index":261},"line":4,"code":"  it(\"1. should test that pageSize is computed properly for all the row sizes\", function () {\n    _.entityExplorer.AddNewPage();\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.TEXT, 300, 100);\n    _.propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.pageSize}}\");\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.TABLE, 500, 300);\n    _.propPane.MoveToTab(\"Style\");\n    _.agHelper.GetNClick(\".t--property-control-defaultrowheight .ads-v2-segmented-control__segments-container:nth-child(1)\");\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($text => {\n      expect($text).to.eq(\"7\");\n    });\n    _.agHelper.GetNClick(\".t--property-control-defaultrowheight .ads-v2-segmented-control__segments-container:nth-child(2)\");\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($text => {\n      expect($text).to.eq(\"5\");\n    });\n    _.agHelper.GetNClick(\".t--property-control-defaultrowheight .ads-v2-segmented-control__segments-container:nth-child(3)\");\n    _.agHelper.GetText(getWidgetSelector(_.draggableWidgets.TEXT)).then($text => {\n      expect($text).to.eq(\"4\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Pagesize_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget V2 with with modal popup","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":10,"column":46,"index":479},"line":10,"code":"  it(\"1. Table widget V2 with with modal popup\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    //update Table name with _\n    cy.widgetText(\"Table_1\", widgetsPage.tableWidgetV2, widgetsPage.widgetNameSpan);\n    //cy.createModal(\"Modal\", this.data.ModalName);\n    cy.createModal(\"Modal\", \"onRowSelected\");\n    cy.isSelectRow(1);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n    cy.isSelectRow(2);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table widget V2 with button colour change validation","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":25,"column":61,"index":1005},"line":25,"code":"  it(\"2. Table widget V2 with button colour change validation\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tableV2Btn).should(\"not.exist\");\n    // Changing column data type to \"Button\"\n    cy.changeColumnType(\"Button\");\n    // Changing the computed value (data) to \"orderAmount\"\n    cy.updateComputedValue(testdata.currentRowOrderAmt);\n    cy.changeColumnType(\"Button\");\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color);\n    cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color);\n    cy.readTableV2dataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget icon type and colour validation","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":45,"column":53,"index":1818},"line":45,"code":"  it(\"3. Table widget icon type and colour validation\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Open column details of \"id\".\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    // Change Column type to icon Button\n    cy.moveToContentTab();\n    cy.changeColumnType(\"Icon button\");\n    // Select Icon from Icon Control\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidgetv2 .tbody .bp3-icon-add\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget v2 column reorder and reload function","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":64,"column":59,"index":2475},"line":64,"code":"  it(\"4. Table widget v2 column reorder and reload function\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.readTableV2dataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n      cy.reload();\n      cy.wait(3000);\n      cy.readTableV2dataPublish(\"2\", \"2\").then(tabDataNew => {\n        expect(tabDataNew).to.be.equal(\"Tobias Funke\");\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to validate text color and text background","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":17,"column":56,"index":708},"line":17,"code":"  it(\"1. Test to validate text color and text background\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.moveToStyleTab();\n    // Click on text color input field\n    cy.selectColor(\"textcolor\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    // Verify the text color is green\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(126, 34, 206)\");\n    // Change the text color and enter purple in input field\n    cy.get(widgetsPage.textColor).scrollIntoView().clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    // Verify the text color is purple\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\");\n    // Click on cell background color\n    cy.selectColor(\"cellbackgroundcolor\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    // select the green color\n\n    cy.wait(\"@updateLayout\");\n    cy.assertPageSave();\n    cy.PublishtheApp();\n    cy.wait(4000);\n\n    // Verify the cell background color is green\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(126, 34, 206)\");\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.moveToStyleTab();\n    // Change the cell background color and enter purple in input field\n    cy.get(`.t--property-control-cellbackgroundcolor input`).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    //cy.assertPageSave();\n    cy.PublishtheApp();\n    cy.wait(4000);\n\n    // Verify the cell background color is purple\n    cy.readTableV2dataValidateCSS(\"1\", \"1\", \"background-color\", \"rgb(128, 0, 128)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. check background of the edit action column","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":68,"column":51,"index":2525},"line":68,"code":"  it(\"2. check background of the edit action column\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"id\");\n    cy.readTableV2dataValidateCSS(0, 5, \"background-color\", \"rgba(0, 0, 0, 0)\");\n    cy.moveToStyleTab();\n    cy.get(\".t--property-control-cellbackgroundcolor\").find(\".t--js-toggle\").click();\n    propPane.UpdatePropertyFieldValue(\"Cell background color\", \"rgb(255, 0, 0)\");\n    cy.readTableV2dataValidateCSS(0, 5, \"background-color\", \"rgb(255, 0, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Color_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget V2 column order should be maintained after reorder and new column should be at the end","suites":["Table Widget V2 column order maintained on column change validation"],"updatePoint":{"line":7,"column":105,"index":397},"line":7,"code":"  it(\"Table widget V2 column order should be maintained after reorder and new column should be at the end\", function () {\n    const thirdColumnSelector = `${commonlocators.TableV2Head} .tr div:nth-child(3) .draggable-header`;\n    const secondColumnSelector = `${commonlocators.TableV2Head} .tr div:nth-child(2) .draggable-header`;\n    cy.get(thirdColumnSelector).trigger(\"dragstart\");\n    cy.get(secondColumnSelector).trigger(\"drop\");\n    cy.get(commonlocators.switchWidgetActive).click({\n      force: true\n    });\n    cy.get(commonlocators.textWidgetContainer).each((item, index, list) => {\n      cy.wrap(item).should(\"contain.text\", `Column Order: [\\\\\"status\\\\\",\\\\\"task\\\\\",\\\\\"action\\\\\",\\\\\"step1\\\\\"]`);\n    });\n    cy.wait(2000);\n    cy.get(thirdColumnSelector).trigger(\"dragstart\");\n    cy.get(secondColumnSelector).trigger(\"drop\");\n    cy.get(commonlocators.switchWidgetInActive).click({\n      force: true\n    });\n    cy.get(commonlocators.textWidgetContainer).each((item, index, list) => {\n      cy.wrap(item).should(\"contain.text\", `Column Order: [\\\\\"status\\\\\",\\\\\"action\\\\\",\\\\\"task\\\\\",\\\\\"step\\\\\"]`);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Column_Order_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget Functionality with Hidden and Resized Columns","suites":["Table Widget V2 Functionality with Hidden and Resized Columns"],"updatePoint":{"line":7,"column":67,"index":329},"line":7,"code":"  it(\"1. Table Widget Functionality with Hidden and Resized Columns\", function () {\n    cy.PublishtheApp();\n    // Verify column header width should be equal to table width\n    cy.get(\".t--widget-tablewidgetv2\").invoke(\"outerWidth\").then(tableWidth => {\n      cy.get(\".t--widget-tablewidgetv2 .thead .tr\").invoke(\"outerWidth\").then(columnHeaderWidth => {\n        expect(columnHeaderWidth).to.be.at.least(tableWidth - 8);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Column_Resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table V2","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":10,"column":65,"index":519},"line":10,"code":"  it(\"1. Create an API and Execute the API and bind with Table V2\", function () {\n    // Create and execute an API and bind with table\n    _.apiPage.CreateAndFillApi(this.data.paginationUrl + this.data.paginationParam);\n    cy.RunAPI();\n    //Validate Table V2 with API data and then add a column\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    _.propPane.UpdatePropertyFieldValue(\"Table data\", \"{{Api1.data}}\");\n    // Check Widget properties\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    // Open Text1 in propert pane\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    _.propPane.UpdatePropertyFieldValue(\"Text\", \"{{Table1.selectedRow.url}}\");\n    // Open Table1 propert pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Compare table 1st index data with itself\n    cy.readTableV2data(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    // Verify 1st index data\n    cy.readTableV2data(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    // add new column\n    cy.addColumnV2(\"CustomColumn\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table widget toggle test for background color","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":38,"column":54,"index":1727},"line":38,"code":"  it(\"2. Table widget toggle test for background color\", function () {\n    // Open id property pane\n    cy.editColumn(\"id\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.moveToStyleTab();\n    // Click on cell background JS button\n    _.propPane.EnterJSContext(\"Cell Background\", \"Green\");\n    // Go back to table property pane\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    // verify the cell background color\n    cy.readTableV2dataValidateCSS(\"1\", \"4\", \"background-color\", \"rgb(0, 128, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Edit column name and validate test for computed value based on column type selected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":54,"column":92,"index":2385},"line":54,"code":"  it(\"3. Edit column name and validate test for computed value based on column type selected\", function () {\n    // opoen customColumn1 property pane\n    cy.editColumn(\"customColumn1\");\n    cy.moveToContentTab();\n    // Enter Apil 1st user email data into customColumn1\n    cy.readTableV2dataPublish(\"1\", \"7\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValueV2(\"{{Api1.data[0].email}}\");\n      cy.readTableV2dataPublish(\"1\", \"7\").then(tabData => {\n        expect(tabData).not.to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Update table json data and check the column names updated","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":69,"column":66,"index":2999},"line":69,"code":"  it(\"4. Update table json data and check the column names updated\", function () {\n    // Open table propert pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.backFromPropertyPanel();\n    // Change the table data\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\");\n    // verify columns are visible or not in the propert pane\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"userName\");\n    cy.tableV2ColumnDataValidation(\"productName\");\n    cy.tableV2ColumnDataValidation(\"orderAmount\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\");\n    // Hide the columns in property pane\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    // verify customColumn is visible in the table\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget V2 Functionality To Filter and search data","suites":["Table Widget V2 Filtered Table data in autocomplete"],"updatePoint":{"line":12,"column":64,"index":651},"line":12,"code":"  it(\"1. Table Widget V2 Functionality To Filter and search data\", function () {\n    cy.get(publish.searchInput).first().type(\"query\");\n    cy.get(publish.filterBtn).click({\n      force: true\n    });\n    cy.get(publish.attributeDropdown).click({\n      force: true\n    });\n    cy.get(publish.attributeValue).contains(\"task\").click({\n      force: true\n    });\n    cy.get(publish.conditionDropdown).click({\n      force: true\n    });\n    cy.get(publish.attributeValue).contains(\"contains\").click({\n      force: true\n    });\n    cy.get(publish.tableFilterInputValue).type(\"bind\", {\n      force: true\n    });\n    cy.wait(500);\n    cy.get(widgetsPage.filterApplyBtn).click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\".t--close-filter-btn\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Widget V2 Functionality to validate filtered table data","suites":["Table Widget V2 Filtered Table data in autocomplete"],"updatePoint":{"line":41,"column":70,"index":1444},"line":41,"code":"  it(\"2. Table Widget V2 Functionality to validate filtered table data\", function () {\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.filteredTableData[0].task}}\");\n    cy.readTableV2data(\"0\", \"1\").then(tabData => {\n      const tableData = tabData;\n      cy.get(commonlocators.labelTextStyle).should(\"have.text\", tableData);\n    });\n\n    //Table Widget V2 Functionality to validate filtered table data with actual table data\n    cy.readTableV2data(\"0\", \"1\").then(tabData => {\n      const tableData = JSON.parse(dsl.dsl.children[0].tableData);\n      cy.get(commonlocators.labelTextStyle).should(\"have.text\", tableData[2].task);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_FilteredTableData_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to validate table pagination is disabled","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":14,"column":54,"index":625},"line":14,"code":"  it(\"1. Test to validate table pagination is disabled\", function () {\n    // Verify pagination is disabled\n    cy.get(\".t--table-widget-prev-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-page-input input\").should(\"have.attr\", \"disabled\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test to validate text allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":20,"column":41,"index":955},"line":20,"code":"  it(\"2. Test to validate text allignment\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.moveToStyleTab();\n    // Change the text align to center\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    // Verify the center text alignment\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\");\n    // Change the text align to right\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    // Verify the right text alignment\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\");\n    // Change the text align to left\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    // verify the left text alignment\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Test to validate column heading allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":43,"column":51,"index":1822},"line":43,"code":"  it(\"3. Test to validate column heading allignment\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.moveToStyleTab();\n    // Change the text align to center\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    // Verify the column headings are center aligned\n    cy.get(\".draggable-header > div\").first().should(\"have.css\", \"justify-content\", \"center\");\n    // Change the text align to right\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    // Verify the column headings are right aligned\n    cy.get(\".draggable-header > div\").first().should(\"have.css\", \"justify-content\", \"flex-end\");\n    // Change the text align to left\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    // Verify the column headings are left aligned\n    cy.get(\".draggable-header > div\").first().should(\"have.css\", \"justify-content\", \"flex-start\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Test to validate text format","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":65,"column":37,"index":2751},"line":65,"code":"  it(\"4. Test to validate text format\", function () {\n    // Select the bold font style\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.wait(2000);\n    // Varify the font style is bold\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\");\n    // Change the font style to italic\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    // Verify the font style is italic\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\");\n    cy.moveToContentTab();\n    // Change the font style to underline\n    cy.editColumn(\"id\");\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.underline).click({\n      force: true\n    });\n    // Verify the font style is underline\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"text-decoration-line\", \"underline\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Test to validate vertical allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":89,"column":45,"index":3563},"line":89,"code":"  it(\"5. Test to validate vertical allignment\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.moveToStyleTab();\n    // Select the top vertical alignment\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    });\n    // verify vertical alignment is top\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\");\n    // Change the vertical alignment to center\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    });\n    // Verify the vertical alignment is centered\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"center\");\n    // Change the vertical alignment to bottom\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    });\n    // Verify the vertical alignment is bottom\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget V2 toggle test for text alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":111,"column":55,"index":4425},"line":111,"code":"  it(\"6. Table widget V2 toggle test for text alignment\", function () {\n    // Click on text align JS\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Change the text align value to right for michael and left for others\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingGenAlign);\n    // Close propert pane\n\n    // Verify the text michael id is right aligned\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-end\");\n    // Verify the 2nd id is left aligned\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget change text size and validate","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":127,"column":51,"index":5107},"line":127,"code":"  it(\"7. Table widget change text size and validate\", function () {\n    // Verify font size is 14px\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n\n    // Open txe size dropdown options\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Select Heading 1 text size\n    cy.selectTxtSize(\"L\");\n    // Verify the font size is 24px\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"20px\");\n    // close propert pane\n\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Verify the font size is 24px\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-size\", \"20px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Test to validate open new tab icon shows when URL type data validate link text ","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":148,"column":88,"index":5885},"line":148,"code":"  it(\"8. Test to validate open new tab icon shows when URL type data validate link text \", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    // go back to 1st\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    // Open email property pane\n    cy.editColumn(\"email\");\n    cy.moveToContentTab();\n    // Change column type to url\n    cy.changeColumnType(\"URL\");\n    //Check all the occurance\n    cy.get(\".link-text\").should(\"have.length\", \"3\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Edit column name and test for table header changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":164,"column":59,"index":6373},"line":164,"code":"  it(\"9. Edit column name and test for table header changes\", function () {\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    // Open email property pane\n    cy.editColumn(\"email\");\n    // CHange the Column email name to Email Address\n    cy.editColName(\"Email Address\");\n    // verify changed email name is visible\n    cy.get(\"[data-header='Email Address']\").should(\"be.visible\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Edit Row height and test table for changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":178,"column":52,"index":6868},"line":178,"code":"  it(\"10. Edit Row height and test table for changes\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.moveToStyleTab();\n    cy.get(\"[data-value='SHORT']\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.readTableV2dataValidateCSS(\"0\", \"1\", \"height\", \"29px\", true);\n    cy.get(publish.backToEditor).click();\n    cy.wait(2000);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test multi select column shows when enableMultirowselection is true","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":12,"column":76,"index":445},"line":12,"code":"  it(\"1. Test multi select column shows when enableMultirowselection is true\", function () {\n    cy.get(widgetsPage.buttonWidget).first().click();\n    cy.wait(1000);\n    cy.get(\".t--table-multiselect\").first().click();\n    cy.get(widgetsPage.buttonWidget).last().click();\n    cy.get(\".tbody .tr\").first().should(\"have.class\", \"selected-row\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_MultiRowSelect_dataUpdation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test multi select column shows when enable Multirowselection is true","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":8,"column":77,"index":406},"line":8,"code":"  it(\"1. Test multi select column shows when enable Multirowselection is true\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.closePropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--table-multiselect-header\").first().should(\"be.visible\");\n    cy.get(\".t--table-multiselect\").first().should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test click on header cell selects all row","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":17,"column":50,"index":799},"line":17,"code":"  it(\"2. Test click on header cell selects all row\", function () {\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    });\n    // check if rows selected\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Test click on single row cell changes header select cell state","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":25,"column":71,"index":1098},"line":25,"code":"  it(\"3. Test click on single row cell changes header select cell state\", function () {\n    // un select all rows\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    });\n    // click on first row select box\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    // check if header cell is in half check state\n    cy.get(\".t--table-multiselect-header-half-check-svg\").first().should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Test action configured on onRowSelected get triggered whenever a table row is selected","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":37,"column":95,"index":1581},"line":37,"code":"  it(\"4. Test action configured on onRowSelected get triggered whenever a table row is selected\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.getAlert(\"onRowSelected\", \"Row Selected\");\n    // un select first row\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n    // click on first row select box\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Row Selected\").should(\"have.css\", \"font-size\", \"14px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. It should deselected default Selected Row when the header cell is clicked","suites":["Table Widget V2 row multi select validation"],"updatePoint":{"line":51,"column":82,"index":2157},"line":51,"code":"  it(\"5. It should deselected default Selected Row when the header cell is clicked\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.testJsontext(\"defaultselectedrows\", \"[0]\");\n\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    });\n    // check if rows selected\n    cy.get(\".tr\").should(\"not.have.class\", \"selected-row\");\n\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    });\n    // check if rows is not selected\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. updates previous and next pagination propeties properly in non server side pagination mode","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":11,"column":99,"index":494},"line":11,"code":"  it(\"1. updates previous and next pagination propeties properly in non server side pagination mode\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    // The text field has two bindings in its text value, as below\n    // \"{{Table1.previousPageVisited}} {{Table1.nextPageVisited}}\"\n\n    // Click on next page\n    cy.get(\".t--table-widget-next-page\").click();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"false true\");\n\n    // Click on previous page\n    cy.get(\".t--table-widget-prev-page\").click();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"true false\");\n\n    // Type and go to next page\n    cy.get(\".t--table-widget-page-input .bp3-input\").clear().type(\"2{enter}\");\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"false true\");\n\n    // Type and go to previous page\n    cy.get(\".t--table-widget-page-input .bp3-input\").clear().type(\"1{enter}\");\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"true false\");\n\n    // pagination flags should get reset whenever a user searches for any text\n\n    table.SearchTable(\"Michael Lawson\");\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"false false\");\n    table.resetSearch();\n\n    // Pagination properties should get reset when user filters for any criteria.\n    cy.get(\".t--table-widget-next-page\").click();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"false true\");\n    table.OpenNFilterTable(\"userName\", \"contains\", \"Michael Lawson\");\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"false false\");\n    table.RemoveFilter();\n    cy.get(\".t--table-widget-next-page\").click();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"false true\");\n\n    // pagination properties should work in server side mode\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"false false\");\n\n    // Click on next page\n    cy.get(\".t--table-widget-next-page\").click();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"false true\");\n\n    // Click on previous page\n    cy.get(\".t--table-widget-prev-page\").click();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", \"true false\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_pagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":8,"column":62,"index":451},"line":8,"code":"  it(\"1. Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":12,"column":59,"index":627},"line":12,"code":"  it(\"2. Validate Table with API data and then add a column\", function () {\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Change the table data to Apil data users\n    cy.testJsontext(\"tabledata\", \"{{Api1.data}}\");\n    // Check server sided pagination\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    // Open property pane of Text1\n    _.entityExplorer.SelectEntityByName(\"Text1\");\n    // Change the text value to selected url\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Copmre the table 1st index with itself\n    cy.readTableV2data(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    // Validate the table 1st index\n    cy.readTableV2data(\"0\", \"4\").then(tabData => {\n      const tableData = tabData;\n      expect(tableData).to.equal(\"1\");\n    });\n    // Add new column\n    cy.addColumnV2(\"CustomColumn\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Update table json data and check the column names updated and validate empty value","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":38,"column":91,"index":1715},"line":38,"code":"  it(\"3. Update table json data and check the column names updated and validate empty value\", function () {\n    // Open property pane\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    // Change the table data\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputWithNull));\n    cy.wait(\"@updateLayout\");\n    // Verify the columns are visible in property pane\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"userName\");\n    cy.tableV2ColumnDataValidation(\"productName\");\n    cy.tableV2ColumnDataValidation(\"orderAmount\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\");\n    // Hide the columns in the table from property pane\n    cy.hideColumn(\"id\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    // Verify CustomColumn is visible\n    cy.get(\".draggable-header:contains('CustomColumn')\").scrollIntoView().should(\"be.visible\");\n    // close property pane\n    cy.closePropertyPane();\n    // Validate the empty values\n    cy.readTableV2dataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check Selected Row(s) Resets When Table data Changes","suites":["Test Create Api and Bind to Table widget V2"],"updatePoint":{"line":66,"column":61,"index":2894},"line":66,"code":"  it(\"4. Check Selected Row(s) Resets When Table data Changes\", function () {\n    // Select 1st row\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Empty first row\n    cy.testJsontext(\"tabledata\", \"[]\");\n    cy.wait(\"@updateLayout\");\n    const newTableData = [...this.data.TableInput];\n    newTableData[0].userName = \"\";\n    // Change table data from empty to some\n    cy.testJsontext(\"tabledata\", JSON.stringify(newTableData));\n    cy.wait(\"@updateLayout\");\n    const selectedRowsSelector = `.t--widget-tablewidgetv2 .tbody .tr.selected-row`;\n    // Verify selected row resets on table data changes\n    cy.get(selectedRowsSelector).should($p => {\n      // should found 0 rows\n      expect($p).to.have.length(0);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify table column type changes effect on menuButton and iconButton","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":7,"column":77,"index":353},"line":7,"code":"  it(\"1. Verify table column type changes effect on menuButton and iconButton\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.addColumnV2(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.changeColumnType(\"Menu button\");\n    cy.wait(400);\n    cy.moveToStyleTab();\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"(none)\");\n    cy.getTableV2DataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"not.exist\");\n    });\n    cy.moveToContentTab();\n    cy.changeColumnType(\"Icon button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableV2DataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon-add\").should(\"exist\");\n    });\n    cy.changeColumnType(\"Menu button\");\n    cy.wait(500);\n    cy.moveToStyleTab();\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"(none)\");\n    cy.getTableV2DataSelector(\"1\", \"5\").then(selector => {\n      cy.get(selector + \" button span.bp3-icon\").should(\"not.exist\");\n    });\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_IconName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify default array data","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":15,"column":34,"index":769},"line":15,"code":"  it(\"1. Verify default array data\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Open Widget side bar\n    cy.get(widgetsPage.addWidget).click();\n    // Drag and drop table widget\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 300,\n      y: 200\n    });\n    // close Widget side bar\n    entityExplorer.NavigateToSwitcher(\"Explorer\");\n    cy.wait(2000);\n    entityExplorer.SelectEntityByName(\"Table2\");\n    // Verify default array data\n    cy.get(widgetsPage.tabedataField).should(\"not.be.empty\");\n    cy.deleteWidget(widgetsPage.tableWidgetV2);\n    cy.wait(2000);\n    cy.ClearSearch();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Verify empty columnName in data","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":35,"column":40,"index":1418},"line":35,"code":"  it(\"2. Verify empty columnName in data\", () => {\n    cy.get(widgetsPage.addWidget).click();\n    // Drag and drop table widget\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 300,\n      y: 200\n    });\n    table.AddSampleTableData();\n    // close Widget side bar\n    entityExplorer.NavigateToSwitcher(\"Explorer\");\n    cy.get(widgetsPage.tabedataField).should(\"not.be.empty\");\n    cy.get(`${widgetsPage.tabedataField} .CodeMirror`).first().then(ins => {\n      const input = ins[0].CodeMirror;\n      input.focus();\n      cy.wait(100);\n      input.setValue(JSON.stringify(emptyTableColumnNameData));\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(5000);\n    cy.get(\".t--widget-tablewidgetv2\").should(\"be.visible\");\n    cy.deleteWidget(widgetsPage.tableWidget);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify On Row Selected Action","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":57,"column":38,"index":2263},"line":57,"code":"  it(\"3. Verify On Row Selected Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Select show message in the \"on selected row\" dropdown\n    cy.getAlert(\"onRowSelected\", \"Row is selected\");\n    cy.PublishtheApp();\n    // Select 1st row\n    cy.isSelectRow(2);\n    cy.wait(2000);\n    // Verify Row is selected by showing the message\n    cy.get(commonlocators.toastmsg).contains(\"Row is selected\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Verify On Search Text Change Action","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":70,"column":44,"index":2760},"line":70,"code":"  it(\"4. Verify On Search Text Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Show Message on Search text change Action\n    cy.getAlert(\"onSearchTextChanged\", \"Search Text Changed\");\n    cy.PublishtheApp();\n    // Change the Search text\n    cy.get(widgetsPage.searchField).type(\"Hello\");\n    cy.wait(2000);\n    // Verify the search text is changed\n    cy.get(commonlocators.toastmsg).contains(\"Search Text Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Check On Page Change Action","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":83,"column":36,"index":3275},"line":83,"code":"  it(\"5. Check On Page Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--property-control-serversidepagination input\").click({\n      force: true\n    });\n    // Select show message in the \"on selected row\" dropdown\n    cy.getAlert(\"onPageChange\", \"Page Changed\");\n    cy.PublishtheApp();\n    cy.wait(2000);\n    // Change the page\n    cy.get(widgetsPage.nextPageButton).click({\n      force: true\n    });\n    // Verify the page is changed\n    cy.get(commonlocators.toastmsg).contains(\"Page Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Check open section and column data in property pane","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":101,"column":60,"index":3909},"line":101,"code":"  it(\"6. Check open section and column data in property pane\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    // Validate the columns are visible in the property pane\n    cy.tableV2ColumnDataValidation(\"id\");\n    cy.tableV2ColumnDataValidation(\"email\");\n    cy.tableV2ColumnDataValidation(\"userName\");\n    cy.tableV2ColumnDataValidation(\"productName\");\n    cy.tableV2ColumnDataValidation(\"orderAmount\");\n\n    // Updating the column name ; \"id\" > \"TestUpdated\"\n    cy.tableV2ColumnPopertyUpdate(\"id\", \"TestUpdated\");\n\n    // Add new column in the table with name \"CustomColumn\"\n    cy.addColumnV2(\"CustomColumn\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\"); //To be updated later\n\n    // Hide all other columns\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n\n    // Verifying the newly added column\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Column Detail - Edit column name and validate test for computed value based on column type selected","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":127,"column":108,"index":4943},"line":127,"code":"  it(\"7. Column Detail - Edit column name and validate test for computed value based on column type selected\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.wait(1000);\n    cy.makeColumnVisible(\"email\");\n    cy.makeColumnVisible(\"userName\");\n    cy.makeColumnVisible(\"productName\");\n    cy.makeColumnVisible(\"orderAmount\");\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    // Open column detail to be edited by draggable id\n    cy.editColumn(\"id\");\n    // Change the column name\n    cy.editColName(\"updatedId\");\n    // Reading single cell value of the table and verify it's value.\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"2736212\");\n      // Changing the Computed value from \"id\" to \"Email\"\n      propPane.UpdatePropertyFieldValue(\"Computed value\", testdata.currentRowEmail);\n      cy.wait(500);\n      // Reading single cell value of the table and verify it's value.\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData2);\n      });\n    });\n\n    // Changing Column data type from \"Plain text\" to \"Number\"\n    cy.changeColumnType(\"Number\");\n    cy.readTableV2dataPublish(\"1\", \"4\").then(tabData => {\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"lindsay.ferguson@reqres.in\");\n      // Email to \"orderAmount\"\n      propPane.UpdatePropertyFieldValue(\"Computed value\", testdata.currentRowOrderAmt);\n      cy.wait(500);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabData);\n        cy.log(\"computed value of number is \" + tabData2);\n      });\n    });\n\n    // Changing Column data type from \"Number\" to \"Date\"\n    cy.changeColumnType(\"Date\");\n    // orderAmout to \"Moment Date\"\n    propPane.UpdatePropertyFieldValue(\"Computed value\", testdata.momentDate);\n    cy.wait(500);\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      expect(tabData).to.not.equal(\"9.99\");\n      cy.log(\"computed value of Date is \" + tabData);\n    });\n\n    // Changing Column data type from \"Date\" to \"Image\"\n    const imageVal = \"https://images.pexels.com/photos/736230/pexels-photo-736230.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\";\n    cy.changeColumnType(\"Image\");\n    // \"Moement \"date\" to \"Image\"\n    propPane.UpdatePropertyFieldValue(\"Computed value\", imageVal);\n    cy.wait(500);\n    // Verifying the href of the image added.\n    cy.readTableV2LinkPublish(\"1\", \"0\").then(hrefVal => {\n      expect(hrefVal).to.be.contains(imageVal);\n    });\n\n    // Changing Column data type from \"Date\" to \"URl\"\n    cy.readTableV2dataPublish(\"1\", \"1\").then(actualEmail => {\n      cy.changeColumnType(\"URL\");\n      // \"Image\" to \"url\"\n      propPane.UpdatePropertyFieldValue(\"Computed value\", testdata.currentRowEmail);\n      cy.wait(500);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData2 => {\n        expect(tabData2).to.equal(\"michael.lawson@reqres.in\").to.eq(actualEmail);\n        cy.log(\"computed value of URL is \" + tabData2);\n      });\n    });\n\n    // change column data type to \"icon button\"\n    cy.changeColumnType(\"Icon button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableV2DataSelector(\"0\", \"0\").then(selector => {\n      cy.get(selector + \" button.bp3-button [data-icon=add]\").should(\"exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Test to validate text allignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":212,"column":41,"index":8385},"line":212,"code":"  it(\"8. Test to validate text allignment\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(commonlocators.changeColType).last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"URL\").click();\n    // cy.get(\".t--property-control-visible span.bp3-control-indicator\").click();\n    cy.wait(\"@updateLayout\");\n    cy.moveToStyleTab();\n    // Verifying Center Alignment\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\", true);\n\n    // Verifying Right Alignment\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\", true);\n\n    // Verifying Left Alignment\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\", true);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Test to validate text format","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":237,"column":37,"index":9339},"line":237,"code":"  it(\"9. Test to validate text format\", function () {\n    // Validate Bold text\n    cy.get(widgetsPage.bold).click();\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\");\n    // Validate Italic text\n    cy.get(widgetsPage.italics).click();\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"font-style\", \"italic\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Test to validate vertical allignment","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":245,"column":46,"index":9677},"line":245,"code":"  it(\"10. Test to validate vertical allignment\", function () {\n    // Validate vertical alignemnt of Cell text to TOP\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\", true);\n    // Validate vertical alignemnt of Cell text to Center\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"align-items\", \"center\", true);\n    // Validate vertical alignemnt of Cell text to Bottom\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    });\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-end\", true);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"11. Test to validate text color and text background","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":262,"column":57,"index":10392},"line":262,"code":"  it(\"11. Test to validate text color and text background\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    // Changing text color to rgb(126, 34, 206) and validate\n    cy.selectColor(\"textcolor\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(5000);\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(126, 34, 206)\");\n\n    // Changing text color to PURPLE and validate using JS\n    cy.get(widgetsPage.toggleJsColor).click();\n    cy.testCodeMirrorLast(\"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\");\n\n    // Changing Cell backgroud color to rgb(126, 34, 206) and validate\n    cy.selectColor(\"cellbackground\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"background\", \"rgb(113, 30, 184) none repeat scroll 0% 0% / auto padding-box border-box\", true);\n    // Changing Cell backgroud color to PURPLE and validate using JS\n    propPane.EnterJSContext(\"Cell Background\", \"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTableV2dataValidateCSS(\"0\", \"0\", \"background\", \"rgb(102, 0, 102) none repeat scroll 0% 0% / auto padding-box border-box\", true);\n    // close property pane\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"12. Verify default search text","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":288,"column":36,"index":11626},"line":288,"code":"  it(\"12. Verify default search text\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.moveToContentTab();\n    // Chage deat search text value to \"data\"\n    cy.backFromPropertyPanel();\n    cy.testJsontext(\"defaultsearchtext\", \"data\");\n    cy.PublishtheApp();\n    // Verify the deaullt search text\n    cy.get(widgetsPage.searchField).should(\"have.value\", \"data\");\n    cy.get(publish.backToEditor).click();\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"13. Verify custom column property name changes with change in column name ([FEATURE]: #17142)","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":300,"column":99,"index":12141},"line":300,"code":"  it(\"13. Verify custom column property name changes with change in column name ([FEATURE]: #17142)\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.moveToContentTab();\n    cy.addColumnV2(\"customColumn18\");\n    cy.editColumn(\"customColumn1\");\n    cy.get(\".t--property-control-propertyname pre span span\").should(\"have.text\", \"customColumn18\");\n    cy.editColName(\"customColumn00\");\n    cy.get(\".t--property-control-propertyname pre span span\").should(\"have.text\", \"customColumn00\");\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click();\n    cy.get('[data-rbd-draggable-id=\"customColumn1\"] input').should(\"have.value\", \"customColumn00\");\n    cy.get(\"[data-rbd-draggable-id='customColumn1'] input[type='text']\").clear({\n      force: true\n    });\n    cy.get(\"[data-rbd-draggable-id='customColumn1'] input[type='text']\").type(\"customColumn99\", {\n      force: true\n    });\n    cy.editColumn(\"customColumn1\");\n    cy.get(\".t--property-control-propertyname pre span span\").should(\"have.text\", \"customColumn99\");\n    cy.backFromPropertyPanel();\n    cy.deleteColumn(\"customColumn1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"14. It provides currentRow and currentIndex properties in min validation field","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":322,"column":84,"index":13260},"line":322,"code":"  it(\"14. It provides currentRow and currentIndex properties in min validation field\", function () {\n    cy.addDsl(dsl);\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"orderAmount\");\n    cy.editColumn(\"orderAmount\");\n    propPane.UpdatePropertyFieldValue(\"Computed value\", \"{{currentIndex}}\");\n    cy.changeColumnType(\"Number\");\n    propPane.UpdatePropertyFieldValue(\"Min\", \"{{currentIndex}}\");\n    cy.get(\".t--evaluatedPopup-error\").should(\"not.exist\");\n\n    // Update cell with row : 1, column : orderAmount\n    cy.editTableCell(4, 1);\n    cy.enterTableCellValue(4, 1, -1);\n    cy.get(\".bp3-popover-content\").contains(\"Invalid input\");\n    cy.enterTableCellValue(4, 1, 0);\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n\n    // Check if currentRow works\n    cy.editColumn(\"orderAmount\");\n    propPane.UpdatePropertyFieldValue(\"Min\", \"{{currentRow.id}}\");\n    propPane.UpdatePropertyFieldValue(\"Error message\", \"Row at index {{currentIndex}} is not valid\");\n    cy.get(\".t--evaluatedPopup-error\").should(\"not.exist\");\n\n    // Update cell with row : 0, column : orderAmount. The min is set to 7 (i.e value of cell in id column)\n    cy.editTableCell(4, 1);\n    cy.enterTableCellValue(4, 1, 8);\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.enterTableCellValue(4, 1, 6);\n    cy.get(\".bp3-popover-content\").contains(\"Row at index 1 is not valid\");\n    cy.enterTableCellValue(4, 1, 8);\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    propPane.UpdatePropertyFieldValue(\"Error message\", \"Row with id {{currentRow.id}} is not valid\");\n    cy.editTableCell(4, 1);\n    cy.enterTableCellValue(4, 1, 5);\n    cy.get(\".bp3-popover-content\").contains(\"Row with id 7 is not valid\");\n    propPane.UpdatePropertyFieldValue(\"Min\", \"\");\n    propPane.UpdatePropertyFieldValue(\"Error message\", \"\");\n\n    // Check for currentIndex property on Regex field\n    cy.changeColumnType(\"Plain text\");\n    propPane.UpdatePropertyFieldValue(\"Regex\", \"{{currentIndex}}2\");\n    cy.get(\".t--evaluatedPopup-error\").should(\"not.exist\");\n    cy.editTableCell(4, 1);\n    cy.enterTableCellValue(4, 1, 3);\n    cy.get(\".bp3-popover-content\").contains(\"Invalid input\");\n    cy.enterTableCellValue(4, 1, \"12\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n\n    // Check for currentRow property on Regex field\n    propPane.UpdatePropertyFieldValue(\"Regex\", \"{{currentRow.id}}\");\n    cy.editTableCell(4, 1);\n    cy.enterTableCellValue(4, 1, 7);\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.enterTableCellValue(4, 1, 8);\n    cy.get(\".bp3-popover-content\").contains(\"Invalid input\");\n    cy.enterTableCellValue(4, 1, 7);\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    propPane.UpdatePropertyFieldValue(\"Regex\", \"\");\n    cy.get(\".t--property-control-required\").find(\".t--js-toggle\").click();\n    propPane.UpdatePropertyFieldValue(\"Required\", \"{{currentIndex == 1}}\");\n    cy.editTableCell(4, 1);\n    cy.enterTableCellValue(4, 1, \"\");\n    cy.get(\".bp3-popover-content\").contains(\"This field is required\");\n    cy.enterTableCellValue(4, 1, \"1{enter}\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.wait(1500);\n    cy.discardTableRow(5, 1);\n    cy.wait(1500);\n\n    // Value isn't required in Row Index 2\n    cy.editTableCell(4, 2);\n    cy.enterTableCellValue(4, 2, \"\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.enterTableCellValue(4, 2, \"11\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.enterTableCellValue(4, 2, \"{enter}\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.wait(1500);\n    cy.discardTableRow(5, 2);\n\n    // Check for Required property using currentRow, row with index 1 has id 7\n    propPane.UpdatePropertyFieldValue(\"Required\", \"{{currentRow.id == 7}}\");\n    cy.editTableCell(4, 1);\n    cy.enterTableCellValue(4, 1, \"\");\n    cy.get(\".bp3-popover-content\").contains(\"This field is required\");\n    cy.enterTableCellValue(4, 1, 1);\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.enterTableCellValue(4, 1, \"\");\n    cy.get(\".bp3-popover-content\").contains(\"This field is required\");\n    cy.enterTableCellValue(4, 1, \"1{enter}\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.wait(1500);\n    cy.discardTableRow(5, 1);\n    cy.wait(1500);\n\n    // Value isn't required in Row Index 2\n    cy.editTableCell(4, 2);\n    cy.enterTableCellValue(4, 2, \"\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.enterTableCellValue(4, 2, 10);\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.enterTableCellValue(4, 2, \"{enter}\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n    cy.wait(1500);\n    cy.discardTableRow(5, 2);\n\n    // Cleanup\n    propPane.UpdatePropertyFieldValue(\"Computed value\", '{{currentRow[\"orderAmount\"]}}');\n    cy.changeColumnType(\"Plain text\");\n    cy.backFromPropertyPanel();\n    cy.makeColumnEditable(\"orderAmount\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"15. Verify default prompt message for min field","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":434,"column":53,"index":18171},"line":434,"code":"  it(\"15. Verify default prompt message for min field\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.makeColumnEditable(\"orderAmount\");\n    cy.editColumn(\"orderAmount\");\n    cy.changeColumnType(\"Number\");\n    propPane.UpdatePropertyFieldValue(\"Min\", \"test\");\n    cy.get(\".t--property-control-min .t--no-binding-prompt > span\").should(\"have.text\", \"Access the current cell using {{currentRow.columnName}}\");\n    cy.changeColumnType(\"Plain text\");\n    cy.backFromPropertyPanel();\n    cy.makeColumnEditable(\"orderAmount\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"verifies that table sorting works for a custom column with computed value even when it is renamed","suites":["Table Widget V2 Sorting"],"updatePoint":{"line":8,"column":103,"index":424},"line":8,"code":"  it(\"verifies that table sorting works for a custom column with computed value even when it is renamed\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.addColumnV2(\"customColumn1\");\n    cy.editColumn(\"customColumn1\");\n    cy.updateComputedValueV2(testdata.currentIndex);\n    cy.backFromPropertyPanel();\n\n    // Ensure simple sorting for a custom column in working\n    // customColumn1 is at index 5 in the table\n    cy.sortColumn(\"customColumn1\", \"ascending\");\n    cy.readTableV2data(0, 5).then(data => {\n      expect(data).to.eq(\"0\");\n    });\n    cy.readTableV2data(1, 5).then(data => {\n      expect(data).to.eq(\"1\");\n    });\n    cy.sortColumn(\"customColumn1\", \"descending\");\n    cy.readTableV2data(0, 5).then(data => {\n      expect(data).to.eq(\"9\");\n    });\n    cy.readTableV2data(1, 5).then(data => {\n      expect(data).to.eq(\"8\");\n    });\n\n    // Rename customColumn1 to customColumn2\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"customColumn1\");\n    cy.get(\".t--property-pane-title\").click({\n      force: true\n    });\n    cy.get(\".t--property-pane-title\").type(\"customColumn2\", {\n      delay: 300\n    }).type(\"{enter}\");\n\n    // Ensure that renaming preserves existing data in the table\n    cy.readTableV2data(0, 5).then(data => {\n      expect(data).to.eq(\"9\");\n    });\n\n    // Ensure ascending/descending sorting works in the table with the renamed column\n    cy.sortColumn(\"customColumn2\", \"ascending\");\n    cy.readTableV2data(0, 5).then(data => {\n      expect(data).to.eq(\"0\");\n    });\n    cy.readTableV2data(1, 5).then(data => {\n      expect(data).to.eq(\"1\");\n    });\n    cy.sortColumn(\"customColumn2\", \"descending\");\n    cy.readTableV2data(0, 5).then(data => {\n      expect(data).to.eq(\"9\");\n    });\n    cy.readTableV2data(1, 5).then(data => {\n      expect(data).to.eq(\"8\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget V2 Functionality","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":13,"column":38,"index":643},"line":13,"code":"  it(\"1. Table Widget V2 Functionality\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n    cy.widgetText(\"Table1\", widgetsPage.tableWidgetV2, widgetsPage.widgetNameSpan);\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInput));\n    cy.wait(\"@updateLayout\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Widget V2 Functionality To Verify The Data","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":25,"column":57,"index":1074},"line":25,"code":"  it(\"2. Table Widget V2 Functionality To Verify The Data\", function () {\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table Widget V2 Functionality To Show a Base64 Image","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":32,"column":61,"index":1353},"line":32,"code":"  it(\"3. Table Widget V2 Functionality To Show a Base64 Image\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"image\");\n    cy.changeColumnType(\"Image\");\n    cy.isSelectRow(1);\n    const index = 1;\n    const imageVal = this.data.TableInput[index].image;\n    cy.readTableV2LinkPublish(index, \"1\").then(hrefVal => {\n      expect(hrefVal).to.contain(imageVal);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table Widget V2 Functionality To Check if Table is Sortable","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":43,"column":68,"index":1760},"line":43,"code":"  it(\"4. Table Widget V2 Functionality To Check if Table is Sortable\", function () {\n    cy.get(commonlocators.editPropBackButton).click();\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Confirm if isSortable is true\n    cy.get(commonlocators.isSortable).should(\"be.checked\");\n    // Publish App\n    cy.PublishtheApp();\n    // Confirm Current order\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    });\n    // Sort Username Column\n    cy.contains('[role=\"columnheader\"] .draggable-header', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    // Confirm order after sort\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    });\n    // Back to edit page\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Disable isSortable\n    // Confirm if isSortable is false\n    cy.togglebarDisable(commonlocators.isSortable);\n\n    // Publish App\n    cy.PublishtheApp();\n    // Confirm Current order\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    });\n    // Confirm Sort is disable on Username Column\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    // Confirm order after sort\n    cy.readTableV2dataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Tobias Funke\");\n    });\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Verify that table filter dropdown only includes filterable columns","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":111,"column":75,"index":4120},"line":111,"code":"  it(\"5. Verify that table filter dropdown only includes filterable columns\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.wait(500);\n    PropPane.UpdatePropertyFieldValue(\"Table data\", `{{[{step: 1, task: 1}]}}`);\n    cy.get(\".t--property-control-allowfiltering input\").click();\n    cy.editColumn(\"step\");\n    cy.get(\".t--table-filter-toggle-btn\").click();\n    [{\n      columnType: \"URL\",\n      expected: \"contain\"\n    }, {\n      columnType: \"Number\",\n      expected: \"contain\"\n    }, {\n      columnType: \"Date\",\n      expected: \"contain\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.contain\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.contain\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.contain\"\n    }, {\n      columnType: \"Menu button\",\n      expected: \"not.contain\"\n    }, {\n      columnType: \"Icon button\",\n      expected: \"not.contain\"\n    }, {\n      columnType: \"Plain text\",\n      expected: \"contain\"\n    }, {\n      columnType: \"Checkbox\",\n      expected: \"contain\"\n    }, {\n      columnType: \"Switch\",\n      expected: \"contain\"\n    }].forEach(data => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click();\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--table-filter-columns-dropdown\").click();\n      cy.get(\".t--dropdown-option\").should(data.expected, \"step\");\n    });\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click();\n    cy.makeColumnEditable(\"step\");\n    cy.get(\".t--table-filter-columns-dropdown\").click();\n    cy.get(\".t--dropdown-option\").should(\"not.contain\", \"Save / Discard\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Verify that table filter is retained when the tableData scehma doesn't change","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":163,"column":86,"index":5791},"line":163,"code":"  it(\"6. Verify that table filter is retained when the tableData scehma doesn't change\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    PropPane.UpdatePropertyFieldValue(\"Table data\", `{{[{number: \"1\", work: \"test\"}, {number: \"2\", work: \"celebrate!\"}]}}`);\n    table.OpenNFilterTable(\"number\", \"contains\", \"2\");\n    cy.get(\".t--table-filter-toggle-btn\").should(\"have.text\", \"Filters (1)\");\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.equal(\"2\");\n    });\n    PropPane.UpdatePropertyFieldValue(\"Table data\", `{{[{number: \"1.1\", work: \"test\"}, {number: \"2\", work: \"celebrate!\"}]}}`);\n    cy.get(\".t--table-filter-toggle-btn\").should(\"have.text\", \"Filters (1)\");\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.equal(\"2\");\n    });\n    cy.get(\".t--close-filter-btn\").click({\n      force: true\n    });\n    PropPane.UpdatePropertyFieldValue(\"Table data\", `{{[{number: \"1.1\", task: \"test\"}, {number: \"2\", task: \"celebrate!\"}]}}`);\n    cy.get(\".t--table-filter-toggle-btn\").should(\"have.text\", \"Filters\");\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.equal(\"1.1\");\n    });\n    table.OpenNFilterTable(\"number\", \"contains\", \"2\");\n    cy.get(\".t--table-filter-toggle-btn\").should(\"have.text\", \"Filters (1)\");\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.equal(\"2\");\n    });\n    cy.get(\".t--close-filter-btn\").click({\n      force: true\n    });\n    PropPane.UpdatePropertyFieldValue(\"Table data\", `{{[{number: \"1\", task: \"test\"}, {number: \"2\", task: \"celebrate!\"}]}}`);\n    cy.get(\".t--table-filter-toggle-btn\").should(\"have.text\", \"Filters (1)\");\n    cy.readTableV2data(0, 0).then(val => {\n      expect(val).to.equal(\"2\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. should check that adding cyclic dependency in the table doesn't crash the app","suites":["Table Widget V2 Functionality"],"updatePoint":{"line":198,"column":86,"index":7496},"line":198,"code":"  it(\"7. should check that adding cyclic dependency in the table doesn't crash the app\", () => {\n    //cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", `{{Table1}}`);\n    cy.get(\".t--widget-tablewidgetv2\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget V2 Data validation with Switch ON","suites":["Table Widget V2 and Switch binding Functionality"],"updatePoint":{"line":7,"column":55,"index":295},"line":7,"code":"  it(\"1. Table Widget V2 Data validation with Switch ON\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"30\");\n      cy.log(\"the value is\" + tabValue);\n    });\n    cy.get(\".t--switch-widget-active .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"9\");\n      cy.log(\"the value is\" + tabValue);\n    });\n    cy.get(\".t--switch-widget-inactive .bp3-control-indicator\").click({\n      force: true\n    });\n    cy.wait(5000);\n    cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"30\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Selected row and binding with Text widget","suites":["Table Widget V2 and Switch binding Functionality"],"updatePoint":{"line":33,"column":50,"index":1184},"line":33,"code":"  it(\"2. Selected row and binding with Text widget\", function () {\n    cy.wait(5000);\n    cy.get(\".t--table-multiselect\").eq(1).click({\n      force: true\n    });\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", \"30\");\n    cy.get(\".t--table-multiselect\").eq(0).click({\n      force: true\n    });\n    cy.get(\".t--draggable-textwidget .bp3-ui-text span\").should(\"contain.text\", \"29\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget Functionality To Check with changing schema of tabledata","suites":["Table Widget"],"updatePoint":{"line":6,"column":78,"index":391},"line":6,"code":"  it(\"1. Table Widget Functionality To Check with changing schema of tabledata\", () => {\n    let jsContext = `{{Switch1.isSwitchedOn?[{name: \"joe\"}]:[{employee_name: \"john\"}];}}`;\n    cy.NavigateToHome();\n    cy.get(homePage.createNew).first().click({\n      force: true\n    });\n    cy.wait(\"@createNewApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"switchwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 200,\n      y: 300\n    });\n    _.propPane.ToggleJsMode(\"Table data\");\n    cy.wait(1000);\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--property-control-tabledata\").then($el => {\n      cy.updateCodeInput($el, jsContext);\n    });\n    cy.PublishtheApp();\n    cy.wait(5000);\n    cy.getTableV2DataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.wait(2000);\n    cy.readTableV2dataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(\".t--switch-widget-active\").first().click();\n    cy.wait(3000);\n    cy.getTableV2DataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"john\");\n    });\n    cy.get(\".t--switch-widget-inactive\").first().click();\n    cy.wait(1000);\n    cy.getTableV2DataSelector(\"0\", \"0\").then(element => {\n      cy.get(element).should(\"be.visible\");\n    });\n    cy.readTableV2dataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(publish.backToEditor).click().wait(1000);\n    cy.wait(5000);\n    cy.CheckAndUnfoldEntityItem(\"Widgets\");\n    _.entityExplorer.DeleteWidgetFromEntityExplorer(\"Switch1\");\n    _.entityExplorer.DeleteWidgetFromEntityExplorer(\"Table1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_tabledata_schema_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify click on URL column with display text takes to the correct link","suites":["16108 - Verify Table URL column bugs"],"updatePoint":{"line":10,"column":76,"index":413},"line":10,"code":"  it(\"Verify click on URL column with display text takes to the correct link\", function () {\n    table.ReadTableRowColumnData(0, 0, \"v2\").then($cellData => {\n      expect($cellData).to.eq(\"Profile pic\");\n    });\n    table.ReadTableRowColumnData(3, 0, \"v2\").then($cellData => {\n      expect($cellData).to.eq(\"Profile pic\");\n    });\n    table.AssertURLColumnNavigation(0, 0, \"https://randomuser.me/api/portraits/med/women/39.jpg\", \"v2\");\n    table.AssertURLColumnNavigation(3, 0, \"https://randomuser.me/api/portraits/med/men/52.jpg\", \"v2\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Url_Column_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget V2 with Add button test and validation","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":9,"column":60,"index":461},"line":9,"code":"  it(\"1. Table widget V2 with Add button test and validation\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tablV2Btn).should(\"not.exist\");\n    // Changing column data type to \"Button\"\n    cy.changeColumnType(\"Button\");\n    // Changing the computed value (data) to \"orderAmount\"\n    cy.updateComputedValue(testdata.currentRowOrderAmt);\n    // Selecting button action to show message\n    cy.getAlert(\"onClick\", \"Successful \".concat(testdata.currentRowEmail));\n    // Close Property pane\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    // Validating the button action by clicking\n    cy.get(widgetsPage.tableV2Btn).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    // Validating the toast message\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"Successful tobias.funke@reqres.in\");\n    });\n\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleOnClick).click({\n      force: true\n    });\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{showAlert('Successful' + currentRow.email).then(() => showAlert('second alert')) }}\");\n    });\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n\n    // Validating the button action by clicking\n    cy.get(widgetsPage.tableV2Btn).last().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      expect(text).to.equal(\"second alert\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Button color validation","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":58,"column":38,"index":2293},"line":58,"code":"  it(\"2. Table Button color validation\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    const color1 = \"rgb(255, 0, 0)\";\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color1);\n    cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color1);\n\n    // Changing the color again to reproduce issue #9526\n    const color2 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear()\n    // following wait is required to reproduce #9526\n    .wait(600).type(color2);\n    cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color2);\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table widget triggeredRow property should be accessible","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":78,"column":64,"index":3058},"line":78,"code":"  it(\"3. Table widget triggeredRow property should be accessible\", function () {\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget triggeredRow property should be same even after sorting the table","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":81,"column":87,"index":3243},"line":81,"code":"  it(\"4. Table widget triggeredRow property should be same even after sorting the table\", function () {\n    //sort table date on second column\n    cy.get(\".draggable-header \").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget add new icon button column","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":89,"column":48,"index":3522},"line":89,"code":"  it(\"5. Table widget add new icon button column\", function () {\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    // hide id column\n    cy.makeColumnVisible(\"id\");\n    cy.wait(1000);\n    // click on Add new Column.\n    //cy.get(\"[data-testid='t--property-pane-back-btn']\").click({ force: true });\n    cy.get(\".t--add-column-btn\").click();\n    //Open New Custom Column\n    cy.editColumn(\"customColumn1\");\n    // Change Column type to icon Button\n    cy.changeColumnType(\"Icon button\");\n    // Select Icon from Icon Control\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidgetv2 .tbody .bp3-icon-add\").should(\"exist\");\n\n    // disabled icon btn\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.getTableV2DataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + \" button.bp3-disabled\").should(\"exist\");\n    });\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox);\n\n    //Delete Column\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    cy.deleteColumn(\"customColumn1\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget add new menu button column","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":125,"column":48,"index":4770},"line":125,"code":"  it(\"6. Table widget add new menu button column\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // click on Add new Column.\n    cy.get(\".t--add-column-btn\").click();\n    //Open New Custom Column\n    cy.editColumn(\"customColumn1\");\n    // Change Column type to icon Button\n    cy.changeColumnType(\"Menu button\");\n    //Changing the text on the Menu button\n    cy.testJsontext(\"text\", \"Menu button\");\n    cy.moveToStyleTab();\n    // Select Icon from Icon Control\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    // validate icon\n    cy.get(\".t--widget-tablewidgetv2 .tbody .bp3-icon-add\").should(\"exist\");\n    cy.get(\".editable-text-container\").eq(1).click();\n    // validate label\n    cy.contains(\"Menu button\").should(\"exist\");\n\n    // const color1 = \"rgb(255, 255, 0)\";\n    // cy.get(widgetsPage.menuColor)\n    //   .clear()\n    //   .click({ force: true })\n    //   .type(color1);\n    // cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color1);\n\n    // // Changing the color again to reproduce issue #9526\n    // const color2 = \"rgb(255, 0, 0)\";\n    // cy.get(widgetsPage.menuColor)\n    //   .clear()\n    //   .click({ force: true })\n    //   // following wait is required to reproduce #9526\n    //   .wait(5000)\n    //   .type(color2);\n    // cy.get(widgetsPage.tableV2Btn).should(\"have.css\", \"background-color\", color2);\n\n    cy.moveToContentTab();\n    // Add a Menu item 1\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    });\n    // Edit a Menu item\n    cy.get(\".t--property-control-menuitems .t--edit-column-btn\").first().click({\n      force: true\n    });\n    cy.moveToStyleTab();\n    // update menu item background color\n    cy.get(widgetsPage.backgroundcolorPickerNew).type(\"#03b365\", {\n      force: true\n    }).wait(500);\n    cy.moveToContentTab();\n    //  Add action to the menu Item\n    cy.getAlert(\"onClick\", \"Successful \".concat(testdata.currentRowEmail));\n    // Go back to table property pane\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    // Add a Menu item 2\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    });\n    // Edit a Menu item\n    cy.get(\".t--property-control-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    cy.wait(500);\n    cy.moveToStyleTab();\n    // update menu item background color\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#FFC13D\", {\n      force: true\n    }).wait(500);\n    // Go back to table property pane\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n\n    // Add a Menu item 3\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    });\n    // Edit a Menu item\n    cy.get(\".t--property-control-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    cy.wait(500);\n    cy.moveToStyleTab();\n    // update menu item background color\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#3366FF\", {\n      force: true\n    }).wait(500);\n    // Go back to table property pane\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n\n    // Close Property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Click on the Menu button\n    cy.contains(\"Menu button\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.closePropertyPane();\n\n    // Edit a Menu item\n    cy.get(\".t--property-control-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.moveToContentTab();\n    cy.wait(500);\n    cy.get(\".t--property-control-disabled input\").click({\n      force: true\n    });\n    //cy.closePropertyPane();\n\n    // Click on the Menu button\n    cy.get(\".t--widget-tablewidgetv2 .bp3-button\").first().scrollIntoView().should(\"be.visible\");\n    cy.get(\".t--widget-tablewidgetv2 .bp3-button\").first().click({\n      force: true\n    });\n    cy.wait(2000);\n    // check Menu Item 3 is disable\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.css\", \"background-color\", \"rgb(250, 250, 250)\");\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.class\", \"bp3-disabled\");\n\n    // Click on the Menu Item\n    cy.get(\".bp3-menu-item\").eq(0).click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    // Validating the toast message\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"Successful tobias.funke@reqres.in\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget test on button icon click, row should not get deselected","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":269,"column":78,"index":9507},"line":269,"code":"  it(\"7. Table widget test on button icon click, row should not get deselected\", () => {\n    cy.get(widgetsPage.tableV2IconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n    //click icon button again\n    cy.get(widgetsPage.tableV2IconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n    cy.wait(500);\n    cy.get(\"[data-testid='t--property-pane-back-btn']\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Table widget test on button when transparent","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":287,"column":53,"index":10115},"line":287,"code":"  it(\"8. Table widget test on button when transparent\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Open column details of \"id\".\n    cy.editColumn(\"id\");\n    // Changing column \"Button\" color to transparent\n    cy.moveToStyleTab();\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(widgetsPage.transparent).click({\n      force: true\n    });\n    cy.get(\".td[data-colindex=5][data-rowindex=0] .bp3-button\").should(\"have.css\", \"background-color\", \"rgba(0, 0, 0, 0)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Copy paste table widget and valdiate application status","suites":["Test Suite to validate copy/paste table Widget V2"],"updatePoint":{"line":10,"column":64,"index":541},"line":10,"code":"  it(\"1. Copy paste table widget and valdiate application status\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidgetV2, widgetsPage.widgetNameSpan);\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"be.visible\");\n\n    //Check after copying new table widget should not have any warnings\n    cy.get('.t--widget-propertypane-toggle [name=\"warning\"]').should(\"not.exist\");\n    cy.CheckAndUnfoldWidgets();\n    _.entityExplorer.ActionContextMenuByEntityName(\"Table1Copy\", \"Show bindings\");\n    cy.wait(200);\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(22);\n      expect($lis.eq(0)).to.contain(\"{{Table1Copy.selectedRow}}\");\n      expect($lis.eq(1)).to.contain(\"{{Table1Copy.selectedRows}}\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Copy_Paste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify default table row Data","suites":["Table Widget V2 property pane deafult feature validation"],"updatePoint":{"line":8,"column":38,"index":370},"line":8,"code":"  it(\"1. Verify default table row Data\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Open Widget side bar\n    cy.get(widgetsPage.addWidget).click();\n    // Drag and drop table widget\n    cy.dragAndDropToCanvas(\"tablewidgetv2\", {\n      x: 200,\n      y: 100\n    });\n    _.table.AddSampleTableData();\n    // close Widget side bar\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    cy.wait(2000);\n    _.entityExplorer.SelectEntityByName(\"Table2\");\n\n    // Verify default array data\n    cy.wait(2000);\n    cy.readTableV2dataFromSpecificIndex(\"0\", \"0\", 0).then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the table is\" + tabValue);\n      cy.get(\".bp3-ui-text span\").eq(1).should(\"have.text\", tabData);\n    });\n    _.entityExplorer.SelectEntityByName(\"Table1\");\n    cy.wait(2000);\n    cy.readTableV2dataFromSpecificIndex(\"2\", \"0\", 1).then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the table is\" + tabValue);\n      cy.get(\".bp3-ui-text span\").eq(0).should(\"have.text\", tabData);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Default_Row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to add column","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":7,"column":27,"index":280},"line":7,"code":"  it(\"1. Test to add column\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    // Adding new column\n    cy.addColumnV2(\"CustomColumn\");\n    cy.tableV2ColumnDataValidation(\"customColumn1\"); //To be updated later\n    // Hiding all other columns in the table from property pane\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    // Validating the newly added column\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Edit column name and validate test for computed value","suites":["Table Widget V2 property pane feature validation"],"updatePoint":{"line":20,"column":62,"index":854},"line":20,"code":"  it(\"2. Edit column name and validate test for computed value\", function () {\n    // Open column detail by draggable id of the column\n    cy.editColumn(\"customColumn1\");\n    // Validating single cell value\n    cy.readTableV2dataPublish(\"1\", \"2\").then(() => {\n      // Chaging the computed value to \"Emails\"\n      cy.updateComputedValueV2(testdata.currentRowWithIdOutside);\n      // Validating single cell value\n      cy.readTableV2dataPublish(\"1\", \"1\").then(tabData => {\n        expect(tabData).to.be.equal(\"#lindsay.ferguson@reqres.in\");\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget v2 new menu button column should not deselect row","suites":["Table Widget v2 property pane feature validation"],"updatePoint":{"line":6,"column":71,"index":261},"line":6,"code":"  it(\"1. Table widget v2 new menu button column should not deselect row\", function () {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n    cy.contains(\"Open Menu\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/TableV2_Widget_Selected_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that cell is not wrapped when cell wrapping is disabled","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":13,"column":77,"index":576},"line":13,"code":"  it(\"1. should check that cell is not wrapped when cell wrapping is disabled\", () => {\n    cy.getTableCellHeight(1, 0).then(height => {\n      expect(height).to.equal(\"28px\");\n    });\n\n    // Enable cell wrapping and check that height is more than 28px\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"image\");\n    cy.get(\".t--property-control-cellwrapping input\").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.getTableCellHeight(1, 0).then(height => {\n      expect(height).to.not.equal(\"28px\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that a tooltip is shown when hovered on a ellipsised content","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":29,"column":82,"index":1125},"line":29,"code":"  it(\"2. should check that a tooltip is shown when hovered on a ellipsised content\", () => {\n    cy.get(`.td[data-colindex=2][data-rowindex=0] .t--table-cell-tooltip-target`).trigger(\"mouseenter\");\n    cy.get(\".bp3-tooltip\").should(\"exist\");\n    cy.get(\".bp3-tooltip .bp3-popover-content\").should(\"contain\", \"michael.lawson@reqres.in\");\n    cy.get(`.td[data-colindex=2][data-rowindex=1] .t--table-cell-tooltip-target`).trigger(\"mouseenter\", {\n      force: true\n    });\n    cy.get(\".bp3-tooltip\").should(\"exist\");\n    cy.get(\".bp3-tooltip .bp3-popover-content\").should(\"contain\", \"lindsay.ferguson@reqres.in\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that other cells in the row is not wrapped when one of the cell is wrapped","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":39,"column":96,"index":1755},"line":39,"code":"  it(\"3. should check that other cells in the row is not wrapped when one of the cell is wrapped\", () => {\n    cy.getTableCellHeight(2, 0).then(height => {\n      expect(height).to.equal(\"28px\");\n    });\n    cy.getTableCellHeight(3, 0).then(height => {\n      expect(height).to.equal(\"28px\");\n    });\n\n    // Enable cell wrapping and check that height is more than 28px\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.wait(2000);\n    cy.editColumn(\"email\");\n    cy.get(\".t--property-control-cellwrapping input\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.getTableCellHeight(2, 0).then(height => {\n      expect(height).to.not.equal(\"28px\");\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that cell wrapping option is only available for plain text, number and URL","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":59,"column":96,"index":2425},"line":59,"code":"  it(\"4. should check that cell wrapping option is only available for plain text, number and URL\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"email\");\n    [{\n      columnType: \"URL\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Plain text\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Number\",\n      expected: \"exist\"\n    }, {\n      columnType: \"Date\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Image\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Video\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Menu button\",\n      expected: \"not.exist\"\n    }, {\n      columnType: \"Icon button\",\n      expected: \"not.exist\"\n    }].forEach((data, i) => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data.columnType).click({\n        force: true\n      });\n      cy.wait(\"@updateLayout\");\n      cy.get(\".t--property-control-cellwrapping\").should(data.expected);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. should check that plain text, number and URL column is getting wrapped when cell wrapping is enabled","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":98,"column":109,"index":3512},"line":98,"code":"  it(\"5. should check that plain text, number and URL column is getting wrapped when cell wrapping is enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"id\");\n    [\"URL\", \"Number\", \"Plain text\"].forEach((data, i) => {\n      cy.get(commonlocators.changeColType).last().click();\n      cy.get(\".t--dropdown-option\").children().contains(data).click();\n      cy.wait(\"@updateLayout\");\n      cy.getTableCellHeight(0, 0).then(height => {\n        expect(height).to.equal(\"28px\");\n      });\n      cy.get(\".t--property-control-cellwrapping input\").first().click();\n      cy.wait(1000);\n      cy.getTableCellHeight(0, 0).then(height => {\n        expect(height).to.not.equal(\"28px\");\n      });\n      cy.get(\".t--property-control-cellwrapping input\").first().click();\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. should check that pageSize does not change when cell wrapping is enabled","suites":["Table Widget text wrapping functionality"],"updatePoint":{"line":116,"column":81,"index":4281},"line":116,"code":"  it(\"6. should check that pageSize does not change when cell wrapping is enabled\", () => {\n    cy.openPropertyPane(\"tablewidgetv2\");\n    cy.editColumn(\"image\");\n    let pageSizeBeforeWrapping;\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").invoke(\"text\").then(value => {\n      pageSizeBeforeWrapping = value;\n    });\n    cy.get(\".t--property-control-cellwrapping input\").first().click();\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget .bp3-ui-text\").invoke(\"text\").then(value => {\n      expect(pageSizeBeforeWrapping).to.equal(value);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/Text_wrapping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should check that row is getting rendered","suites":["Table Widget Virtualized Row"],"updatePoint":{"line":24,"column":50,"index":773},"line":24,"code":"  it(\"1. should check that row is getting rendered\", () => {\n    cy.get(\".tr[data-rowindex]\").should(\"exist\");\n    cy.get(\".td[data-rowindex]\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/virtual_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should check that virtual rows are getting rendered when scrolling through the table","suites":["Table Widget Virtualized Row"],"updatePoint":{"line":28,"column":93,"index":983},"line":28,"code":"  it(\"2. should check that virtual rows are getting rendered when scrolling through the table\", () => {\n    cy.get(\".tr[data-rowindex]\").should(\"not.have.length\", totalRows);\n    cy.get(\".tr[data-rowindex='0']\").should(\"exist\");\n    cy.get(\".virtual-list.simplebar-content\").scrollTo(\"bottom\");\n    cy.wait(500);\n    cy.get(\".tr[data-rowindex='0']\").should(\"not.exist\");\n    cy.get(\".tr[data-rowindex='98']\").should(\"exist\");\n    cy.get(\".virtual-list.simplebar-content\").scrollTo(\"top\");\n    cy.wait(500);\n    cy.get(\".tr[data-rowindex='0']\").should(\"exist\");\n    cy.get(\".tr[data-rowindex='98']\").should(\"not.exist\");\n    cy.get(\".t--virtual-row\").should(\"exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/virtual_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should check that virtual rows feature is turned off when cell wrapping is enabled","suites":["Table Widget Virtualized Row"],"updatePoint":{"line":41,"column":91,"index":1654},"line":41,"code":"  it(\"3. should check that virtual rows feature is turned off when cell wrapping is enabled\", () => {\n    cy.editColumn(\"step\");\n    cy.wait(500);\n    _.propPane.ToggleOnOrOff(\"Cell wrapping\", \"On\");\n    cy.get(\".tr[data-rowindex]\").should(\"have.length\", totalRows);\n    cy.get(\".tr[data-rowindex='0']\").should(\"exist\");\n    cy.get(\".tr[data-rowindex='98']\").should(\"exist\");\n    cy.get(\".table .simplebar-content-wrapper\").scrollTo(\"bottom\");\n    cy.wait(500);\n    cy.get(\".tr[data-rowindex='0']\").should(\"exist\");\n    cy.get(\".tr[data-rowindex='98']\").should(\"exist\");\n    cy.get(\".table .simplebar-content-wrapper\").scrollTo(\"top\");\n    cy.wait(500);\n    cy.get(\".tr[data-rowindex='0']\").should(\"exist\");\n    cy.get(\".tr[data-rowindex='98']\").should(\"exist\");\n    cy.get(\".t--virtual-row\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/virtual_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. should check that virtual rows feature is turned off when server side pagination is disabled","suites":["Table Widget Virtualized Row"],"updatePoint":{"line":58,"column":101,"index":2484},"line":58,"code":"  it(\"4. should check that virtual rows feature is turned off when server side pagination is disabled\", () => {\n    _.propPane.ToggleOnOrOff(\"Cell wrapping\", \"Off\");\n    _.propPane.NavigateBackToPropertyPane();\n    cy.wait(500);\n    _.propPane.ToggleOnOrOff(\"Show pagination\", \"On\");\n    cy.wait(500);\n    _.propPane.ToggleOnOrOff(\"Server side pagination\", \"Off\");\n    cy.get(\".tr[data-rowindex]\").should(\"have.length\", 5);\n    cy.get(\".t--virtual-row\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/TableV2/virtual_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate parsing link","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":12,"column":35,"index":507},"line":12,"code":"  it(\"Test to validate parsing link\", function () {\n    // Add link to text widget\n    cy.testCodeMirror(\"app.appsmith.com\");\n    // check if it's a link when no http or https is passed,\n    cy.get(`${commonlocators.headingTextStyle} a`).should(\"have.attr\", \"href\", \"http://app.appsmith.com\");\n\n    // Add link to text widget\n    cy.testCodeMirror(\"https://app.appsmith.com\");\n    // check if it's parsed as link\n    cy.get(commonlocators.headingTextStyle);\n    cy.contains(\"a\", \"https://app.appsmith.com\").should(\"have.attr\", \"href\", \"https://app.appsmith.com\");\n    // disable parsing as link\n    cy.get(\".t--property-control-disablelink input\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    // check if it's parsed as text\n    cy.contains(\"a\", \"https://app.appsmith.com\").should(\"not.exist\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Heading, Text Name Validation","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":32,"column":50,"index":1374},"line":32,"code":"  it(\"Text-TextStyle Heading, Text Name Validation\", function () {\n    //changing the Text Name and verifying\n    cy.widgetText(this.data.TextName, widgetsPage.textWidget, widgetsPage.widgetNameSpan);\n\n    //Changing the text label\n    cy.testCodeMirror(this.data.TextLabelValueScrollable);\n    cy.moveToStyleTab();\n    cy.ChangeTextStyle(this.data.TextHeading, commonlocators.headingTextStyle, this.data.TextLabelValueScrollable);\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle).should(\"have.text\", this.data.TextLabelValueScrollable).should(\"have.css\", \"font-size\", \"16px\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text format","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":47,"column":34,"index":2062},"line":47,"code":"  it(\"Test to validate text format\", function () {\n    cy.moveToStyleTab();\n    //Changing the Text Style's and validating\n    cy.get(widgetsPage.italics).click();\n    cy.readTextDataValidateCSS(\"font-style\", \"italic\");\n    cy.get(widgetsPage.bold).click();\n    cy.readTextDataValidateCSS(\"font-weight\", \"400\");\n    cy.get(widgetsPage.bold).click();\n    cy.readTextDataValidateCSS(\"font-weight\", \"700\");\n    cy.get(widgetsPage.italics).click();\n    cy.readTextDataValidateCSS(\"font-style\", \"normal\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate color changes in text and background","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":60,"column":59,"index":2622},"line":60,"code":"  it(\"Test to validate color changes in text and background\", function () {\n    cy.moveToStyleTab();\n    //Changing the Text Style's and validating\n    cy.get(widgetsPage.textColor).first().click({\n      force: true\n    });\n    cy.selectColor(\"textcolor\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(126, 34, 206)\");\n    cy.get(widgetsPage.textColor).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(128, 0, 128)\");\n\n    //Checks the cell background with color picker\n    cy.get(`${widgetsPage.cellBackground} input`).first().click({\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.selectColor(\"backgroundcolor\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n\n    //Toggle JS check with cell background:\n    cy.get(widgetsPage.cellBackgroundToggle).click({\n      force: true\n    });\n    cy.updateCodeInput(widgetsPage.cellBackground, \"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(128, 0, 128)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text alignment","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":99,"column":37,"index":4003},"line":99,"code":"  it(\"Test to validate text alignment\", function () {\n    cy.xpath(widgetsPage.textCenterAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"center\");\n    cy.xpath(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"right\");\n    cy.xpath(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"left\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate enable scroll feature","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":114,"column":44,"index":4504},"line":114,"code":"  it(\"Test to validate enable scroll feature\", function () {\n    cy.moveToContentTab();\n    cy.get(\"[data-value='SCROLL']\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.headingTextStyle).trigger(\"mouseover\", {\n      force: true\n    });\n    cy.get(commonlocators.headingTextStyle).scrollIntoView({\n      duration: 2000\n    });\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border width, color and verity","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":128,"column":41,"index":4906},"line":128,"code":"  it(\"Test border width, color and verity\", function () {\n    cy.moveToStyleTab();\n    cy.testJsontext(\"borderwidth\", \"10\");\n    cy.wait(\"@updateLayout\");\n    cy.get(`${widgetsPage.textWidget} .t--text-widget-container`).should(\"have.css\", \"border-width\", \"10px\");\n    cy.selectColor(\"bordercolor\");\n    cy.readTextDataValidateCSS(\"border-color\", \"rgb(205, 213, 223)\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Heading, Text Name Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":12,"column":50,"index":510},"line":12,"code":"  it(\"Text-TextStyle Heading, Text Name Validation\", function () {\n    //changing the Text Name and verifying\n    cy.widgetText(this.data.TextName, widgetsPage.textWidget, widgetsPage.widgetNameSpan);\n    //Changing the text label\n    cy.testCodeMirror(this.data.TextLabelValue);\n    cy.moveToStyleTab();\n    cy.ChangeTextStyle(this.data.TextHeading, commonlocators.headingTextStyle, this.data.TextLabelValue);\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"16px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text Email Parsing Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":23,"column":35,"index":1097},"line":23,"code":"  it(\"Text Email Parsing Validation\", function () {\n    cy.testCodeMirror(\"ab.end@domain.com\");\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle + \" a\").should(\"have.attr\", \"href\", \"mailto:ab.end@domain.com\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Label Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":29,"column":37,"index":1363},"line":29,"code":"  it(\"Text-TextStyle Label Validation\", function () {\n    cy.testCodeMirror(this.data.TextLabelValue);\n    cy.moveToStyleTab();\n    //Changing the Text Style's and validating\n    cy.ChangeTextStyle(this.data.TextLabel, commonlocators.labelTextStyle, this.data.TextLabelValue);\n    cy.PublishtheApp();\n    cy.get(commonlocators.labelTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"14px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Body Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":37,"column":36,"index":1798},"line":37,"code":"  it(\"Text-TextStyle Body Validation\", function () {\n    cy.moveToStyleTab();\n    cy.ChangeTextStyle(this.data.TextBody, commonlocators.bodyTextStyle, this.data.TextLabelValue);\n    cy.PublishtheApp();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"20px\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widget depends on itself","suites":["Text Widget Functionality"],"updatePoint":{"line":43,"column":35,"index":2133},"line":43,"code":"  it(\"Text widget depends on itself\", function () {\n    cy.testJsontext(\"text\", `{{${this.data.TextName}}}`);\n    cy.get(commonlocators.toastBody).first().contains(\"Cyclic\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", `{{${this.data.TextName}}}`);\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check default overflow property is No overflow","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":7,"column":52,"index":300},"line":7,"code":"  it(\"Check default overflow property is No overflow\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\"[data-value='NONE']\").last().should(\"have.attr\", \"data-selected\", \"true\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate long text is not truncating in default","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":12,"column":53,"index":530},"line":12,"code":"  it(\"Validate long text is not truncating in default\", function () {\n    cy.get(`.appsmith_widget_${dsl.dsl.children[0].widgetId} .t--draggable-textwidget`).click({\n      force: true\n    });\n    cy.testJsontext(\"text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\");\n    cy.get(`.appsmith_widget_${dsl.dsl.children[0].widgetId} .t--widget-textwidget-truncate`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Enable Truncate Text option and Validate","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":19,"column":46,"index":1443},"line":19,"code":"  it(\"Enable Truncate Text option and Validate\", function () {\n    cy.wait(2000);\n    cy.get(\"body\").type(\"{esc}\");\n    cy.get(\"[data-value='TRUNCATE']\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.get(`.appsmith_widget_${dsl.dsl.children[0].widgetId} .t--widget-textwidget-truncate`).should(\"exist\");\n    cy.closePropertyPane();\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open modal on click and Validate","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":29,"column":38,"index":1798},"line":29,"code":"  it(\"Open modal on click and Validate\", function () {\n    cy.get(`.appsmith_widget_${dsl.dsl.children[0].widgetId} .t--widget-textwidget-truncate`).click();\n    cy.get(\".t--widget-textwidget-truncate-modal\").should(\"exist\");\n    // close modal\n    cy.get(\".t--widget-textwidget-truncate-modal span[name='cross']\").click({\n      force: true\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add Long Text to large text box and validate","suites":["Text Widget Truncate Functionality"],"updatePoint":{"line":37,"column":50,"index":2165},"line":37,"code":"  it(\"Add Long Text to large text box and validate\", function () {\n    cy.get(`.appsmith_widget_${dsl.dsl.children[1].widgetId} .t--draggable-textwidget`).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.testJsontext(\"text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\");\n    cy.get(`.appsmith_widget_${dsl.dsl.children[1].widgetId} .t--widget-textwidget-truncate`).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/Text_truncate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Change the cell background color","suites":["Text Widget Cell Background and Text Size Validation"],"updatePoint":{"line":8,"column":38,"index":376},"line":8,"code":"  it(\"Change the cell background color\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.moveToStyleTab();\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n\n    //Check if the cell background is #03b365\n    cy.selectColor(\"backgroundcolor\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(126, 34, 206)\");\n\n    //Toggle to JS mode\n    cy.get(widgetsPage.cellBackgroundToggle).click().wait(200);\n\n    //Check if the typed color red is reflecting in the background color and in the evaluated value\n    cy.updateCodeInput(widgetsPage.cellBackground, \"red\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(255, 0, 0)\");\n    cy.EvaluateCurrentValue(\"red\");\n\n    //Check if the typed color #03b365 is reflecting in the background color and in the evaluated value\n    cy.updateCodeInput(widgetsPage.cellBackground, \"#03b365\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n    cy.EvaluateCurrentValue(\"#03b365\");\n\n    //Check if the typed color transparent is reflecting in the background color and in the evaluated value\n    cy.updateCodeInput(widgetsPage.cellBackground, \"\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgba(0, 0, 0, 0)\");\n    cy.get(commonlocators.evaluatedCurrentValue).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/TextWidget_BgColor_TextSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Change the text sizes","suites":["Text Widget Cell Background and Text Size Validation"],"updatePoint":{"line":39,"column":27,"index":1883},"line":39,"code":"  it(\"Change the text sizes\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.moveToStyleTab();\n\n    //Check the label text size with dropdown\n    cy.get(widgetsPage.textSizeNew).last().click({\n      force: true\n    });\n    cy.wait(100);\n    cy.selectTextSize(\"S\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"14px\");\n\n    //Toggle JS mode\n    cy.get(widgetsPage.toggleTextSizeNew).click().wait(200);\n\n    //Check if the typed size HEADING2 is reflecting in the background color and in the evaluated value\n    cy.updateCodeInput(\".t--property-control-fontsize\", \"18px\");\n    cy.focused().blur();\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"18px\");\n\n    //Check for if the text size changes to default size when set to blank in JS mode:\n    cy.updateCodeInput(\".t--property-control-fontsize\", \"\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"16px\");\n    cy.get(commonlocators.evaluatedCurrentValue).should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/TextWidget_BgColor_TextSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting Error validation on mouseover and errorlog tab","suites":["Linting warning validation with text widget"],"updatePoint":{"line":7,"column":60,"index":323},"line":7,"code":"  it(\"Linting Error validation on mouseover and errorlog tab\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500);\n\n    //lint mark validation\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    //lint warning message\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'Nodata' is not defined.\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    //lint warning message\n    cy.get(commonlocators.lintErrorMsg).last().should(\"be.visible\").contains(\"'lintErrror' is not defined.\");\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.errorTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.debugErrorMsg).should(\"have.length\", 3);\n  });","file":"e2e/Regression/ClientSide/Widgets/Text/TextWidget_LintErrorValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should reduce canvas height when a widget is deleted","suites":["reduce long canvas height on widget operation"],"updatePoint":{"line":7,"column":61,"index":301},"line":7,"code":"  it(\"1. Should reduce canvas height when a widget is deleted\", () => {\n    //select a widget\n    cy.wait(2000);\n    cy.get(`#${dsl.dsl.children[1].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n    cy.document().then(doc => {\n      const element = doc.querySelector(\".appsmith_widget_0\");\n      const initialHeight = element.getBoundingClientRect().height;\n      //delete widget\n      _.propPane.DeleteWidgetFromPropertyPane(\"Button1\");\n      //canvas height should be lesser now\n      cy.wait(1000).then(() => {\n        expect(element.getBoundingClientRect().height).to.be.lessThan(initialHeight);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetCanvas_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. When non Layout widget is selected, it should place below the widget selected","suites":["Widget Copy paste"],"updatePoint":{"line":12,"column":86,"index":652},"line":12,"code":"  it(\"1. When non Layout widget is selected, it should place below the widget selected\", function () {\n    // Selection\n    cy.get(`#${dsl.dsl.children[1].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //copy\n    cy.get(\"body\").type(`{${modifierKey}}{c}`);\n    cy.get(commonLocators.toastmsg).contains(\"Copied\");\n\n    //paste\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(widgetsPage.chartWidget).should(\"have.length\", 2);\n\n    // verify the position\n    cy.get(widgetsPage.chartWidget).eq(0).then(element => {\n      const elementTop = parseFloat(element.css(\"top\"));\n      const elementHeight = parseFloat(element.css(\"height\"));\n      const pastedWidgetTop = (elementTop + elementHeight + 10).toString() + \"px\";\n      cy.get(widgetsPage.chartWidget).eq(1).invoke(\"attr\", \"style\").should(\"contain\", `left: ${element.css(\"left\")}`).should(\"contain\", `top: ${pastedWidgetTop}`);\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. When Layout widget is selected, it should place it inside the layout widget","suites":["Widget Copy paste"],"updatePoint":{"line":35,"column":84,"index":1632},"line":35,"code":"  it(\"2. When Layout widget is selected, it should place it inside the layout widget\", function () {\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n\n    // Selection\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //paste\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).find(widgetsPage.chartWidget).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. When widget inside the layout widget is selected, then it should paste inside the layout widget below the selected widget","suites":["Widget Copy paste"],"updatePoint":{"line":50,"column":130,"index":2186},"line":50,"code":"  it(\"3. When widget inside the layout widget is selected, then it should paste inside the layout widget below the selected widget\", function () {\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n\n    // Selection\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).find(widgetsPage.chartWidget).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //paste\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).find(widgetsPage.chartWidget).should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. When modal is open, it should paste inside the modal","suites":["Widget Copy paste"],"updatePoint":{"line":65,"column":61,"index":2701},"line":65,"code":"  it(\"4. When modal is open, it should paste inside the modal\", () => {\n    //add modal widget\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"modalwidget\", {\n      x: 300,\n      y: 700\n    });\n    cy.get(\".t--modal-widget\").should(\"exist\");\n\n    //paste\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    cy.get(\".t--modal-widget\").find(widgetsPage.chartWidget).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. When widget Inside a modal is selected, it should paste inside the modal","suites":["Widget Copy paste"],"updatePoint":{"line":78,"column":81,"index":3137},"line":78,"code":"  it(\"5. When widget Inside a modal is selected, it should paste inside the modal\", () => {\n    //verify modal and selected widget\n    cy.get(\".t--modal-widget\").should(\"exist\");\n    cy.get(\".t--modal-widget\").find(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //paste\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n    // cy.get(explorer.entityModal).click();\n    cy.get(\".t--modal-widget\").find(widgetsPage.chartWidget).should(\"have.length\", 2);\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Should be able to paste list widget inside another list widget","suites":["Widget Copy paste"],"updatePoint":{"line":88,"column":71,"index":3601},"line":88,"code":"  it(\"6. Should be able to paste list widget inside another list widget\", function () {\n    //clean up\n    cy.get(`#div-selection-0`).click({\n      force: true\n    });\n    cy.get(\"body\").type(`{${modifierKey}}{a}`);\n    cy.get(\"body\").type(\"{del}\");\n\n    //add list widget\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.dragAndDropToCanvas(\"listwidgetv2\", {\n      x: 500,\n      y: 700\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1);\n\n    //copy\n    cy.get(\"body\").type(`{${modifierKey}}{c}`);\n\n    //paste\n    cy.get(`${widgetSelector(\"List1\")} [type=\"CONTAINER_WIDGET\"]`).first().type(`{${modifierKey}}{v}`);\n    cy.get(widgetsPage.listWidgetv2).should(\"have.length\", 4);\n    cy.get(`${widgetSelector(\"List1\")} [type=\"CONTAINER_WIDGET\"]`).first().find(widgetsPage.listWidgetv2).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Should be able to paste widget on the initial generate Page","suites":["Widget Copy paste"],"updatePoint":{"line":112,"column":68,"index":4452},"line":112,"code":"  it(\"7. Should be able to paste widget on the initial generate Page\", function () {\n    cy.Createpage(\"NewPage\", false);\n\n    //paste\n    cy.get(\"body\").type(`{${modifierKey}}{v}`);\n\n    //verify a pasted list widget\n    cy.get(widgetsPage.listWidgetv2).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetCopyPaste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Select widgets using cmd + click and group using cmd + G","suites":["Widget Grouping"],"updatePoint":{"line":6,"column":62,"index":214},"line":6,"code":"  it(\"Select widgets using cmd + click and group using cmd + G\", function () {\n    // Selection\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`#${dsl.dsl.children[3].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n    const isMac = Cypress.platform === \"darwin\";\n    // Grouping\n    if (isMac) {\n      cy.get(\"body\").type(\"{cmd}{g}\");\n    } else {\n      cy.get(\"body\").type(\"{ctrl}{g}\");\n    }\n    cy.wait(2000);\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1).as(\"group\");\n    cy.get(\"body\").click();\n    cy.get(`@group`).find(`[data-testid=\"test-widget\"]`).should(\"have.length\", 2);\n    cy.get(`@group`).find(`.t--draggable-buttonwidget`);\n    cy.get(`@group`).find(`.t--draggable-imagewidget`);\n\n    // verify the position so that the camera widget is still below the newly grouped container\n    cy.get(`.t--widget-containerwidget`).eq(1).then(element => {\n      const elementTop = parseFloat(element.css(\"top\"));\n      cy.get(`.t--widget-camerawidget`).then(element2 => {\n        const containerTop = parseFloat(element2.css(\"top\"));\n        expect(containerTop).to.be.greaterThan(elementTop);\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetGrouping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"CheckboxGroupWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":13,"column":76,"index":488},"line":13,"code":"  it(\"CheckboxGroupWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"checkboxgroupwidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='checkboxgroup-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"CurrencyInputWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":24,"column":76,"index":863},"line":24,"code":"  it(\"CurrencyInputWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"currencyinputwidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='input-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePickerWidget2 label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":35,"column":74,"index":1228},"line":35,"code":"  it(\"DatePickerWidget2 label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"datepickerwidget2\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='datepicker-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"InputWidgetV2 label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":46,"column":70,"index":1592},"line":46,"code":"  it(\"InputWidgetV2 label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"inputwidgetv2\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='input-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"MultiSelectTreeWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":57,"column":78,"index":1955},"line":57,"code":"  it(\"MultiSelectTreeWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"multiselecttreewidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='multitreeselect-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"MultiSelectWidgetV2 label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":68,"column":76,"index":2334},"line":68,"code":"  it(\"MultiSelectWidgetV2 label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"multiselectwidgetv2\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='multiselect-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"PhoneInputWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":79,"column":73,"index":2704},"line":79,"code":"  it(\"PhoneInputWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"phoneinputwidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='input-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RadioGroupWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":90,"column":73,"index":3065},"line":90,"code":"  it(\"RadioGroupWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"radiogroupwidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='radiogroup-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditorWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":101,"column":77,"index":3435},"line":101,"code":"  it(\"RichTextEditorWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"richtexteditorwidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='rte-container']\",\n      isCompact: false,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"SelectWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":112,"column":69,"index":3795},"line":112,"code":"  it(\"SelectWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"selectwidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='select-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"SingleSelectTreeWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":123,"column":79,"index":4159},"line":123,"code":"  it(\"SingleSelectTreeWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"singleselecttreewidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='treeselect-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"SwitchGroupWidget label properties: Text, Position, Alignment, Width","suites":["Label feature"],"updatePoint":{"line":134,"column":74,"index":4532},"line":134,"code":"  it(\"SwitchGroupWidget label properties: Text, Position, Alignment, Width\", () => {\n    const options = {\n      widgetName: \"switchgroupwidget\",\n      parentColumnSpace: COLUMN_SPACE,\n      containerSelector: \"[data-testid='switchgroup-container']\",\n      isCompact: true,\n      labelText: \"Name\",\n      labelWidth: 4\n    };\n    cy.checkLabelForWidget(options);\n  });","file":"e2e/Regression/ClientSide/Widgets/Widgets_Labels_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Multi Select widgets using cmd + click","suites":["Widget Selection"],"updatePoint":{"line":7,"column":47,"index":262},"line":7,"code":"  it(\"1. Multi Select widgets using cmd + click\", function () {\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`#${dsl.dsl.children[1].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 3);\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetSelection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Select widgets using cmd + click and open property pane by clicking on the widget from right side panel","suites":["Widget Selection"],"updatePoint":{"line":25,"column":112,"index":1006},"line":25,"code":"  it(\"2. Select widgets using cmd + click and open property pane by clicking on the widget from right side panel\", function () {\n    // Selection\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n\n    //select on one of the widgets from the right side panel\n    cy.get(`.t-multi-widget-property-pane`).should(\"have.length\", 1);\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).should(\"have.length\", 1);\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      force: true\n    });\n\n    //should open property pane\n    cy.get(`.t--property-pane-view`).should(\"have.length\", 1);\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetSelection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should not select widgets if we hit CTRL + A on other Pages","suites":["Widget Selection"],"updatePoint":{"line":46,"column":68,"index":1797},"line":46,"code":"  it(\"3. Should not select widgets if we hit CTRL + A on other Pages\", function () {\n    // Switch to the Explorer Pane\n    _.entityExplorer.NavigateToSwitcher(\"Explorer\");\n    // Click to create a New Data Source\n    cy.get(\".t--entity-add-btn\").eq(3).click();\n    // Hit CTRL +A\n    cy.get(\"body\").type(\"{ctrl}{a}\");\n    // Switch to the Canvas\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    // Widgets should not be selected\n    cy.get(\".t--multi-selection-box\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Widgets/WidgetSelection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create app within an workspace and delete and re-create another app with same name","suites":["Create workspace and a new app / delete and recreate app"],"updatePoint":{"line":9,"column":91,"index":492},"line":9,"code":"  it(\"1. Create app within an workspace and delete and re-create another app with same name\", function () {\n    cy.NavigateToHome();\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      workspaceId = uid;\n      appid = uid;\n      _.homePage.CreateNewWorkspace(uid);\n      //Automated as part of Bug19506\n      cy.get(application.shareButton).first().click({\n        force: true\n      });\n      if (CURRENT_REPO === REPO.CE) {\n        cy.xpath(application.placeholderTxt).should(\"be.visible\");\n      } else {\n        cy.xpath(application.placeholderTxtEE).should(\"be.visible\");\n      }\n      cy.get(application.closeModalPopupMember).click({\n        force: true\n      });\n      _.homePage.CreateAppInWorkspace(uid, uid);\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      if (CURRENT_REPO === REPO.CE) {\n        cy.xpath(application.placeholderTxt).should(\"be.visible\");\n      } else {\n        cy.xpath(application.placeholderTxtEE).should(\"be.visible\");\n      }\n      cy.get(application.closeModalPopupMember).click({\n        force: true\n      });\n      cy.DeleteAppByApi();\n      cy.NavigateToHome();\n      _.homePage.CreateAppInWorkspace(uid, uid);\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/CreateAppWithSameNameInWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. create app with same name in a different workspace","suites":["Create app same name in different workspace"],"updatePoint":{"line":26,"column":59,"index":966},"line":26,"code":"  it(\"1. create app with same name in a different workspace\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    const newWSName = workspaceId + \"1\";\n    //Automated as part of Bug19506\n    cy.get(\".t--applications-container\").contains(workspaceId).closest(homePage.workspaceCompleteSection).find(homePage.optionsIcon).find(homePage.workspaceNamePopover).click({\n      force: true\n    });\n    cy.xpath(homePage.members).click({\n      force: true\n    });\n    cy.get(homePage.inviteUserMembersPage).click({\n      force: true\n    });\n    if (CURRENT_REPO === REPO.CE) {\n      cy.xpath(application.placeholderTxt).should(\"be.visible\");\n    } else {\n      cy.xpath(application.placeholderTxtEE).should(\"be.visible\");\n    }\n    cy.get(application.closeModalPopup).click({\n      force: true\n    });\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      console.log(\"createWorkspace response: \", interception);\n      newWorkspaceName = interception.response.body.data.name;\n      cy.renameWorkspace(newWorkspaceName, newWSName);\n      cy.CreateAppForWorkspace(newWSName, appid);\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/CreateSameAppInDiffWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should delete the workspace","suites":["Delete workspace test spec"],"updatePoint":{"line":6,"column":36,"index":264},"line":6,"code":"  it(\"1. Should delete the workspace\", function () {\n    cy.visit(\"/applications\");\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      newWorkspaceName = \"workspace\" + uid;\n      _.homePage.CreateNewWorkspace(newWorkspaceName);\n      _.homePage.DeleteWorkspace(newWorkspaceName);\n      cy.wait(\"@deleteWorkspaceApiCall\").then(httpResponse => {\n        expect(httpResponse.status).to.equal(200);\n      });\n      cy.get(newWorkspaceName).should(\"not.exist\");\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/DeleteWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should show option to delete workspace for an admin user","suites":["Delete workspace test spec"],"updatePoint":{"line":19,"column":65,"index":784},"line":19,"code":"  it(\"2. Should show option to delete workspace for an admin user\", function () {\n    cy.visit(\"/applications\");\n    cy.wait(2000);\n    cy.generateUUID().then(uid => {\n      newWorkspaceName = uid;\n      _.homePage.CreateNewWorkspace(newWorkspaceName);\n      cy.wait(500);\n      cy.contains(\"Delete workspace\"); //only to check if Delete workspace is shown to an admin user\n      _.homePage.InviteUserToWorkspace(newWorkspaceName, Cypress.env(\"TESTUSERNAME1\"), \"App Viewer\");\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.visit(\"/applications\");\n      cy.openWorkspaceOptionsPopup(newWorkspaceName);\n      cy.get(homePage.workspaceNamePopoverContent).contains(\"Delete workspace\").should(\"not.exist\");\n      cy.LogOut();\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/DeleteWorkspace_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Only admin user can not leave workspace validation","suites":["Leave workspace test spec"],"updatePoint":{"line":5,"column":59,"index":232},"line":5,"code":"  it(\"1. Only admin user can not leave workspace validation\", function () {\n    cy.visit(\"/applications\");\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      newWorkspaceName = \"LeaveWorkspace\" + uid;\n      _.homePage.CreateNewWorkspace(newWorkspaceName);\n      cy.get(_.homePage._homeIcon).click({\n        force: true\n      });\n      _.homePage.OpenWorkspaceOptions(newWorkspaceName);\n      // verify leave workspace is visible\n      cy.contains(\"Leave workspace\").click();\n      cy.contains(\"Are you sure\").click();\n      cy.wait(\"@leaveWorkspaceApiCall\").then(httpResponse => {\n        expect(httpResponse.status).to.equal(400);\n      });\n      cy.contains(newWorkspaceName);\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/LeaveWorkspaceTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bug 17235 & 17987 - Non admin users can only access leave workspace popup menu validation","suites":["Leave workspace test spec"],"updatePoint":{"line":24,"column":98,"index":984},"line":24,"code":"  it(\"2. Bug 17235 & 17987 - Non admin users can only access leave workspace popup menu validation\", function () {\n    cy.visit(\"/applications\");\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      newWorkspaceName = \"LeaveWorkspace\" + uid;\n      _.homePage.CreateNewWorkspace(newWorkspaceName);\n      _.homePage.InviteUserToWorkspace(newWorkspaceName, Cypress.env(\"TESTUSERNAME1\"), \"App Viewer\");\n      _.homePage.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"), \"App Viewer\");\n      cy.visit(\"/applications\");\n      _.homePage.LeaveWorkspace(newWorkspaceName);\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/LeaveWorkspaceTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Login/create page/delete page/delete app from UI","suites":["Login from UI and check the functionality"],"updatePoint":{"line":4,"column":57,"index":200},"line":4,"code":"  it(\"1. Login/create page/delete page/delete app from UI\", function () {\n    const appname = localStorage.getItem(\"AppName\");\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.SearchApp(appname);\n    cy.get(\"#loading\").should(\"not.exist\");\n    //cy.wait(5000);\n    cy.generateUUID().then(uid => {\n      pageid = uid;\n      cy.Createpage(pageid);\n      cy.get(`.t--entity-name`).contains(pageid).trigger(\"mouseover\");\n      _.entityExplorer.ActionContextMenuByEntityName(pageid, \"Delete\", \"Are you sure?\");\n      cy.wait(2000);\n    });\n    cy.wait(\"@deletePage\");\n    cy.get(\"@deletePage\").should(\"have.property\", \"status\", 200);\n  });","file":"e2e/Regression/ClientSide/Workspace/LoginFromUIApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create workspace and then share with a user from Application share option within application","suites":["Create new workspace and share with a user"],"updatePoint":{"line":14,"column":101,"index":636},"line":14,"code":"  it(\"1. Create workspace and then share with a user from Application share option within application\", function () {\n    HomePage.NavigateToHome();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      workspaceId = \"shareApp\" + uid;\n      appid = \"Share\" + uid;\n      HomePage.CreateNewWorkspace(workspaceId);\n      HomePage.CreateAppInWorkspace(workspaceId, appid);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      HomePage.InviteUserToApplication(Cypress.env(\"TESTUSERNAME1\"), \"App Viewer\");\n    });\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. login as Invited user and then validate viewer privilage","suites":["Create new workspace and share with a user"],"updatePoint":{"line":30,"column":65,"index":1229},"line":30,"code":"  it(\"2. login as Invited user and then validate viewer privilage\", function () {\n    cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.get(homePage.searchInput).type(appid, {\n      force: true\n    });\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(homePage.appsContainer).contains(workspaceId);\n    if (CURRENT_REPO === REPO.CE) {\n      cy.xpath(homePage.ShareBtn).first().should(\"be.visible\");\n    }\n    cy.get(homePage.applicationCard).trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).should(\"not.exist\");\n    cy.launchApp(appid);\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Enable public access to Application","suites":["Create new workspace and share with a user"],"updatePoint":{"line":46,"column":44,"index":1849},"line":46,"code":"  it(\"3. Enable public access to Application\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.SearchApp(appid);\n    cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n    cy.get(homePage.shareApp).click();\n    cy.enablePublicAccess(true);\n    cy.PublishtheApp();\n    currentUrl = cy.url();\n    cy.url().then(url => {\n      currentUrl = url;\n      cy.log(currentUrl);\n    });\n    cy.get(publish.backToEditor).click();\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Open the app without login and validate public access of Application","suites":["Create new workspace and share with a user"],"updatePoint":{"line":62,"column":77,"index":2481},"line":62,"code":"  it(\"4. Open the app without login and validate public access of Application\", function () {\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.get(publish.pageInfo).invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"This page seems to be blank\");\n    });\n    // comment toggle should not exist for anonymous users\n    cy.get(\".t--comment-mode-switch-toggle\").should(\"not.exist\");\n  });","file":"e2e/Regression/ClientSide/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. login as uninvited user and then validate public access of Application","suites":["Create new workspace and share with a user"],"updatePoint":{"line":73,"column":79,"index":3022},"line":73,"code":"  it(\"5. login as uninvited user and then validate public access of Application\", function () {\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME2\"), Cypress.env(\"TESTPASSWORD2\"));\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.pageInfo).invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"This page seems to be blank\");\n    });\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. login as Owner and disable public access","suites":["Create new workspace and share with a user"],"updatePoint":{"line":83,"column":49,"index":3487},"line":83,"code":"  it(\"6. login as Owner and disable public access\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.SearchApp(appid);\n    cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n    cy.get(homePage.shareApp).click();\n    cy.enablePublicAccess(true);\n    cy.LogOut();\n  });","file":"e2e/Regression/ClientSide/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. login as uninvited user, validate public access disable feature ","suites":["Create new workspace and share with a user"],"updatePoint":{"line":92,"column":73,"index":3937},"line":92,"code":"  it(\"7. login as uninvited user, validate public access disable feature \", function () {\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME2\"), Cypress.env(\"TESTPASSWORD2\"));\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 404);\n    cy.LogOut();\n\n    // visit the app as anonymous user and validate redirection to login page\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 404);\n    cy.wait(2000);\n    cy.contains(\"Sign in to your account\").should(\"be.visible\");\n  });","file":"e2e/Regression/ClientSide/Workspace/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Open the workspace general settings and update workspace name. The update should reflect in the workspace. It should also reflect in the workspace names on the left side and the workspace dropdown.\t","suites":["Update Workspace"],"updatePoint":{"line":7,"column":207,"index":423},"line":7,"code":"  it(\"1. Open the workspace general settings and update workspace name. The update should reflect in the workspace. It should also reflect in the workspace names on the left side and the workspace dropdown.\t\", function () {\n    cy.NavigateToHome();\n    _.homePage.NavigateToHome();\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      appid = \"App\" + uid;\n      workspaceId = uid;\n      _.homePage.CreateNewWorkspace(workspaceId);\n      cy.get(homePage.workspaceSettingOption).click({\n        force: true\n      });\n      //_.homePage.CreateAppInWorkspace(workspaceId, appid);\n      cy.get(homePage.workspaceNameInput).click({\n        force: true\n      });\n      cy.get(homePage.workspaceNameInput).clear();\n      cy.get(homePage.workspaceNameInput).type(workspaceId);\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n      cy.wait(2000);\n      cy.get(homePage.workspaceHeaderName).should(\"have.text\", `${workspaceId}`);\n      cy.NavigateToHome();\n      cy.get(homePage.leftPanelContainer).within(() => {\n        cy.get(\"span\").should(item => {\n          expect(item).to.contain.text(workspaceId);\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/UpdateWorkspaceTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Open the workspace general settings and update workspace email. The update should reflect in the workspace.","suites":["Update Workspace"],"updatePoint":{"line":35,"column":116,"index":1499},"line":35,"code":"  it(\"2. Open the workspace general settings and update workspace email. The update should reflect in the workspace.\", function () {\n    _.agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      newWorkspaceName = \"SettingsUpdate\" + uid;\n      _.homePage.CreateNewWorkspace(newWorkspaceName);\n    });\n    cy.get(homePage.workspaceSettingOption).click({\n      force: true\n    });\n    cy.get(homePage.workspaceEmailInput).clear();\n    cy.get(homePage.workspaceEmailInput).type(Cypress.env(\"TESTUSERNAME2\"));\n    cy.wait(\"@updateWorkspace\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.workspaceEmailInput).should(\"have.value\", Cypress.env(\"TESTUSERNAME2\"));\n    // update workspace website\n    cy.get(homePage.workspaceWebsiteInput).clear();\n    cy.get(homePage.workspaceWebsiteInput).type(\"demowebsite.com\");\n    cy.wait(\"@updateWorkspace\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.workspaceWebsiteInput).should(\"have.value\", \"demowebsite.com\");\n  });","file":"e2e/Regression/ClientSide/Workspace/UpdateWorkspaceTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Upload logo / delete logo and validate","suites":["Update Workspace"],"updatePoint":{"line":54,"column":47,"index":2492},"line":54,"code":"  it(\"3. Upload logo / delete logo and validate\", function () {\n    const fixturePath = \"cypress/fixtures/appsmithlogo.png\";\n    cy.xpath(homePage.uploadLogo).first().selectFile(fixturePath, {\n      force: true\n    });\n    cy.wait(\"@updateLogo\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(1000);\n    cy.get(homePage.removeLogo).last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.wait(\"@deleteLogo\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ClientSide/Workspace/UpdateWorkspaceTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. create workspace with leading space validation","suites":["Workspace name validation spec"],"updatePoint":{"line":8,"column":55,"index":307},"line":8,"code":"  it(\"1. create workspace with leading space validation\", function () {\n    cy.NavigateToHome();\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      _.homePage.OpenWorkspaceOptions(newWorkspaceName);\n      cy.get(homePage.renameWorkspaceInput).should(\"be.visible\").type(\" \");\n      cy.get(\".error-message\").should(\"be.visible\");\n      _.agHelper.ClickOutside();\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/Workspace_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. creates workspace and checks that workspace name is editable and create workspace with special characters validation","suites":["Workspace name validation spec"],"updatePoint":{"line":19,"column":125,"index":851},"line":19,"code":"  it(\"2. creates workspace and checks that workspace name is editable and create workspace with special characters validation\", function () {\n    cy.createWorkspace();\n    cy.generateUUID().then(uid => {\n      workspaceId = \"kadjhfkjadsjkfakjdscajdsnckjadsnckadsjcnanakdjsnckjdscnakjdscnnadjkncakjdsnckjadsnckajsdfkjadshfkjsdhfjkasdhfkjasdhfjkasdhjfasdjkfhjhdsfjhdsfjhadasdfasdfadsasdf\" + uid;\n      // create workspace with long name\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(interception => {\n        newWorkspaceName = interception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n        // check if user icons exists in that workspace on homepage\n        cy.get(homePage.workspaceList.concat(workspaceId).concat(\")\")).scrollIntoView().should(\"be.visible\").within(() => {\n          cy.get(homePage.shareUserIcons).first().should(\"be.visible\");\n        });\n        _.agHelper.ClickOutside();\n        _.homePage.OpenWorkspaceSettings(workspaceId);\n        _.agHelper.GetNClickByContains(\"[data-testid=t--user-edit-tabs-wrapper]\", \"Members\");\n        _.agHelper.AssertElementVisible(_.homePage._inviteUserMembersPage);\n        // checking parent's(<a></a>) since the child(<span>) inherits css from it\n        cy.get(homePage.workspaceHeaderName).should(\"have.css\", \"text-overflow\", \"ellipsis\");\n      });\n    });\n    cy.NavigateToHome();\n    // create workspace with special character\n    cy.createWorkspace();\n    cy.wait(\"@createWorkspace\").then(interception => {\n      newWorkspaceName = interception.response.body.data.name;\n      _.agHelper.Sleep();\n      _.homePage.RenameWorkspace(newWorkspaceName, \"Test & Workspace\");\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/Workspace_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Can Import Application from json","suites":["Workspace Import Application"],"updatePoint":{"line":10,"column":41,"index":319},"line":10,"code":"  it(\"1. Can Import Application from json\", function () {\n    cy.NavigateToHome();\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).type(appname);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(2000);\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.exportAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear();\n    cy.get(`a[id=t--export-app-link]`).then(anchor => {\n      const url = anchor.prop(\"href\");\n      cy.request(url).then(({\n        body,\n        headers\n      }) => {\n        expect(headers).to.have.property(\"content-type\", \"application/json\");\n        expect(headers).to.have.property(\"content-disposition\").that.includes(\"attachment;\").and.includes(`filename*=UTF-8''${appname}.json`);\n        cy.writeFile(\"cypress/fixtures/exported-app.json\", body, \"utf-8\");\n        cy.generateUUID().then(uid => {\n          workspaceId = uid;\n          localStorage.setItem(\"WorkspaceName\", workspaceId);\n          cy.createWorkspace();\n          cy.wait(\"@createWorkspace\").then(createWorkspaceInterception => {\n            newWorkspaceName = createWorkspaceInterception.response.body.data.name;\n            cy.renameWorkspace(newWorkspaceName, workspaceId);\n            cy.get(homePage.workspaceImportAppOption).click({\n              force: true\n            });\n            cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n            cy.xpath(homePage.uploadLogo).first().selectFile(\"cypress/fixtures/exported-app.json\", {\n              force: true\n            });\n            cy.wait(\"@importNewApplication\").then(interception => {\n              const importedApp = interception.response.body.data.application;\n              const {\n                pages\n              } = importedApp;\n              const appSlug = importedApp.slug;\n              let defaultPage = pages.find(eachPage => eachPage.isDefault);\n              cy.get(homePage.toastMessage).should(\"contain\", \"Application imported successfully\");\n              cy.wait(\"@getPagesForCreateApp\").then(interception => {\n                const pages = interception.response.body.data.pages;\n                const pageSlug = pages.find(page => page.isDefault)?.slug ?? \"page\";\n                cy.url().should(\"include\", `/${appSlug}/${pageSlug}-${defaultPage.id}`);\n              });\n            });\n          });\n        });\n      });\n    });\n  });","file":"e2e/Regression/ClientSide/Workspace/WorkspaceImportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. should test that settings page is redirected to default tab","suites":["Admin settings page"],"updatePoint":{"line":32,"column":68,"index":967},"line":32,"code":"  it(\"1. should test that settings page is redirected to default tab\", () => {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    //cy.wait(3000);\n    cy.visit(\"/settings\");\n    cy.url().should(\"contain\", \"/settings/general\");\n  });","file":"e2e/Regression/Enterprise/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. should test that authentication and branding page shows upgrade button and redirects to pricing page","suites":["Admin settings page"],"updatePoint":{"line":38,"column":109,"index":1265},"line":38,"code":"  it(\"2. should test that authentication and branding page shows upgrade button and redirects to pricing page\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(adminsSettings.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    if (CURRENT_REPO === REPO.CE) {\n      stubPricingPage();\n      cy.get(EnterpriseAdminSettingsLocators.upgradeOidcButton).should(\"be.visible\").should(\"contain\", \"Upgrade\").click();\n      cy.get(\"@pricingPage\").should(\"be.called\");\n      cy.wait(2000);\n      cy.go(-1);\n      stubPricingPage();\n      cy.get(EnterpriseAdminSettingsLocators.upgradeSamlButton).should(\"be.visible\").should(\"contain\", \"Upgrade\").click();\n      cy.get(\"@pricingPage\").should(\"be.called\");\n      cy.wait(2000);\n      cy.go(-1);\n      stubPricingPage();\n      cy.get(\".t--settings-category-branding\").click();\n      cy.url().should(\"contain\", \"/settings/branding\");\n      cy.xpath(adminsSettings.upgrade).click();\n      cy.get(\"@pricingPage\").should(\"be.called\");\n      cy.wait(2000);\n      cy.go(-1);\n    }\n  });","file":"e2e/Regression/Enterprise/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. should test that Business features shows upgrade button and direct to pricing page","suites":["Admin settings page"],"updatePoint":{"line":62,"column":91,"index":2309},"line":62,"code":"  it(\"3. should test that Business features shows upgrade button and direct to pricing page\", () => {\n    cy.visit(\"/settings/general\");\n    if (CURRENT_REPO === REPO.CE) {\n      cy.get(adminsSettings.accessControl).click();\n      cy.url().should(\"contain\", \"/settings/access-control\");\n      stubPricingPage();\n      cy.xpath(adminsSettings.upgrade).click();\n      cy.get(\"@pricingPage\").should(\"be.called\");\n      cy.wait(2000);\n      cy.go(-1);\n      cy.get(adminsSettings.auditLogs).click();\n      cy.url().should(\"contain\", \"/settings/audit-logs\");\n      stubPricingPage();\n      cy.xpath(adminsSettings.upgrade).click();\n      cy.get(\"@pricingPage\").should(\"be.called\");\n      cy.wait(2000);\n      cy.go(-1);\n      cy.get(adminsSettings.upgrageLeftPane).click();\n      cy.url().should(\"contain\", \"/settings/business-edition\");\n      stubPricingPage();\n      cy.xpath(adminsSettings.upgrade).click();\n      cy.get(\"@pricingPage\").should(\"be.called\");\n      cy.wait(2000);\n      cy.go(-1);\n    }\n  });","file":"e2e/Regression/Enterprise/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. PUT Action test API feature","suites":["API Panel Test Functionality"],"updatePoint":{"line":11,"column":36,"index":518},"line":11,"code":"  it(\"1. PUT Action test API feature\", function () {\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.echoMethod, \"\", 10000, \"PUT\");\n    apiPage.EnterHeader(testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/putjson.txt\").then(json => {\n      apiPage.SelectPaneTab(\"Body\");\n      apiPage.SelectSubTab(\"JSON\");\n      dataSources.EnterQuery(json);\n      agHelper.AssertAutoSave();\n      apiPage.RunAPI();\n      cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.echoMethod, testdata.Put);\n    });\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.ResponseCheck(\"updatedAt\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Post Action test API feature","suites":["API Panel Test Functionality"],"updatePoint":{"line":25,"column":37,"index":1130},"line":25,"code":"  it(\"2. Post Action test API feature\", function () {\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.echoMethod, \"\", 10000, \"POST\");\n    apiPage.EnterHeader(testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/postjson.txt\").then(json => {\n      apiPage.SelectPaneTab(\"Body\");\n      apiPage.SelectSubTab(\"JSON\");\n      dataSources.EnterQuery(json);\n      agHelper.AssertAutoSave();\n      apiPage.RunAPI();\n      cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.echoMethod, testdata.Post);\n    });\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.ResponseCheck(\"createdAt\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. PATCH Action test API feature","suites":["API Panel Test Functionality"],"updatePoint":{"line":39,"column":38,"index":1746},"line":39,"code":"  it(\"3. PATCH Action test API feature\", function () {\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.echoMethod, \"\", 10000, \"PATCH\");\n    apiPage.EnterHeader(testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/patchjson.txt\").then(json => {\n      apiPage.SelectPaneTab(\"Body\");\n      apiPage.SelectSubTab(\"JSON\");\n      dataSources.EnterQuery(json);\n      agHelper.AssertAutoSave();\n      apiPage.RunAPI();\n      cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.echoMethod, testdata.Patch);\n    });\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.ResponseCheck(\"updatedAt\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Delete Action test API feature","suites":["API Panel Test Functionality"],"updatePoint":{"line":53,"column":39,"index":2366},"line":53,"code":"  it(\"4. Delete Action test API feature\", function () {\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.echoMethod, \"\", 10000, \"DELETE\");\n    apiPage.EnterHeader(testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/patchjson.txt\").then(json => {\n      apiPage.SelectPaneTab(\"Body\");\n      apiPage.SelectSubTab(\"JSON\");\n      dataSources.EnterQuery(json);\n      agHelper.AssertAutoSave();\n      apiPage.RunAPI();\n      cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.echoMethod, testdata.Delete);\n    });\n    cy.ResponseStatusCheck(\"200\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Test GET Action for mock API with header and pagination","suites":["API Panel Test Functionality"],"updatePoint":{"line":66,"column":64,"index":2975},"line":66,"code":"  it(\"5. Test GET Action for mock API with header and pagination\", function () {\n    //const apiname = \"SecondAPI\";\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.methods);\n    apiPage.EnterHeader(testdata.headerKey, testdata.headerValue);\n    agHelper.AssertAutoSave();\n    apiPage.RunAPI();\n    cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.ResponseCheck(testdata.responsetext);\n    apiPage.SelectPaneTab(\"Pagination\");\n    agHelper.GetNClick(apiwidget.paginationWithUrl);\n    cy.enterUrl(testdata.baseUrl, apiwidget.panigationNextUrl, testdata.nextUrl);\n    cy.clickTest(apiwidget.TestNextUrl);\n    cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.next, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.ResponseCheck(\"Josh M Krantz\");\n    apiPage.SelectPaneTab(\"Pagination\");\n    cy.enterUrl(testdata.baseUrl, apiwidget.panigationPrevUrl, testdata.prevUrl);\n    cy.clickTest(apiwidget.TestPreUrl);\n    cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.prev, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.ResponseCheck(testdata.responsetext);\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. API check with query params test API feature","suites":["API Panel Test Functionality"],"updatePoint":{"line":89,"column":53,"index":4190},"line":89,"code":"  it(\"6. API check with query params test API feature\", function () {\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.queryAndValue);\n    apiPage.EnterHeader(testdata.headerKey, testdata.headerValue);\n    agHelper.AssertAutoSave();\n    apiPage.RunAPI();\n    cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.queryAndValue, testdata.Get);\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.ResponseCheck(testdata.responsetext3);\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. API check with Invalid Header","suites":["API Panel Test Functionality"],"updatePoint":{"line":98,"column":38,"index":4616},"line":98,"code":"  it(\"7. API check with Invalid Header\", function () {\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.methods);\n    apiPage.EnterHeader(testdata.headerKey, testdata.invalidValue);\n    agHelper.AssertAutoSave();\n    apiPage.RunAPI(false);\n    cy.validateRequest(\"Api1\", testdata.baseUrl, testdata.methods, testdata.Get, true);\n    cy.ResponseStatusCheck(\"5000\");\n    cy.ResponseCheck(\"Invalid value for Content-Type\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check whether auto generated header is set and overidden","suites":["Validate API Auto generated headers"],"updatePoint":{"line":5,"column":65,"index":281},"line":5,"code":"  it(\"1. Check whether auto generated header is set and overidden\", () => {\n    apiPage.CreateApi(\"FirstAPI\");\n    apiPage.SelectPaneTab(\"Body\");\n    apiPage.SelectSubTab(\"FORM_URLENCODED\");\n    apiPage.ValidateImportedHeaderParams(true, {\n      key: \"content-type\",\n      value: \"application/x-www-form-urlencoded\"\n    });\n    apiPage.EnterHeader(\"content-type\", \"application/json\");\n    apiPage.ValidateImportedKeyValueOverride(0);\n    apiPage.EnterHeader(\"\", \"\");\n    apiPage.ValidateImportedKeyValueOverride(0, false);\n    aghelper.AssertElementVisible(apiPage._autoGeneratedHeaderInfoIcon(\"content-type\"));\n    cy.get(apiPage._autoGeneratedHeaderInfoIcon(\"content-type\")).realHover({\n      pointer: \"mouse\"\n    });\n    aghelper.AssertContains(\"This content-type header is auto-generated by appsmith based on body type of the API. Create a new header content-type to overwrite this value.\", \"be.visible\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Auto_Generated_Header_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test API copy/Move/delete feature","suites":["API Panel Test Functionality "],"updatePoint":{"line":5,"column":42,"index":320},"line":5,"code":"  it(\"1. Test API copy/Move/delete feature\", function () {\n    cy.Createpage(\"SecondPage\");\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, \"{{ '/random' }}\");\n    cy.assertPageSave();\n    cy.get(\"body\").click(0, 0);\n    entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    entityExplorer.ActionContextMenuByEntityName(\"FirstAPI\", \"Copy to page\", \"SecondPage\");\n    // assert GET API is present.\n    apiPage.AssertAPIVerb(\"GET\");\n    cy.get(\"body\").click(0, 0);\n    entityExplorer.ActionContextMenuByEntityName(\"FirstAPICopy\", \"Move to page\", \"Page1\");\n    cy.wait(2000);\n    entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    cy.get(\".t--entity-name\").contains(\"FirstAPICopy\").click({\n      force: true\n    });\n    cy.get(apiwidget.resourceUrl).should(\"contain.text\", \"{{ '/random' }}\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_ContextMenu_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test curl import flow for POST action with JSON body","suites":["Test curl import flow"],"updatePoint":{"line":5,"column":61,"index":302},"line":5,"code":"  it(\"1. Test curl import flow for POST action with JSON body\", function () {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      localStorage.setItem(\"ApiPaneV2\", \"ApiPaneV2\");\n      cy.NavigateToApiEditor();\n      _.dataSources.NavigateToDSCreateNew();\n      cy.get(ApiEditor.curlImage).click({\n        force: true\n      });\n      cy.get(\"textarea\").type('curl -d \\'{\"name\":\"morpheus\",\"job\":\"leader\"}\\' -H Content-Type:application/json -X POST ' + datasourceFormData[\"echoApiUrl\"], {\n        force: true,\n        parseSpecialCharSequences: false\n      });\n      cy.importCurl();\n      cy.RunAPI();\n      cy.ResponseStatusCheck(\"200 OK\");\n      cy.get(\"@curlImport\").then(response => {\n        cy.expect(response.response.body.responseMeta.success).to.eq(true);\n        cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n          const someText = text;\n          expect(someText).to.equal(response.response.body.data.name);\n        });\n      });\n    });\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_CurlPOSTImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test curl import flow for POST action with multipart form data","suites":["Test curl import flow"],"line":29,"code":"  it.skip(\"2. Test curl import flow for POST action with multipart form data\", function () {","file":"e2e/Regression/ServerSide/ApiTests/API_CurlPOSTImport_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Check whether the default content-type changes on changing method types and remains unchanged on switching to GET","suites":["API Panel request body"],"updatePoint":{"line":6,"column":122,"index":425},"line":6,"code":"  it(\"1. Check whether the default content-type changes on changing method types and remains unchanged on switching to GET\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n\n    // Checking for default Body type to be NONE\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    });\n    cy.get(apiEditor.bodyTypeSelected).should(\"have.text\", \"NONE\");\n    cy.get(apiEditor.jsonBodyTab).click({\n      force: true\n    });\n\n    //Switch to headers tab\n    cy.contains(apiEditor.headersTab).click();\n\n    // Changing method type to POST\n    cy.get(apiEditor.ApiVerb).click();\n    cy.get(appPage.selectPost).click();\n\n    // Checking Header for POST Type\n    cy.get(apiwidget.autoGeneratedHeaderKey).first().should(\"have.text\", \"content-type\");\n    cy.get(apiwidget.autoGeneratedHeaderValue).first().should(\"have.text\", \"application/json\");\n\n    // Checking Body type to be JSON\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    });\n    cy.get(apiEditor.jsonBodyTab).click({\n      force: true\n    });\n    cy.get(apiEditor.bodyTypeSelected).should(\"have.text\", \"JSON\");\n\n    // Changing method type to GET\n    cy.get(apiEditor.ApiVerb).first().click();\n    cy.get(appPage.selectGet).first().click();\n\n    // Checking Header for GET Type\n    cy.contains(apiEditor.headersTab).click();\n    cy.get(apiwidget.autoGeneratedHeaderKey).first().should(\"have.text\", \"content-type\");\n    cy.get(apiwidget.autoGeneratedHeaderValue).first().should(\"have.text\", \"application/json\");\n    cy.DeleteAPI();\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_DefaultContentType_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bug 14624 - Verifying the content-type none is not added","suites":["API Panel request body"],"updatePoint":{"line":49,"column":65,"index":1907},"line":49,"code":"  it(\"2. Bug 14624 - Verifying the content-type none is not added\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n\n    // Checking for default Body type to be NONE\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    });\n    cy.get(apiEditor.bodyTypeSelected).should(\"have.text\", \"NONE\");\n\n    //Switch to headers tab\n    cy.contains(apiEditor.headersTab).click();\n\n    // Checking Header to not have content-type:none\n    cy.get(`${apiwidget.headerKey} .CodeMirror .CodeMirror-code`).first().should(\"not.have.text\", \"content-type\");\n    cy.get(`${apiwidget.headerValue} .CodeMirror .CodeMirror-code`).first().should(\"not.have.text\", \"none\");\n    cy.DeleteAPI();\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_DefaultContentType_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test Search API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":9,"column":32,"index":391},"line":9,"code":"  it(\"1. Test Search API fetaure\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(\".CodeMirror-placeholder\").first().should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.SaveAndRunAPI();\n    cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    _.entityExplorer.SelectEntityByName(\"FirstAPI\", \"Queries/JS\");\n    _.entityExplorer.RenameEntityFromExplorer(\"FirstAPI\", \"SecondAPI\", true);\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n    _.entityExplorer.AssertEntityAbsenceInExplorer(\"SecondAPI\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Should update loading state after cancellation of confirmation for run query","suites":["API Panel Test Functionality"],"updatePoint":{"line":25,"column":85,"index":1305},"line":25,"code":"  it(\"2. Should update loading state after cancellation of confirmation for run query\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(\".CodeMirror-placeholder\").first().should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(apiwidget.settings).click({\n      force: true\n    });\n    cy.get(apiwidget.confirmBeforeExecute).click({\n      force: true\n    });\n    cy.get(apiwidget.runQueryButton).click();\n    cy.get(\".ads-v2-modal__content\").find(\"button\").contains(\"No\").click();\n    cy.get(apiwidget.runQueryButton).children().should(\"have.length\", 1);\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Should not crash on key delete","suites":["API Panel Test Functionality"],"updatePoint":{"line":42,"column":39,"index":2049},"line":42,"code":"  it(\"3. Should not crash on key delete\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"CrashTestAPI\");\n    cy.SelectAction(testdata.postAction);\n    cy.get(apiwidget.headerKey).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    });\n    // assert so that this fails\n    cy.get(apiwidget.headerKey).should(\"be.visible\");\n    cy.get(apiwidget.headerKey).should(\"have.value\", \"\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Should correctly parse query params","suites":["API Panel Test Functionality"],"updatePoint":{"line":59,"column":44,"index":2653},"line":59,"code":"  it(\"4. Should correctly parse query params\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"APIWithQueryParams\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methodWithQueryParam);\n    cy.ValidateQueryParams({\n      key: \"q\",\n      value: \"mimeType='application/vnd.google-apps.spreadsheet'\"\n    });\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Shows evaluated value pane when url field is focused","suites":["API Panel Test Functionality"],"updatePoint":{"line":68,"column":61,"index":3006},"line":68,"code":"  it(\"5. Shows evaluated value pane when url field is focused\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TestAPI\");\n    cy.get(\".CodeMirror textarea\").first().click({\n      force: true\n    }).type(\"https://www.facebook.com/users/{{Button2.text}}?key=test&val={{Button2.text}}\", {\n      force: true,\n      parseSpecialCharSequences: false\n    }).wait(3000).click({\n      force: true\n    }).type(\"{enter}\", {\n      parseSpecialCharSequences: true\n    });\n    cy.validateEvaluatedValue(\"https://www.facebook.com/users/Cancel?key=test&val=Cancel\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Moustache test Functionality","suites":["Moustache test Functionality"],"updatePoint":{"line":11,"column":37,"index":532},"line":11,"code":"  it(\"1. Moustache test Functionality\", function () {\n    entityExplorer.ExpandCollapseEntity(\"Aditya\");\n    entityExplorer.SelectEntityByName(\"TestTextBox\", \"Aditya\");\n    cy.widgetText(\"Api\", widgetsPage.textWidget, widgetsPage.textInputval);\n    cy.testCodeMirror(testdata.methods);\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"TestAPINew\");\n    cy.log(\"Creation of API Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.moustacheMethod);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    cy.RunAPI();\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"janet.weaver@reqres.in\");\n    cy.log(\"Response data check successful\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Mustache_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check whether input exists when form-encoded is selected","suites":["API Panel request body"],"updatePoint":{"line":3,"column":65,"index":177},"line":3,"code":"  it(\"1. Check whether input exists when form-encoded is selected\", function () {\n    _.apiPage.CreateApi(\"FirstAPI\");\n    _.apiPage.SelectAPIVerb(\"POST\");\n    _.apiPage.SelectPaneTab(\"Body\");\n    _.apiPage.SelectSubTab(\"FORM_URLENCODED\");\n    _.agHelper.AssertElementVisible(_.apiPage._bodyKey(0));\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_RequestBody_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test table loading when data is in array format","suites":["Bug 14666: Api Response Test Functionality "],"updatePoint":{"line":8,"column":56,"index":489},"line":8,"code":"  it(\"1. Test table loading when data is in array format\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    apiPage.CreateAndFillApi(testUrl1, \"TableTestAPI\");\n    agHelper.AssertAutoSave();\n    apiPage.RunAPI();\n    cy.get(apiEditor.tableResponseTab).should(\"exist\");\n    cy.DeleteAPI();\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Response_View_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test table loading when data is not in array format","suites":["Bug 14666: Api Response Test Functionality "],"updatePoint":{"line":18,"column":60,"index":876},"line":18,"code":"  it(\"2. Test table loading when data is not in array format\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.echoMethod, \"TableTestAPI\");\n    agHelper.AssertAutoSave();\n    apiPage.RunAPI();\n    cy.get(apiEditor.tableResponseTab).should(\"not.exist\");\n    cy.DeleteAPI();\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Response_View_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test Search API fetaure","suites":["API Panel Test Functionality "],"updatePoint":{"line":9,"column":32,"index":553},"line":9,"code":"  it(\"1. Test Search API fetaure\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.generateUUID().then(uid => {\n      cy.CreateAPI(`FirstAPI_${uid}`);\n      cy.log(\"Creation of FirstAPI Action successful\");\n      cy.NavigateToAPI_Panel();\n      cy.CreateAPI(`SecondAPI_${uid}`);\n      cy.CheckAndUnfoldEntityItem(\"Queries/JS\");\n      cy.log(\"Creation of SecondAPI Action successful\");\n      cy.get(\".t--entity-name\").contains(\"FirstAPI\");\n      cy.get(\".t--entity-name\").contains(\"SecondAPI\");\n      _.entityExplorer.ActionContextMenuByEntityName(`FirstAPI_${uid}`, \"Delete\", \"Are you sure?\");\n      _.entityExplorer.ActionContextMenuByEntityName(`SecondAPI_${uid}`, \"Delete\", \"Are you sure?\");\n    });\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. if suggested widgets section alwas appears for all 3 modes","suites":["API Panel Test Functionality "],"updatePoint":{"line":26,"column":67,"index":1389},"line":26,"code":"  it(\"2. if suggested widgets section alwas appears for all 3 modes\", function () {\n    cy.log(\"Login Successful\");\n    _.apiPage.CreateAndFillApi(testUrl1);\n    cy.RunAPI();\n    _.apiPage.CreateAndFillApi(testUrl2);\n    cy.RunAPI();\n    cy.get(ApiEditor.jsonResponseTab).click();\n    cy.checkIfApiPaneIsVisible();\n    cy.get(ApiEditor.rawResponseTab).click();\n    cy.checkIfApiPaneIsVisible();\n    cy.get(ApiEditor.tableResponseTab).click();\n    cy.checkIfApiPaneIsVisible();\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Bug 14242: Appsmith crash when create an API pointing to Github hosted json","suites":["API Panel Test Functionality "],"updatePoint":{"line":39,"column":84,"index":1889},"line":39,"code":"  it(\"3. Bug 14242: Appsmith crash when create an API pointing to Github hosted json\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.generateUUID().then(uid => {\n      APIName = uid;\n      cy.CreateAPI(APIName);\n    });\n    cy.enterDatasource(testUrl3);\n    cy.SaveAndRunAPI();\n    cy.ResponseStatusCheck(\"200\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1.Quick access command background color","suites":["Validate API Panel CSS Styles"],"updatePoint":{"line":17,"column":45,"index":766},"line":17,"code":"  it(\"1.Quick access command background color\", function () {\n    //Get the first key component (can be any of key value component)\n    //eq(1) is used because eq(0) is API serach bar.\n    cy.get(ApiEditor.codeEditorWrapper).eq(1).click();\n    //Check color and background-color of binding prompt\n    cy.get(DynamicInput.bindingPrompt).should(\"have.css\", \"color\", fontColorGray800).should(\"have.css\", \"background-color\", backgroundColorGray200);\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2.HTTP method dropdown hover and selected background should be gray","suites":["Validate API Panel CSS Styles"],"updatePoint":{"line":24,"column":73,"index":1246},"line":24,"code":"  it(\"2.HTTP method dropdown hover and selected background should be gray\", function () {\n    //Click on API http selector\n    cy.get(ApiEditor.ApiVerb).click();\n    //Default selection GET background-color check\n    cy.get(ApiEditor.httpDropDownOptions).first().should(\"have.css\", \"background-color\", backgroundColorGray200);\n    //Last element (can be any child other than the default) background-color check\n    //On hover background-color should change.\n    cy.get(ApiEditor.httpDropDownOptions).last().should(\"have.css\", \"background-color\", backgroundColorwhite).realHover().should(\"have.css\", \"background-color\", hover).click();\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3.Slash command button shows up on hover","suites":["Validate API Panel CSS Styles"],"updatePoint":{"line":33,"column":46,"index":1860},"line":33,"code":"  it(\"3.Slash command button shows up on hover\", function () {\n    //Get the first key component (can be any of key value component)\n    //eq(1) is used because eq(0) is API serach bar.\n    cy.get(ApiEditor.codeEditorWrapper).eq(1).realHover();\n    //Get the slash cmd button and check visibility\n    cy.get(ApiEditor.slashCommandButton).eq(1).should(\"have.css\", \"visibility\", \"visible\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Select Datasource dropdown binding prompt background color","suites":["Validate API Panel CSS Styles"],"updatePoint":{"line":40,"column":67,"index":2276},"line":40,"code":"  it(\"4. Select Datasource dropdown binding prompt background color\", function () {\n    cy.generateUUID().then(appName1 => {\n      cy.generateUUID().then(appName2 => {\n        //Create two datasource for testing binding prompt background-color\n        cy.createNewAuthApiDatasource(appName1);\n        cy.createNewAuthApiDatasource(appName2);\n        ee.ExpandCollapseEntity(\"Queries/JS\");\n        cy.get(commonLocators.entityName).contains(\"test_styles\").click();\n        //Click on API search editor\n        cy.get(ApiEditor.codeEditorWrapper).first().click();\n        //First hint for search background-color test\n        cy.get(ApiEditor.apiSearchHint).first().should(\"have.css\", \"background-color\", backgroundColorGray200);\n        //Last element (can be any child other than the default) background-color check\n        //On hover background-color should change.\n        cy.get(ApiEditor.apiSearchHint).last().should(\"have.css\", \"background-color\", backgroundColorwhite).realHover().should(\"have.css\", \"background-color\", hover);\n        //Delete created test API\n        cy.DeleteAPI();\n        cy.wait(2000);\n        cy.get(commonLocators.entityName).contains(\"test_styles\").should(\"not.exist\");\n        //Delete two datasources\n        ee.ExpandCollapseEntity(\"Datasources\");\n        cy.deleteDatasource(appName1);\n        cy.deleteDatasource(appName2);\n      });\n    });\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test api name unique error","suites":["Name uniqueness test"],"updatePoint":{"line":2,"column":32,"index":80},"line":2,"code":"  it(\"Test api name unique error\", () => {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"Uni\");\n    cy.log(\"Creation of UniqueName Action successful\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Validate Unique Name","suites":["Name uniqueness test"],"updatePoint":{"line":9,"column":29,"index":326},"line":9,"code":"  it(\"1. Validate Unique Name\", () => {\n    cy.CreationOfUniqueAPIcheck(\"Uni\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate download apiname check","suites":["Name uniqueness test"],"updatePoint":{"line":12,"column":40,"index":423},"line":12,"code":"  it(\"2. Validate download apiname check\", () => {\n    cy.CreationOfUniqueAPIcheck(\"download\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate dedicated worker scope object property(Blob)apiname check","suites":["Name uniqueness test"],"updatePoint":{"line":15,"column":75,"index":560},"line":15,"code":"  it(\"3. Validate dedicated worker scope object property(Blob)apiname check\", () => {\n    cy.CreationOfUniqueAPIcheck(\"Blob\");\n  });","file":"e2e/Regression/ServerSide/ApiTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test curl import flow Run and Delete","suites":["Test curl import flow"],"updatePoint":{"line":6,"column":45,"index":366},"line":6,"code":"  it(\"1. Test curl import flow Run and Delete\", function () {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      localStorage.setItem(\"ApiPaneV2\", \"ApiPaneV2\");\n      cy.NavigateToApiEditor();\n      _.dataSources.NavigateToDSCreateNew();\n      cy.get(ApiEditor.curlImage).click({\n        force: true\n      });\n      cy.get(\"textarea\").type(\"curl -X GET \" + datasourceFormData[\"mockApiUrl\"]);\n      cy.importCurl();\n      cy.get(\"@curlImport\").then(response => {\n        expect(response.response.body.responseMeta.success).to.eq(true);\n        cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n          const someText = text;\n          expect(someText).to.equal(response.response.body.data.name);\n        });\n      });\n      //cy.WaitAutoSave();\n      cy.RunAPI();\n      cy.ResponseStatusCheck(\"200 OK\");\n      _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n      cy.get(\"@deleteAction\").then(response => {\n        expect(response.response.body.responseMeta.success).to.eq(true);\n      });\n    });\n  });","file":"e2e/Regression/ServerSide/ApiTests/CurlImportFlow_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bug:15175 Creating new cURL import query from entity explorer crashes the app","suites":["Test curl import flow"],"updatePoint":{"line":32,"column":86,"index":1434},"line":32,"code":"  it(\"2. Bug:15175 Creating new cURL import query from entity explorer crashes the app\", function () {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      cy.CheckAndUnfoldEntityItem(\"Pages\");\n      cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n        force: true\n      });\n      cy.get(globalSearchLocators.createNew).click();\n      cy.xpath(\"//span[text()='New cURL import']\").click();\n      cy.get(\"textarea\").type('curl -d \\'{\"name\":\"morpheus\",\"job\":\"leader\"}\\' -H Content-Type:application/json -X POST ' + datasourceFormData[\"echoApiUrl\"], {\n        force: true,\n        parseSpecialCharSequences: false\n      });\n      cy.importCurl();\n      cy.RunAPI();\n      cy.ResponseStatusCheck(\"200 OK\");\n      cy.get(\"@curlImport\").then(response => {\n        cy.expect(response.response.body.responseMeta.success).to.eq(true);\n        cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n          const someText = text;\n          expect(someText).to.equal(response.response.body.data.name);\n        });\n      });\n    });\n  });","file":"e2e/Regression/ServerSide/ApiTests/CurlImportFlow_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Bug:19214 Test curl import flow for request without any headers","suites":["Test curl import flow"],"updatePoint":{"line":56,"column":72,"index":2489},"line":56,"code":"  it(\"3. Bug:19214 Test curl import flow for request without any headers\", function () {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      _.dataSources.FillCurlNImport(\"curl -X GET \" + datasourceFormData[\"echoApiUrl\"]);\n      _.apiPage.AssertEmptyHeaderKeyValuePairsPresent(0);\n      _.apiPage.AssertEmptyHeaderKeyValuePairsPresent(1);\n    });\n  });","file":"e2e/Regression/ServerSide/ApiTests/CurlImportFlow_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Allows execution of js function when lint warnings(not errors) are present in code","suites":["JS Function Execution"],"updatePoint":{"line":45,"column":91,"index":1582},"line":45,"code":"  it(\"1. Allows execution of js function when lint warnings(not errors) are present in code\", function () {\n    _.jsEditor.CreateJSObject(`export default {\n  \tmyFun1: ()=>{\n  \t\tf;\n  \t\treturn \"yes\"\n  \t}\n  }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    _.jsEditor.AssertParseError(false);\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Prevents execution of js function when parse errors are present in code","suites":["JS Function Execution"],"updatePoint":{"line":61,"column":80,"index":2023},"line":61,"code":"  it(\"2. Prevents execution of js function when parse errors are present in code\", function () {\n    _.jsEditor.CreateJSObject(`export default {\n  \tmyFun1: ()=>>{\n  \t\treturn \"yes\"\n  \t}\n  }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    //Debugger shouldn't open when there is a parse error.\n    //It should open only in case of execution error.\n    _.debuggerHelper.AssertClosed();\n    //Verify there is no error shown in the response tab.\n    _.debuggerHelper.ClickDebuggerIcon();\n    _.debuggerHelper.ClickResponseTab();\n    _.jsEditor.AssertParseError(false);\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Prioritizes parse errors that render JS Object invalid over function execution parse errors in debugger callouts","suites":["JS Function Execution"],"updatePoint":{"line":82,"column":121,"index":2790},"line":82,"code":"  it(\"3. Prioritizes parse errors that render JS Object invalid over function execution parse errors in debugger callouts\", function () {\n    const JSObjectWithFunctionExecutionParseErrors = `export default {\n      myFun1 :()=>{\n        return f\n      }\n    }`;\n    const JSObjectWithParseErrors = `export default {\n      myFun1:  (a ,b)=>>{\n      return \"yes\"\n      }\n    }`;\n\n    // create jsObject with parse error (that doesn't render JS Object invalid)\n    _.jsEditor.CreateJSObject(JSObjectWithFunctionExecutionParseErrors, {\n      paste: true,\n      completeReplace: true,\n      toRun: true,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n\n    // Assert presence of function execution parse error callout\n    _.jsEditor.AssertParseError(true);\n\n    // Add parse error that renders JS Object invalid in code\n    _.jsEditor.CreateJSObject(JSObjectWithParseErrors, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: false,\n      prettify: false\n    });\n    _.agHelper.Sleep(2000); // Giving more time for parsing to reduce flakiness!\n\n    // Assert presence of parse error callout (entire JS Object is invalid)\n    _.jsEditor.AssertParseError(true);\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Shows lint error and toast modal when JS Object doesn't start with 'export default'","suites":["JS Function Execution"],"updatePoint":{"line":120,"column":92,"index":4049},"line":120,"code":"  it(\"4. Shows lint error and toast modal when JS Object doesn't start with 'export default'\", () => {\n    const invalidJSObjectStartToastMessage = \"Start object with export default\";\n    const jsComment = \"// This is a comment\";\n    const jsObjectStartLine = `export default{`;\n    const jsObjectStartLineWithSpace = `export  default{`;\n    const jsObjectStartingWithAComment = `${jsComment}\n  ${jsObjectStartLine}\n        fun1:()=>true\n      }`;\n    const jsObjectStartingWithASpace = `${jsObjectStartLineWithSpace}\n        fun1:()=>true\n      }`;\n    const jsObjectStartingWithANewLine = `\n    ${jsObjectStartLine}\n        fun1:()=>true\n      }`;\n    const assertInvalidJSObjectStart = (jsCode, highlightedLintText) => {\n      // create jsObject that doesn't start with 'export default'\n      _.jsEditor.CreateJSObject(jsCode, {\n        paste: true,\n        completeReplace: true,\n        toRun: false,\n        shouldCreateNewJSObj: true\n      });\n\n      // Assert presence of toast message\n      _.agHelper.AssertContains(invalidJSObjectStartToastMessage);\n\n      // Assert presence of lint error at the start line\n      _.agHelper.GetNAssertElementText(_.locators._lintErrorElement, highlightedLintText, \"contain.text\", -1);\n      _.agHelper.WaitUntilAllToastsDisappear();\n      _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n    };\n    assertInvalidJSObjectStart(jsObjectStartingWithAComment, jsComment);\n    assertInvalidJSObjectStart(jsObjectStartingWithANewLine, jsObjectStartLine);\n    assertInvalidJSObjectStart(jsObjectStartingWithASpace, jsObjectStartLineWithSpace);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Supports the use of large JSON data (doesn't crash)","suites":["JS Function Execution"],"updatePoint":{"line":157,"column":60,"index":5616},"line":157,"code":"  it(\"5. Supports the use of large JSON data (doesn't crash)\", () => {\n    const jsObjectWithLargeJSONData = `export default{\n      largeData: ${JSON.stringify(largeJSONData)},\n      myfun1: ()=> this.largeData\n    }`;\n    const crashMessage = \"Oops! Something went wrong\";\n    // create jsObject with large json data and run\n    _.jsEditor.CreateJSObject(jsObjectWithLargeJSONData, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true\n    });\n\n    // wait for 3 secs and assert that App doesn't crash\n    _.agHelper.Sleep(3000);\n    _.agHelper.AssertContains(crashMessage, \"not.exist\");\n\n    // Edit JSObject and run\n    _.jsEditor.CreateJSObject(\" \", {\n      paste: true,\n      completeReplace: false,\n      toRun: true,\n      shouldCreateNewJSObj: false\n    });\n    cy.get(\"@jsObjName\").then(jsObjName => {\n      _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n      _.propPane.UpdatePropertyFieldValue(\"Table data\", `{{${jsObjName}.largeData}}`);\n    });\n\n    // Deploy App and test that table loads properly\n    _.deployMode.DeployApp();\n    _.table.WaitUntilTableLoad();\n    _.table.ReadTableRowColumnData(0, 1, \"v1\", 2000).then($cellData => {\n      expect($cellData).to.eq(\"1\"); //validating id column value - row 0\n      _.deployMode.NavigateBacktoEditor();\n    });\n    _.entityExplorer.SelectEntityByName(\"JSObject1\", \"Queries/JS\");\n    _.entityExplorer.ActionContextMenuByEntityName(\"JSObject1\", \"Delete\", \"Are you sure?\", true);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Doesn't cause cyclic dependency when function name is edited","suites":["JS Function Execution"],"updatePoint":{"line":197,"column":69,"index":7131},"line":197,"code":"  it(\"6. Doesn't cause cyclic dependency when function name is edited\", () => {\n    const syncJSCode = `export default {\n      myFun1 :()=>{\n        return \"yes\"`;\n    const syncJSCodeWithRenamedFunction1 = `export default {\n      myFun2 :()=>{\n        return \"yes\"\n      }\n    }`;\n    const syncJSCodeWithRenamedFunction2 = `export default {\n      myFun3 :()=>{\n        return \"yes\"\n      }\n    }`;\n    const asyncJSCode = `export default {\n      myFun1 :async ()=>{\n        return \"yes\"`;\n    const asyncJSCodeWithRenamedFunction1 = `export default {\n      myFun2 :async ()=>{\n        return \"yes\"\n      }\n    }`;\n    const asyncJSCodeWithRenamedFunction2 = `export default {\n      myFun3 :async ()=>{\n        return \"yes\"\n      }\n    }`;\n    _.jsEditor.CreateJSObject(syncJSCode, {\n      paste: false,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n\n    // change sync function name and test that cyclic dependency is not created\n    _.jsEditor.EditJSObj(syncJSCodeWithRenamedFunction1, false);\n    _.agHelper.AssertContains(\"Cyclic dependency\", \"not.exist\");\n    _.jsEditor.EditJSObj(syncJSCodeWithRenamedFunction2, false);\n    _.agHelper.AssertContains(\"Cyclic dependency\", \"not.exist\");\n    _.jsEditor.CreateJSObject(asyncJSCode, {\n      paste: false,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    // change async function name and test that cyclic dependency is not created\n    _.jsEditor.EditJSObj(asyncJSCodeWithRenamedFunction1, false);\n    _.agHelper.AssertContains(\"Cyclic dependency\", \"not.exist\");\n    _.jsEditor.EditJSObj(asyncJSCodeWithRenamedFunction2, false);\n    _.agHelper.AssertContains(\"Cyclic dependency\", \"not.exist\");\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Maintains order of async functions in settings tab alphabetically at all times","suites":["JS Function Execution"],"updatePoint":{"line":251,"column":87,"index":8999},"line":251,"code":"  it(\"7. Maintains order of async functions in settings tab alphabetically at all times\", function () {\n    functionsLength = FUNCTIONS_SETTINGS_DEFAULT_DATA.length;\n    // Number of functions set to run on page load and should also confirm before execute\n    onPageLoadAndConfirmExecuteFunctionsLength = FUNCTIONS_SETTINGS_DEFAULT_DATA.filter(func => func.onPageLoad && func.confirmBeforeExecute).length;\n    getJSObject = data => {\n      let JS_OBJECT_BODY = `export default`;\n      for (let i = 0; i < functionsLength; i++) {\n        const functionName = data[i].name;\n        JS_OBJECT_BODY += i === 0 ? `{\n              ${functionName}: async ()=>\"${functionName}\",` : i === functionsLength - 1 ? `\n            ${functionName}: async ()=>\"${functionName}\",\n          }` : `\n            ${functionName}: async ()=> \"${functionName}\",`;\n      }\n      return JS_OBJECT_BODY;\n    };\n\n    // Create js object\n    _.jsEditor.CreateJSObject(getJSObject(FUNCTIONS_SETTINGS_DEFAULT_DATA), {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n    cy.get(\"@jsObjName\").then(jsObjName => {\n      jsObj = jsObjName;\n    });\n    // Switch to settings tab\n    _.agHelper.GetNClick(_.jsEditor._settingsTab);\n    // Add settings for each function (according to data)\n    Object.values(FUNCTIONS_SETTINGS_DEFAULT_DATA).forEach(functionSetting => {\n      _.jsEditor.EnableDisableAsyncFuncSettings(functionSetting.name, functionSetting.onPageLoad, functionSetting.confirmBeforeExecute);\n    });\n    // Switch to settings tab\n    _.agHelper.GetNClick(_.jsEditor._settingsTab);\n    //After JSObj is created - check methods are in alphabetical order\n    assertAsyncFunctionsOrder(FUNCTIONS_SETTINGS_DEFAULT_DATA);\n    _.agHelper.RefreshPage();\n    // click \"Yes\" button for all onPageload && ConfirmExecute functions\n    for (let i = 0; i <= onPageLoadAndConfirmExecuteFunctionsLength - 1; i++) {\n      //_.agHelper.AssertElementPresence(_.jsEditor._dialog(\"Confirmation Dialog\")); // Not working in edit mode\n      _.jsEditor.ConfirmationClick(\"Yes\");\n      _.agHelper.Sleep(2000);\n    }\n    // Switch to settings tab and assert order\n    _.agHelper.GetNClick(_.jsEditor._settingsTab);\n    assertAsyncFunctionsOrder(FUNCTIONS_SETTINGS_DEFAULT_DATA);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify Async methods have alphabetical order after cloning page and renaming it","suites":["JS Function Execution"],"updatePoint":{"line":300,"column":88,"index":11320},"line":300,"code":"  it(\"8. Verify Async methods have alphabetical order after cloning page and renaming it\", () => {\n    const FUNCTIONS_SETTINGS_RENAMED_DATA = [{\n      name: \"newGetId\",\n      onPageLoad: true,\n      confirmBeforeExecute: false\n    }, {\n      name: \"zip1\",\n      onPageLoad: true,\n      confirmBeforeExecute: true\n    }, {\n      name: \"base\",\n      onPageLoad: false,\n      confirmBeforeExecute: false\n    }, {\n      name: \"newAssert\",\n      onPageLoad: true,\n      confirmBeforeExecute: false\n    }, {\n      name: \"test\",\n      onPageLoad: true,\n      confirmBeforeExecute: true\n    }];\n\n    // clone page and assert order of functions\n    _.entityExplorer.ClonePage();\n    _.agHelper.Sleep();\n    _.agHelper.WaitUntilAllToastsDisappear();\n    _.agHelper.Sleep();\n    // click \"Yes\" button for all onPageload && ConfirmExecute functions\n    for (let i = 0; i <= onPageLoadAndConfirmExecuteFunctionsLength - 1; i++) {\n      //_.agHelper.AssertElementPresence(_.jsEditor._dialog(\"Confirmation Dialog\")); // Not working in edit mode\n      _.jsEditor.ConfirmationClick(\"Yes\");\n      _.agHelper.Sleep(2000); //for current pop up to close & next to appear!\n    }\n\n    _.entityExplorer.ExpandCollapseEntity(\"Queries/JS\");\n    _.entityExplorer.SelectEntityByName(jsObj, \"Queries/JS\");\n    _.agHelper.GetNClick(_.jsEditor._settingsTab);\n    assertAsyncFunctionsOrder(FUNCTIONS_SETTINGS_DEFAULT_DATA);\n\n    // rename functions and assert order\n    _.agHelper.GetNClick(_.jsEditor._codeTab);\n    _.jsEditor.EditJSObj(getJSObject(FUNCTIONS_SETTINGS_RENAMED_DATA), false);\n    _.agHelper.Sleep(3000);\n    _.agHelper.GetNClick(_.jsEditor._settingsTab);\n    assertAsyncFunctionsOrder(FUNCTIONS_SETTINGS_RENAMED_DATA);\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"9. Bug 13197: Verify converting async functions to sync resets all settings","suites":["JS Function Execution"],"updatePoint":{"line":348,"column":81,"index":13087},"line":348,"code":"  it(\"9. Bug 13197: Verify converting async functions to sync resets all settings\", () => {\n    const asyncJSCode = `export default {\nname: \"Appsmith\",\nasyncToSync : async ()=>{\nreturn \"yes\";`;\n    const syncJSCode = `export default {\n      name: \"Appsmith\",\n      asyncToSync : ()=>{\n        return \"yes\";\n      },\n    }`;\n    _.jsEditor.CreateJSObject(asyncJSCode, {\n      paste: false,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: false\n    });\n\n    // Switch to settings tab\n    _.agHelper.GetNClick(_.jsEditor._settingsTab);\n    // Enable all settings\n    _.jsEditor.EnableDisableAsyncFuncSettings(\"asyncToSync\", true, true);\n\n    // Modify js object\n    _.jsEditor.EditJSObj(syncJSCode, false);\n    _.agHelper.RefreshPage();\n    cy.wait(\"@jsCollections\").then(({\n      response\n    }) => {\n      expect(response?.body.data.actions[0].executeOnLoad).to.eq(false);\n      expect(response?.body.data.actions[0].confirmBeforeExecute).to.eq(false);\n    });\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"10. Verify that js function execution errors are logged in debugger and removed when function is deleted","suites":["JS Function Execution"],"updatePoint":{"line":383,"column":110,"index":14197},"line":383,"code":"  it(\"10. Verify that js function execution errors are logged in debugger and removed when function is deleted\", () => {\n    const JS_OBJECT_WITH_PARSE_ERROR = `export default {\n      myVar1: [],\n      myVar2: {},\n      myFun1: () => {\n        return Table1.unknown.id`;\n    const JS_OBJECT_WITHOUT_PARSE_ERROR = `export default {\n      myVar1: [],\n      myVar2: {},\n      myFun1: () => {\n        return Table1.unknown\n      }\n    }`;\n    const JS_OBJECT_WITH_DELETED_FUNCTION = `export default {\n      myVar1: [],\n      myVar2: {}\n    }`;\n\n    // Create js object\n    _.jsEditor.CreateJSObject(JS_OBJECT_WITH_PARSE_ERROR, {\n      paste: false,\n      completeReplace: true,\n      toRun: true,\n      shouldCreateNewJSObj: true\n    });\n\n    // Assert that there is a function execution parse error\n    _.jsEditor.AssertParseError(true);\n    // Assert that response tab is not empty\n    _.agHelper.AssertContains(\"No signs of trouble here!\", \"not.exist\");\n    // Assert presence of typeError in response tab\n    _.agHelper.AssertContains(\"Cannot read properties of undefined (reading 'id')\", \"exist\");\n    _.agHelper.AssertContains(\"TypeError\", \"exist\");\n\n    // click the error tab\n    _.agHelper.GetNClick(_.locators._errorTab);\n    // Assert that errors tab is not empty\n    _.agHelper.AssertContains(\"No signs of trouble here!\", \"not.exist\");\n    // Assert presence of typeError in error tab\n    _.agHelper.AssertContains(\"Cannot read properties of undefined (reading 'id')\", \"exist\");\n    _.agHelper.AssertContains(\"TypeError\", \"exist\");\n\n    // Fix parse error and assert that debugger error is removed\n    _.jsEditor.EditJSObj(JS_OBJECT_WITHOUT_PARSE_ERROR, true, false);\n    _.agHelper.RefreshPage();\n    _.jsEditor.RunJSObj();\n    //_.agHelper.AssertContains(\"ran successfully\"); //commenting since 'Resource not found' comes sometimes due to fast parsing\n    _.agHelper.AssertElementAbsence(_.locators._runBtnSpinner, 10000);\n    _.agHelper.GetNClick(_.locators._errorTab);\n    _.agHelper.AssertContains(\"Cannot read properties of undefined (reading 'id')\", \"not.exist\");\n\n    // Switch back to response tab\n    _.agHelper.GetNClick(_.locators._responseTab);\n    // Re-introduce parse errors\n    _.jsEditor.EditJSObj(JS_OBJECT_WITH_PARSE_ERROR + \"}}\", false, false);\n    _.jsEditor.RunJSObj();\n    // Assert that there is a function execution parse error\n    _.jsEditor.AssertParseError(true);\n\n    // Delete function\n    _.jsEditor.EditJSObj(JS_OBJECT_WITH_DELETED_FUNCTION, true, false);\n    // Assert that parse error is removed from debugger when function is deleted\n    _.agHelper.GetNClick(_.locators._errorTab);\n    _.agHelper.AssertContains(\"Cannot read properties of undefined (reading 'id')\", \"not.exist\");\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"\", true);\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/JSFunctionExecution_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Tests access to outer variable","suites":["Tests functionality of platform function"],"updatePoint":{"line":3,"column":39,"index":204},"line":3,"code":"  it(\"1. Tests access to outer variable\", () => {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      apiPage.CreateAndFillApi(datasourceFormData[\"mockApiUrl\"], \"getAllUsers\");\n      jsEditor.CreateJSObject(`export default {\n        myFun1: () => {\n\n        },\n        myFun2: async () => {\n\n        },\n        accessOuterVariableInsideSuccessCb: () => {\n          const outer = \"World\";\n          getAllUsers.run(() => {\n            showAlert(\"Hello \" + outer + \" from success callback\");\n          });\n        },\n        accessOuterVariableInsideSetIntervalCb: async () => {\n          const outer = \"World\";\n          setInterval(() => {\n            showAlert(\"Hello \" + outer +\" from setInterval\");\n            clearInterval(\"test\");\n          }, 1000, \"test\")\n        },\n        accessOuterVariableInsideGeoCb: async () => {\n          const outer = \"World\";\n          appsmith.geolocation.getCurrentPosition(() => {\n            showAlert(\"Hello \" + outer+ \" from current position\");\n          });\n        },\n        metaDataForSetInterval: () => {\n          setInterval(() => {\n            console.log(\"Hello from setInterval\");\n            clearInterval(\"test345\")\n          }, 3000, \"test345\");\n        },\n        metaDataForSetTimeout: () => {\n          setTimeout(() => {\n            console.log(\"Hello from setTimeout\");\n          }, 4000);\n        },\n        metaDataApiTest: () => {\n          getAllUsers.run().then(() => {\n            setTimeout(() => {\n              console.log(\"Hello from setTimeout inside API\")\n            }, 2000);\n          })\n        },\n        switchMetaData: () => {},\n        accessSetIntervalFromSetTimeout: () => {\n          setTimeout(() => {\n            setInterval(() => {\n              showAlert(\"Hello World from setInterval inside setTimeout\");\n              clearInterval(\"test123\");\n            }, 1000, \"test123\");\n          }, 1000);\n        },\n        executeTriggersOutsideReqResCycle: () => {\n          showAlert(\"Hello\").then(() => getAllUsers.run(() => showAlert(\"World\")));\n        }\n    }`, {\n        paste: true,\n        completeReplace: true,\n        toRun: false,\n        shouldCreateNewJSObj: true,\n        prettify: false\n      });\n      agHelper.Sleep(4000);\n      cy.url().then(url => {\n        cy.visit(url, {\n          onBeforeLoad: win => {\n            const latitude = 48.71597183246423;\n            const longitude = 21.255670821215418;\n            cy.stub(win.navigator.geolocation, \"getCurrentPosition\").callsArgWith(0, {\n              coords: {\n                latitude,\n                longitude\n              }\n            });\n          }\n        });\n        jsEditor.SelectFunctionDropdown(\"accessOuterVariableInsideGeoCb\");\n        jsEditor.RunJSObj();\n        agHelper.AssertContains(\"Hello World from current position\", \"exist\");\n        jsEditor.SelectFunctionDropdown(\"accessOuterVariableInsideSuccessCb\");\n        jsEditor.RunJSObj();\n        agHelper.AssertContains(\"Hello World from success callback\", \"exist\");\n        jsEditor.SelectFunctionDropdown(\"accessOuterVariableInsideSetIntervalCb\");\n        jsEditor.RunJSObj();\n        agHelper.AssertContains(\"Hello World from setInterval\", \"exist\");\n        jsEditor.SelectFunctionDropdown(\"accessSetIntervalFromSetTimeout\");\n        jsEditor.RunJSObj();\n        agHelper.AssertContains(\"Hello World from setInterval inside setTimeout\", \"exist\");\n        jsEditor.SelectFunctionDropdown(\"executeTriggersOutsideReqResCycle\");\n        jsEditor.RunJSObj();\n        agHelper.AssertContains(\"Hello\", \"exist\");\n        agHelper.AssertContains(\"World\", \"exist\");\n\n        // Test for meta data\n        jsEditor.SelectFunctionDropdown(\"metaDataForSetTimeout\");\n        jsEditor.RunJSObj();\n        agHelper.GetNClick(jsEditor._logsTab);\n        jsEditor.SelectFunctionDropdown(\"switchMetaData\");\n        jsEditor.RunJSObj();\n        agHelper.Sleep(4000);\n        agHelper.GetNClick(jsEditor._logsTab);\n        debuggerHelper.DebuggerLogsFilter(\"JSObject1.metaDataForSetTimeout\");\n        debuggerHelper.DoesConsoleLogExist(\"Hello from setTimeout\");\n        jsEditor.SelectFunctionDropdown(\"metaDataForSetInterval\");\n        jsEditor.RunJSObj();\n        agHelper.GetNClick(jsEditor._logsTab);\n        jsEditor.SelectFunctionDropdown(\"switchMetaData\");\n        jsEditor.RunJSObj();\n        agHelper.Sleep(3000);\n        agHelper.GetNClick(jsEditor._logsTab);\n        debuggerHelper.DebuggerLogsFilter(\"JSObject1.metaDataForSetInterval\");\n        debuggerHelper.DoesConsoleLogExist(\"Hello from setInterval\");\n        jsEditor.SelectFunctionDropdown(\"metaDataApiTest\");\n        jsEditor.RunJSObj();\n        agHelper.GetNClick(jsEditor._logsTab);\n        jsEditor.SelectFunctionDropdown(\"switchMetaData\");\n        jsEditor.RunJSObj();\n        agHelper.Sleep(2000);\n        agHelper.GetNClick(jsEditor._logsTab);\n        debuggerHelper.DebuggerLogsFilter(\"JSObject1.metaDataApiTest\");\n        debuggerHelper.DoesConsoleLogExist(\"Hello from setTimeout inside API\");\n      });\n    });\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/PlatformFn_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Executes showAlert after 3 seconds and uses default value","suites":["Tests setTimeout API"],"updatePoint":{"line":9,"column":66,"index":436},"line":9,"code":"  it(\"1. Executes showAlert after 3 seconds and uses default value\", () => {\n    jsEditor.CreateJSObject(`export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: (x = \"default\") => {\n            setTimeout(() => {\n                showAlert(\"Hello world - \" + x);\n            }, 3000);\n        }\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: true\n    });\n    agHelper.Sleep(2000);\n    jsEditor.RunJSObj();\n    agHelper.Sleep(3000);\n    agHelper.AssertContains(\"Hello world - default\", \"exist\");\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/SetTimeout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Executes all three alerts in parallel after 3 seconds","suites":["Tests setTimeout API"],"updatePoint":{"line":30,"column":62,"index":1031},"line":30,"code":"  it(\"2. Executes all three alerts in parallel after 3 seconds\", () => {\n    jsEditor.CreateJSObject(`export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: (x = \"default\") => {\n            setTimeout(() => {\n                showAlert(\"Hello world - \" + x);\n            }, 3000);\n        },\n        myFun2: () => {\n            this.myFun1(1)\n            this.myFun1(2)\n            this.myFun1(3)\n        }\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: true\n    });\n    agHelper.Sleep(2000);\n    jsEditor.SelectFunctionDropdown(\"myFun2\");\n    jsEditor.RunJSObj();\n    agHelper.Sleep(3000);\n    agHelper.AssertContains(\"Hello world - 1\", \"exist\");\n    agHelper.AssertContains(\"Hello world - 2\", \"exist\");\n    agHelper.AssertContains(\"Hello world - 3\", \"exist\");\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/SetTimeout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Resolves promise after 3 seconds and shows alert","suites":["Tests setTimeout API"],"updatePoint":{"line":59,"column":57,"index":1892},"line":59,"code":"  it(\"3. Resolves promise after 3 seconds and shows alert\", () => {\n    jsEditor.CreateJSObject(`export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: (x) => {\n            new Promise((res, rej) => setTimeout(() => res(\"resolved\"), 3000)).then((res) => {\n                showAlert(res);\n            });\n        },\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: true\n    });\n    agHelper.Sleep(2000);\n    jsEditor.RunJSObj();\n    agHelper.Sleep(3000);\n    agHelper.AssertContains(\"resolved\");\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/SetTimeout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Verifies code execution order when using setTimeout","suites":["Tests setTimeout API"],"updatePoint":{"line":80,"column":60,"index":2493},"line":80,"code":"  it(\"4. Verifies code execution order when using setTimeout\", () => {\n    jsEditor.CreateJSObject(`export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: (x) => {\n            console.log(\"Hey there!\");\n            setTimeout(() => console.log(\"Working!\"), 4000);\n            console.log(\"Bye!\");\n        },\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: true\n    });\n    agHelper.Sleep(2000);\n    jsEditor.RunJSObj();\n    agHelper.GetNClick(jsEditor._logsTab);\n    debuggerHelper.DoesConsoleLogExist(\"Hey there!\");\n    debuggerHelper.DoesConsoleLogExist(\"Bye!\");\n    debuggerHelper.DoesConsoleLogExist(\"Working!\", false, undefined, 100);\n    agHelper.Sleep(4000);\n    debuggerHelper.DoesConsoleLogExist(\"Working!\");\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/SetTimeout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Resolves promise after 3 seconds and shows alert","suites":["Tests setTimeout API"],"updatePoint":{"line":105,"column":57,"index":3312},"line":105,"code":"  it(\"5. Resolves promise after 3 seconds and shows alert\", () => {\n    jsEditor.CreateJSObject(`export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: (x) => {\n            new Promise((res, rej) => setTimeout(() => res(\"resolved\"), 3000)).then((res) => {\n                showAlert(res);\n            });\n        },\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: true\n    });\n    agHelper.Sleep(2000);\n    jsEditor.RunJSObj();\n    agHelper.Sleep(3000);\n    agHelper.AssertContains(\"resolved\");\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/SetTimeout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Access to args passed into success/error callback functions in API.run when using setTimeout","suites":["Tests setTimeout API"],"updatePoint":{"line":126,"column":101,"index":3954},"line":126,"code":"  it(\"6. Access to args passed into success/error callback functions in API.run when using setTimeout\", () => {\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      apiPage.CreateAndFillApi(datasourceFormData[\"mockApiUrl\"]);\n      jsEditor.CreateJSObject(`export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: (x) => {\n            Api1.run((res) => {\n              setTimeout(() => {\n                showAlert(res[0].name);\n              }, 3000);\n            }, (error) => {\n              console.log(error);\n            });\n        },\n        myFun2: (x) => {\n          Api1.run().then((res) => {\n            setTimeout(() => {\n              showAlert(res[0].name);\n            }, 3000);\n          });\n        }\n      }`, {\n        paste: true,\n        completeReplace: true,\n        toRun: false,\n        shouldCreateNewJSObj: true,\n        prettify: true\n      });\n      jsEditor.RenameJSObjFromPane(\"Timeouts\");\n      agHelper.Sleep(2000);\n      jsEditor.RunJSObj();\n      agHelper.Sleep(3000);\n      cy.wait(\"@postExecute\").then(interception => {\n        //Js function to match any name returned from API\n        userName = JSON.stringify(interception.response.body.data.body[0].name).replace(/['\"]+/g, \"\"); //removing double quotes\n        agHelper.AssertContains(userName);\n      });\n      agHelper.Sleep(2000);\n      jsEditor.SelectFunctionDropdown(\"myFun2\");\n      jsEditor.RunJSObj();\n      agHelper.Sleep(3000);\n      cy.wait(\"@postExecute\").then(interception => {\n        userName = JSON.stringify(interception.response.body.data.body[0].name).replace(/['\"]+/g, \"\");\n        agHelper.AssertContains(userName);\n      });\n    });\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/SetTimeout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"7. Verifies whether setTimeout executes on page load","suites":["Tests setTimeout API"],"updatePoint":{"line":174,"column":58,"index":5589},"line":174,"code":"  it(\"7. Verifies whether setTimeout executes on page load\", () => {\n    //apiPage.CreateAndFillApi(agHelper.mockApiUrl);\n    jsEditor.CreateJSObject(`export default {\n        myVar1: [],\n        myVar2: {},\n        myFun1: (x) => {\n            setTimeout(() => {\n              showAlert(\"Success!\");\n              Timeouts.myFun2();\n            }, 3000)\n        },\n      }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: false,\n      shouldCreateNewJSObj: true,\n      prettify: true\n    });\n    jsEditor.EnableDisableAsyncFuncSettings(\"myFun1\", true, false);\n    deployMode.DeployApp();\n    agHelper.Sleep(1000); //DeployApp already waiting 2000ms hence reducing it here to equate to 3000 timeout\n    agHelper.AssertContains(\"Success!\");\n    agHelper.Sleep(1000);\n    cy.wait(\"@postExecute\").then(interception => {\n      userName = JSON.stringify(interception.response.body.data.body[0].name).replace(/['\"]+/g, \"\");\n      agHelper.AssertContains(userName);\n    });\n  });","file":"e2e/Regression/ServerSide/JsFunctionExecution/SetTimeout_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Preserves redirectUrl param on login failure","suites":["Login failure"],"updatePoint":{"line":4,"column":53,"index":222},"line":4,"code":"  it(\"1. Preserves redirectUrl param on login failure\", function () {\n    let appUrl;\n    _.deployMode.DeployApp();\n    cy.location().then(location => {\n      cy.LogOutUser();\n      appUrl = location.href.split(\"?\")[0];\n      cy.visit(appUrl);\n      cy.get(loginPage.username).should(\"be.visible\");\n    }).then(() => cy.GetUrlQueryParams()).then(queryParams => {\n      expect(decodeURIComponent(queryParams.redirectUrl)).to.eq(appUrl);\n      cy.LoginUser(\"user@error.com\", \"pwd_error\", false);\n    }).then(() => cy.GetUrlQueryParams()).then(queryParams => {\n      expect(decodeURIComponent(queryParams.error)).to.eq(\"true\");\n      expect(decodeURIComponent(queryParams.redirectUrl)).to.eq(appUrl);\n      cy.LoginUser(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"), false);\n    }).then(() => cy.location()).then(location => {\n      expect(location.href.split(\"?\")[0]).to.eq(appUrl);\n    });\n  });","file":"e2e/Regression/ServerSide/LoginTests/LoginFailure_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Cyclic Dependency Informational Error Messages"],"updatePoint":{"line":27,"column":22,"index":903},"line":27,"code":"  it(\"excludeForAirgap\", \"1. Create Users Sample DB Query & Simulate cyclic depedency\", () => {\n    //Step1 : Create Mock Users DB\n    _.dataSources.CreateMockDB(\"Users\").then(dbName => {\n      _.dataSources.CreateQueryFromActiveTab(dbName, false);\n      _.agHelper.GetNClick(_.dataSources._templateMenuOption(\"Select\"));\n      _.dataSources.ToggleUsePreparedStatement(false);\n    });\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.defaultInput).type(\"{{\" + queryName + \".data[0].gender\");\n    cy.widgetText(\"gender\", widgetsPage.inputWidget, widgetsPage.widgetNameSpan);\n    cy.assertPageSave();\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/JSOnLoad_cyclic_dependency_errors_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Cyclic Dependency Informational Error Messages"],"updatePoint":{"line":40,"column":12,"index":1566},"line":40,"code":"  it(\"airgap\", \"1. Create Users Sample DB Query & Simulate cyclic depedency - airgap\", () => {\n    //Step1 : Create postgres DB\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      dsname = httpResponse.response.body.data.name;\n    });\n    cy.wait(1000);\n    cy.get(datasource.createQuery).click();\n    _.agHelper.GetNClick(_.dataSources._templateMenuOption(\"Select\"));\n    _.dataSources.ToggleUsePreparedStatement(false);\n    _.entityExplorer.NavigateToSwitcher(\"Widgets\");\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.get(widgetsPage.defaultInput).type(\"{{\" + queryName + \".data[0].gender\");\n    cy.widgetText(\"gender\", widgetsPage.inputWidget, widgetsPage.widgetNameSpan);\n    cy.assertPageSave();\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/JSOnLoad_cyclic_dependency_errors_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Reload Page and it should not provide errors in response & update input widget's placeholder property and check errors array to be empty","suites":["Cyclic Dependency Informational Error Messages"],"updatePoint":{"line":58,"column":145,"index":2498},"line":58,"code":"  it(\"2. Reload Page and it should not provide errors in response & update input widget's placeholder property and check errors array to be empty\", () => {\n    // cy.get(widgetsPage.NavHomePage).click({ force: true });\n    cy.reload();\n    cy.openPropertyPane(\"inputwidgetv2\");\n    cy.wait(\"@getPage\").should(\"have.nested.property\", \"response.body.data.layouts[0].layoutOnLoadActionErrors.length\", 0);\n\n    // Case 2: When updating DSL attribute\n    cy.get(widgetsPage.placeholder).type(\"cyclic placeholder\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.data.layoutOnLoadActionErrors.length\", 0);\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/JSOnLoad_cyclic_dependency_errors_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Add JSObject and update its name, content and check for no errors","suites":["Cyclic Dependency Informational Error Messages"],"updatePoint":{"line":68,"column":74,"index":3061},"line":68,"code":"  it(\"3. Add JSObject and update its name, content and check for no errors\", () => {\n    // Case 3: When updating JS Object name\n    _.jsEditor.CreateJSObject(`export default {\n      fun: async () => {\n        showAlert(\"New Js Object\");\n      }\n    }`, {\n      paste: true,\n      completeReplace: true,\n      toRun: true,\n      shouldCreateNewJSObj: true\n    });\n    _.jsEditor.RenameJSObjFromPane(\"newName\");\n    cy.wait(\"@renameJsAction\").should(\"have.nested.property\", \"response.body.data.layoutOnLoadActionErrors.length\", 0);\n\n    // Case 4: When updating Js Object content\n    const syncJSCode = `export default {\n      asyncToSync : ()=>{\n        return \"yes\";\n      }\n    }`;\n    _.jsEditor.EditJSObj(syncJSCode, false);\n    cy.wait(\"@jsCollections\").should(\"have.nested.property\", \"response.body.data.errorReports.length\", 0);\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/JSOnLoad_cyclic_dependency_errors_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Update Widget Name and check for no errors & Update Query and check for errors","suites":["Cyclic Dependency Informational Error Messages"],"updatePoint":{"line":94,"column":87,"index":3953},"line":94,"code":"  it(\"4. Update Widget Name and check for no errors & Update Query and check for errors\", () => {\n    let entityName = \"gender\";\n    let newEntityName = \"newInput\";\n    _.entityExplorer.SelectEntityByName(entityName, \"Widgets\");\n    _.agHelper.RenameWidget(entityName, newEntityName);\n    cy.wait(\"@updateWidgetName\").should(\"have.nested.property\", \"response.body.data.layoutOnLoadActionErrors.length\", 0);\n\n    // Case 6: When updating Datasource query\n    _.entityExplorer.SelectEntityByName(queryName, \"Queries/JS\");\n    // update query and check no cyclic dependency issue should occur\n    cy.xpath(queryLocators.query).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\" \", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.wait(\"@saveAction\").should(\"have.nested.property\", \"response.body.data.errorReports.length\", 0);\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/JSOnLoad_cyclic_dependency_errors_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Run create new user query","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":19,"column":34,"index":716},"line":19,"code":"  it(\"1. Run create new user query\", () => {\n    const userName = \"test_conn_user_\" + guid;\n    const userCreateQuery = `create user ` + userName + ` with password 'password'; grant select, insert, update, delete on all tables in schema public to ` + userName + `;`;\n    _.dataSources.CreateQueryFromOverlay(dsName_1, userCreateQuery, \"create_user\"); //Creating query from EE overlay\n    _.dataSources.RunQuery();\n    _.dataSources.ReadQueryTableResponse(0).then($cellData => {\n      expect($cellData).to.eq(\"0\");\n    });\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create new datasource for user test_conn_user","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":28,"column":54,"index":1264},"line":28,"code":"  it(\"2. Create new datasource for user test_conn_user\", () => {\n    _.dataSources.NavigateToDSCreateNew();\n    _.dataSources.CreatePlugIn(\"PostgreSQL\");\n    _.agHelper.RenameWithInPane(\"Postgres_2_ \" + guid, false);\n    const userName = \"test_conn_user_\" + guid;\n    _.dataSources.FillPostgresDSForm(false, userName, \"password\");\n    _.dataSources.TestSaveDatasource();\n    cy.wrap(\"Postgres_2_ \" + guid).as(\"dsName_2\");\n    cy.get(\"@dsName_2\").then($dsName => {\n      dsName_2 = $dsName;\n\n      //Create 10 queries\n      for (let i = 1; i <= 10; i++) {\n        _.dataSources.NavigateFromActiveDS(dsName_2, true);\n        _.agHelper.GetNClick(_.dataSources._templateMenu);\n        _.agHelper.RenameWithInPane(\"Query_\" + i);\n        const userCreateQuery = `select table_name from information_schema.tables where table_schema='public' and table_type='BASE TABLE';`;\n        _.dataSources.EnterQuery(userCreateQuery);\n      }\n    });\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Bind queries to select widget","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"line":49,"code":"  it.skip(\"3. Bind queries to select widget\", () => {","file":"e2e/Regression/ServerSide/OnLoadTests/PostgresConnections_spec.ts","skipped":true,"dir":"app/client/cypress"},{"name":"4. Run query to drop any open connections before deploy and then deploy app","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":57,"column":81,"index":2767},"line":57,"code":"  it(\"4. Run query to drop any open connections before deploy and then deploy app\", () => {\n    _.dataSources.NavigateFromActiveDS(dsName_1, true);\n    _.agHelper.GetNClick(_.dataSources._templateMenu);\n    _.agHelper.RenameWithInPane(\"check_number_of_connections_1\");\n    const userName = \"test_conn_user_\" + guid;\n    const dropConnections = `select pg_terminate_backend(pg_stat_activity.pid) from pg_stat_activity where pg_stat_activity.usename = '` + userName + `'`;\n    _.dataSources.EnterQuery(dropConnections);\n    _.dataSources.RunQuery();\n    const checkNoOfConnQuery = `select count(*) from pg_stat_activity where usename='` + userName + `'`;\n    _.dataSources.EnterQuery(checkNoOfConnQuery);\n    _.dataSources.RunQuery();\n    _.dataSources.ReadQueryTableResponse(0).then($cellData => {\n      expect(Number($cellData)).to.eq(0);\n    });\n    _.deployMode.DeployApp();\n    _.agHelper.Sleep(10000);\n    _.deployMode.NavigateBacktoEditor();\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Run query to check number of open connections after deploy","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":75,"column":67,"index":3706},"line":75,"code":"  it(\"5. Run query to check number of open connections after deploy\", () => {\n    _.dataSources.NavigateFromActiveDS(dsName_2, true);\n    _.agHelper.GetNClick(_.dataSources._templateMenu);\n    _.agHelper.RenameWithInPane(\"check_number_of_connections_2\");\n    const checkNoOfConnQuery = `select count(*) from pg_stat_activity where usename='test_conn_user_` + guid + `'`;\n    _.dataSources.EnterQuery(checkNoOfConnQuery);\n    _.dataSources.RunQuery();\n    _.dataSources.ReadQueryTableResponse(0).then($cellData => {\n      expect(Number($cellData)).to.lte(5);\n    });\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"6. Drop the newly created user","suites":["Test Postgres number of connections on page load + Bug 11572, Bug 11202"],"updatePoint":{"line":86,"column":36,"index":4247},"line":86,"code":"  it(\"6. Drop the newly created user\", () => {\n    const userName = \"test_conn_user_\" + guid;\n    const dropUser = `DROP OWNED BY ` + userName + `;\n      DROP USER ` + userName + `;`;\n    _.dataSources.CreateQueryFromOverlay(dsName_1, dropUser, \"drop_user\"); //Creating query from EE overlay\n    _.dataSources.RunQuery();\n    _.dataSources.ReadQueryTableResponse(0).then($cellData => {\n      expect($cellData).to.eq(\"0\");\n    });\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n  });","file":"e2e/Regression/ServerSide/OnLoadTests/PostgresConnections_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a postgres datasource","suites":["API Panel Test Functionality"],"updatePoint":{"line":13,"column":37,"index":513},"line":13,"code":"  it(\"1. Create a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"e2e/Regression/ServerSide/Params/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create and runs query","suites":["API Panel Test Functionality"],"updatePoint":{"line":22,"column":30,"index":834},"line":22,"code":"  it(\"2. Create and runs query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.settings).click({\n      force: true\n    });\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.xpath(queryLocators.query).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from {{ this.params.tableName || 'users' }} limit 10\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n  });","file":"e2e/Regression/ServerSide/Params/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Will pass execution params","suites":["API Panel Test Functionality"],"updatePoint":{"line":41,"column":35,"index":1428},"line":41,"code":"  it(\"3. Will pass execution params\", function () {\n    cy.CheckAndUnfoldEntityItem(\"Widgets\");\n    // Bind the table\n    cy.get(\".t--entity-collapse-toggle\").eq(2).click({\n      force: true\n    });\n    cy.get(\".t--entity-name\").contains(\"Table1\").click({\n      force: true\n    });\n    cy.EnableAllCodeEditors();\n    cy.testJsontext(\"tabledata\", \"{{Query1.data}}\");\n    // Assert 'posts' data (default)\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    });\n    // Choose static button\n    cy.get(\".t--entity-name\").contains(\"StaticButton\").click({\n      force: true\n    });\n    // toggle js of onClick\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    // Bind with MultiApi with static value\n    cy.testJsontext(\"onclick\", \"{{Query1.run(undefined, undefined, { tableName: 'users' })}}\");\n    // Choose dynamic button\n    cy.get(\".t--entity-name\").contains(\"DynamicButton\").click({\n      force: true\n    });\n    cy.wait(2000);\n    // toggle js of onClick\n    cy.get(\".t--property-control-onclick\").scrollIntoView();\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    // Bind with MultiApi with dynamicValue value\n    cy.testJsontext(\"onclick\", \"{{Query1.run(undefined, undefined, { tableName: EndpointInput.text })}}\");\n\n    // Publish the app\n    cy.PublishtheApp();\n\n    // Assert on load data in table\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    });\n\n    // Click Static button\n    cy.get(publishPage.buttonWidget).first().click();\n\n    //Wait for postExecute to finish\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    // Assert statically bound \"users\" data\n    cy.readTabledataPublish(\"1\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 8\");\n    });\n\n    // Click dynamic button\n    cy.get(publishPage.buttonWidget).eq(1).click();\n\n    //Wait for postExecute to finish\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(3000);\n    // Assert dynamically bound \"todos\" data\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    });\n  });","file":"e2e/Regression/ServerSide/Params/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify 'Add to widget [Widget Suggestion]' functionality - Postgress","suites":["Add widget - Postgress DataSource"],"updatePoint":{"line":12,"column":77,"index":519},"line":12,"code":"  it(\"1. Verify 'Add to widget [Widget Suggestion]' functionality - Postgress\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.wait(500);\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from public.configs\");\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get(queryEditor.suggestedTableWidget).click();\n    cy.CheckAndUnfoldEntityItem(\"Widgets\");\n    cy.selectEntityByName(\"Table1\");\n    cy.isSelectRow(1);\n    cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n      cy.log(\"the value is \" + tabData);\n      expect(tabData).to.be.equal(\"5\");\n    });\n  });","file":"e2e/Regression/ServerSide/QueryPane/AddWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a PostgresDataSource","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":16,"column":36,"index":715},"line":16,"code":"  it(\"1. Create a PostgresDataSource\", () => {\n    cy.createPostgresDatasource();\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"e2e/Regression/ServerSide/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create a query and populate response by choosing addWidget and validate in Table Widget","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":22,"column":96,"index":985},"line":22,"code":"  it(\"2. Create a query and populate response by choosing addWidget and validate in Table Widget\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM configs LIMIT 10;\");\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n    cy.wait(1000);\n    // Mock the response for this test\n    cy.intercept(\"/api/v1/actions/execute\", {\n      fixture: \"addWidgetTable-mock\"\n    });\n    cy.onlyQueryRun();\n    cy.xpath(queryEditor.queryResponse).first().invoke(\"text\").then(text => {\n      const tableRowTxt = text;\n      cy.get(queryEditor.suggestedTableWidget).click();\n      entityExplorer.SelectEntityByName(\"Table1\");\n      cy.isSelectRow(1);\n      cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n        const tabValue = tabData;\n        cy.log(\"the value is\" + tabValue);\n        expect(tabValue).to.be.equal(\"5\");\n        expect(tableRowTxt).to.equal(tabValue);\n      });\n    });\n  });","file":"e2e/Regression/ServerSide/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Input widget test with default value from table widget","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":46,"column":63,"index":1980},"line":46,"code":"  it(\"3. Input widget test with default value from table widget\", () => {\n    entityExplorer.SelectEntityByName(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(testdata.addInputWidgetBinding);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ServerSide/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. validation of data displayed in input widget based on row data selected","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":51,"column":80,"index":2304},"line":51,"code":"  it(\"4. validation of data displayed in input widget based on row data selected\", function () {\n    cy.isSelectRow(1);\n    cy.readTableV2dataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the value is\" + tabValue);\n      expect(tabValue).to.be.equal(\"5\");\n      cy.isSelectRow(1);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"e2e/Regression/ServerSide/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Input widget test with default value from table widget[Bug#4136]","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":61,"column":73,"index":2739},"line":61,"code":"  it(\"5. Input widget test with default value from table widget[Bug#4136]\", () => {\n    entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n    cy.get(\".t--property-pane-title\").click({\n      force: true\n    });\n    cy.get(\".t--property-pane-title\").type(\"TableUpdated\", {\n      delay: 300\n    }).type(\"{enter}\");\n    cy.wait(\"@updateWidgetName\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"e2e/Regression/ServerSide/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a empty datasource","suites":["Create a query with a empty datasource, run, save the query"],"updatePoint":{"line":7,"column":34,"index":265},"line":7,"code":"  it(\"1. Create a empty datasource\", function () {\n    _.dataSources.NavigateToDSCreateNew();\n    _.dataSources.CreatePlugIn(\"PostgreSQL\");\n    _.dataSources.SaveDatasource();\n\n    //Create a query for empty/incorrect datasource and validate\n    _.dataSources.CreateQueryAfterDSSaved(\"select * from users limit 10\");\n    _.dataSources.RunQuery({\n      toValidateResponse: false\n    });\n    cy.get(\"[data-testid=t--query-error]\").contains(\"[Missing endpoint., Missing username for authentication.]\");\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n  });","file":"e2e/Regression/ServerSide/QueryPane/EmptyDataSource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"shows evaluated pop up is visible and draggable","suites":["Ensures evaluated popup is viewable when dynamic bindings are present and draggable"],"updatePoint":{"line":4,"column":53,"index":292},"line":4,"code":"  it(\"shows evaluated pop up is visible and draggable\", () => {\n    _.dataSources.CreateDataSource(\"Mongo\", true, true);\n    _.dataSources.CreateQueryAfterDSSaved();\n    // ordinary strings should not open evaluated value popup\n    _.agHelper.TypeDynamicInputValueNValidate(\"listingAndReviews\", formControls.mongoCollection);\n\n    // object strings should not open evaluated value popup\n    _.agHelper.TypeDynamicInputValueNValidate(\"{beds : {$lte: 2}}\", formControls.mongoFindQuery);\n    _.agHelper.TypeDynamicInputValueNValidate(\"{number_of_reviews: -1}\", formControls.mongoFindSort);\n\n    // string with dynamic bindings should open popup\n    _.agHelper.TypeDynamicInputValueNValidate(\"{{'{house_rules: 1, description:1}'}}\", formControls.mongoFindProjection, true, \"{house_rules: 1, description:1}\");\n\n    // drag evaluated value popup\n    _.agHelper.FocusAndDragEvaluatedValuePopUp({\n      propFieldName: formControls.mongoFindProjection,\n      directInput: true,\n      inputFieldName: \"\"\n    }, 800, 800);\n  });","file":"e2e/Regression/ServerSide/QueryPane/EvaluatedValuePopUp_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"Bug: 16391 - Google Sheets DS, placeholder objects keys should have quotes","suites":["excludeForAirgap"],"line":11,"code":"  it.skip(\"Bug: 16391 - Google Sheets DS, placeholder objects keys should have quotes\", function () {","file":"e2e/Regression/ServerSide/QueryPane/GoogleSheetsQuery_spec.js","skipped":true,"dir":"app/client/cypress"},{"name":"1. Validate List Files in bucket (all existing files) command, run and then delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":40,"column":98,"index":1469},"line":40,"code":"  it(\"1. Validate List Files in bucket (all existing files) command, run and then delete the query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"List files in bucket\");\n    _.dataSources.RunQuery({\n      toValidateResponse: false\n    });\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", formControls.s3BucketName);\n    _.dataSources.RunQuery({\n      toValidateResponse: false\n    });\n    cy.wait(3000); //for new postExecute to come thru\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"NoSuchBucket: The specified bucket does not exist\");\n    });\n    cy.wait(2000);\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.runAndDeleteQuery();\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Create file in bucket command for new file, Verify possible error msgs, run & delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":67,"column":112,"index":2596},"line":67,"code":"  it(\"2. Validate Create file in bucket command for new file, Verify possible error msgs, run & delete the query\", () => {\n    //Create File\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.setQueryTimeout(30000);\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"List files in bucket\", \"Create a new file\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", formControls.s3BucketName);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Required parameter 'File path' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoFile\", formControls.s3FilePath);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.pluginErrorDetails.appsmithErrorMessage).to.eq(\"Unable to parse content. Expected to receive an object with `data` and `type`.\");\n    });\n    cy.typeValueNValidate(\"Hi\", formControls.rawBody);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.pluginErrorDetails.appsmithErrorMessage).to.eq(\"Unable to parse content. Expected to receive an object with `data` and `type`.\");\n    });\n    cy.typeValueNValidate('{\"data\": \"Hi, this is Automation script adding File!\"}', formControls.rawBody);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.pluginErrorDetails.appsmithErrorMessage).to.contains(\"File content is not base64 encoded.\");\n    });\n    _.dataSources.ValidateNSelectDropdown(\"File data type\", \"Base64\", \"Text\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      //expect(['The specified bucket does not exist', 'The specified bucket is not valid.']).to.include(response.body.data.body)\n      expect(response.body.data.pluginErrorDetails.downstreamErrorMessage).to.contains(\"NoSuchBucket: The specified bucket does not exist\");\n    });\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate List Files in bucket command for new file, Verify possible error msgs, run & delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":128,"column":111,"index":5416},"line":128,"code":"  it(\"3. Validate List Files in bucket command for new file, Verify possible error msgs, run & delete the query\", () => {\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"Create a new file\", \"List files in bucket\");\n\n    // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").should(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Mandatory parameter 'Bucket name' is missing.\",\n    //   );\n    // });\n    // cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket name\");\n\n    cy.typeValueNValidate(\"Auto\", formControls.s3ListPrefix);\n    cy.onlyQueryRun();\n    _.agHelper.GetNClick(_.dataSources._queryResponse(\"TABLE\"));\n    _.agHelper.GetNClick(_.dataSources._queryResponse(\"JSON\"));\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].url).to.exist;\n    });\n    cy.typeValueNValidate(\"AutoFile\", formControls.s3ListPrefix);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].url).to.exist;\n      expect(response.body.data.body[0].signedUrl).not.to.exist;\n    });\n    _.dataSources.ValidateNSelectDropdown(\"Generate signed URL\", \"No\", \"Yes\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].signedUrl).to.exist;\n      expect(response.body.data.body[0].url).to.exist;\n    });\n\n    //_.agHelper.GetNClick(_.debuggerHelper.locators._closeButton);\n\n    // cy.get(formControls.s3ListUnSignedUrl)\n    // .scrollIntoView()\n    // .should(\"be.visible\")\n    // .click({ multiple: true });\n\n    // cy.get(formControls.dropdownWrapper)\n    // .should(\"be.visible\")\n    // .eq(1)\n    // .click({ force: true });\n\n    _.dataSources.ValidateNSelectDropdown(\"Generate unsigned URL\", \"Yes\", \"No\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].signedUrl).to.exist;\n      expect(response.body.data.body[0].url).to.not.exist;\n    });\n    //cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validate Read files in bucket command for new file, Verify possible error msgs, run & delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":197,"column":111,"index":8179},"line":197,"code":"  it(\"4. Validate Read files in bucket command for new file, Verify possible error msgs, run & delete the query\", () => {\n    //Read File\n\n    //cy.NavigateToActiveDSQueryPane(datasourceName);\n    //cy.setQueryTimeout(30000);\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"List files in bucket\", \"Read file\");\n\n    // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").should(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Mandatory parameter 'Bucket name' is missing.\",\n    //   );\n    // });\n    // cy.typeValueNValidate(\"AutoTest\", \"Bucket name\");\n\n    // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").then(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Required parameter 'File path' is missing.\",\n    //   );\n    // });\n    cy.typeValueNValidate(\"Auto\", formControls.s3FilePath);\n\n    // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").then(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\n    //     \"The specified bucket does not exist\",\n    //     \"The specified bucket is not valid.\",\n    //   ]);\n    // });\n\n    // cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket name\");\n\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.pluginErrorDetails.appsmithErrorMessage).to.contain(\"Your S3 query failed to execute. To know more please check the error details.\");\n    });\n    cy.typeValueNValidate(\"Autofile\", formControls.s3FilePath);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.pluginErrorDetails.appsmithErrorMessage).to.contain(\"Your S3 query failed to execute. To know more please check the error details.\");\n    });\n    cy.typeValueNValidate(\"AutoFile\", formControls.s3FilePath);\n\n    //Commenting below since below dropdown is removed from Read\n    //cy.validateNSelectDropdown(\"File data type\", \"Base64\", \"Text\");\n\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.fileData).to.not.eq(\"Hi, this is Automation script adding File!\");\n    });\n    _.dataSources.ValidateNSelectDropdown(\"Base64 encode file - yes/no\", \"Yes\", \"No\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.fileData).to.eq(\"Hi, this is Automation script adding File!\");\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Validate Delete file command for new file & Validating List Files in bucket command after new file is deleted, Verify possible error msgs, run & delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":271,"column":170,"index":11302},"line":271,"code":"  it(\"5. Validate Delete file command for new file & Validating List Files in bucket command after new file is deleted, Verify possible error msgs, run & delete the query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    //cy.renameWithInPane(queryName);\n    cy.setQueryTimeout(30000);\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"List files in bucket\", \"Delete file\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", formControls.s3BucketName);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Required parameter 'File path' is missing.\");\n    });\n    cy.typeValueNValidate(\"Auto\", formControls.s3FilePath);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.pluginErrorDetails.downstreamErrorMessage).to.contains(\"NoSuchBucket: The specified bucket does not exist\");\n    });\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.typeValueNValidate(\"AutoFile\", formControls.s3FilePath);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.status).to.eq(\"File deleted successfully\");\n    });\n\n    //cy.selectEntityByName(\"Query1\");\n    //cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n\n    //Validating List Files in bucket command after new file is deleted\n    //cy.NavigateToActiveDSQueryPane(datasourceName);\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"Delete file\", \"List files in bucket\");\n    //cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket name\");\n    cy.typeValueNValidate(\"Auto\", formControls.s3ListPrefix);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.length).to.eq(0); //checking that body is empty array\n    });\n\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Create new file in bucket for UI Operations & Verify Search, Delete operations from NewPage UI created in S3 ds & Bug 8686, 8684","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":328,"column":137,"index":13838},"line":328,"code":"  it(\"6. Create new file in bucket for UI Operations & Verify Search, Delete operations from NewPage UI created in S3 ds & Bug 8686, 8684\", function () {\n    //Creating new file in bucket\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    _.dataSources.ValidateNSelectDropdown(\"Commands\", \"List files in bucket\", \"Create a new file\");\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n    cy.typeValueNValidate(\"CRUDNewPageFile\", formControls.s3FilePath);\n    _.dataSources.ValidateNSelectDropdown(\"File data type\", \"Base64\", \"Text\");\n    cy.typeValueNValidate('{\"data\": \"Hi, this is Automation script adding file for S3 CRUD New Page validation!\"}', formControls.rawBody);\n    cy.setQueryTimeout(30000);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n\n    // cy.wrap(Cypress.automation('remote:debugger:protocol', {\n    //   command: 'Browser.grantPermissions',\n    //   params: {\n    //     permissions: ['clipboardReadWrite', 'clipboardSanitizedWrite'],\n    //     // make the permission tighter by allowing the current origin only\n    //     // like \"http://localhost:56978\"\n    //     origin: window.location.origin,\n    //   },\n    // }))\n\n    //Generate page & other UI ops\n    cy.NavigateToDSGeneratePage(datasourceName);\n    cy.wait(3000);\n    //Verifying List of Files from UI\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).contains(\"assets-test.appsmith.com\").scrollIntoView().should(\"be.visible\").click();\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); //This verifies the Select on the table, ie page is created fine\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    cy.ClickGotIt();\n\n    //Verifying Searching File from UI\n    cy.xpath(queryLocators.searchFilefield).type(\"CRUD\").wait(7000); //for search to finish\n\n    cy.get(\".t--widget-textwidget span:contains('CRUDNewPageFile')\").should(\"have.length\", 1).scrollIntoView();\n\n    //Verifying CopyFile URL icon from UI - Browser pop up appearing\n    // cy.xpath(queryLocators.copyURLicon).click()\n    // cy.window().its('navigator.clipboard').invoke('readText').should('contain', 'CRUDNewPageFile')\n\n    //Verifying DeleteFile icon from UI\n    cy.xpath(queryLocators.deleteFileicon).eq(0).click(); //Verifies 8684\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    expect(cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\")).to.exist; //verify Delete File dialog appears\n    cy.clickButton(\"Confirm\").wait(1000); //wait for Delete operation to be successfull, //Verifies 8684\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.get(\"span:contains('CRUDNewPageFile')\").should(\"not.exist\"); //verify Deletion of file is success from UI also\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Validate Deletion of the Newly Created Page","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":393,"column":52,"index":17113},"line":393,"code":"  it(\"7. Validate Deletion of the Newly Created Page\", () => {\n    cy.NavigateToQueryEditor();\n    _.dataSources.DeleteDatasouceFromWinthinDS(datasourceName, 409);\n    _.entityExplorer.ActionContextMenuByEntityName(\"Assets-test.appsmith.com\", \"Delete\");\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_1_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Creates a new Amazon S3 datasource","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":31,"column":43,"index":1099},"line":31,"code":"  it(\"1. Creates a new Amazon S3 datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.AmazonS3).click({\n      force: true\n    }).wait(1000);\n    cy.generateUUID().then(uid => {\n      datasourceName = `Amazon S3 CRUD ds ${uid}`;\n      cy.renameDatasource(datasourceName);\n      cy.wrap(datasourceName).as(\"dSName\");\n    });\n    cy.fillAmazonS3DatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bug 9069, 9201, 6975, 9922, 3836, 6492, 11833: Upload/Update query is failing in S3 crud pages","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":44,"column":103,"index":1587},"line":44,"code":"  it(\"2. Bug 9069, 9201, 6975, 9922, 3836, 6492, 11833: Upload/Update query is failing in S3 crud pages\", function () {\n    cy.NavigateToDSGeneratePage(datasourceName);\n    cy.wait(3000);\n    //Verifying List of Files from UI\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).contains(\"assets-test.appsmith.com\").scrollIntoView().should(\"be.visible\").click();\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n    cy.ClickGotIt();\n\n    //Upload: 1\n    let fixturePath = \"AAAGlobeChristmas.jpeg\";\n    cy.wait(3000);\n    cy.clickButton(\"Select Files\"); //1 files selected\n    cy.get(generatePage.uploadFilesS3).first().selectFile(\"cypress/fixtures/AAAGlobeChristmas.jpeg\", {\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(generatePage.uploadBtn).click();\n    cy.wait(3000);\n    cy.clickButton(\"Upload\");\n    cy.wait(1000);\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.data.isExecutionSuccess\", true);\n    cy.get(commonlocators.toastAction).should(\"have.length\", 1).should(\"contain.text\", \"File Uploaded\"); //Verifies bug # 6975\n\n    //Verifying Searching File from UI\n    cy.xpath(queryLocators.searchFilefield).type(\"AAAGlobeChri\").wait(7000); //for search to finish\n\n    cy.get(`.t--widget-textwidget span:contains(${fixturePath})`).should(\"have.length\", 1).scrollIntoView();\n\n    //Verifying DeleteFile icon from UI\n\n    const deleteIconButtonXPATH = \"//button/span[@icon='trash']/ancestor::div[contains(@class,'t--widget-iconbuttonwidget')]/preceding-sibling::div[contains(@class, 't--widget-textwidget')]//span[text()='\" + fixturePath + \"']/ancestor::div[contains(@class, 't--widget-textwidget')]/following-sibling::div[contains(@class,'t--widget-iconbuttonwidget')]\";\n    cy.xpath(deleteIconButtonXPATH).should(\"exist\").last().scrollIntoView().click(); //Verifies 8684\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    expect(cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\")).to.exist; //verify Delete File dialog appears\n    cy.clickButton(\"Confirm\").wait(1000); //wait for Delete operation to be successfull, //Verifies 8684\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.get(`.t--widget-textwidget span:contains(${fixturePath})`).should(\"not.exist\");\n    //verify Deletion of file is success from UI also\n\n    //Upload: 2 - Bug verification 9201\n    fixturePath = \"AAAFlowerVase.jpeg\";\n    cy.wait(3000);\n    cy.clickButton(\"Select Files\"); //1 files selected\n    cy.get(generatePage.uploadFilesS3).first().selectFile(\"cypress/fixtures/AAAFlowerVase.jpeg\", {\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(generatePage.uploadBtn).click();\n    cy.wait(3000);\n    cy.clickButton(\"Upload\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.data.isExecutionSuccess\", true);\n    cy.get(commonlocators.toastAction).should(\"have.length\", 1).should(\"contain.text\", \"File Uploaded\"); //Verifies bug # 6975\n\n    //Verifying Searching File from UI\n    cy.xpath(queryLocators.searchFilefield).clear().wait(500).type(\"AAAFlower\").wait(7000); //for search to finish\n\n    cy.get(`.t--widget-textwidget span:contains(${fixturePath})`).should(\"have.length\", 1).scrollIntoView();\n    //Verifies bug # 9922\n\n    cy.wait(3000);\n    //Verifying DeleteFile icon from UI\n    cy.xpath(\"//button/span[@icon='trash']/ancestor::div[contains(@class,'t--widget-iconbuttonwidget')]/preceding-sibling::div[contains(@class, 't--widget-textwidget')]//span[text()='\" + fixturePath + \"']/ancestor::div[contains(@class, 't--widget-textwidget')]/following-sibling::div[contains(@class,'t--widget-iconbuttonwidget')]\").should(\"exist\").last().scrollIntoView().click(); //Verifies 8684\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    expect(cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\")).to.exist; //verify Delete File dialog appears\n    cy.clickButton(\"Confirm\").wait(3000); //wait for Delete operation to be successfull, //Verifies 8684\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.get(`.t--widget-textwidget span:contains(${fixturePath})`).should(\"not.exist\");\n    //verify Deletion of file is success from UI also\n\n    //Deleting the page://Commenting below since during re-runs the page name can be com2, com3 etc\n    // _.entityExplorer.ActionContextMenuByEntityName(\n    //   \"Assets-test.appsmith.com\",\n    //   \"Delete\",\n    // );\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Verify 'Add to widget [Widget Suggestion]' functionality - S3","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":136,"column":70,"index":6564},"line":136,"code":"  it(\"3. Verify 'Add to widget [Widget Suggestion]' functionality - S3\", () => {\n    _.entityExplorer.SelectEntityByName(\"Page1\");\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    _.agHelper.GetObjectName().then($queryName => {\n      _.dataSources.ValidateNSelectDropdown(\"Commands\", \"List files in bucket\");\n      cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n      cy.runQuery();\n      cy.xpath(queryLocators.suggestedWidgetDropdown).click().wait(1000);\n      cy.get(\".t--draggable-selectwidget\").validateWidgetExists();\n      _.entityExplorer.SelectEntityByName(\"Select1\", \"Widgets\");\n      _.agHelper.GetNClick(_.propPane._deleteWidget);\n      _.entityExplorer.SelectEntityByName($queryName, \"Queries/JS\");\n      cy.get(queryLocators.suggestedTableWidget).click().wait(1000);\n      cy.get(commonlocators.TableV2Row).validateWidgetExists();\n      _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n      _.agHelper.GetNClick(_.propPane._deleteWidget);\n      _.entityExplorer.SelectEntityByName($queryName, \"Queries/JS\");\n      cy.xpath(queryLocators.suggestedWidgetText).click().wait(1000);\n      cy.get(commonlocators.textWidget).validateWidgetExists();\n      _.entityExplorer.SelectEntityByName(\"Text1\", \"Widgets\");\n      _.agHelper.GetNClick(_.propPane._deleteWidget);\n      _.entityExplorer.SelectEntityByName($queryName, \"Queries/JS\");\n      cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n    });\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Verify 'Connect Widget [snipping]' functionality - S3 ","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":162,"column":63,"index":8057},"line":162,"code":"  it(\"4. Verify 'Connect Widget [snipping]' functionality - S3 \", () => {\n    _.entityExplorer.DragDropWidgetNVerify(_.draggableWidgets.TABLE, 200, 200);\n    _.table.AddSampleTableData();\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    _.agHelper.GetObjectName().then($queryName => {\n      _.entityExplorer.SelectEntityByName($queryName, \"Queries/JS\");\n      _.dataSources.ValidateNSelectDropdown(\"Commands\", \"List files in bucket\");\n      cy.typeValueNValidate(\"assets-test.appsmith.com\", formControls.s3BucketName);\n      cy.runQuery();\n      cy.clickButton(\"Select widget\");\n      cy.xpath(queryLocators.snipeableTable).click().wait(1500); //wait for table to load!\n\n      cy.get(commonlocators.TableV2Row).validateWidgetExists();\n      _.entityExplorer.SelectEntityByName(\"Table1\", \"Widgets\");\n      _.agHelper.GetNClick(_.propPane._deleteWidget);\n      _.entityExplorer.SelectEntityByName($queryName, \"Queries/JS\");\n      cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n      cy.wait(3000); //waiting for deletion to complete! - else after hook fails\n    });\n  });","file":"e2e/Regression/ServerSide/QueryPane/S3_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create postgres datasource","suites":["Switch datasource"],"updatePoint":{"line":10,"column":35,"index":382},"line":10,"code":"  it(\"1. Create postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n    });\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"e2e/Regression/ServerSide/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create another postgres datasource","suites":["Switch datasource"],"updatePoint":{"line":25,"column":43,"index":917},"line":25,"code":"  it(\"2. Create another postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      postgresDatasourceNameSecond = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceNameSecond, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceNameSecond).blur();\n    });\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"e2e/Regression/ServerSide/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create mongo datasource","suites":["Switch datasource"],"updatePoint":{"line":40,"column":32,"index":1459},"line":40,"code":"  it(\"3. Create mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.generateUUID().then(uid => {\n      mongoDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(mongoDatasourceName, {\n        force: true\n      }).should(\"have.value\", mongoDatasourceName).blur();\n    });\n    cy.fillMongoDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"e2e/Regression/ServerSide/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. By switching datasources execute a query with both the datasources","suites":["Switch datasource"],"updatePoint":{"line":53,"column":75,"index":1986},"line":53,"code":"  it(\"4. By switching datasources execute a query with both the datasources\", function () {\n    cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    cy.get(queryLocators.templateMenu).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from public.users limit 10\");\n    cy.wait(3000);\n    cy.runQuery();\n    cy.wait(\"@saveAction\").should(\"have.nested.property\", \"response.body.data.isValid\", true);\n    cy.get(\".rc-select-show-arrow\").click();\n    cy.contains(\".rc-select-item-option-content\", postgresDatasourceNameSecond).click().wait(1000);\n    cy.runQuery();\n    cy.wait(\"@saveAction\").should(\"have.nested.property\", \"response.body.data.isValid\", true);\n  });","file":"e2e/Regression/ServerSide/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Confirm mongo datasource is not present in the switch datasources dropdown","suites":["Switch datasource"],"updatePoint":{"line":67,"column":83,"index":2713},"line":67,"code":"  it(\"5. Confirm mongo datasource is not present in the switch datasources dropdown\", function () {\n    cy.get(\".rc-select-show-arrow\").click();\n    cy.get(\".rc-select-item-option-content\").should(\"not.have\", mongoDatasourceName);\n  });","file":"e2e/Regression/ServerSide/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Delete the query and datasources","suites":["Switch datasource"],"updatePoint":{"line":71,"column":41,"index":2908},"line":71,"code":"  it(\"6. Delete the query and datasources\", function () {\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(postgresDatasourceName);\n    cy.deleteDatasource(postgresDatasourceNameSecond);\n    cy.deleteDatasource(mongoDatasourceName);\n  });","file":"e2e/Regression/ServerSide/QueryPane/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a Arango datasource","suites":["Arango datasource test cases"],"updatePoint":{"line":6,"column":59,"index":349},"line":6,"code":"  it(\"1. Create, test, save then delete a Arango datasource\", function () {\n    dataSources.NavigateToDSCreateNew();\n    dataSources.CreatePlugIn(\"ArangoDB\");\n    agHelper.RenameWithInPane(\"ArangoWithnoTrailing\", false);\n    cy.fillArangoDBDatasourceForm();\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n    dataSources.DeleteDatasouceFromActiveTab(\"ArangoWithnoTrailing\");\n  });","file":"e2e/Sanity/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a Arango datasource","suites":["Arango datasource test cases"],"updatePoint":{"line":17,"column":120,"index":895},"line":17,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a Arango datasource\", function () {\n    dataSources.NavigateToDSCreateNew();\n    dataSources.CreatePlugIn(\"ArangoDB\");\n    agHelper.RenameWithInPane(\"ArangoWithTrailing\", false);\n    cy.fillArangoDBDatasourceForm(true);\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"e2e/Sanity/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Arango datasource test cases"],"updatePoint":{"line":27,"column":54,"index":1307},"line":27,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    cy.get(datasource.createQuery).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(\"ArangoWithTrailing\");\n  });","file":"e2e/Sanity/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Arango Default name change","suites":["Arango datasource test cases"],"updatePoint":{"line":33,"column":35,"index":1600},"line":33,"code":"  it(\"4. Arango Default name change\", () => {\n    dataSources.NavigateToDSCreateNew();\n    dataSources.CreatePlugIn(\"ArangoDB\");\n    agHelper.GetText(dataSources._databaseName, \"val\").then($dbName => expect($dbName).to.eq(\"_system\"));\n    dataSources.SaveDSFromDialog(false);\n  });","file":"e2e/Sanity/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Bug: 12045 - No Blank screen diplay after New Authentication API datasource creation","suites":["Authenticated API Datasource"],"updatePoint":{"line":11,"column":93,"index":657},"line":11,"code":"  it(\"1. Bug: 12045 - No Blank screen diplay after New Authentication API datasource creation\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createAuthApiDatasource).click();\n    cy.renameDatasource(dsName);\n    cy.fillAuthenticatedAPIForm();\n    cy.saveDatasource();\n    cy.contains(URL);\n  });","file":"e2e/Sanity/Datasources/AuthenticatedApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Bug: 12045 - No Blank screen diplay after editing/opening existing Authentication API datasource","suites":["Authenticated API Datasource"],"updatePoint":{"line":19,"column":105,"index":985},"line":19,"code":"  it(\"2. Bug: 12045 - No Blank screen diplay after editing/opening existing Authentication API datasource\", function () {\n    cy.get(\".t--edit-datasource\").click();\n    cy.get(datasourceEditor.url).type(\"/users\");\n    cy.get(\".t--save-datasource\").click({\n      force: true\n    });\n    cy.contains(URL + \"/users\");\n    _.agHelper.WaitUntilAllToastsDisappear();\n    _.dataSources.DeleteDatasouceFromActiveTab(dsName);\n  });","file":"e2e/Sanity/Datasources/AuthenticatedApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Bug: 14181 -Make sure the datasource view mode page does not contain labels with no value.","suites":["Authenticated API Datasource"],"updatePoint":{"line":29,"column":99,"index":1402},"line":29,"code":"  it(\"3. Bug: 14181 -Make sure the datasource view mode page does not contain labels with no value.\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createAuthApiDatasource).click();\n    cy.renameDatasource(\"FakeAuthenticatedApi\");\n    cy.fillAuthenticatedAPIForm();\n    cy.saveDatasource();\n    cy.contains(headers).should(\"not.exist\");\n    cy.contains(queryParams).should(\"not.exist\");\n    _.agHelper.WaitUntilAllToastsDisappear();\n    _.dataSources.DeleteDatasouceFromActiveTab(dsName);\n  });","file":"e2e/Sanity/Datasources/AuthenticatedApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Bug: 18051 - Save and Authorise should return to datasource page in view mode and not new datasource page","suites":["Authenticated API Datasource"],"updatePoint":{"line":40,"column":114,"index":1931},"line":40,"code":"  it(\"4. Bug: 18051 - Save and Authorise should return to datasource page in view mode and not new datasource page\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createAuthApiDatasource).click();\n    cy.generateUUID().then(uuid => {\n      cy.renameDatasource(uuid);\n      cy.fillAuthenticatedAPIForm();\n      _.dataSources.AddOAuth2AuthorizationCodeDetails(testdata.accessTokenUrl, testdata.clientID, testdata.clientSecret, testdata.authorizationURL);\n      _.dataSources.AuthAPISaveAndAuthorize();\n      cy.xpath('//input[@name=\"email\"]').type(\"Test@email.com\");\n      cy.xpath('//input[@name=\"email\"]').type(\"Test\");\n      cy.xpath(\"//input[@name='password']\").type(\"Test@123\");\n      cy.xpath(\"//input[@id='login-submit']\").click();\n      cy.wait(2000);\n      cy.reload();\n      cy.get(\".t--edit-datasource\").should(\"be.visible\");\n      _.dataSources.DeleteDatasouceFromActiveTab(uuid);\n    });\n  });","file":"e2e/Sanity/Datasources/AuthenticatedApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create & Save an Authenticated API with OAuth 2.O authorization code","suites":["Authentiacted Api with OAuth 2.O authorization code test cases"],"updatePoint":{"line":5,"column":77,"index":264},"line":5,"code":"  it(\"1. Create & Save an Authenticated API with OAuth 2.O authorization code\", function () {\n    // Create OAuth client\n    cy.fixture(\"datasources\").then(datasourceFormData => {\n      _.dataSources.CreateOAuthClient(\"authorization_code\");\n      // Create datasource\n      _.agHelper.GenerateUUID();\n      cy.get(\"@guid\").then(uid => {\n        cy.get(\"@OAuthClientID\").then(clientId => {\n          cy.get(\"@OAuthClientSecret\").then(clientSecret => {\n            _.dataSources.CreateOAuthDatasource(\"TED_OAuth\" + uid, \"AuthCode\", clientId, clientSecret);\n            //Create API from datasource\n            _.apiPage.CreateAndFillApi(datasourceFormData[\"OAuth_ApiUrl\"] + \"/api/echo/get?ASDSA=ASDSA\", \"EchoOauth\", 10000, \"GET\", true);\n          });\n        });\n      });\n    });\n    //Run API & Validate Response\n    _.apiPage.RunAPI();\n    _.apiPage.ResponseStatusCheck(\"200\");\n  });","file":"e2e/Sanity/Datasources/AuthenticatedApiWithOAuth_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Check whether the number of key value pairs is equal to number of delete buttons","suites":["Datasource form related tests"],"updatePoint":{"line":12,"column":89,"index":550},"line":12,"code":"  it(\"1. Check whether the number of key value pairs is equal to number of delete buttons\", function () {\n    cy.NavigateToAPI_Panel();\n    apiPage.CreateAndFillApi(testdata.baseUrl + testdata.methods);\n    cy.get(\".t--store-as-datasource\").click();\n    agHelper.AssertElementAbsence(locator._specificToast(\"Duplicate key error\")); //verifying there is no error toast, Bug 14566\n\n    cy.get(\".t--add-field\").first().click();\n\n    // Two array pairs for headers key,value should have 2 delete buttons as per new uqi designs, so the first header can also be deleted : Bug #14804\n    cy.get(\".t--headers-array .t--delete-field\").children().should(\"have.length\", 2);\n    // Check if save button is disabled\n    cy.get(\".t--save-datasource\").should(\"not.be.disabled\");\n    dataSource.SaveDSFromDialog();\n    //Check if saved api as a datasource does not fail on cloning\", function () {\n    cy.NavigateToAPI_Panel();\n    ee.ExpandCollapseEntity(\"Queries/JS\");\n    ee.ActionContextMenuByEntityName(\"Api1\", \"Copy to page\", \"Page1\");\n    agHelper.AssertContains(\"action copied to page Page1 successfully\");\n  });","file":"e2e/Sanity/Datasources/DatasourceForm_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test to verify that when datasource is discarded, no datasource can be seen in active list","suites":["Datasource Autosave Improvements Tests"],"updatePoint":{"line":6,"column":99,"index":341},"line":6,"code":"  it(\"1. Test to verify that when datasource is discarded, no datasource can be seen in active list\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      dataSources.CreatePlugIn(\"PostgreSQL\");\n      dataSources.FillPostgresDSForm();\n      dataSources.SaveDSFromDialog(false);\n\n      // assert that datasource is not saved and cant be seen in active ds list\n      dataSources.NavigateToActiveTab();\n      agHelper.AssertContains(dsName, \"not.exist\", dataSources._datasourceCard);\n    });\n  });","file":"e2e/Sanity/Datasources/DSAutosaveImprovements_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test to verify that when datasource is saved from discard pop, datasource can be seen in active list","suites":["Datasource Autosave Improvements Tests"],"updatePoint":{"line":19,"column":109,"index":911},"line":19,"code":"  it(\"2. Test to verify that when datasource is saved from discard pop, datasource can be seen in active list\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      dataSources.CreatePlugIn(\"PostgreSQL\");\n      dsName = \"Postgres\" + uid;\n      agHelper.RenameWithInPane(dsName, false);\n      dataSources.FillPostgresDSForm();\n      dataSources.SaveDSFromDialog(true);\n\n      // assert that datasource is saved and can be seen in active ds list\n      dataSources.NavigateToActiveTab();\n      agHelper.AssertContains(dsName, \"exist\", dataSources._datasourceCard);\n\n      // delete datasource\n      dataSources.DeleteDatasouceFromActiveTab(dsName);\n    });\n  });","file":"e2e/Sanity/Datasources/DSAutosaveImprovements_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Test to verify that Editing existing datasource, state of save button when new changes are made/not made.","suites":["Datasource Autosave Improvements Tests"],"updatePoint":{"line":37,"column":114,"index":1641},"line":37,"code":"  it(\"3. Test to verify that Editing existing datasource, state of save button when new changes are made/not made.\", () => {\n    dataSources.NavigateToDSCreateNew();\n    agHelper.GenerateUUID();\n    cy.get(\"@guid\").then(uid => {\n      dataSources.CreateDataSource(\"Postgres\");\n\n      // Edit Datasource, dont make new changes and check state of save\n      dataSources.EditDatasource();\n      agHelper.AssertElementEnabledDisabled(dataSources._saveDs, 0);\n\n      // Make new changes and check state of datasource\n      dataSources.FillPostgresDSForm(false, \"username\", \"password\");\n      agHelper.AssertElementEnabledDisabled(dataSources._saveDs, 0, false);\n      dataSources.UpdateDatasource();\n\n      // delete datasource\n      cy.get(\"@dsName\").then($dsName => {\n        dsName = $dsName;\n        dataSources.DeleteDatasouceFromActiveTab(dsName);\n      });\n    });\n  });","file":"e2e/Sanity/Datasources/DSAutosaveImprovements_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create elastic search datasource","suites":["Elastic search datasource tests"],"updatePoint":{"line":9,"column":41,"index":372},"line":9,"code":"  it(\"1. Create elastic search datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.ElasticSearch).trigger(\"click\", {\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      elasticSearchName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(elasticSearchName, {\n        force: true\n      }).should(\"have.value\", elasticSearchName).blur();\n    });\n    cy.fillElasticDatasourceForm();\n\n    //once we have test values for elastic search we can test and save the datasources.\n    // cy.testSaveDatasource();\n\n    dataSource.SaveDSFromDialog(false);\n  });","file":"e2e/Sanity/Datasources/ElasticSearchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create Google Sheets datasource","suites":["excludeForAirgap"],"updatePoint":{"line":5,"column":40,"index":285},"line":5,"code":"  it(\"1. Create Google Sheets datasource\", function () {\n    cy.intercept(\"GET\", \"/api/v1/users/features\", {\n      fixture: \"featureFlags.json\"\n    }).as(\"featureFlags\");\n    cy.reload();\n    dataSources.NavigateToDSCreateNew();\n    dataSources.CreatePlugIn(\"Google Sheets\");\n    VerifyFunctionDropdown([\"Read / Write / Delete | Selected google sheets\", \"Read / Write / Delete | All google sheets\", \"Read / Write | All google sheets\", \"Read | All google sheets\"]);\n    dataSources.SaveDSFromDialog(false);\n  });","file":"e2e/Sanity/Datasources/GoogleSheetsStub_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Should execute the API and validate the response","suites":["GraphQL Datasource Implementation"],"updatePoint":{"line":43,"column":57,"index":1149},"line":43,"code":"  it(\"1. Should execute the API and validate the response\", function () {\n    _.apiPage.SelectPaneTab(\"Body\");\n    _.dataSources.UpdateGraphqlQueryAndVariable({\n      query: GRAPHQL_QUERY,\n      variable: GRAPHQL_VARIABLES\n    });\n    _.apiPage.RunAPI(false, 20, {\n      expectedPath: \"response.body.data.body.data.postById.id\",\n      expectedRes: POST_ID\n    });\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n  });","file":"e2e/Sanity/Datasources/GraphQL_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"2. Pagination for limit based should work without offset","suites":["GraphQL Datasource Implementation"],"updatePoint":{"line":55,"column":62,"index":1578},"line":55,"code":"  it(\"2. Pagination for limit based should work without offset\", function () {\n    /* Create an API */\n    _.dataSources.CreateDataSource(\"UnAuthenticatedGraphQL\");\n    _.apiPage.SelectPaneTab(\"Body\");\n    _.dataSources.UpdateGraphqlQueryAndVariable({\n      query: GRAPHQL_LIMIT_QUERY\n    });\n\n    // Change tab to Pagination tab\n    _.apiPage.SelectPaneTab(\"Pagination\");\n\n    // Select Limit base Pagination\n    _.apiPage.SelectPaginationTypeViaIndex(1);\n    _.dataSources.UpdateGraphqlPaginationParams({\n      limit: {\n        variable: \"firstz\",\n        value: \"2\"\n      }\n    });\n    _.apiPage.RunAPI(false, 20, {\n      expectedPath: \"response.body.data.body.data.allPosts.edges[0].node.title\",\n      expectedRes: GRAPHQL_LIMIT_DATA[0].title_name\n    });\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n  });","file":"e2e/Sanity/Datasources/GraphQL_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"3. Pagination for limit based should work with offset","suites":["GraphQL Datasource Implementation"],"updatePoint":{"line":80,"column":59,"index":2395},"line":80,"code":"  it(\"3. Pagination for limit based should work with offset\", function () {\n    /* Create an API */\n    _.dataSources.CreateDataSource(\"UnAuthenticatedGraphQL\");\n    _.apiPage.SelectPaneTab(\"Body\");\n    _.dataSources.UpdateGraphqlQueryAndVariable({\n      query: GRAPHQL_LIMIT_QUERY\n    });\n\n    // Change tab to Pagination tab\n    _.apiPage.SelectPaneTab(\"Pagination\");\n\n    // Select Limit base Pagination\n    _.apiPage.SelectPaginationTypeViaIndex(1);\n    _.dataSources.UpdateGraphqlPaginationParams({\n      limit: {\n        variable: \"firstz\",\n        value: \"5\"\n      },\n      offset: {\n        variable: \"offsetz\",\n        value: \"10\"\n      }\n    });\n    _.apiPage.RunAPI(false, 20, {\n      expectedPath: \"response.body.data.body.data.allPosts.edges[0].node.title\",\n      expectedRes: GRAPHQL_LIMIT_DATA[1].title_name\n    });\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n  });","file":"e2e/Sanity/Datasources/GraphQL_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"4. Authenticated GraphQL from GraphQL","suites":["GraphQL Datasource Implementation"],"updatePoint":{"line":109,"column":43,"index":3270},"line":109,"code":"  it(\"4. Authenticated GraphQL from GraphQL\", () => {\n    _.dataSources.CreateDataSource(\"UnAuthenticatedGraphQL\");\n    _.apiPage.SelectPaneTab(\"Body\");\n    _.dataSources.UpdateGraphqlQueryAndVariable({\n      query: `mutation {\n        signup(\n          input: {username: \"appsmith\", email:\"` + authoemail + `\", password: \"appsmith\"}\n        ) {\n          jwtToken\n        }\n      }`\n    });\n    _.apiPage.RunAPI(false);\n    cy.wait(\"@postExecute\").then(interception => {\n      tokenToAuthorizeGraphQl = JSON.stringify(interception.response.body.data.body.data.signup.jwtToken).replace(/['\"]+/g, \"\");\n      _.dataSources.UpdateGraphqlQueryAndVariable({\n        query: `mutation {\n          deletePostById(input: {id: ${POST_ID}}) {\n            clientMutationId\n            deletedPostId\n          }\n        }`\n      });\n      _.apiPage.EnterHeader(\"Authorization\", \"Bearer \" + tokenToAuthorizeGraphQl, 1);\n      RunNValidateGraphQL();\n    });\n  });","file":"e2e/Sanity/Datasources/GraphQL_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"5. Authenticated GraphQL from Authenticated GraphQL","suites":["GraphQL Datasource Implementation"],"updatePoint":{"line":136,"column":57,"index":4233},"line":136,"code":"  it(\"5. Authenticated GraphQL from Authenticated GraphQL\", () => {\n    //Trying to delete without Autho code to see validation error\n    _.dataSources.CreateDataSource(\"UnAuthenticatedGraphQL\");\n    _.apiPage.SelectPaneTab(\"Body\");\n    _.dataSources.UpdateGraphqlQueryAndVariable({\n      query: `mutation {\n        deletePostById(input: {id: 7}) {\n          clientMutationId\n          deletedPostId\n        }\n      }`\n    });\n    _.apiPage.RunAPI(false);\n    _.agHelper.Sleep(2000);\n    cy.wait(\"@postExecute\").then(interception => {\n      let errors = JSON.stringify(interception.response.body.data.body.errors[0].message).replace(/['\"]+/g, \"\");\n      expect(errors).to.eq(\"permission denied for table posts\");\n    });\n\n    //Create Autho code to validate Delete operation\n    cy.get(\"@guid\").then(uid => {\n      authoemail = `ci${uid}@appsmith.com`;\n      _.dataSources.UpdateGraphqlQueryAndVariable({\n        query: `mutation {\n        signup(\n          input: {username: \"appsmith\", email:\"` + authoemail + `\", password: \"appsmith\"}\n        ) {\n          jwtToken\n        }\n      }`\n      });\n    });\n    _.apiPage.RunAPI(false);\n    _.agHelper.Sleep(2000);\n    cy.wait(\"@postExecute\").then(interception => {\n      tokenToAuthorizeGraphQl = JSON.stringify(interception.response.body.data.body.data.signup.jwtToken).replace(/['\"]+/g, \"\");\n      _.agHelper.ActionContextMenuWithInPane(\"Delete\");\n\n      //Create Auth GraphQL to verify Delete operation\n      _.dataSources.CreateNFillAuthenticatedGraphQLDSForm(datasourceName, \"Authorization\", \"Bearer \" + tokenToAuthorizeGraphQl);\n      _.dataSources.CreateQueryAfterDSSaved();\n      _.dataSources.UpdateGraphqlQueryAndVariable({\n        query: `mutation {\n          deletePostById(input: {id: 7}) {\n            clientMutationId\n            deletedPostId\n          }\n        }`\n      });\n      RunNValidateGraphQL();\n    });\n    cy.get(\"@dsName\").then($dsName => {\n      _.dataSources.DeleteDatasouceFromActiveTab($dsName);\n    });\n  });","file":"e2e/Sanity/Datasources/GraphQL_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a mongo datasource","suites":["Create, test, save then delete a mongo datasource"],"updatePoint":{"line":6,"column":58,"index":269},"line":6,"code":"  it(\"1. Create, test, save then delete a mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.fillMongoDatasourceForm();\n    cy.testSaveDeleteDatasource();\n    //Create with trailing white spaces in host address and database name, test, save then delete a mongo datasource\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.fillMongoDatasourceForm(true); //fills form with trailing white spaces\n    cy.testSaveDeleteDatasource();\n  });","file":"e2e/Sanity/Datasources/MongoDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MsSQL datasource","suites":["MsSQL datasource test cases"],"updatePoint":{"line":9,"column":58,"index":382},"line":9,"code":"  it(\"1. Create, test, save then delete a MsSQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MsSQL).click();\n    cy.fillMsSQLDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `MsSQL MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n      cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n        fixture: \"testAction.json\"\n      }).as(\"testDatasource\");\n      cy.testSaveDatasource(false);\n      dataSource.DeleteDatasouceFromActiveTab(datasourceName);\n    });\n  });","file":"e2e/Sanity/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MsSQL datasource","suites":["MsSQL datasource test cases"],"updatePoint":{"line":23,"column":119,"index":990},"line":23,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MsSQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MsSQL).click();\n    cy.fillMsSQLDatasourceForm(true);\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = JSON.stringify(httpResponse.response.body.data.name).replace(/['\"]+/g, \"\");\n    });\n  });","file":"e2e/Sanity/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MsSQL datasource test cases"],"updatePoint":{"line":35,"column":54,"index":1491},"line":35,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    cy.get(datasource.createQuery).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"e2e/Sanity/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":9,"column":58,"index":382},"line":9,"code":"  it(\"1. Create, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.fillMySQLDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `MySQL MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n      cy.testSaveDatasource();\n      dataSource.DeleteDatasouceFromActiveTab(datasourceName);\n    });\n  });","file":"e2e/Sanity/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":20,"column":119,"index":862},"line":20,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.fillMySQLDatasourceForm(true);\n    cy.generateUUID().then(UUID => {\n      datasourceName = `MySQL MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.testSaveDatasource();\n  });","file":"e2e/Sanity/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MySQL datasource test cases"],"updatePoint":{"line":30,"column":54,"index":1216},"line":30,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuery).click();\n    cy.get(datasource.createQuery).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"e2e/Sanity/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":9,"column":58,"index":382},"line":9,"code":"  it(\"1. Create, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.fillMySQLDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `MySQL MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n      cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n        fixture: \"testAction.json\"\n      }).as(\"testDatasource\");\n      cy.testSaveDatasource(false);\n      dataSource.DeleteDatasouceFromActiveTab(datasourceName);\n    });\n  });","file":"e2e/Sanity/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":23,"column":119,"index":990},"line":23,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.fillMySQLDatasourceForm(true);\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = JSON.stringify(httpResponse.response.body.data.name).replace(/['\"]+/g, \"\");\n    });\n  });","file":"e2e/Sanity/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MySQL datasource test cases"],"updatePoint":{"line":35,"column":54,"index":1491},"line":35,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    cy.get(datasource.createQuery).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"e2e/Sanity/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify after killing MySQL session, app should not crash","suites":["MySQL noise test"],"updatePoint":{"line":11,"column":65,"index":489},"line":11,"code":"  it(\"1. Verify after killing MySQL session, app should not crash\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasourceEditor.MySQL).click();\n    cy.generateUUID().then(uid => {\n      datasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(datasourceName, {\n        force: true\n      }).should(\"have.value\", datasourceName).blur();\n      cy.fillMySQLDatasourceForm();\n      cy.testSaveDatasource();\n      cy.NavigateToActiveDSQueryPane(datasourceName);\n    });\n    cy.get(queryLocators.queryNameField).type(\"NoiseTestQuery\");\n    cy.get(queryLocators.templateMenu).click();\n    // mySQL query to fetch data\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM users where role = 'Admin' ORDER BY id LIMIT 10\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    // API for killing mySQL session\n    cy.CreateAPI(\"killSession\");\n    cy.enterDatasourceAndPath(\"http://host.docker.internal:5001/\", \"v1/noise/killmysql\");\n    cy.SaveAndRunAPI();\n    cy.ResponseCheck(\"killed\");\n    cy.get('.t--entity-name:contains(\"Page1\")').click({\n      force: true\n    });\n    cy.wait(2000);\n    // run kill query\n    cy.get(\".bp3-button-text:contains('Kill Session')\").should(\"be.visible\");\n    cy.get(\".bp3-button-text:contains('Kill Session')\").click({\n      force: true\n    });\n    // run refresh query\n    cy.get(\".bp3-button-text:contains('Refresh Query')\").click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(commonlocators.toastmsg).contains(\"NoiseTestQuery failed to execute\");\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"200 OK\");\n    });\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"200 OK\");\n    });\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"PE-STC-5000\");\n      expect(response.body.data.title).to.eq(\"Connection is stale\");\n    });\n  });","file":"e2e/Sanity/Datasources/MySQLNoiseTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a postgres datasource","suites":["Postgres datasource test cases"],"updatePoint":{"line":8,"column":61,"index":332},"line":8,"code":"  it(\"1. Create, test, save then delete a postgres datasource\", function () {\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = JSON.stringify(httpResponse.response.body.data.name);\n      _.dataSources.DeleteDatasouceFromActiveTab(datasourceName.replace(/['\"]+/g, \"\"));\n    });\n  });","file":"e2e/Sanity/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a postgres datasource","suites":["Postgres datasource test cases"],"updatePoint":{"line":15,"column":122,"index":751},"line":15,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click({\n      force: true\n    });\n    cy.fillPostgresDatasourceForm(true);\n    cy.testSaveDatasource();\n    cy.get(\"@saveDatasource\").then(httpResponse => {\n      datasourceName = JSON.stringify(httpResponse.response.body.data.name).replace(/['\"]+/g, \"\");\n    });\n  });","file":"e2e/Sanity/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Postgres datasource test cases"],"updatePoint":{"line":26,"column":54,"index":1163},"line":26,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    cy.get(datasource.createQuery).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"e2e/Sanity/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a Redshift datasource","suites":["Redshift datasource test cases"],"updatePoint":{"line":7,"column":61,"index":273},"line":7,"code":"  it(\"1. Create, test, save then delete a Redshift datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.Redshift).click();\n    cy.fillRedshiftDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `Redshift MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"e2e/Sanity/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a Redshift datasource","suites":["Redshift datasource test cases"],"updatePoint":{"line":20,"column":122,"index":822},"line":20,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a Redshift datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.Redshift).click();\n    cy.fillRedshiftDatasourceForm(true);\n    cy.generateUUID().then(UUID => {\n      datasourceName = `Redshift MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n    cy.deleteDatasource(datasourceName);\n  });","file":"e2e/Sanity/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Redshift datasource test cases"],"updatePoint":{"line":34,"column":54,"index":1348},"line":34,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    cy.get(datasource.createQuery).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"e2e/Sanity/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a rest datasource + Bug 14566","suites":["Create a rest datasource"],"updatePoint":{"line":7,"column":45,"index":279},"line":7,"code":"  it(\"1. Create a rest datasource + Bug 14566\", function () {\n    _.apiPage.CreateAndFillApi(testdata.baseUrl + testdata.methods);\n    cy.get(\".t--store-as-datasource\").click();\n    _.agHelper.AssertElementAbsence(_.locators._specificToast(\"Duplicate key error\")); //verifying there is no error toast, Bug 14566\n    cy.testSelfSignedCertificateSettingsInREST(false);\n    cy.saveDatasource();\n    cy.contains(\".datasource-highlight\", \"http://host.docker.internal:5001\"); //failing here since Save as Datasource is broken\n    cy.SaveAndRunAPI();\n  });","file":"e2e/Sanity/Datasources/RestApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API with app url and save as Datasource for Client Credentials test","suites":["Datasource form OAuth2 client credentials related tests"],"updatePoint":{"line":5,"column":86,"index":361},"line":5,"code":"  it(\"1. Create an API with app url and save as Datasource for Client Credentials test\", function () {\n    _.apiPage.CreateAndFillApi(testdata.appUrl, \"TestOAuth\");\n    _.agHelper.GetNClick(_.apiPage._saveAsDS);\n    // agHelper.ValidateToastMessage(\"datasource created\"); //verifying there is no error toast, Bug 14566\n  });","file":"e2e/Sanity/Datasources/RestApiOAuth2Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Add Oauth details to datasource and save","suites":["Datasource form OAuth2 client credentials related tests"],"updatePoint":{"line":11,"column":49,"index":650},"line":11,"code":"  it(\"2. Add Oauth details to datasource and save\", function () {\n    cy.get(datasource.saveBtn).should(\"not.be.disabled\");\n    _.dataSources.AddOAuth2AuthorizationCodeDetails(testdata.accessTokenUrl, testdata.clientID, testdata.clientSecret, testdata.oauth2Scopes);\n\n    // since we are moving to different, it will show unsaved changes dialog\n    // save datasource and then proceed\n    _.dataSources.SaveDatasource();\n    _.entityExplorer.SelectEntityByName(\"TestOAuth\", \"Queries/JS\");\n    _.agHelper.ActionContextMenuWithInPane(\"Delete\", \"Are you sure?\");\n  });","file":"e2e/Sanity/Datasources/RestApiOAuth2Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create an API with app url and save as Datasource for Authorization code details test","suites":["Datasource form OAuth2 client credentials related tests"],"updatePoint":{"line":21,"column":94,"index":1261},"line":21,"code":"  it(\"3. Create an API with app url and save as Datasource for Authorization code details test\", function () {\n    _.apiPage.CreateAndFillApi(testdata.appUrl, \"TestOAuth\");\n    _.agHelper.GetNClick(_.apiPage._saveAsDS);\n    // agHelper.ValidateToastMessage(\"datasource created\"); //verifying there is no error toast, Bug 14566\n  });","file":"e2e/Sanity/Datasources/RestApiOAuth2Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Add Oauth details to datasource and save","suites":["Datasource form OAuth2 client credentials related tests"],"updatePoint":{"line":27,"column":49,"index":1550},"line":27,"code":"  it(\"4. Add Oauth details to datasource and save\", function () {\n    cy.get(datasource.saveBtn).should(\"not.be.disabled\");\n    _.dataSources.AddOAuth2AuthorizationCodeDetails(testdata.accessTokenUrl, testdata.clientID, testdata.clientSecret, testdata.authorizationURL);\n  });","file":"e2e/Sanity/Datasources/RestApiOAuth2Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Validate save and Authorise","suites":["Datasource form OAuth2 client credentials related tests"],"updatePoint":{"line":31,"column":36,"index":1814},"line":31,"code":"  it(\"5. Validate save and Authorise\", function () {\n    cy.get(datasource.saveAndAuthorize).click();\n    cy.contains(\"#login-submit\", \"Login\");\n    cy.url().should(\"include\", \"oauth.mocklab.io/oauth/authorize\");\n    cy.xpath('//input[@name=\"email\"]').type(\"Test@email.com\");\n    cy.xpath('//input[@name=\"email\"]').type(\"Test\");\n    cy.xpath(\"//input[@name='password']\").type(\"Test@123\");\n    cy.xpath(\"//input[@id='login-submit']\").click();\n  });","file":"e2e/Sanity/Datasources/RestApiOAuth2Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create and configure smtp datasource and query, binding widgets to query fields","suites":["SMTP datasource test cases using ted"],"updatePoint":{"line":13,"column":88,"index":503},"line":13,"code":"  it(\"1. Create and configure smtp datasource and query, binding widgets to query fields\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.SMTP).click();\n    cy.generateUUID().then(uid => {\n      SMTPDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(SMTPDatasourceName, {\n        force: true\n      }).should(\"have.value\", SMTPDatasourceName).blur();\n      cy.fillSMTPDatasourceForm();\n      cy.testSaveDatasource();\n      cy.NavigateToActiveDSQueryPane(SMTPDatasourceName);\n    });\n    // create new query and bind fields with widgets\n    cy.get(queryLocators.queryNameField).type(\"smtpquery\");\n    cy.get(queryLocators.queryFromEmail).first().type(\"{{From.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(queryLocators.queryFromEmail).eq(1).type(\"{{To.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(queryLocators.queryFromEmail).eq(4).type(\"{{Subject.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(queryLocators.queryFromEmail).eq(5).type(\"{{Body.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(queryLocators.queryFromEmail).eq(6).type(\"{{FilePicker.text}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(`.t--entity-name:contains(\"Page1\")`).should(\"be.visible\").click({\n      force: true\n    });\n    cy.wait(2000);\n  });","file":"e2e/Sanity/Datasources/SMTPDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. On canvas, passing wrong email address in widgets should give error","suites":["SMTP datasource test cases using ted"],"updatePoint":{"line":48,"column":76,"index":1920},"line":48,"code":"  it(\"2. On canvas, passing wrong email address in widgets should give error\", function () {\n    // verify an error is thrown when recipient address is not added\n    cy.xpath(\"//input[@class='bp3-input']\").eq(0).type(\"test@appsmith.com\");\n    cy.get(\"span.bp3-button-text:contains('Run query')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"PE-ARG-5000\");\n      expect(response.body.data.body).to.contain(\"Couldn't find a valid recipient address. Please check your action configuration\");\n    });\n    // verify an error is thrown when sender address is not added\n    cy.xpath(\"//input[@class='bp3-input']\").eq(0).clear();\n    cy.xpath(\"//input[@class='bp3-input']\").eq(1).type(\"qwerty@appsmith.com\");\n    cy.get(\"span.bp3-button-text:contains('Run query')\").closest(\"div\").click();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.statusCode).to.eq(\"PE-ARG-5000\");\n      expect(response.body.data.body).to.contain(\"Couldn't find a valid sender address. Please check your action configuration\");\n    });\n  });","file":"e2e/Sanity/Datasources/SMTPDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Mock datasource card design","suites":["excludeForAirgap"],"updatePoint":{"line":12,"column":36,"index":511},"line":12,"code":"  it(\"1. Mock datasource card design\", () => {\n    _.dataSources.NavigateToDSCreateNew();\n    _.agHelper.Sleep(200);\n    //Card container style\n    cy.datasourceCardContainerStyle(\".t--mock-datasource-list\");\n    //Datasource card\n    cy.datasourceCardStyle(\".t--mock-datasource\");\n    //Description\n    cy.mockDatasourceDescriptionStyle(\"[data-testid=mockdatasource-description]\");\n    //mock datasource image\n    cy.datasourceImageStyle(\"[data-testid=mock-datasource-image]\");\n    //header text\n    cy.datasourceContentWrapperStyle(\".t--datasource-name\");\n    //Name wrapper\n    cy.get(\"[data-testid=mock-datasource-name-wrapper]\").should(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"flex-direction\", \"column\");\n    //Name\n    cy.datasourceNameStyle(\"[data-testid=mockdatasource-name]\");\n  });","file":"e2e/Sanity/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Database datasource card design","suites":["excludeForAirgap"],"updatePoint":{"line":30,"column":40,"index":1314},"line":30,"code":"  it(\"2. Database datasource card design\", () => {\n    _.dataSources.NavigateToDSCreateNew();\n    //Card container style\n    cy.datasourceCardContainerStyle(\"[data-testid=database-datasource-card-container]\");\n    //Datasource card\n    cy.datasourceCardStyle(\"[data-testid=database-datasource-card]\");\n    //mock datasource image\n    cy.datasourceImageStyle(\"[data-testid=database-datasource-image]\");\n    //header text\n    cy.datasourceContentWrapperStyle(\"[data-testid=database-datasource-content-wrapper]\");\n    //Icon wrapper\n    cy.datasourceIconWrapperStyle(\"[data-testid=database-datasource-content-wrapper] .dataSourceImage\");\n    //Name\n    cy.datasourceNameStyle(\"[data-testid=database-datasource-content-wrapper] .textBtn\");\n  });","file":"e2e/Sanity/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. New API datasource card design","suites":["excludeForAirgap"],"updatePoint":{"line":45,"column":39,"index":2055},"line":45,"code":"  it(\"3. New API datasource card design\", () => {\n    _.dataSources.NavigateToDSCreateNew();\n    //Card container style\n    cy.datasourceCardContainerStyle(\"[data-testid=newapi-datasource-card-container]\");\n    //Datasource card\n    cy.datasourceCardStyle(\".t--createBlankApiCard\");\n    //Datasource image\n    cy.datasourceImageStyle(\".content-icon\");\n    //Header text\n    cy.datasourceContentWrapperStyle(\"[data-testid=newapi-datasource-content-wrapper]\");\n    //Icon wrapper\n    cy.datasourceIconWrapperStyle(\".content-icon\");\n    //Name\n    cy.datasourceNameStyle(\".t--createBlankApiCard .textBtn\");\n    //Datsource title font size should be 20px\n    cy.get(\".sectionHeadings\").should(\"have.css\", \"font-size\", \"20px\");\n  });","file":"e2e/Sanity/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Datasource Active card styles","suites":["excludeForAirgap"],"updatePoint":{"line":62,"column":38,"index":2783},"line":62,"code":"  it(\"4. Datasource Active card styles\", () => {\n    // Action button icon placement\n    _.dataSources.NavigateToActiveTab();\n    //Icon should be placed left to the text.\n    cy.get(\".t--create-query span\");\n\n    //Active card wrapper\n    cy.get(\".t--datasource\").should(\"have.css\", \"padding\", \"15px\").and(\"have.css\", \"cursor\", \"pointer\").realHover().should(\"have.css\", \"background-color\", backgroundColorGray1);\n    cy.get(\"[data-testid=active-datasource-image]\").should(\"have.css\", \"height\", \"34px\").and(\"have.css\", \"max-width\", \"100%\");\n    cy.get(\"[data-testid=active-datasource-icon-wrapper]\").should(\"have.css\", \"background-color\", backgroundColorGray2).and(\"have.css\", \"width\", \"34px\").and(\"have.css\", \"height\", \"34px\").and(\"have.css\", \"border-radius\", \"0px\").and(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"align-items\", \"center\");\n\n    //Name\n    cy.datasourceNameStyle(\"[data-testid=active-datasource-name]\");\n\n    //Queries\n    cy.get(\"[data-testid=active-datasource-queries]\").should(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"margin\", \"4px 0px\");\n\n    //Buttons wrapper\n    cy.get(\".t--datasource-name .action-wrapper\").should(\"have.css\", \"gap\", \"10px\").and(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"align-items\", \"center\");\n  });","file":"e2e/Sanity/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Collapse component styles","suites":["excludeForAirgap"],"updatePoint":{"line":82,"column":34,"index":4039},"line":82,"code":"  it(\"5. Collapse component styles\", () => {\n    //Collapse wrapper\n    cy.get(\"[data-testid=datasource-collapse-wrapper]\").should(\"have.css\", \"color\", backgroundColorGray700).and(\"have.css\", \"display\", \"flex\").and(\"have.css\", \"gap\", \"8px\").and(\"have.css\", \"align-items\", \"center\");\n    //Collapse icon\n    cy.get(\"[data-testid=datasource-collapse-wrapper] span\").invoke(\"attr\", \"data-testid\").should(\"eq\", \"datasource-collapse-icon\");\n    cy.get(\"[data-testid=datasource-collapse-wrapper] span[data-testid='datasource-collapse-icon'] svg\").invoke(\"attr\", \"fill\").should(\"eq\", \"currentColor\").then($element => {\n      const attributes = $element[0].attributes;\n      cy.log(attributes);\n    });\n    // .invoke(\"attr\", \"width\")\n    // .should(\"eq\", \"12\");\n  });","file":"e2e/Sanity/Datasources/Styles_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Import application from json with one postgres and success modal","suites":["Reconnect Datasource Modal validation while importing application"],"updatePoint":{"line":9,"column":73,"index":436},"line":9,"code":"  it(\"1. Import application from json with one postgres and success modal\", function () {\n    cy.NavigateToHome();\n    // import application\n    cy.generateUUID().then(uid => {\n      workspaceId = uid;\n      localStorage.setItem(\"WorkspaceName\", workspaceId);\n      cy.createWorkspace();\n      cy.wait(\"@createWorkspace\").then(createWorkspaceInterception => {\n        newWorkspaceName = createWorkspaceInterception.response.body.data.name;\n        cy.renameWorkspace(newWorkspaceName, workspaceId);\n        cy.get(homePage.workspaceImportAppOption).click({\n          force: true\n        });\n        cy.get(homePage.workspaceImportAppModal).should(\"be.visible\");\n        cy.xpath(homePage.uploadLogo).first().selectFile(\"cypress/fixtures/one_postgres.json\", {\n          force: true\n        });\n        cy.wait(\"@importNewApplication\").then(interception => {\n          cy.wait(100);\n          // should check reconnect modal openning\n          const {\n            isPartialImport\n          } = interception.response.body.data;\n          if (isPartialImport) {\n            // should reconnect modal\n            cy.get(reconnectDatasourceModal.Modal).should(\"be.visible\");\n            cy.get(\".t--ds-list .t--ds-list-title\", {\n              withinSubject: null\n            }).should(\"be.visible\");\n            cy.get(\".t--ds-list .t--ds-list-title\").should(\"have.text\", \"Untitled Datasource\");\n            // not configured yet\n            cy.get(\".t--ds-list .ads-v2-icon\").should(\"be.visible\");\n            // check db type\n            cy.get(\".t--ds-list\").contains(\"PostgreSQL\");\n            // check the postgres form config with default value\n            cy.get(\"[data-testid='section-Connection']\").should(\"be.visible\");\n            cy.get(datasource.authenticationSettingsSection).should(\"be.visible\");\n            cy.get(datasource.sslSettingsSection).should(\"be.visible\");\n            cy.get(\"[data-testid='datasourceConfiguration.connection.mode']\").should(\"contain\", \"Read / Write\");\n            cy.get(datasource.sslSettingsSection).click({\n              force: true\n            });\n            // should expand ssl pan\n            cy.get(\"[data-testid='datasourceConfiguration.connection.ssl.authType']\").should(\"contain\", \"Default\");\n            cy.ReconnectDatasource(\"Untitled Datasource\");\n            cy.wait(1000);\n            cy.fillPostgresDatasourceForm();\n            cy.testDatasource(true);\n            cy.get(\".t--save-datasource\").click({\n              force: true\n            });\n            cy.wait(2000);\n\n            // cy.get(reconnectDatasourceModal.SkipToAppBtn).click({\n            //   force: true,\n            // });\n            // cy.wait(2000);\n          } else {\n            cy.get(homePage.toastMessage).should(\"contain\", \"Application imported successfully\");\n          }\n          // check datasource configured success modal\n          cy.get(\".t--import-app-success-modal\").should(\"be.visible\");\n          cy.get(\".t--import-app-success-modal\").should(\"contain\", \"All your datasources are configured and ready to use.\");\n          cy.get(\".t--import-success-modal-got-it\").click({\n            force: true\n          });\n          cy.get(\".t--import-app-success-modal\").should(\"not.exist\");\n          const uuid = () => Cypress._.random(0, 1e4);\n          const name = uuid();\n          appName = `app${name}`;\n          cy.get(homePage.applicationName).click({\n            force: true\n          });\n          cy.get(\".ads-v2-menu__menu-item-children:contains(Edit)\").eq(0).click();\n          cy.wait(2000);\n          cy.get(homePage.applicationName)\n          // .clear()\n          .type(appName);\n        });\n      });\n    });\n  });","file":"e2e/Smoke/Apps/ReconnectDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"excludeForAirgap","suites":["Validate generate CRUD operation by creating a datasource from generate CRUD form"],"updatePoint":{"line":9,"column":22,"index":325},"line":9,"code":"  it(\"excludeForAirgap\", \"1. Generated CRUD app should work when there are no entities in the page & when there are entities in the current page\", () => {\n    DataSources.GeneratePageWithMockDB();\n\n    //when there are entities in the current page\n    EntityExplorer.AddNewPage();\n    ApiPage.CreateApi();\n    DataSources.GeneratePageWithMockDB();\n  });","file":"e2e/Smoke/GenerateCRUD/Generate_Crud_New_Page_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"airgap","suites":["Validate generate CRUD operation by creating a datasource from generate CRUD form"],"updatePoint":{"line":17,"column":12,"index":669},"line":17,"code":"  it(\"airgap\", \"1. Generated CRUD app should work when there are no entities in the page & when there are entities in the current page - airgap\", () => {\n    _.dataSources.CreateDataSource(\"Postgres\");\n    cy.get(\"@dsName\").then($dsName => {\n      DataSources.GeneratePageWithDB($dsName, \"public.city\");\n\n      //when there are entities in the current page\n      EntityExplorer.AddNewPage();\n      ApiPage.CreateApi();\n      DataSources.GeneratePageWithDB($dsName, \"public.city\");\n    });\n  });","file":"e2e/Smoke/GenerateCRUD/Generate_Crud_New_Page_spec.ts","skipped":false,"dir":"app/client/cypress"},{"name":"Map Widget Functionality","suites":["excludeForAirgap"],"updatePoint":{"line":10,"column":32,"index":466},"line":10,"code":"    it(\"Map Widget Functionality\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      /**\n       * @param{Text} Random Text\n       * @param{MapWidget}Mouseover\n       * @param{MapPre Css} Assertion\n       */\n      cy.widgetText(\"Maptest\", viewWidgetsPage.mapWidget, viewWidgetsPage.mapInner);\n      cy.get(viewWidgetsPage.mapinitialloc).click({\n        force: true\n      }).clear().type(this.data.country).type(\"{enter}\");\n      cy.get(viewWidgetsPage.mapInput).click({\n        force: true\n      }).type(this.data.command).type(JSON.stringify(this.data.marker), {\n        parseSpecialCharSequences: false\n      });\n      cy.get(viewWidgetsPage.zoomLevel).eq(0).click({\n        force: true\n      });\n      cy.get(viewWidgetsPage.zoomLevel).eq(1).click({\n        force: true\n      });\n      cy.get(viewWidgetsPage.mapSearch).click({\n        force: true\n      }).clear().type(this.data.location2).type(\"{enter}\");\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Enable Location,Map search and Create Marker Property Validation","suites":["excludeForAirgap"],"updatePoint":{"line":36,"column":76,"index":1438},"line":36,"code":"    it(\"Map-Enable Location,Map search and Create Marker Property Validation\", function () {\n      /**\n       * Enable the Search Location checkbox and Validate the same in editor mode\n       */\n      cy.CheckWidgetProperties(commonlocators.enableSearchLocCheckbox);\n      cy.get(viewWidgetsPage.mapSearch).should(\"be.visible\");\n      cy.get(viewWidgetsPage.mapSearch).invoke(\"attr\", \"placeholder\").should(\"contain\", \"Enter location to search\");\n      /**\n       * Enable the Pick Location checkbox and Validate the same in editor mode\n       */\n      cy.CheckWidgetProperties(commonlocators.enablePickLocCheckbox);\n      cy.get(viewWidgetsPage.pickMyLocation).should(\"exist\");\n\n      /**\n       * Enable the Createnew Marker checkbox and Validate the same in editor mode\n       */\n      cy.CheckWidgetProperties(commonlocators.enableCreateMarkerCheckbox);\n      /**\n       * Validation will be added when create marker fun is working fine\n       */\n\n      cy.PublishtheApp();\n      /**\n       * Publish mode Validation\n       */\n      cy.get(publishPage.mapSearch).should(\"be.visible\");\n      cy.get(publishPage.mapSearch).invoke(\"attr\", \"placeholder\").should(\"contain\", \"Enter location to search\");\n      cy.get(publishPage.pickMyLocation).should(\"exist\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Disable Location, Mapsearch and Create Marker Property Validation","suites":["excludeForAirgap"],"updatePoint":{"line":66,"column":77,"index":2754},"line":66,"code":"    it(\"Map-Disable Location, Mapsearch and Create Marker Property Validation\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      /**\n       * Disable the Search Location checkbox and Validate the same in editor mode\n       */\n      cy.UncheckWidgetProperties(commonlocators.enableSearchLocCheckbox);\n      cy.get(viewWidgetsPage.mapSearch).should(\"not.exist\");\n      /**\n       * Disable the Pick Location checkbox and Validate the same in editor mode\n       */\n      cy.UncheckWidgetProperties(commonlocators.enablePickLocCheckbox);\n      cy.get(viewWidgetsPage.pickMyLocation).should(\"not.exist\");\n\n      /**\n       * Disable the Createnew Marker checkbox and Validate the same in editor mode\n       */\n      cy.UncheckWidgetProperties(commonlocators.enableCreateMarkerCheckbox);\n      /**\n       * Validation will be added when create marker fun is working fine\n       */\n\n      cy.PublishtheApp();\n      /**\n       * Publish mode Validation\n       */\n      cy.get(publishPage.mapSearch).should(\"not.exist\");\n      cy.get(publishPage.pickMyLocation).should(\"not.exist\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Initial location should work","suites":["excludeForAirgap"],"updatePoint":{"line":95,"column":40,"index":3858},"line":95,"code":"    it(\"Map-Initial location should work\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      cy.get(viewWidgetsPage.mapinitialloc).should(\"have.value\", this.data.country);\n\n      /**\n       * Clearing initial location used to reset it, this check makes sure it actually clears\n       */\n      cy.get(viewWidgetsPage.mapinitialloc).click({\n        force: true\n      }).clear().should(\"have.value\", \"\");\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Check Visible field Validation","suites":["excludeForAirgap"],"updatePoint":{"line":106,"column":42,"index":4280},"line":106,"code":"    it(\"Map-Check Visible field Validation\", function () {\n      //Check the disableed checkbox and Validate\n      cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n      cy.PublishtheApp();\n      cy.get(publishPage.mapWidget).should(\"be.visible\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Unckeck Visible field Validation","suites":["excludeForAirgap"],"updatePoint":{"line":113,"column":44,"index":4595},"line":113,"code":"    it(\"Map-Unckeck Visible field Validation\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      //Uncheck the disabled checkbox and validate\n      cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n      cy.PublishtheApp();\n      cy.get(publishPage.mapWidget).should(\"not.exist\");\n    });","file":"manual_TestSuite/CommentedScriptFiles/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Filter","suites":["Test for Table Filter "],"updatePoint":{"line":3,"column":18,"index":130},"line":3,"code":"  it(\"Table Filter\", function () {\n    //Add a table\n    // click  on the column action item\n    // Click on Select a datatype\n    // Click on Filter option\n    // ensure to add filter\n  });","file":"manual_TestSuite/Table_Filter_Test_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Upgrade Appsmith version and verify the Applications","suites":["Upgrade appsmith version"],"updatePoint":{"line":8,"column":58,"index":420},"line":8,"code":"  it(\"Upgrade Appsmith version and verify the Applications\", () => {\n    const uuid = () => Cypress._.random(0, 10000);\n    const name = uuid();\n    agHelper.Sleep(2000);\n    cy.GetPath(tedUrl, \"appsmith\").then(path => {\n      path = path.split(\"  \");\n      path = path[1].split(\" \");\n      path = path[0].slice(0, -7);\n      localStorage.setItem(\"ContainerName\", `appsmith-${name}`);\n\n      //Start a new Container with old stack\n      cy.StartNewContainer(tedUrl, path + \"/oldstack\", \"cicontainer\", `appsmith-${name}`);\n      //Wait for the container to be up\n      agHelper.Sleep(60000);\n\n      // Get and verify the logs\n      cy.GetAndVerifyLogs(tedUrl, `appsmith-${name}`);\n    });\n\n    //verify the Applications after upgrade only on CE and skip for BE\n    if (CURRENT_REPO === REPO.CE) {\n      cy.forceVisit(testdata.APPURL);\n      agHelper.GetNClick(\".t--widget-iconbuttonwidget button\", 0, true);\n      agHelper.Sleep(1000);\n      agHelper.GetNAssertElementText(\".tbody>div\", \"1Developmentexpertise\", \"have.text\", 1);\n      agHelper.GetNClick(\".tbody>div\", 1, true, 1000);\n      agHelper.GetNAssertElementText(\".t--jsonformfield-label input\", \"Development\", \"have.value\");\n      agHelper.GetNAssertElementText(\".t--jsonformfield-type input\", \"expertise\", \"have.value\");\n      agHelper.GetNAssertElementText(\".t--jsonformfield-rowIndex input\", \"1\", \"have.value\");\n      cy.get(\".t--jsonformfield-label input\").clear().type(\"DevelopmentUpdate\");\n      agHelper.GetNClick(\".t--jsonform-footer button\", 1, true);\n      agHelper.Sleep(2000);\n      agHelper.GetNClick(\".t--widget-iconbuttonwidget button\", 0, true, 1000);\n      agHelper.GetNAssertElementText(\".tbody>div\", \"1DevelopmentUpdateexpertise\", \"have.text\", 1);\n\n      //Resetting the data\n      agHelper.GetNClick(\".tbody>div\", 1, true, 1000);\n      cy.get(\".t--jsonformfield-label input\").clear().type(\"Development\");\n      agHelper.GetNClick(\".t--jsonform-footer button\", 1, true);\n      agHelper.Sleep(2000);\n      agHelper.GetNClick(\".t--widget-iconbuttonwidget button\", 0, true, 1000);\n      agHelper.GetNAssertElementText(\".tbody>div\", \"1Developmentexpertise\", \"have.text\", 1);\n    }\n    // stop the container\n    cy.StopContainer(tedUrl, localStorage.getItem(\"ContainerName\"));\n    agHelper.Sleep(2000);\n  });","file":"manual_TestSuite/UpgradeAppsmith/UpgradeAppsimth_spec.js","skipped":false,"dir":"app/client/cypress"}]}