{"repo":"orbitdb/orbit-db","url":"https://github.com/orbitdb/orbit-db","branch":"main","configs":[{"package":"orbit-db","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"supports default access controllers","suites":["orbit-db - Access Controller Handlers ()","isSupported"],"updatePoint":{"line":87,"column":45,"index":2287},"line":87,"code":"      it('supports default access controllers', () => {\n        assert.strictEqual(AccessControllers.isSupported('ipfs'), true);\n        assert.strictEqual(AccessControllers.isSupported('orbitdb'), true);\n      });","file":"access-controllers/access-controller-handlers.test.js","skipped":false,"dir":"test"},{"name":"doesn't support smart contract access controller by default","suites":["orbit-db - Access Controller Handlers ()","isSupported"],"updatePoint":{"line":91,"column":70,"index":2527},"line":91,"code":"      it('doesn\\'t support smart contract access controller by default', () => {\n        assert.strictEqual(AccessControllers.isSupported(ContractAccessController.type), false);\n      });","file":"access-controllers/access-controller-handlers.test.js","skipped":false,"dir":"test"},{"name":"supports added access controller","suites":["orbit-db - Access Controller Handlers ()","addAccessController"],"updatePoint":{"line":96,"column":42,"index":2745},"line":96,"code":"      it('supports added access controller', () => {\n        const options = {\n          AccessController: ContractAccessController,\n          web3: web3,\n          abi: abi\n        };\n        AccessControllers.addAccessController(options);\n        assert.strictEqual(AccessControllers.isSupported(ContractAccessController.type), true);\n      });","file":"access-controllers/access-controller-handlers.test.js","skipped":false,"dir":"test"},{"name":"throws an error if AccessController is not defined","suites":["orbit-db - Access Controller Handlers ()","create access controllers"],"updatePoint":{"line":127,"column":60,"index":3793},"line":127,"code":"      it('throws an error if AccessController is not defined', async () => {\n        let err;\n\n        try {\n          AccessControllers.addAccessController({});\n        } catch (e) {\n          err = e.toString();\n        }\n\n        assert.strictEqual(err, 'Error: AccessController class needs to be given as an option');\n      });","file":"access-controllers/access-controller-handlers.test.js","skipped":false,"dir":"test"},{"name":"throws an error if AccessController doesn't define type","suites":["orbit-db - Access Controller Handlers ()","create access controllers"],"updatePoint":{"line":138,"column":66,"index":4131},"line":138,"code":"      it('throws an error if AccessController doesn\\'t define type', async () => {\n        let err;\n\n        try {\n          AccessControllers.addAccessController({\n            AccessController: {}\n          });\n        } catch (e) {\n          err = e.toString();\n        }\n\n        assert.strictEqual(err, 'Error: Given AccessController class needs to implement: static get type() { /* return a string */}.');\n      });","file":"access-controllers/access-controller-handlers.test.js","skipped":false,"dir":"test"},{"name":"creates a custom access controller","suites":["orbit-db - Access Controller Handlers ()","create access controllers"],"updatePoint":{"line":151,"column":44,"index":4530},"line":151,"code":"      it('creates a custom access controller', async () => {\n        const type = ContractAccessController.type;\n        const acManifestHash = await AccessControllers.create(orbitdb1, type, options);\n        assert.notStrictEqual(acManifestHash, null);\n        const ac = await AccessControllers.resolve(orbitdb1, acManifestHash, options);\n        assert.strictEqual(ac.type, type);\n      });","file":"access-controllers/access-controller-handlers.test.js","skipped":false,"dir":"test"},{"name":"removes the custom access controller","suites":["orbit-db - Access Controller Handlers ()","create access controllers"],"updatePoint":{"line":158,"column":46,"index":4926},"line":158,"code":"      it('removes the custom access controller', async () => {\n        AccessControllers.removeAccessController(ContractAccessController.type);\n        assert.strictEqual(AccessControllers.isSupported(ContractAccessController.type), false);\n      });","file":"access-controllers/access-controller-handlers.test.js","skipped":false,"dir":"test"},{"name":"makes database use the correct access controller","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":144,"column":60,"index":4633},"line":144,"code":"        it('makes database use the correct access controller', async () => {\n          assert.strictEqual(access.contractAddress, db.access.address);\n        });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest file locally","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":147,"column":48,"index":4783},"line":147,"code":"        it('saves database manifest file locally', async () => {\n          assert.notStrictEqual(dbManifest, null);\n        });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves access controller manifest file locally","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":150,"column":57,"index":4920},"line":150,"code":"        it('saves access controller manifest file locally', async () => {\n          assert.notStrictEqual(acManifest, null);\n        });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct name","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":154,"column":30,"index":5076},"line":154,"code":"          it('has correct name', async () => {\n            assert.strictEqual(dbManifest.name, 'AABB');\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":157,"column":30,"index":5194},"line":157,"code":"          it('has correct type', async () => {\n            assert.strictEqual(dbManifest.type, 'feed');\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct address","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":160,"column":33,"index":5315},"line":160,"code":"          it('has correct address', async () => {\n            assert.notStrictEqual(dbManifest.accessController, null);\n            assert.strictEqual(dbManifest.accessController.indexOf('/ipfs'), 0);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controller manifest"],"updatePoint":{"line":166,"column":30,"index":5594},"line":166,"code":"          it('has correct type', async () => {\n            assert.strictEqual(acManifest.type, ac.AccessController.type);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct address","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controller manifest"],"updatePoint":{"line":169,"column":33,"index":5733},"line":169,"code":"          it('has correct address', async () => {\n            assert.strictEqual(access.contractAddress.indexOf('0x'), 0);\n            assert.strictEqual(access.contractAddress, db.access.address);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"throws error if key not permitted to write","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":175,"column":56,"index":6024},"line":175,"code":"          it('throws error if key not permitted to write', async () => {\n            let err;\n\n            try {\n              await db.add('hello?'); // should throw error\n\n              assert.strictEqual('Should not end here', false);\n            } catch (e) {\n              err = e.toString();\n            }\n\n            assert.strictEqual(err, `Error: Could not append entry, key \"${id1.id}\" is not allowed to write to the log`);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"granting access enables to write to the database","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":188,"column":62,"index":6479},"line":188,"code":"          it('granting access enables to write to the database', async () => {\n            await db.access.grant('write', id1.id);\n\n            const doChanges = () => {\n              return new Promise((resolve, reject) => {\n                try {\n                  db2.events.once('replicated', () => {\n                    // FIXME: timeout to get rid of the \"libp2p node not started yet\" errors\n                    setTimeout(() => resolve(), 1000);\n                  });\n                  db.add('hello!');\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            }; // Try adding something again\n\n\n            await doChanges();\n            const res1 = await db.iterator().collect().map(e => e.payload.value);\n            const res2 = await db2.iterator().collect().map(e => e.payload.value);\n            assert.deepStrictEqual(res1, ['hello!']);\n            assert.deepStrictEqual(res2, ['hello!']);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can't grant access if not admin","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":212,"column":46,"index":7433},"line":212,"code":"          it('can\\'t grant access if not admin', async () => {\n            await db2.access.grant('write', id2.id);\n            const canAppend = await db2.access.canAppend({\n              identity: id2\n            }, id2.provider);\n            assert.strictEqual(canAppend, false);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can't revoke access if not admin","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":219,"column":47,"index":7731},"line":219,"code":"          it('can\\'t revoke access if not admin', async () => {\n            await db2.access.revoke('write', id1.id);\n            const canAppend = await db2.access.canAppend({\n              identity: id1\n            }, id1.provider);\n            assert.strictEqual(canAppend, true);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can check permissions without defaultAccount set","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":226,"column":62,"index":8044},"line":226,"code":"          it('can check permissions without defaultAccount set', async () => {\n            db2.access.defaultAccount = null;\n            const canAppend = await db2.access.canAppend({\n              identity: id1\n            }, id1.provider);\n            assert.strictEqual(canAppend, true);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can't change permissions without from address if no defaultAccount set","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":233,"column":85,"index":8372},"line":233,"code":"          it('can\\'t change permissions without from address if no defaultAccount set', async () => {\n            let err;\n            db2.access.defaultAccount = null;\n\n            try {\n              await db2.access.grant('write', id2.id);\n            } catch (e) {\n              err = e.toString();\n            }\n\n            assert.strictEqual(err, 'Error: No \"from\" address specified in neither the given options, nor the default options.');\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can change permissions by passing in from address","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":245,"column":63,"index":8812},"line":245,"code":"          it('can change permissions by passing in from address', async () => {\n            let err;\n            db2.access.defaultAccount = null;\n\n            try {\n              await db2.access.grant('write', id2.id, {\n                from: accounts[i]\n              }); // from address can grant/revoke access\n            } catch (e) {\n              err = e.toString();\n            }\n\n            assert.strictEqual(err, undefined);\n            const canAppend = await db2.access.canAppend({\n              identity: id2\n            }, id2.provider);\n            assert.strictEqual(canAppend, true);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"revoking access disables ability to write to the database","suites":["orbit-db - ContractAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":263,"column":71,"index":9437},"line":263,"code":"          it('revoking access disables ability to write to the database', async () => {\n            let err;\n\n            try {\n              // Revoke user's access\n              await db.access.revoke('write', id2.id);\n              await db2.add('hello?');\n            } catch (e) {\n              err = e.toString();\n            }\n\n            assert.strictEqual(err, `Error: Could not append entry, key \"${id2.id}\" is not allowed to write to the log`);\n          });","file":"access-controllers/contract-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller","suites":["orbit-db - ContractAccessController ()","Constructor"],"updatePoint":{"line":117,"column":40,"index":3553},"line":117,"code":"        it('creates an access controller', () => {\n          assert.notStrictEqual(accessController, null);\n          assert.notStrictEqual(accessController, undefined);\n        });","file":"access-controllers/contract-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets the controller type","suites":["orbit-db - ContractAccessController ()","Constructor"],"updatePoint":{"line":121,"column":36,"index":3731},"line":121,"code":"        it('sets the controller type', () => {\n          assert.strictEqual(accessController.type, ac.AccessController.type);\n        });","file":"access-controllers/contract-access-controller.test.js","skipped":false,"dir":"test"},{"name":"grants access to key","suites":["orbit-db - ContractAccessController ()","Constructor"],"updatePoint":{"line":124,"column":32,"index":3865},"line":124,"code":"        it('grants access to key', async () => {\n          const mockEntry = {\n            identity: id1 // ...\n            // doesn't matter what we put here, only identity is used for the check\n\n          };\n          await accessController.grant('write', id1.id);\n          const canAppend = await accessController.canAppend(mockEntry, id1.provider);\n          assert.strictEqual(canAppend, true);\n        });","file":"access-controllers/contract-access-controller.test.js","skipped":false,"dir":"test"},{"name":"grants access to multiple keys","suites":["orbit-db - ContractAccessController ()","Constructor"],"updatePoint":{"line":134,"column":42,"index":4288},"line":134,"code":"        it('grants access to multiple keys', async () => {\n          const canAppend1 = await accessController.canAppend({\n            identity: orbitdb1.identity\n          }, orbitdb1.identity.provider);\n          const canAppend2 = await accessController.canAppend({\n            identity: orbitdb2.identity\n          }, orbitdb2.identity.provider);\n          await accessController.grant('write', orbitdb2.identity.id);\n          const canAppend3 = await accessController.canAppend({\n            identity: orbitdb2.identity\n          }, orbitdb2.identity.provider);\n          assert.strictEqual(canAppend1, true);\n          assert.strictEqual(canAppend2, false);\n          assert.strictEqual(canAppend3, true);\n        });","file":"access-controllers/contract-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has correct capabalities","suites":["orbit-db - ContractAccessController ()","Constructor","save and load"],"updatePoint":{"line":170,"column":38,"index":5920},"line":170,"code":"          it('has correct capabalities', async () => {\n            const canAppend1 = await accessController.canAppend({\n              identity: orbitdb1.identity\n            }, orbitdb1.identity.provider);\n            const canAppend2 = await accessController.canAppend({\n              identity: orbitdb2.identity\n            }, orbitdb2.identity.provider);\n            const canAppend3 = await accessController.canAppend({\n              identity: {\n                id: 'someotherid'\n              }\n            }, orbitdb1.identity.provider);\n            assert.strictEqual(canAppend1, true);\n            assert.strictEqual(canAppend2, true);\n            assert.strictEqual(canAppend3, false);\n          });","file":"access-controllers/contract-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has the correct access rights after creating the database","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":103,"column":67,"index":2924},"line":103,"code":"      it('has the correct access rights after creating the database', async () => {\n        assert.deepStrictEqual(db.access.write, [id1.id]);\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"makes database use the correct access controller","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":106,"column":58,"index":3068},"line":106,"code":"      it('makes database use the correct access controller', async () => {\n        const {\n          address\n        } = await db.access.save();\n        assert.strictEqual(acManifest.params.address, address);\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest file locally","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":112,"column":46,"index":3275},"line":112,"code":"      it('saves database manifest file locally', async () => {\n        assert.notStrictEqual(dbManifest, null);\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves access controller manifest file locally","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":115,"column":55,"index":3406},"line":115,"code":"      it('saves access controller manifest file locally', async () => {\n        assert.notStrictEqual(acManifest, null);\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":118,"column":26,"index":3508},"line":118,"code":"      it('has correct type', async () => {\n        assert.strictEqual(acManifest.type, 'ipfs');\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct name","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":122,"column":28,"index":3660},"line":122,"code":"        it('has correct name', async () => {\n          assert.strictEqual(dbManifest.name, 'AABB');\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":125,"column":28,"index":3772},"line":125,"code":"        it('has correct type', async () => {\n          assert.strictEqual(dbManifest.type, 'feed');\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct address","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":128,"column":31,"index":3887},"line":128,"code":"        it('has correct address', async () => {\n          assert.notStrictEqual(dbManifest.accessController, null);\n          assert.strictEqual(dbManifest.accessController.indexOf('/ipfs'), 0);\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"allows to write if user has write access","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":134,"column":52,"index":4167},"line":134,"code":"        it('allows to write if user has write access', async () => {\n          let err;\n\n          try {\n            await db.add('hello?');\n          } catch (e) {\n            err = e.toString();\n          }\n\n          const res = await db.iterator().collect().map(e => e.payload.value);\n          assert.strictEqual(err, undefined);\n          assert.deepStrictEqual(res, ['hello?']);\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"doesn't allow to write without write access","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":147,"column":56,"index":4569},"line":147,"code":"        it('doesn\\'t allow to write without write access', async () => {\n          let err;\n\n          try {\n            await db2.add('hello!!');\n            assert.strictEqual('Should not end here', false);\n          } catch (e) {\n            err = e;\n          }\n\n          const res = await db2.iterator().collect().map(e => e.payload.value);\n          assert.strictEqual(err.message, `Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n          assert.deepStrictEqual(res.includes(e => e === 'hello!!'), false);\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":84,"column":38,"index":2293},"line":84,"code":"      it('creates an access controller', () => {\n        assert.notStrictEqual(accessController, null);\n        assert.notStrictEqual(accessController, undefined);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets the controller type","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":88,"column":34,"index":2463},"line":88,"code":"      it('sets the controller type', () => {\n        assert.strictEqual(accessController.type, 'ipfs');\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has IPFS instance","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":91,"column":27,"index":2570},"line":91,"code":"      it('has IPFS instance', async () => {\n        const peerId1 = await accessController._ipfs.id();\n        const peerId2 = await ipfs1.id();\n        assert.strictEqual(peerId1.id, peerId2.id);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets default capabilities","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":96,"column":35,"index":2785},"line":96,"code":"      it('sets default capabilities', async () => {\n        assert.deepStrictEqual(accessController.write, [id1.id]);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"allows owner to append after creation","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":99,"column":47,"index":2925},"line":99,"code":"      it('allows owner to append after creation', async () => {\n        const mockEntry = {\n          identity: id1,\n          v: 1 // ...\n          // doesn't matter what we put here, only identity is used for the check\n\n        };\n        const canAppend = await accessController.canAppend(mockEntry, id1.provider);\n        assert.strictEqual(canAppend, true);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has correct capabalities","suites":["orbit-db - IPFSAccessController ()","save and load"],"updatePoint":{"line":119,"column":34,"index":3638},"line":119,"code":"      it('has correct capabalities', async () => {\n        assert.deepStrictEqual(accessController.write, ['A', 'B', id1.id]);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has the correct access rights after creating the database","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":103,"column":67,"index":2930},"line":103,"code":"      it('has the correct access rights after creating the database', async () => {\n        assert.deepStrictEqual(db.access.capabilities, {\n          admin: new Set([id1.id]),\n          write: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"makes database use the correct access controller","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":109,"column":58,"index":3155},"line":109,"code":"      it('makes database use the correct access controller', async () => {\n        assert.strictEqual(acManifest.params.address, db.access._db.address.toString());\n      });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest file locally","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":112,"column":46,"index":3317},"line":112,"code":"      it('saves database manifest file locally', async () => {\n        assert.notStrictEqual(dbManifest, null);\n      });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves access controller manifest file locally","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":115,"column":55,"index":3448},"line":115,"code":"      it('saves access controller manifest file locally', async () => {\n        assert.notStrictEqual(acManifest, null);\n      });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct name","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":119,"column":28,"index":3596},"line":119,"code":"        it('has correct name', async () => {\n          assert.strictEqual(dbManifest.name, 'AABB');\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":122,"column":28,"index":3708},"line":122,"code":"        it('has correct type', async () => {\n          assert.strictEqual(dbManifest.type, 'feed');\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct address","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":125,"column":31,"index":3823},"line":125,"code":"        it('has correct address', async () => {\n          assert.notStrictEqual(dbManifest.accessController, null);\n          assert.strictEqual(dbManifest.accessController.indexOf('/ipfs'), 0);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controller manifest"],"updatePoint":{"line":131,"column":28,"index":4090},"line":131,"code":"        it('has correct type', async () => {\n          assert.strictEqual(acManifest.type, 'orbitdb');\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct address","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controller manifest"],"updatePoint":{"line":134,"column":31,"index":4208},"line":134,"code":"        it('has correct address', async () => {\n          assert.strictEqual(acManifest.params.address.indexOf('/orbitdb'), 0);\n          assert.strictEqual(acManifest.params.address.split('/').pop(), '_access');\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"granting access enables to write to the database","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":140,"column":60,"index":4514},"line":140,"code":"        it('granting access enables to write to the database', async () => {\n          let err;\n\n          try {\n            await db2.add('hello?');\n            assert.strictEqual('Should not end here', false);\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.strictEqual(err, `Error: Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n\n          const doChanges = () => {\n            return new Promise((resolve, reject) => {\n              try {\n                // Wait for the second user's AC to notify it was updated\n                db2.access.once('updated', async () => {\n                  // Wait for the first user's db to replicate the update\n                  db.events.once('replicated', () => {\n                    // FIXME: timeout to get rid of the \"libp2p node not started yet\" errors\n                    setTimeout(() => resolve(), 1000);\n                  }); // Try adding something again\n\n                  await db2.add('hello!');\n                }); // Give access to the second user\n\n                db.access.grant('write', id2.id);\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n\n          await doChanges();\n          const res1 = await db.iterator().collect().map(e => e.payload.value);\n          const res2 = await db2.iterator().collect().map(e => e.payload.value);\n          assert.deepStrictEqual(res1, ['hello!']);\n          assert.deepStrictEqual(res2, ['hello!']);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can't grant access if doesn't have write access","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":179,"column":61,"index":6052},"line":179,"code":"        it('can\\'t grant access if doesn\\'t have write access', async () => {\n          let err;\n\n          try {\n            await db2.access.grant('write', id2.id);\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.strictEqual(err, `Error: Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can't revoke access if doesn't have write access","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":190,"column":62,"index":6430},"line":190,"code":"        it('can\\'t revoke access if doesn\\'t have write access', async () => {\n          let err;\n\n          try {\n            await db2.access.revoke('write', id1.id);\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.strictEqual(err, `Error: Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"revoking access disables ability to write to the database","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":201,"column":69,"index":6816},"line":201,"code":"        it('revoking access disables ability to write to the database', async () => {\n          const getError = () => {\n            return new Promise((resolve, reject) => {\n              try {\n                // Wait for the second user's AC to notify it was updated\n                db2.access.once('updated', async () => {\n                  let err;\n\n                  try {\n                    // Try adding something again\n                    await db2.add('hello?');\n                  } catch (e) {\n                    err = e.toString();\n                  }\n\n                  resolve(err);\n                }); // Revoke user's access\n\n                db.access.revoke('write', id2.id);\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n\n          const err = await getError();\n          assert.strictEqual(err, `Error: Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":82,"column":38,"index":2272},"line":82,"code":"      it('creates an access controller', () => {\n        assert.notStrictEqual(accessController, null);\n        assert.notStrictEqual(accessController, undefined);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets the controller type","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":86,"column":34,"index":2442},"line":86,"code":"      it('sets the controller type', () => {\n        assert.strictEqual(accessController.type, 'orbitdb');\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has OrbitDB instance","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":89,"column":30,"index":2555},"line":89,"code":"      it('has OrbitDB instance', async () => {\n        assert.notStrictEqual(accessController._orbitdb, null);\n        assert.strictEqual(accessController._orbitdb.id, orbitdb1.id);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has IPFS instance","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":93,"column":27,"index":2744},"line":93,"code":"      it('has IPFS instance', async () => {\n        const peerId1 = await accessController._orbitdb._ipfs.id();\n        const peerId2 = await ipfs1.id();\n        assert.strictEqual(peerId1.id, peerId2.id);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets default capabilities","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":98,"column":35,"index":2968},"line":98,"code":"      it('sets default capabilities', async () => {\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"allows owner to append after creation","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":103,"column":47,"index":3153},"line":103,"code":"      it('allows owner to append after creation', async () => {\n        const mockEntry = {\n          identity: id1 // ...\n          // doesn't matter what we put here, only identity is used for the check\n\n        };\n        const canAppend = await accessController.canAppend(mockEntry, id1.provider);\n        assert.strictEqual(canAppend, true);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"loads the root access controller from IPFS","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":119,"column":52,"index":3741},"line":119,"code":"      it('loads the root access controller from IPFS', () => {\n        assert.strictEqual(accessController._db.access.type, 'ipfs');\n        assert.deepStrictEqual(accessController._db.access.write, [id1.id]);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"adds a capability","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":123,"column":27,"index":3936},"line":123,"code":"      it('adds a capability', async () => {\n        try {\n          await accessController.grant('write', id1.id);\n        } catch (e) {\n          assert(e, null);\n        }\n\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id]),\n          write: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"adds more capabilities","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":135,"column":32,"index":4273},"line":135,"code":"      it('adds more capabilities', async () => {\n        try {\n          await accessController.grant('read', 'ABCD');\n          await accessController.grant('delete', 'ABCD');\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id]),\n          write: new Set([id1.id]),\n          read: new Set(['ABCD']),\n          delete: new Set(['ABCD'])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"emit 'updated' event when a capability was added","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":150,"column":60,"index":4779},"line":150,"code":"      it('emit \\'updated\\' event when a capability was added', async () => {\n        return new Promise((resolve, reject) => {\n          accessController.on('updated', () => {\n            try {\n              assert.deepStrictEqual(accessController.capabilities, {\n                admin: new Set([id1.id]),\n                write: new Set([id1.id]),\n                read: new Set(['ABCD', 'AXES']),\n                delete: new Set(['ABCD'])\n              });\n              resolve();\n            } catch (e) {\n              reject(e);\n            }\n          });\n          accessController.grant('read', 'AXES');\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"can append after acquiring capability","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":168,"column":47,"index":5399},"line":168,"code":"      it('can append after acquiring capability', async () => {\n        try {\n          await accessController.grant('write', id1.id);\n          await accessController.grant('write', id2.id);\n        } catch (e) {\n          assert(e, null);\n        }\n\n        const mockEntry1 = {\n          identity: id1\n        };\n        const mockEntry2 = {\n          identity: id2\n        };\n        const canAppend1 = await accessController.canAppend(mockEntry1, id1.provider);\n        const canAppend2 = await accessController.canAppend(mockEntry2, id2.provider);\n        assert.strictEqual(canAppend1, true);\n        assert.strictEqual(canAppend2, true);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"removes a capability","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":194,"column":30,"index":6268},"line":194,"code":"      it('removes a capability', async () => {\n        try {\n          await accessController.grant('write', id1.id);\n          await accessController.grant('write', 'AABB');\n          await accessController.revoke('write', 'AABB');\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id]),\n          write: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"can remove the creator's write access","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":208,"column":48,"index":6748},"line":208,"code":"      it('can remove the creator\\'s write access', async () => {\n        try {\n          await accessController.revoke('write', id1.id);\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"can't remove the creator's admin access","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":219,"column":51,"index":7081},"line":219,"code":"      it('can\\'t remove the creator\\'s admin access', async () => {\n        try {\n          await accessController.revoke('admin', id1.id);\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"removes more capabilities","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":230,"column":35,"index":7398},"line":230,"code":"      it('removes more capabilities', async () => {\n        try {\n          await accessController.grant('read', 'ABCD');\n          await accessController.grant('delete', 'ABCD');\n          await accessController.grant('write', id1.id);\n          await accessController.revoke('read', 'ABCDE');\n          await accessController.revoke('delete', 'ABCDE');\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id]),\n          delete: new Set(['ABCD']),\n          read: new Set(['ABCD']),\n          write: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"can't append after revoking capability","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":248,"column":49,"index":8068},"line":248,"code":"      it('can\\'t append after revoking capability', async () => {\n        try {\n          await accessController.grant('write', id2.id);\n          await accessController.revoke('write', id2.id);\n        } catch (e) {\n          assert(e, null);\n        }\n\n        const mockEntry1 = {\n          identity: id1\n        };\n        const mockEntry2 = {\n          identity: id2\n        };\n        const canAppend = await accessController.canAppend(mockEntry1, id1.provider);\n        const noAppend = await accessController.canAppend(mockEntry2, id2.provider);\n        assert.strictEqual(canAppend, true);\n        assert.strictEqual(noAppend, false);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"emits 'updated' event when a capability was removed","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":267,"column":63,"index":8736},"line":267,"code":"      it('emits \\'updated\\' event when a capability was removed', async () => {\n        await accessController.grant('admin', 'cats');\n        await accessController.grant('admin', 'dogs');\n        return new Promise((resolve, reject) => {\n          accessController.on('updated', () => {\n            try {\n              assert.deepStrictEqual(accessController.capabilities, {\n                admin: new Set([id1.id, 'dogs']),\n                delete: new Set(['ABCD']),\n                read: new Set(['ABCD']),\n                write: new Set([id1.id])\n              });\n              resolve();\n            } catch (e) {\n              reject(e);\n            }\n          });\n          accessController.revoke('admin', 'cats');\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has the correct database address for the internal db","suites":["orbit-db - OrbitDBAccessController ()","save and load"],"updatePoint":{"line":309,"column":62,"index":10472},"line":309,"code":"      it('has the correct database address for the internal db', async () => {\n        const addr = accessController._db.address.toString().split('/');\n\n        assert.strictEqual(addr[addr.length - 1], '_access');\n        assert.strictEqual(addr[addr.length - 2], dbName);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has correct capabalities","suites":["orbit-db - OrbitDBAccessController ()","save and load"],"updatePoint":{"line":315,"column":34,"index":10728},"line":315,"code":"      it('has correct capabalities', async () => {\n        assert.deepStrictEqual(accessController.get('admin'), new Set([id1.id]));\n        assert.deepStrictEqual(accessController.get('write'), new Set(['A', 'B', 'C']));\n        assert.deepStrictEqual(accessController.get('another'), new Set(['BB']));\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"syncLocal option - Multiple tabs converge to same log","suites":["orbit-db - browser concurrent writes","Write concurrently"],"updatePoint":{"line":83,"column":61,"index":2189},"line":83,"code":"    it('syncLocal option - Multiple tabs converge to same log', async () => {\n      return new Promise((resolve, reject) => {\n        let polls = 0;\n        const interval = setInterval(async () => {\n          let logHashes = [];\n          await mapSeries(tabs, async page => {\n            await page.evaluate(() => loadConsistentLog());\n            const hash = await page.evaluate(async () => await getConsistentLogHash());\n            logHashes.push(hash);\n          });\n\n          try {\n            const hashes = Array.from(new Set(logHashes)); // ensure log hashes are equal\n\n            assert.strictEqual(hashes.length, 1);\n            clearInterval(interval);\n            resolve();\n          } catch (e) {\n            console.log(\"Repolling...\");\n\n            if (++polls > 5) {\n              reject(e);\n            }\n          }\n        }, 3000);\n      });\n    });","file":"browser/concurrent.spec.js","skipped":false,"dir":"test"},{"name":"no syncLocal option - Multiple tabs do not converge to same log","suites":["orbit-db - browser concurrent writes","Write concurrently"],"updatePoint":{"line":110,"column":71,"index":3075},"line":110,"code":"    it('no syncLocal option - Multiple tabs do not converge to same log', async () => {\n      return new Promise((resolve, reject) => {\n        const interval = setInterval(async () => {\n          let logHashes = [];\n          await mapSeries(tabs, async page => {\n            const hash = await page.evaluate(async () => await getInconsistentLogHash());\n            logHashes.push(hash);\n          });\n\n          try {\n            const hashes = Array.from(new Set(logHashes)); // logs hash different hashes\n\n            assert.strictEqual(hashes.length, numTabs);\n            clearInterval(interval);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        }, 3000);\n      });\n    });","file":"browser/concurrent.spec.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":66,"column":38,"index":1896},"line":66,"code":"      it('creates and opens a database', async () => {\n        const db = await orbitdb1.counter('counter database');\n        assert.notEqual(db, null);\n        assert.equal(db.type, 'counter');\n        assert.equal(db.dbname, 'counter database');\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"value is zero when it's a fresh database","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":72,"column":51,"index":2167},"line":72,"code":"      it('value is zero when it\\'s a fresh database', async () => {\n        const db = await orbitdb1.counter('counter database');\n        assert.equal(db.value, 0);\n        await db.close();\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"increases a counter value","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":77,"column":35,"index":2353},"line":77,"code":"      it('increases a counter value', async () => {\n        const counter = await orbitdb1.counter('counter test', {\n          path: dbPath1\n        });\n        address = counter.address.toString();\n        await mapSeries([13, 1], f => counter.inc(f));\n        assert.equal(counter.value, 14);\n        await counter.close();\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"opens a saved counter","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":86,"column":31,"index":2685},"line":86,"code":"      it('opens a saved counter', async () => {\n        const counter = await orbitdb1.counter(address, {\n          path: dbPath1\n        });\n        await counter.load();\n        assert.equal(counter.value, 14);\n        await counter.drop();\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"syncs counters","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":94,"column":24,"index":2931},"line":94,"code":"      it('syncs counters', async () => {\n        console.log(\"Sync counters\");\n        let options = {\n          accessController: {\n            // Set write access for both clients\n            write: [orbitdb1.identity.id, orbitdb2.identity.id]\n          }\n        };\n        const dbName = new Date().getTime().toString();\n        const numbers = [[13, 10], [2, 5]];\n\n        const increaseCounter = (counterDB, i) => mapSeries(numbers[i], n => counterDB.inc(n)); // Create a new counter database in the first client\n\n\n        options = Object.assign({}, options, {\n          path: dbPath1\n        });\n        const counter1 = await orbitdb1.counter(dbName, options); // Open the database in the second client\n\n        options = Object.assign({}, options, {\n          path: dbPath2\n        });\n        const counter2 = await orbitdb2.counter(dbName, options); // Make sure database addresses match since they're built deterministically\n\n        assert.equal(counter1.address.toString(), counter2.address.toString()); // Wait for peers to connect\n\n        console.log(\"Waiting for peers to connect\");\n        await waitForPeers(ipfs1, [orbitdb2.id], counter1.address.toString());\n        await waitForPeers(ipfs2, [orbitdb1.id], counter1.address.toString());\n        let finished1 = counter1.value === 30;\n        let finished2 = counter2.value === 30;\n        counter1.events.on('replicated', () => {\n          finished1 = counter1.value === 30;\n          finished2 = counter2.value === 30;\n        });\n        counter2.events.on('replicated', () => {\n          finished1 = counter1.value === 30;\n          finished2 = counter2.value === 30;\n        });\n        counter1.events.on('write', () => {\n          finished1 = counter1.value === 30;\n          finished2 = counter2.value === 30;\n        });\n        counter2.events.on('write', () => {\n          finished1 = counter1.value === 30;\n          finished2 = counter2.value === 30;\n        }); // Increase the counters sequentially\n\n        await mapSeries([counter1, counter2], increaseCounter);\n        console.log(\"Waiting for replication to finish\");\n        return new Promise((resolve, reject) => {\n          let timer = setInterval(async () => {\n            if (finished1 && finished2) {\n              try {\n                clearInterval(timer);\n                assert.equal(counter1.value, 30);\n                assert.equal(counter2.value, 30);\n                await counter1.close();\n                await counter2.close();\n                resolve();\n              } catch (e) {\n                reject(e);\n              }\n            }\n          }, 100);\n        });\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"throws an error if given an invalid database type","suites":["orbit-db - Create & Open ()","Create","Errors"],"updatePoint":{"line":73,"column":61,"index":2160},"line":73,"code":"        it('throws an error if given an invalid database type', async () => {\n          let err;\n\n          try {\n            const db = await orbitdb.create('first', 'invalid-type');\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.equal(err, 'Error: Invalid database type \\'invalid-type\\'');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if given an address instead of name","suites":["orbit-db - Create & Open ()","Create","Errors"],"updatePoint":{"line":84,"column":63,"index":2505},"line":84,"code":"        it('throws an error if given an address instead of name', async () => {\n          let err;\n\n          try {\n            const db = await orbitdb.create('/orbitdb/Qmc9PMho3LwTXSaUXJ8WjeBZyXesAwUofdkGeadFXsqMzW/first', 'feed');\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.equal(err, 'Error: Given database name is an address. Please give only the name of the database!');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if database already exists","suites":["orbit-db - Create & Open ()","Create","Errors"],"updatePoint":{"line":95,"column":54,"index":2928},"line":95,"code":"        it('throws an error if database already exists', async () => {\n          let err, db;\n\n          try {\n            db = await orbitdb.create('first', 'feed', {\n              replicate: false\n            });\n            const db2 = await orbitdb.create('first', 'feed', {\n              replicate: false\n            });\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.equal(err, `Error: Database '${db.address}' already exists!`);\n          await db.close();\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if database type doesn't match","suites":["orbit-db - Create & Open ()","Create","Errors"],"updatePoint":{"line":112,"column":59,"index":3448},"line":112,"code":"        it('throws an error if database type doesn\\'t match', async () => {\n          let err, log, kv;\n\n          try {\n            log = await orbitdb.kvstore('keyvalue', {\n              replicate: false\n            });\n            kv = await orbitdb.eventlog(log.address.toString());\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.equal(err, `Error: Database '${log.address}' is type 'keyvalue' but was opened as 'eventlog'`);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates a feed database","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":136,"column":35,"index":4205},"line":136,"code":"        it('creates a feed database', async () => {\n          assert.notEqual(db, null);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"database has the correct address","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":139,"column":44,"index":4315},"line":139,"code":"        it('database has the correct address', async () => {\n          assert.equal(db.address.toString().indexOf('/orbitdb'), 0);\n          assert.equal(db.address.toString().indexOf('zd'), 9);\n          assert.equal(db.address.toString().indexOf('second'), 59);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"saves the database locally","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":144,"column":38,"index":4585},"line":144,"code":"        it('saves the database locally', async () => {\n          assert.equal(fs.existsSync(localDataPath), true);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest reference locally","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":147,"column":53,"index":4727},"line":147,"code":"        it('saves database manifest reference locally', async () => {\n          const address = db.id;\n          const manifestHash = address.split('/')[2];\n          await db._cache._store.open();\n          const value = await db._cache.get(path.join(address, '/_manifest'));\n          assert.equal(value, manifestHash);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest file locally","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":154,"column":48,"index":5056},"line":154,"code":"        it('saves database manifest file locally', async () => {\n          const manifestHash = db.id.split('/')[2];\n          const manifest = await io.read(ipfs, manifestHash);\n          assert.notEqual(manifest, false);\n          assert.equal(manifest.name, 'second');\n          assert.equal(manifest.type, 'feed');\n          assert.notEqual(manifest.accessController, null);\n          assert.equal(manifest.accessController.indexOf('/ipfs'), 0);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"can pass local database directory as an option","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":163,"column":58,"index":5528},"line":163,"code":"        it('can pass local database directory as an option', async () => {\n          const dir = './orbitdb/tests/another-feed';\n          const db2 = await orbitdb.create('third', 'feed', {\n            directory: dir\n          });\n          assert.equal(fs.existsSync(dir), true);\n          await db2.close();\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"loads cache from previous version of orbit-db","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":171,"column":57,"index":5850},"line":171,"code":"        it('loads cache from previous version of orbit-db', async () => {\n          const dbName = 'cache-schema-test';\n          db = await orbitdb.create(dbName, 'keyvalue', {\n            overwrite: true\n          });\n          const manifestHash = db.address.root;\n          const migrationDataPath = path.join(dbPath, manifestHash, dbName);\n          await db.load();\n          assert.equal(await db.get('key'), undefined);\n          await db.drop();\n          await fs.copy(migrationFixturePath, migrationDataPath, {\n            filter: filterFunc\n          });\n          db = await orbitdb.create(dbName, 'keyvalue');\n          await db.load();\n          assert.equal(manifestHash, db.address.root);\n          assert.equal(await db.get('key'), 'value');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"loads cache from previous version of orbit-db with the directory option","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":189,"column":83,"index":6648},"line":189,"code":"        it('loads cache from previous version of orbit-db with the directory option', async () => {\n          const dbName = 'cache-schema-test2';\n          const directory = path.join(dbPath, \"some-other-place\");\n          await fs.copy(migrationFixturePath, directory, {\n            filter: filterFunc\n          });\n          db = await orbitdb.create(dbName, 'keyvalue', {\n            directory\n          });\n          await db.load();\n          assert.equal(await db.get('key'), 'value');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller and adds ourselves as writer by default","suites":["orbit-db - Create & Open ()","Create","Success","Access Controller"],"updatePoint":{"line":212,"column":82,"index":7431},"line":212,"code":"          it('creates an access controller and adds ourselves as writer by default', async () => {\n            db = await orbitdb.create('fourth', 'feed');\n            assert.deepEqual(db.access.write, [orbitdb.identity.id]);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller and adds writers","suites":["orbit-db - Create & Open ()","Create","Success","Access Controller"],"updatePoint":{"line":216,"column":59,"index":7648},"line":216,"code":"          it('creates an access controller and adds writers', async () => {\n            db = await orbitdb.create('fourth', 'feed', {\n              accessController: {\n                write: ['another-key', 'yet-another-key', orbitdb.identity.id]\n              }\n            });\n            assert.deepEqual(db.access.write, ['another-key', 'yet-another-key', orbitdb.identity.id]);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller and doesn't add read access keys","suites":["orbit-db - Create & Open ()","Create","Success","Access Controller"],"updatePoint":{"line":224,"column":76,"index":8062},"line":224,"code":"          it('creates an access controller and doesn\\'t add read access keys', async () => {\n            db = await orbitdb.create('seventh', 'feed', {\n              read: ['one', 'two']\n            });\n            assert.deepEqual(db.access.write, [orbitdb.identity.id]);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates a manifest with no meta field","suites":["orbit-db - Create & Open ()","Create","Success","Meta"],"updatePoint":{"line":244,"column":51,"index":8666},"line":244,"code":"          it('creates a manifest with no meta field', async () => {\n            db = await orbitdb.create('no-meta', 'feed');\n            const manifest = await io.read(ipfs, db.address.root);\n            assert.strictEqual(manifest.meta, undefined);\n            assert.deepStrictEqual(Object.keys(manifest).filter(k => k === 'meta'), []);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates a manifest with a meta field","suites":["orbit-db - Create & Open ()","Create","Success","Meta"],"updatePoint":{"line":250,"column":50,"index":9019},"line":250,"code":"          it('creates a manifest with a meta field', async () => {\n            const meta = {\n              test: 123\n            };\n            db = await orbitdb.create('meta', 'feed', {\n              meta\n            });\n            const manifest = await io.read(ipfs, db.address.root);\n            assert.deepStrictEqual(manifest.meta, meta);\n            assert.deepStrictEqual(Object.keys(manifest).filter(k => k === 'meta'), ['meta']);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if given an invalid database type","suites":["orbit-db - Create & Open ()","determineAddress","Errors"],"updatePoint":{"line":266,"column":61,"index":9603},"line":266,"code":"        it('throws an error if given an invalid database type', async () => {\n          let err;\n\n          try {\n            await orbitdb.determineAddress('first', 'invalid-type');\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.equal(err, 'Error: Invalid database type \\'invalid-type\\'');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if given an address instead of name","suites":["orbit-db - Create & Open ()","determineAddress","Errors"],"updatePoint":{"line":277,"column":63,"index":9947},"line":277,"code":"        it('throws an error if given an address instead of name', async () => {\n          let err;\n\n          try {\n            await orbitdb.determineAddress('/orbitdb/Qmc9PMho3LwTXSaUXJ8WjeBZyXesAwUofdkGeadFXsqMzW/first', 'feed');\n          } catch (e) {\n            err = e.toString();\n          }\n\n          assert.equal(err, 'Error: Given database name is an address. Please give only the name of the database!');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"does not save the address locally","suites":["orbit-db - Create & Open ()","determineAddress","Success"],"updatePoint":{"line":296,"column":45,"index":10637},"line":296,"code":"        it('does not save the address locally', async () => {\n          assert.equal(fs.existsSync(localDataPath), false);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"returns the address that would have been created","suites":["orbit-db - Create & Open ()","determineAddress","Success"],"updatePoint":{"line":299,"column":60,"index":10787},"line":299,"code":"        it('returns the address that would have been created', async () => {\n          const db = await orbitdb.create('third', 'feed', {\n            replicate: false\n          });\n          assert.equal(address.toString().indexOf('/orbitdb'), 0);\n          assert.equal(address.toString().indexOf('zd'), 9);\n          assert.equal(address.toString(), db.address.toString());\n          await db.close();\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if trying to open a database with name only and 'create' is not set to 'true'","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":311,"column":107,"index":11303},"line":311,"code":"      it('throws an error if trying to open a database with name only and \\'create\\' is not set to \\'true\\'', async () => {\n        let err;\n\n        try {\n          db = await orbitdb.open('XXX', {\n            create: false\n          });\n        } catch (e) {\n          err = e.toString();\n        }\n\n        assert.equal(err, \"Error: 'options.create' set to 'false'. If you want to create a database, set 'options.create' to 'true'.\");\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if trying to open a database with name only and 'create' is not set to true","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":324,"column":103,"index":11747},"line":324,"code":"      it('throws an error if trying to open a database with name only and \\'create\\' is not set to true', async () => {\n        let err;\n\n        try {\n          db = await orbitdb.open('YYY', {\n            create: true\n          });\n        } catch (e) {\n          err = e.toString();\n        }\n\n        assert.equal(err, `Error: Database type not provided! Provide a type with 'options.type' (${OrbitDB.databaseTypes.join('|')})`);\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"opens a database - name only","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":337,"column":38,"index":12126},"line":337,"code":"      it('opens a database - name only', async () => {\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true\n        });\n        assert.equal(db.address.toString().indexOf('/orbitdb'), 0);\n        assert.equal(db.address.toString().indexOf('zd'), 9);\n        assert.equal(db.address.toString().indexOf('abc'), 59);\n        await db.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"opens a database - with a different identity","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":348,"column":54,"index":12559},"line":348,"code":"      it('opens a database - with a different identity', async () => {\n        const identity = await Identities.createIdentity({\n          id: 'test-id',\n          keystore: orbitdb.keystore\n        });\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true,\n          identity\n        });\n        assert.equal(db.address.toString().indexOf('/orbitdb'), 0);\n        assert.equal(db.address.toString().indexOf('zd'), 9);\n        assert.equal(db.address.toString().indexOf('abc'), 59);\n        assert.equal(db.identity, identity);\n        await db.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"opens the same database - from an address","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":365,"column":51,"index":13187},"line":365,"code":"      it('opens the same database - from an address', async () => {\n        const identity = await Identities.createIdentity({\n          id: 'test-id',\n          keystore: orbitdb.keystore\n        });\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true,\n          identity\n        });\n        const db2 = await orbitdb.open(db.address);\n        assert.equal(db2.address.toString().indexOf('/orbitdb'), 0);\n        assert.equal(db2.address.toString().indexOf('zd'), 9);\n        assert.equal(db2.address.toString().indexOf('abc'), 59);\n        await db.drop();\n        await db2.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"opens a database and adds the creator as the only writer","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":383,"column":66,"index":13866},"line":383,"code":"      it('opens a database and adds the creator as the only writer', async () => {\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true\n        });\n        assert.equal(db.access.write.length, 1);\n        assert.equal(db.access.write[0], db.identity.id);\n        await db.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"doesn't open a database if we don't have it locally","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":393,"column":63,"index":14221},"line":393,"code":"      it('doesn\\'t open a database if we don\\'t have it locally', async () => {\n        const db = await orbitdb.open('abcabc', {\n          create: true,\n          type: 'feed',\n          overwrite: true\n        });\n        const address = new OrbitDBAddress(db.address.root.slice(0, -1) + 'A', 'non-existent');\n        await db.drop();\n        return new Promise((resolve, reject) => {\n          setTimeout(resolve, 900);\n          orbitdb.open(address).then(() => reject(new Error('Shouldn\\'t open the database'))).catch(reject);\n        });\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if trying to open a database locally and we don't have it","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":406,"column":84,"index":14796},"line":406,"code":"      it('throws an error if trying to open a database locally and we don\\'t have it', async () => {\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true\n        });\n        const address = new OrbitDBAddress(db.address.root.slice(0, -1) + 'A', 'second');\n        await db.drop();\n        return orbitdb.open(address, {\n          localOnly: true\n        }).then(() => new Error('Shouldn\\'t open the database')).catch(e => {\n          assert.equal(e.toString(), `Error: Database '${address}' doesn't exist!`);\n        });\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"open the database and it has the added entries","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":420,"column":56,"index":15367},"line":420,"code":"      it('open the database and it has the added entries', async () => {\n        const db = await orbitdb.open('ZZZ', {\n          create: true,\n          type: 'feed'\n        });\n        await db.add('hello1');\n        await db.add('hello2');\n        await db.close();\n        const db2 = await orbitdb.open(db.address);\n        await db.load();\n        const res = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(res.length, 2);\n        assert.equal(res[0].payload.value, 'hello1');\n        assert.equal(res[1].payload.value, 'hello2');\n        await db.drop();\n        await db2.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"closes a custom store","suites":["orbit-db - Create & Open ()","Close"],"updatePoint":{"line":447,"column":31,"index":16189},"line":447,"code":"      it('closes a custom store', async () => {\n        const directory = path.join(dbPath, \"custom-store\");\n        const db = await orbitdb.open('xyz', {\n          create: true,\n          type: 'feed',\n          directory\n        });\n        await db.close();\n        assert.strictEqual(db._cache._store._db.status, 'closed');\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"close load close sets status to 'closed'","suites":["orbit-db - Create & Open ()","Close"],"updatePoint":{"line":457,"column":50,"index":16547},"line":457,"code":"      it(\"close load close sets status to 'closed'\", async () => {\n        const directory = path.join(dbPath, \"custom-store\");\n        const db = await orbitdb.open('xyz', {\n          create: true,\n          type: 'feed',\n          directory\n        });\n        await db.close();\n        await db.load();\n        await db.close();\n        assert.strictEqual(db._cache._store._db.status, 'closed');\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"successfully manages multiple caches","suites":["orbit-db - Create & Open ()","Close"],"updatePoint":{"line":469,"column":46,"index":16952},"line":469,"code":"      it('successfully manages multiple caches', async () => {\n        // Cleaning up cruft from other tests\n        const directory = path.join(dbPath, \"custom-store\");\n        const directory2 = path.join(dbPath, \"custom-store2\");\n        const db1 = await orbitdb.open('xyz1', {\n          create: true,\n          type: 'feed'\n        });\n        const db2 = await orbitdb.open('xyz2', {\n          create: true,\n          type: 'feed',\n          directory\n        });\n        const db3 = await orbitdb.open('xyz3', {\n          create: true,\n          type: 'feed',\n          directory\n        });\n        const db4 = await orbitdb.open('xyz4', {\n          create: true,\n          type: 'feed',\n          directory: directory2\n        });\n        const db5 = await orbitdb.open('xyz5', {\n          create: true,\n          type: 'feed'\n        });\n        await db1.close();\n        await db2.close();\n        await db4.close();\n        assert.strictEqual(orbitdb.cache._store._db.status, 'open');\n        assert.strictEqual(db2._cache._store._db.status, 'open');\n        assert.strictEqual(db3._cache._store._db.status, 'open');\n        assert.strictEqual(db4._cache._store._db.status, 'closed');\n        await db3.close();\n        await db5.close();\n        assert.strictEqual(orbitdb.cache._store._db.status, 'closed');\n        assert.strictEqual(db2._cache._store._db.status, 'closed');\n        assert.strictEqual(db3._cache._store._db.status, 'closed');\n        assert.strictEqual(db4._cache._store._db.status, 'closed');\n        assert.strictEqual(db5._cache._store._db.status, 'closed');\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"should have the correct custom type","suites":["orbit-db - Create Custom Database Type ()","addDatabaseType"],"updatePoint":{"line":53,"column":45,"index":1327},"line":53,"code":"      it('should have the correct custom type', async () => {\n        OrbitDB.addDatabaseType(CustomStore.type, CustomStore);\n        let store = await orbitdb.create(dbPath.replace(/^\\.\\//, ''), CustomStore.type);\n        assert.equal(store._type, CustomStore.type);\n      });","file":"create-type.test.js","skipped":false,"dir":"test"},{"name":"cannot be overwritten","suites":["orbit-db - Create Custom Database Type ()","addDatabaseType"],"updatePoint":{"line":58,"column":31,"index":1591},"line":58,"code":"      it('cannot be overwritten', async () => {\n        try {\n          OrbitDB.addDatabaseType(CustomStore.type, CustomStore);\n          throw new Error('This should not run.');\n        } catch (e) {\n          assert(e.message.indexOf('already exists') > -1);\n        }\n      });","file":"create-type.test.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Document Store ()"],"updatePoint":{"line":35,"column":36,"index":857},"line":35,"code":"    it('creates and opens a database', async () => {\n      db = await orbitdb1.docstore('first doc database');\n      assert.notEqual(db, null);\n      assert.equal(db.type, 'docstore');\n      assert.equal(db.dbname, 'first doc database');\n    });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"put","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":53,"column":13,"index":1416},"line":53,"code":"      it('put', async () => {\n        const doc = {\n          _id: 'hello world',\n          doc: 'all the things'\n        };\n        await db.put(doc);\n        const value = db.get('hello world');\n        assert.deepEqual(value, [doc]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"get - partial term match","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":62,"column":34,"index":1684},"line":62,"code":"      it('get - partial term match', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'some things'\n        };\n        const doc2 = {\n          _id: 'hello universe',\n          doc: 'all the things'\n        };\n        const doc3 = {\n          _id: 'sup world',\n          doc: 'other things'\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        await db.put(doc3);\n        const value = db.get('hello');\n        assert.deepEqual(value, [doc1, doc2]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"get after delete","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":81,"column":26,"index":2191},"line":81,"code":"      it('get after delete', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'some things'\n        };\n        const doc2 = {\n          _id: 'hello universe',\n          doc: 'all the things'\n        };\n        const doc3 = {\n          _id: 'sup world',\n          doc: 'other things'\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        await db.put(doc3);\n        await db.del('hello universe');\n        const value1 = db.get('hello');\n        const value2 = db.get('sup');\n        assert.deepEqual(value1, [doc1]);\n        assert.deepEqual(value2, [doc3]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"put updates a value","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":103,"column":29,"index":2817},"line":103,"code":"      it('put updates a value', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things'\n        };\n        const doc2 = {\n          _id: 'hello world',\n          doc: 'some of the things'\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        const value = db.get('hello');\n        assert.deepEqual(value, [doc2]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"query","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":117,"column":15,"index":3191},"line":117,"code":"      it('query', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things',\n          views: 17\n        };\n        const doc2 = {\n          _id: 'sup world',\n          doc: 'some of the things',\n          views: 10\n        };\n        const doc3 = {\n          _id: 'hello other world',\n          doc: 'none of the things',\n          views: 5\n        };\n        const doc4 = {\n          _id: 'hey universe',\n          doc: ''\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        await db.put(doc3);\n        await db.put(doc4);\n        const value1 = db.query(e => e.views > 5);\n        const value2 = db.query(e => e.views > 10);\n        const value3 = db.query(e => e.views > 17);\n        assert.deepEqual(value1, [doc1, doc2]);\n        assert.deepEqual(value2, [doc1]);\n        assert.deepEqual(value3, []);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"query after delete","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":148,"column":28,"index":4086},"line":148,"code":"      it('query after delete', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things',\n          views: 17\n        };\n        const doc2 = {\n          _id: 'sup world',\n          doc: 'some of the things',\n          views: 10\n        };\n        const doc3 = {\n          _id: 'hello other world',\n          doc: 'none of the things',\n          views: 5\n        };\n        const doc4 = {\n          _id: 'hey universe',\n          doc: ''\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        await db.put(doc3);\n        await db.del('hello world');\n        await db.put(doc4);\n        const value1 = db.query(e => e.views >= 5);\n        const value2 = db.query(e => e.views >= 10);\n        assert.deepEqual(value1, [doc2, doc3]);\n        assert.deepEqual(value2, [doc2]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"query returns full op","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":178,"column":31,"index":4933},"line":178,"code":"      it('query returns full op', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things',\n          views: 17\n        };\n        const doc2 = {\n          _id: 'sup world',\n          doc: 'some of the things',\n          views: 10\n        };\n        const expectedOperation = {\n          op: 'PUT',\n          key: 'sup world',\n          value: {\n            _id: 'sup world',\n            doc: 'some of the things',\n            views: 10\n          }\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        const res = db.query(e => e.payload.value.views < 17, {\n          fullOp: true\n        })[0];\n        assert.notEqual(res, undefined);\n        assert.notEqual(res.hash, undefined);\n        assert.notEqual(res.id, undefined);\n        assert.deepEqual(res.payload, expectedOperation);\n        assert.notEqual(res.next, undefined);\n        assert.equal(res.next.length, 1);\n        assert.equal(res.refs.length, 0);\n        assert.equal(res.v, 2);\n        assert.notEqual(res.clock, undefined);\n        assert.equal(res.clock.time, 2);\n        assert.notEqual(res.key, undefined);\n        assert.notEqual(res.sig, undefined);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"put","suites":["orbit-db - Document Store ()","Specified index"],"updatePoint":{"line":229,"column":13,"index":6454},"line":229,"code":"      it('put', async () => {\n        const doc = {\n          _id: 'hello world',\n          doc: 'all the things'\n        };\n        await db.put(doc);\n        const value = db.get('all');\n        assert.deepEqual(value, [doc]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"get - matches specified index","suites":["orbit-db - Document Store ()","Specified index"],"updatePoint":{"line":238,"column":39,"index":6719},"line":238,"code":"      it('get - matches specified index', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things'\n        };\n        const doc2 = {\n          _id: 'hello world',\n          doc: 'some things'\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        const value1 = db.get('all');\n        const value2 = db.get('some');\n        assert.deepEqual(value1, [doc1]);\n        assert.deepEqual(value2, [doc2]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"removes local database cache","suites":["orbit-db - Drop Database ()","Drop"],"updatePoint":{"line":46,"column":38,"index":1168},"line":46,"code":"      it('removes local database cache', async () => {\n        await db.drop();\n        await db._cache.open();\n        assert.equal(await db._cache.get(db.localHeadsPath), undefined);\n        assert.equal(await db._cache.get(db.remoteHeadsPath), undefined);\n        assert.equal(await db._cache.get(db.snapshotPath), undefined);\n        assert.equal(await db._cache.get(db.queuePath), undefined);\n        assert.equal(await db._cache.get(db.manifestPath), undefined);\n        await db._cache.close();\n      });","file":"drop.test.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":41,"column":38,"index":1003},"line":41,"code":"      it('creates and opens a database', async () => {\n        const db = await orbitdb1.eventlog('log database');\n        assert.notEqual(db, null);\n        assert.equal(db.type, 'eventlog');\n        assert.equal(db.dbname, 'log database');\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 0 items when it's a fresh database","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":48,"column":53,"index":1295},"line":48,"code":"      it('returns 0 items when it\\'s a fresh database', async () => {\n        const db = await orbitdb1.eventlog('log database');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 0);\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns the added entry's hash, 1 entry","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":56,"column":50,"index":1574},"line":56,"code":"      it('returns the added entry\\'s hash, 1 entry', async () => {\n        const db = await orbitdb1.eventlog('first database');\n        const hash = await db.add('hello1');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.notEqual(hash, null);\n        assert.equal(hash, last(items).hash);\n        assert.equal(items.length, 1);\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns the added entry's hash, 2 entries","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":67,"column":52,"index":1985},"line":67,"code":"      it('returns the added entry\\'s hash, 2 entries', async () => {\n        const db = await orbitdb1.eventlog('first database');\n        await db.load();\n        await db.add('hello1');\n        const prevHash = db.iterator().collect()[0].hash;\n        const hash = await db.add('hello2');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 2);\n        assert.notEqual(hash, null);\n        assert.notEqual(hash, prevHash);\n        assert.equal(hash, last(items).hash);\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"adds five items","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":82,"column":25,"index":2525},"line":82,"code":"      it('adds five items', async () => {\n        const db = await orbitdb1.eventlog('second database');\n        await mapSeries([1, 2, 3, 4, 5], i => db.add('hello' + i));\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 5);\n        assert.equal(items[0].payload.value, 'hello1');\n        assert.equal(last(items.map(f => f.payload.value)), 'hello5');\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"adds an item that is > 256 bytes","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":93,"column":42,"index":2994},"line":93,"code":"      it('adds an item that is > 256 bytes', async () => {\n        const db = await orbitdb1.eventlog('third database');\n        let msg = Buffer.alloc(1024);\n        msg.fill('a');\n        const hash = await db.add(msg.toString());\n        assert.notEqual(hash, null);\n        assert.equal(hash.startsWith('zd'), true);\n        assert.equal(hash.length, 49);\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns an iterator","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":114,"column":31,"index":3721},"line":114,"code":"        it('returns an iterator', () => {\n          const iter = db.iterator();\n          const next = iter.next().value;\n          assert.notEqual(iter, null);\n          assert.notEqual(next, null);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns an item with the correct structure","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":120,"column":54,"index":3956},"line":120,"code":"        it('returns an item with the correct structure', () => {\n          const iter = db.iterator();\n          const next = iter.next().value;\n          assert.notEqual(next, null);\n          assert.equal(next.hash.startsWith('zd'), true);\n          assert.equal(next.payload.key, null);\n          assert.equal(next.payload.value, 'hello4');\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"implements Iterator interface","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":128,"column":41,"index":4299},"line":128,"code":"        it('implements Iterator interface', () => {\n          const iter = db.iterator({\n            limit: -1\n          });\n          let messages = [];\n\n          for (let i of iter) messages.push(i.key);\n\n          assert.equal(messages.length, hashes.length);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item as default","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":138,"column":37,"index":4571},"line":138,"code":"        it('returns 1 item as default', () => {\n          const iter = db.iterator();\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, hashes[hashes.length - 1]);\n          assert.equal(second, null);\n          assert.equal(first.payload.value, 'hello4');\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns items in the correct order","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":146,"column":46,"index":4921},"line":146,"code":"        it('returns items in the correct order', () => {\n          const amount = 3;\n          const iter = db.iterator({\n            limit: amount\n          });\n          let i = hashes.length - amount;\n\n          for (let item of iter) {\n            assert.equal(item.payload.value, 'hello' + i);\n            i++;\n          }\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items","suites":["orbit-db - Log Database ()","Iterator","Collect"],"updatePoint":{"line":160,"column":29,"index":5294},"line":160,"code":"        it('returns all items', () => {\n          const messages = db.iterator({\n            limit: -1\n          }).collect();\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0].payload.value, 'hello0');\n          assert.equal(messages[messages.length - 1].payload.value, 'hello4');\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item","suites":["orbit-db - Log Database ()","Iterator","Collect"],"updatePoint":{"line":168,"column":26,"index":5626},"line":168,"code":"        it('returns 1 item', () => {\n          const messages = db.iterator().collect();\n          assert.equal(messages.length, 1);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items","suites":["orbit-db - Log Database ()","Iterator","Collect"],"updatePoint":{"line":172,"column":27,"index":5772},"line":172,"code":"        it('returns 3 items', () => {\n          const messages = db.iterator({\n            limit: 3\n          }).collect();\n          assert.equal(messages.length, 3);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when limit is 0","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":180,"column":42,"index":6024},"line":180,"code":"        it('returns 1 item when limit is 0', () => {\n          const iter = db.iterator({\n            limit: 0\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, last(hashes));\n          assert.equal(second, null);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when limit is 1","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":189,"column":42,"index":6336},"line":189,"code":"        it('returns 1 item when limit is 1', () => {\n          const iter = db.iterator({\n            limit: 1\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, last(hashes));\n          assert.equal(second, null);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":198,"column":27,"index":6633},"line":198,"code":"        it('returns 3 items', () => {\n          const iter = db.iterator({\n            limit: 3\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          const third = iter.next().value;\n          const fourth = iter.next().value;\n          assert.equal(first.hash, hashes[hashes.length - 3]);\n          assert.equal(second.hash, hashes[hashes.length - 2]);\n          assert.equal(third.hash, hashes[hashes.length - 1]);\n          assert.equal(fourth, null);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":211,"column":29,"index":7159},"line":211,"code":"        it('returns all items', () => {\n          const messages = db.iterator({\n            limit: -1\n          }).collect().map(e => e.hash);\n          messages.reverse();\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[hashes.length - 1]);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when limit is bigger than -1","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":219,"column":58,"index":7494},"line":219,"code":"        it('returns all items when limit is bigger than -1', () => {\n          const messages = db.iterator({\n            limit: -300\n          }).collect().map(e => e.hash);\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[0]);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when limit is bigger than number of items","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":226,"column":71,"index":7798},"line":226,"code":"        it('returns all items when limit is bigger than number of items', () => {\n          const messages = db.iterator({\n            limit: 300\n          }).collect().map(e => e.hash);\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[0]);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when gte is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":236,"column":49,"index":8179},"line":236,"code":"          it('returns 1 item when gte is the head', () => {\n            const messages = db.iterator({\n              gte: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 0 items when gt is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":244,"column":49,"index":8495},"line":244,"code":"          it('returns 0 items when gt is the head', () => {\n            const messages = db.iterator({\n              gt: last(hashes)\n            }).collect();\n            assert.equal(messages.length, 0);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 2 item when gte is defined","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":250,"column":48,"index":8714},"line":250,"code":"          it('returns 2 item when gte is defined', () => {\n            const gte = hashes[hashes.length - 2];\n            const messages = db.iterator({\n              gte: gte,\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 2);\n            assert.equal(messages[0], hashes[hashes.length - 2]);\n            assert.equal(messages[1], hashes[hashes.length - 1]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when gte is the root item","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":260,"column":57,"index":9159},"line":260,"code":"          it('returns all items when gte is the root item', () => {\n            const messages = db.iterator({\n              gte: hashes[0],\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, hashes.length);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[messages.length - 1], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns items when gt is the root item","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":269,"column":52,"index":9555},"line":269,"code":"          it('returns items when gt is the root item', () => {\n            const messages = db.iterator({\n              gt: hashes[0],\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, itemCount - 1);\n            assert.equal(messages[0], hashes[1]);\n            assert.equal(messages[3], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns items when gt is defined","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":278,"column":46,"index":9926},"line":278,"code":"          it('returns items when gt is defined', () => {\n            const messages = db.iterator({\n              limit: -1\n            }).collect().map(e => e.hash);\n            const gt = messages[2];\n            const messages2 = db.iterator({\n              gt: gt,\n              limit: 100\n            }).collect().map(e => e.hash);\n            assert.equal(messages2.length, 2);\n            assert.equal(messages2[0], messages[messages.length - 2]);\n            assert.equal(messages2[1], messages[messages.length - 1]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns one item after head when lt is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":293,"column":61,"index":10536},"line":293,"code":"          it('returns one item after head when lt is the head', () => {\n            const messages = db.iterator({\n              lt: last(hashes)\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], hashes[hashes.length - 2]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when lt is head and limit is -1","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":300,"column":63,"index":10853},"line":300,"code":"          it('returns all items when lt is head and limit is -1', () => {\n            const messages = db.iterator({\n              lt: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, hashes.length - 1);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[messages.length - 1], hashes[hashes.length - 2]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items when lt is head and limit is 3","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":309,"column":60,"index":11276},"line":309,"code":"          it('returns 3 items when lt is head and limit is 3', () => {\n            const messages = db.iterator({\n              lt: last(hashes),\n              limit: 3\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 3);\n            assert.equal(messages[0], hashes[hashes.length - 4]);\n            assert.equal(messages[2], hashes[hashes.length - 2]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns null when lt is the root item","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":318,"column":51,"index":11671},"line":318,"code":"          it('returns null when lt is the root item', () => {\n            const messages = db.iterator({\n              lt: hashes[0]\n            }).collect();\n            assert.equal(messages.length, 0);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns one item when lte is the root item","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":324,"column":56,"index":11895},"line":324,"code":"          it('returns one item when lte is the root item', () => {\n            const messages = db.iterator({\n              lte: hashes[0]\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], hashes[0]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when lte is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":331,"column":52,"index":12183},"line":331,"code":"          it('returns all items when lte is the head', () => {\n            const messages = db.iterator({\n              lte: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, itemCount);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[4], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items when lte is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":340,"column":50,"index":12558},"line":340,"code":"          it('returns 3 items when lte is the head', () => {\n            const messages = db.iterator({\n              lte: last(hashes),\n              limit: 3\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 3);\n            assert.equal(messages[0], hashes[hashes.length - 3]);\n            assert.equal(messages[1], hashes[hashes.length - 2]);\n            assert.equal(messages[2], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"add 10 items and verify they are in the index","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":39,"column":55,"index":1002},"line":39,"code":"      it('add 10 items and verify they are in the index', async () => {\n        db = await orbitdb1.feed('feed database'); //All tests should retrieve these 10 items.\n\n        for (var i = 0; i < 10; i++) {\n          await db.add({\n            content: (i + 10).toString()\n          });\n        }\n\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"reopen store and load 10 items","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":50,"column":40,"index":1351},"line":50,"code":"      it('reopen store and load 10 items', async () => {\n        address = db.address.toString();\n        await db.close();\n        db = await orbitdb1.open(address); //Load 10 items\n\n        await db.load(10);\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"reopen store and load 1 item more than exists","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":58,"column":55,"index":1643},"line":58,"code":"      it('reopen store and load 1 item more than exists', async () => {\n        await db.close();\n        db = await orbitdb1.open(address); //Load 11 items\n\n        await db.load(11);\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"reopen store and load 5 item more than exists","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":65,"column":55,"index":1894},"line":65,"code":"      it('reopen store and load 5 item more than exists', async () => {\n        await db.close();\n        db = await orbitdb1.open(address); //Load 15 items\n\n        await db.load(15);\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"reopen store and load 20 items more than exists","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":72,"column":57,"index":2147},"line":72,"code":"      it('reopen store and load 20 items more than exists', async () => {\n        await db.close();\n        db = await orbitdb1.open(address); //Load 30 items\n\n        await db.load(30);\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":41,"column":38,"index":1005},"line":41,"code":"      it('creates and opens a database', async () => {\n        const db = await orbitdb1.feed('feed database');\n        assert.notEqual(db, null);\n        assert.equal(db.type, 'feed');\n        assert.equal(db.dbname, 'feed database');\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 0 items when it's a fresh database","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":48,"column":53,"index":1291},"line":48,"code":"      it('returns 0 items when it\\'s a fresh database', async () => {\n        const db = await orbitdb1.feed('feed database');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 0);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns the added entry's hash, 1 entry","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":56,"column":50,"index":1567},"line":56,"code":"      it('returns the added entry\\'s hash, 1 entry', async () => {\n        const db = await orbitdb1.feed('first');\n        address = db.address.toString();\n        const hash = await db.add('hello1');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.notEqual(hash, null);\n        assert.equal(hash, last(items).hash);\n        assert.equal(items.length, 1);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns the added entry's hash, 2 entries","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":68,"column":52,"index":2006},"line":68,"code":"      it('returns the added entry\\'s hash, 2 entries', async () => {\n        const db = await orbitdb1.feed(address);\n        await db.load();\n        await db.add('hello1');\n        const prevHash = db.iterator().collect()[0].hash;\n        const hash = await db.add('hello2');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 2);\n        assert.notEqual(hash, null);\n        assert.notEqual(hash, prevHash);\n        assert.equal(hash, last(items).hash);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"adds five items","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":83,"column":25,"index":2533},"line":83,"code":"      it('adds five items', async () => {\n        const db = await orbitdb1.feed('second');\n        await mapSeries([1, 2, 3, 4, 5], i => db.add('hello' + i));\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 5);\n        assert.equal(items[0].payload.value, 'hello1');\n        assert.equal(items[items.length - 1].payload.value, 'hello5');\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"adds an item that is > 256 bytes","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":94,"column":42,"index":2989},"line":94,"code":"      it('adds an item that is > 256 bytes', async () => {\n        const db = await orbitdb1.feed('third');\n        let msg = Buffer.alloc(1024);\n        msg.fill('a');\n        const hash = await db.add(msg.toString());\n        assert.notEqual(hash, null);\n        assert.equal(hash.startsWith('zd'), true);\n        assert.equal(hash.length, 49);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"deletes an item when only one item in the database","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":104,"column":60,"index":3389},"line":104,"code":"      it('deletes an item when only one item in the database', async () => {\n        const db = await orbitdb1.feed('fourth');\n        const hash = await db.add('hello3');\n        const delopHash = await db.remove(hash);\n        const items = db.iterator().collect();\n        assert.equal(delopHash.startsWith('zd'), true);\n        assert.equal(items.length, 0);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"deletes an item when two items in the database","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":113,"column":56,"index":3783},"line":113,"code":"      it('deletes an item when two items in the database', async () => {\n        const db = await orbitdb1.feed('fifth');\n        await db.add('hello1');\n        const hash = await db.add('hello2');\n        await db.remove(hash);\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 1);\n        assert.equal(items[0].payload.value, 'hello1');\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"deletes an item between adds","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":125,"column":38,"index":4203},"line":125,"code":"      it('deletes an item between adds', async () => {\n        const db = await orbitdb1.feed('sixth');\n        const hash = await db.add('hello1');\n        await db.add('hello2');\n        await db.remove(hash);\n        await db.add('hello3');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 2);\n        const firstItem = items[0];\n        const secondItem = items[1];\n        assert.equal(firstItem.hash.startsWith('zd'), true);\n        assert.equal(firstItem.payload.key, null);\n        assert.equal(firstItem.payload.value, 'hello2');\n        assert.equal(secondItem.payload.value, 'hello3');\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns an iterator","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":154,"column":31,"index":5230},"line":154,"code":"        it('returns an iterator', () => {\n          const iter = db.iterator();\n          const next = iter.next().value;\n          assert.notEqual(iter, null);\n          assert.notEqual(next, null);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns an item with the correct structure","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":160,"column":54,"index":5465},"line":160,"code":"        it('returns an item with the correct structure', () => {\n          const iter = db.iterator();\n          const next = iter.next().value;\n          assert.notEqual(next, null);\n          assert.equal(next.hash.startsWith('zd'), true);\n          assert.equal(next.payload.key, null);\n          assert.equal(next.payload.value, 'hello4');\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"implements Iterator interface","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":168,"column":41,"index":5808},"line":168,"code":"        it('implements Iterator interface', () => {\n          const iter = db.iterator({\n            limit: -1\n          });\n          let messages = [];\n\n          for (let i of iter) messages.push(i.key);\n\n          assert.equal(messages.length, hashes.length);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item as default","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":178,"column":37,"index":6080},"line":178,"code":"        it('returns 1 item as default', () => {\n          const iter = db.iterator();\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, hashes[hashes.length - 1]);\n          assert.equal(second, null);\n          assert.equal(first.payload.value, 'hello4');\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns items in the correct order","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":186,"column":46,"index":6430},"line":186,"code":"        it('returns items in the correct order', () => {\n          const amount = 3;\n          const iter = db.iterator({\n            limit: amount\n          });\n          let i = hashes.length - amount;\n\n          for (let item of iter) {\n            assert.equal(item.payload.value, 'hello' + i);\n            i++;\n          }\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items","suites":["orbit-db - Feed Database ()","Iterator","Collect"],"updatePoint":{"line":200,"column":29,"index":6803},"line":200,"code":"        it('returns all items', () => {\n          const messages = db.iterator({\n            limit: -1\n          }).collect();\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0].payload.value, 'hello0');\n          assert.equal(messages[messages.length - 1].payload.value, 'hello4');\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item","suites":["orbit-db - Feed Database ()","Iterator","Collect"],"updatePoint":{"line":208,"column":26,"index":7135},"line":208,"code":"        it('returns 1 item', () => {\n          const messages = db.iterator().collect();\n          assert.equal(messages.length, 1);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items","suites":["orbit-db - Feed Database ()","Iterator","Collect"],"updatePoint":{"line":212,"column":27,"index":7281},"line":212,"code":"        it('returns 3 items', () => {\n          const messages = db.iterator({\n            limit: 3\n          }).collect();\n          assert.equal(messages.length, 3);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when limit is 0","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":220,"column":42,"index":7533},"line":220,"code":"        it('returns 1 item when limit is 0', () => {\n          const iter = db.iterator({\n            limit: 0\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, last(hashes));\n          assert.equal(second, null);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when limit is 1","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":229,"column":42,"index":7845},"line":229,"code":"        it('returns 1 item when limit is 1', () => {\n          const iter = db.iterator({\n            limit: 1\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, last(hashes));\n          assert.equal(second, null);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":238,"column":27,"index":8142},"line":238,"code":"        it('returns 3 items', () => {\n          const iter = db.iterator({\n            limit: 3\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          const third = iter.next().value;\n          const fourth = iter.next().value;\n          assert.equal(first.hash, hashes[hashes.length - 3]);\n          assert.equal(second.hash, hashes[hashes.length - 2]);\n          assert.equal(third.hash, hashes[hashes.length - 1]);\n          assert.equal(fourth, null);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":251,"column":29,"index":8668},"line":251,"code":"        it('returns all items', () => {\n          const messages = db.iterator({\n            limit: -1\n          }).collect().map(e => e.hash);\n          messages.reverse();\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[hashes.length - 1]);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when limit is bigger than -1","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":259,"column":58,"index":9003},"line":259,"code":"        it('returns all items when limit is bigger than -1', () => {\n          const messages = db.iterator({\n            limit: -300\n          }).collect().map(e => e.hash);\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[0]);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when limit is bigger than number of items","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":266,"column":71,"index":9307},"line":266,"code":"        it('returns all items when limit is bigger than number of items', () => {\n          const messages = db.iterator({\n            limit: 300\n          }).collect().map(e => e.hash);\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[0]);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when gte is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":276,"column":49,"index":9688},"line":276,"code":"          it('returns 1 item when gte is the head', () => {\n            const messages = db.iterator({\n              gte: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 0 items when gt is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":284,"column":49,"index":10004},"line":284,"code":"          it('returns 0 items when gt is the head', () => {\n            const messages = db.iterator({\n              gt: last(hashes)\n            }).collect();\n            assert.equal(messages.length, 0);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 2 item when gte is defined","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":290,"column":48,"index":10223},"line":290,"code":"          it('returns 2 item when gte is defined', () => {\n            const gte = hashes[hashes.length - 2];\n            const messages = db.iterator({\n              gte: gte,\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 2);\n            assert.equal(messages[0], hashes[hashes.length - 2]);\n            assert.equal(messages[1], hashes[hashes.length - 1]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when gte is the root item","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":300,"column":57,"index":10668},"line":300,"code":"          it('returns all items when gte is the root item', () => {\n            const messages = db.iterator({\n              gte: hashes[0],\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, hashes.length);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[messages.length - 1], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns items when gt is the root item","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":309,"column":52,"index":11064},"line":309,"code":"          it('returns items when gt is the root item', () => {\n            const messages = db.iterator({\n              gt: hashes[0],\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, itemCount - 1);\n            assert.equal(messages[0], hashes[1]);\n            assert.equal(messages[3], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns items when gt is defined","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":318,"column":46,"index":11435},"line":318,"code":"          it('returns items when gt is defined', () => {\n            const messages = db.iterator({\n              limit: -1\n            }).collect().map(e => e.hash);\n            const gt = messages[2];\n            const messages2 = db.iterator({\n              gt: gt,\n              limit: 100\n            }).collect().map(e => e.hash);\n            assert.equal(messages2.length, 2);\n            assert.equal(messages2[0], messages[messages.length - 2]);\n            assert.equal(messages2[1], messages[messages.length - 1]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns one item after head when lt is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":333,"column":61,"index":12045},"line":333,"code":"          it('returns one item after head when lt is the head', () => {\n            const messages = db.iterator({\n              lt: last(hashes)\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], hashes[hashes.length - 2]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when lt is head and limit is -1","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":340,"column":63,"index":12362},"line":340,"code":"          it('returns all items when lt is head and limit is -1', () => {\n            const messages = db.iterator({\n              lt: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, hashes.length - 1);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[messages.length - 1], hashes[hashes.length - 2]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items when lt is head and limit is 3","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":349,"column":60,"index":12785},"line":349,"code":"          it('returns 3 items when lt is head and limit is 3', () => {\n            const messages = db.iterator({\n              lt: last(hashes),\n              limit: 3\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 3);\n            assert.equal(messages[0], hashes[hashes.length - 4]);\n            assert.equal(messages[2], hashes[hashes.length - 2]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns null when lt is the root item","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":358,"column":51,"index":13180},"line":358,"code":"          it('returns null when lt is the root item', () => {\n            const messages = db.iterator({\n              lt: hashes[0]\n            }).collect();\n            assert.equal(messages.length, 0);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns one item when lte is the root item","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":364,"column":56,"index":13404},"line":364,"code":"          it('returns one item when lte is the root item', () => {\n            const messages = db.iterator({\n              lte: hashes[0]\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], hashes[0]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when lte is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":371,"column":52,"index":13692},"line":371,"code":"          it('returns all items when lte is the head', () => {\n            const messages = db.iterator({\n              lte: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, itemCount);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[4], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items when lte is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":380,"column":50,"index":14067},"line":380,"code":"          it('returns 3 items when lte is the head', () => {\n            const messages = db.iterator({\n              lte: last(hashes),\n              limit: 3\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 3);\n            assert.equal(messages[0], hashes[hashes.length - 3]);\n            assert.equal(messages[1], hashes[hashes.length - 2]);\n            assert.equal(messages[2], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":38,"column":36,"index":898},"line":38,"code":"    it('creates and opens a database', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      assert.notEqual(db, null);\n      assert.equal(db.type, 'keyvalue');\n      assert.equal(db.dbname, 'first kv database');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"put","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":45,"column":11,"index":1146},"line":45,"code":"    it('put', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello1');\n      const value = db.get('key1');\n      assert.equal(value, 'hello1');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"get","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":52,"column":11,"index":1379},"line":52,"code":"    it('get', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello2');\n      const value = db.get('key1');\n      assert.equal(value, 'hello2');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"put updates a value","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":59,"column":27,"index":1628},"line":59,"code":"    it('put updates a value', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello3');\n      await db.put('key1', 'hello4');\n      const value = db.get('key1');\n      assert.equal(value, 'hello4');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"set is an alias for put","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":67,"column":31,"index":1919},"line":67,"code":"    it('set is an alias for put', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.set('key1', 'hello5');\n      const value = db.get('key1');\n      assert.equal(value, 'hello5');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"put/get - multiple keys","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":74,"column":31,"index":2172},"line":74,"code":"    it('put/get - multiple keys', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello1');\n      await db.put('key2', 'hello2');\n      await db.put('key3', 'hello3');\n      const v1 = db.get('key1');\n      const v2 = db.get('key2');\n      const v3 = db.get('key3');\n      assert.equal(v1, 'hello1');\n      assert.equal(v2, 'hello2');\n      assert.equal(v3, 'hello3');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"deletes a key","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":87,"column":21,"index":2619},"line":87,"code":"    it('deletes a key', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello!');\n      await db.del('key1');\n      const value = db.get('key1');\n      assert.equal(value, null);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"deletes a key after multiple updates","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":95,"column":44,"index":2909},"line":95,"code":"    it('deletes a key after multiple updates', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello1');\n      await db.put('key1', 'hello2');\n      await db.put('key1', 'hello3');\n      await db.del('key1');\n      const value = db.get('key1');\n      assert.equal(value, null);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"get - integer value","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":105,"column":27,"index":3258},"line":105,"code":"    it('get - integer value', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      const val = 123;\n      await db.put('key1', val);\n      const v1 = db.get('key1');\n      assert.equal(v1, val);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"get - object value","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":113,"column":26,"index":3513},"line":113,"code":"    it('get - object value', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      const val = {\n        one: 'first',\n        two: 2\n      };\n      await db.put('key1', val);\n      const v1 = db.get('key1');\n      assert.deepEqual(v1, val);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"get - array value","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":124,"column":25,"index":3814},"line":124,"code":"    it('get - array value', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      const val = [1, 2, 3, 4, 5];\n      await db.put('key1', val);\n      const v1 = db.get('key1');\n      assert.deepEqual(v1, val);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"replicates multiple open databases","suites":["orbit-db - Multiple Databases ()"],"updatePoint":{"line":124,"column":42,"index":4111},"line":124,"code":"    it('replicates multiple open databases', async () => {\n      const entryCount = 32;\n      const entryArr = []; // Create an array that we use to create the db entries\n\n      for (let i = 1; i < entryCount + 1; i++) entryArr.push(i); // Write entries to each database\n\n\n      console.log(\"Writing to databases\");\n\n      for (let index = 0; index < databaseInterfaces.length; index++) {\n        const dbInterface = databaseInterfaces[index];\n        const db = localDatabases[index];\n        await mapSeries(entryArr, val => dbInterface.write(db, val));\n      } // Function to check if all databases have been replicated\n\n\n      const allReplicated = () => {\n        return remoteDatabases.every(db => db._oplog.length === entryCount);\n      };\n\n      console.log(\"Waiting for replication to finish\");\n      return new Promise((resolve, reject) => {\n        const interval = setInterval(() => {\n          if (allReplicated()) {\n            clearInterval(interval); // Verify that the databases contain all the right entries\n\n            databaseInterfaces.forEach((dbInterface, index) => {\n              const db = remoteDatabases[index];\n              const result = dbInterface.query(db);\n              assert.equal(result, entryCount);\n              assert.equal(db._oplog.length, entryCount);\n            });\n            resolve();\n          }\n        }, 200);\n      });\n    });","file":"multiple-databases.test.js","skipped":false,"dir":"test"},{"name":"throws an error if address is empty","suites":["orbit-db - OrbitDB Address ()","Parse Address"],"updatePoint":{"line":37,"column":45,"index":917},"line":37,"code":"      it('throws an error if address is empty', () => {\n        let err;\n\n        try {\n          const result = OrbitDB.parseAddress('');\n        } catch (e) {\n          err = e.toString();\n        }\n\n        assert.equal(err, 'Error: Not a valid OrbitDB address: ');\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"parse address successfully","suites":["orbit-db - OrbitDB Address ()","Parse Address"],"updatePoint":{"line":48,"column":36,"index":1187},"line":48,"code":"      it('parse address successfully', () => {\n        const address = '/orbitdb/zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13/first-database';\n        const result = OrbitDB.parseAddress(address);\n        const isInstanceOf = result instanceof OrbitDBAddress;\n        assert.equal(isInstanceOf, true);\n        assert.equal(result.root, 'zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13');\n        assert.equal(result.path, 'first-database');\n        assert.equal(result.toString().indexOf('/orbitdb'), 0);\n        assert.equal(result.toString().indexOf('zd'), 9);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"parse address with backslashes (win32) successfully","suites":["orbit-db - OrbitDB Address ()","Parse Address"],"updatePoint":{"line":58,"column":61,"index":1792},"line":58,"code":"      it('parse address with backslashes (win32) successfully', () => {\n        const address = '\\\\orbitdb\\\\Qmdgwt7w4uBsw8LXduzCd18zfGXeTmBsiR8edQ1hSfzcJC\\\\first-database';\n        const result = OrbitDB.parseAddress(address);\n        const isInstanceOf = result instanceof OrbitDBAddress;\n        assert.equal(isInstanceOf, true);\n        assert.equal(result.root, 'Qmdgwt7w4uBsw8LXduzCd18zfGXeTmBsiR8edQ1hSfzcJC');\n        assert.equal(result.path, 'first-database');\n        assert.equal(result.toString().indexOf('/orbitdb'), 0);\n        assert.equal(result.toString().indexOf('Qm'), 9);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"returns false for empty string","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":70,"column":40,"index":2421},"line":70,"code":"      it('returns false for empty string', () => {\n        const result = OrbitDB.isValidAddress('');\n        assert.equal(result, false);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"validate address successfully","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":74,"column":39,"index":2569},"line":74,"code":"      it('validate address successfully', () => {\n        const address = '/orbitdb/zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13/first-database';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, true);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"handle missing orbitdb prefix","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":79,"column":39,"index":2822},"line":79,"code":"      it('handle missing orbitdb prefix', () => {\n        const address = 'zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13/first-database';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, true);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"handle missing db address name","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":84,"column":40,"index":3067},"line":84,"code":"      it('handle missing db address name', () => {\n        const address = '/orbitdb/zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, true);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"handle invalid multihash","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":89,"column":34,"index":3300},"line":89,"code":"      it('handle invalid multihash', () => {\n        const address = '/orbitdb/Qmdgwt7w4uBsw8LXduzCd18zfGXeTmBsiR8edQ1hSfzc/first-database';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, false);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"validate address with backslashes (win32) successfully","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":94,"column":64,"index":3574},"line":94,"code":"      it('validate address with backslashes (win32) successfully', () => {\n        const address = '\\\\orbitdb\\\\Qmdgwt7w4uBsw8LXduzCd18zfGXeTmBsiR8edQ1hSfzcJC\\\\first-database';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, true);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"Successfully re-exports AccessControllers","suites":["Re-exports"],"updatePoint":{"line":12,"column":47,"index":221},"line":12,"code":"  it('Successfully re-exports AccessControllers', () => {\n    assert.strictEqual(typeof AccessControllers, 'function');\n    assert.strictEqual(typeof AccessControllers.addAccessController, 'function');\n  });","file":"re-exports.test.js","skipped":false,"dir":"test"},{"name":"Successfully re-exports Identities","suites":["Re-exports"],"updatePoint":{"line":16,"column":40,"index":422},"line":16,"code":"  it('Successfully re-exports Identities', () => {\n    assert.strictEqual(typeof Identities, 'function');\n    assert.strictEqual(typeof Identities.createIdentity, 'function');\n  });","file":"re-exports.test.js","skipped":false,"dir":"test"},{"name":"Successfully re-exports Keystore","suites":["Re-exports"],"updatePoint":{"line":20,"column":38,"index":602},"line":20,"code":"  it('Successfully re-exports Keystore', () => {\n    assert.strictEqual(typeof Keystore, 'function');\n  });","file":"re-exports.test.js","skipped":false,"dir":"test"},{"name":"replicates database of 100 entries and loads it from the disk","suites":["orbit-db - Replicate and Load ()","two peers"],"updatePoint":{"line":95,"column":71,"index":2991},"line":95,"code":"      it('replicates database of 100 entries and loads it from the disk', async () => {\n        const entryCount = 100;\n        const entryArr = [];\n        let timer;\n\n        for (let i = 0; i < entryCount; i++) entryArr.push(i);\n\n        console.log(\"Writing to database...\");\n        await mapSeries(entryArr, i => db1.add('hello' + i));\n        console.log(\"Done\");\n        return new Promise((resolve, reject) => {\n          timer = setInterval(async () => {\n            if (db2._oplog.length === entryCount) {\n              clearInterval(timer);\n              const items = db2.iterator({\n                limit: -1\n              }).collect();\n              assert.equal(items.length, entryCount);\n              assert.equal(items[0].payload.value, 'hello0');\n              assert.equal(items[items.length - 1].payload.value, 'hello99');\n\n              try {\n                // Set write access for both clients\n                let options = {\n                  accessController: {\n                    write: [orbitdb1.identity.id, orbitdb2.identity.id]\n                  }\n                }; // Get the previous address to make sure nothing mutates it\n\n                const addr = db1.address.toString(); // Open the database again (this time from the disk)\n\n                options = Object.assign({}, options, {\n                  path: dbPath1,\n                  create: false\n                });\n                const db3 = await orbitdb1.eventlog(addr, options); // Set 'localOnly' flag on and it'll error if the database doesn't exist locally\n\n                options = Object.assign({}, options, {\n                  path: dbPath2,\n                  localOnly: true\n                });\n                const db4 = await orbitdb2.eventlog(addr, options);\n                await db3.load();\n                await db4.load(); // Make sure we have all the entries in the databases\n\n                const result1 = db3.iterator({\n                  limit: -1\n                }).collect();\n                const result2 = db4.iterator({\n                  limit: -1\n                }).collect();\n                assert.equal(result1.length, entryCount);\n                assert.equal(result2.length, entryCount);\n                await db3.drop();\n                await db4.drop();\n              } catch (e) {\n                reject(e);\n              }\n\n              resolve();\n            }\n          }, 1000);\n        });\n      });","file":"replicate-and-load.test.js","skipped":false,"dir":"test"},{"name":"starts replicating the database when peers connect","suites":["orbit-db - Automatic Replication ()"],"updatePoint":{"line":68,"column":58,"index":1851},"line":68,"code":"    it('starts replicating the database when peers connect', async () => {\n      const isLocalhostAddress = addr => addr.toString().includes('127.0.0.1');\n\n      await connectPeers(ipfs1, ipfs2, {\n        filter: isLocalhostAddress\n      });\n      console.log('Peers connected');\n      const entryCount = 33;\n      const entryArr = []; // Create the entries in the first database\n\n      for (let i = 0; i < entryCount; i++) {\n        entryArr.push(i);\n      }\n\n      await mapSeries(entryArr, i => db1.add('hello' + i)); // Open the second database\n\n      db2 = await orbitdb2.eventlog(db1.address.toString());\n      db4 = await orbitdb2.keyvalue(db3.address.toString()); // Listen for the 'replicated' events and check that all the entries\n      // were replicated to the second database\n\n      return new Promise((resolve, reject) => {\n        // Check if db2 was already replicated\n        let all = db2.iterator({\n          limit: -1\n        }).collect().length; // Run the test asserts below if replication was done\n\n        let finished = all === entryCount;\n        db3.events.on('replicated', (address, hash, entry) => {\n          reject(new Error(\"db3 should not receive the 'replicated' event!\"));\n        });\n        db4.events.on('replicated', (address, hash, entry) => {\n          reject(new Error(\"db4 should not receive the 'replicated' event!\"));\n        });\n        db2.events.on('replicated', (address, length) => {\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount;\n        });\n\n        try {\n          const timer = setInterval(() => {\n            if (finished) {\n              clearInterval(timer);\n              const result1 = db1.iterator({\n                limit: -1\n              }).collect();\n              const result2 = db2.iterator({\n                limit: -1\n              }).collect();\n              assert.equal(result1.length, result2.length);\n              assert.deepEqual(result1, result2);\n              resolve();\n            }\n          }, 1000);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });","file":"replicate-automatically.test.js","skipped":false,"dir":"test"},{"name":"replicates database of 1 entry","suites":["orbit-db - Replication ()"],"updatePoint":{"line":80,"column":38,"index":2316},"line":80,"code":"    it('replicates database of 1 entry', async () => {\n      console.log(\"Waiting for peers to connect\");\n      await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString()); // Set 'sync' flag on. It'll prevent creating a new local database and rather\n      // fetch the database from the network\n\n      options = Object.assign({}, options, {\n        directory: dbPath2,\n        sync: true\n      });\n      db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n      let finished = false;\n      await db1.add('hello');\n      return new Promise(resolve => {\n        let replicatedEventCount = 0;\n        db2.events.on('replicated', (address, length) => {\n          replicatedEventCount++; // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === 1;\n        });\n        timer = setInterval(() => {\n          if (finished) {\n            clearInterval(timer);\n            const entries = db2.iterator({\n              limit: -1\n            }).collect();\n            assert.equal(entries.length, 1);\n            assert.equal(entries[0].payload.value, 'hello');\n            assert.equal(replicatedEventCount, 1);\n            resolve();\n          }\n        }, 100);\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"replicates database of 100 entries","suites":["orbit-db - Replication ()"],"updatePoint":{"line":117,"column":42,"index":3686},"line":117,"code":"    it('replicates database of 100 entries', async () => {\n      console.log(\"Waiting for peers to connect\");\n      await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString());\n      options = Object.assign({}, options, {\n        directory: dbPath2,\n        sync: true\n      });\n      db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n      let finished = false;\n      const entryCount = 100;\n      const entryArr = [];\n\n      for (let i = 0; i < entryCount; i++) entryArr.push(i);\n\n      return new Promise(async (resolve, reject) => {\n        db2.events.on('replicated', () => {\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount;\n        });\n\n        try {\n          const add = i => db1.add('hello' + i);\n\n          await mapSeries(entryArr, add);\n        } catch (e) {\n          reject(e);\n        }\n\n        timer = setInterval(() => {\n          if (finished) {\n            clearInterval(timer);\n            const entries = db2.iterator({\n              limit: -1\n            }).collect();\n            assert.equal(entries.length, entryCount);\n            assert.equal(entries[0].payload.value, 'hello0');\n            assert.equal(entries[entries.length - 1].payload.value, 'hello99');\n            resolve();\n          }\n        }, 100);\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"emits correct replication info","suites":["orbit-db - Replication ()"],"updatePoint":{"line":163,"column":38,"index":5165},"line":163,"code":"    it('emits correct replication info', async () => {\n      console.log(\"Waiting for peers to connect\");\n      await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString());\n      options = Object.assign({}, options, {\n        directory: dbPath2,\n        sync: true\n      });\n      db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n      let finished = false;\n      const entryCount = 99;\n      return new Promise(async (resolve, reject) => {\n        // Test that none of the entries gets into the replication queue twice\n        const replicateSet = new Set();\n        db2.events.on('replicate', (address, entry) => {\n          if (!replicateSet.has(entry.hash)) {\n            replicateSet.add(entry.hash);\n          } else {\n            reject(new Error('Shouldn\\'t have started replication twice for entry ' + entry.hash + '\\n' + entry.payload.value));\n          }\n        }); // Verify that progress count increases monotonically by saving\n        // each event's current progress into an array\n\n        const progressEvents = [];\n        db2.events.on('replicate.progress', () => {\n          progressEvents.push(db2.replicationStatus.progress);\n        });\n        db2.events.on('replicated', (address, length) => {\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount;\n        });\n\n        try {\n          timer = setInterval(() => {\n            if (finished) {\n              clearInterval(timer); // All entries should be in the database\n\n              assert.equal(db2.iterator({\n                limit: -1\n              }).collect().length, entryCount); // progress events should increase monotonically\n\n              assert.equal(progressEvents.length, entryCount);\n\n              for (const [idx, e] of progressEvents.entries()) {\n                assert.equal(e, idx + 1);\n              } // Verify replication status\n\n\n              assert.equal(db2.replicationStatus.progress, entryCount);\n              assert.equal(db2.replicationStatus.max, entryCount); // Verify replicator state\n\n              assert.equal(db2._replicator.tasksRunning, 0);\n              assert.equal(db2._replicator.tasksQueued, 0);\n              assert.equal(db2._replicator.unfinished.length, 0); // Replicator's internal caches should be empty\n\n              assert.equal(db2._replicator._logs.length, 0);\n              assert.equal(Object.keys(db2._replicator._fetching).length, 0);\n              resolve();\n            }\n          }, 1000);\n        } catch (e) {\n          reject(e);\n        } // Trigger replication\n\n\n        let adds = [];\n\n        for (let i = 0; i < entryCount; i++) {\n          adds.push(i);\n        }\n\n        await mapSeries(adds, i => db1.add('hello ' + i));\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"emits correct replication info on fresh replication","suites":["orbit-db - Replication ()"],"updatePoint":{"line":240,"column":59,"index":8097},"line":240,"code":"    it('emits correct replication info on fresh replication', async () => {\n      return new Promise(async (resolve, reject) => {\n        let finished = false;\n        const entryCount = 512; // Trigger replication\n\n        const adds = [];\n\n        for (let i = 0; i < entryCount; i++) {\n          adds.push(i);\n        }\n\n        const add = async i => {\n          process.stdout.write(\"\\rWriting \" + (i + 1) + \" / \" + entryCount + \" \");\n          await db1.add('hello ' + i);\n        };\n\n        await mapSeries(adds, add);\n        console.log(); // Open second instance again\n\n        options = {\n          directory: dbPath2,\n          overwrite: true,\n          sync: true\n        };\n        db2 = await orbitdb2.eventlog(db1.address.toString(), options); // Test that none of the entries gets into the replication queue twice\n\n        const replicateSet = new Set();\n        db2.events.on('replicate', (address, entry) => {\n          if (!replicateSet.has(entry.hash)) {\n            replicateSet.add(entry.hash);\n          } else {\n            reject(new Error('Shouldn\\'t have started replication twice for entry ' + entry.hash));\n          }\n        }); // Verify that progress count increases monotonically by saving\n        // each event's current progress into an array\n\n        const progressEvents = [];\n        db2.events.on('replicate.progress', (address, hash, entry) => {\n          progressEvents.push(db2.replicationStatus.progress);\n        });\n        let replicatedEventCount = 0;\n        db2.events.on('replicated', (address, length) => {\n          replicatedEventCount++; // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount;\n        });\n        timer = setInterval(async () => {\n          if (finished) {\n            clearInterval(timer);\n\n            try {\n              // All entries should be in the database\n              assert.equal(db2.iterator({\n                limit: -1\n              }).collect().length, entryCount); // 'replicated' event should've been received only once\n\n              assert.equal(replicatedEventCount, 1); // progress events should increase monotonically\n\n              assert.equal(progressEvents.length, entryCount);\n\n              for (const [idx, e] of progressEvents.entries()) {\n                assert.equal(e, idx + 1);\n              } // Verify replication status\n\n\n              assert.equal(db2.replicationStatus.progress, entryCount);\n              assert.equal(db2.replicationStatus.max, entryCount); // Verify replicator state\n\n              assert.equal(db2._replicator.tasksRunning, 0);\n              assert.equal(db2._replicator.tasksQueued, 0);\n              assert.equal(db2._replicator.unfinished.length, 0); // Replicator's internal caches should be empty\n\n              assert.equal(db2._replicator._logs.length, 0);\n              assert.equal(Object.keys(db2._replicator._fetching).length, 0);\n              resolve();\n            } catch (e) {\n              reject(e);\n            }\n          }\n        }, 100);\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"emits correct replication info in two-way replication","suites":["orbit-db - Replication ()"],"updatePoint":{"line":326,"column":61,"index":11302},"line":326,"code":"    it('emits correct replication info in two-way replication', async () => {\n      return new Promise(async (resolve, reject) => {\n        console.log(\"Waiting for peers to connect\");\n        await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString());\n        let finished = false;\n        const entryCount = 100; // Trigger replication\n\n        const adds = [];\n\n        for (let i = 0; i < entryCount; i++) {\n          adds.push(i);\n        }\n\n        const add = async i => {\n          process.stdout.write(\"\\rWriting \" + (i + 1) + \" / \" + entryCount + \" \");\n          await Promise.all([db1.add('hello-1-' + i), db2.add('hello-2-' + i)]);\n        }; // Open second instance again\n\n\n        let options = {\n          directory: dbPath2 + '2',\n          overwrite: true,\n          sync: true\n        };\n        db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n        assert.equal(db1.address.toString(), db2.address.toString()); // Test that none of the entries gets into the replication queue twice\n\n        const replicateSet = new Set();\n        db2.events.on('replicate', (address, entry) => {\n          if (!replicateSet.has(entry.hash)) {\n            replicateSet.add(entry.hash);\n          } else {\n            reject(new Error('Shouldn\\'t have started replication twice for entry ' + entry.hash));\n          }\n        });\n        db2.events.on('replicated', (address, length) => {\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount * 2;\n        });\n\n        try {\n          await mapSeries(adds, add);\n          console.log();\n          timer = setInterval(() => {\n            if (finished) {\n              clearInterval(timer); // Database values should match\n\n              const values1 = db1.iterator({\n                limit: -1\n              }).collect();\n              const values2 = db2.iterator({\n                limit: -1\n              }).collect();\n              assert.equal(values1.length, values2.length);\n              assert.deepEqual(values1, values2); // All entries should be in the database\n\n              assert.equal(values1.length, entryCount * 2);\n              assert.equal(values2.length, entryCount * 2); // Verify replication status\n\n              assert.equal(db2.replicationStatus.progress, entryCount * 2);\n              assert.equal(db2.replicationStatus.max, entryCount * 2); // Verify replicator state\n\n              assert.equal(db2._replicator.tasksRunning, 0);\n              assert.equal(db2._replicator.tasksQueued, 0);\n              assert.equal(db2._replicator.unfinished.length, 0); // Replicator's internal caches should be empty\n\n              assert.equal(db2._replicator._logs.length, 0);\n              assert.equal(Object.keys(db2._replicator._fetching).length, 0);\n              resolve();\n            }\n          }, 500);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"has correct initial state","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":41,"column":33,"index":1131},"line":41,"code":"    it('has correct initial state', async () => {\n      assert.deepEqual(db.replicationStatus, {\n        progress: 0,\n        max: 0\n      });\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"has correct replication info after load","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":47,"column":47,"index":1296},"line":47,"code":"    it('has correct replication info after load', async () => {\n      await db.add('hello');\n      await db.close();\n      await db.load();\n      assert.deepEqual(db.replicationStatus, {\n        progress: 1,\n        max: 1\n      });\n      await db.close();\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"has correct replication info after close","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":57,"column":48,"index":1562},"line":57,"code":"    it('has correct replication info after close', async () => {\n      await db.close();\n      assert.deepEqual(db.replicationStatus, {\n        progress: 0,\n        max: 0\n      });\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"has correct replication info after sync","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":64,"column":47,"index":1751},"line":64,"code":"    it('has correct replication info after sync', async () => {\n      await db.load();\n      await db.add('hello2');\n      const db2 = await orbitdb2.log(db.address.toString(), {\n        create: false\n      });\n      await db2.sync(db._oplog.heads);\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          try {\n            assert.deepEqual(db2.replicationStatus, {\n              progress: 2,\n              max: 2\n            });\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        }, 100);\n      });\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"has correct replication info after loading from snapshot","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":85,"column":64,"index":2344},"line":85,"code":"    it('has correct replication info after loading from snapshot', async () => {\n      await db._cache._store.open();\n      await db.saveSnapshot();\n      await db.close();\n      await db.loadFromSnapshot();\n      assert.deepEqual(db.replicationStatus, {\n        progress: 2,\n        max: 2\n      });\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"sets identity","suites":["orbit-db - Set identities ()"],"updatePoint":{"line":71,"column":21,"index":1875},"line":71,"code":"    it('sets identity', async () => {\n      const db = await orbitdb.open('abc', options);\n      assert.equal(db.identity, orbitdb.identity);\n      db.setIdentity(identity1);\n      assert.equal(db.identity, identity1);\n      await db.close();\n    });","file":"set-identity.test.js","skipped":false,"dir":"test"},{"name":"writes with new identity with access","suites":["orbit-db - Set identities ()"],"updatePoint":{"line":78,"column":44,"index":2149},"line":78,"code":"    it('writes with new identity with access', async () => {\n      const db = await orbitdb.open('abc', options);\n      assert.equal(db.identity, orbitdb.identity);\n      db.setIdentity(identity1);\n      assert.equal(db.identity, identity1);\n      let err;\n\n      try {\n        await db.add({\n          hello: '1'\n        });\n      } catch (e) {\n        err = e.message;\n      }\n\n      assert.equal(err, null);\n      await db.drop();\n    });","file":"set-identity.test.js","skipped":false,"dir":"test"},{"name":"cannot write with new identity without access","suites":["orbit-db - Set identities ()"],"updatePoint":{"line":96,"column":53,"index":2600},"line":96,"code":"    it('cannot write with new identity without access', async () => {\n      const db = await orbitdb.open('abc', options);\n      assert.equal(db.identity, orbitdb.identity);\n      db.setIdentity(identity2);\n      assert.equal(db.identity, identity2);\n      let err;\n\n      try {\n        await db.add({\n          hello: '1'\n        });\n      } catch (e) {\n        err = e.message;\n      }\n\n      assert.equal(err, `Could not append entry, key \"${identity2.id}\" is not allowed to write to the log`);\n      await db.drop();\n    });","file":"set-identity.test.js","skipped":false,"dir":"test"}]}