{"repo":"graphql/graphiql","url":"https://github.com/graphql/graphiql","branch":"main","configs":[{"package":"codemirror-graphql","lang":"ts","dir":"packages/codemirror-graphql/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphiql-2-rfc-context","lang":"js","dir":"packages/graphiql-2-rfc-context/cypress","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphiql","lang":"js","dir":"packages/graphiql/cypress","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-cli","lang":"ts","dir":"packages/graphql-language-service-cli/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-interface","lang":"ts","dir":"packages/graphql-language-service-interface/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-parser","lang":"ts","dir":"packages/graphql-language-service-parser/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-server","lang":"ts","dir":"packages/graphql-language-service-server/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"graphql-language-service-utils","lang":"ts","dir":"packages/graphql-language-service-utils/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"attaches a GraphQL hint function with correct mode/hint options","suites":["graphql-hint"],"updatePoint":{"line":84,"column":69},"line":84,"code":"  it('attaches a GraphQL hint function with correct mode/hint options', () => {\n    const editor = createEditorWithHint();\n    expect(editor.getHelpers(editor.getCursor(), 'hint')).not.toHaveLength(0);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct initial keywords","suites":["graphql-hint"],"updatePoint":{"line":89,"column":39},"line":89,"code":"  it('provides correct initial keywords', async () => {\n    const suggestions = await getHintSuggestions('', { line: 0, ch: 0 });\n    const list = [\n      { text: 'query' },\n      { text: 'mutation' },\n      { text: 'subscription' },\n      { text: 'fragment' },\n      { text: '{' },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct initial keywords after filtered","suites":["graphql-hint"],"updatePoint":{"line":102,"column":54},"line":102,"code":"  it('provides correct initial keywords after filtered', async () => {\n    const suggestions = await getHintSuggestions('q', { line: 0, ch: 1 });\n    const list = [{ text: '{' }, { text: 'query' }];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestions","suites":["graphql-hint"],"updatePoint":{"line":109,"column":45},"line":109,"code":"  it('provides correct field name suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ ', { line: 0, ch: 2 });\n    const list = [\n      {\n        text: 'test',\n        type: TestType,\n        isDeprecated: false,\n      },\n      {\n        text: 'union',\n        type: TestUnion,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: UnionFirst,\n        isDeprecated: false,\n      },\n      {\n        text: 'id',\n        type: GraphQLInt,\n        isDeprecated: false,\n      },\n      {\n        text: 'isTest',\n        type: GraphQLBoolean,\n        isDeprecated: false,\n      },\n      {\n        text: 'hasArgs',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n      },\n      {\n        text: '__schema',\n        type: new GraphQLNonNull(__Schema),\n        description: 'Access the current type schema of this server.',\n        isDeprecated: false,\n      },\n      {\n        text: '__type',\n        type: __Type,\n        description: 'Request the type information of a single type.',\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestions after filtered","suites":["graphql-hint"],"updatePoint":{"line":165,"column":60},"line":165,"code":"  it('provides correct field name suggestions after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ i', { line: 0, ch: 3 });\n    const list = [\n      {\n        text: 'id',\n        type: GraphQLInt,\n        isDeprecated: false,\n      },\n      {\n        text: 'isTest',\n        type: GraphQLBoolean,\n        isDeprecated: false,\n      },\n      {\n        text: 'union',\n        type: TestUnion,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: UnionFirst,\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestions when using aliases","suites":["graphql-hint"],"updatePoint":{"line":193,"column":64},"line":193,"code":"  it('provides correct field name suggestions when using aliases', async () => {\n    const suggestions = await getHintSuggestions('{ aliasTest: first { ', {\n      line: 0,\n      ch: 21,\n    });\n    const list = [\n      {\n        text: 'scalar',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: TestType,\n        isDeprecated: false,\n      },\n      {\n        text: 'example',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestion indentation","suites":["graphql-hint"],"updatePoint":{"line":225,"column":56},"line":225,"code":"  it('provides correct field name suggestion indentation', async () => {\n    const suggestions = await getHintSuggestions('{\\n  ', { line: 1, ch: 2 });\n    expect(suggestions?.from).toEqual({ line: 1, ch: 2, sticky: null });\n    expect(suggestions?.to).toEqual({ line: 1, ch: 2, sticky: null });\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct argument suggestions","suites":["graphql-hint"],"updatePoint":{"line":231,"column":43},"line":231,"code":"  it('provides correct argument suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs ( ', {\n      line: 0,\n      ch: 12,\n    });\n    const list = [\n      {\n        text: 'string',\n        type: GraphQLString,\n      },\n      {\n        text: 'int',\n        type: GraphQLInt,\n      },\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'boolean',\n        type: GraphQLBoolean,\n      },\n      {\n        text: 'id',\n        type: GraphQLID,\n      },\n      {\n        text: 'enum',\n        type: TestEnum,\n      },\n      {\n        text: 'object',\n        type: TestInputObject,\n      },\n      {\n        text: 'listString',\n        type: new GraphQLList(GraphQLString),\n      },\n      {\n        text: 'listInt',\n        type: new GraphQLList(GraphQLInt),\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n      {\n        text: 'listBoolean',\n        type: new GraphQLList(GraphQLBoolean),\n      },\n      {\n        text: 'listID',\n        type: new GraphQLList(GraphQLID),\n      },\n      {\n        text: 'listEnum',\n        type: new GraphQLList(TestEnum),\n      },\n      {\n        text: 'listObject',\n        type: new GraphQLList(TestInputObject),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct argument suggestions after filtered","suites":["graphql-hint"],"updatePoint":{"line":298,"column":58},"line":298,"code":"  it('provides correct argument suggestions after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs ( f', {\n      line: 0,\n      ch: 13,\n    });\n    const list = [\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct argument suggestions when using aliases","suites":["graphql-hint"],"updatePoint":{"line":317,"column":62},"line":317,"code":"  it('provides correct argument suggestions when using aliases', async () => {\n    const suggestions = await getHintSuggestions('{ aliasTest: hasArgs ( ', {\n      line: 0,\n      ch: 23,\n    });\n    const list = [\n      {\n        text: 'string',\n        type: GraphQLString,\n      },\n      {\n        text: 'int',\n        type: GraphQLInt,\n      },\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'boolean',\n        type: GraphQLBoolean,\n      },\n      {\n        text: 'id',\n        type: GraphQLID,\n      },\n      {\n        text: 'enum',\n        type: TestEnum,\n      },\n      {\n        text: 'object',\n        type: TestInputObject,\n      },\n      {\n        text: 'listString',\n        type: new GraphQLList(GraphQLString),\n      },\n      {\n        text: 'listInt',\n        type: new GraphQLList(GraphQLInt),\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n      {\n        text: 'listBoolean',\n        type: new GraphQLList(GraphQLBoolean),\n      },\n      {\n        text: 'listID',\n        type: new GraphQLList(GraphQLID),\n      },\n      {\n        text: 'listEnum',\n        type: new GraphQLList(TestEnum),\n      },\n      {\n        text: 'listObject',\n        type: new GraphQLList(TestInputObject),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestions","suites":["graphql-hint"],"updatePoint":{"line":384,"column":44},"line":384,"code":"  it('provides correct directive suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ test (@', {\n      line: 0,\n      ch: 9,\n    });\n    const list = [\n      {\n        text: 'include',\n        description:\n          'Directs the executor to include this field or fragment only when the `if` argument is true.',\n      },\n      {\n        text: 'skip',\n        description:\n          'Directs the executor to skip this field or fragment when the `if` argument is true.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestion after filtered","suites":["graphql-hint"],"updatePoint":{"line":405,"column":58},"line":405,"code":"  it('provides correct directive suggestion after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ test (@s', {\n      line: 0,\n      ch: 10,\n    });\n    const list = [\n      {\n        text: 'skip',\n        description:\n          'Directs the executor to skip this field or fragment when the `if` argument is true.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestions when using aliases","suites":["graphql-hint"],"updatePoint":{"line":421,"column":63},"line":421,"code":"  it('provides correct directive suggestions when using aliases', async () => {\n    const suggestions = await getHintSuggestions('{ aliasTest: test (@', {\n      line: 0,\n      ch: 20,\n    });\n    const list = [\n      {\n        text: 'include',\n        description:\n          'Directs the executor to include this field or fragment only when the `if` argument is true.',\n      },\n      {\n        text: 'skip',\n        description:\n          'Directs the executor to skip this field or fragment when the `if` argument is true.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestions on definitions","suites":["graphql-hint"],"updatePoint":{"line":442,"column":59},"line":442,"code":"  it('provides correct directive suggestions on definitions', async () => {\n    const suggestions = await getHintSuggestions('type Type @', {\n      line: 0,\n      ch: 11,\n    });\n    const list = [\n      {\n        text: 'onAllDefs',\n        description: '',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct directive suggestions on args definitions","suites":["graphql-hint"],"updatePoint":{"line":457,"column":64},"line":457,"code":"  it('provides correct directive suggestions on args definitions', async () => {\n    const suggestions = await getHintSuggestions(\n      'type Type { field(arg: String @',\n      { line: 0, ch: 31 },\n    );\n    const list = [\n      {\n        text: 'deprecated',\n        description:\n          'Marks an element of a GraphQL schema as no longer supported.',\n      },\n      {\n        text: 'onArg',\n        description: '',\n      },\n      {\n        text: 'onAllDefs',\n        description: '',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides interface suggestions for type when using implements keyword","suites":["graphql-hint"],"updatePoint":{"line":481,"column":75},"line":481,"code":"  it('provides interface suggestions for type when using implements keyword', async () => {\n    const suggestions = await getHintSuggestions('type Type implements ', {\n      line: 0,\n      ch: 21,\n    });\n    const list = [\n      {\n        text: 'TestInterface',\n        type: TestSchema.getType('TestInterface'),\n      },\n      {\n        text: 'AnotherTestInterface',\n        type: TestSchema.getType('AnotherTestInterface'),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides interface suggestions for interface when using implements keyword","suites":["graphql-hint"],"updatePoint":{"line":500,"column":80},"line":500,"code":"  it('provides interface suggestions for interface when using implements keyword', async () => {\n    const suggestions = await getHintSuggestions(\n      'interface MyInt implements An',\n      { line: 0, ch: 29 },\n    );\n    const list = [\n      {\n        text: 'AnotherTestInterface',\n        type: TestSchema.getType('AnotherTestInterface'),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides interface suggestions for interface when using implements keyword and multiple interfaces","suites":["graphql-hint"],"updatePoint":{"line":515,"column":104},"line":515,"code":"  it('provides interface suggestions for interface when using implements keyword and multiple interfaces', async () => {\n    const suggestions = await getHintSuggestions(\n      'interface MyInt implements AnotherTestInterface & T',\n      { line: 0, ch: 51 },\n    );\n    const list = [\n      {\n        text: 'TestInterface',\n        type: TestSchema.getType('TestInterface'),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct typeCondition suggestions","suites":["graphql-hint"],"updatePoint":{"line":530,"column":48},"line":530,"code":"  it('provides correct typeCondition suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ union { ... on ', {\n      line: 0,\n      ch: 17,\n    });\n    const list = [\n      {\n        text: 'First',\n        description: '',\n      },\n      {\n        text: 'Second',\n        description: '',\n      },\n      {\n        text: 'TestInterface',\n        description: '',\n      },\n      {\n        text: 'AnotherTestInterface',\n        description: '',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct typeCondition suggestions after filtered","suites":["graphql-hint"],"updatePoint":{"line":557,"column":63},"line":557,"code":"  it('provides correct typeCondition suggestions after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ union { ... on F', {\n      line: 0,\n      ch: 18,\n    });\n    const list = [\n      {\n        text: 'First',\n        description: '',\n      },\n      {\n        text: 'TestInterface',\n        description: '',\n      },\n      {\n        text: 'AnotherTestInterface',\n        description: '',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct typeCondition suggestions on fragment","suites":["graphql-hint"],"updatePoint":{"line":580,"column":60},"line":580,"code":"  it('provides correct typeCondition suggestions on fragment', async () => {\n    const suggestions = await getHintSuggestions('fragment Foo on ', {\n      line: 0,\n      ch: 16,\n    });\n    const list = [\n      {\n        text: 'Test',\n        description: '',\n      },\n      {\n        text: 'TestUnion',\n        description: '',\n      },\n      {\n        text: 'First',\n        description: '',\n      },\n      {\n        text: 'TestInterface',\n        description: '',\n      },\n      {\n        text: 'AnotherTestInterface',\n        description: '',\n      },\n      {\n        text: 'Second',\n        description: '',\n      },\n      {\n        text: 'MutationType',\n        description: 'This is a simple mutation type',\n      },\n      {\n        text: 'SubscriptionType',\n        description: 'This is a simple subscription type',\n      },\n      {\n        text: '__Schema',\n        description: __Schema.description,\n      },\n      {\n        text: '__Type',\n        description: __Type.description,\n      },\n      {\n        text: '__Field',\n        description: __Field.description,\n      },\n      {\n        text: '__InputValue',\n        description: __InputValue.description,\n      },\n      {\n        text: '__EnumValue',\n        description: __EnumValue.description,\n      },\n      {\n        text: '__Directive',\n        description: __Directive.description,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct ENUM suggestions","suites":["graphql-hint"],"updatePoint":{"line":647,"column":39},"line":647,"code":"  it('provides correct ENUM suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs (enum: ', {\n      line: 0,\n      ch: 17,\n    });\n    const list = [\n      {\n        text: 'RED',\n        type: TestEnum,\n        isDeprecated: false,\n      },\n      {\n        text: 'GREEN',\n        type: TestEnum,\n        isDeprecated: false,\n      },\n      {\n        text: 'BLUE',\n        type: TestEnum,\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct testInput suggestions","suites":["graphql-hint"],"updatePoint":{"line":673,"column":44},"line":673,"code":"  it('provides correct testInput suggestions', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs (object: { ', {\n      line: 0,\n      ch: 21,\n    });\n    const list = [\n      {\n        text: 'string',\n        type: GraphQLString,\n      },\n      {\n        text: 'int',\n        type: GraphQLInt,\n      },\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'boolean',\n        type: GraphQLBoolean,\n      },\n      {\n        text: 'id',\n        type: GraphQLID,\n      },\n      {\n        text: 'enum',\n        type: TestEnum,\n      },\n      {\n        text: 'object',\n        type: TestInputObject,\n      },\n      {\n        text: 'listString',\n        type: new GraphQLList(GraphQLString),\n      },\n      {\n        text: 'listInt',\n        type: new GraphQLList(GraphQLInt),\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n      {\n        text: 'listBoolean',\n        type: new GraphQLList(GraphQLBoolean),\n      },\n      {\n        text: 'listID',\n        type: new GraphQLList(GraphQLID),\n      },\n      {\n        text: 'listEnum',\n        type: new GraphQLList(TestEnum),\n      },\n      {\n        text: 'listObject',\n        type: new GraphQLList(TestInputObject),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct object field suggestions after filtered","suites":["graphql-hint"],"updatePoint":{"line":740,"column":62},"line":740,"code":"  it('provides correct object field suggestions after filtered', async () => {\n    const suggestions = await getHintSuggestions('{ hasArgs (object: { f', {\n      line: 0,\n      ch: 22,\n    });\n    const list = [\n      {\n        text: 'float',\n        type: GraphQLFloat,\n      },\n      {\n        text: 'listFloat',\n        type: new GraphQLList(GraphQLFloat),\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides fragment name suggestion","suites":["graphql-hint"],"updatePoint":{"line":759,"column":39},"line":759,"code":"  it('provides fragment name suggestion', async () => {\n    const suggestions = await getHintSuggestions(\n      'fragment Foo on Test { id }  query { ...',\n      { line: 0, ch: 40 },\n    );\n    const list = [\n      {\n        text: 'Foo',\n        type: TestType,\n        description: 'fragment Foo on Test',\n      },\n      {\n        text: 'Example',\n        type: TestType,\n        description: 'fragment Example on Test',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides fragment names for fragments defined lower","suites":["graphql-hint"],"updatePoint":{"line":780,"column":57},"line":780,"code":"  it('provides fragment names for fragments defined lower', async () => {\n    const suggestions = await getHintSuggestions(\n      'query { ... }\\nfragment Foo on Test { id }',\n      { line: 0, ch: 11 },\n    );\n    const list = [\n      {\n        text: 'Foo',\n        type: TestType,\n        description: 'fragment Foo on Test',\n      },\n      {\n        text: 'Example',\n        type: TestType,\n        description: 'fragment Example on Test',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides only appropriate fragment names","suites":["graphql-hint"],"updatePoint":{"line":801,"column":46},"line":801,"code":"  it('provides only appropriate fragment names', async () => {\n    const suggestions = await getHintSuggestions(\n      'fragment Foo on TestUnion { ... } ' +\n        'fragment Bar on First { name } ' +\n        'fragment Baz on Second { name } ' +\n        'fragment Qux on TestUnion { name } ' +\n        'fragment Nrf on Test { id } ' +\n        'fragment Quux on TestInputObject { string } ' +\n        'fragment Corge on Grault { garply }',\n      { line: 0, ch: 31 },\n    );\n    const list = [\n      {\n        text: 'Bar',\n        type: UnionFirst,\n        description: 'fragment Bar on First',\n      },\n      {\n        text: 'Baz',\n        type: UnionSecond,\n        description: 'fragment Baz on Second',\n      },\n      {\n        text: 'Qux',\n        type: TestUnion,\n        description: 'fragment Qux on TestUnion',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestion inside inline fragment","suites":["graphql-hint"],"updatePoint":{"line":833,"column":67},"line":833,"code":"  it('provides correct field name suggestion inside inline fragment', async () => {\n    const suggestions = await getHintSuggestions(\n      'fragment Foo on TestUnion { ... on First { ',\n      { line: 0, ch: 43 },\n    );\n    const list = [\n      {\n        text: 'scalar',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: TestType,\n        isDeprecated: false,\n      },\n      {\n        text: 'example',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestion inside typeless inline fragment","suites":["graphql-hint"],"updatePoint":{"line":865,"column":76},"line":865,"code":"  it('provides correct field name suggestion inside typeless inline fragment', async () => {\n    const suggestions = await getHintSuggestions(\n      'fragment Foo on First { ... { ',\n      { line: 0, ch: 30 },\n    );\n    const list = [\n      {\n        text: 'scalar',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: 'first',\n        type: TestType,\n        isDeprecated: false,\n      },\n      {\n        text: 'example',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n      },\n    ];\n\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct boolean suggestions","suites":["graphql-hint"],"updatePoint":{"line":898,"column":42},"line":898,"code":"  it('provides correct boolean suggestions', async () => {\n    const suggestions1 = await getHintSuggestions('{ hasArgs(listBoolean: [ ', {\n      line: 0,\n      ch: 27,\n    });\n    const list1 = [\n      {\n        text: 'true',\n        type: GraphQLBoolean,\n        description: 'Not false.',\n      },\n      {\n        text: 'false',\n        type: GraphQLBoolean,\n        description: 'Not true.',\n      },\n    ];\n    const expectedSuggestions1 = getExpectedSuggestions(list1);\n    expect(suggestions1?.list).toEqual(expectedSuggestions1);\n\n    const suggestions2 = await getHintSuggestions(\n      '{ hasArgs(object: { boolean: t',\n      { line: 0, ch: 30 },\n    );\n    const list2 = [\n      {\n        text: 'true',\n        type: GraphQLBoolean,\n        description: 'Not false.',\n      },\n    ];\n    const expectedSuggestions2 = getExpectedSuggestions(list2);\n    expect(suggestions2?.list).toEqual(expectedSuggestions2);\n\n    const suggestions3 = await getHintSuggestions('{ hasArgs(boolean: f', {\n      line: 0,\n      ch: 20,\n    });\n    const list3 = [\n      {\n        text: 'false',\n        type: GraphQLBoolean,\n        description: 'Not true.',\n      },\n    ];\n    const expectedSuggestions3 = getExpectedSuggestions(list3);\n    expect(suggestions3?.list).toEqual(expectedSuggestions3);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct variable type suggestions","suites":["graphql-hint"],"updatePoint":{"line":947,"column":48},"line":947,"code":"  it('provides correct variable type suggestions', async () => {\n    const suggestions = await getHintSuggestions('query($foo: ', {\n      line: 0,\n      ch: 12,\n    });\n    const list = [\n      {\n        text: 'String',\n        description:\n          'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n      },\n      {\n        text: 'Int',\n        description:\n          'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n      },\n      {\n        text: 'Boolean',\n        description: 'The `Boolean` scalar type represents `true` or `false`.',\n      },\n      {\n        text: 'Float',\n        description:\n          'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n      },\n      {\n        text: 'ID',\n        description:\n          'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n      },\n      { text: 'TestEnum' },\n      { text: 'TestInput' },\n      {\n        text: '__TypeKind',\n        description:\n          'An enum describing what kind of type a given `__Type` is.',\n      },\n      {\n        text: '__DirectiveLocation',\n        description:\n          'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct variable type suggestions inside list type","suites":["graphql-hint"],"updatePoint":{"line":994,"column":65},"line":994,"code":"  it('provides correct variable type suggestions inside list type', async () => {\n    const suggestions = await getHintSuggestions('query($foo: [ ', {\n      line: 0,\n      ch: 14,\n    });\n    const list = [\n      {\n        text: 'String',\n        description:\n          'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n      },\n      {\n        text: 'Int',\n        description:\n          'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n      },\n      {\n        text: 'Boolean',\n        description: 'The `Boolean` scalar type represents `true` or `false`.',\n      },\n      {\n        text: 'Float',\n        description:\n          'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n      },\n      {\n        text: 'ID',\n        description:\n          'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n      },\n      { text: 'TestEnum' },\n      { text: 'TestInput' },\n      {\n        text: '__TypeKind',\n        description:\n          'An enum describing what kind of type a given `__Type` is.',\n      },\n      {\n        text: '__DirectiveLocation',\n        description:\n          'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n      },\n    ];\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides no suggestinos","suites":["graphql-hint"],"updatePoint":{"line":1040,"column":29},"line":1040,"code":"  it('provides no suggestinos', async () => {\n    const list: IHint[] = [];\n    const expectedSuggestions = getExpectedSuggestions(list);\n\n    // kind is FragmentSpread, step is 2\n    const suggestions1 = await getHintSuggestions(\n      'fragment Foo on Test { id }  query { ...Foo ',\n      { line: 0, ch: 45 },\n    );\n    expect(suggestions1?.list).toEqual(expectedSuggestions);\n\n    // kind is ListType, step is 3\n    const suggestions2 = await getHintSuggestions('query($foo: [string] ', {\n      line: 0,\n      ch: 21,\n    });\n    expect(suggestions2?.list).toEqual(expectedSuggestions);\n\n    // kind is ListValue, step is 1\n    const suggestions3 = await getHintSuggestions(\n      '{ hasArgs(listString: [\"foo\" ',\n      {\n        line: 0,\n        ch: 29,\n      },\n    );\n    expect(suggestions3?.list).toEqual(expectedSuggestions);\n\n    // kind is VariableDefinition, step is 1\n    const suggestions4 = await getHintSuggestions('query($foo ', {\n      line: 0,\n      ch: 11,\n    });\n    expect(suggestions4?.list).toEqual(expectedSuggestions);\n\n    // kind is Argument, step is 1\n    const suggestions5 = await getHintSuggestions('{ hasArgs(string ', {\n      line: 0,\n      ch: 17,\n    });\n    expect(suggestions5?.list).toEqual(expectedSuggestions);\n\n    // kind is Argument, step is 2, and input type isn't GraphQLEnumType or GraphQLBoolean\n    const suggestions6 = await getHintSuggestions('{ hasArgs(string: ', {\n      line: 0,\n      ch: 18,\n    });\n    expect(suggestions6?.list).toEqual(expectedSuggestions);\n\n    const suggestions7 = await getHintSuggestions(\n      '{ hasArgs(object: { string ',\n      { line: 0, ch: 27 },\n    );\n    expect(suggestions7?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides variable completion for argments","suites":["graphql-hint"],"updatePoint":{"line":1095,"column":47},"line":1095,"code":"  it('provides variable completion for argments', async () => {\n    const expectedSuggestions = getExpectedSuggestions([\n      { text: 'string', type: GraphQLString },\n      { text: 'listString', type: new GraphQLList(GraphQLString) },\n    ]);\n    // kind is Argument, step is 2, and input type isn't GraphQLEnumType or GraphQLBoolean\n    const suggestions9 = await getHintSuggestions(\n      'query myQuery($arg: String){ hasArgs(string: ',\n      {\n        line: 0,\n        ch: 42,\n      },\n    );\n    expect(suggestions9?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides variable completion for argments with $","suites":["graphql-hint"],"updatePoint":{"line":1110,"column":54},"line":1110,"code":"  it('provides variable completion for argments with $', async () => {\n    const expectedSuggestions = getExpectedSuggestions([\n      { text: 'string', type: GraphQLString },\n      { text: 'listString', type: new GraphQLList(GraphQLString) },\n    ]);\n    // kind is Argument, step is 2, and input type isn't GraphQLEnumType or GraphQLBoolean\n    const suggestions9 = await getHintSuggestions(\n      'query myQuery($arg: String){ hasArgs(string: $',\n      {\n        line: 0,\n        ch: 42,\n      },\n    );\n    expect(suggestions9?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct field name suggestions for an interface type","suites":["graphql-hint"],"updatePoint":{"line":1125,"column":67},"line":1125,"code":"  it('provides correct field name suggestions for an interface type', async () => {\n    const suggestions = await getHintSuggestions(\n      '{ first { ... on TestInterface { ',\n      {\n        line: 0,\n        ch: 33,\n      },\n    );\n    const list = [\n      {\n        text: 'scalar',\n        type: GraphQLString,\n        isDeprecated: false,\n      },\n      {\n        description: 'The name of the current Object type at runtime.',\n        isDeprecated: false,\n        text: '__typename',\n        type: new GraphQLNonNull(GraphQLString),\n        deprecationReason: undefined,\n      },\n    ];\n\n    const expectedSuggestions = getExpectedSuggestions(list);\n    expect(suggestions?.list).toEqual(expectedSuggestions);\n  });","file":"hint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"attaches a GraphQL lint function with correct mode/lint options","suites":["graphql-lint"],"updatePoint":{"line":46,"column":69},"line":46,"code":"  it('attaches a GraphQL lint function with correct mode/lint options', () => {\n    const editor = createEditorWithLint();\n    expect(editor.getHelpers(editor.getCursor(), 'lint')).not.toHaveLength(0);\n  });","file":"lint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"returns no syntactic/validation errors after parsing kitchen-sink query","suites":["graphql-lint"],"updatePoint":{"line":55,"column":77},"line":55,"code":"  it('returns no syntactic/validation errors after parsing kitchen-sink query', async () => {\n    const errors = await printLintErrors(kitchenSink);\n    expect(errors).toHaveLength(0);\n  });","file":"lint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"returns a validation error for a invalid query","suites":["graphql-lint"],"updatePoint":{"line":60,"column":52},"line":60,"code":"  it('returns a validation error for a invalid query', async () => {\n    const noMutationOperationRule = (context: any) => ({\n      OperationDefinition(node: OperationDefinitionNode) {\n        if (node.operation === 'mutation') {\n          context.reportError(new GraphQLError('I like turtles.', node));\n        }\n        return false;\n      },\n    });\n    const errors = await printLintErrors(kitchenSink, {\n      validationRules: [noMutationOperationRule],\n    });\n    expect(errors.length).toBe(1);\n    expect(errors[0].message).toBe('I like turtles.');\n  });","file":"lint-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"provides correct tokens and styles after parsing","suites":["graphql-mode"],"updatePoint":{"line":17,"column":54},"line":17,"code":"  it('provides correct tokens and styles after parsing', () => {\n    const queryStr = 'query name { }';\n    const tokens: string[] = [];\n    const styles: string[] = [];\n\n    CodeMirror.runMode(queryStr, 'graphql', (token, style) => {\n      if (style && style !== 'ws') {\n        tokens.push(token);\n        styles.push(style);\n      }\n    });\n\n    expect(tokens).toEqual(['query', 'name', '{', '}']);\n    expect(styles).toEqual(['keyword', 'def', 'punctuation', 'punctuation']);\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses Relay-style anonymous FragmentDefinitions","suites":["graphql-mode"],"updatePoint":{"line":33,"column":54},"line":33,"code":"  it('parses Relay-style anonymous FragmentDefinitions', () => {\n    CodeMirror.runMode('fragment on Test { id }', 'graphql', (_token, style) =>\n      expect(style).not.toBe('invalidchar'),\n    );\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses inline fragments with optional syntax correctly","suites":["graphql-mode"],"updatePoint":{"line":39,"column":60},"line":39,"code":"  it('parses inline fragments with optional syntax correctly', () => {\n    CodeMirror.runMode(\n      '{ ... on OptionalType { name } }',\n      'graphql',\n      (_token, style) => expect(style).not.toBe('invalidchar'),\n    );\n\n    CodeMirror.runMode('{ ... { name } }', 'graphql', (_token, style) =>\n      expect(style).not.toBe('invalidchar'),\n    );\n\n    CodeMirror.runMode(\n      '{ ... @optionalDirective { name } }',\n      'graphql',\n      (_token, style) => expect(style).not.toBe('invalidchar'),\n    );\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"returns \"invalidchar\" message when there is no matching token","suites":["graphql-mode"],"updatePoint":{"line":57,"column":67},"line":57,"code":"  it('returns \"invalidchar\" message when there is no matching token', () => {\n    CodeMirror.runMode('qauery name', 'graphql', (token, style) => {\n      if (token.trim()) {\n        expect(style).toBe('invalidchar');\n      }\n    });\n\n    CodeMirror.runMode('query %', 'graphql', (token, style) => {\n      if (token === '%') {\n        expect(style).toBe('invalidchar');\n      }\n    });\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses kitchen-sink query without invalidchar","suites":["graphql-mode"],"updatePoint":{"line":71,"column":51},"line":71,"code":"  it('parses kitchen-sink query without invalidchar', () => {\n    const kitchenSink = readFileSync(join(__dirname, '/kitchen-sink.graphql'), {\n      encoding: 'utf8',\n    });\n\n    CodeMirror.runMode(kitchenSink, 'graphql', (_token, style) => {\n      expect(style).not.toBe('invalidchar');\n    });\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses schema-kitchen-sink query without invalidchar","suites":["graphql-mode"],"updatePoint":{"line":81,"column":58},"line":81,"code":"  it('parses schema-kitchen-sink query without invalidchar', () => {\n    const schemaKitchenSink = readFileSync(\n      join(__dirname, '/schema-kitchen-sink.graphql'),\n      { encoding: 'utf8' },\n    );\n\n    CodeMirror.runMode(schemaKitchenSink, 'graphql', (_token, style) => {\n      expect(style).not.toBe('invalidchar');\n    });\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"parses anonymous operations without invalidchar","suites":["graphql-mode"],"updatePoint":{"line":92,"column":53},"line":92,"code":"  it('parses anonymous operations without invalidchar', () => {\n    CodeMirror.runMode('{ id }', 'graphql', (_token, style) => {\n      expect(style).not.toBe('invalidchar');\n    });\n\n    CodeMirror.runMode(\n      `\n      mutation {\n        setString(value: \"newString\")\n      }\n    `,\n      'graphql',\n      (_token, style) => {\n        expect(style).not.toBe('invalidchar');\n      },\n    );\n\n    CodeMirror.runMode(\n      `\n      subscription {\n        subscribeToTest(id: \"anId\") {\n          id\n        }\n      }\n    `,\n      'graphql',\n      (_token, style) => {\n        expect(style).not.toBe('invalidchar');\n      },\n    );\n  });","file":"mode-test.ts","skipped":false,"dir":"packages/codemirror-graphql/src/__tests__"},{"name":"Renders without error","suites":["GraphiQL On Initialization"],"updatePoint":{"line":35,"column":27},"line":35,"code":"  it('Renders without error', () => {\n    const containers = ['#graphiql', '.graphiql-container', '.topBarWrap', '.editorWrap', '.queryWrap', '.resultWrap', '.variable-editor'];\n    cy.visit(`/?query=${testQuery}`);\n    containers.forEach(cSelector => cy.get(cSelector).should('be.visible'));\n  });","file":"integration/init.spec.js","skipped":false,"dir":"packages/graphiql-2-rfc-context/cypress"},{"name":"Executes a GraphQL query over HTTP that has the expected result","suites":["GraphiQL On Initialization"],"updatePoint":{"line":40,"column":69},"line":40,"code":"  it('Executes a GraphQL query over HTTP that has the expected result', () => {\n    cy.assertQueryResult({\n      query: testQuery\n    }, mockSuccess);\n  });","file":"integration/init.spec.js","skipped":false,"dir":"packages/graphiql-2-rfc-context/cypress"},{"name":"Toggles doc pane on","suites":["GraphiQL On Initialization"],"updatePoint":{"line":45,"column":25},"line":45,"code":"  it('Toggles doc pane on', () => {\n    cy.get('.docExplorerShow').click();\n    cy.get('.doc-explorer').should('be.visible');\n  });","file":"integration/init.spec.js","skipped":false,"dir":"packages/graphiql-2-rfc-context/cypress"},{"name":"Toggles doc pane back off","suites":["GraphiQL On Initialization"],"updatePoint":{"line":49,"column":31},"line":49,"code":"  it('Toggles doc pane back off', () => {\n    // there are two components with .docExplorerHide, one in query history\n    cy.get('.docExplorerWrap button.docExplorerHide').click();\n    cy.get('.doc-explorer').should('not.exist');\n  });","file":"integration/init.spec.js","skipped":false,"dir":"packages/graphiql-2-rfc-context/cypress"},{"name":"Regular prettification","suites":["GraphiQL Prettify"],"updatePoint":{"line":22,"column":28},"line":22,"code":"  it('Regular prettification', () => {\n    cy.visitWithOp({\n      query: uglyQuery,\n      variables: uglyVariables\n    });\n    cy.clickPrettify();\n    cy.window().then(w => {\n      cy.expect(w.g.getQueryEditor().getValue()).to.equal(prettifiedQuery);\n      cy.expect(w.g.getVariableEditor().getValue()).to.equal(prettifiedVariables);\n    });\n  });","file":"integration/prettify.spec.js","skipped":false,"dir":"packages/graphiql-2-rfc-context/cypress"},{"name":"Noop prettification","suites":["GraphiQL Prettify"],"updatePoint":{"line":33,"column":25},"line":33,"code":"  it('Noop prettification', () => {\n    cy.visitWithOp({\n      query: prettifiedQuery,\n      variables: prettifiedVariables\n    });\n    cy.clickPrettify();\n    cy.window().then(w => {\n      cy.expect(w.g.getQueryEditor().getValue()).to.equal(prettifiedQuery);\n      cy.expect(w.g.getVariableEditor().getValue()).to.equal(prettifiedVariables);\n    });\n  });","file":"integration/prettify.spec.js","skipped":false,"dir":"packages/graphiql-2-rfc-context/cypress"},{"name":"No crash on bad query","suites":["GraphiQL Prettify"],"updatePoint":{"line":44,"column":27},"line":44,"code":"  it('No crash on bad query', () => {\n    cy.visitWithOp({\n      query: brokenQuery,\n      variables: uglyVariables\n    });\n    cy.clickPrettify();\n    cy.window().then(w => {\n      cy.expect(w.g.getQueryEditor().getValue()).to.equal(brokenQuery);\n      cy.expect(w.g.getVariableEditor().getValue()).to.equal(prettifiedVariables);\n    });\n  });","file":"integration/prettify.spec.js","skipped":false,"dir":"packages/graphiql-2-rfc-context/cypress"},{"name":"No crash on bad variables","suites":["GraphiQL Prettify"],"updatePoint":{"line":55,"column":31},"line":55,"code":"  it('No crash on bad variables', () => {\n    cy.visitWithOp({\n      query: uglyQuery,\n      variables: brokenVariables\n    });\n    cy.clickPrettify();\n    cy.window().then(w => {\n      cy.expect(w.g.getQueryEditor().getValue()).to.equal(prettifiedQuery);\n      cy.expect(w.g.getVariableEditor().getValue()).to.equal(brokenVariables);\n    });\n  });","file":"integration/prettify.spec.js","skipped":false,"dir":"packages/graphiql-2-rfc-context/cypress"},{"name":"Toggles doc pane on","suites":["GraphiQL DocExplorer - button"],"updatePoint":{"line":5,"column":25},"line":5,"code":"  it('Toggles doc pane on', () => {\n    cy.get('.docExplorerShow').click();\n    cy.get('.doc-explorer').should('be.visible');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Toggles doc pane back off","suites":["GraphiQL DocExplorer - button"],"updatePoint":{"line":9,"column":31},"line":9,"code":"  it('Toggles doc pane back off', () => {\n    // there are two components with .docExplorerHide, one in query history\n    cy.get('.docExplorerWrap button.docExplorerHide').click();\n    cy.get('.doc-explorer').should('not.exist');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Searches docs for values","suites":["GraphiQL DocExplorer - search"],"updatePoint":{"line":20,"column":30},"line":20,"code":"  it('Searches docs for values', () => {\n    cy.get('label.search-box input').type('test');\n    cy.get('.doc-category-item').should('have.length', 7);\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Navigates to a docs entry on selecting a search result","suites":["GraphiQL DocExplorer - search"],"updatePoint":{"line":24,"column":60},"line":24,"code":"  it('Navigates to a docs entry on selecting a search result', () => {\n    cy.get('.doc-search-items>.doc-category-item').eq(4).children().click();\n    cy.get('.doc-explorer-title').should('have.text', 'TestInput');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Allows searching fields within a type","suites":["GraphiQL DocExplorer - search"],"updatePoint":{"line":28,"column":43},"line":28,"code":"  it('Allows searching fields within a type', () => {\n    cy.get('label.search-box input').type('list');\n    cy.get('.doc-category-item').should('have.length', 8);\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Shows \"other results\" section","suites":["GraphiQL DocExplorer - search"],"updatePoint":{"line":32,"column":35},"line":32,"code":"  it('Shows \"other results\" section', () => {\n    cy.get('.doc-category-title').should('have.text', 'other results');\n    cy.get('.doc-category .field-name').should('have.text', 'hasArgs');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Navigates back to search results when existing","suites":["GraphiQL DocExplorer - search"],"updatePoint":{"line":36,"column":52},"line":36,"code":"  it('Navigates back to search results when existing', () => {\n    cy.get('.doc-explorer-back').click();\n    cy.get('.doc-explorer-title').should('have.text', 'Documentation Explorer');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Retains the parent search value","suites":["GraphiQL DocExplorer - search"],"updatePoint":{"line":40,"column":37},"line":40,"code":"  it('Retains the parent search value', () => {\n    cy.get('label.search-box input').should('have.value', 'test');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Type fields link to their own docs entry","suites":["GraphiQL DocExplorer - search"],"updatePoint":{"line":43,"column":46},"line":43,"code":"  it('Type fields link to their own docs entry', () => {\n    cy.get('.doc-search-items>.doc-category-item').last().find('a:nth-child(2)').click();\n    cy.get('.doc-explorer-title').should('have.text', 'isTest');\n    cy.get('.doc-type-description').should('have.text', 'Is this a test schema? Sure it is.\\n');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Allows clearing the search","suites":["GraphiQL DocExplorer - search"],"updatePoint":{"line":48,"column":32},"line":48,"code":"  it('Allows clearing the search', () => {\n    cy.visit(`/`);\n    cy.get('.docExplorerShow').click();\n    cy.get('label.search-box input').type('test');\n    cy.get('.search-box-clear').click();\n    cy.get('.doc-category-title').should('have.text', 'root types');\n    cy.get('label.search-box input').should('have.value', '');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"should show deprecated fields category title","suites":["GraphQL DocExplorer - deprecated fields"],"updatePoint":{"line":62,"column":50},"line":62,"code":"  it('should show deprecated fields category title', () => {\n    cy.get('.doc-category>.doc-category-item').first().find('a').click();\n    cy.get('.doc-category>.doc-category-title').last().should('have.text', 'deprecated fields');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"should show deprecated fields details when expanding","suites":["GraphQL DocExplorer - deprecated fields"],"updatePoint":{"line":66,"column":58},"line":66,"code":"  it('should show deprecated fields details when expanding', () => {\n    cy.get('.show-btn').click();\n    const deprecated = cy.get('.doc-category').last();\n    deprecated.get('.field-short-description').should('contain.text', 'This field is an example of a deprecated field');\n    deprecated.get('.doc-deprecation').should('contain.html', '<p>No longer in use, try <code>test</code> instead.</p>');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"should show deprecated arguments category title","suites":["GraphQL DocExplorer - deprecated fields"],"updatePoint":{"line":72,"column":53},"line":72,"code":"  it('should show deprecated arguments category title', () => {\n    cy.get('#doc-fields .doc-category-item a.field-name').last().click();\n    cy.get('#doc-deprecated-args>.doc-category-title').last().should('have.text', 'deprecated arguments');\n    cy.get('.show-btn').click();\n    cy.get('.doc-deprecation').should('have.text', 'deprecated argument\\n');\n  });","file":"integration/docs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Expects a subscription to resolve","suites":["IncrementalDelivery support via fetcher","When operation contains @stream"],"updatePoint":{"line":15,"column":41},"line":15,"code":"    it('Expects a subscription to resolve', () => {\n      cy.assertQueryResult({\n        query: testSubscription,\n        variables: {\n          delay: 0\n        }\n      }, mockSubscriptionSuccess, 1200);\n    });","file":"integration/graphqlWs.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Expects slower streams to resolve in several increments, and the payloads to patch properly","suites":["When operation contains @stream"],"updatePoint":{"line":45,"column":99},"line":45,"code":"    it('Expects slower streams to resolve in several increments, and the payloads to patch properly', () => {\n      const delay = 100;\n      const timeout = mockStreamSuccess.data.streamable.length * (delay * 1.5);\n      cy.visit(`/?query=${testStreamQuery}`);\n      cy.assertQueryResult({\n        query: testStreamQuery,\n        variables: {\n          delay\n        }\n      }, mockStreamSuccess, timeout);\n    });","file":"integration/incrementalDelivery.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Expects a quick stream to resolve in a single increment","suites":["When operation contains @stream"],"updatePoint":{"line":56,"column":63},"line":56,"code":"    it('Expects a quick stream to resolve in a single increment', () => {\n      cy.visit(`/?query=${testStreamQuery}`);\n      cy.assertQueryResult({\n        query: testStreamQuery,\n        variables: {\n          delay: 0\n        }\n      }, mockStreamSuccess);\n    });","file":"integration/incrementalDelivery.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Excepts to see a slow response but path properly","suites":["When operating with @defer"],"updatePoint":{"line":67,"column":56},"line":67,"code":"    it('Excepts to see a slow response but path properly', () => {\n      const delay = 1000;\n      const timeout = delay * 1.5;\n      const testQuery =\n      /* GraphQL */\n      `\n        query DeferQuery($delay: Int) {\n          deferrable {\n            normalString\n            ... @defer {\n              deferredString(delay: $delay)\n            }\n          }\n        }\n      `;\n      cy.visit(`/?query=${testQuery}`);\n      cy.assertQueryResult({\n        query: testQuery,\n        variables: {\n          delay\n        }\n      }, {\n        data: {\n          deferrable: {\n            normalString: 'Nice',\n            deferredString: 'Oops, this took 1 seconds longer than I thought it would!'\n          }\n        },\n        hasNext: false\n      }, timeout);\n    });","file":"integration/incrementalDelivery.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Expects to merge types when members arrive at different times","suites":["When operating with @defer"],"updatePoint":{"line":98,"column":69},"line":98,"code":"    it('Expects to merge types when members arrive at different times', () => {\n      /*\n      This tests that;\n      1. user ({name}) => { name }\n      2. user ({age}) => { name, age }\n      3. user.friends.0 ({name}) => { name, age, friends: [{name}] } <- can sometimes happen before 4, due the the promise race\n      4. user.friends.0 ({age}) => { name, age, friends: [{name, age}] }\n       This shows us that we can deep merge defers, deep merge streams, and also deep merge defers inside streams\n       */\n      const delay = 1000;\n      const timeout = 4\n      /* friends */\n      * (delay * 1.5);\n      const testQuery =\n      /* GraphQL */\n      `\n        query DeferQuery($delay: Int) {\n          person {\n            name\n            ... @defer {\n              age(delay: $delay)\n            }\n            friends @stream(initialCount: 0) {\n              ... @defer {\n                name\n              }\n              ... @defer {\n                age(delay: $delay)\n              }\n            }\n          }\n        }\n      `;\n      cy.visit(`/?query=${testQuery}`);\n      cy.assertQueryResult({\n        query: testQuery,\n        variables: {\n          delay\n        }\n      }, {\n        data: {\n          person: {\n            name: 'Mark',\n            friends: [{\n              name: 'James',\n              age: 1000\n            }, {\n              name: 'Mary',\n              age: 1000\n            }, {\n              name: 'John',\n              age: 1000\n            }, {\n              name: 'Patrica',\n              age: 1000\n            }],\n            age: 1000\n          }\n        },\n        hasNext: false\n      }, timeout);\n    });","file":"integration/incrementalDelivery.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Renders without error","suites":["GraphiQL On Initialization"],"updatePoint":{"line":28,"column":27},"line":28,"code":"  it('Renders without error', () => {\n    const containers = ['#graphiql', '.graphiql-container', '.topBarWrap', '.editorWrap', '.queryWrap', '.resultWrap', '.variable-editor'];\n    cy.visit(`/?query=${testQuery}`);\n    containers.forEach(cSelector => cy.get(cSelector).should('be.visible'));\n  });","file":"integration/init.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Executes a GraphQL query over HTTP that has the expected result","suites":["GraphiQL On Initialization"],"updatePoint":{"line":33,"column":69},"line":33,"code":"  it('Executes a GraphQL query over HTTP that has the expected result', () => {\n    cy.assertQueryResult({\n      query: testQuery\n    }, mockSuccess);\n  });","file":"integration/init.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Shows the expected error when the schema is invalid","suites":["GraphiQL On Initialization"],"updatePoint":{"line":38,"column":57},"line":38,"code":"  it('Shows the expected error when the schema is invalid', () => {\n    cy.visit(`/?bad=true`);\n    cy.wait(200);\n    cy.window().then(w => {\n      // @ts-ignore\n      const value = w.g.resultComponent.viewer.getValue(); // this message changes between graphql 15 & 16\n\n      expect(value).to.contain('Names must');\n    });\n  });","file":"integration/init.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Regular prettification","suites":[],"updatePoint":{"line":21,"column":28},"line":21,"code":"  it('Regular prettification', () => {\n    cy.visitWithOp({\n      query: uglyQuery,\n      variablesString: uglyVariables\n    });\n    cy.clickPrettify();\n    cy.window().then(w => {\n      cy.assertHasValues({\n        query: prettifiedQuery,\n        variablesString: prettifiedVariables\n      });\n    });\n  });","file":"integration/prettify.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"Noop prettification","suites":[],"updatePoint":{"line":34,"column":25},"line":34,"code":"  it('Noop prettification', () => {\n    cy.visitWithOp({\n      query: prettifiedQuery,\n      variablesString: prettifiedVariables\n    });\n    cy.clickPrettify();\n    cy.window().then(w => {\n      cy.assertHasValues({\n        query: prettifiedQuery,\n        variablesString: prettifiedVariables\n      });\n    });\n  });","file":"integration/prettify.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"No crash on bad query","suites":[],"updatePoint":{"line":47,"column":27},"line":47,"code":"  it('No crash on bad query', () => {\n    cy.visitWithOp({\n      query: brokenQuery,\n      variablesString: uglyVariables\n    });\n    cy.clickPrettify();\n    cy.window().then(w => {\n      cy.assertHasValues({\n        query: brokenQuery,\n        variablesString: prettifiedVariables\n      });\n    });\n  });","file":"integration/prettify.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"No crash on bad variablesString","suites":[],"updatePoint":{"line":60,"column":37},"line":60,"code":"  it('No crash on bad variablesString', () => {\n    cy.visitWithOp({\n      query: uglyQuery,\n      variablesString: brokenVariables\n    });\n    cy.clickPrettify();\n    cy.window().then(w => {\n      cy.assertHasValues({\n        query: prettifiedQuery,\n        variablesString: brokenVariables\n      });\n    });\n  });","file":"integration/prettify.spec.ts","skipped":false,"dir":"packages/graphiql/cypress"},{"name":"is passed information on error of string type","suites":["process.stderr.write"],"updatePoint":{"line":16,"column":51},"line":16,"code":"  it('is passed information on error of string type', () => {\n    const argv = {\n      schemaPath: '...',\n      text: 'foo',\n    };\n    const mockStdErrWrite = jest\n      .spyOn(process.stderr, 'write')\n      .mockImplementation();\n    jest.spyOn(process, 'exit').mockImplementation();\n    const undefinedWithNewLine = /^undefined\\n$/;\n\n    main('autocomplete', argv);\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(expect.any(String));\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(\n      expect.not.stringMatching(undefinedWithNewLine),\n    );\n\n    main('outline', argv);\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(expect.any(String));\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(\n      expect.not.stringMatching(undefinedWithNewLine),\n    );\n\n    main('validate', argv);\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(expect.any(String));\n    expect(mockStdErrWrite).toHaveBeenLastCalledWith(\n      expect.not.stringMatching(undefinedWithNewLine),\n    );\n  });","file":"client-test.ts","skipped":false,"dir":"packages/graphql-language-service-cli/src/__tests__"},{"name":"runs","suites":["blinking light demo"],"updatePoint":{"line":10,"column":10},"line":10,"code":"  it('runs', () => {\n    // This is just a place holder for now as all the existing tests have moved\n    // down into the respective package directories. In the future, this will be\n    // the home of the integration tests.\n    expect(true).toEqual(true);\n  });","file":"index-test.ts","skipped":false,"dir":"packages/graphql-language-service-cli/src/__tests__"},{"name":"provides correct sortText response","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":124,"column":42},"line":124,"code":"    it('provides correct sortText response', () => {\n      const result = getAutocompleteSuggestions(\n        schema,\n        `{ h`,\n        new Position(0, 3),\n      ).map(({ sortText, label, detail }) => ({ sortText, label, detail }));\n      expect(result).toEqual([\n        {\n          sortText: '0hero',\n          label: 'hero',\n          detail: 'Character',\n        },\n\n        {\n          sortText: '1human',\n          label: 'human',\n          detail: 'Human',\n        },\n\n        {\n          sortText: '6__schema',\n          label: '__schema',\n          detail: '__Schema!',\n        },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct initial keywords","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":151,"column":41},"line":151,"code":"    it('provides correct initial keywords', () => {\n      expect(testSuggestions('', new Position(0, 0))).toEqual([\n        { label: '{' },\n        { label: 'fragment' },\n        { label: 'mutation' },\n        { label: 'query' },\n        { label: 'subscription' },\n      ]);\n\n      expect(testSuggestions('q', new Position(0, 1))).toEqual([\n        { label: '{' },\n        { label: 'query' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct suggestions at where the cursor is","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":166,"column":59},"line":166,"code":"    it('provides correct suggestions at where the cursor is', () => {\n      // Below should provide initial keywords\n      expect(testSuggestions(' {}', new Position(0, 0))).toEqual([\n        { label: '{' },\n        { label: 'fragment' },\n        { label: 'mutation' },\n        { label: 'query' },\n        { label: 'subscription' },\n      ]);\n\n      // Below should provide root field names\n      expect(testSuggestions(' {}', new Position(0, 2))).toEqual([\n        { label: '__typename', detail: 'String!' },\n        expectedResults.droid,\n        expectedResults.hero,\n        expectedResults.human,\n        expectedResults.inputTypeTest,\n      ]);\n\n      // Test for query text with empty lines\n      expect(\n        testSuggestions(\n          `\n  query name {\n    ...testFragment\n  }\n      `,\n          new Position(2, 0),\n        ),\n      ).toEqual([\n        { label: '__typename', detail: 'String!' },\n        expectedResults.droid,\n        expectedResults.hero,\n        expectedResults.human,\n        expectedResults.inputTypeTest,\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct field name suggestions","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":204,"column":47},"line":204,"code":"    it('provides correct field name suggestions', () => {\n      const result = testSuggestions('{ ', new Position(0, 2));\n      expect(result).toEqual([\n        { label: '__typename', detail: 'String!' },\n        expectedResults.droid,\n        expectedResults.hero,\n        expectedResults.human,\n        expectedResults.inputTypeTest,\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct field name suggestions after filtered","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":215,"column":62},"line":215,"code":"    it('provides correct field name suggestions after filtered', () => {\n      const result = testSuggestions('{ h ', new Position(0, 3));\n      expect(result).toEqual([expectedResults.hero, expectedResults.human]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct field name suggestions with alias","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":220,"column":58},"line":220,"code":"    it('provides correct field name suggestions with alias', () => {\n      const result = testSuggestions(\n        '{ alias: human(id: \"1\") { ',\n        new Position(0, 26),\n      );\n\n      expect(result).toEqual([\n        { label: '__typename', detail: 'String!' },\n        expectedResults.appearsIn,\n        expectedResults.friends,\n        { label: 'id', detail: 'String!' },\n        { label: 'name', detail: 'String' },\n        { label: 'secretBackstory', detail: 'String' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct field suggestions for fragments","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":236,"column":56},"line":236,"code":"    it('provides correct field suggestions for fragments', () => {\n      const result = testSuggestions(\n        'fragment test on Human { ',\n        new Position(0, 25),\n      );\n\n      expect(result).toEqual([\n        { label: '__typename', detail: 'String!' },\n        expectedResults.appearsIn,\n        expectedResults.friends,\n        { label: 'id', detail: 'String!' },\n        { label: 'name', detail: 'String' },\n        { label: 'secretBackstory', detail: 'String' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct argument suggestions","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":252,"column":45},"line":252,"code":"    it('provides correct argument suggestions', () => {\n      const result = testSuggestions('{ human (', new Position(0, 9));\n      expect(result).toEqual([\n        {\n          label: 'id',\n          detail: 'String!',\n          insertText: 'id: ',\n          command: suggestionCommand,\n        },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct argument suggestions when using aliases","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":264,"column":64},"line":264,"code":"    it('provides correct argument suggestions when using aliases', () => {\n      const result = testSuggestions(\n        '{ aliasTest: human( ',\n        new Position(0, 20),\n      );\n      expect(result).toEqual([\n        {\n          label: 'id',\n          detail: 'String!',\n          command: suggestionCommand,\n          insertText: 'id: ',\n        },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct input type suggestions","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":279,"column":47},"line":279,"code":"    it('provides correct input type suggestions', () => {\n      const result = testSuggestions(\n        'query($exampleVariable: ) { ',\n        new Position(0, 24),\n      );\n      expect(result).toEqual([\n        { label: '__DirectiveLocation' },\n        { label: '__TypeKind' },\n        { label: 'Boolean' },\n        { label: 'Episode' },\n        { label: 'InputType' },\n        { label: 'Int' },\n        { label: 'String' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides filtered input type suggestions","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":295,"column":48},"line":295,"code":"    it('provides filtered input type suggestions', () => {\n      const result = testSuggestions(\n        'query($exampleVariable: In) { ',\n        new Position(0, 26),\n      );\n      expect(result).toEqual([\n        { label: '__DirectiveLocation' },\n        { label: '__TypeKind' },\n        { label: 'InputType' },\n        { label: 'Int' },\n        { label: 'String' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct typeCondition suggestions","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":309,"column":50},"line":309,"code":"    it('provides correct typeCondition suggestions', () => {\n      const suggestionsOnQuery = testSuggestions(\n        '{ ... on ',\n        new Position(0, 9),\n      );\n      expect(\n        suggestionsOnQuery.filter(({ label }) => !label.startsWith('__')),\n      ).toEqual([{ label: 'Query' }]);\n\n      const suggestionsOnCompositeType = testSuggestions(\n        '{ hero(episode: JEDI) { ... on } }',\n        new Position(0, 31),\n      );\n\n      expect(suggestionsOnCompositeType).toEqual([\n        { label: 'Character' },\n        { label: 'Droid' },\n        { label: 'Human' },\n      ]);\n\n      expect(\n        testSuggestions(\n          'fragment Foo on Character { ... on }',\n          new Position(0, 35),\n        ),\n      ).toEqual([\n        { label: 'Character' },\n        { label: 'Droid' },\n        { label: 'Human' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct typeCondition suggestions on fragment","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":341,"column":62},"line":341,"code":"    it('provides correct typeCondition suggestions on fragment', () => {\n      const result = testSuggestions('fragment Foo on {}', new Position(0, 16));\n      expect(result.filter(({ label }) => !label.startsWith('__'))).toEqual([\n        { label: 'AnotherInterface' },\n        { label: 'Character' },\n        { label: 'Droid' },\n        { label: 'Human' },\n        { label: 'Query' },\n        { label: 'TestInterface' },\n        { label: 'TestType' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct enum suggestions","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":354,"column":41},"line":354,"code":"    it('provides correct enum suggestions', () => {\n      const result = testSuggestions('{ hero(episode: ', new Position(0, 16));\n      expect(result).toEqual([\n        { label: 'EMPIRE', detail: 'Episode' },\n        { label: 'JEDI', detail: 'Episode' },\n        { label: 'NEWHOPE', detail: 'Episode' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct suggestions for declared variables upon typing $","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":363,"column":73},"line":363,"code":"    it('provides correct suggestions for declared variables upon typing $', () => {\n      const result = testSuggestions(\n        'query($id: String, $ep: Episode!){ hero(episode: $ }',\n        new Position(0, 51),\n      );\n      expect(result).toEqual([\n        { label: 'ep', insertText: '$ep', detail: 'Episode' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct suggestions for variables based on argument context","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":373,"column":76},"line":373,"code":"    it('provides correct suggestions for variables based on argument context', () => {\n      const result = testSuggestions(\n        'query($id: String!, $episode: Episode!){ hero(episode: ',\n        new Position(0, 55),\n      );\n      expect(result).toEqual([\n        { label: 'EMPIRE', detail: 'Episode' },\n        { label: 'episode', detail: 'Episode', insertText: '$episode' },\n        { label: 'JEDI', detail: 'Episode' },\n        { label: 'NEWHOPE', detail: 'Episode' },\n        // no $id here, it's not compatible :P\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides fragment name suggestion","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":387,"column":41},"line":387,"code":"    it('provides fragment name suggestion', () => {\n      const fragmentDef = 'fragment Foo on Human { id }';\n\n      // Test on concrete types\n      expect(\n        testSuggestions(\n          `${fragmentDef} query { human(id: \"1\") { ...`,\n          new Position(0, 57),\n        ),\n      ).toEqual([{ label: 'Foo', detail: 'Human' }]);\n      expect(\n        testSuggestions(\n          `query { human(id: \"1\") { ... }} ${fragmentDef}`,\n          new Position(0, 28),\n        ),\n      ).toEqual([{ label: 'Foo', detail: 'Human' }]);\n\n      // Test on abstract type\n      expect(\n        testSuggestions(\n          `${fragmentDef} query { hero(episode: JEDI) { ...`,\n          new Position(0, 62),\n        ),\n      ).toEqual([{ label: 'Foo', detail: 'Human' }]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct fragment name suggestions for external fragments","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":413,"column":73},"line":413,"code":"    it('provides correct fragment name suggestions for external fragments', () => {\n      const externalFragments = parse(`\n        fragment CharacterDetails on Human {\n          name\n        }\n        fragment CharacterDetails2 on Human {\n          name\n        }\n      `).definitions as FragmentDefinitionNode[];\n\n      const result = testSuggestions(\n        'query { human(id: \"1\") { ... }}',\n        new Position(0, 28),\n        externalFragments,\n      );\n\n      expect(result).toEqual([\n        { label: 'CharacterDetails', detail: 'Human' },\n        { label: 'CharacterDetails2', detail: 'Human' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct directive suggestions","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":445,"column":46},"line":445,"code":"    it('provides correct directive suggestions', () => {\n      expect(testSuggestions('{ test @ }', new Position(0, 8))).toEqual(\n        expectedDirectiveSuggestions,\n      );\n\n      expect(testSuggestions('{ test @', new Position(0, 8))).toEqual(\n        expectedDirectiveSuggestions,\n      );\n\n      expect(\n        testSuggestions('{ aliasTest: test @ }', new Position(0, 19)),\n      ).toEqual(expectedDirectiveSuggestions);\n\n      expect(testSuggestions('query @', new Position(0, 7))).toEqual([]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct testInput suggestions","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":461,"column":46},"line":461,"code":"    it('provides correct testInput suggestions', () => {\n      expect(\n        testSuggestions('{ inputTypeTest(args: {', new Position(0, 23)),\n      ).toEqual([\n        { label: 'key', detail: 'String!' },\n        { label: 'value', detail: 'Int' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct field name suggestion inside inline fragment","suites":["getAutocompleteSuggestions","with Operation types"],"updatePoint":{"line":470,"column":69},"line":470,"code":"    it('provides correct field name suggestion inside inline fragment', () => {\n      expect(\n        testSuggestions(\n          'fragment Foo on Character { ... on Human { }}',\n          new Position(0, 42),\n        ),\n      ).toEqual([\n        { label: '__typename', detail: 'String!' },\n        expectedResults.appearsIn,\n        expectedResults.friends,\n        { label: 'id', detail: 'String!' },\n        { label: 'name', detail: 'String' },\n        { label: 'secretBackstory', detail: 'String' },\n      ]);\n\n      // Typeless inline fragment assumes the type automatically\n      expect(\n        testSuggestions('fragment Foo on Droid { ... { ', new Position(0, 30)),\n      ).toEqual([\n        { label: '__typename', detail: 'String!' },\n        expectedResults.appearsIn,\n        expectedResults.friends,\n        { label: 'id', detail: 'String!' },\n        { label: 'instructions', detail: '[String]!' },\n        { label: 'name', detail: 'String' },\n        { label: 'primaryFunction', detail: 'String' },\n        { label: 'secretBackstory', detail: 'String' },\n      ]);\n    });","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct directive suggestions on definitions","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":501,"column":61},"line":501,"code":"    it('provides correct directive suggestions on definitions', () =>\n      expect(testSuggestions('type Type @', new Position(0, 11))).toEqual([\n        { label: 'onAllDefs' },\n      ]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct suggestions on object fields","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":505,"column":53},"line":505,"code":"    it('provides correct suggestions on object fields', () =>\n      expect(\n        testSuggestions(`type Type {\\n  aField: s`, new Position(0, 23)),\n      ).toEqual([{ label: 'Episode' }, { label: 'String' }]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct suggestions on input object fields","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":509,"column":59},"line":509,"code":"    it('provides correct suggestions on input object fields', () =>\n      expect(\n        testSuggestions(`input Type {\\n  aField: s`, new Position(0, 23)),\n      ).toEqual([{ label: 'Episode' }, { label: 'String' }]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct directive suggestions on args definitions","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":513,"column":66},"line":513,"code":"    it('provides correct directive suggestions on args definitions', () =>\n      expect(\n        testSuggestions('type Type { field(arg: String @', new Position(0, 31)),\n      ).toEqual([\n        { label: 'deprecated' },\n        { label: 'onAllDefs' },\n        { label: 'onArg' },\n      ]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct interface suggestions when extending with an interface","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":522,"column":79},"line":522,"code":"    it('provides correct interface suggestions when extending with an interface', () =>\n      expect(\n        testSuggestions('type Type implements ', new Position(0, 20)),\n      ).toEqual([\n        { label: 'AnotherInterface' },\n        { label: 'Character' },\n        { label: 'TestInterface' },\n      ]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct interface suggestions when extending a type with multiple interfaces","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":531,"column":93},"line":531,"code":"    it('provides correct interface suggestions when extending a type with multiple interfaces', () =>\n      expect(\n        testSuggestions(\n          'type Type implements TestInterface & ',\n          new Position(0, 37),\n        ),\n      ).toEqual([{ label: 'AnotherInterface' }, { label: 'Character' }]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct interface suggestions when extending an interface with multiple interfaces","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":538,"column":99},"line":538,"code":"    it('provides correct interface suggestions when extending an interface with multiple interfaces', () =>\n      expect(\n        testSuggestions(\n          'interface IExample implements TestInterface & ',\n          new Position(0, 46),\n        ),\n      ).toEqual([{ label: 'AnotherInterface' }, { label: 'Character' }]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides filtered interface suggestions when extending an interface with multiple interfaces","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":545,"column":100},"line":545,"code":"    it('provides filtered interface suggestions when extending an interface with multiple interfaces', () =>\n      expect(\n        testSuggestions(\n          'interface IExample implements TestInterface & Inter',\n          new Position(0, 48),\n        ),\n      ).toEqual([{ label: 'AnotherInterface' }]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides no interface suggestions when using implements and there are no & or { characters present","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":552,"column":106},"line":552,"code":"    it('provides no interface suggestions when using implements and there are no & or { characters present', () =>\n      expect(\n        testSuggestions(\n          'interface IExample implements TestInterface ',\n          new Position(0, 44),\n        ),\n      ).toEqual([]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides fragment completion after a list of interfaces to extend","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":559,"column":73},"line":559,"code":"    it('provides fragment completion after a list of interfaces to extend', () =>\n      expect(\n        testSuggestions(\n          'interface IExample implements TestInterface & AnotherInterface @f',\n          new Position(0, 65),\n        ),\n      ).toEqual([{ label: 'onAllDefs' }]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides correct interface suggestions when extending an interface with an inline interface","suites":["getAutocompleteSuggestions","with SDL types"],"updatePoint":{"line":566,"column":99},"line":566,"code":"    it('provides correct interface suggestions when extending an interface with an inline interface', () =>\n      expect(\n        testSuggestions(\n          'interface A { id: String }\\ninterface MyInterface implements ',\n          new Position(1, 33),\n        ),\n      ).toEqual([\n        { label: 'A' },\n        { label: 'AnotherInterface' },\n        { label: 'Character' },\n        { label: 'TestInterface' },\n      ]));","file":"getAutocompleteSuggestions-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns correct Position","suites":["getDefinition","getDefinitionQueryResultForNamedType"],"updatePoint":{"line":18,"column":32},"line":18,"code":"    it('returns correct Position', async () => {\n      const query = `type Query {\n        hero(episode: Episode): Character\n      }\n\n      type Episode {\n        id: ID!\n      }\n      `;\n      const parsedQuery = parse(query);\n      // @ts-ignore\n      const namedTypeDefinition = parsedQuery.definitions[0].fields[0].type;\n\n      const result = await getDefinitionQueryResultForNamedType(\n        query,\n        {\n          ...namedTypeDefinition,\n        },\n\n        [\n          {\n            // @ts-ignore\n            file: 'someFile',\n            content: query,\n            definition: {\n              ...namedTypeDefinition,\n            },\n          },\n        ],\n      );\n      expect(result.definitions.length).toEqual(1);\n      expect(result.definitions[0].position.line).toEqual(1);\n      expect(result.definitions[0].position.character).toEqual(32);\n    });","file":"getDefinition-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns correct Position","suites":["getDefinition","getDefinitionQueryResultForNamedType for scalar"],"updatePoint":{"line":55,"column":32},"line":55,"code":"    it('returns correct Position', async () => {\n      const query = `type Query {\n        hero(episode: Episode): Json\n      }\n\n      type Episode {\n        id: ID!\n      }\n\n      scalar Json\n      `;\n      const parsedQuery = parse(query);\n      // @ts-ignore\n      const namedTypeDefinition = parsedQuery.definitions[0].fields[0].type;\n\n      const result = await getDefinitionQueryResultForNamedType(\n        query,\n        {\n          ...namedTypeDefinition,\n        },\n\n        [\n          {\n            // @ts-ignore\n            file: 'someFile',\n            content: query,\n            definition: {\n              ...namedTypeDefinition,\n            },\n          },\n        ],\n      );\n      expect(result.definitions.length).toEqual(1);\n      expect(result.definitions[0].position.line).toEqual(1);\n      expect(result.definitions[0].position.character).toEqual(32);\n    });","file":"getDefinition-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns correct Position","suites":["getDefinition","getDefinitionQueryResultForFragmentSpread"],"updatePoint":{"line":94,"column":32},"line":94,"code":"    it('returns correct Position', async () => {\n      const query = `query A {\n        ...Duck\n      }`;\n      const fragment = `# Fragment goes here\n      fragment Duck on Duck {\n        cuack\n      }`;\n      // @ts-ignore\n      const fragmentSpread = parse(query).definitions[0].selectionSet\n        .selections[0];\n      const fragmentDefinition = parse(fragment).definitions[0];\n      const result = await getDefinitionQueryResultForFragmentSpread(\n        query,\n        fragmentSpread,\n        [\n          {\n            file: 'someFile',\n            content: fragment,\n            // @ts-ignore\n            definition: fragmentDefinition,\n          },\n        ],\n      );\n      expect(result.definitions.length).toEqual(1);\n      expect(result.definitions[0].position.line).toEqual(1);\n      expect(result.definitions[0].position.character).toEqual(6);\n    });","file":"getDefinition-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"catches field validation errors","suites":["getDiagnostics"],"updatePoint":{"line":40,"column":37},"line":40,"code":"  it('catches field validation errors', () => {\n    const error = validateQuery(parse('query queryName { title }'), schema)[0];\n    expect(error.message).toEqual(\n      'Cannot query field \"title\" on type \"Query\".',\n    );\n    expect(error.severity).toEqual(DIAGNOSTIC_SEVERITY.Error);\n    expect(error.source).toEqual('GraphQL: Validation');\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"catches multi root validation errors without breaking (with a custom validation function that always throws errors)","suites":["getDiagnostics"],"updatePoint":{"line":49,"column":121},"line":49,"code":"  it('catches multi root validation errors without breaking (with a custom validation function that always throws errors)', () => {\n    const error = validateQuery(parse('{ hero { name } } { seq }'), schema, [\n      validationContext => {\n        return {\n          Document(node) {\n            for (const definition of node.definitions) {\n              // add a custom error to every definition\n              validationContext.reportError(\n                new GraphQLError(`This is a custom error.`, definition),\n              );\n            }\n            return false;\n          },\n        };\n      },\n    ])[0];\n    expect(error.message).toEqual('This is a custom error.');\n    expect(error.severity).toEqual(DIAGNOSTIC_SEVERITY.Error);\n    expect(error.source).toEqual('GraphQL: Validation');\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"catches field deprecation errors","suites":["getDiagnostics"],"updatePoint":{"line":70,"column":38},"line":70,"code":"  it('catches field deprecation errors', () => {\n    const error = getDiagnostics(\n      '{ deprecatedField { testField } }',\n      schema,\n    )[0];\n    expect(error.message).toEqual(\n      // eslint-disable-next-line no-useless-escape\n      'The field Query.deprecatedField is deprecated. Use test instead.',\n    );\n    expect(error.severity).toEqual(DIAGNOSTIC_SEVERITY.Warning);\n    expect(error.source).toEqual('GraphQL: Deprecation');\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns no errors for valid query","suites":["getDiagnostics"],"updatePoint":{"line":83,"column":39},"line":83,"code":"  it('returns no errors for valid query', () => {\n    const errors = getDiagnostics('query { hero { name } }', schema);\n    expect(errors.length).toEqual(0);\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns no errors for valid query with aliases","suites":["getDiagnostics"],"updatePoint":{"line":88,"column":52},"line":88,"code":"  it('returns no errors for valid query with aliases', () => {\n    const errors = getDiagnostics(\n      'query { superHero: hero { superName: name } superHero2: hero { superName2: name } }',\n      schema,\n    );\n    expect(errors.length).toEqual(0);\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"catches a syntax error in the SDL","suites":["getDiagnostics"],"updatePoint":{"line":96,"column":39},"line":96,"code":"  it('catches a syntax error in the SDL', () => {\n    const errors = getDiagnostics(\n      `\n        type Human implements Character {\n          field_without_type_is_a_syntax_error\n          id: String!\n        }\n      `,\n      schema,\n    );\n    expect(errors.length).toEqual(1);\n    const error = errors[0];\n    expect(error.message).toEqual(\n      // eslint-disable-next-line no-useless-escape\n      'Syntax Error: Expected \":\", found Name \"id\".',\n    );\n    expect(error.severity).toEqual(DIAGNOSTIC_SEVERITY.Error);\n    expect(error.source).toEqual('GraphQL: Syntax');\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns no errors after parsing kitchen-sink query","suites":["getDiagnostics"],"updatePoint":{"line":117,"column":56},"line":117,"code":"  it('returns no errors after parsing kitchen-sink query', () => {\n    const kitchenSink = fs.readFileSync(\n      path.join(__dirname, '/kitchen-sink.graphql'),\n      'utf8',\n    );\n    const errors = getDiagnostics(kitchenSink);\n    expect(errors).toHaveLength(0);\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns a error with a custom validation rule","suites":["getDiagnostics"],"updatePoint":{"line":126,"column":51},"line":126,"code":"  it('returns a error with a custom validation rule', () => {\n    const noQueryRule = (context: ValidationContext): ASTVisitor => ({\n      OperationDefinition(node) {\n        if (node.operation === 'query') {\n          context.reportError(new GraphQLError('No query allowed.', node.name));\n        }\n      },\n    });\n    const errors = getDiagnostics(`query hero { hero { id } }`, schema, [\n      noQueryRule,\n    ]);\n    expect(errors).toHaveLength(1);\n    expect(errors[0].message).toEqual('No query allowed.');\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"validates with external fragments","suites":["getDiagnostics"],"updatePoint":{"line":141,"column":39},"line":141,"code":"  it('validates with external fragments', () => {\n    const errors = getDiagnostics(\n      `query hero { hero { ...HeroGuy } }`,\n      schema,\n      [],\n      false,\n      'fragment HeroGuy on Human { id }',\n    );\n    expect(errors).toHaveLength(0);\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"validates with external fragments as array","suites":["getDiagnostics"],"updatePoint":{"line":151,"column":48},"line":151,"code":"  it('validates with external fragments as array', () => {\n    const externalFragments = parse(`\n      fragment Person on Human {\n        name\n      }\n      fragment Person2 on Human {\n        name\n      }\n    `).definitions as FragmentDefinitionNode[];\n    const errors = getDiagnostics(\n      `query hero { hero { ...Person ...Person2 } }`,\n      schema,\n      [],\n      false,\n      externalFragments,\n    );\n    expect(errors).toHaveLength(0);\n  });","file":"getDiagnostics-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides leaf field information","suites":["getHoverInformation"],"updatePoint":{"line":35,"column":37},"line":35,"code":"  it('provides leaf field information', () => {\n    const actual = testHover(\n      'query { thing { testField } }',\n      new Position(0, 20),\n    );\n    expect(actual).toEqual(\n      'TestType.testField: String\\n\\n This is field documentation for TestType.testField',\n    );\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides aliased field information","suites":["getHoverInformation"],"updatePoint":{"line":45,"column":40},"line":45,"code":"  it('provides aliased field information', () => {\n    const actual = testHover(\n      'query { thing { other: testField } }',\n      new Position(0, 25),\n    );\n    expect(actual).toEqual(\n      'TestType.testField: String\\n\\n This is field documentation for TestType.testField',\n    );\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides intermediate field information","suites":["getHoverInformation"],"updatePoint":{"line":55,"column":45},"line":55,"code":"  it('provides intermediate field information', () => {\n    const actual = testHover(\n      'query { thing { testField } }',\n      new Position(0, 10),\n    );\n    expect(actual).toEqual(\n      'Query.thing: TestType\\n\\n This is field documentation for Query.thing',\n    );\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides list field information","suites":["getHoverInformation"],"updatePoint":{"line":65,"column":37},"line":65,"code":"  it('provides list field information', () => {\n    const actual = testHover(\n      'query { listOfThing { testField } }',\n      new Position(0, 10),\n    );\n    expect(actual).toEqual('Query.listOfThing: [TestType!]');\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides deprecated field information","suites":["getHoverInformation"],"updatePoint":{"line":73,"column":43},"line":73,"code":"  it('provides deprecated field information', () => {\n    const actual = testHover(\n      'query { thing { testDeprecatedField } }',\n      new Position(0, 20),\n    );\n    expect(actual).toEqual(\n      'TestType.testDeprecatedField: Float\\n\\nDeprecated: deprecation reason',\n    );\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides enum field information","suites":["getHoverInformation"],"updatePoint":{"line":83,"column":37},"line":83,"code":"  it('provides enum field information', () => {\n    const actual = testHover(\n      'query { thing { testEnumField } }',\n      new Position(0, 20),\n    );\n    expect(actual).toEqual('TestType.testEnumField: Color');\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides scalar field information","suites":["getHoverInformation"],"updatePoint":{"line":91,"column":39},"line":91,"code":"  it('provides scalar field information', () => {\n    const actual = testHover('query { cluck }', new Position(0, 10));\n    expect(actual).toEqual('Query.cluck: Chicken');\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides parameter type information","suites":["getHoverInformation"],"updatePoint":{"line":96,"column":41},"line":96,"code":"  it('provides parameter type information', () => {\n    const actual = testHover(\n      'query { parameterizedField(id: \"foo\") { testField } }',\n      new Position(0, 28),\n    );\n    expect(actual).toEqual('Query.parameterizedField(id: String!)');\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides directive information","suites":["getHoverInformation"],"updatePoint":{"line":104,"column":36},"line":104,"code":"  it('provides directive information', () => {\n    const actual = testHover(\n      'query { thing { testField @skip(if:true) } }',\n      new Position(0, 30),\n    );\n    expect(actual).toEqual(\n      '@skip\\n\\nDirects the executor to skip this field or fragment when the `if` argument is true.',\n    );\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"provides union information","suites":["getHoverInformation"],"updatePoint":{"line":114,"column":32},"line":114,"code":"  it('provides union information', () => {\n    const actual = testHover('query { unionField }', new Position(0, 12));\n    expect(actual).toEqual('Query.unionField: UnionType');\n  });","file":"getHoverInformation-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns outline trees correctly","suites":["getOutline()"],"updatePoint":{"line":13,"column":37},"line":13,"code":"  it('returns outline trees correctly', () => {\n    const query = `query test {\n      name\n    }`;\n    // @ts-ignore\n    const tree = getOutline(query).outlineTrees;\n    expect(tree).not.toBeUndefined();\n    expect(tree.length).toEqual(1);\n    // @ts-ignore\n    expect(tree[0].startPosition.line).toEqual(0);\n    // @ts-ignore\n    expect(tree[0].startPosition.character).toEqual(0);\n    // @ts-ignore\n    expect(tree[0].endPosition.line).toEqual(2);\n    // @ts-ignore\n    expect(tree[0].endPosition.character).toEqual(5);\n    // @ts-ignore\n    expect(tree[0].representativeName).toEqual('test');\n    // @ts-ignore\n    expect(tree[0].tokenizedText.length).toEqual(3);\n    // @ts-ignore\n    expect(tree[0].tokenizedText[0]).toEqual({\n      kind: 'keyword',\n      value: 'query',\n    });\n    // @ts-ignore\n    expect(tree[0].tokenizedText[1]).toEqual({\n      kind: 'whitespace',\n      value: ' ',\n    });\n    // @ts-ignore\n    expect(tree[0].tokenizedText[2]).toEqual({\n      kind: 'class-name',\n      value: 'test',\n    });\n    // @ts-ignore\n    expect(tree[0].children.length).toEqual(1);\n    // @ts-ignore\n    expect(tree[0].children[0].children.length).toEqual(0);\n    // @ts-ignore\n    expect(tree[0].children[0].startPosition.line).toEqual(1);\n    // @ts-ignore\n    expect(tree[0].children[0].startPosition.character).toEqual(6);\n    // @ts-ignore\n    expect(tree[0].children[0].endPosition.line).toEqual(1);\n    // @ts-ignore\n    expect(tree[0].children[0].endPosition.character).toEqual(10);\n    // @ts-ignore\n    expect(tree[0].children[0].representativeName).toEqual('name');\n    // @ts-ignore\n    expect(tree[0].children[0].tokenizedText.length).toEqual(1);\n    // @ts-ignore\n    expect(tree[0].children[0].tokenizedText[0]).toEqual({\n      kind: 'plain',\n      value: 'name',\n    });\n  });","file":"getOutline-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"runs diagnostic service as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":84,"column":41},"line":84,"code":"  it('runs diagnostic service as expected', async () => {\n    const diagnostics = await languageService.getDiagnostics(\n      'qeury',\n      './queries/testQuery.graphql',\n    );\n    expect(diagnostics.length).toEqual(1);\n    const diagnostic = diagnostics[0];\n    expect(diagnostic.message).toEqual(\n      'Syntax Error: Unexpected Name \"qeury\".',\n    );\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"runs definition service as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":96,"column":41},"line":96,"code":"  it('runs definition service as expected', async () => {\n    const definitionQueryResult = await languageService.getDefinition(\n      'type Query { hero(episode: Episode): Character }',\n      { line: 0, character: 28 } as Position,\n      './queries/definitionQuery.graphql',\n    );\n    // @ts-ignore\n    expect(definitionQueryResult.definitions.length).toEqual(1);\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"runs hover service as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":106,"column":36},"line":106,"code":"  it('runs hover service as expected', async () => {\n    const hoverInformation = await languageService.getHoverInformation(\n      'type Query { hero(episode: String): String }',\n      { line: 0, character: 28 } as Position,\n      './queries/definitionQuery.graphql',\n    );\n    expect(hoverInformation).toEqual(\n      'String\\n\\nThe `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n    );\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"runs document symbol requests as expected","suites":["GraphQLLanguageService"],"updatePoint":{"line":117,"column":47},"line":117,"code":"  it('runs document symbol requests as expected', async () => {\n    const validQuery = `\n  query OperationExample {\n    item(episode: EMPIRE){\n      ...testFragment\n    }\n  }\n  `;\n\n    const result = await languageService.getDocumentSymbols(\n      validQuery,\n      'file://file.graphql',\n    );\n\n    expect(result).not.toBeUndefined();\n    expect(result.length).toEqual(3);\n    // expect(result[0].name).toEqual('item');\n    expect(result[1].name).toEqual('item');\n    expect(result[1].kind).toEqual(SymbolKind.Field);\n    expect(result[1].location.range.start.line).toEqual(2);\n    expect(result[1].location.range.start.character).toEqual(4);\n    expect(result[1].location.range.end.line).toEqual(4);\n    expect(result[1].location.range.end.character).toEqual(5);\n  });","file":"GraphQLLanguageService-test.ts","skipped":false,"dir":"packages/graphql-language-service-interface/src/__tests__"},{"name":"returns start postition","suites":["CharacterStream","getStartOfToken"],"updatePoint":{"line":5,"column":31},"line":5,"code":"    it('returns start postition', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.getStartOfToken()).toEqual(0);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns current postition","suites":["CharacterStream","getCurrentPosition"],"updatePoint":{"line":14,"column":33},"line":14,"code":"    it('returns current postition', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.getCurrentPosition()).toEqual(0);\n\n      stream.next();\n\n      expect(stream.getCurrentPosition()).toEqual(1);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns true if at start of the source string","suites":["CharacterStream","sol"],"updatePoint":{"line":27,"column":53},"line":27,"code":"    it('returns true if at start of the source string', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.sol()).toEqual(true);\n\n      stream.next();\n\n      expect(stream.sol()).toEqual(false);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns true if end of source string is reached","suites":["CharacterStream","eol"],"updatePoint":{"line":40,"column":55},"line":40,"code":"    it('returns true if end of source string is reached', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.eol()).toEqual(false);\n\n      stream.skipToEnd();\n\n      expect(stream.eol()).toEqual(true);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns the next character in source string","suites":["CharacterStream","peak"],"updatePoint":{"line":53,"column":51},"line":53,"code":"    it('returns the next character in source string', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.peek()).toEqual('s');\n\n      stream.next();\n\n      expect(stream.peek()).toEqual('c');\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns null if at end of the source string","suites":["CharacterStream","peak"],"updatePoint":{"line":64,"column":51},"line":64,"code":"    it('returns null if at end of the source string', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.skipToEnd();\n\n      expect(stream.peek()).toEqual(null);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"increments the current position","suites":["CharacterStream","next"],"updatePoint":{"line":75,"column":39},"line":75,"code":"    it('increments the current position', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.next();\n\n      expect(stream.getCurrentPosition()).toEqual(1);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns the next character in source string","suites":["CharacterStream","next"],"updatePoint":{"line":84,"column":51},"line":84,"code":"    it('returns the next character in source string', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.next()).toEqual('s');\n      expect(stream.next()).toEqual('c');\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"tests next character with the pattern provided","suites":["CharacterStream","_testNextCharacter"],"updatePoint":{"line":94,"column":54},"line":94,"code":"    it('tests next character with the pattern provided', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream._testNextCharacter('s')).toEqual(true);\n\n      stream.next();\n\n      expect(stream._testNextCharacter('c')).toEqual(true);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns correct result with regex pattern","suites":["CharacterStream","_testNextCharacter"],"updatePoint":{"line":105,"column":49},"line":105,"code":"    it('returns correct result with regex pattern', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream._testNextCharacter(/s/)).toEqual(true);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns correct result with a callback function as pattern","suites":["CharacterStream","_testNextCharacter"],"updatePoint":{"line":112,"column":66},"line":112,"code":"    it('returns correct result with a callback function as pattern', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      const matcher = nextChar => nextChar === 's';\n\n      expect(stream._testNextCharacter(matcher)).toEqual(true);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns next character is matched with the pattern provided","suites":["CharacterStream","eat"],"updatePoint":{"line":123,"column":67},"line":123,"code":"    it('returns next character is matched with the pattern provided', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.eat('s')).toEqual('s');\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns undefined is not matched with the pattern provided","suites":["CharacterStream","eat"],"updatePoint":{"line":130,"column":66},"line":130,"code":"    it('returns undefined is not matched with the pattern provided', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.eat('b')).toEqual(undefined);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"increments current position after successful match","suites":["CharacterStream","eat"],"updatePoint":{"line":137,"column":58},"line":137,"code":"    it('increments current position after successful match', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.eat('s');\n\n      expect(stream.getCurrentPosition()).toEqual(1);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"sets start to current position after successful match","suites":["CharacterStream","eat"],"updatePoint":{"line":146,"column":61},"line":146,"code":"    it('sets start to current position after successful match', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.next();\n      stream.eat('c');\n\n      expect(stream.getStartOfToken()).toEqual(1);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns true if any character matched","suites":["CharacterStream","eatWhile"],"updatePoint":{"line":158,"column":45},"line":158,"code":"    it('returns true if any character matched', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.eatWhile(/[_A-Za-z]+/)).toEqual(true);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns false if no character matched","suites":["CharacterStream","eatWhile"],"updatePoint":{"line":165,"column":45},"line":165,"code":"    it('returns false if no character matched', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.eatWhile(/^(?:,)/)).toEqual(false);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"increments current position upto where the characters are matched","suites":["CharacterStream","eatWhile"],"updatePoint":{"line":172,"column":73},"line":172,"code":"    it('increments current position upto where the characters are matched', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.eatWhile(/[_A-Za-z]+/);\n\n      expect(stream.getCurrentPosition()).toEqual(6);\n      expect(stream.peek()).toEqual(' ');\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"sets start to first matched character position","suites":["CharacterStream","eatWhile"],"updatePoint":{"line":182,"column":54},"line":182,"code":"    it('sets start to first matched character position', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.skipTo(7);\n      stream.eatWhile(/[_A-Za-z]+/);\n\n      expect(stream.getStartOfToken()).toEqual(7);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns true if space found","suites":["CharacterStream","eatSpace"],"updatePoint":{"line":194,"column":35},"line":194,"code":"    it('returns true if space found', () => {\n      const source = '  scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.eatSpace()).toEqual(true);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns false if no space found","suites":["CharacterStream","eatSpace"],"updatePoint":{"line":201,"column":39},"line":201,"code":"    it('returns false if no space found', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.eatSpace()).toEqual(false);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"increments current position upto where the space is matched","suites":["CharacterStream","eatSpace"],"updatePoint":{"line":208,"column":67},"line":208,"code":"    it('increments current position upto where the space is matched', () => {\n      const source = '  scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.eatSpace();\n\n      expect(stream.getCurrentPosition()).toEqual(2);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"sets start to last space character position","suites":["CharacterStream","eatSpace"],"updatePoint":{"line":217,"column":51},"line":217,"code":"    it('sets start to last space character position', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.getStartOfToken()).toEqual(0);\n\n      stream.skipTo(6);\n      stream.eatSpace();\n\n      expect(stream.getStartOfToken()).toEqual(6);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"sets pos to end of the source string","suites":["CharacterStream","skipToEnd"],"updatePoint":{"line":231,"column":44},"line":231,"code":"    it('sets pos to end of the source string', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.skipToEnd();\n\n      expect(stream.getCurrentPosition()).toEqual(10);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"sets pos to the provided index","suites":["CharacterStream","skipTo"],"updatePoint":{"line":242,"column":38},"line":242,"code":"    it('sets pos to the provided index', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.skipTo(2);\n\n      expect(stream.getCurrentPosition()).toEqual(2);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"goes back the number of steps provided","suites":["CharacterStream","backUp"],"updatePoint":{"line":253,"column":46},"line":253,"code":"    it('goes back the number of steps provided', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.skipTo(2);\n\n      stream.backUp(1);\n\n      expect(stream.getCurrentPosition()).toEqual(1);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns current position","suites":["CharacterStream","column"],"updatePoint":{"line":266,"column":32},"line":266,"code":"    it('returns current position', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.skipTo(1);\n\n      expect(stream.getCurrentPosition()).toEqual(1);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns the current parsed portion of the source string","suites":["CharacterStream","current"],"updatePoint":{"line":277,"column":63},"line":277,"code":"    it('returns the current parsed portion of the source string', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream._start = 1;\n      stream.skipTo(6);\n\n      expect(stream.current()).toEqual('calar');\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns 0 for no indendation","suites":["CharacterStream","indentation"],"updatePoint":{"line":289,"column":36},"line":289,"code":"    it('returns 0 for no indendation', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.indentation()).toEqual(0);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns correct indentation","suites":["CharacterStream","indentation"],"updatePoint":{"line":296,"column":35},"line":296,"code":"    it('returns correct indentation', () => {\n      const source = '  scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.indentation()).toEqual(2);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"counts tab as 2 spaces in indentation","suites":["CharacterStream","indentation"],"updatePoint":{"line":303,"column":45},"line":303,"code":"    it('counts tab as 2 spaces in indentation', () => {\n      const source = '\\tscalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.indentation()).toEqual(2);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns false if no match found","suites":["CharacterStream","match"],"updatePoint":{"line":312,"column":39},"line":312,"code":"    it('returns false if no match found', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.match('a')).toEqual(false);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns matches if found","suites":["CharacterStream","match"],"updatePoint":{"line":319,"column":32},"line":319,"code":"    it('returns matches if found', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.match(/scalar/)[0]).toEqual('scalar');\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"accepts string pattern","suites":["CharacterStream","match"],"updatePoint":{"line":326,"column":30},"line":326,"code":"    it('accepts string pattern', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.match('scalar')).toEqual(true);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"dose case-insensitve match when caseFold is true","suites":["CharacterStream","match"],"updatePoint":{"line":333,"column":56},"line":333,"code":"    it('dose case-insensitve match when caseFold is true', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      expect(stream.match('Scalar', true, true)).toEqual(true);\n      expect(stream.match('Scalar', true, false)).toEqual(false);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"consumes the source string if a match is found, by default","suites":["CharacterStream","match"],"updatePoint":{"line":341,"column":66},"line":341,"code":"    it('consumes the source string if a match is found, by default', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.next();\n      stream.match('calar');\n\n      expect(stream.getStartOfToken()).toEqual(1);\n      expect(stream.getCurrentPosition()).toEqual(6);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"does not consumes the source string if no match is found","suites":["CharacterStream","match"],"updatePoint":{"line":352,"column":64},"line":352,"code":"    it('does not consumes the source string if no match is found', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.next();\n      stream.match(/123/);\n\n      expect(stream.getStartOfToken()).toEqual(0);\n      expect(stream.getCurrentPosition()).toEqual(1);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"does not consume the source string if marked as false","suites":["CharacterStream","match"],"updatePoint":{"line":363,"column":61},"line":363,"code":"    it('does not consume the source string if marked as false', () => {\n      const source = 'scalar Foo';\n      const stream = new CharacterStream(source);\n\n      stream.next();\n      stream.match('calar', false);\n\n      expect(stream.getStartOfToken()).toEqual(0);\n      expect(stream.getCurrentPosition()).toEqual(1);\n    });","file":"CharacterStream-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"initializes state correctly","suites":["onlineParser",".startState"],"updatePoint":{"line":13,"column":35},"line":13,"code":"    it('initializes state correctly', () => {\n      const parser = OnlineParser();\n\n      expect(parser.startState()).toEqual({\n        level: 0,\n        step: 0,\n        name: null,\n        kind: 'Document',\n        type: null,\n        rule: [\n          {\n            isList: true,\n            ofRule: 'Definition',\n            separator: undefined,\n          },\n        ],\n        needsSeperator: false,\n        prevState: {\n          level: 0,\n          step: 0,\n          name: null,\n          kind: null,\n          type: null,\n          rule: null,\n          needsSeperator: false,\n          prevState: null,\n        },\n      });\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"detects invalid char","suites":["onlineParser",".token"],"updatePoint":{"line":45,"column":28},"line":45,"code":"    it('detects invalid char', () => {\n      const { token } = getUtils(`^`);\n\n      expect(token()).toEqual('invalidchar');\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses schema def","suites":["onlineParser",".token"],"updatePoint":{"line":51,"column":25},"line":51,"code":"    it('parses schema def', () => {\n      const { t } = getUtils(`\n        schema {\n          query: SomeType\n        }\n      `);\n\n      t.keyword('schema', { kind: 'SchemaDef' });\n      t.punctuation('{');\n\n      t.keyword('query', { kind: 'OperationTypeDef' });\n      t.punctuation(':');\n      t.name('SomeType');\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses short query","suites":["onlineParser",".token"],"updatePoint":{"line":70,"column":26},"line":70,"code":"    it('parses short query', () => {\n      const { t } = getUtils(`\n        {\n          someField\n        }\n      `);\n\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query","suites":["onlineParser",".token"],"updatePoint":{"line":86,"column":20},"line":86,"code":"    it('parses query', () => {\n      const { t } = getUtils(`\n        query SomeQuery {\n          someField\n        }\n      `);\n\n      t.keyword('query', { kind: 'Query' });\n      t.def('SomeQuery');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query with variables","suites":["onlineParser",".token"],"updatePoint":{"line":104,"column":35},"line":104,"code":"    it('parses query with variables', () => {\n      const { t, stream } = getUtils(`\n        query SomeQuery ($someVariable: SomeInputType) {\n          someField(someArg: $someVariable)\n        }\n      `);\n\n      t.keyword('query', { kind: 'Query' });\n      t.def('SomeQuery');\n      expectVarsDef(\n        { t, stream },\n        {\n          onKind: 'Query',\n          vars: [{ name: 'someVariable', type: 'SomeInputType' }],\n        },\n      );\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n      expectArgs(\n        { t, stream },\n        {\n          onKind: 'Field',\n          args: [{ name: 'someArg', isVariable: true, value: 'someVariable' }],\n        },\n      );\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query field having argument of type ","suites":["onlineParser",".token"],"updatePoint":{"line":143,"column":67},"line":143,"code":"        it(`parses query field having argument of type ${fill.type}`, () => {\n          t.keyword('query', { kind: 'Query' });\n          t.def('SomeQuery');\n          t.punctuation('{', { kind: 'SelectionSet' });\n\n          t.property('someField', { kind: 'Field' });\n          expectArgs(\n            { t, stream },\n            { onKind: 'Field', args: [{ name: 'someArg', ...fill }] },\n          );\n\n          t.punctuation('}', { kind: 'Document' });\n\n          t.eol();\n        });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query field having argument as list of type ","suites":["onlineParser",".token"],"updatePoint":{"line":168,"column":75},"line":168,"code":"        it(`parses query field having argument as list of type ${fill.type}`, () => {\n          t.keyword('query', { kind: 'Query' });\n          t.def('SomeQuery');\n          t.punctuation('{', { kind: 'SelectionSet' });\n\n          t.property('someField', { kind: 'Field' });\n          expectArgs(\n            { t, stream },\n            {\n              onKind: 'Field',\n              args: [{ name: 'someArg', isList: true, ...fill }],\n            },\n          );\n\n          t.punctuation('}', { kind: 'Document' });\n\n          t.eol();\n        });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query field having argument of type object","suites":["onlineParser",".token"],"updatePoint":{"line":189,"column":57},"line":189,"code":"    it('parses query field having argument of type object', () => {\n      const { t } = getUtils(`\n        query SomeQuery {\n          someField(someArg: { anotherField: $someVariable })\n        }\n      `);\n      t.keyword('query', { kind: 'Query' });\n      t.def('SomeQuery');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n      t.punctuation(/\\(/, { kind: 'Arguments' });\n      t.attribute('someArg', { kind: 'Argument' });\n      t.punctuation(':');\n      t.punctuation('{', { kind: 'ObjectValue' });\n      t.attribute('anotherField', { kind: 'ObjectField' });\n      t.punctuation(':');\n      t.variable('$', { kind: 'Variable' });\n      t.variable('someVariable');\n      t.punctuation('}', { kind: 'Arguments' });\n      t.punctuation(/\\)/, { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query field with directive having argument of type ","suites":["onlineParser",".token"],"updatePoint":{"line":223,"column":82},"line":223,"code":"        it(`parses query field with directive having argument of type ${fill.type}`, () => {\n          t.keyword('query', { kind: 'Query' });\n          t.def('SomeQuery');\n          t.punctuation('{', { kind: 'SelectionSet' });\n\n          t.property('someField', { kind: 'Field' });\n          expectDirective(\n            { t, stream },\n            {\n              name: 'someDirective',\n              onKind: 'Field',\n              args: [{ name: 'anotherArg', ...fill }],\n            },\n          );\n\n          t.punctuation('}', { kind: 'Document' });\n\n          t.eol();\n        });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query field with a directive and selection set","suites":["onlineParser",".token"],"updatePoint":{"line":245,"column":61},"line":245,"code":"    it(`parses query field with a directive and selection set`, () => {\n      const { t } = getUtils(`\n        query SomeQuery {\n          someField @someDirective {\n            anotherField\n          }\n        }\n      `);\n      t.keyword('query', { kind: 'Query' });\n      t.def('SomeQuery');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n      expectDirective({ t }, { name: 'someDirective' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query field with an alias","suites":["onlineParser",".token"],"updatePoint":{"line":270,"column":40},"line":270,"code":"    it(`parses query field with an alias`, () => {\n      const { t } = getUtils(`\n        query SomeQuery {\n          someAlias : someField @someDirective {\n            anotherField\n          }\n        }\n      `);\n      t.keyword('query', { kind: 'Query' });\n      t.def('SomeQuery');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someAlias', { kind: 'AliasedField' });\n      t.punctuation(':');\n      t.qualifier('someField');\n      expectDirective({ t }, { name: 'someDirective' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses invalid query","suites":["onlineParser",".token"],"updatePoint":{"line":297,"column":28},"line":297,"code":"    it(`parses invalid query`, () => {\n      const { t, token } = getUtils(`\n        {}garbage\n      `);\n\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      expect(token()).toEqual('invalidchar');\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses a fragment defination","suites":["onlineParser",".token"],"updatePoint":{"line":311,"column":36},"line":311,"code":"    it(`parses a fragment defination`, () => {\n      const { t } = getUtils(`\n        fragment SomeFragment on SomeType {\n          someField\n        }\n      `);\n\n      t.keyword('fragment', { kind: 'FragmentDefinition' });\n      t.def('SomeFragment');\n      t.keyword('on', { kind: 'TypeCondition' });\n      t.name('SomeType', { kind: 'NamedType' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses a fragment defination with a directive","suites":["onlineParser",".token"],"updatePoint":{"line":331,"column":53},"line":331,"code":"    it(`parses a fragment defination with a directive`, () => {\n      const { t } = getUtils(`\n        fragment SomeFragment on SomeType @someDirective {\n          someField\n        }\n      `);\n\n      t.keyword('fragment', { kind: 'FragmentDefinition' });\n      t.def('SomeFragment');\n      t.keyword('on', { kind: 'TypeCondition' });\n      t.name('SomeType', { kind: 'NamedType' });\n      expectDirective({ t }, { name: 'someDirective' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query with inline fragment","suites":["onlineParser",".token"],"updatePoint":{"line":352,"column":41},"line":352,"code":"    it('parses query with inline fragment', () => {\n      const { t } = getUtils(`\n        query SomeQuery {\n          someField {\n            ... on SomeType {\n              anotherField\n            }\n          }\n        }\n      `);\n\n      t.keyword('query', { kind: 'Query' });\n      t.def('SomeQuery');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.punctuation('...', { kind: 'InlineFragment' });\n      t.keyword('on', { kind: 'TypeCondition' });\n      t.name('SomeType', { kind: 'NamedType' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses query with fragment spread","suites":["onlineParser",".token"],"updatePoint":{"line":386,"column":41},"line":386,"code":"    it('parses query with fragment spread', () => {\n      const { t } = getUtils(`\n        query SomeQuery {\n          someField {\n            ...SomeFragment @someDirective\n          }\n        }\n      `);\n\n      t.keyword('query', { kind: 'Query' });\n      t.def('SomeQuery');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someField', { kind: 'Field' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.punctuation('...', { kind: 'FragmentSpread' });\n      t.def('SomeFragment');\n      expectDirective({ t }, { name: 'someDirective' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation","suites":["onlineParser",".token"],"updatePoint":{"line":413,"column":23},"line":413,"code":"    it('parses mutation', () => {\n      const { t } = getUtils(`\n        mutation SomeMutation {\n          someMutation\n        }\n      `);\n\n      t.keyword('mutation', { kind: 'Mutation' });\n      t.def('SomeMutation');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someMutation', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation with variables","suites":["onlineParser",".token"],"updatePoint":{"line":431,"column":38},"line":431,"code":"    it('parses mutation with variables', () => {\n      const { t, stream } = getUtils(`\n        mutation SomeMutation ($someVariable: SomeInputType) {\n          someMutation(someArg: $someVariable)\n        }\n      `);\n\n      t.keyword('mutation', { kind: 'Mutation' });\n      t.def('SomeMutation');\n      expectVarsDef(\n        { t, stream },\n        {\n          onKind: 'Mutation',\n          vars: [{ name: 'someVariable', type: 'SomeInputType' }],\n        },\n      );\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someMutation', { kind: 'Field' });\n      expectArgs(\n        { t, stream },\n        {\n          onKind: 'Field',\n          args: [{ name: 'someArg', isVariable: true, value: 'someVariable' }],\n        },\n      );\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation field having argument of type ","suites":["onlineParser",".token"],"updatePoint":{"line":470,"column":70},"line":470,"code":"        it(`parses mutation field having argument of type ${fill.type}`, () => {\n          t.keyword('mutation', { kind: 'Mutation' });\n          t.def('SomeMutation');\n          t.punctuation('{', { kind: 'SelectionSet' });\n\n          t.property('someMutation', { kind: 'Field' });\n          expectArgs(\n            { t, stream },\n            { onKind: 'Field', args: [{ name: 'someArg', ...fill }] },\n          );\n\n          t.punctuation('}', { kind: 'Document' });\n\n          t.eol();\n        });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation field having argument of type object","suites":["onlineParser",".token"],"updatePoint":{"line":488,"column":60},"line":488,"code":"    it('parses mutation field having argument of type object', () => {\n      const { t } = getUtils(`\n        mutation SomeMutation {\n          someMutation(someArg: { anotherField: $someVariable })\n        }\n      `);\n      t.keyword('mutation', { kind: 'Mutation' });\n      t.def('SomeMutation');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someMutation', { kind: 'Field' });\n      t.punctuation(/\\(/, { kind: 'Arguments' });\n      t.attribute('someArg', { kind: 'Argument' });\n      t.punctuation(':');\n      t.punctuation('{', { kind: 'ObjectValue' });\n      t.attribute('anotherField', { kind: 'ObjectField' });\n      t.punctuation(':');\n      t.variable('$', { kind: 'Variable' });\n      t.variable('someVariable');\n      t.punctuation('}', { kind: 'Arguments' });\n      t.punctuation(/\\)/, { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation field with directive having argument of type ","suites":["onlineParser",".token"],"updatePoint":{"line":522,"column":85},"line":522,"code":"        it(`parses mutation field with directive having argument of type ${fill.type}`, () => {\n          t.keyword('mutation', { kind: 'Mutation' });\n          t.def('SomeMutation');\n          t.punctuation('{', { kind: 'SelectionSet' });\n\n          t.property('someMutation', { kind: 'Field' });\n          expectDirective(\n            { t, stream },\n            {\n              name: 'someDirective',\n              onKind: 'Field',\n              args: [{ name: 'anotherArg', ...fill }],\n            },\n          );\n\n          t.punctuation('}', { kind: 'Document' });\n\n          t.eol();\n        });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation field with a directive and selection set","suites":["onlineParser",".token"],"updatePoint":{"line":544,"column":64},"line":544,"code":"    it(`parses mutation field with a directive and selection set`, () => {\n      const { t } = getUtils(`\n        mutation SomeMutation {\n          someMutation @someDirective {\n            anotherField\n          }\n        }\n      `);\n      t.keyword('mutation', { kind: 'Mutation' });\n      t.def('SomeMutation');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someMutation', { kind: 'Field' });\n      expectDirective({ t }, { name: 'someDirective' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation field with an alias","suites":["onlineParser",".token"],"updatePoint":{"line":569,"column":43},"line":569,"code":"    it(`parses mutation field with an alias`, () => {\n      const { t } = getUtils(`\n        mutation SomeMutation {\n          someAlias : someMutation @someDirective {\n            anotherField\n          }\n        }\n      `);\n      t.keyword('mutation', { kind: 'Mutation' });\n      t.def('SomeMutation');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someAlias', { kind: 'AliasedField' });\n      t.punctuation(':');\n      t.qualifier('someMutation');\n      expectDirective({ t }, { name: 'someDirective' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation with inline fragment","suites":["onlineParser",".token"],"updatePoint":{"line":596,"column":44},"line":596,"code":"    it('parses mutation with inline fragment', () => {\n      const { t } = getUtils(`\n        mutation SomeMutation {\n          someMutation {\n            ... on SomeType {\n              anotherField\n            }\n          }\n        }\n      `);\n\n      t.keyword('mutation', { kind: 'Mutation' });\n      t.def('SomeMutation');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someMutation', { kind: 'Field' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.punctuation('...', { kind: 'InlineFragment' });\n      t.keyword('on', { kind: 'TypeCondition' });\n      t.name('SomeType', { kind: 'NamedType' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses mutation with fragment spread","suites":["onlineParser",".token"],"updatePoint":{"line":630,"column":44},"line":630,"code":"    it('parses mutation with fragment spread', () => {\n      const { t } = getUtils(`\n        mutation SomeMutation {\n          someMutation {\n            ...SomeFragment @someDirective\n          }\n        }\n      `);\n\n      t.keyword('mutation', { kind: 'Mutation' });\n      t.def('SomeMutation');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someMutation', { kind: 'Field' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.punctuation('...', { kind: 'FragmentSpread' });\n      t.def('SomeFragment');\n      expectDirective({ t }, { name: 'someDirective' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription","suites":["onlineParser",".token"],"updatePoint":{"line":657,"column":27},"line":657,"code":"    it('parses subscription', () => {\n      const { t } = getUtils(`\n        subscription SomeSubscription {\n          someSubscription\n        }\n      `);\n\n      t.keyword('subscription', { kind: 'Subscription' });\n      t.def('SomeSubscription');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someSubscription', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription with variables","suites":["onlineParser",".token"],"updatePoint":{"line":675,"column":42},"line":675,"code":"    it('parses subscription with variables', () => {\n      const { t, stream } = getUtils(`\n        subscription SomeSubscription ($someVariable: SomeInputType) {\n          someSubscription(someArg: $someVariable)\n        }\n      `);\n\n      t.keyword('subscription', { kind: 'Subscription' });\n      t.def('SomeSubscription');\n      expectVarsDef(\n        { t, stream },\n        {\n          onKind: 'Subscription',\n          vars: [{ name: 'someVariable', type: 'SomeInputType' }],\n        },\n      );\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someSubscription', { kind: 'Field' });\n      expectArgs(\n        { t, stream },\n        {\n          onKind: 'Field',\n          args: [{ name: 'someArg', isVariable: true, value: 'someVariable' }],\n        },\n      );\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription field having argument of type ","suites":["onlineParser",".token"],"updatePoint":{"line":714,"column":74},"line":714,"code":"        it(`parses subscription field having argument of type ${fill.type}`, () => {\n          t.keyword('subscription', { kind: 'Subscription' });\n          t.def('SomeSubscription');\n          t.punctuation('{', { kind: 'SelectionSet' });\n\n          t.property('someSubscription', { kind: 'Field' });\n          expectArgs(\n            { t, stream },\n            { onKind: 'Field', args: [{ name: 'someArg', ...fill }] },\n          );\n\n          t.punctuation('}', { kind: 'Document' });\n\n          t.eol();\n        });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription field having argument of type object","suites":["onlineParser",".token"],"updatePoint":{"line":732,"column":64},"line":732,"code":"    it('parses subscription field having argument of type object', () => {\n      const { t } = getUtils(`\n        subscription SomeSubscription {\n          someSubscription(someArg: { anotherField: $someVariable })\n        }\n      `);\n      t.keyword('subscription', { kind: 'Subscription' });\n      t.def('SomeSubscription');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someSubscription', { kind: 'Field' });\n      t.punctuation(/\\(/, { kind: 'Arguments' });\n      t.attribute('someArg', { kind: 'Argument' });\n      t.punctuation(':');\n      t.punctuation('{', { kind: 'ObjectValue' });\n      t.attribute('anotherField', { kind: 'ObjectField' });\n      t.punctuation(':');\n      t.variable('$', { kind: 'Variable' });\n      t.variable('someVariable');\n      t.punctuation('}', { kind: 'Arguments' });\n      t.punctuation(/\\)/, { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription field with directive having argument of type ","suites":["onlineParser",".token"],"updatePoint":{"line":766,"column":89},"line":766,"code":"        it(`parses subscription field with directive having argument of type ${fill.type}`, () => {\n          t.keyword('subscription', { kind: 'Subscription' });\n          t.def('SomeSubscription');\n          t.punctuation('{', { kind: 'SelectionSet' });\n\n          t.property('someSubscription', { kind: 'Field' });\n          expectDirective(\n            { t, stream },\n            {\n              name: 'someDirective',\n              onKind: 'Field',\n              args: [{ name: 'anotherArg', ...fill }],\n            },\n          );\n\n          t.punctuation('}', { kind: 'Document' });\n\n          t.eol();\n        });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription field with a directive and selection set","suites":["onlineParser",".token"],"updatePoint":{"line":788,"column":68},"line":788,"code":"    it(`parses subscription field with a directive and selection set`, () => {\n      const { t } = getUtils(`\n        subscription SomeSubscription {\n          someSubscription @someDirective {\n            anotherField\n          }\n        }\n      `);\n      t.keyword('subscription', { kind: 'Subscription' });\n      t.def('SomeSubscription');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someSubscription', { kind: 'Field' });\n      expectDirective({ t }, { name: 'someDirective' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription field with an alias","suites":["onlineParser",".token"],"updatePoint":{"line":813,"column":47},"line":813,"code":"    it(`parses subscription field with an alias`, () => {\n      const { t } = getUtils(`\n        subscription SomeSubscription {\n          someAlias : someSubscription @someDirective {\n            anotherField\n          }\n        }\n      `);\n      t.keyword('subscription', { kind: 'Subscription' });\n      t.def('SomeSubscription');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someAlias', { kind: 'AliasedField' });\n      t.punctuation(':');\n      t.qualifier('someSubscription');\n      expectDirective({ t }, { name: 'someDirective' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription with inline fragment","suites":["onlineParser",".token"],"updatePoint":{"line":840,"column":48},"line":840,"code":"    it('parses subscription with inline fragment', () => {\n      const { t, stream } = getUtils(`\n        subscription SomeSubscription {\n          someSubscription {\n            ... on SomeType {\n              anotherField\n            }\n          }\n        }\n      `);\n\n      t.keyword('subscription', { kind: 'Subscription' });\n      t.def('SomeSubscription');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someSubscription', { kind: 'Field' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.punctuation('...', { kind: 'InlineFragment' });\n      t.keyword('on', { kind: 'TypeCondition' });\n      t.name('SomeType', { kind: 'NamedType' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('anotherField', { kind: 'Field' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"parses subscription with fragment spread","suites":["onlineParser",".token"],"updatePoint":{"line":874,"column":48},"line":874,"code":"    it('parses subscription with fragment spread', () => {\n      const { t, stream } = getUtils(`\n        subscription SomeSubscription {\n          someSubscription {\n            ...SomeFragment @someDirective\n          }\n        }\n      `);\n\n      t.keyword('subscription', { kind: 'Subscription' });\n      t.def('SomeSubscription');\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.property('someSubscription', { kind: 'Field' });\n      t.punctuation('{', { kind: 'SelectionSet' });\n\n      t.punctuation('...', { kind: 'FragmentSpread' });\n      t.def('SomeFragment');\n      expectDirective({ t }, { name: 'someDirective' });\n\n      t.punctuation('}', { kind: 'SelectionSet' });\n\n      t.punctuation('}', { kind: 'Document' });\n\n      t.eol();\n    });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"correctly","suites":["onlineParser",".token","parses object type def"],"updatePoint":{"line":902,"column":19},"line":902,"code":"      it(`correctly`, () => {\n        const { t } = getUtils(`\n          type SomeType {\n            someField: AnotherType!\n          }\n        `);\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.punctuation('{');\n\n        t.property('someField', { kind: 'FieldDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n        t.punctuation('!', { kind: 'FieldDef' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with an object implementing an interface","suites":["onlineParser",".token","parses object type def"],"updatePoint":{"line":922,"column":50},"line":922,"code":"      it('with an object implementing an interface', () => {\n        const { t } = getUtils(`type SomeType implements SomeInterface`);\n\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.keyword('implements', { kind: 'Implements' });\n        t.name('SomeInterface', { kind: 'NamedType' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with an object type implementing multiple interfaces","suites":["onlineParser",".token","parses object type def"],"updatePoint":{"line":933,"column":62},"line":933,"code":"      it('with an object type implementing multiple interfaces', () => {\n        const { t } = getUtils(\n          `type SomeType implements SomeInterface & AnotherInterface & YetAnotherInterface`,\n        );\n\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.keyword('implements', { kind: 'Implements' });\n        t.name('SomeInterface', { kind: 'NamedType' });\n        t.punctuation('&', { kind: 'Implements' });\n        t.name('AnotherInterface', { kind: 'NamedType' });\n        t.punctuation('&', { kind: 'Implements' });\n        t.name('YetAnotherInterface', { kind: 'NamedType' });\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive","suites":["onlineParser",".token","parses object type def"],"updatePoint":{"line":949,"column":26},"line":949,"code":"      it('with a directive', () => {\n        const { t } = getUtils(`type SomeType @someDirective`);\n\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        expectDirective({ t }, { name: 'someDirective' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive having argument of type ","suites":["onlineParser",".token","parses object type def"],"updatePoint":{"line":962,"column":67},"line":962,"code":"          it(`with a directive having argument of type ${fill.type}`, () => {\n            t.keyword('type', { kind: 'ObjectTypeDef' });\n            t.name('SomeType');\n            expectDirective(\n              { t, stream },\n              {\n                name: 'someDirective',\n                onKind: 'ObjectTypeDef',\n                args: [{ name: 'someArg', ...fill }],\n              },\n            );\n\n            t.eol();\n          });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"correctly","suites":["onlineParser",".token","parses interface def"],"updatePoint":{"line":981,"column":19},"line":981,"code":"      it('correctly', () => {\n        const { t } = getUtils(`\n          interface SomeInterface {\n            someField: SomeType!\n          }\n        `);\n        t.keyword('interface', { kind: 'InterfaceDef' });\n        t.name('SomeInterface');\n        t.punctuation('{');\n\n        t.property('someField', { kind: 'FieldDef' });\n        t.punctuation(':');\n        t.name('SomeType', { kind: 'NamedType' });\n        t.punctuation('!', { kind: 'FieldDef' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive","suites":["onlineParser",".token","parses interface def"],"updatePoint":{"line":1001,"column":26},"line":1001,"code":"      it('with a directive', () => {\n        const { t } = getUtils(`interface SomeInterface @someDirective`);\n\n        t.keyword('interface', { kind: 'InterfaceDef' });\n        t.name('SomeInterface');\n        expectDirective({ t }, { name: 'someDirective' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"implementing multiple interfaces","suites":["onlineParser",".token","parses interface def"],"updatePoint":{"line":1011,"column":42},"line":1011,"code":"      it('implementing multiple interfaces', () => {\n        const { t } = getUtils(\n          `interface AnInterface implements SomeInterface & AnotherInterface & YetAnotherInterface`,\n        );\n\n        t.keyword('interface', { kind: 'InterfaceDef' });\n        t.name('AnInterface');\n        t.keyword('implements', { kind: 'Implements' });\n        t.name('SomeInterface', { kind: 'NamedType' });\n        t.punctuation('&', { kind: 'Implements' });\n        t.name('AnotherInterface', { kind: 'NamedType' });\n        t.punctuation('&', { kind: 'Implements' });\n        t.name('YetAnotherInterface', { kind: 'NamedType' });\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive having argument of type ","suites":["onlineParser",".token","parses interface def"],"updatePoint":{"line":1030,"column":67},"line":1030,"code":"          it(`with a directive having argument of type ${fill.type}`, () => {\n            t.keyword('interface', { kind: 'InterfaceDef' });\n            t.name('SomeInterface');\n            expectDirective(\n              { t, stream },\n              {\n                name: 'someDirective',\n                onKind: 'InterfaceDef',\n                args: [{ name: 'someArg', ...fill }],\n              },\n            );\n\n            t.eol();\n          });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"correctly","suites":["onlineParser",".token","parses field defs"],"updatePoint":{"line":1049,"column":19},"line":1049,"code":"      it('correctly', () => {\n        const { t } = getUtils(`\n          type SomeType {\n            someField: AnotherType!\n          }\n        `);\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.punctuation('{');\n\n        t.property('someField', { kind: 'FieldDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n        t.punctuation('!', { kind: 'FieldDef' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with an argument","suites":["onlineParser",".token","parses field defs"],"updatePoint":{"line":1069,"column":26},"line":1069,"code":"      it('with an argument', () => {\n        const { t } = getUtils(`\n          type SomeType {\n            someField(someArg: AnotherType): [SomeAnotherType!]!\n          }\n        `);\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.punctuation('{');\n\n        t.property('someField', { kind: 'FieldDef' });\n        t.punctuation(/\\(/, { kind: 'ArgumentsDef' });\n        t.attribute('someArg', { kind: 'InputValueDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n        t.punctuation(/\\)/, { kind: 'FieldDef' });\n        t.punctuation(':');\n        t.punctuation(/\\[/, { kind: 'ListType' });\n        t.name('SomeAnotherType', { kind: 'NamedType' });\n        t.punctuation('!', { kind: 'ListType' });\n        t.punctuation(/\\]/);\n        t.punctuation('!', { kind: 'FieldDef' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive","suites":["onlineParser",".token","parses field defs"],"updatePoint":{"line":1097,"column":26},"line":1097,"code":"      it('with a directive', () => {\n        const { t } = getUtils(`\n          type SomeType {\n            someField: AnotherType @someDirective\n          }\n        `);\n\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.punctuation('{');\n\n        t.property('someField', { kind: 'FieldDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n        expectDirective({ t }, { name: 'someDirective' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with multiple directives","suites":["onlineParser",".token","parses field defs"],"updatePoint":{"line":1118,"column":34},"line":1118,"code":"      it('with multiple directives', () => {\n        const { t } = getUtils(`\n          type SomeType {\n            someField: AnotherType @someDirective @anotherDirective\n          }\n        `);\n\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.punctuation('{');\n\n        t.property('someField', { kind: 'FieldDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n        expectDirective({ t }, { name: 'someDirective' });\n        expectDirective({ t }, { name: 'anotherDirective' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive having arguments of type ","suites":["onlineParser",".token","parses field defs"],"updatePoint":{"line":1147,"column":68},"line":1147,"code":"          it(`with a directive having arguments of type ${fill.type}`, () => {\n            t.keyword('type', { kind: 'ObjectTypeDef' });\n            t.name('SomeType');\n            t.punctuation('{');\n\n            t.property('someField', { kind: 'FieldDef' });\n            t.punctuation(':');\n            t.name('AnotherType', { kind: 'NamedType' });\n            expectDirective(\n              { t, stream },\n              {\n                name: 'someDirective',\n                onKind: 'FieldDef',\n                args: [{ name: 'someArg', ...fill }],\n              },\n            );\n\n            t.punctuation('}', { kind: 'Document' });\n\n            t.eol();\n          });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"correctly","suites":["onlineParser",".token","parses extend type def"],"updatePoint":{"line":1173,"column":19},"line":1173,"code":"      it('correctly', () => {\n        const { t } = getUtils(`\n          extend type SomeType {\n            someField: AnotherType\n          }\n        `);\n\n        t.keyword('extend', { kind: 'ExtendDef' });\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.punctuation('{');\n\n        t.property('someField', { kind: 'FieldDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with multiple directives","suites":["onlineParser",".token","parses extend type def"],"updatePoint":{"line":1194,"column":34},"line":1194,"code":"      it('with multiple directives', () => {\n        const { t } = getUtils(`\n          extend type SomeType {\n            someField: AnotherType @someDirective @anotherDirective\n          }\n        `);\n\n        t.keyword('extend', { kind: 'ExtendDef' });\n        t.keyword('type', { kind: 'ObjectTypeDef' });\n        t.name('SomeType');\n        t.punctuation('{');\n\n        t.property('someField', { kind: 'FieldDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n        expectDirective({ t }, { name: 'someDirective' });\n        expectDirective({ t }, { name: 'anotherDirective' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"correctly","suites":["onlineParser",".token","parses input type def"],"updatePoint":{"line":1219,"column":19},"line":1219,"code":"      it('correctly', () => {\n        const { t } = getUtils(`\n          input SomeInputType {\n            someField: AnotherType\n          }\n        `);\n\n        t.keyword('input', { kind: 'InputDef' });\n        t.name('SomeInputType');\n        t.punctuation('{');\n\n        t.attribute('someField', { kind: 'InputValueDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with multiple directives","suites":["onlineParser",".token","parses input type def"],"updatePoint":{"line":1239,"column":34},"line":1239,"code":"      it('with multiple directives', () => {\n        const { t } = getUtils(`\n          input SomeInputType {\n            someField: AnotherType @someDirective @anotherDirective\n          }\n        `);\n\n        t.keyword('input', { kind: 'InputDef' });\n        t.name('SomeInputType');\n        t.punctuation('{');\n\n        t.attribute('someField', { kind: 'InputValueDef' });\n        t.punctuation(':');\n        t.name('AnotherType', { kind: 'NamedType' });\n        expectDirective({ t }, { name: 'someDirective' });\n        expectDirective({ t }, { name: 'anotherDirective' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"correctly","suites":["onlineParser",".token","parses enum type def"],"updatePoint":{"line":1263,"column":19},"line":1263,"code":"      it('correctly', () => {\n        const { t } = getUtils(`\n          enum SomeEnum {\n            SOME_ENUM_VALUE\n            ANOTHER_ENUM_VALUE\n          }\n        `);\n\n        t.keyword('enum', { kind: 'EnumDef' });\n        t.name('SomeEnum');\n        t.punctuation('{');\n\n        t.value('Enum', 'SOME_ENUM_VALUE', { kind: 'EnumValueDef' });\n        t.value('Enum', 'ANOTHER_ENUM_VALUE', { kind: 'EnumValueDef' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive","suites":["onlineParser",".token","parses enum type def"],"updatePoint":{"line":1283,"column":26},"line":1283,"code":"      it('with a directive', () => {\n        const { t } = getUtils(`\n          enum SomeEnum @someDirective {\n            SOME_ENUM_VALUE\n            ANOTHER_ENUM_VALUE\n          }\n        `);\n\n        t.keyword('enum', { kind: 'EnumDef' });\n        t.name('SomeEnum');\n        expectDirective({ t }, { name: 'someDirective' });\n        t.punctuation('{', { kind: 'EnumDef' });\n\n        t.value('Enum', 'SOME_ENUM_VALUE', { kind: 'EnumValueDef' });\n        t.value('Enum', 'ANOTHER_ENUM_VALUE', { kind: 'EnumValueDef' });\n\n        t.punctuation('}', { kind: 'Document' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"correctly","suites":["onlineParser",".token","parses scalar type def"],"updatePoint":{"line":1306,"column":19},"line":1306,"code":"      it('correctly', () => {\n        const { t } = getUtils(`scalar SomeScalar`);\n\n        t.keyword('scalar', { kind: 'ScalarDef' });\n        t.name('SomeScalar');\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive","suites":["onlineParser",".token","parses scalar type def"],"updatePoint":{"line":1315,"column":26},"line":1315,"code":"      it('with a directive', () => {\n        const { t } = getUtils(`scalar SomeScalar @someDirective`);\n\n        t.keyword('scalar', { kind: 'ScalarDef' });\n        t.name('SomeScalar');\n        expectDirective({ t }, { name: 'someDirective' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"correctly","suites":["onlineParser",".token","parses union type def"],"updatePoint":{"line":1327,"column":19},"line":1327,"code":"      it('correctly', () => {\n        const { t } = getUtils(`union SomeUnionType = SomeType | AnotherType`);\n\n        t.keyword('union', { kind: 'UnionDef' });\n        t.name('SomeUnionType');\n        t.punctuation('=');\n        t.name('SomeType', { kind: 'NamedType' });\n        t.punctuation('|', { kind: 'UnionDef' });\n        t.name('AnotherType', { kind: 'NamedType' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with a directive","suites":["onlineParser",".token","parses union type def"],"updatePoint":{"line":1340,"column":26},"line":1340,"code":"      it('with a directive', () => {\n        const { t } = getUtils(\n          `union SomeUnionType @someDirective = SomeType | AnotherType`,\n        );\n\n        t.keyword('union', { kind: 'UnionDef' });\n        t.name('SomeUnionType');\n        expectDirective({ t }, { name: 'someDirective' });\n        t.punctuation('=', { kind: 'UnionDef' });\n        t.name('SomeType', { kind: 'NamedType' });\n        t.punctuation('|', { kind: 'UnionDef' });\n        t.name('AnotherType', { kind: 'NamedType' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"with multiple locations","suites":["onlineParser",".token","parses directive type def"],"updatePoint":{"line":1358,"column":33},"line":1358,"code":"      it('with multiple locations', () => {\n        const { t } = getUtils(\n          `directive @someDirective on FIELD_DEFINITION | ENUM_VALUE `,\n        );\n\n        t.keyword('directive', { kind: 'DirectiveDef' });\n        t.meta('@');\n        t.meta('someDirective');\n        t.keyword('on');\n        t.value('Enum', 'FIELD_DEFINITION', { kind: 'DirectiveLocation' });\n        t.punctuation('|', { kind: 'DirectiveDef' });\n        t.value('Enum', 'ENUM_VALUE', { kind: 'DirectiveLocation' });\n\n        t.eol();\n      });","file":"OnlineParser-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns an optional rule","suites":["opt"],"updatePoint":{"line":4,"column":30},"line":4,"code":"  it('returns an optional rule', () => {\n    const rule = {};\n\n    const result = opt(rule);\n\n    expect(result).toEqual({ ofRule: rule });\n  });","file":"RuleHelpers-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns a list of rule","suites":["list"],"updatePoint":{"line":14,"column":28},"line":14,"code":"  it('returns a list of rule', () => {\n    const rule = {};\n    const separator = ',';\n\n    const result = list(rule, separator);\n\n    expect(result).toEqual({ ofRule: rule, separator, isList: true });\n  });","file":"RuleHelpers-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns rule which performs correct match","suites":["butNot"],"updatePoint":{"line":39,"column":47},"line":39,"code":"  it('returns rule which performs correct match', () => {\n    const newRule = butNot(rule, exclusionRules);\n\n    expect(newRule.match(token('Foo'))).toEqual(true);\n    expect(newRule.match(token('123Foo'))).toEqual(false);\n  });","file":"RuleHelpers-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns rule which skip results from exclusion rule match","suites":["butNot"],"updatePoint":{"line":46,"column":63},"line":46,"code":"  it('returns rule which skip results from exclusion rule match', () => {\n    const newRule = butNot(rule, exclusionRules);\n\n    expect(newRule.match(token('Bar'))).toEqual(false);\n  });","file":"RuleHelpers-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"returns rule which results in false if no original match present","suites":["butNot"],"updatePoint":{"line":52,"column":70},"line":52,"code":"  it('returns rule which results in false if no original match present', () => {\n    const newRule = butNot({}, exclusionRules);\n\n    expect(newRule.match(token('a'))).toEqual(false);\n  });","file":"RuleHelpers-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"build correct rule for token of a kind","suites":["t"],"updatePoint":{"line":60,"column":44},"line":60,"code":"  it('build correct rule for token of a kind', () => {\n    const rule = t('Name', 'def');\n\n    expect(rule.style).toEqual('def');\n    expect(rule.match({ kind: 'Name' })).toEqual(true);\n    expect(rule.match({ kind: 'Punctuation' })).toEqual(false);\n  });","file":"RuleHelpers-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"build correct rule for puncuation token of a value","suites":["p"],"updatePoint":{"line":70,"column":56},"line":70,"code":"  it('build correct rule for puncuation token of a value', () => {\n    const rule = p('(');\n\n    expect(rule.style).toEqual('punctuation');\n    expect(rule.match({ kind: 'Punctuation', value: '(' })).toEqual(true);\n    expect(rule.match({ kind: 'Punctuation', value: ')' })).toEqual(false);\n  });","file":"RuleHelpers-test.ts","skipped":false,"dir":"packages/graphql-language-service-parser/src/__tests__"},{"name":"should apply extensions","suites":["GraphQLCache","getGraphQLCache"],"updatePoint":{"line":57,"column":31},"line":57,"code":"    it('should apply extensions', async () => {\n      const extension: GraphQLExtensionDeclaration = config => {\n        return {\n          name: 'extension-used', // Just adding a key to the config to demo extension usage\n        };\n      };\n      const extensions = [extension];\n      const cacheWithExtensions = await getGraphQLCache({\n        loadConfigOptions: { rootDir: configDir, extensions },\n        parser: parseDocument,\n      });\n      const config = cacheWithExtensions.getGraphQLConfig();\n      expect('extensions' in config).toBe(true);\n      expect(config.extensions.has('extension-used')).toBeTruthy();\n      expect(config.extensions.get('extension-used')).toEqual({\n        name: 'extension-used',\n      });\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"generates the schema correctly for the test app config","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":79,"column":62},"line":79,"code":"    it('generates the schema correctly for the test app config', async () => {\n      const schema = await cache.getSchema('testWithSchema');\n      expect(schema instanceof GraphQLSchema).toEqual(true);\n    });","file":"GraphQLCache-test.ts","skipped":true,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"generates the schema correctly from endpoint","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":84,"column":52},"line":84,"code":"    it('generates the schema correctly from endpoint', async () => {\n      const introspectionResult = {\n        data: introspectionFromSchema(\n          await graphQLRC.getProject('testWithSchema').getSchema(),\n          { descriptions: true },\n        ),\n      };\n      fetchMock.mock({\n        matcher: '*',\n        response: {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: introspectionResult,\n        },\n      });\n\n      const schema = await cache.getSchema('testWithEndpoint');\n      expect(fetchMock.called('*')).toEqual(true);\n      expect(schema instanceof GraphQLSchema).toEqual(true);\n    });","file":"GraphQLCache-test.ts","skipped":true,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"does not generate a schema without a schema path or endpoint","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":106,"column":68},"line":106,"code":"    it('does not generate a schema without a schema path or endpoint', async () => {\n      const schema = await cache.getSchema('testWithoutSchema');\n      expect(schema instanceof GraphQLSchema).toEqual(false);\n    });","file":"GraphQLCache-test.ts","skipped":true,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"extend the schema with appropriate custom directive","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":111,"column":59},"line":111,"code":"    it('extend the schema with appropriate custom directive', async () => {\n      const schema = (await cache.getSchema(\n        'testWithCustomDirectives',\n      )) as GraphQLSchema;\n      expect(wihtoutASTNode(schema.getDirective('customDirective'))).toEqual(\n        // objectContaining is used to pass this test without changing the code if more properties are added in GraphQLDirective class in the new version of graphql module.\n        expect.objectContaining({\n          args: [],\n          description: undefined,\n          isRepeatable: false,\n          locations: ['FIELD'],\n          name: 'customDirective',\n        }),\n      );\n    });","file":"GraphQLCache-test.ts","skipped":true,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"extend the schema with appropriate custom directive 2","suites":["GraphQLCache","getSchema"],"updatePoint":{"line":127,"column":61},"line":127,"code":"    it('extend the schema with appropriate custom directive 2', async () => {\n      const schema = (await cache.getSchema('testWithSchema')) as GraphQLSchema;\n      expect(wihtoutASTNode(schema.getDirective('customDirective'))).toEqual(\n        // objectContaining is used to pass this test without changing the code if more properties are added in GraphQLDirective class in the new version of graphql module.\n        expect.objectContaining({\n          args: [],\n          description: undefined,\n          isRepeatable: false,\n          locations: ['FRAGMENT_SPREAD'],\n          name: 'customDirective',\n        }),\n      );\n    });","file":"GraphQLCache-test.ts","skipped":true,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds fragments referenced in Relay queries","suites":["GraphQLCache","getFragmentDependencies"],"updatePoint":{"line":166,"column":51},"line":166,"code":"    it('finds fragments referenced in Relay queries', async () => {\n      const text =\n        'module.exports = Relay.createContainer(' +\n        'DispatchResumeCard, {\\n' +\n        '  fragments: {\\n' +\n        '    candidate: () => graphql`\\n' +\n        '      query A { ...Duck ...Cat }\\n' +\n        '    `,\\n' +\n        '  },\\n' +\n        '});';\n      const contents = parseDocument(text, 'test.js');\n      const result = await cache.getFragmentDependenciesForAST(\n        parse(contents[0].query),\n        fragmentDefinitions,\n      );\n      expect(result.length).toEqual(2);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds fragments referenced from the query","suites":["GraphQLCache","getFragmentDependencies"],"updatePoint":{"line":184,"column":49},"line":184,"code":"    it('finds fragments referenced from the query', async () => {\n      const ast = parse('query A { ...Duck }');\n\n      const result = await cache.getFragmentDependenciesForAST(\n        ast,\n        fragmentDefinitions,\n      );\n      expect(result.length).toEqual(1);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"caches fragments found through single glob in `documents`","suites":["GraphQLCache","getFragmentDefinitions"],"updatePoint":{"line":196,"column":65},"line":196,"code":"    it('caches fragments found through single glob in `documents`', async () => {\n      const config = graphQLRC.getProject('testSingularIncludesGlob');\n      const fragmentDefinitions = await cache.getFragmentDefinitions(config);\n      expect(fragmentDefinitions.get('testFragment')).not.toBeUndefined();\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"caches fragments found through multiple globs in `documents`","suites":["GraphQLCache","getFragmentDefinitions"],"updatePoint":{"line":202,"column":68},"line":202,"code":"    it('caches fragments found through multiple globs in `documents`', async () => {\n      const config = graphQLRC.getProject('testMultipleIncludes');\n      const fragmentDefinitions = await cache.getFragmentDefinitions(config);\n      expect(fragmentDefinitions.get('testFragment')).not.toBeUndefined();\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"handles empty documents","suites":["GraphQLCache","getFragmentDefinitions"],"updatePoint":{"line":208,"column":31},"line":208,"code":"    it('handles empty documents', async () => {\n      const config = graphQLRC.getProject('testNoIncludes');\n      const fragmentDefinitions = await cache.getFragmentDefinitions(config);\n      expect(fragmentDefinitions.get('testFragment')).toBeUndefined();\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"handles non-existent documents","suites":["GraphQLCache","getFragmentDefinitions"],"updatePoint":{"line":214,"column":38},"line":214,"code":"    it('handles non-existent documents', async () => {\n      const config = graphQLRC.getProject('testBadIncludes');\n      const fragmentDefinitions = await cache.getFragmentDefinitions(config);\n      expect(fragmentDefinitions.get('testFragment')).toBeUndefined();\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"finds named types referenced from the SDL","suites":["GraphQLCache","getNamedTypeDependencies"],"updatePoint":{"line":249,"column":49},"line":249,"code":"    it('finds named types referenced from the SDL', async () => {\n      const result = await cache.getObjectTypeDependenciesForAST(\n        parsedQuery,\n        namedTypeDefinitions,\n      );\n      expect(result.length).toEqual(1);\n    });","file":"GraphQLCache-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"logs to stdout","suites":["Logger"],"updatePoint":{"line":31,"column":20},"line":31,"code":"  it('logs to stdout', () => {\n    const logger = new Logger(tmpdir());\n    logger.info('log test');\n\n    expect(mockedStdoutWrite.mock.calls.length).toBe(1);\n    expect(mockedStdoutWrite.mock.calls[0][0]).toContain('log test');\n    expect(mockedStderrWrite.mock.calls.length).toBe(0);\n  });","file":"Logger-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"logs to stderr","suites":["Logger"],"updatePoint":{"line":40,"column":20},"line":40,"code":"  it('logs to stderr', () => {\n    const logger = new Logger(tmpdir());\n    logger.error('error test');\n\n    expect(mockedStdoutWrite.mock.calls.length).toBe(0);\n    expect(mockedStderrWrite.mock.calls.length).toBe(1);\n    expect(mockedStderrWrite.mock.calls[0][0]).toContain('error test');\n  });","file":"Logger-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"only writes to stderr with \"stderrOnly\" enabled","suites":["Logger"],"updatePoint":{"line":49,"column":53},"line":49,"code":"  it('only writes to stderr with \"stderrOnly\" enabled', () => {\n    const stderrOnly = true;\n    const logger = new Logger(tmpdir(), stderrOnly);\n    logger.info('info test');\n    logger.warn('warn test');\n    // log is only logged to file now :)\n    logger.log('log test');\n    logger.error('error test');\n\n    expect(mockedStdoutWrite.mock.calls.length).toBe(0);\n    expect(mockedStderrWrite.mock.calls.length).toBe(3);\n    expect(mockedStderrWrite.mock.calls[0][0]).toContain('info test');\n    expect(mockedStderrWrite.mock.calls[1][0]).toContain('warn test');\n    expect(mockedStderrWrite.mock.calls[2][0]).toContain('error test');\n  });","file":"Logger-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"initializes properly and opens a file","suites":["MessageProcessor"],"updatePoint":{"line":139,"column":43},"line":139,"code":"  it('initializes properly and opens a file', async () => {\n    const { capabilities } = await messageProcessor.handleInitializeRequest(\n      // @ts-ignore\n      {\n        rootPath: __dirname,\n      },\n      null,\n      __dirname,\n    );\n    expect(capabilities.definitionProvider).toEqual(true);\n    expect(capabilities.workspaceSymbolProvider).toEqual(true);\n    expect(capabilities.completionProvider.resolveProvider).toEqual(true);\n    expect(capabilities.textDocumentSync).toEqual(1);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs completion requests properly","suites":["MessageProcessor"],"updatePoint":{"line":154,"column":39},"line":154,"code":"  it('runs completion requests properly', async () => {\n    const uri = `${queryPathUri}/test2.graphql`;\n    const query = 'test';\n    messageProcessor._textDocumentCache.set(uri, {\n      version: 0,\n      contents: [\n        {\n          query,\n          range: new Range(new Position(0, 0), new Position(0, 0)),\n        },\n      ],\n    });\n\n    const test = {\n      position: new Position(0, 0),\n      textDocument: { uri },\n    };\n    const result = await messageProcessor.handleCompletionRequest(test);\n    expect(result).toEqual({\n      items: [{ label: `${query} at ${uri}` }],\n      isIncomplete: false,\n    });\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs document symbol requests","suites":["MessageProcessor"],"updatePoint":{"line":178,"column":35},"line":178,"code":"  it('runs document symbol requests', async () => {\n    const uri = `${queryPathUri}/test3.graphql`;\n    const validQuery = `\n  {\n    hero(episode: EMPIRE){\n      ...testFragment\n    }\n  }\n  `;\n\n    const newDocument = {\n      textDocument: {\n        text: validQuery,\n        uri,\n        version: 0,\n      },\n    };\n\n    messageProcessor._textDocumentCache.set(uri, {\n      version: 0,\n      contents: [\n        {\n          query: validQuery,\n          range: new Range(new Position(0, 0), new Position(0, 0)),\n        },\n      ],\n    });\n\n    const test = {\n      textDocument: newDocument.textDocument,\n    };\n\n    const result = await messageProcessor.handleDocumentSymbolRequest(test);\n\n    expect(result).not.toBeUndefined();\n    expect(result.length).toEqual(1);\n    expect(result[0].name).toEqual('item');\n    expect(result[0].kind).toEqual(SymbolKind.Field);\n    expect(result[0].location.range).toEqual({\n      start: { line: 1, character: 2 },\n      end: { line: 1, character: 4 },\n    });\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"properly changes the file cache with the didChange handler","suites":["MessageProcessor"],"updatePoint":{"line":222,"column":64},"line":222,"code":"  it('properly changes the file cache with the didChange handler', async () => {\n    const uri = `${queryPathUri}/test.graphql`;\n    messageProcessor._textDocumentCache.set(uri, {\n      version: 1,\n      contents: [\n        {\n          query: '',\n          range: new Range(new Position(0, 0), new Position(0, 0)),\n        },\n      ],\n    });\n    const textDocumentChangedString = `\n      {\n        hero(episode: NEWHOPE){\n          name\n        }\n      }\n      `;\n\n    const result = await messageProcessor.handleDidChangeNotification({\n      textDocument: {\n        // @ts-ignore\n        text: textDocumentTestString,\n        uri,\n        version: 1,\n      },\n      contentChanges: [\n        { text: textDocumentTestString },\n        { text: textDocumentChangedString },\n      ],\n    });\n    // Query fixed, no more errors\n    expect(result.diagnostics.length).toEqual(0);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"does not crash on null value returned in response to workspace configuration","suites":["MessageProcessor"],"updatePoint":{"line":257,"column":82},"line":257,"code":"  it('does not crash on null value returned in response to workspace configuration', async () => {\n    const previousConfigurationValue = getConfigurationReturnValue;\n    getConfigurationReturnValue = null;\n    await expect(\n      messageProcessor.handleDidChangeConfiguration(),\n    ).resolves.toStrictEqual({});\n    getConfigurationReturnValue = previousConfigurationValue;\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"properly removes from the file cache with the didClose handler","suites":["MessageProcessor"],"updatePoint":{"line":266,"column":68},"line":266,"code":"  it('properly removes from the file cache with the didClose handler', async () => {\n    await messageProcessor.handleDidCloseNotification(initialDocument);\n\n    const position = { line: 4, character: 5 };\n    const params = { textDocument: initialDocument.textDocument, position };\n\n    // Should throw because file has been deleted from cache\n    return messageProcessor\n      .handleCompletionRequest(params)\n      .then(result => expect(result).toEqual(null))\n      .catch(() => {});\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"runs definition requests","suites":["MessageProcessor"],"updatePoint":{"line":280,"column":30},"line":280,"code":"  it('runs definition requests', async () => {\n    jest.setTimeout(10000);\n    const validQuery = `\n  {\n    hero(episode: EMPIRE){\n      ...testFragment\n    }\n  }\n  `;\n\n    const newDocument = {\n      textDocument: {\n        text: validQuery,\n        uri: `${queryPathUri}/test3.graphql`,\n        version: 1,\n      },\n    };\n    messageProcessor._getCachedDocument = (_uri: string) => ({\n      version: 1,\n      contents: [\n        {\n          query: validQuery,\n          range: new Range(new Position(0, 0), new Position(20, 4)),\n        },\n      ],\n    });\n\n    await messageProcessor.handleDidOpenOrSaveNotification(newDocument);\n\n    const test = {\n      position: new Position(3, 15),\n      textDocument: newDocument.textDocument,\n    };\n\n    const result = await messageProcessor.handleDefinitionRequest(test);\n    await expect(result[0].uri).toEqual(`${queryPathUri}/test3.graphql`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"updates config for standard config filename changes","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":325,"column":59},"line":325,"code":"    it('updates config for standard config filename changes', async () => {\n      await messageProcessor.handleDidOpenOrSaveNotification({\n        textDocument: {\n          uri: `${pathToFileURL('.')}/.graphql.config.js`,\n          languageId: 'js',\n          version: 0,\n          text: '',\n        },\n      });\n\n      expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"updates config for custom config filename changes","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":338,"column":57},"line":338,"code":"    it('updates config for custom config filename changes', async () => {\n      const customConfigName = 'custom-config-name.yml';\n      messageProcessor._settings = { load: { fileName: customConfigName } };\n\n      await messageProcessor.handleDidOpenOrSaveNotification({\n        textDocument: {\n          uri: `${pathToFileURL('.')}/${customConfigName}`,\n          languageId: 'js',\n          version: 0,\n          text: '',\n        },\n      });\n\n      expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in tagged templates","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":355,"column":53},"line":355,"code":"  it('parseDocument finds queries in tagged templates', async () => {\n    const text = `\n// @flow\nimport {gql} from 'react-apollo';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = gql\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.js');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in tagged templates using typescript","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":385,"column":70},"line":385,"code":"  it('parseDocument finds queries in tagged templates using typescript', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = gql\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.ts');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in tagged templates using tsx","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":414,"column":63},"line":414,"code":"  it('parseDocument finds queries in tagged templates using tsx', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = gql\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {\n  return <div>{QUERY}</div>\n}`;\n\n    const contents = parseDocument(text, 'test.tsx');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in multi-expression tagged templates using tsx","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":445,"column":80},"line":445,"code":"  it('parseDocument finds queries in multi-expression tagged templates using tsx', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\nconst someValue = 'value'\nconst QUERY: string = gql\\`\nquery Test {\n  test {\n    value\n    $\\{someValue}\n    ...FragmentsComment\n  }\n  $\\{someValue}\n}\\`\n\nexport function Example(arg: string) {\n  return <div>{QUERY}</div>\n}`;\n\n    const contents = parseDocument(text, 'test.tsx');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    \n    ...FragmentsComment\n  }\n  \n}`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in multi-expression tagged template with declarations with using tsx","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":477,"column":102},"line":477,"code":"  it('parseDocument finds queries in multi-expression tagged template with declarations with using tsx', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\nconst someValue = 'value'\ntype SomeType = { test: any }\nconst QUERY: string = gql<SomeType>\\`\nquery Test {\n  test {\n    value\n    $\\{someValue}\n    ...FragmentsComment\n  }\n  $\\{someValue}\n}\\`\n\nexport function Example(arg: string) {\n  return <div>{QUERY}</div>\n}`;\n\n    const contents = parseDocument(text, 'test.tsx');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    \n    ...FragmentsComment\n  }\n  \n}`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in multi-expression template strings using tsx","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":510,"column":80},"line":510,"code":"  it('parseDocument finds queries in multi-expression template strings using tsx', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\nconst someValue = 'value'\nconst QUERY: string =\n/* GraphQL */\n\\`\nquery Test {\n  test {\n    value\n    \\${someValue}\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {\n  return <div>{QUERY}</div>\n}`;\n\n    const contents = parseDocument(text, 'test.tsx');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    \n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in #graphql-annotated templates","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":545,"column":65},"line":545,"code":"  it('parseDocument finds queries in #graphql-annotated templates', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = \\`#graphql\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.ts');\n    expect(contents[0].query).toEqual(`#graphql\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument finds queries in /*GraphQL*/-annotated templates","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":574,"column":68},"line":574,"code":"  it('parseDocument finds queries in /*GraphQL*/-annotated templates', async () => {\n    const text = `\nimport {gql} from 'react-apollo';\nimport {B} from 'B';\nimport A from './A';\n\nconst QUERY: string = /* GraphQL */ \\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.ts');\n    expect(contents[0].query).toEqual(`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n`);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"parseDocument ignores non gql tagged templates","suites":["MessageProcessor","handleDidOpenOrSaveNotification"],"updatePoint":{"line":603,"column":52},"line":603,"code":"  it('parseDocument ignores non gql tagged templates', async () => {\n    const text = `\n// @flow\nimport randomthing from 'package';\nimport type {B} from 'B';\nimport A from './A';\n\nconst QUERY = randomthing\\`\nquery Test {\n  test {\n    value\n    ...FragmentsComment\n  }\n}\n\\${A.fragments.test}\n\\`\n\nexport function Example(arg: string) {}`;\n\n    const contents = parseDocument(text, 'test.js');\n    expect(contents.length).toEqual(0);\n  });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"skips config updates for normal file changes","suites":["MessageProcessor","handleWatchedFilesChangedNotification"],"updatePoint":{"line":634,"column":52},"line":634,"code":"    it('skips config updates for normal file changes', async () => {\n      await messageProcessor.handleWatchedFilesChangedNotification({\n        changes: [\n          {\n            uri: `${pathToFileURL('.')}/foo.graphql`,\n            type: FileChangeType.Changed,\n          },\n        ],\n      });\n\n      expect(messageProcessor._updateGraphQLConfig).not.toHaveBeenCalled();\n    });","file":"MessageProcessor-test.ts","skipped":false,"dir":"packages/graphql-language-service-server/src/__tests__"},{"name":"returns an empty object if no variables exist","suites":["collectVariables"],"updatePoint":{"line":47,"column":51},"line":47,"code":"  it('returns an empty object if no variables exist', () => {\n    const variableToType = collectVariables(TestSchema, parse('{ id }'));\n    expect(variableToType).toEqual({});\n  });","file":"collectVariables.spec.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"collects variable types from a schema and query","suites":["collectVariables"],"updatePoint":{"line":52,"column":53},"line":52,"code":"  it('collects variable types from a schema and query', () => {\n    const variableToType = collectVariables(\n      TestSchema,\n      parse(`\n      query ($foo: Int, $bar: String) { id }\n    `),\n    );\n    expect(Object.keys(variableToType)).toEqual(['foo', 'bar']);\n    expect(variableToType.foo).toEqual(GraphQLInt);\n    expect(variableToType.bar).toEqual(GraphQLString);\n  });","file":"collectVariables.spec.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"collects variable types from multiple queries","suites":["collectVariables"],"updatePoint":{"line":64,"column":51},"line":64,"code":"  it('collects variable types from multiple queries', () => {\n    const variableToType = collectVariables(\n      TestSchema,\n      parse(`\n      query A($foo: Int, $bar: String) { id }\n      query B($foo: Int, $baz: Float) { id },\n      query B($foo: Int, $baz: Float, $bae: ExampleEnum) { id }\n    `),\n    );\n    expect(Object.keys(variableToType)).toEqual(['foo', 'bar', 'baz', 'bae']);\n    expect(variableToType.foo).toEqual(GraphQLInt);\n    expect(variableToType.bar).toEqual(GraphQLString);\n    expect(variableToType.baz).toEqual(GraphQLFloat);\n    expect(variableToType.baz).toEqual(GraphQLFloat);\n    expect(variableToType.bae).toEqual(TestEnum);\n  });","file":"collectVariables.spec.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"gets the node at the beginning","suites":["getASTNodeAtPosition"],"updatePoint":{"line":25,"column":36},"line":25,"code":"  it('gets the node at the beginning', () => {\n    const point = new Position(2, 0);\n    const node = getASTNodeAtPosition(doc, ast, point);\n    expect(node).not.toBeUndefined();\n    if (node != null) {\n      // @ts-ignore\n      expect(node.name.value).toEqual('field');\n    }\n  });","file":"getASTNodeAtPosition-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"does not find the node before the beginning","suites":["getASTNodeAtPosition"],"updatePoint":{"line":35,"column":49},"line":35,"code":"  it('does not find the node before the beginning', () => {\n    const point = new Position(0, 0);\n    const node = getASTNodeAtPosition(doc, ast, point);\n    expect(node).not.toBeUndefined();\n    if (node != null) {\n      expect(node.kind).toEqual('Document');\n    }\n  });","file":"getASTNodeAtPosition-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"gets the node at the end","suites":["getASTNodeAtPosition"],"updatePoint":{"line":44,"column":30},"line":44,"code":"  it('gets the node at the end', () => {\n    const point = new Position(2, 5);\n    const node = getASTNodeAtPosition(doc, ast, point);\n    expect(node).not.toBeUndefined();\n    if (node != null) {\n      // @ts-ignore\n      expect(node.name.value).toEqual('field');\n    }\n  });","file":"getASTNodeAtPosition-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"does not find the node after the end","suites":["getASTNodeAtPosition"],"updatePoint":{"line":54,"column":42},"line":54,"code":"  it('does not find the node after the end', () => {\n    const point = new Position(4, 0);\n    const node = getASTNodeAtPosition(doc, ast, point);\n    expect(node).not.toBeUndefined();\n    if (node != null) {\n      expect(node.kind).toEqual('Document');\n    }\n  });","file":"getASTNodeAtPosition-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"works for single lines","suites":["pointToOffset"],"updatePoint":{"line":65,"column":28},"line":65,"code":"  it('works for single lines', () => {\n    const text = 'lorem';\n    expect(pointToOffset(text, new Position(0, 2))).toEqual(2);\n  });","file":"getASTNodeAtPosition-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"takes EOL into account","suites":["pointToOffset"],"updatePoint":{"line":70,"column":28},"line":70,"code":"  it('takes EOL into account', () => {\n    const text = 'lorem\\n';\n    expect(pointToOffset(text, new Position(1, 0))).toEqual(text.length);\n  });","file":"getASTNodeAtPosition-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"should handle scalar types","suites":["getVariablesJSONSchema"],"updatePoint":{"line":25,"column":32},"line":25,"code":"  it('should handle scalar types', () => {\n    const variableToType = collectVariables(\n      schema,\n      parse(`query($id: ID, $string: String!, $boolean: Boolean, $number: Int!, $price: Float) {\n        characters{\n          name\n        }\n       }`),\n    );\n\n    const jsonSchema = getVariablesJSONSchema(variableToType);\n\n    expect(jsonSchema.required).toEqual(['string', 'number']);\n\n    expect(jsonSchema.properties).toEqual({\n      boolean: {\n        type: 'boolean',\n        description: 'Boolean',\n      },\n      string: {\n        type: 'string',\n        description: 'String!',\n      },\n      number: {\n        type: 'integer',\n        description: 'Int!',\n      },\n      price: {\n        description: 'Float',\n        type: 'number',\n      },\n    });\n  });","file":"getVariablesJSONSchema.spec.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"should handle input object types","suites":["getVariablesJSONSchema"],"updatePoint":{"line":59,"column":38},"line":59,"code":"  it('should handle input object types', () => {\n    const variableToType = collectVariables(\n      schema,\n      parse(`query($input: InputType!, $anotherInput: InputType) {\n        characters {\n          name\n        }\n       }`),\n    );\n\n    const jsonSchema = getVariablesJSONSchema(variableToType);\n\n    expect(jsonSchema.required).toEqual(['input']);\n\n    expect(jsonSchema.properties).toEqual({\n      input: {\n        $ref: '#/definitions/InputType',\n        description: 'InputType!',\n      },\n      anotherInput: {\n        $ref: '#/definitions/InputType',\n        description: 'example input type\\nInputType',\n      },\n    });\n    expect(jsonSchema.definitions).toEqual({\n      InputType: {\n        type: 'object',\n        description: 'example input type\\nInputType',\n        properties: {\n          key: {\n            description: 'example key\\nString!',\n            type: 'string',\n          },\n          value: {\n            description: 'example value\\nInt',\n            type: 'integer',\n            default: 42,\n          },\n          exampleObject: {\n            $ref: '#/definitions/ChildInputType',\n            description: 'nesting a whole object!\\nChildInputType!',\n          },\n          exampleList: {\n            type: 'array',\n            items: {\n              $ref: '#/definitions/ChildInputType',\n            },\n            description: 'list type with default\\n[ChildInputType]',\n            default: [\n              {\n                isChild: false,\n                favoriteBook: 'Binti',\n              },\n            ],\n          },\n          exampleScalarList: {\n            type: 'array',\n            description: '[String]!',\n            items: {\n              type: 'string',\n              description: 'String',\n            },\n            default: ['something'],\n          },\n        },\n        required: ['key', 'exampleObject', 'exampleScalarList'],\n      },\n      ChildInputType: {\n        type: 'object',\n        description: 'ChildInputType',\n        properties: {\n          isChild: {\n            type: 'boolean',\n            description: 'Boolean!',\n            default: true,\n          },\n          favoriteBook: {\n            type: 'string',\n            description: 'favorite book\\nString',\n            default: 'Where the wild things are',\n          },\n        },\n        required: ['isChild'],\n      },\n    });\n  });","file":"getVariablesJSONSchema.spec.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"should handle input object types with markdown","suites":["getVariablesJSONSchema"],"updatePoint":{"line":148,"column":52},"line":148,"code":"  it('should handle input object types with markdown', () => {\n    const variableToType = collectVariables(\n      schema,\n      parse(`query($input: InputType!, $anotherInput: InputType, $episode: Episode) {\n        characters {\n          name\n        }\n       }`),\n    );\n\n    const jsonSchema = getVariablesJSONSchema(variableToType, {\n      useMarkdownDescription: true,\n    });\n\n    expect(jsonSchema.required).toEqual(['input']);\n\n    expect(jsonSchema.properties).toEqual({\n      input: {\n        $ref: '#/definitions/InputType',\n        description: 'InputType!',\n        markdownDescription: mdTicks('InputType!'),\n      },\n      anotherInput: {\n        $ref: '#/definitions/InputType',\n        // description: 'example input type',\n        // TODO: fix this for non-nulls?\n        description: 'example input type\\nInputType',\n        markdownDescription: 'example input type\\n```graphql\\nInputType\\n```',\n      },\n      episode: {\n        enum: ['NEWHOPE', 'EMPIRE', 'JEDI'],\n        description: 'Episode',\n        type: 'string',\n        markdownDescription: mdTicks('Episode'),\n      },\n    });\n    expect(jsonSchema.definitions).toEqual({\n      InputType: {\n        type: 'object',\n        description: 'example input type\\nInputType',\n        markdownDescription: `example input type\\n${mdTicks('InputType')}`,\n        properties: {\n          key: {\n            description: 'example key\\nString!',\n            markdownDescription: `example key\\n${mdTicks('String!')}`,\n            type: 'string',\n          },\n          value: {\n            description: 'example value\\nInt',\n            markdownDescription: `example value\\n${mdTicks('Int')}`,\n            type: 'integer',\n            default: 42,\n          },\n          exampleObject: {\n            description: 'nesting a whole object!\\nChildInputType!',\n            markdownDescription: `nesting a whole object!\\n${mdTicks(\n              'ChildInputType!',\n            )}`,\n            $ref: '#/definitions/ChildInputType',\n          },\n          exampleList: {\n            type: 'array',\n            items: {\n              $ref: '#/definitions/ChildInputType',\n            },\n            description: `list type with default\\n[ChildInputType]`,\n            markdownDescription: `list type with default\\n${mdTicks(\n              '[ChildInputType]',\n            )}`,\n            default: [\n              {\n                isChild: false,\n                favoriteBook: 'Binti',\n              },\n            ],\n          },\n          exampleScalarList: {\n            type: 'array',\n            description: '[String]!',\n            markdownDescription: mdTicks('[String]!'),\n            items: {\n              type: 'string',\n              description: 'String',\n              markdownDescription: mdTicks('String'),\n            },\n            default: ['something'],\n          },\n        },\n        required: ['key', 'exampleObject', 'exampleScalarList'],\n      },\n      ChildInputType: {\n        description: 'ChildInputType',\n        markdownDescription: `${mdTicks('ChildInputType')}`,\n        properties: {\n          favoriteBook: {\n            default: 'Where the wild things are',\n            description: 'favorite book\\nString',\n            markdownDescription: 'favorite book\\n```graphql\\nString\\n```',\n            type: 'string',\n          },\n          isChild: {\n            default: true,\n            description: 'Boolean!',\n            markdownDescription: '```graphql\\nBoolean!\\n```',\n            type: 'boolean',\n          },\n        },\n        required: ['isChild'],\n        type: 'object',\n      },\n    });\n  });","file":"getVariablesJSONSchema.spec.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"constructs a IPosition object","suites":["Position"],"updatePoint":{"line":32,"column":35},"line":32,"code":"  it('constructs a IPosition object', () => {\n    const pos = new Position(3, 5);\n    expect(pos).not.toBeUndefined();\n    expect(pos.character).toEqual(5);\n    expect(pos.line).toEqual(3);\n  });","file":"Range-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"compares IPosition objects","suites":["Position"],"updatePoint":{"line":39,"column":32},"line":39,"code":"  it('compares IPosition objects', () => {\n    const posA = new Position(1, 2);\n    const posB = new Position(2, 2);\n    const posC = new Position(2, 3);\n    expect(posA.lessThanOrEqualTo(posB)).toEqual(true);\n    expect(posB.lessThanOrEqualTo(posC)).toEqual(true);\n    expect(posC.lessThanOrEqualTo(posA)).toEqual(false);\n  });","file":"Range-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"constructs a IRange object","suites":["Range"],"updatePoint":{"line":60,"column":32},"line":60,"code":"  it('constructs a IRange object', () => {\n    expect(range).not.toBeUndefined();\n    expect(range.start).toEqual(start);\n    expect(range.end).toEqual(end);\n  });","file":"Range-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"checks if it contains certain position","suites":["Range"],"updatePoint":{"line":66,"column":44},"line":66,"code":"  it('checks if it contains certain position', () => {\n    const posA = new Position(2, 4);\n    const posB = new Position(3, 5);\n    expect(range.containsPosition(posA)).toEqual(true);\n    expect(range.containsPosition(posB)).toEqual(false);\n  });","file":"Range-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"returns the offset to a position","suites":["offsetToPosition()"],"updatePoint":{"line":75,"column":38},"line":75,"code":"  it('returns the offset to a position', () => {\n    const position = offsetToPosition(text, absRange.start);\n    expect(position.character).toEqual(offsetRangeStart.character);\n    expect(position.line).toEqual(offsetRangeStart.line);\n  });","file":"Range-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"returns the range for a location","suites":["locToRange()"],"updatePoint":{"line":83,"column":38},"line":83,"code":"  it('returns the range for a location', () => {\n    const range = locToRange(text, absRange);\n    expect(range.start.character).toEqual(offsetRangeStart.character);\n    expect(range.start.line).toEqual(offsetRangeStart.line);\n    expect(range.end.character).toEqual(offsetRangeEnd.character);\n    expect(range.end.line).toEqual(offsetRangeEnd.line);\n  });","file":"Range-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"validates with custom rules defined","suites":["validateWithCustomRules"],"updatePoint":{"line":30,"column":41},"line":30,"code":"  it('validates with custom rules defined', () => {\n    const invalidAST = parse('query { human(id: \"a\") { name } }');\n    const customRules = [\n      (context: ValidationContext) => ({\n        Argument(node: ArgumentNode) {\n          // @ts-ignore\n          if (!/^\\d+$/.test(node.value.value)) {\n            context.reportError(\n              new GraphQLError(\n                'Argument ID must be a number written in string type.',\n                [node],\n              ),\n            );\n          }\n        },\n      }),\n    ];\n\n    const errors = validateWithCustomRules(schema, invalidAST, customRules);\n    expect(errors.length).toEqual(1);\n    expect(errors[0].message).toEqual(\n      'Argument ID must be a number written in string type.',\n    );\n  });","file":"validateWithCustomRules-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"validates properly when the query is in Relay compat mode","suites":["validateWithCustomRules"],"updatePoint":{"line":55,"column":63},"line":55,"code":"  it('validates properly when the query is in Relay compat mode', () => {\n    const astWithUnknownFragment = parse('query { ...UnknownFragment }');\n    const noErrors = validateWithCustomRules(\n      schema,\n      astWithUnknownFragment,\n      [],\n      true,\n    );\n    expect(noErrors.length).toEqual(0);\n\n    const errors = validateWithCustomRules(\n      schema,\n      astWithUnknownFragment,\n      [],\n      false,\n    );\n    expect(errors.length).toEqual(1);\n    expect(errors[0].message).toEqual('Unknown fragment \"UnknownFragment\".');\n  });","file":"validateWithCustomRules-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"},{"name":"does not validate for Relay @arguments and @argumentDefinition","suites":["validateWithCustomRules"],"updatePoint":{"line":75,"column":68},"line":75,"code":"  it('does not validate for Relay @arguments and @argumentDefinition', () => {\n    const astWithArgumentsDirective = parse(\n      'query { human(id: \"1\") @arguments(foo: \"bar\") { name } }',\n    );\n\n    expect(\n      validateWithCustomRules(schema, astWithArgumentsDirective, []),\n    ).toEqual([]);\n\n    const astWithArgumentDefDirective = parse(\n      '{ human(id: \"2\") { name @argumentDefinitions(arg: \"foo\") } }',\n    );\n\n    expect(\n      validateWithCustomRules(schema, astWithArgumentDefDirective),\n    ).toEqual([]);\n  });","file":"validateWithCustomRules-test.ts","skipped":false,"dir":"packages/graphql-language-service-utils/src/__tests__"}]}