{
    "repo": "NervJS/taro",
    "url": "https://github.com/NervJS/taro",
    "branch": "next",
    "configs": [
        {
            "package": "babel-plugin-transform-jsx-to-stylesheet",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "babel-plugin-transform-react-jsx-to-rn-stylesheet",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "babel-plugin-transform-taroapi",
            "lang": "ts",
            "dir": "packages/babel-plugin-transform-taroapi/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "babel-preset-taro",
            "lang": "js",
            "dir": "packages/babel-preset-taro/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "taro-css-to-react-native",
            "lang": "js",
            "dir": "packages/css-to-react-native/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "eslint-plugin-taro",
            "lang": "js",
            "dir": "packages/eslint-plugin-taro/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "postcss-pxtransform",
            "lang": "js",
            "dir": "packages/postcss-pxtransform/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/shared",
            "lang": "ts",
            "dir": "packages/shared/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "stylelint-config-taro-rn",
            "lang": "js",
            "dir": "packages/stylelint-config-taro-rn/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/cli",
            "lang": "ts",
            "dir": "packages/taro-cli/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/components-rn",
            "lang": "js",
            "dir": "packages/taro-components-rn/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@tarojs/components",
            "lang": "js",
            "dir": "packages/taro-components/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/extend",
            "lang": "js",
            "dir": "packages/taro-extend/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/taro-h5",
            "lang": "js",
            "dir": "packages/taro-h5/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/taro-loader",
            "lang": "js",
            "dir": "packages/taro-loader/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/mini-runner",
            "lang": "ts",
            "dir": "packages/taro-mini-runner/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/react",
            "lang": "js",
            "dir": "packages/taro-react/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/rn-runner",
            "lang": "ts",
            "dir": "packages/taro-rn-runner/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/rn-style-transformer",
            "lang": "js",
            "dir": "packages/taro-rn-style-transformer/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/rn-transformer",
            "lang": "js",
            "dir": "packages/taro-rn-transformer/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/taro-rn",
            "lang": "js",
            "dir": "packages/taro-rn/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/router",
            "lang": "js",
            "dir": "packages/taro-router/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@tarojs/runner-utils",
            "lang": "js",
            "dir": "packages/taro-runner-utils/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/runtime",
            "lang": "js",
            "dir": "packages/taro-runtime/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/webpack-runner",
            "lang": "ts",
            "dir": "packages/taro-webpack-runner/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/with-weapp",
            "lang": "js",
            "dir": "packages/taro-with-weapp/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "transform only one className to style as member",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 72,
                "column": 53
            },
            "line": 72,
            "code": "  it('transform only one className to style as member', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toBe(`\nimport { createElement, Component } from 'rax';\nimport appStyleSheet from './app.css';\n\nvar _styleSheet = appStyleSheet;\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"header\"]} />;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "transform multiple classNames to style as array",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 92,
                "column": 53
            },
            "line": 92,
            "code": "  it('transform multiple classNames to style as array', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header1 header2\" />;\n  }\n}`)).toBe(`\nimport { createElement, Component } from 'rax';\nimport appStyleSheet from './app.css';\n\nvar _styleSheet = appStyleSheet;\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header1\"], _styleSheet[\"header2\"]]} />;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "transform array, object and expressions",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 112,
                "column": 45
            },
            "line": 112,
            "code": "  it('transform array, object and expressions', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className={'header'}>\n      <div className={{ active: props.isActive }} />\n      <div className={['header1 header2', 'header3', { active: props.isActive }]} />\n      <div className={props.visible ? 'show' : 'hide'} />\n      <div className={getClassName()} />\n    </div>;\n  }\n}`)).toBe(`\nimport { createElement, Component } from 'rax';\nimport appStyleSheet from './app.css';\n\nvar _styleSheet = appStyleSheet;\n\n${getClassNameFunctionTemplate}\n\n${getStyleFunctionTemplete}\n\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"header\"]}>\n      <div style={_getStyle({ active: props.isActive })} />\n      <div style={_getStyle(['header1 header2', 'header3', { active: props.isActive }])} />\n      <div style={_getStyle(props.visible ? 'show' : 'hide')} />\n      <div style={_getStyle(getClassName())} />\n    </div>;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "combine one style and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 147,
                "column": 37
            },
            "line": 147,
            "code": "  it('combine one style and className', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\nimport style from './style.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header2\" style={styles.header1} />;\n  }\n}`)).toBe(`${mergeStylesFunctionTemplate}\n\nimport { createElement, Component } from 'rax';\nimport appStyleSheet from './app.css';\nimport styleStyleSheet from './style.css';\n\nvar _styleSheet = _mergeStyles(appStyleSheet, styleStyleSheet);\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header2\"], styles.header1]} />;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "combine inline style object and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 171,
                "column": 47
            },
            "line": 171,
            "code": "  it('combine inline style object and className', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" style={{\n      height: 100\n    }} />;\n  }\n}`)).toBe(`\nimport { createElement, Component } from 'rax';\nimport appStyleSheet from './app.css';\n\nvar _styleSheet = appStyleSheet;\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header\"], {\n      height: 100\n    }]} />;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "combine multiple styles and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 195,
                "column": 43
            },
            "line": 195,
            "code": "  it('combine multiple styles and className', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\nimport style from './style.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header2\" style={[styles.header1, styles.header3]} />;\n  }\n}`)).toBe(`${mergeStylesFunctionTemplate}\n\nimport { createElement, Component } from 'rax';\nimport appStyleSheet from './app.css';\nimport styleStyleSheet from './style.css';\n\nvar _styleSheet = _mergeStyles(appStyleSheet, styleStyleSheet);\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header2\"], styles.header1, styles.header3]} />;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "do not transfrom code when no css file",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 219,
                "column": 44
            },
            "line": 219,
            "code": "  it('do not transfrom code when no css file', () => {\n    const code = `\nimport { createElement, Component } from 'rax';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`;\n    expect(getTransfromCode(code)).toBe(code);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "transform scss file",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 230,
                "column": 25
            },
            "line": 230,
            "code": "  it('transform scss file', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toBe(`\nimport { createElement, Component } from 'rax';\nimport appStyleSheet from './app.scss';\n\nvar _styleSheet = appStyleSheet;\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"header\"]} />;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "transform scss file with hyphen(-) in the filename",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 250,
                "column": 56
            },
            "line": 250,
            "code": "  it('transform scss file with hyphen(-) in the filename', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app-style.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toBe(`\nimport { createElement, Component } from 'rax';\nimport app_styleStyleSheet from './app-style.scss';\n\nvar _styleSheet = app_styleStyleSheet;\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"header\"]} />;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "transform constant elements in render",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 270,
                "column": 43
            },
            "line": 270,
            "code": "  it('transform constant elements in render', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\nimport './app.css';\n\nrender(<div className=\"header\" />);\n`)).toBe(`\nimport { createElement, render } from 'rax';\nimport appStyleSheet from './app.css';\n\nvar _styleSheet = appStyleSheet;\nrender(<div style={_styleSheet[\"header\"]} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "transform stylus in render",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 283,
                "column": 32
            },
            "line": 283,
            "code": "  it('transform stylus in render', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\nimport './app.styl';\n\nrender(<div className=\"header\" />);\n`)).toBe(`\nimport { createElement, render } from 'rax';\nimport appStyleSheet from './app_styles';\n\nvar _styleSheet = appStyleSheet;\nrender(<div style={_styleSheet[\"header\"]} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__"
        },
        {
            "name": "no stylesheet import",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 73,
                "column": 26
            },
            "line": 73,
            "code": "  it('no stylesheet import', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform only one className to style as member",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 90,
                "column": 53
            },
            "line": 90,
            "code": "  it('transform only one className to style as member', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"header\"]} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform multiple classNames to style as array",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 110,
                "column": 53
            },
            "line": 110,
            "code": "  it('transform multiple classNames to style as array', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header1 header2\" />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header1\"], _styleSheet[\"header2\"]]} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform array, object and expressions",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 130,
                "column": 45
            },
            "line": 130,
            "code": "  it('transform array, object and expressions', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className={'header'}>\n      <div className={{ active: props.isActive }} />\n      <div className={['header1 header2', 'header3', { active: props.isActive }]} />\n      <div className={props.visible ? 'show' : 'hide'} />\n      <div className={getClassName()} />\n    </div>;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\n\n${getClassNameFunctionTemplate}\n\n${getStyleFunctionTemplete}\n\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"header\"]}>\n      <div style={_getStyle({\n        active: props.isActive\n      })} />\n      <div style={_getStyle(['header1 header2', 'header3', {\n        active: props.isActive\n      }])} />\n      <div style={_getStyle(props.visible ? 'show' : 'hide')} />\n      <div style={_getStyle(getClassName())} />\n    </div>;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine multiple anonymous css file",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 169,
                "column": 41
            },
            "line": 169,
            "code": "  it('combine multiple anonymous css file', () => {\n    expect(getTransfromCode(`import { createElement, Component } from 'rax';\nimport './app1.css';\nimport './app2.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header1 header2\" />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport app1CssStyleSheet from \"./app1.css\";\nimport app2CssStyleSheet from \"./app2.css\";\n\n${mergeStylesFunctionTemplate}\n\nvar _styleSheet = _mergeStyles(app1CssStyleSheet, app2CssStyleSheet);\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header1\"], _styleSheet[\"header2\"]]} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine the same filename style source",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 193,
                "column": 44
            },
            "line": 193,
            "code": "  it('combine the same filename style source', () => {\n    expect(getTransfromCode(`import { createElement, Component } from 'rax';\nimport './app.css';\nimport '../app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header1 header2\" />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nimport appCssStyleSheet1 from \"../app.css\";\n\n${mergeStylesFunctionTemplate}\n\nvar _styleSheet = _mergeStyles(appCssStyleSheet, appCssStyleSheet1);\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header1\"], _styleSheet[\"header2\"]]} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine one style and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 217,
                "column": 37
            },
            "line": 217,
            "code": "  it('combine one style and className', () => {\n    expect(getTransfromCode(`import { createElement, Component } from 'rax';\nimport './app.css';\nimport style from './style.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header2\" style={style.header1} />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nimport style from \"./style.css\";\n\n${mergeStylesFunctionTemplate}\n\nvar _styleSheet = _mergeStyles(appCssStyleSheet, style);\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header2\"], style.header1]} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine inline style object and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 241,
                "column": 47
            },
            "line": 241,
            "code": "  it('combine inline style object and className', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport \"./app.css\";\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" style={{\n      height: 100\n    }} />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header\"], {\n      height: 100\n    }]} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine multiple styles and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 264,
                "column": 43
            },
            "line": 264,
            "code": "  it('combine multiple styles and className', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\nimport style from './style.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header2\" style={[style.header1, style.header3]} />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nimport style from \"./style.css\";\n\n${mergeStylesFunctionTemplate}\n\nvar _styleSheet = _mergeStyles(appCssStyleSheet, style);\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header2\"], style.header1, style.header3]} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "do not transfrom code when no css file",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 288,
                "column": 44
            },
            "line": 288,
            "code": "  it('do not transfrom code when no css file', () => {\n    const code = `import { createElement, Component } from 'rax';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\\n\n}`;\n    expect(getTransfromCode(code)).toBe(code);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform scss file",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 298,
                "column": 25
            },
            "line": 298,
            "code": "  it('transform scss file', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appScssStyleSheet from \"./app.scss\";\nvar _styleSheet = appScssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"header\"]} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform scss file with hyphen(-) in the filename",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 317,
                "column": 56
            },
            "line": 317,
            "code": "  it('transform scss file with hyphen(-) in the filename', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app-style.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appStyleScssStyleSheet from \"./app-style.scss\";\nvar _styleSheet = appStyleScssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"header\"]} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform constant elements in render",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 336,
                "column": 43
            },
            "line": 336,
            "code": "  it('transform constant elements in render', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\nimport './app.css';\n\nrender(<div className=\"header\" />);\n`)).toBe(`import { createElement, render } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nvar _styleSheet = appCssStyleSheet;\nrender(<div style={_styleSheet[\"header\"]} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform stylus in render",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 347,
                "column": 32
            },
            "line": 347,
            "code": "  it('transform stylus in render', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\nimport './app.styl';\n\nrender(<div className=\"header\" />);\n`)).toBe(`import { createElement, render } from 'rax';\nimport appStylStyleSheet from \"./app.styl\";\nvar _styleSheet = appStylStyleSheet;\nrender(<div style={_styleSheet[\"header\"]} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform less in render",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 358,
                "column": 30
            },
            "line": 358,
            "code": "  it('transform less in render', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\nimport './app.less';\n\nrender(<div className=\"header\" />);\n`)).toBe(`import { createElement, render } from 'rax';\nimport appLessStyleSheet from \"./app.less\";\nvar _styleSheet = appLessStyleSheet;\nrender(<div style={_styleSheet[\"header\"]} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine multiple different extension style sources",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 369,
                "column": 56
            },
            "line": 369,
            "code": "  it('combine multiple different extension style sources', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\nimport './index.css'\nimport './index.scss'\nimport '../index.less'\nimport styl from './index.styl'\n\nrender(<div className=\"header\" />);\n`)).toBe(`import { createElement, render } from 'rax';\nimport indexCssStyleSheet from \"./index.css\";\nimport indexScssStyleSheet from \"./index.scss\";\nimport indexLessStyleSheet from \"../index.less\";\nimport styl from \"./index.styl\";\n\n${mergeStylesFunctionTemplate}\n\nvar _styleSheet = _mergeStyles(indexCssStyleSheet, indexScssStyleSheet, indexLessStyleSheet, styl);\n\nrender(<div style={_styleSheet[\"header\"]} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform styleAttribute expression",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 390,
                "column": 41
            },
            "line": 390,
            "code": "  it('transform styleAttribute expression', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\nimport './app.less';\n\nrender(<div className=\"header\" style={{width: 100, height: 100}} />);\n`)).toBe(`import { createElement, render } from 'rax';\nimport appLessStyleSheet from \"./app.less\";\nvar _styleSheet = appLessStyleSheet;\nrender(<div style={[_styleSheet[\"header\"], {\n  width: 100,\n  height: 100\n}]} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform styleAttribute inline string",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 404,
                "column": 44
            },
            "line": 404,
            "code": "  it('transform styleAttribute inline string', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\n\nrender(<div style=\"width:100px;height:100px;background-color:rgba(0, 0, 0, 0.5);border: 1px solid;\" />);\n`)).toBe(`import { createElement, render } from 'rax';\nrender(<div style={{\n  \"width\": 100,\n  \"height\": 100,\n  \"backgroundColor\": \"rgba(0, 0, 0, 0.5)\",\n  \"borderWidth\": 1,\n  \"borderStyle\": \"solid\",\n  \"borderColor\": \"black\"\n}} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform styleAttribute inline string and exsit classNameAttribute",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 419,
                "column": 73
            },
            "line": 419,
            "code": "  it('transform styleAttribute inline string and exsit classNameAttribute', () => {\n    expect(getTransfromCode(`\nimport { createElement, render } from 'rax';\nimport './app.less';\nrender(<div className=\"header\" style=\"width:100px;height:100px;background-color:rgba(0, 0, 0, 0.5);border: 1px solid;\" />);\n`)).toBe(`import { createElement, render } from 'rax';\nimport appLessStyleSheet from \"./app.less\";\nvar _styleSheet = appLessStyleSheet;\nrender(<div style={[_styleSheet[\"header\"], {\n  \"width\": 100,\n  \"height\": 100,\n  \"backgroundColor\": \"rgba(0, 0, 0, 0.5)\",\n  \"borderWidth\": 1,\n  \"borderStyle\": \"solid\",\n  \"borderColor\": \"black\"\n}]} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "ignore merge stylesheet when css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 436,
                "column": 52
            },
            "line": 436,
            "code": "  it('ignore merge stylesheet when css module enable', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" style={styleSheet.red} />;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toBe(`import { createElement, Component } from 'rax';\nimport appScssStyleSheet from \"./app.scss\";\nimport styleSheet from './app.module.scss';\nvar _styleSheet = appScssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header\"], styleSheet.red]} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Provide a default stylesheet object when css module enable and import css module sheet only",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 459,
                "column": 97
            },
            "line": 459,
            "code": "  it('Provide a default stylesheet object when css module enable and import css module sheet only', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    return <div>\n      <div className={styleSheet.header} />\n      <div className=\"red\" />\n    </div>;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toBe(`import { createElement, Component } from 'rax';\nimport styleSheet from './app.module.scss';\nvar _styleSheet = {};\n\nclass App extends Component {\n  render() {\n    return <div>\n      <div style={styleSheet.header} />\n      <div style={_styleSheet[\"red\"]} />\n    </div>;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Processing module style assignment When css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 486,
                "column": 63
            },
            "line": 486,
            "code": "  it('Processing module style assignment When css module enable', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    const a = styleSheet.red\n    return <div className={a} />;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toBe(`import { createElement, Component } from 'rax';\nimport appScssStyleSheet from \"./app.scss\";\nimport styleSheet from './app.module.scss';\nvar _styleSheet = appScssStyleSheet;\n\nclass App extends Component {\n  render() {\n    const a = styleSheet.red;\n    return <div style={a} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Processing module style spread and assign When css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 511,
                "column": 70
            },
            "line": 511,
            "code": "  it('Processing module style spread and assign When css module enable', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    const a = { ...styleSheet.red };\n    const b = a;\n    return <div className={{ ...b }} />;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toBe(`import { createElement, Component } from 'rax';\nimport appScssStyleSheet from \"./app.scss\";\nimport styleSheet from './app.module.scss';\nvar _styleSheet = appScssStyleSheet;\n\nclass App extends Component {\n  render() {\n    const a = { ...styleSheet.red\n    };\n    const b = a;\n    return <div style={{ ...b\n    }} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Processing module style conditional expression When css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 540,
                "column": 75
            },
            "line": 540,
            "code": "  it('Processing module style conditional expression When css module enable', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    const a = 1 ? styleSheet.red : styleSheet.blue;\n    return <div className={a} />;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toBe(`import { createElement, Component } from 'rax';\nimport appScssStyleSheet from \"./app.scss\";\nimport styleSheet from './app.module.scss';\nvar _styleSheet = appScssStyleSheet;\n\nclass App extends Component {\n  render() {\n    const a = 1 ? styleSheet.red : styleSheet.blue;\n    return <div style={a} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "merge stylesheet when css module disable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 565,
                "column": 46
            },
            "line": 565,
            "code": "  it('merge stylesheet when css module disable', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" style={styleSheet.red} />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nimport appScssStyleSheet from \"./app.scss\";\nimport styleSheet from \"./app.module.scss\";\n\n${mergeStylesFunctionTemplate}\n\nvar _styleSheet = _mergeStyles(appScssStyleSheet, styleSheet);\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"header\"], styleSheet.red]} />;\n  }\\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "disableMultipleClassName and transform multiple className to multiple style",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 589,
                "column": 81
            },
            "line": 589,
            "code": "  it('disableMultipleClassName and transform multiple className to multiple style', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"container\" headerClassName=\"header\" />;\n  }\n}`, false, {\n      enableMultipleClassName: false\n    })).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div headerClassName=\"header\" style={_styleSheet[\"container\"]} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "enableMultipleClassName and transform multiple className to multiple style",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 611,
                "column": 80
            },
            "line": 611,
            "code": "  it('enableMultipleClassName and transform multiple className to multiple style', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"container\" headerClassName=\"header\" />;\n  }\n}`, false, {\n      enableMultipleClassName: true\n    })).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={_styleSheet[\"container\"]} headerStyle={_styleSheet[\"header\"]} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "enableMultipleClassName and transform multiple className to multiple style as array",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 633,
                "column": 89
            },
            "line": 633,
            "code": "  it('enableMultipleClassName and transform multiple className to multiple style as array', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"container\" headerClassName=\"header\" style={{ color: \"red\" }} headerStyle={{ color: \"green\" }} />;\n  }\n}`, false, {\n      enableMultipleClassName: true\n    })).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <div style={[_styleSheet[\"container\"], {\n      color: \"red\"\n    }]} headerStyle={[_styleSheet[\"header\"], {\n      color: \"green\"\n    }]} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "enableMultipleClassName and transform error css value",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 659,
                "column": 59
            },
            "line": 659,
            "code": "  it('enableMultipleClassName and transform error css value', () => {\n    expect(getTransfromCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <StatusBar barStyle=\"dark-content\" />;\n  }\n}`, false, {\n      enableMultipleClassName: true\n    })).toBe(`import { createElement, Component } from 'rax';\nimport appCssStyleSheet from \"./app.css\";\nvar _styleSheet = appCssStyleSheet;\n\nclass App extends Component {\n  render() {\n    return <StatusBar barStyle={\"dark-content\"} />;\n  }\n\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "should work!",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 16
            },
            "line": 24,
            "code": "it('should work!', function () {\r\n  const code = `\r\n    import Taro, { setStorage, initPxTransform, param } from '@tarojs/taro-h5';\r\n    initPxTransform(param)\r\n    Taro.initPxTransform()\r\n    Taro.initPxTransform()\r\n    Taro['getStorage']()\r\n    setStorage()\r\n    export { Taro }\r\n  `\r\n  const result = babel.transform(code, { plugins: [pluginOptions] })\r\n  expect(result.code).toMatchSnapshot()\r\n})\r",
            "file": "index.spec.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-taroapi/__tests__"
        },
        {
            "name": "should leave other apis untouched",
            "suites": [],
            "updatePoint": {
                "line": 38,
                "column": 37
            },
            "line": 38,
            "code": "it('should leave other apis untouched', function () {\r\n  const code = `\r\n    import Taro from '@tarojs/taro-h5'\r\n    Taro.noop\r\n  `\r\n  const result = babel.transform(code, { plugins: [pluginOptions] })\r\n  expect(result.code).toMatchSnapshot()\r\n\r\n  const ast = result.ast as t.File\r\n  const body = ast.program.body as [t.ImportDeclaration, t.ExpressionStatement]\r\n  expect(t.isImportDeclaration(body[0])).toBeTruthy()\r\n  expect(t.isExpressionStatement(body[1])).toBeTruthy()\r\n  const defaultImport = body[0].specifiers.find(v => t.isImportDefaultSpecifier(v))\r\n  expect(defaultImport).toBeTruthy()\r\n\r\n  const taroName = defaultImport.local.name\r\n  const namedImports = getNamedImports(body[0].specifiers)\r\n  expect(namedImports).toEqual(new Set())\r\n  expect(t.isMemberExpression(body[1].expression)).toBeTruthy()\r\n  expect((body[1].expression as t.MemberExpression)).toMatchObject(t.memberExpression(\r\n    t.identifier(taroName),\r\n    t.identifier('noop')\r\n  ))\r\n})\r",
            "file": "index.spec.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-taroapi/__tests__"
        },
        {
            "name": "should move static apis under \"Taro\"",
            "suites": [],
            "updatePoint": {
                "line": 63,
                "column": 40
            },
            "line": 63,
            "code": "it('should move static apis under \"Taro\"', function () {\r\n  const code = `\r\n    import { noop } from '@tarojs/taro-h5';\r\n    noop;\r\n    noop();\r\n  `\r\n\r\n  const result = babel.transform(code, { plugins: [pluginOptions] })\r\n  expect(result.code).toMatchSnapshot()\r\n\r\n  const ast = result.ast as t.File\r\n  const body = ast.program.body as [t.ImportDeclaration, t.ExpressionStatement]\r\n  expect(t.isImportDeclaration(body[0])).toBeTruthy()\r\n  expect(t.isExpressionStatement(body[1])).toBeTruthy()\r\n  const defaultImport = body[0].specifiers.find(v => t.isImportDefaultSpecifier(v))\r\n  expect(defaultImport).toBeTruthy()\r\n\r\n  const taroName = defaultImport!.local.name\r\n  let memberExpression = body[1].expression\r\n  if (t.isCallExpression(body[1])) {\r\n    memberExpression = (body[1].expression as t.CallExpression).callee\r\n  }\r\n  expect(memberExpression).toMatchObject(t.memberExpression(\r\n    t.identifier(taroName),\r\n    t.identifier('noop')\r\n  ))\r\n})\r",
            "file": "index.spec.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-taroapi/__tests__"
        },
        {
            "name": "should not import taro duplicatly",
            "suites": [],
            "updatePoint": {
                "line": 91,
                "column": 37
            },
            "line": 91,
            "code": "it('should not import taro duplicatly', function () {\r\n  const code = `\r\n    import { Component } from \"@tarojs/taro-h5\";\r\n    import Taro from '@tarojs/taro-h5';\r\n    Component\r\n    Taro.createAnimation()\r\n    Taro.initPxTransform()\r\n  `\r\n\r\n  const result = babel.transform(code, { plugins: [pluginOptions] })\r\n  expect(result.code).toMatchSnapshot()\r\n\r\n  const ast = result.ast as t.File\r\n  const body = ast.program.body as [t.ImportDeclaration, t.ExpressionStatement, t.ExpressionStatement]\r\n  expect(t.isImportDeclaration(body[0])).toBeTruthy()\r\n  expect(t.isExpressionStatement(body[1])).toBeTruthy()\r\n  expect(t.isExpressionStatement(body[2])).toBeTruthy()\r\n})\r",
            "file": "index.spec.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-taroapi/__tests__"
        },
        {
            "name": "should not go wrong when using an api twice",
            "suites": [],
            "updatePoint": {
                "line": 110,
                "column": 47
            },
            "line": 110,
            "code": "it('should not go wrong when using an api twice', function () {\r\n  const code = `\r\n    import Taro from '@tarojs/taro-h5';\r\n    const animation = Taro.createAnimation({\r\n      duration: dura * 1000,\r\n      timingFunction: 'linear'\r\n    })\r\n    const resetAnimation = Taro.createAnimation({\r\n      duration: 0,\r\n      timingFunction: 'linear'\r\n    })\r\n  `\r\n  expect(() => {\r\n    const result = babel.transform(code, { plugins: [pluginOptions] })\r\n    expect(result.code).toMatchSnapshot()\r\n  }).not.toThrowError()\r\n})\r",
            "file": "index.spec.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-taroapi/__tests__"
        },
        {
            "name": "should preserve default imports",
            "suites": [],
            "updatePoint": {
                "line": 128,
                "column": 35
            },
            "line": 128,
            "code": "it('should preserve default imports', function () {\r\n  const code = `\r\n    import Taro from '@tarojs/taro-h5'\r\n    console.log(Taro)\r\n  `\r\n  const result = babel.transform(code, { plugins: [pluginOptions] })\r\n  expect(result.code).toMatchSnapshot()\r\n})\r",
            "file": "index.spec.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-taroapi/__tests__"
        },
        {
            "name": "should preserve assignments in lefthands",
            "suites": [],
            "updatePoint": {
                "line": 137,
                "column": 44
            },
            "line": 137,
            "code": "it('should preserve assignments in lefthands', function () {\r\n  const code = `\r\n    import Taro from '@tarojs/taro-h5'\r\n    let animation \r\n    animation = Taro.createAnimation({\r\n      transformOrigin: \"50% 50%\",\r\n      duration: 1000,\r\n      timingFunction: \"ease\",\r\n      delay: 0\r\n    });\r\n    Taro.request()\r\n    Taro.request = ''\r\n    Taro['request'] = ''\r\n  `\r\n  const result = babel.transform(code, { plugins: [pluginOptions] })\r\n  expect(result.code).toMatchSnapshot()\r\n})\r",
            "file": "index.spec.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-taroapi/__tests__"
        },
        {
            "name": "should support rename of imported names",
            "suites": [],
            "updatePoint": {
                "line": 155,
                "column": 43
            },
            "line": 155,
            "code": "it('should support rename of imported names', function () {\r\n  const code = `\r\n  // import { inject as mobxInject, observer as mobxObserver } from '@tarojs/mobx'\r\n  import { Component as TaroComponent } from \"@tarojs/taro-h5\";\r\n  export class Connected extends TaroComponent {}\r\n  `\r\n  const result = babel.transform(code, { plugins: [pluginOptions] })\r\n  expect(result.code).toMatchSnapshot()\r\n})\r",
            "file": "index.spec.ts",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-taroapi/__tests__"
        },
        {
            "name": "nerv",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 5,
                "column": 10
            },
            "line": 5,
            "code": "  it('nerv', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'nerv'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, [_, reactConfig]] = override.presets;\n    expect(reactConfig.pragma).toBe('Nerv.createElement');\n    expect(reactConfig.pragmaFrag).toBe('Nerv.Fragment');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "react",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 15,
                "column": 11
            },
            "line": 15,
            "code": "  it('react', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "vue",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 21,
                "column": 9
            },
            "line": 21,
            "code": "  it('vue', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, [jsxPreset, jsxOptions]] = override.presets;\n    expect(jsxPreset === require('@vue/babel-preset-jsx')).toBeTruthy();\n    expect(jsxOptions).toEqual({});\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "vue3",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 31,
                "column": 10
            },
            "line": 31,
            "code": "  it('vue3', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue3'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [[jsxPlugin, jsxOptions]] = override.plugins;\n    expect(jsxPlugin === require('@vue/babel-plugin-jsx')).toBeTruthy();\n    expect(jsxOptions).toEqual({});\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "vue without jsx",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 41,
                "column": 21
            },
            "line": 41,
            "code": "  it('vue without jsx', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue',\n      vueJsx: false\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, jsxPreset] = override.presets;\n    expect(jsxPreset).toBeUndefined();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "vue3 without jsx",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 51,
                "column": 22
            },
            "line": 51,
            "code": "  it('vue3 without jsx', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue3',\n      vueJsx: false\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [[jsxPlugin, jsxOptions]] = override.plugins;\n    expect(jsxPlugin === require('@vue/babel-plugin-jsx')).toBeFalsy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "typescript react",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 61,
                "column": 22
            },
            "line": 61,
            "code": "  it('typescript react', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [,, [ts, tsConfig]] = override.presets;\n    expect(typeof ts.default === 'function').toBeTruthy();\n    expect(tsConfig.jsxPragma === 'React').toBeTruthy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "typescript nerv",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 72,
                "column": 21
            },
            "line": 72,
            "code": "  it('typescript nerv', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'nerv',\n      ts: true\n    });\n    const [override] = config.overrides;\n    const [,, [ts, tsConfig]] = override.presets;\n    expect(typeof ts.default === 'function').toBeTruthy();\n    expect(tsConfig.jsxPragma === 'Nerv').toBeTruthy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "typescript vue",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 82,
                "column": 20
            },
            "line": 82,
            "code": "  it('typescript vue', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue',\n      ts: true\n    });\n    const [override, vueOverride] = config.overrides;\n    const [,, [ts, tsConfig]] = override.presets;\n    expect(typeof ts.default === 'function').toBeTruthy();\n    expect(tsConfig.hasOwnProperty('jsxPragma') === false).toBeTruthy();\n    expect(vueOverride.include.test('a.vue')).toBeTruthy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "can change env options",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 93,
                "column": 28
            },
            "line": 93,
            "code": "  it('can change env options', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true,\n      spec: false,\n      loose: false\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, env] = override.presets[0];\n    expect(env.spec).toBeFalsy();\n    expect(env.loose).toBeFalsy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "default env options",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 106,
                "column": 25
            },
            "line": 106,
            "code": "  it('default env options', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true,\n      spec: true,\n      loose: true\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, env] = override.presets[0];\n    expect(env).toEqual({\n      spec: true,\n      loose: true,\n      debug: false,\n      modules: 'commonjs',\n      targets: {\n        node: 'current'\n      },\n      useBuiltIns: false,\n      ignoreBrowserslistConfig: true\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "returns empty object when input is empty",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 3,
                "column": 46
            },
            "line": 3,
            "code": "  it('returns empty object when input is empty', () => {\n    expect(transform('')).toEqual({});\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 6,
                "column": 21
            },
            "line": 6,
            "code": "  it('transforms flex', () => {\n    expect(transform(`\n      .test {\n        flex: 1;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 0,\n        flexGrow: 1,\n        flexShrink: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms numbers",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 19,
                "column": 24
            },
            "line": 19,
            "code": "  it('transforms numbers', () => {\n    expect(transform(`\n      .test {\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n      }\n    `)).toEqual({\n      test: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores unsupported at-rules",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 36,
                "column": 34
            },
            "line": 36,
            "code": "  it('ignores unsupported at-rules', () => {\n    expect(transform('@charset \"utf-8\";')).toEqual({});\n    expect(transform(`\n      @supports (display: grid) {\n        div {\n          display: grid;\n        }\n      }\n    `)).toEqual({});\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows pixels in unspecialized transform",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 46,
                "column": 46
            },
            "line": 46,
            "code": "  it('allows pixels in unspecialized transform', () => {\n    expect(transform(`\n      .test {\n        top: 0px;\n      }\n    `)).toEqual({\n      test: {\n        top: 'scalePx2dp(0)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows percent in unspecialized transform",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 57,
                "column": 47
            },
            "line": 57,
            "code": "  it('allows percent in unspecialized transform', () => {\n    expect(transform(`\n      .test {\n        top: 0%;\n      }\n    `)).toEqual({\n      test: {\n        top: '0%'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows decimal values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 68,
                "column": 27
            },
            "line": 68,
            "code": "  it('allows decimal values', () => {\n    expect(transform(`\n      .test {\n        margin-top: 0.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(0.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: 100.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(100.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: -0.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(-0.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: -100.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(-100.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: .5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(0.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: -.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(-0.5)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows PX or PX values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 124,
                "column": 28
            },
            "line": 124,
            "code": "  it('allows PX or PX values', () => {\n    expect(transform(`\n      .test {\n        top: 1Px;\n        margin: 10Px 30px;\n      }\n    `)).toEqual({\n      test: {\n        marginBottom: 10,\n        marginLeft: 'scalePx2dp(30)',\n        marginRight: 'scalePx2dp(30)',\n        marginTop: 10,\n        top: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows PX or PX values scalePx2dp",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 140,
                "column": 39
            },
            "line": 140,
            "code": "  it('allows PX or PX values scalePx2dp', () => {\n    expect(transform(`\n      .test {\n        top: 10Px;\n        left:10px;\n        margin: 10Px 30px;\n      }\n    `)).toEqual({\n      test: {\n        left: 'scalePx2dp(10)',\n        marginBottom: 10,\n        marginLeft: 'scalePx2dp(30)',\n        marginRight: 'scalePx2dp(30)',\n        marginTop: 10,\n        top: 10\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows decimal values in transformed values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 158,
                "column": 49
            },
            "line": 158,
            "code": "  it('allows decimal values in transformed values', () => {\n    expect(transform(`\n      .test {\n        border-radius: 1.5px;\n      }\n    `)).toEqual({\n      test: {\n        borderRadius: 'scalePx2dp(1.5)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows negative values in transformed values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 169,
                "column": 50
            },
            "line": 169,
            "code": "  it('allows negative values in transformed values', () => {\n    expect(transform(`\n      .test {\n        border-radius: -1.5px;\n      }\n    `)).toEqual({\n      test: {\n        borderRadius: 'scalePx2dp(-1.5)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows percent values in transformed values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 180,
                "column": 49
            },
            "line": 180,
            "code": "  it('allows percent values in transformed values', () => {\n    expect(transform(`\n      .test {\n        margin: 10%;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: '10%',\n        marginRight: '10%',\n        marginBottom: '10%',\n        marginLeft: '10%'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows color values in transformed border-color values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 194,
                "column": 60
            },
            "line": 194,
            "code": "  it('allows color values in transformed border-color values', () => {\n    expect(transform(`\n      .test {\n        border-color: red\n      }\n    `)).toEqual({\n      test: {\n        borderColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows omitting units for 0",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 205,
                "column": 33
            },
            "line": 205,
            "code": "  it('allows omitting units for 0', () => {\n    expect(transform(`\n      .test {\n        margin: 10px 0;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 0,\n        marginBottom: 'scalePx2dp(10)',\n        marginLeft: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "converts to camel-case",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 219,
                "column": 28
            },
            "line": 219,
            "code": "  it('converts to camel-case', () => {\n    expect(transform(`\n      .test {\n        background-color: red;\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms shadow offsets",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 230,
                "column": 31
            },
            "line": 230,
            "code": "  it('transforms shadow offsets', () => {\n    expect(transform(`\n      .test {\n        shadow-offset: 10px 5px;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          height: 'scalePx2dp(5)',\n          width: 'scalePx2dp(10)'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text shadow offsets",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 244,
                "column": 36
            },
            "line": 244,
            "code": "  it('transforms text shadow offsets', () => {\n    expect(transform(`\n      .test {\n        text-shadow-offset: 10px 5px;\n      }\n    `)).toEqual({\n      test: {\n        textShadowOffset: {\n          height: 'scalePx2dp(5)',\n          width: 'scalePx2dp(10)'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms a block of css",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 258,
                "column": 31
            },
            "line": 258,
            "code": "  it('transforms a block of css', () => {\n    expect(transform(`\n    .description {\n      margin-bottom: 20px;\n      font-size: 18px;\n      text-align: center;\n      color: #656656;\n      box-shadow: 10px 20px 30px #fff;\n    }\n\n    .container {\n      padding: 30px;\n      margin-top: 65px;\n      align-items: center;\n      border: 2px dashed #f00;\n    }\n  `)).toEqual({\n      description: {\n        fontSize: 'scalePx2dp(18)',\n        marginBottom: 'scalePx2dp(20)',\n        textAlign: 'center',\n        color: '#656656',\n        shadowColor: '#fff',\n        shadowOffset: {\n          height: 'scalePx2dp(20)',\n          width: 'scalePx2dp(10)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowOpacity: 1\n      },\n      container: {\n        paddingBottom: 'scalePx2dp(30)',\n        paddingLeft: 'scalePx2dp(30)',\n        paddingRight: 'scalePx2dp(30)',\n        paddingTop: 'scalePx2dp(30)',\n        marginTop: 'scalePx2dp(65)',\n        alignItems: 'center',\n        borderColor: '#f00',\n        borderStyle: 'dashed',\n        borderWidth: 'scalePx2dp(2)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "throws useful errors",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 301,
                "column": 26
            },
            "line": 301,
            "code": "  it('throws useful errors', () => {\n    expect(() => {\n      transform(`\n      .test {\n        margin: 10;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"margin: 10\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "when there are selectors with the same name, merges the common props",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 310,
                "column": 74
            },
            "line": 310,
            "code": "  it('when there are selectors with the same name, merges the common props', () => {\n    expect(transform(`\n      .test {\n        margin: 10px;\n        background-color: #f00;\n      }\n      .test {\n        padding: 10px;\n        font-size: 20px;\n        margin: 5px;\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: '#f00',\n        fontSize: 'scalePx2dp(20)',\n        marginBottom: 'scalePx2dp(5)',\n        marginLeft: 'scalePx2dp(5)',\n        marginRight: 'scalePx2dp(5)',\n        marginTop: 'scalePx2dp(5)',\n        paddingBottom: 'scalePx2dp(10)',\n        paddingLeft: 'scalePx2dp(10)',\n        paddingRight: 'scalePx2dp(10)',\n        paddingTop: 'scalePx2dp(10)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports group of selectors",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 336,
                "column": 33
            },
            "line": 336,
            "code": "  it('supports group of selectors', () => {\n    expect(transform(`\n      .test1, .test2 {\n        color: red;\n      }\n    `)).toEqual({\n      test1: {\n        color: 'red'\n      },\n      test2: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports dash in class names",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 352,
                "column": 34
            },
            "line": 352,
            "code": "  it('supports dash in class names', () => {\n    expect(transform(`\n      .test-1-2 {\n        color: red;\n      }\n    `)).toEqual({\n      'test-1-2': {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports underscore in class names",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 363,
                "column": 40
            },
            "line": 363,
            "code": "  it('supports underscore in class names', () => {\n    expect(transform(`\n      .test_1 {\n        color: red;\n      }\n    `)).toEqual({\n      test_1: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports grouping selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 374,
                "column": 33
            },
            "line": 374,
            "code": "  it('supports grouping selectors', () => {\n    expect(transform(`\n      .test, .test2, .test3 {\n        color: red;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      },\n      test2: {\n        color: 'red'\n      },\n      test3: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores grouping of ID selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 391,
                "column": 38
            },
            "line": 391,
            "code": "  it('ignores grouping of ID selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      #test1, #test2, #test3 {\n        color: red;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores grouping of element selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 405,
                "column": 43
            },
            "line": 405,
            "code": "  it('ignores grouping of element selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      p, h1, input {\n        color: red;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores ID selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 419,
                "column": 26
            },
            "line": 419,
            "code": "  it('ignores ID selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      #foo {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores type selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 433,
                "column": 28
            },
            "line": 433,
            "code": "  it('ignores type selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      input[type=text] {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      [class^=\"test\"] {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo[class^=\"test\"] {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores universal selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 471,
                "column": 33
            },
            "line": 471,
            "code": "  it('ignores universal selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      * {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores descendant selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 485,
                "column": 34
            },
            "line": 485,
            "code": "  it('ignores descendant selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores direct child selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 499,
                "column": 36
            },
            "line": 499,
            "code": "  it('ignores direct child selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo > .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores adjancent sibling selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 513,
                "column": 41
            },
            "line": 513,
            "code": "  it('ignores adjancent sibling selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo + .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores general sibling selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 527,
                "column": 39
            },
            "line": 527,
            "code": "  it('ignores general sibling selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo ~ .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores qualified selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 541,
                "column": 33
            },
            "line": 541,
            "code": "  it('ignores qualified selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      p.bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores element selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 555,
                "column": 31
            },
            "line": 555,
            "code": "  it('ignores element selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      p {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores pseudo selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 569,
                "column": 30
            },
            "line": 569,
            "code": "  it('ignores pseudo selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .test1:hover {\n        color: blue;\n      }\n      .test2::before {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms named colors",
            "suites": [
                "colors"
            ],
            "updatePoint": {
                "line": 588,
                "column": 29
            },
            "line": 588,
            "code": "  it('transforms named colors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms hex colors",
            "suites": [
                "colors"
            ],
            "updatePoint": {
                "line": 599,
                "column": 27
            },
            "line": 599,
            "code": "  it('transforms hex colors', () => {\n    expect(transform(`\n      .test {\n        color: #f00;\n      }\n    `)).toEqual({\n      test: {\n        color: '#f00'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms rgb colors",
            "suites": [
                "colors"
            ],
            "updatePoint": {
                "line": 610,
                "column": 27
            },
            "line": 610,
            "code": "  it('transforms rgb colors', () => {\n    expect(transform(`\n      .test {\n        color: rgb(255, 0, 0);\n      }\n    `)).toEqual({\n      test: {\n        color: 'rgb(255, 0, 0)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms rgba colors",
            "suites": [
                "colors"
            ],
            "updatePoint": {
                "line": 621,
                "column": 28
            },
            "line": 621,
            "code": "  it('transforms rgba colors', () => {\n    expect(transform(`\n      .test {\n        color: rgba(255, 0, 0, 0);\n      }\n    `)).toEqual({\n      test: {\n        color: 'rgba(255, 0, 0, 0)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms a single transform value with number",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 634,
                "column": 53
            },
            "line": 634,
            "code": "  it('transforms a single transform value with number', () => {\n    expect(transform(`\n      .test {\n        transform: scaleX(5);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          scaleX: 5\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms a single transform value with string",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 647,
                "column": 53
            },
            "line": 647,
            "code": "  it('transforms a single transform value with string', () => {\n    expect(transform(`\n      .test {\n        transform: rotate(5deg);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          rotate: '5deg'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms multiple transform values",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 660,
                "column": 42
            },
            "line": 660,
            "code": "  it('transforms multiple transform values', () => {\n    expect(transform(`\n      .test {\n        transform: scaleX(5) skewX(1deg);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          skewX: '1deg'\n        }, {\n          scaleX: 5\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms scale(number, number) to scaleX and scaleY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 675,
                "column": 59
            },
            "line": 675,
            "code": "  it('transforms scale(number, number) to scaleX and scaleY', () => {\n    expect(transform(`\n      .test {\n        transform: scale(2, 3);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          scaleY: 3\n        }, {\n          scaleX: 2\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms translate(length, length) to translateX and translateY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 690,
                "column": 71
            },
            "line": 690,
            "code": "  it('transforms translate(length, length) to translateX and translateY', () => {\n    expect(transform(`\n      .test {\n        transform: translate(2px, 3px);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          translateY: 'scalePx2dp(3)'\n        }, {\n          translateX: 'scalePx2dp(2)'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms translate(length) to translateX and translateY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 705,
                "column": 63
            },
            "line": 705,
            "code": "  it('transforms translate(length) to translateX and translateY', () => {\n    expect(transform(`\n      .test {\n        transform: translate(5px);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          translateY: 0\n        }, {\n          translateX: 'scalePx2dp(5)'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms skew(angle, angle) to skewX and skewY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 720,
                "column": 54
            },
            "line": 720,
            "code": "  it('transforms skew(angle, angle) to skewX and skewY', () => {\n    expect(transform(`\n      .test {\n        transform: skew(2deg, 3deg);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          skewY: '3deg'\n        }, {\n          skewX: '2deg'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms skew(angle) to skewX and skewY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 735,
                "column": 47
            },
            "line": 735,
            "code": "  it('transforms skew(angle) to skewX and skewY', () => {\n    expect(transform(`\n      .test {\n        transform: skew(5deg);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          skewY: '0deg'\n        }, {\n          skewX: '5deg'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 752,
                "column": 33
            },
            "line": 752,
            "code": "  it('transforms border shorthand', () => {\n    expect(transform(`\n      .test {\n        border: 2px dashed #f00;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: '#f00',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand in other order",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 765,
                "column": 48
            },
            "line": 765,
            "code": "  it('transforms border shorthand in other order', () => {\n    expect(transform(`\n      .test {\n        border: #f00 2px dashed;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: '#f00',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing color",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 778,
                "column": 47
            },
            "line": 778,
            "code": "  it('transforms border shorthand missing color', () => {\n    expect(transform(`\n      .test {\n        border: 2px dashed;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: 'black',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing style",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 791,
                "column": 47
            },
            "line": 791,
            "code": "  it('transforms border shorthand missing style', () => {\n    expect(transform(`\n      .test {\n        border: 2px #f00;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: '#f00',\n        borderStyle: 'solid'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing width",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 804,
                "column": 47
            },
            "line": 804,
            "code": "  it('transforms border shorthand missing width', () => {\n    expect(transform(`\n      .test {\n        border: #f00 dashed;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 1,\n        borderColor: '#f00',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing color & width",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 817,
                "column": 55
            },
            "line": 817,
            "code": "  it('transforms border shorthand missing color & width', () => {\n    expect(transform(`\n      .test {\n        border: dashed;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing style & width",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 830,
                "column": 55
            },
            "line": 830,
            "code": "  it('transforms border shorthand missing style & width', () => {\n    expect(transform(`\n      .test {\n        border: #f00;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 1,\n        borderColor: '#f00',\n        borderStyle: 'solid'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing color & style",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 843,
                "column": 55
            },
            "line": 843,
            "code": "  it('transforms border shorthand missing color & style', () => {\n    expect(transform(`\n      .test {\n        border: 2px;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: 'black',\n        borderStyle: 'solid'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-radius",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 857,
                "column": 32
            },
            "line": 857,
            "code": "    it('transforms border-radius', () => {\n      expect(transform(`\n        .test {\n          border-radius: 6px;\n        }\n      `)).toEqual({\n        test: {\n          borderRadius: 'scalePx2dp(6)'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-radius with multiple values",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 868,
                "column": 53
            },
            "line": 868,
            "code": "    it('transforms border-radius with multiple values', () => {\n      expect(transform(`\n        .test {\n          border-radius: 10px 5%;\n        }\n      `)).toEqual({\n        test: {\n          borderBottomLeftRadius: '5%',\n          borderBottomRightRadius: 'scalePx2dp(10)',\n          borderTopLeftRadius: 'scalePx2dp(10)',\n          borderTopRightRadius: '5%'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-radius: 2px 4px 2px;\n        }\n      `)).toEqual({\n        test: {\n          borderBottomLeftRadius: 'scalePx2dp(4)',\n          borderBottomRightRadius: 'scalePx2dp(2)',\n          borderTopLeftRadius: 'scalePx2dp(2)',\n          borderTopRightRadius: 'scalePx2dp(4)'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-radius: 1px 0 3px 4px;\n        }\n      `)).toEqual({\n        test: {\n          borderBottomLeftRadius: 'scalePx2dp(4)',\n          borderBottomRightRadius: 'scalePx2dp(3)',\n          borderTopLeftRadius: 'scalePx2dp(1)',\n          borderTopRightRadius: 0\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-color",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 906,
                "column": 31
            },
            "line": 906,
            "code": "    it('transforms border-color', () => {\n      expect(transform(`\n        .test {\n          border-color: #fff;\n        }\n      `)).toEqual({\n        test: {\n          borderColor: '#fff'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-color with multiple values",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 917,
                "column": 52
            },
            "line": 917,
            "code": "    it('transforms border-color with multiple values', () => {\n      expect(transform(`\n        .test {\n          border-color: red #f015ca;\n        }\n      `)).toEqual({\n        test: {\n          borderTopColor: 'red',\n          borderRightColor: '#f015ca',\n          borderBottomColor: 'red',\n          borderLeftColor: '#f015ca'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-color: red yellow green;\n        }\n      `)).toEqual({\n        test: {\n          borderTopColor: 'red',\n          borderRightColor: 'yellow',\n          borderBottomColor: 'green',\n          borderLeftColor: 'yellow'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-color: red yellow green blue;\n        }\n      `)).toEqual({\n        test: {\n          borderTopColor: 'red',\n          borderRightColor: 'yellow',\n          borderBottomColor: 'green',\n          borderLeftColor: 'blue'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-width",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 955,
                "column": 31
            },
            "line": 955,
            "code": "    it('transforms border-width', () => {\n      expect(transform(`\n        .test {\n          border-width: 4px;\n        }\n      `)).toEqual({\n        test: {\n          borderWidth: 'scalePx2dp(4)'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-width with multiple values",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 966,
                "column": 52
            },
            "line": 966,
            "code": "    it('transforms border-width with multiple values', () => {\n      expect(transform(`\n        .test {\n          border-width: 2px 1.5rem;\n        }\n      `)).toEqual({\n        test: {\n          borderTopWidth: 'scalePx2dp(2)',\n          borderRightWidth: 'scalePx2dp(24)',\n          borderBottomWidth: 'scalePx2dp(2)',\n          borderLeftWidth: 'scalePx2dp(24)'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-width: 1px 2rem 1.5rem;\n        }\n      `)).toEqual({\n        test: {\n          borderTopWidth: 'scalePx2dp(1)',\n          borderRightWidth: 'scalePx2dp(32)',\n          borderBottomWidth: 'scalePx2dp(24)',\n          borderLeftWidth: 'scalePx2dp(32)'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-width: 1px 2rem 0 4rem;\n        }\n      `)).toEqual({\n        test: {\n          borderTopWidth: 'scalePx2dp(1)',\n          borderRightWidth: 'scalePx2dp(32)',\n          borderBottomWidth: 0,\n          borderLeftWidth: 'scalePx2dp(64)'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-style",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 1004,
                "column": 31
            },
            "line": 1004,
            "code": "    it('transforms border-style', () => {\n      expect(transform(`\n        .test {\n          border-style: solid;\n        }\n      `)).toEqual({\n        test: {\n          borderStyle: 'solid'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font weights as strings",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1018,
                "column": 40
            },
            "line": 1018,
            "code": "  it('transforms font weights as strings', () => {\n    expect(transform(`\n      .test {\n        font-weight: 400\n      }\n    `)).toEqual({\n      test: {\n        fontWeight: '400'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font variant as an array",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1029,
                "column": 41
            },
            "line": 1029,
            "code": "  it('transforms font variant as an array', () => {\n    expect(transform(`\n      .test {\n        font-variant: tabular-nums;\n      }\n    `)).toEqual({\n      test: {\n        fontVariant: ['tabular-nums']\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms background to backgroundColor",
            "suites": [
                "background"
            ],
            "updatePoint": {
                "line": 1042,
                "column": 46
            },
            "line": 1042,
            "code": "  it('transforms background to backgroundColor', () => {\n    expect(transform(`\n      .test {\n        background: #f00;\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: '#f00'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms background to backgroundColor with rgb",
            "suites": [
                "background"
            ],
            "updatePoint": {
                "line": 1053,
                "column": 55
            },
            "line": 1053,
            "code": "  it('transforms background to backgroundColor with rgb', () => {\n    expect(transform(`\n      .test {\n        background: rgb(255, 0, 0);\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: 'rgb(255, 0, 0)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms background to backgroundColor with named colour",
            "suites": [
                "background"
            ],
            "updatePoint": {
                "line": 1064,
                "column": 64
            },
            "line": 1064,
            "code": "  it('transforms background to backgroundColor with named colour', () => {\n    expect(transform(`\n      .test {\n        background: red;\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with value and unit",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1077,
                "column": 48
            },
            "line": 1077,
            "code": "  it('transforms line-height with value and unit', () => {\n    expect(transform(`\n      .test {\n        line-height: 1.5px;\n      }\n    `)).toEqual({\n      test: {\n        lineHeight: 'scalePx2dp(1.5)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with rem unit",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1088,
                "column": 42
            },
            "line": 1088,
            "code": "  it('transforms line-height with rem unit', () => {\n    expect(transform(`\n      .test {\n        line-height: 2rem;\n      }\n    `)).toEqual({\n      test: {\n        lineHeight: 'scalePx2dp(32)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with %",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1099,
                "column": 35
            },
            "line": 1099,
            "code": "  it('transforms line-height with %', () => {\n    expect(transform(`\n      .test {\n        line-height: 150%;\n      }\n    `)).toEqual({\n      test: {\n        lineHeight: '150%'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with pt unit",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1110,
                "column": 41
            },
            "line": 1110,
            "code": "  it('transforms line-height with pt unit', () => {\n    expect(transform(`\n      .test {\n        line-height: 2pt;\n      }\n    `)).toEqual({\n      test: {\n        lineHeight: '2pt'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with viewport unit",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1121,
                "column": 47
            },
            "line": 1121,
            "code": "  it('transforms line-height with viewport unit', () => {\n    expect(transform(`\n      .test {\n        line-height: 2vh;\n      }\n    `)).toEqual({\n      __viewportUnits: true,\n      test: {\n        lineHeight: '2vh'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "throws for line-height with multiplier",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1133,
                "column": 44
            },
            "line": 1133,
            "code": "  it('throws for line-height with multiplier', () => {\n    expect(() => transform(`\n      .test {\n        line-height: 1.5;\n      }\n    `)).toThrow('Failed to parse declaration \"line-height: 1.5\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthands using 4 values",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1142,
                "column": 49
            },
            "line": 1142,
            "code": "  it('transforms margin shorthands using 4 values', () => {\n    expect(transform(`\n      .test {\n        margin: 10px 20px 30px 40px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'scalePx2dp(20)',\n        marginBottom: 'scalePx2dp(30)',\n        marginLeft: 'scalePx2dp(40)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthands using 3 values",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1156,
                "column": 49
            },
            "line": 1156,
            "code": "  it('transforms margin shorthands using 3 values', () => {\n    expect(transform(`\n      .test {\n        margin: 10px 20px 30px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'scalePx2dp(20)',\n        marginBottom: 'scalePx2dp(30)',\n        marginLeft: 'scalePx2dp(20)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthands using 2 values",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1170,
                "column": 49
            },
            "line": 1170,
            "code": "  it('transforms margin shorthands using 2 values', () => {\n    expect(transform(`\n      .test {\n        margin: 10px 20px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'scalePx2dp(20)',\n        marginBottom: 'scalePx2dp(10)',\n        marginLeft: 'scalePx2dp(20)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthands using 1 value",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1184,
                "column": 48
            },
            "line": 1184,
            "code": "  it('transforms margin shorthands using 1 value', () => {\n    expect(transform(`\n      .test {\n        margin: 10px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'scalePx2dp(10)',\n        marginBottom: 'scalePx2dp(10)',\n        marginLeft: 'scalePx2dp(10)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "shorthand with 1 value should override previous values",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1198,
                "column": 60
            },
            "line": 1198,
            "code": "  it('shorthand with 1 value should override previous values', () => {\n    expect(transform(`\n      .test {\n        margin-top: 2px;\n        margin: 1px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(1)',\n        marginRight: 'scalePx2dp(1)',\n        marginBottom: 'scalePx2dp(1)',\n        marginLeft: 'scalePx2dp(1)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthand with auto",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1213,
                "column": 43
            },
            "line": 1213,
            "code": "  it('transforms margin shorthand with auto', () => {\n    expect(transform(`\n      .test {\n        margin: auto;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'auto',\n        marginRight: 'auto',\n        marginBottom: 'auto',\n        marginLeft: 'auto'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin: 0 auto;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 0,\n        marginRight: 'auto',\n        marginBottom: 0,\n        marginLeft: 'auto'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin: auto 0;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'auto',\n        marginRight: 0,\n        marginBottom: 'auto',\n        marginLeft: 0\n      }\n    });\n    expect(transform(`\n      .test {\n        margin: 2px 3px auto;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(2)',\n        marginRight: 'scalePx2dp(3)',\n        marginBottom: 'auto',\n        marginLeft: 'scalePx2dp(3)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin: 10px auto 4px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'auto',\n        marginBottom: 'scalePx2dp(4)',\n        marginLeft: 'auto'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration into text-decoration- properties",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1277,
                "column": 65
            },
            "line": 1277,
            "code": "  it('transforms text-decoration into text-decoration- properties', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline dotted red;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'dotted',\n        textDecorationColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration without color",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1290,
                "column": 46
            },
            "line": 1290,
            "code": "  it('transforms text-decoration without color', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline dotted;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'dotted',\n        textDecorationColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration without style",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1303,
                "column": 46
            },
            "line": 1303,
            "code": "  it('transforms text-decoration without style', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline red;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration without style and color",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1316,
                "column": 56
            },
            "line": 1316,
            "code": "  it('transforms text-decoration without style and color', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with two line properties",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1329,
                "column": 57
            },
            "line": 1329,
            "code": "  it('transforms text-decoration with two line properties', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline line-through dashed red;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through',\n        textDecorationStyle: 'dashed',\n        textDecorationColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration in different order",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1342,
                "column": 51
            },
            "line": 1342,
            "code": "  it('transforms text-decoration in different order', () => {\n    expect(transform(`\n      .test {\n        text-decoration: dashed red underline line-through;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through',\n        textDecorationStyle: 'dashed',\n        textDecorationColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with ine in different order",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1355,
                "column": 60
            },
            "line": 1355,
            "code": "  it('transforms text-decoration with ine in different order', () => {\n    expect(transform(`\n      .test {\n        text-decoration: line-through underline;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with none",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1368,
                "column": 42
            },
            "line": 1368,
            "code": "  it('transforms text-decoration with none', () => {\n    expect(transform(`\n      .test {\n        text-decoration: none;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'none',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with none as part of multiple terms",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1381,
                "column": 68
            },
            "line": 1381,
            "code": "  it('transforms text-decoration with none as part of multiple terms', () => {\n    expect(transform(`\n      .test {\n        text-decoration: yellow none;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'none',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'yellow'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with none in capitals",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1394,
                "column": 54
            },
            "line": 1394,
            "code": "  it('transforms text-decoration with none in capitals', () => {\n    expect(transform(`\n      .test {\n        text-decoration: yellow NONE;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'none',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'yellow'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with style in capitals",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1407,
                "column": 55
            },
            "line": 1407,
            "code": "  it('transforms text-decoration with style in capitals', () => {\n    expect(transform(`\n      .test {\n        text-decoration: yellow UNDERLINE LINE-THROUGH;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'yellow'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform text-decoration if multiple colors are used",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1420,
                "column": 68
            },
            "line": 1420,
            "code": "  it('does not transform text-decoration if multiple colors are used', () => {\n    expect(() => transform(`\n      .test {\n        text-decoration: underline red yellow;\n      }\n      `)).toThrow('Failed to parse declaration \"textDecoration: underline red yellow\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration-line with underline line-through",
            "suites": [
                "text-decoration-line"
            ],
            "updatePoint": {
                "line": 1429,
                "column": 65
            },
            "line": 1429,
            "code": "  it('transforms text-decoration-line with underline line-through', () => {\n    expect(transform(`\n      .test {\n        text-decoration-line: underline line-through;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration-line with line-through underline",
            "suites": [
                "text-decoration-line"
            ],
            "updatePoint": {
                "line": 1440,
                "column": 65
            },
            "line": 1440,
            "code": "  it('transforms text-decoration-line with line-through underline', () => {\n    expect(transform(`\n      .test {\n        text-decoration-line: line-through underline;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration-line with none",
            "suites": [
                "text-decoration-line"
            ],
            "updatePoint": {
                "line": 1451,
                "column": 47
            },
            "line": 1451,
            "code": "  it('transforms text-decoration-line with none', () => {\n    expect(transform(`\n      .test {\n        text-decoration-line: none;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'none'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 3 values",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1464,
                "column": 45
            },
            "line": 1464,
            "code": "  it('transforms flex shorthand with 3 values', () => {\n    expect(transform(`\n      .test {\n        flex: 1 2 3px;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 1,\n        flexShrink: 2,\n        flexBasis: 'scalePx2dp(3)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 3 values in reverse order",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1477,
                "column": 62
            },
            "line": 1477,
            "code": "  it('transforms flex shorthand with 3 values in reverse order', () => {\n    expect(transform(`\n      .test {\n        flex: 3px 1 2;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 1,\n        flexShrink: 2,\n        flexBasis: 'scalePx2dp(3)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 2 values of flex-grow and flex-shrink",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1490,
                "column": 74
            },
            "line": 1490,
            "code": "  it('transforms flex shorthand with 2 values of flex-grow and flex-shrink', () => {\n    expect(transform(`\n      .test {\n        flex: 1 2;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 1,\n        flexShrink: 2,\n        flexBasis: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 2 values of flex-grow and flex-basis",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1503,
                "column": 73
            },
            "line": 1503,
            "code": "  it('transforms flex shorthand with 2 values of flex-grow and flex-basis', () => {\n    expect(transform(`\n      .test {\n        flex: 2 2px;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 2,\n        flexShrink: 1,\n        flexBasis: 'scalePx2dp(2)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 2 values of flex-grow and flex-basis (reversed)",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1516,
                "column": 84
            },
            "line": 1516,
            "code": "  it('transforms flex shorthand with 2 values of flex-grow and flex-basis (reversed)', () => {\n    expect(transform(`\n      .test {\n        flex: 2px 2;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 2,\n        flexShrink: 1,\n        flexBasis: 'scalePx2dp(2)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 1 value of flex-grow",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1529,
                "column": 57
            },
            "line": 1529,
            "code": "  it('transforms flex shorthand with 1 value of flex-grow', () => {\n    expect(transform(`\n      .test {\n        flex: 2;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 2,\n        flexShrink: 1,\n        flexBasis: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 1 value of flex-basis",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1542,
                "column": 58
            },
            "line": 1542,
            "code": "  it('transforms flex shorthand with 1 value of flex-basis', () => {\n    expect(transform(`\n      .test {\n        flex: 10px;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: 'scalePx2dp(10)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with flex-grow/shrink taking priority over basis",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1561,
                "column": 80
            },
            "line": 1561,
            "code": "  it('transforms flex shorthand with flex-grow/shrink taking priority over basis', () => {\n    expect(transform(`\n      .test {\n        flex: 0 1 0;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 0,\n        flexShrink: 1,\n        flexBasis: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with flex-basis set to auto",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1574,
                "column": 59
            },
            "line": 1574,
            "code": "  it('transforms flex shorthand with flex-basis set to auto', () => {\n    expect(transform(`\n      .test {\n        flex: 0 1 auto;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with flex-basis set to auto appearing first",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1587,
                "column": 75
            },
            "line": 1587,
            "code": "  it('transforms flex shorthand with flex-basis set to auto appearing first', () => {\n    expect(transform(`\n      .test {\n        flex: auto 0 1;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex auto keyword",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1600,
                "column": 34
            },
            "line": 1600,
            "code": "  it('transforms flex auto keyword', () => {\n    expect(transform(`\n      .test {\n        flex: auto;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 'auto',\n        flexGrow: 1,\n        flexShrink: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex none keyword",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1613,
                "column": 34
            },
            "line": 1613,
            "code": "  it('transforms flex none keyword', () => {\n    expect(transform(`\n      .test {\n        flex: none;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flexFlow shorthand with two values",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1626,
                "column": 51
            },
            "line": 1626,
            "code": "  it('transforms flexFlow shorthand with two values', () => {\n    expect(transform(`\n      .test {\n        flex-flow: column wrap;\n      }\n    `)).toEqual({\n      test: {\n        flexDirection: 'column',\n        flexWrap: 'wrap'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flexFlow shorthand missing flexDirection",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1638,
                "column": 57
            },
            "line": 1638,
            "code": "  it('transforms flexFlow shorthand missing flexDirection', () => {\n    expect(transform(`\n      .test {\n        flex-flow: wrap;\n      }\n    `)).toEqual({\n      test: {\n        flexDirection: 'row',\n        flexWrap: 'wrap'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flexFlow shorthand missing flexWrap",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1650,
                "column": 52
            },
            "line": 1650,
            "code": "  it('transforms flexFlow shorthand missing flexWrap', () => {\n    expect(transform(`\n      .test {\n        flex-flow: column;\n      }\n    `)).toEqual({\n      test: {\n        flexDirection: 'column',\n        flexWrap: 'nowrap'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform invalid flex'",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1662,
                "column": 38
            },
            "line": 1662,
            "code": "  it(\"does not transform invalid flex'\", () => {\n    expect(() => {\n      transform(`\n      .test {\n        flex: 1 2px 3;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"flex: 1 2px 3\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1673,
                "column": 21
            },
            "line": 1673,
            "code": "  it('transforms font', () => {\n    expect(transform(`\n      .test {\n        font: bold italic small-caps 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'bold',\n        fontStyle: 'italic',\n        fontVariant: ['small-caps'],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font missing font-variant",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1689,
                "column": 42
            },
            "line": 1689,
            "code": "  it('transforms font missing font-variant', () => {\n    expect(transform(`\n      .test {\n        font: bold italic 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'bold',\n        fontStyle: 'italic',\n        fontVariant: [],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font missing font-style",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1705,
                "column": 40
            },
            "line": 1705,
            "code": "  it('transforms font missing font-style', () => {\n    expect(transform(`\n      .test {\n        font: bold small-caps 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        fontVariant: ['small-caps'],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font missing font-weight",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1721,
                "column": 41
            },
            "line": 1721,
            "code": "  it('transforms font missing font-weight', () => {\n    expect(transform(`\n      .test {\n        font: italic small-caps 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'italic',\n        fontVariant: ['small-caps'],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font with font-weight normal",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1737,
                "column": 45
            },
            "line": 1737,
            "code": "  it('transforms font with font-weight normal', () => {\n    expect(transform(`\n      .test {\n        font: normal 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: [],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font with font-weight and font-style normal",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1753,
                "column": 60
            },
            "line": 1753,
            "code": "  it('transforms font with font-weight and font-style normal', () => {\n    expect(transform(`\n      .test {\n        font: normal normal 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: [],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font with no font-weight, font-style, and font-variant",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1769,
                "column": 71
            },
            "line": 1769,
            "code": "  it('transforms font with no font-weight, font-style, and font-variant', () => {\n    expect(transform(`\n      .test {\n        font: 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: [],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "omits line height if not specified",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1785,
                "column": 40
            },
            "line": 1785,
            "code": "  it('omits line height if not specified', () => {\n    expect(transform(`\n      .test {\n        font: 16px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: []\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows line height as multiple",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1800,
                "column": 36
            },
            "line": 1800,
            "code": "  it('allows line height as multiple', () => {\n    expect(transform(`\n      .test {\n        font: 16px/1.5 \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: [],\n        lineHeight: 24\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font without quotes",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1816,
                "column": 36
            },
            "line": 1816,
            "code": "  it('transforms font without quotes', () => {\n    expect(transform(`\n      .test {\n        font: bold italic small-caps 16px/18px Helvetica Neue;\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica Neue',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'bold',\n        fontStyle: 'italic',\n        fontVariant: ['small-caps'],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with double quotes",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1832,
                "column": 47
            },
            "line": 1832,
            "code": "  it('transforms font-family with double quotes', () => {\n    expect(transform(`\n      .test {\n        font-family: \"Helvetica Neue\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica Neue'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with single quotes",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1843,
                "column": 47
            },
            "line": 1843,
            "code": "  it('transforms font-family with single quotes', () => {\n    expect(transform(`\n      .test {\n        font-family: 'Helvetica Neue';\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica Neue'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family without quotes",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1854,
                "column": 43
            },
            "line": 1854,
            "code": "  it('transforms font-family without quotes', () => {\n    expect(transform(`\n      .test {\n        font-family: Helvetica Neue;\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica Neue'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with quotes with otherwise invalid values",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1865,
                "column": 70
            },
            "line": 1865,
            "code": "  it('transforms font-family with quotes with otherwise invalid values', () => {\n    expect(transform(`\n      .test {\n        font-family: \"Goudy Bookletter 1911\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Goudy Bookletter 1911'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with quotes with escaped values",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1876,
                "column": 60
            },
            "line": 1876,
            "code": "  it('transforms font-family with quotes with escaped values', () => {\n    expect(transform(`\n      .test {\n        font-family: \"test\\\\A test\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'test\\ntest'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with quotes with escaped quote",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1887,
                "column": 59
            },
            "line": 1887,
            "code": "  it('transforms font-family with quotes with escaped quote', () => {\n    expect(transform(`\n      .test {\n        font-family: \"test\\\\\"test\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'test\"test'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform invalid unquoted font-family",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1898,
                "column": 53
            },
            "line": 1898,
            "code": "  it('does not transform invalid unquoted font-family', () => {\n    expect(() => {\n      transform(`\n      .test {\n        font-family: Goudy Bookletter 1911;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"fontFamily: Goudy Bookletter 1911\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow into shadow- properties",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 1909,
                "column": 51
            },
            "line": 1909,
            "code": "  it('transforms box-shadow into shadow- properties', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px red;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'red',\n        shadowOpacity: 1\n      }\n    });\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px #f00;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: '#f00',\n        shadowOpacity: 1\n      }\n    });\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px 30px #f00;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: '#f00',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports rgb values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 1956,
                "column": 25
            },
            "line": 1956,
            "code": "  it('supports rgb values', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px rgb(100, 100, 100);\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'rgb(100, 100, 100)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports rgba values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 1973,
                "column": 26
            },
            "line": 1973,
            "code": "  it('supports rgba values', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px rgba(100, 100, 100, 0.5);\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'rgba(100, 100, 100, 0.5)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports box-shadow with hsl color",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 1990,
                "column": 40
            },
            "line": 1990,
            "code": "  it('supports box-shadow with hsl color', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px hsl(120, 100%, 50%);\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'hsl(120, 100%, 50%)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports box-shadow with hsla color",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2007,
                "column": 41
            },
            "line": 2007,
            "code": "  it('supports box-shadow with hsla color', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px hsla(120, 100%, 50%, 0.7);\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'hsla(120, 100%, 50%, 0.7)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "trims values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2024,
                "column": 18
            },
            "line": 2024,
            "code": "  it('trims values', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px   20px   30px   #f00 ;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: '#f00',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow with 0 values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2041,
                "column": 41
            },
            "line": 2041,
            "code": "  it('transforms box-shadow with 0 values', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 0 0 1px red;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 0,\n          height: 0\n        },\n        shadowRadius: 'scalePx2dp(1)',\n        shadowColor: 'red',\n        shadowOpacity: 1\n      }\n    });\n    expect(transform(`\n      .test {\n        box-shadow: 0 0 0 red;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 0,\n          height: 0\n        },\n        shadowRadius: 0,\n        shadowColor: 'red',\n        shadowOpacity: 1\n      }\n    });\n    expect(transform(`\n      .test {\n        box-shadow: 1px 1px 0 #00f;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(1)',\n          height: 'scalePx2dp(1)'\n        },\n        shadowRadius: 0,\n        shadowColor: '#00f',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow without blur-radius",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2088,
                "column": 47
            },
            "line": 2088,
            "code": "  it('transforms box-shadow without blur-radius', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px red;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 0,\n        shadowColor: 'red',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow without color",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2105,
                "column": 41
            },
            "line": 2105,
            "code": "  it('transforms box-shadow without color', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'black',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow without blur-radius, color",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2122,
                "column": 54
            },
            "line": 2122,
            "code": "  it('transforms box-shadow without blur-radius, color', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 0,\n        shadowColor: 'black',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow enforces offset to be present",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2139,
                "column": 57
            },
            "line": 2139,
            "code": "  it('transforms box-shadow enforces offset to be present', () => {\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: red;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: red\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow and throws if multiple colors are used",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2148,
                "column": 66
            },
            "line": 2148,
            "code": "  it('transforms box-shadow and throws if multiple colors are used', () => {\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 0 0 0 red yellow green blue;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 0 0 0 red yellow green blue\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow and enforces offset-y if offset-x present",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2157,
                "column": 69
            },
            "line": 2157,
            "code": "  it('transforms box-shadow and enforces offset-y if offset-x present', () => {\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 10px;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 10px\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow and enforces units for non 0 values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2166,
                "column": 63
            },
            "line": 2166,
            "code": "  it('transforms box-shadow and enforces units for non 0 values', () => {\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 10 20px 30px #f00;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 10 20px 30px #f00\"');\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 10px 20;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 10px 20\"');\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 20;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 20\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "textShadow with all values",
            "suites": [
                "text-shadow"
            ],
            "updatePoint": {
                "line": 2191,
                "column": 32
            },
            "line": 2191,
            "code": "  it('textShadow with all values', () => {\n    expect(transform(`\n      .test {\n        text-shadow: 10px 20px 30px red;\n      }\n    `)).toEqual({\n      test: {\n        textShadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        textShadowRadius: 'scalePx2dp(30)',\n        textShadowColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "textShadow omitting blur",
            "suites": [
                "text-shadow"
            ],
            "updatePoint": {
                "line": 2207,
                "column": 30
            },
            "line": 2207,
            "code": "  it('textShadow omitting blur', () => {\n    expect(transform(`\n      .test {\n        text-shadow: 10px 20px red;\n      }\n    `)).toEqual({\n      test: {\n        textShadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        textShadowRadius: 0,\n        textShadowColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "textShadow omitting color",
            "suites": [
                "text-shadow"
            ],
            "updatePoint": {
                "line": 2223,
                "column": 31
            },
            "line": 2223,
            "code": "  it('textShadow omitting color', () => {\n    expect(transform(`\n      .test {\n        text-shadow: 10px 20px;\n      }\n    `)).toEqual({\n      test: {\n        textShadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        textShadowRadius: 0,\n        textShadowColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "textShadow enforces offset-x and offset-y",
            "suites": [
                "text-shadow"
            ],
            "updatePoint": {
                "line": 2239,
                "column": 47
            },
            "line": 2239,
            "code": "  it('textShadow enforces offset-x and offset-y', () => {\n    expect(() => transform(`\n      .test {\n        text-shadow: red;\n      }\n      `)).toThrow('Failed to parse declaration \"textShadow: red\"');\n    expect(() => transform(`\n      .test {\n        text-shadow: 10px red;\n      }\n      `)).toThrow('Failed to parse declaration \"textShadow: 10px red\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform a single rem value",
            "suites": [
                "rem unit"
            ],
            "updatePoint": {
                "line": 2253,
                "column": 41
            },
            "line": 2253,
            "code": "  it('should transform a single rem value', () => {\n    expect(transform(`\n      .test1 {\n        padding: 2rem;\n      }\n      .test2 {\n        font-size: 1rem;\n      }\n    `)).toEqual({\n      test1: {\n        paddingBottom: 'scalePx2dp(32)',\n        paddingLeft: 'scalePx2dp(32)',\n        paddingRight: 'scalePx2dp(32)',\n        paddingTop: 'scalePx2dp(32)'\n      },\n      test2: {\n        fontSize: 'scalePx2dp(16)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform multiple rem values",
            "suites": [
                "rem unit"
            ],
            "updatePoint": {
                "line": 2273,
                "column": 42
            },
            "line": 2273,
            "code": "  it('should transform multiple rem values', () => {\n    expect(transform(`\n      .test1 {\n        transform: translate(1rem, 2rem);\n      }\n      .test2 {\n        box-shadow: 1rem 2rem 3rem #fff;\n      }\n    `)).toEqual({\n      test1: {\n        transform: [{\n          translateY: 'scalePx2dp(32)'\n        }, {\n          translateX: 'scalePx2dp(16)'\n        }]\n      },\n      test2: {\n        shadowColor: '#fff',\n        shadowOffset: {\n          height: 'scalePx2dp(32)',\n          width: 'scalePx2dp(16)'\n        },\n        shadowRadius: 'scalePx2dp(48)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support decimal values",
            "suites": [
                "rem unit"
            ],
            "updatePoint": {
                "line": 2300,
                "column": 35
            },
            "line": 2300,
            "code": "  it('should support decimal values', () => {\n    expect(transform(`\n      .test1 {\n        transform: translate(0.9375rem, 1.625rem);\n      }\n      .test2 {\n        border-radius: 0.5625rem;\n      }\n    `)).toEqual({\n      test1: {\n        transform: [{\n          translateY: 'scalePx2dp(26)'\n        }, {\n          translateX: 'scalePx2dp(15)'\n        }]\n      },\n      test2: {\n        borderRadius: 'scalePx2dp(9)'\n      }\n    });\n    expect(transform(`\n      .test1 {\n        transform: translate(.9375rem, 1.625rem);\n      }\n      .test2 {\n        border-radius: .5625rem;\n      }\n    `)).toEqual({\n      test1: {\n        transform: [{\n          translateY: 'scalePx2dp(26)'\n        }, {\n          translateX: 'scalePx2dp(15)'\n        }]\n      },\n      test2: {\n        borderRadius: 'scalePx2dp(9)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform viewport units",
            "suites": [
                "viewport units"
            ],
            "updatePoint": {
                "line": 2342,
                "column": 37
            },
            "line": 2342,
            "code": "  it('should transform viewport units', () => {\n    expect(transform(`\n      .test {\n        font-size: 1vw;\n        line-height: 2vh;\n        padding: 1vmax;\n        margin: 1vmin;\n      }\n    `)).toEqual({\n      __viewportUnits: true,\n      test: {\n        fontSize: '1vw',\n        lineHeight: '2vh',\n        marginBottom: '1vmin',\n        marginLeft: '1vmin',\n        marginRight: '1vmin',\n        marginTop: '1vmin',\n        paddingBottom: '1vmax',\n        paddingLeft: '1vmax',\n        paddingRight: '1vmax',\n        paddingTop: '1vmax'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms media queries",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2368,
                "column": 30
            },
            "line": 2368,
            "code": "  it('transforms media queries', () => {\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n\n        @media (orientation: landscape) {\n          .container {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'all'\n        }]\n      },\n      container: {\n        backgroundColor: '#f00'\n      },\n      '@media (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "merges media queries",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2403,
                "column": 26
            },
            "line": 2403,
            "code": "  it('merges media queries', () => {\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n        .box {\n          background-color: #f00;\n        }\n\n        @media (orientation: landscape) {\n          .container {\n            background-color: #00f;\n          }\n        }\n        @media (orientation: landscape) {\n          .box {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'all'\n        }]\n      },\n      container: {\n        backgroundColor: '#f00'\n      },\n      box: {\n        backgroundColor: '#f00'\n      },\n      '@media (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        },\n        box: {\n          backgroundColor: '#00f'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform media queries without option enabled",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2452,
                "column": 61
            },
            "line": 2452,
            "code": "  it('does not transform media queries without option enabled', () => {\n    expect(transform(`\n      .container {\n        background-color: #f00;\n      }\n\n      @media (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n  `)).toEqual({\n      container: {\n        backgroundColor: '#f00'\n      }\n    });\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n\n        @media (orientation: landscape) {\n          .container {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: false\n    })).toEqual({\n      container: {\n        backgroundColor: '#f00'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support screen type",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2486,
                "column": 32
            },
            "line": 2486,
            "code": "  it('should support screen type', () => {\n    expect(transform(`\n        .foo {\n          color: blue;\n        }\n        @media screen and (min-height: 50px) and (max-height: 150px) {\n          .foo {\n            color: red;\n          }\n        }\n        @media screen and (min-height: 150px) and (max-height: 200px) {\n          .foo {\n            color: green;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media screen and (min-height: 50px) and (max-height: 150px)': [{\n          expressions: [{\n            feature: 'height',\n            modifier: 'min',\n            value: '50px'\n          }, {\n            feature: 'height',\n            modifier: 'max',\n            value: '150px'\n          }],\n          inverse: false,\n          type: 'screen'\n        }],\n        '@media screen and (min-height: 150px) and (max-height: 200px)': [{\n          expressions: [{\n            feature: 'height',\n            modifier: 'min',\n            value: '150px'\n          }, {\n            feature: 'height',\n            modifier: 'max',\n            value: '200px'\n          }],\n          inverse: false,\n          type: 'screen'\n        }]\n      },\n      foo: {\n        color: 'blue'\n      },\n      '@media screen and (min-height: 50px) and (max-height: 150px)': {\n        foo: {\n          color: 'red'\n        }\n      },\n      '@media screen and (min-height: 150px) and (max-height: 200px)': {\n        foo: {\n          color: 'green'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support all type",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2547,
                "column": 29
            },
            "line": 2547,
            "code": "  it('should support all type', () => {\n    expect(transform(`\n      .foo {\n        color: blue;\n      }\n      @media all and (min-height: 50px) and (max-height: 150px) {\n        .foo {\n          color: red;\n        }\n      }\n      @media all and (min-height: 150px) and (max-height: 200px) {\n        .foo {\n          color: green;\n        }\n      }\n    `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media all and (min-height: 50px) and (max-height: 150px)': [{\n          expressions: [{\n            feature: 'height',\n            modifier: 'min',\n            value: '50px'\n          }, {\n            feature: 'height',\n            modifier: 'max',\n            value: '150px'\n          }],\n          inverse: false,\n          type: 'all'\n        }],\n        '@media all and (min-height: 150px) and (max-height: 200px)': [{\n          expressions: [{\n            feature: 'height',\n            modifier: 'min',\n            value: '150px'\n          }, {\n            feature: 'height',\n            modifier: 'max',\n            value: '200px'\n          }],\n          inverse: false,\n          type: 'all'\n        }]\n      },\n      foo: {\n        color: 'blue'\n      },\n      '@media all and (min-height: 50px) and (max-height: 150px)': {\n        foo: {\n          color: 'red'\n        }\n      },\n      '@media all and (min-height: 150px) and (max-height: 200px)': {\n        foo: {\n          color: 'green'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support platform types",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2608,
                "column": 35
            },
            "line": 2608,
            "code": "  it('should support platform types', () => {\n    expect(transform(`\n      @media web and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media ios and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media android and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media windows and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media macos and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media dom and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      `, {\n      parseMediaQueries: true\n    })).toEqual({\n      '@media android and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media dom and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media ios and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media macos and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media web and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media windows and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      __mediaQueries: {\n        '@media android and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'android'\n        }],\n        '@media dom and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'dom'\n        }],\n        '@media ios and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'ios'\n        }],\n        '@media macos and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'macos'\n        }],\n        '@media web and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'web'\n        }],\n        '@media windows and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'windows'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support NOT operator",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2731,
                "column": 33
            },
            "line": 2731,
            "code": "  it('should support NOT operator', () => {\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n\n        @media not screen and (device-width: 768px)  {\n          .container {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media not screen and (device-width: 768px)': [{\n          expressions: [{\n            feature: 'device-width',\n            modifier: undefined,\n            value: '768px'\n          }],\n          inverse: true,\n          type: 'screen'\n        }]\n      },\n      container: {\n        backgroundColor: '#f00'\n      },\n      '@media not screen and (device-width: 768px)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support OR queries",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2766,
                "column": 31
            },
            "line": 2766,
            "code": "  it('should support OR queries', () => {\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n\n        @media (orientation: portrait), (orientation: landscape)  {\n          .container {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media (orientation: portrait), (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'portrait'\n          }],\n          inverse: false,\n          type: 'all'\n        }, {\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'all'\n        }]\n      },\n      container: {\n        backgroundColor: '#f00'\n      },\n      '@media (orientation: portrait), (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw for invalid types",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2809,
                "column": 36
            },
            "line": 2809,
            "code": "  it('should throw for invalid types', () => {\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n\n        @media screens {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query type \"screens\"');\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media sdfgsdfg {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query type \"sdfgsdfg\"');\n    expect(() => transform(`\n      .foo {\n        color: blue;\n      }\n      @media linux and (orientation: landscape) {\n        .foo {\n          color: red;\n        }\n      }\n    `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query type \"linux\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw for invalid features",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2848,
                "column": 39
            },
            "line": 2848,
            "code": "  it('should throw for invalid features', () => {\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (min-heigh: 50px) and (max-height: 150px) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query feature \"min-heigh\"');\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (orientations: landscape) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query feature \"orientations\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw for values without units",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2874,
                "column": 43
            },
            "line": 2874,
            "code": "  it('should throw for values without units', () => {\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (min-height: 50) and (max-height: 150px) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query expression \"(min-height: 50)\"');\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (min-height: 50px) and (max-height: 150) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query expression \"(max-height: 150)\"');\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (min-width) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query expression \"(min-width)\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should parse ICSS :export pseudo-selectors",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2915,
                "column": 48
            },
            "line": 2915,
            "code": "  it('should parse ICSS :export pseudo-selectors', () => {\n    expect(transform(`\n      :export {\n        whitecolor: #fcf5ed;\n        test: 1px;\n      }\n    `)).toEqual({\n      whitecolor: '#fcf5ed',\n      test: '1px'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "if there is more than :export one in a file, the keys and values are combined and exported together",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2926,
                "column": 105
            },
            "line": 2926,
            "code": "  it('if there is more than :export one in a file, the keys and values are combined and exported together', () => {\n    expect(transform(`\n\n      :export {\n        blackColor: #000;\n      }\n\n      .bar {\n        color: blue;\n      }\n\n      :export {\n        whitecolor: #fcf5ed;\n        test: 1px;\n      }\n    `)).toEqual({\n      bar: {\n        color: 'blue'\n      },\n      blackColor: '#000',\n      whitecolor: '#fcf5ed',\n      test: '1px'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support exportedKey value with spaces",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2950,
                "column": 50
            },
            "line": 2950,
            "code": "  it('should support exportedKey value with spaces', () => {\n    expect(transform(`\n      :export {\n        blackColor: something is something;\n      }\n\n      .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      bar: {\n        color: 'blue'\n      },\n      blackColor: 'something is something'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "an exportedValue does not need to be quoted, it is already treated as a literal string",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2966,
                "column": 92
            },
            "line": 2966,
            "code": "  it('an exportedValue does not need to be quoted, it is already treated as a literal string', () => {\n    expect(transform(`\n      :export {\n        foo: something;\n        boo: 0;\n      }\n\n      .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      bar: {\n        color: 'blue'\n      },\n      foo: 'something',\n      boo: '0'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should parse :export and support the same exportedKey with different case",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2984,
                "column": 79
            },
            "line": 2984,
            "code": "  it('should parse :export and support the same exportedKey with different case', () => {\n    expect(transform(`\n      :export {\n        whitecolor: #fcf5ed;\n        WhiteColor: #fff;\n      }\n    `)).toEqual({\n      whitecolor: '#fcf5ed',\n      WhiteColor: '#fff'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should parse a selector and :export",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2995,
                "column": 41
            },
            "line": 2995,
            "code": "  it('should parse a selector and :export', () => {\n    expect(transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        whitecolor: #fcf5ed;\n        b: 0;\n        test: 1px;\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      },\n      whitecolor: '#fcf5ed',\n      b: '0',\n      test: '1px'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should do nothing with an empty :export block",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3015,
                "column": 51
            },
            "line": 3015,
            "code": "  it('should do nothing with an empty :export block', () => {\n    expect(transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "if a particular exportedKey is duplicated, the last (in source order) takes precedence.",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3029,
                "column": 93
            },
            "line": 3029,
            "code": "  it('if a particular exportedKey is duplicated, the last (in source order) takes precedence.', () => {\n    expect(transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        bar: 1;\n        bar: 2;\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      },\n      bar: '2'\n    });\n    expect(transform(`\n      :export {\n        bar: 3;\n      }\n\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        bar: 1;\n        bar: 2;\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      },\n      bar: '2'\n    });\n    expect(transform(`\n      :export {\n        baz: 1;\n        bar: 3;\n      }\n\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        bar: 1;\n        bar: 2;\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      },\n      baz: '1',\n      bar: '2'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw an error if exportedKey has the same name as a class and is defined twice",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3086,
                "column": 92
            },
            "line": 3086,
            "code": "  it('should throw an error if exportedKey has the same name as a class and is defined twice', () => {\n    expect(() => transform(`\n      :export {\n        bar: 1;\n        bar: 2;\n      }\n\n      .bar {\n        color: blue;\n      }\n    `)).toThrow('Failed to parse :export block because a CSS class in the same file is already using the name \"bar\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw an error if exportedKey has the same name as a class",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3098,
                "column": 71
            },
            "line": 3098,
            "code": "  it('should throw an error if exportedKey has the same name as a class', () => {\n    expect(() => transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        foo: 1;\n      }\n    `)).toThrow('Failed to parse :export block because a CSS class in the same file is already using the name \"foo\"');\n    expect(() => transform(`\n      :export {\n        foo: 1;\n      }\n\n      .foo {\n        color: red;\n      }\n    `)).toThrow('Failed to parse :export block because a CSS class in the same file is already using the name \"foo\"');\n    expect(() => transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        foo: 1;\n      }\n\n      .foo {\n        color: red;\n      }\n    `)).toThrow('Failed to parse :export block because a CSS class in the same file is already using the name \"foo\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw for :export that is not top level",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3131,
                "column": 52
            },
            "line": 3131,
            "code": "  it('should throw for :export that is not top level', () => {\n    expect(() => transform(`\n      .foo {\n        color: red;\n        :export {\n          bar: 1;\n        }\n      }\n    `)).toThrow();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "1 should work on the readme example",
            "suites": [
                "pxtorem"
            ],
            "updatePoint": {
                "line": 18,
                "column": 41
            },
            "line": 18,
            "code": "  it('1 should work on the readme example', function () {\n    const input = 'h1 { margin: 0 0 20px; font-size: 32px; line-height: 1.2; letter-spacing: 1px; }';\n    const output = 'h1 { margin: 0 0 0.5rem; font-size: 0.8rem; line-height: 1.2; letter-spacing: 0.025rem; }';\n    const processed = postcss(pxtorem({\n      platform: 'h5',\n      designWidth: 640\n    })).process(input).css;\n    expect(processed).toBe(output);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should replace the px unit with rem",
            "suites": [
                "pxtorem"
            ],
            "updatePoint": {
                "line": 27,
                "column": 43
            },
            "line": 27,
            "code": "  it('2 should replace the px unit with rem', function () {\n    const processed = postcss(pxtorem({\n      platform: 'h5',\n      designWidth: 640\n    })).process(basicCSS).css;\n    const expected = '.rule { font-size: 0.375rem }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should ignore non px properties",
            "suites": [
                "pxtorem"
            ],
            "updatePoint": {
                "line": 35,
                "column": 39
            },
            "line": 35,
            "code": "  it('3 should ignore non px properties', function () {\n    const expected = '.rule { font-size: 2em }';\n    const processed = postcss(pxtorem({\n      platform: 'h5',\n      designWidth: 640\n    })).process(expected).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should handle < 1 values and values without a leading 0 - legacy",
            "suites": [
                "pxtorem"
            ],
            "updatePoint": {
                "line": 43,
                "column": 72
            },
            "line": 43,
            "code": "  it('4 should handle < 1 values and values without a leading 0 - legacy', function () {\n    const rules = '.rule { margin: 0.5rem .5px -0.2px -.2em }';\n    const expected = '.rule { margin: 0.5rem 0.0125rem -0.005rem -.2em }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['margin']\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "5 should handle < 1 values and values without a leading 0",
            "suites": [
                "pxtorem"
            ],
            "updatePoint": {
                "line": 54,
                "column": 63
            },
            "line": 54,
            "code": "  it('5 should handle < 1 values and values without a leading 0', function () {\n    const rules = '.rule { margin: 0.5rem .5px -0.2px -.2em }';\n    const expected = '.rule { margin: 0.5rem 0.0125rem -0.005rem -.2em }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propList: ['margin']\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "6 should not add properties that already exist",
            "suites": [
                "pxtorem"
            ],
            "updatePoint": {
                "line": 65,
                "column": 52
            },
            "line": 65,
            "code": "  it('6 should not add properties that already exist', function () {\n    const expected = '.rule { font-size: 40px; font-size: 1rem; }';\n    const processed = postcss(pxtorem({\n      platform: 'h5',\n      designWidth: 640\n    })).process(expected).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "7 should remain unitless if 0",
            "suites": [
                "pxtorem"
            ],
            "updatePoint": {
                "line": 73,
                "column": 35
            },
            "line": 73,
            "code": "  it('7 should remain unitless if 0', function () {\n    const expected = '.rule { font-size: 0px; font-size: 0; }';\n    const processed = postcss(pxtorem()).process(expected).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should not replace values in double quotes or single quotes - legacy",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 80,
                "column": 76
            },
            "line": 80,
            "code": "  it('1 should not replace values in double quotes or single quotes - legacy', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640 // propWhiteList: []\n\n    };\n    const rules = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 16px; }';\n    const expected = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 0.4rem; }';\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should not replace values in double quotes or single quotes",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 91,
                "column": 67
            },
            "line": 91,
            "code": "  it('2 should not replace values in double quotes or single quotes', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propList: ['*']\n    };\n    const rules = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 16px; }';\n    const expected = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 0.4rem; }';\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should not replace values in `url()` - legacy",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 102,
                "column": 53
            },
            "line": 102,
            "code": "  it('3 should not replace values in `url()` - legacy', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640 // propWhiteList: []\n\n    };\n    const rules = '.rule { background: url(16px.jpg); font-size: 16px; }';\n    const expected = '.rule { background: url(16px.jpg); font-size: 0.4rem; }';\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should not replace values in `url()`",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 113,
                "column": 44
            },
            "line": 113,
            "code": "  it('4 should not replace values in `url()`', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propList: ['*']\n    };\n    const rules = '.rule { background: url(16px.jpg); font-size: 16px; }';\n    const expected = '.rule { background: url(16px.jpg); font-size: 0.4rem; }';\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "5 should not replace values with an uppercase P or X",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 124,
                "column": 58
            },
            "line": 124,
            "code": "  it('5 should not replace values with an uppercase P or X', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propList: ['*']\n    };\n    const rules = '.rule { margin: 12px calc(100% - 14PX); height: calc(100% - 20px); font-size: 12Px; line-height: 16px; }';\n    const expected = '.rule { margin: 0.3rem calc(100% - 14PX); height: calc(100% - 0.5rem); font-size: 12Px; line-height: 0.4rem; }';\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should replace using a decimal of 2 places - legacy",
            "suites": [
                "unitPrecision"
            ],
            "updatePoint": {
                "line": 138,
                "column": 59
            },
            "line": 138,
            "code": "  it('1 should replace using a decimal of 2 places - legacy', function () {\n    const expected = '.rule { font-size: 0.38rem }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      unit_precision: 2\n    };\n    const processed = postcss(pxtorem(options)).process(basicCSS).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should replace using a decimal of 2 places",
            "suites": [
                "unitPrecision"
            ],
            "updatePoint": {
                "line": 148,
                "column": 50
            },
            "line": 148,
            "code": "  it('2 should replace using a decimal of 2 places', function () {\n    const expected = '.rule { font-size: 0.38rem }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      unitPrecision: 2\n    };\n    const processed = postcss(pxtorem(options)).process(basicCSS).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should only replace properties in the white list - legacy",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 161,
                "column": 65
            },
            "line": 161,
            "code": "  it('3 should only replace properties in the white list - legacy', function () {\n    const expected = '.rule { font-size: 15px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      prop_white_list: ['font']\n    };\n    const processed = postcss(pxtorem(options)).process(basicCSS).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should only replace properties in the white list - legacy",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 171,
                "column": 65
            },
            "line": 171,
            "code": "  it('4 should only replace properties in the white list - legacy', function () {\n    const expected = '.rule { font-size: 15px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['font']\n    };\n    const processed = postcss(pxtorem(options)).process(basicCSS).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "5 should only replace properties in the white list - legacy",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 181,
                "column": 65
            },
            "line": 181,
            "code": "  it('5 should only replace properties in the white list - legacy', function () {\n    const css = '.rule { margin: 16px; margin-left: 10px }';\n    const expected = '.rule { margin: 0.4rem; margin-left: 10px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['margin']\n    };\n    const processed = postcss(pxtorem(options)).process(css).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "6 should only replace properties in the prop list",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 192,
                "column": 55
            },
            "line": 192,
            "code": "  it('6 should only replace properties in the prop list', function () {\n    const css = '.rule { font-size: 16px; margin: 16px; margin-left: 5px; padding: 5px; padding-right: 16px }';\n    const expected = '.rule { font-size: 0.4rem; margin: 0.4rem; margin-left: 5px; padding: 5px; padding-right: 0.4rem }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['*font*', 'margin*', '!margin-left', '*-right', 'pad']\n    };\n    const processed = postcss(pxtorem(options)).process(css).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "7 should only replace properties in the prop list with wildcard",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 203,
                "column": 69
            },
            "line": 203,
            "code": "  it('7 should only replace properties in the prop list with wildcard', function () {\n    const css = '.rule { font-size: 16px; margin: 16px; margin-left: 5px; padding: 5px; padding-right: 16px }';\n    const expected = '.rule { font-size: 16px; margin: 0.4rem; margin-left: 5px; padding: 5px; padding-right: 16px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['*', '!margin-left', '!*padding*', '!font*']\n    };\n    const processed = postcss(pxtorem(options)).process(css).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "8 should replace all properties when white list is empty",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 214,
                "column": 62
            },
            "line": 214,
            "code": "  it('8 should replace all properties when white list is empty', function () {\n    const rules = '.rule { margin: 16px; font-size: 15px }';\n    const expected = '.rule { margin: 0.4rem; font-size: 0.375rem }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640 // propWhiteList: []\n\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should ignore selectors in the selector black list - legacy",
            "suites": [
                "selectorBlackList"
            ],
            "updatePoint": {
                "line": 228,
                "column": 67
            },
            "line": 228,
            "code": "  it('1 should ignore selectors in the selector black list - legacy', function () {\n    const rules = '.rule { font-size: 15px } .rule2 { font-size: 15px }';\n    const expected = '.rule { font-size: 0.375rem } .rule2 { font-size: 15px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      selector_black_list: ['.rule2']\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should ignore selectors in the selector black list",
            "suites": [
                "selectorBlackList"
            ],
            "updatePoint": {
                "line": 239,
                "column": 58
            },
            "line": 239,
            "code": "  it('2 should ignore selectors in the selector black list', function () {\n    const rules = '.rule { font-size: 15px } .rule2 { font-size: 15px }';\n    const expected = '.rule { font-size: 0.375rem } .rule2 { font-size: 15px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      selectorBlackList: ['.rule2']\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should ignore every selector with `body$`",
            "suites": [
                "selectorBlackList"
            ],
            "updatePoint": {
                "line": 250,
                "column": 49
            },
            "line": 250,
            "code": "  it('3 should ignore every selector with `body$`', function () {\n    const rules = 'body { font-size: 16px; } .class-body$ { font-size: 16px; } .simple-class { font-size: 16px; }';\n    const expected = 'body { font-size: 0.4rem; } .class-body$ { font-size: 16px; } .simple-class { font-size: 0.4rem; }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      selectorBlackList: ['body$']\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should only ignore exactly `body`",
            "suites": [
                "selectorBlackList"
            ],
            "updatePoint": {
                "line": 261,
                "column": 41
            },
            "line": 261,
            "code": "  it('4 should only ignore exactly `body`', function () {\n    const rules = 'body { font-size: 16px; } .class-body { font-size: 16px; } .simple-class { font-size: 16px; }';\n    const expected = 'body { font-size: 16px; } .class-body { font-size: 0.4rem; } .simple-class { font-size: 0.4rem; }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      selectorBlackList: [/^body$/]\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should leave fallback pixel unit with root em value",
            "suites": [
                "replace"
            ],
            "updatePoint": {
                "line": 274,
                "column": 59
            },
            "line": 274,
            "code": "  it('1 should leave fallback pixel unit with root em value', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      replace: false\n    };\n    const processed = postcss(pxtorem(options)).process(basicCSS).css;\n    const expected = '.rule { font-size: 15px; font-size: 0.375rem }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should replace px in media queries",
            "suites": [
                "mediaQuery"
            ],
            "updatePoint": {
                "line": 287,
                "column": 42
            },
            "line": 287,
            "code": "  it('1 should replace px in media queries', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      media_query: true\n    };\n    const processed = postcss(pxtorem(options)).process('@media (min-width: 500px) { .rule { font-size: 16px } }').css;\n    const expected = '@media (min-width: 12.5rem) { .rule { font-size: 0.4rem } }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should replace px in media queries",
            "suites": [
                "mediaQuery"
            ],
            "updatePoint": {
                "line": 297,
                "column": 42
            },
            "line": 297,
            "code": "  it('2 should replace px in media queries', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      mediaQuery: true\n    };\n    const processed = postcss(pxtorem(options)).process('@media (min-width: 500px) { .rule { font-size: 16px } }').css;\n    const expected = '@media (min-width: 12.5rem) { .rule { font-size: 0.4rem } }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should not replace values below minPixelValue",
            "suites": [
                "minPixelValue"
            ],
            "updatePoint": {
                "line": 309,
                "column": 53
            },
            "line": 309,
            "code": "  it('1 should not replace values below minPixelValue', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      // propWhiteList: [],\n      minPixelValue: 2\n    };\n    const rules = '.rule { border: 1px solid #000; font-size: 16px; margin: 1px 10px; }';\n    const expected = '.rule { border: 1px solid #000; font-size: 0.4rem; margin: 1px 0.25rem; }';\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should find \"exact\" matches from propList",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 323,
                "column": 49
            },
            "line": 323,
            "code": "  it('1 should find \"exact\" matches from propList', function () {\n    const propList = ['font-size', 'margin', '!padding', '*border*', '*', '*y', '!*font*'];\n    const expected = 'font-size,margin';\n    expect(filterPropList.exact(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should find \"contain\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 328,
                "column": 72
            },
            "line": 328,
            "code": "  it('2 should find \"contain\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', '*border*', '*', '*y', '!*font*'];\n    const expected = 'margin,border';\n    expect(filterPropList.contain(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should find \"start\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 333,
                "column": 70
            },
            "line": 333,
            "code": "  it('3 should find \"start\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n    const expected = 'border';\n    expect(filterPropList.startWith(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should find \"end\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 338,
                "column": 68
            },
            "line": 338,
            "code": "  it('4 should find \"end\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n    const expected = 'y';\n    expect(filterPropList.endWith(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "5 should find \"not\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 343,
                "column": 68
            },
            "line": 343,
            "code": "  it('5 should find \"not\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n    const expected = 'padding';\n    expect(filterPropList.notExact(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "6 should find \"not contain\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 348,
                "column": 76
            },
            "line": 348,
            "code": "  it('6 should find \"not contain\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', '!border*', '*', '*y', '!*font*'];\n    const expected = 'font';\n    expect(filterPropList.notContain(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "7 should find \"not start\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 353,
                "column": 74
            },
            "line": 353,
            "code": "  it('7 should find \"not start\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', '!border*', '*', '*y', '!*font*'];\n    const expected = 'border';\n    expect(filterPropList.notStartWith(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "8 should find \"not end\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 358,
                "column": 72
            },
            "line": 358,
            "code": "  it('8 should find \"not end\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', '!border*', '*', '!*y', '!*font*'];\n    const expected = 'y';\n    expect(filterPropList.notEndWith(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "不传任何配置",
            "suites": [
                "不传任何配置"
            ],
            "updatePoint": {
                "line": 366,
                "column": 12
            },
            "line": 366,
            "code": "  it('不传任何配置', function () {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 20rpx;font-size: 40rpx;line-height: 1.2;}';\n    const processed = postcss(pxtorem()).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 750} ",
            "suites": [
                "platform 为 weapp"
            ],
            "updatePoint": {
                "line": 374,
                "column": 46
            },
            "line": 374,
            "code": "  it('{platform: \\'weapp\\', designWidth: 750} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 20rpx;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 750\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 640} ",
            "suites": [
                "platform 为 weapp"
            ],
            "updatePoint": {
                "line": 384,
                "column": 46
            },
            "line": 384,
            "code": "  it('{platform: \\'weapp\\', designWidth: 640} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 17.09402rpx;font-size: 34.18803rpx;line-height: 1.2;}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 640\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 750} ",
            "suites": [
                "platform 为 h5"
            ],
            "updatePoint": {
                "line": 396,
                "column": 43
            },
            "line": 396,
            "code": "  it('{platform: \\'h5\\', designWidth: 750} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 0.42667rem;font-size: 0.85333rem;line-height: 1.2;}';\n    const options = {\n      platform: 'h5',\n      designWidth: 750\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5"
            ],
            "updatePoint": {
                "line": 406,
                "column": 43
            },
            "line": 406,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 0.5rem;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，文件头部带注释的不转换"
            ],
            "updatePoint": {
                "line": 418,
                "column": 43
            },
            "line": 418,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*postcss-pxtransform disable*/ h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(rules);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，指定 h5 平台保留"
            ],
            "updatePoint": {
                "line": 429,
                "column": 43
            },
            "line": 429,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifdef  h5  */ h1 {margin: 0 0 20Px;font-size: 40Px;line-height: 1.2;}/*  #endif  */';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(rules);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，指定平台 rn 平台保留"
            ],
            "updatePoint": {
                "line": 440,
                "column": 43
            },
            "line": 440,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifdef  rn  */ h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}/*  #endif  */ .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe('/*  #ifdef  rn  *//*  #endif  */ .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'rn', designWidth: 640} ",
            "suites": [
                "platform 为 rn，指定平台 h5 rn 平台保留"
            ],
            "updatePoint": {
                "line": 451,
                "column": 43
            },
            "line": 451,
            "code": "  it('{platform: \\'rn\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifdef  h5 rn  */ h1 {margin: 0 0 20Px;font-size: 40Px;line-height: 1.2;}/*  #endif  */ .test{}';\n    const options = {\n      platform: 'rn',\n      designWidth: 640\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(rules);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，指定平台 rn 平台剔除"
            ],
            "updatePoint": {
                "line": 462,
                "column": 43
            },
            "line": 462,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifndef  rn  */ h1 {margin: 0 0 20Px;font-size: 40Px;line-height: 1.2;}/*  #endif  */ .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe(rules);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，指定平台 h5 平台剔除"
            ],
            "updatePoint": {
                "line": 473,
                "column": 43
            },
            "line": 473,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifndef  h5  */ h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}/*  #endif  */ .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(pxtorem(options)).process(rules).css;\n    expect(processed).toBe('/*  #ifndef  h5  *//*  #endif  */ .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "#indent",
            "suites": [
                "shared utils"
            ],
            "updatePoint": {
                "line": 4,
                "column": 13
            },
            "line": 4,
            "code": "  it('#indent', async () => {\n    const inner =\n`<text>\n  hello, world\n</text>`\n\n    const outer =\n`<view>\n  ${indent(inner, 2)}\n</view>`\n\n    const result =\n`<view>\n  <text>\n    hello, world\n  </text>\n</view>`\n\n    expect(outer).toBe(result)\n  })",
            "file": "shared.spec.ts",
            "skipped": false,
            "dir": "packages/shared/__tests__"
        },
        {
            "name": "does not allow vendor prefixes in values",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 4,
                "column": 46
            },
            "line": 4,
            "code": "  it('does not allow vendor prefixes in values', () => {\n    const css = '.test { display: -webkit-flex; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('value-no-vendor-prefix')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow vendor prefixes in properties",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 18,
                "column": 50
            },
            "line": 18,
            "code": "  it('does not allow vendor prefixes in properties', () => {\n    const css = '.test { -webkit-transform: scale(1); }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('property-no-vendor-prefix')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow vendor prefixes in at-rules",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 32,
                "column": 48
            },
            "line": 32,
            "code": "  it('does not allow vendor prefixes in at-rules', () => {\n    const css = '.test { @-webkit-keyframes() { 0% { color: blue } 100% { color: red; } }  }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('at-rule-no-vendor-prefix')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow vendor prefixes in media features",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 46,
                "column": 54
            },
            "line": 46,
            "code": "  it('does not allow vendor prefixes in media features', () => {\n    const css = '@media (-webkit-min-device-pixel-ratio: 1) { .foo { color: blue; } }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('media-feature-name-no-vendor-prefix')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow unknown properties",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 60,
                "column": 39
            },
            "line": 60,
            "code": "  it('does not allow unknown properties', () => {\n    const css = '.test { word-wrap: break-word; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('react-native/css-property-no-unknown')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for id selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 74,
                "column": 28
            },
            "line": 74,
            "code": "  it('warns for id selectors', () => {\n    const css = '#test { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('id selectors are ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for type selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 88,
                "column": 30
            },
            "line": 88,
            "code": "  it('warns for type selectors', () => {\n    const css = 'input { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('type selectors are ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for universal selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 102,
                "column": 35
            },
            "line": 102,
            "code": "  it('warns for universal selectors', () => {\n    const css = '* { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('universal selectors are ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for combinator selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 116,
                "column": 36
            },
            "line": 116,
            "code": "  it('warns for combinator selectors', () => {\n    const css = '.foo + .bar { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('combinator selectors are ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for attribute selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 130,
                "column": 35
            },
            "line": 130,
            "code": "  it('warns for attribute selectors', () => {\n    const css = '[type=\\'text\\'] { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('attribute selectors are ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for qualifying type selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 144,
                "column": 41
            },
            "line": 144,
            "code": "  it('warns for qualifying type selectors', () => {\n    const css = 'a.link { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('type selectors are ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for pseudo classes",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 158,
                "column": 30
            },
            "line": 158,
            "code": "  it('warns for pseudo classes', () => {\n    const css = '.foo:before { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('pseudo class selectors are ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not warn for ICSS :export pseudo-selector",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 172,
                "column": 52
            },
            "line": 172,
            "code": "  it('does not warn for ICSS :export pseudo-selector', () => {\n    const css = ':export { color: red; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output).toBe('');\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not warn for :root pseudo-selector",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 186,
                "column": 45
            },
            "line": 186,
            "code": "  it('does not warn for :root pseudo-selector', () => {\n    const css = ':root { --my-color: red; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output).toBe('');\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for font-weights that are not compatible with Android",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 200,
                "column": 65
            },
            "line": 200,
            "code": "  it('warns for font-weights that are not compatible with Android', () => {\n    const css = '.foo { font-weight: 300 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('font-weight value')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for incompatible @-rules",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 214,
                "column": 36
            },
            "line": 214,
            "code": "  it('warns for incompatible @-rules', () => {\n    const css = '.foo { @keyframes() { 0% { color: blue } 100% { color: red; } } }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('the @-rule is ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for @charset",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 228,
                "column": 24
            },
            "line": 228,
            "code": "  it('warns for @charset', () => {\n    const css = '@charset \"utf-8\";';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('the @-rule is ignored')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for incompatible units",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 242,
                "column": 34
            },
            "line": 242,
            "code": "  it('warns for incompatible units', () => {\n    const css = '.foo { font-size: 1ch; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('the unit is ignored by React Native CSS modules')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "allows pseudo and type selectors (ignored by React Native CSS modules, but can be used for web when creating hybrid apps)",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 256,
                "column": 127
            },
            "line": 256,
            "code": "  it('allows pseudo and type selectors (ignored by React Native CSS modules, but can be used for web when creating hybrid apps)', () => {\n    const css = '.test:hover { color: blue; } .test input[type=text] { color: red; }';\n    expect.assertions(1);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "should make configs",
            "suites": [
                "inspect",
                "build"
            ],
            "updatePoint": {
                "line": 49,
                "column": 27
            },
            "line": 49,
            "code": "    it('should make configs', () => {\n      const platform = 'weapp'\n      setProcessArgv('taro build --type weapp --watch --port 8080')\n      cli.run()\n      const ins = MockedKernel.mock.instances[0]\n\n      const opts = Object.assign({}, baseOpts)\n      opts.options = Object.assign({}, baseOpts.options, {\n        platform,\n        isWatch: true,\n        port: 8080,\n        deviceType: undefined,\n        resetCache: false,\n        qr: false\n      })\n\n      expect(ins.run).toHaveBeenCalledWith({\n        name: 'build',\n        opts\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should not set node env again",
            "suites": [
                "inspect",
                "build"
            ],
            "updatePoint": {
                "line": 71,
                "column": 37
            },
            "line": 71,
            "code": "    it('should not set node env again', () => {\n      process.env.NODE_ENV = 'development'\n      setProcessArgv('taro build --type weapp')\n      cli.run()\n      expect(process.env.NODE_ENV).toEqual('development')\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make plugin config",
            "suites": [
                "inspect",
                "build"
            ],
            "line": 78,
            "code": "    it.skip('should make plugin config', () => {",
            "file": "cli.spec.ts",
            "skipped": true,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make configs",
            "suites": [
                "inspect",
                "init"
            ],
            "updatePoint": {
                "line": 106,
                "column": 27
            },
            "line": 106,
            "code": "    it('should make configs', () => {\n      const projectName = 'temp'\n      const templateSource = 'https://url'\n      const template = 'mobx'\n      const css = 'sass'\n      setProcessArgv('taro init temp --typescript --template-source=https://url --clone --template mobx --css sass')\n      cli.run()\n      const ins = MockedKernel.mock.instances[0]\n      expect(ins.run).toHaveBeenCalledWith({\n        name: 'init',\n        opts: Object.assign({}, baseOpts, {\n          projectName,\n          typescript: true,\n          templateSource,\n          clone: true,\n          template,\n          css\n        })\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should set project name",
            "suites": [
                "inspect",
                "init"
            ],
            "updatePoint": {
                "line": 127,
                "column": 31
            },
            "line": 127,
            "code": "    it('should set project name', () => {\n      const projectName = 'demo'\n      setProcessArgv('taro init --name demo')\n      cli.run()\n      const ins = MockedKernel.mock.instances[0]\n      expect(ins.run).toHaveBeenCalledWith({\n        name: 'init',\n        opts: Object.assign({}, baseOpts, { projectName })\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make configs",
            "suites": [
                "inspect",
                "convert"
            ],
            "updatePoint": {
                "line": 140,
                "column": 27
            },
            "line": 140,
            "code": "    it('should make configs', () => {\n      setProcessArgv('taro convert')\n      cli.run()\n      const ins = MockedKernel.mock.instances[0]\n      expect(ins.run).toHaveBeenCalledWith({\n        name: 'convert',\n        opts: {\n          _: ['convert'],\n          options: {},\n          isHelp: false\n        }\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make configs",
            "suites": [
                "inspect",
                "customCommand"
            ],
            "updatePoint": {
                "line": 156,
                "column": 27
            },
            "line": 156,
            "code": "    it('should make configs', () => {\n      const cmd = 'inspect'\n      const _ = [cmd, 'entry']\n      const type = 'weapp'\n      setProcessArgv('taro inspect entry --type weapp -h --version')\n      cli.run()\n      const ins = MockedKernel.mock.instances[0]\n      expect(ins.run).toHaveBeenCalledWith({\n        name: cmd,\n        opts: {\n          _,\n          options: {\n            type\n          },\n          isHelp: true\n        }\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log helps",
            "suites": [
                "inspect",
                "others"
            ],
            "updatePoint": {
                "line": 177,
                "column": 24
            },
            "line": 177,
            "code": "    it('should log helps', () => {\n      const spy = jest.spyOn(console, 'log')\n      spy.mockImplementation(() => {})\n\n      setProcessArgv('taro -h')\n      cli.run()\n      expect(spy).toBeCalledTimes(17)\n\n      spy.mockRestore()\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log version",
            "suites": [
                "inspect",
                "others"
            ],
            "updatePoint": {
                "line": 188,
                "column": 26
            },
            "line": 188,
            "code": "    it('should log version', () => {\n      const spy = jest.spyOn(console, 'log')\n      spy.mockImplementation(() => {})\n\n      setProcessArgv('taro -v')\n      cli.run()\n      expect(spy).toBeCalledWith(getPkgVersion())\n\n      spy.mockRestore()\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because can't find home dir",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 46,
                "column": 46
            },
            "line": 46,
            "code": "  it('should exit because can\\'t find home dir', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    getUserHomeDirMocked.mockReturnValue('')\n\n    await runConfig('')\n\n    expect(logSpy).toBeCalledWith('找不到用户根目录')\n    logSpy.mockRestore()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when getting config without args key",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 58,
                "column": 54
            },
            "line": 58,
            "code": "  it('should warn when getting config without args key', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runConfig('', { args: ['get'] })\n\n    expect(logSpy).toBeCalledWith('Usage: taro config get <key>')\n    logSpy.mockRestore()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should get config",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 68,
                "column": 23
            },
            "line": 68,
            "code": "  it('should get config', async () => {\n    const key = 'k'\n    const value = 'v'\n    const configPath = path.join('/', `${TARO_CONFIG_FLODER}/${TARO_BASE_CONFIG}`)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockImplementation(() => ({\n      [key]: value\n    }))\n\n    await runConfig('', { args: ['get', key] })\n\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, `key: ${key}, value: ${value}`)\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when getting config without args value",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 89,
                "column": 56
            },
            "line": 89,
            "code": "  it('should warn when getting config without args value', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runConfig('', { args: ['set', 'k'] })\n\n    expect(logSpy).toBeCalledWith('Usage: taro config set <key> <value>')\n    logSpy.mockRestore()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should set config",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 99,
                "column": 23
            },
            "line": 99,
            "code": "  it('should set config', async () => {\n    const key = 'k'\n    const value = 'v'\n    const configPath = path.join('/', `${TARO_CONFIG_FLODER}/${TARO_BASE_CONFIG}`)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockReturnValue({ a: 1 })\n\n    await runConfig('', { args: ['set', key, value] })\n\n    expect(writeJSONSyncMocked).toBeCalledWith(configPath, {\n      a: 1,\n      [key]: value\n    })\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, `set key: ${key}, value: ${value}`)\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n    writeJSONSyncMocked.mockClear()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should set config with init",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 123,
                "column": 33
            },
            "line": 123,
            "code": "  it('should set config with init', async () => {\n    const key = 'k'\n    const value = 'v'\n    const configPath = path.join('/', `${TARO_CONFIG_FLODER}/${TARO_BASE_CONFIG}`)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    existsSyncMocked.mockReturnValue(false)\n\n    await runConfig('', { args: ['set', key, value] })\n\n    expect(ensureFileSyncMocked).toBeCalledWith(configPath)\n    expect(writeJSONSyncMocked).toBeCalledWith(configPath, { [key]: value })\n    expect(logSpy).toBeCalledWith(`set key: ${key}, value: ${value}`)\n\n    logSpy.mockRestore()\n    existsSyncMocked.mockReset()\n    ensureFileSyncMocked.mockClear()\n    writeJSONSyncMocked.mockClear()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when deleting config without args key",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 144,
                "column": 55
            },
            "line": 144,
            "code": "  it('should warn when deleting config without args key', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runConfig('', { args: ['delete'] })\n\n    expect(logSpy).toBeCalledWith('Usage: taro config delete <key>')\n    logSpy.mockRestore()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should delete config",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 154,
                "column": 26
            },
            "line": 154,
            "code": "  it('should delete config', async () => {\n    const key = 'k'\n    const configPath = path.join('/', `${TARO_CONFIG_FLODER}/${TARO_BASE_CONFIG}`)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockReturnValue({\n      a: 1,\n      [key]: 'v'\n    })\n\n    await runConfig('', { args: ['delete', key] })\n\n    expect(writeJSONSyncMocked).toBeCalledWith(configPath, { a: 1 })\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, `deleted: ${key}`)\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n    writeJSONSyncMocked.mockClear()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should list config",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 177,
                "column": 24
            },
            "line": 177,
            "code": "  it('should list config', async () => {\n    const configPath = path.join('/', `${TARO_CONFIG_FLODER}/${TARO_BASE_CONFIG}`)\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockReturnValue({\n      a: 1,\n      b: 2\n    })\n\n    await runConfig('', { args: ['list'] })\n\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, 'Config info:')\n    expect(logSpy).nthCalledWith(4, 'a=1')\n    expect(logSpy).nthCalledWith(5, 'b=2')\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should list config in json",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 198,
                "column": 32
            },
            "line": 198,
            "code": "  it('should list config in json', async () => {\n    const configPath = path.join('/', `${TARO_CONFIG_FLODER}/${TARO_BASE_CONFIG}`)\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockReturnValue({\n      a: 1,\n      b: 2\n    })\n\n    await runConfig('', {\n      args: ['list'],\n      options: {\n        json: true\n      }\n    })\n\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, 'Config info:')\n    expect(logSpy).nthCalledWith(4, JSON.stringify({ a: 1, b: 2 }, null, 2))\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should config include's all the required values",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 21,
                "column": 54
            },
            "line": 21,
            "code": "  it('should config include\\'s all the required values', async () => {\n    let { lines } = await validator({\n      projectConfig: {},\n      configPath: ''\n    })\n\n    expect(lines.length).toEqual(4)\n    let msgs = lines.map(line => line.desc)\n    expect(msgs.includes('projectName 必须填写')).toBeTruthy()\n    expect(msgs.includes('sourceRoot 必须填写')).toBeTruthy()\n    expect(msgs.includes('outputRoot 必须填写')).toBeTruthy()\n    expect(msgs.includes('framework 必须填写')).toBeTruthy()\n\n    const res = await validator({\n      projectConfig: {\n        projectName: '',\n        sourceRoot: '',\n        outputRoot: '',\n        framework: ''\n      },\n      configPath: ''\n    })\n    lines = res.lines\n\n    expect(lines.length).toEqual(4)\n    msgs = lines.map(line => line.desc)\n    expect(msgs.includes('projectName \"projectName\" is not allowed to be empty')).toBeTruthy()\n    expect(msgs.includes('sourceRoot \"sourceRoot\" is not allowed to be empty')).toBeTruthy()\n    expect(msgs.includes('outputRoot \"outputRoot\" is not allowed to be empty')).toBeTruthy()\n    expect(msgs.includes('framework \"framework\" must be one of [nerv, react, vue, vue3]')).toBeTruthy()\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "date",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 53,
                "column": 10
            },
            "line": 53,
            "code": "  it('date', async () => {\n    let { lines } = await validator(getConfig({\n      date: '2020-5-26'\n    }))\n\n    expect(lines.length).toEqual(0)\n\n    const res = await validator(getConfig({\n      date: 'abc'\n    }))\n    lines = res.lines\n\n    expect(lines.length).toEqual(1)\n    expect(lines[0].desc).toEqual('date 应该为一个日期')\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "framework",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 69,
                "column": 15
            },
            "line": 69,
            "code": "  it('framework', async () => {\n    let res = await validator(getConfig({\n      framework: 'react'\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      framework: 'vue'\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      framework: 'nerv'\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      framework: 'vue3'\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      framework: 'other'\n    }))\n    expect(res.lines.length).toEqual(1)\n    expect(res.lines[0].desc).toEqual('framework \"framework\" must be one of [nerv, react, vue, vue3]')\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "designWidth",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 97,
                "column": 17
            },
            "line": 97,
            "code": "  it('designWidth', async () => {\n    let res = await validator(getConfig({\n      designWidth: '750'\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      designWidth: 'a'\n    }))\n    expect(res.lines.length).toEqual(1)\n\n    res = await validator(getConfig({\n      designWidth: 700.5\n    }))\n    expect(res.lines.length).toEqual(1)\n\n    res = await validator(getConfig({\n      designWidth: -640\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "deviceRatio",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 119,
                "column": 17
            },
            "line": 119,
            "code": "  it('deviceRatio', async () => {\n    let res = await validator(getConfig({\n      deviceRatio: {\n        640: 2.34 / 2,\n        750: 1,\n        828: 1.81 / 2\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      deviceRatio: {\n        640: 2.34 / 2,\n        750: 'a',\n        828: 1.81 / 2\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "plugins",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 139,
                "column": 13
            },
            "line": 139,
            "code": "  it('plugins', async () => {\n    let res = await validator(getConfig({\n      plugins: [\n        '@tarojs/plugin-mock',\n        ['@tarojs/plugin-mock', {\n          mocks: {\n            '/api/user/1': {\n              name: 'judy',\n              desc: 'Mental guy'\n            }\n          }\n        }],\n        ['@tarojs/plugin-mock'],\n        '/absulute/path/plugin/filename'\n      ]\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      plugins: [\n        1,\n        {},\n        ['x', 1],\n        [{}, 'x'],\n        ['x', {}, 1],\n        ['']\n      ]\n    }))\n    expect(res.lines.length).toEqual(6)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "presets",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 170,
                "column": 13
            },
            "line": 170,
            "code": "  it('presets', async () => {\n    let res = await validator(getConfig({\n      presets: [\n        '@tarojs/plugin-mock',\n        ['@tarojs/plugin-mock', {\n          mocks: {\n            '/api/user/1': {\n              name: 'judy',\n              desc: 'Mental guy'\n            }\n          }\n        }],\n        ['@tarojs/plugin-mock'],\n        '/absulute/path/plugin/filename'\n      ]\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      presets: [\n        1,\n        {},\n        ['x', 1],\n        [{}, 'x'],\n        ['x', {}, 1],\n        ['']\n      ]\n    }))\n    expect(res.lines.length).toEqual(6)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "terser",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 201,
                "column": 12
            },
            "line": 201,
            "code": "  it('terser', async () => {\n    let res = await validator(getConfig({\n      terser: {\n        enable: true,\n        config: {\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      terser: {\n        enables: true,\n        enable: 1,\n        config: []\n      }\n    }))\n    expect(res.lines.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "csso",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 221,
                "column": 10
            },
            "line": 221,
            "code": "  it('csso', async () => {\n    let res = await validator(getConfig({\n      csso: {\n        enable: true,\n        config: {\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      csso: {\n        enables: true,\n        enable: 1,\n        config: []\n      }\n    }))\n    expect(res.lines.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "uglify",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 241,
                "column": 12
            },
            "line": 241,
            "code": "  it('uglify', async () => {\n    let res = await validator(getConfig({\n      uglify: {\n        enable: true,\n        config: {\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      uglify: {\n        enables: true,\n        enable: 1,\n        config: []\n      }\n    }))\n    expect(res.lines.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "sass",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 261,
                "column": 10
            },
            "line": 261,
            "code": "  it('sass', async () => {\n    let res = await validator(getConfig({\n      sass: {\n        resource: '/src/styles/variable.scss'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      sass: {\n        resource: [\n          './src/styles/variable.scss',\n          './src/styles/mixins.scss'\n        ],\n        projectDirectory: '/root',\n        data: '$nav-height: 48px;'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      sass: {\n        resource: {},\n        projectDirectory: 1,\n        data: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "env",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 291,
                "column": 9
            },
            "line": 291,
            "code": "  it('env', async () => {\n    const res = await validator(getConfig({\n      env: {\n        NODE_ENV: '\"development\"'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "defineConstants",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 300,
                "column": 21
            },
            "line": 300,
            "code": "  it('defineConstants', async () => {\n    const res = await validator(getConfig({\n      defineConstants: {\n        A: '\"a\"'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "alias",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 309,
                "column": 11
            },
            "line": 309,
            "code": "  it('alias', async () => {\n    let res = await validator(getConfig({\n      alias: {\n        '@/components': 'src/components'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      alias: {\n        '@/components': ['src/components'],\n        '@/utils': 1,\n        '@/project': {}\n      }\n    }))\n    expect(res.lines.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "copy",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 327,
                "column": 10
            },
            "line": 327,
            "code": "  it('copy', async () => {\n    let res = await validator(getConfig({\n      copy: {\n        patterns: [\n          { from: 'src/asset/tt/', to: 'dist/asset/tt/', ignore: ['*.js'] },\n          { from: 'src/asset/tt/sd.jpg', to: 'dist/asset/tt/sd.jpg' }\n        ]\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      copy: {\n        options: {\n          ignore: ['*.js', '*.css']\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      copy: {\n        patterns: [\n          { ignore: ['*.js'] },\n          { from: 'src/asset/tt/sd.jpg' },\n          { to: 'dist/asset/tt/sd.jpg' }\n        ],\n        options: {\n          ignore: [1, true, {}]\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(7)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.compile",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 362,
                "column": 18
            },
            "line": 362,
            "code": "  it('mini.compile', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        compile: {\n          exclude: [\n            'src/pages/index/vod-wx-sdk-v2.js',\n            modulePath => modulePath.indexOf('vod-wx-sdk-v2') >= 0\n          ],\n          include: [\n            'src/pages/index/vod-wx-sdk-v2.js',\n            modulePath => modulePath.indexOf('vod-wx-sdk-v2') >= 0\n          ]\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      mini: {\n        compile: {\n          exclude: [null, []],\n          include: [1, {}]\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(4)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.webpackChain",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 390,
                "column": 23
            },
            "line": 390,
            "code": "  it('mini.webpackChain', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        webpackChain (chain, webpack) {\n          console.log(chain, webpack)\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      mini: {\n        webpackChain: 'some'\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.commonChunks",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 408,
                "column": 23
            },
            "line": 408,
            "code": "  it('mini.commonChunks', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        commonChunks: ['runtime', 'vendors', 'taro', 'common']\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      mini: {\n        commonChunks (commonChunks) {\n          commonChunks.push('yourCustomCommonChunkName')\n          return commonChunks\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      mini: {\n        commonChunks: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.addChunkPages",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 434,
                "column": 24
            },
            "line": 434,
            "code": "  it('mini.addChunkPages', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        addChunkPages (pages, pagesNames) {\n          console.log(pages, pagesNames)\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      mini: {\n        addChunkPages: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.postcss",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 452,
                "column": 18
            },
            "line": 452,
            "code": "  it('mini.postcss', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        postcss: {\n          autoprefixer: {\n            enable: true,\n            config: {}\n          }\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      mini: {\n        postcss: {\n          autoprefixer: {\n            enable: 1,\n            config: 'a'\n          },\n          pxtransform: true\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.output",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 479,
                "column": 17
            },
            "line": 479,
            "code": "  it('mini.output', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        output: {}\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      mini: {\n        output: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini's third party options",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 495,
                "column": 33
            },
            "line": 495,
            "code": "  it('mini\\'s third party options', async () => {\n    const res = await validator(getConfig({\n      mini: {\n        cssLoaderOption: {},\n        styleLoaderOption: {},\n        sassLoaderOption: {},\n        lessLoaderOption: {},\n        stylusLoaderOption: {},\n        mediaUrlLoaderOption: {},\n        fontUrlLoaderOption: {},\n        imageUrlLoaderOption: {},\n        miniCssExtractPluginOption: {}\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.devServer",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 512,
                "column": 18
            },
            "line": 512,
            "code": "  it('h5.devServer', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        devServer: {\n          port: 10086\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        devServer: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.output",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 530,
                "column": 15
            },
            "line": 530,
            "code": "  it('h5.output', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        output: {\n          filename: 'js/[name].[hash:8].js',\n          chunkFilename: 'js/[name].[chunkhash:8].js'\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        output: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.publicPath",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 549,
                "column": 19
            },
            "line": 549,
            "code": "  it('h5.publicPath', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        publicPath: '/'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        publicPath: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.staticDirectory",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 565,
                "column": 24
            },
            "line": 565,
            "code": "  it('h5.staticDirectory', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        staticDirectory: '/'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        staticDirectory: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.chunkDirectory",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 581,
                "column": 23
            },
            "line": 581,
            "code": "  it('h5.chunkDirectory', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        chunkDirectory: '/'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        chunkDirectory: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.webpackChain",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 597,
                "column": 21
            },
            "line": 597,
            "code": "  it('h5.webpackChain', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        webpackChain (chain, webpack) {\n          console.log(chain, webpack)\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        webpackChain: 'some'\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.webpack[DEPRECATED]",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 615,
                "column": 28
            },
            "line": 615,
            "code": "  it('h5.webpack[DEPRECATED]', async () => {\n    const res = await validator(getConfig({\n      h5: {\n        webpack: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n    expect(res.lines[0].desc).toEqual('h5.webpack \"h5.webpack\" is not allowed')\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.router",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 625,
                "column": 15
            },
            "line": 625,
            "code": "  it('h5.router', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        router: {\n          mode: 'hash'\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        router: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.entry",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 643,
                "column": 14
            },
            "line": 643,
            "code": "  it('h5.entry', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        entry: './path/to/my/entry/file.js'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        entry: ['./path/to/my/entry/file.js', './path/other/file.js']\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        entry: {\n          main: './path/to/my/entry/file.js'\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        entry: {\n          main: ['./path/to/my/entry/file.js', './path/other/file.js']\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        entry: () => './demo'\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.enableSourceMap",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 684,
                "column": 24
            },
            "line": 684,
            "code": "  it('h5.enableSourceMap', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        enableSourceMap: true\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        enableSourceMap: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.enableExtract",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 700,
                "column": 22
            },
            "line": 700,
            "code": "  it('h5.enableExtract', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        enableExtract: true\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        enableExtract: 1\n      }\n    }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.esnextModules",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 716,
                "column": 22
            },
            "line": 716,
            "code": "  it('h5.esnextModules', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        esnextModules: ['taro-ui']\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        esnextModules: [1, true, {}]\n      }\n    }))\n    expect(res.lines.length).toEqual(3)\n\n    res = await validator(getConfig({ h5: 1 }))\n    expect(res.lines.length).toEqual(1)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.postcss",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 735,
                "column": 16
            },
            "line": 735,
            "code": "  it('h5.postcss', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        postcss: {\n          autoprefixer: {\n            enable: true,\n            config: {}\n          }\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n\n    res = await validator(getConfig({\n      h5: {\n        postcss: {\n          autoprefixer: {\n            enable: 1,\n            config: 'a'\n          },\n          pxtransform: true\n        }\n      }\n    }))\n    expect(res.lines.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5's third party options",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 762,
                "column": 31
            },
            "line": 762,
            "code": "  it('h5\\'s third party options', async () => {\n    const res = await validator(getConfig({\n      h5: {\n        cssLoaderOption: {},\n        styleLoaderOption: {},\n        sassLoaderOption: {},\n        lessLoaderOption: {},\n        stylusLoaderOption: {},\n        mediaUrlLoaderOption: {},\n        fontUrlLoaderOption: {},\n        imageUrlLoaderOption: {},\n        miniCssExtractPluginOption: {}\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "unknow",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 779,
                "column": 12
            },
            "line": 779,
            "code": "  it('unknow', async () => {\n    const res = await validator(getConfig({\n      unknow: {}\n    }))\n    expect(res.lines.length).toEqual(0)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.unknow",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 786,
                "column": 17
            },
            "line": 786,
            "code": "  it('mini.unknow', async () => {\n    const res = await validator(getConfig({\n      mini: {\n        unknow: {}\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.unknow",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 795,
                "column": 15
            },
            "line": 795,
            "code": "  it('h5.unknow', async () => {\n    const res = await validator(getConfig({\n      h5: {\n        unknow: {}\n      }\n    }))\n    expect(res.lines.length).toEqual(0)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should lint for react",
            "suites": [
                "eslint validator of doctor"
            ],
            "updatePoint": {
                "line": 14,
                "column": 27
            },
            "line": 14,
            "code": "  it('should lint for react', () => {\n    process.chdir(path.join(__dirname, 'fixtures/default'))\n    const { raw } = validator({\n      projectConfig: {\n        framework: 'react',\n        sourceRoot: 'src'\n      }\n    })\n\n    expect(raw).toBe('')\n  })",
            "file": "doctor-eslint.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should lint for nerv",
            "suites": [
                "eslint validator of doctor"
            ],
            "updatePoint": {
                "line": 26,
                "column": 26
            },
            "line": 26,
            "code": "  it('should lint for nerv', () => {\n    process.chdir(path.join(__dirname, 'fixtures/nerv'))\n    const { raw } = validator({\n      projectConfig: {\n        framework: 'nerv',\n        sourceRoot: 'src'\n      }\n    })\n\n    expect(raw.includes('\\'a\\' is assigned a value but never used'))\n  })",
            "file": "doctor-eslint.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should lint for vue",
            "suites": [
                "eslint validator of doctor"
            ],
            "updatePoint": {
                "line": 38,
                "column": 25
            },
            "line": 38,
            "code": "  it('should lint for vue', () => {\n    process.chdir(path.join(__dirname, 'fixtures/vue'))\n    const { raw } = validator({\n      projectConfig: {\n        framework: 'vue',\n        sourceRoot: 'src'\n      }\n    })\n\n    expect(raw).toBe('')\n  })",
            "file": "doctor-eslint.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should report uninstalled modules",
            "suites": [
                "package validator of doctor"
            ],
            "updatePoint": {
                "line": 76,
                "column": 39
            },
            "line": 76,
            "code": "  it('should report uninstalled modules', async () => {\n    const moduleA = 'redux'\n    const moduleB = 'react-native'\n    getMocked.mockReturnValue([\n      ...baseModules,\n      {\n        moduleName: moduleA,\n        isInstalled: false\n      },\n      {\n        moduleName: 'some-module',\n        isInstalled: true\n      },\n      {\n        moduleName: moduleB,\n        isInstalled: false\n      }\n    ])\n    const { lines } = await validator({ appPath: '' })\n\n    expect(lines.length).toBe(2)\n    expect(lines[0].desc).toBe(`使用到的依赖 ${moduleA} 还没有安装`)\n    expect(lines[0].valid).toBe(false)\n    expect(lines[1].desc).toBe(`使用到的依赖 ${moduleB} 还没有安装`)\n    expect(lines[1].valid).toBe(false)\n  })",
            "file": "doctor-package.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should report uninstalled modules",
            "suites": [
                "package validator of doctor"
            ],
            "updatePoint": {
                "line": 103,
                "column": 39
            },
            "line": 103,
            "code": "  it('should report uninstalled modules', async () => {\n    const latestTaro = '3.0.0-rc.3'\n    const uninstalledTaroPkg = '@tarojs/components'\n    const couldUpdateTaroPkg = '@tarojs/runtime'\n    const inconsistentTaroPkg = '@tarojs/taro'\n\n    getMocked.mockReturnValue([\n      {\n        moduleName: couldUpdateTaroPkg,\n        latest: latestTaro,\n        installed: cliVersion,\n        isInstalled: true\n      },\n      {\n        moduleName: inconsistentTaroPkg,\n        latest: latestTaro,\n        installed: latestTaro,\n        isInstalled: true\n      },\n      ...baseModules.slice(3)\n    ])\n\n    const { lines } = await validator({ appPath: '' })\n\n    expect(lines.length).toBe(3)\n\n    expect(lines[0].desc).toBe(`请安装 Taro 依赖: ${uninstalledTaroPkg}`)\n    expect(lines[0].valid).toBe(true)\n\n    expect(lines[1].desc).toBe(`依赖 ${couldUpdateTaroPkg} 可更新到最新版本 ${latestTaro}，当前安装版本为 ${cliVersion}`)\n    expect(lines[1].valid).toBe(true)\n\n    expect(lines[2].desc).toBe(`依赖 ${inconsistentTaroPkg} (${latestTaro}) 与当前使用的 Taro CLI (${cliVersion}) 版本不一致, 请更新为统一的版本`)\n    expect(lines[2].valid).toBe(false)\n  })",
            "file": "doctor-package.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should report outdate taro modules",
            "suites": [
                "package validator of doctor"
            ],
            "updatePoint": {
                "line": 139,
                "column": 40
            },
            "line": 139,
            "code": "  it('should report outdate taro modules', async () => {\n    const moduleA = '@tarojs/components-rn'\n    const moduleB = '@tarojs/components-qa'\n    getMocked.mockReturnValue([\n      ...baseModules,\n      {\n        moduleName: moduleA,\n        isInstalled: true\n      },\n      {\n        moduleName: moduleB,\n        isInstalled: false\n      }\n    ])\n\n    const { lines } = await validator({ appPath: '' })\n\n    expect(lines.length).toBe(3)\n\n    expect(lines[0].desc).toBe(`使用到的依赖 ${moduleB} 还没有安装`)\n    expect(lines[0].valid).toBe(false)\n\n    expect(lines[1].desc).toBe(`Taro 3 不再依赖 ${moduleA}，可以卸载`)\n    expect(lines[1].valid).toBe(true)\n\n    expect(lines[2].desc).toBe(`Taro 3 不再依赖 ${moduleB}，可以从 package.json 移除`)\n    expect(lines[2].valid).toBe(true)\n  })",
            "file": "doctor-package.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because there isn't a Taro project",
            "suites": [
                "recommand validator of doctor"
            ],
            "updatePoint": {
                "line": 25,
                "column": 53
            },
            "line": 25,
            "code": "  it('should exit because there isn\\'t a Taro project', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n    existsSyncMocked.mockReturnValue(false)\n\n    try {\n      await validator({ appPath: 'src/' })\n    } catch (error) {}\n\n    expect(exitSpy).toBeCalledWith(1)\n    expect(logSpy).toBeCalledWith(chalk.red('找不到src/package.json，请确定当前目录是Taro项目根目录!'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "doctor-recommand.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when test framework not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "updatePoint": {
                "line": 46,
                "column": 47
            },
            "line": 46,
            "code": "  it('should warn when test framework not found', async () => {\n    jest.doMock('./fixtures/default/package.json', () => ({\n      devDependencies: {\n        eslint: 1\n      }\n    }))\n    readdirSyncMocked.mockReturnValue(['readme', '.gitignore', '.editorconfig'])\n\n    const { lines } = await validator({ appPath: path.join(__dirname, './fixtures/default') })\n\n    expect(lines.length).toBe(1)\n    expect(lines[0].desc).toBe('没有检查到常见的测试依赖(jest/mocha/ava/tape/jesmine/karma), 配置测试可以帮助提升项目质量')\n    expect(lines[0].valid).toBe(true)\n    expect(lines[0].solution).toBe('可以参考 https://github.com/NervJS/taro-ui-sample 项目, 其中已经包含了完整的测试配置与范例')\n\n    jest.dontMock('./fixtures/default/package.json')\n  })",
            "file": "doctor-recommand.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when linters not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "updatePoint": {
                "line": 64,
                "column": 40
            },
            "line": 64,
            "code": "  it('should warn when linters not found', async () => {\n    jest.doMock('./fixtures/default/package.json', () => ({\n      devDependencies: {\n        jest: 1\n      }\n    }))\n    readdirSyncMocked.mockReturnValue(['readme.md', '.gitignore', '.editorconfig'])\n\n    const { lines } = await validator({ appPath: path.join(__dirname, './fixtures/default') })\n\n    expect(lines.length).toBe(1)\n    expect(lines[0].desc).toBe('没有检查到常见的 linter (eslint/jslint/jshint/tslint), 配置 linter 可以帮助提升项目质量')\n    expect(lines[0].valid).toBe(true)\n    expect(lines[0].solution).toBe('Taro 还提供了定制的 ESLint 规则, 可以帮助开发者避免一些常见的问题. 使用 taro cli 创建新项目即可体验')\n\n    jest.dontMock('./fixtures/default/package.json')\n  })",
            "file": "doctor-recommand.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when Readme not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "updatePoint": {
                "line": 82,
                "column": 39
            },
            "line": 82,
            "code": "  it('should warn when Readme not found', async () => {\n    jest.doMock('./fixtures/default/package.json', () => ({\n      devDependencies: {\n        mocha: 1,\n        jslint: 1\n      }\n    }))\n    readdirSyncMocked.mockReturnValue(['.gitignore', '.editorconfig'])\n\n    const { lines } = await validator({ appPath: path.join(__dirname, './fixtures/default') })\n\n    expect(lines.length).toBe(1)\n    expect(lines[0].desc).toBe('没有检查到 Readme (readme/readme.md/readme.markdown), 编写 Readme 可以方便其他人了解项目')\n    expect(lines[0].valid).toBe(true)\n\n    jest.dontMock('./fixtures/default/package.json')\n  })",
            "file": "doctor-recommand.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when .gitignore not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "updatePoint": {
                "line": 100,
                "column": 43
            },
            "line": 100,
            "code": "  it('should warn when .gitignore not found', async () => {\n    jest.doMock('./fixtures/default/package.json', () => ({\n      devDependencies: {\n        jesmine: 1,\n        tslint: 1\n      }\n    }))\n    readdirSyncMocked.mockReturnValue(['readme.markdown', '.editorconfig'])\n\n    const { lines } = await validator({ appPath: path.join(__dirname, './fixtures/default') })\n\n    expect(lines.length).toBe(1)\n    expect(lines[0].desc).toBe('没有检查到 .gitignore 配置, 配置 .gitignore 以避免将敏感信息或不必要的内容提交到代码仓库')\n    expect(lines[0].valid).toBe(true)\n\n    jest.dontMock('./fixtures/default/package.json')\n  })",
            "file": "doctor-recommand.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when .editorconfig not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "updatePoint": {
                "line": 118,
                "column": 46
            },
            "line": 118,
            "code": "  it('should warn when .editorconfig not found', async () => {\n    jest.doMock('./fixtures/default/package.json', () => ({\n      devDependencies: {\n        karma: 1,\n        jshint: 1\n      }\n    }))\n    readdirSyncMocked.mockReturnValue(['readme', '.gitignore'])\n\n    const { lines } = await validator({ appPath: path.join(__dirname, './fixtures/default') })\n\n    expect(lines.length).toBe(1)\n    expect(lines[0].desc).toBe('没有检查到 .editconfig 配置, 配置 editconfig 以统一项目成员编辑器的代码风格')\n    expect(lines[0].valid).toBe(true)\n\n    jest.dontMock('./fixtures/default/package.json')\n  })",
            "file": "doctor-recommand.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because there isn't a Taro project",
            "suites": [
                "doctor"
            ],
            "updatePoint": {
                "line": 51,
                "column": 53
            },
            "line": 51,
            "code": "  it('should exit because there isn\\'t a Taro project', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      await runDoctor('')\n    } catch (error) {}\n\n    expect(exitSpy).toBeCalledWith(1)\n    expect(logSpy).toBeCalledWith(chalk.red('找不到项目配置文件config/index，请确定当前目录是 Taro 项目根目录!'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "doctor.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log reports",
            "suites": [
                "doctor"
            ],
            "updatePoint": {
                "line": 71,
                "column": 24
            },
            "line": 71,
            "code": "  it('should log reports', async () => {\n    const NOTE_ALL_RIGHT = chalk.green('[✓] ')\n    const NOTE_VALID = chalk.yellow('[!] ')\n    const NOTE_INVALID = chalk.red('[✗] ')\n\n    const titleChalk = chalk.hex('#aaa')\n    const lineChalk = chalk.hex('#fff')\n    const solutionChalk = chalk.hex('#999')\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runDoctor(path.join(__dirname, 'fixtures/default'))\n\n    expect(logSpy).nthCalledWith(1, '\\n' + titleChalk('configValidator'))\n    expect(logSpy).nthCalledWith(2, '  ' + NOTE_INVALID + lineChalk('A'))\n\n    expect(logSpy).nthCalledWith(3, '\\n' + titleChalk('packageValidator'))\n    expect(logSpy).nthCalledWith(4, '  ' + NOTE_VALID + lineChalk('B'))\n    expect(logSpy).nthCalledWith(5, '  ' + NOTE_VALID + lineChalk('C'))\n    expect(logSpy).nthCalledWith(6, '      ' + solutionChalk('c'))\n\n    expect(logSpy).nthCalledWith(7, '\\n' + titleChalk('recommandValidator'))\n    expect(logSpy).nthCalledWith(8, `  ${NOTE_ALL_RIGHT}没有发现问题`)\n\n    expect(logSpy).nthCalledWith(9, '\\n' + titleChalk('eslintValidator'))\n    expect(logSpy).nthCalledWith(10, 'eslint msg')\n\n    logSpy.mockRestore()\n  })",
            "file": "doctor.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because there isn't a Taro project",
            "suites": [
                "info"
            ],
            "updatePoint": {
                "line": 20,
                "column": 53
            },
            "line": 20,
            "code": "  it('should exit because there isn\\'t a Taro project', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      await runInfo('')\n    } catch (error) {}\n\n    expect(exitSpy).toBeCalledWith(1)\n    expect(logSpy).toBeCalledWith(chalk.red('找不到项目配置文件config/index，请确定当前目录是 Taro 项目根目录!'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "info.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log infomations",
            "suites": [
                "info"
            ],
            "updatePoint": {
                "line": 40,
                "column": 28
            },
            "line": 40,
            "code": "  it('should log infomations', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n    await runInfo(appPath)\n\n    expect(logSpy).toBeCalledTimes(1)\n    const res = logSpy.mock.calls[0][0]\n    const title = `Taro CLI ${getPkgVersion()} environment info`\n    expect(res.hasOwnProperty(title)).toBeTruthy()\n    const info = res[title]\n    expect('System' in info).toBeTruthy()\n    expect('Binaries' in info).toBeTruthy()\n    expect('npmPackages' in info).toBeTruthy()\n    expect(Object.keys(info.System)).toEqual(['OS', 'Shell'])\n    expect(Object.keys(info.Binaries)).toEqual(['Node', 'Yarn', 'npm'])\n    expect(info.npmPackages.hasOwnProperty('@tarojs/helper')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('@tarojs/mini-runner')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('@tarojs/service')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('@tarojs/taro')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('@tarojs/taroize')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('@tarojs/webpack-runner')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('babel-plugin-transform-taroapi')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('eslint-config-taro')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('eslint-plugin-taro')).toBeTruthy()\n    expect(info.npmPackages.hasOwnProperty('postcss-pxtransform')).toBeTruthy()\n\n    logSpy.mockRestore()\n  })",
            "file": "info.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because there isn't a Taro project",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 31,
                "column": 53
            },
            "line": 31,
            "code": "  it('should exit because there isn\\'t a Taro project', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      await runInspect('')\n    } catch (error) {}\n\n    expect(exitSpy).toBeCalledWith(1)\n    expect(logSpy).toBeCalledWith(chalk.red('找不到项目配置文件config/index，请确定当前目录是 Taro 项目根目录!'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit when user haven't pass correct type",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 51,
                "column": 54
            },
            "line": 51,
            "code": "  it('should exit when user haven\\'t pass correct type', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      await runInspect(path.resolve(__dirname, 'fixtures/default'))\n    } catch (error) {}\n\n    expect(exitSpy).toBeCalledWith(0)\n    expect(logSpy).toBeCalledWith(chalk.red('请传入正确的编译类型！'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log config",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 71,
                "column": 23
            },
            "line": 71,
            "code": "  it('should log config', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      const appPath = path.resolve(__dirname, 'fixtures/default')\n      await runInspect(appPath, {\n        options: {\n          type: 'weapp'\n        }\n      })\n    } catch (error) {}\n\n    expect(exitSpy).toBeCalledWith(0)\n    expect(logSpy).toBeCalledTimes(2)\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log specific config",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 96,
                "column": 32
            },
            "line": 96,
            "code": "  it('should log specific config', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n    const errorSpy = jest.spyOn(console, 'error')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n    errorSpy.mockImplementation(() => {})\n\n    try {\n      const appPath = path.resolve(__dirname, 'fixtures/default')\n      await runInspect(appPath, {\n        options: {\n          type: 'h5'\n        },\n        args: ['resolve.mainFields.0']\n      })\n    } catch (error) {}\n\n    expect(exitSpy).toBeCalledWith(0)\n    expect(logSpy).toBeCalledTimes(1)\n    expect(logSpy).toBeCalledWith('\\'main:h5\\'')\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n    errorSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should output config",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 126,
                "column": 26
            },
            "line": 126,
            "code": "  it('should output config', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const writeFileSync = fs.writeFileSync as jest.Mock<any>\n    const outputPath = 'project-config.js'\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n\n    try {\n      const appPath = path.resolve(__dirname, 'fixtures/default')\n      await runInspect(appPath, {\n        options: {\n          type: 'alipay',\n          output: outputPath\n        },\n        args: ['resolve.mainFields.0']\n      })\n    } catch (error) {}\n\n    expect(exitSpy).toBeCalledWith(0)\n    expect(writeFileSync).toBeCalledWith(outputPath, '\\'browser\\'')\n\n    exitSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log errors",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 121,
                "column": 23
            },
            "line": 121,
            "code": "  it('should log errors', async () => {\n    const spy = jest.spyOn(console, 'log')\n    spy.mockImplementation(() => {})\n    await runUpdate('')\n    expect(spy).toBeCalledTimes(3)\n    spy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update self",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 129,
                "column": 24
            },
            "line": 129,
            "code": "  it('should update self', async () => {\n    await runUpdate('', {\n      args: ['self']\n    })\n    expect(execMocked).toBeCalledWith(`npm i -g @tarojs/cli@${lastestVersion}`)\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update self using cnpm",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 136,
                "column": 35
            },
            "line": 136,
            "code": "  it('should update self using cnpm', async () => {\n    shouldUseCnpmMocked.mockReturnValue(true)\n    await runUpdate('', {\n      args: ['self']\n    })\n    expect(execMocked).toBeCalledWith(`cnpm i -g @tarojs/cli@${lastestVersion}`)\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update self to specific version",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 144,
                "column": 44
            },
            "line": 144,
            "code": "  it('should update self to specific version', async () => {\n    const version = '3.0.0-beta.0'\n    await runUpdate('', {\n      args: ['self', version]\n    })\n    expect(execMocked).toBeCalledWith(`npm i -g @tarojs/cli@${version}`)\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should throw when there isn't a Taro project",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 152,
                "column": 51
            },
            "line": 152,
            "code": "  it('should throw when there isn\\'t a Taro project', async () => {\n    const chalkMocked = (chalk.red as unknown) as jest.Mock<any>\n    const exitSpy = jest.spyOn(process, 'exit')\n    const logSpy = jest.spyOn(console, 'log')\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n    try {\n      await runUpdate('', {\n        args: ['project']\n      })\n    } catch (error) {}\n    expect(exitSpy).toBeCalledWith(1)\n    expect(chalkMocked).toBeCalledWith(`找不到项目配置文件${PROJECT_CONFIG}，请确定当前目录是Taro项目根目录!`)\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 171,
                "column": 27
            },
            "line": 171,
            "code": "  it('should update project', async () => {\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n    const pkgPath = path.join(appPath, 'package.json')\n    const packageMap = updatePkg(pkgPath, lastestVersion)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runUpdate(appPath, {\n      args: ['project']\n    })\n    expect(writeJson.mock.calls[0][0]).toEqual(pkgPath)\n    expect(writeJson.mock.calls[0][1]).toEqual(packageMap)\n    expect(execMocked).toBeCalledWith('npm install')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project to specific version",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 189,
                "column": 47
            },
            "line": 189,
            "code": "  it('should update project to specific version', async () => {\n    const version = '3.0.0-beta.4'\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n    const pkgPath = path.join(appPath, 'package.json')\n    const packageMap = updatePkg(pkgPath, version)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runUpdate(appPath, {\n      args: ['project', version]\n    })\n    expect(writeJson.mock.calls[0][0]).toEqual(pkgPath)\n    expect(writeJson.mock.calls[0][1]).toEqual(packageMap)\n    expect(execMocked).toBeCalledWith('npm install')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project with yarn",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 208,
                "column": 37
            },
            "line": 208,
            "code": "  it('should update project with yarn', async () => {\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    shouldUseYarnMocked.mockReturnValue(true)\n\n    await runUpdate(appPath, {\n      args: ['project']\n    })\n    expect(execMocked).toBeCalledWith('yarn')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project with cnpm",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 223,
                "column": 37
            },
            "line": 223,
            "code": "  it('should update project with cnpm', async () => {\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    shouldUseCnpmMocked.mockReturnValue(true)\n\n    await runUpdate(appPath, {\n      args: ['project']\n    })\n    expect(execMocked).toBeCalledWith('cnpm install')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Audio"
            ],
            "updatePoint": {
                "line": 21,
                "column": 11
            },
            "line": 21,
            "code": "  it('props', async () => {\n    const src = 'http://storage.jd.com/cjj-pub-images/horse.ogv';\n    const controls = true;\n    const loop = true;\n\n    class App extends React.Component {\n      constructor() {\n        super(...arguments);\n        this.state = {\n          src,\n          controls,\n          loop\n        };\n      }\n\n      render() {\n        const {\n          src,\n          controls,\n          loop\n        } = this.state;\n        return /*#__PURE__*/React.createElement(Audio, {\n          src: src,\n          controls: controls,\n          loop: loop\n        });\n      }\n\n    }\n\n    const wrapper = await mount( /*#__PURE__*/React.createElement(App, null), scratch);\n    const audio = wrapper.node.firstElementChild;\n    await delay(3000);\n    assert(audio instanceof HTMLAudioElement);\n    assert(audio.src === src);\n    assert(audio.controls === controls);\n    assert(audio.loop === loop);\n    await wrapper.setState({\n      controls: false,\n      loop: false\n    });\n    assert(audio.controls === false);\n    assert(audio.loop === false);\n  });",
            "file": "audio.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "有一个空的占位元素，并且 slot 能够使用",
            "suites": [
                "Block"
            ],
            "updatePoint": {
                "line": 19,
                "column": 28
            },
            "line": 19,
            "code": "  it('有一个空的占位元素，并且 slot 能够使用', async () => {\n    class App extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(Block, null, /*#__PURE__*/React.createElement(\"div\", null), /*#__PURE__*/React.createElement(\"div\", null));\n      }\n\n    }\n\n    ReactDOM.render( /*#__PURE__*/React.createElement(App, null), scratch);\n    expect(scratch.childNodes.length).toBe(2);\n  });",
            "file": "block.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Button"
            ],
            "updatePoint": {
                "line": 29,
                "column": 11
            },
            "line": 29,
            "code": "  it('props', async () => {\n    const size = 'mini';\n    const plain = true;\n    const loading = true;\n    const disabled = false;\n\n    class App extends React.Component {\n      state = {\n        size,\n        plain,\n        loading,\n        disabled\n      };\n\n      render() {\n        const {\n          size,\n          plain,\n          loading,\n          disabled\n        } = this.state;\n        return /*#__PURE__*/React.createElement(Button, {\n          size: size,\n          plain: plain,\n          loading: loading,\n          disabled: disabled\n        }, \"button\");\n      }\n\n    }\n\n    const wrapper = await mount( /*#__PURE__*/React.createElement(App, null), scratch);\n    const node = wrapper.node;\n    assert(!node.type);\n    /** local: '', ci: undefined */\n\n    assert(node.plain === true);\n    assert(node.loading === true);\n    assert(node.size === 'mini');\n    assert(node.disabled === false);\n    await delay(3000);\n    const icon = node.getElementsByTagName('i')[0];\n    assert(icon.className === 'weui-loading');\n    assert(node.textContent === 'button');\n    wrapper.setState({\n      plain: false\n    });\n    assert(node.plain === false);\n    wrapper.setState({\n      loading: false\n    });\n    await waitForChange(icon);\n    assert(node.loading === false);\n    assert(icon.parentNode === null);\n    wrapper.setState({\n      disabled: true\n    });\n    assert(node.disabled === true);\n    wrapper.setState({\n      size: 'big'\n    });\n    assert(node.size === 'big');\n  });",
            "file": "button.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "event",
            "suites": [
                "Button"
            ],
            "updatePoint": {
                "line": 92,
                "column": 11
            },
            "line": 92,
            "code": "  it('event', async () => {\n    const clickSpy = sinon.spy();\n    const touchStartSpy = sinon.spy();\n    const touchEndSpy = sinon.spy();\n    const hoverStartTime = 50;\n    const hoverStayTime = 100;\n\n    class App extends React.Component {\n      state = {\n        hoverStartTime,\n        hoverStayTime\n      };\n\n      render() {\n        const {\n          hoverStartTime,\n          hoverStayTime\n        } = this.state;\n        return /*#__PURE__*/React.createElement(Button, {\n          size: \"fork\",\n          hoverStartTime: hoverStartTime,\n          hoverStayTime: hoverStayTime,\n          onClick: () => clickSpy(),\n          onTouchStart: () => touchStartSpy(),\n          onTouchEnd: () => touchEndSpy()\n        }, \"button\");\n      }\n\n    }\n\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(App, null), scratch);\n    assert(node.hoverStartTime === hoverStartTime);\n    assert(node.hoverStayTime === hoverStayTime);\n    assert(node.hoverClass === 'button-hover');\n    node.click();\n    assert(clickSpy.callCount === 1);\n    fireTouchEvent(node, 'touchstart');\n    assert(touchStartSpy.callCount === 1);\n    await delay(hoverStartTime + 10);\n    assert(node.classList.contains('button-hover'));\n    fireTouchEvent(node, 'touchend');\n    assert(touchEndSpy.callCount === 1);\n    await delay(hoverStayTime + 10);\n    assert(node.classList.contains('button-hover') === false);\n  });",
            "file": "button.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Canvas"
            ],
            "updatePoint": {
                "line": 20,
                "column": 11
            },
            "line": 20,
            "code": "  it('props', async () => {\n    const canvasId = 'my-canvas';\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Canvas, {\n      canvasId: canvasId\n    }), scratch);\n    const canvas = wrapper.find('canvas');\n    assert(canvas instanceof HTMLCanvasElement);\n    assert(canvas.getAttribute('canvas-id') === canvasId);\n    assert(canvas.width === 300);\n    assert(canvas.height === 150);\n  });",
            "file": "canvas.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "checkbox",
            "suites": [
                "Checkbox"
            ],
            "updatePoint": {
                "line": 23,
                "column": 14
            },
            "line": 23,
            "code": "  it('checkbox', async () => {\n    const value = 'taro';\n    const red = 'rgb(255, 0, 0)';\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Checkbox, {\n      value: value,\n      color: red\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    const input = wrapper.find('input');\n    assert(node.value === value);\n    assert(node.checked === false);\n    assert(input.checked === false);\n    simulant.fire(input, 'click');\n    await waitForChange(input);\n    assert(input.checked === true);\n    assert(input.style.color === red);\n  });",
            "file": "checkbox.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "checkbox-group",
            "suites": [
                "Checkbox"
            ],
            "updatePoint": {
                "line": 42,
                "column": 20
            },
            "line": 42,
            "code": "  it('checkbox-group', async () => {\n    const lastCheckbox = /*#__PURE__*/React.createRef();\n    const list = [{\n      value: '美国'\n    }, {\n      value: '中国',\n      checked: 'true'\n    }, {\n      value: '巴西'\n    }, {\n      value: '日本'\n    }, {\n      value: '英国'\n    }, {\n      value: '法国'\n    }];\n    const onChange = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(CheckboxGroup, {\n      name: \"checkbox\",\n      onChange: onChange\n    }, list.map(item => /*#__PURE__*/React.createElement(Checkbox, {\n      key: item.value,\n      value: item.value,\n      checked: item.checked,\n      ref: lastCheckbox\n    })));\n    const wrapper = await mount(app, scratch);\n    const {\n      node\n    } = wrapper;\n    const lastCheckboxInput = lastCheckbox.current.querySelector('input');\n    assert(node.value.length === 1);\n    assert(node.value.includes('中国') === true);\n    assert(wrapper.findAll('taro-checkbox-core[name=checkbox]').length === list.length);\n    simulant.fire(lastCheckboxInput, 'click');\n    await waitForChange(lastCheckboxInput);\n    assert(node.value.length === 2);\n    assert(node.value.includes('中国') === true);\n    assert(node.value.includes('法国') === true);\n    assert(onChange.callCount === 1);\n    assert(onChange.firstCall.args[0].detail.value === node.value);\n  });",
            "file": "checkbox.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should show an cover-image",
            "suites": [
                "CoverImage"
            ],
            "updatePoint": {
                "line": 23,
                "column": 32
            },
            "line": 23,
            "code": "  it('should show an cover-image', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(CoverImage, {\n      src: IMAGE\n    }), scratch);\n    assert(wrapper.find(`img[src='${IMAGE}']`));\n  });",
            "file": "cover-image.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "events",
            "suites": [
                "CoverImage"
            ],
            "updatePoint": {
                "line": 29,
                "column": 12
            },
            "line": 29,
            "code": "  it('events', async () => {\n    const onLoad = sinon.spy();\n    const onError = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(CoverImage, {\n      src: \"\",\n      onLoad: onLoad,\n      onError: ev => {\n        // 停止冒泡，防止 Jasmine 监听到 onError 事件导致用例直接失败\n        ev.stopPropagation();\n        onError();\n      }\n    });\n    const wrapper = await mount(app, scratch);\n    await delay(50);\n    assert(onLoad.callCount === 0);\n    assert(onError.callCount === 1);\n    wrapper.setProps({\n      src: IMAGE\n    });\n    await delay(2000);\n    assert(onLoad.callCount === 1);\n    const {\n      width,\n      height\n    } = onLoad.firstCall.args[0].detail;\n    const image = wrapper.find('img');\n    assert(width === image.width);\n    assert(height === image.height);\n    assert(onError.callCount === 1);\n  });",
            "file": "cover-image.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "default props",
            "suites": [
                "CoverView"
            ],
            "updatePoint": {
                "line": 23,
                "column": 19
            },
            "line": 23,
            "code": "  it('default props', async () => {\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(CoverView, null), scratch);\n    assert(node.hoverClass === undefined);\n    assert(node.hoverStartTime === 50);\n    assert(node.hoverStayTime === 400);\n  });",
            "file": "cover-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "slot",
            "suites": [
                "CoverView"
            ],
            "updatePoint": {
                "line": 31,
                "column": 10
            },
            "line": 31,
            "code": "  it('slot', async () => {\n    const app = /*#__PURE__*/React.createElement(CoverView, null, /*#__PURE__*/React.createElement(\"div\", null), /*#__PURE__*/React.createElement(\"div\", null), \"i m div\");\n    const {\n      node\n    } = await mount(app, scratch);\n    assert(node.textContent === 'i m div');\n  });",
            "file": "cover-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should update props successfully",
            "suites": [
                "CoverView"
            ],
            "updatePoint": {
                "line": 38,
                "column": 38
            },
            "line": 38,
            "code": "  it('should update props successfully', async () => {\n    let hoverClass = 'hover';\n    let hoverStartTime = 100;\n    let hoverStayTime = 300;\n    const app = /*#__PURE__*/React.createElement(CoverView, {\n      hoverClass: hoverClass,\n      hoverStartTime: hoverStartTime,\n      hoverStayTime: hoverStayTime\n    });\n    const wrapper = await mount(app, scratch);\n    const {\n      node\n    } = wrapper;\n    assert(node.hoverClass === hoverClass);\n    assert(node.hoverStartTime === hoverStartTime);\n    assert(node.hoverStayTime === hoverStayTime);\n    hoverClass = 'active';\n    hoverStartTime = 200;\n    hoverStayTime = 600;\n    await wrapper.setProps({\n      hoverClass,\n      hoverStartTime,\n      hoverStayTime\n    });\n    assert(node.hoverClass === hoverClass);\n    assert(node.hoverStartTime === hoverStartTime);\n    assert(node.hoverStayTime === hoverStayTime);\n  });",
            "file": "cover-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should hover perform correctly",
            "suites": [
                "CoverView"
            ],
            "updatePoint": {
                "line": 66,
                "column": 36
            },
            "line": 66,
            "code": "  it('should hover perform correctly', async () => {\n    const hoverClass = 'hover';\n    const hoverStartTime = 50;\n    const hoverStayTime = 400;\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(CoverView, {\n      hoverClass: hoverClass\n    }), scratch);\n    simulant.fire(node, 'touchstart');\n    await delay(hoverStartTime + 30);\n    assert(node.classList.contains(hoverClass) === true);\n    simulant.fire(node, 'touchend');\n    await delay(hoverStayTime - 30);\n    assert(node.classList.contains(hoverClass) === true);\n    await delay(100);\n    assert(node.classList.contains(hoverClass) === false);\n  });",
            "file": "cover-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should trigger longpress",
            "suites": [
                "CoverView"
            ],
            "updatePoint": {
                "line": 84,
                "column": 30
            },
            "line": 84,
            "code": "  it('should trigger longpress', async () => {\n    const onLongPressSpy = spy();\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(CoverView, {\n      onLongPress: onLongPressSpy\n    }), scratch);\n    simulant.fire(node, 'touchstart');\n    await delay(400);\n    assert(onLongPressSpy.calledOnce);\n  });",
            "file": "cover-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "events",
            "suites": [
                "Form"
            ],
            "updatePoint": {
                "line": 22,
                "column": 12
            },
            "line": 22,
            "code": "  it('events', async () => {\n    const onSubmit = sinon.spy();\n    const onReset = sinon.spy();\n    const submitRef = /*#__PURE__*/React.createRef();\n    const resetRef = /*#__PURE__*/React.createRef();\n\n    class App extends React.Component {\n      constructor() {\n        super(...arguments);\n        this.state = {\n          switchChecked: false,\n          sliderValue: 0,\n          inputValue: '',\n          textareaValue: '',\n          radios: [{\n            value: 'radio1',\n            checked: false\n          }, {\n            value: 'radio2',\n            checked: false\n          }],\n          checkboxs: [{\n            value: 'checkbox1',\n            checked: false\n          }, {\n            value: 'checkbox2',\n            checked: false\n          }],\n          pickerValue: 0\n        };\n      }\n\n      render() {\n        const {\n          switchChecked,\n          sliderValue,\n          inputValue,\n          textareaValue,\n          radios,\n          checkboxs,\n          pickerValue\n        } = this.state;\n        return /*#__PURE__*/React.createElement(Form, {\n          onSubmit: e => onSubmit(e.detail.value),\n          onReset: onReset\n        }, /*#__PURE__*/React.createElement(Switch, {\n          name: \"my-switch\",\n          checked: switchChecked\n        }), /*#__PURE__*/React.createElement(Slider, {\n          name: \"my-slider\",\n          value: sliderValue\n        }), /*#__PURE__*/React.createElement(Input, {\n          name: \"my-input\",\n          value: inputValue\n        }), /*#__PURE__*/React.createElement(Textarea, {\n          name: \"my-textarea\",\n          value: textareaValue\n        }), /*#__PURE__*/React.createElement(RadioGroup, {\n          name: \"my-radio-group\"\n        }, radios.map(({\n          value,\n          checked\n        }) => /*#__PURE__*/React.createElement(Radio, {\n          key: value,\n          value: value,\n          checked: checked\n        }, value))), /*#__PURE__*/React.createElement(CheckboxGroup, {\n          name: \"my-checkbox-group\"\n        }, checkboxs.map(({\n          value,\n          checked\n        }) => /*#__PURE__*/React.createElement(Checkbox, {\n          key: value,\n          value: value,\n          checked: checked\n        }, value))), /*#__PURE__*/React.createElement(Picker, {\n          name: \"my-picker\",\n          range: ['葡萄', '橙子', '苹果', '木瓜'],\n          value: pickerValue\n        }), /*#__PURE__*/React.createElement(Button, {\n          formType: \"submit\",\n          ref: submitRef\n        }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n          formType: \"reset\",\n          ref: resetRef\n        }, \"Reset\"));\n      }\n\n    }\n\n    const wrapper = await mount( /*#__PURE__*/React.createElement(App, null), scratch);\n    const submitBtn = submitRef.current;\n    const resetBtn = resetRef.current;\n    simulant.fire(submitBtn, 'touchend');\n    assert(onSubmit.calledOnceWith({\n      'my-switch': false,\n      'my-slider': '0',\n      'my-input': '',\n      'my-textarea': '',\n      'my-radio-group': '',\n      'my-checkbox-group': [],\n      'my-picker': '0'\n    }));\n    await wrapper.setState({\n      switchChecked: true,\n      sliderValue: 60,\n      inputValue: 'taro-input',\n      textareaValue: 'taro-textarea',\n      radios: [{\n        value: 'radio1',\n        checked: true\n      }, {\n        value: 'radio2',\n        checked: false\n      }],\n      checkboxs: [{\n        value: 'checkbox1',\n        checked: true\n      }, {\n        value: 'checkbox2',\n        checked: true\n      }],\n      pickerValue: 1\n    });\n    simulant.fire(submitBtn, 'touchend');\n    assert(onSubmit.callCount === 2);\n    assert(onSubmit.calledWith({\n      'my-switch': true,\n      'my-slider': '60',\n      'my-input': 'taro-input',\n      'my-textarea': 'taro-textarea',\n      'my-radio-group': 'radio1',\n      'my-checkbox-group': ['checkbox1', 'checkbox2'],\n      'my-picker': '1'\n    }));\n    simulant.fire(resetBtn, 'touchend');\n    assert(onReset.callCount === 1);\n    simulant.fire(submitBtn, 'touchend');\n    assert(onSubmit.calledWith({\n      'my-switch': false,\n      'my-input': '',\n      'my-textarea': '',\n      'my-radio-group': '',\n      'my-checkbox-group': [],\n      // Slider 和 Picker 的 input type 为 hidden，form.reset() 不能重置它们，需要再想想办法\n      'my-slider': '60',\n      'my-picker': '1'\n    }));\n  });",
            "file": "form.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Icon"
            ],
            "updatePoint": {
                "line": 20,
                "column": 11
            },
            "line": 20,
            "code": "  it('props', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Icon, null), scratch);\n    const {\n      node\n    } = wrapper;\n    const computedStyle = window.getComputedStyle(node);\n    assert(computedStyle.fontSize === '23px');\n    const type = 'success';\n    const size = '40';\n    const color = 'rgb(255, 0, 0)';\n    await wrapper.setProps({\n      type,\n      size,\n      color\n    });\n    assert(node.classList.contains(`weui-icon-${type}`));\n    assert(computedStyle.fontSize === `${size}px`);\n    assert(computedStyle.color === color);\n  });",
            "file": "icon.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should show an image",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 23,
                "column": 26
            },
            "line": 23,
            "code": "  it('should show an image', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Image, {\n      src: IMAGE\n    }), scratch);\n    assert(wrapper.find(`img[src='${IMAGE}']`));\n  });",
            "file": "image.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should set mode successfully",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 29,
                "column": 34
            },
            "line": 29,
            "code": "  it('should set mode successfully', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Image, {\n      src: IMAGE\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    let mode = 'scaleToFill';\n    const img = node.querySelector('img');\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-scaletofill') === true);\n    mode = 'aspectFit';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-aspectfit') === true);\n    mode = 'aspectFill';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-aspectfill') === true); // 无头浏览器中获取不到 naturalWidth 和 naturalHeight\n    // const { naturalWidth, naturalHeight } = img\n    // const aspectFillMode = naturalWidth > naturalHeight ? 'width' : 'height'\n    // assert(img.classList.contains(`taro-img__mode-aspectfill--${aspectFillMode}`) === true)\n\n    mode = 'widthFix';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(node.classList.contains('taro-img__widthfix'));\n    assert(img.classList.contains('taro-img__mode-widthfix') === true);\n    mode = 'top';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-top') === true);\n    mode = 'bottom';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-bottom') === true);\n    mode = 'center';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-center') === true);\n    mode = 'left';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-left') === true);\n    mode = 'right';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-right') === true);\n    mode = 'top left';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-topleft') === true);\n    mode = 'top right';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-topright') === true);\n    mode = 'bottom left';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-bottomleft') === true);\n    mode = 'bottom right';\n    await wrapper.setProps({\n      mode\n    });\n    assert(node.mode === mode);\n    assert(img.classList.contains('taro-img__mode-bottomright') === true);\n  });",
            "file": "image.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should preload images",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 118,
                "column": 27
            },
            "line": 118,
            "code": "  it('should preload images', async () => {\n    // mock window.IntersectionObserver\n    let observe;\n\n    function IntersectionObserver(cb) {\n      observe = cb;\n    }\n\n    IntersectionObserver.prototype.observe = () => {};\n\n    IntersectionObserver.prototype.unobserve = () => {};\n\n    sinon.stub(window, 'IntersectionObserver').value(IntersectionObserver);\n    const vh = document.documentElement.clientHeight;\n    const rootMargin = 300;\n    const onLoad = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `${vh + rootMargin + 1}px`\n      }\n    }), /*#__PURE__*/React.createElement(Image, {\n      src: IMAGE,\n      lazyLoad: true,\n      onLoad: onLoad\n    }));\n    const wrapper = await mount(app, scratch);\n    const img = wrapper.find('img');\n    await delay(50);\n    assert(img.src === '');\n    assert(onLoad.callCount === 0); // 触发相交\n\n    observe([{\n      isIntersecting: true\n    }]);\n    await delay(2000);\n    assert(img.src === IMAGE);\n    assert(onLoad.callCount === 1);\n  });",
            "file": "image.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "events",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 156,
                "column": 12
            },
            "line": 156,
            "code": "  it('events', async () => {\n    const onLoad = sinon.spy();\n    const onError = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(Image, {\n      src: \"\",\n      onLoad: onLoad,\n      onError: ev => {\n        // 停止冒泡，防止 Jasmine 监听到 onError 事件导致用例直接失败\n        ev.stopPropagation();\n        onError();\n      }\n    });\n    const wrapper = await mount(app, scratch);\n    await delay(50);\n    assert(onLoad.callCount === 0);\n    assert(onError.callCount === 1);\n    wrapper.setProps({\n      src: IMAGE\n    });\n    await delay(2000);\n    assert(onLoad.callCount === 1);\n    const {\n      width,\n      height\n    } = onLoad.firstCall.args[0].detail;\n    const image = wrapper.find('img');\n    assert(width === image.width);\n    assert(height === image.height);\n    assert(onError.callCount === 1);\n  });",
            "file": "image.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Input"
            ],
            "updatePoint": {
                "line": 24,
                "column": 11
            },
            "line": 24,
            "code": "  it('props', async () => {\n    const ref = /*#__PURE__*/React.createRef();\n    const maxLength = 10;\n    const disabled = false;\n    const value = '';\n    const placeholder = 'placeholder';\n    const autoFocus = true;\n    const focusSpy = sinon.spy();\n    /**\n     * @type {import('react').ReactInstance}\n     */\n\n    let instance;\n\n    class App extends React.Component {\n      state = {\n        maxLength,\n        disabled,\n        value,\n        placeholder,\n        autoFocus,\n        type: 'text'\n      };\n\n      constructor(props) {\n        super(props);\n        instance = this;\n      }\n\n      render() {\n        const {\n          maxLength,\n          disabled,\n          value,\n          placeholder,\n          type,\n          autoFocus\n        } = this.state;\n        return /*#__PURE__*/React.createElement(Input, {\n          ref: ref,\n          maxlength: maxLength,\n          disabled: disabled,\n          value: value,\n          placeholder: placeholder,\n          type: type,\n          autoFocus: autoFocus,\n          onFocus: () => {\n            focusSpy();\n          }\n        });\n      }\n\n    }\n\n    ReactDOM.render( /*#__PURE__*/React.createElement(App, null), scratch);\n    /**\n     * @type {HTMLElement}\n     */\n\n    const node = ref.current;\n    await waitForChange(node);\n    /**\n     * @type {HTMLInputElement}\n     */\n\n    const input = node.children[0];\n    assert(input.classList.contains('weui-input'));\n    assert(input.getAttribute('maxlength') === maxLength.toString());\n    assert(input.getAttribute('placeholder') === placeholder);\n    assert(input.type === 'text');\n    input.focus();\n    assert(focusSpy.callCount === 1); // assert($(input).is(':focus'))\n    // assert(document.activeElement === input)\n\n    instance.setState({\n      value: 'test',\n      maxLength: 4,\n      type: 'password'\n    });\n    await waitForChange(input);\n    assert(input.value === 'test');\n    assert(input.type === 'password');\n  });",
            "file": "input.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "event",
            "suites": [
                "Input"
            ],
            "updatePoint": {
                "line": 107,
                "column": 11
            },
            "line": 107,
            "code": "  it('event', async () => {\n    const ref = /*#__PURE__*/React.createRef();\n    const focusSpy = sinon.spy();\n    const blurSpy = sinon.spy();\n    const confirm = sinon.spy();\n    const inputSpy = sinon.spy();\n    const keydownSpy = sinon.spy();\n    const value = 'value';\n\n    class App extends React.Component {\n      state = {\n        value: ''\n      };\n\n      render() {\n        return /*#__PURE__*/React.createElement(Input, {\n          ref: ref,\n          onFocus: e => {\n            focusSpy(e.detail.value);\n          },\n          maxLength: 4,\n          value: value,\n          onBlur: e => blurSpy(e.detail.value),\n          onKeyDown: e => keydownSpy(e.detail.value),\n          onConfirm: () => confirm(),\n          onInput: e => {\n            inputSpy(e.detail.value);\n          }\n        });\n      }\n\n    }\n\n    ReactDOM.render( /*#__PURE__*/React.createElement(App, null), scratch);\n    /**\n     * @type {HTMLElement}\n     */\n\n    const node = ref.current;\n    await waitForChange(node);\n    const input = $(node.children[0]);\n    input.focus();\n    assert(focusSpy.calledOnce);\n    assert(focusSpy.calledWith(value));\n    input.blur();\n    assert(blurSpy.calledOnce);\n    assert(focusSpy.calledWith(value));\n    simulant.fire(input[0], 'keydown');\n    assert(keydownSpy.callCount === 1);\n    assert(keydownSpy.calledWith(value));\n    simulant.fire(input[0], 'keydown');\n    assert(keydownSpy.callCount === 2);\n    assert(keydownSpy.calledWith(value));\n    assert(confirm.callCount === 0);\n    simulant.fire(input[0], 'keydown', {\n      keyCode: 13\n    });\n    assert(confirm.callCount === 1);\n    simulant.fire(input[0], 'input', {\n      data: 'a',\n      inputType: 'insertText'\n    });\n    assert(inputSpy.callCount === 1);\n  });",
            "file": "input.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "label contain subject",
            "suites": [
                "Label"
            ],
            "updatePoint": {
                "line": 23,
                "column": 27
            },
            "line": 23,
            "code": "  it('label contain subject', async () => {\n    const ref = /*#__PURE__*/React.createRef();\n    const onChange = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(CheckboxGroup, {\n      onChange: onChange\n    }, /*#__PURE__*/React.createElement(Label, null, /*#__PURE__*/React.createElement(Checkbox, {\n      value: \"dog\",\n      ref: ref\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"dog\"\n    }, \"dog\")), /*#__PURE__*/React.createElement(Label, null, /*#__PURE__*/React.createElement(Checkbox, {\n      value: \"cat\",\n      checked: true\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"cat\"\n    }, \"cat\")));\n    const {\n      node,\n      find\n    } = await mount(app, scratch);\n    const target = find('#dog');\n    const input = ref.current.querySelector('input');\n    assert(node.value.length === 1);\n    assert(node.value.includes('cat'));\n    simulant.fire(target, 'click');\n    await waitForChange(input);\n    assert(node.value.length === 2);\n    assert(node.value.includes('cat'));\n    assert(node.value.includes('dog'));\n    assert(onChange.callCount === 1);\n  });",
            "file": "label.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "label for",
            "suites": [
                "Label"
            ],
            "updatePoint": {
                "line": 54,
                "column": 15
            },
            "line": 54,
            "code": "  it('label for', async () => {\n    const radioGroup = /*#__PURE__*/React.createRef();\n    const labelRef = /*#__PURE__*/React.createRef();\n    const onChange = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(RadioGroup, {\n      ref: radioGroup,\n      onChange: onChange\n    }, /*#__PURE__*/React.createElement(Radio, {\n      id: \"gz\",\n      value: \"GuangZhou\"\n    }, \"GuangZhou\"), /*#__PURE__*/React.createElement(Radio, {\n      id: \"sz\",\n      value: \"ShenZhen\",\n      checked: true\n    }, \"ShenZhen\")), /*#__PURE__*/React.createElement(Label, {\n      for: \"gz\",\n      ref: labelRef\n    }, \"\\u5E7F\\u5DDE\"), /*#__PURE__*/React.createElement(Label, {\n      for: \"sz\"\n    }, \"\\u6DF1\\u5733\"));\n    await mount(app, scratch);\n    const gz = labelRef.current.querySelector('label');\n    assert(radioGroup.current.value === 'ShenZhen');\n    simulant.fire(gz, 'click');\n    assert(radioGroup.current.value === 'GuangZhou');\n    assert(onChange.callCount === 1);\n  });",
            "file": "label.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "use mouse events",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 58,
                "column": 22
            },
            "line": 58,
            "code": "  it('use mouse events', async () => {\n    const onChange = sinon.spy();\n    const selected = 1;\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      range: ['A', 'B', 'C', 'D'],\n      value: selected,\n      onChange: e => onChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    const content = document.querySelector('.weui-picker__content');\n    const column = document.querySelector('.weui-picker__group');\n    assert(node.value === selected);\n    domRef.current.click();\n    await waitForChange(slider);\n    const cur = document.querySelector('.weui-picker__indicator');\n    const curRect = cur.getBoundingClientRect();\n    const startY = curRect.top + curRect.height / 2;\n    const endY = curRect.top - curRect.height / 2;\n    simulant.fire(column, 'mousedown', new MouseEvent(column, {\n      clientY: startY\n    }));\n    simulant.fire(column, 'mousemove', new MouseEvent(column, {\n      clientY: endY\n    }));\n    await waitForChange(content);\n    simulant.fire(column, 'mouseup', new MouseEvent(column, {\n      clientY: endY\n    }));\n    await waitForChange(content);\n    confirm.click();\n    assert(node.value === 2);\n    assert(onChange.calledOnceWith({\n      value: 2\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should can be canceled",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 100,
                "column": 28
            },
            "line": 100,
            "code": "  it('should can be canceled', async () => {\n    const onCancel = sinon.spy();\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      range: ['葡萄', '橙子'],\n      value: 1,\n      onCancel: onCancel\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    await mount(app, scratch);\n    const overlay = document.querySelector('.weui-picker__overlay');\n    const mask = document.querySelector('.weui-mask');\n    const cancel = document.querySelectorAll('.weui-picker__action')[0];\n    assert(overlay.style.display === 'none'); // 成功打开\n\n    domRef.current.click();\n    await waitForChange(overlay);\n    assert(overlay.style.display !== 'none'); // 点击蒙层可以关闭\n\n    mask.click();\n    await waitForChange(overlay);\n    assert(overlay.style.display === 'none');\n    assert(onCancel.callCount === 1); // 点击取消按钮可以关闭\n\n    domRef.current.click();\n    await waitForChange(overlay);\n    cancel.click();\n    await waitForChange(overlay);\n    assert(overlay.style.display === 'none');\n    assert(onCancel.callCount === 2);\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "selector",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 132,
                "column": 14
            },
            "line": 132,
            "code": "  it('selector', async () => {\n    const onChange = sinon.spy();\n    const range = ['葡萄', '橙子', '苹果', '木瓜'];\n    const selected = 1;\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      range: range,\n      value: selected,\n      onChange: e => onChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    assert(node.value === selected);\n    domRef.current.click();\n    await waitForChange(slider);\n    await srcollToNextItem();\n    confirm.click();\n    assert(node.value === 2);\n    assert(onChange.calledOnceWith({\n      value: 2\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "multiSelector",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 159,
                "column": 19
            },
            "line": 159,
            "code": "  it('multiSelector', async () => {\n    const onChange = sinon.spy();\n    const onColumnChange = sinon.spy();\n    const range = [[{\n      id: 0,\n      name: '饭'\n    }, {\n      id: 1,\n      name: '粥'\n    }, {\n      id: 2,\n      name: '粉'\n    }], [{\n      id: 0,\n      name: '猪肉'\n    }, {\n      id: 1,\n      name: '牛肉'\n    }]];\n    const selected = [0, 0];\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      mode: \"multiSelector\",\n      range: range,\n      rangeKey: \"name\",\n      value: selected,\n      onChange: e => onChange(e.detail),\n      onColumnChange: e => onColumnChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    assert(node.value === selected);\n    domRef.current.click();\n    await waitForChange(slider);\n    await srcollToNextItem();\n    assert(onColumnChange.calledOnceWith({\n      column: 0,\n      value: 1\n    }));\n    confirm.click();\n    assert.deepStrictEqual(node.value, [1, 0]);\n    assert(onChange.calledOnceWith({\n      value: [1, 0]\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "time",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 209,
                "column": 10
            },
            "line": 209,
            "code": "  it('time', async () => {\n    const onChange = sinon.spy();\n    const selected = '12:01';\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      mode: \"time\",\n      value: selected,\n      onChange: e => onChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    assert(node.value === selected);\n    domRef.current.click();\n    await waitForChange(slider);\n    await srcollToNextItem();\n    confirm.click();\n    assert(node.value === '13:01');\n    assert(onChange.calledOnceWith({\n      value: '13:01'\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "date",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 235,
                "column": 10
            },
            "line": 235,
            "code": "  it('date', async () => {\n    const onChange = sinon.spy();\n    const selected = '2016-09-01';\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      mode: \"date\",\n      value: selected,\n      onChange: e => onChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    assert(node.value === selected);\n    domRef.current.click();\n    await waitForChange(slider);\n    await srcollToNextItem(1);\n    confirm.click();\n    assert(node.value === '2016-10-01');\n    assert(onChange.calledOnceWith({\n      value: '2016-10-01'\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "time range",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 261,
                "column": 16
            },
            "line": 261,
            "code": "  it('time range', async () => {\n    const start = '9:00';\n    const end = '12:00';\n    const onChange = sinon.spy();\n    const selected = '12:00';\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      mode: \"time\",\n      start: start,\n      end: end,\n      value: selected,\n      onChange: e => onChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    assert(node.value === selected);\n    domRef.current.click();\n    await waitForChange(slider);\n    await srcollToNextItem();\n    confirm.click();\n    assert(node.value === selected);\n    assert(onChange.calledOnceWith({\n      value: selected\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "date range",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 291,
                "column": 16
            },
            "line": 291,
            "code": "  it('date range', async () => {\n    const start = '2016-01-01';\n    const end = '2016-09-30';\n    const onChange = sinon.spy();\n    const selected = '2016-09-01';\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      mode: \"date\",\n      start: start,\n      end: end,\n      value: selected,\n      onChange: e => onChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    assert(node.value === selected);\n    domRef.current.click();\n    await waitForChange(slider);\n    await srcollToNextItem(1);\n    confirm.click();\n    assert(node.value === selected);\n    assert(onChange.calledOnceWith({\n      value: selected\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "date fields month",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 321,
                "column": 23
            },
            "line": 321,
            "code": "  it('date fields month', async () => {\n    const onChange = sinon.spy();\n    const selected = '2016-09-01';\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      mode: \"date\",\n      value: selected,\n      fields: \"month\",\n      onChange: e => onChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    assert(node.value === '2016-09');\n    domRef.current.click();\n    await waitForChange(slider);\n    await srcollToNextItem();\n    confirm.click();\n    assert(node.value === '2017-09');\n    assert(onChange.calledOnceWith({\n      value: '2017-09'\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "date fields year",
            "suites": [
                "Picker"
            ],
            "updatePoint": {
                "line": 348,
                "column": 22
            },
            "line": 348,
            "code": "  it('date fields year', async () => {\n    const onChange = sinon.spy();\n    const selected = '2016-09-01';\n    const domRef = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Picker, {\n      mode: \"date\",\n      value: selected,\n      fields: \"year\",\n      onChange: e => onChange(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: domRef\n    }, \"Picker\"));\n    const {\n      node\n    } = await mount(app, scratch);\n    const slider = document.querySelector('.weui-picker');\n    const confirm = document.querySelectorAll('.weui-picker__action')[1];\n    assert(node.value === '2016');\n    domRef.current.click();\n    await waitForChange(slider);\n    await srcollToNextItem();\n    confirm.click();\n    assert(node.value === '2017');\n    assert(onChange.calledOnceWith({\n      value: '2017'\n    }));\n  });",
            "file": "picker.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Progress"
            ],
            "updatePoint": {
                "line": 20,
                "column": 11
            },
            "line": 20,
            "code": "  it('props', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Progress, null), scratch);\n    const {\n      node\n    } = wrapper;\n    let bar = node.querySelector('.weui-progress__bar');\n    let innerBar = node.querySelector('.weui-progress__inner-bar');\n    let opr = node.querySelector('.weui-progress__opr');\n    assert(bar.style.height === '6px');\n    assert(bar.style.backgroundColor === 'rgb(235, 235, 235)');\n    assert(innerBar.style.width === '0%');\n    assert(innerBar.style.transition === 'none 0s ease 0s');\n    assert(innerBar.style.backgroundColor === 'rgb(9, 187, 7)');\n    assert(innerBar.style.borderRadius === '0px');\n    assert(opr === null);\n    const percent = 66;\n    const borderRadius = 10;\n    const fontSize = 24;\n    const strokeWidth = 10;\n    const activeColor = 'yellow';\n    const backgroundColor = 'blue';\n    await wrapper.setProps({\n      percent,\n      showInfo: true,\n      borderRadius,\n      fontSize,\n      strokeWidth,\n      activeColor,\n      backgroundColor,\n      active: true\n    });\n    bar = node.querySelector('.weui-progress__bar');\n    innerBar = node.querySelector('.weui-progress__inner-bar');\n    opr = node.querySelector('.weui-progress__opr');\n    assert(bar.style.height === `${strokeWidth}px`);\n    assert(bar.style.backgroundColor === backgroundColor);\n    assert(innerBar.style.width === `${percent}%`);\n    assert(innerBar.style.transition === 'width 1s ease-in-out 0s');\n    assert(innerBar.style.backgroundColor === activeColor);\n    assert(innerBar.style.borderRadius === `${borderRadius}px`);\n    assert(opr.style.fontSize === `${fontSize}px`);\n    assert(opr.innerHTML === `<span>${percent}%</span>`);\n  });",
            "file": "progress.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should percent between 0~100",
            "suites": [
                "Progress"
            ],
            "updatePoint": {
                "line": 63,
                "column": 34
            },
            "line": 63,
            "code": "  it('should percent between 0~100', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Progress, {\n      percent: -18,\n      showInfo: true\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    let innerBar = node.querySelector('.weui-progress__inner-bar');\n    let opr = node.querySelector('.weui-progress__opr');\n    assert(innerBar.style.width === '0%');\n    assert(opr.innerHTML === '<span>0%</span>');\n    await wrapper.setProps({\n      percent: 150\n    });\n    innerBar = node.querySelector('.weui-progress__inner-bar');\n    opr = node.querySelector('.weui-progress__opr');\n    assert(innerBar.style.width === '100%');\n    assert(opr.innerHTML === '<span>100%</span>');\n  });",
            "file": "progress.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "radio",
            "suites": [
                "Radio"
            ],
            "updatePoint": {
                "line": 23,
                "column": 11
            },
            "line": 23,
            "code": "  it('radio', async () => {\n    const value = 'taro';\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Radio, {\n      value: value\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    const input = wrapper.find('input');\n    assert(node.value === value);\n    assert(node.checked === false);\n    assert(input.checked === false);\n    simulant.fire(input, 'click');\n    await waitForChange(input);\n    assert(node.checked === true);\n    assert(input.checked === true);\n  });",
            "file": "radio.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "radio-group",
            "suites": [
                "Radio"
            ],
            "updatePoint": {
                "line": 40,
                "column": 17
            },
            "line": 40,
            "code": "  it('radio-group', async () => {\n    const secondRadio = /*#__PURE__*/React.createRef();\n    const lastRadio = /*#__PURE__*/React.createRef();\n    const list = [{\n      value: '美国'\n    }, {\n      value: '中国',\n      checked: 'true',\n      ref: secondRadio\n    }, {\n      value: '巴西'\n    }, {\n      value: '日本'\n    }, {\n      value: '英国'\n    }, {\n      value: '法国',\n      ref: lastRadio\n    }];\n    const onChange = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(RadioGroup, {\n      name: \"radio\",\n      onChange: onChange\n    }, list.map(item => /*#__PURE__*/React.createElement(Radio, {\n      key: item.value,\n      value: item.value,\n      checked: item.checked,\n      ref: item.ref\n    })));\n    const wrapper = await mount(app, scratch);\n    const {\n      node\n    } = wrapper;\n    const lastRadioInput = lastRadio.current.querySelector('input');\n    assert(node.value === '中国');\n    assert(secondRadio.current.checked === true);\n    assert(wrapper.findAll('taro-radio-core[name=radio]').length === list.length);\n    simulant.fire(lastRadioInput, 'click');\n    await waitForChange(lastRadioInput);\n    assert(secondRadio.current.checked === false);\n    assert(lastRadio.current.checked === true);\n    assert(node.value === '法国');\n    assert(onChange.callCount === 1);\n    assert(onChange.firstCall.args[0].detail.value === node.value);\n  });",
            "file": "radio.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should render array nodes",
            "suites": [
                "RichText"
            ],
            "updatePoint": {
                "line": 21,
                "column": 31
            },
            "line": 21,
            "code": "  it('should render array nodes', async () => {\n    const nodes = [{\n      name: 'div',\n      attrs: {\n        class: 'div_class',\n        style: 'line-height:    60px;    color:red;margin-top: 10px; padding: 50px 30px'\n      },\n      children: [{\n        type: 'text',\n        text: 'Hello&nbsp;World!'\n      }]\n    }];\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(RichText, {\n      nodes: nodes\n    }), scratch);\n    assert(node.innerHTML === SNAPSHOT);\n  });",
            "file": "rich-text.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should render string nodes",
            "suites": [
                "RichText"
            ],
            "updatePoint": {
                "line": 40,
                "column": 32
            },
            "line": 40,
            "code": "  it('should render string nodes', async () => {\n    const nodes = SNAPSHOT;\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(RichText, {\n      nodes: nodes\n    }), scratch);\n    assert(node.innerHTML === SNAPSHOT);\n  });",
            "file": "rich-text.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "scroll-x",
            "suites": [
                "ScrollView"
            ],
            "updatePoint": {
                "line": 40,
                "column": 14
            },
            "line": 40,
            "code": "  it('scroll-x', async () => {\n    const onScroll = sinon.spy();\n    const onScrollToUpper = sinon.spy();\n    const onScrollToLower = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(ScrollView, {\n      scrollX: true,\n      style: {\n        'white-space': 'nowrap'\n      },\n      onScroll: e => onScroll(e.detail),\n      onScrollToUpper: e => onScrollToUpper(e.detail),\n      onScrollToLower: e => onScrollToLower(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, divStyleH, {\n        backgroundColor: 'blue'\n      })\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, divStyleH, {\n        backgroundColor: 'yellow'\n      })\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, divStyleH, {\n        backgroundColor: 'blue'\n      })\n    }));\n    const wrapper = await mount(app, scratch);\n    const {\n      node\n    } = wrapper;\n    const {\n      scrollHeight,\n      scrollWidth\n    } = node;\n    const {\n      width\n    } = node.getBoundingClientRect();\n    const upper = 50;\n    const lower = 50;\n    assert(node.classList.contains('taro-scroll-view__scroll-x') === true);\n    assert(node.upperThreshold === upper);\n    assert(node.lowerThreshold === lower);\n    assert(node.scrollWithAnimation !== true);\n    await wrapper.setProps({\n      scrollLeft: upper + 1,\n      scrollWithAnimation: true\n    });\n    assert(onScroll.calledOnceWith({\n      scrollLeft: upper + 1,\n      scrollTop: 0,\n      scrollHeight,\n      scrollWidth\n    }));\n    assert(onScrollToUpper.callCount === 0);\n    assert(node.scrollWithAnimation === true);\n    await wrapper.setProps({\n      scrollLeft: upper\n    });\n    assert(onScrollToUpper.calledOnceWith({\n      direction: 'left'\n    }));\n    await wrapper.setProps({\n      scrollLeft: scrollWidth - width - lower - 1\n    });\n    assert(onScrollToLower.callCount === 0);\n    await wrapper.setProps({\n      scrollLeft: scrollWidth - width - lower\n    });\n    assert(onScrollToLower.calledOnceWith({\n      direction: 'right'\n    }));\n  });",
            "file": "scroll-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "scroll-y",
            "suites": [
                "ScrollView"
            ],
            "updatePoint": {
                "line": 111,
                "column": 14
            },
            "line": 111,
            "code": "  it('scroll-y', async () => {\n    const onScroll = sinon.spy();\n    const onScrollToUpper = sinon.spy();\n    const onScrollToLower = sinon.spy();\n    const upper = 100;\n    const lower = 150;\n    const app = /*#__PURE__*/React.createElement(ScrollView, {\n      scrollY: true,\n      style: {\n        height: '300px'\n      },\n      upperThreshold: upper,\n      lowerThreshold: lower,\n      onScroll: e => onScroll(e.detail),\n      onScrollToUpper: e => onScrollToUpper(e.detail),\n      onScrollToLower: e => onScrollToLower(e.detail)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, divStyleV, {\n        backgroundColor: 'blue'\n      })\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, divStyleV, {\n        backgroundColor: 'yellow'\n      })\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, divStyleV, {\n        backgroundColor: 'blue'\n      })\n    }));\n    const wrapper = await mount(app, scratch);\n    const {\n      node\n    } = wrapper;\n    const {\n      scrollHeight,\n      scrollWidth\n    } = node;\n    const {\n      height\n    } = node.getBoundingClientRect();\n    assert(node.classList.contains('taro-scroll-view__scroll-y') === true);\n    assert(node.upperThreshold === upper);\n    assert(node.lowerThreshold === lower);\n    await wrapper.setProps({\n      scrollTop: upper + 1\n    });\n    assert(onScroll.calledOnceWith({\n      scrollLeft: 0,\n      scrollTop: upper + 1,\n      scrollHeight,\n      scrollWidth\n    }));\n    assert(onScrollToUpper.callCount === 0);\n    await wrapper.setProps({\n      scrollTop: upper\n    });\n    assert(onScrollToUpper.calledOnceWith({\n      direction: 'top'\n    }));\n    await wrapper.setProps({\n      scrollTop: scrollHeight - height - lower - 1\n    });\n    assert(onScrollToLower.callCount === 0);\n    await wrapper.setProps({\n      scrollTop: scrollHeight - height - lower\n    });\n    assert(onScrollToLower.calledOnceWith({\n      direction: 'bottom'\n    }));\n  });",
            "file": "scroll-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Slider"
            ],
            "updatePoint": {
                "line": 22,
                "column": 11
            },
            "line": 22,
            "code": "  it('props', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Slider, null), scratch);\n    const {\n      node\n    } = wrapper;\n    const inner = wrapper.find('.weui-slider__inner');\n    const track = wrapper.find('.weui-slider__track');\n    const handler = wrapper.find('.weui-slider__handler');\n    let box = wrapper.find('.weui-slider-box__value');\n    assert(inner.style.backgroundColor === 'rgb(233, 233, 233)');\n    assert(track.style.width === '0%');\n    assert(track.style.backgroundColor === 'rgb(26, 173, 25)');\n    assert(handler.style.left === '0%');\n    assert(handler.style.width === '28px');\n    assert(handler.style.height === '28px');\n    assert(handler.style.backgroundColor === 'rgb(255, 255, 255)');\n    assert(box === null);\n    assert(node.disabled === false);\n    const value = 50;\n    const activeColor = 'rgb(97, 144, 232)';\n    const backgroundColor = 'rgb(255, 0, 0)';\n    const blockColor = 'rgb(51, 51, 51)';\n    const blockSize = 20;\n    await wrapper.setProps({\n      value,\n      activeColor,\n      backgroundColor,\n      blockColor,\n      blockSize,\n      showValue: true,\n      disabled: true\n    });\n    box = wrapper.find('.weui-slider-box__value');\n    assert(inner.style.backgroundColor === backgroundColor);\n    assert(track.style.width === `${value}%`);\n    assert(track.style.backgroundColor === activeColor);\n    assert(handler.style.left === `${value}%`);\n    assert(handler.style.width === `${blockSize}px`);\n    assert(handler.style.height === `${blockSize}px`);\n    assert(handler.style.backgroundColor === blockColor);\n    assert(box.textContent === `${value}`);\n    assert(node.disabled === true);\n  });",
            "file": "slider.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should be max",
            "suites": [
                "Slider"
            ],
            "updatePoint": {
                "line": 65,
                "column": 19
            },
            "line": 65,
            "code": "  it('should be max', async () => {\n    const max = 200;\n    const current = 300;\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Slider, {\n      max: max,\n      value: current\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    assert(node.value === max);\n  });",
            "file": "slider.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should be min",
            "suites": [
                "Slider"
            ],
            "updatePoint": {
                "line": 77,
                "column": 19
            },
            "line": 77,
            "code": "  it('should be min', async () => {\n    const min = 50;\n    const current = 0;\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Slider, {\n      min: min,\n      value: current\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    assert(node.value === min);\n  });",
            "file": "slider.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "steps",
            "suites": [
                "Slider"
            ],
            "updatePoint": {
                "line": 89,
                "column": 11
            },
            "line": 89,
            "code": "  it('steps', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Slider, {\n      min: 50,\n      max: 200,\n      step: 2,\n      value: 79\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    const track = wrapper.find('.weui-slider__track');\n    const handler = wrapper.find('.weui-slider__handler');\n    assert(node.value === 80);\n    assert(track.style.width === '20%');\n    assert(handler.style.left === '20%');\n  });",
            "file": "slider.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "events",
            "suites": [
                "Slider"
            ],
            "updatePoint": {
                "line": 105,
                "column": 12
            },
            "line": 105,
            "code": "  it('events', async () => {\n    const onChange = sinon.spy();\n    const onChanging = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(Slider, {\n      onChange: onChange,\n      onChanging: onChanging\n    });\n    const wrapper = await mount(app, scratch);\n    const inner = wrapper.find('.weui-slider__inner');\n    const handler = wrapper.find('.weui-slider__handler');\n    const innerWidth = inner.getBoundingClientRect().width;\n    const rect = handler.getBoundingClientRect();\n    const centerPoint = (rect.left + rect.right) / 2;\n    const touchStart = new Touch({\n      identifier: 0,\n      target: handler,\n      pageX: centerPoint\n    });\n    simulant.fire(handler, 'touchstart', {\n      targetTouches: [touchStart]\n    });\n    const touchMove = new Touch({\n      identifier: 0,\n      target: handler,\n      pageX: centerPoint + innerWidth / 2\n    });\n    simulant.fire(handler, 'touchmove', {\n      targetTouches: [touchMove]\n    });\n    simulant.fire(handler, 'touchend');\n    assert(onChanging.calledOnce === true);\n    assert(onChanging.firstCall.args[0].detail.value === 50);\n    assert(onChange.calledOnce === true);\n    assert(onChange.firstCall.args[0].detail.value === 50);\n    assert(wrapper.node.value === 50);\n  });",
            "file": "slider.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Swiper"
            ],
            "updatePoint": {
                "line": 25,
                "column": 11
            },
            "line": 25,
            "code": "  it('props', async () => {\n    // test props: current, indicator, duration\n    const duration = 100;\n    const app = /*#__PURE__*/React.createElement(Swiper, {\n      duration: duration\n    }, /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })));\n    const wrapper = await mount(app, scratch);\n    const {\n      node\n    } = wrapper;\n    const swiper = wrapper.find('.swiper-wrapper');\n    const swiperStyles = window.getComputedStyle(swiper);\n    const {\n      width\n    } = swiper.getBoundingClientRect();\n    const indicator = wrapper.find('.swiper-pagination');\n    const bullets = wrapper.findAll('.swiper-pagination-bullet');\n    const bulletAStyle = window.getComputedStyle(bullets[0]);\n    const bulletBStyle = window.getComputedStyle(bullets[1]);\n    assert(node.duration === duration);\n    assert(swiperStyles.transform === 'matrix(1, 0, 0, 1, 0, 0)');\n    assert(indicator.classList.contains('swiper-pagination-hidden') === true);\n    assert(bulletBStyle.backgroundColor === 'rgba(0, 0, 0, 0.3)');\n    assert(bulletAStyle.backgroundColor === 'rgb(0, 0, 0)');\n    const indicatorColor = 'rgb(153, 153, 153)';\n    const indicatorActiveColor = 'rgb(51, 51, 51)';\n    await wrapper.setProps({\n      current: 1,\n      indicatorDots: true,\n      indicatorColor,\n      indicatorActiveColor\n    });\n    await delay(duration);\n    assert(swiperStyles.transform === `matrix(1, 0, 0, 1, -${width}, 0)`);\n    assert(indicator.classList.contains('swiper-pagination-hidden') === false);\n    assert(bulletAStyle.backgroundColor === indicatorColor);\n    assert(bulletBStyle.backgroundColor === indicatorActiveColor);\n  });",
            "file": "swiper.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should autoplay",
            "suites": [
                "Swiper"
            ],
            "updatePoint": {
                "line": 69,
                "column": 21
            },
            "line": 69,
            "code": "  it('should autoplay', async () => {\n    const interval = 1500;\n    const app = /*#__PURE__*/React.createElement(Swiper, {\n      autoplay: true,\n      interval: interval\n    }, /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })));\n    const wrapper = await mount(app, scratch);\n    const swiper = wrapper.find('.swiper-wrapper');\n    const swiperStyles = window.getComputedStyle(swiper);\n    const {\n      width\n    } = swiper.getBoundingClientRect();\n    assert(swiperStyles.transform === 'matrix(1, 0, 0, 1, 0, 0)');\n    await delay(interval + wrapper.node.duration);\n    assert(swiperStyles.transform === `matrix(1, 0, 0, 1, -${width}, 0)`);\n  });",
            "file": "swiper.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should be circular",
            "suites": [
                "Swiper"
            ],
            "updatePoint": {
                "line": 91,
                "column": 24
            },
            "line": 91,
            "code": "  it('should be circular', async () => {\n    const app = /*#__PURE__*/React.createElement(Swiper, {\n      circular: true\n    }, /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", null)), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", null)), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", null)));\n    const wrapper = await mount(app, scratch);\n    const swiper = wrapper.find('.swiper-wrapper');\n    assert(swiper.children.length === 5);\n  });",
            "file": "swiper.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should be vertical",
            "suites": [
                "Swiper"
            ],
            "updatePoint": {
                "line": 99,
                "column": 24
            },
            "line": 99,
            "code": "  it('should be vertical', async () => {\n    const interval = 1500;\n    const app = /*#__PURE__*/React.createElement(Swiper, {\n      current: 1,\n      vertical: true,\n      autoplay: true,\n      interval: interval\n    }, /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })));\n    const wrapper = await mount(app, scratch);\n    const container = wrapper.find('.swiper-container');\n    const swiper = wrapper.find('.swiper-wrapper');\n    const swiperStyles = window.getComputedStyle(swiper);\n    const {\n      height\n    } = swiper.getBoundingClientRect();\n    assert(container.classList.contains('swiper-container-vertical') === true);\n    assert(swiperStyles.transform === `matrix(1, 0, 0, 1, 0, -${height})`);\n    await delay(interval + wrapper.node.duration);\n    assert(swiperStyles.transform === `matrix(1, 0, 0, 1, 0, -${height * 2})`);\n  });",
            "file": "swiper.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should has previous margin",
            "suites": [
                "Swiper"
            ],
            "updatePoint": {
                "line": 125,
                "column": 32
            },
            "line": 125,
            "code": "  it('should has previous margin', async () => {\n    const previousMargin = 10;\n    const app = /*#__PURE__*/React.createElement(Swiper, {\n      previousMargin: `${previousMargin}px`\n    }, /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })));\n    const wrapper = await mount(app, scratch);\n    const swiper = wrapper.find('.swiper-container');\n    const swiperStyles = window.getComputedStyle(swiper);\n    assert(swiperStyles.marginLeft === `${previousMargin}px`);\n  });",
            "file": "swiper.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should display multi items within screen width",
            "suites": [
                "Swiper"
            ],
            "updatePoint": {
                "line": 141,
                "column": 52
            },
            "line": 141,
            "code": "  it('should display multi items within screen width', async () => {\n    const app = /*#__PURE__*/React.createElement(Swiper, {\n      displayMultipleItems: 2\n    }, /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: itemStyle\n    })));\n    const wrapper = await mount(app, scratch);\n    const swiper = wrapper.find('.swiper-wrapper');\n    const {\n      width\n    } = swiper.getBoundingClientRect();\n    const item = wrapper.find('taro-swiper-item-core');\n    assert(item.style.width === `${width / 2}px`);\n  });",
            "file": "swiper.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "events",
            "suites": [
                "Swiper"
            ],
            "updatePoint": {
                "line": 159,
                "column": 12
            },
            "line": 159,
            "code": "  it('events', async () => {\n    const onChange = sinon.spy();\n    const onAnimationFinish = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(Swiper, {\n      onChange: e => onChange(e.detail),\n      onAnimationFinish: e => onAnimationFinish(e.detail)\n    }, /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, itemStyle, {\n        background: 'green'\n      })\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, itemStyle, {\n        background: 'yellow'\n      })\n    })), /*#__PURE__*/React.createElement(SwiperItem, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: Object.assign({}, itemStyle, {\n        background: 'green'\n      })\n    })));\n    const wrapper = await mount(app, scratch);\n    await wrapper.setProps({\n      current: 1\n    });\n    await delay(wrapper.node.duration);\n    assert(onChange.calledOnceWith({\n      current: 1,\n      source: ''\n    }));\n    assert(onAnimationFinish.calledOnceWith({\n      current: 1,\n      source: ''\n    }));\n  });",
            "file": "swiper.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Switch"
            ],
            "updatePoint": {
                "line": 22,
                "column": 11
            },
            "line": 22,
            "code": "  it('props', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Switch, {\n      checked: true\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    const input = wrapper.find('input');\n    const inputStyle = window.getComputedStyle(input);\n    assert(node.checked === true);\n    assert(node.value === true);\n    assert(input.className === 'weui-switch');\n    assert(inputStyle.borderColor === 'rgb(4, 190, 2)');\n    assert(inputStyle.backgroundColor === 'rgb(4, 190, 2)');\n    const color = 'rgb(255, 0, 0)';\n    await wrapper.setProps({\n      type: 'checkbox',\n      color\n    });\n    assert(input.className === 'weui-checkbox');\n    assert(inputStyle.backgroundColor === color);\n  });",
            "file": "switch.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "events",
            "suites": [
                "Switch"
            ],
            "updatePoint": {
                "line": 44,
                "column": 12
            },
            "line": 44,
            "code": "  it('events', async () => {\n    const onChange = sinon.spy();\n    const {\n      node,\n      find\n    } = await mount( /*#__PURE__*/React.createElement(Switch, {\n      onChange: onChange\n    }), scratch);\n    const input = find('input');\n    assert(node.checked === false);\n    assert(node.value === false);\n    simulant.fire(input, 'click');\n    assert(node.value === true);\n    assert(onChange.callCount === 1);\n    assert(onChange.firstCall.args[0].detail.value === true);\n  });",
            "file": "switch.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Text"
            ],
            "updatePoint": {
                "line": 20,
                "column": 11
            },
            "line": 20,
            "code": "  it('props', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Text, null), scratch);\n    const {\n      node\n    } = wrapper;\n    const computedStyle = window.getComputedStyle(node);\n    assert(computedStyle.userSelect === 'none');\n    await wrapper.setProps({\n      selectable: true,\n      className: 'foo'\n    });\n    assert(computedStyle.userSelect === 'text');\n    assert(node.classList.contains('taro-text__selectable') === true);\n    assert(node.classList.contains('foo') === true);\n    assert(node.classList.contains('hydrated') === true);\n  });",
            "file": "text.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "slot",
            "suites": [
                "Text"
            ],
            "updatePoint": {
                "line": 36,
                "column": 10
            },
            "line": 36,
            "code": "  it('slot', async () => {\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(Text, null, \"Taro Next\"), scratch);\n    assert(node.textContent === 'Taro Next');\n  });",
            "file": "text.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Textarea"
            ],
            "updatePoint": {
                "line": 22,
                "column": 11
            },
            "line": 22,
            "code": "  it('props', async () => {\n    const onFocus = sinon.spy();\n    const wrapper = await mount( /*#__PURE__*/React.createElement(Textarea, {\n      autoFocus: true,\n      onFocus: onFocus\n    }), scratch);\n    const {\n      node\n    } = wrapper;\n    const textarea = wrapper.find('textarea');\n    assert(node.value === '');\n    assert(textarea.value === '');\n    assert(textarea.getAttribute('placeholder') === null);\n    assert(textarea.getAttribute('maxlength') === '140');\n    assert(textarea.getAttribute('rows') === null);\n    const value = 'taro';\n    const placeholder = 'type sth...';\n    const maxlength = 10;\n    const autoHeight = true;\n    await wrapper.setProps({\n      value,\n      placeholder,\n      maxlength,\n      autoHeight\n    });\n    assert(node.value === value);\n    assert(textarea.value === value);\n    assert(textarea.getAttribute('placeholder') === placeholder);\n    assert(textarea.getAttribute('maxlength') === String(maxlength));\n    assert(onFocus.callCount === 1);\n    assert(textarea.getAttribute('rows') === '1');\n  });",
            "file": "textarea.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "events",
            "suites": [
                "Textarea"
            ],
            "updatePoint": {
                "line": 54,
                "column": 12
            },
            "line": 54,
            "code": "  it('events', async () => {\n    const onInput = sinon.spy();\n    const onFocus = sinon.spy();\n    const onBlur = sinon.spy();\n    const onLineChange = sinon.spy();\n    let value = 'taro';\n    const app = /*#__PURE__*/React.createElement(Textarea, {\n      value: value,\n      onInput: e => onInput(e.detail.value),\n      onFocus: e => onFocus(e.detail.value),\n      onBlur: e => onBlur(e.detail.value),\n      onLineChange: e => onLineChange(e.detail.value)\n    });\n    const wrapper = await mount(app, scratch);\n    const textarea = wrapper.find('textarea');\n    textarea.focus();\n    assert(onFocus.calledOnceWith(value) === true);\n    value = 'taroa';\n    textarea.value = value;\n    simulant.fire(textarea, 'input', {\n      data: 'a',\n      inputType: 'insertText'\n    });\n    assert(onInput.calledOnceWith(value) === true);\n    textarea.blur();\n    assert(onBlur.calledOnceWith(value) === true);\n    value = 'tarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotarotaro';\n    textarea.value = value;\n    simulant.fire(textarea, 'input', {\n      data: 'a',\n      inputType: 'insertText'\n    });\n    assert(onLineChange.callCount === 1);\n  });",
            "file": "textarea.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "MovableArea",
            "suites": [
                "unimplemented"
            ],
            "updatePoint": {
                "line": 73,
                "column": 17
            },
            "line": 73,
            "code": "  it('MovableArea', async () => {\n    await testComponent(MovableArea);\n  });",
            "file": "unimplemented.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "MovableView",
            "suites": [
                "unimplemented"
            ],
            "updatePoint": {
                "line": 76,
                "column": 17
            },
            "line": 76,
            "code": "  it('MovableView', async () => {\n    await testComponent(MovableView);\n  });",
            "file": "unimplemented.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "PickerViewColumn",
            "suites": [
                "unimplemented"
            ],
            "updatePoint": {
                "line": 79,
                "column": 22
            },
            "line": 79,
            "code": "  it('PickerViewColumn', async () => {\n    await testComponent(PickerViewColumn);\n  });",
            "file": "unimplemented.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "PickerView",
            "suites": [
                "unimplemented"
            ],
            "updatePoint": {
                "line": 82,
                "column": 16
            },
            "line": 82,
            "code": "  it('PickerView', async () => {\n    await testComponent(PickerView);\n  });",
            "file": "unimplemented.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "OpenData",
            "suites": [
                "unimplemented"
            ],
            "updatePoint": {
                "line": 85,
                "column": 14
            },
            "line": 85,
            "code": "  it('OpenData', async () => {\n    await testComponent(OpenData);\n  });",
            "file": "unimplemented.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "Camera",
            "suites": [
                "unimplemented"
            ],
            "updatePoint": {
                "line": 88,
                "column": 12
            },
            "line": 88,
            "code": "  it('Camera', async () => {\n    await testComponent(Camera);\n  });",
            "file": "unimplemented.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "props",
            "suites": [
                "Video"
            ],
            "updatePoint": {
                "line": 23,
                "column": 11
            },
            "line": 23,
            "code": "  it('props', async () => {\n    const app = /*#__PURE__*/React.createElement(Video, {\n      src: \"http://storage.jd.com/cjj-pub-images/bear.mp4\",\n      controls: false,\n      onError: ev => {\n        // puppeteer 1.20.0 依赖的 Chromium 貌似由于同源策略播放不了视频\n        // 停止冒泡，防止 Jasmine 监听到 onError 事件导致用例直接失败\n        ev.stopPropagation();\n      }\n    });\n    const wrapper = await mount(app, scratch);\n    const video = wrapper.find('video');\n    const centerPlayBtnCls = '.taro-video-cover-play-button';\n    const controlsCls = '.taro-video-controls';\n    assert(video instanceof HTMLVideoElement);\n    assert(video.style['object-fit'] === 'contain');\n    assert(video.autoplay === false);\n    assert(video.loop === false);\n    assert(video.muted === false);\n    assert(video.poster === '');\n    assert(wrapper.find(controlsCls) === null);\n    assert(wrapper.find(centerPlayBtnCls) instanceof HTMLDivElement);\n    const objectFit = 'fill';\n    const poster = 'http://misc.aotu.io/booxood/mobile-video/cover_900x500.jpg';\n    await wrapper.setProps({\n      objectFit,\n      autoplay: true,\n      loop: true,\n      muted: true,\n      control: true,\n      poster,\n      showCenterPlayBtn: false\n    });\n    assert(video.style['object-fit'] === objectFit);\n    assert(video.autoplay === true);\n    assert(video.loop === true);\n    assert(video.muted === true);\n    assert(video.poster === '');\n    assert(wrapper.find(centerPlayBtnCls) === null);\n    await wrapper.setProps({\n      controls: true\n    });\n    assert(wrapper.find(controlsCls) instanceof HTMLDivElement);\n    assert(video.poster === poster);\n  });",
            "file": "video.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should set initial time",
            "suites": [
                "Video"
            ],
            "updatePoint": {
                "line": 68,
                "column": 29
            },
            "line": 68,
            "code": "  it('should set initial time', async () => {\n    const initialTime = 10;\n    const app = /*#__PURE__*/React.createElement(Video, {\n      src: \"http://storage.jd.com/cjj-pub-images/bear.mp4\",\n      initialTime: initialTime,\n      onError: ev => ev.stopPropagation()\n    });\n    const wrapper = await mount(app, scratch);\n    const video = wrapper.find('video');\n    assert(video.currentTime === initialTime);\n  });",
            "file": "video.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should toggle full screen",
            "suites": [
                "Video"
            ],
            "updatePoint": {
                "line": 79,
                "column": 31
            },
            "line": 79,
            "code": "  it('should toggle full screen', async () => {\n    const onFullScreenChange = sinon.spy();\n    const app = /*#__PURE__*/React.createElement(Video, {\n      src: \"http://storage.jd.com/cjj-pub-images/bear.mp4\",\n      onFullScreenChange: e => onFullScreenChange(e.detail),\n      onError: ev => ev.stopPropagation()\n    });\n    const wrapper = await mount(app, scratch);\n    const {\n      node\n    } = wrapper;\n    const video = wrapper.find('video.taro-video-video');\n    const fullscreenBtn = wrapper.find('.taro-video-fullscreen');\n    video.requestFullscreen = sinon.fake();\n    assert(fullscreenBtn.classList.contains('taro-nodevideo-type-fullscreen') === false);\n    fullscreenBtn.click();\n    await waitForChange(node);\n    assert(fullscreenBtn.classList.contains('taro-video-type-fullscreen') === true);\n    assert(onFullScreenChange.calledOnceWith({\n      fullScreen: true,\n      direction: 'vertical'\n    }));\n    assert(video.requestFullscreen.calledOnceWith({\n      navigationUI: 'show'\n    }));\n    fullscreenBtn.click();\n    await waitForChange(node);\n    assert(fullscreenBtn.classList.contains('taro-video-type-fullscreen') === false);\n    assert(onFullScreenChange.callCount === 2);\n    assert(onFullScreenChange.calledWith({\n      fullScreen: false,\n      direction: 'vertical'\n    }));\n    assert(video.requestFullscreen.callCount === 1);\n  });",
            "file": "video.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should play",
            "suites": [
                "Video"
            ],
            "updatePoint": {
                "line": 114,
                "column": 17
            },
            "line": 114,
            "code": "  it('should play', async () => {\n    const ref = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Video, {\n      ref: ref,\n      src: \"http://storage.jd.com/cjj-pub-images/bear.mp4\",\n      onError: ev => ev.stopPropagation()\n    });\n    const wrapper = await mount(app, scratch);\n    const video = wrapper.find('video.taro-video-video');\n    video.play = sinon.fake();\n    ref.current.play();\n    const {\n      node\n    } = wrapper;\n    await waitForChange(node);\n    assert(video.play.callCount === 1);\n  });",
            "file": "video.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should pause",
            "suites": [
                "Video"
            ],
            "updatePoint": {
                "line": 131,
                "column": 18
            },
            "line": 131,
            "code": "  it('should pause', async () => {\n    const ref = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Video, {\n      ref: ref,\n      src: \"http://storage.jd.com/cjj-pub-images/bear.mp4\",\n      onError: ev => ev.stopPropagation()\n    });\n    const wrapper = await mount(app, scratch);\n    const video = wrapper.find('video.taro-video-video');\n    video.pause = sinon.fake();\n    ref.current.pause();\n    const {\n      node\n    } = wrapper;\n    await waitForChange(node);\n    assert(video.pause.callCount === 1);\n  });",
            "file": "video.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should seek and stop",
            "suites": [
                "Video"
            ],
            "updatePoint": {
                "line": 148,
                "column": 26
            },
            "line": 148,
            "code": "  it('should seek and stop', async () => {\n    const ref = /*#__PURE__*/React.createRef();\n    const app = /*#__PURE__*/React.createElement(Video, {\n      ref: ref,\n      src: \"http://storage.jd.com/cjj-pub-images/bear.mp4\",\n      onError: ev => ev.stopPropagation()\n    });\n    const wrapper = await mount(app, scratch);\n    const video = wrapper.find('video.taro-video-video');\n    ref.current.seek(233);\n    const {\n      node\n    } = wrapper;\n    await waitForChange(node);\n    assert(video.currentTime === 233);\n    video.pause = sinon.fake();\n    ref.current.stop();\n    await waitForChange(node);\n    assert(video.currentTime === 0);\n    assert(video.pause.callCount === 1);\n  });",
            "file": "video.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should be controlled by bar",
            "suites": [
                "Video"
            ],
            "updatePoint": {
                "line": 169,
                "column": 33
            },
            "line": 169,
            "code": "  it('should be controlled by bar', async () => {\n    const app = /*#__PURE__*/React.createElement(Video, {\n      src: \"http://storage.jd.com/cjj-pub-images/bear.mp4\",\n      onError: ev => ev.stopPropagation()\n    });\n    const wrapper = await mount(app, scratch);\n    const controlBar = wrapper.find('.taro-video-controls');\n    let currentTime = wrapper.find('.taro-video-current-time');\n    let progress = wrapper.find('.taro-video-progress-container');\n    let duration = wrapper.find('.taro-video-duration');\n    let playBtn = wrapper.find('.taro-video-control-button-play');\n    let muteBtn = wrapper.find('.taro-video-mute');\n    let danmuBtn = wrapper.find('.taro-video-danmu-button');\n    let fullscreenBtn = wrapper.find('.taro-video-fullscreen');\n    assert(currentTime instanceof HTMLDivElement);\n    assert(progress instanceof HTMLDivElement);\n    assert(duration instanceof HTMLDivElement);\n    assert(fullscreenBtn instanceof HTMLDivElement);\n    assert(playBtn instanceof HTMLDivElement);\n    assert(muteBtn === null);\n    assert(danmuBtn === null);\n    const video = wrapper.find('video.taro-video-video');\n    video.play = sinon.fake();\n    const {\n      node\n    } = wrapper;\n    playBtn.click();\n    await waitForChange(node);\n    assert(video.play.callCount === 1);\n    await wrapper.setProps({\n      showProgress: false,\n      showFullscreenBtn: false,\n      showPlayBtn: false,\n      showMuteBtn: true,\n      danmuBtn: true\n    });\n    await waitForChange(controlBar);\n    currentTime = wrapper.find('.taro-video-current-time');\n    progress = wrapper.find('.taro-video-progress-container');\n    duration = wrapper.find('.taro-video-duration');\n    playBtn = wrapper.find('.taro-video-control-button-play');\n    muteBtn = wrapper.find('.taro-video-mute');\n    danmuBtn = wrapper.find('.taro-video-danmu-button');\n    fullscreenBtn = wrapper.find('.taro-video-fullscreen');\n    assert(currentTime === null);\n    assert(progress === null);\n    assert(duration === null);\n    assert(fullscreenBtn === null);\n    assert(playBtn === null);\n    assert(muteBtn instanceof HTMLDivElement);\n    assert(danmuBtn instanceof HTMLDivElement);\n  });",
            "file": "video.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "danmu",
            "suites": [
                "Video"
            ],
            "updatePoint": {
                "line": 221,
                "column": 11
            },
            "line": 221,
            "code": "  it('danmu', async () => {\n    const danmuList = [{\n      text: '第 1s 出现的弹幕',\n      color: 'rgb(255, 0, 0)',\n      time: 1\n    }, {\n      text: '第 3s 出现的弹幕',\n      color: 'rgb(255, 0, 255)',\n      time: 3\n    }];\n    const app = /*#__PURE__*/React.createElement(Video, {\n      src: \"http://storage.jd.com/cjj-pub-images/bear.mp4\",\n      enableDanmu: true,\n      danmuList: danmuList,\n      onError: ev => ev.stopPropagation()\n    });\n    const wrapper = await mount(app, scratch);\n    const danmu = wrapper.find('taro-video-danmu');\n    danmu.tick(2);\n    await waitForChange(danmu);\n    assert(danmu.children.length === 1);\n    assert(danmu.children[0].textContent === danmuList[0].text);\n    assert(danmu.children[0].style.color === danmuList[0].color);\n    danmu.tick(4);\n    await waitForChange(danmu);\n    assert(danmu.children.length === 2);\n    assert(danmu.children[1].textContent === danmuList[1].text);\n    assert(danmu.children[1].style.color === danmuList[1].color);\n  });",
            "file": "video.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "default props",
            "suites": [
                "View"
            ],
            "updatePoint": {
                "line": 23,
                "column": 19
            },
            "line": 23,
            "code": "  it('default props', async () => {\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(View, null), scratch);\n    assert(node.hoverClass === undefined);\n    assert(node.hoverStartTime === 50);\n    assert(node.hoverStayTime === 400);\n  });",
            "file": "view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "slot",
            "suites": [
                "View"
            ],
            "updatePoint": {
                "line": 31,
                "column": 10
            },
            "line": 31,
            "code": "  it('slot', async () => {\n    const app = /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(\"div\", null), /*#__PURE__*/React.createElement(\"div\", null), \"i m div\");\n    const {\n      node\n    } = await mount(app, scratch);\n    assert(node.textContent === 'i m div');\n  });",
            "file": "view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should update props successfully",
            "suites": [
                "View"
            ],
            "updatePoint": {
                "line": 38,
                "column": 38
            },
            "line": 38,
            "code": "  it('should update props successfully', async () => {\n    let hoverClass = 'hover';\n    let hoverStartTime = 100;\n    let hoverStayTime = 300;\n    const app = /*#__PURE__*/React.createElement(View, {\n      hoverClass: hoverClass,\n      hoverStartTime: hoverStartTime,\n      hoverStayTime: hoverStayTime\n    });\n    const wrapper = await mount(app, scratch);\n    const {\n      node\n    } = wrapper;\n    assert(node.hoverClass === hoverClass);\n    assert(node.hoverStartTime === hoverStartTime);\n    assert(node.hoverStayTime === hoverStayTime);\n    hoverClass = 'active';\n    hoverStartTime = 200;\n    hoverStayTime = 600;\n    await wrapper.setProps({\n      hoverClass,\n      hoverStartTime,\n      hoverStayTime\n    });\n    assert(node.hoverClass === hoverClass);\n    assert(node.hoverStartTime === hoverStartTime);\n    assert(node.hoverStayTime === hoverStayTime);\n  });",
            "file": "view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should hover perform correctly",
            "suites": [
                "View"
            ],
            "updatePoint": {
                "line": 66,
                "column": 36
            },
            "line": 66,
            "code": "  it('should hover perform correctly', async () => {\n    const hoverClass = 'hover';\n    const hoverStartTime = 50;\n    const hoverStayTime = 400;\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(View, {\n      hoverClass: hoverClass\n    }), scratch);\n    simulant.fire(node, 'touchstart');\n    await delay(hoverStartTime + 30);\n    assert(node.classList.contains(hoverClass) === true);\n    simulant.fire(node, 'touchend');\n    await delay(hoverStayTime - 30);\n    assert(node.classList.contains(hoverClass) === true);\n    await delay(100);\n    assert(node.classList.contains(hoverClass) === false);\n  });",
            "file": "view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should trigger longpress",
            "suites": [
                "View"
            ],
            "updatePoint": {
                "line": 84,
                "column": 30
            },
            "line": 84,
            "code": "  it('should trigger longpress', async () => {\n    const onLongPressSpy = spy();\n    const {\n      node\n    } = await mount( /*#__PURE__*/React.createElement(View, {\n      onLongPress: onLongPressSpy\n    }), scratch);\n    simulant.fire(node, 'touchstart');\n    await delay(400);\n    assert(onLongPressSpy.calledOnce);\n  });",
            "file": "view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should show an iframe",
            "suites": [
                "WebView"
            ],
            "updatePoint": {
                "line": 23,
                "column": 27
            },
            "line": 23,
            "code": "  it('should show an iframe', async () => {\n    const wrapper = await mount( /*#__PURE__*/React.createElement(WebView, {\n      src: TARO\n    }), scratch);\n    const iframe = wrapper.find('iframe');\n    assert(iframe.src === TARO);\n  });",
            "file": "web-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "events",
            "suites": [
                "WebView"
            ],
            "updatePoint": {
                "line": 30,
                "column": 12
            },
            "line": 30,
            "code": "  it('events', async () => {\n    const onLoad = sinon.spy();\n    await mount( /*#__PURE__*/React.createElement(WebView, {\n      src: \"\",\n      onLoad: onLoad\n    }), scratch);\n    await delay(30);\n    assert(onLoad.callCount === 1);\n  });",
            "file": "web-view.spec.js",
            "skipped": false,
            "dir": "packages/taro-components/__tests__"
        },
        {
            "name": "should work with ID",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 13,
                "column": 25
            },
            "line": 13,
            "code": "  it('should work with ID', () => {\n    const $dom = Sizzle('#test');\n    expect($dom[0]).toBe(dom);\n  });",
            "file": "selectors.spec.js",
            "skipped": false,
            "dir": "packages/taro-extend/__tests__"
        },
        {
            "name": "should work with tagName",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 17,
                "column": 30
            },
            "line": 17,
            "code": "  it('should work with tagName', () => {\n    const $dom = Sizzle('main');\n    expect($dom[0]).toBe(dom);\n  });",
            "file": "selectors.spec.js",
            "skipped": false,
            "dir": "packages/taro-extend/__tests__"
        },
        {
            "name": "should work with className",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 21,
                "column": 32
            },
            "line": 21,
            "code": "  it('should work with className', () => {\n    const $dom = Sizzle('.test');\n    expect($dom[0]).toBe(dom);\n  });",
            "file": "selectors.spec.js",
            "skipped": false,
            "dir": "packages/taro-extend/__tests__"
        },
        {
            "name": "should work with >",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 25,
                "column": 24
            },
            "line": 25,
            "code": "  it('should work with >', () => {\n    // console.log(dom)\n    dom.innerHTML = '<view class=\"t1\" id=\"t1\"></view>'; // console.log(dom.childNodes)\n\n    const $dom = Sizzle('main > .t1');\n    expect($dom[0]).toBe(dom.firstChild);\n  });",
            "file": "selectors.spec.js",
            "skipped": false,
            "dir": "packages/taro-extend/__tests__"
        },
        {
            "name": "test unit",
            "suites": [
                "createAnimation"
            ],
            "updatePoint": {
                "line": 3,
                "column": 15
            },
            "line": 3,
            "code": "  it('test unit', () => {\n    const ani = createAnimation();\n    const {\n      rules,\n      transform\n    } = ani;\n    ani.left(10);\n    expect(rules[0]).toEqual('left: 10px');\n    ani.top('10');\n    expect(rules[1]).toEqual('top: 10px');\n    ani.right('10%');\n    expect(rules[2]).toEqual('right: 10%');\n    ani.translate(10, '10%');\n    expect(transform[1]).toEqual('translate(10px, 10%)');\n    ani.translateX('10');\n    expect(transform[2]).toEqual('translateX(10px)');\n    ani.translate3d('10', 10, '20%');\n    expect(transform[3]).toEqual('translate3d(10px, 10px, 20%)');\n  });",
            "file": "ui/animation.test.ts",
            "skipped": false,
            "dir": "packages/taro-h5/__tests__"
        },
        {
            "name": "nerv",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 3,
                "column": 10
            },
            "line": 3,
            "code": "  it('nerv', () => {\n    const request = '!request';\n    const result = app.call({\n      query: {\n        framework: 'nerv'\n      },\n      request\n    });\n    const method = 'createReactApp';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = App(${method}(component))\n`);\n  });",
            "file": "app.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "react",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 17,
                "column": 11
            },
            "line": 17,
            "code": "  it('react', () => {\n    const request = '!request';\n    const result = app.call({\n      query: {\n        framework: 'react'\n      },\n      request\n    });\n    const method = 'createReactApp';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = App(${method}(component))\n`);\n  });",
            "file": "app.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "vue",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 31,
                "column": 9
            },
            "line": 31,
            "code": "  it('vue', () => {\n    const request = '!request';\n    const result = app.call({\n      query: {\n        framework: 'vue'\n      },\n      request\n    });\n    const method = 'createVueApp';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = App(${method}(component))\n`);\n  });",
            "file": "app.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "prerender",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 45,
                "column": 15
            },
            "line": 45,
            "code": "  it('prerender', () => {\n    const request = '!request';\n    const result = app.call({\n      query: {\n        framework: 'vue',\n        prerender: true\n      },\n      request\n    });\n    const method = 'createVueApp';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = App(${method}(component))\n\nif (typeof PRERENDER !== 'undefined') {\n  global._prerender = inst\n}\n`);\n  });",
            "file": "app.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "nerv",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 6,
                "column": 10
            },
            "line": 6,
            "code": "  it('nerv', () => {\n    const request = '!request';\n    const name = '/page/test';\n    const result = pageLoader.call({\n      query: {\n        framework: 'nerv',\n        name\n      },\n      request\n    });\n    const method = 'createPageConfig';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = Page(${method}(component, '${name}'))\n`);\n  });",
            "file": "page.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "react",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 22,
                "column": 11
            },
            "line": 22,
            "code": "  it('react', () => {\n    const request = '!request';\n    const name = '/page/test';\n    const result = pageLoader.call({\n      query: {\n        framework: 'react',\n        name\n      },\n      request\n    });\n    const method = 'createPageConfig';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = Page(${method}(component, '${name}'))\n`);\n  });",
            "file": "page.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "vue",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 38,
                "column": 9
            },
            "line": 38,
            "code": "  it('vue', () => {\n    const request = '!request';\n    const name = '/page/test';\n    const resourcePath = 'resourcePath';\n    const result = pageLoader.call({\n      query: {\n        framework: 'vue',\n        name\n      },\n      request,\n      resourcePath\n    });\n    const method = 'createPageConfig';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${path.resolve(__dirname, '..', 'src', 'raw.js')}!${resourcePath}'\nvar inst = Page(${method}(component, '${name}'))\n`);\n  });",
            "file": "page.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "prerender",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 56,
                "column": 15
            },
            "line": 56,
            "code": "  it('prerender', () => {\n    const request = '!request';\n    const name = '/page/test';\n    const resourcePath = 'resourcePath';\n    const result = pageLoader.call({\n      query: {\n        framework: 'vue',\n        name,\n        prerender: true\n      },\n      request,\n      resourcePath\n    });\n    const method = 'createPageConfig';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${path.resolve(__dirname, '..', 'src', 'raw.js')}!${resourcePath}'\nvar inst = Page(${method}(component, '${name}'))\n\nif (typeof PRERENDER !== 'undefined') {\n  global._prerender = inst\n}\n`);\n  });",
            "file": "page.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in nerv.spec.ts:3\nRemove `.only` to restore test checks"
}