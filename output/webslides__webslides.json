{"repo":"webslides/WebSlides","url":"https://github.com/webslides/WebSlides","branch":"master","configs":[{"package":"webslides","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Candidate","suites":["Slide module"],"updatePoint":{"line":3,"column":17,"index":99},"line":3,"code":"  test('Candidate', () => {\n    const valid = document.createElement('section');\n    const invalid = document.createElement('p');\n    expect(Slide.isCandidate(valid)).toBe(true);\n    expect(Slide.isCandidate(invalid)).toBe(false);\n  });","file":"modules/slide.test.js","skipped":false,"dir":"test"},{"name":"Slides should have some properties","suites":["Slide module","Instance behaviour"],"updatePoint":{"line":28,"column":44,"index":922},"line":28,"code":"    test('Slides should have some properties', () => {\n      const slide = ws.slides[0];\n      expect(slide.el).toBeInstanceOf(Element);\n      expect(slide.el.id).toBe('section-1');\n      expect(slide.parent).toBeInstanceOf(Element);\n      expect(slide.parent.id).toBe('webslides');\n      expect(slide.i).toBe(0);\n    });","file":"modules/slide.test.js","skipped":false,"dir":"test"},{"name":"Slides should get a slide class and be hidden","suites":["Slide module","Instance behaviour"],"updatePoint":{"line":36,"column":55,"index":1255},"line":36,"code":"    test('Slides should get a slide class and be hidden', () => {\n      const slide = ws.slides[0];\n      expect(slide.el.classList.contains('slide')).toBe(true);\n      expect(slide.el.style.display).toBe('none');\n    });","file":"modules/slide.test.js","skipped":false,"dir":"test"},{"name":"Show/hide","suites":["Slide module","Instance behaviour"],"updatePoint":{"line":41,"column":19,"index":1441},"line":41,"code":"    test('Show/hide', () => {\n      const slide = ws.slides[0];\n      slide.show();\n      expect(slide.el.style.display).not.toBe('none');\n      expect(slide.el.classList.contains('current')).toBe(true);\n      slide.hide();\n      expect(slide.el.style.display).toBe('none');\n      expect(slide.el.classList.contains('current')).not.toBe(true);\n    });","file":"modules/slide.test.js","skipped":false,"dir":"test"},{"name":"Events","suites":["Slide module","Instance behaviour"],"updatePoint":{"line":50,"column":16,"index":1790},"line":50,"code":"    test('Events', () => {\n      const slide = ws.slides[0];\n      const leave = jest.fn();\n      const enter = jest.fn();\n      const enable = jest.fn();\n      const disable = jest.fn();\n      const show = jest.fn();\n      slide.el.addEventListener('dom:leave', leave);\n      slide.el.addEventListener('dom:enter', enter);\n      slide.el.addEventListener('slide:enable', enable);\n      slide.el.addEventListener('slide:disable', disable);\n      slide.el.addEventListener('slide:show', show);\n      expect(enter).not.toHaveBeenCalled();\n      expect(leave).not.toHaveBeenCalled();\n      expect(enable).not.toHaveBeenCalled();\n      expect(disable).not.toHaveBeenCalled();\n      expect(show).not.toHaveBeenCalled();\n      slide.enable();\n      expect(enter).not.toHaveBeenCalled();\n      expect(leave).not.toHaveBeenCalled();\n      expect(enable).toHaveBeenCalledTimes(1);\n      expect(disable).not.toHaveBeenCalled();\n      expect(show).not.toHaveBeenCalled();\n      enable.mockClear();\n      slide.disable();\n      expect(enter).not.toHaveBeenCalled();\n      expect(leave).not.toHaveBeenCalled();\n      expect(enable).not.toHaveBeenCalled();\n      expect(disable).toHaveBeenCalledTimes(1);\n      expect(show).not.toHaveBeenCalled();\n      disable.mockClear();\n      slide.moveAfterLast();\n      expect(enter).toHaveBeenCalledTimes(1);\n      expect(leave).toHaveBeenCalledTimes(1);\n      expect(enable).not.toHaveBeenCalled();\n      expect(disable).not.toHaveBeenCalled();\n      expect(show).not.toHaveBeenCalled();\n      enter.mockClear();\n      leave.mockClear();\n      slide.moveBeforeFirst();\n      expect(enter).toHaveBeenCalledTimes(1);\n      expect(leave).toHaveBeenCalledTimes(1);\n      expect(enable).not.toHaveBeenCalled();\n      expect(disable).not.toHaveBeenCalled();\n      expect(show).not.toHaveBeenCalled();\n      enter.mockClear();\n      leave.mockClear();\n      slide.show();\n      expect(show).toHaveBeenCalled();\n    });","file":"modules/slide.test.js","skipped":false,"dir":"test"},{"name":"Move","suites":["Slide module","Instance behaviour"],"updatePoint":{"line":100,"column":14,"index":3728},"line":100,"code":"    test('Move', () => {\n      const wsEl = document.getElementById('webslides');\n      const slide = ws.slides[0];\n      expect(wsEl.lastChild).not.toBe(slide.el);\n      slide.moveAfterLast();\n      expect(wsEl.lastChild).toBe(slide.el);\n      expect(wsEl.firstChild).not.toBe(slide.el);\n      slide.moveBeforeFirst();\n      expect(wsEl.firstChild).toBe(slide.el);\n    });","file":"modules/slide.test.js","skipped":false,"dir":"test"},{"name":"Get section from el","suites":["Slide module","Instance behaviour"],"updatePoint":{"line":110,"column":29,"index":4117},"line":110,"code":"    test('Get section from el', () => {\n      const wsEl = document.getElementById('webslides');\n      const el = ws.slides[3].el.firstChild;\n      const found = Slide.getSectionFromEl(el);\n      expect(found.section.id).toBe('section-4');\n      expect(found.i).toBe(4);\n      const notFound = Slide.getSectionFromEl(wsEl);\n      expect(notFound.section).toBeNull();\n      expect(notFound.i).toBeNull();\n    });","file":"modules/slide.test.js","skipped":false,"dir":"test"},{"name":"Should throw if no element is found with webslides id","suites":[],"updatePoint":{"line":17,"column":59,"index":608},"line":17,"code":"test('Should throw if no element is found with webslides id', () => {\n  document.body.innerHTML = '';\n  expect(() => {\n    ws.setAttribute('id', '');\n    new WebSlides();\n  }).toThrow('Couldn\\'t find the webslides container!');\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should have correct properties","suites":[],"updatePoint":{"line":24,"column":36,"index":817},"line":24,"code":"test('Should have correct properties', () => {\n  expect(webslides.isMoving).toBe(false);\n  expect(webslides.slides.length).toBe(20);\n  expect(webslides.currentSlideI_).toBe(0);\n  expect(webslides.currentSlide_).toBe(webslides.slides[0]);\n  expect(webslides.maxSlide_).toBe(20);\n  expect(webslides.isVertical).toBe(false);\n  expect(webslides.initialised).toBe(true);\n  expect(webslides.slides[0]).toBeInstanceOf(Slide); // Plugins\n\n  expect(webslides.plugins.autoslide).toBeDefined();\n  expect(webslides.plugins.clickNav).toBeDefined();\n  expect(webslides.plugins.grid).toBeDefined();\n  expect(webslides.plugins.hash).toBeDefined();\n  expect(webslides.plugins.keyboard).toBeDefined();\n  expect(webslides.plugins.nav).toBeDefined();\n  expect(webslides.plugins.scroll).toBeDefined();\n  expect(webslides.plugins.touch).toBeDefined();\n  expect(webslides.plugins.video).toBeDefined();\n  expect(webslides.plugins.youtube).toBeDefined();\n  expect(webslides.plugins.zoom).toBeDefined(); // Options\n\n  expect(webslides.options.autoslide).toBe(false);\n  expect(webslides.options.changeOnClick).toBe(false);\n  expect(webslides.options.loop).toBe(true);\n  expect(webslides.options.minWheelDelta).toBe(40);\n  expect(webslides.options.navigateOnScroll).toBe(true);\n  expect(webslides.options.scrollWait).toBe(450);\n  expect(webslides.options.slideOffset).toBe(50);\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should be able to define vertical WS","suites":[],"updatePoint":{"line":54,"column":42,"index":2177},"line":54,"code":"test('Should be able to define vertical WS', () => {\n  ws.classList.add('vertical');\n  webslides = new WebSlides();\n  expect(webslides.isVertical).toBe(true);\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should remove all elements that are not sections","suites":[],"updatePoint":{"line":59,"column":54,"index":2352},"line":59,"code":"test('Should remove all elements that are not sections', () => {\n  expect(document.getElementById('other')).toBeNull();\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Ready","suites":[],"updatePoint":{"line":62,"column":11,"index":2433},"line":62,"code":"test('Ready', () => {\n  // Already initialised\n  expect(document.documentElement.classList.contains('ws-ready')).toBe(true);\n  document.documentElement.classList.remove('ws-ready');\n  const listener = jest.fn();\n  ws.addEventListener('ws:init', listener);\n  webslides.initialised = false;\n  webslides.onInit_();\n  expect(listener).toHaveBeenCalled();\n  expect(document.documentElement.classList.contains('ws-ready')).toBe(true);\n  expect(webslides.initialised).toBe(true);\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should be possible to init with a different slide","suites":[],"updatePoint":{"line":74,"column":55,"index":2954},"line":74,"code":"test('Should be possible to init with a different slide', () => {\n  location.hash = '#slide=4';\n  webslides = new WebSlides();\n  expect(webslides.currentSlideI_).toBe(3);\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Shouldn't allow to go to invalid indexes","suites":["Go to slide"],"updatePoint":{"line":84,"column":49,"index":3286},"line":84,"code":"  test('Shouldn\\'t allow to go to invalid indexes', () => {\n    webslides.goToSlide(-4);\n    webslides.goToSlide(null);\n    webslides.goToSlide(99);\n    expect(webslides.scrollTransitionToSlide_).not.toHaveBeenCalled();\n    expect(webslides.transitionToSlide_).not.toHaveBeenCalled();\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Shouldn't allow to move if already moving","suites":["Go to slide"],"updatePoint":{"line":91,"column":50,"index":3578},"line":91,"code":"  test('Shouldn\\'t allow to move if already moving', () => {\n    webslides.isMoving = true;\n    webslides.goToSlide(2);\n    expect(webslides.scrollTransitionToSlide_).not.toHaveBeenCalled();\n    expect(webslides.transitionToSlide_).not.toHaveBeenCalled();\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Shouldn't allow to move if going to same slide","suites":["Go to slide"],"updatePoint":{"line":97,"column":55,"index":3845},"line":97,"code":"  test('Shouldn\\'t allow to move if going to same slide', () => {\n    webslides.goToSlide(0);\n    expect(webslides.scrollTransitionToSlide_).not.toHaveBeenCalled();\n    expect(webslides.transitionToSlide_).not.toHaveBeenCalled();\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Shouldn't use Scroll if first slide","suites":["Go to slide"],"updatePoint":{"line":102,"column":44,"index":4070},"line":102,"code":"  test('Shouldn\\'t use Scroll if first slide', () => {\n    webslides.isVertical = true;\n    webslides.currentSlide_ = null;\n    webslides.goToSlide(1);\n    expect(webslides.scrollTransitionToSlide_).not.toHaveBeenCalled();\n    expect(webslides.transitionToSlide_).toHaveBeenCalled();\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Shouldn't use Scroll if not vertical","suites":["Go to slide"],"updatePoint":{"line":109,"column":45,"index":4361},"line":109,"code":"  test('Shouldn\\'t use Scroll if not vertical', () => {\n    webslides.isVertical = false;\n    webslides.goToSlide(1);\n    expect(webslides.scrollTransitionToSlide_).not.toHaveBeenCalled();\n    expect(webslides.transitionToSlide_).toHaveBeenCalled();\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Shouldn't use Scroll if no touch or not enabled","suites":["Go to slide"],"updatePoint":{"line":115,"column":56,"index":4628},"line":115,"code":"  test('Shouldn\\'t use Scroll if no touch or not enabled', () => {\n    webslides.plugins.touch = null;\n    webslides.goToSlide(1);\n    expect(webslides.scrollTransitionToSlide_).not.toHaveBeenCalled();\n    expect(webslides.transitionToSlide_).toHaveBeenCalled();\n    webslides.transitionToSlide_.mockClear();\n    webslides.plugins.touch = {\n      isEnabled: false\n    };\n    webslides.goToSlide(2);\n    expect(webslides.scrollTransitionToSlide_).not.toHaveBeenCalled();\n    expect(webslides.transitionToSlide_).toHaveBeenCalled();\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Forward should be true if moving ahead or forced","suites":["Go to slide"],"updatePoint":{"line":128,"column":56,"index":5165},"line":128,"code":"  test('Forward should be true if moving ahead or forced', () => {\n    const getIsMovingForward = () => webslides.transitionToSlide_.mock.calls[0][0];\n\n    webslides.goToSlide(2);\n    expect(getIsMovingForward()).toBe(true);\n    webslides.transitionToSlide_.mockClear(); // Going back\n\n    webslides.goToSlide(1);\n    expect(getIsMovingForward()).toBe(false);\n    webslides.transitionToSlide_.mockClear(); // Going forward but forced\n\n    webslides.goToSlide(3, false);\n    expect(getIsMovingForward()).toBe(false);\n    webslides.transitionToSlide_.mockClear();\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should pass correct arguments to transition to slide","suites":["Go to slide"],"updatePoint":{"line":143,"column":60,"index":5737},"line":143,"code":"  test('Should pass correct arguments to transition to slide', () => {\n    webslides.goToSlide(2);\n    const args = webslides.transitionToSlide_.mock.calls[0];\n    expect(args[1]).toBeInstanceOf(Slide);\n    expect(args[1]).toBe(webslides.slides[2]);\n    expect(args[2]).toBe(webslides.onSlideChange_);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should pass correct arguments to scroll to slide","suites":["Go to slide"],"updatePoint":{"line":150,"column":56,"index":6041},"line":150,"code":"  test('Should pass correct arguments to scroll to slide', () => {\n    webslides.isVertical = true;\n    webslides.goToSlide(2);\n    const args = webslides.scrollTransitionToSlide_.mock.calls[0];\n    expect(args[1]).toBeInstanceOf(Slide);\n    expect(args[1]).toBe(webslides.slides[2]);\n    expect(args[2]).toBe(webslides.onSlideChange_);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"After move","suites":["Go to slide"],"updatePoint":{"line":158,"column":18,"index":6346},"line":158,"code":"  test('After move', () => {\n    webslides.isVertical = true;\n    const mock = jest.fn();\n    const currentSlide = webslides.currentSlide_;\n    webslides.el.addEventListener('ws:slide-change', mock);\n    webslides.goToSlide(1);\n    expect(webslides.isMoving).toBe(true);\n    jest.runAllTimers();\n    expect(webslides.isMoving).toBe(false);\n    expect(webslides.currentSlide_).not.toBe(currentSlide);\n    expect(webslides.currentSlide_).toBe(webslides.slides[1]);\n    expect(webslides.currentSlideI_).toBe(1);\n    expect(currentSlide.el.style.display).toBe('none');\n    const mockEvent = mock.mock.calls[0][0].detail;\n    expect(mockEvent.slides).toBe(webslides.maxSlide_);\n    expect(mockEvent.currentSlide0).toBe(1);\n    expect(mockEvent.currentSlide).toBe(2);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Go next should go to the next slide","suites":["Go next/prev"],"updatePoint":{"line":181,"column":43,"index":7243},"line":181,"code":"  test('Go next should go to the next slide', () => {\n    webslides.goNext();\n    expect(webslides.goToSlide).toHaveBeenCalledWith(1, true);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Go prev should go to the previous slide","suites":["Go next/prev"],"updatePoint":{"line":185,"column":47,"index":7394},"line":185,"code":"  test('Go prev should go to the previous slide', () => {\n    webslides.currentSlideI_ = 2;\n    webslides.goPrev();\n    expect(webslides.goToSlide).toHaveBeenCalledWith(1, false);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should not be possible to move if loop is disabled and on edge","suites":["Go next/prev"],"updatePoint":{"line":190,"column":70,"index":7603},"line":190,"code":"  test('Should not be possible to move if loop is disabled and on edge', () => {\n    webslides.options.loop = false;\n    webslides.goPrev();\n    expect(webslides.goToSlide).not.toHaveBeenCalled();\n    webslides.currentSlideI_ = webslides.maxSlide_;\n    webslides.goNext();\n    expect(webslides.goToSlide).not.toHaveBeenCalled();\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"It should loop correctly","suites":["Go next/prev"],"updatePoint":{"line":198,"column":32,"index":7900},"line":198,"code":"  test('It should loop correctly', () => {\n    webslides.currentSlideI_ = webslides.maxSlide_ - 1;\n    webslides.goNext();\n    expect(webslides.goToSlide).toHaveBeenCalledWith(0, true);\n    webslides.goPrev();\n    expect(webslides.goToSlide).toHaveBeenCalledWith(19, false);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Overflow should be removed and resetted","suites":["Scroll to"],"updatePoint":{"line":207,"column":47,"index":8230},"line":207,"code":"  test('Overflow should be removed and resetted', () => {\n    webslides.scrollTransitionToSlide_(true, webslides.slides[1], () => {});\n    expect(webslides.el.style.overflow).toBe('hidden');\n    jest.runAllTimers();\n    expect(webslides.el.style.overflow).not.toBe('hidden');\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should move slide if not moving forward","suites":["Scroll to"],"updatePoint":{"line":213,"column":47,"index":8512},"line":213,"code":"  test('Should move slide if not moving forward', () => {\n    const getHTML = () => webslides.el.innerHTML;\n\n    expect(getHTML().indexOf('section-1\"')).toBeLessThan(getHTML().indexOf('section-20\"'));\n    webslides.scrollTransitionToSlide_(false, webslides.slides[19], () => {});\n    expect(getHTML().indexOf('section-20\"')).toBeLessThan(getHTML().indexOf('section-1\"'));\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should not move slide if moving forward","suites":["Scroll to"],"updatePoint":{"line":220,"column":47,"index":8890},"line":220,"code":"  test('Should not move slide if moving forward', () => {\n    const getHTML = () => webslides.el.innerHTML;\n\n    expect(getHTML().indexOf('section-1\"')).toBeLessThan(getHTML().indexOf('section-2\"'));\n    webslides.scrollTransitionToSlide_(true, webslides.slides[1], () => {});\n    expect(getHTML().indexOf('section-1\"')).toBeLessThan(getHTML().indexOf('section-2\"'));\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should call the callback once finished with the next slide","suites":["Scroll to"],"updatePoint":{"line":227,"column":66,"index":9283},"line":227,"code":"  test('Should call the callback once finished with the next slide', () => {\n    const cb = jest.fn();\n    webslides.scrollTransitionToSlide_(true, webslides.slides[1], cb);\n    expect(cb).not.toHaveBeenCalled();\n    jest.runAllTimers();\n    expect(cb).toHaveBeenCalledWith(webslides.slides[1]);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should move slide if not moving forward","suites":["Transition to"],"updatePoint":{"line":236,"column":47,"index":9604},"line":236,"code":"  test('Should move slide if not moving forward', () => {\n    const getHTML = () => webslides.el.innerHTML;\n\n    expect(getHTML().indexOf('section-1\"')).toBeLessThan(getHTML().indexOf('section-20\"'));\n    webslides.transitionToSlide_(false, webslides.slides[19], () => {});\n    expect(getHTML().indexOf('section-20\"')).toBeLessThan(getHTML().indexOf('section-1\"'));\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should move current slide to last if moving forward","suites":["Transition to"],"updatePoint":{"line":243,"column":59,"index":9988},"line":243,"code":"  test('Should move current slide to last if moving forward', () => {\n    const getHTML = () => webslides.el.innerHTML;\n\n    expect(getHTML().indexOf('section-1')).toBeLessThan(getHTML().indexOf('section-2'));\n    webslides.transitionToSlide_(true, webslides.slides[1], () => {});\n    expect(getHTML().indexOf('section-1\"')).toBeGreaterThan(getHTML().indexOf('section-20\"'));\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should slideInRight if touch and moving forward","suites":["Transition to"],"updatePoint":{"line":250,"column":55,"index":10366},"line":250,"code":"  test('Should slideInRight if touch and moving forward', () => {\n    const callback = jest.fn();\n    const nextSlideEl = webslides.slides[19].el;\n    webslides.initialised = true;\n    webslides.plugins.touch = {\n      isEnabled: true\n    };\n    webslides.transitionToSlide_(true, webslides.slides[19], callback);\n    expect(nextSlideEl.classList.contains('slideInRight')).toBe(true);\n    expect(callback).not.toBeCalled();\n    DOM.fireEvent(nextSlideEl, 'animationend');\n    expect(callback).toHaveBeenCalledWith(webslides.slides[19]);\n    expect(nextSlideEl.classList.contains('slideInRight')).toBe(false);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Should slideInLeft if touch and not moving forward","suites":["Transition to"],"updatePoint":{"line":264,"column":58,"index":10984},"line":264,"code":"  test('Should slideInLeft if touch and not moving forward', () => {\n    const callback = jest.fn();\n    const nextSlideEl = webslides.slides[1].el;\n    webslides.initialised = true;\n    webslides.plugins.touch = {\n      isEnabled: true\n    };\n    webslides.transitionToSlide_(false, webslides.slides[1], callback);\n    expect(nextSlideEl.classList.contains('slideInLeft')).toBe(true);\n    expect(callback).not.toBeCalled();\n    DOM.fireEvent(nextSlideEl, 'animationend');\n    expect(callback).toHaveBeenCalledWith(webslides.slides[1]);\n    expect(nextSlideEl.classList.contains('slideInLeft')).toBe(false);\n  });","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Enable/Disable","suites":["Transition to"],"updatePoint":{"line":279,"column":20,"index":11564},"line":279,"code":"test('Enable/Disable', () => {\n  expect(webslides.isDisabled()).toBe(false);\n  expect(webslides.el.classList.contains('disabled')).toBe(false);\n  webslides.disable();\n  expect(webslides.el.classList.contains('disabled')).toBe(true);\n  expect(webslides.isDisabled()).toBe(true);\n  webslides.enable();\n  expect(webslides.isDisabled()).toBe(false);\n  expect(webslides.el.classList.contains('disabled')).toBe(false);\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Fullscreen","suites":["Transition to"],"updatePoint":{"line":289,"column":16,"index":11977},"line":289,"code":"test('Fullscreen', () => {\n  // Mocking FullScreen API\n  document.fullscreen = false;\n  document.documentElement.requestFullscreen = jest.fn();\n  document.exitFullScreen = jest.fn();\n  expect(document.documentElement.requestFullscreen).not.toHaveBeenCalled();\n  webslides.fullscreen();\n  expect(document.documentElement.requestFullscreen).toHaveBeenCalled();\n  document.fullscreen = true;\n  expect(document.exitFullScreen).not.toHaveBeenCalled();\n  webslides.fullscreen();\n  expect(document.exitFullScreen).toHaveBeenCalled();\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Zoom","suites":["Transition to"],"updatePoint":{"line":302,"column":10,"index":12502},"line":302,"code":"test('Zoom', () => {\n  webslides.plugins.zoom = {\n    toggleZoom: jest.fn()\n  };\n  expect(webslides.plugins.zoom.toggleZoom).not.toHaveBeenCalled();\n  webslides.toggleZoom();\n  expect(webslides.plugins.zoom.toggleZoom).toHaveBeenCalled();\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"Plugin register","suites":["Transition to"],"updatePoint":{"line":310,"column":21,"index":12756},"line":310,"code":"test('Plugin register', () => {\n  const cto = jest.fn();\n\n  const Mock = function () {\n    cto();\n  };\n\n  WebSlides.registerPlugin('mock', Mock);\n  webslides = new WebSlides();\n  expect(cto).toHaveBeenCalled();\n  expect(webslides.plugins.mock).toBeDefined();\n});","file":"modules/webslides.test.js","skipped":false,"dir":"test"},{"name":"AutoSlide plugin","suites":[],"updatePoint":{"line":7,"column":22,"index":247},"line":7,"code":"test('AutoSlide plugin', () => {\n  const next = jest.fn();\n  const ws = document.getElementById('webslides');\n  const webslides = {\n    options: {\n      autoslide: 100\n    },\n    goNext: next,\n    el: ws\n  };\n  expect(next).not.toBeCalled();\n  new AutoSlide(webslides);\n  DOM.fireEvent(ws, 'ws:init'); // Wait until next execution\n\n  jest.runTimersToTime(101);\n  expect(next.mock.calls.length).toBe(1); // Wait until next execution\n\n  jest.runTimersToTime(101);\n  expect(next.mock.calls.length).toBe(2); // Pause on focus\n\n  document.getElementById('focusable').focus();\n  DOM.fireEvent(document.body, 'focus');\n  jest.runTimersToTime(101);\n  expect(next.mock.calls.length).toBe(2);\n});","file":"plugins/autoslide.test.js","skipped":false,"dir":"test"},{"name":"Click nav plugin","suites":[],"updatePoint":{"line":6,"column":22,"index":228},"line":6,"code":"test('Click nav plugin', () => {\n  const next = jest.fn();\n  const ws = document.getElementById('webslides');\n  const webslides = {\n    options: {\n      changeOnClick: true\n    },\n    goNext: next,\n    el: ws\n  };\n  expect(next).not.toBeCalled();\n  new ClickNav(webslides);\n  DOM.fireEvent(ws, 'click');\n  expect(next.mock.calls.length).toBe(1);\n});","file":"plugins/click-nav.test.js","skipped":false,"dir":"test"},{"name":"Keyboard plugin","suites":[],"updatePoint":{"line":21,"column":21,"index":642},"line":21,"code":"test('Keyboard plugin', () => {\n  const goto = jest.fn();\n  const next = jest.fn();\n  const prev = jest.fn();\n  const fullscreen = jest.fn();\n  const ws = document.getElementById('webslides');\n  let disabled = true;\n  const webslides = {\n    goToSlide: goto,\n    goNext: next,\n    goPrev: prev,\n    isVertical: false,\n    fullscreen: fullscreen,\n    isDisabled: () => disabled,\n    el: ws\n  };\n  const key = new Keyboard(webslides);\n  expect(goto).not.toBeCalled();\n  expect(next).not.toBeCalled();\n  expect(prev).not.toBeCalled();\n  simulateKeyEvent(document, Keys.AV_PAGE);\n  expect(next.mock.calls.length).toBe(0);\n  disabled = false;\n  simulateKeyEvent(document, Keys.AV_PAGE);\n  expect(next.mock.calls.length).toBe(1);\n  simulateKeyEvent(document, Keys.SPACE);\n  expect(next.mock.calls.length).toBe(2); // Shift + Space\n\n  simulateKeyEvent(document, Keys.SPACE, {\n    shiftKey: true\n  });\n  expect(next.mock.calls.length).toBe(2);\n  expect(prev.mock.calls.length).toBe(1);\n  simulateKeyEvent(document, Keys.RE_PAGE);\n  expect(prev.mock.calls.length).toBe(2); // Home - End\n\n  simulateKeyEvent(document, Keys.HOME);\n  expect(goto.mock.calls.length).toBe(1);\n  simulateKeyEvent(document, Keys.END);\n  expect(goto.mock.calls.length).toBe(2); // Arrow keys, only left right should increase\n\n  simulateKeyEvent(document, Keys.DOWN);\n  simulateKeyEvent(document, Keys.UP);\n  simulateKeyEvent(document, Keys.LEFT);\n  simulateKeyEvent(document, Keys.RIGHT);\n  expect(prev.mock.calls.length).toBe(3);\n  expect(next.mock.calls.length).toBe(3); // Arrow keys, only up down should increase\n\n  key.ws_.isVertical = true;\n  simulateKeyEvent(document, Keys.DOWN);\n  simulateKeyEvent(document, Keys.UP);\n  simulateKeyEvent(document, Keys.LEFT);\n  simulateKeyEvent(document, Keys.RIGHT);\n  expect(prev.mock.calls.length).toBe(4);\n  expect(next.mock.calls.length).toBe(4); // F, only trigger on when alone\n\n  simulateKeyEvent(document, Keys.F);\n  simulateKeyEvent(document, Keys.F, {\n    ctrlKey: true\n  });\n  simulateKeyEvent(document, Keys.F, {\n    metaKey: true\n  });\n  expect(fullscreen.mock.calls.length).toBe(1);\n});","file":"plugins/keyboard.test.js","skipped":false,"dir":"test"},{"name":"Navigation plugin","suites":[],"updatePoint":{"line":6,"column":23,"index":204},"line":6,"code":"test('Navigation plugin', () => {\n  const ws = document.getElementById('webslides');\n  const zoom = jest.fn();\n  const next = jest.fn();\n  const prev = jest.fn();\n  const webslides = {\n    el: ws,\n    goNext: next,\n    goPrev: prev,\n    toggleZoom: zoom,\n    options: {\n      showIndex: true\n    }\n  };\n  const fakeArrow = Navigation.createArrow('arrow', 'Test');\n  expect(fakeArrow.tagName).toBe('A');\n  expect(fakeArrow.title).toBe('Arrow Keys');\n  expect(fakeArrow.id).toBe('arrow');\n  expect(fakeArrow.textContent).toBe('Test');\n  const fakeCounter = Navigation.createCounter('counter', webslides);\n  expect(fakeCounter.tagName).toBe('SPAN');\n  expect(fakeCounter.childNodes.length).toBe(1);\n  expect(fakeCounter.childNodes[0].tagName).toBe('A');\n  expect(fakeCounter.childNodes[0].href).toBe('http://localhost/#');\n  expect(fakeCounter.childNodes[0].title).toBe('View all slides');\n  new Navigation(webslides);\n  const navElem = ws.querySelector('#navigation');\n  const counter = navElem.querySelector('#counter');\n  const nextElem = navElem.querySelector('#next');\n  const prevElem = navElem.querySelector('#previous');\n  expect(navElem).not.toBe(null);\n  expect(counter).not.toBe(null);\n  expect(nextElem).not.toBe(null);\n  expect(prevElem).not.toBe(null);\n  DOM.fireEvent(ws, 'ws:slide-change', {\n    slides: 3,\n    currentSlide0: 1,\n    currentSlide: 2\n  });\n  expect(counter.textContent).toBe('2 / 3');\n  expect(next.mock.calls.length).toBe(0);\n  expect(prev.mock.calls.length).toBe(0);\n  expect(zoom.mock.calls.length).toBe(0);\n  DOM.fireEvent(nextElem, 'click');\n  expect(next.mock.calls.length).toBe(1);\n  DOM.fireEvent(prevElem, 'click');\n  expect(prev.mock.calls.length).toBe(1);\n  DOM.fireEvent(counter, 'click');\n  expect(zoom.mock.calls.length).toBe(1);\n});","file":"plugins/navigation.test.js","skipped":false,"dir":"test"},{"name":"Scroll utility","suites":[],"updatePoint":{"line":16,"column":20,"index":475},"line":16,"code":"test('Scroll utility', () => {\n  // Forces mobile detection\n  window.navigator = {\n    userAgent: 'Android'\n  };\n  const ws = document.getElementById('webslides');\n  const next = jest.fn();\n  const prev = jest.fn();\n  let disabled = true;\n  const webslides = {\n    el: ws,\n    isDisabled: () => disabled,\n    isMoving: false,\n    isVertical: false,\n    goNext: next,\n    goPrev: prev,\n    options: {\n      navigateOnScroll: true,\n      scrollWait: 200,\n      minWheelDelta: 50\n    }\n  };\n  new Scroll(webslides);\n  fireEvent(ws, 'wheel', 300, 200);\n  expect(next).not.toBeCalled();\n  expect(prev).not.toBeCalled(); // Wait until next execution\n\n  jest.runTimersToTime(201);\n  expect(next.mock.calls.length).toBe(0);\n  expect(prev.mock.calls.length).toBe(0);\n  disabled = false;\n  fireEvent(ws, 'wheel', 300, 200);\n  jest.runTimersToTime(201);\n  expect(next.mock.calls.length).toBe(1);\n  expect(prev.mock.calls.length).toBe(0);\n  fireEvent(ws, 'wheel', -200, -300);\n  jest.runTimersToTime(201);\n  expect(next.mock.calls.length).toBe(1);\n  expect(prev.mock.calls.length).toBe(1);\n});","file":"plugins/scroll.test.js","skipped":false,"dir":"test"},{"name":"Touch utility","suites":[],"updatePoint":{"line":15,"column":19,"index":445},"line":15,"code":"test('Touch utility', () => {\n  // Overrides userAgent to force mobile detection\n  Object.getOwnPropertyDescriptor(window.navigator.__proto__, 'userAgent');\n  Object.defineProperty(window.navigator, 'userAgent', {\n    get: () => 'Android'\n  });\n  const ws = document.getElementById('webslides');\n  const next = jest.fn();\n  const prev = jest.fn();\n  const zoom = jest.fn();\n  let disabled = true;\n  const webslides = {\n    el: ws,\n    isDisabled: () => disabled,\n    isMoving: false,\n    isVertical: false,\n    goNext: next,\n    goPrev: prev,\n    toggleZoom: zoom,\n    options: {\n      slideOffset: 100\n    }\n  };\n  const touch = new Touch(webslides);\n  touch.onStart_(getEvent('touchstart', 200, 200, [1]));\n  touch.onMove_(getEvent('touchstart', 200, 400, [1]));\n  touch.onStop_(getEvent('touchstart', 200, 200, [1]));\n  expect(next).not.toBeCalled();\n  expect(prev).not.toBeCalled();\n  expect(zoom).not.toBeCalled();\n  disabled = false;\n  touch.onStart_(getEvent('touchstart', 800, 200, [1]));\n  touch.onMove_(getEvent('touchstart', 400, 400, [1]));\n  touch.onStop_(getEvent('touchstart', 400, 200, [1]));\n  expect(next.mock.calls.length).toBe(1);\n  expect(prev.mock.calls.length).toBe(0);\n  expect(zoom.mock.calls.length).toBe(0);\n  touch.onStart_(getEvent('touchstart', 200, 200, [1]));\n  touch.onMove_(getEvent('touchstart', 400, 200, [1]));\n  touch.onStop_(getEvent('touchstart', 400, 200, [1]));\n  expect(next.mock.calls.length).toBe(1);\n  expect(prev.mock.calls.length).toBe(1);\n  expect(zoom.mock.calls.length).toBe(0);\n  touch.onStart_(getEvent('touchstart', 200, 200, [{\n    clientX: 100,\n    clientY: 100\n  }, {\n    clientX: 400,\n    clientY: 400\n  }]));\n  touch.onMove_(getEvent('touchstart', 400, 200, [{\n    clientX: 200,\n    clientY: 200\n  }, {\n    clientX: 300,\n    clientY: 300\n  }]));\n  touch.onStop_(getEvent('touchstart', 400, 200, [{\n    clientX: 200,\n    clientY: 200\n  }, {\n    clientX: 300,\n    clientY: 300\n  }]));\n  expect(next.mock.calls.length).toBe(1);\n  expect(prev.mock.calls.length).toBe(1);\n  expect(zoom.mock.calls.length).toBe(1);\n});","file":"plugins/touch.test.js","skipped":false,"dir":"test"},{"name":"Video utility","suites":[],"updatePoint":{"line":7,"column":19,"index":312},"line":7,"code":"test('Video utility', () => {\n  const ws = document.getElementById('webslides');\n  const slides = ws.querySelectorAll('.slide');\n  const videos = ws.querySelectorAll('video');\n  const play = jest.fn();\n  const pause = jest.fn();\n  videos.forEach(video => {\n    video.play = play;\n    video.pause = pause;\n  });\n  const webslides = {\n    el: ws,\n    slides: []\n  };\n  slides.forEach(slide => webslides.slides.push({\n    el: slide\n  }));\n  expect(ws.querySelectorAll('video[autoplay]').length).toBe(5);\n  new Video(webslides);\n  expect(ws.querySelectorAll('video[autoplay]').length).toBe(0);\n  expect(pause.mock.calls.length).toBe(5);\n  webslides.slides.forEach(slide => {\n    DOM.fireEvent(slide.el, 'slide:enable', {\n      slide: slide\n    });\n    DOM.fireEvent(slide.el, 'slide:disable', {\n      slide: slide\n    });\n  });\n  expect(pause.mock.calls.length).toBe(10);\n});","file":"plugins/video.test.js","skipped":false,"dir":"test"},{"name":"YouTube utility","suites":[],"updatePoint":{"line":7,"column":21,"index":417},"line":7,"code":"test('YouTube utility', () => {\n  const ws = document.getElementById('webslides');\n  const slides = ws.querySelectorAll('.slide');\n  const play = jest.fn();\n  const pause = jest.fn();\n  const destroy = jest.fn();\n  const create = jest.fn();\n  const webslides = {\n    el: ws,\n    slides: []\n  };\n  slides.forEach(slide => webslides.slides.push({\n    el: slide\n  }));\n  window.YT = {\n    Player: function (a, b) {\n      return {\n        getIframe: () => {\n          const div = DOM.createNode('div');\n          div.innerHTML = `<iframe id=\"widget8\" \n                     src=\"https://www.youtube.com/embed/_m67JbGjWnc\" \n                     data-youtube-id=\"_m67JbGjWnc\" \n                     frameborder=\"0\" height=\"360\" width=\"640\"></iframe>`;\n          webslides.slides[0].el.appendChild(div);\n          return div.querySelector('iframe');\n        }\n      };\n    }\n  };\n  new YouTube(webslides);\n  expect(typeof window.onYouTubeIframeAPIReady).toBe('function');\n  const el = webslides.el.querySelector('[data-youtube]');\n  el.dataset.autoplay = true;\n  el.dataset.youtubeId = 'CQY3KUR3VzM';\n  window.onYouTubeIframeAPIReady();\n  const slide = {\n    slide: {\n      player: {\n        autoplay: true,\n        play: play,\n        pause: pause,\n        destroy: destroy,\n        create: create\n      }\n    }\n  };\n  DOM.fireEvent(webslides.slides[0].el, 'dom:enter', slide);\n  expect(play.mock.calls.length).toBe(0);\n  expect(pause.mock.calls.length).toBe(0);\n  expect(destroy.mock.calls.length).toBe(0);\n  expect(create.mock.calls.length).toBe(1);\n  DOM.fireEvent(webslides.slides[0].el, 'dom:leave', slide);\n  expect(play.mock.calls.length).toBe(0);\n  expect(pause.mock.calls.length).toBe(0);\n  expect(destroy.mock.calls.length).toBe(1);\n  expect(create.mock.calls.length).toBe(1);\n  DOM.fireEvent(webslides.slides[0].el, 'slide:enable', slide);\n  expect(play.mock.calls.length).toBe(1);\n  expect(pause.mock.calls.length).toBe(0);\n  expect(destroy.mock.calls.length).toBe(1);\n  expect(create.mock.calls.length).toBe(1);\n  DOM.fireEvent(webslides.slides[0].el, 'slide:disable', slide);\n  expect(play.mock.calls.length).toBe(1);\n  expect(pause.mock.calls.length).toBe(1);\n  expect(destroy.mock.calls.length).toBe(1);\n  expect(create.mock.calls.length).toBe(1);\n});","file":"plugins/youtube.test.js","skipped":false,"dir":"test"},{"name":"Zoom utility","suites":[],"updatePoint":{"line":19,"column":18,"index":632},"line":19,"code":"test('Zoom utility', () => {\n  const ws = document.getElementById('webslides');\n  const slides = ws.querySelectorAll('.slide');\n  const goto = jest.fn();\n  const enable = jest.fn();\n  const disable = jest.fn();\n  const webslides = {\n    el: ws,\n    slides: [],\n    goToSlide: goto,\n    enable: enable,\n    disable: disable,\n    options: {\n      showIndex: true\n    }\n  };\n  slides.forEach(slide => webslides.slides.push({\n    el: slide\n  }));\n  webslides.currentSlide_ = webslides.slides[0];\n  new Zoom(webslides);\n  const zws = document.querySelector('#webslides-zoomed');\n  const zoomSlides = zws.querySelectorAll('.slide');\n  expect(zws).not.toBe(null);\n  expect(zws.className).toMatch('disable');\n  expect(slides.length).toBe(zoomSlides.length);\n  expect(zws.childNodes[0].className).toBe('wrap');\n  expect(zws.childNodes[0].childNodes[0].className).toBe('grid');\n  simulateKeyEvent(document.body, 109);\n  expect(zws.className).not.toMatch('disable'); // Wait until next execution\n\n  jest.runTimersToTime(600);\n  expect(disable.mock.calls.length).toBe(1);\n  expect(enable.mock.calls.length).toBe(0);\n  expect(goto.mock.calls.length).toBe(0);\n  DOM.fireEvent(zws.querySelector('.zoom-layer'), 'click'); // Wait until next execution\n\n  jest.runTimersToTime(401);\n  expect(disable.mock.calls.length).toBe(1);\n  expect(enable.mock.calls.length).toBe(1);\n  expect(goto.mock.calls.length).toBe(1);\n});","file":"plugins/zoom.test.js","skipped":false,"dir":"test"},{"name":"Creates a node","suites":["Node creation"],"updatePoint":{"line":4,"column":22,"index":132},"line":4,"code":"  test('Creates a node', () => {\n    const node = DOM.createNode('p');\n    expect(node).toBeInstanceOf(Element);\n    expect(node.tagName).toBe('P');\n    expect(node.id).toBe('');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Should be possible to pass an id","suites":["Node creation"],"updatePoint":{"line":10,"column":40,"index":335},"line":10,"code":"  test('Should be possible to pass an id', () => {\n    const node = DOM.createNode('p', 'myId');\n    expect(node.id).toBe('myId');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Should be possible to pass text","suites":["Node creation"],"updatePoint":{"line":14,"column":39,"index":471},"line":14,"code":"  test('Should be possible to pass text', () => {\n    const node = DOM.createNode('p', 'id', 'foo');\n    expect(node.textContent).toBe('foo');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Only once called once","suites":["Once"],"updatePoint":{"line":34,"column":29,"index":954},"line":34,"code":"  test('Only once called once', () => {\n    const cb = jest.fn();\n    DOM.once(parent, 'click', cb);\n    simulant.fire(parent, 'click');\n    simulant.fire(parent, 'click');\n    simulant.fire(parent, 'click');\n    expect(cb).toHaveBeenCalledTimes(1);\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Callback doesn't run on bubbled event","suites":["Once"],"updatePoint":{"line":42,"column":46,"index":1227},"line":42,"code":"  test('Callback doesn\\'t run on bubbled event', () => {\n    const cb = jest.fn();\n    DOM.once(parent, 'click', cb);\n    simulant.fire(inner, 'click');\n    expect(cb).not.toHaveBeenCalled();\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Returns unprefixed first if available","suites":["Transition"],"updatePoint":{"line":50,"column":45,"index":1459},"line":50,"code":"  test('Returns unprefixed first if available', () => {\n    const fakeEl = {\n      style: {\n        transition: 'foo',\n        OTransition: 'foo',\n        MozTransition: 'foo',\n        WebkitTransition: 'foo'\n      }\n    };\n    expect(DOM.getTransitionEvent(fakeEl)).toBe('transitionend');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Prefixed Opera","suites":["Transition"],"updatePoint":{"line":61,"column":22,"index":1732},"line":61,"code":"  test('Prefixed Opera', () => {\n    const fakeEl = {\n      style: {\n        OTransition: 'foo'\n      }\n    };\n    expect(DOM.getTransitionEvent(fakeEl)).toBe('oTransitionEnd');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Prefixed Gecko","suites":["Transition"],"updatePoint":{"line":69,"column":22,"index":1916},"line":69,"code":"  test('Prefixed Gecko', () => {\n    const fakeEl = {\n      style: {\n        MozTransition: 'foo'\n      }\n    };\n    expect(DOM.getTransitionEvent(fakeEl)).toBe('transitionend');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Prefixed Webkit","suites":["Transition"],"updatePoint":{"line":77,"column":23,"index":2102},"line":77,"code":"  test('Prefixed Webkit', () => {\n    const fakeEl = {\n      style: {\n        WebkitTransition: 'foo'\n      }\n    };\n    expect(DOM.getTransitionEvent(fakeEl)).toBe('webkitTransitionEnd');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Retains value","suites":["Transition"],"updatePoint":{"line":85,"column":21,"index":2295},"line":85,"code":"  test('Retains value', () => {\n    const fakeEl = {\n      style: {\n        WebkitTransition: 'foo'\n      }\n    };\n    expect(DOM.getTransitionEvent(fakeEl)).toBe('webkitTransitionEnd');\n    expect(DOM.getTransitionEvent()).toBe('webkitTransitionEnd');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Returns unprefixed first if available","suites":["Animation"],"updatePoint":{"line":96,"column":45,"index":2612},"line":96,"code":"  test('Returns unprefixed first if available', () => {\n    const fakeEl = {\n      style: {\n        animation: 'foo',\n        OAnimation: 'foo',\n        MozAnimation: 'foo',\n        WebkitAnimation: 'foo'\n      }\n    };\n    expect(DOM.getAnimationEvent(fakeEl)).toBe('animationend');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Prefixed Opera","suites":["Animation"],"updatePoint":{"line":107,"column":22,"index":2879},"line":107,"code":"  test('Prefixed Opera', () => {\n    const fakeEl = {\n      style: {\n        OAnimation: 'foo'\n      }\n    };\n    expect(DOM.getAnimationEvent(fakeEl)).toBe('oAnimationEnd');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Prefixed Gecko","suites":["Animation"],"updatePoint":{"line":115,"column":22,"index":3060},"line":115,"code":"  test('Prefixed Gecko', () => {\n    const fakeEl = {\n      style: {\n        MozAnimation: 'foo'\n      }\n    };\n    expect(DOM.getAnimationEvent(fakeEl)).toBe('animationend');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Prefixed Webkit","suites":["Animation"],"updatePoint":{"line":123,"column":23,"index":3243},"line":123,"code":"  test('Prefixed Webkit', () => {\n    const fakeEl = {\n      style: {\n        WebkitAnimation: 'foo'\n      }\n    };\n    expect(DOM.getAnimationEvent(fakeEl)).toBe('webkitAnimationEnd');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Retains value","suites":["Animation"],"updatePoint":{"line":131,"column":21,"index":3433},"line":131,"code":"  test('Retains value', () => {\n    const fakeEl = {\n      style: {\n        WebkitAnimation: 'foo'\n      }\n    };\n    expect(DOM.getAnimationEvent(fakeEl)).toBe('webkitAnimationEnd');\n    expect(DOM.getAnimationEvent()).toBe('webkitAnimationEnd');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Show removes the display property","suites":["Show/hide"],"updatePoint":{"line":142,"column":41,"index":3741},"line":142,"code":"  test('Show removes the display property', () => {\n    const el = DOM.createNode('div');\n    el.style.display = 'flex';\n    expect(el.style.display).toBe('flex');\n    DOM.show(el);\n    expect(el.style.display).toBe('');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Hide adds display none","suites":["Show/hide"],"updatePoint":{"line":149,"column":30,"index":3957},"line":149,"code":"  test('Hide adds display none', () => {\n    const el = DOM.createNode('div');\n    expect(el.style.display).toBe('');\n    DOM.hide(el);\n    expect(el.style.display).toBe('none');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Is visible","suites":["Show/hide"],"updatePoint":{"line":155,"column":18,"index":4130},"line":155,"code":"  test('Is visible', () => {\n    // offsetParent doesn't work nice with JSDom\n    const el = DOM.createNode('div');\n    let offsetParent = document.body;\n    el.style.display = 'block';\n    document.body.appendChild(el);\n    Object.defineProperty(el, 'offsetParent', {\n      get: () => offsetParent\n    });\n    expect(DOM.isVisible(el)).toBe(true);\n    DOM.hide(el);\n    offsetParent = null;\n    expect(DOM.isVisible(el)).toBe(false);\n    document.body.removeChild(el);\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Event gets fired","suites":["Custom Event"],"updatePoint":{"line":172,"column":24,"index":4649},"line":172,"code":"  test('Event gets fired', () => {\n    const cb = jest.fn();\n    const el = DOM.createNode('div');\n    el.addEventListener('foo', cb);\n    DOM.fireEvent(el, 'foo');\n    expect(cb).toHaveBeenCalled();\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Event can pass data","suites":["Custom Event"],"updatePoint":{"line":179,"column":27,"index":4858},"line":179,"code":"  test('Event can pass data', () => {\n    const cb = jest.fn();\n    const el = DOM.createNode('div');\n    el.addEventListener('foo', cb);\n    DOM.fireEvent(el, 'foo', {\n      foo: 'bar'\n    });\n    expect(cb.mock.calls[0][0].detail.foo).toBe('bar');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Converts to array","suites":["To Array"],"updatePoint":{"line":190,"column":25,"index":5145},"line":190,"code":"  test('Converts to array', () => {\n    document.body.innerHTML = '<p></p><p></p><p></p><p></p><p></p>';\n    const paragraphs = document.querySelectorAll('p');\n    expect(paragraphs.length).toBe(5);\n    expect(paragraphs).not.toBeInstanceOf(Array);\n    expect(DOM.toArray(paragraphs)).toBeInstanceOf(Array);\n    expect(DOM.toArray(paragraphs).length).toBe(5);\n    document.body.innerHTML = '';\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Returns false if not focusable","suites":["Focusable Element"],"updatePoint":{"line":215,"column":38,"index":5974},"line":215,"code":"  test('Returns false if not focusable', () => {\n    document.getElementById('noContent').focus();\n    expect(DOM.isFocusableElement()).toBe(false);\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Returns true if focusable","suites":["Focusable Element"],"updatePoint":{"line":219,"column":33,"index":6124},"line":219,"code":"  test('Returns true if focusable', () => {\n    document.getElementById('noContent').focus();\n    expect(DOM.isFocusableElement()).toBe(false);\n    document.getElementById('input').focus();\n    expect(DOM.isFocusableElement()).toBe(true);\n    document.getElementById('noContent').focus();\n    expect(DOM.isFocusableElement()).toBe(false);\n    document.getElementById('select').focus();\n    expect(DOM.isFocusableElement()).toBe(true);\n    document.getElementById('noContent').focus();\n    expect(DOM.isFocusableElement()).toBe(false);\n    document.getElementById('textarea').focus();\n    expect(DOM.isFocusableElement()).toBe(true);\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Parses a css string to number","suites":["Parse size"],"updatePoint":{"line":235,"column":37,"index":6802},"line":235,"code":"  test('Parses a css string to number', () => {\n    expect(DOM.parseSize('10px')).toBe(10);\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Inserts node after target","suites":["After"],"updatePoint":{"line":246,"column":33,"index":7145},"line":246,"code":"  test('Inserts node after target', () => {\n    const content = document.getElementById('content');\n    const lastDiv = document.getElementById('3');\n    const secondDiv = document.getElementById('2');\n    DOM.after(secondDiv, lastDiv);\n    expect(content.innerHTML).toBe('<div id=\"1\"></div><div id=\"3\"></div><div id=\"2\"></div>');\n    DOM.after(secondDiv, lastDiv);\n    expect(content.innerHTML).toBe('<div id=\"1\"></div><div id=\"3\"></div><div id=\"2\"></div>');\n  });","file":"utils/dom.test.js","skipped":false,"dir":"test"},{"name":"Make sure it has not changed the slide","suites":["Hash utility"],"updatePoint":{"line":15,"column":46,"index":477},"line":15,"code":"  test('Make sure it has not changed the slide', () => {\n    expect(goto).not.toBeCalled();\n  });","file":"utils/hash.test.js","skipped":false,"dir":"test"},{"name":"Move to slide 1","suites":["Hash utility"],"updatePoint":{"line":19,"column":23,"index":575},"line":19,"code":"  test('Move to slide 1', () => {\n    expect(Hash.getSlideNumber()).toBe(0);\n    DOM.fireEvent(ws, 'ws:slide-change', {\n      slides: 3,\n      currentSlide0: 1,\n      currentSlide: 2\n    });\n    expect(Hash.getSlideNumber()).toBe(1);\n    expect(document.location.hash).toBe('#slide=2');\n    DOM.fireEvent(window, 'hashchange');\n    expect(goto.mock.calls.length).toBe(1);\n  });","file":"utils/hash.test.js","skipped":false,"dir":"test"},{"name":"Forces slide change","suites":["Hash utility"],"updatePoint":{"line":31,"column":27,"index":957},"line":31,"code":"  test('Forces slide change', () => {\n    Hash.setSlideNumber(5);\n    const state = history.state;\n    expect(state.slideI).toBe(4);\n  });","file":"utils/hash.test.js","skipped":false,"dir":"test"},{"name":"Wrong hash","suites":["Hash utility"],"updatePoint":{"line":36,"column":18,"index":1087},"line":36,"code":"  test('Wrong hash', () => {\n    document.location.hash = 'slide=NaN';\n    DOM.fireEvent(window, 'hashchange'); // It shouldn't be call.\n\n    expect(goto.mock.calls.length).toBe(1);\n    expect(Hash.getSlideNumber()).toBe(null);\n  });","file":"utils/hash.test.js","skipped":false,"dir":"test"},{"name":"Repeat slide change","suites":["Hash utility"],"updatePoint":{"line":43,"column":27,"index":1330},"line":43,"code":"  test('Repeat slide change', () => {\n    Hash.setSlideNumber(5);\n    let state = history.state;\n    expect(state.slideI).toBe(4);\n    Hash.setSlideNumber(5);\n    state = history.state;\n    expect(state.slideI).toBe(4);\n  });","file":"utils/hash.test.js","skipped":false,"dir":"test"},{"name":"Keys are present","suites":[],"updatePoint":{"line":2,"column":22,"index":67},"line":2,"code":"test('Keys are present', () => {\n  expect(Keys.ENTER).toBe(13);\n  expect(Keys.SPACE).toBe(32);\n  expect(Keys.RE_PAGE).toBe(33);\n  expect(Keys.AV_PAGE).toBe(34);\n  expect(Keys.END).toBe(35);\n  expect(Keys.HOME).toBe(36);\n  expect(Keys.LEFT).toBe(37);\n  expect(Keys.UP).toBe(38);\n  expect(Keys.RIGHT).toBe(39);\n  expect(Keys.DOWN).toBe(40);\n});","file":"utils/keys.test.js","skipped":false,"dir":"test"},{"name":"ScrollTo with defaults","suites":[],"updatePoint":{"line":10,"column":28,"index":271},"line":10,"code":"test('ScrollTo with defaults', () => {\n  const ws = document.getElementById('webslides');\n  scrollTo(100);\n  expect(ws.scrollTop).toBe(0);\n  jest.runTimersToTime(400);\n  expect(ws.scrollTop).toBeLessThan(100);\n  jest.runAllTimers();\n  expect(ws.scrollTop).toBe(100);\n});","file":"utils/scroll-to.test.js","skipped":false,"dir":"test"},{"name":"ScrollTo with custom duration","suites":[],"updatePoint":{"line":19,"column":35,"index":549},"line":19,"code":"test('ScrollTo with custom duration', () => {\n  const ws = document.getElementById('webslides');\n  ws.scrollTop = 0;\n  scrollTo(100, 2000);\n  expect(ws.scrollTop).toBe(0);\n  jest.runTimersToTime(500);\n  expect(ws.scrollTop).toBeLessThan(100);\n  jest.runTimersToTime(700);\n  expect(ws.scrollTop).toBeLessThan(100);\n  jest.runAllTimers();\n  expect(ws.scrollTop).toBe(100);\n});","file":"utils/scroll-to.test.js","skipped":false,"dir":"test"},{"name":"ScrollTo with custom callback","suites":[],"updatePoint":{"line":31,"column":35,"index":924},"line":31,"code":"test('ScrollTo with custom callback', () => {\n  const ws = document.getElementById('webslides');\n  ws.scrollTop = 0;\n  const cb = jest.fn();\n  scrollTo(100, 500, cb);\n  expect(ws.scrollTop).toBe(0);\n  expect(cb).not.toBeCalled();\n  jest.runAllTimers();\n  expect(ws.scrollTop).toBe(100);\n  expect(cb).toBeCalled();\n});","file":"utils/scroll-to.test.js","skipped":false,"dir":"test"}]}