{"repo":"video-dev/hls.js","url":"https://github.com/video-dev/hls.js","branch":"master","configs":[{"package":"hls.js","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should receive video loadeddata event for ","suites":["testing hls.js playback in the browser on \"\""],"updatePoint":{"line":557,"column":71,"index":17543},"line":557,"code":"    it(`should receive video loadeddata event for ${stream.description}`, testLoadedData.bind(null, url, config));","file":"functional/auto/setup.js","skipped":false,"dir":"tests"},{"name":"seek back to start and play for ","suites":["testing hls.js playback in the browser on \"\""],"updatePoint":{"line":560,"column":63,"index":17699},"line":560,"code":"      it(`seek back to start and play for ${stream.description}`, testSeekBackToStart.bind(null, url, config));","file":"functional/auto/setup.js","skipped":false,"dir":"tests"},{"name":"should \"smooth switch\" to highest level and still play after 2s for ","suites":["testing hls.js playback in the browser on \"\""],"updatePoint":{"line":564,"column":99,"index":17896},"line":564,"code":"      it(`should \"smooth switch\" to highest level and still play after 2s for ${stream.description}`, testSmoothSwitch.bind(null, url, config));","file":"functional/auto/setup.js","skipped":false,"dir":"tests"},{"name":"should seek near the end and receive video seeked event for ","suites":["testing hls.js playback in the browser on \"\""],"updatePoint":{"line":568,"column":91,"index":18063},"line":568,"code":"      it(`should seek near the end and receive video seeked event for ${stream.description}`, testSeekOnLive.bind(null, url, config));","file":"functional/auto/setup.js","skipped":false,"dir":"tests"},{"name":"should buffer up to maxBufferLength or video.duration for ","suites":["testing hls.js playback in the browser on \"\""],"updatePoint":{"line":570,"column":89,"index":18231},"line":570,"code":"      it(`should buffer up to maxBufferLength or video.duration for ${stream.description}`, testIdleBufferLength.bind(null, url, config));","file":"functional/auto/setup.js","skipped":false,"dir":"tests"},{"name":"should play ","suites":["testing hls.js playback in the browser on \"\""],"updatePoint":{"line":571,"column":43,"index":18324},"line":571,"code":"      it(`should play ${stream.description}`, testIsPlayingVOD.bind(null, url, config));","file":"functional/auto/setup.js","skipped":false,"dir":"tests"},{"name":"should seek 3s from end and receive video ended event for  with 2 or less buffered ranges","suites":["testing hls.js playback in the browser on \"\""],"updatePoint":{"line":572,"column":120,"index":18490},"line":572,"code":"      it(`should seek 3s from end and receive video ended event for ${stream.description} with 2 or less buffered ranges`, testSeekOnVOD.bind(null, url, config)); // TODO: Seeking to or past VOD duration should result in the video ending","file":"functional/auto/setup.js","skipped":false,"dir":"tests"},{"name":"should return correct next auto level","suites":["AbrController"],"updatePoint":{"line":5,"column":43,"index":270},"line":5,"code":"  it('should return correct next auto level', function () {\n    const hls = new Hls({\n      maxStarvationDelay: 4\n    });\n    hls.levelController._levels = [{\n      bitrate: 105000,\n      name: '144',\n      details: {\n        totalduration: 4,\n        fragments: [{}]\n      }\n    }, {\n      bitrate: 246440,\n      name: '240',\n      details: {\n        totalduration: 10,\n        fragments: [{}]\n      }\n    }, {\n      bitrate: 460560,\n      name: '380',\n      details: {\n        totalduration: 10,\n        fragments: [{}]\n      }\n    }, {\n      bitrate: 836280,\n      name: '480',\n      details: {\n        totalduration: 10,\n        fragments: [{}]\n      }\n    }, {\n      bitrate: 2149280,\n      name: '720',\n      details: {\n        totalduration: 10,\n        fragments: [{}]\n      }\n    }, {\n      bitrate: 6221600,\n      name: '1080',\n      details: {\n        totalduration: 10,\n        fragments: [{}]\n      }\n    }];\n    const abrController = new AbrController(hls);\n    abrController.bwEstimator = new EwmaBandWidthEstimator(hls, 15, 4, 5e5);\n    expect(abrController.nextAutoLevel).to.equal(0);\n  });","file":"unit/controller/abr-controller.js","skipped":false,"dir":"tests"},{"name":"should update the level details from the event data","suites":["AudioStreamController","onAudioTrackLoaded"],"updatePoint":{"line":44,"column":59,"index":924},"line":44,"code":"    it('should update the level details from the event data', function () {\n      const details = {\n        live: false,\n        fragments: [{}],\n        targetduration: 100\n      };\n      audioStreamController.levels = tracks;\n      audioStreamController.mainDetails = details;\n\n      audioStreamController.tick = () => {};\n\n      audioStreamController.onAudioTrackLoaded(Events.AUDIO_TRACK_LOADED, {\n        id: 0,\n        details\n      });\n      expect(audioStreamController.levels[0].details).to.equal(details);\n    });","file":"unit/controller/audio-stream-controller.js","skipped":false,"dir":"tests"},{"name":"should reset the tracks list and current trackId","suites":["AudioTrackController","onManifestLoading"],"updatePoint":{"line":99,"column":56,"index":2182},"line":99,"code":"    it('should reset the tracks list and current trackId', function () {\n      audioTrackController.tracks = tracks;\n      audioTrackController.onManifestLoading();\n      expect(audioTrackController.tracks).to.be.empty;\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should set the audioTracks contained in the event data and trigger AUDIO_TRACKS_UPDATED","suites":["AudioTrackController","onLevelLoading"],"updatePoint":{"line":106,"column":95,"index":2498},"line":106,"code":"    it('should set the audioTracks contained in the event data and trigger AUDIO_TRACKS_UPDATED', function () {\n      const audioTracksUpdatedCallback = sinon.spy();\n      hls.on(Hls.Events.AUDIO_TRACKS_UPDATED, audioTracksUpdatedCallback);\n      audioTrackController.onManifestParsed(Events.MANIFEST_PARSED, {\n        audioTracks: tracks\n      });\n      audioTrackController.onLevelLoading(Events.LEVEL_LOADING, {\n        level: 0\n      });\n      expect(audioTrackController.tracks).to.equal(tracks);\n      expect(audioTracksUpdatedCallback).to.be.calledOnce;\n      expect(audioTracksUpdatedCallback).to.be.calledWith(Events.AUDIO_TRACKS_UPDATED, {\n        audioTracks: tracks.slice(3, 6)\n      });\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should select audioGroupId and trigger AUDIO_TRACK_SWITCHING","suites":["AudioTrackController","onLevelLoading"],"updatePoint":{"line":122,"column":66,"index":3183},"line":122,"code":"  it('should select audioGroupId and trigger AUDIO_TRACK_SWITCHING', function (done) {\n    hls.on(Hls.Events.AUDIO_TRACK_SWITCHING, (event, data) => {\n      done();\n    });\n    const newLevelInfo = levels[0];\n    const newGroupId = newLevelInfo.audioGroupIds[newLevelInfo.urlId];\n    audioTrackController.tracks = tracks; // Update the level to set audioGroupId\n\n    audioTrackController.onLevelLoading(Events.LEVEL_LOADING, {\n      level: 0\n    });\n    audioTrackController.audioTrack = 2; // current track name\n\n    const audioTrackName = tracks[audioTrackController.audioTrack].name;\n    audioTrackController.onManifestParsed(Events.MANIFEST_PARSED, {\n      audioTracks: tracks\n    }); // group has switched\n\n    expect(audioTrackController.groupId).to.equal(newGroupId); // name is still the same\n\n    expect(tracks[audioTrackController.audioTrack].name).to.equal(audioTrackName);\n  });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should always switch tracks when audioTrack is set to a valid index","suites":["AudioTrackController","onLevelLoading"],"updatePoint":{"line":144,"column":73,"index":4081},"line":144,"code":"  it('should always switch tracks when audioTrack is set to a valid index', function () {\n    const audioTracksUpdatedCallback = sinon.spy();\n    const audioTrackSwitchingCallback = sinon.spy();\n    hls.on(Hls.Events.AUDIO_TRACKS_UPDATED, audioTracksUpdatedCallback);\n    hls.on(Hls.Events.AUDIO_TRACK_SWITCHING, audioTrackSwitchingCallback);\n    audioTrackController.onManifestParsed(Events.MANIFEST_PARSED, {\n      audioTracks: tracks\n    });\n    audioTrackController.onLevelLoading(Events.LEVEL_LOADING, {\n      level: 0\n    });\n    expect(audioTracksUpdatedCallback, 'AUDIO_TRACKS_UPDATED').to.have.been.calledOnce;\n    expect(audioTrackSwitchingCallback, 'AUDIO_TRACK_SWITCHING to initial track 0').to.have.been.calledOnce;\n    audioTrackController.onAudioTrackLoaded(Events.AUDIO_TRACK_LOADED, {\n      details: new LevelDetails(''),\n      id: 0,\n      groupId: '1',\n      networkDetails: null,\n      stats: {\n        loading: {}\n      },\n      deliveryDirectives: null\n    });\n    expect(audioTrackController.tracksInGroup[0], 'tracksInGroup[0]').to.have.property('details').which.is.an('object');\n    audioTrackController.audioTrack = 1;\n    expect(audioTrackSwitchingCallback, 'AUDIO_TRACK_SWITCHING to track 1').to.have.been.calledTwice;\n    audioTrackController.onAudioTrackLoaded(Events.AUDIO_TRACK_LOADED, {\n      details: new LevelDetails(''),\n      id: 1,\n      groupId: '1',\n      networkDetails: null,\n      stats: {\n        loading: {}\n      },\n      deliveryDirectives: null\n    });\n    expect(audioTrackController.tracksInGroup[1], 'tracksInGroup[1]').to.have.property('details').which.is.an('object');\n    audioTrackController.audioTrack = 0;\n    expect(audioTrackSwitchingCallback, 'AUDIO_TRACK_SWITCHING back to track 0').to.have.been.calledThrice;\n  });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should not need loading because the audioTrack is embedded in the main playlist","suites":["AudioTrackController","shouldLoadTrack"],"updatePoint":{"line":185,"column":87,"index":5916},"line":185,"code":"    it('should not need loading because the audioTrack is embedded in the main playlist', function () {\n      audioTrackController.canLoad = true;\n      expect(audioTrackController.shouldLoadTrack({\n        details: {\n          live: true\n        }\n      })).to.be.false;\n      expect(audioTrackController.shouldLoadTrack({\n        details: undefined\n      })).to.be.false;\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should need loading because the track has not been loaded yet","suites":["AudioTrackController","shouldLoadTrack"],"updatePoint":{"line":196,"column":69,"index":6280},"line":196,"code":"    it('should need loading because the track has not been loaded yet', function () {\n      audioTrackController.canLoad = true;\n      expect(audioTrackController.shouldLoadTrack({\n        details: {\n          live: true\n        },\n        url: 'http://example.com/manifest.m3u8'\n      }), 'track 1').to.be.true;\n      expect(audioTrackController.shouldLoadTrack({\n        details: null,\n        url: 'http://example.com/manifest.m3u8'\n      }), 'track 2').to.be.true;\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should reselect the current track and trigger AUDIO_TRACK_SWITCHING eventually","suites":["AudioTrackController","onLevelLoading"],"updatePoint":{"line":211,"column":86,"index":6823},"line":211,"code":"    it('should reselect the current track and trigger AUDIO_TRACK_SWITCHING eventually', function (done) {\n      hls.on(Hls.Events.AUDIO_TRACK_SWITCHING, (event, data) => {\n        done();\n      });\n      const levelLoadedEvent = {\n        level: 0\n      };\n      const newLevelInfo = levels[levelLoadedEvent.level];\n      const newGroupId = newLevelInfo.audioGroupIds[newLevelInfo.urlId];\n      audioTrackController.tracks = tracks;\n      audioTrackController.onLevelLoading(Events.LEVEL_LOADING, {\n        level: 0\n      });\n      audioTrackController.audioTrack = 2; // current track name\n\n      const audioTrackName = tracks[audioTrackController.audioTrack].name;\n      audioTrackController.onLevelLoading(Events.LEVEL_LOADING, levelLoadedEvent); // group has switched\n\n      expect(audioTrackController.groupId).to.equal(newGroupId); // name is still the same\n\n      expect(tracks[audioTrackController.audioTrack].name).to.equal(audioTrackName);\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should load audio tracks with a url","suites":["AudioTrackController","onLevelLoading"],"updatePoint":{"line":233,"column":43,"index":7739},"line":233,"code":"    it('should load audio tracks with a url', function () {\n      const shouldLoadTrack = sinon.spy(audioTrackController, 'shouldLoadTrack');\n      const audioTrackLoadingCallback = sinon.spy();\n      const trackWithUrl = {\n        groupId: '1',\n        id: 0,\n        name: 'A',\n        default: true,\n        url: './trackA.m3u8'\n      };\n      hls.on(Hls.Events.AUDIO_TRACK_LOADING, audioTrackLoadingCallback);\n      hls.levelController = {\n        levels: [{\n          urlId: 0,\n          audioGroupIds: ['1']\n        }]\n      };\n      audioTrackController.tracks = [trackWithUrl];\n      audioTrackController.onLevelLoading(Events.LEVEL_LOADING, {\n        level: 0\n      });\n      audioTrackController.startLoad();\n      expect(shouldLoadTrack).to.have.been.calledTwice;\n      expect(shouldLoadTrack).to.have.been.calledWith(trackWithUrl);\n      expect(shouldLoadTrack.firstCall.returnValue, 'expected shouldLoadTrack to return false before startLoad() is called').to.be.false;\n      expect(shouldLoadTrack.secondCall.returnValue, 'expected shouldLoadTrack to return true after startLoad() is called').to.be.true;\n      expect(audioTrackLoadingCallback).to.have.been.calledOnce;\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should not attempt to load audio tracks without a url","suites":["AudioTrackController","onLevelLoading"],"updatePoint":{"line":261,"column":61,"index":8948},"line":261,"code":"    it('should not attempt to load audio tracks without a url', function () {\n      const shouldLoadTrack = sinon.spy(audioTrackController, 'shouldLoadTrack');\n      const audioTrackLoadingCallback = sinon.spy();\n      const trackWithOutUrl = tracks[0];\n      hls.on(Hls.Events.AUDIO_TRACK_LOADING, audioTrackLoadingCallback);\n      hls.levelController = {\n        levels: [{\n          urlId: 0,\n          audioGroupIds: ['1']\n        }]\n      };\n      audioTrackController.tracks = tracks;\n      audioTrackController.onLevelLoading(Events.LEVEL_LOADING, {\n        level: 0\n      });\n      audioTrackController.startLoad(0);\n      expect(shouldLoadTrack).to.have.been.calledTwice;\n      expect(shouldLoadTrack).to.have.been.calledWith(trackWithOutUrl);\n      expect(shouldLoadTrack.firstCall.returnValue).to.be.false;\n      expect(shouldLoadTrack.secondCall.returnValue).to.be.false;\n      expect(audioTrackLoadingCallback).to.not.have.been.called;\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should clear interval (only) on fatal network errors","suites":["AudioTrackController","onError"],"updatePoint":{"line":285,"column":60,"index":9946},"line":285,"code":"    it('should clear interval (only) on fatal network errors', function () {\n      audioTrackController.timer = 1000;\n      audioTrackController.onError(Events.ERROR, {\n        type: Hls.ErrorTypes.MEDIA_ERROR\n      });\n      expect(audioTrackController.timer).to.equal(1000);\n      audioTrackController.onError(Events.ERROR, {\n        type: Hls.ErrorTypes.MEDIA_ERROR,\n        fatal: true\n      });\n      expect(audioTrackController.timer).to.equal(1000);\n      audioTrackController.onError(Events.ERROR, {\n        type: Hls.ErrorTypes.NETWORK_ERROR,\n        fatal: false\n      });\n      expect(audioTrackController.timer).to.equal(1000);\n      audioTrackController.onError(Events.ERROR, {\n        type: Hls.ErrorTypes.NETWORK_ERROR,\n        fatal: true\n      });\n      expect(audioTrackController.timer).to.equal(-1);\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"should retry track loading if track has not changed","suites":["AudioTrackController","onError"],"updatePoint":{"line":307,"column":59,"index":10773},"line":307,"code":"    it('should retry track loading if track has not changed', function () {\n      const retryLoadingOrFail = sinon.spy(audioTrackController, 'retryLoadingOrFail');\n      const currentTrackId = 4;\n      const currentGroupId = 'aac';\n      audioTrackController.trackId = currentTrackId;\n      audioTrackController.groupId = currentGroupId;\n      audioTrackController.tracks = tracks;\n      audioTrackController.onError(Events.ERROR, {\n        type: Hls.ErrorTypes.NETWORK_ERROR,\n        details: Hls.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,\n        fatal: false,\n        context: {\n          type: PlaylistContextType.AUDIO_TRACK,\n          id: currentTrackId,\n          groupId: currentGroupId\n        }\n      });\n      expect(audioTrackController.audioTrack, 'track index/id is not changed as there is no redundant track to choose from').to.equal(4);\n      expect(retryLoadingOrFail).to.have.been.calledOnce;\n    });","file":"unit/controller/audio-track-controller.ts","skipped":false,"dir":"tests"},{"name":"returns false if the stream is live","suites":["BaseStreamController","_streamEnded"],"updatePoint":{"line":36,"column":43,"index":950},"line":36,"code":"    it('returns false if the stream is live', function () {\n      levelDetails.live = true;\n      expect(baseStreamController._streamEnded(bufferInfo, levelDetails)).to.be.false;\n    });","file":"unit/controller/base-stream-controller.js","skipped":false,"dir":"tests"},{"name":"returns false if fragCurrent does not exist","suites":["BaseStreamController","_streamEnded"],"updatePoint":{"line":40,"column":51,"index":1145},"line":40,"code":"    it('returns false if fragCurrent does not exist', function () {\n      baseStreamController.fragCurrent = null;\n      expect(baseStreamController._streamEnded(bufferInfo, levelDetails)).to.be.false;\n    });","file":"unit/controller/base-stream-controller.js","skipped":false,"dir":"tests"},{"name":"returns false if fragCurrent is not the last fragment","suites":["BaseStreamController","_streamEnded"],"updatePoint":{"line":44,"column":61,"index":1365},"line":44,"code":"    it('returns false if fragCurrent is not the last fragment', function () {\n      baseStreamController.fragCurrent = {\n        sn: 9\n      };\n      levelDetails.endSN = 10;\n      expect(baseStreamController._streamEnded(bufferInfo, levelDetails)).to.be.false;\n    });","file":"unit/controller/base-stream-controller.js","skipped":false,"dir":"tests"},{"name":"returns false if there is subsequently buffered range","suites":["BaseStreamController","_streamEnded"],"updatePoint":{"line":51,"column":61,"index":1635},"line":51,"code":"    it('returns false if there is subsequently buffered range', function () {\n      baseStreamController.fragCurrent = {\n        sn: 10\n      };\n      levelDetails.endSN = 10;\n      bufferInfo.nextStart = 100;\n      expect(baseStreamController._streamEnded(bufferInfo, levelDetails)).to.be.false;\n    });","file":"unit/controller/base-stream-controller.js","skipped":false,"dir":"tests"},{"name":"returns true if fragCurrent is PARTIAL or OK","suites":["BaseStreamController","_streamEnded"],"updatePoint":{"line":59,"column":52,"index":1931},"line":59,"code":"    it('returns true if fragCurrent is PARTIAL or OK', function () {\n      baseStreamController.fragCurrent = {\n        sn: 10\n      };\n      levelDetails.endSN = 10;\n      fragmentTracker.state = FragmentState.PARTIAL;\n      expect(baseStreamController._streamEnded(bufferInfo, levelDetails), `fragState is ${fragmentTracker.getState()}, expecting PARTIAL`).to.be.true;\n      fragmentTracker.state = FragmentState.OK;\n      expect(baseStreamController._streamEnded(bufferInfo, levelDetails), `fragState is ${fragmentTracker.getState()}, expecting OK`).to.be.true;\n    });","file":"unit/controller/base-stream-controller.js","skipped":false,"dir":"tests"},{"name":"returns true if parts are buffered for low latency content","suites":["BaseStreamController","_streamEnded"],"updatePoint":{"line":69,"column":66,"index":2518},"line":69,"code":"    it('returns true if parts are buffered for low latency content', function () {\n      media.buffered = new TimeRangesMock([0, 1]);\n      baseStreamController.fragCurrent = {\n        sn: 10\n      };\n      levelDetails.endSN = 10;\n      levelDetails.partList = [{\n        start: 0,\n        duration: 1\n      }];\n      expect(baseStreamController._streamEnded(bufferInfo, levelDetails)).to.be.true;\n    });","file":"unit/controller/base-stream-controller.js","skipped":false,"dir":"tests"},{"name":"returns true even if fragCurrent is after the last fragment due to low latency content modeling","suites":["BaseStreamController","_streamEnded"],"updatePoint":{"line":81,"column":103,"index":2962},"line":81,"code":"    it('returns true even if fragCurrent is after the last fragment due to low latency content modeling', function () {\n      media.buffered = new TimeRangesMock([0, 1]);\n      baseStreamController.fragCurrent = {\n        sn: 11\n      };\n      levelDetails.endSN = 10;\n      levelDetails.partList = [{\n        start: 0,\n        duration: 1\n      }];\n      expect(baseStreamController._streamEnded(bufferInfo, levelDetails)).to.be.true;\n    });","file":"unit/controller/base-stream-controller.js","skipped":false,"dir":"tests"},{"name":"flushes a specific type when provided a type","suites":["BufferController tests","onBufferFlushing"],"updatePoint":{"line":21,"column":52,"index":720},"line":21,"code":"    it('flushes a specific type when provided a type', function () {\n      const spy = sandbox.spy(bufferController.operationQueue, 'append');\n      bufferController.onBufferFlushing(Events.BUFFER_FLUSHING, {\n        startOffset: 0,\n        endOffset: 10,\n        type: 'video'\n      });\n      expect(spy).to.have.been.calledOnce;\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"flushes all source buffers when buffer flush event type is undefined","suites":["BufferController tests","onBufferFlushing"],"updatePoint":{"line":30,"column":76,"index":1083},"line":30,"code":"    it('flushes all source buffers when buffer flush event type is undefined', function () {\n      const spy = sandbox.spy(bufferController.operationQueue, 'append');\n      bufferController.onBufferFlushing(Events.BUFFER_FLUSHING, {\n        startOffset: 0,\n        endOffset: 10\n      });\n      expect(spy).to.have.been.calledTwice;\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"initializes with zero expected BUFFER_CODEC events","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":142,"column":58,"index":5128},"line":142,"code":"    it('initializes with zero expected BUFFER_CODEC events', function () {\n      expect(bufferController.bufferCodecEventsExpected).to.equal(0);\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"should throw if no media element has been attached","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":145,"column":58,"index":5281},"line":145,"code":"    it('should throw if no media element has been attached', function () {\n      bufferController.createSourceBuffers.restore();\n      bufferController.pendingTracks = {\n        video: {}\n      };\n      expect(bufferController.checkPendingTracks).to.throw();\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"exposes tracks from buffer controller through BUFFER_CREATED event","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":152,"column":74,"index":5564},"line":152,"code":"    it('exposes tracks from buffer controller through BUFFER_CREATED event', function (done) {\n      bufferController.createSourceBuffers.restore();\n      let video = document.createElement('video');\n      bufferController.onMediaAttaching(Events.MEDIA_ATTACHING, {\n        media: video\n      });\n      sandbox.stub(bufferController.mediaSource, 'addSourceBuffer');\n      hls.on(Hls.Events.BUFFER_CREATED, (event, data) => {\n        const tracks = data.tracks;\n        expect(bufferController.pendingTracks).to.not.equal(tracks);\n        expect(bufferController.tracks).to.equal(tracks);\n        done();\n      });\n      hls.once(Hls.Events.ERROR, (event, data) => {\n        // Async timeout prevents assertion from throwing in event handler\n        self.setTimeout(() => {\n          expect(data.error.message).to.equal(null);\n          done();\n        });\n      });\n      bufferController.pendingTracks = {\n        video: {\n          container: 'video/mp4',\n          codec: 'avc1.42e01e'\n        }\n      };\n      bufferController.checkPendingTracks();\n      video = null;\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"expects one bufferCodec event by default","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":181,"column":48,"index":6619},"line":181,"code":"    it('expects one bufferCodec event by default', function () {\n      bufferController.onManifestParsed(Events.MANIFEST_PARSED, {});\n      expect(bufferController.bufferCodecEventsExpected).to.equal(1);\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"expects two bufferCodec events if altAudio is signaled","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":185,"column":62,"index":6845},"line":185,"code":"    it('expects two bufferCodec events if altAudio is signaled', function () {\n      bufferController.onManifestParsed(Events.MANIFEST_PARSED, {\n        altAudio: true\n      });\n      expect(bufferController.bufferCodecEventsExpected).to.equal(2);\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"expects one bufferCodec event if altAudio is signaled with audio only","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":191,"column":77,"index":7116},"line":191,"code":"    it('expects one bufferCodec event if altAudio is signaled with audio only', function () {\n      bufferController.onManifestParsed(Events.MANIFEST_PARSED, {\n        altAudio: true,\n        audio: true,\n        video: false\n      });\n      expect(bufferController.bufferCodecEventsExpected).to.equal(1);\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"creates sourceBuffers when no more BUFFER_CODEC events are expected","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":199,"column":75,"index":7428},"line":199,"code":"    it('creates sourceBuffers when no more BUFFER_CODEC events are expected', function () {\n      bufferController.pendingTracks = {\n        video: {}\n      };\n      bufferController.checkPendingTracks();\n      expect(createSbStub).to.have.been.calledOnce;\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"creates sourceBuffers on the first even if two tracks are received","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":206,"column":74,"index":7692},"line":206,"code":"    it('creates sourceBuffers on the first even if two tracks are received', function () {\n      bufferController.pendingTracks = {\n        audio: {},\n        video: {}\n      };\n      bufferController.bufferCodecEventsExpected = 2;\n      bufferController.checkPendingTracks();\n      expect(createSbStub).to.have.been.calledOnce;\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"does not create sourceBuffers when BUFFER_CODEC events are expected","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":215,"column":75,"index":8030},"line":215,"code":"    it('does not create sourceBuffers when BUFFER_CODEC events are expected', function () {\n      bufferController.pendingTracks = {\n        video: {}\n      };\n      bufferController.bufferCodecEventsExpected = 1;\n      bufferController.checkPendingTracks();\n      expect(createSbStub).to.not.have.been.called;\n      expect(bufferController.bufferCodecEventsExpected).to.equal(1);\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"checks pending tracks in onMediaSourceOpen","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":224,"column":50,"index":8394},"line":224,"code":"    it('checks pending tracks in onMediaSourceOpen', function () {\n      bufferController._onMediaSourceOpen();\n\n      expect(checkPendingTracksSpy).to.have.been.calledOnce;\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"checks pending tracks even when more events are expected","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":229,"column":64,"index":8590},"line":229,"code":"    it('checks pending tracks even when more events are expected', function () {\n      bufferController.sourceBuffer = {};\n      bufferController.mediaSource = {\n        readyState: 'open'\n      };\n      bufferController.bufferCodecEventsExpected = 2;\n      bufferController.onBufferCodecs(Events.BUFFER_CODECS, {});\n      expect(checkPendingTracksSpy).to.have.been.calledOnce;\n      expect(bufferController.bufferCodecEventsExpected).to.equal(1);\n      bufferController.onBufferCodecs(Events.BUFFER_CODECS, {});\n      expect(checkPendingTracksSpy).to.have.been.calledTwice;\n      expect(bufferController.bufferCodecEventsExpected).to.equal(0);\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"creates the expected amount of sourceBuffers given the standard event flow","suites":["BufferController tests","sourcebuffer creation"],"updatePoint":{"line":242,"column":82,"index":9261},"line":242,"code":"    it('creates the expected amount of sourceBuffers given the standard event flow', function () {\n      bufferController.sourceBuffer = {};\n      bufferController.mediaSource = {\n        readyState: 'open',\n        removeEventListener: sandbox.stub()\n      };\n      bufferController.onManifestParsed(Events.MANIFEST_PARSED, {\n        altAudio: true\n      });\n\n      bufferController._onMediaSourceOpen();\n\n      bufferController.onBufferCodecs(Events.BUFFER_CODECS, {\n        audio: {}\n      });\n      bufferController.onBufferCodecs(Events.BUFFER_CODECS, {\n        video: {}\n      });\n      expect(createSbStub).to.have.been.calledOnce;\n      expect(createSbStub).to.have.been.calledWith({\n        audio: {},\n        video: {}\n      });\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"calls changeType if needed and stores current track info","suites":["BufferController tests","onBufferCodecs"],"updatePoint":{"line":268,"column":64,"index":10039},"line":268,"code":"    it('calls changeType if needed and stores current track info', function () {\n      const getSourceBufferTypes = sandbox.stub(bufferController, 'getSourceBufferTypes').returns(['audio', 'video']);\n      /* eslint-disable-next-line no-unused-vars */\n\n      const appendChangeType = sandbox.stub(bufferController, 'appendChangeType');\n      const buffer = {\n        changeType: sandbox.stub()\n      };\n      const originalAudioTrack = {\n        id: 'main',\n        codec: 'mp4a.40.2',\n        levelCodec: undefined,\n        container: 'audio/mp4',\n        metadata: {\n          channelCount: 1\n        }\n      };\n      const newAudioTrack = {\n        id: 'main',\n        codec: 'mp4a.40.5',\n        levelCodec: undefined,\n        container: 'audio/mp4',\n        metadata: {\n          channelCount: 1\n        }\n      };\n      bufferController.tracks = {\n        audio: { ...originalAudioTrack,\n          buffer\n        }\n      };\n      bufferController.onBufferCodecs(Events.BUFFER_CODECS, {\n        audio: newAudioTrack\n      });\n      expect(getSourceBufferTypes).to.have.been.calledOnce;\n      expect(bufferController.appendChangeType).to.have.been.calledOnce;\n      expect(bufferController.appendChangeType).to.have.been.calledWith('audio', 'audio/mp4;codecs=mp4a.40.5');\n      expect(bufferController.tracks.audio).to.deep.equal({\n        buffer,\n        ...newAudioTrack\n      });\n      bufferController.onBufferCodecs(Events.BUFFER_CODECS, {\n        audio: originalAudioTrack\n      });\n      expect(getSourceBufferTypes).to.have.been.calledTwice;\n      expect(bufferController.appendChangeType).to.have.been.calledTwice;\n      expect(bufferController.appendChangeType).to.have.been.calledWith('audio', 'audio/mp4;codecs=mp4a.40.2');\n      expect(bufferController.tracks.audio).to.deep.equal({\n        buffer,\n        ...originalAudioTrack\n      });\n    });","file":"unit/controller/buffer-controller.js","skipped":false,"dir":"tests"},{"name":"Should choose the level whose dimensions are >= the media dimensions","suites":["CapLevelController","getMaxLevelByMediaSize"],"updatePoint":{"line":24,"column":76,"index":586},"line":24,"code":"    it('Should choose the level whose dimensions are >= the media dimensions', function () {\n      const expected = 0;\n      const actual = CapLevelController.getMaxLevelByMediaSize(levels, 300, 300);\n      expect(expected).to.equal(actual);\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"Should choose the level whose bandwidth is greater if level dimensions are equal","suites":["CapLevelController","getMaxLevelByMediaSize"],"updatePoint":{"line":29,"column":88,"index":848},"line":29,"code":"    it('Should choose the level whose bandwidth is greater if level dimensions are equal', function () {\n      const expected = 2;\n      const actual = CapLevelController.getMaxLevelByMediaSize(levels, 500, 500);\n      expect(expected).to.equal(actual);\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"Should choose the highest level if the media is greater than every level","suites":["CapLevelController","getMaxLevelByMediaSize"],"updatePoint":{"line":34,"column":80,"index":1102},"line":34,"code":"    it('Should choose the highest level if the media is greater than every level', function () {\n      const expected = 3;\n      const actual = CapLevelController.getMaxLevelByMediaSize(levels, 5000, 5000);\n      expect(expected).to.equal(actual);\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"Should return -1 if there levels is empty","suites":["CapLevelController","getMaxLevelByMediaSize"],"updatePoint":{"line":39,"column":49,"index":1327},"line":39,"code":"    it('Should return -1 if there levels is empty', function () {\n      const expected = -1;\n      const actual = CapLevelController.getMaxLevelByMediaSize([], 5000, 5000);\n      expect(expected).to.equal(actual);\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"Should return -1 if there levels is undefined","suites":["CapLevelController","getMaxLevelByMediaSize"],"updatePoint":{"line":44,"column":53,"index":1553},"line":44,"code":"    it('Should return -1 if there levels is undefined', function () {\n      const expected = -1;\n      const actual = CapLevelController.getMaxLevelByMediaSize(undefined, 5000, 5000);\n      expect(expected).to.equal(actual);\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"gets 0 for width and height when the media element is not in the DOM","suites":["CapLevelController","getDimensions"],"updatePoint":{"line":77,"column":76,"index":2629},"line":77,"code":"    it('gets 0 for width and height when the media element is not in the DOM', function () {\n      const bounds = capLevelController.getDimensions();\n      expect(bounds.width).to.equal(0);\n      expect(bounds.height).to.equal(0);\n      expect(capLevelController.mediaWidth).to.equal(0);\n      expect(capLevelController.mediaHeight).to.equal(0);\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"gets width and height attributes when the media element is not in the DOM","suites":["CapLevelController","getDimensions"],"updatePoint":{"line":84,"column":81,"index":2988},"line":84,"code":"    it('gets width and height attributes when the media element is not in the DOM', function () {\n      media.setAttribute('width', 320);\n      media.setAttribute('height', 240);\n      const pixelRatio = capLevelController.contentScaleFactor;\n      const bounds = capLevelController.getDimensions();\n      expect(bounds.width).to.equal(320);\n      expect(bounds.height).to.equal(240);\n      expect(capLevelController.mediaWidth).to.equal(320 * pixelRatio);\n      expect(capLevelController.mediaHeight).to.equal(240 * pixelRatio);\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"gets client bounds width and height when media element is in the DOM","suites":["CapLevelController","getDimensions"],"updatePoint":{"line":94,"column":76,"index":3521},"line":94,"code":"    it('gets client bounds width and height when media element is in the DOM', function () {\n      media.style.width = '1280px';\n      media.style.height = '720px';\n      document.querySelector('#test-fixture').appendChild(media);\n      const pixelRatio = capLevelController.contentScaleFactor;\n      const bounds = capLevelController.getDimensions();\n      expect(bounds.width).to.equal(1280);\n      expect(bounds.height).to.equal(720);\n      expect(capLevelController.mediaWidth).to.equal(1280 * pixelRatio);\n      expect(capLevelController.mediaHeight).to.equal(720 * pixelRatio);\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"immediately caps and sets a timer for monitoring size size","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":122,"column":68,"index":4673},"line":122,"code":"      it('immediately caps and sets a timer for monitoring size size', function () {\n        const detectPlayerSizeSpy = sinon.spy(capLevelController, 'detectPlayerSize');\n        capLevelController.startCapping();\n        expect(capLevelController.timer).to.exist;\n        expect(firstLevelSpy.set.calledOnce).to.be.true;\n        expect(detectPlayerSizeSpy.calledOnce).to.be.true;\n      });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"stops the capping timer and resets capping","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":129,"column":52,"index":5049},"line":129,"code":"      it('stops the capping timer and resets capping', function () {\n        capLevelController.autoLevelCapping = 4;\n        capLevelController.timer = 1;\n        capLevelController.stopCapping();\n        expect(capLevelController.autoLevelCapping).to.equal(Number.POSITIVE_INFINITY);\n        expect(capLevelController.restrictedLevels).to.be.empty;\n        expect(capLevelController.firstLevel).to.equal(-1);\n        expect(capLevelController.timer).to.not.exist;\n      });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"constructs with no restrictions","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":139,"column":39,"index":5520},"line":139,"code":"    it('constructs with no restrictions', function () {\n      expect(capLevelController.restrictedLevels).to.be.empty;\n      expect(capLevelController.timer).to.not.exist;\n      expect(capLevelController.autoLevelCapping).to.equal(Number.POSITIVE_INFINITY);\n      expect(firstLevelSpy.set.notCalled).to.be.true;\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"starts capping on BUFFER_CODECS only if video is found","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":145,"column":62,"index":5863},"line":145,"code":"    it('starts capping on BUFFER_CODECS only if video is found', function () {\n      capLevelController.onBufferCodecs(Events.BUFFER_CODECS, {\n        video: {}\n      });\n      expect(startCappingSpy.calledOnce).to.be.true;\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"does not start capping on BUFFER_CODECS if video is not found","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":151,"column":69,"index":6102},"line":151,"code":"    it('does not start capping on BUFFER_CODECS if video is not found', function () {\n      capLevelController.onBufferCodecs(Events.BUFFER_CODECS, {\n        audio: {}\n      });\n      expect(startCappingSpy.notCalled).to.be.true;\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"starts capping if the video codec was found after the audio codec","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":157,"column":73,"index":6344},"line":157,"code":"    it('starts capping if the video codec was found after the audio codec', function () {\n      capLevelController.onBufferCodecs(Events.BUFFER_CODECS, {\n        audio: {}\n      });\n      expect(startCappingSpy.notCalled).to.be.true;\n      capLevelController.onBufferCodecs(Events.BUFFER_CODECS, {\n        video: {}\n      });\n      expect(startCappingSpy.calledOnce).to.be.true;\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"receives level information from the MANIFEST_PARSED event","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":167,"column":65,"index":6723},"line":167,"code":"    it('receives level information from the MANIFEST_PARSED event', function () {\n      capLevelController.restrictedLevels = [1];\n      const data = {\n        levels: [{\n          foo: 'bar'\n        }],\n        firstLevel: 0\n      };\n      capLevelController.onManifestParsed(Events.MANIFEST_PARSED, data);\n      expect(capLevelController.firstLevel).to.equal(data.firstLevel);\n      expect(capLevelController.restrictedLevels).to.be.empty;\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"should start capping in MANIFEST_PARSED if a video codec was signaled in the manifest","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":179,"column":93,"index":7201},"line":179,"code":"    it('should start capping in MANIFEST_PARSED if a video codec was signaled in the manifest', function () {\n      capLevelController.onManifestParsed(Events.MANIFEST_PARSED, {\n        video: {}\n      });\n      expect(startCappingSpy.calledOnce).to.be.true;\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"does not start capping on MANIFEST_PARSED if no video codec was signaled in the manifest","suites":["CapLevelController","initialization","start and stop"],"updatePoint":{"line":185,"column":96,"index":7471},"line":185,"code":"    it('does not start capping on MANIFEST_PARSED if no video codec was signaled in the manifest', function () {\n      capLevelController.onManifestParsed(Events.MANIFEST_PARSED, {\n        levels: [{}],\n        altAudio: true\n      });\n      expect(startCappingSpy.notCalled).to.be.true;\n    });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"continues capping without second timer","suites":["CapLevelController","initialization","capLevelToPlayerSize"],"updatePoint":{"line":205,"column":48,"index":8281},"line":205,"code":"      it('continues capping without second timer', function () {\n        hls.capLevelToPlayerSize = true;\n        expect(startCappingSpy.calledOnce).to.be.true;\n      });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"stops the capping timer and resets capping","suites":["CapLevelController","initialization","capLevelToPlayerSize"],"updatePoint":{"line":209,"column":52,"index":8456},"line":209,"code":"      it('stops the capping timer and resets capping', function () {\n        hls.capLevelToPlayerSize = false;\n        expect(stopCappingSpy.calledOnce).to.be.true;\n      });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"calls for nextLevelSwitch when stopped capping","suites":["CapLevelController","initialization","capLevelToPlayerSize"],"updatePoint":{"line":213,"column":56,"index":8635},"line":213,"code":"      it('calls for nextLevelSwitch when stopped capping', function () {\n        hls.capLevelToPlayerSize = false;\n        expect(nextLevelSwitchSpy.calledOnce).to.be.true;\n      });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"updates config state of capping on change","suites":["CapLevelController","initialization","capLevelToPlayerSize"],"updatePoint":{"line":217,"column":51,"index":8813},"line":217,"code":"      it('updates config state of capping on change', function () {\n        hls.capLevelToPlayerSize = false;\n        expect(hls.config.capLevelToPlayerSize).to.be.false;\n      });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"stops capping when destroyed","suites":["CapLevelController","initialization","capLevelToPlayerSize"],"updatePoint":{"line":221,"column":38,"index":8981},"line":221,"code":"      it('stops capping when destroyed', function () {\n        capLevelController.destroy();\n        expect(stopCappingSpy.calledOnce).to.be.true;\n      });","file":"unit/controller/cap-level-controller.js","skipped":false,"dir":"tests"},{"name":"produces correctly serialized data","suites":["CMCDController","Query serialization"],"updatePoint":{"line":34,"column":42,"index":897},"line":34,"code":"    it('produces correctly serialized data', function () {\n      const query = CMCDController.toQuery(data);\n      const result = 'CMCD=br%3D52317%2Cbs%2Ccid%3D%22xyz%22%2C' + 'com.test-exists%2Ccom.test-hello%3D%22world%22%2C' + 'com.test-testing%3D1234%2C' + 'd%3D6067%2Cmtp%3D10000%2C' + 'nor%3D%22..%252Ftesting%252F3.m4v%22%2C' + 'nrr%3D%220-99%22%2C' + 'sid%3D%22c936730c-031e-4a73-976f-92bc34039c60%22';\n      expect(query).to.equal(result);\n    });","file":"unit/controller/cmcd-controller.ts","skipped":false,"dir":"tests"},{"name":"appends with ?","suites":["CMCDController","Query serialization"],"updatePoint":{"line":39,"column":22,"index":1334},"line":39,"code":"    it('appends with ?', function () {\n      const result = CMCDController.appendQueryToUri('http://test.com', 'CMCD=d%3D6067');\n      expect(result).to.equal('http://test.com?CMCD=d%3D6067');\n    });","file":"unit/controller/cmcd-controller.ts","skipped":false,"dir":"tests"},{"name":"appends with &","suites":["CMCDController","Query serialization"],"updatePoint":{"line":43,"column":22,"index":1535},"line":43,"code":"    it('appends with &', function () {\n      const result = CMCDController.appendQueryToUri('http://test.com?testing=123', 'CMCD=d%3D6067');\n      expect(result).to.equal('http://test.com?testing=123&CMCD=d%3D6067');\n    });","file":"unit/controller/cmcd-controller.ts","skipped":false,"dir":"tests"},{"name":"produces all header shards","suites":["CMCDController","Header serialization"],"updatePoint":{"line":49,"column":34,"index":1827},"line":49,"code":"    it('produces all header shards', function () {\n      const header = CMCDController.toHeaders(data);\n      expect(header).to.deep.equal({\n        'CMCD-Object': 'br=52317,d=6067',\n        'CMCD-Request': 'com.test-exists,com.test-hello=\"world\",' + 'com.test-testing=1234,mtp=10000,' + 'nor=\"..%2Ftesting%2F3.m4v\",nrr=\"0-99\"',\n        'CMCD-Session': 'cid=\"xyz\",sid=\"c936730c-031e-4a73-976f-92bc34039c60\"',\n        'CMCD-Status': 'bs'\n      });\n    });","file":"unit/controller/cmcd-controller.ts","skipped":false,"dir":"tests"},{"name":"ignores empty shards","suites":["CMCDController","Header serialization"],"updatePoint":{"line":58,"column":28,"index":2276},"line":58,"code":"    it('ignores empty shards', function () {\n      expect(CMCDController.toHeaders({\n        br: 200\n      })).to.deep.equal({\n        'CMCD-Object': 'br=200'\n      });\n    });","file":"unit/controller/cmcd-controller.ts","skipped":false,"dir":"tests"},{"name":"does not modify requests when disabled","suites":["CMCDController","cmcdController instance","configuration"],"updatePoint":{"line":71,"column":48,"index":2643},"line":71,"code":"      it('does not modify requests when disabled', function () {\n        setupEach();\n        const {\n          config\n        } = cmcdController.hls;\n        expect(config.pLoader).to.equal(undefined);\n        expect(config.fLoader).to.equal(undefined);\n      });","file":"unit/controller/cmcd-controller.ts","skipped":false,"dir":"tests"},{"name":"generates a session id if not provided","suites":["CMCDController","cmcdController instance","configuration"],"updatePoint":{"line":79,"column":48,"index":2908},"line":79,"code":"      it('generates a session id if not provided', function () {\n        setupEach({});\n        const c = Object.assign({\n          frag: {}\n        }, context);\n        cmcdController.applyPlaylistData(c);\n        const regex = new RegExp(`sid%3D%22${uuidRegex}%22`, 'i');\n        expect(regex.test(c.url)).to.equal(true);\n      });","file":"unit/controller/cmcd-controller.ts","skipped":false,"dir":"tests"},{"name":"should not do anything when `emeEnabled` is false (default)","suites":["EMEController"],"updatePoint":{"line":34,"column":65,"index":933},"line":34,"code":"  it('should not do anything when `emeEnabled` is false (default)', function () {\n    const reqMediaKsAccessSpy = sinon.spy();\n    setupEach({\n      requestMediaKeySystemAccessFunc: reqMediaKsAccessSpy\n    });\n    emeController.onMediaAttached(Events.MEDIA_ATTACHED, {\n      media\n    });\n    emeController.onManifestParsed(Events.MANIFEST_PARSED, {\n      media\n    });\n    expect(media.setMediaKeys.callCount).to.equal(0);\n    expect(reqMediaKsAccessSpy.callCount).to.equal(0);\n  });","file":"unit/controller/eme-controller.js","skipped":false,"dir":"tests"},{"name":"should request keys when `emeEnabled` is true (but not set them)","suites":["EMEController"],"updatePoint":{"line":48,"column":70,"index":1423},"line":48,"code":"  it('should request keys when `emeEnabled` is true (but not set them)', function (done) {\n    const reqMediaKsAccessSpy = sinon.spy(function () {\n      return Promise.resolve({// Media-keys mock\n      });\n    });\n    setupEach({\n      emeEnabled: true,\n      requestMediaKeySystemAccessFunc: reqMediaKsAccessSpy\n    });\n    emeController.onMediaAttached(Events.MEDIA_ATTACHED, {\n      media\n    });\n    expect(media.setMediaKeys.callCount).to.equal(0);\n    expect(reqMediaKsAccessSpy.callCount).to.equal(0);\n    emeController.onManifestParsed(Events.MANIFEST_PARSED, {\n      levels: fakeLevels\n    });\n    self.setTimeout(function () {\n      expect(media.setMediaKeys.callCount).to.equal(0);\n      expect(reqMediaKsAccessSpy.callCount).to.equal(1);\n      done();\n    }, 0);\n  });","file":"unit/controller/eme-controller.js","skipped":false,"dir":"tests"},{"name":"should request keys with specified robustness options when `emeEnabled` is true","suites":["EMEController"],"updatePoint":{"line":71,"column":85,"index":2219},"line":71,"code":"  it('should request keys with specified robustness options when `emeEnabled` is true', function (done) {\n    const reqMediaKsAccessSpy = sinon.spy(function () {\n      return Promise.resolve({// Media-keys mock\n      });\n    });\n    setupEach({\n      emeEnabled: true,\n      drmSystemOptions: {\n        audioRobustness: 'HW_SECURE_ALL',\n        videoRobustness: 'HW_SECURE_ALL'\n      },\n      requestMediaKeySystemAccessFunc: reqMediaKsAccessSpy\n    });\n    emeController.onMediaAttached(Events.MEDIA_ATTACHED, {\n      media\n    });\n    expect(media.setMediaKeys.callCount).to.equal(0);\n    expect(reqMediaKsAccessSpy.callCount).to.equal(0);\n    emeController.onManifestParsed(Events.MANIFEST_PARSED, {\n      levels: fakeLevels\n    });\n    self.setTimeout(function () {\n      expect(reqMediaKsAccessSpy.callCount).to.equal(1);\n      const baseConfig = reqMediaKsAccessSpy.getCall(0).args[1][0];\n      expect(baseConfig.audioCapabilities[0]).to.have.property('robustness', 'HW_SECURE_ALL');\n      expect(baseConfig.videoCapabilities[0]).to.have.property('robustness', 'HW_SECURE_ALL');\n      done();\n    }, 0);\n  });","file":"unit/controller/eme-controller.js","skipped":false,"dir":"tests"},{"name":"should trigger key system error(s) when bad encrypted data is received","suites":["EMEController"],"updatePoint":{"line":100,"column":76,"index":3326},"line":100,"code":"  it('should trigger key system error(s) when bad encrypted data is received', function (done) {\n    const reqMediaKsAccessSpy = sinon.spy(function () {\n      return Promise.resolve({// Media-keys mock\n      });\n    });\n    setupEach({\n      emeEnabled: true,\n      requestMediaKeySystemAccessFunc: reqMediaKsAccessSpy\n    });\n    const badData = {\n      initDataType: 'cenc',\n      initData: 'bad data'\n    };\n    emeController.onMediaAttached(Events.MEDIA_ATTACHED, {\n      media\n    });\n    emeController.onManifestParsed(Events.MANIFEST_PARSED, {\n      levels: fakeLevels\n    });\n    media.emit('encrypted', badData);\n    self.setTimeout(function () {\n      expect(emeController.hls.trigger).to.have.been.calledTwice;\n      expect(emeController.hls.trigger.args[0][1].details).to.equal(ErrorDetails.KEY_SYSTEM_NO_KEYS);\n      expect(emeController.hls.trigger.args[1][1].details).to.equal(ErrorDetails.KEY_SYSTEM_NO_SESSION);\n      done();\n    }, 0);\n  });","file":"unit/controller/eme-controller.js","skipped":false,"dir":"tests"},{"name":"should close all media key sessions and remove media keys when media is detached","suites":["EMEController"],"updatePoint":{"line":127,"column":86,"index":4296},"line":127,"code":"  it('should close all media key sessions and remove media keys when media is detached', function (done) {\n    const reqMediaKsAccessSpy = sinon.spy(function () {\n      return Promise.resolve({// Media-keys mock\n      });\n    });\n    const keySessionCloseSpy = sinon.spy(() => Promise.resolve());\n    setupEach({\n      emeEnabled: true,\n      requestMediaKeySystemAccessFunc: reqMediaKsAccessSpy\n    });\n    emeController.onMediaAttached(Events.MEDIA_ATTACHED, {\n      media\n    });\n    emeController._mediaKeysList = [{\n      mediaKeysSession: {\n        close: keySessionCloseSpy\n      }\n    }];\n    emeController.onMediaDetached(Events.MEDIA_DETACHED);\n    self.setTimeout(function () {\n      expect(keySessionCloseSpy.callCount).to.equal(1);\n      expect(emeController._mediaKeysList.length).to.equal(0);\n      expect(media.setMediaKeys.calledWith(null)).to.be.true;\n      done();\n    }, 0);\n  });","file":"unit/controller/eme-controller.js","skipped":false,"dir":"tests"},{"name":"returns default estimate if bw estimator not available yet","suites":["EwmaBandWidthEstimator"],"updatePoint":{"line":7,"column":64,"index":316},"line":7,"code":"  it('returns default estimate if bw estimator not available yet', function () {\n    const defaultEstimate = 5e5;\n    const bwEstimator = new EwmaBandWidthEstimator(0, 0, defaultEstimate);\n    expect(bwEstimator.getEstimate()).to.equal(5e5);\n  });","file":"unit/controller/ewma-bandwidth-estimator.ts","skipped":false,"dir":"tests"},{"name":"returns last bitrate is fast=slow=0","suites":["EwmaBandWidthEstimator"],"updatePoint":{"line":12,"column":41,"index":541},"line":12,"code":"  it('returns last bitrate is fast=slow=0', function () {\n    const defaultEstimate = 5e5;\n    const bwEstimator = new EwmaBandWidthEstimator(0, 0, defaultEstimate);\n    bwEstimator.sample(8000, 1000000);\n    expect(bwEstimator.getEstimate()).to.equal(1000000);\n    bwEstimator.sample(4000, 1000000);\n    expect(bwEstimator.getEstimate()).to.equal(2000000);\n    bwEstimator.sample(1000, 1000000);\n    expect(bwEstimator.getEstimate()).to.equal(8000000);\n  });","file":"unit/controller/ewma-bandwidth-estimator.ts","skipped":false,"dir":"tests"},{"name":"returns correct value bitrate is slow=15,fast=4","suites":["EwmaBandWidthEstimator"],"updatePoint":{"line":22,"column":53,"index":1013},"line":22,"code":"  it('returns correct value bitrate is slow=15,fast=4', function () {\n    const defaultEstimate = 5e5;\n    const bwEstimator = new EwmaBandWidthEstimator(15, 4, defaultEstimate);\n    bwEstimator.sample(8000, 1000000);\n    expect(bwEstimator.getEstimate()).to.equal(1000000);\n    bwEstimator.sample(4000, 1000000);\n    expect(bwEstimator.getEstimate()).to.closeTo(1396480.1544736226, 0.000000001);\n    bwEstimator.sample(1000, 1000000);\n    expect(bwEstimator.getEstimate()).to.closeTo(2056826.9489827948, 0.000000001);\n  });","file":"unit/controller/ewma-bandwidth-estimator.ts","skipped":false,"dir":"tests"},{"name":"returns correct value bitrate is slow=9,fast=5","suites":["EwmaBandWidthEstimator"],"updatePoint":{"line":32,"column":52,"index":1537},"line":32,"code":"  it('returns correct value bitrate is slow=9,fast=5', function () {\n    const defaultEstimate = 5e5;\n    const bwEstimator = new EwmaBandWidthEstimator(9, 5, defaultEstimate);\n    bwEstimator.sample(8000, 1000000);\n    expect(bwEstimator.getEstimate()).to.equal(1000000);\n    bwEstimator.sample(4000, 1000000);\n    expect(bwEstimator.getEstimate()).to.closeTo(1439580.319105247, 0.000000001);\n    bwEstimator.sample(1000, 1000000);\n    expect(bwEstimator.getEstimate()).to.closeTo(2208342.324322311, 0.000000001);\n  });","file":"unit/controller/ewma-bandwidth-estimator.ts","skipped":false,"dir":"tests"},{"name":"returns correct value after updating slow and fast","suites":["EwmaBandWidthEstimator"],"updatePoint":{"line":42,"column":56,"index":2062},"line":42,"code":"  it('returns correct value after updating slow and fast', function () {\n    const defaultEstimate = 5e5;\n    const bwEstimator = new EwmaBandWidthEstimator(9, 3, defaultEstimate);\n    expect(bwEstimator.getEstimate()).to.equal(defaultEstimate);\n    bwEstimator.sample(8000, 1000000);\n    expect(bwEstimator.getEstimate()).to.equal(1000000);\n    bwEstimator.sample(4000, 1000000);\n    expect(bwEstimator.getEstimate()).to.closeTo(1439580.319105247, 0.000000001);\n    bwEstimator.update(15, 4);\n    expect(bwEstimator.getEstimate()).to.closeTo(1878125.393685882, 0.000000001);\n    bwEstimator.sample(1000, 1000000);\n    expect(bwEstimator.getEstimate()).to.closeTo(2966543.443461984, 0.000000001);\n  });","file":"unit/controller/ewma-bandwidth-estimator.ts","skipped":false,"dir":"tests"},{"name":"returns correct value when updating before a sample","suites":["EwmaBandWidthEstimator"],"updatePoint":{"line":55,"column":57,"index":2766},"line":55,"code":"  it('returns correct value when updating before a sample', function () {\n    const defaultEstimate = 5e5;\n    const bwEstimator = new EwmaBandWidthEstimator(9, 3, defaultEstimate);\n    bwEstimator.update(15, 4);\n    expect(bwEstimator.getEstimate()).to.equal(defaultEstimate);\n    bwEstimator.sample(8000, 1000000);\n    expect(bwEstimator.getEstimate()).to.equal(1000000);\n  });","file":"unit/controller/ewma-bandwidth-estimator.ts","skipped":false,"dir":"tests"},{"name":"finds a fragment with SN sequential to the previous fragment","suites":["Fragment finders","findFragmentByPTS"],"updatePoint":{"line":26,"column":68,"index":1010},"line":26,"code":"    it('finds a fragment with SN sequential to the previous fragment', function () {\n      const actual = findFragmentByPTS(fragPrevious, mockFragments, bufferEnd, tolerance);\n      const resultSN = actual ? actual.sn : -1;\n      expect(actual).to.equal(mockFragments[3], 'Expected sn 3, found sn segment ' + resultSN);\n      expect(binarySearchSpy).to.have.not.been.called;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"chooses the fragment with the next SN if its contiguous with the end of the buffer","suites":["Fragment finders","findFragmentByPTS"],"updatePoint":{"line":32,"column":90,"index":1415},"line":32,"code":"    it('chooses the fragment with the next SN if its contiguous with the end of the buffer', function () {\n      const actual = findFragmentByPTS(mockFragments[0], mockFragments, mockFragments[0].duration, tolerance);\n      expect(actual).to.equal(mockFragments[1], `expected sn ${mockFragments[1].sn}, but got sn ${actual ? actual.sn : null}`);\n      expect(binarySearchSpy).to.have.not.been.called;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"chooses the fragment with the next SN if its contiguous with the end of previous fragment","suites":["Fragment finders","findFragmentByPTS"],"updatePoint":{"line":37,"column":97,"index":1831},"line":37,"code":"    it('chooses the fragment with the next SN if its contiguous with the end of previous fragment', function () {\n      // See https://github.com/video-dev/hls.js/issues/2776\n      const bufferEnd = 60.139636;\n      const fragments = [{\n        deltaPTS: 0.012346258503441732,\n        cc: 2,\n        duration: 5.017346258503444,\n        start: 55.21705215419478,\n        sn: 11,\n        level: 0\n      }, {\n        deltaPTS: 0,\n        cc: 2,\n        duration: 0.033,\n        start: 60.234398412698226,\n        sn: 12,\n        level: 0\n      }];\n      const fragPrevious = fragments[0];\n      const actual = findFragmentByPTS(fragPrevious, fragments, bufferEnd, tolerance);\n      expect(actual).to.equal(fragments[1], `expected sn ${fragments[1].sn}, but got sn ${actual ? actual.sn : null}`);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"uses BinarySearch to find a fragment if the subsequent one is not within tolerance","suites":["Fragment finders","findFragmentByPTS"],"updatePoint":{"line":59,"column":90,"index":2626},"line":59,"code":"    it('uses BinarySearch to find a fragment if the subsequent one is not within tolerance', function () {\n      const fragments = [mockFragments[0], mockFragments[mockFragments.length - 1]];\n      findFragmentByPTS(fragments[0], fragments, bufferEnd, tolerance);\n      expect(binarySearchSpy).to.have.been.calledOnce;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns null when there is a gap in sn and start-end time","suites":["Fragment finders","findFragmentByPTS"],"updatePoint":{"line":64,"column":65,"index":2928},"line":64,"code":"    it('returns null when there is a gap in sn and start-end time', function () {\n      const bufferEnd = 49;\n      const fragments = [{\n        deltaPTS: 0,\n        cc: 0,\n        duration: 5,\n        start: 54,\n        sn: 5,\n        level: 0\n      }, {\n        deltaPTS: 0,\n        cc: 0,\n        duration: 5,\n        start: 59,\n        sn: 5,\n        level: 0\n      }, {\n        deltaPTS: 0,\n        cc: 0,\n        duration: 5,\n        start: 64,\n        sn: 5,\n        level: 0\n      }]; // sn is not contiguous, and there is a gap between start and end\n\n      const fragPrevious = {\n        deltaPTS: 0,\n        cc: 0,\n        duration: 5,\n        start: 44,\n        sn: 1,\n        level: 0\n      };\n      const actual = findFragmentByPTS(fragPrevious, fragments, bufferEnd, tolerance);\n      expect(actual).to.equal(null);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns 0 if the fragment range is equal to the end of the buffer","suites":["Fragment finders","fragmentWithinToleranceTest"],"updatePoint":{"line":103,"column":73,"index":3864},"line":103,"code":"    it('returns 0 if the fragment range is equal to the end of the buffer', function () {\n      const frag = {\n        start: 5,\n        duration: 5 - tolerance\n      };\n      const actual = fragmentWithinToleranceTest(5, tolerance, frag);\n      expect(actual).to.equal(0);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns 0 if the fragment range is greater than end of the buffer","suites":["Fragment finders","fragmentWithinToleranceTest"],"updatePoint":{"line":111,"column":73,"index":4146},"line":111,"code":"    it('returns 0 if the fragment range is greater than end of the buffer', function () {\n      const frag = {\n        start: 5,\n        duration: 5\n      };\n      const actual = fragmentWithinToleranceTest(5, tolerance, frag);\n      expect(actual).to.equal(0);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns 1 if the fragment range is less than the end of the buffer","suites":["Fragment finders","fragmentWithinToleranceTest"],"updatePoint":{"line":119,"column":74,"index":4417},"line":119,"code":"    it('returns 1 if the fragment range is less than the end of the buffer', function () {\n      const frag = {\n        start: 0,\n        duration: 5\n      };\n      const actual = fragmentWithinToleranceTest(5, tolerance, frag);\n      expect(actual).to.equal(1);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns -1 if the fragment range is greater than the end of the buffer","suites":["Fragment finders","fragmentWithinToleranceTest"],"updatePoint":{"line":127,"column":78,"index":4692},"line":127,"code":"    it('returns -1 if the fragment range is greater than the end of the buffer', function () {\n      const frag = {\n        start: 6,\n        duration: 5\n      };\n      const actual = fragmentWithinToleranceTest(5, tolerance, frag);\n      expect(actual).to.equal(-1);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"does not skip very small fragments","suites":["Fragment finders","fragmentWithinToleranceTest"],"updatePoint":{"line":135,"column":42,"index":4932},"line":135,"code":"    it('does not skip very small fragments', function () {\n      const frag = {\n        start: 0.2,\n        duration: 0.1,\n        deltaPTS: 0.1\n      };\n      const actual = fragmentWithinToleranceTest(0, tolerance, frag);\n      expect(actual).to.equal(0);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"finds a fragment with endProgramDateTime greater than the reference PDT","suites":["Fragment finders","findFragmentByPDT"],"updatePoint":{"line":146,"column":79,"index":5287},"line":146,"code":"    it('finds a fragment with endProgramDateTime greater than the reference PDT', function () {\n      const foundFragment = findFragmentByPDT(mockFragments, fragPrevious.endProgramDateTime + 1);\n      expect(foundFragment).to.equal(mockFragments[2]);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns null when the reference pdt is outside of the pdt range of the fragment array","suites":["Fragment finders","findFragmentByPDT"],"updatePoint":{"line":150,"column":93,"index":5560},"line":150,"code":"    it('returns null when the reference pdt is outside of the pdt range of the fragment array', function () {\n      let foundFragment = findFragmentByPDT(mockFragments, mockFragments[0].programDateTime - 1);\n      expect(foundFragment).to.not.exist;\n      foundFragment = findFragmentByPDT(mockFragments, mockFragments[mockFragments.length - 1].endProgramDateTime + 1);\n      expect(foundFragment).to.not.exist;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"is able to find the first fragment","suites":["Fragment finders","findFragmentByPDT"],"updatePoint":{"line":156,"column":42,"index":5929},"line":156,"code":"    it('is able to find the first fragment', function () {\n      const foundFragment = findFragmentByPDT(mockFragments, mockFragments[0].programDateTime);\n      const resultSN = foundFragment ? foundFragment.sn : -1;\n      expect(foundFragment).to.equal(mockFragments[0], 'Expected sn 0, found sn segment ' + resultSN);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"is able to find the last fragment","suites":["Fragment finders","findFragmentByPDT"],"updatePoint":{"line":161,"column":41,"index":6256},"line":161,"code":"    it('is able to find the last fragment', function () {\n      const foundFragment = findFragmentByPDT(mockFragments, mockFragments[mockFragments.length - 1].programDateTime);\n      const resultSN = foundFragment ? foundFragment.sn : -1;\n      expect(foundFragment).to.equal(mockFragments[4], 'Expected sn 4, found sn segment ' + resultSN);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"is able to find a fragment if the PDT value is 0","suites":["Fragment finders","findFragmentByPDT"],"updatePoint":{"line":166,"column":56,"index":6621},"line":166,"code":"    it('is able to find a fragment if the PDT value is 0', function () {\n      const fragments = [{\n        programDateTime: 0,\n        endProgramDateTime: 1,\n        duration: 0.001\n      }, {\n        programDateTime: 1,\n        endProgramDateTime: 2,\n        duration: 0.001\n      }];\n      const actual = findFragmentByPDT(fragments, 0);\n      expect(actual).to.equal(fragments[0]);\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns null when passed undefined arguments","suites":["Fragment finders","findFragmentByPDT"],"updatePoint":{"line":179,"column":52,"index":7011},"line":179,"code":"    it('returns null when passed undefined arguments', function () {\n      expect(findFragmentByPDT(mockFragments)).to.not.exist;\n      expect(findFragmentByPDT(undefined, 9001)).to.not.exist;\n      expect(findFragmentByPDT()).to.not.exist;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns null when passed an empty frag array","suites":["Fragment finders","findFragmentByPDT"],"updatePoint":{"line":184,"column":52,"index":7260},"line":184,"code":"    it('returns null when passed an empty frag array', function () {\n      expect(findFragmentByPDT([], 9001)).to.not.exist;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns true if the fragment range is equal to the end of the buffer","suites":["Fragment finders","pdtWithinToleranceTest"],"updatePoint":{"line":192,"column":76,"index":7604},"line":192,"code":"    it('returns true if the fragment range is equal to the end of the buffer', function () {\n      const frag = {\n        programDateTime: pdtBufferEnd,\n        endProgramDateTime: pdtBufferEnd + 5000 - tolerance * 1000,\n        duration: 5\n      };\n      const actual = pdtWithinToleranceTest(pdtBufferEnd, tolerance, frag);\n      expect(actual).to.be.true;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"returns false if the fragment range is less than the end of the buffer","suites":["Fragment finders","pdtWithinToleranceTest"],"updatePoint":{"line":201,"column":78,"index":7973},"line":201,"code":"    it('returns false if the fragment range is less than the end of the buffer', function () {\n      const frag = {\n        programDateTime: pdtBufferEnd - 10000,\n        endProgramDateTime: pdtBufferEnd - 5000,\n        duration: 5\n      };\n      const actual = pdtWithinToleranceTest(pdtBufferEnd, tolerance, frag);\n      expect(actual).to.be.false;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"does not skip very small fragments","suites":["Fragment finders","pdtWithinToleranceTest"],"updatePoint":{"line":210,"column":42,"index":8296},"line":210,"code":"    it('does not skip very small fragments', function () {\n      const frag = {\n        programDateTime: pdtBufferEnd + 200,\n        endProgramDateTime: pdtBufferEnd + 300,\n        duration: 0.1,\n        deltaPTS: 0.1\n      };\n      const actual = pdtWithinToleranceTest(pdtBufferEnd, tolerance, frag);\n      expect(actual).to.be.true;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"accounts for tolerance when checking the endProgramDateTime of the fragment","suites":["Fragment finders","pdtWithinToleranceTest"],"updatePoint":{"line":220,"column":83,"index":8681},"line":220,"code":"    it('accounts for tolerance when checking the endProgramDateTime of the fragment', function () {\n      const frag = {\n        programDateTime: pdtBufferEnd,\n        endProgramDateTime: pdtBufferEnd + tolerance * 1000,\n        duration: 5\n      };\n      const actual = pdtWithinToleranceTest(pdtBufferEnd, tolerance, frag);\n      expect(actual).to.be.false;\n    });","file":"unit/controller/fragment-finders.js","skipped":false,"dir":"tests"},{"name":"detects fragments that partially loaded","suites":["FragmentTracker","getPartialFragment"],"updatePoint":{"line":29,"column":47,"index":1221},"line":29,"code":"    it('detects fragments that partially loaded', function () {\n      // Get the partial fragment at a time\n      const partialFragment1 = fragmentTracker.getPartialFragment(0);\n      expect(partialFragment1).to.equal(fragment);\n      const partialFragment2 = fragmentTracker.getPartialFragment(0.5);\n      expect(partialFragment2).to.equal(fragment);\n      const partialFragment3 = fragmentTracker.getPartialFragment(1);\n      expect(partialFragment3).to.equal(fragment);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"returns null when time is not inside partial fragment","suites":["FragmentTracker","getPartialFragment"],"updatePoint":{"line":38,"column":61,"index":1716},"line":38,"code":"    it('returns null when time is not inside partial fragment', function () {\n      const partialFragment = fragmentTracker.getPartialFragment(1.5);\n      expect(partialFragment).to.not.exist;\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"detects fragments that never loaded","suites":["FragmentTracker","getState"],"updatePoint":{"line":59,"column":43,"index":2359},"line":59,"code":"    it('detects fragments that never loaded', function () {\n      const fragment = addFragment();\n      expect(fragmentTracker.getState(fragment)).to.equal(FragmentState.APPENDING);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"detects fragments that loaded properly","suites":["FragmentTracker","getState"],"updatePoint":{"line":63,"column":46,"index":2552},"line":63,"code":"    it('detects fragments that loaded properly', function () {\n      const fragment = addFragment();\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0,\n        endPTS: 1\n      }]));\n      hls.trigger(Events.FRAG_BUFFERED, createFragBufferedData(fragment, true));\n      expect(fragmentTracker.getState(fragment)).to.equal(FragmentState.OK);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"detects partial fragments","suites":["FragmentTracker","getState"],"updatePoint":{"line":72,"column":33,"index":2927},"line":72,"code":"    it('detects partial fragments', function () {\n      const fragment = addFragment();\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0.5,\n        endPTS: 2\n      }]));\n      hls.trigger(Events.FRAG_BUFFERED, createFragBufferedData(fragment, true));\n      expect(fragmentTracker.getState(fragment)).to.equal(FragmentState.PARTIAL);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"removes evicted partial fragments","suites":["FragmentTracker","getState"],"updatePoint":{"line":81,"column":41,"index":3317},"line":81,"code":"    it('removes evicted partial fragments', function () {\n      const fragment = addFragment();\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0.5,\n        endPTS: 2\n      }]));\n      hls.trigger(Events.FRAG_BUFFERED, createFragBufferedData(fragment, true));\n      expect(fragmentTracker.getState(fragment)).to.equal(FragmentState.PARTIAL); // Trim the buffer\n\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0.75,\n        endPTS: 2\n      }]));\n      expect(fragmentTracker.getState(fragment)).to.equal(FragmentState.NOT_LOADED);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"should return buffered fragment if found it","suites":["FragmentTracker","getBufferedFrag"],"updatePoint":{"line":106,"column":51,"index":4182},"line":106,"code":"    it('should return buffered fragment if found it', function () {\n      const fragments = [// 0-1\n      createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]), // 1-2\n      createMockFragment({\n        startPTS: 1,\n        endPTS: 2,\n        sn: 2,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]), // 2-3\n      createMockFragment({\n        startPTS: 2,\n        endPTS: 3,\n        sn: 3,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO])]; // load fragments to buffered\n\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0,\n        endPTS: 3\n      }]));\n      fragments.forEach(fragment => {\n        triggerFragLoadedAndFragBuffered(hls, fragment);\n      });\n      expect(fragmentTracker.getBufferedFrag(0.0, PlaylistLevelType.MAIN)).to.equal(fragments[0]);\n      expect(fragmentTracker.getBufferedFrag(0.1, PlaylistLevelType.MAIN)).to.equal(fragments[0]);\n      expect(fragmentTracker.getBufferedFrag(1.0, PlaylistLevelType.MAIN)).to.equal(fragments[1]);\n      expect(fragmentTracker.getBufferedFrag(1.1, PlaylistLevelType.MAIN)).to.equal(fragments[1]);\n      expect(fragmentTracker.getBufferedFrag(2.0, PlaylistLevelType.MAIN)).to.equal(fragments[2]);\n      expect(fragmentTracker.getBufferedFrag(2.1, PlaylistLevelType.MAIN)).to.equal(fragments[2]);\n      expect(fragmentTracker.getBufferedFrag(2.9, PlaylistLevelType.MAIN)).to.equal(fragments[2]);\n      expect(fragmentTracker.getBufferedFrag(3.0, PlaylistLevelType.MAIN)).to.equal(fragments[2]);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"should return null if found it, but it is not buffered","suites":["FragmentTracker","getBufferedFrag"],"updatePoint":{"line":146,"column":62,"index":5986},"line":146,"code":"    it('should return null if found it, but it is not buffered', function () {\n      const fragments = [// 0-1\n      createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]), // 1-2\n      createMockFragment({\n        startPTS: 1,\n        endPTS: 2,\n        sn: 2,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]), // 2-3\n      createMockFragment({\n        startPTS: 2,\n        endPTS: 3,\n        sn: 3,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO])]; // load fragments, but it is not buffered\n\n      fragments.forEach(fragment => {\n        triggerFragLoaded(hls, fragment);\n      });\n      expect(fragmentTracker.getBufferedFrag(0, PlaylistLevelType.MAIN)).to.not.exist;\n      expect(fragmentTracker.getBufferedFrag(1, PlaylistLevelType.MAIN)).to.not.exist;\n      expect(fragmentTracker.getBufferedFrag(2, PlaylistLevelType.MAIN)).to.not.exist;\n      expect(fragmentTracker.getBufferedFrag(3, PlaylistLevelType.MAIN)).to.not.exist;\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"should return null if anyone does not match the position","suites":["FragmentTracker","getBufferedFrag"],"updatePoint":{"line":178,"column":64,"index":7224},"line":178,"code":"    it('should return null if anyone does not match the position', function () {\n      triggerFragLoadedAndFragBuffered(hls, createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO])); // not found\n\n      expect(fragmentTracker.getBufferedFrag(1.1, PlaylistLevelType.MAIN)).to.not.exist;\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"should return null if fragmentTracker not have any fragments","suites":["FragmentTracker","getBufferedFrag"],"updatePoint":{"line":189,"column":68,"index":7666},"line":189,"code":"    it('should return null if fragmentTracker not have any fragments', function () {\n      expect(fragmentTracker.getBufferedFrag(0, PlaylistLevelType.MAIN)).to.not.exist;\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"should return null if not found match levelType","suites":["FragmentTracker","getBufferedFrag"],"updatePoint":{"line":192,"column":55,"index":7833},"line":192,"code":"    it('should return null if not found match levelType', function () {\n      triggerFragLoadedAndFragBuffered(hls, createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.AUDIO // <= level type is not \"main\"\n\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]));\n      expect(fragmentTracker.getBufferedFrag(0, PlaylistLevelType.MAIN)).to.not.exist;\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"supports audio buffer","suites":["FragmentTracker","onFragBuffered"],"updatePoint":{"line":208,"column":29,"index":8403},"line":208,"code":"    it('supports audio buffer', function () {\n      fragment = createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]);\n      triggerFragLoaded(hls, fragment);\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0,\n        endPTS: 2\n      }], [{\n        startPTS: 0.5,\n        endPTS: 2\n      }]));\n      hls.trigger(Events.FRAG_BUFFERED, createFragBufferedData(fragment, true));\n      expect(fragmentTracker.getState(fragment)).to.equal(FragmentState.PARTIAL);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"supports video buffer","suites":["FragmentTracker","onFragBuffered"],"updatePoint":{"line":227,"column":29,"index":9053},"line":227,"code":"    it('supports video buffer', function () {\n      fragment = createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]);\n      triggerFragLoaded(hls, fragment);\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0.5,\n        endPTS: 2\n      }], [{\n        startPTS: 0,\n        endPTS: 2\n      }]));\n      hls.trigger(Events.FRAG_BUFFERED, createFragBufferedData(fragment, true));\n      expect(fragmentTracker.getState(fragment)).to.equal(FragmentState.PARTIAL);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"supports audio only buffer","suites":["FragmentTracker","onFragBuffered"],"updatePoint":{"line":246,"column":34,"index":9708},"line":246,"code":"    it('supports audio only buffer', function () {\n      fragment = createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.AUDIO\n      }, [ElementaryStreamTypes.AUDIO]);\n      triggerFragLoaded(hls, fragment);\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0.5,\n        endPTS: 2\n      }], [{\n        startPTS: 0,\n        endPTS: 2\n      }]));\n      hls.trigger(Events.FRAG_BUFFERED, createFragBufferedData(fragment, true));\n      expect(fragmentTracker.getState(fragment)).to.equal(FragmentState.OK);\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"should remove fragment","suites":["FragmentTracker","removeFragment"],"updatePoint":{"line":276,"column":30,"index":10584},"line":276,"code":"    it('should remove fragment', function () {\n      const fragment = createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]); // load fragments to buffered\n\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0,\n        endPTS: 1\n      }]));\n      triggerFragLoadedAndFragBuffered(hls, fragment);\n      expect(fragmentTracker.hasFragment(fragment)).to.be.true; // Remove the fragment\n\n      fragmentTracker.removeFragment(fragment); // Check\n\n      expect(fragmentTracker.hasFragment(fragment)).to.be.false;\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"should remove all fragments","suites":["FragmentTracker","removeAllFragments"],"updatePoint":{"line":307,"column":35,"index":11548},"line":307,"code":"    it('should remove all fragments', function () {\n      const fragments = [// 0-1\n      createMockFragment({\n        startPTS: 0,\n        endPTS: 1,\n        sn: 1,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]), // 1-2\n      createMockFragment({\n        startPTS: 1,\n        endPTS: 2,\n        sn: 2,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO]), // 2-3\n      createMockFragment({\n        startPTS: 2,\n        endPTS: 3,\n        sn: 3,\n        level: 1,\n        type: PlaylistLevelType.MAIN\n      }, [ElementaryStreamTypes.AUDIO, ElementaryStreamTypes.VIDEO])]; // load fragments to buffered\n\n      hls.trigger(Events.BUFFER_APPENDED, createBufferAppendedData([{\n        startPTS: 0,\n        endPTS: 3\n      }]));\n      fragments.forEach(fragment => {\n        triggerFragLoadedAndFragBuffered(hls, fragment);\n      }); // before\n\n      fragments.forEach(fragment => {\n        expect(fragmentTracker.hasFragment(fragment), 'has fragments before removing').to.be.true;\n      }); // Remove all fragments\n\n      fragmentTracker.removeAllFragments(); // after\n\n      fragments.forEach(fragment => {\n        expect(fragmentTracker.hasFragment(fragment), 'has not fragments after removing').to.be.false;\n      });\n    });","file":"unit/controller/fragment-tracker.ts","skipped":false,"dir":"tests"},{"name":"should increment the currentTime by a multiple of nudgeRetry and the configured nudge amount","suites":["GapController","_tryNudgeBuffer"],"updatePoint":{"line":25,"column":100,"index":924},"line":25,"code":"    it('should increment the currentTime by a multiple of nudgeRetry and the configured nudge amount', function () {\n      for (let i = 0; i < config.nudgeMaxRetry; i++) {\n        triggerSpy.resetHistory();\n        const expected = media.currentTime + (i + 1) * config.nudgeOffset;\n\n        gapController._tryNudgeBuffer();\n\n        expect(media.currentTime).to.equal(expected);\n        expect(triggerSpy).to.have.been.calledWith(Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.BUFFER_NUDGE_ON_STALL,\n          fatal: false\n        });\n      }\n\n      triggerSpy.resetHistory();\n\n      gapController._tryNudgeBuffer();\n\n      expect(triggerSpy).not.to.have.been.calledWith(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_NUDGE_ON_STALL,\n        fatal: false\n      });\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should not increment the currentTime if the max amount of nudges has been attempted","suites":["GapController","_tryNudgeBuffer"],"updatePoint":{"line":50,"column":91,"index":1773},"line":50,"code":"    it('should not increment the currentTime if the max amount of nudges has been attempted', function () {\n      config.nudgeMaxRetry = 0;\n\n      gapController._tryNudgeBuffer();\n\n      expect(media.currentTime).to.equal(0);\n      expect(triggerSpy).to.have.been.calledWith(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_STALLED_ERROR,\n        fatal: true\n      });\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should report a stall with the current buffer length if it has not already been reported","suites":["GapController","_reportStall"],"updatePoint":{"line":64,"column":96,"index":2244},"line":64,"code":"    it('should report a stall with the current buffer length if it has not already been reported', function () {\n      gapController._reportStall(42);\n\n      expect(triggerSpy).to.have.been.calledWith(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_STALLED_ERROR,\n        fatal: false,\n        buffer: 42\n      });\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should not report a stall if it was already reported","suites":["GapController","_reportStall"],"updatePoint":{"line":74,"column":60,"index":2574},"line":74,"code":"    it('should not report a stall if it was already reported', function () {\n      gapController.stallReported = true;\n\n      gapController._reportStall(42);\n\n      expect(triggerSpy).to.not.have.been.called;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should nudge when stalling close to the buffer end","suites":["GapController","_tryFixBufferStall"],"updatePoint":{"line":83,"column":58,"index":2842},"line":83,"code":"    it('should nudge when stalling close to the buffer end', function () {\n      const mockBufferInfo = {\n        len: 1\n      };\n      const mockStallDuration = (config.highBufferWatchdogPeriod + 1) * 1000;\n      const nudgeStub = sandbox.stub(gapController, '_tryNudgeBuffer');\n\n      gapController._tryFixBufferStall(mockBufferInfo, mockStallDuration);\n\n      expect(nudgeStub).to.have.been.calledOnce;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should not nudge when briefly stalling close to the buffer end","suites":["GapController","_tryFixBufferStall"],"updatePoint":{"line":94,"column":70,"index":3268},"line":94,"code":"    it('should not nudge when briefly stalling close to the buffer end', function () {\n      const mockBufferInfo = {\n        len: 1\n      };\n      const mockStallDuration = config.highBufferWatchdogPeriod / 2 * 1000;\n      const nudgeStub = sandbox.stub(gapController, '_tryNudgeBuffer');\n\n      gapController._tryFixBufferStall(mockBufferInfo, mockStallDuration);\n\n      expect(nudgeStub).to.have.not.been.called;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should not nudge when too far from the buffer end","suites":["GapController","_tryFixBufferStall"],"updatePoint":{"line":105,"column":57,"index":3679},"line":105,"code":"    it('should not nudge when too far from the buffer end', function () {\n      const mockBufferInfo = {\n        len: 0.09\n      };\n      const mockStallDuration = (config.highBufferWatchdogPeriod + 1) * 1000;\n      const nudgeStub = sandbox.stub(gapController, '_tryNudgeBuffer');\n\n      gapController._tryFixBufferStall(mockBufferInfo, mockStallDuration);\n\n      expect(nudgeStub).to.have.not.been.called;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should try to jump partial fragments when detected","suites":["GapController","_tryFixBufferStall"],"updatePoint":{"line":116,"column":58,"index":4096},"line":116,"code":"    it('should try to jump partial fragments when detected', function () {\n      sandbox.stub(gapController.fragmentTracker, 'getPartialFragment').returns({});\n      const skipHoleStub = sandbox.stub(gapController, '_trySkipBufferHole');\n\n      gapController._tryFixBufferStall({\n        len: 0\n      });\n\n      expect(skipHoleStub).to.have.been.calledOnce;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should not try to jump partial fragments when none are detected","suites":["GapController","_tryFixBufferStall"],"updatePoint":{"line":126,"column":71,"index":4475},"line":126,"code":"    it('should not try to jump partial fragments when none are detected', function () {\n      sandbox.stub(gapController.fragmentTracker, 'getPartialFragment').returns(null);\n      const skipHoleStub = sandbox.stub(gapController, '_trySkipBufferHole');\n\n      gapController._tryFixBufferStall({\n        len: 0\n      });\n\n      expect(skipHoleStub).to.have.not.been.called;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should try to fix a stall if expected to be playing","suites":["GapController","media clock polling"],"updatePoint":{"line":215,"column":59,"index":6968},"line":215,"code":"    it('should try to fix a stall if expected to be playing', function () {\n      const fixStallStub = sandbox.stub(gapController, '_tryFixBufferStall');\n      setStalling();\n      gapController.poll(lastCurrentTime); // The first poll call made while stalling just sets stall flags\n\n      expect(gapController.stalled).to.be.a('number');\n      expect(gapController.stallReported).to.be.false;\n      gapController.poll(lastCurrentTime);\n      expect(fixStallStub).to.have.been.calledOnce;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should reset stall flags when no longer stalling","suites":["GapController","media clock polling"],"updatePoint":{"line":225,"column":56,"index":7462},"line":225,"code":"    it('should reset stall flags when no longer stalling', function () {\n      setNotStalling();\n      gapController.stallReported = true;\n      gapController.nudgeRetry = 1;\n      gapController.stalled = 4200;\n      const fixStallStub = sandbox.stub(gapController, '_tryFixBufferStall');\n      gapController.poll(lastCurrentTime);\n      expect(gapController.stalled).to.not.exist;\n      expect(gapController.nudgeRetry).to.equal(0);\n      expect(gapController.stallReported).to.be.false;\n      expect(fixStallStub).to.not.have.been.called;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should not detect stalls when ended, unbuffered or seeking","suites":["GapController","media clock polling"],"updatePoint":{"line":237,"column":66,"index":8021},"line":237,"code":"    it('should not detect stalls when ended, unbuffered or seeking', function () {\n      wallClock.tick(TIMER_STEP_MS); // we need to play a bit to get past the moved check\n\n      tickMediaClock();\n      isStalling = true;\n      mockMedia.ended = true;\n      tickMediaClock();\n      expect(gapController.stalled).to.equal(null, 'ended');\n      wallClock.tick(2 * STALL_HANDLING_RETRY_PERIOD_MS);\n      mockMedia.ended = false;\n      mockTimeRangesData.length = 0;\n      tickMediaClock();\n      expect(gapController.stalled).to.equal(null, 'empty buffer');\n      wallClock.tick(2 * STALL_HANDLING_RETRY_PERIOD_MS);\n      mockTimeRangesData = [[0.1, 0.2], [0.4, 0.5]];\n      mockMedia.seeking = true; // tickMediaClock(100)\n\n      expect(gapController.stalled).to.equal(null, 'seeking');\n      wallClock.tick(2 * STALL_HANDLING_RETRY_PERIOD_MS);\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should trigger reportStall when stalling for 250ms or longer","suites":["GapController","media clock polling"],"updatePoint":{"line":257,"column":68,"index":8875},"line":257,"code":"    it('should trigger reportStall when stalling for 250ms or longer', function () {\n      setStalling();\n      wallClock.tick(250);\n      gapController.stalled = 1;\n      gapController.poll(lastCurrentTime);\n      expect(reportStallSpy).to.not.have.been.called;\n      wallClock.tick(251);\n      gapController.poll(lastCurrentTime);\n      expect(reportStallSpy).to.have.been.calledOnce;\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should not handle a stall (clock not advancing) when media has played before and is now paused","suites":["GapController","media clock polling"],"updatePoint":{"line":267,"column":102,"index":9304},"line":267,"code":"    it('should not handle a stall (clock not advancing) when media has played before and is now paused', function () {\n      wallClock.tick(TIMER_STEP_MS);\n      tickMediaClock();\n      expect(gapController.moved).to.equal(true);\n      expect(gapController.stalled).to.equal(null);\n      mockMedia.paused = true;\n      isStalling = true;\n      tickMediaClock();\n      expect(gapController.stalled).to.equal(null);\n      mockMedia.paused = false;\n      tickMediaClock();\n      expect(gapController.stalled).to.equal(TIMER_STEP_MS);\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should skip any initial gap before playing on the second poll (so that Chrome can jump the gap first)","suites":["GapController","media clock polling"],"updatePoint":{"line":280,"column":109,"index":9850},"line":280,"code":"    it('should skip any initial gap before playing on the second poll (so that Chrome can jump the gap first)', function () {\n      wallClock.tick(TIMER_STEP_MS);\n      mockMedia.currentTime = 0;\n      isStalling = true;\n      tickMediaClock();\n      expect(gapController.moved).to.equal(false);\n      expect(gapController.stalled).to.equal(1234);\n      expect(mockMedia.currentTime).to.equal(0);\n      tickMediaClock();\n      expect(gapController.moved).to.equal(true);\n      expect(gapController.stalled).to.equal(null);\n      expect(mockMedia.currentTime).to.equal(0.1 + SKIP_BUFFER_RANGE_START);\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"should skip any initial gap when not having played yet on second poll","suites":["GapController","media clock polling"],"updatePoint":{"line":293,"column":77,"index":10426},"line":293,"code":"    it('should skip any initial gap when not having played yet on second poll', function () {\n      mockMedia.currentTime = 0;\n      mockTimeRangesData = [[0.9, 10]];\n      gapController.poll(0);\n      gapController.poll(0);\n      expect(mockMedia.currentTime).to.equal(0.9 + SKIP_BUFFER_RANGE_START);\n    });","file":"unit/controller/gap-controller.js","skipped":false,"dir":"tests"},{"name":"returns 0 when unknown / detached / prior to timeupdate","suites":["LatencyController","latency"],"updatePoint":{"line":70,"column":63,"index":2203},"line":70,"code":"    it('returns 0 when unknown / detached / prior to timeupdate', function () {\n      expect(latencyController.latency).to.equal(0);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"is the distance between currentTime and the live edge plus playlist age","suites":["LatencyController","latency"],"updatePoint":{"line":73,"column":79,"index":2360},"line":73,"code":"    it('is the distance between currentTime and the live edge plus playlist age', function () {\n      levelDetails.edge = 25;\n      expect(latencyController.latency).to.equal(25);\n      media.currentTime = 15;\n      expect(latencyController.latency).to.equal(10);\n      media.currentTime = 20;\n      expect(latencyController.latency).to.equal(5);\n      levelDetails.age = 1;\n      expect(latencyController.latency).to.equal(6);\n      levelDetails.edge = 30;\n      levelDetails.age = 0;\n      expect(latencyController.latency).to.equal(10);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns liveMaxLatencyDuration when set","suites":["LatencyController","maxLatency"],"updatePoint":{"line":88,"column":47,"index":2921},"line":88,"code":"    it('returns liveMaxLatencyDuration when set', function () {\n      latencyController['config'].liveMaxLatencyDuration = 30;\n      expect(latencyController.maxLatency).to.equal(30);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns liveMaxLatencyDurationCount * targetduration after level update","suites":["LatencyController","maxLatency"],"updatePoint":{"line":92,"column":79,"index":3145},"line":92,"code":"    it('returns liveMaxLatencyDurationCount * targetduration after level update', function () {\n      latencyController['config'].liveMaxLatencyDurationCount = 3;\n      expect(latencyController.maxLatency).to.equal(0);\n      levelDetails.age = 0;\n      expect(latencyController.maxLatency).to.equal(15);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns null before level update","suites":["LatencyController","targetLatency"],"updatePoint":{"line":100,"column":40,"index":3466},"line":100,"code":"    it('returns null before level update', function () {\n      expect(latencyController.targetLatency).to.equal(null);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns liveSyncDuration if set after level update","suites":["LatencyController","targetLatency"],"updatePoint":{"line":103,"column":58,"index":3611},"line":103,"code":"    it('returns liveSyncDuration if set after level update', function () {\n      latencyController['config'].liveSyncDuration = 12;\n      levelDetails.age = 0;\n      expect(latencyController.targetLatency).to.equal(12);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns targetduration * liveSyncDurationCount if set after level update","suites":["LatencyController","targetLatency"],"updatePoint":{"line":108,"column":80,"index":3861},"line":108,"code":"    it('returns targetduration * liveSyncDurationCount if set after level update', function () {\n      latencyController['config'].liveSyncDurationCount = 2;\n      levelDetails.age = 0;\n      expect(latencyController.targetLatency).to.equal(10);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns holdBack when set in playlist after level update","suites":["LatencyController","targetLatency"],"updatePoint":{"line":113,"column":64,"index":4099},"line":113,"code":"    it('returns holdBack when set in playlist after level update', function () {\n      levelDetails.holdBack = 8;\n      levelDetails.age = 0;\n      expect(latencyController.targetLatency).to.equal(8);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns partHoldBack in lowLatencyMode when set in playlist after level update","suites":["LatencyController","targetLatency"],"updatePoint":{"line":118,"column":86,"index":4330},"line":118,"code":"    it('returns partHoldBack in lowLatencyMode when set in playlist after level update', function () {\n      levelDetails.holdBack = 8;\n      levelDetails.partHoldBack = 3;\n      levelDetails.age = 0;\n      latencyController['config'].lowLatencyMode = false;\n      expect(latencyController.targetLatency).to.equal(8);\n      latencyController['config'].lowLatencyMode = true;\n      expect(latencyController.targetLatency).to.equal(3);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"liveSyncDuration overrides holdBack when set by user","suites":["LatencyController","targetLatency"],"updatePoint":{"line":127,"column":60,"index":4746},"line":127,"code":"    it('liveSyncDuration overrides holdBack when set by user', function () {\n      hls.userConfig.liveSyncDuration = 12;\n      latencyController['config'].liveSyncDuration = 12;\n      levelDetails.holdBack = 8;\n      levelDetails.age = 0;\n      expect(latencyController.targetLatency).to.equal(12);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"liveSyncDurationCount overrides holdBack when set by user","suites":["LatencyController","targetLatency"],"updatePoint":{"line":134,"column":65,"index":5058},"line":134,"code":"    it('liveSyncDurationCount overrides holdBack when set by user', function () {\n      hls.userConfig.liveSyncDurationCount = 2;\n      latencyController['config'].liveSyncDurationCount = 2;\n      levelDetails.holdBack = 8;\n      levelDetails.age = 0;\n      expect(latencyController.targetLatency).to.equal(10);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"adds a second of latency for each stall up to targetduration","suites":["LatencyController","targetLatency"],"updatePoint":{"line":141,"column":68,"index":5381},"line":141,"code":"    it('adds a second of latency for each stall up to targetduration', function () {\n      latencyController['config'].lowLatencyMode = true;\n      levelDetails.targetduration = 3.5;\n      levelDetails.partHoldBack = 3;\n      levelDetails.age = 0;\n      expect(latencyController.targetLatency).to.equal(3);\n      latencyController['stallCount'] = 1;\n      expect(latencyController.targetLatency).to.equal(4);\n      latencyController['stallCount'] += 1;\n      expect(latencyController.targetLatency).to.equal(5);\n      latencyController['stallCount'] += 1;\n      expect(latencyController.targetLatency).to.equal(6);\n      latencyController['stallCount'] += 1;\n      expect(latencyController.targetLatency).to.equal(6.5);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns null before level update","suites":["LatencyController","liveSyncPosition"],"updatePoint":{"line":158,"column":40,"index":6132},"line":158,"code":"    it('returns null before level update', function () {\n      expect(latencyController.liveSyncPosition).to.equal(null);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns target currentTime based on edge and targetLatency","suites":["LatencyController","liveSyncPosition"],"updatePoint":{"line":161,"column":66,"index":6288},"line":161,"code":"    it('returns target currentTime based on edge and targetLatency', function () {\n      latencyController['config'].liveSyncDuration = 12;\n      levelDetails.edge = 60;\n      expect(latencyController.liveSyncPosition).to.equal(48);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"accounts for level update age up to 3 target durations","suites":["LatencyController","liveSyncPosition"],"updatePoint":{"line":166,"column":62,"index":6525},"line":166,"code":"    it('accounts for level update age up to 3 target durations', function () {\n      levelDetails.targetduration = 5;\n      levelDetails.holdBack = 15;\n      levelDetails.edge = 60;\n      expect(latencyController.liveSyncPosition).to.equal(45);\n      levelDetails.age = 5;\n      expect(latencyController.liveSyncPosition).to.equal(50);\n      levelDetails.age = 10;\n      expect(latencyController.liveSyncPosition).to.equal(55);\n      levelDetails.age = 20;\n      expect(latencyController.liveSyncPosition).to.equal(55);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"accounts for level update age up to 3 part targets in low latency mode","suites":["LatencyController","liveSyncPosition"],"updatePoint":{"line":178,"column":78,"index":7069},"line":178,"code":"    it('accounts for level update age up to 3 part targets in low latency mode', function () {\n      latencyController['config'].lowLatencyMode = true;\n      levelDetails.partTarget = 1;\n      levelDetails.partHoldBack = 3;\n      levelDetails.edge = 60;\n      expect(latencyController.liveSyncPosition).to.equal(57);\n      levelDetails.age = 1;\n      expect(latencyController.liveSyncPosition).to.equal(58);\n      levelDetails.age = 2;\n      expect(latencyController.liveSyncPosition).to.equal(59);\n      levelDetails.age = 5;\n      expect(latencyController.liveSyncPosition).to.equal(59);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns 0 before level update","suites":["LatencyController","edgeStalled"],"updatePoint":{"line":193,"column":37,"index":7672},"line":193,"code":"    it('returns 0 before level update', function () {\n      expect(latencyController.edgeStalled).to.equal(0);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns the age seconds past 3 target durations","suites":["LatencyController","edgeStalled"],"updatePoint":{"line":196,"column":55,"index":7809},"line":196,"code":"    it('returns the age seconds past 3 target durations', function () {\n      levelDetails.targetduration = 5;\n      levelDetails.holdBack = 15;\n      levelDetails.age = 0;\n      expect(latencyController.edgeStalled).to.equal(0);\n      levelDetails.age = 1;\n      expect(latencyController.edgeStalled).to.equal(0);\n      levelDetails.age = 20;\n      expect(latencyController.edgeStalled).to.equal(5);\n      levelDetails.age = 25;\n      expect(latencyController.edgeStalled).to.equal(10);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"returns the age seconds past 3 part targets in low latency mode","suites":["LatencyController","edgeStalled"],"updatePoint":{"line":208,"column":71,"index":8321},"line":208,"code":"    it('returns the age seconds past 3 part targets in low latency mode', function () {\n      latencyController['config'].lowLatencyMode = true;\n      levelDetails.partTarget = 1;\n      levelDetails.partHoldBack = 3;\n      levelDetails.age = 0;\n      expect(latencyController.edgeStalled).to.equal(0);\n      levelDetails.age = 1;\n      expect(latencyController.edgeStalled).to.equal(0);\n      levelDetails.age = 5;\n      expect(latencyController.edgeStalled).to.equal(2);\n      levelDetails.age = 6;\n      expect(latencyController.edgeStalled).to.equal(3);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"increases playbackRate when latency is greater than target latency on timeupdate","suites":["LatencyController","when maxLiveSyncPlaybackRate is set"],"updatePoint":{"line":226,"column":88,"index":9073},"line":226,"code":"    it('increases playbackRate when latency is greater than target latency on timeupdate', function () {\n      levelDetails.edge = 12;\n      mockTimeRanges = [[0, 12]];\n      levelDetails.holdBack = 6;\n      media.currentTime = 6;\n      expect(media.playbackRate).to.equal(1);\n      media.currentTime = 5;\n      expect(media.playbackRate).to.be.within(1.3, 1.4);\n      media.currentTime = 4;\n      expect(media.playbackRate).to.be.within(1.6, 1.7);\n      media.currentTime = 1;\n      expect(media.playbackRate).to.be.within(1.9, 2);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"resets latency estimates when a new manifest is loading","suites":["LatencyController","when maxLiveSyncPlaybackRate is set"],"updatePoint":{"line":239,"column":63,"index":9589},"line":239,"code":"    it('resets latency estimates when a new manifest is loading', function () {\n      expect(latencyController.latency).to.equal(0);\n      levelDetails.edge = 25;\n      expect(latencyController.latency).to.equal(25);\n      latencyController['onManifestLoading']();\n      expect(latencyController.latency).to.equal(0);\n    });","file":"unit/controller/latency-controller.ts","skipped":false,"dir":"tests"},{"name":"should be STOPPED when it is initialized","suites":["StreamController","StreamController"],"updatePoint":{"line":50,"column":48,"index":2010},"line":50,"code":"    it('should be STOPPED when it is initialized', function () {\n      assertStreamControllerStopped(streamController);\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not start when controller does not have level data","suites":["StreamController","StreamController"],"updatePoint":{"line":53,"column":65,"index":2155},"line":53,"code":"    it('should not start when controller does not have level data', function () {\n      streamController.startLoad(1);\n      assertStreamControllerStopped(streamController);\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should start without levels data","suites":["StreamController","StreamController"],"updatePoint":{"line":57,"column":40,"index":2312},"line":57,"code":"    it('should start without levels data', function () {\n      const manifest = `#EXTM3U\n  #EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,RESOLUTION=848x360,NAME=\"480\"\n  http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n      const {\n        levels: levelsParsed\n      } = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com'); // load levels data\n\n      const levels = levelsParsed.map(levelParsed => new Level(levelParsed));\n      streamController['onManifestParsed'](Events.MANIFEST_PARSED, {\n        altAudio: false,\n        audio: false,\n        audioTracks: [],\n        firstLevel: 0,\n        // @ts-ignore\n        stats: undefined,\n        subtitleTracks: [],\n        video: false,\n        levels\n      });\n      streamController.startLoad(1);\n      assertStreamControllerStarted(streamController);\n      streamController.stopLoad();\n      assertStreamControllerStopped(streamController);\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"PTS search choosing wrong fragment (3 instead of 2) after level loaded","suites":["StreamController","SN Searching"],"updatePoint":{"line":104,"column":78,"index":4434},"line":104,"code":"    it('PTS search choosing wrong fragment (3 instead of 2) after level loaded', function () {\n      const foundFragment = streamController['getNextFragment'](bufferEnd, levelDetails);\n      const resultSN = foundFragment ? foundFragment.sn : -1;\n      expect(foundFragment).to.equal(mockFragments[3], 'Expected sn 3, found sn segment ' + resultSN);\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"PTS search choosing the right segment if fragPrevious is not available","suites":["StreamController","SN Searching"],"updatePoint":{"line":109,"column":78,"index":4792},"line":109,"code":"    it('PTS search choosing the right segment if fragPrevious is not available', function () {\n      streamController['fragPrevious'] = null;\n      const foundFragment = streamController['getNextFragment'](bufferEnd, levelDetails);\n      const resultSN = foundFragment ? foundFragment.sn : -1;\n      expect(foundFragment).to.equal(mockFragments[3], 'Expected sn 3, found sn segment ' + resultSN);\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"returns the last fragment if the stream is fully buffered","suites":["StreamController","SN Searching"],"updatePoint":{"line":115,"column":65,"index":5184},"line":115,"code":"    it('returns the last fragment if the stream is fully buffered', function () {\n      const actual = streamController['getNextFragment'](end, levelDetails);\n      expect(actual).to.equal(mockFragments[mockFragments.length - 1]);\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"does PDT search, choosing fragment after level loaded","suites":["StreamController","SN Searching","getInitialLiveFragment","with program-date-time"],"updatePoint":{"line":138,"column":65,"index":6315},"line":138,"code":"        it('does PDT search, choosing fragment after level loaded', function () {\n          const foundFragment = streamController['getInitialLiveFragment'](levelDetails, mockFragments);\n          expect(foundFragment).to.equal(mockFragments[4], `Expected sn 4, found sn segment ${foundFragment ? foundFragment.sn : -1}`);\n        });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"finds the next fragment to load based on the last fragment buffered","suites":["StreamController","SN Searching","getInitialLiveFragment","without program-date-time"],"updatePoint":{"line":160,"column":79,"index":7425},"line":160,"code":"        it('finds the next fragment to load based on the last fragment buffered', function () {\n          fragPrevious.sn = 0;\n          let foundFragment = streamController['getInitialLiveFragment'](levelDetails, fragmentsWithoutPdt);\n          expect(foundFragment).to.equal(fragmentsWithoutPdt[1], `Expected sn 1, found sn segment ${foundFragment ? foundFragment.sn : -1}`);\n          fragPrevious.sn = 3;\n          foundFragment = streamController['getInitialLiveFragment'](levelDetails, fragmentsWithoutPdt);\n          expect(foundFragment).to.equal(fragmentsWithoutPdt[4], `Expected sn 4, found sn segment ${foundFragment ? foundFragment.sn : -1}`);\n        });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"finds the first fragment to load when starting or re-syncing with a live stream","suites":["StreamController","SN Searching","getInitialLiveFragment","without program-date-time"],"updatePoint":{"line":168,"column":91,"index":8105},"line":168,"code":"        it('finds the first fragment to load when starting or re-syncing with a live stream', function () {\n          streamController['fragPrevious'] = null;\n          const foundFragment = streamController['getInitialLiveFragment'](levelDetails, fragmentsWithoutPdt);\n          expect(foundFragment).to.equal(fragmentsWithoutPdt[2], `Expected sn 2, found sn segment ${foundFragment ? foundFragment.sn : -1}`);\n        });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"finds the fragment with the same cc when there is no sn match","suites":["StreamController","SN Searching","getInitialLiveFragment","without program-date-time"],"updatePoint":{"line":173,"column":73,"index":8511},"line":173,"code":"        it('finds the fragment with the same cc when there is no sn match', function () {\n          fragPrevious.cc = 0;\n          const foundFragment = streamController['getInitialLiveFragment'](levelDetails, fragmentsWithoutPdt);\n          expect(foundFragment).to.equal(fragmentsWithoutPdt[0], `Expected sn 0, found sn segment ${foundFragment ? foundFragment.sn : -1}`);\n        });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"returns null when there is no cc match with the previous segment","suites":["StreamController","SN Searching","getInitialLiveFragment","without program-date-time"],"updatePoint":{"line":178,"column":76,"index":8900},"line":178,"code":"        it('returns null when there is no cc match with the previous segment', function () {\n          fragPrevious.cc = 2;\n          const foundFragment = streamController['getInitialLiveFragment'](levelDetails, fragmentsWithoutPdt);\n          expect(foundFragment).to.equal(null);\n        });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should load a complete fragment which has not been previously appended","suites":["StreamController","fragment loading"],"updatePoint":{"line":223,"column":78,"index":10288},"line":223,"code":"    it('should load a complete fragment which has not been previously appended', function () {\n      fragStateStub(FragmentState.NOT_LOADED);\n      streamController['loadFragment'](frag, levelDetails, 0);\n      assertLoadingState(frag);\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should load a partial fragment","suites":["StreamController","fragment loading"],"updatePoint":{"line":228,"column":38,"index":10493},"line":228,"code":"    it('should load a partial fragment', function () {\n      fragStateStub(FragmentState.PARTIAL);\n      streamController['loadFragment'](frag, levelDetails, 0);\n      assertLoadingState(frag);\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not load a fragment which has completely & successfully loaded","suites":["StreamController","fragment loading"],"updatePoint":{"line":233,"column":77,"index":10734},"line":233,"code":"    it('should not load a fragment which has completely & successfully loaded', function () {\n      fragStateStub(FragmentState.OK);\n      streamController['loadFragment'](frag, levelDetails, 0);\n      assertNotLoadingState();\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not load a fragment while it is appending","suites":["StreamController","fragment loading"],"updatePoint":{"line":238,"column":56,"index":10948},"line":238,"code":"    it('should not load a fragment while it is appending', function () {\n      fragStateStub(FragmentState.APPENDING);\n      streamController['loadFragment'](frag, levelDetails, 0);\n      assertNotLoadingState();\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not throw when media is undefined","suites":["StreamController","checkBuffer"],"updatePoint":{"line":268,"column":48,"index":11722},"line":268,"code":"    it('should not throw when media is undefined', function () {\n      streamController['media'] = null;\n      streamController['checkBuffer']();\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should seek to start pos when metadata has not yet been loaded","suites":["StreamController","checkBuffer"],"updatePoint":{"line":272,"column":70,"index":11898},"line":272,"code":"    it('should seek to start pos when metadata has not yet been loaded', function () {\n      // @ts-ignore\n      const seekStub = sandbox.stub(streamController, 'seekToStartPos');\n      streamController['loadedmetadata'] = false;\n      streamController['checkBuffer']();\n      expect(seekStub).to.have.been.calledOnce;\n      expect(streamController['loadedmetadata']).to.be.true;\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not seek to start pos when metadata has been loaded","suites":["StreamController","checkBuffer"],"updatePoint":{"line":280,"column":66,"index":12282},"line":280,"code":"    it('should not seek to start pos when metadata has been loaded', function () {\n      // @ts-ignore\n      const seekStub = sandbox.stub(streamController, 'seekToStartPos');\n      streamController['loadedmetadata'] = true;\n      streamController['checkBuffer']();\n      expect(seekStub).to.have.not.been.called;\n      expect(streamController['loadedmetadata']).to.be.true;\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not seek to start pos when nothing has been buffered","suites":["StreamController","checkBuffer"],"updatePoint":{"line":288,"column":67,"index":12666},"line":288,"code":"    it('should not seek to start pos when nothing has been buffered', function () {\n      // @ts-ignore\n      const seekStub = sandbox.stub(streamController, 'seekToStartPos');\n      streamController['media'].buffered.length = 0;\n      streamController['checkBuffer']();\n      expect(seekStub).to.have.not.been.called;\n      expect(streamController['loadedmetadata']).to.be.false;\n    });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should seek to startPosition when startPosition is not buffered & the media is not seeking","suites":["StreamController","checkBuffer","seekToStartPos"],"updatePoint":{"line":297,"column":100,"index":13133},"line":297,"code":"      it('should seek to startPosition when startPosition is not buffered & the media is not seeking', function () {\n        streamController['startPosition'] = 5;\n        streamController['seekToStartPos']();\n        expect(streamController['media'].currentTime).to.equal(5);\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not seek to startPosition when it is buffered","suites":["StreamController","checkBuffer","seekToStartPos"],"updatePoint":{"line":302,"column":62,"index":13382},"line":302,"code":"      it('should not seek to startPosition when it is buffered', function () {\n        streamController['startPosition'] = 5;\n        streamController['media'].currentTime = 5;\n        streamController['seekToStartPos']();\n        expect(streamController['media'].currentTime).to.equal(5);\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not start when controller does not have level data","suites":["StreamController","checkBuffer","startLoad"],"updatePoint":{"line":314,"column":67,"index":13859},"line":314,"code":"      it('should not start when controller does not have level data', function () {\n        streamController['levels'] = null;\n        streamController.startLoad(-1);\n        assertStreamControllerStopped(streamController);\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should start when controller has level data","suites":["StreamController","checkBuffer","startLoad"],"updatePoint":{"line":319,"column":53,"index":14079},"line":319,"code":"      it('should start when controller has level data', function () {\n        streamController.startLoad(5);\n        assertStreamControllerStarted(streamController);\n        expect(streamController['nextLoadPosition']).to.equal(5);\n        expect(streamController['startPosition']).to.equal(5);\n        expect(streamController['lastCurrentTime']).to.equal(5);\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should set startPosition to lastCurrentTime if unset and lastCurrentTime > 0","suites":["StreamController","checkBuffer","startLoad"],"updatePoint":{"line":326,"column":86,"index":14482},"line":326,"code":"      it('should set startPosition to lastCurrentTime if unset and lastCurrentTime > 0', function () {\n        streamController['lastCurrentTime'] = 5;\n        streamController.startLoad(-1);\n        assertStreamControllerStarted(streamController);\n        expect(streamController['nextLoadPosition']).to.equal(5);\n        expect(streamController['startPosition']).to.equal(5);\n        expect(streamController['lastCurrentTime']).to.equal(5);\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should set startPosition when passed as an argument","suites":["StreamController","checkBuffer","startLoad"],"updatePoint":{"line":334,"column":61,"index":14910},"line":334,"code":"      it('should set startPosition when passed as an argument', function () {\n        streamController.startLoad(123);\n        assertStreamControllerStarted(streamController);\n        expect(streamController['nextLoadPosition']).to.equal(123);\n        expect(streamController['startPosition']).to.equal(123);\n        expect(streamController['lastCurrentTime']).to.equal(123);\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should set startPosition to -1 when passed as an argument","suites":["StreamController","checkBuffer","startLoad"],"updatePoint":{"line":341,"column":67,"index":15302},"line":341,"code":"      it('should set startPosition to -1 when passed as an argument', function () {\n        streamController.startLoad(-1);\n        assertStreamControllerStarted(streamController);\n        expect(streamController['nextLoadPosition']).to.equal(-1);\n        expect(streamController['startPosition']).to.equal(-1);\n        expect(streamController['lastCurrentTime']).to.equal(-1);\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"sets up for a bandwidth test if starting at auto","suites":["StreamController","checkBuffer","startLoad"],"updatePoint":{"line":348,"column":58,"index":15681},"line":348,"code":"      it('sets up for a bandwidth test if starting at auto', function () {\n        streamController['startFragRequested'] = false;\n        hls.startLevel = -1;\n        streamController.startLoad(-1);\n        expect(streamController['level']).to.equal(0);\n        expect(streamController['bitrateTest']).to.be.true;\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should not signal a bandwidth test if config.testBandwidth is false","suites":["StreamController","checkBuffer","startLoad"],"updatePoint":{"line":355,"column":77,"index":16025},"line":355,"code":"      it('should not signal a bandwidth test if config.testBandwidth is false', function () {\n        streamController['startFragRequested'] = false;\n        hls.startLevel = -1;\n        hls.nextAutoLevel = 3;\n        hls.config.testBandwidth = false;\n        streamController.startLoad(-1);\n        expect(streamController['level']).to.equal(hls.nextAutoLevel);\n        expect(streamController['bitrateTest']).to.be.false;\n      });","file":"unit/controller/stream-controller.ts","skipped":false,"dir":"tests"},{"name":"should update tracks list","suites":["SubtitleStreamController","onSubtitleTracksUpdate"],"updatePoint":{"line":46,"column":33,"index":1243},"line":46,"code":"    it('should update tracks list', function () {\n      expect(subtitleStreamController.levels).to.have.lengthOf(2);\n      expect(subtitleStreamController.levels[0]).to.deep.include(tracksMock[0]);\n      expect(subtitleStreamController.levels[1]).to.deep.include(tracksMock[1]);\n    });","file":"unit/controller/subtitle-stream-controller.js","skipped":false,"dir":"tests"},{"name":"should call setInterval if details available","suites":["SubtitleStreamController","onSubtitleTrackSwitch"],"updatePoint":{"line":61,"column":52,"index":1886},"line":61,"code":"    it('should call setInterval if details available', function () {\n      expect(subtitleStreamController.setInterval).to.have.been.calledOnce;\n    });","file":"unit/controller/subtitle-stream-controller.js","skipped":false,"dir":"tests"},{"name":"should call clearInterval if no tracks present","suites":["SubtitleStreamController","onSubtitleTrackSwitch"],"updatePoint":{"line":64,"column":54,"index":2041},"line":64,"code":"    it('should call clearInterval if no tracks present', function () {\n      subtitleStreamController.levels = [];\n      hls.trigger(Events.SUBTITLE_TRACK_SWITCH, {\n        id: 0\n      });\n      expect(subtitleStreamController.clearInterval).to.have.been.calledOnce;\n    });","file":"unit/controller/subtitle-stream-controller.js","skipped":false,"dir":"tests"},{"name":"should call clearInterval if new track id === -1","suites":["SubtitleStreamController","onSubtitleTrackSwitch"],"updatePoint":{"line":71,"column":56,"index":2318},"line":71,"code":"    it('should call clearInterval if new track id === -1', function () {\n      hls.trigger(Events.SUBTITLE_TRACK_SWITCH, {\n        id: -1\n      });\n      expect(subtitleStreamController.clearInterval).to.have.been.calledOnce;\n    });","file":"unit/controller/subtitle-stream-controller.js","skipped":false,"dir":"tests"},{"name":"should handle the event if the data matches the current track","suites":["SubtitleStreamController","onSubtitleTrackLoaded"],"updatePoint":{"line":84,"column":69,"index":2847},"line":84,"code":"    it('should handle the event if the data matches the current track', function () {\n      const details = {\n        foo: 'bar'\n      };\n      subtitleStreamController.currentTrackId = 1;\n      hls.trigger(Events.SUBTITLE_TRACK_LOADED, {\n        id: 1,\n        details: details\n      });\n      expect(subtitleStreamController.levels[1].details).to.equal(details);\n    });","file":"unit/controller/subtitle-stream-controller.js","skipped":false,"dir":"tests"},{"name":"should ignore the event if the data does not match the current track","suites":["SubtitleStreamController","onSubtitleTrackLoaded"],"updatePoint":{"line":95,"column":76,"index":3227},"line":95,"code":"    it('should ignore the event if the data does not match the current track', function () {\n      const details = {\n        foo: 'bar'\n      };\n      subtitleStreamController.currentTrackId = 0;\n      hls.trigger(Events.SUBTITLE_TRACK_LOADED, {\n        id: 1,\n        details\n      });\n      expect(subtitleStreamController.levels[0].details).to.not.equal(details);\n      expect(subtitleStreamController.setInterval).to.not.have.been.called;\n    });","file":"unit/controller/subtitle-stream-controller.js","skipped":false,"dir":"tests"},{"name":"should ignore the event if there are no tracks, or the id is not within the tracks array","suites":["SubtitleStreamController","onSubtitleTrackLoaded"],"updatePoint":{"line":107,"column":96,"index":3698},"line":107,"code":"    it('should ignore the event if there are no tracks, or the id is not within the tracks array', function () {\n      subtitleStreamController.levels = [];\n      subtitleStreamController.trackId = 0;\n      const details = {\n        foo: 'bar'\n      };\n      hls.trigger(Events.SUBTITLE_TRACK_LOADED, {\n        id: 0,\n        details\n      });\n      expect(subtitleStreamController.levels[0]).to.not.exist;\n      expect(subtitleStreamController.setInterval).to.not.have.been.called;\n    });","file":"unit/controller/subtitle-stream-controller.js","skipped":false,"dir":"tests"},{"name":"nulls fragPrevious when seeking away from fragCurrent","suites":["SubtitleStreamController","onMediaSeeking"],"updatePoint":{"line":122,"column":61,"index":4203},"line":122,"code":"    it('nulls fragPrevious when seeking away from fragCurrent', function () {\n      subtitleStreamController.fragCurrent = {\n        start: 1000,\n        duration: 10,\n        loader: {\n          abort: () => {\n            this.state.aborted = true;\n          },\n          stats: {\n            aborted: false\n          }\n        }\n      };\n      subtitleStreamController.fragPrevious = {};\n      subtitleStreamController.onMediaSeeking();\n      expect(subtitleStreamController.fragPrevious).to.not.exist;\n    });","file":"unit/controller/subtitle-stream-controller.js","skipped":false,"dir":"tests"},{"name":"should set subtitleTrack to -1 if disabled","suites":["SubtitleTrackController","onTextTrackChanged"],"updatePoint":{"line":59,"column":50,"index":1868},"line":59,"code":"    it('should set subtitleTrack to -1 if disabled', function () {\n      expect(subtitleTrackController.subtitleTrack).to.equal(-1);\n      videoElement.textTracks[0].mode = 'disabled';\n      subtitleTrackController.onTextTracksChanged();\n      expect(subtitleTrackController.subtitleTrack).to.equal(-1);\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should set subtitleTrack to 0 if hidden","suites":["SubtitleTrackController","onTextTrackChanged"],"updatePoint":{"line":65,"column":47,"index":2177},"line":65,"code":"    it('should set subtitleTrack to 0 if hidden', function () {\n      expect(subtitleTrackController.subtitleTrack).to.equal(-1);\n      videoElement.textTracks[0].mode = 'hidden';\n      subtitleTrackController.onTextTracksChanged();\n      expect(subtitleTrackController.subtitleTrack).to.equal(0);\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should set subtitleTrack to 0 if showing","suites":["SubtitleTrackController","onTextTrackChanged"],"updatePoint":{"line":71,"column":48,"index":2484},"line":71,"code":"    it('should set subtitleTrack to 0 if showing', function () {\n      expect(subtitleTrackController.subtitleTrack).to.equal(-1);\n      videoElement.textTracks[0].mode = 'showing';\n      subtitleTrackController.onTextTracksChanged();\n      expect(subtitleTrackController.subtitleTrack).to.equal(0);\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should set active text track mode to showing","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":79,"column":52,"index":2848},"line":79,"code":"    it('should set active text track mode to showing', function () {\n      videoElement.textTracks[0].mode = 'disabled';\n      subtitleTrackController.subtitleDisplay = true;\n      subtitleTrackController.subtitleTrack = 0;\n      expect(videoElement.textTracks[0].mode).to.equal('showing');\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should set active text track mode to hidden","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":85,"column":51,"index":3146},"line":85,"code":"    it('should set active text track mode to hidden', function () {\n      videoElement.textTracks[0].mode = 'disabled';\n      subtitleTrackController.subtitleDisplay = false;\n      subtitleTrackController.subtitleTrack = 0;\n      expect(videoElement.textTracks[0].mode).to.equal('hidden');\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should disable previous track","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":91,"column":37,"index":3430},"line":91,"code":"    it('should disable previous track', function () {\n      // Change active track without triggering setSubtitleTrackInternal\n      subtitleTrackController.trackId = 0; // Change active track and trigger setSubtitleTrackInternal\n\n      subtitleTrackController.subtitleTrack = 1;\n      expect(videoElement.textTracks[0].mode).to.equal('disabled');\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should trigger SUBTITLE_TRACK_SWITCH","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":98,"column":44,"index":3793},"line":98,"code":"    it('should trigger SUBTITLE_TRACK_SWITCH', function () {\n      const triggerSpy = sandbox.spy(subtitleTrackController.hls, 'trigger');\n      subtitleTrackController.canLoad = true;\n      subtitleTrackController.trackId = 0;\n      subtitleTrackController.subtitleTrack = 1;\n      expect(triggerSpy).to.have.been.calledTwice;\n      expect(triggerSpy.firstCall).to.have.been.calledWith('hlsSubtitleTrackSwitch', {\n        id: 1,\n        groupId: 'default-text-group',\n        name: 'English',\n        type: 'SUBTITLES',\n        url: 'bar'\n      });\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should trigger SUBTITLE_TRACK_LOADING if the track has no details","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":112,"column":73,"index":4380},"line":112,"code":"    it('should trigger SUBTITLE_TRACK_LOADING if the track has no details', function () {\n      const triggerSpy = sandbox.spy(subtitleTrackController.hls, 'trigger');\n      subtitleTrackController.canLoad = true;\n      subtitleTrackController.trackId = 0;\n      subtitleTrackController.subtitleTrack = 1;\n      expect(triggerSpy).to.have.been.calledTwice;\n      expect(triggerSpy.secondCall).to.have.been.calledWith('hlsSubtitleTrackLoading', {\n        url: 'bar',\n        id: 1,\n        groupId: 'default-text-group',\n        deliveryDirectives: null\n      });\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should not trigger SUBTITLE_TRACK_LOADING if the track has details and is not live","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":125,"column":90,"index":4968},"line":125,"code":"    it('should not trigger SUBTITLE_TRACK_LOADING if the track has details and is not live', function () {\n      const triggerSpy = sandbox.spy(subtitleTrackController.hls, 'trigger');\n      subtitleTrackController.trackId = 1;\n      subtitleTrackController.subtitleTrack = 0;\n      expect(triggerSpy).to.have.been.calledOnce;\n      expect(triggerSpy.firstCall).to.have.been.calledWith('hlsSubtitleTrackSwitch', {\n        id: 0,\n        groupId: 'default-text-group',\n        name: 'English',\n        type: 'SUBTITLES',\n        url: 'baz'\n      });\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should trigger SUBTITLE_TRACK_SWITCH if passed -1","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":138,"column":57,"index":5492},"line":138,"code":"    it('should trigger SUBTITLE_TRACK_SWITCH if passed -1', function () {\n      const triggerSpy = sandbox.spy(subtitleTrackController.hls, 'trigger');\n      subtitleTrackController.trackId = 0;\n      subtitleTrackController.subtitleTrack = -1;\n      expect(triggerSpy.firstCall).to.have.been.calledWith('hlsSubtitleTrackSwitch', {\n        id: -1\n      });\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should trigger SUBTITLE_TRACK_LOADING if the track is live, even if it has details","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":146,"column":90,"index":5890},"line":146,"code":"    it('should trigger SUBTITLE_TRACK_LOADING if the track is live, even if it has details', function () {\n      const triggerSpy = sandbox.spy(subtitleTrackController.hls, 'trigger');\n      subtitleTrackController.canLoad = true;\n      subtitleTrackController.trackId = 0;\n      subtitleTrackController.subtitleTrack = 2;\n      expect(triggerSpy).to.have.been.calledTwice;\n      expect(triggerSpy.secondCall).to.have.been.calledWith('hlsSubtitleTrackLoading', {\n        url: 'foo',\n        id: 2,\n        groupId: 'default-text-group',\n        deliveryDirectives: null\n      });\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should do nothing if called with out of bound indices","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":159,"column":61,"index":6449},"line":159,"code":"    it('should do nothing if called with out of bound indices', function () {\n      const clearReloadSpy = sandbox.spy(subtitleTrackController, 'clearTimer');\n      subtitleTrackController.subtitleTrack = 5;\n      subtitleTrackController.subtitleTrack = -2;\n      expect(clearReloadSpy).to.have.not.been.called;\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should do nothing if called with a non-number","suites":["SubtitleTrackController","set subtitleTrack"],"updatePoint":{"line":165,"column":53,"index":6761},"line":165,"code":"    it('should do nothing if called with a non-number', function () {\n      subtitleTrackController.subtitleTrack = undefined;\n      subtitleTrackController.subtitleTrack = null;\n    });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should not throw an exception if trackId is out of the mediaElement text track bounds","suites":["SubtitleTrackController","set subtitleTrack","toggleTrackModes"],"updatePoint":{"line":171,"column":95,"index":7141},"line":171,"code":"      it('should not throw an exception if trackId is out of the mediaElement text track bounds', function () {\n        subtitleTrackController.trackId = 3;\n        subtitleTrackController.toggleTrackModes(1);\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should disable all textTracks if called with -1","suites":["SubtitleTrackController","set subtitleTrack","toggleTrackModes"],"updatePoint":{"line":175,"column":57,"index":7323},"line":175,"code":"      it('should disable all textTracks if called with -1', function () {\n        [].slice.call(videoElement.textTracks).forEach(t => {\n          t.mode = 'showing';\n        });\n        subtitleTrackController.toggleTrackModes(-1);\n        [].slice.call(videoElement.textTracks).forEach(t => {\n          expect(t.mode).to.equal('disabled');\n        });\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"should not throw an exception if the mediaElement does not exist","suites":["SubtitleTrackController","set subtitleTrack","toggleTrackModes"],"updatePoint":{"line":184,"column":74,"index":7703},"line":184,"code":"      it('should not throw an exception if the mediaElement does not exist', function () {\n        subtitleTrackController.media = null;\n        subtitleTrackController.toggleTrackModes(1);\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"exits early if the loaded track does not match the requested track","suites":["SubtitleTrackController","set subtitleTrack","onSubtitleTrackLoaded"],"updatePoint":{"line":190,"column":76,"index":7965},"line":190,"code":"      it('exits early if the loaded track does not match the requested track', function () {\n        const playlistLoadedSpy = sandbox.spy(subtitleTrackController, 'playlistLoaded');\n        subtitleTrackController.canLoad = true;\n        subtitleTrackController.trackId = 1;\n        const mockLoadedEvent = {\n          id: 999,\n          details: {\n            foo: 'bar'\n          },\n          stats: new LoadStats()\n        };\n        subtitleTrackController.onSubtitleTrackLoaded(Events.SUBTITLE_TRACK_LOADED, mockLoadedEvent);\n        expect(subtitleTrackController.timer).to.equal(-1);\n        expect(playlistLoadedSpy).to.have.not.been.called;\n        mockLoadedEvent.id = 0;\n        subtitleTrackController.onSubtitleTrackLoaded(Events.SUBTITLE_TRACK_LOADED, mockLoadedEvent);\n        expect(subtitleTrackController.timer).to.equal(-1);\n        expect(playlistLoadedSpy).to.have.not.been.called;\n        mockLoadedEvent.id = 1;\n        subtitleTrackController.onSubtitleTrackLoaded(Events.SUBTITLE_TRACK_LOADED, mockLoadedEvent);\n        expect(subtitleTrackController.timer).to.equal(-1);\n        expect(playlistLoadedSpy).to.have.been.calledOnce;\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"does not set the reload timer if the canLoad flag is set to false","suites":["SubtitleTrackController","set subtitleTrack","onSubtitleTrackLoaded"],"updatePoint":{"line":213,"column":75,"index":9131},"line":213,"code":"      it('does not set the reload timer if the canLoad flag is set to false', function () {\n        const details = new LevelDetails('');\n        subtitleTrackController.canLoad = false;\n        subtitleTrackController.trackId = 1;\n        subtitleTrackController.onSubtitleTrackLoaded(Events.SUBTITLE_TRACK_LOADED, {\n          id: 1,\n          details,\n          stats: new LoadStats()\n        });\n        expect(subtitleTrackController.timer).to.equal(-1);\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"sets the live reload timer if the level is live","suites":["SubtitleTrackController","set subtitleTrack","onSubtitleTrackLoaded"],"updatePoint":{"line":224,"column":57,"index":9582},"line":224,"code":"      it('sets the live reload timer if the level is live', function () {\n        const details = new LevelDetails('');\n        subtitleTrackController.canLoad = true;\n        subtitleTrackController.trackId = 1;\n        subtitleTrackController.onSubtitleTrackLoaded(Events.SUBTITLE_TRACK_LOADED, {\n          id: 1,\n          details,\n          stats: new LoadStats()\n        });\n        expect(subtitleTrackController.timer).to.exist;\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"stops the live reload timer if the level is not live","suites":["SubtitleTrackController","set subtitleTrack","onSubtitleTrackLoaded"],"updatePoint":{"line":235,"column":62,"index":10033},"line":235,"code":"      it('stops the live reload timer if the level is not live', function () {\n        const details = new LevelDetails('');\n        details.live = false;\n        subtitleTrackController.trackId = 1;\n        subtitleTrackController.timer = self.setTimeout(() => {}, 0);\n        subtitleTrackController.onSubtitleTrackLoaded(Events.SUBTITLE_TRACK_LOADED, {\n          id: 1,\n          details,\n          stats: new LoadStats()\n        });\n        expect(subtitleTrackController.timer).to.equal(-1);\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"stops loading","suites":["SubtitleTrackController","set subtitleTrack","stopLoad"],"updatePoint":{"line":249,"column":23,"index":10548},"line":249,"code":"      it('stops loading', function () {\n        const clearReloadSpy = sandbox.spy(subtitleTrackController, 'clearTimer');\n        subtitleTrackController.stopLoad();\n        expect(subtitleTrackController.canLoad).to.be.false;\n        expect(clearReloadSpy).to.have.been.calledOnce;\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"starts loading","suites":["SubtitleTrackController","set subtitleTrack","startLoad"],"updatePoint":{"line":257,"column":24,"index":10891},"line":257,"code":"      it('starts loading', function () {\n        const loadCurrentTrackSpy = sandbox.spy(subtitleTrackController, 'loadPlaylist');\n        subtitleTrackController.startLoad();\n        expect(subtitleTrackController.canLoad).to.be.true;\n        expect(loadCurrentTrackSpy).to.have.been.calledOnce;\n      });","file":"unit/controller/subtitle-track-controller.js","skipped":false,"dir":"tests"},{"name":"has the createNonNativeTrack method","suites":["Non-Native TimelineController functions"],"updatePoint":{"line":16,"column":41,"index":554},"line":16,"code":"  it('has the createNonNativeTrack method', function () {\n    expect(timelineController.createNonNativeTrack).to.be.a('function');\n  });","file":"unit/controller/timeline-controller-nonnative.js","skipped":false,"dir":"tests"},{"name":"has the createNativeTrack method","suites":["Non-Native TimelineController functions"],"updatePoint":{"line":19,"column":38,"index":688},"line":19,"code":"  it('has the createNativeTrack method', function () {\n    expect(timelineController.createNativeTrack).to.be.a('function');\n  });","file":"unit/controller/timeline-controller-nonnative.js","skipped":false,"dir":"tests"},{"name":"calls createNonNativeTrack when renderTextTracksNatively is false","suites":["Non-Native TimelineController functions"],"updatePoint":{"line":22,"column":71,"index":852},"line":22,"code":"  it('calls createNonNativeTrack when renderTextTracksNatively is false', function () {\n    const nonNativeSpy = sinon.spy();\n    timelineController.createNonNativeTrack = nonNativeSpy;\n    timelineController.createCaptionsTrack('foo');\n    expect(nonNativeSpy).to.have.been.calledOnce;\n  });","file":"unit/controller/timeline-controller-nonnative.js","skipped":false,"dir":"tests"},{"name":"fires the NON_NATIVE_TEXT_TRACKS_FOUND event","suites":["Non-Native TimelineController functions"],"updatePoint":{"line":28,"column":50,"index":1124},"line":28,"code":"  it('fires the NON_NATIVE_TEXT_TRACKS_FOUND event', function (done) {\n    hls.on(Hls.Events.NON_NATIVE_TEXT_TRACKS_FOUND, (event, data) => {\n      const track = data.tracks[0];\n      expect(track.kind).to.equal('captions');\n      expect(track.default).to.equal(false);\n      expect(track.label).to.equal(timelineController.captionsProperties.textTrack1.label);\n      expect(timelineController.nonNativeCaptionsTracks.textTrack1).to.equal(track);\n      done();\n    });\n    timelineController.createNonNativeTrack('textTrack1');\n  });","file":"unit/controller/timeline-controller-nonnative.js","skipped":false,"dir":"tests"},{"name":"does not create a non native track if the track does not have any defined properties","suites":["Non-Native TimelineController functions"],"updatePoint":{"line":39,"column":90,"index":1698},"line":39,"code":"  it('does not create a non native track if the track does not have any defined properties', function () {\n    const triggerSpy = sinon.spy(hls, 'trigger');\n    timelineController.createNonNativeTrack('foo');\n    expect(triggerSpy).to.have.not.been.called;\n  });","file":"unit/controller/timeline-controller-nonnative.js","skipped":false,"dir":"tests"},{"name":"should reuse text track when track order is same between manifests","suites":["TimelineController","reuse text track"],"updatePoint":{"line":15,"column":74,"index":612},"line":15,"code":"    it('should reuse text track when track order is same between manifests', function () {\n      hls.subtitleTrackController = {\n        subtitleDisplay: false\n      };\n      timelineController.onSubtitleTracksUpdated(Events.SUBTITLE_TRACKS_UPDATED, {\n        subtitleTracks: [{\n          id: 0,\n          name: 'en'\n        }, {\n          id: 1,\n          name: 'ru'\n        }]\n      }); // text tracks model contain only newly added manifest tracks, in same order as in manifest\n\n      expect(timelineController.textTracks[0].label).to.equal('en');\n      expect(timelineController.textTracks[1].label).to.equal('ru');\n      expect(timelineController.textTracks.length).to.equal(2); // text tracks of the media contain the newly added text tracks\n\n      expect(timelineController.media.textTracks[0].label).to.equal('en');\n      expect(timelineController.media.textTracks[1].label).to.equal('ru');\n      expect(timelineController.media.textTracks.length).to.equal(2);\n      timelineController.onSubtitleTracksUpdated(Events.SUBTITLE_TRACKS_UPDATED, {\n        subtitleTracks: [{\n          id: 0,\n          name: 'en'\n        }, {\n          id: 1,\n          name: 'ru'\n        }]\n      }); // text tracks model contain only newly added manifest tracks, in same order\n\n      expect(timelineController.textTracks[0].label).to.equal('en');\n      expect(timelineController.textTracks[1].label).to.equal('ru');\n      expect(timelineController.textTracks.length).to.equal(2); // text tracks of the media contain the previously added text tracks, in same order as the manifest order\n\n      expect(timelineController.media.textTracks[0].label).to.equal('en');\n      expect(timelineController.media.textTracks[1].label).to.equal('ru');\n      expect(timelineController.media.textTracks.length).to.equal(2);\n    });","file":"unit/controller/timeline-controller.js","skipped":false,"dir":"tests"},{"name":"should reuse text track when track order is not same between manifests","suites":["TimelineController","reuse text track"],"updatePoint":{"line":54,"column":78,"index":2420},"line":54,"code":"    it('should reuse text track when track order is not same between manifests', function () {\n      hls.subtitleTrackController = {\n        subtitleDisplay: false\n      };\n      timelineController.onSubtitleTracksUpdated(Events.MANIFEST_LOADED, {\n        subtitleTracks: [{\n          id: 0,\n          name: 'en'\n        }, {\n          id: 1,\n          name: 'ru'\n        }]\n      }); // text tracks model contain only newly added manifest tracks, in same order as in manifest\n\n      expect(timelineController.textTracks[0].label).to.equal('en');\n      expect(timelineController.textTracks[1].label).to.equal('ru');\n      expect(timelineController.textTracks.length).to.equal(2); // text tracks of the media contain the newly added text tracks\n\n      expect(timelineController.media.textTracks[0].label).to.equal('en');\n      expect(timelineController.media.textTracks[1].label).to.equal('ru');\n      expect(timelineController.media.textTracks.length).to.equal(2);\n      timelineController.onSubtitleTracksUpdated(Events.MANIFEST_LOADED, {\n        subtitleTracks: [{\n          id: 0,\n          name: 'ru'\n        }, {\n          id: 1,\n          name: 'en'\n        }]\n      }); // text tracks model contain only newly added manifest tracks, in same order\n\n      expect(timelineController.textTracks[0].label).to.equal('ru');\n      expect(timelineController.textTracks[1].label).to.equal('en');\n      expect(timelineController.textTracks.length).to.equal(2); // text tracks of the media contain the previously added text tracks).to.equal(in opposite order to the manifest order\n\n      expect(timelineController.media.textTracks[0].label).to.equal('en');\n      expect(timelineController.media.textTracks[1].label).to.equal('ru');\n      expect(timelineController.media.textTracks.length).to.equal(2);\n    });","file":"unit/controller/timeline-controller.js","skipped":false,"dir":"tests"},{"name":"should parse fractional seconds correctly regardless of length","suites":["VTTParser","parseTimeStamp"],"updatePoint":{"line":12,"column":70,"index":488},"line":12,"code":"    it('should parse fractional seconds correctly regardless of length', function () {\n      assertTimeStampValue('00:00:01.5', 1.5);\n      assertTimeStampValue('00:00:01.05', 1.05);\n      assertTimeStampValue('00:00:01.005', 1.005);\n      assertTimeStampValue('00:00:01.', 1);\n    });","file":"unit/controller/vttparser.ts","skipped":false,"dir":"tests"},{"name":"should parse h:m:s","suites":["VTTParser","parseTimeStamp"],"updatePoint":{"line":18,"column":26,"index":730},"line":18,"code":"    it('should parse h:m:s', function () {\n      assertTimeStampValue('01:01:01', 3661);\n    });","file":"unit/controller/vttparser.ts","skipped":false,"dir":"tests"},{"name":"should parse h>59:m and h>59:m.ms","suites":["VTTParser","parseTimeStamp"],"updatePoint":{"line":21,"column":41,"index":842},"line":21,"code":"    it('should parse h>59:m and h>59:m.ms', function () {\n      assertTimeStampValue('60:01', 216060);\n      assertTimeStampValue('60:01.55', 216060.55);\n    });","file":"unit/controller/vttparser.ts","skipped":false,"dir":"tests"},{"name":"should parse m:s and m:s.ms","suites":["VTTParser","parseTimeStamp"],"updatePoint":{"line":25,"column":35,"index":998},"line":25,"code":"    it('should parse m:s and m:s.ms', function () {\n      assertTimeStampValue('01:01', 61);\n      assertTimeStampValue('01:01.09', 61.09);\n    });","file":"unit/controller/vttparser.ts","skipped":false,"dir":"tests"},{"name":"is a no-op when the last byte is 0","suites":["AESDecryptor","removePadding()"],"updatePoint":{"line":5,"column":42,"index":244},"line":5,"code":"    it('is a no-op when the last byte is 0', function () {\n      const arr = new Uint8Array([1, 2, 3, 0]);\n      expect(removePadding(arr)).to.equal(arr);\n    });","file":"unit/crypt/aes-decryptor.js","skipped":false,"dir":"tests"},{"name":"removes 1 byte when the last byte is 1","suites":["AESDecryptor","removePadding()"],"updatePoint":{"line":9,"column":46,"index":411},"line":9,"code":"    it('removes 1 byte when the last byte is 1', function () {\n      const arr = new Uint8Array([1, 2, 3, 1]);\n      expect(Array.from(new Uint8Array(removePadding(arr)))).to.deep.equal([1, 2, 3]);\n    });","file":"unit/crypt/aes-decryptor.js","skipped":false,"dir":"tests"},{"name":"removes 3 bytes when the last byte is 3","suites":["AESDecryptor","removePadding()"],"updatePoint":{"line":13,"column":47,"index":618},"line":13,"code":"    it('removes 3 bytes when the last byte is 3', function () {\n      const arr = new Uint8Array([1, 2, 3, 3]);\n      expect(Array.from(new Uint8Array(removePadding(arr)))).to.deep.equal([1]);\n    });","file":"unit/crypt/aes-decryptor.js","skipped":false,"dir":"tests"},{"name":"removes 4 bytes when the last byte is 4","suites":["AESDecryptor","removePadding()"],"updatePoint":{"line":17,"column":47,"index":819},"line":17,"code":"    it('removes 4 bytes when the last byte is 4', function () {\n      const arr = new Uint8Array([1, 2, 3, 4]);\n      expect(Array.from(new Uint8Array(removePadding(arr)))).to.deep.equal([]);\n    });","file":"unit/crypt/aes-decryptor.js","skipped":false,"dir":"tests"},{"name":"should trigger a MEDIA_ERROR event if sample index is invalid","suites":["getAudioConfig"],"updatePoint":{"line":7,"column":67,"index":388},"line":7,"code":"  it('should trigger a MEDIA_ERROR event if sample index is invalid', function () {\n    const observer = {\n      trigger: sinon.spy()\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x34; // sampling_frequency_index = 14, which is a reserved value\n\n    expect(getAudioConfig(observer, data, 0, 'mp4a.40.29')).to.not.exist;\n    expect(observer.trigger).to.have.been.calledOnce;\n    expect(observer.trigger.args[0][1].type).to.equal(ErrorTypes.MEDIA_ERROR);\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config for firefox if the specified sampling frequency > 24kHz","suites":["getAudioConfig"],"updatePoint":{"line":21,"column":88,"index":992},"line":21,"code":"  it('should return audio config for firefox if the specified sampling frequency > 24kHz', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'firefox')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x00; // sampling_frequency_index = 0\n\n    expect(getAudioConfig(observer, data, 0, 'mp4a.40.29')).to.deep.equal({\n      config: [16, 0],\n      samplerate: 96000,\n      channelCount: 0,\n      codec: 'mp4a.40.2',\n      manifestCodec: 'mp4a.40.29'\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config with a different extension sampling index for Firefox if sampling freq is low","suites":["getAudioConfig"],"updatePoint":{"line":39,"column":110,"index":1642},"line":39,"code":"  it('should return audio config with a different extension sampling index for Firefox if sampling freq is low', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'Firefox')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x28; // sampling_frequency_index = 10\n\n    expect(getAudioConfig(observer, data, 0, 'mp4a.40.29')).to.deep.equal({\n      config: [45, 3, 136, 0],\n      samplerate: 11025,\n      channelCount: 0,\n      codec: 'mp4a.40.5',\n      manifestCodec: 'mp4a.40.29'\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config for Android","suites":["getAudioConfig"],"updatePoint":{"line":57,"column":44,"index":2235},"line":57,"code":"  it('should return audio config for Android', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'Android')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x28; // sampling_frequency_index = 10\n\n    expect(getAudioConfig(observer, data, 0, 'mp4a.40.29')).to.deep.equal({\n      config: [21, 0],\n      samplerate: 11025,\n      channelCount: 0,\n      codec: 'mp4a.40.2',\n      manifestCodec: 'mp4a.40.29'\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config for Chrome","suites":["getAudioConfig"],"updatePoint":{"line":75,"column":43,"index":2819},"line":75,"code":"  it('should return audio config for Chrome', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'Chrome')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x28; // sampling_frequency_index = 10\n\n    expect(getAudioConfig(observer, data, 0, 'mp4a.40.29')).to.deep.equal({\n      config: [45, 3, 136, 0],\n      samplerate: 11025,\n      channelCount: 0,\n      codec: 'mp4a.40.5',\n      manifestCodec: 'mp4a.40.29'\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config for Chrome if there is no audio codec","suites":["getAudioConfig"],"updatePoint":{"line":93,"column":70,"index":3437},"line":93,"code":"  it('should return audio config for Chrome if there is no audio codec', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'Chrome')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x28; // sampling_frequency_index = 10\n\n    expect(getAudioConfig(observer, data, 0)).to.deep.equal({\n      config: [45, 3, 136, 0],\n      samplerate: 11025,\n      channelCount: 0,\n      codec: 'mp4a.40.5',\n      manifestCodec: undefined\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config for Chrome if there is no audio codec and freq is high enough","suites":["getAudioConfig"],"updatePoint":{"line":111,"column":94,"index":4062},"line":111,"code":"  it('should return audio config for Chrome if there is no audio codec and freq is high enough', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'Chrome')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x08; // sampling_frequency_index = 2\n\n    expect(getAudioConfig(observer, data, 0)).to.deep.equal({\n      config: [41, 1, 8, 0],\n      samplerate: 64000,\n      channelCount: 0,\n      codec: 'mp4a.40.5',\n      manifestCodec: undefined\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config for Chrome if audio codec is \"mp4a.40.5\"","suites":["getAudioConfig"],"updatePoint":{"line":129,"column":73,"index":4663},"line":129,"code":"  it('should return audio config for Chrome if audio codec is \"mp4a.40.5\"', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'Chrome')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x28; // sampling_frequency_index = 10\n\n    expect(getAudioConfig(observer, data, 0, 'mp4a.40.5')).to.deep.equal({\n      config: [45, 3, 136, 0],\n      samplerate: 11025,\n      channelCount: 0,\n      codec: 'mp4a.40.5',\n      manifestCodec: 'mp4a.40.5'\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config for Chrome if audio codec is \"mp4a.40.2\"","suites":["getAudioConfig"],"updatePoint":{"line":147,"column":73,"index":5282},"line":147,"code":"  it('should return audio config for Chrome if audio codec is \"mp4a.40.2\"', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'Chrome')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x28; // sampling_frequency_index = 10\n\n    data[3] = 0x40; // channel = 1\n\n    expect(getAudioConfig(observer, data, 0, 'mp4a.40.2')).to.deep.equal({\n      config: [21, 8],\n      samplerate: 11025,\n      channelCount: 1,\n      codec: 'mp4a.40.2',\n      manifestCodec: 'mp4a.40.2'\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return audio config for Vivaldi","suites":["getAudioConfig"],"updatePoint":{"line":167,"column":44,"index":5900},"line":167,"code":"  it('should return audio config for Vivaldi', function () {\n    const observer = {\n      trigger: sinon.stub(navigator, 'userAgent').get(() => 'Vivaldi')\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x08; // sampling_frequency_index = 2\n\n    expect(getAudioConfig(observer, data, 0, 'mp4a.40.2')).to.deep.equal({\n      config: [17, 0],\n      samplerate: 64000,\n      channelCount: 0,\n      codec: 'mp4a.40.2',\n      manifestCodec: 'mp4a.40.2'\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return true if the specified data slot is of header pattern","suites":["isHeaderPattern"],"updatePoint":{"line":187,"column":72,"index":6556},"line":187,"code":"  it('should return true if the specified data slot is of header pattern', function () {\n    const data = new Uint8Array(new ArrayBuffer(16));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[14] = 0xff;\n    data[15] = 0xf9; // ID = 1 (MPEG-2), layer = 00, protection_absent = 1\n\n    expect(isHeaderPattern(data, 0)).to.be.true;\n    expect(isHeaderPattern(data, 14)).to.be.true;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if the specific data is not of header pattern","suites":["isHeaderPattern"],"updatePoint":{"line":198,"column":71,"index":6995},"line":198,"code":"  it('should return false if the specific data is not of header pattern', function () {\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[1] = 0xff;\n    data[2] = 0xff;\n    expect(isHeaderPattern(data, 0)).to.be.false;\n    expect(isHeaderPattern(data, 2)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return 7 if there is no CRC","suites":["getHeaderLength"],"updatePoint":{"line":207,"column":40,"index":7297},"line":207,"code":"  it('should return 7 if there is no CRC', function () {\n    const data = new Uint8Array(new ArrayBuffer(2));\n    data[0] = 0xff;\n    data[1] = 0xf9; // ID = 1 (MPEG-2), layer = 00, protection_absent = 1\n\n    expect(getHeaderLength(data, 0)).to.equal(7);\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return 9 if there is CRC","suites":["getHeaderLength"],"updatePoint":{"line":214,"column":37,"index":7555},"line":214,"code":"  it('should return 9 if there is CRC', function () {\n    const data = new Uint8Array(new ArrayBuffer(2));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    expect(getHeaderLength(data, 0)).to.equal(9);\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should extract frame_length field and return its value","suites":["getFullFrameLength"],"updatePoint":{"line":223,"column":60,"index":7885},"line":223,"code":"  it('should extract frame_length field and return its value', function () {\n    const data = new Uint8Array(new ArrayBuffer(8));\n    data[0] = 0xff;\n    data[1] = 0xf9;\n    data[2] = 0x00;\n    data[3] = 0x02; // the last 2 bits belong to frame_length\n\n    data[4] = 0x00; // all 8 bits belong to frame_length\n\n    data[5] = 0xe0; // the first 3 bits belong to frame_length\n\n    expect(getFullFrameLength(data, 0)).to.equal(4103);\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return true if there are enough data and it is of header pattern","suites":["isHeader"],"updatePoint":{"line":238,"column":77,"index":8378},"line":238,"code":"  it('should return true if there are enough data and it is of header pattern', function () {\n    const data = new Uint8Array(new ArrayBuffer(8));\n    data[0] = 0xff;\n    data[1] = 0xf9;\n    expect(isHeader(data, 0)).to.be.true;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if there are not enough data","suites":["isHeader"],"updatePoint":{"line":244,"column":54,"index":8590},"line":244,"code":"  it('should return false if there are not enough data', function () {\n    const data = new Uint8Array(new ArrayBuffer(1));\n    expect(isHeader(data, 0)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if it is not of header pattern","suites":["isHeader"],"updatePoint":{"line":248,"column":56,"index":8765},"line":248,"code":"  it('should return false if it is not of header pattern', function () {\n    const data = new Uint8Array(new ArrayBuffer(8));\n    expect(isHeader(data, 0)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if `isHeader` fails","suites":["probe"],"updatePoint":{"line":254,"column":45,"index":8965},"line":254,"code":"  it('should return false if `isHeader` fails', function () {\n    const data = new Uint8Array(new ArrayBuffer(8));\n    expect(probe(data, 0)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return true if it contains the entire ADTS frame","suites":["probe"],"updatePoint":{"line":258,"column":61,"index":9142},"line":258,"code":"  it('should return true if it contains the entire ADTS frame', function () {\n    const data = new Uint8Array(new ArrayBuffer(16));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x02; // frame_length is 16\n\n    expect(probe(data, 0)).to.be.true;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return true if it contains an valid following frame header","suites":["probe"],"updatePoint":{"line":267,"column":71,"index":9438},"line":267,"code":"  it('should return true if it contains an valid following frame header', function () {\n    const data = new Uint8Array(new ArrayBuffer(18));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x02; // frame_length is 16\n\n    data[16] = 0xff;\n    data[17] = 0xf0;\n    expect(probe(data, 0)).to.be.true;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if it contains the entire ADTS frame with an incomplete following header","suites":["probe"],"updatePoint":{"line":278,"column":98,"index":9803},"line":278,"code":"  it('should return false if it contains the entire ADTS frame with an incomplete following header', function () {\n    const data = new Uint8Array(new ArrayBuffer(17));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x02; // frame_length is 16\n\n    expect(probe(data, 0)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if it contains the entire ADTS frame with an invalid following frame header","suites":["probe"],"updatePoint":{"line":287,"column":101,"index":10130},"line":287,"code":"  it('should return false if it contains the entire ADTS frame with an invalid following frame header', function () {\n    const data = new Uint8Array(new ArrayBuffer(18));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x02; // frame_length is 16\n\n    expect(probe(data, 0)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if it does not contain the entire header","suites":["probe"],"updatePoint":{"line":296,"column":66,"index":10422},"line":296,"code":"  it('should return false if it does not contain the entire header', function () {\n    const data = new Uint8Array(new ArrayBuffer(2));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    expect(probe(data, 0)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if the header is broken","suites":["probe"],"updatePoint":{"line":303,"column":49,"index":10653},"line":303,"code":"  it('should return false if the header is broken', function () {\n    const data = new Uint8Array(new ArrayBuffer(9));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x00; // frame_length is 0\n\n    expect(probe(data, 0)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return false if it does not contain the entire header (2)","suites":["probe"],"updatePoint":{"line":312,"column":70,"index":10947},"line":312,"code":"  it('should return false if it does not contain the entire header (2)', function () {\n    const data = new Uint8Array(new ArrayBuffer(8));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x00; // frame_length is 6\n\n    data[5] = 0xc0;\n    data[6] = 0xff;\n    data[7] = 0xf0;\n    expect(probe(data, 0)).to.be.false;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should do nothing with track if track.samplerate is defined","suites":["initTrackConfig"],"updatePoint":{"line":326,"column":65,"index":11342},"line":326,"code":"  it('should do nothing with track if track.samplerate is defined', function () {\n    const track = {\n      samplerate: 64000\n    };\n    initTrackConfig(track);\n    expect(track).to.deep.equal({\n      samplerate: 64000\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should call `getAudioConfig` and change track if track.samplerate is undefined","suites":["initTrackConfig"],"updatePoint":{"line":335,"column":84,"index":11594},"line":335,"code":"  it('should call `getAudioConfig` and change track if track.samplerate is undefined', function () {\n    const track = {};\n    const observer = {\n      trigger: sinon.spy()\n    };\n    const data = new Uint8Array(new ArrayBuffer(4));\n    data[0] = 0xff;\n    data[1] = 0xf0; // ID = 0 (MPEG-4), layer = 00, protection_absent = 0\n\n    data[2] = 0x28; // sampling_frequency_index = 10\n\n    initTrackConfig(track, observer, data, 0, 'mp4a.40.29');\n    expect(track).to.deep.equal({\n      config: [45, 3, 136, 0],\n      samplerate: 11025,\n      channelCount: 0,\n      codec: 'mp4a.40.5',\n      manifestCodec: 'mp4a.40.29'\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should compute frame duration from sample rate","suites":["getFrameDuration"],"updatePoint":{"line":357,"column":52,"index":12239},"line":357,"code":"  it('should compute frame duration from sample rate', function () {\n    expect(getFrameDuration(64000)).to.equal(1440);\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return parsed result if data contains the entire frame","suites":["parseFrameHeader"],"updatePoint":{"line":362,"column":67,"index":12428},"line":362,"code":"  it('should return parsed result if data contains the entire frame', function () {\n    const data = new Uint8Array(new ArrayBuffer(16));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x02; // frame_length is 16\n\n    expect(parseFrameHeader(data, 0, 0, 0, 0)).to.deep.equal({\n      headerLength: 9,\n      frameLength: 7,\n      stamp: 0\n    });\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should return undefined if frame length is 0","suites":["parseFrameHeader"],"updatePoint":{"line":375,"column":50,"index":12795},"line":375,"code":"  it('should return undefined if frame length is 0', function () {\n    const data = new Uint8Array(new ArrayBuffer(12));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x00; // frame_length is 0\n\n    expect(parseFrameHeader(data, 0, 0, 0, 0)).to.be.undefined;\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should append the found sample to track and return some useful information","suites":["appendFrame"],"updatePoint":{"line":386,"column":80,"index":13166},"line":386,"code":"  it('should append the found sample to track and return some useful information', function () {\n    const track = {\n      samplerate: 64000,\n      samples: [],\n      len: 0\n    };\n    const data = new Uint8Array(new ArrayBuffer(16));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x02; // frame_length is 16\n\n    const frame = appendFrame(track, data, 0, 0, 0);\n    expect(frame, JSON.stringify(frame)).to.deep.equal({\n      sample: {\n        unit: data.subarray(9, 16),\n        pts: 0\n      },\n      length: 16,\n      missing: 0\n    });\n    expect(track.samples.length).to.equal(1);\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should not append sample when incomplete (aac overflow or progressive streaming)","suites":["appendFrame"],"updatePoint":{"line":409,"column":86,"index":13797},"line":409,"code":"  it('should not append sample when incomplete (aac overflow or progressive streaming)', function () {\n    const track = {\n      samplerate: 64000,\n      samples: [],\n      len: 0\n    };\n    const data = new Uint8Array(new ArrayBuffer(20));\n    data[0] = 0xff;\n    data[1] = 0xf0; // protection_absent = 0\n\n    data[4] = 0x03; // frame_length is 24\n\n    const frame = appendFrame(track, data, 0, 0, 0);\n    const unit = new Uint8Array(15);\n    unit.set(data.subarray(9, 20), 0);\n    expect(frame, JSON.stringify(frame)).to.deep.equal({\n      sample: {\n        unit,\n        pts: 0\n      },\n      length: 24,\n      missing: 4\n    });\n    expect(track.samples.length).to.equal(0);\n  });","file":"unit/demuxer/adts.js","skipped":false,"dir":"tests"},{"name":"should use the timestamp if it is valid","suites":["BaseAudioDemuxer","initPTSFn"],"updatePoint":{"line":5,"column":47,"index":227},"line":5,"code":"    it('should use the timestamp if it is valid', function (done) {\n      expect(initPTSFn(1, -1)).to.be.above(0);\n      expect(initPTSFn(5, -1)).to.be.above(0);\n      expect(initPTSFn(0, -1)).to.be.eq(0);\n      done();\n    });","file":"unit/demuxer/base-audio-demuxer.ts","skipped":false,"dir":"tests"},{"name":"should use the timeOffset if timestamp is undefined or not finite","suites":["BaseAudioDemuxer","initPTSFn"],"updatePoint":{"line":11,"column":73,"index":481},"line":11,"code":"    it('should use the timeOffset if timestamp is undefined or not finite', function (done) {\n      expect(initPTSFn(undefined, -1)).to.be.below(0);\n      expect(initPTSFn(NaN, -1)).to.be.below(0);\n      expect(initPTSFn(Infinity, -1)).to.be.below(0);\n      done();\n    });","file":"unit/demuxer/base-audio-demuxer.ts","skipped":false,"dir":"tests"},{"name":"should return a bandwidth estimate","suites":["Hls","bandwidthEstimate"],"updatePoint":{"line":6,"column":42,"index":236},"line":6,"code":"    it('should return a bandwidth estimate', function () {\n      const MOCKED_ESTIMATE = 2000;\n      const hls = new Hls();\n      hls.abrController = {\n        bwEstimator: {\n          getEstimate: () => MOCKED_ESTIMATE\n        }\n      };\n      expect(hls.bandwidthEstimate).to.equal(MOCKED_ESTIMATE);\n    });","file":"unit/hls.js","skipped":false,"dir":"tests"},{"name":"should return a default bandwidth estimate","suites":["Hls","bandwidthEstimate"],"updatePoint":{"line":16,"column":50,"index":554},"line":16,"code":"    it('should return a default bandwidth estimate', function () {\n      const hls = new Hls();\n      expect(hls.bandwidthEstimate).to.equal(hlsDefaultConfig.abrEwmaDefaultEstimate);\n    });","file":"unit/hls.js","skipped":false,"dir":"tests"},{"name":"should not crash on stopLoad() after destroy()","suites":["Hls","destroy"],"updatePoint":{"line":22,"column":54,"index":791},"line":22,"code":"    it('should not crash on stopLoad() after destroy()', function () {\n      const hls = new Hls();\n      hls.destroy();\n      expect(() => hls.stopLoad()).to.not.throw();\n    });","file":"unit/hls.js","skipped":false,"dir":"tests"},{"name":"should not crash on startLoad() after destroy()","suites":["Hls","destroy"],"updatePoint":{"line":27,"column":55,"index":972},"line":27,"code":"    it('should not crash on startLoad() after destroy()', function () {\n      const hls = new Hls();\n      hls.destroy();\n      expect(() => hls.startLoad()).to.not.throw();\n    });","file":"unit/hls.js","skipped":false,"dir":"tests"},{"name":"returns true if an EXT-X-KEY is associated with the fragment","suites":["Fragment class tests","encrypted"],"updatePoint":{"line":13,"column":68,"index":464},"line":13,"code":"    it('returns true if an EXT-X-KEY is associated with the fragment', function () {\n      // From https://docs.microsoft.com/en-us/azure/media-services/previous/media-services-protect-with-aes128\n      const key = LevelKey.fromURL('https://wamsbayclus001kd-hs.cloudapp.net', './HlsHandler.ashx?kid=da3813af-55e6-48e7-aa9f-a4d6031f7b4d');\n      key.method = 'AES-128';\n      key.iv = '0XD7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7';\n      key.keyFormat = 'identity';\n      frag.levelkey = key;\n      expect(frag.decryptdata.uri).to.equal('https://wamsbayclus001kd-hs.cloudapp.net/HlsHandler.ashx?kid=da3813af-55e6-48e7-aa9f-a4d6031f7b4d');\n      expect(frag.encrypted).to.equal(true);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"returns true for widevine v2 manifest signalled encryption","suites":["Fragment class tests","encrypted"],"updatePoint":{"line":23,"column":66,"index":1144},"line":23,"code":"    it('returns true for widevine v2 manifest signalled encryption', function () {\n      // #EXT-X-KEY:METHOD=SAMPLE-AES,URI=”data:text/plain;base64,AAAAPXBzc2gAAAAA7e+LqXnWSs6jyCfc1R0h7QAAAB0aDXdpZGV2aW5lX3Rlc3QiDHRlc3QgY29udGVudA==”,KEYID=0x112233445566778899001122334455,KEYFORMAT=”urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed”,KEYFORMATVERSION=”1”\n      // From https://www.academia.edu/36030972/Widevine_DRM_for_HLS\n      const key = LevelKey.fromURI('data:text/plain;base64,AAAAPXBzc2gAAAAA7e+LqXnWSs6jyCfc1R0h7QAAAB0aDXdpZGV2aW5lX3Rlc3QiDHRlc3QgY29udGVudA==');\n      key.method = 'SAMPLE-AES';\n      key.keyFormat = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\n      key.keyFormatVersions = '1';\n      frag.levelkey = key;\n      expect(frag.decryptdata.uri).to.equal('data:text/plain;base64,AAAAPXBzc2gAAAAA7e+LqXnWSs6jyCfc1R0h7QAAAB0aDXdpZGV2aW5lX3Rlc3QiDHRlc3QgY29udGVudA==');\n      expect(frag.encrypted).to.equal(true);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"returns true for widevine v1 manifest signalled encryption","suites":["Fragment class tests","encrypted"],"updatePoint":{"line":34,"column":66,"index":2088},"line":34,"code":"    it('returns true for widevine v1 manifest signalled encryption', function () {\n      // #EXT-X-KEY:METHOD=SAMPLE-AES,URI=”data:text/plain;base64,eyAKICAgInByb3ZpZGVyIjoibWxiYW1oYm8iLAogICAiY29udGVudF9pZCI6Ik1qQXhOVjlVWldGeWN3PT0iLAogICAia2V5X2lkcyI6CiAgIFsKICAgICAgIjM3MWUxMzVlMWE5ODVkNzVkMTk4YTdmNDEwMjBkYzIzIgogICBdCn0=\",IV=0x6df49213a781e338628d0e9c812d328e,KEYFORMAT=”com.widevine”,KEYFORMATVERSIONS=”1”\n      // From https://www.academia.edu/36030972/Widevine_DRM_for_HLS\n      const key = LevelKey.fromURI('data:text/plain;base64,eyAKICAgInByb3ZpZGVyIjoibWxiYW1oYm8iLAogICAiY29udGVudF9pZCI6Ik1qQXhOVjlVWldGeWN3PT0iLAogICAia2V5X2lkcyI6CiAgIFsKICAgICAgIjM3MWUxMzVlMWE5ODVkNzVkMTk4YTdmNDEwMjBkYzIzIgogICBdCn0=');\n      key.method = 'SAMPLE-AES';\n      key.keyFormat = 'com.widevine';\n      key.keyFormatVersions = '1';\n      frag.levelkey = key;\n      expect(frag.decryptdata.uri).to.equal('data:text/plain;base64,eyAKICAgInByb3ZpZGVyIjoibWxiYW1oYm8iLAogICAiY29udGVudF9pZCI6Ik1qQXhOVjlVWldGeWN3PT0iLAogICAia2V5X2lkcyI6CiAgIFsKICAgICAgIjM3MWUxMzVlMWE5ODVkNzVkMTk4YTdmNDEwMjBkYzIzIgogICBdCn0=');\n      expect(frag.encrypted).to.equal(true);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"returns true for a playready manifest signalled encryption","suites":["Fragment class tests","encrypted"],"updatePoint":{"line":45,"column":66,"index":3242},"line":45,"code":"    it('returns true for a playready manifest signalled encryption', function () {\n      // #EXT-X-KEY:METHOD=SAMPLE-AES,KEYFORMAT=\"com.microsoft.playready\",KEYFORMATVERSIONS=\"1\",URI=\"data:text/plain;charset=UTF-16;base64,xAEAAAEAAQC6ATwAVwBSAE0ASABFAEEARABFAFIAIAB4AG0AbABuAHMAPQAiAGgAdAB0AHAAOgAvAC8AcwBjAGgAZQBtAGEAcwAuAG0AaQBjAHIAbwBzAG8AZgB0AC4AYwBvAG0ALwBEAFIATQAvADIAMAAwADcALwAwADMALwBQAGwAYQB5AFIAZQBhAGQAeQBIAGUAYQBkAGUAcgAiACAAdgBlAHIAcwBpAG8AbgA9ACIANAAuADAALgAwAC4AMAAiAD4APABEAEEAVABBAD4APABQAFIATwBUAEUAQwBUAEkATgBGAE8APgA8AEsARQBZAEwARQBOAD4AMQA2ADwALwBLAEUAWQBMAEUATgA+ADwAQQBMAEcASQBEAD4AQQBFAFMAQwBUAFIAPAAvAEEATABHAEkARAA+ADwALwBQAFIATwBUAEUAQwBUAEkATgBGAE8APgA8AEsASQBEAD4AdgBHAFYAagBOAEsAZwBZAE0ARQBxAHAATwBMAGgAMQBWAGQAUgBUADAAQQA9AD0APAAvAEsASQBEAD4APAAvAEQAQQBUAEEAPgA8AC8AVwBSAE0ASABFAEEARABFAFIAPgA=\"\n      // From https://docs.microsoft.com/en-us/playready/packaging/mp4-based-formats-supported-by-playready-clients?tabs=case4\n      const key = LevelKey.fromURI('data:text/plain;charset=UTF-16;base64,xAEAAAEAAQC6ATwAVwBSAE0ASABFAEEARABFAFIAIAB4AG0AbABuAHMAPQAiAGgAdAB0AHAAOgAvAC8AcwBjAGgAZQBtAGEAcwAuAG0AaQBjAHIAbwBzAG8AZgB0AC4AYwBvAG0ALwBEAFIATQAvADIAMAAwADcALwAwADMALwBQAGwAYQB5AFIAZQBhAGQAeQBIAGUAYQBkAGUAcgAiACAAdgBlAHIAcwBpAG8AbgA9ACIANAAuADAALgAwAC4AMAAiAD4APABEAEEAVABBAD4APABQAFIATwBUAEUAQwBUAEkATgBGAE8APgA8AEsARQBZAEwARQBOAD4AMQA2ADwALwBLAEUAWQBMAEUATgA+ADwAQQBMAEcASQBEAD4AQQBFAFMAQwBUAFIAPAAvAEEATABHAEkARAA+ADwALwBQAFIATwBUAEUAQwBUAEkATgBGAE8APgA8AEsASQBEAD4AdgBHAFYAagBOAEsAZwBZAE0ARQBxAHAATwBMAGgAMQBWAGQAUgBUADAAQQA9AD0APAAvAEsASQBEAD4APAAvAEQAQQBUAEEAPgA8AC8AVwBSAE0ASABFAEEARABFAFIAPgA=');\n      key.method = 'SAMPLE-AES';\n      key.keyFormat = 'com.microsoft.playready';\n      key.keyFormatVersions = '1';\n      frag.levelkey = key;\n      expect(frag.decryptdata.uri).to.equal('data:text/plain;charset=UTF-16;base64,xAEAAAEAAQC6ATwAVwBSAE0ASABFAEEARABFAFIAIAB4AG0AbABuAHMAPQAiAGgAdAB0AHAAOgAvAC8AcwBjAGgAZQBtAGEAcwAuAG0AaQBjAHIAbwBzAG8AZgB0AC4AYwBvAG0ALwBEAFIATQAvADIAMAAwADcALwAwADMALwBQAGwAYQB5AFIAZQBhAGQAeQBIAGUAYQBkAGUAcgAiACAAdgBlAHIAcwBpAG8AbgA9ACIANAAuADAALgAwAC4AMAAiAD4APABEAEEAVABBAD4APABQAFIATwBUAEUAQwBUAEkATgBGAE8APgA8AEsARQBZAEwARQBOAD4AMQA2ADwALwBLAEUAWQBMAEUATgA+ADwAQQBMAEcASQBEAD4AQQBFAFMAQwBUAFIAPAAvAEEATABHAEkARAA+ADwALwBQAFIATwBUAEUAQwBUAEkATgBGAE8APgA8AEsASQBEAD4AdgBHAFYAagBOAEsAZwBZAE0ARQBxAHAATwBMAGgAMQBWAGQAUgBUADAAQQA9AD0APAAvAEsASQBEAD4APAAvAEQAQQBUAEEAPgA8AC8AVwBSAE0ASABFAEEARABFAFIAPgA=');\n      expect(frag.encrypted).to.equal(true);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"set byte range with length@offset","suites":["Fragment class tests","setByteRange"],"updatePoint":{"line":58,"column":41,"index":5789},"line":58,"code":"    it('set byte range with length@offset', function () {\n      frag.setByteRange('1000@10000');\n      expect(frag.byteRangeStartOffset).to.equal(10000);\n      expect(frag.byteRangeEndOffset).to.equal(11000);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"set byte range with no offset and uses 0 as offset","suites":["Fragment class tests","setByteRange"],"updatePoint":{"line":63,"column":58,"index":6023},"line":63,"code":"    it('set byte range with no offset and uses 0 as offset', function () {\n      frag.setByteRange('5000');\n      expect(frag.byteRangeStartOffset).to.equal(0);\n      expect(frag.byteRangeEndOffset).to.equal(5000);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"set byte range with no offset and uses 0 as offset","suites":["Fragment class tests","setByteRange"],"updatePoint":{"line":68,"column":58,"index":6246},"line":68,"code":"    it('set byte range with no offset and uses 0 as offset', function () {\n      const prevFrag = new Fragment(PlaylistLevelType.MAIN, '');\n      prevFrag.setByteRange('1000@10000');\n      frag.setByteRange('5000', prevFrag);\n      expect(frag.byteRangeStartOffset).to.equal(11000);\n      expect(frag.byteRangeEndOffset).to.equal(16000);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"computes endPdt when pdt and duration are valid","suites":["Fragment class tests","endProgramDateTime getter"],"updatePoint":{"line":77,"column":55,"index":6649},"line":77,"code":"    it('computes endPdt when pdt and duration are valid', function () {\n      frag.programDateTime = 1000;\n      frag.duration = 1;\n      expect(frag.endProgramDateTime).to.equal(2000);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"considers 0 a valid pdt","suites":["Fragment class tests","endProgramDateTime getter"],"updatePoint":{"line":82,"column":31,"index":6819},"line":82,"code":"    it('considers 0 a valid pdt', function () {\n      frag.programDateTime = 0;\n      frag.duration = 1;\n      expect(frag.endProgramDateTime).to.equal(1000);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"returns null if pdt is NaN","suites":["Fragment class tests","endProgramDateTime getter"],"updatePoint":{"line":87,"column":34,"index":6989},"line":87,"code":"    it('returns null if pdt is NaN', function () {\n      frag.programDateTime = 'foo';\n      frag.duration = 1;\n      expect(frag.endProgramDateTime).to.equal(null);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"defaults duration to 0 if duration is NaN","suites":["Fragment class tests","endProgramDateTime getter"],"updatePoint":{"line":92,"column":49,"index":7178},"line":92,"code":"    it('defaults duration to 0 if duration is NaN', function () {\n      frag.programDateTime = 1000;\n      frag.duration = 'foo';\n      expect(frag.endProgramDateTime).to.equal(1000);\n    });","file":"unit/loader/fragment.js","skipped":false,"dir":"tests"},{"name":"sets programDateTime to true when the first fragment has valid pdt","suites":["Level Class tests"],"updatePoint":{"line":3,"column":72,"index":183},"line":3,"code":"  it('sets programDateTime to true when the first fragment has valid pdt', function () {\n    const level = new LevelDetails();\n    level.fragments = [{\n      programDateTime: 1\n    }];\n    expect(level.hasProgramDateTime).to.be.true;\n  });","file":"unit/loader/level.js","skipped":false,"dir":"tests"},{"name":"sets programDateTime to false when no fragments is empty","suites":["Level Class tests"],"updatePoint":{"line":10,"column":62,"index":413},"line":10,"code":"  it('sets programDateTime to false when no fragments is empty', function () {\n    const level = new LevelDetails();\n    expect(level.hasProgramDateTime).to.be.false;\n  });","file":"unit/loader/level.js","skipped":false,"dir":"tests"},{"name":"sets programDateTime to false when the first fragment has an invalid pdt","suites":["Level Class tests"],"updatePoint":{"line":14,"column":78,"index":602},"line":14,"code":"  it('sets programDateTime to false when the first fragment has an invalid pdt', function () {\n    const level = new LevelDetails();\n    level.fragments = [{\n      programDateTime: 'foo'\n    }];\n    expect(level.hasProgramDateTime).to.be.false;\n  });","file":"unit/loader/level.js","skipped":false,"dir":"tests"},{"name":"parses empty manifest returns empty array","suites":["PlaylistLoader"],"updatePoint":{"line":5,"column":47,"index":267},"line":5,"code":"  it('parses empty manifest returns empty array', function () {\n    const result = M3U8Parser.parseMasterPlaylist('', 'http://www.dailymotion.com');\n    expect(result.levels).to.deep.equal([]);\n    expect(result.sessionData).to.equal(null);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"manifest with broken syntax returns empty array","suites":["PlaylistLoader"],"updatePoint":{"line":10,"column":53,"index":520},"line":10,"code":"  it('manifest with broken syntax returns empty array', function () {\n    const manifest = `#EXTXSTREAMINF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    const result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    expect(result.levels).to.deep.equal([]);\n    expect(result.sessionData).to.equal(null);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses manifest with one level","suites":["PlaylistLoader"],"updatePoint":{"line":17,"column":36,"index":1017},"line":17,"code":"  it('parses manifest with one level', function () {\n    const manifest = `#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    const result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    expect(result.levels).to.have.lengthOf(1);\n    expect(result.levels[0].bitrate).to.equal(836280);\n    expect(result.levels[0].audioCodec).to.equal('mp4a.40.2');\n    expect(result.levels[0].videoCodec).to.equal('avc1.64001f');\n    expect(result.levels[0].width).to.equal(848);\n    expect(result.levels[0].height).to.equal(360);\n    expect(result.levels[0].name).to.equal('480');\n    expect(result.levels[0].url).to.equal('http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core');\n    expect(result.sessionData).to.equal(null);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses manifest containing comment","suites":["PlaylistLoader"],"updatePoint":{"line":32,"column":40,"index":2037},"line":32,"code":"  it('parses manifest containing comment', function () {\n    const manifest = `#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\n# some comment\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    const result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    expect(result.levels).to.have.lengthOf(1);\n    expect(result.levels[0].url).to.equal('http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses manifest without codecs","suites":["PlaylistLoader"],"updatePoint":{"line":41,"column":36,"index":2686},"line":41,"code":"  it('parses manifest without codecs', function () {\n    const manifest = `#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    const result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    expect(result.levels.length, 1);\n    expect(result.levels[0].bitrate).to.equal(836280);\n    expect(result.levels[0].audioCodec).to.not.exist;\n    expect(result.levels[0].videoCodec).to.not.exist;\n    expect(result.levels[0].width).to.equal(848);\n    expect(result.levels[0].height).to.equal(360);\n    expect(result.levels[0].name).to.equal('480');\n    expect(result.levels[0].url).to.equal('http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core');\n    expect(result.sessionData).to.equal(null);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"does not care about the attribute order","suites":["PlaylistLoader"],"updatePoint":{"line":56,"column":45,"index":3650},"line":56,"code":"  it('does not care about the attribute order', function () {\n    let manifest = `#EXTM3U\n#EXT-X-STREAM-INF:NAME=\"480\",PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    let result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    expect(result.levels.length, 1);\n    expect(result.levels[0].bitrate, 836280);\n    expect(result.levels[0].audioCodec, 'mp4a.40.2');\n    expect(result.levels[0].videoCodec, 'avc1.64001f');\n    expect(result.levels[0].width, 848);\n    expect(result.levels[0].height, 360);\n    expect(result.levels[0].name, '480');\n    expect(result.levels[0].url, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core');\n    expect(result.sessionData).to.equal(null);\n    manifest = `#EXTM3U\n#EXT-X-STREAM-INF:NAME=\"480\",RESOLUTION=848x360,PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\"\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    expect(result.levels.length, 1);\n    expect(result.levels[0].bitrate).to.equal(836280);\n    expect(result.levels[0].audioCodec).to.equal('mp4a.40.2');\n    expect(result.levels[0].videoCodec).to.equal('avc1.64001f');\n    expect(result.levels[0].width).to.equal(848);\n    expect(result.levels[0].height).to.equal(360);\n    expect(result.levels[0].name).to.equal('480');\n    expect(result.levels[0].url).to.equal('http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core');\n    expect(result.sessionData).to.equal(null);\n    manifest = `#EXTM3U\n#EXT-X-STREAM-INF:CODECS=\"mp4a.40.2,avc1.64001f\",NAME=\"480\",RESOLUTION=848x360,PROGRAM-ID=1,BANDWIDTH=836280\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    expect(result.levels).to.have.lengthOf(1);\n    expect(result.levels[0].bitrate).to.equal(836280);\n    expect(result.levels[0].audioCodec).to.equal('mp4a.40.2');\n    expect(result.levels[0].videoCodec).to.equal('avc1.64001f');\n    expect(result.levels[0].width).to.equal(848);\n    expect(result.levels[0].height).to.equal(360);\n    expect(result.levels[0].name).to.equal('480');\n    expect(result.levels[0].url).to.equal('http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core');\n    expect(result.sessionData).to.equal(null);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses manifest with 10 levels","suites":["PlaylistLoader"],"updatePoint":{"line":97,"column":36,"index":6469},"line":97,"code":"  it('parses manifest with 10 levels', function () {\n    const manifest = `#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-21.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=246440,CODECS=\"mp4a.40.5,avc1.42000d\",RESOLUTION=320x136,NAME=\"240\"\nhttp://proxy-62.dailymotion.com/sec(65b989b17536b5158360dfc008542daa)/video/107/282/158282701_mp4_h264_aac_ld.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=246440,CODECS=\"mp4a.40.5,avc1.42000d\",RESOLUTION=320x136,NAME=\"240\"\nhttp://proxy-21.dailymotion.com/sec(65b989b17536b5158360dfc008542daa)/video/107/282/158282701_mp4_h264_aac_ld.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=460560,CODECS=\"mp4a.40.5,avc1.420016\",RESOLUTION=512x216,NAME=\"380\"\nhttp://proxy-62.dailymotion.com/sec(b90a363ba42fd9eab9313f0cd2e4d38b)/video/107/282/158282701_mp4_h264_aac.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=460560,CODECS=\"mp4a.40.5,avc1.420016\",RESOLUTION=512x216,NAME=\"380\"\nhttp://proxy-21.dailymotion.com/sec(b90a363ba42fd9eab9313f0cd2e4d38b)/video/107/282/158282701_mp4_h264_aac.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2149280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=1280x544,NAME=\"720\"\nhttp://proxy-62.dailymotion.com/sec(c16ad76fb8641c41d759e20880043e47)/video/107/282/158282701_mp4_h264_aac_hd.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2149280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=1280x544,NAME=\"720\"\nhttp://proxy-21.dailymotion.com/sec(c16ad76fb8641c41d759e20880043e47)/video/107/282/158282701_mp4_h264_aac_hd.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=6221600,CODECS=\"mp4a.40.2,avc1.640028\",RESOLUTION=1920x816,NAME=\"1080\"\nhttp://proxy-62.dailymotion.com/sec(2a991e17f08fcd94f95637a6dd718ddd)/video/107/282/158282701_mp4_h264_aac_fhd.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=6221600,CODECS=\"mp4a.40.2,avc1.640028\",RESOLUTION=1920x816,NAME=\"1080\"\nhttp://proxy-21.dailymotion.com/sec(2a991e17f08fcd94f95637a6dd718ddd)/video/107/282/158282701_mp4_h264_aac_fhd.m3u8#cell=core`;\n    const result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    expect(result.levels.length, 10);\n    expect(result.levels[0].bitrate).to.equal(836280);\n    expect(result.levels[1].bitrate).to.equal(836280);\n    expect(result.levels[2].bitrate).to.equal(246440);\n    expect(result.levels[3].bitrate).to.equal(246440);\n    expect(result.levels[4].bitrate).to.equal(460560);\n    expect(result.levels[5].bitrate).to.equal(460560);\n    expect(result.levels[6].bitrate).to.equal(2149280);\n    expect(result.levels[7].bitrate).to.equal(2149280);\n    expect(result.levels[8].bitrate).to.equal(6221600);\n    expect(result.levels[9].bitrate).to.equal(6221600);\n    expect(result.sessionData).to.equal(null);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses manifest with EXT-X-SESSION-DATA","suites":["PlaylistLoader"],"updatePoint":{"line":133,"column":45,"index":9645},"line":133,"code":"  it('parses manifest with EXT-X-SESSION-DATA', function () {\n    const manifest = `#EXTM3U\n#EXT-X-SESSION-DATA:DATA-ID=\"com.dailymotion.sessiondata.test\",VALUE=\"some data\"\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    const result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    const expected = {\n      'com.dailymotion.sessiondata.test': new AttrList({\n        'DATA-ID': 'com.dailymotion.sessiondata.test',\n        VALUE: 'some data'\n      })\n    };\n    expect(result.sessionData).to.deep.equal(expected);\n    expect(result.levels.length, 1);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses manifest with EXT-X-SESSION-DATA and 10 levels","suites":["PlaylistLoader"],"updatePoint":{"line":148,"column":59,"index":10436},"line":148,"code":"  it('parses manifest with EXT-X-SESSION-DATA and 10 levels', function () {\n    const manifest = `#EXTM3U\n#EXT-X-SESSION-DATA:DATA-ID=\"com.dailymotion.sessiondata.test\",VALUE=\"some data\"\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-21.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=246440,CODECS=\"mp4a.40.5,avc1.42000d\",RESOLUTION=320x136,NAME=\"240\"\nhttp://proxy-62.dailymotion.com/sec(65b989b17536b5158360dfc008542daa)/video/107/282/158282701_mp4_h264_aac_ld.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=246440,CODECS=\"mp4a.40.5,avc1.42000d\",RESOLUTION=320x136,NAME=\"240\"\nhttp://proxy-21.dailymotion.com/sec(65b989b17536b5158360dfc008542daa)/video/107/282/158282701_mp4_h264_aac_ld.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=460560,CODECS=\"mp4a.40.5,avc1.420016\",RESOLUTION=512x216,NAME=\"380\"\nhttp://proxy-62.dailymotion.com/sec(b90a363ba42fd9eab9313f0cd2e4d38b)/video/107/282/158282701_mp4_h264_aac.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=460560,CODECS=\"mp4a.40.5,avc1.420016\",RESOLUTION=512x216,NAME=\"380\"\nhttp://proxy-21.dailymotion.com/sec(b90a363ba42fd9eab9313f0cd2e4d38b)/video/107/282/158282701_mp4_h264_aac.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2149280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=1280x544,NAME=\"720\"\nhttp://proxy-62.dailymotion.com/sec(c16ad76fb8641c41d759e20880043e47)/video/107/282/158282701_mp4_h264_aac_hd.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2149280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=1280x544,NAME=\"720\"\nhttp://proxy-21.dailymotion.com/sec(c16ad76fb8641c41d759e20880043e47)/video/107/282/158282701_mp4_h264_aac_hd.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=6221600,CODECS=\"mp4a.40.2,avc1.640028\",RESOLUTION=1920x816,NAME=\"1080\"\nhttp://proxy-62.dailymotion.com/sec(2a991e17f08fcd94f95637a6dd718ddd)/video/107/282/158282701_mp4_h264_aac_fhd.m3u8#cell=core\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=6221600,CODECS=\"mp4a.40.2,avc1.640028\",RESOLUTION=1920x816,NAME=\"1080\"\nhttp://proxy-21.dailymotion.com/sec(2a991e17f08fcd94f95637a6dd718ddd)/video/107/282/158282701_mp4_h264_aac_fhd.m3u8#cell=core`;\n    const result = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    const expected = {\n      'com.dailymotion.sessiondata.test': new AttrList({\n        'DATA-ID': 'com.dailymotion.sessiondata.test',\n        VALUE: 'some data'\n      })\n    };\n    expect(result.sessionData).to.deep.equal(expected);\n    expect(result.levels.length, 10);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses manifest with multiple EXT-X-SESSION-DATA","suites":["PlaylistLoader"],"updatePoint":{"line":181,"column":54,"index":13335},"line":181,"code":"  it('parses manifest with multiple EXT-X-SESSION-DATA', function () {\n    const manifest = `#EXTM3U\n#EXT-X-SESSION-DATA:DATA-ID=\"com.dailymotion.sessiondata.test\",VALUE=\"some data\"\n#EXT-X-SESSION-DATA:DATA-ID=\"com.dailymotion.sessiondata.test2\",VALUE=\"different data\"\n#EXT-X-SESSION-DATA:DATA-ID=\"com.dailymotion.sessiondata.test3\",VALUE=\"more different data\",URI=\"http://www.dailymotion.com/\"\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=836280,CODECS=\"mp4a.40.2,avc1.64001f\",RESOLUTION=848x360,NAME=\"480\"\nhttp://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core`;\n    const {\n      sessionData\n    } = M3U8Parser.parseMasterPlaylist(manifest, 'http://www.dailymotion.com');\n    const expected = {\n      'com.dailymotion.sessiondata.test': new AttrList({\n        'DATA-ID': 'com.dailymotion.sessiondata.test',\n        VALUE: 'some data'\n      }),\n      'com.dailymotion.sessiondata.test2': new AttrList({\n        'DATA-ID': 'com.dailymotion.sessiondata.test2',\n        VALUE: 'different data'\n      }),\n      'com.dailymotion.sessiondata.test3': new AttrList({\n        'DATA-ID': 'com.dailymotion.sessiondata.test3',\n        VALUE: 'more different data',\n        URI: 'http://www.dailymotion.com/'\n      })\n    };\n    expect(sessionData).to.deep.equal(expected);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses empty levels returns empty fragment array","suites":["PlaylistLoader"],"updatePoint":{"line":208,"column":54,"index":14670},"line":208,"code":"  it('parses empty levels returns empty fragment array', function () {\n    const level = '';\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core', 0);\n    expect(result.fragments).to.have.lengthOf(0);\n    expect(result.totalduration).to.equal(0);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"level with 0 frag returns empty fragment array","suites":["PlaylistLoader"],"updatePoint":{"line":214,"column":52,"index":15051},"line":214,"code":"  it('level with 0 frag returns empty fragment array', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-TARGETDURATION:14`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core', 0);\n    expect(result.fragments).to.have.lengthOf(0);\n    expect(result.totalduration).to.equal(0);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse level with several fragments","suites":["PlaylistLoader"],"updatePoint":{"line":223,"column":40,"index":15494},"line":223,"code":"  it('parse level with several fragments', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-TARGETDURATION:14\n#EXTINF:11.360,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(1)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXTINF: 11.320,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(2)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXTINF: 13.480,\n# general comment\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(3)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXTINF:11.200,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(4)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXTINF:3.880,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(5)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXT-X-ENDLIST`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core', 0);\n    expect(result.totalduration).to.equal(51.24);\n    expect(result.startSN).to.equal(0);\n    expect(result.version).to.equal(3);\n    expect(result.type).to.equal('VOD');\n    expect(result.targetduration).to.equal(14);\n    expect(result.live).to.be.false;\n    expect(result.fragments).to.have.lengthOf(5);\n    expect(result.fragments[0].cc).to.equal(0);\n    expect(result.fragments[0].duration).to.equal(11.36);\n    expect(result.fragments[1].duration).to.equal(11.32);\n    expect(result.fragments[2].duration).to.equal(13.48);\n    expect(result.fragments[4].sn).to.equal(4);\n    expect(result.fragments[0].level).to.equal(0);\n    expect(result.fragments[4].cc).to.equal(0);\n    expect(result.fragments[4].sn).to.equal(4);\n    expect(result.fragments[4].start).to.equal(47.36);\n    expect(result.fragments[4].duration).to.equal(3.88);\n    expect(result.fragments[4].url).to.equal('http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(5)/video/107/282/158282701_mp4_h264_aac_hq.ts');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"handles a missing init segment for mp4 segment urls","suites":["PlaylistLoader"],"updatePoint":{"line":260,"column":57,"index":17427},"line":260,"code":"  it('handles a missing init segment for mp4 segment urls', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-TARGETDURATION:14\n#EXTINF:11.360,\n/something.mp4?abc\n#EXT-X-ENDLIST`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://example.invalid/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n    const initSegment = result.fragments[0].initSegment;\n    expect(initSegment).to.be.ok;\n    expect(initSegment.relurl).to.equal('/something.mp4?abc');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse level with single char fragment URI","suites":["PlaylistLoader"],"updatePoint":{"line":273,"column":47,"index":17924},"line":273,"code":"  it('parse level with single char fragment URI', function () {\n    const level = `#EXTM3U\n#EXT-X-ALLOW-CACHE:NO\n#EXT-X-TARGETDURATION:2\n#EXTINF:2,\n0\n#EXTINF:2,\n1\n#EXT-X-ENDLIST`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(5)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core', 0);\n    expect(result.totalduration).to.equal(4);\n    expect(result.startSN).to.equal(0);\n    expect(result.targetduration).to.equal(2);\n    expect(result.live).to.be.false;\n    expect(result.fragments).to.have.lengthOf(2);\n    expect(result.fragments[0].cc).to.equal(0);\n    expect(result.fragments[0].duration).to.equal(2);\n    expect(result.fragments[0].sn).to.equal(0);\n    expect(result.fragments[0].relurl).to.equal('0');\n    expect(result.fragments[1].cc).to.equal(0);\n    expect(result.fragments[1].duration).to.equal(2);\n    expect(result.fragments[1].sn).to.equal(1);\n    expect(result.fragments[1].relurl).to.equal('1');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse level with EXTINF line without comma","suites":["PlaylistLoader"],"updatePoint":{"line":297,"column":48,"index":18935},"line":297,"code":"  it('parse level with EXTINF line without comma', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-TARGETDURATION:6\n#EXT-X-INDEPENDENT-SEGMENTS\n#EXTINF:6.000000\nchop/segment-1.ts\n#EXTINF:6.000000\nchop/segment-2.ts\n#EXTINF:6.000000\nchop/segment-3.ts\n#EXTINF:6.000000\nchop/segment-4.ts\n#EXTINF:6.000000\nchop/segment-5.ts\n#EXTINF:6.000000\n#EXT-X-ENDLIST`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(5)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core', 0);\n    expect(result.totalduration).to.equal(30);\n    expect(result.startSN).to.equal(0);\n    expect(result.version).to.equal(3);\n    expect(result.targetduration).to.equal(6);\n    expect(result.live).to.be.false;\n    expect(result.fragments).to.have.lengthOf(5);\n    expect(result.fragments[0].cc).to.equal(0);\n    expect(result.fragments[0].duration).to.equal(6);\n    expect(result.fragments[4].sn).to.equal(4);\n    expect(result.fragments[0].level).to.equal(0);\n    expect(result.fragments[4].cc).to.equal(0);\n    expect(result.fragments[4].sn).to.equal(4);\n    expect(result.fragments[4].start).to.equal(24);\n    expect(result.fragments[4].duration).to.equal(6);\n    expect(result.fragments[4].url).to.equal('http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(5)/video/107/282/chop/segment-5.ts');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse level with start time offset","suites":["PlaylistLoader"],"updatePoint":{"line":332,"column":40,"index":20346},"line":332,"code":"  it('parse level with start time offset', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-TARGETDURATION:14\n#EXT-X-START:TIME-OFFSET=10.3\n#EXTINF:11.360,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(1)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXTINF:11.320,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(2)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXTINF:13.480,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(3)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXTINF:11.200,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(4)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXTINF:3.880,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(5)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXT-X-ENDLIST`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core', 0);\n    expect(result.totalduration).to.equal(51.24);\n    expect(result.startSN).to.equal(0);\n    expect(result.targetduration).to.equal(14);\n    expect(result.live).to.be.false;\n    expect(result.startTimeOffset).to.equal(10.3);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse AES encrypted URLS, with a com.apple.streamingkeydelivery KEYFORMAT","suites":["PlaylistLoader"],"updatePoint":{"line":356,"column":79,"index":21532},"line":356,"code":"  it('parse AES encrypted URLS, with a com.apple.streamingkeydelivery KEYFORMAT', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:1\n## Created with Unified Streaming Platform(version=1.6.7)\n#EXT-X-MEDIA-SEQUENCE:1\n#EXT-X-ALLOW-CACHE:NO\n#EXT-X-TARGETDURATION:11\n#EXT-X-KEY:METHOD=AES-128,URI=\"skd://assetid?keyId=1234\",KEYFORMAT=\"com.apple.streamingkeydelivery\"\n#EXTINF:11,no desc\noceans_aes-audio=65000-video=236000-1.ts\n#EXTINF:7,no desc\noceans_aes-audio=65000-video=236000-2.ts\n#EXTINF:7,no desc\noceans_aes-audio=65000-video=236000-3.ts\n#EXT-X-ENDLIST`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://foo.com/adaptive/oceans_aes/oceans_aes.m3u8', 0);\n    expect(result.totalduration).to.equal(25);\n    expect(result.startSN).to.equal(1);\n    expect(result.targetduration).to.equal(11);\n    expect(result.live).to.be.false;\n    expect(result.fragments).to.have.lengthOf(3);\n    expect(result.fragments[0].cc).to.equal(0);\n    expect(result.fragments[0].duration).to.equal(11);\n    expect(result.fragments[0].title).to.equal('no desc');\n    expect(result.fragments[0].level).to.equal(0);\n    expect(result.fragments[0].url).to.equal('http://foo.com/adaptive/oceans_aes/oceans_aes-audio=65000-video=236000-1.ts');\n    expect(result.fragments[0].decryptdata).to.be.null;\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse AES encrypted URLs, with implicit IV","suites":["PlaylistLoader"],"updatePoint":{"line":384,"column":48,"index":22801},"line":384,"code":"  it('parse AES encrypted URLs, with implicit IV', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:1\n## Created with Unified Streaming Platform(version=1.6.7)\n#EXT-X-MEDIA-SEQUENCE:1\n#EXT-X-ALLOW-CACHE:NO\n#EXT-X-TARGETDURATION:11\n#EXT-X-KEY:METHOD=AES-128,URI=\"oceans.key\"\n#EXTINF:11,no desc\noceans_aes-audio=65000-video=236000-1.ts\n#EXTINF:7,no desc\noceans_aes-audio=65000-video=236000-2.ts\n#EXTINF:7,no desc\noceans_aes-audio=65000-video=236000-3.ts\n#EXT-X-ENDLIST`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://foo.com/adaptive/oceans_aes/oceans_aes.m3u8', 0);\n    expect(result.totalduration).to.equal(25);\n    expect(result.startSN).to.equal(1);\n    expect(result.targetduration).to.equal(11);\n    expect(result.live).to.be.false;\n    expect(result.fragments).to.have.lengthOf(3);\n    expect(result.fragments[0].cc).to.equal(0);\n    expect(result.fragments[0].duration).to.equal(11);\n    expect(result.fragments[0].title).to.equal('no desc');\n    expect(result.fragments[0].level).to.equal(0);\n    expect(result.fragments[0].url).to.equal('http://foo.com/adaptive/oceans_aes/oceans_aes-audio=65000-video=236000-1.ts');\n    expect(result.fragments[0].decryptdata.uri).to.equal('http://foo.com/adaptive/oceans_aes/oceans.key');\n    expect(result.fragments[0].decryptdata.method).to.equal('AES-128');\n    let sn = 1;\n    let uint8View = new Uint8Array(16);\n\n    for (let i = 12; i < 16; i++) {\n      uint8View[i] = sn >> 8 * (15 - i) & 0xff;\n    }\n\n    expect(result.fragments[0].decryptdata.iv.buffer).to.deep.equal(uint8View.buffer);\n    sn = 3;\n    uint8View = new Uint8Array(16);\n\n    for (let i = 12; i < 16; i++) {\n      uint8View[i] = sn >> 8 * (15 - i) & 0xff;\n    }\n\n    expect(result.fragments[2].decryptdata.iv.buffer).to.deep.equal(uint8View.buffer);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse level with #EXT-X-BYTERANGE before #EXTINF","suites":["PlaylistLoader"],"updatePoint":{"line":429,"column":54,"index":24604},"line":429,"code":"  it('parse level with #EXT-X-BYTERANGE before #EXTINF', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:4\n#EXT-X-ALLOW-CACHE:YES\n#EXT-X-TARGETDURATION:1\n#EXT-X-MEDIA-SEQUENCE:7478\n#EXT-X-BYTERANGE:140060@803136\n#EXTINF:1000000,\nlo007ts\n#EXT-X-BYTERANGE:96256@943196\n#EXTINF:1000000,\nlo007ts\n#EXT-X-BYTERANGE:143068@1039452\n#EXTINF:1000000,\nlo007ts\n#EXT-X-BYTERANGE:124080@0\n#EXTINF:1000000,\nlo008ts\n#EXT-X-BYTERANGE:117688@124080\n#EXTINF:1000000,\nlo008ts\n#EXT-X-BYTERANGE:102272@241768\n#EXTINF:1000000,\nlo008ts\n#EXT-X-BYTERANGE:100580@344040\n#EXTINF:1000000,\nlo008ts\n#EXT-X-BYTERANGE:113740@444620\n#EXTINF:1000000,\nlo008ts\n#EXT-X-BYTERANGE:126148@558360\n#EXTINF:1000000,\nlo008ts\n#EXT-X-BYTERANGE:133480@684508\n#EXTINF:1000000,\nlo008ts`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://dummy.com/playlist.m3u8', 0);\n    expect(result.fragments.length, 10);\n    expect(result.fragments[0].url).to.equal('http://dummy.com/lo007ts');\n    expect(result.fragments[0].byteRangeStartOffset).to.equal(803136);\n    expect(result.fragments[0].byteRangeEndOffset).to.equal(943196);\n    expect(result.fragments[1].byteRangeStartOffset).to.equal(943196);\n    expect(result.fragments[1].byteRangeEndOffset).to.equal(1039452);\n    expect(result.fragments[9].url).to.equal('http://dummy.com/lo008ts');\n    expect(result.fragments[9].byteRangeStartOffset).to.equal(684508);\n    expect(result.fragments[9].byteRangeEndOffset).to.equal(817988);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse level with #EXT-X-BYTERANGE after #EXTINF","suites":["PlaylistLoader"],"updatePoint":{"line":476,"column":53,"index":26059},"line":476,"code":"  it('parse level with #EXT-X-BYTERANGE after #EXTINF', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:4\n#EXT-X-ALLOW-CACHE:YES\n#EXT-X-TARGETDURATION:1\n#EXT-X-MEDIA-SEQUENCE:7478\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:140060@803136\nlo007ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:96256@943196\nlo007ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:143068@1039452\nlo007ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:124080@0\nlo008ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:117688@124080\nlo008ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:102272@241768\nlo008ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:100580@344040\nlo008ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:113740@444620\nlo008ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:126148@558360\nlo008ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:133480@684508\nlo008ts`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://dummy.com/playlist.m3u8', 0);\n    expect(result.fragments).to.have.lengthOf(10);\n    expect(result.fragments[0].url).to.equal('http://dummy.com/lo007ts');\n    expect(result.fragments[0].byteRangeStartOffset).to.equal(803136);\n    expect(result.fragments[0].byteRangeEndOffset).to.equal(943196);\n    expect(result.fragments[1].byteRangeStartOffset).to.equal(943196);\n    expect(result.fragments[1].byteRangeEndOffset).to.equal(1039452);\n    expect(result.fragments[9].url).to.equal('http://dummy.com/lo008ts');\n    expect(result.fragments[9].byteRangeStartOffset).to.equal(684508);\n    expect(result.fragments[9].byteRangeEndOffset).to.equal(817988);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse level with #EXT-X-BYTERANGE without offset","suites":["PlaylistLoader"],"updatePoint":{"line":523,"column":54,"index":27525},"line":523,"code":"  it('parse level with #EXT-X-BYTERANGE without offset', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:4\n#EXT-X-ALLOW-CACHE:YES\n#EXT-X-TARGETDURATION:1\n#EXT-X-MEDIA-SEQUENCE:7478\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:140060@803136\nlo007ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:96256\nlo007ts\n#EXTINF:1000000,\n#EXT-X-BYTERANGE:143068\nlo007ts`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://dummy.com/playlist.m3u8', 0);\n    expect(result.fragments.length, 3);\n    expect(result.fragments[0].url).to.equal('http://dummy.com/lo007ts');\n    expect(result.fragments[0].byteRangeStartOffset).to.equal(803136);\n    expect(result.fragments[0].byteRangeEndOffset).to.equal(943196);\n    expect(result.fragments[1].byteRangeStartOffset).to.equal(943196);\n    expect(result.fragments[1].byteRangeEndOffset).to.equal(1039452);\n    expect(result.fragments[2].byteRangeStartOffset).to.equal(1039452);\n    expect(result.fragments[2].byteRangeEndOffset).to.equal(1182520);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses discontinuity and maintains continuity counter","suites":["PlaylistLoader"],"updatePoint":{"line":548,"column":59,"index":28511},"line":548,"code":"  it('parses discontinuity and maintains continuity counter', function () {\n    const level = `#EXTM3U\n#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:10,\n0001.ts\n#EXTINF:10,\n0002.ts\n#EXTINF:5,\n0003.ts\n#EXT-X-DISCONTINUITY\n#EXTINF:10,\n0005.ts\n#EXTINF:10,\n0006.ts\n#EXT-X-ENDLIST\n    `;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n    expect(result.fragments).to.have.lengthOf(5);\n    expect(result.totalduration).to.equal(45);\n    expect(result.fragments[2].cc).to.equal(0);\n    expect(result.fragments[3].cc).to.equal(1); // continuity counter should increase around discontinuity\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses correctly EXT-X-DISCONTINUITY-SEQUENCE and increases continuity counter","suites":["PlaylistLoader"],"updatePoint":{"line":573,"column":84,"index":29211},"line":573,"code":"  it('parses correctly EXT-X-DISCONTINUITY-SEQUENCE and increases continuity counter', function () {\n    const level = `#EXTM3U\n#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-DISCONTINUITY-SEQUENCE:20\n#EXTINF:10,\n0001.ts\n#EXTINF:10,\n0002.ts\n#EXTINF:5,\n0003.ts\n#EXT-X-DISCONTINUITY\n#EXTINF:10,\n0005.ts\n#EXTINF:10,\n0006.ts\n#EXT-X-ENDLIST\n    `;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n    expect(result.fragments).to.have.lengthOf(5);\n    expect(result.totalduration).to.equal(45);\n    expect(result.fragments[0].cc).to.equal(20);\n    expect(result.fragments[2].cc).to.equal(20);\n    expect(result.fragments[3].cc).to.equal(21); // continuity counter should increase around discontinuity\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses manifest with one audio track","suites":["PlaylistLoader"],"updatePoint":{"line":600,"column":42,"index":29953},"line":600,"code":"  it('parses manifest with one audio track', function () {\n    const manifest = `#EXTM3U\n#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"600k\",LANGUAGE=\"eng\",NAME=\"Audio\",AUTOSELECT=YES,DEFAULT=YES,URI=\"/videos/ZakEbrahim_2014/audio/600k.m3u8?qr=true&preroll=Blank\",BANDWIDTH=614400`;\n    const result = M3U8Parser.parseMasterPlaylistMedia(manifest, 'https://hls.ted.com/', 'AUDIO');\n    expect(result.length, 1);\n    expect(result[0].autoselect).to.be.true;\n    expect(result[0].default).to.be.true;\n    expect(result[0].forced).to.be.false;\n    expect(result[0].groupId).to.equal('600k');\n    expect(result[0].lang).to.equal('eng');\n    expect(result[0].name).to.equal('Audio');\n    expect(result[0].url).to.equal('https://hls.ted.com/videos/ZakEbrahim_2014/audio/600k.m3u8?qr=true&preroll=Blank');\n  }); // issue #425 - first fragment has null url and no decryptdata if EXT-X-KEY follows EXTINF","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse level with #EXT-X-KEY after #EXTINF","suites":["PlaylistLoader"],"updatePoint":{"line":614,"column":47,"index":30843},"line":614,"code":"  it('parse level with #EXT-X-KEY after #EXTINF', function () {\n    const level = `#EXTM3U\n#EXT-X-TARGETDURATION:10\n#EXT-X-VERSION:3\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:10,\n#EXT-X-KEY:METHOD=AES-128,URI=\"https://dummy.com/crypt-0.key\"\n0001.ts\n#EXTINF:10,\n0002.ts\n#EXTINF:10,\n0003.ts\n#EXTINF:10,\n0004.ts\n#EXTINF:10,\n0005.ts\n#EXTINF:10,\n0006.ts\n#EXTINF:10,\n0007.ts\n#EXTINF:10,\n0008.ts`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://dummy.com/playlist.m3u8', 0);\n    expect(result.fragments).to.have.lengthOf(8);\n    expect(result.totalduration).to.equal(80);\n    let fragdecryptdata,\n        decryptdata = result.fragments[0].decryptdata,\n        sn = 0;\n    result.fragments.forEach(function (fragment, idx) {\n      sn = idx + 1;\n      expect(fragment.url, 'http://dummy.com/000' + sn + '.ts'); // decryptdata should persist across all fragments\n\n      fragdecryptdata = fragment.decryptdata;\n      expect(fragdecryptdata.method).to.equal(decryptdata.method);\n      expect(fragdecryptdata.uri).to.equal(decryptdata.uri);\n      expect(fragdecryptdata.key).to.equal(decryptdata.key); // initialization vector is correctly generated since it wasn't declared in the playlist\n\n      const iv = fragdecryptdata.iv;\n      expect(iv[15]).to.equal(idx); // hold this decrypt data to compare to the next fragment's decrypt data\n\n      decryptdata = fragment.decryptdata;\n    });\n  }); // PR #454 - Add support for custom tags in fragment object","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"return custom tags in fragment object","suites":["PlaylistLoader"],"updatePoint":{"line":659,"column":43,"index":32314},"line":659,"code":"  it('return custom tags in fragment object', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:719926\n#EXTINF:9.40,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719926.ts\n#EXTINF:9.56,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719927.ts\n#EXT-X-CUE-OUT:DURATION=150,BREAKID=0x0\n#EXTINF:9.23,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719928.ts\n#EXTINF:0.50,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719929.ts\n#EXT-X-CUE-IN\n#EXTINF:8.50,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719930.ts\n#EXTINF:9.43,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719931.ts\n#EXTINF:9.78,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719932.ts\n#EXTINF:9.31,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719933.ts\n#EXTINF:9.98,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719934.ts\n#EXTINF:9.25,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719935.ts`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://dummy.url.com/playlist.m3u8', 0);\n    expect(result.fragments).to.have.lengthOf(10);\n    expect(result.totalduration).to.equal(84.94);\n    expect(result.targetduration).to.equal(10);\n    expect(result.fragments[0].url).to.equal('http://dummy.url.com/hls/live/segment/segment_022916_164500865_719926.ts');\n    expect(result.fragments[0].tagList).to.have.lengthOf(1);\n    expect(result.fragments[2].tagList[0][0]).to.equal('EXT-X-CUE-OUT');\n    expect(result.fragments[2].tagList[0][1]).to.equal('DURATION=150,BREAKID=0x0');\n    expect(result.fragments[3].tagList[0][1]).to.equal('0.50');\n    expect(result.fragments[4].tagList).to.have.lengthOf(2);\n    expect(result.fragments[4].tagList[0][0]).to.equal('EXT-X-CUE-IN');\n    expect(result.fragments[7].tagList[0][0]).to.equal('INF');\n    expect(result.fragments[8].url).to.equal('http://dummy.url.com/hls/live/segment/segment_022916_164500865_719934.ts');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses playlists with #EXT-X-PROGRAM-DATE-TIME after #EXTINF before fragment URL","suites":["PlaylistLoader"],"updatePoint":{"line":700,"column":86,"index":34416},"line":700,"code":"  it('parses playlists with #EXT-X-PROGRAM-DATE-TIME after #EXTINF before fragment URL', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:2\n#EXT-X-TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:69844067\n#EXTINF:10, no desc\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:34:44Z\nRollover38803/20160525T064049-01-69844067.ts\n#EXTINF:10, no desc\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:34:54Z\nRollover38803/20160525T064049-01-69844068.ts\n#EXTINF:10, no desc\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:35:04Z\nRollover38803/20160525T064049-01-69844069.ts\n    `;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n    expect(result.fragments).to.have.lengthOf(3);\n    expect(result.hasProgramDateTime).to.be.true;\n    expect(result.totalduration).to.equal(30);\n    expect(result.fragments[0].url).to.equal('http://video.example.com/Rollover38803/20160525T064049-01-69844067.ts');\n    expect(result.fragments[0].programDateTime).to.equal(1464366884000);\n    expect(result.fragments[1].url).to.equal('http://video.example.com/Rollover38803/20160525T064049-01-69844068.ts');\n    expect(result.fragments[1].programDateTime).to.equal(1464366894000);\n    expect(result.fragments[2].url).to.equal('http://video.example.com/Rollover38803/20160525T064049-01-69844069.ts');\n    expect(result.fragments[2].programDateTime).to.equal(1464366904000);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses #EXTINF without a leading digit","suites":["PlaylistLoader"],"updatePoint":{"line":726,"column":44,"index":35744},"line":726,"code":"  it('parses #EXTINF without a leading digit', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-TARGETDURATION:14\n#EXTINF:.360,\n/sec(3ae40f708f79ca9471f52b86da76a3a8)/frag(1)/video/107/282/158282701_mp4_h264_aac_hq.ts\n#EXT-X-ENDLIST`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core', 0);\n    expect(result.fragments).to.have.lengthOf(1);\n    expect(result.fragments[0].duration).to.equal(0.36);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses #EXT-X-MAP URI","suites":["PlaylistLoader"],"updatePoint":{"line":738,"column":27,"index":36304},"line":738,"code":"  it('parses #EXT-X-MAP URI', function () {\n    const level = `#EXTM3U\n#EXT-X-TARGETDURATION:6\n#EXT-X-VERSION:7\n#EXT-X-MEDIA-SEQUENCE:1\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-INDEPENDENT-SEGMENTS\n#EXT-X-MAP:URI=\"main.mp4\",BYTERANGE=\"718@0\"\n#EXTINF:6.00600,\n#EXT-X-BYTERANGE:1543597@718\nmain.mp4`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/158282701_mp4_h264_aac_hq.m3u8#cell=core', 0);\n    const initSegment = result.fragments[0].initSegment;\n    expect(initSegment.url).to.equal('http://proxy-62.dailymotion.com/sec(3ae40f708f79ca9471f52b86da76a3a8)/video/107/282/main.mp4');\n    expect(initSegment.byteRangeStartOffset).to.equal(0);\n    expect(initSegment.byteRangeEndOffset).to.equal(718);\n    expect(initSegment.sn).to.equal('initSegment');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parses multiple #EXT-X-MAP URI","suites":["PlaylistLoader"],"updatePoint":{"line":756,"column":36,"index":37156},"line":756,"code":"  it('parses multiple #EXT-X-MAP URI', function () {\n    const level = `#EXTM3U\n#EXT-X-TARGETDURATION:6\n#EXT-X-VERSION:7\n#EXT-X-MEDIA-SEQUENCE:1\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-INDEPENDENT-SEGMENTS\n#EXT-X-MAP:URI=\"main.mp4\"\n#EXTINF:6.00600,\nfrag1.mp4\n#EXT-X-DISCONTINUITY\n#EXT-X-MAP:URI=\"alt.mp4\"\n#EXTINF:4.0\nfrag2.mp4\n`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n    expect(result.fragments[0].initSegment.url).to.equal('http://video.example.com/main.mp4');\n    expect(result.fragments[0].initSegment.sn).to.equal('initSegment');\n    expect(result.fragments[1].initSegment.url).to.equal('http://video.example.com/alt.mp4');\n    expect(result.fragments[1].initSegment.sn).to.equal('initSegment');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"if playlists contains #EXT-X-PROGRAM-DATE-TIME switching will be applied by PDT","suites":["PlaylistLoader","PDT calculations"],"updatePoint":{"line":778,"column":87,"index":38011},"line":778,"code":"    it('if playlists contains #EXT-X-PROGRAM-DATE-TIME switching will be applied by PDT', function () {\n      const level = `#EXTM3U\n#EXT-X-VERSION:2\n#EXT-X-TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:69844067\n#EXTINF:10, no desc\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:34:44Z\nRollover38803/20160525T064049-01-69844067.ts\n#EXTINF:10, no desc\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:34:54Z\nRollover38803/20160525T064049-01-69844068.ts\n#EXTINF:10, no desc\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:35:04Z\nRollover38803/20160525T064049-01-69844069.ts\n    `;\n      const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n      expect(result.hasProgramDateTime).to.be.true;\n      expect(result.fragments[0].rawProgramDateTime).to.equal('2016-05-27T16:34:44Z');\n      expect(result.fragments[0].programDateTime).to.equal(1464366884000);\n      expect(result.fragments[1].rawProgramDateTime).to.equal('2016-05-27T16:34:54Z');\n      expect(result.fragments[1].programDateTime).to.equal(1464366894000);\n      expect(result.fragments[2].rawProgramDateTime).to.equal('2016-05-27T16:35:04Z');\n      expect(result.fragments[2].programDateTime).to.equal(1464366904000);\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"backfills PDT values if the first segment does not start with PDT","suites":["PlaylistLoader","PDT calculations"],"updatePoint":{"line":802,"column":73,"index":39189},"line":802,"code":"    it('backfills PDT values if the first segment does not start with PDT', function () {\n      const level = `\n#EXTINF:10\nfrag0.ts\n#EXTINF:10\nfrag1.ts\n#EXTINF:10\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:35:04Z\nfrag2.ts\n    `;\n      const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n      expect(result.hasProgramDateTime).to.be.true;\n      expect(result.fragments[2].rawProgramDateTime).to.equal('2016-05-27T16:35:04Z');\n      expect(result.fragments[1].programDateTime).to.equal(1464366894000);\n      expect(result.fragments[0].programDateTime).to.equal(1464366884000);\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"extrapolates PDT forward when subsequent fragments do not have a raw programDateTime","suites":["PlaylistLoader","PDT calculations"],"updatePoint":{"line":818,"column":92,"index":39830},"line":818,"code":"    it('extrapolates PDT forward when subsequent fragments do not have a raw programDateTime', function () {\n      const level = `\n#EXTINF:10\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:35:04Z\nfrag0.ts\n#EXTINF:10\nfrag1.ts\n#EXTINF:10\nfrag2.ts\n    `;\n      const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n      expect(result.hasProgramDateTime).to.be.true;\n      expect(result.fragments[0].rawProgramDateTime).to.equal('2016-05-27T16:35:04Z');\n      expect(result.fragments[1].programDateTime).to.equal(1464366914000);\n      expect(result.fragments[2].programDateTime).to.equal(1464366924000);\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"recomputes PDT extrapolation whenever a new raw programDateTime is hit","suites":["PlaylistLoader","PDT calculations"],"updatePoint":{"line":834,"column":78,"index":40457},"line":834,"code":"    it('recomputes PDT extrapolation whenever a new raw programDateTime is hit', function () {\n      const level = `\n#EXTM3U\n#EXT-X-DISCONTINUITY\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:35:04Z\n#EXTINF:10\nfrag0.ts\n#EXTINF:10\nfrag1.ts\n#EXT-X-DISCONTINUITY\n#EXT-X-PROGRAM-DATE-TIME:2017-05-27T16:35:04Z\n#EXTINF:10\nfrag2.ts\n#EXTINF:10\nfrag3.ts\n#EXT-X-DISCONTINUITY\n#EXT-X-PROGRAM-DATE-TIME:2015-05-27T11:42:03Z\n#EXTINF:10\nfrag4.ts\n#EXTINF:10\nfrag5.ts\n    `;\n      const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n      expect(result.hasProgramDateTime).to.be.true;\n      expect(result.fragments[0].programDateTime).to.equal(1464366904000);\n      expect(result.fragments[0].rawProgramDateTime).to.equal('2016-05-27T16:35:04Z');\n      expect(result.fragments[1].programDateTime).to.equal(1464366914000);\n      expect(result.fragments[2].programDateTime).to.equal(1495902904000);\n      expect(result.fragments[2].rawProgramDateTime).to.equal('2017-05-27T16:35:04Z');\n      expect(result.fragments[3].programDateTime).to.equal(1495902914000);\n      expect(result.fragments[4].programDateTime).to.equal(1432726923000);\n      expect(result.fragments[4].rawProgramDateTime).to.equal('2015-05-27T11:42:03Z');\n      expect(result.fragments[5].programDateTime).to.equal(1432726933000);\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"propagates the raw programDateTime to the fragment following the init segment","suites":["PlaylistLoader","PDT calculations"],"updatePoint":{"line":868,"column":85,"index":41788},"line":868,"code":"    it('propagates the raw programDateTime to the fragment following the init segment', function () {\n      const level = `\n#EXTINF:10\n#EXT-X-PROGRAM-DATE-TIME:2016-05-27T16:35:04Z\n#EXT-X-MAP\nfrag0.ts\n#EXTINF:10\nfrag1.ts\n    `;\n      const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n      expect(result.hasProgramDateTime).to.be.true;\n      expect(result.sn).to.not.equal('initSegment');\n      expect(result.fragments[0].rawProgramDateTime).to.equal('2016-05-27T16:35:04Z');\n      expect(result.fragments[0].programDateTime).to.equal(1464366904000);\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"ignores bad PDT values","suites":["PlaylistLoader","PDT calculations"],"updatePoint":{"line":883,"column":30,"index":42336},"line":883,"code":"    it('ignores bad PDT values', function () {\n      const level = `\n#EXTINF:10\n#EXT-X-PROGRAM-DATE-TIME:foo\nfrag0.ts\n#EXTINF:10\nfrag1.ts\n    `;\n      const result = M3U8Parser.parseLevelPlaylist(level, 'http://video.example.com/disc.m3u8', 0);\n      expect(result.hasProgramDateTime).to.be.false;\n      expect(result.fragments[0].rawProgramDateTime).to.not.exist;\n      expect(result.fragments[0].programDateTime).to.not.exist;\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"Parses the SERVER-CONTROL tag","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":933,"column":37,"index":44583},"line":933,"code":"    it('Parses the SERVER-CONTROL tag', function () {\n      const details = M3U8Parser.parseLevelPlaylist(playlist, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n      expect(details.canBlockReload).to.be.true;\n      expect(details.canSkipUntil).to.equal(24);\n      expect(details.partHoldBack).to.equal(3.012); // defaults:\n\n      expect(details.holdBack).to.equal(0);\n      expect(details.canSkipDateRanges).to.be.false;\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"Parses the SERVER-CONTROL CAN-SKIP-DATERANGES and HOLD-BACK attributes","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":942,"column":78,"index":45078},"line":942,"code":"    it('Parses the SERVER-CONTROL CAN-SKIP-DATERANGES and HOLD-BACK attributes', function () {\n      const details = M3U8Parser.parseLevelPlaylist(`#EXTM3U\n#EXT-X-TARGETDURATION:4\n#EXT-X-VERSION:3\n#EXT-X-SERVER-CONTROL:CAN-SKIP-UNTIL=20,CAN-SKIP-DATERANGES=YES,HOLD-BACK=15.1\n#EXTINF:4.00000,\nfileSequence1151226.ts`, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n      expect(details.canSkipUntil).to.equal(20);\n      expect(details.holdBack).to.equal(15.1);\n      expect(details.canSkipDateRanges).to.be.true; // defaults:\n\n      expect(details.canBlockReload).to.be.false;\n      expect(details.partHoldBack).to.equal(0);\n      expect(details.partTarget).to.equal(0);\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"Parses the PART-INF tag","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":957,"column":31,"index":45732},"line":957,"code":"    it('Parses the PART-INF tag', function () {\n      const details = M3U8Parser.parseLevelPlaylist(playlist, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n      expect(details.partTarget).to.equal(1.004);\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"Parses the PART tags","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":961,"column":28,"index":45966},"line":961,"code":"    it('Parses the PART tags', function () {\n      const details = M3U8Parser.parseLevelPlaylist(playlist, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0); // TODO: Partial Segments for a yet to be appended EXT-INF entry will be added to the fragments list\n      //  once PartLoader is implemented to abstract away part loading complexity using progressive loader events\n\n      expect(details.fragments).to.have.lengthOf(8);\n      expect(details.partList).to.be.an('array').which.has.lengthOf(8);\n      expect(details.partList[0].fragment).to.equal(details.fragments[6]);\n      expect(details.partList[1].fragment).to.equal(details.fragments[6]);\n      expect(details.partList[2].fragment).to.equal(details.fragments[6]);\n      expect(details.partList[3].fragment).to.equal(details.fragments[6]);\n      expect(details.partList[4].fragment).to.equal(details.fragments[7]);\n      expect(details.partList[5].fragment).to.equal(details.fragments[7]);\n      expect(details.partList[6].fragment).to.equal(details.fragments[7]);\n      expect(details.partList[7].fragment).to.equal(details.fragments[7]);\n      expectWithJSONMessage(details.partList[0], '6-0').to.deep.include({\n        duration: 1,\n        gap: false,\n        independent: true,\n        index: 0,\n        relurl: 'lowLatencyHLS.php?segment=filePart1151232.1.ts'\n      });\n      expectWithJSONMessage(details.partList[1], '6-1').to.deep.include({\n        duration: 1.00001,\n        gap: false,\n        independent: false,\n        index: 1,\n        relurl: 'lowLatencyHLS.php?segment=filePart1151232.2.ts'\n      });\n      expectWithJSONMessage(details.partList[2], '6-2').to.deep.include({\n        duration: 1,\n        gap: false,\n        independent: true,\n        index: 2,\n        relurl: 'lowLatencyHLS.php?segment=filePart1151232.3.ts'\n      });\n      expectWithJSONMessage(details.partList[3], '6-3').to.deep.include({\n        duration: 1,\n        gap: false,\n        independent: true,\n        index: 3,\n        relurl: 'lowLatencyHLS.php?segment=filePart1151232.4.ts'\n      });\n      expectWithJSONMessage(details.partList[4], '7-0').to.deep.include({\n        duration: 1,\n        gap: false,\n        independent: true,\n        index: 0,\n        relurl: 'lowLatencyHLS.php?segment=filePart1151233.1.ts'\n      });\n      expectWithJSONMessage(details.partList[5], '7-1').to.deep.include({\n        duration: 0.99999,\n        gap: false,\n        independent: true,\n        index: 1,\n        relurl: 'lowLatencyHLS.php?segment=filePart1151233.2.ts'\n      });\n      expectWithJSONMessage(details.partList[6], '7-2').to.deep.include({\n        duration: 1,\n        gap: false,\n        independent: false,\n        index: 2,\n        relurl: 'lowLatencyHLS.php?segment=filePart1151233.3.ts'\n      });\n      expectWithJSONMessage(details.partList[7], '7-3').to.deep.include({\n        duration: 1,\n        gap: true,\n        independent: true,\n        index: 3,\n        relurl: 'lowLatencyHLS.php?segment=filePart1151233.4.ts'\n      });\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"Parses the PRELOAD-HINT tag","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1032,"column":35,"index":48991},"line":1032,"code":"    it('Parses the PRELOAD-HINT tag', function () {\n      const details = M3U8Parser.parseLevelPlaylist(playlist, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n      expect(details.preloadHint).to.be.an('object');\n      expect(details.preloadHint.TYPE).to.equal('PART');\n      expect(details.preloadHint.URI).to.equal('lowLatencyHLS.php?segment=filePart1151234.1.ts');\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"Parses the RENDITION-REPORT tag","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1038,"column":39,"index":49395},"line":1038,"code":"    it('Parses the RENDITION-REPORT tag', function () {\n      const details = M3U8Parser.parseLevelPlaylist(playlist, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n      expect(details.renditionReports).to.be.an('array').which.has.lengthOf(2);\n      expect(details.renditionReports[0].URI).to.equal('/media0/lowLatencyHLS.php');\n      expect(details.renditionReports[0]['LAST-MSN']).to.equal('1151201');\n      expect(details.renditionReports[0]['LAST-PART']).to.equal('3');\n      expect(details.renditionReports[0]['LAST-I-MSN']).to.equal('1151201');\n      expect(details.renditionReports[0]['LAST-I-PART']).to.equal('3');\n    });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"adds BITRATE to fragment.tagList","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1048,"column":38,"index":50054},"line":1048,"code":"  it('adds BITRATE to fragment.tagList', function () {\n    const playlist = `#EXTM3U\n#EXT-X-TARGETDURATION:6\n#EXT-X-VERSION:3\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:5.97263,\\t\n#EXT-X-BITRATE:5083\nfileSequence0.ts\n#EXTINF:5.97263,\\t\n#EXT-X-BITRATE:5453\nfileSequence1.ts\n#EXTINF:5.97263,\\t\n#EXT-X-BITRATE:4802\nfileSequence2.ts\n`;\n    const details = M3U8Parser.parseLevelPlaylist(playlist, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n    expectWithJSONMessage(details.fragments[0].tagList).to.deep.equal([['INF', '5.97263', '\\t'], ['BITRATE', '5083']]);\n    expectWithJSONMessage(details.fragments[1].tagList).to.deep.equal([['INF', '5.97263', '\\t'], ['BITRATE', '5453']]);\n    expectWithJSONMessage(details.fragments[2].tagList).to.deep.equal([['INF', '5.97263', '\\t'], ['BITRATE', '4802']]);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"adds GAP to fragment.tagList","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1069,"column":34,"index":50891},"line":1069,"code":"  it('adds GAP to fragment.tagList', function () {\n    const playlist = `#EXTM3U\n#EXT-X-TARGETDURATION:5\n#EXT-X-VERSION:3\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:5,title\nfileSequence0.ts\n#EXTINF:5,\n#EXT-X-GAP\nfileSequence1.ts\n#EXTINF:5,\nfileSequence2.ts\n`;\n    const details = M3U8Parser.parseLevelPlaylist(playlist, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n    expectWithJSONMessage(details.fragments[0].tagList).to.deep.equal([['INF', '5', 'title']]);\n    expectWithJSONMessage(details.fragments[1].tagList).to.deep.equal([['INF', '5'], ['GAP']]);\n    expectWithJSONMessage(details.fragments[2].tagList).to.deep.equal([['INF', '5']]);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"adds unhandled tags (DATERANGE) and comments to fragment.tagList","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1088,"column":70,"index":51615},"line":1088,"code":"  it('adds unhandled tags (DATERANGE) and comments to fragment.tagList', function () {\n    const playlist = `#EXTM3U\n#EXT-X-TARGETDURATION:10\n#EXT-X-VERSION:4\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-PROGRAM-DATE-TIME:2018-09-28T16:50:26Z\n#EXTINF:10,\nmain1.aac\n#EXT-X-PROGRAM-DATE-TIME:2018-09-28T16:50:36Z\n#EXT-X-DATERANGE:ID=\"splice-6FFFFFF0\",START-DATE=\"2018-09-28T16:50:48Z\",PLANNED-DURATION=20.0,X-CUSTOM=\"Hi!\",SCTE35-OUT=0xFC002F0000000000FF\n#EXTINF:10,\nmain2.aac\n#EXTINF:10,\nmain3.aac\n#EXT-X-PROGRAM-DATE-TIME:2018-09-28T16:50:56Z\n#EXT-X-DATERANGE:ID=\"splice-6FFFFFF0\",START-DATE=\"2018-09-28T16:51:18Z\",DURATION=30.0,SCTE35-IN=0xFC002F0000000000FF\n#EXTINF:9.9846,\nmain4.aac\n`;\n    const details = M3U8Parser.parseLevelPlaylist(playlist, 'http://dummy.url.com/playlist.m3u8', 0, PlaylistLevelType.MAIN, 0);\n    expectWithJSONMessage(details.fragments[0].tagList).to.deep.equal([['PROGRAM-DATE-TIME', '2018-09-28T16:50:26Z'], ['INF', '10']]);\n    expectWithJSONMessage(details.fragments[1].tagList).to.deep.equal([['PROGRAM-DATE-TIME', '2018-09-28T16:50:36Z'], ['EXT-X-DATERANGE', 'ID=\"splice-6FFFFFF0\",START-DATE=\"2018-09-28T16:50:48Z\",PLANNED-DURATION=20.0,X-CUSTOM=\"Hi!\",SCTE35-OUT=0xFC002F0000000000FF'], ['INF', '10']]);\n    expectWithJSONMessage(details.fragments[2].tagList).to.deep.equal([['INF', '10']]);\n    expectWithJSONMessage(details.fragments[3].tagList).to.deep.equal([['PROGRAM-DATE-TIME', '2018-09-28T16:50:56Z'], ['EXT-X-DATERANGE', 'ID=\"splice-6FFFFFF0\",START-DATE=\"2018-09-28T16:51:18Z\",DURATION=30.0,SCTE35-IN=0xFC002F0000000000FF'], ['INF', '9.9846']]);\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"tests : at end of tag name is used to divide custom tags","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1114,"column":62,"index":53210},"line":1114,"code":"  it('tests : at end of tag name is used to divide custom tags', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:2\n#EXT-X-TARGETDURATION:10\n#EXT-X-MEDIA-SEQUENCE:69844067\n#EXTINF:9.40,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719926.ts\n#EXTINF:9.56,\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719927.ts\n#EXT-X-CUSTOM-DATE:2016-05-27T16:34:44Z\n#EXT-X-CUSTOM-JSON:{\"key\":\"value\"}\n#EXT-X-CUSTOM-URI:http://dummy.url.com/hls/moreinfo.json\n#EXTINF:10, no desc\nhttp://dummy.url.com/hls/live/segment/segment_022916_164500865_719928.ts\n    `;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://dummy.url.com/playlist.m3u8', 0);\n    expect(result.fragments[2].tagList[0][0]).to.equal('EXT-X-CUSTOM-DATE');\n    expect(result.fragments[2].tagList[0][1]).to.equal('2016-05-27T16:34:44Z');\n    expect(result.fragments[2].tagList[1][0]).to.equal('EXT-X-CUSTOM-JSON');\n    expect(result.fragments[2].tagList[1][1]).to.equal('{\"key\":\"value\"}');\n    expect(result.fragments[2].tagList[2][0]).to.equal('EXT-X-CUSTOM-URI');\n    expect(result.fragments[2].tagList[2][1]).to.equal('http://dummy.url.com/hls/moreinfo.json');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"allows spaces in the fragment files","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1137,"column":41,"index":54361},"line":1137,"code":"  it('allows spaces in the fragment files', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:4\n#EXT-X-TARGETDURATION:7\n#EXT-X-MEDIA-SEQUENCE:1\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:6.006,\n180724_Allison VLOG-v3_00001.ts\n#EXTINF:6.006,\n180724_Allison VLOG-v3_00002.ts\n#EXT-X-ENDLIST\n    `;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://dummy.url.com/playlist.m3u8', 0);\n    expect(result.fragments.length).to.equal(2);\n    expect(result.totalduration).to.equal(12.012);\n    expect(result.targetduration).to.equal(7);\n    expect(result.fragments[0].url).to.equal('http://dummy.url.com/180724_Allison VLOG-v3_00001.ts');\n    expect(result.fragments[1].url).to.equal('http://dummy.url.com/180724_Allison VLOG-v3_00002.ts');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"deals with spaces after fragment files","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1156,"column":44,"index":55110},"line":1156,"code":"  it('deals with spaces after fragment files', function () {\n    // You can't see them, but there should be spaces directly after the .ts\n    const level = `#EXTM3U\n#EXT-X-VERSION:4\n#EXT-X-TARGETDURATION:7\n#EXT-X-MEDIA-SEQUENCE:1\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:6.006,\n180724_Allison VLOG v3_00001.ts\n#EXTINF:6.006,\n180724_Allison VLOG v3_00002.ts\n#EXT-X-ENDLIST\n    `;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://dummy.url.com/playlist.m3u8', 0);\n    expect(result.fragments.length).to.equal(2);\n    expect(result.totalduration).to.equal(12.012);\n    expect(result.targetduration).to.equal(7);\n    expect(result.fragments[0].url).to.equal('http://dummy.url.com/180724_Allison VLOG v3_00001.ts');\n    expect(result.fragments[1].url).to.equal('http://dummy.url.com/180724_Allison VLOG v3_00002.ts');\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"parse fmp4 level with discontinuities and program date time","suites":["PlaylistLoader","Low-Latency HLS Manifest Parsing"],"updatePoint":{"line":1176,"column":65,"index":55957},"line":1176,"code":"  it('parse fmp4 level with discontinuities and program date time', function () {\n    const level = `#EXTM3U\n#EXT-X-VERSION:6\n#EXT-X-TARGETDURATION:6\n#EXT-X-MEDIA-SEQUENCE:1638262\n#EXT-X-DISCONTINUITY-SEQUENCE:28141\n\n#EXT-X-KEY:METHOD=NONE\n#EXTINF:5.005,\n#EXT-X-MAP:URI=\"init.mp4\"\n#EXT-X-PROGRAM-DATE-TIME:2021-11-10T03:25:49.015Z\n3.mp4\n#EXTINF:5.005,\n4.mp4\n#EXTINF:1.961,\n5.mp4\n#EXT-X-DISCONTINUITY\n#EXTINF:5.005,\n0.mp4\n#EXTINF:5.005,\n1.mp4\n#EXTINF:5.005,\n2.mp4\n#EXTINF:5.005,\n3.mp4\n#EXTINF:5.005,\n4.mp4\n#EXTINF:1.961,\n5.mp4\n#EXT-X-DISCONTINUITY\n#EXTINF:5.005,\n0.mp4\n#EXTINF:5.005,\n1.mp4\n#EXTINF:5.005,\n2.mp4\n#EXTINF:5.005,\n3.mp4\n#EXTINF:5.005,\n4.mp4\n#EXTINF:1.961,\n5.mp4\n#EXT-X-DISCONTINUITY\n#EXTINF:5.005,\n0.mp4\n#EXTINF:4.037,\n1.mp4\n#EXT-X-PROGRAM-DATE-TIME:2021-11-10T03:27:04Z\n#EXT-X-CUE-IN\n#EXT-X-MAP:URI=\"init_960719739.mp4\"\n#EXT-X-DISCONTINUITY\n#EXTINF:6.0,\nmedia_1638274.m4s\n#EXTINF:6.0,\nmedia_1638275.m4s\n#EXTINF:6.0,\nmedia_1638276.m4s\n#EXTINF:6.0,\nmedia_1638277.m4s\n#EXTINF:6.0,\nmedia_1638278.m4s`;\n    const result = M3U8Parser.parseLevelPlaylist(level, 'http://foo.com/adaptive/test.m3u8', 0);\n    expect(result.fragments.length).to.equal(22);\n    let pdt = 1636514824000;\n\n    for (let i = 17; i < result.fragments.length; i++) {\n      const frag = result.fragments[i];\n      expect(frag.programDateTime).to.equal(pdt);\n      pdt += frag.duration * 1000;\n    }\n  });","file":"unit/loader/playlist-loader.js","skipped":false,"dir":"tests"},{"name":"constructor() supports empty arguments","suites":["AttrList"],"updatePoint":{"line":3,"column":44,"index":137},"line":3,"code":"  it('constructor() supports empty arguments', function () {\n    expect(Object.keys(new AttrList())).to.deep.equal([]);\n    expect(Object.keys(new AttrList({}))).to.deep.equal([]);\n    expect(Object.keys(new AttrList(undefined))).to.deep.equal([]);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"constructor() supports object argument","suites":["AttrList"],"updatePoint":{"line":8,"column":44,"index":392},"line":8,"code":"  it('constructor() supports object argument', function () {\n    const obj = {\n      VALUE: '42'\n    };\n    const list = new AttrList(obj);\n    expect(list.decimalInteger('VALUE')).to.equal(42);\n    expect(Object.keys(list).length).to.equal(1);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses valid decimalInteger attribute","suites":["AttrList"],"updatePoint":{"line":16,"column":43,"index":642},"line":16,"code":"  it('parses valid decimalInteger attribute', function () {\n    expect(new AttrList('INT=42').decimalInteger('INT')).to.equal(42);\n    expect(new AttrList('INT=0').decimalInteger('INT')).to.equal(0);\n    expect(new AttrList('INT=\"42\"').decimalInteger('INT')).to.equal(42);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses attribute with leading space","suites":["AttrList"],"updatePoint":{"line":21,"column":41,"index":919},"line":21,"code":"  it('parses attribute with leading space', function () {\n    expect(new AttrList(' INT=42').decimalInteger('INT')).to.equal(42);\n    expect(new AttrList(' INT=0').decimalInteger('INT')).to.equal(0);\n    expect(new AttrList(' INT=\"42\"').decimalInteger('INT')).to.equal(42);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses attribute with trailing space","suites":["AttrList"],"updatePoint":{"line":26,"column":42,"index":1200},"line":26,"code":"  it('parses attribute with trailing space', function () {\n    expect(new AttrList('INT =42').decimalInteger('INT')).to.equal(42);\n    expect(new AttrList('INT =0').decimalInteger('INT')).to.equal(0);\n    expect(new AttrList('INT =\"42\"').decimalInteger('INT')).to.equal(42);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses valid hexadecimalInteger attribute","suites":["AttrList"],"updatePoint":{"line":31,"column":47,"index":1486},"line":31,"code":"  it('parses valid hexadecimalInteger attribute', function () {\n    expect(new AttrList('HEX=0x42').hexadecimalIntegerAsNumber('HEX')).to.equal(0x42);\n    expect(new AttrList('HEX=0X42').hexadecimalIntegerAsNumber('HEX')).to.equal(0x42);\n    expect(new AttrList('HEX=0x0').hexadecimalIntegerAsNumber('HEX')).to.equal(0);\n    expect(new AttrList('HEX=\"0x42\"').hexadecimalIntegerAsNumber('HEX')).to.equal(0x42);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses valid decimalFloatingPoint attribute","suites":["AttrList"],"updatePoint":{"line":37,"column":49,"index":1904},"line":37,"code":"  it('parses valid decimalFloatingPoint attribute', function () {\n    expect(new AttrList('FLOAT=0.42').decimalFloatingPoint('FLOAT')).to.equal(0.42);\n    expect(new AttrList('FLOAT=-0.42').decimalFloatingPoint('FLOAT')).to.equal(-0.42);\n    expect(new AttrList('FLOAT=0').decimalFloatingPoint('FLOAT')).to.equal(0);\n    expect(new AttrList('FLOAT=\"0.42\"').decimalFloatingPoint('FLOAT')).to.equal(0.42);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses valid quotedString attribute","suites":["AttrList"],"updatePoint":{"line":43,"column":41,"index":2306},"line":43,"code":"  it('parses valid quotedString attribute', function () {\n    expect(new AttrList('STRING=\"hi\"').STRING).to.equal('hi');\n    expect(new AttrList('STRING=\"\"').STRING).to.equal('');\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses exotic quotedString attribute","suites":["AttrList"],"updatePoint":{"line":47,"column":42,"index":2493},"line":47,"code":"  it('parses exotic quotedString attribute', function () {\n    const list = new AttrList('STRING=\"hi,ENUM=OK,RES=4x2\"');\n    expect(list.STRING).to.equal('hi,ENUM=OK,RES=4x2');\n    expect(Object.keys(list).length).to.equal(1);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses valid enumeratedString attribute","suites":["AttrList"],"updatePoint":{"line":52,"column":45,"index":2729},"line":52,"code":"  it('parses valid enumeratedString attribute', function () {\n    expect(new AttrList('ENUM=OK').enumeratedString('ENUM')).to.equal('OK');\n    expect(new AttrList('ENUM=\"OK\"').enumeratedString('ENUM')).to.equal('OK');\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses exotic enumeratedString attribute","suites":["AttrList"],"updatePoint":{"line":56,"column":46,"index":2954},"line":56,"code":"  it('parses exotic enumeratedString attribute', function () {\n    expect(new AttrList('ENUM=1').enumeratedString('ENUM')).to.equal('1');\n    expect(new AttrList('ENUM=A=B').enumeratedString('ENUM')).to.equal('A=B');\n    expect(new AttrList('ENUM=A=B=C').enumeratedString('ENUM')).to.equal('A=B=C');\n    const list = new AttrList('ENUM1=A=B=C,ENUM2=42');\n    expect(list.enumeratedString('ENUM1')).to.equal('A=B=C');\n    expect(list.enumeratedString('ENUM2')).to.equal('42');\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses valid decimalResolution attribute","suites":["AttrList"],"updatePoint":{"line":64,"column":46,"index":3436},"line":64,"code":"  it('parses valid decimalResolution attribute', function () {\n    expect(new AttrList('RES=400x200').decimalResolution('RES')).to.deep.equal({\n      width: 400,\n      height: 200\n    });\n    expect(new AttrList('RES=0x0').decimalResolution('RES')).to.deep.equal({\n      width: 0,\n      height: 0\n    });\n    expect(new AttrList('RES=\"400x200\"').decimalResolution('RES')).to.deep.equal({\n      width: 400,\n      height: 200\n    });\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"handles invalid decimalResolution attribute","suites":["AttrList"],"updatePoint":{"line":78,"column":49,"index":3877},"line":78,"code":"  it('handles invalid decimalResolution attribute', function () {\n    expect(new AttrList('RES=400x-200').decimalResolution('RES')).to.not.exist;\n    expect(new AttrList('RES=400.5x200').decimalResolution('RES')).to.not.exist;\n    expect(new AttrList('RES=400x200.5').decimalResolution('RES')).to.not.exist;\n    expect(new AttrList('RES=400').decimalResolution('RES')).to.not.exist;\n    expect(new AttrList('RES=400x').decimalResolution('RES')).to.not.exist;\n    expect(new AttrList('RES=x200').decimalResolution('RES')).to.not.exist;\n    expect(new AttrList('RES=x').decimalResolution('RES')).to.not.exist;\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses multiple attributes","suites":["AttrList"],"updatePoint":{"line":87,"column":32,"index":4474},"line":87,"code":"  it('parses multiple attributes', function () {\n    const list = new AttrList('INT=42,HEX=0x42,FLOAT=0.42,STRING=\"hi\",ENUM=OK,RES=4x2');\n    expect(list.decimalInteger('INT')).to.equal(42);\n    expect(list.hexadecimalIntegerAsNumber('HEX')).to.equal(0x42);\n    expect(list.decimalFloatingPoint('FLOAT')).to.equal(0.42);\n    expect(list.STRING).to.equal('hi');\n    expect(list.enumeratedString('ENUM')).to.equal('OK');\n    expect(list.decimalResolution('RES')).to.deep.equal({\n      width: 4,\n      height: 2\n    });\n    expect(Object.keys(list).length).to.equal(6);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"handles missing attributes","suites":["AttrList"],"updatePoint":{"line":100,"column":32,"index":5047},"line":100,"code":"  it('handles missing attributes', function () {\n    const list = new AttrList();\n    expect(list.decimalInteger('INT')).to.be.NaN;\n    expect(list.hexadecimalIntegerAsNumber('HEX')).to.be.NaN;\n    expect(list.decimalFloatingPoint('FLOAT')).to.be.NaN;\n    expect(list.STRING).to.not.exist;\n    expect(list.enumeratedString('ENUM')).to.not.exist;\n    expect(list.decimalResolution('RES')).to.not.exist;\n    expect(Object.keys(list)).to.have.lengthOf(0);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"parses dashed attribute names","suites":["AttrList"],"updatePoint":{"line":110,"column":35,"index":5509},"line":110,"code":"  it('parses dashed attribute names', function () {\n    const list = new AttrList('INT-VALUE=42,H-E-X=0x42,-FLOAT=0.42,STRING-=\"hi\",ENUM=OK');\n    expect(list.decimalInteger('INT-VALUE')).to.equal(42);\n    expect(list.hexadecimalIntegerAsNumber('H-E-X')).to.equal(0x42);\n    expect(list.decimalFloatingPoint('-FLOAT')).to.equal(0.42);\n    expect(list['STRING-']).to.equal('hi');\n    expect(list.enumeratedString('ENUM')).to.equal('OK');\n    expect(Object.keys(list).length).to.equal(5);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"handles hexadecimalInteger conversions","suites":["AttrList"],"updatePoint":{"line":119,"column":44,"index":6011},"line":119,"code":"  it('handles hexadecimalInteger conversions', function () {\n    const list = new AttrList('HEX1=0x0123456789abcdef0123456789abcdef,HEX2=0x123,HEX3=0x0');\n    expect(list.hexadecimalInteger('HEX1').buffer).to.deep.equal(new Uint8Array([0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef]).buffer);\n    expect(list.hexadecimalInteger('HEX2').buffer).to.deep.equal(new Uint8Array([0x01, 0x23]).buffer);\n    expect(list.hexadecimalInteger('HEX3').buffer).to.deep.equal(new Uint8Array([0x0]).buffer);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"returns infinity on large number conversions","suites":["AttrList"],"updatePoint":{"line":125,"column":50,"index":6564},"line":125,"code":"  it('returns infinity on large number conversions', function () {\n    const list = new AttrList('VAL=12345678901234567890,HEX=0x0123456789abcdef0123456789abcdef');\n    expect(list.decimalInteger('VAL')).to.equal(Infinity);\n    expect(list.hexadecimalIntegerAsNumber('HEX')).to.equal(Infinity);\n  });","file":"unit/utils/attr-list.js","skipped":false,"dir":"tests"},{"name":"finds the element if it is present","suites":["binary search util","search helper"],"updatePoint":{"line":21,"column":42,"index":568},"line":21,"code":"    it('finds the element if it is present', function () {\n      for (let i = 0; i < list.length; i++) {\n        const item = list[i];\n        const foundItem = BinarySearch.search(list, buildComparisonFunction(item));\n        expect(foundItem).to.equal(item);\n      }\n    });","file":"unit/utils/binary-search.js","skipped":false,"dir":"tests"},{"name":"does not find the element if it is not present","suites":["binary search util","search helper"],"updatePoint":{"line":28,"column":54,"index":857},"line":28,"code":"    it('does not find the element if it is not present', function () {\n      const item = 1000;\n      const foundItem = BinarySearch.search(list, buildComparisonFunction(item));\n      expect(foundItem).to.not.exist;\n    });","file":"unit/utils/binary-search.js","skipped":false,"dir":"tests"},{"name":"should return true if some media.buffered includes the position","suites":["BufferHelper","isBuffered"],"updatePoint":{"line":27,"column":71,"index":727},"line":27,"code":"    it('should return true if some media.buffered includes the position', function () {\n      expect(BufferHelper.isBuffered(media, 0)).to.be.true;\n      expect(BufferHelper.isBuffered(media, 0.1)).to.be.true;\n      expect(BufferHelper.isBuffered(media, 0.5)).to.be.true;\n      expect(BufferHelper.isBuffered(media, 1)).to.be.true;\n      expect(BufferHelper.isBuffered(media, 2)).to.be.true;\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return false if any media.buffered does not includes the position","suites":["BufferHelper","isBuffered"],"updatePoint":{"line":34,"column":80,"index":1136},"line":34,"code":"    it('should return false if any media.buffered does not includes the position', function () {\n      expect(BufferHelper.isBuffered(media, -0.1)).to.be.false;\n      expect(BufferHelper.isBuffered(media, 0.51)).to.be.false;\n      expect(BufferHelper.isBuffered(media, 0.9)).to.be.false;\n      expect(BufferHelper.isBuffered(media, 2.1)).to.be.false;\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return false if media.buffered throws error","suites":["BufferHelper","isBuffered"],"updatePoint":{"line":40,"column":58,"index":1473},"line":40,"code":"    it('should return false if media.buffered throws error', function () {\n      const invalidMedia = {\n        get buffered() {\n          throw new Error('InvalidStateError');\n        }\n\n      };\n      expect(BufferHelper.isBuffered(invalidMedia, 0)).to.be.false;\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return false if media does not exist","suites":["BufferHelper","isBuffered"],"updatePoint":{"line":49,"column":51,"index":1739},"line":49,"code":"    it('should return false if media does not exist', function () {\n      expect(BufferHelper.isBuffered(null, 0)).to.be.false;\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return found buffer info if some media.buffered includes pos with allowed error","suites":["BufferHelper","bufferInfo"],"updatePoint":{"line":54,"column":94,"index":1963},"line":54,"code":"    it('should return found buffer info if some media.buffered includes pos with allowed error', function () {\n      // |////////|________|////////////////|\n      // 0       0.5       1                2\n      const media = {\n        get buffered() {\n          return createMockBuffer([{\n            startPTS: 0,\n            endPTS: 0.5\n          }, {\n            startPTS: 1,\n            endPTS: 2\n          }]);\n        }\n\n      };\n      const maxHoleDuration = 0;\n      expect(BufferHelper.bufferInfo(media, 0, maxHoleDuration)).to.deep.equal({\n        len: 0.5,\n        start: 0,\n        end: 0.5,\n        nextStart: 1\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return empty buffer info if media does not exist","suites":["BufferHelper","bufferInfo"],"updatePoint":{"line":77,"column":63,"index":2572},"line":77,"code":"    it('should return empty buffer info if media does not exist', function () {\n      const invalidMedia = {\n        get buffered() {\n          throw new Error('InvalidStateError');\n        }\n\n      };\n      const maxHoleDuration = 0;\n      expect(BufferHelper.bufferInfo(invalidMedia, 0, maxHoleDuration)).to.deep.equal({\n        len: 0,\n        start: 0,\n        end: 0,\n        nextStart: undefined\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return empty buffer info if media does not exist","suites":["BufferHelper","bufferInfo"],"updatePoint":{"line":92,"column":63,"index":2992},"line":92,"code":"    it('should return empty buffer info if media does not exist', function () {\n      const maxHoleDuration = 0;\n      expect(BufferHelper.bufferInfo(null, 0, maxHoleDuration)).to.deep.equal({\n        len: 0,\n        start: 0,\n        end: 0,\n        nextStart: undefined\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return found buffer info when maxHoleDuration is 0","suites":["BufferHelper","bufferedInfo"],"updatePoint":{"line":103,"column":65,"index":3331},"line":103,"code":"    it('should return found buffer info when maxHoleDuration is 0', function () {\n      // |////////|________|////////////////|\n      // 0       0.5       1                2\n      const buffered = [{\n        start: 0,\n        end: 0.5\n      }, {\n        start: 1,\n        end: 2\n      }];\n      const maxHoleDuration = 0;\n      expect(BufferHelper.bufferedInfo(buffered, 0, maxHoleDuration)).to.deep.equal({\n        len: 0.5,\n        start: 0,\n        end: 0.5,\n        nextStart: 1\n      });\n      expect(BufferHelper.bufferedInfo(buffered, 0.5, maxHoleDuration)).to.deep.equal({\n        len: 0,\n        start: 0.5,\n        end: 0.5,\n        nextStart: 1\n      });\n      expect(BufferHelper.bufferedInfo(buffered, 1, maxHoleDuration)).to.deep.equal({\n        len: 1,\n        start: 1,\n        end: 2,\n        nextStart: undefined\n      });\n      expect(BufferHelper.bufferedInfo(buffered, 1.5, maxHoleDuration)).to.deep.equal({\n        len: 0.5,\n        start: 1,\n        end: 2,\n        nextStart: undefined\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return found buffer info when maxHoleDuration is 0.5","suites":["BufferHelper","bufferedInfo"],"updatePoint":{"line":139,"column":67,"index":4361},"line":139,"code":"    it('should return found buffer info when maxHoleDuration is 0.5', function () {\n      // |////////|________|////////////////|\n      // 0       0.5       1                2\n      const buffered = [{\n        start: 0,\n        end: 0.5\n      }, {\n        start: 1,\n        end: 2\n      }];\n      const maxHoleDuration = 0.5;\n      expect(BufferHelper.bufferedInfo(buffered, 0, maxHoleDuration)).to.deep.equal({\n        len: 0.5,\n        start: 0,\n        end: 0.5,\n        nextStart: 1\n      }); // M: maxHoleDuration: 0.5\n      // |////////|________|////////////////|\n      // 0       0.5 - M - 1                2\n\n      expect(BufferHelper.bufferedInfo(buffered, 0.5, maxHoleDuration)).to.deep.equal({\n        len: 1.5,\n        start: 1,\n        end: 2,\n        nextStart: undefined\n      });\n      expect(BufferHelper.bufferedInfo(buffered, 1, maxHoleDuration)).to.deep.equal({\n        len: 1,\n        start: 1,\n        end: 2,\n        nextStart: undefined\n      });\n      expect(BufferHelper.bufferedInfo(buffered, 2, maxHoleDuration)).to.deep.equal({\n        len: 0,\n        start: 2,\n        end: 2,\n        nextStart: undefined\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should be able to handle unordered buffered","suites":["BufferHelper","bufferedInfo"],"updatePoint":{"line":178,"column":51,"index":5499},"line":178,"code":"    it('should be able to handle unordered buffered', function () {\n      // |////////|________|////////////////|\n      // 0       0.5      1.0              2.0\n      const buffered = [{\n        start: 1,\n        end: 2\n      }, {\n        start: 0,\n        end: 0.5\n      }];\n      const maxHoleDuration = 0.5;\n      expect(BufferHelper.bufferedInfo(buffered, 0, maxHoleDuration)).to.deep.equal({\n        len: 0.5,\n        start: 0,\n        end: 0.5,\n        nextStart: 1\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should be able to merge adjacent time ranges with a small hole","suites":["BufferHelper","bufferedInfo"],"updatePoint":{"line":196,"column":70,"index":6008},"line":196,"code":"    it('should be able to merge adjacent time ranges with a small hole', function () {\n      // |////////|________|////////////////|\n      // 0       0.5       1                2\n      const buffered = [{\n        start: 0,\n        end: 0.5\n      }, {\n        start: 1,\n        end: 2\n      }];\n      const maxHoleDuration = 1;\n      expect(BufferHelper.bufferedInfo(buffered, 0.8, maxHoleDuration)).to.deep.equal({\n        len: 1.2,\n        start: 0,\n        end: 2,\n        nextStart: undefined\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should be able to merge overlapping time ranges","suites":["BufferHelper","bufferedInfo"],"updatePoint":{"line":214,"column":55,"index":6507},"line":214,"code":"    it('should be able to merge overlapping time ranges', function () {\n      // |////////|________|\n      // |////////|////////|\n      // 0       0.5       1\n      const buffered = [{\n        start: 0,\n        end: 0.5\n      }, {\n        start: 0,\n        end: 1\n      }];\n      const maxHoleDuration = 0.5;\n      expect(BufferHelper.bufferedInfo(buffered, 0.5, maxHoleDuration)).to.deep.equal({\n        len: 0.5,\n        start: 0,\n        end: 1,\n        nextStart: undefined\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return empty buffered if pos is out of range","suites":["BufferHelper","bufferedInfo"],"updatePoint":{"line":233,"column":59,"index":7007},"line":233,"code":"    it('should return empty buffered if pos is out of range', function () {\n      const buffered = [{\n        start: 0,\n        end: 0.5\n      }, {\n        start: 0,\n        end: 1\n      }];\n      const maxHoleDuration = 0;\n      expect(BufferHelper.bufferedInfo(buffered, 5, maxHoleDuration)).to.deep.equal({\n        len: 0,\n        start: 5,\n        end: 5,\n        nextStart: undefined\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return empty buffered if buffered is empty","suites":["BufferHelper","bufferedInfo"],"updatePoint":{"line":249,"column":57,"index":7412},"line":249,"code":"    it('should return empty buffered if buffered is empty', function () {\n      const buffered = [];\n      const maxHoleDuration = 0;\n      expect(BufferHelper.bufferedInfo(buffered, 5, maxHoleDuration)).to.deep.equal({\n        len: 0,\n        start: 5,\n        end: 5,\n        nextStart: undefined\n      });\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return buffered if no error is thrown","suites":["BufferHelper","getBuffered"],"updatePoint":{"line":261,"column":52,"index":7770},"line":261,"code":"    it('should return buffered if no error is thrown', function () {\n      const media = {\n        buffered: {\n          length: 10,\n\n          start() {},\n\n          end() {}\n\n        }\n      };\n      expect(BufferHelper.getBuffered(media)).to.eql(media.buffered);\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"should return return noop value if error is thrown","suites":["BufferHelper","getBuffered"],"updatePoint":{"line":274,"column":58,"index":8050},"line":274,"code":"    it('should return return noop value if error is thrown', function () {\n      const media = {\n        get buffered() {\n          throw new Error();\n        }\n\n      };\n      expect(BufferHelper.getBuffered(media).length).to.eql(0);\n    });","file":"unit/utils/buffer-helper.js","skipped":false,"dir":"tests"},{"name":"adjusts level fragments with overlapping CC range using a reference fragment","suites":["level-helper"],"updatePoint":{"line":29,"column":82,"index":614},"line":29,"code":"  it('adjusts level fragments with overlapping CC range using a reference fragment', function () {\n    const details = {\n      fragments: mockFrags.slice(0),\n      PTSKnown: false,\n      alignedSliding: false\n    };\n    const expected = [{\n      start: 20,\n      startPTS: 20,\n      endPTS: 24,\n      duration: 4,\n      cc: 0\n    }, {\n      start: 24,\n      startPTS: 24,\n      endPTS: 28,\n      duration: 4,\n      cc: 1\n    }, {\n      start: 28,\n      startPTS: 28,\n      endPTS: 36,\n      duration: 8,\n      cc: 1\n    }];\n    adjustSlidingStart(mockReferenceFrag.start, details);\n    expect(expected).to.deep.equal(details.fragments);\n    expect(details.alignedSliding).to.be.true;\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"aligns level fragments times based on PDT and start time of reference level details","suites":["level-helper"],"updatePoint":{"line":58,"column":89,"index":1311},"line":58,"code":"  it('aligns level fragments times based on PDT and start time of reference level details', function () {\n    const lastLevel = {\n      details: {\n        PTSKnown: false,\n        alignedSliding: false,\n        hasProgramDateTime: true,\n        fragments: [{\n          start: 18,\n          startPTS: undefined,\n          endPTS: undefined,\n          duration: 2,\n          programDateTime: 1629821766107\n        }, {\n          start: 20,\n          startPTS: undefined,\n          endPTS: 22,\n          duration: 2,\n          programDateTime: 1629821768107\n        }, {\n          start: 22,\n          startPTS: 22,\n          endPTS: 30,\n          duration: 8,\n          programDateTime: 1629821770107\n        }],\n        fragmentHint: {\n          start: 30,\n          startPTS: 30,\n          endPTS: 32,\n          duration: 2,\n          programDateTime: 1629821778107\n        }\n      }\n    };\n    const refDetails = {\n      fragments: [{\n        start: 18,\n        startPTS: undefined,\n        endPTS: undefined,\n        duration: 2,\n        programDateTime: 1629821768107\n      }],\n      PTSKnown: false,\n      alignedSliding: false,\n      hasProgramDateTime: true\n    };\n    const detailsExpected = {\n      fragments: [{\n        start: 16,\n        startPTS: 16,\n        endPTS: 18,\n        duration: 2,\n        programDateTime: 1629821766107\n      }, {\n        start: 18,\n        startPTS: 18,\n        endPTS: 20,\n        duration: 2,\n        programDateTime: 1629821768107\n      }, {\n        start: 20,\n        startPTS: 20,\n        endPTS: 28,\n        duration: 8,\n        programDateTime: 1629821770107\n      }],\n      fragmentHint: {\n        start: 28,\n        startPTS: 28,\n        endPTS: 30,\n        duration: 2,\n        programDateTime: 1629821778107\n      },\n      PTSKnown: false,\n      alignedSliding: true,\n      hasProgramDateTime: true\n    };\n    alignMediaPlaylistByPDT(lastLevel.details, refDetails);\n    expect(lastLevel.details, `actual:\\n\\n${JSON.stringify(lastLevel.details, null, 2)}\\n\\nexpected\\n\\n${JSON.stringify(detailsExpected, null, 2)}`).to.deep.equal(detailsExpected);\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"adjusts level fragments without overlapping CC range but with programDateTime info","suites":["level-helper"],"updatePoint":{"line":138,"column":88,"index":3414},"line":138,"code":"  it('adjusts level fragments without overlapping CC range but with programDateTime info', function () {\n    const lastLevel = {\n      details: {\n        PTSKnown: true,\n        alignedSliding: false,\n        hasProgramDateTime: true,\n        fragments: [{\n          start: 20,\n          startPTS: 20,\n          endPTS: 24,\n          duration: 4,\n          cc: 0,\n          programDateTime: 1503892800000\n        }, {\n          start: 24,\n          startPTS: 24,\n          endPTS: 28,\n          duration: 4,\n          cc: 1\n        }, {\n          start: 28,\n          startPTS: 28,\n          endPTS: 36,\n          duration: 8,\n          cc: 1\n        }]\n      }\n    };\n    const details = {\n      fragments: [{\n        start: 0,\n        startPTS: 0,\n        endPTS: 4,\n        duration: 4,\n        cc: 2,\n        programDateTime: 1503892850000\n      }, {\n        start: 4,\n        startPTS: 4,\n        endPTS: 8,\n        duration: 4,\n        cc: 2\n      }, {\n        start: 8,\n        startPTS: 8,\n        endPTS: 16,\n        duration: 8,\n        cc: 3\n      }],\n      PTSKnown: false,\n      alignedSliding: false,\n      startCC: 2,\n      endCC: 3,\n      hasProgramDateTime: true\n    };\n    const detailsExpected = {\n      fragments: [{\n        start: 70,\n        startPTS: 70,\n        endPTS: 74,\n        duration: 4,\n        cc: 2,\n        programDateTime: 1503892850000\n      }, {\n        start: 74,\n        startPTS: 74,\n        endPTS: 78,\n        duration: 4,\n        cc: 2\n      }, {\n        start: 78,\n        startPTS: 78,\n        endPTS: 86,\n        duration: 8,\n        cc: 3\n      }],\n      PTSKnown: false,\n      alignedSliding: true,\n      startCC: 2,\n      endCC: 3,\n      hasProgramDateTime: true\n    };\n    alignPDT(details, lastLevel.details);\n    expect(detailsExpected).to.deep.equal(details);\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"finds the first fragment in an array which matches the CC of the first fragment in another array","suites":["level-helper"],"updatePoint":{"line":223,"column":102,"index":5248},"line":223,"code":"  it('finds the first fragment in an array which matches the CC of the first fragment in another array', function () {\n    const prevDetails = {\n      fragments: [mockReferenceFrag, {\n        cc: 1\n      }]\n    };\n    const curDetails = {\n      fragments: mockFrags\n    };\n    const expected = mockReferenceFrag;\n    const actual = findDiscontinuousReferenceFrag(prevDetails, curDetails);\n    expect(actual).to.equal(expected);\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"returns undefined if there are no frags in the previous level","suites":["level-helper"],"updatePoint":{"line":236,"column":67,"index":5647},"line":236,"code":"  it('returns undefined if there are no frags in the previous level', function () {\n    const expected = undefined;\n    const actual = findDiscontinuousReferenceFrag({\n      fragments: []\n    }, {\n      fragments: mockFrags\n    });\n    expect(actual).to.equal(expected);\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"returns undefined if there are no matching frags in the previous level","suites":["level-helper"],"updatePoint":{"line":245,"column":76,"index":5933},"line":245,"code":"  it('returns undefined if there are no matching frags in the previous level', function () {\n    const expected = undefined;\n    const actual = findDiscontinuousReferenceFrag({\n      fragments: [{\n        cc: 10\n      }]\n    }, {\n      fragments: mockFrags\n    });\n    expect(actual).to.equal(expected);\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"returns undefined if there are no frags in the current level","suites":["level-helper"],"updatePoint":{"line":256,"column":66,"index":6233},"line":256,"code":"  it('returns undefined if there are no frags in the current level', function () {\n    const expected = undefined;\n    const actual = findDiscontinuousReferenceFrag({\n      fragments: [{\n        cc: 0\n      }]\n    }, {\n      fragments: []\n    });\n    expect(actual).to.equal(expected);\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"should align current level when CC increases within the level","suites":["level-helper"],"updatePoint":{"line":267,"column":67,"index":6526},"line":267,"code":"  it('should align current level when CC increases within the level', function () {\n    const lastLevel = {\n      details: {}\n    };\n    const curDetails = {\n      startCC: 0,\n      endCC: 1\n    };\n    const actual = shouldAlignOnDiscontinuities(null, lastLevel, curDetails);\n    expect(actual).to.be.true;\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"should align current level when CC increases from last frag to current level","suites":["level-helper"],"updatePoint":{"line":278,"column":82,"index":6854},"line":278,"code":"  it('should align current level when CC increases from last frag to current level', function () {\n    const lastLevel = {\n      details: {}\n    };\n    const lastFrag = {\n      cc: 0\n    };\n    const curDetails = {\n      startCC: 1,\n      endCC: 1\n    };\n    const actual = shouldAlignOnDiscontinuities(lastFrag, lastLevel, curDetails);\n    expect(actual).to.be.true;\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"should not align when there is no CC increase","suites":["level-helper"],"updatePoint":{"line":292,"column":51,"index":7197},"line":292,"code":"  it('should not align when there is no CC increase', function () {\n    const lastLevel = {\n      details: {}\n    };\n    const curDetails = {\n      startCC: 1,\n      endCC: 1\n    };\n    const lastFrag = {\n      cc: 1\n    };\n    const actual = shouldAlignOnDiscontinuities(lastFrag, lastLevel, curDetails);\n    expect(actual).to.be.false;\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"should not align when there are no previous level details","suites":["level-helper"],"updatePoint":{"line":306,"column":63,"index":7553},"line":306,"code":"  it('should not align when there are no previous level details', function () {\n    const lastLevel = {};\n    const curDetails = {\n      startCC: 1,\n      endCC: 1\n    };\n    const lastFrag = {\n      cc: 1\n    };\n    const actual = shouldAlignOnDiscontinuities(lastFrag, lastLevel, curDetails);\n    expect(actual).to.be.false;\n  });","file":"unit/utils/discontinuities.js","skipped":false,"dir":"tests"},{"name":"handles new cue without dispatching","suites":["OutputFilter"],"updatePoint":{"line":17,"column":41,"index":524},"line":17,"code":"  it('handles new cue without dispatching', function () {\n    outputFilter.newCue(0, 1, {});\n    expect(timelineController.addCues).to.not.have.been.called;\n    expect(timelineController.createCaptionsTrack).to.have.been.called;\n  });","file":"unit/utils/output-filter.js","skipped":false,"dir":"tests"},{"name":"handles single cue and dispatch","suites":["OutputFilter"],"updatePoint":{"line":22,"column":37,"index":755},"line":22,"code":"  it('handles single cue and dispatch', function () {\n    const lastScreen = {};\n    outputFilter.newCue(0, 1, lastScreen);\n    outputFilter.dispatchCue();\n    expect(timelineController.addCues).to.have.been.calledOnce;\n    expect(timelineController.addCues).to.have.been.calledWith(1, 0, 1, lastScreen);\n  });","file":"unit/utils/output-filter.js","skipped":false,"dir":"tests"},{"name":"handles multiple cues and dispatch","suites":["OutputFilter"],"updatePoint":{"line":29,"column":40,"index":1069},"line":29,"code":"  it('handles multiple cues and dispatch', function () {\n    outputFilter.newCue(0, 1, {});\n    outputFilter.newCue(1, 2, {});\n    const lastScreen = {};\n    outputFilter.newCue(3, 4, lastScreen);\n    outputFilter.dispatchCue();\n    expect(timelineController.addCues).to.have.been.calledOnce;\n    expect(timelineController.addCues).to.have.been.calledWith(1, 0, 4, lastScreen);\n  });","file":"unit/utils/output-filter.js","skipped":false,"dir":"tests"},{"name":"does not dispatch empty cues","suites":["OutputFilter"],"updatePoint":{"line":38,"column":34,"index":1447},"line":38,"code":"  it('does not dispatch empty cues', function () {\n    outputFilter.newCue(0, 1, {});\n    expect(timelineController.addCues).to.not.have.been.called;\n    outputFilter.dispatchCue();\n    expect(timelineController.addCues).to.have.been.calledOnce;\n    outputFilter.dispatchCue();\n    expect(timelineController.addCues).to.have.been.calledOnce;\n  });","file":"unit/utils/output-filter.js","skipped":false,"dir":"tests"},{"name":"should have the provided track as data","suites":["text track utils","synthetic addtrack event"],"updatePoint":{"line":23,"column":46,"index":636},"line":23,"code":"    it('should have the provided track as data', function (done) {\n      const dispatchSpy = sinon.spy(video, 'dispatchEvent');\n      video.addEventListener('addtrack', function (e) {\n        expect(e.track).to.equal(track);\n        done();\n      });\n      sendAddTrackEvent(track, video);\n      expect(dispatchSpy.calledOnce).to.be.true;\n    });","file":"unit/utils/texttrack-utils.js","skipped":false,"dir":"tests"},{"name":"should fallback to document.createEvent if window.Event constructor throws","suites":["text track utils","synthetic addtrack event"],"updatePoint":{"line":32,"column":82,"index":1019},"line":32,"code":"    it('should fallback to document.createEvent if window.Event constructor throws', function (done) {\n      const stub = sinon.stub(self, 'Event');\n      stub.throws();\n      const spy = sinon.spy(document, 'createEvent');\n      video.addEventListener('addtrack', function (e) {\n        expect(e.track).to.equal(track);\n        done();\n      });\n      sendAddTrackEvent(track, video);\n      expect(spy.calledOnce).to.be.true;\n    });","file":"unit/utils/texttrack-utils.js","skipped":false,"dir":"tests"},{"name":"should not fail with empty cue list","suites":["text track utils","clear current cues"],"updatePoint":{"line":45,"column":43,"index":1468},"line":45,"code":"    it('should not fail with empty cue list', function () {\n      const emptyTrack = video.addTextTrack('subtitles', 'empty');\n      expect(clearCurrentCues(emptyTrack)).to.not.throw;\n    });","file":"unit/utils/texttrack-utils.js","skipped":false,"dir":"tests"},{"name":"should clear the cues from track","suites":["text track utils","clear current cues"],"updatePoint":{"line":49,"column":40,"index":1657},"line":49,"code":"    it('should clear the cues from track', function () {\n      clearCurrentCues(track);\n      expect(track.cues.length).to.equal(0);\n    });","file":"unit/utils/texttrack-utils.js","skipped":false,"dir":"tests"}]}