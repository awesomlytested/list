{"repo":"selectize/selectize.js","url":"https://github.com/selectize/selectize.js","branch":"master","configs":[{"package":"selectize","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should set \"tabindex\" prop to -1","suites":["API","disable()"],"updatePoint":{"line":10,"column":42,"index":362},"line":10,"code":"      it('should set \"tabindex\" prop to -1', function () {\n        expect(String(test.selectize.$control_input.attr('tabindex'))).to.be.equal('-1');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set \"disabled\" class","suites":["API","disable()"],"updatePoint":{"line":13,"column":37,"index":516},"line":13,"code":"      it('should set \"disabled\" class', function () {\n        expect(test.selectize.$control.hasClass('disabled')).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set isDisabled property to true","suites":["API","disable()"],"updatePoint":{"line":16,"column":48,"index":671},"line":16,"code":"      it('should set isDisabled property to true', function () {\n        expect(test.selectize.isDisabled).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add \"disabled\" attribute on inputs","suites":["API","disable()"],"updatePoint":{"line":19,"column":51,"index":810},"line":19,"code":"      it('should add \"disabled\" attribute on inputs', function () {\n        expect(test.selectize.$input.is(':disabled')).to.be.equal(true);\n        expect(test.selectize.$control_input.is(':disabled')).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set maxItems setting to 2","suites":["API","setMaxItems(2)"],"updatePoint":{"line":33,"column":42,"index":1298},"line":33,"code":"      it('should set maxItems setting to 2', function () {\n        expect(test.selectize.settings.maxItems).to.be.equal(2);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set maxItems setting to null","suites":["API","setMaxItems(0)"],"updatePoint":{"line":46,"column":45,"index":1700},"line":46,"code":"      it('should set maxItems setting to null', function () {\n        expect(test.selectize.settings.maxItems).to.be.equal(null);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should restore original \"tabindex\" prop","suites":["API","enable()"],"updatePoint":{"line":57,"column":49,"index":2132},"line":57,"code":"      it('should restore original \"tabindex\" prop', function () {\n        expect(String(test.selectize.$control_input.attr('tabindex'))).to.be.equal('2');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove \"disabled\" class","suites":["API","enable()"],"updatePoint":{"line":60,"column":40,"index":2288},"line":60,"code":"      it('should remove \"disabled\" class', function () {\n        expect(test.selectize.$control.hasClass('disabled')).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set isDisabled property to false","suites":["API","enable()"],"updatePoint":{"line":63,"column":49,"index":2445},"line":63,"code":"      it('should set isDisabled property to false', function () {\n        expect(test.selectize.isDisabled).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove \"disabled\" attribute on inputs","suites":["API","enable()"],"updatePoint":{"line":66,"column":54,"index":2588},"line":66,"code":"      it('should remove \"disabled\" attribute on inputs', function () {\n        expect(test.selectize.$input.is(':disabled')).to.be.equal(false);\n        expect(test.selectize.$control_input.is(':disabled')).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set isFocused property to true","suites":["API","focus()"],"updatePoint":{"line":80,"column":47,"index":3082},"line":80,"code":"      it('should set isFocused property to true', function () {\n        expect(test.selectize.isFocused).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should give the control focus","suites":["API","focus()"],"updatePoint":{"line":83,"column":39,"index":3208},"line":83,"code":"      it('should give the control focus', function () {\n        expect(has_focus(test.selectize.$control_input[0])).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should return self to support chaining","suites":["API","focus()"],"updatePoint":{"line":86,"column":48,"index":3362},"line":86,"code":"      it('should return self to support chaining', function () {\n        expect(self.getValue()).to.be.equal('');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set isFocused property to false","suites":["API","blur()"],"updatePoint":{"line":100,"column":48,"index":3805},"line":100,"code":"      it('should set isFocused property to false', function () {\n        expect(test.selectize.isFocused).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove focus from the control","suites":["API","blur()"],"updatePoint":{"line":103,"column":46,"index":3939},"line":103,"code":"      it('should remove focus from the control', function () {\n        expect(has_focus(test.selectize.$control_input[0])).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should return self to support chaining","suites":["API","blur()"],"updatePoint":{"line":106,"column":48,"index":4094},"line":106,"code":"      it('should return self to support chaining', function () {\n        expect(self.getValue()).to.be.equal('');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should fail if non-object returned by \"create\" callback","suites":["API","createItem()"],"updatePoint":{"line":111,"column":65,"index":4286},"line":111,"code":"      it('should fail if non-object returned by \"create\" callback', function () {\n        var test = setup_test('<select>', {\n          valueField: 'value',\n          labelField: 'value',\n          create: function (input) {\n            return false;\n          }\n        });\n        test.selectize.$control_input.val('test');\n        test.selectize.createItem();\n        expect(test.selectize.items.length).to.be.equal(0);\n        test = setup_test('<select>', {\n          valueField: 'value',\n          labelField: 'value',\n          create: function (input) {\n            return 'hello';\n          }\n        });\n        test.selectize.$control_input.val('test');\n        test.selectize.createItem();\n        expect(test.selectize.items.length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add option upon completion (synchronous)","suites":["API","createItem()"],"updatePoint":{"line":133,"column":57,"index":5050},"line":133,"code":"      it('should add option upon completion (synchronous)', function () {\n        var test = setup_test('<select>', {\n          valueField: 'value',\n          labelField: 'value',\n          create: function (input) {\n            return {\n              value: input\n            };\n          }\n        });\n        test.selectize.$control_input.val('test');\n        test.selectize.createItem();\n        expect(test.selectize.options).to.have.property('test');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add option upon completion (asynchronous)","suites":["API","createItem()"],"updatePoint":{"line":147,"column":58,"index":5518},"line":147,"code":"      it('should add option upon completion (asynchronous)', function (done) {\n        var test = setup_test('<select>', {\n          valueField: 'value',\n          labelField: 'value',\n          create: function (input, callback) {\n            window.setTimeout(function () {\n              callback({\n                value: input\n              });\n              expect(test.selectize.options).to.have.property('test');\n              done();\n            }, 0);\n          }\n        });\n        test.selectize.$control_input.val('test');\n        test.selectize.createItem();\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should register group","suites":["API","addOptionGroup()"],"updatePoint":{"line":174,"column":31,"index":6334},"line":174,"code":"      it('should register group', function () {\n        var data = {\n          label: 'Group Label'\n        };\n        test.selectize.addOptionGroup('group_id', data);\n        expect(test.selectize.optgroups).to.have.property('group_id');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add implicit $order property","suites":["API","addOptionGroup()"],"updatePoint":{"line":181,"column":45,"index":6597},"line":181,"code":"      it('should add implicit $order property', function () {\n        test.selectize.addOptionGroup('group1', {});\n        test.selectize.addOptionGroup('group2', {});\n        assert.equal(test.selectize.optgroups['group1'].$order, 2);\n        assert.equal(test.selectize.optgroups['group2'].$order, 3);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove group","suites":["API","removeOptionGroup()"],"updatePoint":{"line":196,"column":29,"index":7119},"line":196,"code":"      it('should remove group', function () {\n        var data = {\n          label: 'Group Label'\n        };\n        test.selectize.addOptionGroup('group_id', data);\n        test.selectize.removeOptionGroup('group_id');\n        expect(test.selectize.optgroups).to.not.have.property('group_id');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should clear all groups","suites":["API","clearOptionGroups()"],"updatePoint":{"line":213,"column":33,"index":7652},"line":213,"code":"      it('should clear all groups', function () {\n        var data = {\n          label: 'Group Label'\n        };\n        test.selectize.addOptionGroup('group_id', data);\n        test.selectize.addOptionGroup('group_id2', data);\n        test.selectize.clearOptionGroups();\n        expect(test.selectize.optgroups).to.deep.equal({});\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add implicit $order property","suites":["API","addOption()"],"updatePoint":{"line":231,"column":45,"index":8222},"line":231,"code":"      it('should add implicit $order property', function () {\n        var opt1 = {\n          value: 'hello'\n        };\n        var opt2 = {\n          value: 'world'\n        };\n        test.selectize.addOption(opt1);\n        test.selectize.addOption(opt2);\n        assert.deepEqual(test.selectize.options, {\n          'hello': {\n            value: 'hello',\n            $order: 1\n          },\n          'world': {\n            value: 'world',\n            $order: 2\n          }\n        });\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow string values","suites":["API","addOption()"],"updatePoint":{"line":251,"column":36,"index":8709},"line":251,"code":"      it('should allow string values', function () {\n        test.selectize.addOption({\n          value: 'stringtest'\n        });\n        expect(test.selectize.options).to.have.property('stringtest');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow null / undefined values","suites":["API","addOption()"],"updatePoint":{"line":257,"column":50,"index":8934},"line":257,"code":"      it('should not allow null / undefined values', function () {\n        test.selectize.addOption({\n          value: undefined\n        });\n        test.selectize.addOption({\n          value: null\n        });\n        expect(test.selectize.options).to.not.have.property('undefined');\n        expect(test.selectize.options).to.not.have.property('null');\n        expect(test.selectize.options).to.not.have.property('');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","addOption()"],"updatePoint":{"line":268,"column":37,"index":9349},"line":268,"code":"      it('should allow integer values', function () {\n        test.selectize.addOption({\n          value: 0\n        });\n        test.selectize.addOption({\n          value: 1\n        });\n        expect(test.selectize.options).to.have.property('0');\n        expect(test.selectize.options).to.have.property('1');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow arrays of options","suites":["API","addOption()"],"updatePoint":{"line":278,"column":40,"index":9672},"line":278,"code":"      it('should allow arrays of options', function () {\n        test.selectize.addOption([{\n          value: 'a'\n        }, {\n          value: 'b'\n        }]);\n        expect(test.selectize.options).to.have.property('a');\n        expect(test.selectize.options).to.have.property('b');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not override existing options","suites":["API","addOption()"],"updatePoint":{"line":287,"column":46,"index":9973},"line":287,"code":"      it('should not override existing options', function () {\n        test.selectize.addOption([{\n          value: 'a'\n        }, {\n          value: 'b'\n        }]);\n        test.selectize.addOption({\n          value: 'a',\n          test: 'hello'\n        });\n        expect(test.selectize.options.a).to.not.have.property('test');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update \"items\" array","suites":["API","addItem()"],"updatePoint":{"line":335,"column":37,"index":11057},"line":335,"code":"      it('should update \"items\" array', function () {\n        test.selectize.addItem('b');\n        expect(test.selectize.items.indexOf('b')).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not give control focus","suites":["API","addItem()"],"updatePoint":{"line":339,"column":39,"index":11226},"line":339,"code":"      it('should not give control focus', function (done) {\n        test.selectize.addItem(0);\n        window.setTimeout(function () {\n          expect(test.selectize.isFocused).to.be.equal(false);\n          done();\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow duplicate entries","suites":["API","addItem()"],"updatePoint":{"line":346,"column":44,"index":11472},"line":346,"code":"      it('should not allow duplicate entries', function () {\n        test.selectize.addItem('a');\n        test.selectize.addItem('a');\n        expect(test.selectize.items.indexOf('a')).to.be.equal(test.selectize.items.lastIndexOf('a'));\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow undefined / null values","suites":["API","addItem()"],"updatePoint":{"line":351,"column":50,"index":11725},"line":351,"code":"      it('should not allow undefined / null values', function () {\n        test.selectize.addItem(undefined);\n        test.selectize.addItem(null);\n        expect(test.selectize.items.indexOf('undefined')).to.be.equal(-1);\n        expect(test.selectize.items.indexOf('null')).to.be.equal(-1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","addItem()"],"updatePoint":{"line":357,"column":37,"index":12015},"line":357,"code":"      it('should allow integer values', function () {\n        test.selectize.addItem(0);\n        expect(test.selectize.items.indexOf('0')).to.not.be.equal(-1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not fire \"change\" if silent is truthy","suites":["API","addItem()"],"updatePoint":{"line":361,"column":54,"index":12202},"line":361,"code":"      it('should not fire \"change\" if silent is truthy', function (done) {\n        var watcher = function (e) {\n          throw new Error('Change fired');\n        };\n        test.$select.on('change', watcher);\n        test.selectize.addItem('x', true);\n        expect(test.selectize.items.indexOf('x')).to.not.be.equal(-1);\n        window.setTimeout(function () {\n          test.$select.off('change', watcher);\n          done();\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update DOM","suites":["API","addItem()"],"updatePoint":{"line":373,"column":27,"index":12629},"line":373,"code":"      it('should update DOM', function () {\n        test.selectize.addItem('c');\n        expect(test.selectize.$control.find('[data-value=c]').length).to.be.equal(1);\n        test.selectize.addItem('$1');\n        var found = false;\n        test.selectize.$control.children().each(function () {\n          if (this.getAttribute('data-value') === '$1') {\n            found = true;\n            return false;\n          }\n        });\n        expect(found).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update option data","suites":["API","updateOption()"],"updatePoint":{"line":427,"column":35,"index":13977},"line":427,"code":"      it('should update option data', function () {\n        test.selectize.updateOption('a', {\n          value: 'a',\n          test: 'test'\n        });\n        expect(test.selectize.options).to.have.property('a');\n        expect(test.selectize.options['a'].test).to.equal('test');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update indexes","suites":["API","updateOption()"],"updatePoint":{"line":435,"column":31,"index":14264},"line":435,"code":"      it('should update indexes', function () {\n        test.selectize.updateOption('e', {\n          value: 'e_updated'\n        });\n        expect(test.selectize.options).to.not.have.property('e');\n        expect(test.selectize.options).to.have.property('e_updated');\n        expect(test.selectize.items.indexOf('e')).to.be.equal(-1);\n        expect(test.selectize.items.indexOf('e_updated')).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should maintain implicit $order property","suites":["API","updateOption()"],"updatePoint":{"line":444,"column":50,"index":14702},"line":444,"code":"      it('should maintain implicit $order property', function () {\n        var order_orig = test.selectize.options['x'].$order;\n        assert.isNumber(order_orig);\n        test.selectize.updateOption('x', {\n          value: 'x',\n          something: 'x'\n        });\n        assert.equal(test.selectize.options['x'].$order, order_orig);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","updateOption()"],"updatePoint":{"line":453,"column":37,"index":15036},"line":453,"code":"      it('should allow integer values', function () {\n        test.selectize.updateOption(0, {\n          value: '0_updated'\n        });\n        test.selectize.updateOption(1, {\n          value: '1_updated'\n        });\n        expect(test.selectize.options).to.not.have.property('0');\n        expect(test.selectize.options).to.not.have.property('1');\n        expect(test.selectize.options).to.have.property('0_updated');\n        expect(test.selectize.options).to.have.property('1_updated');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should throw error if value not set in data","suites":["API","updateOption()"],"updatePoint":{"line":465,"column":53,"index":15552},"line":465,"code":"      it('should throw error if value not set in data', function () {\n        expect(function () {\n          test.selectize.updateOption('c', {\n            value: undefined,\n            test: 'test'\n          });\n          test.selectize.updateOption('d', {\n            value: null,\n            test: 'test'\n          });\n        }).to.throw(Error);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should ignore undefined / null value references","suites":["API","updateOption()"],"updatePoint":{"line":477,"column":57,"index":15916},"line":477,"code":"      it('should ignore undefined / null value references', function () {\n        test.selectize.updateOption(undefined, {\n          value: 'undefined',\n          test: 'test'\n        });\n        test.selectize.updateOption(null, {\n          value: 'null',\n          test: 'test'\n        });\n        expect(test.selectize.options['undefined']).to.not.have.property('test');\n        expect(test.selectize.options['null']).to.not.have.property('test');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update DOM","suites":["API","updateOption()"],"updatePoint":{"line":489,"column":27,"index":16347},"line":489,"code":"      it('should update DOM', function () {\n        test.selectize.updateOption('f', {\n          value: 'f_updated'\n        });\n        expect(test.selectize.$control.find('[data-value=f]').length).to.be.equal(0);\n        expect(test.selectize.$control.find('[data-value=f_updated]').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow string values","suites":["API","getOption()"],"updatePoint":{"line":525,"column":36,"index":17301},"line":525,"code":"      it('should allow string values', function () {\n        expect(test.selectize.getOption('a')).to.be.ok;\n        expect(test.selectize.getOption('a').length).to.be.equal(1);\n        expect(test.selectize.getOption('b')).to.be.ok;\n        expect(test.selectize.getOption('b').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","getOption()"],"updatePoint":{"line":531,"column":37,"index":17615},"line":531,"code":"      it('should allow integer values', function () {\n        expect(test.selectize.getOption(0)).to.be.ok;\n        expect(test.selectize.getOption(0).length).to.be.equal(1);\n        expect(test.selectize.getOption(1)).to.be.ok;\n        expect(test.selectize.getOption(1).length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow values with quotation marks","suites":["API","getOption()"],"updatePoint":{"line":537,"column":50,"index":17934},"line":537,"code":"      it('should allow values with quotation marks', function () {\n        expect(test.selectize.getOption('\\'')).to.be.ok;\n        expect(test.selectize.getOption('\\'').length).to.be.equal(1);\n        expect(test.selectize.getOption('\"')).to.be.ok;\n        expect(test.selectize.getOption('\"').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow values with backslashes","suites":["API","getOption()"],"updatePoint":{"line":543,"column":46,"index":18259},"line":543,"code":"      it('should allow values with backslashes', function () {\n        expect(test.selectize.getOption('\\\\')).to.be.ok;\n        expect(test.selectize.getOption('\\\\').length).to.be.equal(1);\n        expect(test.selectize.getOption('\\\\\\'')).to.be.ok;\n        expect(test.selectize.getOption('\\\\\\'').length).to.be.equal(1);\n        expect(test.selectize.getOption('\\\\\"')).to.be.ok;\n        expect(test.selectize.getOption('\\\\\"').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow undefined / null values","suites":["API","getOption()"],"updatePoint":{"line":551,"column":50,"index":18723},"line":551,"code":"      it('should not allow undefined / null values', function () {\n        expect(test.selectize.getOption(null)).to.be.ok;\n        expect(test.selectize.getOption(null).length).to.be.equal(0);\n        expect(test.selectize.getOption(undefined)).to.be.ok;\n        expect(test.selectize.getOption(undefined).length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow string values","suites":["API","getItem()"],"updatePoint":{"line":584,"column":36,"index":19665},"line":584,"code":"      it('should allow string values', function () {\n        expect(test.selectize.getItem('a')).to.be.ok;\n        expect(test.selectize.getItem('a').length).to.be.equal(1);\n        expect(test.selectize.getItem('b')).to.be.ok;\n        expect(test.selectize.getItem('b').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","getItem()"],"updatePoint":{"line":590,"column":37,"index":19971},"line":590,"code":"      it('should allow integer values', function () {\n        expect(test.selectize.getItem(0)).to.be.ok;\n        expect(test.selectize.getItem(0).length).to.be.equal(1);\n        expect(test.selectize.getItem(1)).to.be.ok;\n        expect(test.selectize.getItem(1).length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow values with quotation marks","suites":["API","getItem()"],"updatePoint":{"line":596,"column":50,"index":20282},"line":596,"code":"      it('should allow values with quotation marks', function () {\n        expect(test.selectize.getItem('\\'')).to.be.ok;\n        expect(test.selectize.getItem('\\'').length).to.be.equal(1);\n        expect(test.selectize.getItem('\"')).to.be.ok;\n        expect(test.selectize.getItem('\"').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow values with backslashes","suites":["API","getItem()"],"updatePoint":{"line":602,"column":46,"index":20599},"line":602,"code":"      it('should allow values with backslashes', function () {\n        expect(test.selectize.getItem('\\\\\\'')).to.be.ok;\n        expect(test.selectize.getItem('\\\\\\'').length).to.be.equal(1);\n        expect(test.selectize.getItem('\\\\\"')).to.be.ok;\n        expect(test.selectize.getItem('\\\\\"').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow undefined / null values","suites":["API","getItem()"],"updatePoint":{"line":608,"column":50,"index":20928},"line":608,"code":"      it('should not allow undefined / null values', function () {\n        expect(test.selectize.getItem(null)).to.be.ok;\n        expect(test.selectize.getItem(null).length).to.be.equal(0);\n        expect(test.selectize.getItem(undefined)).to.be.ok;\n        expect(test.selectize.getItem(undefined).length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should empty \"$activeItems\" array","suites":["API","clear()"],"updatePoint":{"line":635,"column":43,"index":21738},"line":635,"code":"      it('should empty \"$activeItems\" array', function () {\n        test.selectize.setActiveItem(test.selectize.getItem('1'));\n        expect(test.selectize.$activeItems.length).to.be.equal(1);\n        test.selectize.clear();\n        expect(test.selectize.$activeItems.length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should refresh option list (dropdown)","suites":["API","clear()"],"updatePoint":{"line":641,"column":47,"index":22045},"line":641,"code":"      it('should refresh option list (dropdown)', function (done) {\n        // test = setup_test('<select multiple>', {\n        // \tvalueField: 'value',\n        // \tlabelField: 'value',\n        // \toptions: [\n        // \t\t{value: 0},\n        // \t\t{value: 1},\n        // \t\t{value: 2},\n        // \t\t{value: JSON.stringify({\"type\":\"place\"})},\n        // \t],\n        // \titems: ['1','2','3']\n        // });\n\n        test.selectize.focus();\n        window.setTimeout(function () {\n          test.selectize.clear();\n          test.selectize.focus();\n          window.setTimeout(function () {\n            expect(test.selectize.$dropdown_content.find('[data-value=1]').length).to.be.equal(1);\n            expect(test.selectize.$dropdown_content.find('[data-value=2]').length).to.be.equal(1);\n            expect(test.selectize.$dropdown_content.find('[data-value*=\"type\"]').length).to.be.equal(1);\n            done();\n          }, 0);\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should empty \"items\" array","suites":["API","clear()"],"updatePoint":{"line":666,"column":36,"index":22985},"line":666,"code":"      it('should empty \"items\" array', function () {\n        test.selectize.clear();\n        expect(test.selectize.items.length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update DOM","suites":["API","clear()"],"updatePoint":{"line":670,"column":27,"index":23131},"line":670,"code":"      it('should update DOM', function () {\n        test.selectize.clear();\n        expect(test.selectize.$control.find('[data-value=1]').length).to.be.equal(0);\n        expect(test.selectize.$control.find('[data-value=2]').length).to.be.equal(0);\n        expect(test.selectize.$control.find('[data-value*=\"type\"]').length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not fire \"change\" if silent is truthy","suites":["API","clear()"],"updatePoint":{"line":676,"column":54,"index":23508},"line":676,"code":"      it('should not fire \"change\" if silent is truthy', function (done) {\n        var watcher = function (e) {\n          throw new Error('Change fired');\n        };\n        test.$select.on('change', watcher);\n        test.selectize.clear(true);\n        window.setTimeout(function () {\n          test.$select.off('change', watcher);\n          done();\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not give control focus","suites":["API","clear()"],"updatePoint":{"line":687,"column":39,"index":23869},"line":687,"code":"      it('should not give control focus', function (done) {\n        test.selectize.clear();\n        window.setTimeout(function () {\n          expect(test.selectize.isFocused).to.be.equal(false);\n          done();\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should empty \"items\" array","suites":["API","clear()"],"updatePoint":{"line":694,"column":36,"index":24104},"line":694,"code":"      it('should empty \"items\" array', function () {\n        test.selectize.clear();\n        expect(test.selectize.items.length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should throw error if \"score\" setting does not return a function","suites":["API","search()"],"updatePoint":{"line":700,"column":74,"index":24344},"line":700,"code":"      it('should throw error if \"score\" setting does not return a function', function () {\n        var test;\n        expect(function () {\n          test = setup_test('<select multiple>', {\n            valueField: 'value',\n            labelField: 'value',\n            options: [{\n              value: 0\n            }, {\n              value: 1\n            }],\n            score: function () {}\n          });\n          test.selectize.search('hello');\n        }).to.throw(Error);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not throw error if \"score\" setting does return a function","suites":["API","search()"],"updatePoint":{"line":716,"column":74,"index":24830},"line":716,"code":"      it('should not throw error if \"score\" setting does return a function', function () {\n        var test;\n        expect(function () {\n          test = setup_test('<select multiple>', {\n            valueField: 'value',\n            labelField: 'value',\n            options: [{\n              value: 0\n            }, {\n              value: 1\n            }],\n            score: function (query) {\n              return function (item) {\n                return 0;\n              };\n            }\n          });\n          test.selectize.search('hello');\n        }).to.not.throw(Error);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should return query satinized","suites":["API","search()"],"updatePoint":{"line":743,"column":41,"index":25637},"line":743,"code":"        it('should return query satinized', function (done) {\n          var query = test.selectize.search('héllo').query;\n          window.setTimeout(function () {\n            expect(query).to.be.equal('hello');\n            done();\n          }, 0);\n        });","file":"api.js","skipped":false,"dir":"test"},{"name":"should return an function that returns a number","suites":["API","getScoreFunction()"],"updatePoint":{"line":753,"column":57,"index":25981},"line":753,"code":"      it('should return an function that returns a number', function () {\n        var test = setup_test('<select multiple>', {\n          valueField: 'value',\n          labelField: 'value',\n          searchField: 'value',\n          options: []\n        });\n        var fn = test.selectize.getScoreFunction('test');\n        expect(typeof fn).to.be.equal('function');\n        expect(typeof fn({\n          value: 'test'\n        })).to.be.equal('number');\n        expect(fn({\n          value: 'test'\n        })).to.be.above(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove control from DOM","suites":["API","destroy()"],"updatePoint":{"line":786,"column":40,"index":27036},"line":786,"code":"      it('should remove control from DOM', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect($.contains(document.documentElement, test.selectize.$wrapper[0])).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should delete \"selectize\" reference on original input element","suites":["API","destroy()"],"updatePoint":{"line":791,"column":71,"index":27316},"line":791,"code":"      it('should delete \"selectize\" reference on original input element', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(test.selectize.$input[0].selectize).to.be.equal(undefined);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should unbind events on window","suites":["API","destroy()"],"updatePoint":{"line":796,"column":40,"index":27539},"line":796,"code":"      it('should unbind events on window', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(has_namespaced_event($(window), test.selectize.eventNS)).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should unbind events on document","suites":["API","destroy()"],"updatePoint":{"line":801,"column":42,"index":27781},"line":801,"code":"      it('should unbind events on document', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(has_namespaced_event($(document), test.selectize.eventNS)).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should unbind events on <body>","suites":["API","destroy()"],"updatePoint":{"line":806,"column":40,"index":28023},"line":806,"code":"      it('should unbind events on <body>', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(has_namespaced_event($('body'), test.selectize.eventNS)).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should restore original options and tabindex","suites":["API","destroy()"],"updatePoint":{"line":811,"column":54,"index":28277},"line":811,"code":"      it('should restore original options and tabindex', function () {\n        var children = '<optgroup label=\"Swedish Cars\">' + '<option value=\"volvo\">Volvo</option>' + '<option value=\"saab\">Saab</option>' + '</optgroup>' + '<optgroup label=\"German Cars\">' + '<option value=\"mercedes\">Mercedes</option>' + '<option value=\"audi\">Audi</option>' + '</optgroup>';\n        var test = setup_test('<select tabindex=\"9999\">' + children + '</select>', {});\n        test.selectize.destroy();\n        expect(test.$select.html()).to.be.equal(children);\n        expect(test.$select.attr('tabindex')).to.be.equal('9999');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove tabindex if it was originally undefined","suites":["API","destroy()"],"updatePoint":{"line":818,"column":63,"index":28906},"line":818,"code":"      it('should remove tabindex if it was originally undefined', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(test.$select.attr('tabindex')).to.be.equal(undefined);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should clear the whole renderCache","suites":["API","clearCache()"],"updatePoint":{"line":845,"column":44,"index":29681},"line":845,"code":"      it('should clear the whole renderCache', function () {\n        expect($.isEmptyObject(test.selectize.renderCache)).to.be.equal(false);\n        test.selectize.clearCache();\n        expect($.isEmptyObject(test.selectize.renderCache)).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow clearing just one template type from the renderCache","suites":["API","clearCache()"],"updatePoint":{"line":850,"column":75,"index":29979},"line":850,"code":"      it('should allow clearing just one template type from the renderCache', function () {\n        test.selectize.render('item', test.selectize.options[0]);\n        test.selectize.refreshOptions();\n        expect($.isEmptyObject(test.selectize.renderCache['option'])).to.be.equal(false);\n        expect($.isEmptyObject(test.selectize.renderCache['item'])).to.be.equal(false);\n        test.selectize.clearCache('option');\n        expect($.isEmptyObject(test.selectize.renderCache['option'])).to.be.equal(true);\n        expect($.isEmptyObject(test.selectize.renderCache['item'])).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should be triggered once by addItem()","suites":["DOM Events","\"change\""],"updatePoint":{"line":3,"column":45,"index":120},"line":3,"code":"    it('should be triggered once by addItem()', function (done) {\n      var test = setup_test('<select>', {\n        valueField: 'value',\n        labelField: 'value',\n        options: [{\n          value: 'a'\n        }, {\n          value: 'b'\n        }],\n        items: ['a']\n      });\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      test.selectize.addItem('b');\n      window.setTimeout(function () {\n        expect(counter).to.be.equal(1);\n        done();\n      }, 0);\n    });","file":"events_dom.js","skipped":false,"dir":"test"},{"name":"should be triggered once by removeItem()","suites":["DOM Events","\"change\""],"updatePoint":{"line":24,"column":48,"index":655},"line":24,"code":"    it('should be triggered once by removeItem()', function (done) {\n      var test = setup_test('<select multiple>', {\n        valueField: 'value',\n        labelField: 'value',\n        options: [{\n          value: 'a'\n        }, {\n          value: 'b'\n        }],\n        items: ['a', 'b']\n      });\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      test.selectize.removeItem('b');\n      window.setTimeout(function () {\n        expect(counter).to.be.equal(1);\n        done();\n      }, 0);\n    });","file":"events_dom.js","skipped":false,"dir":"test"},{"name":"should be triggered once by clear()","suites":["DOM Events","\"change\""],"updatePoint":{"line":45,"column":43,"index":1202},"line":45,"code":"    it('should be triggered once by clear()', function (done) {\n      var test = setup_test('<select multiple>', {\n        valueField: 'value',\n        labelField: 'value',\n        options: [{\n          value: 'a'\n        }, {\n          value: 'b'\n        }],\n        items: ['a', 'b']\n      });\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      test.selectize.clear();\n      window.setTimeout(function () {\n        expect(counter).to.be.equal(1);\n        done();\n      }, 0);\n    });","file":"events_dom.js","skipped":false,"dir":"test"},{"name":"should work as expected","suites":["Events","focus"],"updatePoint":{"line":3,"column":31,"index":99},"line":3,"code":"    it('should work as expected', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      var counter = 0;\n      test.selectize.on('focus', function () {\n        counter++;\n      });\n      test.selectize.focus();\n      syn.click(test.selectize.$control).delay(0, function () {\n        window.setTimeout(function () {\n          expect(counter).to.be.equal(1);\n          done();\n        }, 0);\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should work as expected","suites":["Events","blur"],"updatePoint":{"line":19,"column":31,"index":660},"line":19,"code":"    it('should work as expected', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      var counter = 0;\n      test.selectize.on('blur', function () {\n        counter++;\n      });\n      test.selectize.focus();\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('body')).delay(0, function () {\n          window.setTimeout(function () {\n            expect(counter).to.be.equal(1);\n            done();\n          }, 0);\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered once","suites":["Events","change"],"updatePoint":{"line":37,"column":32,"index":1295},"line":37,"code":"    it('should be triggered once', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      var counter = 0;\n      test.selectize.on('change', function () {\n        counter++;\n      });\n      test.selectize.setValue('b');\n      window.setTimeout(function () {\n        expect(counter).to.be.equal(1);\n        done();\n      }, 0);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain current value","suites":["Events","change"],"updatePoint":{"line":49,"column":36,"index":1747},"line":49,"code":"    it('should contain current value', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('change', function (value) {\n        expect(value).to.be.equal('c');\n        done();\n      });\n      test.selectize.setValue('c');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should not be triggered when the selected item has not changed","suites":["Events","change"],"updatePoint":{"line":57,"column":70,"index":2145},"line":57,"code":"    it('should not be triggered when the selected item has not changed', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected=\"selected\">a</option></select>');\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('[data-value=\"a\"]', test.selectize.$dropdown)).delay(0, function () {\n          expect(counter).to.be.equal(0);\n          done();\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should not be possible to trigger a disabled option","suites":["Events","change"],"updatePoint":{"line":70,"column":59,"index":2665},"line":70,"code":"    it('should not be possible to trigger a disabled option', function (done) {\n      var test = setup_test(['<select>', '<option value=\"a\" disabled>Item A</option>', '<option value=\"b\">Item B</option>', '</select>'].join(''), {});\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('[data-value=\"a\"]', test.selectize.$dropdown)).delay(0, function () {\n          expect(counter).to.be.equal(0);\n          done();\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should not be possible to trigger a option under a disabled optgroup","suites":["Events","change"],"updatePoint":{"line":83,"column":76,"index":3256},"line":83,"code":"    it('should not be possible to trigger a option under a disabled optgroup', function (done) {\n      var test = setup_test(['<select>', '<optgroup label=\"Group 1\">', '<option value=\"a\">Item A</option>', '</optgroup>', '<optgroup label=\"Group 2\" disabled>', '<option value=\"b\">Item B</option>', '<option value=\"c\">Item C</option>', '</optgroup>', '</select>'].join(''), {});\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('[data-value=\"c\"]', test.selectize.$dropdown)).delay(0, function () {\n          expect(counter).to.be.equal(0);\n          done();\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered once before change","suites":["Events","input"],"updatePoint":{"line":98,"column":46,"index":3984},"line":98,"code":"    it('should be triggered once before change', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      var evt = '';\n      test.$select.on('change', function () {\n        evt = evt + 'change';\n      });\n      test.$select.on('input', function () {\n        evt = evt + 'input';\n      });\n      test.selectize.setValue('b');\n      window.setTimeout(function () {\n        expect(evt).to.be.equal('inputchange');\n        done();\n      }, 0);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should not be triggered when the selected item has not changed","suites":["Events","input"],"updatePoint":{"line":113,"column":70,"index":4568},"line":113,"code":"    it('should not be triggered when the selected item has not changed', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected=\"selected\">a</option></select>');\n      var counter = 0;\n      test.$select.on('input', function () {\n        counter++;\n      });\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('[data-value=\"a\"]', test.selectize.$dropdown)).delay(0, function () {\n          expect(counter).to.be.equal(0);\n          done();\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","item_add"],"updatePoint":{"line":128,"column":27,"index":5098},"line":128,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\"></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_add', function () {\n        done();\n      });\n      test.selectize.addItem('b');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain item's value and element","suites":["Events","item_add"],"updatePoint":{"line":135,"column":48,"index":5421},"line":135,"code":"    it('should contain item\\'s value and element', function (done) {\n      var test = setup_test('<select><option value=\"a\"></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_add', function (value, $item) {\n        expect(value).to.be.equal('b');\n        assert.equal($item.length, 1);\n        done();\n      });\n      test.selectize.addItem('b');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","item_before_remove"],"updatePoint":{"line":146,"column":27,"index":5867},"line":146,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select multiple><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_before_remove', function () {\n        done();\n      });\n      test.selectize.removeItem('a');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain item's value and element","suites":["Events","item_before_remove"],"updatePoint":{"line":153,"column":48,"index":6230},"line":153,"code":"    it('should contain item\\'s value and element', function (done) {\n      var test = setup_test('<select multiple><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_before_remove', function (value, $item) {\n        expect(value).to.be.equal('b');\n        assert.equal($item.length, 1);\n        done();\n      });\n      test.selectize.removeItem('b');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","item_remove"],"updatePoint":{"line":164,"column":27,"index":6709},"line":164,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select multiple><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_remove', function () {\n        done();\n      });\n      test.selectize.removeItem('a');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain item's value and element","suites":["Events","item_remove"],"updatePoint":{"line":171,"column":48,"index":7065},"line":171,"code":"    it('should contain item\\'s value and element', function (done) {\n      var test = setup_test('<select multiple><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_remove', function (value, $item) {\n        expect(value).to.be.equal('b');\n        assert.equal($item.length, 1);\n        done();\n      });\n      test.selectize.removeItem('b');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","clear"],"updatePoint":{"line":182,"column":27,"index":7531},"line":182,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('clear', function () {\n        done();\n      });\n      test.selectize.clear();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","optgroup_add"],"updatePoint":{"line":191,"column":27,"index":7890},"line":191,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('optgroup_add', function () {\n        done();\n      });\n      test.selectize.addOptionGroup('id', {\n        label: 'Group'\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain optgroup id","suites":["Events","optgroup_add"],"updatePoint":{"line":200,"column":34,"index":8263},"line":200,"code":"    it('should contain optgroup id', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('optgroup_add', function (id, data) {\n        expect(id).to.be.equal('id');\n        done();\n      });\n      test.selectize.addOptionGroup('id', {\n        label: 'Group'\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain outgroup data","suites":["Events","optgroup_add"],"updatePoint":{"line":210,"column":36,"index":8684},"line":210,"code":"    it('should contain outgroup data', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      var optgroup = {\n        label: 'Group'\n      };\n      test.selectize.on('optgroup_add', function (id, data) {\n        expect(data).to.eql(optgroup);\n        done();\n      });\n      test.selectize.addOptionGroup('id', optgroup);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","optgroup_remove"],"updatePoint":{"line":223,"column":27,"index":9178},"line":223,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('optgroup_remove', function (id) {\n        expect(id).to.be.equal('id');\n        done();\n      });\n      test.selectize.addOptionGroup('id', {\n        label: 'Group'\n      });\n      test.selectize.removeOptionGroup('id');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","optgroup_clear"],"updatePoint":{"line":236,"column":27,"index":9682},"line":236,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('optgroup_clear', function () {\n        done();\n      });\n      test.selectize.addOptionGroup('id', {\n        label: 'Group'\n      });\n      test.selectize.clearOptionGroups();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","option_add"],"updatePoint":{"line":248,"column":27,"index":10137},"line":248,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_add', function () {\n        done();\n      });\n      test.selectize.addOption({\n        value: 'e'\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain option value","suites":["Events","option_add"],"updatePoint":{"line":257,"column":35,"index":10494},"line":257,"code":"    it('should contain option value', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_add', function (value, data) {\n        expect(value).to.be.equal('e');\n        done();\n      });\n      test.selectize.addOption({\n        value: 'e'\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain option data","suites":["Events","option_add"],"updatePoint":{"line":267,"column":34,"index":10901},"line":267,"code":"    it('should contain option data', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      var option = {\n        value: 'e'\n      };\n      test.selectize.on('option_add', function (value, data) {\n        expect(option).to.eql(data);\n        done();\n      });\n      test.selectize.addOption(option);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","option_remove"],"updatePoint":{"line":280,"column":27,"index":11373},"line":280,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_remove', function () {\n        done();\n      });\n      test.selectize.removeOption('a');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain option value","suites":["Events","option_remove"],"updatePoint":{"line":287,"column":35,"index":11711},"line":287,"code":"    it('should contain option value', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_remove', function (value) {\n        expect(value).to.be.equal('a');\n        done();\n      });\n      test.selectize.removeOption('a');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","option_clear"],"updatePoint":{"line":297,"column":27,"index":12133},"line":297,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_clear', function () {\n        done();\n      });\n      test.selectize.clearOptions();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","dropdown_open"],"updatePoint":{"line":306,"column":27,"index":12507},"line":306,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('dropdown_open', function () {\n        done();\n      });\n      test.selectize.open();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","dropdown_close"],"updatePoint":{"line":315,"column":27,"index":12875},"line":315,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('dropdown_close', function () {\n        done();\n      });\n      test.selectize.open();\n      test.selectize.close();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","destroy"],"updatePoint":{"line":325,"column":27,"index":13267},"line":325,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('destroy', function () {\n        done();\n      });\n      test.selectize.destroy();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","type"],"updatePoint":{"line":334,"column":27,"index":13622},"line":334,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select></select>', {\n        create: true\n      });\n      test.selectize.on('type', function () {\n        done();\n      });\n      syn.click(test.selectize.$control).type('a', test.selectize.$control_input);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain current value","suites":["Events","type"],"updatePoint":{"line":343,"column":36,"index":13924},"line":343,"code":"    it('should contain current value', function (done) {\n      var test = setup_test('<select></select>', {\n        create: true\n      });\n      test.selectize.on('type', function (value) {\n        expect(value).to.be.equal('a');\n        done();\n      });\n      syn.click(test.selectize.$control).type('a', test.selectize.$control_input);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should keep dropdown open after selection made if closeAfterSelect: false","suites":["Interaction"],"updatePoint":{"line":20,"column":81,"index":804},"line":20,"code":"    it('should keep dropdown open after selection made if closeAfterSelect: false', function (done) {\n      var test = setup_test('<select multiple>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n      click(test.selectize.$control, function () {\n        click($('[data-value=a]', test.selectize.$dropdown_content), function () {\n          expect(test.selectize.isOpen).to.be.equal(true);\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });\n    });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should close dropdown after selection made if closeAfterSelect: true","suites":["Interaction"],"updatePoint":{"line":30,"column":76,"index":1338},"line":30,"code":"    it('should close dropdown after selection made if closeAfterSelect: true', function (done) {\n      var test = setup_test('<select multiple>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n        closeAfterSelect: true\n      });\n      click(test.selectize.$control, function () {\n        click($('[data-value=a]', test.selectize.$dropdown_content), function () {\n          expect(test.selectize.isOpen).to.be.equal(false);\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });\n    });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should reopen dropdown if clicked after being closed by closeAfterSelect: true","suites":["Interaction"],"updatePoint":{"line":42,"column":86,"index":1921},"line":42,"code":"    it('should reopen dropdown if clicked after being closed by closeAfterSelect: true', function (done) {\n      var test = setup_test('<select multiple>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n        closeAfterSelect: true\n      });\n      click(test.selectize.$control, function () {\n        click($('[data-value=a]', test.selectize.$dropdown_content), function () {\n          click(test.selectize.$control, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.isFocused).to.be.equal(true);\n            done();\n          });\n        });\n      });\n    });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should give it focus","suites":["Interaction","clicking control"],"updatePoint":{"line":57,"column":30,"index":2569},"line":57,"code":"      it('should give it focus', function (done) {\n        var test = setup_test('<select>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should start loading results if preload:\"focus\"","suites":["Interaction","clicking control"],"updatePoint":{"line":64,"column":57,"index":2929},"line":64,"code":"      it('should start loading results if preload:\"focus\"', function (done) {\n        var calls_focus = 0;\n        var calls_load = 0;\n        var test = setup_test('<select>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n          preload: 'focus',\n          load: function (query, done) {\n            calls_load++;\n            assert.equal(query, '');\n            setTimeout(function () {\n              done([{\n                value: 'c',\n                text: 'C'\n              }]);\n            });\n          }\n        });\n        test.selectize.on('focus', function () {\n          calls_focus++;\n        });\n        click(test.selectize.$control, function () {\n          setTimeout(function () {\n            assert.equal(calls_focus, 1);\n            assert.equal(calls_load, 1);\n            done();\n          }, 300);\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should open dropdown menu","suites":["Interaction","clicking control"],"updatePoint":{"line":91,"column":35,"index":3788},"line":91,"code":"      it('should open dropdown menu', function (done) {\n        var test = setup_test('<select>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          expect(test.selectize.isOpen).to.be.equal(true);\n          expect(test.selectize.$dropdown.is(':visible')).to.be.equal(true);\n          done();\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should give it focus to select","suites":["Interaction","clicking label"],"updatePoint":{"line":101,"column":40,"index":4258},"line":101,"code":"      it('should give it focus to select', function (done) {\n        var inputId = \"labeledSelect\";\n        var label = $('<label for=\"' + inputId + '\">select</label>').appendTo('form');\n        var test = setup_test('<select id=\"' + inputId + '\">' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        syn.click(label).delay(0, function () {\n          label.remove();\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should give it focus to input","suites":["Interaction","clicking label"],"updatePoint":{"line":111,"column":39,"index":4768},"line":111,"code":"      it('should give it focus to input', function (done) {\n        var inputId = \"labeledInput\";\n        var label = $('<label for=\"' + inputId + '\">input</label>').appendTo('form');\n        var test = setup_test('<input id=\"' + inputId + '\" type=\"text\" value=\"a,b,c,d\">', {});\n        syn.click(label).delay(0, function () {\n          label.remove();\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should select it","suites":["Interaction","clicking option"],"updatePoint":{"line":123,"column":26,"index":5264},"line":123,"code":"      it('should select it', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          click($('[data-value=\"b\"]', test.selectize.$dropdown), function () {\n            expect(test.selectize.$input.val()).to.be.equal('b');\n            expect(test.selectize.$input.text()).to.be.equal('B');\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should close dropdown","suites":["Interaction","clicking option"],"updatePoint":{"line":133,"column":31,"index":5814},"line":133,"code":"      it('should close dropdown', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          click($('[data-value=\"b\"]', test.selectize.$dropdown), function () {\n            expect(test.selectize.isOpen).to.be.equal(false);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(false);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should filter results","suites":["Interaction","typing in input"],"updatePoint":{"line":145,"column":31,"index":6427},"line":145,"code":"      it('should filter results', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          syn.type('a', test.selectize.$control_input).delay(0, function () {\n            expect($('[data-value=\"a\"]', test.selectize.$dropdown).length).to.be.equal(1);\n            expect($('[data-value=\"b\"]', test.selectize.$dropdown).length).to.be.equal(0);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should hide dropdown if no results present","suites":["Interaction","typing in input"],"updatePoint":{"line":155,"column":52,"index":7046},"line":155,"code":"      it('should hide dropdown if no results present', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          syn.type('awaw', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(false);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(false);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should not hide dropdown if \"create\" option enabled and no results present","suites":["Interaction","typing in input"],"updatePoint":{"line":165,"column":84,"index":7660},"line":165,"code":"      it('should not hide dropdown if \"create\" option enabled and no results present', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n          create: true\n        });\n        click(test.selectize.$control, function () {\n          syn.type('awaw', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(true);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should restore dropdown visibility when backing out of a query without results (backspace)","suites":["Interaction","typing in input"],"updatePoint":{"line":177,"column":100,"index":8320},"line":177,"code":"      it('should restore dropdown visibility when backing out of a query without results (backspace)', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          syn.type('awf', test.selectize.$control_input).type('\\b\\b\\b', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(true);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should move caret when [left] or [right] pressed","suites":["Interaction","typing in input"],"updatePoint":{"line":187,"column":58,"index":8951},"line":187,"code":"      it('should move caret when [left] or [right] pressed', function (done) {\n        var test = setup_test('<input type=\"text\" value=\"a,b,c,d\">', {\n          create: true\n        });\n        click(test.selectize.$control, function () {\n          syn.type('[left][left]whatt', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.caretPos).to.be.equal(2);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should not create input if comma entered in single select mode","suites":["Interaction","typing in input"],"updatePoint":{"line":198,"column":72,"index":9413},"line":198,"code":"      it('should not create input if comma entered in single select mode', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n          create: true\n        });\n        click(test.selectize.$control, function () {\n          syn.type('asdf,asdf', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.options).to.not.have.property('asdf');\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should not delete any dropdown option text if duplicate match occurs","suites":["Interaction","typing in input"],"updatePoint":{"line":210,"column":78,"index":10050},"line":210,"code":"      it('should not delete any dropdown option text if duplicate match occurs', function (done) {\n        var test = setup_test('<select>' + '<option></option>' + '<option value=\"a\"></option>' + '<option value=\"b\">Isabel Street</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          // Here, the 'S' in St will also match the 's' in Isabel (a duplicate match)\n          syn.type('Isabel St', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.$dropdown_content.find('.option[data-value=b]').text()).to.be.equal('Isabel Street');\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should close dropdown when createOnBlur is true","suites":["Interaction","blurring the input"],"updatePoint":{"line":222,"column":57,"index":10747},"line":222,"code":"      it('should close dropdown when createOnBlur is true', function (done) {\n        var test = setup_test('<select multiple=\"multiple\">' + '<option></option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n          createOnBlur: true,\n          create: function (value) {\n            return {\n              value: value,\n              text: value\n            };\n          }\n        });\n        click(test.selectize.$control, function () {\n          syn.type('fooo', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(true);\n            syn.click($(\"body\")).delay(5, function () {\n              expect(test.selectize.isOpen).to.be.equal(false);\n              expect(test.selectize.$dropdown.is(':visible')).to.be.equal(false);\n              done();\n            });\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should deactivate the item","suites":["Interaction","deleting active item"],"updatePoint":{"line":287,"column":36,"index":13538},"line":287,"code":"      it('should deactivate the item', function (done) {\n        var test = setup_test('<select multiple=\"multiple\">' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          click($('[data-value=\"a\"]', test.selectize.$dropdown), function () {\n            click($('[data-value=\"a\"]', test.selectize.$control), function () {\n              syn.type('[backspace]', test.selectize.$control_input).delay(5, function () {\n                click($('[data-value=\"a\"]', test.selectize.$dropdown), function () {\n                  expect($('[data-value=\"a\"]', test.selectize.$control).hasClass('active')).to.be.equal(false);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should give the control focus","suites":["Interaction","simulate tabbing using native focus()","defaults"],"updatePoint":{"line":318,"column":41,"index":15054},"line":318,"code":"        it('should give the control focus', async function () {\n          await tabTo(input1[0]);\n          expect(test.selectize.isFocused).to.be.equal(false);\n          await tabTo(test.selectize.$control_input[0]);\n          expect(test.selectize.isFocused).to.be.equal(true);\n        });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should remove the control focus","suites":["Interaction","simulate tabbing using native focus()","defaults"],"updatePoint":{"line":324,"column":43,"index":15348},"line":324,"code":"        it('should remove the control focus', async function () {\n          await tabTo(test.selectize.$control_input[0]);\n          expect(test.selectize.isFocused).to.be.equal(true);\n          await tabTo(input2[0]);\n          expect(test.selectize.isFocused).to.be.equal(false);\n        });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should open the control","suites":["Interaction","simulate tabbing using native focus()","defaults"],"updatePoint":{"line":330,"column":35,"index":15634},"line":330,"code":"        it('should open the control', async function () {\n          await tabTo(input1[0]);\n          expect(test.selectize.isOpen).to.be.equal(false);\n          await tabTo(test.selectize.$control_input[0]);\n          expect(test.selectize.isOpen).to.be.equal(true);\n        });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should close the control","suites":["Interaction","simulate tabbing using native focus()","defaults"],"updatePoint":{"line":336,"column":36,"index":15915},"line":336,"code":"        it('should close the control', async function () {\n          await tabTo(test.selectize.$control_input[0]);\n          expect(test.selectize.isOpen).to.be.equal(true);\n          await tabTo(input2[0]);\n          expect(test.selectize.isOpen).to.be.equal(false);\n        });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should select the first value on blur","suites":["Interaction","simulate tabbing using native focus()","defaults"],"updatePoint":{"line":345,"column":50,"index":16325},"line":345,"code":"        xit('should select the first value on blur', async function () {\n          await tabTo(test.selectize.$control_input[0]);\n          await tabTo(input2[0]);\n          expect(test.selectize.getValue()).to.be.equal('a');\n        });","skipped":true,"file":"interaction.js","dir":"test"},{"name":"should give the control focus","suites":["Interaction","simulate tabbing using native focus()","openOnFocus is false"],"updatePoint":{"line":367,"column":41,"index":17232},"line":367,"code":"        it('should give the control focus', async function () {\n          await tabTo(input1[0]);\n          expect(test.selectize.isFocused).to.be.equal(false);\n          await tabTo(test.selectize.$control_input[0]);\n          expect(test.selectize.isFocused).to.be.equal(true);\n        });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should not open the control","suites":["Interaction","simulate tabbing using native focus()","openOnFocus is false"],"updatePoint":{"line":373,"column":39,"index":17522},"line":373,"code":"        it('should not open the control', async function () {\n          await tabTo(input1[0]);\n          expect(test.selectize.isOpen).to.be.equal(false);\n          await tabTo(test.selectize.$control_input[0]);\n          expect(test.selectize.isOpen).to.be.equal(false);\n        });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should add \"define\" method","suites":["MicroPlugin","mixin()"],"updatePoint":{"line":4,"column":36,"index":130},"line":4,"code":"      it('should add \"define\" method', function () {\n        var Lib = function () {};\n        MicroPlugin.mixin(Lib);\n        assert.equal(typeof Lib.define, 'function');\n      });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should add \"require\" method to prototype","suites":["MicroPlugin","mixin()"],"updatePoint":{"line":9,"column":50,"index":326},"line":9,"code":"      it('should add \"require\" method to prototype', function () {\n        var Lib = function () {};\n        MicroPlugin.mixin(Lib);\n        assert.equal(typeof Lib.prototype.require, 'function');\n      });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should add \"initializePlugins\" method to prototype","suites":["MicroPlugin","mixin()"],"updatePoint":{"line":14,"column":60,"index":543},"line":14,"code":"      it('should add \"initializePlugins\" method to prototype', function () {\n        var Lib = function () {};\n        MicroPlugin.mixin(Lib);\n        assert.equal(typeof Lib.prototype.initializePlugins, 'function');\n      });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should load plugins with options empty","suites":["MicroPlugin","#initializePlugins()","format: array of plugin names"],"updatePoint":{"line":22,"column":50,"index":881},"line":22,"code":"        it('should load plugins with options empty', function () {\n          var Lib = function () {\n            this.initializePlugins(['a', 'b']);\n          };\n          MicroPlugin.mixin(Lib);\n          var loaded = 0;\n          Lib.define('a', function (options) {\n            loaded++;\n            assert.deepEqual(options, {});\n          });\n          Lib.define('b', function (options) {\n            loaded++;\n            assert.deepEqual(options, {});\n          });\n          new Lib();\n          assert.equal(loaded, 2);\n        });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should not load plugins that are not listed","suites":["MicroPlugin","#initializePlugins()","format: array of plugin names"],"updatePoint":{"line":39,"column":55,"index":1428},"line":39,"code":"        it('should not load plugins that are not listed', function () {\n          var Lib = function () {\n            this.initializePlugins(['a', 'b']);\n          };\n          MicroPlugin.mixin(Lib);\n          var loaded = false;\n          Lib.define('a', function (options) {});\n          Lib.define('b', function (options) {});\n          Lib.define('c', function (options) {\n            loaded = true;\n          });\n          new Lib();\n          assert.equal(loaded, false);\n        });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should only execute plugins once, even if listed more than once","suites":["MicroPlugin","#initializePlugins()","format: array of plugin names"],"updatePoint":{"line":53,"column":75,"index":1939},"line":53,"code":"        it('should only execute plugins once, even if listed more than once', function () {\n          var Lib = function () {\n            this.initializePlugins(['a', 'a']);\n          };\n          MicroPlugin.mixin(Lib);\n          var counter = 0;\n          Lib.define('a', function (options) {\n            counter++;\n          });\n          new Lib();\n          assert.equal(counter, 1);\n        });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should load plugins with correct options","suites":["MicroPlugin","#initializePlugins()","format: hash of plugin options"],"updatePoint":{"line":67,"column":52,"index":2390},"line":67,"code":"        it('should load plugins with correct options', function () {\n          var Lib = function () {\n            this.initializePlugins({\n              'a': {\n                test: 'hello_a'\n              },\n              'b': {\n                test: 'hello_b'\n              }\n            });\n          };\n          MicroPlugin.mixin(Lib);\n          var loaded = 0;\n          Lib.define('a', function (options) {\n            loaded++;\n            assert.equal(options.test, 'hello_a');\n          });\n          Lib.define('b', function (options) {\n            loaded++;\n            assert.equal(options.test, 'hello_b');\n          });\n          new Lib();\n          assert.equal(loaded, 2);\n        });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should not load plugins that are not listed","suites":["MicroPlugin","#initializePlugins()","format: hash of plugin options"],"updatePoint":{"line":91,"column":55,"index":3097},"line":91,"code":"        it('should not load plugins that are not listed', function () {\n          var Lib = function () {\n            this.initializePlugins({\n              'a': {\n                test: 'hello_a'\n              },\n              'b': {\n                test: 'hello_b'\n              }\n            });\n          };\n          MicroPlugin.mixin(Lib);\n          var loaded = false;\n          Lib.define('a', function (options) {});\n          Lib.define('b', function (options) {});\n          Lib.define('c', function (options) {\n            loaded = true;\n          });\n          new Lib();\n          assert.equal(loaded, false);\n        });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should load plugins with correct options","suites":["MicroPlugin","#initializePlugins()","format: array of plugin options"],"updatePoint":{"line":114,"column":52,"index":3803},"line":114,"code":"        it('should load plugins with correct options', function () {\n          var Lib = function () {\n            this.initializePlugins([{\n              name: 'a',\n              options: {\n                test: 'hello_a'\n              }\n            }, {\n              name: 'b',\n              options: {\n                test: 'hello_b'\n              }\n            }]);\n          };\n          MicroPlugin.mixin(Lib);\n          var loaded = 0;\n          Lib.define('a', function (options) {\n            loaded++;\n            assert.deepEqual(options, {\n              test: 'hello_a'\n            });\n          });\n          Lib.define('b', function (options) {\n            loaded++;\n            assert.deepEqual(options, {\n              test: 'hello_b'\n            });\n          });\n          new Lib();\n          assert.equal(loaded, 2);\n        });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should not load plugins that are not listed","suites":["MicroPlugin","#initializePlugins()","format: array of plugin options"],"updatePoint":{"line":145,"column":55,"index":4656},"line":145,"code":"        it('should not load plugins that are not listed', function () {\n          var Lib = function () {\n            this.initializePlugins([{\n              name: 'a',\n              options: {\n                test: 'hello_a'\n              }\n            }, {\n              name: 'b',\n              options: {\n                test: 'hello_b'\n              }\n            }]);\n          };\n          MicroPlugin.mixin(Lib);\n          var loaded = false;\n          Lib.define('a', function (options) {});\n          Lib.define('b', function (options) {});\n          Lib.define('c', function (options) {\n            loaded = true;\n          });\n          new Lib();\n          assert.equal(loaded, false);\n        });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should only execute plugins once, even if listed more than once","suites":["MicroPlugin","#initializePlugins()","format: array of plugin options"],"updatePoint":{"line":169,"column":75,"index":5387},"line":169,"code":"        it('should only execute plugins once, even if listed more than once', function () {\n          var Lib = function () {\n            this.initializePlugins([{\n              name: 'a',\n              options: {\n                test: 'hello_a'\n              }\n            }, {\n              name: 'a',\n              options: {\n                test: 'hello_a'\n              }\n            }, {\n              name: 'a',\n              options: {\n                test: 'hello_a'\n              }\n            }]);\n          };\n          MicroPlugin.mixin(Lib);\n          var counter = 0;\n          Lib.define('a', function (options) {\n            counter++;\n          });\n          new Lib();\n          assert.equal(counter, 1);\n        });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should throw error if requested plugin not defined","suites":["MicroPlugin","#require()"],"updatePoint":{"line":199,"column":60,"index":6167},"line":199,"code":"      it('should throw error if requested plugin not defined', function () {\n        var Lib = function () {\n          this.initializePlugins();\n        };\n        MicroPlugin.mixin(Lib);\n        assert.throws(function () {\n          var instance = new Lib();\n          instance.require('a');\n        });\n      });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should throw error if circular dependency exists","suites":["MicroPlugin","#require()"],"updatePoint":{"line":209,"column":58,"index":6480},"line":209,"code":"      it('should throw error if circular dependency exists', function () {\n        var Lib = function () {\n          this.initializePlugins();\n        };\n        MicroPlugin.mixin(Lib);\n        Lib.define('a', function () {\n          this.require('b');\n        });\n        Lib.define('b', function () {\n          this.require('a');\n        });\n        assert.throws(function () {\n          var instance = new Lib();\n          instance.require('b');\n        }, /dependency/);\n      });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should not execute plugin code more than once","suites":["MicroPlugin","#require()"],"updatePoint":{"line":225,"column":55,"index":6962},"line":225,"code":"      it('should not execute plugin code more than once', function () {\n        var Lib = function () {\n          this.initializePlugins();\n        };\n        MicroPlugin.mixin(Lib);\n        var counter = 0;\n        Lib.define('a', function () {\n          counter++;\n        });\n        Lib.define('b', function () {\n          this.require('a');\n        });\n        var instance = new Lib();\n        instance.require('a');\n        instance.require('a');\n        instance.require('b');\n        assert.equal(counter, 1);\n      });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should return plugin exports","suites":["MicroPlugin","#require()"],"updatePoint":{"line":243,"column":38,"index":7474},"line":243,"code":"      it('should return plugin exports', function () {\n        var Lib = function () {\n          this.initializePlugins();\n        };\n        MicroPlugin.mixin(Lib);\n        Lib.define('a', function () {\n          return 'test';\n        });\n        Lib.define('b', function () {\n          return {\n            test: true\n          };\n        });\n        Lib.define('c', function () {\n          return false;\n        });\n        Lib.define('d', function () {});\n        var instance = new Lib();\n        assert.equal(instance.require('a'), 'test');\n        assert.equal(instance.require('a'), 'test');\n        assert.equal(instance.require('b').test, true);\n        assert.equal(instance.require('c'), false);\n        assert.equal(typeof instance.require('d'), 'undefined');\n      });","file":"microplugin.js","skipped":false,"dir":"test"},{"name":"should not allow duplicate initialization","suites":["Setup"],"updatePoint":{"line":3,"column":49,"index":99},"line":3,"code":"    it('should not allow duplicate initialization', function () {\n      var instance_before, instance_after, test;\n      test = setup_test('<input type=\"text\">', {});\n      instance_before = test.$select[0].selectize;\n      test.$select.selectize();\n      instance_after = test.$select[0].selectize;\n      expect(instance_before).to.be.equal(instance_after);\n    });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should complete without exceptions","suites":["Setup","<input type=\"text\">"],"updatePoint":{"line":12,"column":44,"index":511},"line":12,"code":"      it('should complete without exceptions', function () {\n        var test = setup_test('<input type=\"text\">', {});\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should populate items,options from \"dataAttr\" if available","suites":["Setup","<input type=\"text\">"],"updatePoint":{"line":15,"column":68,"index":664},"line":15,"code":"      it('should populate items,options from \"dataAttr\" if available', function () {\n        var data = [{\n          val: 'a',\n          lbl: 'Hello'\n        }, {\n          val: 'b',\n          lbl: 'World'\n        }];\n        var test = setup_test('<input type=\"text\" value=\"c,d,e\" data-hydrate=\"' + JSON.stringify(data).replace(/\"/g, '&quot;') + '\">', {\n          dataAttr: 'data-hydrate',\n          valueField: 'val',\n          labelField: 'lbl'\n        });\n        expect(test.selectize.getValue()).to.be.equal('a,b');\n        assert.deepEqual(test.selectize.items, ['a', 'b']);\n        assert.deepEqual(test.selectize.options, {\n          'a': {\n            val: 'a',\n            lbl: 'Hello',\n            $order: 1\n          },\n          'b': {\n            val: 'b',\n            lbl: 'World',\n            $order: 2\n          }\n        });\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return value as a string","suites":["Setup","<input type=\"text\">","getValue()"],"updatePoint":{"line":44,"column":43,"index":1536},"line":44,"code":"        it('should return value as a string', function () {\n          var test = setup_test('<input type=\"text\" value=\"a,b\">', {\n            delimiter: ','\n          });\n          expect(test.selectize.getValue()).to.be.a('string');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return \"\" when empty","suites":["Setup","<input type=\"text\">","getValue()"],"updatePoint":{"line":50,"column":39,"index":1777},"line":50,"code":"        it('should return \"\" when empty', function () {\n          var test = setup_test('<input type=\"text\" value=\"\">', {\n            delimiter: ','\n          });\n          expect(test.selectize.getValue()).to.be.equal('');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return proper value when not empty","suites":["Setup","<input type=\"text\">","getValue()"],"updatePoint":{"line":56,"column":53,"index":2027},"line":56,"code":"        it('should return proper value when not empty', function () {\n          var test = setup_test('<input type=\"text\" value=\"a,b\">', {\n            delimiter: ','\n          });\n          expect(test.selectize.getValue()).to.be.equal('a,b');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should propagate original input attributes to the generated input","suites":["Setup","<input type=\"text\">","<input type=\"text\" attributes>"],"updatePoint":{"line":64,"column":77,"index":2380},"line":64,"code":"        it('should propagate original input attributes to the generated input', function () {\n          var test = setup_test('<input type=\"text\" autocorrect=\"off\" autocapitalize=\"none\">', {});\n          expect(test.selectize.$control_input.attr('autocorrect')).to.be.equal('off');\n          expect(test.selectize.$control_input.attr('autocapitalize')).to.be.equal('none');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should not add attributes if not present in the original","suites":["Setup","<input type=\"text\">","<input type=\"text\" attributes>"],"updatePoint":{"line":69,"column":68,"index":2757},"line":69,"code":"        it('should not add attributes if not present in the original', function () {\n          var test = setup_test('<input type=\"text\">', {});\n          expect(test.selectize.$control_input.attr('autocorrect')).to.be.equal(undefined);\n          expect(test.selectize.$control_input.attr('autocapitalize')).to.be.equal(undefined);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should complete without exceptions","suites":["Setup","<input type=\"number\">"],"updatePoint":{"line":77,"column":44,"index":3147},"line":77,"code":"      it('should complete without exceptions', function (done) {\n        var test = setup_test('<input type=\"number\">', {});\n        window.setTimeout(function () {\n          assert.equal(test.selectize.$control_input.attr('type'), 'number');\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should complete without exceptions","suites":["Setup","<select>"],"updatePoint":{"line":86,"column":44,"index":3480},"line":86,"code":"      it('should complete without exceptions', function () {\n        var test = setup_test('<select></select>', {});\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should allow for values optgroups with duplicated options","suites":["Setup","<select>"],"updatePoint":{"line":89,"column":67,"index":3630},"line":89,"code":"      it('should allow for values optgroups with duplicated options', function () {\n        var test = setup_test(['<select>', '<optgroup label=\"Group 1\">', '<option value=\"a\">Item A</option>', '<option value=\"b\">Item B</option>', '</optgroup>', '<optgroup label=\"Group 2\">', '<option value=\"a\">Item A</option>', '<option value=\"b\">Item B</option>', '</optgroup>', '</select>'].join(''), {\n          optgroupValueField: 'val',\n          optgroupField: 'grp',\n          disabledField: 'dis'\n        });\n        assert.deepEqual(test.selectize.options, {\n          'a': {\n            text: 'Item A',\n            value: 'a',\n            grp: ['Group 1', 'Group 2'],\n            $order: 1,\n            dis: false,\n            styles: '',\n            classes: ''\n          },\n          'b': {\n            text: 'Item B',\n            value: 'b',\n            grp: ['Group 1', 'Group 2'],\n            $order: 2,\n            dis: false,\n            styles: '',\n            classes: ''\n          }\n        });\n        assert.deepEqual(test.selectize.optgroups, {\n          'Group 1': {\n            label: 'Group 1',\n            val: 'Group 1',\n            $order: 3,\n            dis: false\n          },\n          'Group 2': {\n            label: 'Group 2',\n            val: 'Group 2',\n            $order: 4,\n            dis: false\n          }\n        }, '2');\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should allow respect disabled flags of option and optgroup","suites":["Setup","<select>"],"updatePoint":{"line":130,"column":68,"index":4990},"line":130,"code":"      it('should allow respect disabled flags of option and optgroup', function () {\n        var test = setup_test(['<select>', '<optgroup label=\"Group 1\">', '<option value=\"a\" disabled>Item A</option>', '<option value=\"b\">Item B</option>', '</optgroup>', '<optgroup label=\"Group 2\" disabled>', '<option value=\"a\">Item A</option>', '<option value=\"b\">Item B</option>', '</optgroup>', '</select>'].join(''), {\n          optgroupValueField: 'val',\n          optgroupField: 'grp',\n          disabledField: 'dis'\n        });\n        assert.deepEqual(test.selectize.options, {\n          'a': {\n            text: 'Item A',\n            value: 'a',\n            grp: ['Group 1', 'Group 2'],\n            $order: 1,\n            dis: true,\n            styles: '',\n            classes: ''\n          },\n          'b': {\n            text: 'Item B',\n            value: 'b',\n            grp: ['Group 1', 'Group 2'],\n            $order: 2,\n            dis: false,\n            styles: '',\n            classes: ''\n          }\n        });\n        assert.deepEqual(test.selectize.optgroups, {\n          'Group 1': {\n            label: 'Group 1',\n            val: 'Group 1',\n            $order: 3,\n            dis: false\n          },\n          'Group 2': {\n            label: 'Group 2',\n            val: 'Group 2',\n            $order: 4,\n            dis: true\n          }\n        }, '2');\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should add options in text form (no html entities)","suites":["Setup","<select>"],"updatePoint":{"line":171,"column":60,"index":6358},"line":171,"code":"      it('should add options in text form (no html entities)', function () {\n        var test = setup_test('<select><option selected value=\"a\">&lt;hi&gt;</option></select>', {});\n        expect(test.selectize.options['a'].text).to.be.equal('<hi>');\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should keep options in original order if no sort given","suites":["Setup","<select>"],"updatePoint":{"line":175,"column":64,"index":6621},"line":175,"code":"      it('should keep options in original order if no sort given', function (done) {\n        var test = setup_test(['<select multiple>', '<option value=\"\">Select a state...</option>', '<option value=\"AL\">Alabama</option>', '<option value=\"AK\">Alaska</option>', '<option value=\"AZ\">Arizona</option>', '<option value=\"AR\">Arkansas</option>', '<option value=\"CA\" selected>California</option>', '<option value=\"CO\">Colorado</option>', '<option value=\"CT\">Connecticut</option>', '<option value=\"DE\">Delaware</option>', '<option value=\"DC\">District of Columbia</option>', '<option value=\"FL\">Florida</option>', '<option value=\"GA\">Georgia</option>', '<option value=\"HI\">Hawaii</option>', '<option value=\"ID\">Idaho</option>', '<option value=\"IL\">Illinois</option>', '<option value=\"IN\">Indiana</option>', '<option value=\"IA\">Iowa</option>', '<option value=\"KS\">Kansas</option>', '<option value=\"KY\">Kentucky</option>', '<option value=\"LA\">Louisiana</option>', '<option value=\"ME\">Maine</option>', '<option value=\"MD\">Maryland</option>', '<option value=\"MA\">Massachusetts</option>', '<option value=\"MI\">Michigan</option>', '<option value=\"MN\">Minnesota</option>', '<option value=\"MS\">Mississippi</option>', '<option value=\"MO\">Missouri</option>', '<option value=\"MT\">Montana</option>', '<option value=\"NE\">Nebraska</option>', '<option value=\"NV\">Nevada</option>', '<option value=\"NH\">New Hampshire</option>', '<option value=\"NJ\">New Jersey</option>', '<option value=\"NM\">New Mexico</option>', '<option value=\"NY\">New York</option>', '<option value=\"NC\">North Carolina</option>', '<option value=\"ND\">North Dakota</option>', '<option value=\"OH\">Ohio</option>', '<option value=\"OK\">Oklahoma</option>', '<option value=\"OR\">Oregon</option>', '<option value=\"PA\">Pennsylvania</option>', '<option value=\"RI\">Rhode Island</option>', '<option value=\"SC\">South Carolina</option>', '<option value=\"SD\">South Dakota</option>', '<option value=\"TN\">Tennessee</option>', '<option value=\"TX\">Texas</option>', '<option value=\"UT\">Utah</option>', '<option value=\"VT\">Vermont</option>', '<option value=\"VA\">Virginia</option>', '<option value=\"WA\">Washington</option>', '<option value=\"WV\">West Virginia</option>', '<option value=\"WI\">Wisconsin</option>', '<option value=\"01\">01</option>', '<option value=\"10\">10</option>', '<option value=\"WY\" selected>Wyoming</option>', '</select>'].join(), {});\n        var order_expected = ['AL', 'AK', 'AZ', 'AR', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', '01', '10'];\n        var order_actual = [];\n        test.selectize.refreshOptions(true);\n        window.setTimeout(function () {\n          test.selectize.$dropdown.find('[data-value]').each(function (i, el) {\n            order_actual.push($(el).attr('data-value'));\n          });\n          expect(order_actual).to.eql(order_expected);\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should register should not care optionGroupRegister is not set","suites":["Setup","<select>"],"updatePoint":{"line":188,"column":72,"index":9701},"line":188,"code":"      it('should register should not care optionGroupRegister is not set', function () {\n        var test = setup_test('<select>', {\n          options: [{\n            value: 'a',\n            grp: 'someGroup'\n          }, {\n            value: 'b',\n            grp: 'anotherGroup'\n          }, {\n            value: 'c',\n            grp: 'anotherGroup'\n          }],\n          optgroupValueField: 'val',\n          optgroupField: 'grp'\n        });\n        test.selectize.refreshOptions();\n        assert.deepEqual(test.selectize.optgroups, {}, '2');\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should register optgroups if optionGroupRegister is set","suites":["Setup","<select>"],"updatePoint":{"line":206,"column":65,"index":10250},"line":206,"code":"      it('should register optgroups if optionGroupRegister is set', function () {\n        var test = setup_test('<select>', {\n          options: [{\n            value: 'a',\n            grp: 'someGroup'\n          }, {\n            value: 'b',\n            grp: 'anotherGroup'\n          }, {\n            value: 'c',\n            grp: 'anotherGroup'\n          }],\n          optgroupValueField: 'val',\n          optgroupField: 'grp',\n          optionGroupRegister: function (optgroup) {\n            var group = {};\n            group['label'] = optgroup;\n            group['val'] = optgroup;\n            return group;\n          }\n        });\n        test.selectize.refreshOptions();\n        assert.deepEqual(test.selectize.optgroups, {\n          'someGroup': {\n            label: 'someGroup',\n            val: 'someGroup',\n            $order: 4\n          },\n          'anotherGroup': {\n            label: 'anotherGroup',\n            val: 'anotherGroup',\n            $order: 5\n          }\n        }, '2');\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should respect option disabled flag","suites":["Setup","<select>"],"updatePoint":{"line":241,"column":45,"index":11236},"line":241,"code":"      it('should respect option disabled flag', function (done) {\n        var test = setup_test(['<select>', '<option value=\"a\">Item A</option>', '<option value=\"b\" disabled>Item B</option>', '</select>'].join(''), {});\n        test.selectize.refreshOptions(true);\n        window.setTimeout(function () {\n          expect(test.selectize.$dropdown.find('.option')).to.has.length(2);\n          expect(test.selectize.$dropdown.find('[data-selectable]')).to.has.length(1);\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should respect option style / class","suites":["Setup","<select>"],"updatePoint":{"line":250,"column":45,"index":11748},"line":250,"code":"      it('should respect option style / class', function () {\n        var test;\n        beforeEach(function () {\n          test = setup_test('<select>' + '<option value=\"a\" style=\"color:red;\" class=\"a\">A</option>' + '</select>');\n        });\n        it('should dropdown height to be equal 100', function () {\n          test.selectize.focus();\n          window.setTimeout(function () {\n            expect(test.selectize.$dropdown_content.find('.option').attr('style')).to.be.equal('color:red;');\n            expect(test.selectize.$dropdown_content.find('.option').hasClass('a')).to.be.equal(true);\n          }, 0);\n        });\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should dropdown height to be equal 100","suites":["Setup","<select>"],"updatePoint":{"line":255,"column":50,"index":11995},"line":255,"code":"        it('should dropdown height to be equal 100', function () {\n          test.selectize.focus();\n          window.setTimeout(function () {\n            expect(test.selectize.$dropdown_content.find('.option').attr('style')).to.be.equal('color:red;');\n            expect(test.selectize.$dropdown_content.find('.option').hasClass('a')).to.be.equal(true);\n          }, 0);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should respect input readonly (option search = false)","suites":["Setup","<select>"],"updatePoint":{"line":263,"column":63,"index":12402},"line":263,"code":"      it('should respect input readonly (option search = false)', function () {\n        var test;\n        beforeEach(function () {\n          test = setup_test('<select>' + '<option value=\"a\">A</option>' + '</select>', {\n            search: false\n          });\n        });\n        it('should readonly on input and cursor pointer on input and control element', function () {\n          window.setTimeout(function () {\n            expect(test.selectize.$dropdown_input.attr('readonly')).to.be.equal('readonly');\n            expect(test.selectize.$dropdown_input.css('cursor')).to.be.equal('pointer');\n            expect(test.selectize.$control.css('cursor')).to.be.equal('pointer');\n          }, 0);\n        });\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should readonly on input and cursor pointer on input and control element","suites":["Setup","<select>"],"updatePoint":{"line":270,"column":84,"index":12695},"line":270,"code":"        it('should readonly on input and cursor pointer on input and control element', function () {\n          window.setTimeout(function () {\n            expect(test.selectize.$dropdown_input.attr('readonly')).to.be.equal('readonly');\n            expect(test.selectize.$dropdown_input.css('cursor')).to.be.equal('pointer');\n            expect(test.selectize.$control.css('cursor')).to.be.equal('pointer');\n          }, 0);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return \"\" when empty","suites":["Setup","<select>","getValue()"],"updatePoint":{"line":279,"column":39,"index":13139},"line":279,"code":"        it('should return \"\" when empty', function () {\n          var test = setup_test('<select>', {});\n          expect(test.selectize.getValue()).to.be.equal('');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return proper value when not empty","suites":["Setup","<select>","getValue()"],"updatePoint":{"line":283,"column":53,"index":13331},"line":283,"code":"        it('should return proper value when not empty', function () {\n          var test = setup_test('<select><option selected value=\"a\">A</option></select>', {});\n          expect(test.selectize.getValue()).to.be.equal('a');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should complete without exceptions","suites":["Setup","<select multiple>"],"updatePoint":{"line":290,"column":44,"index":13627},"line":290,"code":"      it('should complete without exceptions', function () {\n        var test = setup_test('<select>', {});\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return [] when empty","suites":["Setup","<select multiple>","getValue()"],"updatePoint":{"line":294,"column":39,"index":13783},"line":294,"code":"        it('should return [] when empty', function () {\n          var test = setup_test('<select multiple>', {});\n          expect(test.selectize.getValue()).to.deep.equal([]);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return proper value as array when not empty","suites":["Setup","<select multiple>","getValue()"],"updatePoint":{"line":298,"column":62,"index":13995},"line":298,"code":"        it('should return proper value as array when not empty', function () {\n          var test = setup_test('<select multiple><option selected value=\"a\">A</option></select>', {});\n          expect(test.selectize.getValue()).to.deep.equal(['a']);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have \"disabled\" class","suites":["Setup","<select disabled>"],"updatePoint":{"line":309,"column":38,"index":14403},"line":309,"code":"      it('should have \"disabled\" class', function () {\n        expect(test.selectize.$control.hasClass('disabled')).to.be.equal(true);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have isDisabled property set to true","suites":["Setup","<select disabled>"],"updatePoint":{"line":312,"column":53,"index":14563},"line":312,"code":"      it('should have isDisabled property set to true', function () {\n        expect(test.selectize.isDisabled).to.be.equal(true);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have isRequired property set to true","suites":["Setup","<select required>"],"updatePoint":{"line":327,"column":53,"index":15194},"line":327,"code":"      it('should have isRequired property set to true', function () {\n        expect(test.selectize.isRequired).to.be.equal(true);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have the required class","suites":["Setup","<select required>"],"updatePoint":{"line":330,"column":40,"index":15322},"line":330,"code":"      it('should have the required class', function () {\n        expect(test.selectize.$control.hasClass('required')).to.be.equal(true);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should pass validation if an element is selected","suites":["Setup","<select required>"],"updatePoint":{"line":333,"column":58,"index":15487},"line":333,"code":"      it('should pass validation if an element is selected', function (done) {\n        test.selectize.addItem('a');\n        $form.one('submit.test_required', function (e) {\n          done();\n        });\n        syn.click($button);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should not pass validation if no element is selected","suites":["Setup","<select required>"],"updatePoint":{"line":341,"column":64,"index":15779},"line":341,"code":"        it('should not pass validation if no element is selected', function (done) {\n          $form.one('submit.test_required', function (e) {\n            expect(e.isDefaultPrevented()).to.be.true;\n            done();\n          });\n          syn.click($button);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have \"invalid\" class when validation fails","suites":["Setup","<select required>"],"updatePoint":{"line":348,"column":61,"index":16051},"line":348,"code":"        it('should have \"invalid\" class when validation fails', function (done) {\n          test.$select[0].checkValidity();\n          window.setTimeout(function () {\n            expect(test.selectize.$control.hasClass('invalid')).to.be.true;\n            done();\n          }, 250);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should clear the invalid class after an item is selected","suites":["Setup","<select required>"],"updatePoint":{"line":355,"column":68,"index":16352},"line":355,"code":"        it('should clear the invalid class after an item is selected', function (done) {\n          syn.click($button).delay(0, function () {\n            test.selectize.addItem('a');\n            expect(test.selectize.$control.hasClass('invalid')).to.be.false;\n            done();\n          });\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have isRequired property set to false","suites":["Setup","<select> (not required)"],"updatePoint":{"line":375,"column":54,"index":17138},"line":375,"code":"      it('should have isRequired property set to false', function () {\n        expect(test.selectize.isRequired).to.be.equal(false);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should not have the required class","suites":["Setup","<select> (not required)"],"updatePoint":{"line":378,"column":44,"index":17271},"line":378,"code":"      it('should not have the required class', function () {\n        expect(test.selectize.$control.hasClass('required')).to.be.equal(false);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should render the custom option element","suites":["Setup","<select> (custom string render)"],"updatePoint":{"line":393,"column":49,"index":17886},"line":393,"code":"      it('should render the custom option element', function (done) {\n        test.selectize.focus();\n        window.setTimeout(function () {\n          expect(test.selectize.$dropdown.find('.custom-option').length).to.be.equal(1);\n          done();\n        }, 5);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should render the custom option element","suites":["Setup","<select> (custom dom render)"],"updatePoint":{"line":415,"column":49,"index":18709},"line":415,"code":"      it('should render the custom option element', function (done) {\n        test.selectize.focus();\n        window.setTimeout(function () {\n          expect(test.selectize.$dropdown_content.find('.custom-option').length).to.be.equal(1);\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should adapt dropdown height","suites":["Setup","<select> custom size (number)"],"updatePoint":{"line":433,"column":38,"index":19420},"line":433,"code":"      it('should adapt dropdown height', function (done) {\n        test.selectize.focus();\n        window.setTimeout(function () {\n          var padding = test.selectize.$dropdown_content.css('padding-top') ? test.selectize.$dropdown_content.css('padding-top').replace(/\\W*(\\w)\\w*/g, '$1') : 0;\n          var heightExpected = test.selectize.$dropdown_content.find('.option').first().outerHeight(true) - padding;\n          expect(test.selectize.$dropdown_content.height()).to.be.equal(heightExpected);\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should dropdown height to be equal 100","suites":["Setup","<select> custom size (css height)"],"updatePoint":{"line":453,"column":48,"index":20354},"line":453,"code":"      it('should dropdown height to be equal 100', function (done) {\n        test.selectize.focus();\n        window.setTimeout(function () {\n          expect(test.selectize.$dropdown_content.height()).to.be.equal(100);\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return an empty array when given an empty string","suites":["Sifter","#tokenize()"],"updatePoint":{"line":5,"column":65,"index":184},"line":5,"code":"      it('should return an empty array when given an empty string', function () {\n        var sifter = new Sifter([]);\n        var tokens = sifter.tokenize('');\n        assert.equal(tokens.length, 0);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should return an array","suites":["Sifter","#tokenize()"],"updatePoint":{"line":10,"column":32,"index":362},"line":10,"code":"      it('should return an array', function () {\n        var sifter = new Sifter([]);\n        var tokens = sifter.tokenize('hello world');\n        assert.equal(Array.isArray(tokens), true);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should split string by spaces","suites":["Sifter","#tokenize()"],"updatePoint":{"line":15,"column":39,"index":569},"line":15,"code":"      it('should split string by spaces', function () {\n        var sifter = new Sifter([]);\n        var tokens = sifter.tokenize('hello world');\n        assert.equal(tokens.length, 2);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["Sifter","#tokenize()","returned tokens","\"string\" property"],"updatePoint":{"line":26,"column":26,"index":979},"line":26,"code":"          it('should exist', function () {\n            assert.notEqual(typeof tokens[0].string, 'undefined');\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be a string","suites":["Sifter","#tokenize()","returned tokens","\"string\" property"],"updatePoint":{"line":29,"column":32,"index":1109},"line":29,"code":"          it('should be a string', function () {\n            assert.equal(typeof tokens[0].string, 'string');\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be valid","suites":["Sifter","#tokenize()","returned tokens","\"string\" property"],"updatePoint":{"line":32,"column":29,"index":1230},"line":32,"code":"          it('should be valid', function () {\n            assert.equal(tokens[0].string, 'hello');\n            assert.equal(tokens[1].string, 'world');\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["Sifter","#tokenize()","returned tokens","\"regex\" property"],"updatePoint":{"line":38,"column":26,"index":1456},"line":38,"code":"          it('should exist', function () {\n            assert.notEqual(typeof tokens[0].regex, 'undefined');\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be a RegExp object","suites":["Sifter","#tokenize()","returned tokens","\"regex\" property"],"updatePoint":{"line":41,"column":39,"index":1592},"line":41,"code":"          it('should be a RegExp object', function () {\n            assert.equal(tokens[0].regex instanceof RegExp, true);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should ignore case","suites":["Sifter","#tokenize()","returned tokens","\"regex\" property"],"updatePoint":{"line":44,"column":32,"index":1722},"line":44,"code":"          it('should ignore case', function () {\n            assert.equal(tokens[0].regex.test('HelLO'), true);\n            assert.equal(tokens[1].regex.test('wORLD'), true);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not be too greedy","suites":["Sifter","#tokenize()","returned tokens","\"regex\" property"],"updatePoint":{"line":48,"column":38,"index":1917},"line":48,"code":"          it('should not be too greedy', function () {\n            assert.equal(tokens[0].regex.test('afawfaf'), false);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should match international characters","suites":["Sifter","#tokenize()","returned tokens","\"regex\" property"],"updatePoint":{"line":51,"column":51,"index":2065},"line":51,"code":"          it('should match international characters', function () {\n            assert.equal(tokens[0].regex.test('hęłlö'), true);\n            assert.equal(tokens[1].regex.test('wÕrlð'), true);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should acknowledge AND \"conjunction\" option","suites":["Sifter","#getScoreFunction()"],"updatePoint":{"line":59,"column":53,"index":2355},"line":59,"code":"      it('should acknowledge AND \"conjunction\" option', function () {\n        var score,\n          search,\n          sifter = new Sifter([]);\n        score = sifter.getScoreFunction('one two', {\n          fields: ['a', 'b'],\n          conjunction: 'and'\n        });\n        assert.equal(score({\n          a: 'one'\n        }) > 0, false);\n        assert.equal(score({\n          a: 'one',\n          b: 'two'\n        }) > 0, true);\n        assert.equal(score({\n          a: 'one',\n          b: 'one'\n        }) > 0, false);\n        assert.equal(score({\n          a: 'one',\n          b: 'three'\n        }) > 0, false);\n        assert.equal(score({\n          a: 'three',\n          b: 'three'\n        }) > 0, false);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should acknowledge OR \"conjunction\" option","suites":["Sifter","#getScoreFunction()"],"updatePoint":{"line":87,"column":52,"index":3075},"line":87,"code":"      it('should acknowledge OR \"conjunction\" option', function () {\n        var score,\n          search,\n          sifter = new Sifter([]);\n        score = sifter.getScoreFunction('one two', {\n          fields: ['a', 'b'],\n          conjunction: 'or'\n        });\n        assert.equal(score({\n          a: 'one'\n        }) > 0, true);\n        assert.equal(score({\n          a: 'one',\n          b: 'two'\n        }) > 0, true);\n        assert.equal(score({\n          a: 'one',\n          b: 'one'\n        }) > 0, true);\n        assert.equal(score({\n          a: 'one',\n          b: 'three'\n        }) > 0, true);\n        assert.equal(score({\n          a: 'three',\n          b: 'three'\n        }) > 0, false);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should return a function that returns a number","suites":["Sifter","#getScoreFunction()","with query and options"],"updatePoint":{"line":116,"column":58,"index":3852},"line":116,"code":"        it('should return a function that returns a number', function () {\n          var score,\n            search,\n            sifter = new Sifter([]);\n          score = sifter.getScoreFunction('test', {\n            fields: ['a', 'b']\n          });\n          assert.equal(typeof score({\n            a: 'test'\n          }), 'number');\n          assert.equal(score({\n            a: 'test'\n          }) > 0, true);\n          assert.equal(typeof score({}), 'number');\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should return a function that returns a number","suites":["Sifter","#getScoreFunction()","with pre-prepared search"],"updatePoint":{"line":133,"column":58,"index":4396},"line":133,"code":"        it('should return a function that returns a number', function () {\n          var score,\n            search,\n            sifter = new Sifter([]);\n          search = sifter.prepareSearch('test', {\n            fields: ['a', 'b']\n          });\n          score = sifter.getScoreFunction(search);\n          assert.equal(typeof score({\n            a: 'test'\n          }), 'number');\n          assert.equal(score({\n            a: 'test'\n          }) > 0, true);\n          assert.equal(typeof score({}), 'number');\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should normalize options","suites":["Sifter","#prepareSearch()"],"updatePoint":{"line":152,"column":34,"index":4963},"line":152,"code":"      it('should normalize options', function () {\n        var sifter = new Sifter([{\n          field: 'a'\n        }, {}]);\n        var search = sifter.prepareSearch('a', {\n          fields: {\n            field: 'a'\n          },\n          sort: {\n            field: 'a'\n          },\n          sort_empty: {\n            field: 'a'\n          }\n        });\n        assert.equal(Array.isArray(search.options.fields), true);\n        assert.equal(Array.isArray(search.options.sort), true);\n        assert.equal(Array.isArray(search.options.sort_empty), true);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should contain \"total\" (int)","suites":["Sifter","#prepareSearch()","returned object"],"updatePoint":{"line":176,"column":40,"index":5712},"line":176,"code":"        it('should contain \"total\" (int)', function () {\n          assert.equal(search.total, 0);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should contain \"tokens\" (array)","suites":["Sifter","#prepareSearch()","returned object"],"updatePoint":{"line":179,"column":43,"index":5825},"line":179,"code":"        it('should contain \"tokens\" (array)', function () {\n          assert.equal(Array.isArray(search.tokens), true);\n          assert.equal(search.tokens.length, 2);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should contain \"items\" (array)","suites":["Sifter","#prepareSearch()","returned object"],"updatePoint":{"line":183,"column":42,"index":6005},"line":183,"code":"        it('should contain \"items\" (array)', function () {\n          assert.equal(Array.isArray(search.items), true);\n          assert.equal(search.items.length, 0);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should contain \"options\" (array)","suites":["Sifter","#prepareSearch()","returned object"],"updatePoint":{"line":187,"column":44,"index":6185},"line":187,"code":"        it('should contain \"options\" (array)', function () {\n          assert.equal(search.options !== null, true);\n          assert.equal(typeof search.options, 'object');\n          assert.equal(Array.isArray(search.options), false);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not throw if an element does not contain search field","suites":["Sifter","#search()"],"updatePoint":{"line":195,"column":70,"index":6516},"line":195,"code":"      it('should not throw if an element does not contain search field', function () {\n        assert.doesNotThrow(function () {\n          var sifter = new Sifter([{\n            field: 'a'\n          }, {}]);\n          var result = sifter.search('hello', {\n            fields: ['field']\n          });\n        });\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should allow \"fields\" option to be a string","suites":["Sifter","#search()"],"updatePoint":{"line":205,"column":53,"index":6821},"line":205,"code":"      it('should allow \"fields\" option to be a string', function () {\n        var sifter = new Sifter([{\n          field: 'a'\n        }, {}]);\n        var result = sifter.search('a', {\n          fields: 'field'\n        });\n        assert.equal(result.items[0].id, 0);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should allow to search nested fields","suites":["Sifter","#search()"],"updatePoint":{"line":214,"column":46,"index":7092},"line":214,"code":"      it('should allow to search nested fields', function () {\n        var sifter = new Sifter([{\n          fields: {\n            nested: 'aaa'\n          }\n        }, {\n          fields: {\n            nested: 'add'\n          }\n        }, {\n          fields: {\n            nested: 'abb'\n          }\n        }]);\n        var result = sifter.search('aaa', {\n          fields: 'fields.nested',\n          nesting: true\n        });\n        assert.equal(result.items.length, 1);\n        assert.equal(result.items[0].id, 0);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should allow word boundaries to be respected","suites":["Sifter","#search()"],"updatePoint":{"line":235,"column":54,"index":7627},"line":235,"code":"      it('should allow word boundaries to be respected', function () {\n        var sifter = new Sifter([{\n          name: 'John Smith'\n        }, {\n          name: 'Jane Doe'\n        }]);\n        var result = sifter.search('mith', {\n          fields: 'name'\n        });\n        assert.equal(result.items.length, 1);\n        var result = sifter.search('mith', {\n          fields: 'name',\n          respect_word_boundaries: true\n        });\n        assert.equal(result.items.length, 0);\n        var result = sifter.search('Smi', {\n          fields: 'name',\n          respect_word_boundaries: true\n        });\n        assert.equal(result.items.length, 1);\n        var result = sifter.search('John Sm', {\n          fields: 'name',\n          respect_word_boundaries: true\n        });\n        assert.equal(result.items.length, 1);\n        var result = sifter.search('jÖhn Sm', {\n          fields: 'name',\n          respect_word_boundaries: true\n        });\n        assert.equal(result.items.length, 1);\n        var result = sifter.search('ohn Smith', {\n          fields: 'name',\n          respect_word_boundaries: true,\n          conjunction: 'and'\n        });\n        assert.equal(result.items.length, 0);\n        var result = sifter.search('Øhn Smith', {\n          fields: 'name',\n          respect_word_boundaries: true,\n          conjunction: 'and'\n        });\n        assert.equal(result.items.length, 0);\n      });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should respect \"sort_empty\" option when query absent","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":279,"column":64,"index":9092},"line":279,"code":"        it('should respect \"sort_empty\" option when query absent', function () {\n          var sifter = new Sifter([{\n            field: 'aaa'\n          }, {\n            field: 'add'\n          }, {\n            field: 'abb'\n          }]);\n          var result = sifter.search('', {\n            fields: 'field',\n            sort: {\n              field: 'field',\n              direction: 'asc'\n            },\n            sort_empty: {\n              field: 'field',\n              direction: 'desc'\n            }\n          });\n          assert.equal(result.items[0].id, 1);\n          assert.equal(result.items[1].id, 2);\n          assert.equal(result.items[2].id, 0);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should work with one field (as object)","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":302,"column":50,"index":9753},"line":302,"code":"        it('should work with one field (as object)', function () {\n          var sifter = new Sifter([{\n            field: 'aaa'\n          }, {\n            field: 'add'\n          }, {\n            field: 'abb'\n          }]);\n          var result = sifter.search('', {\n            fields: 'field',\n            sort: {\n              field: 'field'\n            }\n          });\n          assert.equal(result.items[0].id, 0);\n          assert.equal(result.items[1].id, 2);\n          assert.equal(result.items[2].id, 1);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should work with one field (as array)","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":320,"column":49,"index":10278},"line":320,"code":"        it('should work with one field (as array)', function () {\n          var sifter = new Sifter([{\n            field: 'aaa'\n          }, {\n            field: 'add'\n          }, {\n            field: 'abb'\n          }]);\n          var result = sifter.search('', {\n            fields: 'field',\n            sort: [{\n              field: 'field'\n            }]\n          });\n          assert.equal(result.items[0].id, 0);\n          assert.equal(result.items[1].id, 2);\n          assert.equal(result.items[2].id, 1);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should work with multiple fields and respect priority","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":338,"column":65,"index":10821},"line":338,"code":"        it('should work with multiple fields and respect priority', function () {\n          var sifter = new Sifter([{\n            a: 'bbb',\n            b: 'bbb'\n          }, {\n            a: 'bbb',\n            b: 'ccc'\n          }, {\n            a: 'bbb',\n            b: 'aaa'\n          }, {\n            a: 'aaa'\n          }]);\n          var result = sifter.search('', {\n            fields: 'field',\n            sort: [{\n              field: 'a'\n            }, {\n              field: 'b'\n            }]\n          });\n          assert.equal(result.items[0].id, 3);\n          assert.equal(result.items[1].id, 2);\n          assert.equal(result.items[2].id, 0);\n          assert.equal(result.items[3].id, 1);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should respect numeric fields","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":364,"column":41,"index":11515},"line":364,"code":"        it('should respect numeric fields', function () {\n          var sifter = new Sifter([{\n            field: 1.0\n          }, {\n            field: 12.9\n          }, {\n            field: 9.1\n          }, {\n            field: -9.0\n          }]);\n          var result = sifter.search('', {\n            fields: 'field',\n            sort: [{\n              field: 'field'\n            }]\n          });\n          assert.equal(result.items[0].id, 3);\n          assert.equal(result.items[1].id, 0);\n          assert.equal(result.items[2].id, 2);\n          assert.equal(result.items[3].id, 1);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should respect sort direction","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":385,"column":41,"index":12115},"line":385,"code":"        it('should respect sort direction', function () {\n          var sifter = new Sifter([{\n            a: 'bbb',\n            b: 'rrr'\n          }, {\n            a: 'bbb',\n            b: 'aaa'\n          }, {\n            a: 'aaa',\n            b: 'rrr'\n          }, {\n            a: 'aaa',\n            b: 'aaa'\n          }]);\n          var result = sifter.search('', {\n            fields: 'field',\n            sort: [{\n              field: 'b',\n              direction: 'desc'\n            }, {\n              field: 'a',\n              direction: 'asc'\n            }]\n          });\n          assert.equal(result.items[0].id, 2);\n          assert.equal(result.items[1].id, 0);\n          assert.equal(result.items[2].id, 3);\n          assert.equal(result.items[3].id, 1);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should add implicit \"$score\" field when query present","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":414,"column":65,"index":12920},"line":414,"code":"        it('should add implicit \"$score\" field when query present', function () {\n          var sifter = new Sifter([{\n            field: 'yoo'\n          }, {\n            field: 'book'\n          }]);\n          var result = sifter.search('oo', {\n            fields: 'field',\n            sort: [{\n              field: 'field'\n            }]\n          });\n          assert.equal(result.items[0].id, 0);\n          assert.equal(result.items[1].id, 1);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not add implicit \"$score\" field if explicitly given","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":429,"column":70,"index":13384},"line":429,"code":"        it('should not add implicit \"$score\" field if explicitly given', function () {\n          var sifter = new Sifter([{\n            field: 'boooo'\n          }, {\n            field: 'yoo'\n          }, {\n            field: 'aaa'\n          }]);\n          var result = sifter.search('oo', {\n            filter: false,\n            fields: 'field',\n            sort: [{\n              field: 'field'\n            }, {\n              field: '$score'\n            }]\n          });\n          assert.equal(result.items[0].id, 2);\n          assert.equal(result.items[1].id, 0);\n          assert.equal(result.items[2].id, 1);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be locale-aware","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":450,"column":34,"index":13974},"line":450,"code":"        it('should be locale-aware', function () {\n          var sifter = new Sifter([{\n            field: 'Zoom Test'\n          }, {\n            field: 'Água Test'\n          }]);\n          var result = sifter.search('', {\n            fields: 'field',\n            sort: [{\n              field: 'field',\n              direction: 'asc'\n            }]\n          });\n          assert.equal(result.items[0].id, 1);\n          assert.equal(result.items[1].id, 0);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should work with nested fields","suites":["Sifter","#search()","sorting"],"updatePoint":{"line":466,"column":42,"index":14451},"line":466,"code":"        it('should work with nested fields', function () {\n          var sifter = new Sifter([{\n            fields: {\n              nested: 'aaa'\n            }\n          }, {\n            fields: {\n              nested: 'add'\n            }\n          }, {\n            fields: {\n              nested: 'abb'\n            }\n          }]);\n          var result = sifter.search('', {\n            fields: [],\n            sort: {\n              field: 'fields.nested'\n            },\n            nesting: true\n          });\n          assert.equal(result.items[0].id, 0);\n          assert.equal(result.items[1].id, 2);\n          assert.equal(result.items[2].id, 1);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not vary when using an array vs a hash as a data source","suites":["Sifter","#search()","returned results"],"updatePoint":{"line":529,"column":74,"index":16330},"line":529,"code":"        it('should not vary when using an array vs a hash as a data source', function () {\n          var sifter_hash = new Sifter({\n            'a': {\n              title: 'Matterhorn',\n              location: 'Switzerland',\n              continent: 'Europe'\n            },\n            'b': {\n              title: 'Eiger',\n              location: 'Switzerland',\n              continent: 'Europe'\n            },\n            'c': {\n              title: 'Everest',\n              location: 'Nepal',\n              continent: 'Asia'\n            },\n            'd': {\n              title: 'Gannett',\n              location: 'Wyoming',\n              continent: 'North America'\n            },\n            'e': {\n              title: 'Denali',\n              location: 'Alaska',\n              continent: 'North America'\n            }\n          });\n          var result_hash = sifter.search('switzerland europe', options);\n          assert.deepEqual(result_hash, result);\n        });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be an array","suites":["Sifter","#search()","returned results","\"items\" array"],"updatePoint":{"line":561,"column":32,"index":17308},"line":561,"code":"          it('should be an array', function () {\n            assert.equal(Array.isArray(result.items), true);\n            assert.equal(Array.isArray(result_empty.items), true);\n            assert.equal(Array.isArray(result_all.items), true);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should include entire set if no query provided","suites":["Sifter","#search()","returned results","\"items\" array"],"updatePoint":{"line":566,"column":60,"index":17592},"line":566,"code":"          it('should include entire set if no query provided', function () {\n            assert.equal(result_all.items.length, 5);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not have a length that exceeds \"limit\" option","suites":["Sifter","#search()","returned results","\"items\" array"],"updatePoint":{"line":569,"column":66,"index":17743},"line":569,"code":"          it('should not have a length that exceeds \"limit\" option', function () {\n            assert.equal(result.items.length > options.limit, false);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not contain any items with a score not equal to 1 (without query)","suites":["Sifter","#search()","returned results","\"items\" array"],"updatePoint":{"line":572,"column":86,"index":17930},"line":572,"code":"          it('should not contain any items with a score not equal to 1 (without query)', function () {\n            for (var i = 0, n = result_all.items.length; i < n; i++) {\n              assert.equal(result_all.items[i].score, 1);\n            }\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not contain any items with a score of zero (with query)","suites":["Sifter","#search()","returned results","\"items\" array"],"updatePoint":{"line":577,"column":76,"index":18180},"line":577,"code":"          it('should not contain any items with a score of zero (with query)', function () {\n            for (var i = 0, n = result.items.length; i < n; i++) {\n              assert.notEqual(result.items[i].score, 0);\n            }\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be empty when no results match","suites":["Sifter","#search()","returned results","\"items\" array"],"updatePoint":{"line":582,"column":51,"index":18400},"line":582,"code":"          it('should be empty when no results match', function () {\n            assert.equal(result_empty.items.length, 0);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be objects","suites":["Sifter","#search()","returned results","\"items\" array","elements"],"updatePoint":{"line":586,"column":33,"index":18565},"line":586,"code":"            it('should be objects', function () {\n              assert.equal(typeof result.items[0], 'object');\n              assert.equal(Array.isArray(result.items[0]), false);\n            });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["Sifter","#search()","returned results","\"items\" array","elements","\"score\" property"],"updatePoint":{"line":591,"column":30,"index":18812},"line":591,"code":"              it('should exist', function () {\n                assert.notEqual(typeof result.items[0].score, 'undefined');\n                assert.notEqual(typeof result_all.items[0].score, 'undefined');\n              });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be a number","suites":["Sifter","#search()","returned results","\"items\" array","elements","\"score\" property"],"updatePoint":{"line":595,"column":36,"index":19039},"line":595,"code":"              it('should be a number', function () {\n                assert.equal(typeof result.items[0].score, 'number');\n                assert.equal(typeof result_all.items[0].score, 'number');\n              });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["Sifter","#search()","returned results","\"items\" array","elements","\"id\" property"],"updatePoint":{"line":601,"column":30,"index":19316},"line":601,"code":"              it('should exist', function () {\n                assert.notEqual(typeof result.items[0].id, 'undefined');\n                assert.notEqual(typeof result_all.items[0].id, 'undefined');\n              });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not be a reference to original options","suites":["Sifter","#search()","returned results","\"options\""],"updatePoint":{"line":609,"column":59,"index":19646},"line":609,"code":"          it('should not be a reference to original options', function () {\n            assert.equal(result.options === options, false);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should match original search options","suites":["Sifter","#search()","returned results","\"options\""],"updatePoint":{"line":612,"column":50,"index":19788},"line":612,"code":"          it('should match original search options', function () {\n            assert.deepEqual(result.options, options);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be an array","suites":["Sifter","#search()","returned results","\"tokens\""],"updatePoint":{"line":617,"column":32,"index":19961},"line":617,"code":"          it('should be an array', function () {\n            assert.equal(Array.isArray(result.tokens), true);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be a object","suites":["Sifter","#search()","returned results","\"tokens\"","elements"],"updatePoint":{"line":621,"column":34,"index":20133},"line":621,"code":"            it('should be a object', function () {\n              assert.equal(typeof result.tokens[0], 'object');\n              assert.equal(Array.isArray(result.tokens[0]), false);\n            });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["Sifter","#search()","returned results","\"tokens\"","elements","\"string\" property"],"updatePoint":{"line":626,"column":30,"index":20383},"line":626,"code":"              it('should exist', function () {\n                assert.notEqual(typeof result.tokens[0].string, 'undefined');\n              });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be a string","suites":["Sifter","#search()","returned results","\"tokens\"","elements","\"string\" property"],"updatePoint":{"line":629,"column":36,"index":20532},"line":629,"code":"              it('should be a string', function () {\n                assert.equal(typeof result.tokens[0].string, 'string');\n              });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be valid","suites":["Sifter","#search()","returned results","\"tokens\"","elements","\"string\" property"],"updatePoint":{"line":632,"column":33,"index":20672},"line":632,"code":"              it('should be valid', function () {\n                assert.equal(result.tokens[0].string, 'switzerland');\n                assert.equal(result.tokens[1].string, 'europe');\n              });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["Sifter","#search()","returned results","\"tokens\"","elements","\"regex\" property"],"updatePoint":{"line":638,"column":30,"index":20943},"line":638,"code":"              it('should exist', function () {\n                assert.notEqual(typeof result.tokens[0].regex, 'undefined');\n              });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be a RegExp object","suites":["Sifter","#search()","returned results","\"tokens\"","elements","\"regex\" property"],"updatePoint":{"line":641,"column":43,"index":21098},"line":641,"code":"              it('should be a RegExp object', function () {\n                assert.equal(result.tokens[0].regex instanceof RegExp, true);\n              });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should match original query","suites":["Sifter","#search()","returned results","\"query\""],"updatePoint":{"line":648,"column":41,"index":21336},"line":648,"code":"          it('should match original query', function () {\n            assert.equal(result.query, 'switzerland europe');\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be an integer","suites":["Sifter","#search()","returned results","\"total\""],"updatePoint":{"line":653,"column":34,"index":21517},"line":653,"code":"          it('should be an integer', function () {\n            assert.equal(typeof result.total, 'number');\n            assert.equal(Math.floor(result.total), Math.ceil(result.total));\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should be valid","suites":["Sifter","#search()","returned results","\"total\""],"updatePoint":{"line":657,"column":29,"index":21711},"line":657,"code":"          it('should be valid', function () {\n            assert.equal(result.total, 2);\n            assert.equal(result_empty.total, 0);\n          });","file":"sifter.js","skipped":false,"dir":"test"},{"name":"should not trigger exploit","suites":["XSS","Raw HTML in original input value"],"updatePoint":{"line":17,"column":36,"index":537},"line":17,"code":"      it('should not trigger exploit', function (done) {\n        setup_xss_test('<input type=\"text\" value=\"&lt;img src=&quot;x&quot; onerror=&quot;xss()&quot;&gt;\">', {}, done);\n      });","file":"xss.js","skipped":false,"dir":"test"},{"name":"should not trigger exploit","suites":["XSS","Raw HTML in optgroup label"],"updatePoint":{"line":22,"column":36,"index":790},"line":22,"code":"      it('should not trigger exploit', function (done) {\n        var test = setup_xss_test('<select><optgroup label=\"&lt;img src=&quot;x&quot; onerror=&quot;xss()&quot;&gt;\"><option>Test</option></optgroup></select>', {}, done);\n        test.selectize.refreshOptions();\n        test.selectize.open();\n      });","file":"xss.js","skipped":false,"dir":"test"},{"name":"should not trigger exploit","suites":["XSS","Raw HTML in option label should not trigger exploit"],"updatePoint":{"line":29,"column":36,"index":1191},"line":29,"code":"      it('should not trigger exploit', function (done) {\n        setup_xss_test('<input type=\"text\" value=\"\">', {\n          options: [{\n            value: '1',\n            label: '<img src=\"x\" onerror=\"xss()\">'\n          }],\n          items: ['1'],\n          labelField: 'label',\n          valueField: 'value'\n        }, done);\n      });","file":"xss.js","skipped":false,"dir":"test"},{"name":"should not trigger exploit","suites":["XSS","Raw HTML in option value should not trigger exploit"],"updatePoint":{"line":42,"column":36,"index":1619},"line":42,"code":"      it('should not trigger exploit', function (done) {\n        setup_xss_test('<input type=\"text\" value=\"\">', {\n          options: [{\n            value: '<img src=\"x\" onerror=\"xss()\">',\n            label: '1'\n          }],\n          items: ['<img src=\"x\" onerror=\"xss()\">'],\n          labelField: 'label',\n          valueField: 'value'\n        }, done);\n      });","file":"xss.js","skipped":false,"dir":"test"}]}