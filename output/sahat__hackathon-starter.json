{"repo":"sahat/hackathon-starter","url":"https://github.com/sahat/hackathon-starter","branch":"master","configs":[{"package":"hackathon-starter","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should return 200 OK","suites":["GET /"],"updatePoint":{"line":15,"column":28,"index":369},"line":15,"code":"    it('should return 200 OK', done => {\n      request(app).get('/').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /login"],"updatePoint":{"line":20,"column":28,"index":504},"line":20,"code":"    it('should return 200 OK', done => {\n      request(app).get('/login').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /signup"],"updatePoint":{"line":25,"column":28,"index":645},"line":25,"code":"    it('should return 200 OK', done => {\n      request(app).get('/signup').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /forgot"],"updatePoint":{"line":30,"column":28,"index":787},"line":30,"code":"    it('should return 200 OK', done => {\n      request(app).get('/forgot').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /api"],"updatePoint":{"line":35,"column":28,"index":926},"line":35,"code":"    it('should return 200 OK', done => {\n      request(app).get('/api').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /contact"],"updatePoint":{"line":40,"column":28,"index":1066},"line":40,"code":"    it('should return 200 OK', done => {\n      request(app).get('/contact').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /api/lastfm"],"updatePoint":{"line":45,"column":28,"index":1213},"line":45,"code":"    it('should return 200 OK', done => {\n      request(app).get('/api/lastfm').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /api/twilio"],"updatePoint":{"line":50,"column":28,"index":1363},"line":50,"code":"    it('should return 200 OK', done => {\n      request(app).get('/api/twilio').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /api/stripe"],"updatePoint":{"line":55,"column":28,"index":1513},"line":55,"code":"    it('should return 200 OK', done => {\n      request(app).get('/api/stripe').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /api/scraping"],"updatePoint":{"line":60,"column":28,"index":1665},"line":60,"code":"    it('should return 200 OK', done => {\n      request(app).get('/api/scraping').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /api/lob"],"updatePoint":{"line":65,"column":28,"index":1814},"line":65,"code":"    it('should return 200 OK', done => {\n      request(app).get('/api/lob').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 200 OK","suites":["GET /api/upload"],"updatePoint":{"line":70,"column":28,"index":1961},"line":70,"code":"    it('should return 200 OK', done => {\n      request(app).get('/api/upload').expect(200, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should return 404","suites":["GET /random-url"],"updatePoint":{"line":75,"column":25,"index":2108},"line":75,"code":"    it('should return 404', done => {\n      request(app).get('/reset').expect(404, done);\n    });","file":"app.js","skipped":false,"dir":"test"},{"name":"should create a new user","suites":["User Model"],"updatePoint":{"line":10,"column":30,"index":175},"line":10,"code":"  it('should create a new user', done => {\n    const UserMock = sinon.mock(new User({\n      email: 'test@gmail.com',\n      password: 'root'\n    }));\n    const user = UserMock.object;\n    UserMock.expects('save').yields(null);\n    user.save(err => {\n      UserMock.verify();\n      UserMock.restore();\n      expect(err).to.be.null;\n      done();\n    });\n  });","file":"models.js","skipped":false,"dir":"test"},{"name":"should return error if user is not created","suites":["User Model"],"updatePoint":{"line":24,"column":48,"index":551},"line":24,"code":"  it('should return error if user is not created', done => {\n    const UserMock = sinon.mock(new User({\n      email: 'test@gmail.com',\n      password: 'root'\n    }));\n    const user = UserMock.object;\n    const expectedError = {\n      name: 'ValidationError'\n    };\n    UserMock.expects('save').yields(expectedError);\n    user.save((err, result) => {\n      UserMock.verify();\n      UserMock.restore();\n      expect(err.name).to.equal('ValidationError');\n      expect(result).to.be.undefined;\n      done();\n    });\n  });","file":"models.js","skipped":false,"dir":"test"},{"name":"should not create a user with the unique email","suites":["User Model"],"updatePoint":{"line":42,"column":52,"index":1075},"line":42,"code":"  it('should not create a user with the unique email', done => {\n    const UserMock = sinon.mock(User({\n      email: 'test@gmail.com',\n      password: 'root'\n    }));\n    const user = UserMock.object;\n    const expectedError = {\n      name: 'MongoError',\n      code: 11000\n    };\n    UserMock.expects('save').yields(expectedError);\n    user.save((err, result) => {\n      UserMock.verify();\n      UserMock.restore();\n      expect(err.name).to.equal('MongoError');\n      expect(err.code).to.equal(11000);\n      expect(result).to.be.undefined;\n      done();\n    });\n  });","file":"models.js","skipped":false,"dir":"test"},{"name":"should find user by email","suites":["User Model"],"updatePoint":{"line":62,"column":31,"index":1623},"line":62,"code":"  it('should find user by email', done => {\n    const userMock = sinon.mock(User);\n    const expectedUser = {\n      _id: '5700a128bd97c1341d8fb365',\n      email: 'test@gmail.com'\n    };\n    userMock.expects('findOne').withArgs({\n      email: 'test@gmail.com'\n    }).yields(null, expectedUser);\n    User.findOne({\n      email: 'test@gmail.com'\n    }, (err, result) => {\n      userMock.verify();\n      userMock.restore();\n      expect(result.email).to.equal('test@gmail.com');\n      done();\n    });\n  });","file":"models.js","skipped":false,"dir":"test"},{"name":"should remove user by email","suites":["User Model"],"updatePoint":{"line":80,"column":33,"index":2128},"line":80,"code":"  it('should remove user by email', done => {\n    const userMock = sinon.mock(User);\n    const expectedResult = {\n      nRemoved: 1\n    };\n    userMock.expects('remove').withArgs({\n      email: 'test@gmail.com'\n    }).yields(null, expectedResult);\n    User.remove({\n      email: 'test@gmail.com'\n    }, (err, result) => {\n      userMock.verify();\n      userMock.restore();\n      expect(err).to.be.null;\n      expect(result.nRemoved).to.equal(1);\n      done();\n    });\n  });","file":"models.js","skipped":false,"dir":"test"},{"name":"should check password","suites":["User Model"],"updatePoint":{"line":98,"column":27,"index":2596},"line":98,"code":"  it('should check password', done => {\n    const UserMock = sinon.mock(new User({\n      email: 'test@gmail.com',\n      password: '$2b$10$LhjJj5s1pLY/I4eCRaHaB.Fli8NBT8z1L8YF4/pmVU.5pERg4Z1AC'\n    }));\n    const user = UserMock.object;\n    user.comparePassword('root', (err, isMatched) => {\n      expect(err).to.equal(undefined);\n      expect(isMatched).to.equal(true);\n      done();\n    });\n  });","file":"models.js","skipped":false,"dir":"test"},{"name":"should generate gravatar without email and size","suites":["User Model"],"updatePoint":{"line":110,"column":53,"index":3020},"line":110,"code":"  it('should generate gravatar without email and size', () => {\n    const UserMock = sinon.mock(new User({}));\n    const user = UserMock.object;\n    const gravatar = user.gravatar();\n    expect(gravatar.includes('gravatar.com')).to.equal(true);\n  });","file":"models.js","skipped":false,"dir":"test"},{"name":"should generate gravatar with size","suites":["User Model"],"updatePoint":{"line":116,"column":40,"index":3258},"line":116,"code":"  it('should generate gravatar with size', () => {\n    const UserMock = sinon.mock(new User({}));\n    const user = UserMock.object;\n    const size = 300;\n    const gravatar = user.gravatar(size);\n    expect(gravatar.includes(`s=${size}`)).to.equal(true);\n  });","file":"models.js","skipped":false,"dir":"test"},{"name":"should generate gravatar with email","suites":["User Model"],"updatePoint":{"line":123,"column":41,"index":3520},"line":123,"code":"  it('should generate gravatar with email', () => {\n    const UserMock = sinon.mock(new User({\n      email: 'test@gmail.com'\n    }));\n    const user = UserMock.object;\n    const md5 = '1aedb8d9dc4751e229a335e371db8058';\n    const gravatar = user.gravatar();\n    expect(gravatar.includes(md5)).to.equal(true);\n  });","file":"models.js","skipped":false,"dir":"test"}]}