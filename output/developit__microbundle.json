{"repo":"developit/microbundle","url":"https://github.com/developit/microbundle","branch":"master","configs":[{"package":"microbundle","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"build %s with microbundle","suites":["fixtures"],"line":24,"code":"  it.each(dirs)('build %s with microbundle', async fixtureDir => {\n    let fixturePath = resolve(FIXTURES_DIR, fixtureDir);\n\n    if (fixtureDir.endsWith('-with-cwd')) {\n      fixturePath = resolve(fixturePath, fixtureDir.replace('-with-cwd', ''));\n    }\n\n    await sleep(1);\n    const output = await buildDirectory(fixtureDir);\n    await sleep(1);\n    const printedDir = printTree([dirTree(fixturePath)]);\n    expect([`Used script: ${await getBuildScript(fixturePath, DEFAULT_SCRIPT)}`, 'Directory tree:', printedDir, strip(output)].join('\\n\\n')).toMatchSnapshot();\n    const dist = resolve(`${fixturePath}/dist`);\n    const files = fs.readdirSync(resolve(dist));\n    expect(files.length).toMatchSnapshot(); // we don't really care about the content of a sourcemap\n\n    files.filter(file => !/\\.map$/.test(file) && !fs.lstatSync(resolve(dist, file)).isDirectory()).sort(file => /modern/.test(file) ? 1 : 0).forEach(file => {\n      expect(fs.readFileSync(resolve(dist, file)).toString('utf8')).toMatchSnapshot();\n    }); // TypeScript declaration files\n\n    const types = resolve(`${fixturePath}/types`);\n\n    if (fs.existsSync(types)) {\n      const declarations = fs.readdirSync(types);\n      expect(declarations.length).toMatchSnapshot();\n      declarations.forEach(file => {\n        expect(fs.readFileSync(resolve(types, file)).toString('utf8')).toMatchSnapshot();\n      });\n    }\n  }, TEST_TIMEOUT);","file":"index.test.js","skipped":false,"dir":"test"},{"name":"should keep shebang","suites":["fixtures"],"updatePoint":{"line":54,"column":25},"line":54,"code":"  it('should keep shebang', () => {\n    expect(fs.readFileSync(resolve(FIXTURES_DIR, 'shebang/dist/shebang.js'), 'utf8').startsWith('#!')).toEqual(true);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":"should keep named and default export","suites":["fixtures"],"updatePoint":{"line":57,"column":42},"line":57,"code":"  it('should keep named and default export', () => {\n    const mod = require(resolve(FIXTURES_DIR, 'default-named/dist/default-named.js'));\n\n    expect(Object.keys(mod)).toEqual(['default', 'foo']);\n  });","file":"index.test.js","skipped":false,"dir":"test"}]}