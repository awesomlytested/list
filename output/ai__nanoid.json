{"repo":"ai/nanoid","url":"https://github.com/ai/nanoid","branch":"main","configs":[{"package":"nanoid","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":" / nanoid / generates URL-friendly IDs","suites":[],"updatePoint":{"line":33,"column":53,"index":715},"line":33,"code":"  test(`${type} / nanoid / generates URL-friendly IDs`, async () => {\n    await Promise.all(times(100, async () => {\n      let id = await nanoid();\n      is(id.length, 21);\n      is(typeof id, 'string');\n\n      for (let char of id) {\n        match(urlAlphabet, new RegExp(char, 'g'));\n      }\n    }));\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / changes ID length","suites":[],"updatePoint":{"line":44,"column":44,"index":1014},"line":44,"code":"  test(`${type} / nanoid / changes ID length`, async () => {\n    let id = await nanoid(10);\n    is(id.length, 10);\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / has no collisions","suites":[],"updatePoint":{"line":48,"column":44,"index":1135},"line":48,"code":"  test(`${type} / nanoid / has no collisions`, async () => {\n    let ids = await Promise.all(times(50 * 1000, () => nanoid()));\n    ids.reduce((used, id) => {\n      is(used[id], undefined);\n      used[id] = true;\n      return used;\n    }, []);\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / has flat distribution","suites":[],"updatePoint":{"line":56,"column":48,"index":1389},"line":56,"code":"  test(`${type} / nanoid / has flat distribution`, async () => {\n    let COUNT = 100 * 1000;\n    let LENGTH = (await nanoid()).length;\n    let chars = {};\n    await Promise.all(times(COUNT, async () => {\n      let id = await nanoid();\n\n      for (let char of id) {\n        if (!chars[char]) chars[char] = 0;\n        chars[char] += 1;\n      }\n    }));\n    is(Object.keys(chars).length, urlAlphabet.length);\n    let max = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n\n    for (let k in chars) {\n      let distribution = chars[k] * urlAlphabet.length / (COUNT * LENGTH);\n      if (distribution > max) max = distribution;\n      if (distribution < min) min = distribution;\n    }\n\n    ok(max - min <= 0.05);\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":" / random / generates small random buffers","suites":[],"updatePoint":{"line":80,"column":57,"index":2103},"line":80,"code":"  test(`${type} / random / generates small random buffers`, async () => {\n    is((await random(10)).length, 10);\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":" / random / generates random buffers","suites":[],"updatePoint":{"line":83,"column":51,"index":2216},"line":83,"code":"  test(`${type} / random / generates random buffers`, async () => {\n    let numbers = {};\n    let bytes = await random(10000);\n    is(bytes.length, 10000);\n\n    for (let byte of bytes) {\n      if (!numbers[byte]) numbers[byte] = 0;\n      numbers[byte] += 1;\n      is(typeof byte, 'number');\n      ok(byte <= 255);\n      ok(byte >= 0);\n    }\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":" / customAlphabet / has options","suites":[],"updatePoint":{"line":96,"column":46,"index":2558},"line":96,"code":"  test(`${type} / customAlphabet / has options`, async () => {\n    let nanoidA = customAlphabet('a', 5);\n    let id = await nanoidA();\n    is(id, 'aaaaa');\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":" / customAlphabet / has flat distribution","suites":[],"updatePoint":{"line":101,"column":56,"index":2730},"line":101,"code":"  test(`${type} / customAlphabet / has flat distribution`, async () => {\n    let COUNT = 50 * 1000;\n    let LENGTH = 30;\n    let ALPHABET = 'abcdefghijklmnopqrstuvwxy';\n    let nanoid2 = customAlphabet(ALPHABET, LENGTH);\n    let chars = {};\n    await Promise.all(times(100, async () => {\n      let id = await nanoid2();\n      is(id.length, LENGTH);\n\n      for (let char of id) {\n        if (!chars[char]) chars[char] = 0;\n        chars[char] += 1;\n      }\n    }));\n    is(Object.keys(chars).length, ALPHABET.length);\n    let max = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n\n    for (let k in chars) {\n      let distribution = chars[k] * ALPHABET.length / (COUNT * LENGTH);\n      if (distribution > max) max = distribution;\n      if (distribution < min) min = distribution;\n    }\n\n    ok(max - min <= 0.05);\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":" / customAlphabet / changes size","suites":[],"updatePoint":{"line":128,"column":47,"index":3534},"line":128,"code":"  test(`${type} / customAlphabet / changes size`, async () => {\n    let nanoidA = customAlphabet('a');\n    let id = await nanoidA(10);\n    is(id, 'aaaaaaaaaa');\n  });","file":"async.test.js","skipped":false,"dir":"test"},{"name":"prints unique ID","suites":[],"updatePoint":{"line":9,"column":22,"index":342},"line":9,"code":"test('prints unique ID', async () => {\n  let {\n    stdout,\n    stderr\n  } = await exec('node ' + BIN);\n  is(stderr, '');\n  match(stdout, /^[\\w-]{21}\\n$/);\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"uses size","suites":[],"updatePoint":{"line":17,"column":15,"index":494},"line":17,"code":"test('uses size', async () => {\n  let {\n    stdout,\n    stderr\n  } = await exec('node ' + BIN + ' --size 10');\n  is(stderr, '');\n  match(stdout, /^[\\w-]{10}\\n$/);\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"uses alphabet","suites":[],"updatePoint":{"line":25,"column":19,"index":665},"line":25,"code":"test('uses alphabet', async () => {\n  let {\n    stdout,\n    stderr\n  } = await exec('node ' + BIN + ' --alphabet abc --size 15');\n  is(stderr, '');\n  match(stdout, /^[abc]{15}\\n$/);\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"shows an error on unknown argument","suites":[],"updatePoint":{"line":33,"column":40,"index":872},"line":33,"code":"test('shows an error on unknown argument', async () => {\n  try {\n    await exec('node ' + BIN + ' -test');\n  } catch (e) {\n    match(e, /Unknown argument -test/);\n  }\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"shows an error if size is not a number","suites":[],"updatePoint":{"line":40,"column":44,"index":1047},"line":40,"code":"test('shows an error if size is not a number', async () => {\n  try {\n    await exec('node ' + BIN + ' -s abc');\n  } catch (e) {\n    match(e, /Size must be positive integer/);\n  }\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"requires error if size is a negative number","suites":[],"updatePoint":{"line":47,"column":49,"index":1235},"line":47,"code":"test('requires error if size is a negative number', async () => {\n  try {\n    await exec('node ' + BIN + ' --size \"-1\"');\n  } catch (e) {\n    match(e, /Size must be positive integer/);\n  }\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"displays help","suites":[],"updatePoint":{"line":54,"column":19,"index":1398},"line":54,"code":"test('displays help', async () => {\n  let {\n    stdout,\n    stderr\n  } = await exec('node ' + BIN + ' --help');\n  is(stderr, '');\n  match(stdout, /Usage/);\n  match(stdout, /\\$ nanoid \\[options]/);\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / generates URL-friendly IDs","suites":[],"updatePoint":{"line":29,"column":53,"index":645},"line":29,"code":"  test(`${type} / nanoid / generates URL-friendly IDs`, () => {\n    for (let i = 0; i < 100; i++) {\n      let id = nanoid();\n      is(id.length, 21);\n      is(typeof id, 'string');\n\n      for (let char of id) {\n        match(urlAlphabet, new RegExp(char, 'g'));\n      }\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / changes ID length","suites":[],"updatePoint":{"line":40,"column":44,"index":918},"line":40,"code":"  test(`${type} / nanoid / changes ID length`, () => {\n    is(nanoid(10).length, 10);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / accepts string","suites":[],"updatePoint":{"line":43,"column":41,"index":1007},"line":43,"code":"  test(`${type} / nanoid / accepts string`, () => {\n    is(nanoid('10').length, 10);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / has no collisions","suites":[],"updatePoint":{"line":46,"column":44,"index":1101},"line":46,"code":"  test(`${type} / nanoid / has no collisions`, () => {\n    let used = {};\n\n    for (let i = 0; i < 50 * 1000; i++) {\n      let id = nanoid();\n      is(used[id], undefined);\n      used[id] = true;\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / has flat distribution","suites":[],"updatePoint":{"line":55,"column":48,"index":1313},"line":55,"code":"  test(`${type} / nanoid / has flat distribution`, () => {\n    let COUNT = 100 * 1000;\n    let LENGTH = nanoid().length;\n    let chars = {};\n\n    for (let i = 0; i < COUNT; i++) {\n      let id = nanoid();\n\n      for (let char of id) {\n        if (!chars[char]) chars[char] = 0;\n        chars[char] += 1;\n      }\n    }\n\n    is(Object.keys(chars).length, urlAlphabet.length);\n    let max = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n\n    for (let k in chars) {\n      let distribution = chars[k] * urlAlphabet.length / (COUNT * LENGTH);\n      if (distribution > max) max = distribution;\n      if (distribution < min) min = distribution;\n    }\n\n    ok(max - min <= 0.05);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / customAlphabet / has options","suites":[],"updatePoint":{"line":81,"column":46,"index":1984},"line":81,"code":"  test(`${type} / customAlphabet / has options`, () => {\n    let nanoidA = customAlphabet('a', 5);\n    is(nanoidA(), 'aaaaa');\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / customAlphabet / has flat distribution","suites":[],"updatePoint":{"line":85,"column":56,"index":2127},"line":85,"code":"  test(`${type} / customAlphabet / has flat distribution`, () => {\n    let COUNT = 50 * 1000;\n    let LENGTH = 30;\n    let ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n    let nanoid2 = customAlphabet(ALPHABET, LENGTH);\n    let chars = {};\n\n    for (let i = 0; i < COUNT; i++) {\n      let id = nanoid2();\n\n      for (let char of id) {\n        if (!chars[char]) chars[char] = 0;\n        chars[char] += 1;\n      }\n    }\n\n    is(Object.keys(chars).length, ALPHABET.length);\n    let max = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n\n    for (let k in chars) {\n      let distribution = chars[k] * ALPHABET.length / (COUNT * LENGTH);\n      if (distribution > max) max = distribution;\n      if (distribution < min) min = distribution;\n    }\n\n    ok(max - min <= 0.05);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / customAlphabet / changes size","suites":[],"updatePoint":{"line":113,"column":47,"index":2881},"line":113,"code":"  test(`${type} / customAlphabet / changes size`, () => {\n    let nanoidA = customAlphabet('a');\n    is(nanoidA(10), 'aaaaaaaaaa');\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / customRandom / supports generator","suites":[],"updatePoint":{"line":117,"column":51,"index":3023},"line":117,"code":"  test(`${type} / customRandom / supports generator`, () => {\n    let sequence = [2, 255, 3, 7, 7, 7, 7, 7, 0, 1];\n\n    function fakeRandom(size) {\n      let bytes = [];\n\n      for (let i = 0; i < size; i += sequence.length) {\n        bytes = bytes.concat(sequence.slice(0, size - i));\n      }\n\n      return bytes;\n    }\n\n    let nanoid4 = customRandom('abcde', 4, fakeRandom);\n    let nanoid18 = customRandom('abcde', 18, fakeRandom);\n    is(nanoid4(), 'adca');\n    is(nanoid18(), 'cbadcbadcbadcbadcc');\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / urlAlphabet / is string","suites":[],"updatePoint":{"line":135,"column":41,"index":3524},"line":135,"code":"  test(`${type} / urlAlphabet / is string`, () => {\n    is(typeof urlAlphabet, 'string');\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / urlAlphabet / has no duplicates","suites":[],"updatePoint":{"line":138,"column":49,"index":3628},"line":138,"code":"  test(`${type} / urlAlphabet / has no duplicates`, () => {\n    for (let i = 0; i < urlAlphabet.length; i++) {\n      equal(urlAlphabet.lastIndexOf(urlAlphabet[i]), i);\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / random / generates small random buffers","suites":[],"updatePoint":{"line":143,"column":57,"index":3816},"line":143,"code":"  test(`${type} / random / generates small random buffers`, () => {\n    for (let i = 0; i < urlAlphabet.length; i++) {\n      is(random(10).length, 10);\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / random / generates random buffers","suites":[],"updatePoint":{"line":148,"column":51,"index":3974},"line":148,"code":"  test(`${type} / random / generates random buffers`, () => {\n    let numbers = {};\n    let bytes = random(10000);\n    is(bytes.length, 10000);\n\n    for (let byte of bytes) {\n      if (!numbers[byte]) numbers[byte] = 0;\n      numbers[byte] += 1;\n      is(typeof byte, 'number');\n      ok(byte <= 255);\n      ok(byte >= 0);\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / proxy number / prevent collision","suites":[],"updatePoint":{"line":163,"column":52,"index":4336},"line":163,"code":"    test(`${type} / proxy number / prevent collision`, () => {\n      let makeProxyNumberToReproducePreviousID = () => {\n        let step = 0;\n        return {\n          valueOf() {\n            // \"if (!pool || pool.length < bytes) {\"\n            if (step === 0) {\n              step++;\n              return 0;\n            } // \"} else if (poolOffset + bytes > pool.length) {\"\n\n\n            if (step === 1) {\n              step++;\n              return -Infinity;\n            } // \"poolOffset += bytes\"\n\n\n            if (step === 2) {\n              step++;\n              return 0;\n            }\n\n            return 21;\n          }\n\n        };\n      };\n\n      let ID1 = nanoid();\n      let ID2 = nanoid(makeProxyNumberToReproducePreviousID());\n      is.not(ID1, ID2);\n    });","file":"index.test.js","skipped":false,"dir":"test"},{"name":"nanoid / generates URL-friendly IDs","suites":[],"updatePoint":{"line":5,"column":41,"index":222},"line":5,"code":"test('nanoid / generates URL-friendly IDs', () => {\n  for (let i = 0; i < 10; i++) {\n    let id = nanoid();\n    is(id.length, 21);\n\n    for (let char of id) {\n      match(urlAlphabet, new RegExp(char, 'g'));\n    }\n  }\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"nanoid / changes ID length","suites":[],"updatePoint":{"line":15,"column":32,"index":435},"line":15,"code":"test('nanoid / changes ID length', () => {\n  is(nanoid(10).length, 10);\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"nanoid / accepts string","suites":[],"updatePoint":{"line":18,"column":29,"index":508},"line":18,"code":"test('nanoid / accepts string', () => {\n  is(nanoid('10').length, 10);\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"nanoid / has no collisions","suites":[],"updatePoint":{"line":21,"column":32,"index":586},"line":21,"code":"test('nanoid / has no collisions', () => {\n  let used = {};\n\n  for (let i = 0; i < 100 * 1000; i++) {\n    let id = nanoid();\n    is(used[id], undefined);\n    used[id] = true;\n  }\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"nanoid / has flat distribution","suites":[],"updatePoint":{"line":30,"column":36,"index":773},"line":30,"code":"test('nanoid / has flat distribution', () => {\n  let COUNT = 100 * 1000;\n  let LENGTH = nanoid().length;\n  let chars = {};\n\n  for (let i = 0; i < COUNT; i++) {\n    let id = nanoid();\n\n    for (let char of id) {\n      if (!chars[char]) chars[char] = 0;\n      chars[char] += 1;\n    }\n  }\n\n  is(Object.keys(chars).length, urlAlphabet.length);\n  let max = 0;\n  let min = Number.MAX_SAFE_INTEGER;\n\n  for (let k in chars) {\n    let distribution = chars[k] * urlAlphabet.length / (COUNT * LENGTH);\n    if (distribution > max) max = distribution;\n    if (distribution < min) min = distribution;\n  }\n\n  ok(max - min <= 0.05);\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"customAlphabet / has options","suites":[],"updatePoint":{"line":56,"column":34,"index":1392},"line":56,"code":"test('customAlphabet / has options', () => {\n  let nanoidA = customAlphabet('a', 5);\n  is(nanoidA(), 'aaaaa');\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"customAlphabet / has flat distribution","suites":[],"updatePoint":{"line":60,"column":44,"index":1517},"line":60,"code":"test('customAlphabet / has flat distribution', () => {\n  let COUNT = 100 * 1000;\n  let LENGTH = 5;\n  let ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n  let nanoid2 = customAlphabet(ALPHABET, LENGTH);\n  let chars = {};\n\n  for (let i = 0; i < COUNT; i++) {\n    let id = nanoid2();\n\n    for (let char of id) {\n      if (!chars[char]) chars[char] = 0;\n      chars[char] += 1;\n    }\n  }\n\n  is(Object.keys(chars).length, ALPHABET.length);\n  let max = 0;\n  let min = Number.MAX_SAFE_INTEGER;\n\n  for (let k in chars) {\n    let distribution = chars[k] * ALPHABET.length / (COUNT * LENGTH);\n    if (distribution > max) max = distribution;\n    if (distribution < min) min = distribution;\n  }\n\n  ok(max - min <= 0.05);\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"works with polyfill","suites":[],"updatePoint":{"line":23,"column":25,"index":475},"line":23,"code":"test('works with polyfill', () => {\n  is(typeof nanoid(), 'string');\n});","file":"react-native-polyfill.test.js","skipped":false,"dir":"test"}]}