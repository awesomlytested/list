{
    "repo": "tj/ejs",
    "url": "https://github.com/tj/ejs",
    "branch": "master",
    "configs": [
        {
            "package": "ejs",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should compile to a function",
            "suites": [
                "ejs.compile(str, options)"
            ],
            "updatePoint": {
                "line": 42,
                "column": 34
            },
            "line": 42,
            "code": "  it('should compile to a function', function () {\n    var fn = ejs.compile('<p>yay</p>');\n    fn().should.equal('<p>yay</p>');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should throw if there are syntax errors",
            "suites": [
                "ejs.compile(str, options)"
            ],
            "updatePoint": {
                "line": 46,
                "column": 45
            },
            "line": 46,
            "code": "  it('should throw if there are syntax errors', function () {\n    try {\n      ejs.compile(fixture('fail.ejs'));\n    } catch (err) {\n      err.message.should.include('compiling ejs');\n\n      try {\n        ejs.compile(fixture('fail.ejs'), {\n          filename: 'fail.ejs'\n        });\n      } catch (err) {\n        err.message.should.include('fail.ejs');\n        return;\n      }\n    }\n\n    assert(false, 'compiling a file with invalid syntax should throw an exception');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow customizing delimiters",
            "suites": [
                "ejs.compile(str, options)"
            ],
            "updatePoint": {
                "line": 64,
                "column": 41
            },
            "line": 64,
            "code": "  it('should allow customizing delimiters', function () {\n    var fn = ejs.compile('<p>{= name }</p>', {\n      open: '{',\n      close: '}'\n    });\n    fn({\n      name: 'tobi'\n    }).should.equal('<p>tobi</p>');\n    var fn = ejs.compile('<p>::= name ::</p>', {\n      open: '::',\n      close: '::'\n    });\n    fn({\n      name: 'tobi'\n    }).should.equal('<p>tobi</p>');\n    var fn = ejs.compile('<p>(= name )</p>', {\n      open: '(',\n      close: ')'\n    });\n    fn({\n      name: 'tobi'\n    }).should.equal('<p>tobi</p>');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should default to using ejs.open and ejs.close",
            "suites": [
                "ejs.compile(str, options)"
            ],
            "updatePoint": {
                "line": 87,
                "column": 52
            },
            "line": 87,
            "code": "  it('should default to using ejs.open and ejs.close', function () {\n    ejs.open = '{';\n    ejs.close = '}';\n    var fn = ejs.compile('<p>{= name }</p>');\n    fn({\n      name: 'tobi'\n    }).should.equal('<p>tobi</p>');\n    var fn = ejs.compile('<p>|= name |</p>', {\n      open: '|',\n      close: '|'\n    });\n    fn({\n      name: 'tobi'\n    }).should.equal('<p>tobi</p>');\n    delete ejs.open;\n    delete ejs.close;\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have a working client option",
            "suites": [
                "ejs.compile(str, options)"
            ],
            "updatePoint": {
                "line": 104,
                "column": 41
            },
            "line": 104,
            "code": "  it('should have a working client option', function () {\n    var fn = ejs.compile('<p><%= foo %></p>', {\n      client: true\n    });\n    var str = fn.toString();\n    eval('var preFn = ' + str);\n    preFn({\n      foo: 'bar'\n    }).should.equal('<p>bar</p>');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the template",
            "suites": [
                "ejs.render(str, options)"
            ],
            "updatePoint": {
                "line": 116,
                "column": 32
            },
            "line": 116,
            "code": "  it('should render the template', function () {\n    ejs.render('<p>yay</p>').should.equal('<p>yay</p>');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept locals",
            "suites": [
                "ejs.render(str, options)"
            ],
            "updatePoint": {
                "line": 119,
                "column": 26
            },
            "line": 119,
            "code": "  it('should accept locals', function () {\n    ejs.render('<p><%= name %></p>', {\n      name: 'tobi'\n    }).should.equal('<p>tobi</p>');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a file",
            "suites": [
                "ejs.renderFile(path, options, fn)"
            ],
            "updatePoint": {
                "line": 126,
                "column": 26
            },
            "line": 126,
            "code": "  it('should render a file', function (done) {\n    ejs.renderFile('test/fixtures/para.ejs', function (err, html) {\n      if (err) return done(err);\n      html.should.equal('<p>hey</p>');\n      done();\n    });\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept locals",
            "suites": [
                "ejs.renderFile(path, options, fn)"
            ],
            "updatePoint": {
                "line": 133,
                "column": 26
            },
            "line": 133,
            "code": "  it('should accept locals', function (done) {\n    var options = {\n      name: 'tj',\n      open: '{',\n      close: '}'\n    };\n    ejs.renderFile('test/fixtures/user.ejs', options, function (err, html) {\n      if (err) return done(err);\n      html.should.equal('<h1>tj</h1>');\n      done();\n    });\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not catch err threw by callback",
            "suites": [
                "ejs.renderFile(path, options, fn)"
            ],
            "updatePoint": {
                "line": 145,
                "column": 44
            },
            "line": 145,
            "code": "  it('should not catch err threw by callback', function (done) {\n    var options = {\n      name: 'tj',\n      open: '{',\n      close: '}'\n    };\n    var counter = 0;\n\n    try {\n      ejs.renderFile('test/fixtures/user.ejs', options, function (err, html) {\n        counter++;\n\n        if (err) {\n          err.message.should.not.equal('Exception in callback');\n          return done(err);\n        }\n\n        throw new Error('Exception in callback');\n      });\n    } catch (err) {\n      counter.should.equal(1);\n      err.message.should.equal('Exception in callback');\n      done();\n    }\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should escape &amp;<script>",
            "suites": [
                "<%="
            ],
            "updatePoint": {
                "line": 172,
                "column": 33
            },
            "line": 172,
            "code": "  it('should escape &amp;<script>', function () {\n    ejs.render('<%= name %>', {\n      name: '&nbsp;<script>'\n    }).should.equal('&amp;nbsp;&lt;script&gt;');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should escape '",
            "suites": [
                "<%="
            ],
            "updatePoint": {
                "line": 177,
                "column": 21
            },
            "line": 177,
            "code": "  it(\"should escape '\", function () {\n    ejs.render('<%= name %>', {\n      name: \"The Jones's\"\n    }).should.equal('The Jones&#39;s');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should escape &foo_bar;",
            "suites": [
                "<%="
            ],
            "updatePoint": {
                "line": 182,
                "column": 29
            },
            "line": 182,
            "code": "  it(\"should escape &foo_bar;\", function () {\n    ejs.render('<%= name %>', {\n      name: \"&foo_bar;\"\n    }).should.equal('&amp;foo_bar;');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not escape",
            "suites": [
                "<%-"
            ],
            "updatePoint": {
                "line": 189,
                "column": 23
            },
            "line": 189,
            "code": "  it('should not escape', function () {\n    ejs.render('<%- name %>', {\n      name: '<script>'\n    }).should.equal('<script>');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should terminate gracefully if no close tag is found",
            "suites": [
                "<%-"
            ],
            "updatePoint": {
                "line": 194,
                "column": 58
            },
            "line": 194,
            "code": "  it('should terminate gracefully if no close tag is found', function () {\n    try {\n      ejs.compile('<h1>oops</h1><%- name ->');\n      throw new Error('Expected parse failure');\n    } catch (err) {\n      err.message.should.equal('Could not find matching close tag \"%>\".');\n    }\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should produce newlines",
            "suites": [
                "%>"
            ],
            "updatePoint": {
                "line": 204,
                "column": 29
            },
            "line": 204,
            "code": "  it('should produce newlines', function () {\n    ejs.render(fixture('newlines.ejs'), {\n      users: users\n    }).should.equal(fixture('newlines.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not produce newlines",
            "suites": [
                "-%>"
            ],
            "updatePoint": {
                "line": 211,
                "column": 33
            },
            "line": 211,
            "code": "  it('should not produce newlines', function () {\n    ejs.render(fixture('no.newlines.ejs'), {\n      users: users\n    }).should.equal(fixture('no.newlines.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should produce literals",
            "suites": [
                "<%%"
            ],
            "updatePoint": {
                "line": 218,
                "column": 29
            },
            "line": 218,
            "code": "  it('should produce literals', function () {\n    ejs.render('<%%- \"foo\" %>').should.equal('<%- \"foo\" %>');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not mess up the constructed function",
            "suites": [
                "single quotes"
            ],
            "updatePoint": {
                "line": 223,
                "column": 49
            },
            "line": 223,
            "code": "  it('should not mess up the constructed function', function () {\n    ejs.render(fixture('single-quote.ejs')).should.equal(fixture('single-quote.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not mess up the constructed function",
            "suites": [
                "double quotes"
            ],
            "updatePoint": {
                "line": 228,
                "column": 49
            },
            "line": 228,
            "code": "  it('should not mess up the constructed function', function () {\n    ejs.render(fixture('double-quote.ejs')).should.equal(fixture('double-quote.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should escape",
            "suites": [
                "backslashes"
            ],
            "updatePoint": {
                "line": 233,
                "column": 19
            },
            "line": 233,
            "code": "  it('should escape', function () {\n    ejs.render(fixture('backslash.ejs')).should.equal(fixture('backslash.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should work",
            "suites": [
                "messed up whitespace"
            ],
            "updatePoint": {
                "line": 238,
                "column": 17
            },
            "line": 238,
            "code": "  it('should work', function () {\n    ejs.render(fixture('messed.ejs'), {\n      users: users\n    }).should.equal(fixture('messed.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should work",
            "suites": [
                "filters"
            ],
            "updatePoint": {
                "line": 245,
                "column": 17
            },
            "line": 245,
            "code": "  it('should work', function () {\n    var items = ['foo', 'bar', 'baz'];\n    ejs.render('<%=: items | reverse | first | reverse | capitalize %>', {\n      items: items\n    }).should.equal('Zab');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept arguments",
            "suites": [
                "filters"
            ],
            "updatePoint": {
                "line": 251,
                "column": 29
            },
            "line": 251,
            "code": "  it('should accept arguments', function () {\n    ejs.render('<%=: users | map:\"name\" | join:\", \" %>', {\n      users: users\n    }).should.equal('tobi, loki, jane');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should truncate string",
            "suites": [
                "filters"
            ],
            "updatePoint": {
                "line": 256,
                "column": 28
            },
            "line": 256,
            "code": "  it('should truncate string', function () {\n    ejs.render('<%=: word | truncate: 3 %>', {\n      word: 'World'\n    }).should.equal('Wor');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should append string if string is longer",
            "suites": [
                "filters"
            ],
            "updatePoint": {
                "line": 261,
                "column": 46
            },
            "line": 261,
            "code": "  it('should append string if string is longer', function () {\n    ejs.render('<%=: word | truncate: 2,\"...\" %>', {\n      word: 'Testing'\n    }).should.equal('Te...');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not append string if string is shorter",
            "suites": [
                "filters"
            ],
            "updatePoint": {
                "line": 266,
                "column": 51
            },
            "line": 266,
            "code": "  it('should not append string if string is shorter', function () {\n    ejs.render('<%=: word | truncate: 10,\"...\" %>', {\n      word: 'Testing'\n    }).should.equal('Testing');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept arguments containing :",
            "suites": [
                "filters"
            ],
            "updatePoint": {
                "line": 271,
                "column": 42
            },
            "line": 271,
            "code": "  it('should accept arguments containing :', function () {\n    ejs.render('<%=: users | map:\"name\" | join:\"::\" %>', {\n      users: users\n    }).should.equal('tobi::loki::jane');\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should produce useful stack traces",
            "suites": [
                "exceptions"
            ],
            "updatePoint": {
                "line": 278,
                "column": 40
            },
            "line": 278,
            "code": "  it('should produce useful stack traces', function (done) {\n    try {\n      ejs.render(fixture('error.ejs'), {\n        filename: 'error.ejs'\n      });\n    } catch (err) {\n      err.path.should.equal('error.ejs');\n      err.stack.split('\\n').slice(0, 8).join('\\n').should.equal(fixture('error.out'));\n      done();\n    }\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not include __stack if compileDebug is false",
            "suites": [
                "exceptions"
            ],
            "updatePoint": {
                "line": 289,
                "column": 57
            },
            "line": 289,
            "code": "  it('should not include __stack if compileDebug is false', function () {\n    try {\n      ejs.render(fixture('error.ejs'), {\n        filename: 'error.ejs',\n        compileDebug: false\n      });\n    } catch (err) {\n      err.should.not.have.property('path');\n      err.stack.split('\\n').slice(0, 8).join('\\n').should.not.equal(fixture('error.out'));\n    }\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should include ejs",
            "suites": [
                "includes"
            ],
            "updatePoint": {
                "line": 302,
                "column": 24
            },
            "line": 302,
            "code": "  it('should include ejs', function () {\n    var file = 'test/fixtures/include.ejs';\n    ejs.render(fixture('include.ejs'), {\n      filename: file,\n      pets: users,\n      open: '[[',\n      close: ']]'\n    }).should.equal(fixture('include.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should work when nested",
            "suites": [
                "includes"
            ],
            "updatePoint": {
                "line": 311,
                "column": 29
            },
            "line": 311,
            "code": "  it('should work when nested', function () {\n    var file = 'test/fixtures/menu.ejs';\n    ejs.render(fixture('menu.ejs'), {\n      filename: file,\n      pets: users\n    }).should.equal(fixture('menu.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should include arbitrary files as-is",
            "suites": [
                "includes"
            ],
            "updatePoint": {
                "line": 318,
                "column": 42
            },
            "line": 318,
            "code": "  it('should include arbitrary files as-is', function () {\n    var file = 'test/fixtures/include.css.ejs';\n    ejs.render(fixture('include.css.ejs'), {\n      filename: file,\n      pets: users\n    }).should.equal(fixture('include.css.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass compileDebug to include",
            "suites": [
                "includes"
            ],
            "updatePoint": {
                "line": 325,
                "column": 41
            },
            "line": 325,
            "code": "  it('should pass compileDebug to include', function () {\n    var file = 'test/fixtures/include.ejs';\n    var fn = ejs.compile(fixture('include.ejs'), {\n      filename: file,\n      open: '[[',\n      close: ']]',\n      compileDebug: false,\n      client: true\n    });\n    var str = fn.toString();\n    eval('var preFn = ' + str);\n    str.should.not.match(/__stack/);\n    (function () {\n      preFn({\n        pets: users\n      });\n    }).should.not.throw();\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fully render with comments removed",
            "suites": [
                "comments"
            ],
            "updatePoint": {
                "line": 345,
                "column": 47
            },
            "line": 345,
            "code": "  it('should fully render with comments removed', function () {\n    ejs.render(fixture('comments.ejs')).should.equal(fixture('comments.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow ejs templates to be required as node modules",
            "suites": [
                "require"
            ],
            "updatePoint": {
                "line": 350,
                "column": 63
            },
            "line": 350,
            "code": "  it('should allow ejs templates to be required as node modules', function () {\n    var file = 'test/fixtures/include.ejs',\n        template = require(__dirname + '/fixtures/menu.ejs');\n\n    template({\n      filename: file,\n      pets: users\n    }).should.equal(fixture('menu.html'));\n  });",
            "file": "ejs.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "tj__ejs.svg"
}