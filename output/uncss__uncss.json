{
    "repo": "uncss/uncss",
    "url": "https://github.com/uncss/uncss",
    "branch": "master",
    "configs": [
        {
            "package": "uncss",
            "lang": "js",
            "dir": "tests",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "options.banner is enabled by default",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 29,
                "column": 42
            },
            "line": 29,
            "code": "  it('options.banner is enabled by default', () => {\n    expect(output).to.include('*** uncss>');\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.banner should be able to disable banner",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 32,
                "column": 53
            },
            "line": 32,
            "code": "  it('options.banner should be able to disable banner', async () => {\n    const {\n      css\n    } = await uncss(rfs('selectors/index.html'), {\n      csspath: 'tests/selectors',\n      banner: false\n    });\n    expect(css).to.not.include('*** uncss>');\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.stylesheets should override <link> tags",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 41,
                "column": 53
            },
            "line": 41,
            "code": "  it('options.stylesheets should override <link> tags', () => {\n    expect(output).to.include(rfs(stylesheets[0]));\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.ignoreSheets should be respected",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 44,
                "column": 46
            },
            "line": 44,
            "code": "  it('options.ignoreSheets should be respected', async () => {\n    const {\n      css\n    } = await uncss(rfs('selectors/index.html'), {\n      ignoreSheets: ['https://fonts.googleapis.com/css?family=Open+Sans:400', /font-awesome/],\n      csspath: 'tests/selectors'\n    });\n    expect(css).to.not.include('Open Sans');\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.raw should be added to the processed CSS",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 53,
                "column": 54
            },
            "line": 53,
            "code": "  it('options.raw should be added to the processed CSS', () => {\n    expect(output).to.include(rawcss);\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.ignore should be added to the output and accept a regex",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 56,
                "column": 69
            },
            "line": 56,
            "code": "  it('options.ignore should be added to the output and accept a regex', () => {\n    expect(output).to.include(rfs(stylesheets[1]));\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "inline ignore comments should be respected",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 59,
                "column": 48
            },
            "line": 59,
            "code": "  it('inline ignore comments should be respected', () => {\n    expect(output).to.include(rfs(stylesheets[2]));\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.htmlroot should be respected",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 62,
                "column": 42
            },
            "line": 62,
            "code": "  it('options.htmlroot should be respected', async () => {\n    const {\n      css\n    } = await uncss(rfs('coverage/htmlroot.html'), {\n      htmlroot: 'tests/coverage'\n    });\n    expect(css).to.include(rfs('coverage/override.css'));\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.htmlroot with local files",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 70,
                "column": 39
            },
            "line": 70,
            "code": "  it('options.htmlroot with local files', async () => {\n    const {\n      css\n    } = await uncss(['tests/coverage/htmlroot.html'], {\n      htmlroot: 'tests/coverage'\n    });\n    expect(css).to.include(rfs('coverage/override.css'));\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.media should default to screen, all",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 78,
                "column": 49
            },
            "line": 78,
            "code": "  it('options.media should default to screen, all', async () => {\n    const {\n      css\n    } = await uncss(rfs('coverage/media.html'), {\n      csspath: 'tests/selectors'\n    });\n    expect(css).to.include(rfs('selectors/expected/adjacent.css'));\n    expect(css).to.include(rfs('selectors/expected/child.css'));\n    expect(css).to.include(rfs('selectors/expected/complex.css'));\n    expect(css).to.not.include(rfs('selectors/expected/classes.css'));\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.media should be configurable",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 89,
                "column": 42
            },
            "line": 89,
            "code": "  it('options.media should be configurable', async () => {\n    const {\n      css\n    } = await uncss(rfs('coverage/media.html'), {\n      csspath: 'tests/selectors',\n      media: 'print'\n    });\n    expect(css).to.include(rfs('selectors/expected/adjacent.css'));\n    expect(css).to.include(rfs('selectors/expected/child.css'));\n    expect(css).to.include(rfs('selectors/expected/complex.css'));\n    expect(css).to.include(rfs('selectors/expected/classes.css'));\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.report should generate report object",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 101,
                "column": 50
            },
            "line": 101,
            "code": "  it('options.report should generate report object', async () => {\n    const {\n      css,\n      report\n    } = await uncss(rfs('selectors/index.html'), {\n      csspath: 'tests/selectors',\n      report: true\n    });\n    expect(report).to.have.ownProperty('original');\n    expect(report.original).to.have.length.least(css.length);\n    expect(report.selectors.all).to.be.instanceof(Array);\n    expect(report.selectors.used).to.be.instanceof(Array);\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.uncssrc should be read",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 114,
                "column": 36
            },
            "line": 114,
            "code": "  it('options.uncssrc should be read', async () => {\n    const {\n      css\n    } = await uncss(rfs('selectors/index.html'), {\n      uncssrc: 'tests/coverage/.uncssrc'\n    });\n    expect(css).to.equal(output);\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "options.uncssrc with options.report should generate a valid report",
            "suites": [
                "Options"
            ],
            "updatePoint": {
                "line": 122,
                "column": 72
            },
            "line": 122,
            "code": "  it('options.uncssrc with options.report should generate a valid report', async () => {\n    const {\n      css,\n      report\n    } = await uncss(rfs('selectors/index.html'), {\n      uncssrc: 'tests/coverage/.uncssrc',\n      report: true\n    });\n    expect(css).to.equal(output);\n    expect(report).to.have.ownProperty('original');\n    expect(report.selectors.all).to.be.instanceof(Array);\n    expect(report.selectors.all.length).to.not.equal(0);\n    expect(report.selectors.used).to.be.instanceof(Array);\n    expect(report.selectors.used.length).to.not.equal(0);\n    expect(report.selectors.unused).to.be.instanceof(Array);\n  });",
            "file": "coverage.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should convert  to ",
            "suites": [
                "dePseudify() function"
            ],
            "updatePoint": {
                "line": 39,
                "column": 57
            },
            "line": 39,
            "code": "    it(`should convert ${input} to ${output || '(empty)'}`, () => {\n      expect(dePseudify(input)).to.equal(output);\n    });",
            "file": "depseudify.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "No valid HTML files",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 10,
                "column": 25
            },
            "line": 10,
            "code": "  it('No valid HTML files', async () => {\n    try {\n      await uncss(['nonexistent.html']);\n      expect.fail();\n    } catch (error) {\n      expect(error.message).to.equal('UnCSS: no HTML files found');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Invalid options.stylesheets",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 18,
                "column": 33
            },
            "line": 18,
            "code": "  it('Invalid options.stylesheets', async () => {\n    try {\n      await uncss('<html></html>', {\n        stylesheets: ['nonexistent']\n      });\n      expect.fail();\n    } catch (error) {\n      expect(error.message).to.contain('UnCSS: could not open');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Invalid options.stylesheets with URL",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 28,
                "column": 42
            },
            "line": 28,
            "code": "  it('Invalid options.stylesheets with URL', async () => {\n    try {\n      await uncss('<html></html>', {\n        stylesheets: ['http://invalid']\n      });\n      expect.fail();\n    } catch (error) {\n      expect(error.message).to.contain('ENOTFOUND');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Invalid options.raw",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 38,
                "column": 25
            },
            "line": 38,
            "code": "  it('Invalid options.raw', async () => {\n    try {\n      await uncss('<html></html>', {\n        raw: ['.test { margin: 0 }']\n      });\n      expect.fail();\n    } catch (error) {\n      expect(error.message).to.equal('UnCSS: options.raw - expected a string');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "No stylesheet found",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 48,
                "column": 25
            },
            "line": 48,
            "code": "  it('No stylesheet found', async () => {\n    try {\n      await uncss('<html><body></body></html>');\n      expect.fail();\n    } catch (error) {\n      expect(error.message).to.equal('UnCSS: no stylesheets found');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "jsdom errors",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 56,
                "column": 18
            },
            "line": 56,
            "code": "  it('jsdom errors', async () => {\n    try {\n      await uncss(['http://invalid']);\n      expect.fail();\n    } catch (error) {\n      expect(error.message).to.match(/getaddrinfo ENOTFOUND invalid/);\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "jsdom errors to stderr",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 64,
                "column": 28
            },
            "line": 64,
            "code": "  it('jsdom errors to stderr', async () => {\n    let stderrBuffer = '';\n    const oldWrite = process.stderr.write;\n\n    process.stderr.write = function (data) {\n      stderrBuffer += data;\n    };\n\n    try {\n      await uncss(['tests/jsdom/throw.html']);\n    } finally {\n      // eslint-disable-next-line require-atomic-updates\n      process.stderr.write = oldWrite;\n      expect(stderrBuffer).to.contain('Exception');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "css-parse errors",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 80,
                "column": 22
            },
            "line": 80,
            "code": "  it('css-parse errors', async () => {\n    try {\n      await uncss(['tests/selectors/index.html'], {\n        raw: invalidCss\n      });\n      expect.fail();\n    } catch (error) {\n      expect(error.message).to.contain('unable to parse');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "css-parse errors (minified stylesheet)",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 90,
                "column": 44
            },
            "line": 90,
            "code": "  it('css-parse errors (minified stylesheet)', async () => {\n    try {\n      await uncss(['tests/selectors/index.html'], {\n        stylesheets: ['../coverage/minified.css']\n      });\n      expect.fail();\n    } catch (error) {\n      expect(error.message).to.contain('unable to parse');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Report should be generated only if specified",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 100,
                "column": 50
            },
            "line": 100,
            "code": "  it('Report should be generated only if specified', async () => {\n    const {\n      report\n    } = await uncss(['tests/selectors/index.html']);\n    expect(report).to.equal(undefined);\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reports when the uncssrc file does not exist",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 106,
                "column": 50
            },
            "line": 106,
            "code": "  it('Reports when the uncssrc file does not exist', async () => {\n    try {\n      await uncss(['selectors/index.html'], {\n        uncssrc: 'nonexistent'\n      });\n      expect.fail();\n    } catch (err) {\n      expect(err.code).to.equal('ENOENT');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reports errors in the uncssrc file (promise)",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 116,
                "column": 50
            },
            "line": 116,
            "code": "  it('Reports errors in the uncssrc file (promise)', async () => {\n    try {\n      await uncss(['selectors/index.html'], {\n        uncssrc: 'tests/coverage/.invaliduncssrc'\n      });\n      expect.fail();\n    } catch (err) {\n      expect(err).to.be.an.instanceOf(SyntaxError);\n      expect(err.message).to.equal('UnCSS: uncssrc file is invalid JSON.');\n    }\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Reports errors in the uncssrc file (callback)",
            "suites": [
                "Error reporting"
            ],
            "updatePoint": {
                "line": 127,
                "column": 51
            },
            "line": 127,
            "code": "  it('Reports errors in the uncssrc file (callback)', done => {\n    uncss(['selectors/index.html'], {\n      uncssrc: 'tests/coverage/.invaliduncssrc'\n    }, (err, res) => {\n      expect(err).to.be.an.instanceOf(SyntaxError);\n      expect(err.message).to.equal('UnCSS: uncssrc file is invalid JSON.');\n      expect(res).to.be.undefined;\n      done();\n    });\n  });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "html",
            "suites": [
                "Error reporting",
                "Connection errors"
            ],
            "updatePoint": {
                "line": 138,
                "column": 12
            },
            "line": 138,
            "code": "    it('html', async () => {\n      try {\n        await uncss('https://expired.badssl.com/');\n        expect.fail();\n      } catch (err) {\n        expect(err).to.be.instanceof(Error);\n      }\n    });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "scripts",
            "suites": [
                "Error reporting",
                "Connection errors"
            ],
            "updatePoint": {
                "line": 146,
                "column": 15
            },
            "line": 146,
            "code": "    it('scripts', async () => {\n      try {\n        await uncss('coverage/http_error_script.html');\n        expect.fail();\n      } catch (err) {\n        expect(err).to.be.instanceof(Error);\n      }\n    });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "stylesheets",
            "suites": [
                "Error reporting",
                "Connection errors"
            ],
            "updatePoint": {
                "line": 154,
                "column": 19
            },
            "line": 154,
            "code": "    it('stylesheets', async () => {\n      try {\n        await uncss('coverage/http_error_stylesheet.html');\n        expect.fail();\n      } catch (err) {\n        expect(err).to.be.instanceof(Error);\n      }\n    });",
            "file": "errors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should find both index pages in the directory and return the used CSS for both of them",
            "suites": [
                "Using globbing patterns"
            ],
            "updatePoint": {
                "line": 9,
                "column": 92
            },
            "line": 9,
            "code": "  it('should find both index pages in the directory and return the used CSS for both of them', async () => {\n    const {\n      css\n    } = await uncss(['tests/glob/**/*.html']);\n    expect(css).to.not.equal(undefined);\n    expect(css).to.contain('h1');\n    expect(css).to.contain('h2');\n    expect(css).not.to.contain('h3');\n    expect(css).not.to.contain('h4');\n    expect(css).not.to.contain('h5');\n    expect(css).not.to.contain('h6');\n  });",
            "file": "glob.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should process CSS",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 10,
                "column": 24
            },
            "line": 10,
            "code": "  it('Should process CSS', async () => {\n    const {\n      css\n    } = await uncss(['tests/jsdom/basic.html']);\n    expect(css).to.include('.evaluated');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should exit only when JS evaluation has finished",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 16,
                "column": 54
            },
            "line": 16,
            "code": "  it('Should exit only when JS evaluation has finished', async function () {\n    this.timeout(100000);\n    const {\n      css\n    } = await uncss(['tests/jsdom/long_wait.html']);\n    expect(css).to.include('.long-wait');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should not wait for timeouts by default",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 23,
                "column": 45
            },
            "line": 23,
            "code": "  it('Should not wait for timeouts by default', async () => {\n    const {\n      css\n    } = await uncss(['tests/jsdom/timeout.html']);\n    expect(css).to.not.include('.timeout');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should respect options.timeout",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 29,
                "column": 36
            },
            "line": 29,
            "code": "  it('Should respect options.timeout', async () => {\n    const {\n      css\n    } = await uncss(['tests/jsdom/timeout.html'], {\n      timeout: 5000\n    });\n    expect(css).to.include('.timeout');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should use htmlroot to load root-relative scripts",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 37,
                "column": 55
            },
            "line": 37,
            "code": "  it('Should use htmlroot to load root-relative scripts', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom')\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/root_relative_script.html'], options);\n    expect(css).to.include('.evaluated');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should use htmlroot to load root-relative scripts the same way if htmlroot ends with a slash",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 46,
                "column": 98
            },
            "line": 46,
            "code": "  it('Should use htmlroot to load root-relative scripts the same way if htmlroot ends with a slash', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom/')\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/root_relative_script.html'], options);\n    expect(css).to.include('.evaluated');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should not use htmlroot when loading non-root-relative scripts",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 55,
                "column": 68
            },
            "line": 55,
            "code": "  it('Should not use htmlroot when loading non-root-relative scripts', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom')\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/non_root_relative_script.html'], options);\n    expect(css).to.include('.evaluated');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should not use htmlroot when loading non-root-relative scripts in a subfolder",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 64,
                "column": 83
            },
            "line": 64,
            "code": "  it('Should not use htmlroot when loading non-root-relative scripts in a subfolder', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom')\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/sub/non_root_relative_script.html'], options);\n    expect(css).to.include('.evaluated');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should not use htmlroot when loading inline scripts",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 73,
                "column": 57
            },
            "line": 73,
            "code": "  it('Should not use htmlroot when loading inline scripts', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom')\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/basic.html'], options);\n    expect(css).to.include('.evaluated');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should accept local scripts and stylesheets with a query string",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 82,
                "column": 69
            },
            "line": 82,
            "code": "  it('Should accept local scripts and stylesheets with a query string', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom')\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/querystring.html'], options);\n    expect(css).to.include('.evaluated');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should work with missing scripts and htmlroot",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 91,
                "column": 51
            },
            "line": 91,
            "code": "  it('Should work with missing scripts and htmlroot', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom')\n    }; // Overwrite stdout and stderr so we can monitor the output\n\n    const olderr = process.stderr.write;\n    let stderr = '';\n\n    process.stderr.write = function (content) {\n      stderr += content;\n    };\n\n    try {\n      const {\n        css\n      } = await uncss(['tests/jsdom/not_found.html'], options);\n      expect(css).not.not.include('.evaluated');\n      expect(stderr).to.include('Could not load script');\n    } finally {\n      // eslint-disable-next-line require-atomic-updates\n      process.stderr.write = olderr;\n    }\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should set the useragent to the value given in options",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 114,
                "column": 60
            },
            "line": 114,
            "code": "  it('Should set the useragent to the value given in options', async () => {\n    const testUserAgent = 'foo';\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom'),\n      userAgent: testUserAgent\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/useragent.html'], options);\n    expect(css).to.include('useragentset');\n    expect(css).to.not.include('useragentunset');\n    expect(css).to.not.include('error');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should default the useragent to uncss",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 127,
                "column": 43
            },
            "line": 127,
            "code": "  it('Should default the useragent to uncss', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom')\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/useragent.html'], options);\n    expect(css).to.include('useragentunset');\n    expect(css).to.not.include('useragentset');\n    expect(css).to.not.include('error');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should execute passed in javascript function before uncss runs",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 138,
                "column": 68
            },
            "line": 138,
            "code": "  it('Should execute passed in javascript function before uncss runs', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom'),\n      inject: window => {\n        window.document.querySelector('html').classList.add('no-test', 'test');\n      }\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/inject.html'], options);\n    expect(css).to.include('.no-test .inject');\n    expect(css).to.include('.test .inject');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should load then execute passed in javascript function before uncss runs",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 151,
                "column": 78
            },
            "line": 151,
            "code": "  it('Should load then execute passed in javascript function before uncss runs', async () => {\n    const options = {\n      htmlroot: path.join(__dirname, './jsdom'),\n      inject: '../tests/jsdom/inject.js'\n    };\n    const {\n      css\n    } = await uncss(['tests/jsdom/inject.html'], options);\n    expect(css).to.include('.no-test .inject');\n    expect(css).to.include('.test .inject');\n  }); // The use-case here is when using the cli to redirect output to a file:",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should redirect console statements to stderr",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 164,
                "column": 50
            },
            "line": 164,
            "code": "  it('Should redirect console statements to stderr', async () => {\n    // Overwrite stdout and stderr so we can monitor the output\n    const oldout = process.stdout.write,\n          olderr = process.stderr.write;\n    let stdout = '',\n        stderr = '';\n\n    process.stdout.write = function (content) {\n      stdout += content;\n    };\n\n    process.stderr.write = function (content) {\n      stderr += content;\n    };\n\n    try {\n      const {\n        css\n      } = await uncss(['tests/jsdom/console.html']);\n      expect(css).to.include('.evaluated');\n      expect(stdout).to.not.include('log');\n      expect(stderr).to.include('log');\n    } finally {\n      // eslint-disable-next-line require-atomic-updates\n      process.stdout.write = oldout; // eslint-disable-next-line require-atomic-updates\n\n      process.stderr.write = olderr;\n    }\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should have missing globals by default",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 193,
                "column": 44
            },
            "line": 193,
            "code": "  it('Should have missing globals by default', async () => {\n    const {\n      css\n    } = await uncss(['tests/jsdom/globals.html']);\n    expect(css).to.include('.globals-undefined');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should support injected globals",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 199,
                "column": 37
            },
            "line": 199,
            "code": "  it('Should support injected globals', async () => {\n    const {\n      css\n    } = await uncss(['tests/jsdom/globals.html'], {\n      jsdom: {\n        beforeParse(window) {\n          window.matchMedia = () => {\n            /* noop */\n          };\n        }\n\n      }\n    });\n    expect(css).to.include('.globals-function');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should not crash when there the css file starts with BOM + @",
            "suites": [
                "jsdom"
            ],
            "updatePoint": {
                "line": 214,
                "column": 66
            },
            "line": 214,
            "code": "  it('Should not crash when there the css file starts with BOM + @', async () => {\n    const {\n      css\n    } = await uncss(['tests/input/testbom.html']);\n    expect(css).to.include('body');\n  });",
            "file": "jsdom.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should compile two stylesheets into one and keep the media query",
            "suites": [
                "Compile the CSS of an HTML page passed by path"
            ],
            "updatePoint": {
                "line": 11,
                "column": 70
            },
            "line": 11,
            "code": "  it('Should compile two stylesheets into one and keep the media query', async () => {\n    const {\n      css\n    } = await uncss(['tests/input/testpage.html']);\n    expect(css).to.not.equal(undefined);\n    fs.writeFileSync(path.join(__dirname, '/output/mediaquery/testpage.compiled.css'), css);\n    expect(css).to.not.match(/\\},@media/);\n  });",
            "file": "mediaquery.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Simple end-to-end test",
            "suites": [
                "PostCSS Plugin"
            ],
            "updatePoint": {
                "line": 28,
                "column": 28
            },
            "line": 28,
            "code": "  it('Simple end-to-end test', async () => {\n    const opts = {};\n    opts.html = ['./tests/glob/one.html'];\n    const result = await postcss([uncss.postcssPlugin(opts)]).process(prevRun, {\n      from: undefined\n    });\n    expect(result.warnings().length).to.equal(0);\n    expect(result.css).to.not.equal(undefined);\n    expect(result.css).to.contain('h1');\n    expect(result.css).not.to.contain('h2');\n    expect(result.css).not.to.contain('h3');\n    expect(result.css).not.to.contain('h4');\n    expect(result.css).not.to.contain('h5');\n    expect(result.css).not.to.contain('h6');\n  });",
            "file": "postcss.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Respects the ignores param",
            "suites": [
                "PostCSS Plugin"
            ],
            "updatePoint": {
                "line": 43,
                "column": 32
            },
            "line": 43,
            "code": "  it('Respects the ignores param', async () => {\n    const opts = {\n      ignore: ['h4']\n    };\n    opts.html = ['./tests/glob/one.html'];\n    const result = await postcss([uncss.postcssPlugin(opts)]).process(prevRun, {\n      from: undefined\n    });\n    expect(result.warnings().length).to.equal(0);\n    expect(result.css).to.not.equal(undefined);\n    expect(result.css).to.contain('h1');\n    expect(result.css).not.to.contain('h2');\n    expect(result.css).not.to.contain('h3');\n    expect(result.css).to.contain('h4');\n    expect(result.css).not.to.contain('h5');\n    expect(result.css).not.to.contain('h6');\n  });",
            "file": "postcss.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should work with http scripts",
            "suites": [
                "PostCSS Plugin"
            ],
            "updatePoint": {
                "line": 60,
                "column": 35
            },
            "line": 60,
            "code": "  it('Should work with http scripts', () => {\n    return postcss([uncss.postcssPlugin({\n      html: [path.join(__dirname, 'jsdom/http_script.html')],\n      timeout: 2500\n    })]).process(fs.readFileSync(path.join(__dirname, 'jsdom/jsdom.css')), {\n      from: undefined\n    }).then(result => {\n      expect(result.warnings().length).to.equal(0);\n      expect(result.css).to.not.equal(undefined);\n      expect(result.css).to.contain('evaluated');\n    });\n  });",
            "file": "postcss.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should accept options.uncssrc",
            "suites": [
                "PostCSS Plugin"
            ],
            "updatePoint": {
                "line": 72,
                "column": 35
            },
            "line": 72,
            "code": "  it('Should accept options.uncssrc', () => {\n    return postcss([uncss.postcssPlugin({\n      html: [path.join(__dirname, 'selectors/index.html')],\n      uncssrc: './tests/coverage/uncssrc'\n    })]).process(fs.readFileSync(path.join(__dirname, 'selectors/fixtures/classes.css')), {\n      from: undefined\n    }).then(result => {\n      expect(result.warnings().length).to.equal(0);\n      expect(result.css).to.include(fs.readFileSync(path.join(__dirname, 'selectors/expected/classes.css'), 'utf-8'));\n    });\n  });",
            "file": "postcss.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should process all css files if multiple passed in",
            "suites": [
                "PostCSS Plugin"
            ],
            "updatePoint": {
                "line": 83,
                "column": 56
            },
            "line": 83,
            "code": "  it('Should process all css files if multiple passed in', async () => {\n    const processor = postcss([uncss.postcssPlugin({\n      html: [path.join(__dirname, 'selectors/index.html')]\n    })]);\n    const src = [path.join(__dirname, 'selectors/fixtures/classes.css'), path.join(__dirname, 'selectors/fixtures/elements.css')];\n    return Promise.all([processor.process(fs.readFileSync(src[0]), {\n      from: src[0]\n    }).then(result => {\n      expect(result.css).to.equal(fs.readFileSync(path.join(__dirname, 'selectors/expected/classes.css'), 'utf-8'));\n    }), processor.process(fs.readFileSync(src[1]), {\n      from: src[1]\n    }).then(result => {\n      expect(result.css).to.equal(fs.readFileSync(path.join(__dirname, 'selectors/expected/elements.css'), 'utf-8'));\n    })]);\n  });",
            "file": "postcss.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should process an array containing HTML",
            "suites": [
                "Raw HTML"
            ],
            "updatePoint": {
                "line": 10,
                "column": 45
            },
            "line": 10,
            "code": "  it('Should process an array containing HTML', async () => {\n    const html = fs.readFileSync('tests/jsdom/basic.html', {\n      encoding: 'utf8'\n    });\n    const {\n      css\n    } = await uncss([html], {\n      csspath: 'tests/jsdom'\n    });\n    expect(css).to.include('.evaluated');\n  });",
            "file": "rawhtml.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should output expected ",
            "suites": [
                "Selectors"
            ],
            "updatePoint": {
                "line": 45,
                "column": 62
            },
            "line": 45,
            "code": "      it(`Should output expected ${test.fixture.split('.')[0]}`, () => {\n        expect(rawcss).to.include.string(rfs(`selectors/expected/${test.fixture}`));\n      });",
            "file": "selectors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should not output unused ",
            "suites": [
                "Selectors"
            ],
            "updatePoint": {
                "line": 51,
                "column": 64
            },
            "line": 51,
            "code": "      it(`Should not output unused ${test.fixture.split('.')[0]}`, () => {\n        expect(rawcss).to.not.include.string(rfs(`selectors/unused/${test.fixture}`));\n      });",
            "file": "selectors.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Accepts an array of URLs",
            "suites": [
                "Compile the CSS of an HTML page passed by URL"
            ],
            "updatePoint": {
                "line": 26,
                "column": 30
            },
            "line": 26,
            "code": "  it('Accepts an array of URLs', done => {\n    uncss(['https://getbootstrap.com/docs/3.3/examples/jumbotron/'], (err, output) => {\n      expect(err).to.equal(null);\n      expect(output).to.have.length.above(2);\n      fs.writeFile(path.join(__dirname, '/output/bootstrap/jumbotron.compiled.css'), output, done);\n    });\n  });",
            "file": "url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Deals with CSS files linked with absolute URL",
            "suites": [
                "Compile the CSS of an HTML page passed by URL"
            ],
            "updatePoint": {
                "line": 33,
                "column": 51
            },
            "line": 33,
            "code": "  it('Deals with CSS files linked with absolute URL', done => {\n    uncss(['https://uncss.github.io/uncss/'], (err, output) => {\n      expect(err).to.equal(null);\n      expect(output).to.equal(prevRun);\n      prevRun = output;\n      done();\n    });\n  });",
            "file": "url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Deals with relative options.stylesheets when using URLs",
            "suites": [
                "Compile the CSS of an HTML page passed by URL"
            ],
            "updatePoint": {
                "line": 41,
                "column": 61
            },
            "line": 41,
            "code": "  it('Deals with relative options.stylesheets when using URLs', done => {\n    uncss(['https://uncss.github.io/uncss/'], {\n      stylesheets: ['https://cdnjs.cloudflare.com/ajax/libs/colors/1.0/colors.min.css', 'stylesheets/stylesheet.css']\n    }, (err, output) => {\n      expect(err).to.equal(null);\n      expect(output).to.equal(prevRun);\n      prevRun = output;\n      done();\n    });\n  });",
            "file": "url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Deals with absolute options.stylesheets when using URLs",
            "suites": [
                "Compile the CSS of an HTML page passed by URL"
            ],
            "updatePoint": {
                "line": 51,
                "column": 61
            },
            "line": 51,
            "code": "  it('Deals with absolute options.stylesheets when using URLs', done => {\n    uncss(['https://uncss.github.io/uncss/'], {\n      stylesheets: ['https://cdnjs.cloudflare.com/ajax/libs/colors/1.0/colors.min.css', '/uncss/stylesheets/stylesheet.css']\n    }, (err, output) => {\n      expect(err).to.equal(null);\n      expect(output).to.equal(prevRun);\n      prevRun = output;\n      done();\n    });\n  });",
            "file": "url.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Deals with local options.stylesheets when using URLs",
            "suites": [
                "Compile the CSS of an HTML page passed by URL"
            ],
            "updatePoint": {
                "line": 61,
                "column": 58
            },
            "line": 61,
            "code": "  it('Deals with local options.stylesheets when using URLs', function (done) {\n    const localStylesheetPath = path.join(__dirname, '/input/main.css');\n    this.timeout(25000);\n    uncss(['https://uncss.github.io/uncss/'], {\n      stylesheets: [path.join('file://', localStylesheetPath)]\n    }, (err, output) => {\n      expect(err).to.equal(null);\n      fs.readFile(localStylesheetPath, 'utf-8', (err, stylesheet) => {\n        if (err) {\n          throw err;\n        } // First line of output is comment added by uncss, so remove before comparing:\n\n\n        output = output.split('\\n').splice(1).join('\\n');\n        expect(output).to.equal(stylesheet);\n        done();\n      });\n    });\n  });",
            "file": "url.js",
            "skipped": false,
            "dir": "tests"
        }
    ],
    "badge": "uncss__uncss.svg"
}