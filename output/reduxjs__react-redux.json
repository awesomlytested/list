{
    "repo": "reduxjs/react-redux",
    "url": "https://github.com/reduxjs/react-redux",
    "branch": "master",
    "configs": [
        {
            "package": "react-redux",
            "lang": "ts",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "returns true only if plain object",
            "suites": [
                "isPlainObject"
            ],
            "updatePoint": {
                "line": 5,
                "column": 39
            },
            "line": 5,
            "code": "  it('returns true only if plain object', () => {\n    const sandbox = { fromAnotherRealm: false }\n    vm.runInNewContext('fromAnotherRealm = {}', sandbox)\n\n    expect(isPlainObject(sandbox.fromAnotherRealm)).toBe(true)\n    expect(isPlainObject(new Test())).toBe(false)\n    expect(isPlainObject(new Date())).toBe(false)\n    expect(isPlainObject([1, 2, 3])).toBe(false)\n    expect(isPlainObject(null)).toBe(false)\n    //@ts-expect-error\n    expect(isPlainObject()).toBe(false)\n    expect(isPlainObject({ x: 1, y: 2 })).toBe(true)\n    expect(isPlainObject(Object.create(null))).toBe(true)\n  })",
            "file": "utils/isPlainObject.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return true if arguments fields are equal",
            "suites": [
                "Utils",
                "shallowEqual"
            ],
            "updatePoint": {
                "line": 5,
                "column": 56
            },
            "line": 5,
            "code": "    it('should return true if arguments fields are equal', () => {\n      expect(\n        shallowEqual({ a: 1, b: 2, c: undefined }, { a: 1, b: 2, c: undefined })\n      ).toBe(true)\n\n      expect(shallowEqual({ a: 1, b: 2, c: 3 }, { a: 1, b: 2, c: 3 })).toBe(\n        true\n      )\n\n      const o = {}\n      expect(shallowEqual({ a: 1, b: 2, c: o }, { a: 1, b: 2, c: o })).toBe(\n        true\n      )\n\n      const d = function () {\n        return 1\n      }\n      expect(\n        shallowEqual({ a: 1, b: 2, c: o, d }, { a: 1, b: 2, c: o, d })\n      ).toBe(true)\n    })",
            "file": "utils/shallowEqual.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return false if arguments fields are different function identities",
            "suites": [
                "Utils",
                "shallowEqual"
            ],
            "updatePoint": {
                "line": 27,
                "column": 81
            },
            "line": 27,
            "code": "    it('should return false if arguments fields are different function identities', () => {\n      expect(\n        shallowEqual(\n          {\n            a: 1,\n            b: 2,\n            d: function () {\n              return 1\n            },\n          },\n          {\n            a: 1,\n            b: 2,\n            d: function () {\n              return 1\n            },\n          }\n        )\n      ).toBe(false)\n    })",
            "file": "utils/shallowEqual.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return false if first argument has too many keys",
            "suites": [
                "Utils",
                "shallowEqual"
            ],
            "updatePoint": {
                "line": 48,
                "column": 63
            },
            "line": 48,
            "code": "    it('should return false if first argument has too many keys', () => {\n      expect(shallowEqual({ a: 1, b: 2, c: 3 }, { a: 1, b: 2 })).toBe(false)\n    })",
            "file": "utils/shallowEqual.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return false if second argument has too many keys",
            "suites": [
                "Utils",
                "shallowEqual"
            ],
            "updatePoint": {
                "line": 52,
                "column": 64
            },
            "line": 52,
            "code": "    it('should return false if second argument has too many keys', () => {\n      expect(shallowEqual({ a: 1, b: 2 }, { a: 1, b: 2, c: 3 })).toBe(false)\n    })",
            "file": "utils/shallowEqual.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return false if arguments have different keys",
            "suites": [
                "Utils",
                "shallowEqual"
            ],
            "updatePoint": {
                "line": 56,
                "column": 60
            },
            "line": 56,
            "code": "    it('should return false if arguments have different keys', () => {\n      expect(\n        shallowEqual(\n          { a: 1, b: 2, c: undefined },\n          { a: 1, bb: 2, c: undefined }\n        )\n      ).toBe(false)\n    })",
            "file": "utils/shallowEqual.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should compare two NaN values",
            "suites": [
                "Utils",
                "shallowEqual"
            ],
            "updatePoint": {
                "line": 65,
                "column": 37
            },
            "line": 65,
            "code": "    it('should compare two NaN values', () => {\n      expect(shallowEqual(NaN, NaN)).toBe(true)\n    })",
            "file": "utils/shallowEqual.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should compare empty objects, with false",
            "suites": [
                "Utils",
                "shallowEqual"
            ],
            "updatePoint": {
                "line": 69,
                "column": 48
            },
            "line": 69,
            "code": "    it('should compare empty objects, with false', () => {\n      expect(shallowEqual({}, false)).toBe(false)\n      expect(shallowEqual(false, {})).toBe(false)\n      expect(shallowEqual([], false)).toBe(false)\n      expect(shallowEqual(false, [])).toBe(false)\n    })",
            "file": "utils/shallowEqual.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should compare two zero values",
            "suites": [
                "Utils",
                "shallowEqual"
            ],
            "updatePoint": {
                "line": 76,
                "column": 38
            },
            "line": 76,
            "code": "    it('should compare two zero values', () => {\n      expect(shallowEqual(0, 0)).toBe(true)\n    })",
            "file": "utils/shallowEqual.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listeners are notified in order",
            "suites": [
                "Subscription"
            ],
            "updatePoint": {
                "line": 26,
                "column": 37
            },
            "line": 26,
            "code": "  it('listeners are notified in order', () => {\n    subscribeChild('child1')\n    subscribeChild('child2')\n    subscribeChild('child3')\n    subscribeChild('child4')\n\n    parent.notifyNestedSubs()\n\n    expect(notifications).toEqual(['child1', 'child2', 'child3', 'child4'])\n  })",
            "file": "utils/Subscription.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listeners can be unsubscribed",
            "suites": [
                "Subscription"
            ],
            "updatePoint": {
                "line": 37,
                "column": 35
            },
            "line": 37,
            "code": "  it('listeners can be unsubscribed', () => {\n    const child1 = subscribeChild('child1')\n    const child2 = subscribeChild('child2')\n    const child3 = subscribeChild('child3')\n\n    child2.tryUnsubscribe()\n    parent.notifyNestedSubs()\n\n    expect(notifications).toEqual(['child1', 'child3'])\n    notifications.length = 0\n\n    child1.tryUnsubscribe()\n    parent.notifyNestedSubs()\n\n    expect(notifications).toEqual(['child3'])\n    notifications.length = 0\n\n    child3.tryUnsubscribe()\n    parent.notifyNestedSubs()\n\n    expect(notifications).toEqual([])\n  })",
            "file": "utils/Subscription.spec.ts",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "reduxjs__react-redux.svg"
}