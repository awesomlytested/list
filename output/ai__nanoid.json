{"repo":"ai/nanoid","url":"https://github.com/ai/nanoid","branch":"main","configs":[{"package":"nanoid","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"prints unique ID","suites":[],"updatePoint":{"line":22,"column":22,"index":309},"line":22,"code":"test('prints unique ID', async () => {\n  let {\n    stdout,\n    stderr\n  } = await exec('node ' + BIN);\n  is(stderr, '');\n  match(stdout, /^[\\w-]{21}\\n$/);\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"uses size","suites":[],"updatePoint":{"line":30,"column":15,"index":461},"line":30,"code":"test('uses size', async () => {\n  let {\n    stdout,\n    stderr\n  } = await exec('node ' + BIN + ' --size 10');\n  is(stderr, '');\n  match(stdout, /^[\\w-]{10}\\n$/);\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"uses alphabet","suites":[],"updatePoint":{"line":38,"column":19,"index":632},"line":38,"code":"test('uses alphabet', async () => {\n  let {\n    stdout,\n    stderr\n  } = await exec('node ' + BIN + ' --alphabet abc --size 15');\n  is(stderr, '');\n  match(stdout, /^[abc]{15}\\n$/);\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"shows an error on unknown argument","suites":[],"updatePoint":{"line":46,"column":40,"index":839},"line":46,"code":"test('shows an error on unknown argument', async () => {\n  try {\n    await exec('node ' + BIN + ' -test');\n  } catch (e) {\n    match(e, /Unknown argument -test/);\n  }\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"shows an error if size is not a number","suites":[],"updatePoint":{"line":53,"column":44,"index":1014},"line":53,"code":"test('shows an error if size is not a number', async () => {\n  try {\n    await exec('node ' + BIN + ' -s abc');\n  } catch (e) {\n    match(e, /Size must be positive integer/);\n  }\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"shows an error on no size with custom alphabet","suites":[],"updatePoint":{"line":60,"column":52,"index":1205},"line":60,"code":"test('shows an error on no size with custom alphabet', async () => {\n  try {\n    await exec('node ' + BIN + ' --alphabet abc');\n  } catch (e) {\n    match(e, /You must also specify size option, when using custom alphabet/);\n  }\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"requires error if size is a negative number","suites":[],"updatePoint":{"line":67,"column":49,"index":1433},"line":67,"code":"test('requires error if size is a negative number', async () => {\n  try {\n    await exec('node ' + BIN + ' --size \"-1\"');\n  } catch (e) {\n    match(e, /Size must be positive integer/);\n  }\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"displays help","suites":[],"updatePoint":{"line":74,"column":19,"index":1596},"line":74,"code":"test('displays help', async () => {\n  let {\n    stdout,\n    stderr\n  } = await exec('node ' + BIN + ' --help');\n  is(stderr, '');\n  match(stdout, /Usage/);\n  match(stdout, /\\$ nanoid \\[options]/);\n});","file":"bin.test.js","skipped":false,"dir":"test"},{"name":"shows error in IE","suites":[],"updatePoint":{"line":16,"column":23,"index":222},"line":16,"code":"test('shows error in IE', () => {\n  throws(() => {\n    // Since uvu runs all tests within same context, ensure to clear require cache\n    delete require.cache[require.resolve('../index.browser')];\n\n    require('../index.browser');\n  }, /IE 11/);\n});","file":"ie.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / generates URL-friendly IDs","suites":[],"updatePoint":{"line":40,"column":53,"index":661},"line":40,"code":"  test(`${type} / nanoid / generates URL-friendly IDs`, () => {\n    for (let i = 0; i < 100; i++) {\n      let id = nanoid();\n      is(id.length, 21);\n      is(typeof id, 'string');\n\n      for (let char of id) {\n        match(urlAlphabet, new RegExp(char, \"g\"));\n      }\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / changes ID length","suites":[],"updatePoint":{"line":51,"column":44,"index":934},"line":51,"code":"  test(`${type} / nanoid / changes ID length`, () => {\n    is(nanoid(10).length, 10);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / accepts string","suites":[],"updatePoint":{"line":54,"column":41,"index":1023},"line":54,"code":"  test(`${type} / nanoid / accepts string`, () => {\n    is(nanoid('10').length, 10);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / has no collisions","suites":[],"updatePoint":{"line":57,"column":44,"index":1117},"line":57,"code":"  test(`${type} / nanoid / has no collisions`, () => {\n    let used = {};\n\n    for (let i = 0; i < 50 * 1000; i++) {\n      let id = nanoid();\n      is(used[id], undefined);\n      used[id] = true;\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / nanoid / has flat distribution","suites":[],"updatePoint":{"line":66,"column":48,"index":1329},"line":66,"code":"  test(`${type} / nanoid / has flat distribution`, () => {\n    let COUNT = 100 * 1000;\n    let LENGTH = nanoid().length;\n    let chars = {};\n\n    for (let i = 0; i < COUNT; i++) {\n      let id = nanoid();\n\n      for (let char of id) {\n        if (!chars[char]) chars[char] = 0;\n        chars[char] += 1;\n      }\n    }\n\n    is(Object.keys(chars).length, urlAlphabet.length);\n    let max = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n\n    for (let k in chars) {\n      let distribution = chars[k] * urlAlphabet.length / (COUNT * LENGTH);\n      if (distribution > max) max = distribution;\n      if (distribution < min) min = distribution;\n    }\n\n    ok(max - min <= 0.05);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / customAlphabet / has options","suites":[],"updatePoint":{"line":92,"column":46,"index":2000},"line":92,"code":"  test(`${type} / customAlphabet / has options`, () => {\n    let nanoidA = customAlphabet('a', 5);\n    is(nanoidA(), 'aaaaa');\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / customAlphabet / has flat distribution","suites":[],"updatePoint":{"line":96,"column":56,"index":2143},"line":96,"code":"  test(`${type} / customAlphabet / has flat distribution`, () => {\n    let COUNT = 50 * 1000;\n    let LENGTH = 30;\n    let ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n    let nanoid2 = customAlphabet(ALPHABET, LENGTH);\n    let chars = {};\n\n    for (let i = 0; i < COUNT; i++) {\n      let id = nanoid2();\n\n      for (let char of id) {\n        if (!chars[char]) chars[char] = 0;\n        chars[char] += 1;\n      }\n    }\n\n    is(Object.keys(chars).length, ALPHABET.length);\n    let max = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n\n    for (let k in chars) {\n      let distribution = chars[k] * ALPHABET.length / (COUNT * LENGTH);\n      if (distribution > max) max = distribution;\n      if (distribution < min) min = distribution;\n    }\n\n    ok(max - min <= 0.05);\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / customRandom / supports generator","suites":[],"updatePoint":{"line":124,"column":51,"index":2901},"line":124,"code":"  test(`${type} / customRandom / supports generator`, () => {\n    let sequence = [2, 255, 3, 7, 7, 7, 7, 7, 0, 1];\n\n    function fakeRandom(size) {\n      let bytes = [];\n\n      for (let i = 0; i < size; i += sequence.length) {\n        bytes = bytes.concat(sequence.slice(0, size - i));\n      }\n\n      return bytes;\n    }\n\n    let nanoid4 = customRandom('abcde', 4, fakeRandom);\n    let nanoid18 = customRandom('abcde', 18, fakeRandom);\n    is(nanoid4(), 'adca');\n    is(nanoid18(), 'cbadcbadcbadcbadcc');\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / urlAlphabet / is string","suites":[],"updatePoint":{"line":142,"column":41,"index":3402},"line":142,"code":"  test(`${type} / urlAlphabet / is string`, () => {\n    is(typeof urlAlphabet, 'string');\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / urlAlphabet / has no duplicates","suites":[],"updatePoint":{"line":145,"column":49,"index":3506},"line":145,"code":"  test(`${type} / urlAlphabet / has no duplicates`, () => {\n    for (let i = 0; i < urlAlphabet.length; i++) {\n      equal(urlAlphabet.lastIndexOf(urlAlphabet[i]), i);\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / random / generates small random buffers","suites":[],"updatePoint":{"line":150,"column":57,"index":3694},"line":150,"code":"  test(`${type} / random / generates small random buffers`, () => {\n    for (let i = 0; i < urlAlphabet.length; i++) {\n      is(random(10).length, 10);\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / random / generates random buffers","suites":[],"updatePoint":{"line":155,"column":51,"index":3852},"line":155,"code":"  test(`${type} / random / generates random buffers`, () => {\n    let numbers = {};\n    let bytes = random(10000);\n    is(bytes.length, 10000);\n\n    for (let byte of bytes) {\n      if (!numbers[byte]) numbers[byte] = 0;\n      numbers[byte] += 1;\n      is(typeof byte, 'number');\n      ok(byte <= 255);\n      ok(byte >= 0);\n    }\n  });","file":"index.test.js","skipped":false,"dir":"test"},{"name":" / proxy number / prevent collision","suites":[],"updatePoint":{"line":170,"column":52,"index":4214},"line":170,"code":"    test(`${type} / proxy number / prevent collision`, () => {\n      let makeProxyNumberToReproducePreviousID = () => {\n        let step = 0;\n        return {\n          valueOf() {\n            // \"if (!pool || pool.length < bytes) {\"\n            if (step === 0) {\n              step++;\n              return 0;\n            } // \"} else if (poolOffset + bytes > pool.length) {\"\n\n\n            if (step === 1) {\n              step++;\n              return -Infinity;\n            } // \"poolOffset += bytes\"\n\n\n            if (step === 2) {\n              step++;\n              return 0;\n            }\n\n            return 21;\n          }\n\n        };\n      };\n\n      let ID1 = nanoid();\n      let ID2 = nanoid(makeProxyNumberToReproducePreviousID());\n      is.not(ID1, ID2);\n    });","file":"index.test.js","skipped":false,"dir":"test"},{"name":"nanoid / generates URL-friendly IDs","suites":[],"updatePoint":{"line":20,"column":41,"index":234},"line":20,"code":"test('nanoid / generates URL-friendly IDs', () => {\n  for (let i = 0; i < 10; i++) {\n    let id = nanoid();\n    is(id.length, 21);\n\n    for (let char of id) {\n      match(urlAlphabet, new RegExp(char, \"g\"));\n    }\n  }\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"nanoid / changes ID length","suites":[],"updatePoint":{"line":30,"column":32,"index":447},"line":30,"code":"test('nanoid / changes ID length', () => {\n  is(nanoid(10).length, 10);\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"nanoid / accepts string","suites":[],"updatePoint":{"line":33,"column":29,"index":520},"line":33,"code":"test('nanoid / accepts string', () => {\n  is(nanoid('10').length, 10);\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"nanoid / has no collisions","suites":[],"updatePoint":{"line":36,"column":32,"index":598},"line":36,"code":"test('nanoid / has no collisions', () => {\n  let used = {};\n\n  for (let i = 0; i < 100 * 1000; i++) {\n    let id = nanoid();\n    is(used[id], undefined);\n    used[id] = true;\n  }\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"nanoid / has flat distribution","suites":[],"updatePoint":{"line":45,"column":36,"index":785},"line":45,"code":"test('nanoid / has flat distribution', () => {\n  let COUNT = 100 * 1000;\n  let LENGTH = nanoid().length;\n  let chars = {};\n\n  for (let i = 0; i < COUNT; i++) {\n    let id = nanoid();\n\n    for (let char of id) {\n      if (!chars[char]) chars[char] = 0;\n      chars[char] += 1;\n    }\n  }\n\n  is(Object.keys(chars).length, urlAlphabet.length);\n  let max = 0;\n  let min = Number.MAX_SAFE_INTEGER;\n\n  for (let k in chars) {\n    let distribution = chars[k] * urlAlphabet.length / (COUNT * LENGTH);\n    if (distribution > max) max = distribution;\n    if (distribution < min) min = distribution;\n  }\n\n  ok(max - min <= 0.05);\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"customAlphabet / has options","suites":[],"updatePoint":{"line":71,"column":34,"index":1404},"line":71,"code":"test('customAlphabet / has options', () => {\n  let nanoidA = customAlphabet('a', 5);\n  is(nanoidA(), 'aaaaa');\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"customAlphabet / has flat distribution","suites":[],"updatePoint":{"line":75,"column":44,"index":1529},"line":75,"code":"test('customAlphabet / has flat distribution', () => {\n  let COUNT = 100 * 1000;\n  let LENGTH = 5;\n  let ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n  let nanoid2 = customAlphabet(ALPHABET, LENGTH);\n  let chars = {};\n\n  for (let i = 0; i < COUNT; i++) {\n    let id = nanoid2();\n\n    for (let char of id) {\n      if (!chars[char]) chars[char] = 0;\n      chars[char] += 1;\n    }\n  }\n\n  is(Object.keys(chars).length, ALPHABET.length);\n  let max = 0;\n  let min = Number.MAX_SAFE_INTEGER;\n\n  for (let k in chars) {\n    let distribution = chars[k] * ALPHABET.length / (COUNT * LENGTH);\n    if (distribution > max) max = distribution;\n    if (distribution < min) min = distribution;\n  }\n\n  ok(max - min <= 0.05);\n});","file":"non-secure.test.js","skipped":false,"dir":"test"},{"name":"warns to use non-secure generator on old browsers","suites":[],"updatePoint":{"line":12,"column":55,"index":181},"line":12,"code":"test('warns to use non-secure generator on old browsers', () => {\n  throws(() => {\n    require('../index.browser');\n  }, /use nanoid\\/non-secure/);\n});","file":"old-browser.test.js","skipped":false,"dir":"test"},{"name":"works with polyfill","suites":[],"updatePoint":{"line":28,"column":25,"index":441},"line":28,"code":"test('works with polyfill', () => {\n  let {\n    nanoid\n  } = require('../index.browser');\n\n  is(typeof nanoid(), 'string');\n});","file":"react-native-polyfill.test.js","skipped":false,"dir":"test"},{"name":"tells to use non-secure generator on old browsers","suites":[],"updatePoint":{"line":17,"column":55,"index":262},"line":17,"code":"test('tells to use non-secure generator on old browsers', () => {\n  throws(() => {\n    // Since uvu runs all tests within same context, ensure to clear require cache\n    delete require.cache[require.resolve('../index.browser')];\n\n    require('../index.browser');\n  }, /React Native does not have/);\n});","file":"react-native.test.js","skipped":false,"dir":"test"}]}