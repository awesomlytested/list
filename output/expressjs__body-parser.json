{"repo":"expressjs/body-parser","url":"https://github.com/expressjs/body-parser","branch":"master","configs":[{"package":"body-parser","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should default to {}","suites":["bodyParser()"],"updatePoint":{"line":13,"column":26},"line":13,"code":"  it('should default to {}', function (done) {\n    request(this.server).post('/').expect(200, '{}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser()"],"updatePoint":{"line":16,"column":23},"line":16,"code":"  it('should parse JSON', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser()"],"updatePoint":{"line":19,"column":40},"line":19,"code":"  it('should parse x-www-form-urlencoded', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser()"],"updatePoint":{"line":22,"column":41},"line":22,"code":"  it('should handle duplicated middleware', function (done) {\n    var _bodyParser = bodyParser();\n\n    var server = http.createServer(function (req, res) {\n      _bodyParser(req, res, function (err0) {\n        _bodyParser(req, res, function (err1) {\n          var err = err0 || err1;\n          res.statusCode = err ? err.status || 500 : 200;\n          res.end(err ? err.message : JSON.stringify(req.body));\n        });\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser()","with type option"],"updatePoint":{"line":71,"column":25},"line":71,"code":"    it('should parse JSON', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser()","with type option"],"updatePoint":{"line":74,"column":42},"line":74,"code":"    it('should parse x-www-form-urlencoded', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should apply to json","suites":["bodyParser()","with verify option"],"updatePoint":{"line":79,"column":28},"line":79,"code":"    it('should apply to json', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send(' {\"user\":\"tobi\"}').expect(403, 'no leading space', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should apply to urlencoded","suites":["bodyParser()","with verify option"],"updatePoint":{"line":87,"column":34},"line":87,"code":"    it('should apply to urlencoded', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(403, 'no leading space', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser.json()"],"updatePoint":{"line":12,"column":23},"line":12,"code":"  it('should parse JSON', function (done) {\n    request(createServer()).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.json()"],"updatePoint":{"line":15,"column":37},"line":15,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').set('Content-Length', '0').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.json()"],"updatePoint":{"line":18,"column":38},"line":18,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').set('Transfer-Encoding', 'chunked').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle no message-body","suites":["bodyParser.json()"],"updatePoint":{"line":21,"column":35},"line":21,"code":"  it('should handle no message-body', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').unset('Transfer-Encoding').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.json()"],"updatePoint":{"line":24,"column":44},"line":24,"code":"  it('should 400 when invalid content-length', function (done) {\n    var jsonParser = bodyParser.json();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      jsonParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"str\":').expect(400, /content length/, done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.json()"],"updatePoint":{"line":33,"column":41},"line":33,"code":"  it('should handle duplicated middleware', function (done) {\n    var jsonParser = bodyParser.json();\n    var server = createServer(function (req, res, next) {\n      jsonParser(req, res, function (err) {\n        if (err) return next(err);\n        jsonParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 for bad token","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":47,"column":32},"line":47,"code":"    it('should 400 for bad token', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{:').expect(400, parseError('{:'), done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 for incomplete","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":50,"column":33},"line":50,"code":"    it('should 400 for incomplete', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\"').expect(400, parseError('{\"user\"'), done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error with type = \"entity.parse.failed\"","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":53,"column":54},"line":53,"code":"    it('should error with type = \"entity.parse.failed\"', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'type').send(' {\"user\"').expect(400, 'entity.parse.failed', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include original body on error object","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":56,"column":52},"line":56,"code":"    it('should include original body on error object', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'body').send(' {\"user\"').expect(400, ' {\"user\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":61,"column":54},"line":61,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'application/json').set('Content-Length', '1034').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error with type = \"entity.too.large\"","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":69,"column":51},"line":69,"code":"    it('should error with type = \"entity.too.large\"', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'application/json').set('Content-Length', '1034').set('X-Error-Property', 'type').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, 'entity.too.large', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":77,"column":56},"line":77,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write('{\"str\":');\n      test.write('\"' + buf.toString() + '\"}');\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":89,"column":37},"line":89,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'application/json').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":97,"column":46},"line":97,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'application/json').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":108,"column":32},"line":108,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.json()","with inflate option","when false"],"updatePoint":{"line":128,"column":44},"line":128,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/json');\n        test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n        test.expect(415, 'content encoding unsupported', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.json()","with inflate option","when true"],"updatePoint":{"line":142,"column":40},"line":142,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/json');\n        test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n        test.expect(200, '{\"name\":\"论\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 on primitives","suites":["bodyParser.json()","with strict option","when undefined"],"updatePoint":{"line":156,"column":34},"line":156,"code":"      it('should 400 on primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(400, parseError('#rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse primitives","suites":["bodyParser.json()","with strict option","when false"],"updatePoint":{"line":166,"column":33},"line":166,"code":"      it('should parse primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(200, 'true', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not parse primitives","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":176,"column":37},"line":176,"code":"      it('should not parse primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(400, parseError('#rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not parse primitives with leading whitespaces","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":179,"column":62},"line":179,"code":"      it('should not parse primitives with leading whitespaces', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('    true').expect(400, parseError('    #rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow leading whitespaces in JSON","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":182,"column":50},"line":182,"code":"      it('should allow leading whitespaces in JSON', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('   { \"user\": \"tobi\" }').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error with type = \"entity.parse.failed\"","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":185,"column":56},"line":185,"code":"      it('should error with type = \"entity.parse.failed\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'type').send('true').expect(400, 'entity.parse.failed', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include correct message in stack trace","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":188,"column":55},"line":188,"code":"      it('should include correct message in stack trace', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'stack').send('true').expect(400).expect(shouldContainInBody(parseError('#rue').replace('#', 't'))).end(done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for custom type","suites":["bodyParser.json()","with type option","when \"application/vnd.api+json\""],"updatePoint":{"line":200,"column":43},"line":200,"code":"      it('should parse JSON for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.json()","with type option","when \"application/vnd.api+json\""],"updatePoint":{"line":203,"column":37},"line":203,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for \"application/json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":213,"column":50},"line":213,"code":"      it('should parse JSON for \"application/json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for \"application/vnd.api+json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":216,"column":58},"line":216,"code":"      it('should parse JSON for \"application/vnd.api+json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should ignore \"application/x-json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":219,"column":44},"line":219,"code":"      it('should ignore \"application/x-json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-json').send('{\"user\":\"tobi\"}').expect(200, '{}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":224,"column":49},"line":224,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.api+json';\n        }\n\n        request(server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":235,"column":42},"line":235,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('{\"user\":\"tobi\"}');\n        test.expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":248,"column":42},"line":248,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should assert value if function","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":262,"column":39},"line":262,"code":"    it('should assert value if function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":267,"column":32},"line":267,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('[\"tobi\"]').expect(403, 'no arrays', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error with type = \"entity.verify.failed\"","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":275,"column":55},"line":275,"code":"    it('should error with type = \"entity.verify.failed\"', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'type').send('[\"tobi\"]').expect(403, 'entity.verify.failed', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":283,"column":33},"line":283,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x5b) return;\n          var err = new Error('no arrays');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('[\"tobi\"]').expect(400, 'no arrays', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow custom type","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":294,"column":32},"line":294,"code":"    it('should allow custom type', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x5b) return;\n          var err = new Error('no arrays');\n          err.type = 'foo.bar';\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'type').send('[\"tobi\"]').expect(403, 'foo.bar', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include original body on error object","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":305,"column":52},"line":305,"code":"    it('should include original body on error object', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'body').send('[\"tobi\"]').expect(403, '[\"tobi\"]', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":313,"column":33},"line":313,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should work with different charsets","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":321,"column":43},"line":321,"code":"    it('should work with different charsets', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-16');\n      test.write(Buffer.from('feff007b0022006e0061006d00650022003a00228bba0022007d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":332,"column":53},"line":332,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, 'unsupported charset \"X-BOGUS\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.json()","charset"],"updatePoint":{"line":348,"column":26},"line":348,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-8');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse utf-16","suites":["bodyParser.json()","charset"],"updatePoint":{"line":354,"column":27},"line":354,"code":"    it('should parse utf-16', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-16');\n      test.write(Buffer.from('feff007b0022006e0061006d00650022003a00228bba0022007d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.json()","charset"],"updatePoint":{"line":360,"column":55},"line":360,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-8');\n      test.set('Content-Length', '13');\n      test.write(Buffer.from('7b2274657374223a22c3a5227d', 'hex'));\n      test.expect(200, '{\"test\":\"å\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.json()","charset"],"updatePoint":{"line":367,"column":31},"line":367,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should fail on unknown charset","suites":["bodyParser.json()","charset"],"updatePoint":{"line":373,"column":38},"line":373,"code":"    it('should fail on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=koi8-r');\n      test.write(Buffer.from('7b226e616d65223a22cec5d4227d', 'hex'));\n      test.expect(415, 'unsupported charset \"KOI8-R\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error with type = \"charset.unsupported\"","suites":["bodyParser.json()","charset"],"updatePoint":{"line":379,"column":54},"line":379,"code":"    it('should error with type = \"charset.unsupported\"', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=koi8-r');\n      test.set('X-Error-Property', 'type');\n      test.write(Buffer.from('7b226e616d65223a22cec5d4227d', 'hex'));\n      test.expect(415, 'charset.unsupported', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":393,"column":37},"line":393,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":399,"column":40},"line":399,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":406,"column":36},"line":406,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":413,"column":39},"line":413,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('789cab56ca4bcc4d55b2527ab16e97522d00274505ac', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":420,"column":34},"line":420,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":427,"column":38},"line":427,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, 'unsupported content encoding \"nulls\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error with type = \"encoding.unsupported\"","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":434,"column":55},"line":434,"code":"    it('should error with type = \"encoding.unsupported\"', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/json');\n      test.set('X-Error-Property', 'type');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, 'encoding.unsupported', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 on malformed encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":442,"column":40},"line":442,"code":"    it('should 400 on malformed encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56cc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(400, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated value exceeds limit","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":449,"column":52},"line":449,"code":"    it('should 413 when inflated value exceeds limit', function (done) {\n      // gzip'd data exceeds 1kb, but deflated below 1kb\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bedc1010d000000c2a0f74f6d0f071400000000000000', 'hex'));\n      test.write(Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex'));\n      test.write(Buffer.from('0000000000000000004f0625b3b71650c30000', 'hex'));\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse application/octet-stream","suites":["bodyParser.raw()"],"updatePoint":{"line":15,"column":43},"line":15,"code":"  it('should parse application/octet-stream', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').send('the user is tobi').expect(200, 'buf:746865207573657220697320746f6269', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.raw()"],"updatePoint":{"line":18,"column":44},"line":18,"code":"  it('should 400 when invalid content-length', function (done) {\n    var rawParser = bodyParser.raw();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      rawParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/octet-stream').send('stuff').expect(400, /content length/, done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.raw()"],"updatePoint":{"line":27,"column":37},"line":27,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').set('Content-Length', '0').expect(200, 'buf:', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.raw()"],"updatePoint":{"line":30,"column":38},"line":30,"code":"  it('should handle empty message-body', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').set('Transfer-Encoding', 'chunked').send('').expect(200, 'buf:', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.raw()"],"updatePoint":{"line":33,"column":41},"line":33,"code":"  it('should handle duplicated middleware', function (done) {\n    var rawParser = bodyParser.raw();\n    var server = createServer(function (req, res, next) {\n      rawParser(req, res, function (err) {\n        if (err) return next(err);\n        rawParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/octet-stream').send('the user is tobi').expect(200, 'buf:746865207573657220697320746f6269', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":44,"column":54},"line":44,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.set('Content-Length', '1028');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":55,"column":56},"line":55,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":66,"column":37},"line":66,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: 1024\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":76,"column":46},"line":76,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":88,"column":32},"line":88,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.raw()","with inflate option","when false"],"updatePoint":{"line":108,"column":44},"line":108,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(415, 'content encoding unsupported', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.raw()","with inflate option","when true"],"updatePoint":{"line":122,"column":40},"line":122,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(200, 'buf:6e616d653de8aeba', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.raw()","with type option","when \"application/vnd+octets\""],"updatePoint":{"line":138,"column":38},"line":138,"code":"      it('should parse for custom type', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/vnd+octets');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.raw()","with type option","when \"application/vnd+octets\""],"updatePoint":{"line":144,"column":37},"line":144,"code":"      it('should ignore standard type', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, '{}', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse \"application/octet-stream\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":157,"column":49},"line":157,"code":"      it('should parse \"application/octet-stream\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse \"application/vnd+octets\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":163,"column":47},"line":163,"code":"      it('should parse \"application/vnd+octets\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/vnd+octets');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore \"application/x-foo\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":169,"column":43},"line":169,"code":"      it('should ignore \"application/x-foo\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/x-foo');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, '{}', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":177,"column":49},"line":177,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.octet';\n        }\n\n        var test = request(server).post('/');\n        test.set('Content-Type', 'application/vnd.octet');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":191,"column":42},"line":191,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":204,"column":42},"line":204,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should assert value is function","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":218,"column":39},"line":218,"code":"    it('should assert value is function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":223,"column":32},"line":223,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x00) throw new Error('no leading null');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000102', 'hex'));\n      test.expect(403, 'no leading null', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":234,"column":33},"line":234,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x00) return;\n          var err = new Error('no leading null');\n          err.status = 400;\n          throw err;\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000102', 'hex'));\n      test.expect(400, 'no leading null', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":248,"column":33},"line":248,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x00) throw new Error('no leading null');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('0102', 'hex'));\n      test.expect(200, 'buf:0102', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore charset","suites":["bodyParser.raw()","charset"],"updatePoint":{"line":264,"column":29},"line":264,"code":"    it('should ignore charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/octet-stream; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d6520697320e8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":277,"column":37},"line":277,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":283,"column":40},"line":283,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":290,"column":36},"line":290,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":297,"column":39},"line":297,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('789ccb4bcc4db57db16e17001068042f', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":304,"column":34},"line":304,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":311,"column":38},"line":311,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, 'unsupported content encoding \"nulls\"', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse text/plain","suites":["bodyParser.text()"],"updatePoint":{"line":15,"column":29},"line":15,"code":"  it('should parse text/plain', function (done) {\n    request(this.server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.text()"],"updatePoint":{"line":18,"column":44},"line":18,"code":"  it('should 400 when invalid content-length', function (done) {\n    var textParser = bodyParser.text();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      textParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'text/plain').send('user').expect(400, /content length/, done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.text()"],"updatePoint":{"line":27,"column":37},"line":27,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'text/plain').set('Content-Length', '0').expect(200, '\"\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.text()"],"updatePoint":{"line":32,"column":38},"line":32,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'text/plain').set('Transfer-Encoding', 'chunked').send('').expect(200, '\"\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.text()"],"updatePoint":{"line":37,"column":41},"line":37,"code":"  it('should handle duplicated middleware', function (done) {\n    var textParser = bodyParser.text();\n    var server = createServer(function (req, res, next) {\n      textParser(req, res, function (err) {\n        if (err) return next(err);\n        textParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should change default charset","suites":["bodyParser.text()","with defaultCharset option"],"updatePoint":{"line":48,"column":37},"line":48,"code":"    it('should change default charset', function (done) {\n      var server = createServer({\n        defaultCharset: 'koi8-r'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320cec5d4', 'hex'));\n      test.expect(200, '\"name is нет\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should honor content-type charset","suites":["bodyParser.text()","with defaultCharset option"],"updatePoint":{"line":57,"column":41},"line":57,"code":"    it('should honor content-type charset', function (done) {\n      var server = createServer({\n        defaultCharset: 'koi8-r'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":68,"column":54},"line":68,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'text/plain').set('Content-Length', '1028').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":74,"column":56},"line":74,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write(buf.toString());\n      test.expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":85,"column":37},"line":85,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'text/plain').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":91,"column":46},"line":91,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'text/plain').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":100,"column":32},"line":100,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.text()","with inflate option","when false"],"updatePoint":{"line":120,"column":44},"line":120,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'text/plain');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n        test.expect(415, 'content encoding unsupported', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.text()","with inflate option","when true"],"updatePoint":{"line":134,"column":40},"line":134,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'text/plain');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n        test.expect(200, '\"name is 论\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.text()","with type option","when \"text/html\""],"updatePoint":{"line":150,"column":38},"line":150,"code":"      it('should parse for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/html').send('<b>tobi</b>').expect(200, '\"<b>tobi</b>\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.text()","with type option","when \"text/html\""],"updatePoint":{"line":153,"column":37},"line":153,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '{}', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse \"text/html\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":163,"column":34},"line":163,"code":"      it('should parse \"text/html\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/html').send('<b>tobi</b>').expect(200, '\"<b>tobi</b>\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse \"text/plain\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":166,"column":35},"line":166,"code":"      it('should parse \"text/plain\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/plain').send('tobi').expect(200, '\"tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should ignore \"text/xml\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":169,"column":34},"line":169,"code":"      it('should ignore \"text/xml\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/xml').send('<user>tobi</user>').expect(200, '{}', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":174,"column":49},"line":174,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'text/vnd.something';\n        }\n\n        request(server).post('/').set('Content-Type', 'text/vnd.something').send('user is tobi').expect(200, '\"user is tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":185,"column":42},"line":185,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('user is tobi');\n        test.expect(200, '\"user is tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":198,"column":42},"line":198,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should assert value is function","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":212,"column":39},"line":212,"code":"    it('should assert value is function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":217,"column":32},"line":217,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send(' user is tobi').expect(403, 'no leading space', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":225,"column":33},"line":225,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send(' user is tobi').expect(400, 'no leading space', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":236,"column":33},"line":236,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":244,"column":53},"line":244,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, 'unsupported charset \"X-BOGUS\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.text()","charset"],"updatePoint":{"line":260,"column":26},"line":260,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse codepage charsets","suites":["bodyParser.text()","charset"],"updatePoint":{"line":266,"column":38},"line":266,"code":"    it('should parse codepage charsets', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=koi8-r');\n      test.write(Buffer.from('6e616d6520697320cec5d4', 'hex'));\n      test.expect(200, '\"name is нет\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.text()","charset"],"updatePoint":{"line":272,"column":55},"line":272,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.set('Content-Length', '11');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.text()","charset"],"updatePoint":{"line":279,"column":31},"line":279,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset","suites":["bodyParser.text()","charset"],"updatePoint":{"line":285,"column":37},"line":285,"code":"    it('should 415 on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, 'unsupported charset \"X-BOGUS\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":298,"column":37},"line":298,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":304,"column":40},"line":304,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":311,"column":36},"line":311,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":318,"column":39},"line":318,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('789ccb4bcc4d55c82c5678b16e17001a6f050e', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":325,"column":34},"line":325,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":332,"column":38},"line":332,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, 'unsupported content encoding \"nulls\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":15,"column":40},"line":15,"code":"  it('should parse x-www-form-urlencoded', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":18,"column":44},"line":18,"code":"  it('should 400 when invalid content-length', function (done) {\n    var urlencodedParser = bodyParser.urlencoded();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      urlencodedParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=').expect(400, /content length/, done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":27,"column":37},"line":27,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Content-Length', '0').send('').expect(200, '{}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":30,"column":38},"line":30,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Transfer-Encoding', 'chunked').send('').expect(200, '{}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":35,"column":41},"line":35,"code":"  it('should handle duplicated middleware', function (done) {\n    var urlencodedParser = bodyParser.urlencoded();\n    var server = createServer(function (req, res, next) {\n      urlencodedParser(req, res, function (err) {\n        if (err) return next(err);\n        urlencodedParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse extended syntax","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":45,"column":34},"line":45,"code":"  it('should parse extended syntax', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not parse extended syntax","suites":["bodyParser.urlencoded()","with extended option","when false"],"updatePoint":{"line":55,"column":42},"line":55,"code":"      it('should not parse extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user[name][first]\":\"Tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse multiple key instances","suites":["bodyParser.urlencoded()","with extended option","when false"],"updatePoint":{"line":58,"column":45},"line":58,"code":"      it('should parse multiple key instances', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=Tobi&user=Loki').expect(200, '{\"user\":[\"Tobi\",\"Loki\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse multiple key instances","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":68,"column":45},"line":68,"code":"      it('should parse multiple key instances', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=Tobi&user=Loki').expect(200, '{\"user\":[\"Tobi\",\"Loki\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse extended syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":71,"column":38},"line":71,"code":"      it('should parse extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse parameters with dots","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":74,"column":43},"line":74,"code":"      it('should parse parameters with dots', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user.name=Tobi').expect(200, '{\"user.name\":\"Tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse fully-encoded extended syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":77,"column":52},"line":77,"code":"      it('should parse fully-encoded extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user%5Bname%5D%5Bfirst%5D=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array index notation","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":80,"column":43},"line":80,"code":"      it('should parse array index notation', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('foo[0]=bar&foo[1]=baz').expect(200, '{\"foo\":[\"bar\",\"baz\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array index notation with large array","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":83,"column":60},"line":83,"code":"      it('should parse array index notation with large array', function (done) {\n        var str = 'f[0]=0';\n\n        for (var i = 1; i < 500; i++) {\n          str += '&f[' + i + ']=' + i.toString(16);\n        }\n\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(str).expect(function (res) {\n          var obj = JSON.parse(res.text);\n          assert.strictEqual(Object.keys(obj).length, 1);\n          assert.strictEqual(Array.isArray(obj.f), true);\n          assert.strictEqual(obj.f.length, 500);\n        }).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array of objects syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":97,"column":46},"line":97,"code":"      it('should parse array of objects syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('foo[0][bar]=baz&foo[0][fizz]=buzz&foo[]=done!').expect(200, '{\"foo\":[{\"bar\":\"baz\",\"fizz\":\"buzz\"},\"done!\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse deep object","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":100,"column":34},"line":100,"code":"      it('should parse deep object', function (done) {\n        var str = 'foo';\n\n        for (var i = 0; i < 500; i++) {\n          str += '[p]';\n        }\n\n        str += '=bar';\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(str).expect(function (res) {\n          var obj = JSON.parse(res.text);\n          assert.strictEqual(Object.keys(obj).length, 1);\n          assert.strictEqual(typeof obj.foo, 'object');\n          var depth = 0;\n          var ref = obj.foo;\n\n          while (ref = ref.p) {\n            depth++;\n          }\n\n          assert.strictEqual(depth, 500);\n        }).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.urlencoded()","with inflate option","when false"],"updatePoint":{"line":131,"column":44},"line":131,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/x-www-form-urlencoded');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(415, 'content encoding unsupported', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.urlencoded()","with inflate option","when true"],"updatePoint":{"line":145,"column":40},"line":145,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/x-www-form-urlencoded');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(200, '{\"name\":\"论\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":155,"column":54},"line":155,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Content-Length', '1028').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":161,"column":56},"line":161,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write('str=');\n      test.write(buf.toString());\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":173,"column":37},"line":173,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":179,"column":46},"line":179,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":188,"column":32},"line":188,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject 0","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":203,"column":25},"line":203,"code":"      it('should reject 0', function () {\n        assert.throws(createServer.bind(null, {\n          extended: false,\n          parameterLimit: 0\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject string","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":209,"column":30},"line":209,"code":"      it('should reject string', function () {\n        assert.throws(createServer.bind(null, {\n          extended: false,\n          parameterLimit: 'beep'\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 if over limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":215,"column":34},"line":215,"code":"      it('should 413 if over limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, /too many parameters/, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should error with type = \"parameters.too.many\"","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":221,"column":56},"line":221,"code":"      it('should error with type = \"parameters.too.many\"', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('X-Error-Property', 'type').send(createManyParams(11)).expect(413, 'parameters.too.many', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work when at the limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":227,"column":39},"line":227,"code":"      it('should work when at the limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10)).expect(expectKeyCount(10)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work if number is floating point","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":233,"column":49},"line":233,"code":"      it('should work if number is floating point', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10.1\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, /too many parameters/, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with large limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":239,"column":38},"line":239,"code":"      it('should work with large limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 5000\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(5000)).expect(expectKeyCount(5000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with Infinity limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":245,"column":41},"line":245,"code":"      it('should work with Infinity limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: Infinity\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10000)).expect(expectKeyCount(10000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject 0","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":253,"column":25},"line":253,"code":"      it('should reject 0', function () {\n        assert.throws(createServer.bind(null, {\n          extended: true,\n          parameterLimit: 0\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject string","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":259,"column":30},"line":259,"code":"      it('should reject string', function () {\n        assert.throws(createServer.bind(null, {\n          extended: true,\n          parameterLimit: 'beep'\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 if over limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":265,"column":34},"line":265,"code":"      it('should 413 if over limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, /too many parameters/, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should error with type = \"parameters.too.many\"","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":271,"column":56},"line":271,"code":"      it('should error with type = \"parameters.too.many\"', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('X-Error-Property', 'type').send(createManyParams(11)).expect(413, 'parameters.too.many', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work when at the limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":277,"column":39},"line":277,"code":"      it('should work when at the limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10)).expect(expectKeyCount(10)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work if number is floating point","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":283,"column":49},"line":283,"code":"      it('should work if number is floating point', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10.1\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, /too many parameters/, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with large limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":289,"column":38},"line":289,"code":"      it('should work with large limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 5000\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(5000)).expect(expectKeyCount(5000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with Infinity limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":295,"column":41},"line":295,"code":"      it('should work with Infinity limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: Infinity\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10000)).expect(expectKeyCount(10000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.urlencoded()","with type option","when \"application/vnd.x-www-form-urlencoded\""],"updatePoint":{"line":310,"column":38},"line":310,"code":"      it('should parse for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.urlencoded()","with type option","when \"application/vnd.x-www-form-urlencoded\""],"updatePoint":{"line":313,"column":37},"line":313,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse \"application/x-www-form-urlencoded\"","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":323,"column":58},"line":323,"code":"      it('should parse \"application/x-www-form-urlencoded\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse \"application/x-pairs\"","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":326,"column":44},"line":326,"code":"      it('should parse \"application/x-pairs\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-pairs').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should ignore application/x-foo","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":329,"column":41},"line":329,"code":"      it('should ignore application/x-foo', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-foo').send('user=tobi').expect(200, '{}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":334,"column":49},"line":334,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.something';\n        }\n\n        request(server).post('/').set('Content-Type', 'application/vnd.something').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":345,"column":42},"line":345,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('user=tobi');\n        test.expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":358,"column":42},"line":358,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should assert value if function","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":372,"column":39},"line":372,"code":"    it('should assert value if function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":377,"column":32},"line":377,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(403, 'no leading space', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should error with type = \"entity.verify.failed\"","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":385,"column":55},"line":385,"code":"    it('should error with type = \"entity.verify.failed\"', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('X-Error-Property', 'type').send(' user=tobi').expect(403, 'entity.verify.failed', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":393,"column":33},"line":393,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(400, 'no leading space', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow custom type","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":404,"column":32},"line":404,"code":"    it('should allow custom type', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.type = 'foo.bar';\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('X-Error-Property', 'type').send(' user=tobi').expect(403, 'foo.bar', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":415,"column":33},"line":415,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":423,"column":53},"line":423,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, 'unsupported charset \"X-BOGUS\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":439,"column":26},"line":439,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":445,"column":55},"line":445,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');\n      test.set('Content-Length', '7');\n      test.write(Buffer.from('746573743dc3a5', 'hex'));\n      test.expect(200, '{\"test\":\"å\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":452,"column":31},"line":452,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should fail on unknown charset","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":458,"column":38},"line":458,"code":"    it('should fail on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=koi8-r');\n      test.write(Buffer.from('6e616d653dcec5d4', 'hex'));\n      test.expect(415, 'unsupported charset \"KOI8-R\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":471,"column":37},"line":471,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":477,"column":40},"line":477,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":484,"column":36},"line":484,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":491,"column":39},"line":491,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('789ccb4bcc4db57db16e17001068042f', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":498,"column":34},"line":498,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":505,"column":38},"line":505,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, 'unsupported content encoding \"nulls\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"}]}