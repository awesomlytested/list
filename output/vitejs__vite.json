{"repo":"vitejs/vite","url":"https://github.com/vitejs/vite","branch":"main","configs":[{"package":"create-vite","lang":"ts","dir":"packages/create-vite/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-alias","lang":"ts","dir":"packages/playground/alias/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-assets","lang":"ts","dir":"packages/playground/assets/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-backend-integration","lang":"ts","dir":"packages/playground/backend-integration/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-cli-module","lang":"ts","dir":"packages/playground/cli-module/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-cli","lang":"ts","dir":"packages/playground/cli/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-css-codesplit-cjs","lang":"ts","dir":"packages/playground/css-codesplit-cjs/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-css-codesplit","lang":"ts","dir":"packages/playground/css-codesplit/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-css","lang":"ts","dir":"packages/playground/css/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-data-uri","lang":"ts","dir":"packages/playground/data-uri/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-define","lang":"ts","dir":"packages/playground/define/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-dynamic-import","lang":"ts","dir":"packages/playground/dynamic-import/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-env","lang":"ts","dir":"packages/playground/env/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-extensions","lang":"ts","dir":"packages/playground/extensions/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-file-delete-restore","lang":"ts","dir":"packages/playground/file-delete-restore/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-fs-serve","lang":"ts","dir":"packages/playground/fs-serve/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-import-context","lang":"ts","dir":"packages/playground/glob-import/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-hmr","lang":"ts","dir":"packages/playground/hmr/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-html","lang":"ts","dir":"packages/playground/html/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-json","lang":"ts","dir":"packages/playground/json/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-legacy","lang":"ts","dir":"packages/playground/legacy/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@example/my-lib","lang":"ts","dir":"packages/playground/lib/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"multiple-entrypoints","lang":"ts","dir":"packages/playground/multiple-entrypoints/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@test/nested-deps","lang":"ts","dir":"packages/playground/nested-deps/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-optimize-deps","lang":"ts","dir":"packages/playground/optimize-deps/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-preload","lang":"ts","dir":"packages/playground/preload/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"preserve-symlinks","lang":"ts","dir":"packages/playground/preserve-symlinks/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-react-emotion","lang":"ts","dir":"packages/playground/react-emotion/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-react","lang":"ts","dir":"packages/playground/react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-resolve","lang":"ts","dir":"packages/playground/resolve/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-deps","lang":"ts","dir":"packages/playground/ssr-deps/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-html","lang":"ts","dir":"packages/playground/ssr-html/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-pug","lang":"ts","dir":"packages/playground/ssr-pug/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-react","lang":"ts","dir":"packages/playground/ssr-react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-vue","lang":"ts","dir":"packages/playground/ssr-vue/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-webworker","lang":"ts","dir":"packages/playground/ssr-webworker/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"tsconfig-json-load-error","lang":"ts","dir":"packages/playground/tsconfig-json-load-error/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"tsconfig-json","lang":"ts","dir":"packages/playground/tsconfig-json/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-vue-jsx","lang":"ts","dir":"packages/playground/vue-jsx/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-vue","lang":"ts","dir":"packages/playground/vue/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-wasm","lang":"ts","dir":"packages/playground/wasm/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-worker","lang":"ts","dir":"packages/playground/worker/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"prompts for the project name if none supplied","suites":[],"updatePoint":{"line":38,"column":51},"line":38,"code":"test('prompts for the project name if none supplied', () => {\n  const { stdout, exitCode } = run([])\n  expect(stdout).toContain('Project name:')\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"prompts for the framework if none supplied","suites":[],"updatePoint":{"line":43,"column":48},"line":43,"code":"test('prompts for the framework if none supplied', () => {\n  const { stdout } = run([projectName])\n  expect(stdout).toContain('Select a framework:')\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"prompts for the framework on not supplying a value for --template","suites":[],"updatePoint":{"line":48,"column":71},"line":48,"code":"test('prompts for the framework on not supplying a value for --template', () => {\n  const { stdout } = run([projectName, '--template'])\n  expect(stdout).toContain('Select a framework:')\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"prompts for the framework on supplying an invalid template","suites":[],"updatePoint":{"line":53,"column":64},"line":53,"code":"test('prompts for the framework on supplying an invalid template', () => {\n  const { stdout } = run([projectName, '--template', 'unknown'])\n  expect(stdout).toContain(\n    `\"unknown\" isn't a valid template. Please choose from below:`\n  )\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"asks to overwrite non-empty target directory","suites":[],"updatePoint":{"line":60,"column":50},"line":60,"code":"test('asks to overwrite non-empty target directory', () => {\n  createNonEmptyDir()\n  const { stdout } = run([projectName], { cwd: __dirname })\n  expect(stdout).toContain(`Target directory \"${projectName}\" is not empty.`)\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"asks to overwrite non-empty current directory","suites":[],"updatePoint":{"line":66,"column":51},"line":66,"code":"test('asks to overwrite non-empty current directory', () => {\n  createNonEmptyDir()\n  const { stdout } = run(['.'], { cwd: genPath, input: 'test-app\\n' })\n  expect(stdout).toContain(`Current directory is not empty.`)\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"successfully scaffolds a project based on vue starter template","suites":[],"updatePoint":{"line":72,"column":68},"line":72,"code":"test('successfully scaffolds a project based on vue starter template', () => {\n  const { stdout } = run([projectName, '--template', 'vue'], {\n    cwd: __dirname\n  })\n  const generatedFiles = readdirSync(genPath).sort()\n\n  // Assertions\n  expect(stdout).toContain(`Scaffolding project in ${genPath}`)\n  expect(templateFiles).toEqual(generatedFiles)\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"works with the -t alias","suites":[],"updatePoint":{"line":83,"column":29},"line":83,"code":"test('works with the -t alias', () => {\n  const { stdout } = run([projectName, '-t', 'vue'], {\n    cwd: __dirname\n  })\n  const generatedFiles = readdirSync(genPath).sort()\n\n  // Assertions\n  expect(stdout).toContain(`Scaffolding project in ${genPath}`)\n  expect(templateFiles).toEqual(generatedFiles)\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"fs","suites":[],"updatePoint":{"line":3,"column":8},"line":3,"code":"test('fs', async () => {\n  expect(await page.textContent('.fs')).toMatch('[success] alias to fs path')\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"fs directory","suites":[],"updatePoint":{"line":7,"column":18},"line":7,"code":"test('fs directory', async () => {\n  expect(await page.textContent('.fs-dir')).toMatch(\n    '[success] alias to directory'\n  )\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"regex","suites":[],"updatePoint":{"line":13,"column":11},"line":13,"code":"test('regex', async () => {\n  expect(await page.textContent('.regex')).toMatch(\n    '[success] alias to directory via regex'\n  )\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"dependency","suites":[],"updatePoint":{"line":19,"column":16},"line":19,"code":"test('dependency', async () => {\n  expect(await page.textContent('.dep')).toMatch('[success] out of root')\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"js via script src","suites":[],"updatePoint":{"line":23,"column":23},"line":23,"code":"test('js via script src', async () => {\n  expect(await page.textContent('.from-script-src')).toMatch(\n    '[success] from script src'\n  )\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"css via link","suites":[],"updatePoint":{"line":29,"column":18},"line":29,"code":"test('css via link', async () => {\n  expect(await getColor('body')).toBe('grey')\n  editFile('dir/test.css', (code) => code.replace('grey', 'red'))\n  await untilUpdated(() => getColor('body'), 'red')\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"optimized dep","suites":[],"updatePoint":{"line":35,"column":19},"line":35,"code":"test('optimized dep', async () => {\n  expect(await page.textContent('.optimized')).toMatch(\n    '[success] alias optimized'\n  )\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"aliased module","suites":[],"updatePoint":{"line":41,"column":20},"line":41,"code":"test('aliased module', async () => {\n  expect(await page.textContent('.aliased-module')).toMatch(\n    '[success] aliased module'\n  )\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"custom resolver","suites":[],"updatePoint":{"line":47,"column":21},"line":47,"code":"test('custom resolver', async () => {\n  expect(await page.textContent('.custom-resolver')).toMatch(\n    '[success] alias to custom-resolver path'\n  )\n})","file":"alias.spec.ts","skipped":false,"dir":"packages/playground/alias/__tests__"},{"name":"should have no 404s","suites":[],"updatePoint":{"line":21,"column":25},"line":21,"code":"test('should have no 404s', () => {\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('404')\n  })\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"@vite/client","suites":["injected scripts"],"updatePoint":{"line":28,"column":20},"line":28,"code":"  test('@vite/client', async () => {\n    const hasClient = await page.$(\n      'script[type=\"module\"][src=\"/foo/@vite/client\"]'\n    )\n    if (isBuild) {\n      expect(hasClient).toBeFalsy()\n    } else {\n      expect(hasClient).toBeTruthy()\n    }\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"html-proxy","suites":["injected scripts"],"updatePoint":{"line":39,"column":18},"line":39,"code":"  test('html-proxy', async () => {\n    const hasHtmlProxy = await page.$(\n      'script[type=\"module\"][src^=\"/foo/index.html?html-proxy\"]'\n    )\n    if (isBuild) {\n      expect(hasHtmlProxy).toBeFalsy()\n    } else {\n      expect(hasHtmlProxy).toBeTruthy()\n    }\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"load raw js from /public","suites":["raw references from /public"],"updatePoint":{"line":52,"column":32},"line":52,"code":"  test('load raw js from /public', async () => {\n    expect(await page.textContent('.raw-js')).toMatch('[success]')\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"load raw css from /public","suites":["raw references from /public"],"updatePoint":{"line":56,"column":33},"line":56,"code":"  test('load raw css from /public', async () => {\n    expect(await getColor('.raw-css')).toBe('red')\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"import-expression from simple script","suites":["raw references from /public"],"updatePoint":{"line":61,"column":42},"line":61,"code":"test('import-expression from simple script', async () => {\n  expect(await page.textContent('.import-expression')).toMatch(\n    '[success][success]'\n  )\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"relative","suites":["asset imports from js"],"updatePoint":{"line":68,"column":16},"line":68,"code":"  test('relative', async () => {\n    expect(await page.textContent('.asset-import-relative')).toMatch(assetMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"absolute","suites":["asset imports from js"],"updatePoint":{"line":72,"column":16},"line":72,"code":"  test('absolute', async () => {\n    expect(await page.textContent('.asset-import-absolute')).toMatch(assetMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"from /public","suites":["asset imports from js"],"updatePoint":{"line":76,"column":20},"line":76,"code":"  test('from /public', async () => {\n    expect(await page.textContent('.public-import')).toMatch(iconMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"fonts","suites":["css url() references"],"updatePoint":{"line":82,"column":13},"line":82,"code":"  test('fonts', async () => {\n    expect(\n      await page.evaluate(() => {\n        return (document as any).fonts.check('700 32px Inter')\n      })\n    ).toBe(true)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"relative","suites":["css url() references"],"updatePoint":{"line":90,"column":16},"line":90,"code":"  test('relative', async () => {\n    expect(await getBg('.css-url-relative')).toMatch(assetMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"image-set relative","suites":["css url() references"],"updatePoint":{"line":94,"column":26},"line":94,"code":"  test('image-set relative', async () => {\n    const imageSet = await getBg('.css-image-set-relative')\n    imageSet.split(', ').forEach((s) => {\n      expect(s).toMatch(assetMatch)\n    })\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"image-set without the url() call","suites":["css url() references"],"updatePoint":{"line":101,"column":40},"line":101,"code":"  test('image-set without the url() call', async () => {\n    const imageSet = await getBg('.css-image-set-without-url-call')\n    imageSet.split(', ').forEach((s) => {\n      expect(s).toMatch(assetMatch)\n    })\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"relative in @import","suites":["css url() references"],"updatePoint":{"line":108,"column":27},"line":108,"code":"  test('relative in @import', async () => {\n    expect(await getBg('.css-url-relative-at-imported')).toMatch(assetMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"absolute","suites":["css url() references"],"updatePoint":{"line":112,"column":16},"line":112,"code":"  test('absolute', async () => {\n    expect(await getBg('.css-url-absolute')).toMatch(assetMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"from /public","suites":["css url() references"],"updatePoint":{"line":116,"column":20},"line":116,"code":"  test('from /public', async () => {\n    expect(await getBg('.css-url-public')).toMatch(iconMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"base64 inline","suites":["css url() references"],"updatePoint":{"line":120,"column":21},"line":120,"code":"  test('base64 inline', async () => {\n    const match = isBuild ? `data:image/png;base64` : `/foo/nested/icon.png`\n    expect(await getBg('.css-url-base64-inline')).toMatch(match)\n    expect(await getBg('.css-url-quotes-base64-inline')).toMatch(match)\n    const icoMatch = isBuild ? `data:image/x-icon;base64` : `favicon.ico`\n    const el = await page.$(`link.ico`)\n    const herf = await el.getAttribute('href')\n    expect(herf).toMatch(icoMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"multiple urls on the same line","suites":["css url() references"],"updatePoint":{"line":130,"column":38},"line":130,"code":"  test('multiple urls on the same line', async () => {\n    const bg = await getBg('.css-url-same-line')\n    expect(bg).toMatch(assetMatch)\n    expect(bg).toMatch(iconMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"aliased","suites":["css url() references"],"updatePoint":{"line":136,"column":15},"line":136,"code":"  test('aliased', async () => {\n    const bg = await getBg('.css-url-aliased')\n    expect(bg).toMatch(assetMatch)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"preserve postfix query/hash","suites":["css url() references"],"updatePoint":{"line":142,"column":37},"line":142,"code":"    test('preserve postfix query/hash', () => {\n      expect(findAssetFile(/\\.css$/, 'foo')).toMatch(`woff2?#iefix`)\n    })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"srcset","suites":["image"],"updatePoint":{"line":149,"column":14},"line":149,"code":"  test('srcset', async () => {\n    const img = await page.$('.img-src-set')\n    const srcset = await img.getAttribute('srcset')\n    srcset.split(', ').forEach((s) => {\n      expect(s).toMatch(\n        isBuild\n          ? /\\/foo\\/assets\\/asset\\.\\w{8}\\.png \\d{1}x/\n          : /\\.\\/nested\\/asset\\.png \\d{1}x/\n      )\n    })\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"img url","suites":["svg fragments"],"updatePoint":{"line":164,"column":15},"line":164,"code":"  test('img url', async () => {\n    const img = await page.$('.svg-frag-img')\n    expect(await img.getAttribute('src')).toMatch(/svg#icon-clock-view$/)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"via css url()","suites":["svg fragments"],"updatePoint":{"line":169,"column":21},"line":169,"code":"  test('via css url()', async () => {\n    const bg = await page.evaluate(() => {\n      return getComputedStyle(document.querySelector('.icon')).backgroundImage\n    })\n    expect(bg).toMatch(/svg#icon-clock-view\"\\)$/)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"from js import","suites":["svg fragments"],"updatePoint":{"line":176,"column":22},"line":176,"code":"  test('from js import', async () => {\n    const img = await page.$('.svg-frag-import')\n    expect(await img.getAttribute('src')).toMatch(/svg#icon-heart-view$/)\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"?raw import","suites":["svg fragments"],"updatePoint":{"line":182,"column":17},"line":182,"code":"test('?raw import', async () => {\n  expect(await page.textContent('.raw')).toMatch('SVG')\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"?url import","suites":["svg fragments"],"updatePoint":{"line":186,"column":17},"line":186,"code":"test('?url import', async () => {\n  const src = readFile('foo.js')\n  expect(await page.textContent('.url')).toMatch(\n    isBuild\n      ? `data:application/javascript;base64,${Buffer.from(src).toString(\n          'base64'\n        )}`\n      : `/foo/foo.js`\n  )\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"?url import on css","suites":["svg fragments"],"updatePoint":{"line":197,"column":24},"line":197,"code":"test('?url import on css', async () => {\n  const src = readFile('css/icons.css')\n  const txt = await page.textContent('.url-css')\n  expect(txt).toEqual(\n    isBuild\n      ? `data:text/css;base64,${Buffer.from(src).toString('base64')}`\n      : '/foo/css/icons.css'\n  )\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"from js import","suites":["unicode url"],"updatePoint":{"line":208,"column":22},"line":208,"code":"  test('from js import', async () => {\n    const src = readFile('テスト-測試-white space.js')\n    expect(await page.textContent('.unicode-url')).toMatch(\n      isBuild\n        ? `data:application/javascript;base64,${Buffer.from(src).toString(\n            'base64'\n          )}`\n        : `/foo/テスト-測試-white space.js`\n    )\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"img src with encodeURI","suites":["encodeURI"],"updatePoint":{"line":222,"column":32},"line":222,"code":"    test('img src with encodeURI', async () => {\n      const img = await page.$('.encodeURI')\n      expect(\n        await (\n          await img.getAttribute('src')\n        ).startsWith('data:image/png;base64')\n      ).toBe(true)\n    })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"new URL(..., import.meta.url)","suites":["encodeURI"],"updatePoint":{"line":233,"column":35},"line":233,"code":"test('new URL(..., import.meta.url)', async () => {\n  expect(await page.textContent('.import-meta-url')).toMatch(assetMatch)\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"new URL(`${dynamic}`, import.meta.url)","suites":["encodeURI"],"updatePoint":{"line":237,"column":44},"line":237,"code":"test('new URL(`${dynamic}`, import.meta.url)', async () => {\n  expect(await page.textContent('.dynamic-import-meta-url-1')).toMatch(\n    isBuild ? 'data:image/png;base64' : '/foo/nested/icon.png'\n  )\n  expect(await page.textContent('.dynamic-import-meta-url-2')).toMatch(\n    assetMatch\n  )\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"new URL(`non-existent`, import.meta.url)","suites":["encodeURI"],"updatePoint":{"line":246,"column":46},"line":246,"code":"test('new URL(`non-existent`, import.meta.url)', async () => {\n  expect(await page.textContent('.non-existent-import-meta-url')).toMatch(\n    '/foo/non-existent'\n  )\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"manifest","suites":["encodeURI"],"updatePoint":{"line":253,"column":16},"line":253,"code":"  test('manifest', async () => {\n    const manifest = readManifest('foo')\n    const entry = manifest['index.html']\n\n    for (const file of listAssets('foo')) {\n      if (file.endsWith('.css')) {\n        expect(entry.css).toContain(`assets/${file}`)\n      } else if (!file.endsWith('.js')) {\n        expect(entry.assets).toContain(`assets/${file}`)\n      }\n    }\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"css will not be lost and css does not contain undefined","suites":["css and assets in css in build watch"],"updatePoint":{"line":269,"column":65},"line":269,"code":"    test('css will not be lost and css does not contain undefined', async () => {\n      editFile('index.html', (code) => code.replace('Assets', 'assets'), true)\n      await notifyRebuildComplete(watcher)\n      const cssFile = findAssetFile(/index\\.\\w+\\.css$/, 'foo')\n      expect(cssFile).not.toBe('')\n      expect(cssFile).not.toMatch(/undefined/)\n    })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"import module.css","suites":["css and assets in css in build watch"],"updatePoint":{"line":277,"column":27},"line":277,"code":"    test('import module.css', async () => {\n      expect(await getColor('#foo')).toBe('red')\n      editFile(\n        'css/foo.module.css',\n        (code) => code.replace('red', 'blue'),\n        true\n      )\n      await notifyRebuildComplete(watcher)\n      await page.reload()\n      expect(await getColor('#foo')).toBe('blue')\n    })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"import with raw query","suites":["css and assets in css in build watch"],"updatePoint":{"line":289,"column":31},"line":289,"code":"    test('import with raw query', async () => {\n      expect(await page.textContent('.raw-query')).toBe('foo')\n      editFile('static/foo.txt', (code) => code.replace('foo', 'zoo'), true)\n      await notifyRebuildComplete(watcher)\n      await page.reload()\n      expect(await page.textContent('.raw-query')).toBe('zoo')\n    })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"@import in html style tag hmr","suites":["css and assets in css in build watch"],"updatePoint":{"line":300,"column":37},"line":300,"code":"  test('@import in html style tag hmr', async () => {\n    await untilUpdated(() => getColor('.import-css'), 'rgb(0, 136, 255)')\n    editFile(\n      './css/import.css',\n      (code) => code.replace('#0088ff', '#00ff88'),\n      true\n    )\n    await untilUpdated(() => getColor('.import-css'), 'rgb(0, 255, 136)')\n  })","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"html import word boundary","suites":["css and assets in css in build watch"],"updatePoint":{"line":311,"column":31},"line":311,"code":"test('html import word boundary', async () => {\n  expect(await page.textContent('.obj-import-express')).toMatch(\n    'ignore object import prop'\n  )\n  expect(await page.textContent('.string-import-express')).toMatch('no load')\n})","file":"assets.spec.ts","skipped":false,"dir":"packages/playground/assets/__tests__"},{"name":"should have no 404s","suites":[],"updatePoint":{"line":13,"column":25},"line":13,"code":"test('should have no 404s', () => {\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('404')\n  })\n})","file":"backend-integration.spec.ts","skipped":false,"dir":"packages/playground/backend-integration/__tests__"},{"name":"file outside root","suites":["asset imports from js"],"updatePoint":{"line":20,"column":25},"line":20,"code":"  test('file outside root', async () => {\n    expect(\n      await page.textContent('.asset-reference.outside-root .asset-url')\n    ).toMatch(outerAssetMatch)\n  })","file":"backend-integration.spec.ts","skipped":false,"dir":"packages/playground/backend-integration/__tests__"},{"name":"manifest","suites":["asset imports from js"],"updatePoint":{"line":28,"column":16},"line":28,"code":"  test('manifest', async () => {\n    const manifest = readManifest('dev')\n    const htmlEntry = manifest['index.html']\n    expect(htmlEntry.css.length).toEqual(1)\n    expect(htmlEntry.assets.length).toEqual(1)\n  })","file":"backend-integration.spec.ts","skipped":false,"dir":"packages/playground/backend-integration/__tests__"},{"name":"preserve the base in CSS HMR","suites":["CSS HMR"],"updatePoint":{"line":36,"column":38},"line":36,"code":"    test('preserve the base in CSS HMR', async () => {\n      await untilUpdated(() => getColor('body'), 'black') // sanity check\n      editFile('frontend/entrypoints/global.css', (code) =>\n        code.replace('black', 'red')\n      )\n      await untilUpdated(() => getColor('body'), 'red') // successful HMR\n\n      // Verify that the base (/dev/) was added during the css-update\n      const link = await page.$('link[rel=\"stylesheet\"]')\n      expect(await link.getAttribute('href')).toContain('/dev/global.css?t=')\n    })","file":"backend-integration.spec.ts","skipped":false,"dir":"packages/playground/backend-integration/__tests__"},{"name":"CSS dependencies are tracked for HMR","suites":["CSS HMR"],"updatePoint":{"line":48,"column":46},"line":48,"code":"    test('CSS dependencies are tracked for HMR', async () => {\n      const el = await page.$('h1')\n      browserLogs.length = 0\n\n      editFile('frontend/entrypoints/main.ts', (code) =>\n        code.replace('text-black', 'text-[rgb(204,0,0)]')\n      )\n      await untilUpdated(() => getColor(el), 'rgb(204, 0, 0)')\n      expect(browserLogs).toContain('[vite] css hot updated: /global.css')\n    })","file":"backend-integration.spec.ts","skipped":false,"dir":"packages/playground/backend-integration/__tests__"},{"name":"cli should work in \"type\":\"module\" package","suites":[],"updatePoint":{"line":3,"column":48},"line":3,"code":"test('cli should work in \"type\":\"module\" package', async () => {\n  // this test uses a custom serve implementation, so regular helpers for browserLogs and goto don't work\n  // do the same thing manually\n  const logs = []\n  const onConsole = (msg) => {\n    logs.push(msg.text())\n  }\n  try {\n    page.on('console', onConsole)\n    await page.goto(`http://localhost:${port}/`)\n    expect(await page.textContent('.app')).toBe(\n      'vite cli in \"type\":\"module\" package works!'\n    )\n    expect(\n      logs.some((msg) =>\n        msg.match('vite cli in \"type\":\"module\" package works!')\n      )\n    ).toBe(true)\n  } finally {\n    page.off('console', onConsole)\n  }\n})","file":"cli-module.spec.ts","skipped":false,"dir":"packages/playground/cli-module/__tests__"},{"name":"cli should work","suites":[],"updatePoint":{"line":3,"column":21},"line":3,"code":"test('cli should work', async () => {\n  // this test uses a custom serve implementation, so regular helpers for browserLogs and goto don't work\n  // do the same thing manually\n  const logs = []\n  const onConsole = (msg) => {\n    logs.push(msg.text())\n  }\n  try {\n    page.on('console', onConsole)\n    await page.goto(`http://localhost:${port}/`)\n    expect(await page.textContent('.app')).toBe('vite cli works!')\n    expect(logs.some((msg) => msg.match('vite cli works!'))).toBe(true)\n  } finally {\n    page.off('console', onConsole)\n  }\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/playground/cli/__tests__"},{"name":"should load both stylesheets","suites":[],"updatePoint":{"line":3,"column":34},"line":3,"code":"test('should load both stylesheets', async () => {\n  expect(await getColor('h1')).toBe('red')\n  expect(await getColor('h2')).toBe('blue')\n})","file":"css-codesplit.spec.ts","skipped":false,"dir":"packages/playground/css-codesplit-cjs/__tests__"},{"name":"should remove empty chunk","suites":[],"updatePoint":{"line":9,"column":33},"line":9,"code":"  test('should remove empty chunk', async () => {\n    expect(findAssetFile(/style.*\\.js$/)).toBe('')\n    expect(findAssetFile('main.*.js$')).toMatch(`/* empty css`)\n    expect(findAssetFile('other.*.js$')).toMatch(`/* empty css`)\n  })","file":"css-codesplit.spec.ts","skipped":false,"dir":"packages/playground/css-codesplit-cjs/__tests__"},{"name":"should generate correct manifest","suites":[],"updatePoint":{"line":15,"column":40},"line":15,"code":"  test('should generate correct manifest', async () => {\n    const manifest = readManifest()\n    expect(manifest['index.html'].css.length).toBe(2)\n    expect(manifest['other.js'].css.length).toBe(1)\n  })","file":"css-codesplit.spec.ts","skipped":false,"dir":"packages/playground/css-codesplit-cjs/__tests__"},{"name":"should load both stylesheets","suites":[],"updatePoint":{"line":3,"column":34},"line":3,"code":"test('should load both stylesheets', async () => {\n  expect(await getColor('h1')).toBe('red')\n  expect(await getColor('h2')).toBe('blue')\n})","file":"css-codesplit.spec.ts","skipped":false,"dir":"packages/playground/css-codesplit/__tests__"},{"name":"should remove empty chunk","suites":[],"updatePoint":{"line":9,"column":33},"line":9,"code":"  test('should remove empty chunk', async () => {\n    expect(findAssetFile(/style.*\\.js$/)).toBe('')\n    expect(findAssetFile('main.*.js$')).toMatch(`/* empty css`)\n    expect(findAssetFile('other.*.js$')).toMatch(`/* empty css`)\n  })","file":"css-codesplit.spec.ts","skipped":false,"dir":"packages/playground/css-codesplit/__tests__"},{"name":"should generate correct manifest","suites":[],"updatePoint":{"line":15,"column":40},"line":15,"code":"  test('should generate correct manifest', async () => {\n    const manifest = readManifest()\n    expect(manifest['index.html'].css.length).toBe(2)\n    expect(manifest['other.js'].css.length).toBe(1)\n  })","file":"css-codesplit.spec.ts","skipped":false,"dir":"packages/playground/css-codesplit/__tests__"},{"name":"imported css","suites":[],"updatePoint":{"line":16,"column":18},"line":16,"code":"test('imported css', async () => {\n  const css = await page.textContent('.imported-css')\n  expect(css).toContain('.imported {')\n  const glob = await page.textContent('.imported-css-glob')\n  expect(glob).toContain('.dir-import')\n  const globEager = await page.textContent('.imported-css-globEager')\n  expect(globEager).toContain('.dir-import')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"linked css","suites":[],"updatePoint":{"line":25,"column":16},"line":25,"code":"test('linked css', async () => {\n  const linked = await page.$('.linked')\n  const atImport = await page.$('.linked-at-import')\n\n  expect(await getColor(linked)).toBe('blue')\n  expect(await getColor(atImport)).toBe('red')\n\n  editFile('linked.css', (code) => code.replace('color: blue', 'color: red'))\n  await untilUpdated(() => getColor(linked), 'red')\n\n  editFile('linked-at-import.css', (code) =>\n    code.replace('color: red', 'color: blue')\n  )\n  await untilUpdated(() => getColor(atImport), 'blue')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"css import from js","suites":[],"updatePoint":{"line":41,"column":24},"line":41,"code":"test('css import from js', async () => {\n  const imported = await page.$('.imported')\n  const atImport = await page.$('.imported-at-import')\n\n  expect(await getColor(imported)).toBe('green')\n  expect(await getColor(atImport)).toBe('purple')\n\n  editFile('imported.css', (code) => code.replace('color: green', 'color: red'))\n  await untilUpdated(() => getColor(imported), 'red')\n\n  editFile('imported-at-import.css', (code) =>\n    code.replace('color: purple', 'color: blue')\n  )\n  await untilUpdated(() => getColor(atImport), 'blue')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"css import asset with space","suites":[],"updatePoint":{"line":57,"column":33},"line":57,"code":"test('css import asset with space', async () => {\n  const importedWithSpace = await page.$('.import-with-space')\n\n  expect(await getBg(importedWithSpace)).toMatch(/.*ok\\..*png/)\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"postcss config","suites":[],"updatePoint":{"line":63,"column":20},"line":63,"code":"test('postcss config', async () => {\n  const imported = await page.$('.postcss .nesting')\n  expect(await getColor(imported)).toBe('pink')\n\n  editFile('imported.css', (code) => code.replace('color: pink', 'color: red'))\n  await untilUpdated(() => getColor(imported), 'red')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"sass","suites":[],"updatePoint":{"line":71,"column":10},"line":71,"code":"test('sass', async () => {\n  const imported = await page.$('.sass')\n  const atImport = await page.$('.sass-at-import')\n  const atImportAlias = await page.$('.sass-at-import-alias')\n  const partialImport = await page.$('.sass-partial')\n\n  expect(await getColor(imported)).toBe('orange')\n  expect(await getColor(atImport)).toBe('olive')\n  expect(await getBg(atImport)).toMatch(isBuild ? /base64/ : '/nested/icon.png')\n  expect(await getColor(atImportAlias)).toBe('olive')\n  expect(await getBg(atImportAlias)).toMatch(\n    isBuild ? /base64/ : '/nested/icon.png'\n  )\n  expect(await getColor(partialImport)).toBe('orchid')\n\n  editFile('sass.scss', (code) =>\n    code.replace('color: $injectedColor', 'color: red')\n  )\n  await untilUpdated(() => getColor(imported), 'red')\n\n  editFile('nested/_index.scss', (code) =>\n    code.replace('color: olive', 'color: blue')\n  )\n  await untilUpdated(() => getColor(atImport), 'blue')\n\n  editFile('nested/_partial.scss', (code) =>\n    code.replace('color: orchid', 'color: green')\n  )\n  await untilUpdated(() => getColor(partialImport), 'green')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"less","suites":[],"updatePoint":{"line":102,"column":10},"line":102,"code":"test('less', async () => {\n  const imported = await page.$('.less')\n  const atImport = await page.$('.less-at-import')\n  const atImportAlias = await page.$('.less-at-import-alias')\n\n  expect(await getColor(imported)).toBe('blue')\n  expect(await getColor(atImport)).toBe('darkslateblue')\n  expect(await getBg(atImport)).toMatch(isBuild ? /base64/ : '/nested/icon.png')\n  expect(await getColor(atImportAlias)).toBe('darkslateblue')\n  expect(await getBg(atImportAlias)).toMatch(\n    isBuild ? /base64/ : '/nested/icon.png'\n  )\n\n  editFile('less.less', (code) => code.replace('@color: blue', '@color: red'))\n  await untilUpdated(() => getColor(imported), 'red')\n\n  editFile('nested/nested.less', (code) =>\n    code.replace('color: darkslateblue', 'color: blue')\n  )\n  await untilUpdated(() => getColor(atImport), 'blue')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"stylus","suites":[],"updatePoint":{"line":124,"column":12},"line":124,"code":"test('stylus', async () => {\n  const imported = await page.$('.stylus')\n  const additionalData = await page.$('.stylus-additional-data')\n  const relativeImport = await page.$('.stylus-import')\n  const relativeImportAlias = await page.$('.stylus-import-alias')\n  const optionsRelativeImport = await page.$('.stylus-options-relative-import')\n  const optionsAbsoluteImport = await page.$('.stylus-options-absolute-import')\n\n  expect(await getColor(imported)).toBe('blue')\n  expect(await getColor(additionalData)).toBe('orange')\n  expect(await getColor(relativeImport)).toBe('darkslateblue')\n  expect(await getColor(relativeImportAlias)).toBe('darkslateblue')\n  expect(await getBg(relativeImportAlias)).toMatch(\n    isBuild ? /base64/ : '/nested/icon.png'\n  )\n  expect(await getColor(optionsRelativeImport)).toBe('green')\n  expect(await getColor(optionsAbsoluteImport)).toBe('red')\n\n  editFile('stylus.styl', (code) =>\n    code.replace('$color ?= blue', '$color ?= red')\n  )\n  await untilUpdated(() => getColor(imported), 'red')\n\n  editFile('nested/nested.styl', (code) =>\n    code.replace('color: darkslateblue', 'color: blue')\n  )\n  await untilUpdated(() => getColor(relativeImport), 'blue')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"css modules","suites":[],"updatePoint":{"line":153,"column":17},"line":153,"code":"test('css modules', async () => {\n  const imported = await page.$('.modules')\n  expect(await getColor(imported)).toBe('turquoise')\n\n  // check if the generated CSS module class name is indeed using the\n  // format specified in vite.config.js\n  expect(await imported.getAttribute('class')).toMatch(\n    /.mod-module__apply-color___[\\w-]{5}/\n  )\n\n  editFile('mod.module.css', (code) =>\n    code.replace('color: turquoise', 'color: red')\n  )\n  await untilUpdated(() => getColor(imported), 'red')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"css modules composes/from path resolving","suites":[],"updatePoint":{"line":169,"column":46},"line":169,"code":"test('css modules composes/from path resolving', async () => {\n  const imported = await page.$('.path-resolved-modules-css')\n  expect(await getColor(imported)).toBe('turquoise')\n\n  // check if the generated CSS module class name is indeed using the\n  // format specified in vite.config.js\n  expect(await imported.getAttribute('class')).toMatch(\n    /.composed-module__apply-color___[\\w-]{5}/\n  )\n\n  expect(await imported.getAttribute('class')).toMatch(\n    /.composes-path-resolving-module__path-resolving-css___[\\w-]{5}/\n  )\n\n  // @todo HMR is not working on this situation.\n  // editFile('composed.module.css', (code) =>\n  //   code.replace('color: turquoise', 'color: red')\n  // )\n  // await untilUpdated(() => getColor(imported), 'red')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"sass modules composes/from path resolving","suites":[],"updatePoint":{"line":190,"column":47},"line":190,"code":"test('sass modules composes/from path resolving', async () => {\n  const imported = await page.$('.path-resolved-modules-sass')\n  expect(await getColor(imported)).toBe('orangered')\n\n  // check if the generated CSS module class name is indeed using the\n  // format specified in vite.config.js\n  expect(await imported.getAttribute('class')).toMatch(\n    /.composed-module__apply-color___[\\w-]{5}/\n  )\n\n  expect(await imported.getAttribute('class')).toMatch(\n    /.composes-path-resolving-module__path-resolving-sass___[\\w-]{5}/\n  )\n\n  // @todo HMR is not working on this situation.\n  // editFile('composed.module.scss', (code) =>\n  //   code.replace('color: orangered', 'color: red')\n  // )\n  // await untilUpdated(() => getColor(imported), 'red')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"less modules composes/from path resolving","suites":[],"updatePoint":{"line":211,"column":47},"line":211,"code":"test('less modules composes/from path resolving', async () => {\n  const imported = await page.$('.path-resolved-modules-less')\n  expect(await getColor(imported)).toBe('blue')\n\n  // check if the generated CSS module class name is indeed using the\n  // format specified in vite.config.js\n  expect(await imported.getAttribute('class')).toMatch(\n    /.composed-module__apply-color___[\\w-]{5}/\n  )\n\n  expect(await imported.getAttribute('class')).toMatch(\n    /.composes-path-resolving-module__path-resolving-less___[\\w-]{5}/\n  )\n\n  // @todo HMR is not working on this situation.\n  // editFile('composed.module.scss', (code) =>\n  //   code.replace('color: orangered', 'color: red')\n  // )\n  // await untilUpdated(() => getColor(imported), 'red')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"css modules w/ sass","suites":[],"updatePoint":{"line":232,"column":25},"line":232,"code":"test('css modules w/ sass', async () => {\n  const imported = await page.$('.modules-sass')\n  expect(await getColor(imported)).toBe('orangered')\n  expect(await imported.getAttribute('class')).toMatch(\n    /.mod-module__apply-color___[\\w-]{5}/\n  )\n\n  editFile('mod.module.scss', (code) =>\n    code.replace('color: orangered', 'color: blue')\n  )\n  await untilUpdated(() => getColor(imported), 'blue')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"inline css modules","suites":[],"updatePoint":{"line":245,"column":24},"line":245,"code":"test('inline css modules', async () => {\n  const css = await page.textContent('.modules-inline')\n  expect(css).toMatch(/\\.inline-module__apply-color-inline___[\\w-]{5}/)\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"@charset hoist","suites":[],"updatePoint":{"line":251,"column":22},"line":251,"code":"  test('@charset hoist', async () => {\n    serverLogs.forEach((log) => {\n      // no warning from esbuild css minifier\n      expect(log).not.toMatch('\"@charset\" must be the first rule in the file')\n    })\n  })","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"@import dependency w/ style entry","suites":[],"updatePoint":{"line":259,"column":39},"line":259,"code":"test('@import dependency w/ style entry', async () => {\n  expect(await getColor('.css-dep')).toBe('purple')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"@import dependency w/ sass entry","suites":[],"updatePoint":{"line":263,"column":38},"line":263,"code":"test('@import dependency w/ sass entry', async () => {\n  expect(await getColor('.css-dep-sass')).toBe('orange')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"@import dependency w/ stylus entry","suites":[],"updatePoint":{"line":267,"column":40},"line":267,"code":"test('@import dependency w/ stylus entry', async () => {\n  expect(await getColor('.css-dep-stylus')).toBe('red')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"@import dependency w/out package scss","suites":[],"updatePoint":{"line":271,"column":43},"line":271,"code":"test('@import dependency w/out package scss', async () => {\n  expect(await getColor('.sass-dep')).toBe('lavender')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"async chunk","suites":[],"updatePoint":{"line":275,"column":17},"line":275,"code":"test('async chunk', async () => {\n  const el = await page.$('.async')\n  expect(await getColor(el)).toBe('teal')\n\n  if (isBuild) {\n    // assert that the css is extracted into its own file instead of in the\n    // main css file\n    expect(findAssetFile(/index\\.\\w+\\.css$/)).not.toMatch('teal')\n    expect(findAssetFile(/async\\.\\w+\\.css$/)).toMatch('.async{color:teal}')\n  } else {\n    // test hmr\n    editFile('async.css', (code) => code.replace('color: teal', 'color: blue'))\n    await untilUpdated(() => getColor(el), 'blue')\n  }\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"treeshaken async chunk","suites":[],"updatePoint":{"line":291,"column":28},"line":291,"code":"test('treeshaken async chunk', async () => {\n  if (isBuild) {\n    // should be absent in prod\n    expect(\n      await page.evaluate(() => {\n        return document.querySelector('.async-treeshaken')\n      })\n    ).toBeNull()\n    // assert that the css is not present anywhere\n    expect(findAssetFile(/\\.css$/)).not.toMatch('plum')\n    expect(findAssetFile(/index\\.\\w+\\.js$/)).not.toMatch('.async{color:plum}')\n    expect(findAssetFile(/async\\.\\w+\\.js$/)).not.toMatch('.async{color:plum}')\n    // should have no chunk!\n    expect(findAssetFile(/async-treeshaken/)).toBe('')\n  } else {\n    // should be present in dev\n    const el = await page.$('.async-treeshaken')\n    editFile('async-treeshaken.css', (code) =>\n      code.replace('color: plum', 'color: blue')\n    )\n    await untilUpdated(() => getColor(el), 'blue')\n  }\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"PostCSS dir-dependency","suites":[],"updatePoint":{"line":315,"column":28},"line":315,"code":"test('PostCSS dir-dependency', async () => {\n  const el1 = await page.$('.dir-dep')\n  const el2 = await page.$('.dir-dep-2')\n\n  expect(await getColor(el1)).toBe('grey')\n  expect(await getColor(el2)).toBe('grey')\n\n  if (!isBuild) {\n    editFile('glob-dep/foo.css', (code) =>\n      code.replace('color: grey', 'color: blue')\n    )\n    await untilUpdated(() => getColor(el1), 'blue')\n    expect(await getColor(el2)).toBe('grey')\n\n    editFile('glob-dep/bar.css', (code) =>\n      code.replace('color: grey', 'color: red')\n    )\n    await untilUpdated(() => getColor(el2), 'red')\n    expect(await getColor(el1)).toBe('blue')\n\n    // test add/remove\n    removeFile('glob-dep/bar.css')\n    await untilUpdated(() => getColor(el2), 'black')\n  }\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"URL separation","suites":[],"updatePoint":{"line":341,"column":20},"line":341,"code":"test('URL separation', async () => {\n  const urlSeparated = await page.$('.url-separated')\n  const baseUrl = 'url(images/dog.webp)'\n  const cases = new Array(5)\n    .fill('')\n    .flatMap((_, i) =>\n      [',', ' ,', ', ', ' , '].map(\n        (sep) => `background-image:${new Array(i + 1).fill(baseUrl).join(sep)};`\n      )\n    )\n\n  // Insert the base case\n  cases.unshift('background-image:url(images/cat.webp),url(images/dog.webp)')\n\n  for (const [c, i] of cases.map((c, i) => [c, i]) as [string, number][]) {\n    // Replace the previous case\n    if (i > 0) editFile('imported.css', (code) => code.replace(cases[i - 1], c))\n\n    expect(await getBg(urlSeparated)).toMatch(\n      /^url\\(.+\\)(?:\\s*,\\s*url\\(.+\\))*$/\n    )\n  }\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"inlined","suites":[],"updatePoint":{"line":365,"column":13},"line":365,"code":"test('inlined', async () => {\n  // should not insert css\n  expect(await getColor('.inlined')).toBe('black')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"inlined-code","suites":[],"updatePoint":{"line":370,"column":18},"line":370,"code":"test('inlined-code', async () => {\n  const code = await page.textContent('.inlined-code')\n  // should resolve assets\n  expect(code).toContain('background:')\n  expect(code).not.toContain('__VITE_ASSET__')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"minify css","suites":[],"updatePoint":{"line":377,"column":16},"line":377,"code":"test('minify css', async () => {\n  if (!isBuild) {\n    return\n  }\n\n  // should keep the rgba() syntax\n  const cssFile = findAssetFile(/index\\.\\w+\\.css$/)\n  expect(cssFile).toMatch('rgba(')\n  expect(cssFile).not.toMatch('#ffff00b3')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"?raw","suites":[],"updatePoint":{"line":388,"column":10},"line":388,"code":"test('?raw', async () => {\n  const rawImportCss = await page.$('.raw-imported-css')\n\n  expect(await rawImportCss.textContent()).toBe(\n    require('fs').readFileSync(require.resolve('../raw-imported.css'), 'utf-8')\n  )\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"import css in less","suites":[],"updatePoint":{"line":396,"column":24},"line":396,"code":"test('import css in less', async () => {\n  expect(await getColor('.css-in-less')).toBe('yellow')\n  expect(await getColor('.css-in-less-2')).toBe('blue')\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"relative path rewritten in Less's data-uri","suites":[],"updatePoint":{"line":401,"column":48},"line":401,"code":"test(\"relative path rewritten in Less's data-uri\", async () => {\n  // relative path passed to Less's data-uri is rewritten to absolute,\n  // the Less inlines it\n  expect(await getBg('.form-box-data-uri')).toMatch(\n    /^url\\(\"data:image\\/svg\\+xml,%3Csvg/\n  )\n})","file":"css.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"postcss plugins in different dir","suites":[],"updatePoint":{"line":6,"column":38},"line":6,"code":"test('postcss plugins in different dir', async () => {\n  const port = ports['css/postcss-plugins-different-dir']\n  const server = await createServer({\n    root: path.join(__dirname, '..', '..', 'tailwind'),\n    logLevel: 'silent',\n    server: {\n      port,\n      strictPort: true\n    },\n    build: {\n      // skip transpilation during tests to make it faster\n      target: 'esnext'\n    }\n  })\n  await server.listen()\n  try {\n    await page.goto(`http://localhost:${port}`)\n    const tailwindStyle = await page.$('.tailwind-style')\n    expect(await getBgColor(tailwindStyle)).toBe('rgb(254, 226, 226)')\n    expect(await getColor(tailwindStyle)).toBe('rgb(136, 136, 136)')\n  } finally {\n    await server.close()\n  }\n})","file":"postcss-plugins-different-dir.spec.ts","skipped":false,"dir":"packages/playground/css/__tests__"},{"name":"plain","suites":[],"updatePoint":{"line":3,"column":11},"line":3,"code":"test('plain', async () => {\n  expect(await page.textContent('.plain')).toBe('hi')\n})","file":"data-uri.spec.ts","skipped":false,"dir":"packages/playground/data-uri/__tests__"},{"name":"base64","suites":[],"updatePoint":{"line":7,"column":12},"line":7,"code":"test('base64', async () => {\n  expect(await page.textContent('.base64')).toBe('hi')\n})","file":"data-uri.spec.ts","skipped":false,"dir":"packages/playground/data-uri/__tests__"},{"name":"should compile away the import for build","suites":[],"updatePoint":{"line":12,"column":48},"line":12,"code":"  test('should compile away the import for build', async () => {\n    const file = findAssetFile('index')\n    expect(file).not.toMatch('import')\n  })","file":"data-uri.spec.ts","skipped":false,"dir":"packages/playground/data-uri/__tests__"},{"name":"string","suites":[],"updatePoint":{"line":1,"column":12},"line":1,"code":"test('string', async () => {\n  const defines = require('../vite.config.js').define\n\n  expect(await page.textContent('.exp')).toBe(String(eval(defines.__EXP__)))\n  expect(await page.textContent('.string')).toBe(JSON.parse(defines.__STRING__))\n  expect(await page.textContent('.number')).toBe(String(defines.__NUMBER__))\n  expect(await page.textContent('.boolean')).toBe(String(defines.__BOOLEAN__))\n  expect(await page.textContent('.object')).toBe(\n    JSON.stringify(defines.__OBJ__, null, 2)\n  )\n  expect(await page.textContent('.env-var')).toBe(\n    JSON.parse(defines['process.env.SOMEVAR'])\n  )\n  expect(await page.textContent('.process-as-property')).toBe(\n    defines.__OBJ__.process.env.SOMEVAR\n  )\n  expect(await page.textContent('.spread-object')).toBe(\n    JSON.stringify({ SOMEVAR: defines['process.env.SOMEVAR'] })\n  )\n  expect(await page.textContent('.spread-array')).toBe(\n    JSON.stringify([...defines.__STRING__])\n  )\n  // html would't need to define replacement\n  expect(await page.textContent('.exp-define')).toBe('__EXP__')\n  expect(await page.textContent('.import-json')).toBe('__EXP__')\n})","file":"define.spec.ts","skipped":false,"dir":"packages/playground/define/__tests__"},{"name":"should load literal dynamic import","suites":[],"updatePoint":{"line":3,"column":40},"line":3,"code":"test('should load literal dynamic import', async () => {\n  await page.click('.baz')\n  await untilUpdated(() => page.textContent('.view'), 'Baz view', true)\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"should load full dynamic import from public","suites":[],"updatePoint":{"line":8,"column":49},"line":8,"code":"test('should load full dynamic import from public', async () => {\n  await page.click('.qux')\n  await untilUpdated(() => page.textContent('.view'), 'Qux view', true)\n  // No warning should be logged as we are using @vite-ignore\n  expect(\n    serverLogs.some((log) => log.includes('cannot be analyzed by vite'))\n  ).toBe(false)\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"should load data URL of `blob:`","suites":[],"updatePoint":{"line":17,"column":37},"line":17,"code":"test('should load data URL of `blob:`', async () => {\n  await page.click('.issue-2658-1')\n  await untilUpdated(() => page.textContent('.view'), 'blob', true)\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"should load data URL of `data:`","suites":[],"updatePoint":{"line":22,"column":37},"line":22,"code":"test('should load data URL of `data:`', async () => {\n  await page.click('.issue-2658-2')\n  await untilUpdated(() => page.textContent('.view'), 'data', true)\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"should have same reference on static and dynamic js import","suites":[],"updatePoint":{"line":27,"column":64},"line":27,"code":"test('should have same reference on static and dynamic js import', async () => {\n  await page.click('.mxd')\n  await untilUpdated(() => page.textContent('.view'), 'true', true)\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"should have same reference on static and dynamic js import","suites":[],"updatePoint":{"line":33,"column":64},"line":33,"code":"test('should have same reference on static and dynamic js import', async () => {\n  await page.click('.mxd2')\n  await untilUpdated(() => page.textContent('.view'), 'false', true)\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"should have same reference on static and dynamic js import","suites":[],"updatePoint":{"line":38,"column":64},"line":38,"code":"test('should have same reference on static and dynamic js import', async () => {\n  await page.click('.mxdjson')\n  await untilUpdated(() => page.textContent('.view'), 'true', true)\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"should load dynamic import with vars","suites":[],"updatePoint":{"line":45,"column":42},"line":45,"code":"test('should load dynamic import with vars', async () => {\n  await page.click('.foo')\n  await untilUpdated(() => page.textContent('.view'), 'Foo view', true)\n\n  await page.click('.bar')\n  await untilUpdated(() => page.textContent('.view'), 'Bar view', true)\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"should load dynamic import with css","suites":[],"updatePoint":{"line":54,"column":41},"line":54,"code":"test('should load dynamic import with css', async () => {\n  await page.click('.css')\n  await untilUpdated(\n    () => page.$eval('.view', (node) => window.getComputedStyle(node).color),\n    'rgb(255, 0, 0)',\n    true\n  )\n})","file":"dynamic-import.spec.ts","skipped":false,"dir":"packages/playground/dynamic-import/__tests__"},{"name":"base","suites":[],"updatePoint":{"line":5,"column":10},"line":5,"code":"test('base', async () => {\n  expect(await page.textContent('.base')).toBe('/')\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"mode","suites":[],"updatePoint":{"line":9,"column":10},"line":9,"code":"test('mode', async () => {\n  expect(await page.textContent('.mode')).toBe(mode)\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"dev","suites":[],"updatePoint":{"line":13,"column":9},"line":13,"code":"test('dev', async () => {\n  expect(await page.textContent('.dev')).toBe(String(!isBuild))\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"prod","suites":[],"updatePoint":{"line":17,"column":10},"line":17,"code":"test('prod', async () => {\n  expect(await page.textContent('.prod')).toBe(String(isBuild))\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"custom","suites":[],"updatePoint":{"line":21,"column":12},"line":21,"code":"test('custom', async () => {\n  expect(await page.textContent('.custom')).toBe('1')\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"custom-prefix","suites":[],"updatePoint":{"line":25,"column":19},"line":25,"code":"test('custom-prefix', async () => {\n  expect(await page.textContent('.custom-prefix')).toBe('1')\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"mode file override","suites":[],"updatePoint":{"line":29,"column":24},"line":29,"code":"test('mode file override', async () => {\n  expect(await page.textContent('.mode-file')).toBe(`.env.${mode}`)\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"inline variables","suites":[],"updatePoint":{"line":33,"column":22},"line":33,"code":"test('inline variables', async () => {\n  expect(await page.textContent('.inline')).toBe(\n    isBuild ? `inline-build` : `inline-serve`\n  )\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"NODE_ENV","suites":[],"updatePoint":{"line":39,"column":14},"line":39,"code":"test('NODE_ENV', async () => {\n  expect(await page.textContent('.node-env')).toBe(mode)\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"env object","suites":[],"updatePoint":{"line":43,"column":16},"line":43,"code":"test('env object', async () => {\n  const envText = await page.textContent('.env-object')\n  expect(JSON.parse(envText)).toMatchObject({\n    VITE_EFFECTIVE_MODE_FILE_NAME: `.env.${mode}`,\n    CUSTOM_PREFIX_ENV_VARIABLE: '1',\n    VITE_CUSTOM_ENV_VARIABLE: '1',\n    BASE_URL: '/',\n    MODE: mode,\n    DEV: !isBuild,\n    PROD: isBuild\n  })\n})","file":"env.spec.ts","skipped":false,"dir":"packages/playground/env/__tests__"},{"name":"should have no 404s","suites":[],"updatePoint":{"line":1,"column":25},"line":1,"code":"test('should have no 404s', () => {\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('404')\n  })\n})","file":"extensions.spec.ts","skipped":false,"dir":"packages/playground/extensions/__tests__"},{"name":"not contain `.mjs`","suites":[],"updatePoint":{"line":7,"column":24},"line":7,"code":"test('not contain `.mjs`', async () => {\n  const appHtml = await page.content()\n  expect(appHtml).toMatch('Hello Vite!')\n})","file":"extensions.spec.ts","skipped":false,"dir":"packages/playground/extensions/__tests__"},{"name":"should hmr when file is deleted and restored","suites":[],"updatePoint":{"line":10,"column":52},"line":10,"code":"  test('should hmr when file is deleted and restored', async () => {\n    await untilUpdated(() => page.textContent('p'), 'Child state 1')\n\n    editFile('Child.jsx', (code) =>\n      code.replace('Child state 1', 'Child state 2')\n    )\n\n    await untilUpdated(() => page.textContent('p'), 'Child state 2')\n\n    editFile('App.jsx', (code) =>\n      code\n        .replace(`import Child from './Child'`, '')\n        .replace(`<Child />`, '<p>Child deleted</p>')\n    )\n    removeFile('Child.jsx')\n    await untilUpdated(() => page.textContent('p'), 'Child deleted')\n\n    // restore Child.jsx\n    addFile(\n      'Child.jsx',\n      ` export default function Child() {\n          return <p>Child state 1</p>\n        }\n      `\n    )\n\n    // restore App.jsx\n    editFile(\n      'App.jsx',\n      (code) =>\n        `import { useState } from 'react'\n      import Child from './Child'\n      \n      function App() {\n        return (\n          <div className=\"App\">\n            <Child />\n          </div>\n        )\n      }\n      \n      export default App\n      `\n    )\n\n    await untilUpdated(() => page.textContent('p'), 'Child state 1')\n  })","file":"file-delete-restore.spec.ts","skipped":false,"dir":"packages/playground/file-delete-restore/__tests__"},{"name":"dummy test to make jest happy","suites":[],"updatePoint":{"line":58,"column":37},"line":58,"code":"  test('dummy test to make jest happy', async () => {\n    // Your test suite must contain at least one test.\n  })","file":"file-delete-restore.spec.ts","skipped":false,"dir":"packages/playground/file-delete-restore/__tests__"},{"name":"default import","suites":["main"],"updatePoint":{"line":13,"column":24},"line":13,"code":"    test('default import', async () => {\n      expect(await page.textContent('.full')).toBe(stringified)\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"named import","suites":["main"],"updatePoint":{"line":17,"column":22},"line":17,"code":"    test('named import', async () => {\n      expect(await page.textContent('.named')).toBe(json.msg)\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"safe fetch","suites":["main"],"updatePoint":{"line":21,"column":20},"line":21,"code":"    test('safe fetch', async () => {\n      expect(await page.textContent('.safe-fetch')).toMatch('KEY=safe')\n      expect(await page.textContent('.safe-fetch-status')).toBe('200')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"safe fetch with special characters","suites":["main"],"updatePoint":{"line":26,"column":44},"line":26,"code":"    test('safe fetch with special characters', async () => {\n      expect(\n        await page.textContent('.safe-fetch-subdir-special-characters')\n      ).toMatch('KEY=safe')\n      expect(\n        await page.textContent('.safe-fetch-subdir-special-characters-status')\n      ).toBe('200')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"unsafe fetch","suites":["main"],"updatePoint":{"line":35,"column":22},"line":35,"code":"    test('unsafe fetch', async () => {\n      expect(await page.textContent('.unsafe-fetch')).toMatch('403 Restricted')\n      expect(await page.textContent('.unsafe-fetch-status')).toBe('403')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"safe fs fetch","suites":["main"],"updatePoint":{"line":40,"column":23},"line":40,"code":"    test('safe fs fetch', async () => {\n      expect(await page.textContent('.safe-fs-fetch')).toBe(stringified)\n      expect(await page.textContent('.safe-fs-fetch-status')).toBe('200')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"safe fs fetch with special characters","suites":["main"],"updatePoint":{"line":45,"column":47},"line":45,"code":"    test('safe fs fetch with special characters', async () => {\n      expect(await page.textContent('.safe-fs-fetch-special-characters')).toBe(\n        stringified\n      )\n      expect(await page.textContent('.safe-fs-fetch-status')).toBe('200')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"unsafe fs fetch","suites":["main"],"updatePoint":{"line":52,"column":25},"line":52,"code":"    test('unsafe fs fetch', async () => {\n      expect(await page.textContent('.unsafe-fs-fetch')).toBe('')\n      expect(await page.textContent('.unsafe-fs-fetch-status')).toBe('403')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"nested entry","suites":["main"],"updatePoint":{"line":57,"column":22},"line":57,"code":"    test('nested entry', async () => {\n      expect(await page.textContent('.nested-entry')).toBe('foobar')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"nested entry","suites":["main"],"updatePoint":{"line":61,"column":22},"line":61,"code":"    test('nested entry', async () => {\n      expect(await page.textContent('.nested-entry')).toBe('foobar')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"denied","suites":["main"],"updatePoint":{"line":65,"column":16},"line":65,"code":"    test('denied', async () => {\n      expect(await page.textContent('.unsafe-dotenv')).toBe('404')\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"dummy test to make jest happy","suites":["main"],"updatePoint":{"line":69,"column":39},"line":69,"code":"    test('dummy test to make jest happy', async () => {\n      // Your test suite must contain at least one test.\n    })","file":"fs-serve.spec.ts","skipped":false,"dir":"packages/playground/fs-serve/__tests__"},{"name":"should work","suites":[],"updatePoint":{"line":75,"column":17},"line":75,"code":"test('should work', async () => {\n  expect(await page.textContent('.result')).toBe(\n    JSON.stringify(allResult, null, 2)\n  )\n  expect(await page.textContent('.result-node_modules')).toBe(\n    JSON.stringify(nodeModulesResult, null, 2)\n  )\n})","file":"glob-import.spec.ts","skipped":false,"dir":"packages/playground/glob-import/__tests__"},{"name":"import glob raw","suites":[],"updatePoint":{"line":84,"column":21},"line":84,"code":"test('import glob raw', async () => {\n  expect(await page.textContent('.globraw')).toBe(\n    JSON.stringify(rawResult, null, 2)\n  )\n})","file":"glob-import.spec.ts","skipped":false,"dir":"packages/playground/glob-import/__tests__"},{"name":"import relative glob raw","suites":[],"updatePoint":{"line":90,"column":30},"line":90,"code":"test('import relative glob raw', async () => {\n  expect(await page.textContent('.relative-glob-raw')).toBe(\n    JSON.stringify(relativeRawResult, null, 2)\n  )\n})","file":"glob-import.spec.ts","skipped":false,"dir":"packages/playground/glob-import/__tests__"},{"name":"hmr for adding/removing files","suites":[],"updatePoint":{"line":97,"column":37},"line":97,"code":"  test('hmr for adding/removing files', async () => {\n    addFile('dir/a.js', '')\n    await untilUpdated(\n      () => page.textContent('.result'),\n      JSON.stringify(\n        {\n          '/dir/a.js': {},\n          ...allResult,\n          '/dir/index.js': {\n            ...allResult['/dir/index.js'],\n            modules: {\n              './a.js': {},\n              ...allResult['/dir/index.js'].modules\n            }\n          }\n        },\n        null,\n        2\n      )\n    )\n\n    // edit the added file\n    editFile('dir/a.js', () => 'export const msg =\"a\"')\n    await untilUpdated(\n      () => page.textContent('.result'),\n      JSON.stringify(\n        {\n          '/dir/a.js': {\n            msg: 'a'\n          },\n          ...allResult,\n          '/dir/index.js': {\n            ...allResult['/dir/index.js'],\n            modules: {\n              './a.js': {\n                msg: 'a'\n              },\n              ...allResult['/dir/index.js'].modules\n            }\n          }\n        },\n        null,\n        2\n      )\n    )\n\n    removeFile('dir/a.js')\n    await untilUpdated(\n      () => page.textContent('.result'),\n      JSON.stringify(allResult, null, 2)\n    )\n  })","file":"glob-import.spec.ts","skipped":false,"dir":"packages/playground/glob-import/__tests__"},{"name":"should render","suites":[],"updatePoint":{"line":3,"column":19},"line":3,"code":"test('should render', async () => {\n  expect(await page.textContent('.app')).toBe('1')\n  expect(await page.textContent('.dep')).toBe('1')\n  expect(await page.textContent('.nested')).toBe('1')\n})","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"should connect","suites":[],"updatePoint":{"line":10,"column":22},"line":10,"code":"  test('should connect', async () => {\n    expect(browserLogs.length).toBe(2)\n    expect(browserLogs.some((msg) => msg.match('connected'))).toBe(true)\n    browserLogs.length = 0\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"self accept","suites":[],"updatePoint":{"line":16,"column":19},"line":16,"code":"  test('self accept', async () => {\n    const el = await page.$('.app')\n\n    editFile('hmr.ts', (code) => code.replace('const foo = 1', 'const foo = 2'))\n    await untilUpdated(() => el.textContent(), '2')\n\n    expect(browserLogs).toMatchObject([\n      '>>> vite:beforeUpdate -- update',\n      'foo was: 1',\n      '(self-accepting 1) foo is now: 2',\n      '(self-accepting 2) foo is now: 2',\n      '[vite] hot updated: /hmr.ts'\n    ])\n    browserLogs.length = 0\n\n    editFile('hmr.ts', (code) => code.replace('const foo = 2', 'const foo = 3'))\n    await untilUpdated(() => el.textContent(), '3')\n\n    expect(browserLogs).toMatchObject([\n      '>>> vite:beforeUpdate -- update',\n      'foo was: 2',\n      '(self-accepting 1) foo is now: 3',\n      '(self-accepting 2) foo is now: 3',\n      '[vite] hot updated: /hmr.ts'\n    ])\n    browserLogs.length = 0\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"accept dep","suites":[],"updatePoint":{"line":44,"column":18},"line":44,"code":"  test('accept dep', async () => {\n    const el = await page.$('.dep')\n\n    editFile('hmrDep.js', (code) =>\n      code.replace('const foo = 1', 'const foo = 2')\n    )\n    await untilUpdated(() => el.textContent(), '2')\n\n    expect(browserLogs).toMatchObject([\n      '>>> vite:beforeUpdate -- update',\n      '(dep) foo was: 1',\n      '(dep) foo from dispose: 1',\n      '(single dep) foo is now: 2',\n      '(single dep) nested foo is now: 1',\n      '(multi deps) foo is now: 2',\n      '(multi deps) nested foo is now: 1',\n      '[vite] hot updated: /hmrDep.js via /hmr.ts'\n    ])\n    browserLogs.length = 0\n\n    editFile('hmrDep.js', (code) =>\n      code.replace('const foo = 2', 'const foo = 3')\n    )\n    await untilUpdated(() => el.textContent(), '3')\n\n    expect(browserLogs).toMatchObject([\n      '>>> vite:beforeUpdate -- update',\n      '(dep) foo was: 2',\n      '(dep) foo from dispose: 2',\n      '(single dep) foo is now: 3',\n      '(single dep) nested foo is now: 1',\n      '(multi deps) foo is now: 3',\n      '(multi deps) nested foo is now: 1',\n      '[vite] hot updated: /hmrDep.js via /hmr.ts'\n    ])\n    browserLogs.length = 0\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"nested dep propagation","suites":[],"updatePoint":{"line":82,"column":30},"line":82,"code":"  test('nested dep propagation', async () => {\n    const el = await page.$('.nested')\n\n    editFile('hmrNestedDep.js', (code) =>\n      code.replace('const foo = 1', 'const foo = 2')\n    )\n    await untilUpdated(() => el.textContent(), '2')\n\n    expect(browserLogs).toMatchObject([\n      '>>> vite:beforeUpdate -- update',\n      '(dep) foo was: 3',\n      '(dep) foo from dispose: 3',\n      '(single dep) foo is now: 3',\n      '(single dep) nested foo is now: 2',\n      '(multi deps) foo is now: 3',\n      '(multi deps) nested foo is now: 2',\n      '[vite] hot updated: /hmrDep.js via /hmr.ts'\n    ])\n    browserLogs.length = 0\n\n    editFile('hmrNestedDep.js', (code) =>\n      code.replace('const foo = 2', 'const foo = 3')\n    )\n    await untilUpdated(() => el.textContent(), '3')\n\n    expect(browserLogs).toMatchObject([\n      '>>> vite:beforeUpdate -- update',\n      '(dep) foo was: 3',\n      '(dep) foo from dispose: 3',\n      '(single dep) foo is now: 3',\n      '(single dep) nested foo is now: 3',\n      '(multi deps) foo is now: 3',\n      '(multi deps) nested foo is now: 3',\n      '[vite] hot updated: /hmrDep.js via /hmr.ts'\n    ])\n    browserLogs.length = 0\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"plugin hmr handler + custom event","suites":[],"updatePoint":{"line":120,"column":41},"line":120,"code":"  test('plugin hmr handler + custom event', async () => {\n    const el = await page.$('.custom')\n    editFile('customFile.js', (code) => code.replace('custom', 'edited'))\n    await untilUpdated(() => el.textContent(), 'edited')\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"plugin client-server communication","suites":[],"updatePoint":{"line":126,"column":42},"line":126,"code":"  test('plugin client-server communication', async () => {\n    const el = await page.$('.custom-communication')\n    await untilUpdated(() => el.textContent(), '3')\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"full-reload encodeURI path","suites":[],"updatePoint":{"line":131,"column":34},"line":131,"code":"  test('full-reload encodeURI path', async () => {\n    await page.goto(\n      viteTestUrl + '/unicode-path/中文-にほんご-한글-🌕🌖🌗/index.html'\n    )\n    const el = await page.$('#app')\n    expect(await el.textContent()).toBe('title')\n    await editFile(\n      'unicode-path/中文-にほんご-한글-🌕🌖🌗/index.html',\n      (code) => code.replace('title', 'title2')\n    )\n    await page.waitForEvent('load')\n    await untilUpdated(\n      async () => (await page.$('#app')).textContent(),\n      'title2'\n    )\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"CSS update preserves query params","suites":[],"updatePoint":{"line":148,"column":41},"line":148,"code":"  test('CSS update preserves query params', async () => {\n    await page.goto(viteTestUrl)\n\n    editFile('global.css', (code) => code.replace('white', 'tomato'))\n\n    const elprev = await page.$('.css-prev')\n    const elpost = await page.$('.css-post')\n    await untilUpdated(() => elprev.textContent(), 'param=required')\n    await untilUpdated(() => elpost.textContent(), 'param=required')\n    const textprev = await elprev.textContent()\n    const textpost = await elpost.textContent()\n    expect(textprev).not.toBe(textpost)\n    expect(textprev).not.toMatch('direct')\n    expect(textpost).not.toMatch('direct')\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"not loaded dynamic import","suites":[],"updatePoint":{"line":164,"column":33},"line":164,"code":"  test('not loaded dynamic import', async () => {\n    await page.goto(viteTestUrl + '/dynamic-import/index.html')\n\n    let btn = await page.$('button')\n    expect(await btn.textContent()).toBe('Counter 0')\n    await btn.click()\n    expect(await btn.textContent()).toBe('Counter 1')\n\n    // Modifying `index.ts` triggers a page reload, as expected\n    editFile('dynamic-import/index.ts', (code) => code)\n    await page.waitForNavigation()\n    btn = await page.$('button')\n    expect(await btn.textContent()).toBe('Counter 0')\n\n    await btn.click()\n    expect(await btn.textContent()).toBe('Counter 1')\n\n    // #7561\n    // `dep.ts` defines `import.module.hot.accept` and has not been loaded.\n    // Therefore, modifying it has no effect (doesn't trigger a page reload).\n    // (Note that, a dynamic import that is never loaded and that does not\n    // define `accept.module.hot.accept` may wrongfully trigger a full page\n    // reload, see discussion at #7561.)\n    editFile('dynamic-import/dep.ts', (code) => code)\n    try {\n      await page.waitForNavigation({ timeout: 1000 })\n    } catch (err) {\n      const errMsg = 'page.waitForNavigation: Timeout 1000ms exceeded.'\n      expect(err.message.slice(0, errMsg.length)).toBe(errMsg)\n    }\n    btn = await page.$('button')\n    expect(await btn.textContent()).toBe('Counter 1')\n  })","file":"hmr.spec.ts","skipped":false,"dir":"packages/playground/hmr/__tests__"},{"name":"pre transform","suites":[],"updatePoint":{"line":4,"column":21},"line":4,"code":"  test('pre transform', async () => {\n    expect(await page.$('head meta[name=viewport]')).toBeTruthy()\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"string transform","suites":[],"updatePoint":{"line":8,"column":24},"line":8,"code":"  test('string transform', async () => {\n    expect(await page.textContent('h1')).toBe(\n      isNested ? 'Nested' : 'Transformed'\n    )\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"tags transform","suites":[],"updatePoint":{"line":14,"column":22},"line":14,"code":"  test('tags transform', async () => {\n    const el = await page.$('head meta[name=description]')\n    expect(await el.getAttribute('content')).toBe('a vite app')\n\n    const kw = await page.$('head meta[name=keywords]')\n    expect(await kw.getAttribute('content')).toBe('es modules')\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"combined transform","suites":[],"updatePoint":{"line":22,"column":26},"line":22,"code":"  test('combined transform', async () => {\n    expect(await page.title()).toBe('Test HTML transforms')\n    // the p should be injected to body\n    expect(await page.textContent('body p.inject')).toBe('This is injected')\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"server only transform","suites":[],"updatePoint":{"line":28,"column":29},"line":28,"code":"  test('server only transform', async () => {\n    if (!isBuild) {\n      expect(await page.textContent('body p.server')).toMatch(\n        'injected only during dev'\n      )\n    } else {\n      expect(await page.innerHTML('body')).not.toMatch('p class=\"server\"')\n    }\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"build only transform","suites":[],"updatePoint":{"line":38,"column":28},"line":38,"code":"  test('build only transform', async () => {\n    if (isBuild) {\n      expect(await page.textContent('body p.build')).toMatch(\n        'injected only during build'\n      )\n    } else {\n      expect(await page.innerHTML('body')).not.toMatch('p class=\"build\"')\n    }\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"conditional transform","suites":[],"updatePoint":{"line":48,"column":29},"line":48,"code":"  test('conditional transform', async () => {\n    if (isNested) {\n      expect(await page.textContent('body p.conditional')).toMatch(\n        'injected only for /nested/'\n      )\n    } else {\n      expect(await page.innerHTML('body')).not.toMatch('p class=\"conditional\"')\n    }\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"body prepend/append transform","suites":[],"updatePoint":{"line":58,"column":37},"line":58,"code":"  test('body prepend/append transform', async () => {\n    expect(await page.innerHTML('body')).toMatch(\n      /prepended to body(.*)appended to body/s\n    )\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"css","suites":[],"updatePoint":{"line":64,"column":11},"line":64,"code":"  test('css', async () => {\n    expect(await getColor('h1')).toBe(isNested ? 'red' : 'blue')\n    expect(await getColor('p')).toBe('grey')\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"preserve comments","suites":["main"],"updatePoint":{"line":73,"column":25},"line":73,"code":"  test('preserve comments', async () => {\n    const html = await page.innerHTML('body')\n    expect(html).toMatch(`<!-- comment one -->`)\n    expect(html).toMatch(`<!-- comment two -->`)\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"script is async","suites":["scriptAsync"],"updatePoint":{"line":105,"column":25},"line":105,"code":"    test('script is async', async () => {\n      expect(await page.$('head script[type=module][async]')).toBeTruthy()\n      expect(await page.$('head script[type=module]:not([async])')).toBeNull()\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"script is mixed","suites":["scriptMixed"],"updatePoint":{"line":117,"column":25},"line":117,"code":"    test('script is mixed', async () => {\n      expect(await page.$('head script[type=module][async]')).toBeNull()\n      expect(await page.$('head script[type=module]:not([async])')).toBeTruthy()\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"zeroJS","suites":["zeroJS"],"updatePoint":{"line":131,"column":16},"line":131,"code":"    test('zeroJS', async () => {\n      expect(await page.$('head script[type=module]')).toBeNull()\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"is inlined","suites":["inline entry"],"updatePoint":{"line":141,"column":20},"line":141,"code":"    test('is inlined', async () => {\n      await page.goto(viteTestUrl + '/inline/shared-1.html?v=1')\n      expect(await countScriptTags()).toBeGreaterThan(1)\n      expect(await countPreloadTags()).toBe(0)\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"is not inlined","suites":["inline entry"],"updatePoint":{"line":147,"column":24},"line":147,"code":"    test('is not inlined', async () => {\n      await page.goto(viteTestUrl + '/inline/unique.html?v=1')\n      expect(await countScriptTags()).toBe(1)\n      expect(await countPreloadTags()).toBeGreaterThan(0)\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"execution order when inlined","suites":["inline entry"],"updatePoint":{"line":153,"column":38},"line":153,"code":"    test('execution order when inlined', async () => {\n      await page.goto(viteTestUrl + '/inline/shared-2.html?v=1')\n      expect((await page.textContent('#output')).trim()).toBe(\n        'dep1 common dep2 dep3 shared'\n      )\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"execution order when not inlined","suites":["inline entry"],"updatePoint":{"line":160,"column":42},"line":160,"code":"    test('execution order when not inlined', async () => {\n      await page.goto(viteTestUrl + '/inline/unique.html?v=1')\n      expect((await page.textContent('#output')).trim()).toBe(\n        'dep1 common dep2 unique'\n      )\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"noHead tags injection","suites":["noHead"],"updatePoint":{"line":175,"column":29},"line":175,"code":"  test('noHead tags injection', async () => {\n    const el = await page.$('html meta[name=description]')\n    expect(await el.getAttribute('content')).toBe('a vite app')\n\n    const kw = await page.$('html meta[name=keywords]')\n    expect(await kw.getAttribute('content')).toBe('es modules')\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"noBody tags injection","suites":["noBody"],"updatePoint":{"line":190,"column":29},"line":190,"code":"  test('noBody tags injection', async () => {\n    // this selects the first noscript in body, even without a body tag\n    const el = await page.$('body noscript')\n    expect(await el.innerHTML()).toMatch(`<!-- this is prepended to body -->`)\n\n    const kw = await page.$('html:last-child')\n    expect(await kw.innerHTML()).toMatch(`<!-- this is appended to body -->`)\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"direct access","suites":["unicode path"],"updatePoint":{"line":201,"column":21},"line":201,"code":"  test('direct access', async () => {\n    await page.goto(\n      viteTestUrl + '/unicode-path/中文-にほんご-한글-🌕🌖🌗/index.html'\n    )\n    expect(await page.textContent('h1')).toBe('unicode-path')\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"spa fallback","suites":["unicode path"],"updatePoint":{"line":208,"column":20},"line":208,"code":"  test('spa fallback', async () => {\n    await page.goto(viteTestUrl + '/unicode-path/中文-にほんご-한글-🌕🌖🌗/')\n    expect(await page.textContent('h1')).toBe('unicode-path')\n  })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"should be 500 with overlay","suites":["invalid"],"updatePoint":{"line":216,"column":36},"line":216,"code":"    test('should be 500 with overlay', async () => {\n      const response = await page.goto(viteTestUrl + '/invalid.html')\n      expect(response.status()).toBe(500)\n\n      const errorOverlay = await page.waitForSelector('vite-error-overlay')\n      expect(errorOverlay).toBeTruthy()\n\n      const message = await errorOverlay.$$eval('.message-body', (m) => {\n        return m[0].innerHTML\n      })\n      expect(message).toMatch(/^Unable to parse HTML/)\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"should reload when fixed","suites":["invalid"],"updatePoint":{"line":229,"column":34},"line":229,"code":"    test('should reload when fixed', async () => {\n      const response = await page.goto(viteTestUrl + '/invalid.html')\n      await editFile('invalid.html', (content) => {\n        return content.replace('<div Bad', '<div> Good')\n      })\n      const content = await page.waitForSelector('text=Good HTML')\n      expect(content).toBeTruthy()\n    })","file":"html.spec.ts","skipped":false,"dir":"packages/playground/html/__tests__"},{"name":"default import","suites":[],"updatePoint":{"line":8,"column":20},"line":8,"code":"test('default import', async () => {\n  expect(await page.textContent('.full')).toBe(stringified)\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"named import","suites":[],"updatePoint":{"line":12,"column":18},"line":12,"code":"test('named import', async () => {\n  expect(await page.textContent('.named')).toBe(json.hello)\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"deep import","suites":[],"updatePoint":{"line":16,"column":17},"line":16,"code":"test('deep import', async () => {\n  expect(await page.textContent('.deep-full')).toBe(deepStringified)\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"named deep import","suites":[],"updatePoint":{"line":20,"column":23},"line":20,"code":"test('named deep import', async () => {\n  expect(await page.textContent('.deep-named')).toBe(deepJson.name)\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"dynamic import","suites":[],"updatePoint":{"line":24,"column":20},"line":24,"code":"test('dynamic import', async () => {\n  expect(await page.textContent('.dynamic')).toBe(stringified)\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"dynamic import, named","suites":[],"updatePoint":{"line":28,"column":27},"line":28,"code":"test('dynamic import, named', async () => {\n  expect(await page.textContent('.dynamic-named')).toBe(json.hello)\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"fetch","suites":[],"updatePoint":{"line":32,"column":11},"line":32,"code":"test('fetch', async () => {\n  expect(await page.textContent('.fetch')).toBe(stringified)\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"?url","suites":[],"updatePoint":{"line":36,"column":10},"line":36,"code":"test('?url', async () => {\n  expect(await page.textContent('.url')).toMatch(\n    isBuild ? 'data:application/json' : '/test.json'\n  )\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"?raw","suites":[],"updatePoint":{"line":42,"column":10},"line":42,"code":"test('?raw', async () => {\n  expect(await page.textContent('.raw')).toBe(\n    require('fs').readFileSync(require.resolve('../test.json'), 'utf-8')\n  )\n})","file":"json.spec.ts","skipped":false,"dir":"packages/playground/json/__tests__"},{"name":"should work","suites":[],"updatePoint":{"line":10,"column":17},"line":10,"code":"test('should work', async () => {\n  expect(await page.textContent('#app')).toMatch('Hello')\n})","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"import.meta.env.LEGACY","suites":[],"updatePoint":{"line":14,"column":28},"line":14,"code":"test('import.meta.env.LEGACY', async () => {\n  expect(await page.textContent('#env')).toMatch(isBuild ? 'true' : 'false')\n})","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"transpiles down iterators correctly","suites":[],"updatePoint":{"line":19,"column":41},"line":19,"code":"test('transpiles down iterators correctly', async () => {\n  expect(await page.textContent('#iterators')).toMatch('hello')\n})","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"wraps with iife","suites":[],"updatePoint":{"line":23,"column":21},"line":23,"code":"test('wraps with iife', async () => {\n  expect(await page.textContent('#babel-helpers')).toMatch(\n    'exposed babel helpers: false'\n  )\n})","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"generates assets","suites":[],"updatePoint":{"line":29,"column":22},"line":29,"code":"test('generates assets', async () => {\n  await untilUpdated(\n    () => page.textContent('#assets'),\n    isBuild\n      ? [\n          'index: 404',\n          'index-legacy: 404',\n          'chunk-async: 404',\n          'chunk-async-legacy: 404',\n          'immutable-chunk: 200',\n          'immutable-chunk-legacy: 200',\n          'polyfills-legacy: 404'\n        ].join('\\n')\n      : [\n          'index: 404',\n          'index-legacy: 404',\n          'chunk-async: 404',\n          'chunk-async-legacy: 404',\n          'immutable-chunk: 404',\n          'immutable-chunk-legacy: 404',\n          'polyfills-legacy: 404'\n        ].join('\\n'),\n    true\n  )\n})","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"correctly emits styles","suites":[],"updatePoint":{"line":55,"column":28},"line":55,"code":"test('correctly emits styles', async () => {\n  expect(await getColor('#app')).toBe('red')\n})","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"should generate correct manifest","suites":[],"updatePoint":{"line":60,"column":40},"line":60,"code":"  test('should generate correct manifest', async () => {\n    const manifest = readManifest()\n    expect(manifest['../../../vite/legacy-polyfills']).toBeDefined()\n    expect(manifest['../../../vite/legacy-polyfills'].src).toBe(\n      '../../../vite/legacy-polyfills'\n    )\n  })","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"should minify legacy chunks with terser","suites":[],"updatePoint":{"line":68,"column":47},"line":68,"code":"  test('should minify legacy chunks with terser', async () => {\n    // This is a ghetto heuristic, but terser output seems to reliably start\n    // with one of the following, and non-terser output (including unminified or\n    // ebuild-minified) does not!\n    const terserPatt = /^(?:!function|System.register)/\n\n    expect(findAssetFile(/chunk-async-legacy/)).toMatch(terserPatt)\n    expect(findAssetFile(/chunk-async\\./)).not.toMatch(terserPatt)\n    expect(findAssetFile(/immutable-chunk-legacy/)).toMatch(terserPatt)\n    expect(findAssetFile(/immutable-chunk\\./)).not.toMatch(terserPatt)\n    expect(findAssetFile(/index-legacy/)).toMatch(terserPatt)\n    expect(findAssetFile(/index\\./)).not.toMatch(terserPatt)\n    expect(findAssetFile(/polyfills-legacy/)).toMatch(terserPatt)\n  })","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"should emit css file","suites":[],"updatePoint":{"line":83,"column":28},"line":83,"code":"  test('should emit css file', async () => {\n    expect(listAssets().some((filename) => filename.endsWith('.css')))\n  })","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"includes structuredClone polyfill which is supported after core-js v3","suites":[],"updatePoint":{"line":87,"column":77},"line":87,"code":"  test('includes structuredClone polyfill which is supported after core-js v3', () => {\n    expect(findAssetFile(/polyfills-legacy/)).toMatch('\"structuredClone\"')\n  })","file":"legacy.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"should work","suites":[],"updatePoint":{"line":7,"column":19},"line":7,"code":"  test('should work', async () => {\n    await page.goto(url)\n    expect(await page.textContent('#app')).toMatch('Hello')\n  })","file":"ssr/legacy-ssr.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"import.meta.env.LEGACY","suites":[],"updatePoint":{"line":12,"column":30},"line":12,"code":"  test('import.meta.env.LEGACY', async () => {\n    // SSR build is always modern\n    expect(await page.textContent('#env')).toMatch('false')\n  })","file":"ssr/legacy-ssr.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"should work","suites":[],"updatePoint":{"line":19,"column":19},"line":19,"code":"  test('should work', () => void 0)","file":"ssr/legacy-ssr.spec.ts","skipped":false,"dir":"packages/playground/legacy/__tests__"},{"name":"es","suites":[],"updatePoint":{"line":6,"column":10},"line":6,"code":"  test('es', async () => {\n    expect(await page.textContent('.es')).toBe('It works')\n  })","file":"lib.spec.ts","skipped":false,"dir":"packages/playground/lib/__tests__"},{"name":"umd","suites":[],"updatePoint":{"line":10,"column":11},"line":10,"code":"  test('umd', async () => {\n    expect(await page.textContent('.umd')).toBe('It works')\n  })","file":"lib.spec.ts","skipped":false,"dir":"packages/playground/lib/__tests__"},{"name":"iife","suites":[],"updatePoint":{"line":14,"column":12},"line":14,"code":"  test('iife', async () => {\n    expect(await page.textContent('.iife')).toBe('It works')\n  })","file":"lib.spec.ts","skipped":false,"dir":"packages/playground/lib/__tests__"},{"name":"Library mode does not include `preload`","suites":[],"updatePoint":{"line":18,"column":47},"line":18,"code":"  test('Library mode does not include `preload`', async () => {\n    expect(await page.textContent('.dynamic-import-message')).toBe('hello vite')\n    const code = fs.readFileSync(\n      path.join(testDir, 'dist/lib/dynamic-import-message.js'),\n      'utf-8'\n    )\n    expect(code).not.toMatch('__vitePreload')\n  })","file":"lib.spec.ts","skipped":false,"dir":"packages/playground/lib/__tests__"},{"name":"dev","suites":[],"updatePoint":{"line":27,"column":11},"line":27,"code":"  test('dev', async () => {\n    expect(await page.textContent('.demo')).toBe('It works')\n  })","file":"lib.spec.ts","skipped":false,"dir":"packages/playground/lib/__tests__"},{"name":"should have css applied on second dynamic import","suites":[],"updatePoint":{"line":3,"column":54},"line":3,"code":"test('should have css applied on second dynamic import', async () => {\n  await untilUpdated(() => page.textContent('.content'), 'Initial', true)\n  await page.click('.b')\n\n  await untilUpdated(() => page.textContent('.content'), 'Reference', true)\n  expect(await getColor('.content')).toBe('red')\n})","file":"multiple-entrypoints.spec.ts","skipped":false,"dir":"packages/playground/multiple-entrypoints/__tests__"},{"name":"handle nested package","suites":[],"updatePoint":{"line":1,"column":27},"line":1,"code":"test('handle nested package', async () => {\n  expect(await page.textContent('.a')).toBe('A@2.0.0')\n  expect(await page.textContent('.b')).toBe('B@1.0.0')\n  expect(await page.textContent('.nested-a')).toBe('A@1.0.0')\n  const c = await page.textContent('.c')\n  expect(c).toBe('es-C@1.0.0')\n  expect(await page.textContent('.side-c')).toBe(c)\n  expect(await page.textContent('.d')).toBe('D@1.0.0')\n  expect(await page.textContent('.nested-d')).toBe('D-nested@1.0.0')\n  expect(await page.textContent('.nested-e')).toBe('1')\n})","file":"nested-deps.spec.ts","skipped":false,"dir":"packages/playground/nested-deps/__tests__"},{"name":"default + named imports from cjs dep (react)","suites":[],"updatePoint":{"line":3,"column":50},"line":3,"code":"test('default + named imports from cjs dep (react)', async () => {\n  expect(await page.textContent('.cjs button')).toBe('count is 0')\n  await page.click('.cjs button')\n  expect(await page.textContent('.cjs button')).toBe('count is 1')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"named imports from webpacked cjs (phoenix)","suites":[],"updatePoint":{"line":9,"column":48},"line":9,"code":"test('named imports from webpacked cjs (phoenix)', async () => {\n  expect(await page.textContent('.cjs-phoenix')).toBe('ok')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"default import from webpacked cjs (clipboard)","suites":[],"updatePoint":{"line":13,"column":51},"line":13,"code":"test('default import from webpacked cjs (clipboard)', async () => {\n  expect(await page.textContent('.cjs-clipboard')).toBe('ok')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dynamic imports from cjs dep (react)","suites":[],"updatePoint":{"line":17,"column":42},"line":17,"code":"test('dynamic imports from cjs dep (react)', async () => {\n  expect(await page.textContent('.cjs-dynamic button')).toBe('count is 0')\n  await page.click('.cjs-dynamic button')\n  expect(await page.textContent('.cjs-dynamic button')).toBe('count is 1')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dynamic named imports from webpacked cjs (phoenix)","suites":[],"updatePoint":{"line":23,"column":56},"line":23,"code":"test('dynamic named imports from webpacked cjs (phoenix)', async () => {\n  expect(await page.textContent('.cjs-dynamic-phoenix')).toBe('ok')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dynamic default import from webpacked cjs (clipboard)","suites":[],"updatePoint":{"line":27,"column":59},"line":27,"code":"test('dynamic default import from webpacked cjs (clipboard)', async () => {\n  expect(await page.textContent('.cjs-dynamic-clipboard')).toBe('ok')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dynamic default import from cjs (cjs-dynamic-dep-cjs-compiled-from-esm)","suites":[],"updatePoint":{"line":31,"column":77},"line":31,"code":"test('dynamic default import from cjs (cjs-dynamic-dep-cjs-compiled-from-esm)', async () => {\n  expect(await page.textContent('.cjs-dynamic-dep-cjs-compiled-from-esm')).toBe(\n    'ok'\n  )\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dynamic default import from cjs (cjs-dynamic-dep-cjs-compiled-from-cjs)","suites":[],"updatePoint":{"line":37,"column":77},"line":37,"code":"test('dynamic default import from cjs (cjs-dynamic-dep-cjs-compiled-from-cjs)', async () => {\n  expect(await page.textContent('.cjs-dynamic-dep-cjs-compiled-from-cjs')).toBe(\n    'ok'\n  )\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dedupe","suites":[],"updatePoint":{"line":43,"column":12},"line":43,"code":"test('dedupe', async () => {\n  expect(await page.textContent('.dedupe button')).toBe('count is 0')\n  await page.click('.dedupe button')\n  expect(await page.textContent('.dedupe button')).toBe('count is 1')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"cjs browser field (axios)","suites":[],"updatePoint":{"line":49,"column":31},"line":49,"code":"test('cjs browser field (axios)', async () => {\n  expect(await page.textContent('.cjs-browser-field')).toBe('pong')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dep from linked dep (lodash-es)","suites":[],"updatePoint":{"line":53,"column":37},"line":53,"code":"test('dep from linked dep (lodash-es)', async () => {\n  expect(await page.textContent('.deps-linked')).toBe('fooBarBaz')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"forced include","suites":[],"updatePoint":{"line":57,"column":20},"line":57,"code":"test('forced include', async () => {\n  expect(await page.textContent('.force-include')).toMatch(`[success]`)\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"import * from optimized dep","suites":[],"updatePoint":{"line":61,"column":33},"line":61,"code":"test('import * from optimized dep', async () => {\n  expect(await page.textContent('.import-star')).toMatch(`[success]`)\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"import from dep with .notjs files","suites":[],"updatePoint":{"line":65,"column":39},"line":65,"code":"test('import from dep with .notjs files', async () => {\n  expect(await page.textContent('.not-js')).toMatch(`[success]`)\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dep with dynamic import","suites":[],"updatePoint":{"line":69,"column":29},"line":69,"code":"test('dep with dynamic import', async () => {\n  expect(await page.textContent('.dep-with-dynamic-import')).toMatch(\n    `[success]`\n  )\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dep with css import","suites":[],"updatePoint":{"line":75,"column":25},"line":75,"code":"test('dep with css import', async () => {\n  expect(await getColor('h1')).toBe('red')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"dep w/ non-js files handled via plugin","suites":[],"updatePoint":{"line":79,"column":44},"line":79,"code":"test('dep w/ non-js files handled via plugin', async () => {\n  expect(await page.textContent('.plugin')).toMatch(`[success]`)\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"vue + vuex","suites":[],"updatePoint":{"line":83,"column":16},"line":83,"code":"test('vue + vuex', async () => {\n  expect(await page.textContent('.vue')).toMatch(`[success]`)\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"esbuild-plugin","suites":[],"updatePoint":{"line":87,"column":20},"line":87,"code":"test('esbuild-plugin', async () => {\n  expect(await page.textContent('.esbuild-plugin')).toMatch(\n    isBuild ? `Hello from a package` : `Hello from an esbuild plugin`\n  )\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"import from hidden dir","suites":[],"updatePoint":{"line":93,"column":28},"line":93,"code":"test('import from hidden dir', async () => {\n  expect(await page.textContent('.hidden-dir')).toBe('hello!')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"import optimize-excluded package that imports optimized-included package","suites":[],"updatePoint":{"line":97,"column":78},"line":97,"code":"test('import optimize-excluded package that imports optimized-included package', async () => {\n  expect(await page.textContent('.nested-include')).toBe('nested-include')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"import aliased package with colon","suites":[],"updatePoint":{"line":101,"column":39},"line":101,"code":"test('import aliased package with colon', async () => {\n  expect(await page.textContent('.url')).toBe('vitejs.dev')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"variable names are reused in different scripts","suites":[],"updatePoint":{"line":105,"column":52},"line":105,"code":"test('variable names are reused in different scripts', async () => {\n  expect(await page.textContent('.reused-variable-names')).toBe('reused')\n})","file":"optimize-deps.spec.ts","skipped":false,"dir":"packages/playground/optimize-deps/__tests__"},{"name":"should have no 404s","suites":[],"updatePoint":{"line":3,"column":25},"line":3,"code":"test('should have no 404s', () => {\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('404')\n  })\n})","file":"preload.spec.ts","skipped":false,"dir":"packages/playground/preload/__tests__"},{"name":"dynamic import","suites":[],"updatePoint":{"line":10,"column":22},"line":10,"code":"  test('dynamic import', async () => {\n    const appHtml = await page.content()\n    expect(appHtml).toMatch('This is <b>home</b> page.')\n  })","file":"preload.spec.ts","skipped":false,"dir":"packages/playground/preload/__tests__"},{"name":"dynamic import with comments","suites":[],"updatePoint":{"line":15,"column":36},"line":15,"code":"  test('dynamic import with comments', async () => {\n    await page.goto(viteTestUrl + '/#/hello')\n    const html = await page.content()\n    expect(html).toMatch(\n      /link rel=\"modulepreload\".*?href=\"\\/assets\\/Hello\\.\\w{8}\\.js\"/\n    )\n    expect(html).toMatch(\n      /link rel=\"stylesheet\".*?href=\"\\/assets\\/Hello\\.\\w{8}\\.css\"/\n    )\n  })","file":"preload.spec.ts","skipped":false,"dir":"packages/playground/preload/__tests__"},{"name":"should have no 404s","suites":[],"updatePoint":{"line":1,"column":25},"line":1,"code":"test('should have no 404s', () => {\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('404')\n  })\n})","file":"preserve-symlinks.spec.ts","skipped":false,"dir":"packages/playground/preserve-symlinks/__tests__"},{"name":"not-preserve-symlinks","suites":[],"updatePoint":{"line":7,"column":27},"line":7,"code":"test('not-preserve-symlinks', async () => {\n  expect(await page.textContent('#root')).toBe('hello vite')\n})","file":"preserve-symlinks.spec.ts","skipped":false,"dir":"packages/playground/preserve-symlinks/__tests__"},{"name":"should render","suites":[],"updatePoint":{"line":3,"column":19},"line":3,"code":"test('should render', async () => {\n  expect(await page.textContent('h1')).toMatch(\n    'Hello Vite + React + @emotion/react'\n  )\n})","file":"react.spec.ts","skipped":false,"dir":"packages/playground/react-emotion/__tests__"},{"name":"should update","suites":[],"updatePoint":{"line":9,"column":19},"line":9,"code":"test('should update', async () => {\n  expect(await page.textContent('button')).toMatch('count is: 0')\n  await page.click('button')\n  expect(await page.textContent('button')).toMatch('count is: 1')\n})","file":"react.spec.ts","skipped":false,"dir":"packages/playground/react-emotion/__tests__"},{"name":"should hmr","suites":[],"updatePoint":{"line":15,"column":16},"line":15,"code":"test('should hmr', async () => {\n  editFile('App.jsx', (code) =>\n    code.replace('Vite + React + @emotion/react', 'Updated')\n  )\n  await untilUpdated(() => page.textContent('h1'), 'Hello Updated')\n  // preserve state\n  expect(await page.textContent('button')).toMatch('count is: 1')\n})","file":"react.spec.ts","skipped":false,"dir":"packages/playground/react-emotion/__tests__"},{"name":"should update button style","suites":[],"updatePoint":{"line":24,"column":32},"line":24,"code":"test('should update button style', async () => {\n  function getButtonBorderStyle() {\n    return page.evaluate(() => {\n      return window.getComputedStyle(document.querySelector('button')).border\n    })\n  }\n\n  const styles = await page.evaluate(() => {\n    return document.querySelector('button').style\n  })\n\n  expect(await getButtonBorderStyle()).toMatch('2px solid rgb(0, 0, 0)')\n\n  editFile('App.jsx', (code) =>\n    code.replace('border: 2px solid #000', 'border: 4px solid red')\n  )\n\n  await untilUpdated(getButtonBorderStyle, '4px solid rgb(255, 0, 0)')\n\n  // preserve state\n  expect(await page.textContent('button')).toMatch('count is: 1')\n})","file":"react.spec.ts","skipped":false,"dir":"packages/playground/react-emotion/__tests__"},{"name":"should render","suites":[],"updatePoint":{"line":3,"column":19},"line":3,"code":"test('should render', async () => {\n  expect(await page.textContent('h1')).toMatch('Hello Vite + React')\n})","file":"react.spec.ts","skipped":false,"dir":"packages/playground/react/__tests__"},{"name":"should update","suites":[],"updatePoint":{"line":7,"column":19},"line":7,"code":"test('should update', async () => {\n  expect(await page.textContent('button')).toMatch('count is: 0')\n  await page.click('button')\n  expect(await page.textContent('button')).toMatch('count is: 1')\n})","file":"react.spec.ts","skipped":false,"dir":"packages/playground/react/__tests__"},{"name":"should hmr","suites":[],"updatePoint":{"line":13,"column":16},"line":13,"code":"test('should hmr', async () => {\n  editFile('App.jsx', (code) => code.replace('Vite + React', 'Updated'))\n  await untilUpdated(() => page.textContent('h1'), 'Hello Updated')\n  // preserve state\n  expect(await page.textContent('button')).toMatch('count is: 1')\n})","file":"react.spec.ts","skipped":false,"dir":"packages/playground/react/__tests__"},{"name":"should have annotated jsx with file location metadata","suites":[],"updatePoint":{"line":20,"column":59},"line":20,"code":"test('should have annotated jsx with file location metadata', async () => {\n  // we're not annotating in prod,\n  // so we skip this test when isBuild is true\n  if (isBuild) return\n\n  const meta = await page.evaluate(() => {\n    const button = document.querySelector('button')\n    const key = Object.keys(button).find(\n      (key) => key.indexOf('__reactFiber') === 0\n    )\n    return button[key]._debugSource\n  })\n  // If the evaluate call doesn't crash, and the returned metadata has\n  // the expected fields, we're good.\n  expect(Object.keys(meta).sort()).toEqual([\n    'columnNumber',\n    'fileName',\n    'lineNumber'\n  ])\n})","file":"react.spec.ts","skipped":false,"dir":"packages/playground/react/__tests__"},{"name":"bom import","suites":[],"updatePoint":{"line":3,"column":16},"line":3,"code":"test('bom import', async () => {\n  expect(await page.textContent('.utf8-bom')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"deep import","suites":[],"updatePoint":{"line":7,"column":17},"line":7,"code":"test('deep import', async () => {\n  expect(await page.textContent('.deep-import')).toMatch('[2,4]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"entry with exports field","suites":[],"updatePoint":{"line":11,"column":30},"line":11,"code":"test('entry with exports field', async () => {\n  expect(await page.textContent('.exports-entry')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"deep import with exports field","suites":[],"updatePoint":{"line":15,"column":36},"line":15,"code":"test('deep import with exports field', async () => {\n  expect(await page.textContent('.exports-deep')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"deep import with query with exports field","suites":[],"updatePoint":{"line":19,"column":47},"line":19,"code":"test('deep import with query with exports field', async () => {\n  // since it is imported with `?url` it should return a url\n  expect(await page.textContent('.exports-deep-query')).toMatch(\n    isBuild ? /base64/ : '/exports-path/deep.json'\n  )\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"deep import with exports field + exposed dir","suites":[],"updatePoint":{"line":26,"column":50},"line":26,"code":"test('deep import with exports field + exposed dir', async () => {\n  expect(await page.textContent('.exports-deep-exposed-dir')).toMatch(\n    '[success]'\n  )\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"deep import with exports field + mapped dir","suites":[],"updatePoint":{"line":32,"column":49},"line":32,"code":"test('deep import with exports field + mapped dir', async () => {\n  expect(await page.textContent('.exports-deep-mapped-dir')).toMatch(\n    '[success]'\n  )\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"Respect exports field env key priority","suites":[],"updatePoint":{"line":38,"column":44},"line":38,"code":"test('Respect exports field env key priority', async () => {\n  expect(await page.textContent('.exports-env')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"Respect production/development conditionals","suites":[],"updatePoint":{"line":42,"column":49},"line":42,"code":"test('Respect production/development conditionals', async () => {\n  expect(await page.textContent('.exports-env')).toMatch(\n    isBuild ? `browser.prod.mjs` : `browser.mjs`\n  )\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"implicit dir/index.js","suites":[],"updatePoint":{"line":48,"column":27},"line":48,"code":"test('implicit dir/index.js', async () => {\n  expect(await page.textContent('.index')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"implicit dir/index.js vs explicit file","suites":[],"updatePoint":{"line":52,"column":44},"line":52,"code":"test('implicit dir/index.js vs explicit file', async () => {\n  expect(await page.textContent('.dir-vs-file')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"exact extension vs. duplicated (.js.js)","suites":[],"updatePoint":{"line":56,"column":45},"line":56,"code":"test('exact extension vs. duplicated (.js.js)', async () => {\n  expect(await page.textContent('.exact-extension')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"dont add extension to directory name (./dir-with-ext.js/index.js)","suites":[],"updatePoint":{"line":60,"column":71},"line":60,"code":"test('dont add extension to directory name (./dir-with-ext.js/index.js)', async () => {\n  expect(await page.textContent('.dir-with-ext')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"resolve to the `browser` field instead of `module` when the importer is a `require` call","suites":[],"updatePoint":{"line":64,"column":94},"line":64,"code":"test('resolve to the `browser` field instead of `module` when the importer is a `require` call', async () => {\n  expect(\n    await page.textContent('.require-pkg-with-browser-and-module-field')\n  ).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"resolve to the `main` field instead of `module` when the importer is a `require` call","suites":[],"updatePoint":{"line":70,"column":91},"line":70,"code":"test('resolve to the `main` field instead of `module` when the importer is a `require` call', async () => {\n  expect(await page.textContent('.require-pkg-with-esm-entries')).toMatch(\n    '[success]'\n  )\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"a ts module can import another ts module using its corresponding js file name","suites":[],"updatePoint":{"line":76,"column":83},"line":76,"code":"test('a ts module can import another ts module using its corresponding js file name', async () => {\n  expect(await page.textContent('.ts-extension')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"filename with dot","suites":[],"updatePoint":{"line":80,"column":23},"line":80,"code":"test('filename with dot', async () => {\n  expect(await page.textContent('.dot')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"browser field","suites":[],"updatePoint":{"line":84,"column":19},"line":84,"code":"test('browser field', async () => {\n  expect(await page.textContent('.browser')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"css entry","suites":[],"updatePoint":{"line":88,"column":15},"line":88,"code":"test('css entry', async () => {\n  expect(await page.textContent('.css')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"monorepo linked dep","suites":[],"updatePoint":{"line":92,"column":25},"line":92,"code":"test('monorepo linked dep', async () => {\n  expect(await page.textContent('.monorepo')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"plugin resolved virtual file","suites":[],"updatePoint":{"line":96,"column":34},"line":96,"code":"test('plugin resolved virtual file', async () => {\n  expect(await page.textContent('.virtual')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"plugin resolved custom virtual file","suites":[],"updatePoint":{"line":100,"column":41},"line":100,"code":"test('plugin resolved custom virtual file', async () => {\n  expect(await page.textContent('.custom-virtual')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"resolve inline package","suites":[],"updatePoint":{"line":104,"column":28},"line":104,"code":"test('resolve inline package', async () => {\n  expect(await page.textContent('.inline-pkg')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"resolve.extensions","suites":[],"updatePoint":{"line":108,"column":24},"line":108,"code":"test('resolve.extensions', async () => {\n  expect(await page.textContent('.custom-ext')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"resolve.mainFields","suites":[],"updatePoint":{"line":112,"column":24},"line":112,"code":"test('resolve.mainFields', async () => {\n  expect(await page.textContent('.custom-main-fields')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"resolve.conditions","suites":[],"updatePoint":{"line":116,"column":24},"line":116,"code":"test('resolve.conditions', async () => {\n  expect(await page.textContent('.custom-condition')).toMatch('[success]')\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"resolve package that contains # in path","suites":[],"updatePoint":{"line":120,"column":45},"line":120,"code":"test('resolve package that contains # in path', async () => {\n  expect(await page.textContent('.path-contains-sharp-symbol')).toMatch(\n    '[success]'\n  )\n})","file":"resolve.spec.ts","skipped":false,"dir":"packages/playground/resolve/__tests__"},{"name":"msg should be encrypted","suites":[],"updatePoint":{"line":11,"column":29},"line":11,"code":"test('msg should be encrypted', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.encrypted-msg')).not.toMatch(\n    'Secret Message!'\n  )\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"msg read by fs/promises","suites":[],"updatePoint":{"line":18,"column":29},"line":18,"code":"test('msg read by fs/promises', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.file-message')).toMatch('File Content!')\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"msg from primitive export","suites":[],"updatePoint":{"line":23,"column":31},"line":23,"code":"test('msg from primitive export', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.primitive-export-message')).toMatch(\n    'Hello World!'\n  )\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"msg from TS transpiled exports","suites":[],"updatePoint":{"line":30,"column":36},"line":30,"code":"test('msg from TS transpiled exports', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.ts-default-export-message')).toMatch(\n    'Hello World!'\n  )\n  expect(await page.textContent('.ts-named-export-message')).toMatch(\n    'Hello World!'\n  )\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"msg from Object.assign exports","suites":[],"updatePoint":{"line":40,"column":36},"line":40,"code":"test('msg from Object.assign exports', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.object-assigned-exports-message')).toMatch(\n    'Hello World!'\n  )\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"msg from forwarded exports","suites":[],"updatePoint":{"line":47,"column":32},"line":47,"code":"test('msg from forwarded exports', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.forwarded-export-message')).toMatch(\n    'Hello World!'\n  )\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"msg from define properties exports","suites":[],"updatePoint":{"line":54,"column":40},"line":54,"code":"test('msg from define properties exports', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.define-properties-exports-msg')).toMatch(\n    'Hello World!'\n  )\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"msg from define property exports","suites":[],"updatePoint":{"line":61,"column":38},"line":61,"code":"test('msg from define property exports', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.define-property-exports-msg')).toMatch(\n    'Hello World!'\n  )\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"msg from only object assigned exports","suites":[],"updatePoint":{"line":68,"column":43},"line":68,"code":"test('msg from only object assigned exports', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.only-object-assigned-exports-msg')).toMatch(\n    'Hello World!'\n  )\n})","file":"ssr-deps.spec.ts","skipped":false,"dir":"packages/playground/ssr-deps/__tests__"},{"name":"no injected inline scripts are present","suites":["injected inline scripts"],"updatePoint":{"line":7,"column":46},"line":7,"code":"  test('no injected inline scripts are present', async () => {\n    await page.goto(url)\n    const inlineScripts = await page.$$eval('script', (nodes) =>\n      nodes.filter((n) => !n.getAttribute('src') && n.innerHTML)\n    )\n    expect(inlineScripts).toHaveLength(0)\n  })","file":"ssr-html.spec.ts","skipped":false,"dir":"packages/playground/ssr-html/__tests__"},{"name":"injected script proxied correctly","suites":["injected inline scripts"],"updatePoint":{"line":15,"column":41},"line":15,"code":"  test('injected script proxied correctly', async () => {\n    await page.goto(url)\n    const proxiedScripts = await page.$$eval('script', (nodes) =>\n      nodes\n        .filter((n) => {\n          const src = n.getAttribute('src')\n          if (!src) return false\n          return src.includes('?html-proxy&index')\n        })\n        .map((n) => n.getAttribute('src'))\n    )\n\n    // assert at least 1 proxied script exists\n    expect(proxiedScripts).not.toHaveLength(0)\n\n    const scriptContents = await Promise.all(\n      proxiedScripts.map((src) => fetch(url + src).then((res) => res.text()))\n    )\n\n    // all proxied scripts return code\n    for (const code of scriptContents) {\n      expect(code).toBeTruthy()\n    }\n  })","file":"ssr-html.spec.ts","skipped":false,"dir":"packages/playground/ssr-html/__tests__"},{"name":"no injected inline scripts are present","suites":["injected inline scripts"],"updatePoint":{"line":7,"column":46},"line":7,"code":"  test('no injected inline scripts are present', async () => {\n    await page.goto(url)\n    const inlineScripts = await page.$$eval('script', (nodes) =>\n      nodes.filter((n) => !n.getAttribute('src') && n.innerHTML)\n    )\n    expect(inlineScripts).toHaveLength(0)\n  })","file":"ssr-pug.spec.ts","skipped":false,"dir":"packages/playground/ssr-pug/__tests__"},{"name":"injected script proxied correctly","suites":["injected inline scripts"],"updatePoint":{"line":15,"column":41},"line":15,"code":"  test('injected script proxied correctly', async () => {\n    await page.goto(url)\n    const proxiedScripts = await page.$$eval('script', (nodes) =>\n      nodes\n        .filter((n) => {\n          const src = n.getAttribute('src')\n          if (!src) return false\n          return src.includes('?html-proxy&index')\n        })\n        .map((n) => n.getAttribute('src'))\n    )\n\n    // assert at least 1 proxied script exists\n    expect(proxiedScripts).not.toHaveLength(0)\n\n    const scriptContents = await Promise.all(\n      proxiedScripts.map((src) => fetch(url + src).then((res) => res.text()))\n    )\n\n    // all proxied scripts return code\n    for (const code of scriptContents) {\n      expect(code).toBeTruthy()\n    }\n  })","file":"ssr-pug.spec.ts","skipped":false,"dir":"packages/playground/ssr-pug/__tests__"},{"name":"/env","suites":[],"updatePoint":{"line":7,"column":10},"line":7,"code":"test('/env', async () => {\n  await page.goto(url + '/env')\n  expect(await page.textContent('h1')).toMatch('default message here')\n\n  // raw http request\n  const envHtml = await (await fetch(url + '/env')).text()\n  expect(envHtml).toMatch('API_KEY_qwertyuiop')\n})","file":"ssr-react.spec.ts","skipped":false,"dir":"packages/playground/ssr-react/__tests__"},{"name":"/about","suites":[],"updatePoint":{"line":16,"column":12},"line":16,"code":"test('/about', async () => {\n  await page.goto(url + '/about')\n  expect(await page.textContent('h1')).toMatch('About')\n  // should not have hydration mismatch\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('Expected server HTML')\n  })\n\n  // raw http request\n  const aboutHtml = await (await fetch(url + '/about')).text()\n  expect(aboutHtml).toMatch('About')\n})","file":"ssr-react.spec.ts","skipped":false,"dir":"packages/playground/ssr-react/__tests__"},{"name":"/","suites":[],"updatePoint":{"line":29,"column":7},"line":29,"code":"test('/', async () => {\n  await page.goto(url)\n  expect(await page.textContent('h1')).toMatch('Home')\n  // should not have hydration mismatch\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('Expected server HTML')\n  })\n\n  // raw http request\n  const html = await (await fetch(url)).text()\n  expect(html).toMatch('Home')\n})","file":"ssr-react.spec.ts","skipped":false,"dir":"packages/playground/ssr-react/__tests__"},{"name":"hmr","suites":[],"updatePoint":{"line":42,"column":9},"line":42,"code":"test('hmr', async () => {\n  editFile('src/pages/Home.jsx', (code) =>\n    code.replace('<h1>Home', '<h1>changed')\n  )\n  await untilUpdated(() => page.textContent('h1'), 'changed')\n})","file":"ssr-react.spec.ts","skipped":false,"dir":"packages/playground/ssr-react/__tests__"},{"name":"client navigation","suites":[],"updatePoint":{"line":49,"column":23},"line":49,"code":"test('client navigation', async () => {\n  await untilUpdated(() => page.textContent('a[href=\"/about\"]'), 'About')\n  await page.click('a[href=\"/about\"]')\n  await untilUpdated(() => page.textContent('h1'), 'About')\n  editFile('src/pages/About.jsx', (code) =>\n    code.replace('<h1>About', '<h1>changed')\n  )\n  await untilUpdated(() => page.textContent('h1'), 'changed')\n})","file":"ssr-react.spec.ts","skipped":false,"dir":"packages/playground/ssr-react/__tests__"},{"name":"circular dependecies modules doesn't throw","suites":[],"updatePoint":{"line":59,"column":48},"line":59,"code":"test(`circular dependecies modules doesn't throw`, async () => {\n  await page.goto(url)\n  expect(await page.textContent('.circ-dep-init')).toMatch(\n    'circ-dep-init-a circ-dep-init-b'\n  )\n})","file":"ssr-react.spec.ts","skipped":false,"dir":"packages/playground/ssr-react/__tests__"},{"name":"vuex can be import succeed by named import","suites":[],"updatePoint":{"line":8,"column":48},"line":8,"code":"test('vuex can be import succeed by named import', async () => {\n  await page.goto(url + '/store')\n  expect(await page.textContent('h1')).toMatch('bar')\n\n  // raw http request\n  const storeHtml = await (await fetch(url + '/store')).text()\n  expect(storeHtml).toMatch('bar')\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"/about","suites":[],"updatePoint":{"line":17,"column":12},"line":17,"code":"test('/about', async () => {\n  await page.goto(url + '/about')\n  expect(await page.textContent('h1')).toMatch('About')\n  // should not have hydration mismatch\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('mismatch')\n  })\n\n  // fetch sub route\n  const aboutHtml = await (await fetch(url + '/about')).text()\n  expect(aboutHtml).toMatch('About')\n  if (isBuild) {\n    // assert correct preload directive generation for async chunks and CSS\n    expect(aboutHtml).not.toMatch(\n      /link rel=\"modulepreload\".*?href=\"\\/assets\\/Home\\.\\w{8}\\.js\"/\n    )\n    expect(aboutHtml).not.toMatch(\n      /link rel=\"stylesheet\".*?href=\"\\/assets\\/Home\\.\\w{8}\\.css\"/\n    )\n    expect(aboutHtml).toMatch(\n      /link rel=\"modulepreload\".*?href=\"\\/assets\\/About\\.\\w{8}\\.js\"/\n    )\n    expect(aboutHtml).toMatch(\n      /link rel=\"stylesheet\".*?href=\"\\/assets\\/About\\.\\w{8}\\.css\"/\n    )\n  }\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"/external","suites":[],"updatePoint":{"line":45,"column":15},"line":45,"code":"test('/external', async () => {\n  await page.goto(url + '/external')\n  expect(await page.textContent('div')).toMatch(\n    'Example external component content'\n  )\n  // should not have hydration mismatch\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('mismatch')\n  })\n\n  // fetch sub route\n  const externalHtml = await (await fetch(url + '/external')).text()\n  expect(externalHtml).toMatch('Example external component content')\n  if (isBuild) {\n    // assert correct preload directive generation for async chunks and CSS\n    expect(externalHtml).not.toMatch(\n      /link rel=\"modulepreload\".*?href=\"\\/assets\\/Home\\.\\w{8}\\.js\"/\n    )\n    expect(externalHtml).not.toMatch(\n      /link rel=\"stylesheet\".*?href=\"\\/assets\\/Home\\.\\w{8}\\.css\"/\n    )\n    expect(externalHtml).toMatch(\n      /link rel=\"modulepreload\".*?href=\"\\/assets\\/External\\.\\w{8}\\.js\"/\n    )\n  }\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"/","suites":[],"updatePoint":{"line":72,"column":7},"line":72,"code":"test('/', async () => {\n  await page.goto(url)\n  expect(await page.textContent('h1')).toMatch('Home')\n  // should not have hydration mismatch\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('mismatch')\n  })\n\n  const html = await (await fetch(url)).text()\n  expect(html).toMatch('Home')\n  if (isBuild) {\n    // assert correct preload directive generation for async chunks and CSS\n    expect(html).toMatch(\n      /link rel=\"modulepreload\".*?href=\"\\/assets\\/Home\\.\\w{8}\\.js\"/\n    )\n    expect(html).toMatch(\n      /link rel=\"stylesheet\".*?href=\"\\/assets\\/Home\\.\\w{8}\\.css\"/\n    )\n    // JSX component preload registration\n    expect(html).toMatch(\n      /link rel=\"modulepreload\".*?href=\"\\/assets\\/Foo\\.\\w{8}\\.js\"/\n    )\n    expect(html).toMatch(\n      /link rel=\"stylesheet\".*?href=\"\\/assets\\/Foo\\.\\w{8}\\.css\"/\n    )\n    expect(html).not.toMatch(\n      /link rel=\"modulepreload\".*?href=\"\\/assets\\/About\\.\\w{8}\\.js\"/\n    )\n    expect(html).not.toMatch(\n      /link rel=\"stylesheet\".*?href=\"\\/assets\\/About\\.\\w{8}\\.css\"/\n    )\n  }\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"css","suites":[],"updatePoint":{"line":106,"column":9},"line":106,"code":"test('css', async () => {\n  if (isBuild) {\n    expect(await getColor('h1')).toBe('green')\n    expect(await getColor('.jsx')).toBe('blue')\n  } else {\n    // During dev, the CSS is loaded from async chunk and we may have to wait\n    // when the test runs concurrently.\n    await untilUpdated(() => getColor('h1'), 'green')\n    await untilUpdated(() => getColor('.jsx'), 'blue')\n  }\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"asset","suites":[],"updatePoint":{"line":118,"column":11},"line":118,"code":"test('asset', async () => {\n  // should have no 404s\n  browserLogs.forEach((msg) => {\n    expect(msg).not.toMatch('404')\n  })\n  const img = await page.$('img')\n  expect(await img.getAttribute('src')).toMatch(\n    isBuild ? /\\/assets\\/logo\\.\\w{8}\\.png/ : '/src/assets/logo.png'\n  )\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"jsx","suites":[],"updatePoint":{"line":129,"column":9},"line":129,"code":"test('jsx', async () => {\n  expect(await page.textContent('.jsx')).toMatch('from JSX')\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"virtual module","suites":[],"updatePoint":{"line":133,"column":20},"line":133,"code":"test('virtual module', async () => {\n  expect(await page.textContent('.virtual')).toMatch('hi')\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"nested virtual module","suites":[],"updatePoint":{"line":137,"column":27},"line":137,"code":"test('nested virtual module', async () => {\n  expect(await page.textContent('.nested-virtual')).toMatch('[success]')\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"hydration","suites":[],"updatePoint":{"line":141,"column":15},"line":141,"code":"test('hydration', async () => {\n  expect(await page.textContent('button')).toMatch('0')\n  await page.click('button')\n  expect(await page.textContent('button')).toMatch('1')\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"hmr","suites":[],"updatePoint":{"line":147,"column":9},"line":147,"code":"test('hmr', async () => {\n  editFile('src/pages/Home.vue', (code) => code.replace('Home', 'changed'))\n  await untilUpdated(() => page.textContent('h1'), 'changed')\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"client navigation","suites":[],"updatePoint":{"line":152,"column":23},"line":152,"code":"test('client navigation', async () => {\n  await untilUpdated(() => page.textContent('a[href=\"/about\"]'), 'About')\n  await page.click('a[href=\"/about\"]')\n  await untilUpdated(() => page.textContent('h1'), 'About')\n  editFile('src/pages/About.vue', (code) => code.replace('About', 'changed'))\n  await untilUpdated(() => page.textContent('h1'), 'changed')\n  await page.click('a[href=\"/\"]')\n  await untilUpdated(() => page.textContent('a[href=\"/\"]'), 'Home')\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"import.meta.url","suites":[],"updatePoint":{"line":162,"column":21},"line":162,"code":"test('import.meta.url', async () => {\n  await page.goto(url)\n  expect(await page.textContent('.protocol')).toEqual('file:')\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"dynamic css file should be preloaded","suites":[],"updatePoint":{"line":167,"column":42},"line":167,"code":"test('dynamic css file should be preloaded', async () => {\n  if (isBuild) {\n    await page.goto(url)\n    const homeHtml = await (await fetch(url)).text()\n    const re = /link rel=\"modulepreload\".*?href=\"\\/assets\\/(Home\\.\\w{8}\\.js)\"/\n    const filename = re.exec(homeHtml)[1]\n    const manifest = require(resolve(\n      process.cwd(),\n      './packages/temp/ssr-vue/dist/client/ssr-manifest.json'\n    ))\n    const depFile = manifest[filename]\n    for (const file of depFile) {\n      expect(homeHtml).toMatch(file)\n    }\n  }\n})","file":"ssr-vue.spec.ts","skipped":false,"dir":"packages/playground/ssr-vue/__tests__"},{"name":"/","suites":[],"updatePoint":{"line":5,"column":7},"line":5,"code":"test('/', async () => {\n  await page.goto(url + '/')\n  expect(await page.textContent('h1')).toMatch('hello from webworker')\n  expect(await page.textContent('.linked')).toMatch('dep from upper directory')\n  expect(await page.textContent('.external')).toMatch('object')\n})","file":"ssr-webworker.spec.ts","skipped":false,"dir":"packages/playground/ssr-webworker/__tests__"},{"name":"should throw an error on build","suites":[],"updatePoint":{"line":4,"column":38},"line":4,"code":"  test('should throw an error on build', () => {\n    const buildError = beforeAllError\n    expect(buildError).toBeTruthy()\n    expect(buildError.message).toMatch(\n      /^parsing .* failed: SyntaxError: Unexpected token } in JSON at position \\d+$/\n    )\n    beforeAllError = null // got expected error, null it here so testsuite does not fail from rethrow in afterAll\n  })","file":"tsconfig-json-load-error.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json-load-error/__tests__"},{"name":"should not output files to dist","suites":[],"updatePoint":{"line":13,"column":39},"line":13,"code":"  test('should not output files to dist', () => {\n    let err\n    try {\n      readFile('dist/index.html')\n    } catch (e) {\n      err = e\n    }\n    expect(err).toBeTruthy()\n    expect(err.code).toBe('ENOENT')\n  })","file":"tsconfig-json-load-error.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json-load-error/__tests__"},{"name":"should log 500 error in browser for malformed tsconfig","suites":[],"updatePoint":{"line":24,"column":62},"line":24,"code":"  test('should log 500 error in browser for malformed tsconfig', () => {\n    // don't test for actual complete message as this might be locale dependant. chrome does log 500 consistently though\n    expect(browserLogs.find((x) => x.includes('500'))).toBeTruthy()\n    expect(browserLogs).not.toContain('tsconfig error fixed, file loaded')\n  })","file":"tsconfig-json-load-error.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json-load-error/__tests__"},{"name":"should show error overlay for tsconfig error","suites":[],"updatePoint":{"line":30,"column":52},"line":30,"code":"  test('should show error overlay for tsconfig error', async () => {\n    const errorOverlay = await page.waitForSelector('vite-error-overlay')\n    expect(errorOverlay).toBeTruthy()\n    const message = await errorOverlay.$$eval('.message-body', (m) => {\n      return m[0].innerHTML\n    })\n    // use regex with variable filename and position values because they are different on win\n    expect(message).toMatch(\n      /^parsing .* failed: SyntaxError: Unexpected token } in JSON at position \\d+$/\n    )\n  })","file":"tsconfig-json-load-error.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json-load-error/__tests__"},{"name":"should reload when tsconfig is changed","suites":[],"updatePoint":{"line":42,"column":46},"line":42,"code":"  test('should reload when tsconfig is changed', async () => {\n    await editFile('has-error/tsconfig.json', (content) => {\n      return content.replace('\"compilerOptions\":', '\"compilerOptions\":{}')\n    })\n    await untilUpdated(() => {\n      return browserLogs.find((x) => x === 'tsconfig error fixed, file loaded')\n    }, 'tsconfig error fixed, file loaded')\n  })","file":"tsconfig-json-load-error.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json-load-error/__tests__"},{"name":"should respected each `tsconfig.json`s compilerOptions","suites":[],"updatePoint":{"line":5,"column":60},"line":5,"code":"test('should respected each `tsconfig.json`s compilerOptions', () => {\n  // main side effect should be called (because of `\"importsNotUsedAsValues\": \"preserve\"`)\n  expect(browserLogs).toContain('main side effect')\n  // main base setter should not be called (because of `\"useDefineForClassFields\": true\"`)\n  expect(browserLogs).not.toContain('data setter in MainBase')\n\n  // nested side effect should not be called (because \"importsNotUsedAsValues\" is not set, defaults to \"remove\")\n  expect(browserLogs).not.toContain('nested side effect')\n  // nested base setter should be called (because of `\"useDefineForClassFields\": false\"`)\n  expect(browserLogs).toContain('data setter in NestedBase')\n\n  // nested-with-extends side effect should be called (because \"importsNotUsedAsValues\" is extended from the main tsconfig.json, which is \"preserve\")\n  expect(browserLogs).toContain('nested-with-extends side effect')\n  // nested-with-extends base setter should be called (because of `\"useDefineForClassFields\": false\"`)\n  expect(browserLogs).toContain('data setter in NestedWithExtendsBase')\n})","file":"tsconfig-json.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json/__tests__"},{"name":"merge tsconfigRaw object","suites":["transformWithEsbuild"],"updatePoint":{"line":23,"column":32},"line":23,"code":"  test('merge tsconfigRaw object', async () => {\n    const main = path.resolve(__dirname, '../src/main.ts')\n    const mainContent = fs.readFileSync(main, 'utf-8')\n    const result = await transformWithEsbuild(mainContent, main, {\n      tsconfigRaw: {\n        compilerOptions: {\n          useDefineForClassFields: false\n        }\n      }\n    })\n    // \"importsNotUsedAsValues\": \"preserve\" from tsconfig.json should still work\n    expect(result.code).toContain('import \"./not-used-type\";')\n  })","file":"tsconfig-json.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json/__tests__"},{"name":"overwrite tsconfigRaw string","suites":["transformWithEsbuild"],"updatePoint":{"line":37,"column":36},"line":37,"code":"  test('overwrite tsconfigRaw string', async () => {\n    const main = path.resolve(__dirname, '../src/main.ts')\n    const mainContent = fs.readFileSync(main, 'utf-8')\n    const result = await transformWithEsbuild(mainContent, main, {\n      tsconfigRaw: `{\n        \"compilerOptions\": {\n          \"useDefineForClassFields\": false\n        }\n      }`\n    })\n    // \"importsNotUsedAsValues\": \"preserve\" from tsconfig.json should not be read\n    // and defaults to \"remove\"\n    expect(result.code).not.toContain('import \"./not-used-type\";')\n  })","file":"tsconfig-json.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json/__tests__"},{"name":"preserveValueImports","suites":["transformWithEsbuild"],"updatePoint":{"line":52,"column":28},"line":52,"code":"  test('preserveValueImports', async () => {\n    const main = path.resolve(__dirname, '../src/main.ts')\n    const mainContent = fs.readFileSync(main, 'utf-8')\n    const result = await transformWithEsbuild(mainContent, main, {\n      tsconfigRaw: {\n        compilerOptions: {\n          useDefineForClassFields: false,\n          preserveValueImports: true\n        }\n      }\n    })\n    // \"importsNotUsedAsValues\": \"preserve\" from tsconfig.json should still work\n    expect(result.code).toContain(\n      'import { MainTypeOnlyClass } from \"./not-used-type\";'\n    )\n  })","file":"tsconfig-json.spec.ts","skipped":false,"dir":"packages/playground/tsconfig-json/__tests__"},{"name":"should render","suites":[],"updatePoint":{"line":3,"column":19},"line":3,"code":"test('should render', async () => {\n  expect(await page.textContent('.named')).toMatch('0')\n  expect(await page.textContent('.named-specifier')).toMatch('1')\n  expect(await page.textContent('.default')).toMatch('2')\n  expect(await page.textContent('.default-tsx')).toMatch('3')\n  expect(await page.textContent('.script')).toMatch('4')\n  expect(await page.textContent('.src-import')).toMatch('5')\n  expect(await page.textContent('.jsx-with-query')).toMatch('6')\n  expect(await page.textContent('.other-ext')).toMatch('Other Ext')\n})","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"should update","suites":[],"updatePoint":{"line":14,"column":19},"line":14,"code":"test('should update', async () => {\n  await page.click('.named')\n  expect(await page.textContent('.named')).toMatch('1')\n  await page.click('.named-specifier')\n  expect(await page.textContent('.named-specifier')).toMatch('2')\n  await page.click('.default')\n  expect(await page.textContent('.default')).toMatch('3')\n  await page.click('.default-tsx')\n  expect(await page.textContent('.default-tsx')).toMatch('4')\n  await page.click('.script')\n  expect(await page.textContent('.script')).toMatch('5')\n  await page.click('.src-import')\n  expect(await page.textContent('.src-import')).toMatch('6')\n  await page.click('.jsx-with-query')\n  expect(await page.textContent('.jsx-with-query')).toMatch('7')\n})","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"hmr: named export","suites":[],"updatePoint":{"line":32,"column":25},"line":32,"code":"  test('hmr: named export', async () => {\n    editFile('Comps.jsx', (code) =>\n      code.replace('named {count', 'named updated {count')\n    )\n    await untilUpdated(() => page.textContent('.named'), 'named updated 0')\n\n    // affect all components in same file\n    expect(await page.textContent('.named-specifier')).toMatch('1')\n    expect(await page.textContent('.default')).toMatch('2')\n    // should not affect other components from different file\n    expect(await page.textContent('.default-tsx')).toMatch('4')\n  })","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"hmr: named export via specifier","suites":[],"updatePoint":{"line":45,"column":39},"line":45,"code":"  test('hmr: named export via specifier', async () => {\n    editFile('Comps.jsx', (code) =>\n      code.replace('named specifier {count', 'named specifier updated {count')\n    )\n    await untilUpdated(\n      () => page.textContent('.named-specifier'),\n      'named specifier updated 1'\n    )\n\n    // affect all components in same file\n    expect(await page.textContent('.default')).toMatch('2')\n    // should not affect other components on the page\n    expect(await page.textContent('.default-tsx')).toMatch('4')\n  })","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"hmr: default export","suites":[],"updatePoint":{"line":60,"column":27},"line":60,"code":"  test('hmr: default export', async () => {\n    editFile('Comps.jsx', (code) =>\n      code.replace('default {count', 'default updated {count')\n    )\n    await untilUpdated(() => page.textContent('.default'), 'default updated 2')\n\n    // should not affect other components on the page\n    expect(await page.textContent('.default-tsx')).toMatch('4')\n  })","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"hmr: named export via specifier","suites":[],"updatePoint":{"line":70,"column":39},"line":70,"code":"  test('hmr: named export via specifier', async () => {\n    // update another component\n    await page.click('.named')\n    expect(await page.textContent('.named')).toMatch('1')\n\n    editFile('Comp.tsx', (code) =>\n      code.replace('default tsx {count', 'default tsx updated {count')\n    )\n    await untilUpdated(\n      () => page.textContent('.default-tsx'),\n      'default tsx updated 3'\n    )\n\n    // should not affect other components on the page\n    expect(await page.textContent('.named')).toMatch('1')\n  })","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"hmr: script in .vue","suites":[],"updatePoint":{"line":87,"column":27},"line":87,"code":"  test('hmr: script in .vue', async () => {\n    editFile('Script.vue', (code) =>\n      code.replace('script {count', 'script updated {count')\n    )\n    await untilUpdated(() => page.textContent('.script'), 'script updated 4')\n\n    expect(await page.textContent('.src-import')).toMatch('6')\n  })","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"hmr: src import in .vue","suites":[],"updatePoint":{"line":96,"column":31},"line":96,"code":"  test('hmr: src import in .vue', async () => {\n    await page.click('.script')\n    editFile('SrcImport.jsx', (code) =>\n      code.replace('src import {count', 'src import updated {count')\n    )\n    await untilUpdated(\n      () => page.textContent('.src-import'),\n      'src import updated 5'\n    )\n\n    expect(await page.textContent('.script')).toMatch('5')\n  })","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"hmr: setup jsx in .vue","suites":[],"updatePoint":{"line":109,"column":30},"line":109,"code":"  test('hmr: setup jsx in .vue', async () => {\n    editFile('setup-syntax-jsx.vue', (code) =>\n      code.replace('let count = ref(100)', 'let count = ref(1000)')\n    )\n    await untilUpdated(() => page.textContent('.setup-jsx'), '1000')\n  })","file":"vue-jsx.spec.ts","skipped":false,"dir":"packages/playground/vue-jsx/__tests__"},{"name":"should render","suites":[],"updatePoint":{"line":3,"column":19},"line":3,"code":"test('should render', async () => {\n  expect(await page.textContent('h1')).toMatch('Vue SFCs')\n})","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should update","suites":[],"updatePoint":{"line":7,"column":19},"line":7,"code":"test('should update', async () => {\n  expect(await page.textContent('.hmr-inc')).toMatch('count is 0')\n  await page.click('.hmr-inc')\n  expect(await page.textContent('.hmr-inc')).toMatch('count is 1')\n})","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"template/script latest syntax support","suites":[],"updatePoint":{"line":13,"column":43},"line":13,"code":"test('template/script latest syntax support', async () => {\n  expect(await page.textContent('.syntax')).toBe('baz')\n})","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should remove comments in prod","suites":[],"updatePoint":{"line":17,"column":36},"line":17,"code":"test('should remove comments in prod', async () => {\n  expect(await page.innerHTML('.comments')).toBe(isBuild ? `` : `<!--hello-->`)\n})","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":":slotted","suites":[],"updatePoint":{"line":21,"column":14},"line":21,"code":"test(':slotted', async () => {\n  expect(await getColor('.slotted')).toBe('red')\n})","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"scan deps from <script setup lang=\"ts\">","suites":["dep scan"],"updatePoint":{"line":26,"column":47},"line":26,"code":"  test('scan deps from <script setup lang=\"ts\">', async () => {\n    expect(await page.textContent('.scan')).toBe('ok')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"find deps on initial scan","suites":["dep scan"],"updatePoint":{"line":30,"column":33},"line":30,"code":"  test('find deps on initial scan', () => {\n    serverLogs.forEach((log) => {\n      expect(log).not.toMatch('new dependencies found')\n    })\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"pug","suites":["pre-processors"],"updatePoint":{"line":38,"column":11},"line":38,"code":"  test('pug', async () => {\n    expect(await page.textContent('p.pug')).toMatch(\n      `This is rendered from <template lang=\"pug\">`\n    )\n    // #1383 pug default doctype\n    expect(await page.textContent('.pug-slot')).toMatch(`slot content`)\n    editFile('PreProcessors.vue', (code) =>\n      code.replace('Pre-Processors', 'Updated')\n    )\n    await untilUpdated(() => page.textContent('h2.pre-processors'), 'Updated')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"scss","suites":["pre-processors"],"updatePoint":{"line":50,"column":12},"line":50,"code":"  test('scss', async () => {\n    const el = await page.$('p.pug')\n    expect(await getColor(el)).toBe('magenta')\n    editFile('PreProcessors.vue', (code) =>\n      code.replace('$color: magenta;', '$color: red;')\n    )\n    await untilUpdated(() => getColor(el), 'red')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"less + scoped","suites":["pre-processors"],"updatePoint":{"line":59,"column":21},"line":59,"code":"  test('less + scoped', async () => {\n    const el = await page.$('p.pug-less')\n    expect(await getColor(el)).toBe('green')\n    editFile('PreProcessors.vue', (code) =>\n      code.replace('@color: green;', '@color: blue;')\n    )\n    await untilUpdated(() => getColor(el), 'blue')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"stylus + change lang","suites":["pre-processors"],"updatePoint":{"line":68,"column":28},"line":68,"code":"  test('stylus + change lang', async () => {\n    expect(await getColor('p.pug-stylus')).toBe('orange')\n    editFile('PreProcessors.vue', (code) =>\n      code\n        .replace('<style lang=\"stylus\">', '<style lang=\"scss\">')\n        .replace('color = orange', '$color: yellow;')\n        .replace('color: color', '{ color: $color; }')\n    )\n    await untilUpdated(() => getColor('p.pug-stylus'), 'yellow')\n    editFile('PreProcessors.vue', (code) =>\n      code.replace('$color: yellow;', '$color: orange;')\n    )\n    await untilUpdated(() => getColor('p.pug-stylus'), 'orange')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"basic","suites":["css modules"],"updatePoint":{"line":85,"column":13},"line":85,"code":"  test('basic', async () => {\n    expect(await getColor('.sfc-css-modules')).toBe('blue')\n    editFile('CssModules.vue', (code) =>\n      code.replace('color: blue;', 'color: red;')\n    )\n    await untilUpdated(() => getColor('.sfc-css-modules'), 'red')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"with preprocessor + name","suites":["css modules"],"updatePoint":{"line":93,"column":32},"line":93,"code":"  test('with preprocessor + name', async () => {\n    expect(await getColor('.sfc-css-modules-with-pre')).toBe('orange')\n    editFile('CssModules.vue', (code) =>\n      code.replace('color: orange;', 'color: blue;')\n    )\n    await untilUpdated(() => getColor('.sfc-css-modules-with-pre'), 'blue')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should not 404","suites":["asset reference"],"updatePoint":{"line":107,"column":22},"line":107,"code":"  test('should not 404', () => {\n    browserLogs.forEach((msg) => {\n      expect(msg).not.toMatch('404')\n    })\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"relative import","suites":["asset reference"],"updatePoint":{"line":113,"column":23},"line":113,"code":"  test('relative import', async () => {\n    const el = await page.$('img.relative-import')\n    expect(await el.evaluate((el) => (el as HTMLImageElement).src)).toMatch(\n      assetMatch\n    )\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"absolute import","suites":["asset reference"],"updatePoint":{"line":120,"column":23},"line":120,"code":"  test('absolute import', async () => {\n    const el = await page.$('img.relative-import')\n    expect(await el.evaluate((el) => (el as HTMLImageElement).src)).toMatch(\n      assetMatch\n    )\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"absolute import from public dir","suites":["asset reference"],"updatePoint":{"line":127,"column":39},"line":127,"code":"  test('absolute import from public dir', async () => {\n    const el = await page.$('img.public-import')\n    expect(await el.evaluate((el) => (el as HTMLImageElement).src)).toMatch(\n      `/icon.png`\n    )\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"svg fragment","suites":["asset reference"],"updatePoint":{"line":134,"column":20},"line":134,"code":"  test('svg fragment', async () => {\n    const img = await page.$('.svg-frag')\n    expect(await img.getAttribute('src')).toMatch(/svg#icon-heart-view$/)\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"relative url from <style>","suites":["asset reference"],"updatePoint":{"line":139,"column":33},"line":139,"code":"  test('relative url from <style>', async () => {\n    const assetMatch = isBuild\n      ? /\\/assets\\/asset\\.\\w{8}\\.png/\n      : '/assets/asset.png'\n    expect(await getBg('.relative-style-url')).toMatch(assetMatch)\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should re-render and preserve state when template is edited","suites":["hmr"],"updatePoint":{"line":148,"column":67},"line":148,"code":"  test('should re-render and preserve state when template is edited', async () => {\n    editFile('Hmr.vue', (code) => code.replace('HMR', 'HMR updated'))\n    await untilUpdated(() => page.textContent('h2.hmr'), 'HMR updated')\n    expect(await page.textContent('.hmr-inc')).toMatch('count is 1')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should update style and preserve state when style is edited","suites":["hmr"],"updatePoint":{"line":154,"column":67},"line":154,"code":"  test('should update style and preserve state when style is edited', async () => {\n    expect(await getColor('.hmr-inc')).toBe('red')\n    editFile('Hmr.vue', (code) => code.replace('color: red;', 'color: blue;'))\n    await untilUpdated(() => getColor('.hmr-inc'), 'blue')\n    expect(await page.textContent('.hmr-inc')).toMatch('count is 1')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should reload and reset state when script is edited","suites":["hmr"],"updatePoint":{"line":161,"column":59},"line":161,"code":"  test('should reload and reset state when script is edited', async () => {\n    editFile('Hmr.vue', (code) =>\n      code.replace('let foo: number = 0', 'let foo: number = 100')\n    )\n    await untilUpdated(() => page.textContent('.hmr-inc'), 'count is 100')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"global hmr for some scenarios","suites":["hmr"],"updatePoint":{"line":168,"column":37},"line":168,"code":"  test('global hmr for some scenarios', async () => {\n    editFile('Hmr.vue', (code) =>\n      code.replace('</template>', '  <Node/>\\n' + '</template>')\n    )\n    await untilUpdated(() => page.innerHTML('.node'), 'this is node')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should re-render when template is emptied","suites":["hmr"],"updatePoint":{"line":175,"column":49},"line":175,"code":"  test('should re-render when template is emptied', async () => {\n    editFile('Hmr.vue', () => '')\n    await untilUpdated(() => page.innerHTML('.hmr-block'), '<!---->')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"script src with ts","suites":["src imports"],"updatePoint":{"line":182,"column":26},"line":182,"code":"  test('script src with ts', async () => {\n    expect(await page.textContent('.src-imports-script')).toMatch(\n      'hello from script src'\n    )\n    editFile('src-import/script.ts', (code) =>\n      code.replace('hello from script src', 'updated')\n    )\n    await untilUpdated(() => page.textContent('.src-imports-script'), 'updated')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"style src","suites":["src imports"],"updatePoint":{"line":192,"column":17},"line":192,"code":"  test('style src', async () => {\n    const el = await page.$('.src-imports-style')\n    expect(await getColor(el)).toBe('tan')\n    editFile('src-import/style.css', (code) =>\n      code.replace('color: tan', 'color: red')\n    )\n    await untilUpdated(() => getColor(el), 'red')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"tempalte src import hmr","suites":["src imports"],"updatePoint":{"line":201,"column":31},"line":201,"code":"  test('tempalte src import hmr', async () => {\n    const el = await page.$('.src-imports-style')\n    editFile('src-import/template.html', (code) =>\n      code.replace('should be tan', 'should be red')\n    )\n    await untilUpdated(() => el.textContent(), 'should be red')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should work","suites":["custom blocks"],"updatePoint":{"line":211,"column":19},"line":211,"code":"  test('should work', async () => {\n    expect(await page.textContent('.custom-block')).toMatch('こんにちは')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should work","suites":["async component"],"updatePoint":{"line":217,"column":19},"line":217,"code":"  test('should work', async () => {\n    expect(await page.textContent('.async-component')).toMatch('ab == ab')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should work","suites":["ref transform"],"updatePoint":{"line":223,"column":19},"line":223,"code":"  test('should work', async () => {\n    expect(await page.textContent('.ref-transform')).toMatch('0')\n    await page.click('.ref-transform')\n    expect(await page.textContent('.ref-transform')).toMatch('1')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should work","suites":["custom element"],"updatePoint":{"line":231,"column":19},"line":231,"code":"  test('should work', async () => {\n    await page.click('.custom-element')\n    expect(await page.textContent('.custom-element')).toMatch('count: 2')\n    expect(await getColor('.custom-element')).toBe('green')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should work","suites":["setup import template"],"updatePoint":{"line":239,"column":19},"line":239,"code":"  test('should work', async () => {\n    expect(await page.textContent('.setup-import-template')).toMatch('0')\n    await page.click('.setup-import-template')\n    expect(await page.textContent('.setup-import-template')).toMatch('1')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should work","suites":["vue worker"],"updatePoint":{"line":247,"column":19},"line":247,"code":"  test('should work', async () => {\n    expect(await page.textContent('.vue-worker')).toMatch('worker load!')\n  })","file":"vue.spec.ts","skipped":false,"dir":"packages/playground/vue/__tests__"},{"name":"should work when inlined","suites":[],"updatePoint":{"line":3,"column":30},"line":3,"code":"test('should work when inlined', async () => {\n  await page.click('.inline-wasm .run')\n  await untilUpdated(() => page.textContent('.inline-wasm .result'), '42')\n})","file":"wasm.spec.ts","skipped":false,"dir":"packages/playground/wasm/__tests__"},{"name":"should work when output","suites":[],"updatePoint":{"line":8,"column":29},"line":8,"code":"test('should work when output', async () => {\n  await page.click('.output-wasm .run')\n  await untilUpdated(() => page.textContent('.output-wasm .result'), '24')\n})","file":"wasm.spec.ts","skipped":false,"dir":"packages/playground/wasm/__tests__"},{"name":"should work when wasm in worker","suites":[],"updatePoint":{"line":13,"column":37},"line":13,"code":"test('should work when wasm in worker', async () => {\n  await untilUpdated(() => page.textContent('.worker-wasm .result'), '3')\n})","file":"wasm.spec.ts","skipped":false,"dir":"packages/playground/wasm/__tests__"},{"name":"normal","suites":[],"updatePoint":{"line":6,"column":12},"line":6,"code":"test('normal', async () => {\n  await page.click('.ping')\n  await untilUpdated(() => page.textContent('.pong'), 'pong')\n  await untilUpdated(\n    () => page.textContent('.mode'),\n    isBuild ? 'production' : 'development'\n  )\n  await untilUpdated(\n    () => page.textContent('.bundle-with-plugin'),\n    'worker bundle with plugin success!'\n  )\n})","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"TS output","suites":[],"updatePoint":{"line":19,"column":15},"line":19,"code":"test('TS output', async () => {\n  await page.click('.ping-ts-output')\n  await untilUpdated(() => page.textContent('.pong-ts-output'), 'pong')\n})","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"inlined","suites":[],"updatePoint":{"line":24,"column":13},"line":24,"code":"test('inlined', async () => {\n  await page.click('.ping-inline')\n  await untilUpdated(() => page.textContent('.pong-inline'), 'pong')\n})","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"shared worker","suites":[],"line":47,"code":"test.concurrent.each([[true], [false]])('shared worker', async (doTick) => {\n  if (doTick) {\n    await page.click('.tick-shared')\n  }\n  await waitSharedWorkerTick(page)\n})","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"worker emitted","suites":[],"updatePoint":{"line":54,"column":20},"line":54,"code":"test('worker emitted', async () => {\n  await untilUpdated(() => page.textContent('.nested-worker'), 'pong')\n})","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"inlined code generation","suites":[],"updatePoint":{"line":61,"column":31},"line":61,"code":"  test('inlined code generation', async () => {\n    const files = fs.readdirSync(assetsDir)\n    expect(files.length).toBe(22)\n    const index = files.find((f) => f.includes('main-module'))\n    const content = fs.readFileSync(path.resolve(assetsDir, index), 'utf-8')\n    const worker = files.find((f) => f.includes('my-worker'))\n    const workerContent = fs.readFileSync(\n      path.resolve(assetsDir, worker),\n      'utf-8'\n    )\n\n    // worker should have all imports resolved and no exports\n    expect(workerContent).not.toMatch(`import`)\n    expect(workerContent).not.toMatch(`export`)\n    // chunk\n    expect(content).toMatch(`new Worker(\"/es/assets`)\n    expect(content).toMatch(`new SharedWorker(\"/es/assets`)\n    // inlined\n    expect(content).toMatch(`(window.URL||window.webkitURL).createObjectURL`)\n    expect(content).toMatch(`window.Blob`)\n  })","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"module worker","suites":[],"updatePoint":{"line":84,"column":19},"line":84,"code":"test('module worker', async () => {\n  expect(await page.textContent('.shared-worker-import-meta-url')).toMatch(\n    'A string'\n  )\n})","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"classic worker","suites":[],"updatePoint":{"line":90,"column":20},"line":90,"code":"test('classic worker', async () => {\n  expect(await page.textContent('.classic-worker')).toMatch('A classic')\n  expect(await page.textContent('.classic-shared-worker')).toMatch('A classic')\n})","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"emit chunk","suites":[],"updatePoint":{"line":95,"column":16},"line":95,"code":"test('emit chunk', async () => {\n  expect(await page.textContent('.emti-chunk-worker')).toMatch(\n    '[\"A string\",{\"type\":\"emit-chunk-sub-worker\",\"data\":\"A string\"},{\"type\":\"module-and-worker:worker\",\"data\":\"A string\"},{\"type\":\"module-and-worker:module\",\"data\":\"module and worker\"},{\"type\":\"emit-chunk-sub-worker\",\"data\":{\"module\":\"module and worker\",\"msg1\":\"module1\",\"msg2\":\"module2\",\"msg3\":\"module3\"}}]'\n  )\n  expect(await page.textContent('.emti-chunk-dynamic-import-worker')).toMatch(\n    '\"A string/es/\"'\n  )\n})","file":"es/es-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"normal","suites":[],"updatePoint":{"line":6,"column":12},"line":6,"code":"test('normal', async () => {\n  await page.click('.ping')\n  await untilUpdated(() => page.textContent('.pong'), 'pong')\n  await untilUpdated(\n    () => page.textContent('.mode'),\n    isBuild ? 'production' : 'development'\n  )\n  await untilUpdated(\n    () => page.textContent('.bundle-with-plugin'),\n    'worker bundle with plugin success!'\n  )\n})","file":"iife/worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"TS output","suites":[],"updatePoint":{"line":19,"column":15},"line":19,"code":"test('TS output', async () => {\n  await page.click('.ping-ts-output')\n  await untilUpdated(() => page.textContent('.pong-ts-output'), 'pong')\n})","file":"iife/worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"inlined","suites":[],"updatePoint":{"line":24,"column":13},"line":24,"code":"test('inlined', async () => {\n  await page.click('.ping-inline')\n  await untilUpdated(() => page.textContent('.pong-inline'), 'pong')\n})","file":"iife/worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"shared worker","suites":[],"line":47,"code":"test.concurrent.each([[true], [false]])('shared worker', async (doTick) => {\n  if (doTick) {\n    await page.click('.tick-shared')\n  }\n  await waitSharedWorkerTick(page)\n})","file":"iife/worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"worker emitted and import.meta.url in nested worker","suites":[],"updatePoint":{"line":54,"column":57},"line":54,"code":"test('worker emitted and import.meta.url in nested worker', async () => {\n  await untilUpdated(\n    () => page.textContent('.nested-worker'),\n    'pong http://localhost:3000/iife/sub-worker.js?worker_file'\n  )\n})","file":"iife/worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"inlined code generation","suites":[],"updatePoint":{"line":64,"column":31},"line":64,"code":"  test('inlined code generation', async () => {\n    const files = fs.readdirSync(assetsDir)\n    expect(files.length).toBe(13)\n    const index = files.find((f) => f.includes('main-module'))\n    const content = fs.readFileSync(path.resolve(assetsDir, index), 'utf-8')\n    const worker = files.find((f) => f.includes('my-worker'))\n    const workerContent = fs.readFileSync(\n      path.resolve(assetsDir, worker),\n      'utf-8'\n    )\n\n    // worker should have all imports resolved and no exports\n    expect(workerContent).not.toMatch(`import`)\n    expect(workerContent).not.toMatch(`export`)\n    // chunk\n    expect(content).toMatch(`new Worker(\"/iife/assets`)\n    expect(content).toMatch(`new SharedWorker(\"/iife/assets`)\n    // inlined\n    expect(content).toMatch(`(window.URL||window.webkitURL).createObjectURL`)\n    expect(content).toMatch(`window.Blob`)\n  })","file":"iife/worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"module worker","suites":[],"updatePoint":{"line":87,"column":19},"line":87,"code":"test('module worker', async () => {\n  expect(await page.textContent('.shared-worker-import-meta-url')).toMatch(\n    'A string'\n  )\n})","file":"iife/worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"classic worker","suites":[],"updatePoint":{"line":93,"column":20},"line":93,"code":"test('classic worker', async () => {\n  expect(await page.textContent('.classic-worker')).toMatch('A classic')\n  expect(await page.textContent('.classic-shared-worker')).toMatch('A classic')\n})","file":"iife/worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"sourcemap generation for web workers","suites":[],"updatePoint":{"line":9,"column":44},"line":9,"code":"  test('sourcemap generation for web workers', async () => {\n    const files = fs.readdirSync(assetsDir)\n    // should have 2 worker chunk\n    expect(files.length).toBe(25)\n    const index = files.find((f) => f.includes('main-module'))\n    const content = fs.readFileSync(path.resolve(assetsDir, index), 'utf-8')\n    const indexSourcemap = getSourceMapUrl(content)\n    const worker = files.find((f) => /^my-worker\\.\\w+\\.js$/.test(f))\n    const workerContent = fs.readFileSync(\n      path.resolve(assetsDir, worker),\n      'utf-8'\n    )\n    const workerSourcemap = getSourceMapUrl(workerContent)\n    const sharedWorker = files.find((f) =>\n      /^my-shared-worker\\.\\w+\\.js$/.test(f)\n    )\n    const sharedWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, sharedWorker),\n      'utf-8'\n    )\n    const sharedWorkerSourcemap = getSourceMapUrl(sharedWorkerContent)\n    const possibleTsOutputWorker = files.find((f) =>\n      /^possible-ts-output-worker\\.\\w+\\.js$/.test(f)\n    )\n    const possibleTsOutputWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, possibleTsOutputWorker),\n      'utf-8'\n    )\n    const possibleTsOutputWorkerSourcemap = getSourceMapUrl(\n      possibleTsOutputWorkerContent\n    )\n    const workerNestedWorker = files.find((f) =>\n      /^worker-nested-worker\\.\\w+\\.js$/.test(f)\n    )\n    const workerNestedWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, workerNestedWorker),\n      'utf-8'\n    )\n    const workerNestedWorkerSourcemap = getSourceMapUrl(\n      workerNestedWorkerContent\n    )\n    const subWorker = files.find((f) => /^sub-worker\\.\\w+\\.js$/.test(f))\n    const subWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, subWorker),\n      'utf-8'\n    )\n    const subWorkerSourcemap = getSourceMapUrl(subWorkerContent)\n\n    expect(files).toContainEqual(expect.stringMatching(/^index\\.\\w+\\.js\\.map$/))\n    expect(files).toContainEqual(\n      expect.stringMatching(/^my-worker\\.\\w+\\.js\\.map$/)\n    )\n    expect(files).toContainEqual(\n      expect.stringMatching(/^my-shared-worker\\.\\w+\\.js\\.map$/)\n    )\n    expect(files).toContainEqual(\n      expect.stringMatching(/^possible-ts-output-worker\\.\\w+\\.js\\.map$/)\n    )\n    expect(files).toContainEqual(\n      expect.stringMatching(/^worker-nested-worker\\.\\w+\\.js\\.map$/)\n    )\n    expect(files).toContainEqual(\n      expect.stringMatching(/^sub-worker\\.\\w+\\.js\\.map$/)\n    )\n\n    // sourcemap should exist and have a data URL\n    expect(indexSourcemap).toBe(null)\n    expect(workerSourcemap).toBe(null)\n    expect(sharedWorkerSourcemap).toBe(null)\n    expect(possibleTsOutputWorkerSourcemap).toBe(null)\n    expect(workerNestedWorkerSourcemap).toBe(null)\n    expect(subWorkerSourcemap).toBe(null)\n\n    // worker should have all imports resolved and no exports\n    expect(workerContent).not.toMatch(`import`)\n    expect(workerContent).not.toMatch(`export`)\n\n    // shared worker should have all imports resolved and no exports\n    expect(sharedWorkerContent).not.toMatch(`import`)\n    expect(sharedWorkerContent).not.toMatch(`export`)\n\n    // chunk\n    expect(content).toMatch(\n      `new Worker(\"/iife-sourcemap-hidden/assets/my-worker`\n    )\n    expect(content).toMatch(`new Worker(\"data:application/javascript;base64`)\n    expect(content).toMatch(\n      `new Worker(\"/iife-sourcemap-hidden/assets/possible-ts-output-worker`\n    )\n    expect(content).toMatch(\n      `new Worker(\"/iife-sourcemap-hidden/assets/worker-nested-worker`\n    )\n    expect(content).toMatch(\n      `new SharedWorker(\"/iife-sourcemap-hidden/assets/my-shared-worker`\n    )\n\n    // inlined\n    expect(content).toMatch(`(window.URL||window.webkitURL).createObjectURL`)\n    expect(content).toMatch(`window.Blob`)\n\n    expect(workerNestedWorkerContent).toMatch(\n      `new Worker(\"/iife-sourcemap-hidden/assets/sub-worker`\n    )\n  })","file":"sourcemap-hidden/sourcemap-hidden-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"true","suites":[],"updatePoint":{"line":116,"column":12},"line":116,"code":"  test('true', () => {\n    expect(true).toBe(true)\n  })","file":"sourcemap-hidden/sourcemap-hidden-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"sourcemap generation for web workers","suites":[],"updatePoint":{"line":9,"column":44},"line":9,"code":"  test('sourcemap generation for web workers', async () => {\n    const files = fs.readdirSync(assetsDir)\n    // should have 2 worker chunk\n    expect(files.length).toBe(13)\n    const index = files.find((f) => f.includes('main-module'))\n    const content = fs.readFileSync(path.resolve(assetsDir, index), 'utf-8')\n    const indexSourcemap = getSourceMapUrl(content)\n    const worker = files.find((f) => /^my-worker\\.\\w+\\.js$/.test(f))\n    const workerContent = fs.readFileSync(\n      path.resolve(assetsDir, worker),\n      'utf-8'\n    )\n    const workerSourcemap = getSourceMapUrl(workerContent)\n    const sharedWorker = files.find((f) =>\n      /^my-shared-worker\\.\\w+\\.js$/.test(f)\n    )\n    const sharedWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, sharedWorker),\n      'utf-8'\n    )\n    const sharedWorkerSourcemap = getSourceMapUrl(sharedWorkerContent)\n    const possibleTsOutputWorker = files.find((f) =>\n      /^possible-ts-output-worker\\.\\w+\\.js$/.test(f)\n    )\n    const possibleTsOutputWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, possibleTsOutputWorker),\n      'utf-8'\n    )\n    const possibleTsOutputWorkerSourcemap = getSourceMapUrl(\n      possibleTsOutputWorkerContent\n    )\n    const workerNestedWorker = files.find((f) =>\n      /^worker-nested-worker\\.\\w+\\.js$/.test(f)\n    )\n    const workerNestedWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, workerNestedWorker),\n      'utf-8'\n    )\n    const workerNestedWorkerSourcemap = getSourceMapUrl(\n      workerNestedWorkerContent\n    )\n    const subWorker = files.find((f) => /^sub-worker\\.\\w+\\.js$/.test(f))\n    const subWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, subWorker),\n      'utf-8'\n    )\n    const subWorkerSourcemap = getSourceMapUrl(subWorkerContent)\n\n    // sourcemap should exist and have a data URL\n    expect(indexSourcemap).toMatch(/^data:/)\n    expect(workerSourcemap).toMatch(/^data:/)\n    expect(sharedWorkerSourcemap).toMatch(/^data:/)\n    expect(possibleTsOutputWorkerSourcemap).toMatch(/^data:/)\n    expect(workerNestedWorkerSourcemap).toMatch(/^data:/)\n    expect(subWorkerSourcemap).toMatch(/^data:/)\n\n    // worker should have all imports resolved and no exports\n    expect(workerContent).not.toMatch(`import`)\n    expect(workerContent).not.toMatch(`export`)\n\n    // shared worker should have all imports resolved and no exports\n    expect(sharedWorkerContent).not.toMatch(`import`)\n    expect(sharedWorkerContent).not.toMatch(`export`)\n\n    // chunk\n    expect(content).toMatch(\n      `new Worker(\"/iife-sourcemap-inline/assets/my-worker`\n    )\n    expect(content).toMatch(`new Worker(\"data:application/javascript;base64`)\n    expect(content).toMatch(\n      `new Worker(\"/iife-sourcemap-inline/assets/possible-ts-output-worker`\n    )\n    expect(content).toMatch(\n      `new Worker(\"/iife-sourcemap-inline/assets/worker-nested-worker`\n    )\n    expect(content).toMatch(\n      `new SharedWorker(\"/iife-sourcemap-inline/assets/my-shared-worker`\n    )\n\n    // inlined\n    expect(content).toMatch(`(window.URL||window.webkitURL).createObjectURL`)\n    expect(content).toMatch(`window.Blob`)\n\n    expect(workerNestedWorkerContent).toMatch(\n      `new Worker(\"/iife-sourcemap-inline/assets/sub-worker`\n    )\n  })","file":"sourcemap-inline/sourcemap-inline-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"true","suites":[],"updatePoint":{"line":99,"column":12},"line":99,"code":"  test('true', () => {\n    expect(true).toBe(true)\n  })","file":"sourcemap-inline/sourcemap-inline-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"sourcemap generation for web workers","suites":[],"updatePoint":{"line":9,"column":44},"line":9,"code":"  test('sourcemap generation for web workers', async () => {\n    const files = fs.readdirSync(assetsDir)\n    // should have 2 worker chunk\n    expect(files.length).toBe(25)\n    const index = files.find((f) => f.includes('main-module'))\n    const content = fs.readFileSync(path.resolve(assetsDir, index), 'utf-8')\n    const indexSourcemap = getSourceMapUrl(content)\n    const worker = files.find((f) => /^my-worker\\.\\w+\\.js$/.test(f))\n    const workerContent = fs.readFileSync(\n      path.resolve(assetsDir, worker),\n      'utf-8'\n    )\n    const workerSourcemap = getSourceMapUrl(workerContent)\n    const sharedWorker = files.find((f) =>\n      /^my-shared-worker\\.\\w+\\.js$/.test(f)\n    )\n    const sharedWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, sharedWorker),\n      'utf-8'\n    )\n    const sharedWorkerSourcemap = getSourceMapUrl(sharedWorkerContent)\n    const possibleTsOutputWorker = files.find((f) =>\n      /^possible-ts-output-worker\\.\\w+\\.js$/.test(f)\n    )\n    const possibleTsOutputWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, possibleTsOutputWorker),\n      'utf-8'\n    )\n    const possibleTsOutputWorkerSourcemap = getSourceMapUrl(\n      possibleTsOutputWorkerContent\n    )\n    const workerNestedWorker = files.find((f) =>\n      /^worker-nested-worker\\.\\w+\\.js$/.test(f)\n    )\n    const workerNestedWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, workerNestedWorker),\n      'utf-8'\n    )\n    const workerNestedWorkerSourcemap = getSourceMapUrl(\n      workerNestedWorkerContent\n    )\n    const subWorker = files.find((f) => /^sub-worker\\.\\w+\\.js$/.test(f))\n    const subWorkerContent = fs.readFileSync(\n      path.resolve(assetsDir, subWorker),\n      'utf-8'\n    )\n    const subWorkerSourcemap = getSourceMapUrl(subWorkerContent)\n\n    expect(files).toContainEqual(expect.stringMatching(/^index\\.\\w+\\.js\\.map$/))\n    expect(files).toContainEqual(\n      expect.stringMatching(/^my-worker\\.\\w+\\.js\\.map$/)\n    )\n    expect(files).toContainEqual(\n      expect.stringMatching(/^my-shared-worker\\.\\w+\\.js\\.map$/)\n    )\n    expect(files).toContainEqual(\n      expect.stringMatching(/^possible-ts-output-worker\\.\\w+\\.js\\.map$/)\n    )\n    expect(files).toContainEqual(\n      expect.stringMatching(/^worker-nested-worker\\.\\w+\\.js\\.map$/)\n    )\n    expect(files).toContainEqual(\n      expect.stringMatching(/^sub-worker\\.\\w+\\.js\\.map$/)\n    )\n\n    // sourcemap should exist and have a data URL\n    expect(indexSourcemap).toMatch(/^main-module\\.\\w+\\.js\\.map$/)\n    expect(workerSourcemap).toMatch(/^my-worker\\.\\w+\\.js\\.map$/)\n    expect(sharedWorkerSourcemap).toMatch(/^my-shared-worker\\.\\w+\\.js\\.map$/)\n    expect(possibleTsOutputWorkerSourcemap).toMatch(\n      /^possible-ts-output-worker\\.\\w+\\.js\\.map$/\n    )\n    expect(workerNestedWorkerSourcemap).toMatch(\n      /^worker-nested-worker\\.\\w+\\.js\\.map$/\n    )\n    expect(subWorkerSourcemap).toMatch(/^sub-worker\\.\\w+\\.js\\.map$/)\n\n    // worker should have all imports resolved and no exports\n    expect(workerContent).not.toMatch(`import`)\n    expect(workerContent).not.toMatch(`export`)\n\n    // shared worker should have all imports resolved and no exports\n    expect(sharedWorkerContent).not.toMatch(`import`)\n    expect(sharedWorkerContent).not.toMatch(`export`)\n\n    // chunk\n    expect(content).toMatch(`new Worker(\"/iife-sourcemap/assets/my-worker`)\n    expect(content).toMatch(`new Worker(\"data:application/javascript;base64`)\n    expect(content).toMatch(\n      `new Worker(\"/iife-sourcemap/assets/possible-ts-output-worker`\n    )\n    expect(content).toMatch(\n      `new Worker(\"/iife-sourcemap/assets/worker-nested-worker`\n    )\n    expect(content).toMatch(\n      `new SharedWorker(\"/iife-sourcemap/assets/my-shared-worker`\n    )\n\n    // inlined\n    expect(content).toMatch(`(window.URL||window.webkitURL).createObjectURL`)\n    expect(content).toMatch(`window.Blob`)\n\n    expect(workerNestedWorkerContent).toMatch(\n      `new Worker(\"/iife-sourcemap/assets/sub-worker`\n    )\n  })","file":"sourcemap/sourcemap-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"},{"name":"true","suites":[],"updatePoint":{"line":118,"column":12},"line":118,"code":"  test('true', () => {\n    expect(true).toBe(true)\n  })","file":"sourcemap/sourcemap-worker.spec.ts","skipped":false,"dir":"packages/playground/worker/__tests__"}]}